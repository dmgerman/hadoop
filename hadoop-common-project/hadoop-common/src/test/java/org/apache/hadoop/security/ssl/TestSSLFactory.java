begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security.ssl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|ssl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|alias
operator|.
name|CredentialProviderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|alias
operator|.
name|JavaKeyStoreProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|HttpsURLConnection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLEngine
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLEngineResult
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLHandshakeException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLSession
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|GeneralSecurityException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyPair
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|TestSSLFactory
specifier|public
class|class
name|TestSSLFactory
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestSSLFactory
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|BASEDIR
specifier|private
specifier|static
specifier|final
name|String
name|BASEDIR
init|=
name|GenericTestUtils
operator|.
name|getTempPath
argument_list|(
name|TestSSLFactory
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|KEYSTORES_DIR
specifier|private
specifier|static
specifier|final
name|String
name|KEYSTORES_DIR
init|=
operator|new
name|File
argument_list|(
name|BASEDIR
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
DECL|field|sslConfsDir
specifier|private
name|String
name|sslConfsDir
decl_stmt|;
DECL|field|excludeCiphers
specifier|private
specifier|static
specifier|final
name|String
name|excludeCiphers
init|=
literal|"TLS_ECDHE_RSA_WITH_RC4_128_SHA,"
operator|+
literal|"SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA,  \n"
operator|+
literal|"SSL_RSA_WITH_DES_CBC_SHA,"
operator|+
literal|"SSL_DHE_RSA_WITH_DES_CBC_SHA,  "
operator|+
literal|"SSL_RSA_EXPORT_WITH_RC4_40_MD5,\t \n"
operator|+
literal|"SSL_RSA_EXPORT_WITH_DES40_CBC_SHA,"
operator|+
literal|"SSL_RSA_WITH_RC4_128_MD5"
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setUp ()
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|base
init|=
operator|new
name|File
argument_list|(
name|BASEDIR
argument_list|)
decl_stmt|;
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|base
argument_list|)
expr_stmt|;
name|base
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
DECL|method|createConfiguration (boolean clientCert, boolean trustStore)
specifier|private
name|Configuration
name|createConfiguration
parameter_list|(
name|boolean
name|clientCert
parameter_list|,
name|boolean
name|trustStore
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|KeyStoreTestUtil
operator|.
name|setupSSLConfig
argument_list|(
name|KEYSTORES_DIR
argument_list|,
name|sslConfsDir
argument_list|,
name|conf
argument_list|,
name|clientCert
argument_list|,
name|trustStore
argument_list|,
name|excludeCiphers
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
annotation|@
name|After
annotation|@
name|Before
DECL|method|cleanUp ()
specifier|public
name|void
name|cleanUp
parameter_list|()
throws|throws
name|Exception
block|{
name|sslConfsDir
operator|=
name|KeyStoreTestUtil
operator|.
name|getClasspathDir
argument_list|(
name|TestSSLFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|KeyStoreTestUtil
operator|.
name|cleanupSSLConfig
argument_list|(
name|KEYSTORES_DIR
argument_list|,
name|sslConfsDir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
DECL|method|clientMode ()
specifier|public
name|void
name|clientMode
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|createConfiguration
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|SSLFactory
name|sslFactory
init|=
operator|new
name|SSLFactory
argument_list|(
name|SSLFactory
operator|.
name|Mode
operator|.
name|CLIENT
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|sslFactory
operator|.
name|init
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|sslFactory
operator|.
name|createSSLSocketFactory
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|sslFactory
operator|.
name|getHostnameVerifier
argument_list|()
argument_list|)
expr_stmt|;
name|sslFactory
operator|.
name|createSSLServerSocketFactory
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|sslFactory
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|serverMode (boolean clientCert, boolean socket)
specifier|private
name|void
name|serverMode
parameter_list|(
name|boolean
name|clientCert
parameter_list|,
name|boolean
name|socket
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|createConfiguration
argument_list|(
name|clientCert
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|SSLFactory
name|sslFactory
init|=
operator|new
name|SSLFactory
argument_list|(
name|SSLFactory
operator|.
name|Mode
operator|.
name|SERVER
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|sslFactory
operator|.
name|init
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|sslFactory
operator|.
name|createSSLServerSocketFactory
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|clientCert
argument_list|,
name|sslFactory
operator|.
name|isClientCertRequired
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|socket
condition|)
block|{
name|sslFactory
operator|.
name|createSSLSocketFactory
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|sslFactory
operator|.
name|getHostnameVerifier
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|sslFactory
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
DECL|method|serverModeWithoutClientCertsSocket ()
specifier|public
name|void
name|serverModeWithoutClientCertsSocket
parameter_list|()
throws|throws
name|Exception
block|{
name|serverMode
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
DECL|method|serverModeWithClientCertsSocket ()
specifier|public
name|void
name|serverModeWithClientCertsSocket
parameter_list|()
throws|throws
name|Exception
block|{
name|serverMode
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
DECL|method|serverModeWithoutClientCertsVerifier ()
specifier|public
name|void
name|serverModeWithoutClientCertsVerifier
parameter_list|()
throws|throws
name|Exception
block|{
name|serverMode
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
DECL|method|serverModeWithClientCertsVerifier ()
specifier|public
name|void
name|serverModeWithClientCertsVerifier
parameter_list|()
throws|throws
name|Exception
block|{
name|serverMode
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|runDelegatedTasks (SSLEngineResult result, SSLEngine engine)
specifier|private
name|void
name|runDelegatedTasks
parameter_list|(
name|SSLEngineResult
name|result
parameter_list|,
name|SSLEngine
name|engine
parameter_list|)
throws|throws
name|Exception
block|{
name|Runnable
name|runnable
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|getHandshakeStatus
argument_list|()
operator|==
name|SSLEngineResult
operator|.
name|HandshakeStatus
operator|.
name|NEED_TASK
condition|)
block|{
while|while
condition|(
operator|(
name|runnable
operator|=
name|engine
operator|.
name|getDelegatedTask
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"running delegated task..."
argument_list|)
expr_stmt|;
name|runnable
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
name|SSLEngineResult
operator|.
name|HandshakeStatus
name|hsStatus
init|=
name|engine
operator|.
name|getHandshakeStatus
argument_list|()
decl_stmt|;
if|if
condition|(
name|hsStatus
operator|==
name|SSLEngineResult
operator|.
name|HandshakeStatus
operator|.
name|NEED_TASK
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"handshake shouldn't need additional tasks"
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|isEngineClosed (SSLEngine engine)
specifier|private
specifier|static
name|boolean
name|isEngineClosed
parameter_list|(
name|SSLEngine
name|engine
parameter_list|)
block|{
return|return
name|engine
operator|.
name|isOutboundDone
argument_list|()
operator|&&
name|engine
operator|.
name|isInboundDone
argument_list|()
return|;
block|}
DECL|method|checkTransfer (ByteBuffer a, ByteBuffer b)
specifier|private
specifier|static
name|void
name|checkTransfer
parameter_list|(
name|ByteBuffer
name|a
parameter_list|,
name|ByteBuffer
name|b
parameter_list|)
throws|throws
name|Exception
block|{
name|a
operator|.
name|flip
argument_list|()
expr_stmt|;
name|b
operator|.
name|flip
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"transfer did not complete"
argument_list|,
name|a
operator|.
name|equals
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|position
argument_list|(
name|a
operator|.
name|limit
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|position
argument_list|(
name|b
operator|.
name|limit
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|limit
argument_list|(
name|a
operator|.
name|capacity
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|limit
argument_list|(
name|b
operator|.
name|capacity
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testServerWeakCiphers ()
specifier|public
name|void
name|testServerWeakCiphers
parameter_list|()
throws|throws
name|Exception
block|{
comment|// a simple test case to verify that SSL server rejects weak cipher suites,
comment|// inspired by https://docs.oracle.com/javase/8/docs/technotes/guides/
comment|//            security/jsse/samples/sslengine/SSLEngineSimpleDemo.java
comment|// set up a client and a server SSLEngine object, and let them exchange
comment|// data over ByteBuffer instead of network socket.
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|SSLFactory
operator|.
name|LOG
argument_list|,
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|createConfiguration
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|SSLFactory
name|serverSSLFactory
init|=
operator|new
name|SSLFactory
argument_list|(
name|SSLFactory
operator|.
name|Mode
operator|.
name|SERVER
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|SSLFactory
name|clientSSLFactory
init|=
operator|new
name|SSLFactory
argument_list|(
name|SSLFactory
operator|.
name|Mode
operator|.
name|CLIENT
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|serverSSLFactory
operator|.
name|init
argument_list|()
expr_stmt|;
name|clientSSLFactory
operator|.
name|init
argument_list|()
expr_stmt|;
name|SSLEngine
name|serverSSLEngine
init|=
name|serverSSLFactory
operator|.
name|createSSLEngine
argument_list|()
decl_stmt|;
name|SSLEngine
name|clientSSLEngine
init|=
name|clientSSLFactory
operator|.
name|createSSLEngine
argument_list|()
decl_stmt|;
comment|// client selects cipher suites excluded by server
name|clientSSLEngine
operator|.
name|setEnabledCipherSuites
argument_list|(
name|StringUtils
operator|.
name|getTrimmedStrings
argument_list|(
name|excludeCiphers
argument_list|)
argument_list|)
expr_stmt|;
comment|// use the same buffer size for server and client.
name|SSLSession
name|session
init|=
name|clientSSLEngine
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|int
name|appBufferMax
init|=
name|session
operator|.
name|getApplicationBufferSize
argument_list|()
decl_stmt|;
name|int
name|netBufferMax
init|=
name|session
operator|.
name|getPacketBufferSize
argument_list|()
decl_stmt|;
name|ByteBuffer
name|clientOut
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
literal|"client"
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|ByteBuffer
name|clientIn
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|appBufferMax
argument_list|)
decl_stmt|;
name|ByteBuffer
name|serverOut
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
literal|"server"
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|ByteBuffer
name|serverIn
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|appBufferMax
argument_list|)
decl_stmt|;
comment|// send data from client to server
name|ByteBuffer
name|cTOs
init|=
name|ByteBuffer
operator|.
name|allocateDirect
argument_list|(
name|netBufferMax
argument_list|)
decl_stmt|;
comment|// send data from server to client
name|ByteBuffer
name|sTOc
init|=
name|ByteBuffer
operator|.
name|allocateDirect
argument_list|(
name|netBufferMax
argument_list|)
decl_stmt|;
name|boolean
name|dataDone
init|=
literal|false
decl_stmt|;
try|try
block|{
comment|/**        * Server and client engines call wrap()/unwrap() to perform handshaking,        * until both engines are closed.        */
while|while
condition|(
operator|!
name|isEngineClosed
argument_list|(
name|clientSSLEngine
argument_list|)
operator|||
operator|!
name|isEngineClosed
argument_list|(
name|serverSSLEngine
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"client wrap "
operator|+
name|wrap
argument_list|(
name|clientSSLEngine
argument_list|,
name|clientOut
argument_list|,
name|cTOs
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"server wrap "
operator|+
name|wrap
argument_list|(
name|serverSSLEngine
argument_list|,
name|serverOut
argument_list|,
name|sTOc
argument_list|)
argument_list|)
expr_stmt|;
name|cTOs
operator|.
name|flip
argument_list|()
expr_stmt|;
name|sTOc
operator|.
name|flip
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"client unwrap "
operator|+
name|unwrap
argument_list|(
name|clientSSLEngine
argument_list|,
name|sTOc
argument_list|,
name|clientIn
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"server unwrap "
operator|+
name|unwrap
argument_list|(
name|serverSSLEngine
argument_list|,
name|cTOs
argument_list|,
name|serverIn
argument_list|)
argument_list|)
expr_stmt|;
name|cTOs
operator|.
name|compact
argument_list|()
expr_stmt|;
name|sTOc
operator|.
name|compact
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|dataDone
operator|&&
operator|(
name|clientOut
operator|.
name|limit
argument_list|()
operator|==
name|serverIn
operator|.
name|position
argument_list|()
operator|)
operator|&&
operator|(
name|serverOut
operator|.
name|limit
argument_list|()
operator|==
name|clientIn
operator|.
name|position
argument_list|()
operator|)
condition|)
block|{
name|checkTransfer
argument_list|(
name|serverOut
argument_list|,
name|clientIn
argument_list|)
expr_stmt|;
name|checkTransfer
argument_list|(
name|clientOut
argument_list|,
name|serverIn
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"closing client"
argument_list|)
expr_stmt|;
name|clientSSLEngine
operator|.
name|closeOutbound
argument_list|()
expr_stmt|;
name|dataDone
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|fail
argument_list|(
literal|"The exception was not thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SSLHandshakeException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"no cipher suites in common"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|wrap (SSLEngine engine, ByteBuffer from, ByteBuffer to)
specifier|private
name|SSLEngineResult
name|wrap
parameter_list|(
name|SSLEngine
name|engine
parameter_list|,
name|ByteBuffer
name|from
parameter_list|,
name|ByteBuffer
name|to
parameter_list|)
throws|throws
name|Exception
block|{
name|SSLEngineResult
name|result
init|=
name|engine
operator|.
name|wrap
argument_list|(
name|from
argument_list|,
name|to
argument_list|)
decl_stmt|;
name|runDelegatedTasks
argument_list|(
name|result
argument_list|,
name|engine
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|unwrap (SSLEngine engine, ByteBuffer from, ByteBuffer to)
specifier|private
name|SSLEngineResult
name|unwrap
parameter_list|(
name|SSLEngine
name|engine
parameter_list|,
name|ByteBuffer
name|from
parameter_list|,
name|ByteBuffer
name|to
parameter_list|)
throws|throws
name|Exception
block|{
name|SSLEngineResult
name|result
init|=
name|engine
operator|.
name|unwrap
argument_list|(
name|from
argument_list|,
name|to
argument_list|)
decl_stmt|;
name|runDelegatedTasks
argument_list|(
name|result
argument_list|,
name|engine
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Test
DECL|method|validHostnameVerifier ()
specifier|public
name|void
name|validHostnameVerifier
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|createConfiguration
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|conf
operator|.
name|unset
argument_list|(
name|SSLFactory
operator|.
name|SSL_HOSTNAME_VERIFIER_KEY
argument_list|)
expr_stmt|;
name|SSLFactory
name|sslFactory
init|=
operator|new
name|SSLFactory
argument_list|(
name|SSLFactory
operator|.
name|Mode
operator|.
name|CLIENT
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|sslFactory
operator|.
name|init
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"DEFAULT"
argument_list|,
name|sslFactory
operator|.
name|getHostnameVerifier
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sslFactory
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|SSLFactory
operator|.
name|SSL_HOSTNAME_VERIFIER_KEY
argument_list|,
literal|"ALLOW_ALL"
argument_list|)
expr_stmt|;
name|sslFactory
operator|=
operator|new
name|SSLFactory
argument_list|(
name|SSLFactory
operator|.
name|Mode
operator|.
name|CLIENT
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|sslFactory
operator|.
name|init
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"ALLOW_ALL"
argument_list|,
name|sslFactory
operator|.
name|getHostnameVerifier
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sslFactory
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|SSLFactory
operator|.
name|SSL_HOSTNAME_VERIFIER_KEY
argument_list|,
literal|"DEFAULT_AND_LOCALHOST"
argument_list|)
expr_stmt|;
name|sslFactory
operator|=
operator|new
name|SSLFactory
argument_list|(
name|SSLFactory
operator|.
name|Mode
operator|.
name|CLIENT
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|sslFactory
operator|.
name|init
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"DEFAULT_AND_LOCALHOST"
argument_list|,
name|sslFactory
operator|.
name|getHostnameVerifier
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sslFactory
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|SSLFactory
operator|.
name|SSL_HOSTNAME_VERIFIER_KEY
argument_list|,
literal|"STRICT"
argument_list|)
expr_stmt|;
name|sslFactory
operator|=
operator|new
name|SSLFactory
argument_list|(
name|SSLFactory
operator|.
name|Mode
operator|.
name|CLIENT
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|sslFactory
operator|.
name|init
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"STRICT"
argument_list|,
name|sslFactory
operator|.
name|getHostnameVerifier
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sslFactory
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|SSLFactory
operator|.
name|SSL_HOSTNAME_VERIFIER_KEY
argument_list|,
literal|"STRICT_IE6"
argument_list|)
expr_stmt|;
name|sslFactory
operator|=
operator|new
name|SSLFactory
argument_list|(
name|SSLFactory
operator|.
name|Mode
operator|.
name|CLIENT
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|sslFactory
operator|.
name|init
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"STRICT_IE6"
argument_list|,
name|sslFactory
operator|.
name|getHostnameVerifier
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sslFactory
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|GeneralSecurityException
operator|.
name|class
argument_list|)
DECL|method|invalidHostnameVerifier ()
specifier|public
name|void
name|invalidHostnameVerifier
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|createConfiguration
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|SSLFactory
operator|.
name|SSL_HOSTNAME_VERIFIER_KEY
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|SSLFactory
name|sslFactory
init|=
operator|new
name|SSLFactory
argument_list|(
name|SSLFactory
operator|.
name|Mode
operator|.
name|CLIENT
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|sslFactory
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|sslFactory
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testConnectionConfigurator ()
specifier|public
name|void
name|testConnectionConfigurator
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|createConfiguration
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|SSLFactory
operator|.
name|SSL_HOSTNAME_VERIFIER_KEY
argument_list|,
literal|"STRICT_IE6"
argument_list|)
expr_stmt|;
name|SSLFactory
name|sslFactory
init|=
operator|new
name|SSLFactory
argument_list|(
name|SSLFactory
operator|.
name|Mode
operator|.
name|CLIENT
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|sslFactory
operator|.
name|init
argument_list|()
expr_stmt|;
name|HttpsURLConnection
name|sslConn
init|=
operator|(
name|HttpsURLConnection
operator|)
operator|new
name|URL
argument_list|(
literal|"https://foo"
argument_list|)
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotSame
argument_list|(
literal|"STRICT_IE6"
argument_list|,
name|sslConn
operator|.
name|getHostnameVerifier
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sslFactory
operator|.
name|configure
argument_list|(
name|sslConn
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"STRICT_IE6"
argument_list|,
name|sslConn
operator|.
name|getHostnameVerifier
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|sslFactory
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testServerDifferentPasswordAndKeyPassword ()
specifier|public
name|void
name|testServerDifferentPasswordAndKeyPassword
parameter_list|()
throws|throws
name|Exception
block|{
name|checkSSLFactoryInitWithPasswords
argument_list|(
name|SSLFactory
operator|.
name|Mode
operator|.
name|SERVER
argument_list|,
literal|"password"
argument_list|,
literal|"keyPassword"
argument_list|,
literal|"password"
argument_list|,
literal|"keyPassword"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testServerKeyPasswordDefaultsToPassword ()
specifier|public
name|void
name|testServerKeyPasswordDefaultsToPassword
parameter_list|()
throws|throws
name|Exception
block|{
name|checkSSLFactoryInitWithPasswords
argument_list|(
name|SSLFactory
operator|.
name|Mode
operator|.
name|SERVER
argument_list|,
literal|"password"
argument_list|,
literal|"password"
argument_list|,
literal|"password"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testClientDifferentPasswordAndKeyPassword ()
specifier|public
name|void
name|testClientDifferentPasswordAndKeyPassword
parameter_list|()
throws|throws
name|Exception
block|{
name|checkSSLFactoryInitWithPasswords
argument_list|(
name|SSLFactory
operator|.
name|Mode
operator|.
name|CLIENT
argument_list|,
literal|"password"
argument_list|,
literal|"keyPassword"
argument_list|,
literal|"password"
argument_list|,
literal|"keyPassword"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testClientKeyPasswordDefaultsToPassword ()
specifier|public
name|void
name|testClientKeyPasswordDefaultsToPassword
parameter_list|()
throws|throws
name|Exception
block|{
name|checkSSLFactoryInitWithPasswords
argument_list|(
name|SSLFactory
operator|.
name|Mode
operator|.
name|CLIENT
argument_list|,
literal|"password"
argument_list|,
literal|"password"
argument_list|,
literal|"password"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testServerCredProviderPasswords ()
specifier|public
name|void
name|testServerCredProviderPasswords
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyStoreTestUtil
operator|.
name|provisionPasswordsToCredentialProvider
argument_list|()
expr_stmt|;
name|checkSSLFactoryInitWithPasswords
argument_list|(
name|SSLFactory
operator|.
name|Mode
operator|.
name|SERVER
argument_list|,
literal|"storepass"
argument_list|,
literal|"keypass"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Checks that SSLFactory initialization is successful with the given    * arguments.  This is a helper method for writing test cases that cover    * different combinations of settings for the store password and key password.    * It takes care of bootstrapping a keystore, a truststore, and SSL client or    * server configuration.  Then, it initializes an SSLFactory.  If no exception    * is thrown, then initialization was successful.    *    * @param mode SSLFactory.Mode mode to test    * @param password String store password to set on keystore    * @param keyPassword String key password to set on keystore    * @param confPassword String store password to set in SSL config file, or null    *   to avoid setting in SSL config file    * @param confKeyPassword String key password to set in SSL config file, or    *   null to avoid setting in SSL config file    * @throws Exception for any error    */
DECL|method|checkSSLFactoryInitWithPasswords (SSLFactory.Mode mode, String password, String keyPassword, String confPassword, String confKeyPassword)
specifier|private
name|void
name|checkSSLFactoryInitWithPasswords
parameter_list|(
name|SSLFactory
operator|.
name|Mode
name|mode
parameter_list|,
name|String
name|password
parameter_list|,
name|String
name|keyPassword
parameter_list|,
name|String
name|confPassword
parameter_list|,
name|String
name|confKeyPassword
parameter_list|)
throws|throws
name|Exception
block|{
name|checkSSLFactoryInitWithPasswords
argument_list|(
name|mode
argument_list|,
name|password
argument_list|,
name|keyPassword
argument_list|,
name|confPassword
argument_list|,
name|confKeyPassword
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Checks that SSLFactory initialization is successful with the given    * arguments.  This is a helper method for writing test cases that cover    * different combinations of settings for the store password and key password.    * It takes care of bootstrapping a keystore, a truststore, and SSL client or    * server configuration.  Then, it initializes an SSLFactory.  If no exception    * is thrown, then initialization was successful.    *    * @param mode SSLFactory.Mode mode to test    * @param password String store password to set on keystore    * @param keyPassword String key password to set on keystore    * @param confPassword String store password to set in SSL config file, or null    *   to avoid setting in SSL config file    * @param confKeyPassword String key password to set in SSL config file, or    *   null to avoid setting in SSL config file    * @param useCredProvider boolean to indicate whether passwords should be set    * into the config or not. When set to true nulls are set and aliases are    * expected to be resolved through credential provider API through the    * Configuration.getPassword method    * @throws Exception for any error    */
DECL|method|checkSSLFactoryInitWithPasswords (SSLFactory.Mode mode, String password, String keyPassword, String confPassword, String confKeyPassword, boolean useCredProvider)
specifier|private
name|void
name|checkSSLFactoryInitWithPasswords
parameter_list|(
name|SSLFactory
operator|.
name|Mode
name|mode
parameter_list|,
name|String
name|password
parameter_list|,
name|String
name|keyPassword
parameter_list|,
name|String
name|confPassword
parameter_list|,
name|String
name|confKeyPassword
parameter_list|,
name|boolean
name|useCredProvider
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|keystore
init|=
operator|new
name|File
argument_list|(
name|KEYSTORES_DIR
argument_list|,
literal|"keystore.jks"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|String
name|truststore
init|=
operator|new
name|File
argument_list|(
name|KEYSTORES_DIR
argument_list|,
literal|"truststore.jks"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|String
name|trustPassword
init|=
literal|"trustP"
decl_stmt|;
comment|// Create keys, certs, keystore, and truststore.
name|KeyPair
name|keyPair
init|=
name|KeyStoreTestUtil
operator|.
name|generateKeyPair
argument_list|(
literal|"RSA"
argument_list|)
decl_stmt|;
name|X509Certificate
name|cert
init|=
name|KeyStoreTestUtil
operator|.
name|generateCertificate
argument_list|(
literal|"CN=Test"
argument_list|,
name|keyPair
argument_list|,
literal|30
argument_list|,
literal|"SHA1withRSA"
argument_list|)
decl_stmt|;
name|KeyStoreTestUtil
operator|.
name|createKeyStore
argument_list|(
name|keystore
argument_list|,
name|password
argument_list|,
name|keyPassword
argument_list|,
literal|"Test"
argument_list|,
name|keyPair
operator|.
name|getPrivate
argument_list|()
argument_list|,
name|cert
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|X509Certificate
argument_list|>
name|certs
init|=
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"server"
argument_list|,
name|cert
argument_list|)
decl_stmt|;
name|KeyStoreTestUtil
operator|.
name|createTrustStore
argument_list|(
name|truststore
argument_list|,
name|trustPassword
argument_list|,
name|certs
argument_list|)
expr_stmt|;
comment|// Create SSL configuration file, for either server or client.
specifier|final
name|String
name|sslConfFileName
decl_stmt|;
specifier|final
name|Configuration
name|sslConf
decl_stmt|;
comment|// if the passwords are provisioned in a cred provider then don't set them
comment|// in the configuration properly - expect them to be resolved through the
comment|// provider
if|if
condition|(
name|useCredProvider
condition|)
block|{
name|confPassword
operator|=
literal|null
expr_stmt|;
name|confKeyPassword
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|mode
operator|==
name|SSLFactory
operator|.
name|Mode
operator|.
name|SERVER
condition|)
block|{
name|sslConfFileName
operator|=
literal|"ssl-server.xml"
expr_stmt|;
name|sslConf
operator|=
name|KeyStoreTestUtil
operator|.
name|createServerSSLConfig
argument_list|(
name|keystore
argument_list|,
name|confPassword
argument_list|,
name|confKeyPassword
argument_list|,
name|truststore
argument_list|)
expr_stmt|;
if|if
condition|(
name|useCredProvider
condition|)
block|{
name|File
name|testDir
init|=
name|GenericTestUtils
operator|.
name|getTestDir
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|jksPath
init|=
operator|new
name|Path
argument_list|(
name|testDir
operator|.
name|toString
argument_list|()
argument_list|,
literal|"test.jks"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|ourUrl
init|=
name|JavaKeyStoreProvider
operator|.
name|SCHEME_NAME
operator|+
literal|"://file"
operator|+
name|jksPath
operator|.
name|toUri
argument_list|()
decl_stmt|;
name|sslConf
operator|.
name|set
argument_list|(
name|CredentialProviderFactory
operator|.
name|CREDENTIAL_PROVIDER_PATH
argument_list|,
name|ourUrl
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|sslConfFileName
operator|=
literal|"ssl-client.xml"
expr_stmt|;
name|sslConf
operator|=
name|KeyStoreTestUtil
operator|.
name|createClientSSLConfig
argument_list|(
name|keystore
argument_list|,
name|confPassword
argument_list|,
name|confKeyPassword
argument_list|,
name|truststore
argument_list|)
expr_stmt|;
block|}
name|KeyStoreTestUtil
operator|.
name|saveConfig
argument_list|(
operator|new
name|File
argument_list|(
name|sslConfsDir
argument_list|,
name|sslConfFileName
argument_list|)
argument_list|,
name|sslConf
argument_list|)
expr_stmt|;
comment|// Create the master configuration for use by the SSLFactory, which by
comment|// default refers to the ssl-server.xml or ssl-client.xml created above.
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|SSLFactory
operator|.
name|SSL_REQUIRE_CLIENT_CERT_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Try initializing an SSLFactory.
name|SSLFactory
name|sslFactory
init|=
operator|new
name|SSLFactory
argument_list|(
name|mode
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|sslFactory
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|sslFactory
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testNoClientCertsInitialization ()
specifier|public
name|void
name|testNoClientCertsInitialization
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|createConfiguration
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|conf
operator|.
name|unset
argument_list|(
name|SSLFactory
operator|.
name|SSL_REQUIRE_CLIENT_CERT_KEY
argument_list|)
expr_stmt|;
name|SSLFactory
name|sslFactory
init|=
operator|new
name|SSLFactory
argument_list|(
name|SSLFactory
operator|.
name|Mode
operator|.
name|CLIENT
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|sslFactory
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|sslFactory
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testNoTrustStore ()
specifier|public
name|void
name|testNoTrustStore
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|createConfiguration
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|conf
operator|.
name|unset
argument_list|(
name|SSLFactory
operator|.
name|SSL_REQUIRE_CLIENT_CERT_KEY
argument_list|)
expr_stmt|;
name|SSLFactory
name|sslFactory
init|=
operator|new
name|SSLFactory
argument_list|(
name|SSLFactory
operator|.
name|Mode
operator|.
name|SERVER
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|sslFactory
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|sslFactory
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

