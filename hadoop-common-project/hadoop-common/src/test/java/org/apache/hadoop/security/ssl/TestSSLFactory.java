begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security.ssl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|ssl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|HttpsURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|GeneralSecurityException
import|;
end_import

begin_class
DECL|class|TestSSLFactory
specifier|public
class|class
name|TestSSLFactory
block|{
DECL|field|BASEDIR
specifier|private
specifier|static
specifier|final
name|String
name|BASEDIR
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.dir"
argument_list|,
literal|"target/test-dir"
argument_list|)
operator|+
literal|"/"
operator|+
name|TestSSLFactory
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setUp ()
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|base
init|=
operator|new
name|File
argument_list|(
name|BASEDIR
argument_list|)
decl_stmt|;
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|base
argument_list|)
expr_stmt|;
name|base
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
DECL|method|createConfiguration (boolean clientCert)
specifier|private
name|Configuration
name|createConfiguration
parameter_list|(
name|boolean
name|clientCert
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|String
name|keystoresDir
init|=
operator|new
name|File
argument_list|(
name|BASEDIR
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|String
name|sslConfsDir
init|=
name|KeyStoreTestUtil
operator|.
name|getClasspathDir
argument_list|(
name|TestSSLFactory
operator|.
name|class
argument_list|)
decl_stmt|;
name|KeyStoreTestUtil
operator|.
name|setupSSLConfig
argument_list|(
name|keystoresDir
argument_list|,
name|sslConfsDir
argument_list|,
name|conf
argument_list|,
name|clientCert
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
annotation|@
name|After
annotation|@
name|Before
DECL|method|cleanUp ()
specifier|public
name|void
name|cleanUp
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|keystoresDir
init|=
operator|new
name|File
argument_list|(
name|BASEDIR
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|String
name|sslConfsDir
init|=
name|KeyStoreTestUtil
operator|.
name|getClasspathDir
argument_list|(
name|TestSSLFactory
operator|.
name|class
argument_list|)
decl_stmt|;
name|KeyStoreTestUtil
operator|.
name|cleanupSSLConfig
argument_list|(
name|keystoresDir
argument_list|,
name|sslConfsDir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
DECL|method|clientMode ()
specifier|public
name|void
name|clientMode
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|createConfiguration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|SSLFactory
name|sslFactory
init|=
operator|new
name|SSLFactory
argument_list|(
name|SSLFactory
operator|.
name|Mode
operator|.
name|CLIENT
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|sslFactory
operator|.
name|init
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|sslFactory
operator|.
name|createSSLSocketFactory
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|sslFactory
operator|.
name|getHostnameVerifier
argument_list|()
argument_list|)
expr_stmt|;
name|sslFactory
operator|.
name|createSSLServerSocketFactory
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|sslFactory
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|serverMode (boolean clientCert, boolean socket)
specifier|private
name|void
name|serverMode
parameter_list|(
name|boolean
name|clientCert
parameter_list|,
name|boolean
name|socket
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|createConfiguration
argument_list|(
name|clientCert
argument_list|)
decl_stmt|;
name|SSLFactory
name|sslFactory
init|=
operator|new
name|SSLFactory
argument_list|(
name|SSLFactory
operator|.
name|Mode
operator|.
name|SERVER
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|sslFactory
operator|.
name|init
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|sslFactory
operator|.
name|createSSLServerSocketFactory
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|clientCert
argument_list|,
name|sslFactory
operator|.
name|isClientCertRequired
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|socket
condition|)
block|{
name|sslFactory
operator|.
name|createSSLSocketFactory
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|sslFactory
operator|.
name|getHostnameVerifier
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|sslFactory
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
DECL|method|serverModeWithoutClientCertsSocket ()
specifier|public
name|void
name|serverModeWithoutClientCertsSocket
parameter_list|()
throws|throws
name|Exception
block|{
name|serverMode
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
DECL|method|serverModeWithClientCertsSocket ()
specifier|public
name|void
name|serverModeWithClientCertsSocket
parameter_list|()
throws|throws
name|Exception
block|{
name|serverMode
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
DECL|method|serverModeWithoutClientCertsVerifier ()
specifier|public
name|void
name|serverModeWithoutClientCertsVerifier
parameter_list|()
throws|throws
name|Exception
block|{
name|serverMode
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
DECL|method|serverModeWithClientCertsVerifier ()
specifier|public
name|void
name|serverModeWithClientCertsVerifier
parameter_list|()
throws|throws
name|Exception
block|{
name|serverMode
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|validHostnameVerifier ()
specifier|public
name|void
name|validHostnameVerifier
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|createConfiguration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|conf
operator|.
name|unset
argument_list|(
name|SSLFactory
operator|.
name|SSL_HOSTNAME_VERIFIER_KEY
argument_list|)
expr_stmt|;
name|SSLFactory
name|sslFactory
init|=
operator|new
name|SSLFactory
argument_list|(
name|SSLFactory
operator|.
name|Mode
operator|.
name|CLIENT
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|sslFactory
operator|.
name|init
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"DEFAULT"
argument_list|,
name|sslFactory
operator|.
name|getHostnameVerifier
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sslFactory
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|SSLFactory
operator|.
name|SSL_HOSTNAME_VERIFIER_KEY
argument_list|,
literal|"ALLOW_ALL"
argument_list|)
expr_stmt|;
name|sslFactory
operator|=
operator|new
name|SSLFactory
argument_list|(
name|SSLFactory
operator|.
name|Mode
operator|.
name|CLIENT
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|sslFactory
operator|.
name|init
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"ALLOW_ALL"
argument_list|,
name|sslFactory
operator|.
name|getHostnameVerifier
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sslFactory
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|SSLFactory
operator|.
name|SSL_HOSTNAME_VERIFIER_KEY
argument_list|,
literal|"DEFAULT_AND_LOCALHOST"
argument_list|)
expr_stmt|;
name|sslFactory
operator|=
operator|new
name|SSLFactory
argument_list|(
name|SSLFactory
operator|.
name|Mode
operator|.
name|CLIENT
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|sslFactory
operator|.
name|init
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"DEFAULT_AND_LOCALHOST"
argument_list|,
name|sslFactory
operator|.
name|getHostnameVerifier
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sslFactory
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|SSLFactory
operator|.
name|SSL_HOSTNAME_VERIFIER_KEY
argument_list|,
literal|"STRICT"
argument_list|)
expr_stmt|;
name|sslFactory
operator|=
operator|new
name|SSLFactory
argument_list|(
name|SSLFactory
operator|.
name|Mode
operator|.
name|CLIENT
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|sslFactory
operator|.
name|init
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"STRICT"
argument_list|,
name|sslFactory
operator|.
name|getHostnameVerifier
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sslFactory
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|SSLFactory
operator|.
name|SSL_HOSTNAME_VERIFIER_KEY
argument_list|,
literal|"STRICT_IE6"
argument_list|)
expr_stmt|;
name|sslFactory
operator|=
operator|new
name|SSLFactory
argument_list|(
name|SSLFactory
operator|.
name|Mode
operator|.
name|CLIENT
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|sslFactory
operator|.
name|init
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"STRICT_IE6"
argument_list|,
name|sslFactory
operator|.
name|getHostnameVerifier
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sslFactory
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|GeneralSecurityException
operator|.
name|class
argument_list|)
DECL|method|invalidHostnameVerifier ()
specifier|public
name|void
name|invalidHostnameVerifier
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|createConfiguration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|SSLFactory
operator|.
name|SSL_HOSTNAME_VERIFIER_KEY
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|SSLFactory
name|sslFactory
init|=
operator|new
name|SSLFactory
argument_list|(
name|SSLFactory
operator|.
name|Mode
operator|.
name|CLIENT
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|sslFactory
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|sslFactory
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testConnectionConfigurator ()
specifier|public
name|void
name|testConnectionConfigurator
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|createConfiguration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|SSLFactory
operator|.
name|SSL_HOSTNAME_VERIFIER_KEY
argument_list|,
literal|"STRICT_IE6"
argument_list|)
expr_stmt|;
name|SSLFactory
name|sslFactory
init|=
operator|new
name|SSLFactory
argument_list|(
name|SSLFactory
operator|.
name|Mode
operator|.
name|CLIENT
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|sslFactory
operator|.
name|init
argument_list|()
expr_stmt|;
name|HttpsURLConnection
name|sslConn
init|=
operator|(
name|HttpsURLConnection
operator|)
operator|new
name|URL
argument_list|(
literal|"https://foo"
argument_list|)
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotSame
argument_list|(
literal|"STRICT_IE6"
argument_list|,
name|sslConn
operator|.
name|getHostnameVerifier
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sslFactory
operator|.
name|configure
argument_list|(
name|sslConn
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"STRICT_IE6"
argument_list|,
name|sslConn
operator|.
name|getHostnameVerifier
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|sslFactory
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

