begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|CommunicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|SearchControls
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|LdapGroupsMapping
operator|.
name|LDAP_NUM_ATTEMPTS_BEFORE_FAILOVER_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|LdapGroupsMapping
operator|.
name|LDAP_NUM_ATTEMPTS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|LdapGroupsMapping
operator|.
name|LDAP_URL_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * Test failover functionality for switching to different  * LDAP server URLs upon failures.  */
end_comment

begin_class
DECL|class|TestLdapGroupsMappingWithFailover
specifier|public
class|class
name|TestLdapGroupsMappingWithFailover
extends|extends
name|TestLdapGroupsMappingBase
block|{
DECL|field|TEST_USER_NAME
specifier|private
specifier|static
specifier|final
name|String
name|TEST_USER_NAME
init|=
literal|"some_user"
decl_stmt|;
comment|/**    * Test that when disabled, we will retry the configured number    * of times using the same LDAP server.    */
annotation|@
name|Test
DECL|method|testDoesNotFailoverWhenDisabled ()
specifier|public
name|void
name|testDoesNotFailoverWhenDisabled
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|numAttempts
init|=
literal|3
decl_stmt|;
name|Configuration
name|conf
init|=
name|getBaseConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
name|LDAP_URL_KEY
argument_list|,
literal|"ldap://test"
argument_list|,
literal|"ldap://test1"
argument_list|,
literal|"ldap://test2"
argument_list|)
expr_stmt|;
name|DummyLdapCtxFactory
operator|.
name|setExpectedLdapUrl
argument_list|(
literal|"ldap://test"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|LDAP_NUM_ATTEMPTS_KEY
argument_list|,
name|numAttempts
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|LDAP_NUM_ATTEMPTS_BEFORE_FAILOVER_KEY
argument_list|,
name|numAttempts
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|getContext
argument_list|()
operator|.
name|search
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyString
argument_list|()
argument_list|,
name|any
argument_list|(
name|Object
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|SearchControls
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|CommunicationException
argument_list|()
argument_list|)
expr_stmt|;
name|LdapGroupsMapping
name|groupsMapping
init|=
name|getGroupsMapping
argument_list|()
decl_stmt|;
name|groupsMapping
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|groups
init|=
name|groupsMapping
operator|.
name|getGroups
argument_list|(
name|TEST_USER_NAME
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|groups
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test that we made 3 attempts using the same server
name|verify
argument_list|(
name|getContext
argument_list|()
argument_list|,
name|times
argument_list|(
name|numAttempts
argument_list|)
argument_list|)
operator|.
name|search
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyString
argument_list|()
argument_list|,
name|any
argument_list|(
name|Object
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|SearchControls
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that when configured, we will make the specified amount of    * attempts using one ldap url before failing over to the next one.    *    * This also tests that we wrap back to the first server    * if we've tried them all.    */
annotation|@
name|Test
DECL|method|testFailover ()
specifier|public
name|void
name|testFailover
parameter_list|()
throws|throws
name|Exception
block|{
name|Queue
argument_list|<
name|String
argument_list|>
name|ldapUrls
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|ldapUrls
operator|.
name|add
argument_list|(
literal|"ldap://test"
argument_list|)
expr_stmt|;
name|ldapUrls
operator|.
name|add
argument_list|(
literal|"ldap://test1"
argument_list|)
expr_stmt|;
name|ldapUrls
operator|.
name|add
argument_list|(
literal|"ldap://test2"
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numAttempts
init|=
literal|12
decl_stmt|;
specifier|final
name|int
name|numAttemptsBeforeFailover
init|=
literal|2
decl_stmt|;
name|Configuration
name|conf
init|=
name|getBaseConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
name|LDAP_URL_KEY
argument_list|,
literal|"ldap://test"
argument_list|,
literal|"ldap://test1"
argument_list|,
literal|"ldap://test2"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|LDAP_NUM_ATTEMPTS_KEY
argument_list|,
name|numAttempts
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|LDAP_NUM_ATTEMPTS_BEFORE_FAILOVER_KEY
argument_list|,
name|numAttemptsBeforeFailover
argument_list|)
expr_stmt|;
comment|// Set the first expected url and add it back to the queue
name|String
name|nextLdapUrl
init|=
name|ldapUrls
operator|.
name|remove
argument_list|()
decl_stmt|;
name|DummyLdapCtxFactory
operator|.
name|setExpectedLdapUrl
argument_list|(
name|nextLdapUrl
argument_list|)
expr_stmt|;
name|ldapUrls
operator|.
name|add
argument_list|(
name|nextLdapUrl
argument_list|)
expr_stmt|;
comment|// Number of attempts using a single ldap server url
specifier|final
name|AtomicInteger
name|serverAttempts
init|=
operator|new
name|AtomicInteger
argument_list|(
name|numAttemptsBeforeFailover
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|getContext
argument_list|()
operator|.
name|search
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyString
argument_list|()
argument_list|,
name|any
argument_list|(
name|Object
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|SearchControls
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|answer
parameter_list|(
name|InvocationOnMock
name|invocationOnMock
parameter_list|)
throws|throws
name|Throwable
block|{
if|if
condition|(
name|serverAttempts
operator|.
name|get
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// Take the head of the queue and re-queue it to the back
name|String
name|nextLdapUrl
init|=
name|ldapUrls
operator|.
name|remove
argument_list|()
decl_stmt|;
name|ldapUrls
operator|.
name|add
argument_list|(
name|nextLdapUrl
argument_list|)
expr_stmt|;
name|DummyLdapCtxFactory
operator|.
name|setExpectedLdapUrl
argument_list|(
name|nextLdapUrl
argument_list|)
expr_stmt|;
name|serverAttempts
operator|.
name|set
argument_list|(
name|numAttemptsBeforeFailover
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|serverAttempts
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
block|}
throw|throw
operator|new
name|CommunicationException
argument_list|()
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
name|LdapGroupsMapping
name|groupsMapping
init|=
name|getGroupsMapping
argument_list|()
decl_stmt|;
name|groupsMapping
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|groups
init|=
name|groupsMapping
operator|.
name|getGroups
argument_list|(
name|TEST_USER_NAME
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|groups
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test that we made 6 attempts overall
name|verify
argument_list|(
name|getContext
argument_list|()
argument_list|,
name|times
argument_list|(
name|numAttempts
argument_list|)
argument_list|)
operator|.
name|search
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyString
argument_list|()
argument_list|,
name|any
argument_list|(
name|Object
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|SearchControls
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

