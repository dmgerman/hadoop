begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestFsShellCopy
specifier|public
class|class
name|TestFsShellCopy
block|{
DECL|field|conf
specifier|static
name|Configuration
name|conf
decl_stmt|;
DECL|field|shell
specifier|static
name|FsShell
name|shell
decl_stmt|;
DECL|field|lfs
specifier|static
name|LocalFileSystem
name|lfs
decl_stmt|;
DECL|field|testRootDir
DECL|field|srcPath
DECL|field|dstPath
specifier|static
name|Path
name|testRootDir
decl_stmt|,
name|srcPath
decl_stmt|,
name|dstPath
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setup ()
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|shell
operator|=
operator|new
name|FsShell
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|lfs
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|testRootDir
operator|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"test/build/data"
argument_list|)
argument_list|,
literal|"testShellCopy"
argument_list|)
expr_stmt|;
name|lfs
operator|.
name|mkdirs
argument_list|(
name|testRootDir
argument_list|)
expr_stmt|;
name|srcPath
operator|=
operator|new
name|Path
argument_list|(
name|testRootDir
argument_list|,
literal|"srcFile"
argument_list|)
expr_stmt|;
name|dstPath
operator|=
operator|new
name|Path
argument_list|(
name|testRootDir
argument_list|,
literal|"dstFile"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|prepFiles ()
specifier|public
name|void
name|prepFiles
parameter_list|()
throws|throws
name|Exception
block|{
name|lfs
operator|.
name|setVerifyChecksum
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|lfs
operator|.
name|setWriteChecksum
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|lfs
operator|.
name|delete
argument_list|(
name|srcPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|lfs
operator|.
name|delete
argument_list|(
name|dstPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|FSDataOutputStream
name|out
init|=
name|lfs
operator|.
name|create
argument_list|(
name|srcPath
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeChars
argument_list|(
literal|"hi"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|lfs
operator|.
name|exists
argument_list|(
name|lfs
operator|.
name|getChecksumFile
argument_list|(
name|srcPath
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCopyNoCrc ()
specifier|public
name|void
name|testCopyNoCrc
parameter_list|()
throws|throws
name|Exception
block|{
name|shellRun
argument_list|(
literal|0
argument_list|,
literal|"-get"
argument_list|,
name|srcPath
operator|.
name|toString
argument_list|()
argument_list|,
name|dstPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|checkPath
argument_list|(
name|dstPath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCopyCrc ()
specifier|public
name|void
name|testCopyCrc
parameter_list|()
throws|throws
name|Exception
block|{
name|shellRun
argument_list|(
literal|0
argument_list|,
literal|"-get"
argument_list|,
literal|"-crc"
argument_list|,
name|srcPath
operator|.
name|toString
argument_list|()
argument_list|,
name|dstPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|checkPath
argument_list|(
name|dstPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCorruptedCopyCrc ()
specifier|public
name|void
name|testCorruptedCopyCrc
parameter_list|()
throws|throws
name|Exception
block|{
name|FSDataOutputStream
name|out
init|=
name|lfs
operator|.
name|getRawFileSystem
argument_list|()
operator|.
name|create
argument_list|(
name|srcPath
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeChars
argument_list|(
literal|"bang"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|shellRun
argument_list|(
literal|1
argument_list|,
literal|"-get"
argument_list|,
name|srcPath
operator|.
name|toString
argument_list|()
argument_list|,
name|dstPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCorruptedCopyIgnoreCrc ()
specifier|public
name|void
name|testCorruptedCopyIgnoreCrc
parameter_list|()
throws|throws
name|Exception
block|{
name|shellRun
argument_list|(
literal|0
argument_list|,
literal|"-get"
argument_list|,
literal|"-ignoreCrc"
argument_list|,
name|srcPath
operator|.
name|toString
argument_list|()
argument_list|,
name|dstPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|checkPath
argument_list|(
name|dstPath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|checkPath (Path p, boolean expectChecksum)
specifier|private
name|void
name|checkPath
parameter_list|(
name|Path
name|p
parameter_list|,
name|boolean
name|expectChecksum
parameter_list|)
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
name|lfs
operator|.
name|exists
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|hasChecksum
init|=
name|lfs
operator|.
name|exists
argument_list|(
name|lfs
operator|.
name|getChecksumFile
argument_list|(
name|p
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectChecksum
argument_list|,
name|hasChecksum
argument_list|)
expr_stmt|;
block|}
DECL|method|shellRun (int n, String ... args)
specifier|private
name|void
name|shellRun
parameter_list|(
name|int
name|n
parameter_list|,
name|String
modifier|...
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|n
argument_list|,
name|shell
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

