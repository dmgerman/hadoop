begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  * http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.compress.zstd
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|zstd
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataInputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressionInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressionOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|Compressor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressorStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|Decompressor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|DecompressorStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|ZStandardCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MultithreadedTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|IO_FILE_BUFFER_SIZE_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|IO_FILE_BUFFER_SIZE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeTrue
import|;
end_import

begin_class
DECL|class|TestZStandardCompressorDecompressor
specifier|public
class|class
name|TestZStandardCompressorDecompressor
block|{
DECL|field|HEX_ARRAY
specifier|private
specifier|final
specifier|static
name|char
index|[]
name|HEX_ARRAY
init|=
literal|"0123456789ABCDEF"
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
DECL|field|RANDOM
specifier|private
specifier|static
specifier|final
name|Random
name|RANDOM
init|=
operator|new
name|Random
argument_list|(
literal|12345L
argument_list|)
decl_stmt|;
DECL|field|CONFIGURATION
specifier|private
specifier|static
specifier|final
name|Configuration
name|CONFIGURATION
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
DECL|field|compressedFile
specifier|private
specifier|static
name|File
name|compressedFile
decl_stmt|;
DECL|field|uncompressedFile
specifier|private
specifier|static
name|File
name|uncompressedFile
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|beforeClass ()
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|CONFIGURATION
operator|.
name|setInt
argument_list|(
name|IO_FILE_BUFFER_SIZE_KEY
argument_list|,
literal|1024
operator|*
literal|64
argument_list|)
expr_stmt|;
name|uncompressedFile
operator|=
operator|new
name|File
argument_list|(
name|TestZStandardCompressorDecompressor
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"/zstd/test_file.txt"
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
expr_stmt|;
name|compressedFile
operator|=
operator|new
name|File
argument_list|(
name|TestZStandardCompressorDecompressor
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"/zstd/test_file.txt.zst"
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|before ()
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeTrue
argument_list|(
name|ZStandardCodec
operator|.
name|isNativeCodeLoaded
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCompressionCompressesCorrectly ()
specifier|public
name|void
name|testCompressionCompressesCorrectly
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|uncompressedSize
init|=
operator|(
name|int
operator|)
name|FileUtils
operator|.
name|sizeOf
argument_list|(
name|uncompressedFile
argument_list|)
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|FileUtils
operator|.
name|readFileToByteArray
argument_list|(
name|uncompressedFile
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|uncompressedSize
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|ZStandardCodec
name|codec
init|=
operator|new
name|ZStandardCodec
argument_list|()
decl_stmt|;
name|codec
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|Compressor
name|compressor
init|=
name|codec
operator|.
name|createCompressor
argument_list|()
decl_stmt|;
name|CompressionOutputStream
name|outputStream
init|=
name|codec
operator|.
name|createOutputStream
argument_list|(
name|baos
argument_list|,
name|compressor
argument_list|)
decl_stmt|;
for|for
control|(
name|byte
name|aByte
range|:
name|bytes
control|)
block|{
name|outputStream
operator|.
name|write
argument_list|(
name|aByte
argument_list|)
expr_stmt|;
block|}
name|outputStream
operator|.
name|finish
argument_list|()
expr_stmt|;
name|outputStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|uncompressedSize
argument_list|,
name|compressor
operator|.
name|getBytesRead
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|compressor
operator|.
name|finished
argument_list|()
argument_list|)
expr_stmt|;
comment|// just make sure we can decompress the file
name|ByteArrayOutputStream
name|byteArrayOutputStream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|ByteArrayInputStream
name|bais
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|Decompressor
name|decompressor
init|=
name|codec
operator|.
name|createDecompressor
argument_list|()
decl_stmt|;
name|CompressionInputStream
name|inputStream
init|=
name|codec
operator|.
name|createInputStream
argument_list|(
name|bais
argument_list|,
name|decompressor
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
name|int
name|n
init|=
name|buffer
operator|.
name|length
decl_stmt|;
while|while
condition|(
operator|(
name|n
operator|=
name|inputStream
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|n
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|byteArrayOutputStream
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
name|assertArrayEquals
argument_list|(
name|bytes
argument_list|,
name|byteArrayOutputStream
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NullPointerException
operator|.
name|class
argument_list|)
DECL|method|testCompressorSetInputNullPointerException ()
specifier|public
name|void
name|testCompressorSetInputNullPointerException
parameter_list|()
block|{
name|ZStandardCompressor
name|compressor
init|=
operator|new
name|ZStandardCompressor
argument_list|()
decl_stmt|;
name|compressor
operator|.
name|setInput
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
comment|//test on NullPointerException in {@code decompressor.setInput()}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NullPointerException
operator|.
name|class
argument_list|)
DECL|method|testDecompressorSetInputNullPointerException ()
specifier|public
name|void
name|testDecompressorSetInputNullPointerException
parameter_list|()
block|{
name|ZStandardDecompressor
name|decompressor
init|=
operator|new
name|ZStandardDecompressor
argument_list|(
name|IO_FILE_BUFFER_SIZE_DEFAULT
argument_list|)
decl_stmt|;
name|decompressor
operator|.
name|setInput
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
comment|//test on ArrayIndexOutOfBoundsException in {@code compressor.setInput()}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ArrayIndexOutOfBoundsException
operator|.
name|class
argument_list|)
DECL|method|testCompressorSetInputAIOBException ()
specifier|public
name|void
name|testCompressorSetInputAIOBException
parameter_list|()
block|{
name|ZStandardCompressor
name|compressor
init|=
operator|new
name|ZStandardCompressor
argument_list|()
decl_stmt|;
name|compressor
operator|.
name|setInput
argument_list|(
operator|new
name|byte
index|[]
block|{}
argument_list|,
operator|-
literal|5
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
comment|//test on ArrayIndexOutOfBoundsException in {@code decompressor.setInput()}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ArrayIndexOutOfBoundsException
operator|.
name|class
argument_list|)
DECL|method|testDecompressorSetInputAIOUBException ()
specifier|public
name|void
name|testDecompressorSetInputAIOUBException
parameter_list|()
block|{
name|ZStandardDecompressor
name|decompressor
init|=
operator|new
name|ZStandardDecompressor
argument_list|(
name|IO_FILE_BUFFER_SIZE_DEFAULT
argument_list|)
decl_stmt|;
name|decompressor
operator|.
name|setInput
argument_list|(
operator|new
name|byte
index|[]
block|{}
argument_list|,
operator|-
literal|5
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
comment|//test on NullPointerException in {@code compressor.compress()}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NullPointerException
operator|.
name|class
argument_list|)
DECL|method|testCompressorCompressNullPointerException ()
specifier|public
name|void
name|testCompressorCompressNullPointerException
parameter_list|()
throws|throws
name|Exception
block|{
name|ZStandardCompressor
name|compressor
init|=
operator|new
name|ZStandardCompressor
argument_list|()
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|generate
argument_list|(
literal|1024
operator|*
literal|6
argument_list|)
decl_stmt|;
name|compressor
operator|.
name|setInput
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|compressor
operator|.
name|compress
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|//test on NullPointerException in {@code decompressor.decompress()}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NullPointerException
operator|.
name|class
argument_list|)
DECL|method|testDecompressorCompressNullPointerException ()
specifier|public
name|void
name|testDecompressorCompressNullPointerException
parameter_list|()
throws|throws
name|Exception
block|{
name|ZStandardDecompressor
name|decompressor
init|=
operator|new
name|ZStandardDecompressor
argument_list|(
name|IO_FILE_BUFFER_SIZE_DEFAULT
argument_list|)
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|generate
argument_list|(
literal|1024
operator|*
literal|6
argument_list|)
decl_stmt|;
name|decompressor
operator|.
name|setInput
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|decompressor
operator|.
name|decompress
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|//test on ArrayIndexOutOfBoundsException in {@code compressor.compress()}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ArrayIndexOutOfBoundsException
operator|.
name|class
argument_list|)
DECL|method|testCompressorCompressAIOBException ()
specifier|public
name|void
name|testCompressorCompressAIOBException
parameter_list|()
throws|throws
name|Exception
block|{
name|ZStandardCompressor
name|compressor
init|=
operator|new
name|ZStandardCompressor
argument_list|()
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|generate
argument_list|(
literal|1024
operator|*
literal|6
argument_list|)
decl_stmt|;
name|compressor
operator|.
name|setInput
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|compressor
operator|.
name|compress
argument_list|(
operator|new
name|byte
index|[]
block|{}
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|//test on ArrayIndexOutOfBoundsException in decompressor.decompress()
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ArrayIndexOutOfBoundsException
operator|.
name|class
argument_list|)
DECL|method|testDecompressorCompressAIOBException ()
specifier|public
name|void
name|testDecompressorCompressAIOBException
parameter_list|()
throws|throws
name|Exception
block|{
name|ZStandardDecompressor
name|decompressor
init|=
operator|new
name|ZStandardDecompressor
argument_list|(
name|IO_FILE_BUFFER_SIZE_DEFAULT
argument_list|)
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|generate
argument_list|(
literal|1024
operator|*
literal|6
argument_list|)
decl_stmt|;
name|decompressor
operator|.
name|setInput
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|decompressor
operator|.
name|decompress
argument_list|(
operator|new
name|byte
index|[]
block|{}
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// test ZStandardCompressor compressor.compress()
annotation|@
name|Test
DECL|method|testSetInputWithBytesSizeMoreThenDefaultZStandardBufferSize ()
specifier|public
name|void
name|testSetInputWithBytesSizeMoreThenDefaultZStandardBufferSize
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|bytesSize
init|=
literal|1024
operator|*
literal|2056
operator|+
literal|1
decl_stmt|;
name|ZStandardCompressor
name|compressor
init|=
operator|new
name|ZStandardCompressor
argument_list|()
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|generate
argument_list|(
name|bytesSize
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"needsInput error !!!"
argument_list|,
name|compressor
operator|.
name|needsInput
argument_list|()
argument_list|)
expr_stmt|;
name|compressor
operator|.
name|setInput
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|byte
index|[]
name|emptyBytes
init|=
operator|new
name|byte
index|[
name|bytesSize
index|]
decl_stmt|;
name|int
name|cSize
init|=
name|compressor
operator|.
name|compress
argument_list|(
name|emptyBytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|cSize
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// test compress/decompress process through
comment|// CompressionOutputStream/CompressionInputStream api
annotation|@
name|Test
DECL|method|testCompressorDecompressorLogicWithCompressionStreams ()
specifier|public
name|void
name|testCompressorDecompressorLogicWithCompressionStreams
parameter_list|()
throws|throws
name|Exception
block|{
name|DataOutputStream
name|deflateOut
init|=
literal|null
decl_stmt|;
name|DataInputStream
name|inflateIn
init|=
literal|null
decl_stmt|;
name|int
name|byteSize
init|=
literal|1024
operator|*
literal|100
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|generate
argument_list|(
name|byteSize
argument_list|)
decl_stmt|;
name|int
name|bufferSize
init|=
name|IO_FILE_BUFFER_SIZE_DEFAULT
decl_stmt|;
try|try
block|{
name|DataOutputBuffer
name|compressedDataBuffer
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|CompressionOutputStream
name|deflateFilter
init|=
operator|new
name|CompressorStream
argument_list|(
name|compressedDataBuffer
argument_list|,
operator|new
name|ZStandardCompressor
argument_list|()
argument_list|,
name|bufferSize
argument_list|)
decl_stmt|;
name|deflateOut
operator|=
operator|new
name|DataOutputStream
argument_list|(
operator|new
name|BufferedOutputStream
argument_list|(
name|deflateFilter
argument_list|)
argument_list|)
expr_stmt|;
name|deflateOut
operator|.
name|write
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|deflateOut
operator|.
name|flush
argument_list|()
expr_stmt|;
name|deflateFilter
operator|.
name|finish
argument_list|()
expr_stmt|;
name|DataInputBuffer
name|deCompressedDataBuffer
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
name|deCompressedDataBuffer
operator|.
name|reset
argument_list|(
name|compressedDataBuffer
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|compressedDataBuffer
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|CompressionInputStream
name|inflateFilter
init|=
operator|new
name|DecompressorStream
argument_list|(
name|deCompressedDataBuffer
argument_list|,
operator|new
name|ZStandardDecompressor
argument_list|(
name|bufferSize
argument_list|)
argument_list|,
name|bufferSize
argument_list|)
decl_stmt|;
name|inflateIn
operator|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|BufferedInputStream
argument_list|(
name|inflateFilter
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
name|byteSize
index|]
decl_stmt|;
name|inflateIn
operator|.
name|read
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
literal|"original array not equals compress/decompressed array"
argument_list|,
name|result
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|deflateOut
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|inflateIn
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testZStandardCompressDecompressInMultiThreads ()
specifier|public
name|void
name|testZStandardCompressDecompressInMultiThreads
parameter_list|()
throws|throws
name|Exception
block|{
name|MultithreadedTestUtil
operator|.
name|TestContext
name|ctx
init|=
operator|new
name|MultithreadedTestUtil
operator|.
name|TestContext
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|ctx
operator|.
name|addThread
argument_list|(
operator|new
name|MultithreadedTestUtil
operator|.
name|TestingThread
argument_list|(
name|ctx
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|doWork
parameter_list|()
throws|throws
name|Exception
block|{
name|testCompressDecompress
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|ctx
operator|.
name|startThreads
argument_list|()
expr_stmt|;
name|ctx
operator|.
name|waitFor
argument_list|(
literal|60000
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCompressDecompress ()
specifier|public
name|void
name|testCompressDecompress
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|rawData
decl_stmt|;
name|int
name|rawDataSize
decl_stmt|;
name|rawDataSize
operator|=
name|IO_FILE_BUFFER_SIZE_DEFAULT
expr_stmt|;
name|rawData
operator|=
name|generate
argument_list|(
name|rawDataSize
argument_list|)
expr_stmt|;
name|ZStandardCompressor
name|compressor
init|=
operator|new
name|ZStandardCompressor
argument_list|()
decl_stmt|;
name|ZStandardDecompressor
name|decompressor
init|=
operator|new
name|ZStandardDecompressor
argument_list|(
name|IO_FILE_BUFFER_SIZE_DEFAULT
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|compressor
operator|.
name|finished
argument_list|()
argument_list|)
expr_stmt|;
name|compressor
operator|.
name|setInput
argument_list|(
name|rawData
argument_list|,
literal|0
argument_list|,
name|rawData
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|compressor
operator|.
name|getBytesRead
argument_list|()
argument_list|)
expr_stmt|;
name|compressor
operator|.
name|finish
argument_list|()
expr_stmt|;
name|byte
index|[]
name|compressedResult
init|=
operator|new
name|byte
index|[
name|rawDataSize
index|]
decl_stmt|;
name|int
name|cSize
init|=
name|compressor
operator|.
name|compress
argument_list|(
name|compressedResult
argument_list|,
literal|0
argument_list|,
name|rawDataSize
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|rawDataSize
argument_list|,
name|compressor
operator|.
name|getBytesRead
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cSize
operator|<
name|rawDataSize
argument_list|)
expr_stmt|;
name|decompressor
operator|.
name|setInput
argument_list|(
name|compressedResult
argument_list|,
literal|0
argument_list|,
name|cSize
argument_list|)
expr_stmt|;
name|byte
index|[]
name|decompressedBytes
init|=
operator|new
name|byte
index|[
name|rawDataSize
index|]
decl_stmt|;
name|decompressor
operator|.
name|decompress
argument_list|(
name|decompressedBytes
argument_list|,
literal|0
argument_list|,
name|decompressedBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bytesToHex
argument_list|(
name|rawData
argument_list|)
argument_list|,
name|bytesToHex
argument_list|(
name|decompressedBytes
argument_list|)
argument_list|)
expr_stmt|;
name|compressor
operator|.
name|reset
argument_list|()
expr_stmt|;
name|decompressor
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCompressingWithOneByteOutputBuffer ()
specifier|public
name|void
name|testCompressingWithOneByteOutputBuffer
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|uncompressedSize
init|=
operator|(
name|int
operator|)
name|FileUtils
operator|.
name|sizeOf
argument_list|(
name|uncompressedFile
argument_list|)
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|FileUtils
operator|.
name|readFileToByteArray
argument_list|(
name|uncompressedFile
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|uncompressedSize
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|ZStandardCodec
name|codec
init|=
operator|new
name|ZStandardCodec
argument_list|()
decl_stmt|;
name|codec
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|Compressor
name|compressor
init|=
operator|new
name|ZStandardCompressor
argument_list|(
literal|3
argument_list|,
name|IO_FILE_BUFFER_SIZE_DEFAULT
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|CompressionOutputStream
name|outputStream
init|=
name|codec
operator|.
name|createOutputStream
argument_list|(
name|baos
argument_list|,
name|compressor
argument_list|)
decl_stmt|;
for|for
control|(
name|byte
name|aByte
range|:
name|bytes
control|)
block|{
name|outputStream
operator|.
name|write
argument_list|(
name|aByte
argument_list|)
expr_stmt|;
block|}
name|outputStream
operator|.
name|finish
argument_list|()
expr_stmt|;
name|outputStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|uncompressedSize
argument_list|,
name|compressor
operator|.
name|getBytesRead
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|compressor
operator|.
name|finished
argument_list|()
argument_list|)
expr_stmt|;
comment|// just make sure we can decompress the file
name|ByteArrayOutputStream
name|byteArrayOutputStream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|ByteArrayInputStream
name|bais
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|Decompressor
name|decompressor
init|=
name|codec
operator|.
name|createDecompressor
argument_list|()
decl_stmt|;
name|CompressionInputStream
name|inputStream
init|=
name|codec
operator|.
name|createInputStream
argument_list|(
name|bais
argument_list|,
name|decompressor
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
name|int
name|n
init|=
name|buffer
operator|.
name|length
decl_stmt|;
while|while
condition|(
operator|(
name|n
operator|=
name|inputStream
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|n
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|byteArrayOutputStream
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
name|assertArrayEquals
argument_list|(
name|bytes
argument_list|,
name|byteArrayOutputStream
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testZStandardCompressDecompress ()
specifier|public
name|void
name|testZStandardCompressDecompress
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|rawData
init|=
literal|null
decl_stmt|;
name|int
name|rawDataSize
init|=
literal|0
decl_stmt|;
name|rawDataSize
operator|=
name|IO_FILE_BUFFER_SIZE_DEFAULT
expr_stmt|;
name|rawData
operator|=
name|generate
argument_list|(
name|rawDataSize
argument_list|)
expr_stmt|;
name|ZStandardCompressor
name|compressor
init|=
operator|new
name|ZStandardCompressor
argument_list|()
decl_stmt|;
name|ZStandardDecompressor
name|decompressor
init|=
operator|new
name|ZStandardDecompressor
argument_list|(
name|rawDataSize
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|compressor
operator|.
name|needsInput
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"testZStandardCompressDecompress finished error"
argument_list|,
name|compressor
operator|.
name|finished
argument_list|()
argument_list|)
expr_stmt|;
name|compressor
operator|.
name|setInput
argument_list|(
name|rawData
argument_list|,
literal|0
argument_list|,
name|rawData
operator|.
name|length
argument_list|)
expr_stmt|;
name|compressor
operator|.
name|finish
argument_list|()
expr_stmt|;
name|byte
index|[]
name|compressedResult
init|=
operator|new
name|byte
index|[
name|rawDataSize
index|]
decl_stmt|;
name|int
name|cSize
init|=
name|compressor
operator|.
name|compress
argument_list|(
name|compressedResult
argument_list|,
literal|0
argument_list|,
name|rawDataSize
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|rawDataSize
argument_list|,
name|compressor
operator|.
name|getBytesRead
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"compressed size no less then original size"
argument_list|,
name|cSize
operator|<
name|rawDataSize
argument_list|)
expr_stmt|;
name|decompressor
operator|.
name|setInput
argument_list|(
name|compressedResult
argument_list|,
literal|0
argument_list|,
name|cSize
argument_list|)
expr_stmt|;
name|byte
index|[]
name|decompressedBytes
init|=
operator|new
name|byte
index|[
name|rawDataSize
index|]
decl_stmt|;
name|decompressor
operator|.
name|decompress
argument_list|(
name|decompressedBytes
argument_list|,
literal|0
argument_list|,
name|decompressedBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|String
name|decompressed
init|=
name|bytesToHex
argument_list|(
name|decompressedBytes
argument_list|)
decl_stmt|;
name|String
name|original
init|=
name|bytesToHex
argument_list|(
name|rawData
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|original
argument_list|,
name|decompressed
argument_list|)
expr_stmt|;
name|compressor
operator|.
name|reset
argument_list|()
expr_stmt|;
name|decompressor
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDecompressingOutput ()
specifier|public
name|void
name|testDecompressingOutput
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|expectedDecompressedResult
init|=
name|FileUtils
operator|.
name|readFileToByteArray
argument_list|(
name|uncompressedFile
argument_list|)
decl_stmt|;
name|ZStandardCodec
name|codec
init|=
operator|new
name|ZStandardCodec
argument_list|()
decl_stmt|;
name|codec
operator|.
name|setConf
argument_list|(
name|CONFIGURATION
argument_list|)
expr_stmt|;
name|CompressionInputStream
name|inputStream
init|=
name|codec
operator|.
name|createInputStream
argument_list|(
name|FileUtils
operator|.
name|openInputStream
argument_list|(
name|compressedFile
argument_list|)
argument_list|,
name|codec
operator|.
name|createDecompressor
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|toDecompress
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|byte
index|[]
name|decompressedResult
decl_stmt|;
name|int
name|totalFileSize
init|=
literal|0
decl_stmt|;
name|int
name|result
init|=
name|toDecompress
operator|.
name|length
decl_stmt|;
try|try
block|{
while|while
condition|(
operator|(
name|result
operator|=
name|inputStream
operator|.
name|read
argument_list|(
name|toDecompress
argument_list|,
literal|0
argument_list|,
name|result
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|baos
operator|.
name|write
argument_list|(
name|toDecompress
argument_list|,
literal|0
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|totalFileSize
operator|+=
name|result
expr_stmt|;
block|}
name|decompressedResult
operator|=
name|baos
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|baos
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|decompressedResult
operator|.
name|length
argument_list|,
name|totalFileSize
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bytesToHex
argument_list|(
name|expectedDecompressedResult
argument_list|)
argument_list|,
name|bytesToHex
argument_list|(
name|decompressedResult
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testZStandardDirectCompressDecompress ()
specifier|public
name|void
name|testZStandardDirectCompressDecompress
parameter_list|()
throws|throws
name|Exception
block|{
name|int
index|[]
name|size
init|=
block|{
literal|1
block|,
literal|4
block|,
literal|16
block|,
literal|4
operator|*
literal|1024
block|,
literal|64
operator|*
literal|1024
block|,
literal|128
operator|*
literal|1024
block|,
literal|1024
operator|*
literal|1024
block|}
decl_stmt|;
for|for
control|(
name|int
name|aSize
range|:
name|size
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"aSize = "
operator|+
name|aSize
argument_list|)
expr_stmt|;
name|compressDecompressLoop
argument_list|(
name|aSize
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|compressDecompressLoop (int rawDataSize)
specifier|private
name|void
name|compressDecompressLoop
parameter_list|(
name|int
name|rawDataSize
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|rawData
init|=
literal|null
decl_stmt|;
name|rawData
operator|=
name|generate
argument_list|(
name|rawDataSize
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
name|rawDataSize
operator|+
literal|12
argument_list|)
decl_stmt|;
name|CompressionOutputStream
name|deflateFilter
init|=
operator|new
name|CompressorStream
argument_list|(
name|baos
argument_list|,
operator|new
name|ZStandardCompressor
argument_list|()
argument_list|,
literal|4096
argument_list|)
decl_stmt|;
name|DataOutputStream
name|deflateOut
init|=
operator|new
name|DataOutputStream
argument_list|(
operator|new
name|BufferedOutputStream
argument_list|(
name|deflateFilter
argument_list|)
argument_list|)
decl_stmt|;
name|deflateOut
operator|.
name|write
argument_list|(
name|rawData
argument_list|,
literal|0
argument_list|,
name|rawData
operator|.
name|length
argument_list|)
expr_stmt|;
name|deflateOut
operator|.
name|flush
argument_list|()
expr_stmt|;
name|deflateFilter
operator|.
name|finish
argument_list|()
expr_stmt|;
name|byte
index|[]
name|compressedResult
init|=
name|baos
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|int
name|compressedSize
init|=
name|compressedResult
operator|.
name|length
decl_stmt|;
name|ZStandardDecompressor
operator|.
name|ZStandardDirectDecompressor
name|decompressor
init|=
operator|new
name|ZStandardDecompressor
operator|.
name|ZStandardDirectDecompressor
argument_list|(
literal|4096
argument_list|)
decl_stmt|;
name|ByteBuffer
name|inBuf
init|=
name|ByteBuffer
operator|.
name|allocateDirect
argument_list|(
name|compressedSize
argument_list|)
decl_stmt|;
name|ByteBuffer
name|outBuf
init|=
name|ByteBuffer
operator|.
name|allocateDirect
argument_list|(
literal|8096
argument_list|)
decl_stmt|;
name|inBuf
operator|.
name|put
argument_list|(
name|compressedResult
argument_list|,
literal|0
argument_list|,
name|compressedSize
argument_list|)
expr_stmt|;
name|inBuf
operator|.
name|flip
argument_list|()
expr_stmt|;
name|ByteBuffer
name|expected
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|rawData
argument_list|)
decl_stmt|;
name|outBuf
operator|.
name|clear
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|decompressor
operator|.
name|finished
argument_list|()
condition|)
block|{
name|decompressor
operator|.
name|decompress
argument_list|(
name|inBuf
argument_list|,
name|outBuf
argument_list|)
expr_stmt|;
if|if
condition|(
name|outBuf
operator|.
name|remaining
argument_list|()
operator|==
literal|0
condition|)
block|{
name|outBuf
operator|.
name|flip
argument_list|()
expr_stmt|;
while|while
condition|(
name|outBuf
operator|.
name|remaining
argument_list|()
operator|>
literal|0
condition|)
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|get
argument_list|()
argument_list|,
name|outBuf
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|outBuf
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
name|outBuf
operator|.
name|flip
argument_list|()
expr_stmt|;
while|while
condition|(
name|outBuf
operator|.
name|remaining
argument_list|()
operator|>
literal|0
condition|)
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|get
argument_list|()
argument_list|,
name|outBuf
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|outBuf
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|expected
operator|.
name|remaining
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReadingWithAStream ()
specifier|public
name|void
name|testReadingWithAStream
parameter_list|()
throws|throws
name|Exception
block|{
name|FileInputStream
name|inputStream
init|=
name|FileUtils
operator|.
name|openInputStream
argument_list|(
name|compressedFile
argument_list|)
decl_stmt|;
name|ZStandardCodec
name|codec
init|=
operator|new
name|ZStandardCodec
argument_list|()
decl_stmt|;
name|codec
operator|.
name|setConf
argument_list|(
name|CONFIGURATION
argument_list|)
expr_stmt|;
name|Decompressor
name|decompressor
init|=
name|codec
operator|.
name|createDecompressor
argument_list|()
decl_stmt|;
name|CompressionInputStream
name|cis
init|=
name|codec
operator|.
name|createInputStream
argument_list|(
name|inputStream
argument_list|,
name|decompressor
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|byte
index|[]
name|resultOfDecompression
decl_stmt|;
try|try
block|{
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
name|int
name|n
decl_stmt|;
while|while
condition|(
operator|(
name|n
operator|=
name|cis
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|length
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|baos
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
name|resultOfDecompression
operator|=
name|baos
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|baos
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|cis
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|expected
init|=
name|FileUtils
operator|.
name|readFileToByteArray
argument_list|(
name|uncompressedFile
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|bytesToHex
argument_list|(
name|expected
argument_list|)
argument_list|,
name|bytesToHex
argument_list|(
name|resultOfDecompression
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDecompressReturnsWhenNothingToDecompress ()
specifier|public
name|void
name|testDecompressReturnsWhenNothingToDecompress
parameter_list|()
throws|throws
name|Exception
block|{
name|ZStandardDecompressor
name|decompressor
init|=
operator|new
name|ZStandardDecompressor
argument_list|(
name|IO_FILE_BUFFER_SIZE_DEFAULT
argument_list|)
decl_stmt|;
name|int
name|result
init|=
name|decompressor
operator|.
name|decompress
argument_list|(
operator|new
name|byte
index|[
literal|10
index|]
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
DECL|method|generate (int size)
specifier|public
specifier|static
name|byte
index|[]
name|generate
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
operator|(
name|byte
operator|)
name|RANDOM
operator|.
name|nextInt
argument_list|(
literal|16
argument_list|)
expr_stmt|;
block|}
return|return
name|data
return|;
block|}
DECL|method|bytesToHex (byte[] bytes)
specifier|private
specifier|static
name|String
name|bytesToHex
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
name|char
index|[]
name|hexChars
init|=
operator|new
name|char
index|[
name|bytes
operator|.
name|length
operator|*
literal|2
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|bytes
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|int
name|v
init|=
name|bytes
index|[
name|j
index|]
operator|&
literal|0xFF
decl_stmt|;
name|hexChars
index|[
name|j
operator|*
literal|2
index|]
operator|=
name|HEX_ARRAY
index|[
name|v
operator|>>>
literal|4
index|]
expr_stmt|;
name|hexChars
index|[
name|j
operator|*
literal|2
operator|+
literal|1
index|]
operator|=
name|HEX_ARRAY
index|[
name|v
operator|&
literal|0x0F
index|]
expr_stmt|;
block|}
return|return
operator|new
name|String
argument_list|(
name|hexChars
argument_list|)
return|;
block|}
block|}
end_class

end_unit

