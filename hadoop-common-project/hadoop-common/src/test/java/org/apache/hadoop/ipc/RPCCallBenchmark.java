begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ipc
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ThreadMXBean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLineParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|GnuParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|HelpFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|OptionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|TestProtoBufRpc
operator|.
name|PBServerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|TestProtoBufRpc
operator|.
name|TestRpcService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|TestRPC
operator|.
name|TestProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|protobuf
operator|.
name|TestProtos
operator|.
name|EchoRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|protobuf
operator|.
name|TestProtos
operator|.
name|EchoResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|protobuf
operator|.
name|TestRpcServiceProtos
operator|.
name|TestProtobufRpcProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MultithreadedTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MultithreadedTestUtil
operator|.
name|TestContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|BlockingService
import|;
end_import

begin_comment
comment|/**  * Benchmark for protobuf RPC.  * Run with --help option for usage.  */
end_comment

begin_class
DECL|class|RPCCallBenchmark
specifier|public
class|class
name|RPCCallBenchmark
implements|implements
name|Tool
implements|,
name|Configurable
block|{
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|callCount
specifier|private
name|AtomicLong
name|callCount
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|threadBean
specifier|private
specifier|static
name|ThreadMXBean
name|threadBean
init|=
name|ManagementFactory
operator|.
name|getThreadMXBean
argument_list|()
decl_stmt|;
DECL|class|MyOptions
specifier|private
specifier|static
class|class
name|MyOptions
block|{
DECL|field|failed
specifier|private
name|boolean
name|failed
init|=
literal|false
decl_stmt|;
DECL|field|serverThreads
specifier|private
name|int
name|serverThreads
init|=
literal|0
decl_stmt|;
DECL|field|serverReaderThreads
specifier|private
name|int
name|serverReaderThreads
init|=
literal|1
decl_stmt|;
DECL|field|clientThreads
specifier|private
name|int
name|clientThreads
init|=
literal|0
decl_stmt|;
DECL|field|host
specifier|private
name|String
name|host
init|=
literal|"0.0.0.0"
decl_stmt|;
DECL|field|port
specifier|private
name|int
name|port
init|=
literal|0
decl_stmt|;
DECL|field|secondsToRun
specifier|public
name|int
name|secondsToRun
init|=
literal|15
decl_stmt|;
DECL|field|msgSize
specifier|private
name|int
name|msgSize
init|=
literal|1024
decl_stmt|;
DECL|field|rpcEngine
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|RpcEngine
argument_list|>
name|rpcEngine
init|=
name|WritableRpcEngine
operator|.
name|class
decl_stmt|;
DECL|method|MyOptions (String args[])
specifier|private
name|MyOptions
parameter_list|(
name|String
name|args
index|[]
parameter_list|)
block|{
try|try
block|{
name|Options
name|opts
init|=
name|buildOptions
argument_list|()
decl_stmt|;
name|CommandLineParser
name|parser
init|=
operator|new
name|GnuParser
argument_list|()
decl_stmt|;
name|CommandLine
name|line
init|=
name|parser
operator|.
name|parse
argument_list|(
name|opts
argument_list|,
name|args
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|processOptions
argument_list|(
name|line
argument_list|,
name|opts
argument_list|)
expr_stmt|;
name|validateOptions
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Try \"--help\" option for details."
argument_list|)
expr_stmt|;
name|failed
operator|=
literal|true
expr_stmt|;
block|}
block|}
DECL|method|validateOptions ()
specifier|private
name|void
name|validateOptions
parameter_list|()
throws|throws
name|ParseException
block|{
if|if
condition|(
name|serverThreads
operator|<=
literal|0
operator|&&
name|clientThreads
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
literal|"Must specify at least -c or -s"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"static-access"
argument_list|)
DECL|method|buildOptions ()
specifier|private
name|Options
name|buildOptions
parameter_list|()
block|{
name|Options
name|opts
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"serverThreads"
argument_list|)
operator|.
name|hasArg
argument_list|(
literal|true
argument_list|)
operator|.
name|withArgName
argument_list|(
literal|"numthreads"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"number of server threads (handlers) to run (or 0 to not run server)"
argument_list|)
operator|.
name|create
argument_list|(
literal|"s"
argument_list|)
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"serverReaderThreads"
argument_list|)
operator|.
name|hasArg
argument_list|(
literal|true
argument_list|)
operator|.
name|withArgName
argument_list|(
literal|"threads"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"number of server reader threads to run"
argument_list|)
operator|.
name|create
argument_list|(
literal|"r"
argument_list|)
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"clientThreads"
argument_list|)
operator|.
name|hasArg
argument_list|(
literal|true
argument_list|)
operator|.
name|withArgName
argument_list|(
literal|"numthreads"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"number of client threads to run (or 0 to not run client)"
argument_list|)
operator|.
name|create
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"messageSize"
argument_list|)
operator|.
name|hasArg
argument_list|(
literal|true
argument_list|)
operator|.
name|withArgName
argument_list|(
literal|"bytes"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"size of call parameter in bytes"
argument_list|)
operator|.
name|create
argument_list|(
literal|"m"
argument_list|)
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"time"
argument_list|)
operator|.
name|hasArg
argument_list|(
literal|true
argument_list|)
operator|.
name|withArgName
argument_list|(
literal|"seconds"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"number of seconds to run clients for"
argument_list|)
operator|.
name|create
argument_list|(
literal|"t"
argument_list|)
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"port"
argument_list|)
operator|.
name|hasArg
argument_list|(
literal|true
argument_list|)
operator|.
name|withArgName
argument_list|(
literal|"port"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"port to listen or connect on"
argument_list|)
operator|.
name|create
argument_list|(
literal|"p"
argument_list|)
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"host"
argument_list|)
operator|.
name|hasArg
argument_list|(
literal|true
argument_list|)
operator|.
name|withArgName
argument_list|(
literal|"addr"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"host to listen or connect on"
argument_list|)
operator|.
name|create
argument_list|(
literal|'h'
argument_list|)
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"engine"
argument_list|)
operator|.
name|hasArg
argument_list|(
literal|true
argument_list|)
operator|.
name|withArgName
argument_list|(
literal|"writable|protobuf"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"engine to use"
argument_list|)
operator|.
name|create
argument_list|(
literal|'e'
argument_list|)
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"help"
argument_list|)
operator|.
name|hasArg
argument_list|(
literal|false
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"show this screen"
argument_list|)
operator|.
name|create
argument_list|(
literal|'?'
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|opts
return|;
block|}
DECL|method|processOptions (CommandLine line, Options opts)
specifier|private
name|void
name|processOptions
parameter_list|(
name|CommandLine
name|line
parameter_list|,
name|Options
name|opts
parameter_list|)
throws|throws
name|ParseException
block|{
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"help"
argument_list|)
operator|||
name|line
operator|.
name|hasOption
argument_list|(
literal|'?'
argument_list|)
condition|)
block|{
name|HelpFormatter
name|formatter
init|=
operator|new
name|HelpFormatter
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Protobuf IPC benchmark."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|formatter
operator|.
name|printHelp
argument_list|(
literal|100
argument_list|,
literal|"java ... PBRPCBenchmark [options]"
argument_list|,
literal|"\nSupported options:"
argument_list|,
name|opts
argument_list|,
literal|""
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|'s'
argument_list|)
condition|)
block|{
name|serverThreads
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|line
operator|.
name|getOptionValue
argument_list|(
literal|'s'
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|'r'
argument_list|)
condition|)
block|{
name|serverReaderThreads
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|line
operator|.
name|getOptionValue
argument_list|(
literal|'r'
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|'c'
argument_list|)
condition|)
block|{
name|clientThreads
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|line
operator|.
name|getOptionValue
argument_list|(
literal|'c'
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|'t'
argument_list|)
condition|)
block|{
name|secondsToRun
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|line
operator|.
name|getOptionValue
argument_list|(
literal|'t'
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|'m'
argument_list|)
condition|)
block|{
name|msgSize
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|line
operator|.
name|getOptionValue
argument_list|(
literal|'m'
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|'p'
argument_list|)
condition|)
block|{
name|port
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|line
operator|.
name|getOptionValue
argument_list|(
literal|'p'
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|'h'
argument_list|)
condition|)
block|{
name|host
operator|=
name|line
operator|.
name|getOptionValue
argument_list|(
literal|'h'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|'e'
argument_list|)
condition|)
block|{
name|String
name|eng
init|=
name|line
operator|.
name|getOptionValue
argument_list|(
literal|'e'
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"protobuf"
operator|.
name|equals
argument_list|(
name|eng
argument_list|)
condition|)
block|{
name|rpcEngine
operator|=
name|ProtobufRpcEngine
operator|.
name|class
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"writable"
operator|.
name|equals
argument_list|(
name|eng
argument_list|)
condition|)
block|{
name|rpcEngine
operator|=
name|WritableRpcEngine
operator|.
name|class
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
literal|"invalid engine: "
operator|+
name|eng
argument_list|)
throw|;
block|}
block|}
name|String
index|[]
name|remainingArgs
init|=
name|line
operator|.
name|getArgs
argument_list|()
decl_stmt|;
if|if
condition|(
name|remainingArgs
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
literal|"Extra arguments: "
operator|+
name|Joiner
operator|.
name|on
argument_list|(
literal|" "
argument_list|)
operator|.
name|join
argument_list|(
name|remainingArgs
argument_list|)
argument_list|)
throw|;
block|}
block|}
DECL|method|getPort ()
specifier|public
name|int
name|getPort
parameter_list|()
block|{
if|if
condition|(
name|port
operator|==
literal|0
condition|)
block|{
name|port
operator|=
name|NetUtils
operator|.
name|getFreeSocketPort
argument_list|()
expr_stmt|;
if|if
condition|(
name|port
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not find a free port"
argument_list|)
throw|;
block|}
block|}
return|return
name|port
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"rpcEngine="
operator|+
name|rpcEngine
operator|+
literal|"\nserverThreads="
operator|+
name|serverThreads
operator|+
literal|"\nserverReaderThreads="
operator|+
name|serverReaderThreads
operator|+
literal|"\nclientThreads="
operator|+
name|clientThreads
operator|+
literal|"\nhost="
operator|+
name|host
operator|+
literal|"\nport="
operator|+
name|getPort
argument_list|()
operator|+
literal|"\nsecondsToRun="
operator|+
name|secondsToRun
operator|+
literal|"\nmsgSize="
operator|+
name|msgSize
return|;
block|}
block|}
DECL|method|startServer (MyOptions opts)
specifier|private
name|Server
name|startServer
parameter_list|(
name|MyOptions
name|opts
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|opts
operator|.
name|serverThreads
operator|<=
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|conf
operator|.
name|setInt
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IPC_SERVER_RPC_READ_THREADS_KEY
argument_list|,
name|opts
operator|.
name|serverReaderThreads
argument_list|)
expr_stmt|;
name|RPC
operator|.
name|Server
name|server
decl_stmt|;
comment|// Get RPC server for server side implementation
if|if
condition|(
name|opts
operator|.
name|rpcEngine
operator|==
name|ProtobufRpcEngine
operator|.
name|class
condition|)
block|{
comment|// Create server side implementation
name|PBServerImpl
name|serverImpl
init|=
operator|new
name|PBServerImpl
argument_list|()
decl_stmt|;
name|BlockingService
name|service
init|=
name|TestProtobufRpcProto
operator|.
name|newReflectiveBlockingService
argument_list|(
name|serverImpl
argument_list|)
decl_stmt|;
name|server
operator|=
operator|new
name|RPC
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|setProtocol
argument_list|(
name|TestRpcService
operator|.
name|class
argument_list|)
operator|.
name|setInstance
argument_list|(
name|service
argument_list|)
operator|.
name|setBindAddress
argument_list|(
name|opts
operator|.
name|host
argument_list|)
operator|.
name|setPort
argument_list|(
name|opts
operator|.
name|getPort
argument_list|()
argument_list|)
operator|.
name|setNumHandlers
argument_list|(
name|opts
operator|.
name|serverThreads
argument_list|)
operator|.
name|setVerbose
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opts
operator|.
name|rpcEngine
operator|==
name|WritableRpcEngine
operator|.
name|class
condition|)
block|{
name|server
operator|=
operator|new
name|RPC
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|setProtocol
argument_list|(
name|TestProtocol
operator|.
name|class
argument_list|)
operator|.
name|setInstance
argument_list|(
operator|new
name|TestRPC
operator|.
name|TestImpl
argument_list|()
argument_list|)
operator|.
name|setBindAddress
argument_list|(
name|opts
operator|.
name|host
argument_list|)
operator|.
name|setPort
argument_list|(
name|opts
operator|.
name|getPort
argument_list|()
argument_list|)
operator|.
name|setNumHandlers
argument_list|(
name|opts
operator|.
name|serverThreads
argument_list|)
operator|.
name|setVerbose
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Bad engine: "
operator|+
name|opts
operator|.
name|rpcEngine
argument_list|)
throw|;
block|}
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|server
return|;
block|}
DECL|method|getTotalCpuTime (Iterable<? extends Thread> threads)
specifier|private
name|long
name|getTotalCpuTime
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|Thread
argument_list|>
name|threads
parameter_list|)
block|{
name|long
name|total
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Thread
name|t
range|:
name|threads
control|)
block|{
name|long
name|tid
init|=
name|t
operator|.
name|getId
argument_list|()
decl_stmt|;
name|total
operator|+=
name|threadBean
operator|.
name|getThreadCpuTime
argument_list|(
name|tid
argument_list|)
expr_stmt|;
block|}
return|return
name|total
return|;
block|}
annotation|@
name|Override
DECL|method|run (String[] args)
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|MyOptions
name|opts
init|=
operator|new
name|MyOptions
argument_list|(
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|opts
operator|.
name|failed
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
comment|// Set RPC engine to the configured RPC engine
name|RPC
operator|.
name|setProtocolEngine
argument_list|(
name|conf
argument_list|,
name|TestRpcService
operator|.
name|class
argument_list|,
name|opts
operator|.
name|rpcEngine
argument_list|)
expr_stmt|;
name|Server
name|server
init|=
name|startServer
argument_list|(
name|opts
argument_list|)
decl_stmt|;
try|try
block|{
name|TestContext
name|ctx
init|=
name|setupClientTestContext
argument_list|(
name|opts
argument_list|)
decl_stmt|;
if|if
condition|(
name|ctx
operator|!=
literal|null
condition|)
block|{
name|long
name|totalCalls
init|=
literal|0
decl_stmt|;
name|ctx
operator|.
name|startThreads
argument_list|()
expr_stmt|;
name|long
name|veryStart
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
comment|// Loop printing results every second until the specified
comment|// time has elapsed
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|opts
operator|.
name|secondsToRun
condition|;
name|i
operator|++
control|)
block|{
name|long
name|st
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|ctx
operator|.
name|waitFor
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|long
name|et
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|long
name|ct
init|=
name|callCount
operator|.
name|getAndSet
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|totalCalls
operator|+=
name|ct
expr_stmt|;
name|double
name|callsPerSec
init|=
operator|(
name|ct
operator|*
literal|1000000000
operator|)
operator|/
operator|(
name|et
operator|-
name|st
operator|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Calls per second: "
operator|+
name|callsPerSec
argument_list|)
expr_stmt|;
block|}
comment|// Print results
if|if
condition|(
name|totalCalls
operator|>
literal|0
condition|)
block|{
name|long
name|veryEnd
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|double
name|callsPerSec
init|=
operator|(
name|totalCalls
operator|*
literal|1000000000
operator|)
operator|/
operator|(
name|veryEnd
operator|-
name|veryStart
operator|)
decl_stmt|;
name|long
name|cpuNanosClient
init|=
name|getTotalCpuTime
argument_list|(
name|ctx
operator|.
name|getTestThreads
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|cpuNanosServer
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
name|cpuNanosServer
operator|=
name|getTotalCpuTime
argument_list|(
name|server
operator|.
name|getHandlers
argument_list|()
argument_list|)
expr_stmt|;
empty_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"====== Results ======"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Options:\n"
operator|+
name|opts
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Total calls per second: "
operator|+
name|callsPerSec
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"CPU time per call on client: "
operator|+
operator|(
name|cpuNanosClient
operator|/
name|totalCalls
operator|)
operator|+
literal|" ns"
argument_list|)
expr_stmt|;
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"CPU time per call on server: "
operator|+
operator|(
name|cpuNanosServer
operator|/
name|totalCalls
operator|)
operator|+
literal|" ns"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"No calls!"
argument_list|)
expr_stmt|;
block|}
name|ctx
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
else|else
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
return|return
literal|0
return|;
block|}
DECL|method|setupClientTestContext (final MyOptions opts)
specifier|private
name|TestContext
name|setupClientTestContext
parameter_list|(
specifier|final
name|MyOptions
name|opts
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|opts
operator|.
name|clientThreads
operator|<=
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// Set up a separate proxy for each client thread,
comment|// rather than making them share TCP pipes.
name|int
name|numProxies
init|=
name|opts
operator|.
name|clientThreads
decl_stmt|;
specifier|final
name|RpcServiceWrapper
name|proxies
index|[]
init|=
operator|new
name|RpcServiceWrapper
index|[
name|numProxies
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numProxies
condition|;
name|i
operator|++
control|)
block|{
name|proxies
index|[
name|i
index|]
operator|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"proxy-"
operator|+
name|i
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|RpcServiceWrapper
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|RpcServiceWrapper
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|createRpcClient
argument_list|(
name|opts
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|// Create an echo message of the desired length
specifier|final
name|StringBuilder
name|msgBuilder
init|=
operator|new
name|StringBuilder
argument_list|(
name|opts
operator|.
name|msgSize
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|opts
operator|.
name|msgSize
condition|;
name|c
operator|++
control|)
block|{
name|msgBuilder
operator|.
name|append
argument_list|(
literal|'x'
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|echoMessage
init|=
name|msgBuilder
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// Create the clients in a test context
name|TestContext
name|ctx
init|=
operator|new
name|TestContext
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|opts
operator|.
name|clientThreads
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|RpcServiceWrapper
name|proxy
init|=
name|proxies
index|[
name|i
operator|%
name|numProxies
index|]
decl_stmt|;
name|ctx
operator|.
name|addThread
argument_list|(
operator|new
name|MultithreadedTestUtil
operator|.
name|RepeatingTestThread
argument_list|(
name|ctx
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|doAnAction
parameter_list|()
throws|throws
name|Exception
block|{
name|proxy
operator|.
name|doEcho
argument_list|(
name|echoMessage
argument_list|)
expr_stmt|;
name|callCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|ctx
return|;
block|}
comment|/**    * Simple interface that can be implemented either by the    * protobuf or writable implementations.    */
DECL|interface|RpcServiceWrapper
specifier|private
interface|interface
name|RpcServiceWrapper
block|{
DECL|method|doEcho (String msg)
specifier|public
name|String
name|doEcho
parameter_list|(
name|String
name|msg
parameter_list|)
throws|throws
name|Exception
function_decl|;
block|}
comment|/**    * Create a client proxy for the specified engine.    */
DECL|method|createRpcClient (MyOptions opts)
specifier|private
name|RpcServiceWrapper
name|createRpcClient
parameter_list|(
name|MyOptions
name|opts
parameter_list|)
throws|throws
name|IOException
block|{
name|InetSocketAddress
name|addr
init|=
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|opts
operator|.
name|host
argument_list|,
name|opts
operator|.
name|getPort
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|opts
operator|.
name|rpcEngine
operator|==
name|ProtobufRpcEngine
operator|.
name|class
condition|)
block|{
specifier|final
name|TestRpcService
name|proxy
init|=
name|RPC
operator|.
name|getProxy
argument_list|(
name|TestRpcService
operator|.
name|class
argument_list|,
literal|0
argument_list|,
name|addr
argument_list|,
name|conf
argument_list|)
decl_stmt|;
return|return
operator|new
name|RpcServiceWrapper
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|doEcho
parameter_list|(
name|String
name|msg
parameter_list|)
throws|throws
name|Exception
block|{
name|EchoRequestProto
name|req
init|=
name|EchoRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setMessage
argument_list|(
name|msg
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|EchoResponseProto
name|responseProto
init|=
name|proxy
operator|.
name|echo
argument_list|(
literal|null
argument_list|,
name|req
argument_list|)
decl_stmt|;
return|return
name|responseProto
operator|.
name|getMessage
argument_list|()
return|;
block|}
block|}
return|;
block|}
elseif|else
if|if
condition|(
name|opts
operator|.
name|rpcEngine
operator|==
name|WritableRpcEngine
operator|.
name|class
condition|)
block|{
specifier|final
name|TestProtocol
name|proxy
init|=
operator|(
name|TestProtocol
operator|)
name|RPC
operator|.
name|getProxy
argument_list|(
name|TestProtocol
operator|.
name|class
argument_list|,
name|TestProtocol
operator|.
name|versionID
argument_list|,
name|addr
argument_list|,
name|conf
argument_list|)
decl_stmt|;
return|return
operator|new
name|RpcServiceWrapper
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|doEcho
parameter_list|(
name|String
name|msg
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|proxy
operator|.
name|echo
argument_list|(
name|msg
argument_list|)
return|;
block|}
block|}
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unsupported engine: "
operator|+
name|opts
operator|.
name|rpcEngine
argument_list|)
throw|;
block|}
block|}
DECL|method|main (String []args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|rc
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|RPCCallBenchmark
argument_list|()
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|rc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setConf (Configuration conf)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getConf ()
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
block|}
end_class

end_unit

