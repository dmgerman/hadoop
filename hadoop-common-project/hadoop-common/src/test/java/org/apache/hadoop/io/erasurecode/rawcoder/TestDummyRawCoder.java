begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.erasurecode.rawcoder
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|rawcoder
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|ECChunk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_comment
comment|/**  * Test dummy raw coder.  */
end_comment

begin_class
DECL|class|TestDummyRawCoder
specifier|public
class|class
name|TestDummyRawCoder
extends|extends
name|TestRawCoderBase
block|{
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|encoderFactoryClass
operator|=
name|DummyRawErasureCoderFactory
operator|.
name|class
expr_stmt|;
name|decoderFactoryClass
operator|=
name|DummyRawErasureCoderFactory
operator|.
name|class
expr_stmt|;
name|setAllowDump
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setChunkSize
argument_list|(
name|baseChunkSize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCoding_6x3_erasing_d0_d2 ()
specifier|public
name|void
name|testCoding_6x3_erasing_d0_d2
parameter_list|()
block|{
name|prepare
argument_list|(
literal|null
argument_list|,
literal|6
argument_list|,
literal|3
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|2
block|}
argument_list|,
operator|new
name|int
index|[
literal|0
index|]
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testCodingDoMixed
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCoding_6x3_erasing_d0_p0 ()
specifier|public
name|void
name|testCoding_6x3_erasing_d0_p0
parameter_list|()
block|{
name|prepare
argument_list|(
literal|null
argument_list|,
literal|6
argument_list|,
literal|3
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testCodingDoMixed
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|testCoding (boolean usingDirectBuffer)
specifier|protected
name|void
name|testCoding
parameter_list|(
name|boolean
name|usingDirectBuffer
parameter_list|)
block|{
name|this
operator|.
name|usingDirectBuffer
operator|=
name|usingDirectBuffer
expr_stmt|;
name|prepareCoders
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|prepareBufferAllocator
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setAllowChangeInputs
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Generate data and encode
name|ECChunk
index|[]
name|dataChunks
init|=
name|prepareDataChunksForEncoding
argument_list|()
decl_stmt|;
name|markChunks
argument_list|(
name|dataChunks
argument_list|)
expr_stmt|;
name|ECChunk
index|[]
name|parityChunks
init|=
name|prepareParityChunksForEncoding
argument_list|()
decl_stmt|;
name|encoder
operator|.
name|encode
argument_list|(
name|dataChunks
argument_list|,
name|parityChunks
argument_list|)
expr_stmt|;
name|compareAndVerify
argument_list|(
name|parityChunks
argument_list|,
name|getEmptyChunks
argument_list|(
name|parityChunks
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
comment|// Decode
name|restoreChunksFromMark
argument_list|(
name|dataChunks
argument_list|)
expr_stmt|;
name|backupAndEraseChunks
argument_list|(
name|dataChunks
argument_list|,
name|parityChunks
argument_list|)
expr_stmt|;
name|ECChunk
index|[]
name|inputChunks
init|=
name|prepareInputChunksForDecoding
argument_list|(
name|dataChunks
argument_list|,
name|parityChunks
argument_list|)
decl_stmt|;
name|ensureOnlyLeastRequiredChunks
argument_list|(
name|inputChunks
argument_list|)
expr_stmt|;
name|ECChunk
index|[]
name|recoveredChunks
init|=
name|prepareOutputChunksForDecoding
argument_list|()
decl_stmt|;
name|decoder
operator|.
name|decode
argument_list|(
name|inputChunks
argument_list|,
name|getErasedIndexesForDecoding
argument_list|()
argument_list|,
name|recoveredChunks
argument_list|)
expr_stmt|;
name|compareAndVerify
argument_list|(
name|recoveredChunks
argument_list|,
name|getEmptyChunks
argument_list|(
name|recoveredChunks
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getEmptyChunks (int num)
specifier|private
name|ECChunk
index|[]
name|getEmptyChunks
parameter_list|(
name|int
name|num
parameter_list|)
block|{
name|ECChunk
index|[]
name|chunks
init|=
operator|new
name|ECChunk
index|[
name|num
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|chunks
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|chunks
index|[
name|i
index|]
operator|=
operator|new
name|ECChunk
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|getZeroChunkBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|chunks
return|;
block|}
block|}
end_class

end_unit

