begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.net.unix
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|unix
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_comment
comment|/**  * Create a temporary directory in which sockets can be created.  * When creating a UNIX domain socket, the name  * must be fairly short (around 110 bytes on most platforms).  */
end_comment

begin_class
DECL|class|TemporarySocketDirectory
specifier|public
class|class
name|TemporarySocketDirectory
implements|implements
name|Closeable
block|{
DECL|field|dir
specifier|private
name|File
name|dir
decl_stmt|;
DECL|method|TemporarySocketDirectory ()
specifier|public
name|TemporarySocketDirectory
parameter_list|()
block|{
name|String
name|tmp
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|,
literal|"/tmp"
argument_list|)
decl_stmt|;
name|dir
operator|=
operator|new
name|File
argument_list|(
name|tmp
argument_list|,
literal|"socks."
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|"."
operator|+
operator|(
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|()
operator|)
operator|)
argument_list|)
expr_stmt|;
name|dir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|FileUtil
operator|.
name|setWritable
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|getDir ()
specifier|public
name|File
name|getDir
parameter_list|()
block|{
return|return
name|dir
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|dir
operator|!=
literal|null
condition|)
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|dir
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|finalize ()
specifier|protected
name|void
name|finalize
parameter_list|()
throws|throws
name|IOException
block|{
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

