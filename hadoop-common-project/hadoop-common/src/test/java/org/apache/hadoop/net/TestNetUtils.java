begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.net
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|BindException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ConnectException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|NetworkInterface
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|AssertionFailedError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|NetUtilsTestResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestNetUtils
specifier|public
class|class
name|TestNetUtils
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestNetUtils
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|DEST_PORT
specifier|private
specifier|static
specifier|final
name|int
name|DEST_PORT
init|=
literal|4040
decl_stmt|;
DECL|field|DEST_PORT_NAME
specifier|private
specifier|static
specifier|final
name|String
name|DEST_PORT_NAME
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|DEST_PORT
argument_list|)
decl_stmt|;
DECL|field|LOCAL_PORT
specifier|private
specifier|static
specifier|final
name|int
name|LOCAL_PORT
init|=
literal|8080
decl_stmt|;
DECL|field|LOCAL_PORT_NAME
specifier|private
specifier|static
specifier|final
name|String
name|LOCAL_PORT_NAME
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|LOCAL_PORT
argument_list|)
decl_stmt|;
comment|/**    * Test that we can't accidentally connect back to the connecting socket due    * to a quirk in the TCP spec.    *    * This is a regression test for HADOOP-6722.    */
annotation|@
name|Test
DECL|method|testAvoidLoopbackTcpSockets ()
specifier|public
name|void
name|testAvoidLoopbackTcpSockets
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Socket
name|socket
init|=
name|NetUtils
operator|.
name|getDefaultSocketFactory
argument_list|(
name|conf
argument_list|)
operator|.
name|createSocket
argument_list|()
decl_stmt|;
name|socket
operator|.
name|bind
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"local address: "
operator|+
name|socket
operator|.
name|getLocalAddress
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"local port: "
operator|+
name|socket
operator|.
name|getLocalPort
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|NetUtils
operator|.
name|connect
argument_list|(
name|socket
argument_list|,
operator|new
name|InetSocketAddress
argument_list|(
name|socket
operator|.
name|getLocalAddress
argument_list|()
argument_list|,
name|socket
operator|.
name|getLocalPort
argument_list|()
argument_list|)
argument_list|,
literal|20000
argument_list|)
expr_stmt|;
name|socket
operator|.
name|close
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should not have connected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConnectException
name|ce
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Got exception: "
operator|+
name|ce
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ce
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"resulted in a loopback"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SocketException
name|se
parameter_list|)
block|{
comment|// Some TCP stacks will actually throw their own Invalid argument exception
comment|// here. This is also OK.
name|assertTrue
argument_list|(
name|se
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Invalid argument"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test for {    * @throws UnknownHostException @link NetUtils#getLocalInetAddress(String)    * @throws SocketException     */
annotation|@
name|Test
DECL|method|testGetLocalInetAddress ()
specifier|public
name|void
name|testGetLocalInetAddress
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNotNull
argument_list|(
name|NetUtils
operator|.
name|getLocalInetAddress
argument_list|(
literal|"127.0.0.1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|NetUtils
operator|.
name|getLocalInetAddress
argument_list|(
literal|"invalid-address-for-test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|NetUtils
operator|.
name|getLocalInetAddress
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|UnknownHostException
operator|.
name|class
argument_list|)
DECL|method|testVerifyHostnamesException ()
specifier|public
name|void
name|testVerifyHostnamesException
parameter_list|()
throws|throws
name|UnknownHostException
block|{
name|String
index|[]
name|names
init|=
block|{
literal|"valid.host.com"
block|,
literal|"1.com"
block|,
literal|"invalid host here"
block|}
decl_stmt|;
name|NetUtils
operator|.
name|verifyHostnames
argument_list|(
name|names
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testVerifyHostnamesNoException ()
specifier|public
name|void
name|testVerifyHostnamesNoException
parameter_list|()
block|{
name|String
index|[]
name|names
init|=
block|{
literal|"valid.host.com"
block|,
literal|"1.com"
block|}
decl_stmt|;
try|try
block|{
name|NetUtils
operator|.
name|verifyHostnames
argument_list|(
name|names
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"NetUtils.verifyHostnames threw unexpected UnknownHostException"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**     * Test for {@link NetUtils#isLocalAddress(java.net.InetAddress)}    */
annotation|@
name|Test
DECL|method|testIsLocalAddress ()
specifier|public
name|void
name|testIsLocalAddress
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test - local host is local address
name|assertTrue
argument_list|(
name|NetUtils
operator|.
name|isLocalAddress
argument_list|(
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test - all addresses bound network interface is local address
name|Enumeration
argument_list|<
name|NetworkInterface
argument_list|>
name|interfaces
init|=
name|NetworkInterface
operator|.
name|getNetworkInterfaces
argument_list|()
decl_stmt|;
if|if
condition|(
name|interfaces
operator|!=
literal|null
condition|)
block|{
comment|// Iterate through all network interfaces
while|while
condition|(
name|interfaces
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|NetworkInterface
name|i
init|=
name|interfaces
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|Enumeration
argument_list|<
name|InetAddress
argument_list|>
name|addrs
init|=
name|i
operator|.
name|getInetAddresses
argument_list|()
decl_stmt|;
if|if
condition|(
name|addrs
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
comment|// Iterate through all the addresses of a network interface
while|while
condition|(
name|addrs
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|InetAddress
name|addr
init|=
name|addrs
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|NetUtils
operator|.
name|isLocalAddress
argument_list|(
name|addr
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|assertFalse
argument_list|(
name|NetUtils
operator|.
name|isLocalAddress
argument_list|(
name|InetAddress
operator|.
name|getByName
argument_list|(
literal|"8.8.8.8"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWrapConnectException ()
specifier|public
name|void
name|testWrapConnectException
parameter_list|()
throws|throws
name|Throwable
block|{
name|IOException
name|e
init|=
operator|new
name|ConnectException
argument_list|(
literal|"failed"
argument_list|)
decl_stmt|;
name|IOException
name|wrapped
init|=
name|verifyExceptionClass
argument_list|(
name|e
argument_list|,
name|ConnectException
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertInException
argument_list|(
name|wrapped
argument_list|,
literal|"failed"
argument_list|)
expr_stmt|;
name|assertWikified
argument_list|(
name|wrapped
argument_list|)
expr_stmt|;
name|assertInException
argument_list|(
name|wrapped
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
name|assertRemoteDetailsIncluded
argument_list|(
name|wrapped
argument_list|)
expr_stmt|;
name|assertInException
argument_list|(
name|wrapped
argument_list|,
literal|"/ConnectionRefused"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWrapBindException ()
specifier|public
name|void
name|testWrapBindException
parameter_list|()
throws|throws
name|Throwable
block|{
name|IOException
name|e
init|=
operator|new
name|BindException
argument_list|(
literal|"failed"
argument_list|)
decl_stmt|;
name|IOException
name|wrapped
init|=
name|verifyExceptionClass
argument_list|(
name|e
argument_list|,
name|BindException
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertInException
argument_list|(
name|wrapped
argument_list|,
literal|"failed"
argument_list|)
expr_stmt|;
name|assertLocalDetailsIncluded
argument_list|(
name|wrapped
argument_list|)
expr_stmt|;
name|assertNotInException
argument_list|(
name|wrapped
argument_list|,
name|DEST_PORT_NAME
argument_list|)
expr_stmt|;
name|assertInException
argument_list|(
name|wrapped
argument_list|,
literal|"/BindException"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWrapUnknownHostException ()
specifier|public
name|void
name|testWrapUnknownHostException
parameter_list|()
throws|throws
name|Throwable
block|{
name|IOException
name|e
init|=
operator|new
name|UnknownHostException
argument_list|(
literal|"failed"
argument_list|)
decl_stmt|;
name|IOException
name|wrapped
init|=
name|verifyExceptionClass
argument_list|(
name|e
argument_list|,
name|UnknownHostException
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertInException
argument_list|(
name|wrapped
argument_list|,
literal|"failed"
argument_list|)
expr_stmt|;
name|assertWikified
argument_list|(
name|wrapped
argument_list|)
expr_stmt|;
name|assertInException
argument_list|(
name|wrapped
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
name|assertRemoteDetailsIncluded
argument_list|(
name|wrapped
argument_list|)
expr_stmt|;
name|assertInException
argument_list|(
name|wrapped
argument_list|,
literal|"/UnknownHost"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetConnectAddress ()
specifier|public
name|void
name|testGetConnectAddress
parameter_list|()
throws|throws
name|IOException
block|{
name|NetUtils
operator|.
name|addStaticResolution
argument_list|(
literal|"host"
argument_list|,
literal|"127.0.0.1"
argument_list|)
expr_stmt|;
name|InetSocketAddress
name|addr
init|=
name|NetUtils
operator|.
name|createSocketAddrForHost
argument_list|(
literal|"host"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|InetSocketAddress
name|connectAddr
init|=
name|NetUtils
operator|.
name|getConnectAddress
argument_list|(
name|addr
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|addr
operator|.
name|getHostName
argument_list|()
argument_list|,
name|connectAddr
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
name|addr
operator|=
operator|new
name|InetSocketAddress
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|connectAddr
operator|=
name|NetUtils
operator|.
name|getConnectAddress
argument_list|(
name|addr
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getHostName
argument_list|()
argument_list|,
name|connectAddr
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateSocketAddress ()
specifier|public
name|void
name|testCreateSocketAddress
parameter_list|()
throws|throws
name|Throwable
block|{
name|InetSocketAddress
name|addr
init|=
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
literal|"127.0.0.1:12345"
argument_list|,
literal|1000
argument_list|,
literal|"myconfig"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"127.0.0.1"
argument_list|,
name|addr
operator|.
name|getAddress
argument_list|()
operator|.
name|getHostAddress
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|12345
argument_list|,
name|addr
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|addr
operator|=
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|1000
argument_list|,
literal|"myconfig"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"127.0.0.1"
argument_list|,
name|addr
operator|.
name|getAddress
argument_list|()
operator|.
name|getHostAddress
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000
argument_list|,
name|addr
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|addr
operator|=
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
literal|"127.0.0.1:blahblah"
argument_list|,
literal|1000
argument_list|,
literal|"myconfig"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have failed to parse bad port"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
name|assertInException
argument_list|(
name|iae
argument_list|,
literal|"myconfig"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertRemoteDetailsIncluded (IOException wrapped)
specifier|private
name|void
name|assertRemoteDetailsIncluded
parameter_list|(
name|IOException
name|wrapped
parameter_list|)
throws|throws
name|Throwable
block|{
name|assertInException
argument_list|(
name|wrapped
argument_list|,
literal|"desthost"
argument_list|)
expr_stmt|;
name|assertInException
argument_list|(
name|wrapped
argument_list|,
name|DEST_PORT_NAME
argument_list|)
expr_stmt|;
block|}
DECL|method|assertLocalDetailsIncluded (IOException wrapped)
specifier|private
name|void
name|assertLocalDetailsIncluded
parameter_list|(
name|IOException
name|wrapped
parameter_list|)
throws|throws
name|Throwable
block|{
name|assertInException
argument_list|(
name|wrapped
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
name|assertInException
argument_list|(
name|wrapped
argument_list|,
name|LOCAL_PORT_NAME
argument_list|)
expr_stmt|;
block|}
DECL|method|assertWikified (Exception e)
specifier|private
name|void
name|assertWikified
parameter_list|(
name|Exception
name|e
parameter_list|)
throws|throws
name|Throwable
block|{
name|assertInException
argument_list|(
name|e
argument_list|,
name|NetUtils
operator|.
name|HADOOP_WIKI
argument_list|)
expr_stmt|;
block|}
DECL|method|assertInException (Exception e, String text)
specifier|private
name|void
name|assertInException
parameter_list|(
name|Exception
name|e
parameter_list|,
name|String
name|text
parameter_list|)
throws|throws
name|Throwable
block|{
name|String
name|message
init|=
name|extractExceptionMessage
argument_list|(
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|message
operator|.
name|contains
argument_list|(
name|text
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|AssertionFailedError
argument_list|(
literal|"Wrong text in message "
operator|+
literal|"\""
operator|+
name|message
operator|+
literal|"\""
operator|+
literal|" expected \""
operator|+
name|text
operator|+
literal|"\""
argument_list|)
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|extractExceptionMessage (Exception e)
specifier|private
name|String
name|extractExceptionMessage
parameter_list|(
name|Exception
name|e
parameter_list|)
throws|throws
name|Throwable
block|{
name|assertNotNull
argument_list|(
literal|"Null Exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|message
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AssertionFailedError
argument_list|(
literal|"Empty text in exception "
operator|+
name|e
argument_list|)
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|message
return|;
block|}
DECL|method|assertNotInException (Exception e, String text)
specifier|private
name|void
name|assertNotInException
parameter_list|(
name|Exception
name|e
parameter_list|,
name|String
name|text
parameter_list|)
throws|throws
name|Throwable
block|{
name|String
name|message
init|=
name|extractExceptionMessage
argument_list|(
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
name|message
operator|.
name|contains
argument_list|(
name|text
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AssertionFailedError
argument_list|(
literal|"Wrong text in message "
operator|+
literal|"\""
operator|+
name|message
operator|+
literal|"\""
operator|+
literal|" did not expect \""
operator|+
name|text
operator|+
literal|"\""
argument_list|)
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|verifyExceptionClass (IOException e, Class expectedClass)
specifier|private
name|IOException
name|verifyExceptionClass
parameter_list|(
name|IOException
name|e
parameter_list|,
name|Class
name|expectedClass
parameter_list|)
throws|throws
name|Throwable
block|{
name|assertNotNull
argument_list|(
literal|"Null Exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|IOException
name|wrapped
init|=
name|NetUtils
operator|.
name|wrapException
argument_list|(
literal|"desthost"
argument_list|,
name|DEST_PORT
argument_list|,
literal|"localhost"
argument_list|,
name|LOCAL_PORT
argument_list|,
name|e
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|wrapped
operator|.
name|toString
argument_list|()
argument_list|,
name|wrapped
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|wrapped
operator|.
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|expectedClass
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|AssertionFailedError
argument_list|(
literal|"Wrong exception class; expected "
operator|+
name|expectedClass
operator|+
literal|" got "
operator|+
name|wrapped
operator|.
name|getClass
argument_list|()
operator|+
literal|": "
operator|+
name|wrapped
argument_list|)
operator|.
name|initCause
argument_list|(
name|wrapped
argument_list|)
throw|;
block|}
return|return
name|wrapped
return|;
block|}
DECL|field|resolver
specifier|static
name|NetUtilsTestResolver
name|resolver
decl_stmt|;
DECL|field|config
specifier|static
name|Configuration
name|config
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setupResolver ()
specifier|public
specifier|static
name|void
name|setupResolver
parameter_list|()
block|{
name|resolver
operator|=
name|NetUtilsTestResolver
operator|.
name|install
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|resetResolver ()
specifier|public
name|void
name|resetResolver
parameter_list|()
block|{
name|resolver
operator|.
name|reset
argument_list|()
expr_stmt|;
name|config
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
block|}
comment|// getByExactName
DECL|method|verifyGetByExactNameSearch (String host, String ... searches)
specifier|private
name|void
name|verifyGetByExactNameSearch
parameter_list|(
name|String
name|host
parameter_list|,
name|String
modifier|...
name|searches
parameter_list|)
block|{
name|assertNull
argument_list|(
name|resolver
operator|.
name|getByExactName
argument_list|(
name|host
argument_list|)
argument_list|)
expr_stmt|;
name|assertBetterArrayEquals
argument_list|(
name|searches
argument_list|,
name|resolver
operator|.
name|getHostSearches
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testResolverGetByExactNameUnqualified ()
specifier|public
name|void
name|testResolverGetByExactNameUnqualified
parameter_list|()
block|{
name|verifyGetByExactNameSearch
argument_list|(
literal|"unknown"
argument_list|,
literal|"unknown."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testResolverGetByExactNameUnqualifiedWithDomain ()
specifier|public
name|void
name|testResolverGetByExactNameUnqualifiedWithDomain
parameter_list|()
block|{
name|verifyGetByExactNameSearch
argument_list|(
literal|"unknown.domain"
argument_list|,
literal|"unknown.domain."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testResolverGetByExactNameQualified ()
specifier|public
name|void
name|testResolverGetByExactNameQualified
parameter_list|()
block|{
name|verifyGetByExactNameSearch
argument_list|(
literal|"unknown."
argument_list|,
literal|"unknown."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testResolverGetByExactNameQualifiedWithDomain ()
specifier|public
name|void
name|testResolverGetByExactNameQualifiedWithDomain
parameter_list|()
block|{
name|verifyGetByExactNameSearch
argument_list|(
literal|"unknown.domain."
argument_list|,
literal|"unknown.domain."
argument_list|)
expr_stmt|;
block|}
comment|// getByNameWithSearch
DECL|method|verifyGetByNameWithSearch (String host, String ... searches)
specifier|private
name|void
name|verifyGetByNameWithSearch
parameter_list|(
name|String
name|host
parameter_list|,
name|String
modifier|...
name|searches
parameter_list|)
block|{
name|assertNull
argument_list|(
name|resolver
operator|.
name|getByNameWithSearch
argument_list|(
name|host
argument_list|)
argument_list|)
expr_stmt|;
name|assertBetterArrayEquals
argument_list|(
name|searches
argument_list|,
name|resolver
operator|.
name|getHostSearches
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testResolverGetByNameWithSearchUnqualified ()
specifier|public
name|void
name|testResolverGetByNameWithSearchUnqualified
parameter_list|()
block|{
name|String
name|host
init|=
literal|"unknown"
decl_stmt|;
name|verifyGetByNameWithSearch
argument_list|(
name|host
argument_list|,
name|host
operator|+
literal|".a.b."
argument_list|,
name|host
operator|+
literal|".b."
argument_list|,
name|host
operator|+
literal|".c."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testResolverGetByNameWithSearchUnqualifiedWithDomain ()
specifier|public
name|void
name|testResolverGetByNameWithSearchUnqualifiedWithDomain
parameter_list|()
block|{
name|String
name|host
init|=
literal|"unknown.domain"
decl_stmt|;
name|verifyGetByNameWithSearch
argument_list|(
name|host
argument_list|,
name|host
operator|+
literal|".a.b."
argument_list|,
name|host
operator|+
literal|".b."
argument_list|,
name|host
operator|+
literal|".c."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testResolverGetByNameWithSearchQualified ()
specifier|public
name|void
name|testResolverGetByNameWithSearchQualified
parameter_list|()
block|{
name|String
name|host
init|=
literal|"unknown."
decl_stmt|;
name|verifyGetByNameWithSearch
argument_list|(
name|host
argument_list|,
name|host
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testResolverGetByNameWithSearchQualifiedWithDomain ()
specifier|public
name|void
name|testResolverGetByNameWithSearchQualifiedWithDomain
parameter_list|()
block|{
name|String
name|host
init|=
literal|"unknown.domain."
decl_stmt|;
name|verifyGetByNameWithSearch
argument_list|(
name|host
argument_list|,
name|host
argument_list|)
expr_stmt|;
block|}
comment|// getByName
DECL|method|verifyGetByName (String host, String ... searches)
specifier|private
name|void
name|verifyGetByName
parameter_list|(
name|String
name|host
parameter_list|,
name|String
modifier|...
name|searches
parameter_list|)
block|{
name|InetAddress
name|addr
init|=
literal|null
decl_stmt|;
try|try
block|{
name|addr
operator|=
name|resolver
operator|.
name|getByName
argument_list|(
name|host
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{}
comment|// ignore
name|assertNull
argument_list|(
name|addr
argument_list|)
expr_stmt|;
name|assertBetterArrayEquals
argument_list|(
name|searches
argument_list|,
name|resolver
operator|.
name|getHostSearches
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testResolverGetByNameQualified ()
specifier|public
name|void
name|testResolverGetByNameQualified
parameter_list|()
block|{
name|String
name|host
init|=
literal|"unknown."
decl_stmt|;
name|verifyGetByName
argument_list|(
name|host
argument_list|,
name|host
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testResolverGetByNameQualifiedWithDomain ()
specifier|public
name|void
name|testResolverGetByNameQualifiedWithDomain
parameter_list|()
block|{
name|verifyGetByName
argument_list|(
literal|"unknown.domain."
argument_list|,
literal|"unknown.domain."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testResolverGetByNameUnqualified ()
specifier|public
name|void
name|testResolverGetByNameUnqualified
parameter_list|()
block|{
name|String
name|host
init|=
literal|"unknown"
decl_stmt|;
name|verifyGetByName
argument_list|(
name|host
argument_list|,
name|host
operator|+
literal|".a.b."
argument_list|,
name|host
operator|+
literal|".b."
argument_list|,
name|host
operator|+
literal|".c."
argument_list|,
name|host
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testResolverGetByNameUnqualifiedWithDomain ()
specifier|public
name|void
name|testResolverGetByNameUnqualifiedWithDomain
parameter_list|()
block|{
name|String
name|host
init|=
literal|"unknown.domain"
decl_stmt|;
name|verifyGetByName
argument_list|(
name|host
argument_list|,
name|host
operator|+
literal|"."
argument_list|,
name|host
operator|+
literal|".a.b."
argument_list|,
name|host
operator|+
literal|".b."
argument_list|,
name|host
operator|+
literal|".c."
argument_list|)
expr_stmt|;
block|}
comment|// resolving of hosts
DECL|method|verifyResolve (String host, String ... searches)
specifier|private
name|InetAddress
name|verifyResolve
parameter_list|(
name|String
name|host
parameter_list|,
name|String
modifier|...
name|searches
parameter_list|)
block|{
name|InetAddress
name|addr
init|=
literal|null
decl_stmt|;
try|try
block|{
name|addr
operator|=
name|resolver
operator|.
name|getByName
argument_list|(
name|host
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{}
comment|// ignore
name|assertNotNull
argument_list|(
name|addr
argument_list|)
expr_stmt|;
name|assertBetterArrayEquals
argument_list|(
name|searches
argument_list|,
name|resolver
operator|.
name|getHostSearches
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|addr
return|;
block|}
specifier|private
name|void
DECL|method|verifyInetAddress (InetAddress addr, String host, String ip)
name|verifyInetAddress
parameter_list|(
name|InetAddress
name|addr
parameter_list|,
name|String
name|host
parameter_list|,
name|String
name|ip
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|addr
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|host
argument_list|,
name|addr
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ip
argument_list|,
name|addr
operator|.
name|getHostAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testResolverUnqualified ()
specifier|public
name|void
name|testResolverUnqualified
parameter_list|()
block|{
name|String
name|host
init|=
literal|"host"
decl_stmt|;
name|InetAddress
name|addr
init|=
name|verifyResolve
argument_list|(
name|host
argument_list|,
name|host
operator|+
literal|".a.b."
argument_list|)
decl_stmt|;
name|verifyInetAddress
argument_list|(
name|addr
argument_list|,
literal|"host.a.b"
argument_list|,
literal|"1.1.1.1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testResolverUnqualifiedWithDomain ()
specifier|public
name|void
name|testResolverUnqualifiedWithDomain
parameter_list|()
block|{
name|String
name|host
init|=
literal|"host.a"
decl_stmt|;
name|InetAddress
name|addr
init|=
name|verifyResolve
argument_list|(
name|host
argument_list|,
name|host
operator|+
literal|"."
argument_list|,
name|host
operator|+
literal|".a.b."
argument_list|,
name|host
operator|+
literal|".b."
argument_list|)
decl_stmt|;
name|verifyInetAddress
argument_list|(
name|addr
argument_list|,
literal|"host.a.b"
argument_list|,
literal|"1.1.1.1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testResolverUnqualifedFull ()
specifier|public
name|void
name|testResolverUnqualifedFull
parameter_list|()
block|{
name|String
name|host
init|=
literal|"host.a.b"
decl_stmt|;
name|InetAddress
name|addr
init|=
name|verifyResolve
argument_list|(
name|host
argument_list|,
name|host
operator|+
literal|"."
argument_list|)
decl_stmt|;
name|verifyInetAddress
argument_list|(
name|addr
argument_list|,
name|host
argument_list|,
literal|"1.1.1.1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testResolverQualifed ()
specifier|public
name|void
name|testResolverQualifed
parameter_list|()
block|{
name|String
name|host
init|=
literal|"host.a.b."
decl_stmt|;
name|InetAddress
name|addr
init|=
name|verifyResolve
argument_list|(
name|host
argument_list|,
name|host
argument_list|)
decl_stmt|;
name|verifyInetAddress
argument_list|(
name|addr
argument_list|,
name|host
argument_list|,
literal|"1.1.1.1"
argument_list|)
expr_stmt|;
block|}
comment|// localhost
annotation|@
name|Test
DECL|method|testResolverLoopback ()
specifier|public
name|void
name|testResolverLoopback
parameter_list|()
block|{
name|String
name|host
init|=
literal|"Localhost"
decl_stmt|;
name|InetAddress
name|addr
init|=
name|verifyResolve
argument_list|(
name|host
argument_list|)
decl_stmt|;
comment|// no lookup should occur
name|verifyInetAddress
argument_list|(
name|addr
argument_list|,
literal|"Localhost"
argument_list|,
literal|"127.0.0.1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testResolverIP ()
specifier|public
name|void
name|testResolverIP
parameter_list|()
block|{
name|String
name|host
init|=
literal|"1.1.1.1"
decl_stmt|;
name|InetAddress
name|addr
init|=
name|verifyResolve
argument_list|(
name|host
argument_list|)
decl_stmt|;
comment|// no lookup should occur for ips
name|verifyInetAddress
argument_list|(
name|addr
argument_list|,
name|host
argument_list|,
name|host
argument_list|)
expr_stmt|;
block|}
comment|//
annotation|@
name|Test
DECL|method|testCanonicalUriWithPort ()
specifier|public
name|void
name|testCanonicalUriWithPort
parameter_list|()
block|{
name|URI
name|uri
decl_stmt|;
name|uri
operator|=
name|NetUtils
operator|.
name|getCanonicalUri
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"scheme://host:123"
argument_list|)
argument_list|,
literal|456
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"scheme://host.a.b:123"
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|uri
operator|=
name|NetUtils
operator|.
name|getCanonicalUri
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"scheme://host:123/"
argument_list|)
argument_list|,
literal|456
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"scheme://host.a.b:123/"
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|uri
operator|=
name|NetUtils
operator|.
name|getCanonicalUri
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"scheme://host:123/path"
argument_list|)
argument_list|,
literal|456
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"scheme://host.a.b:123/path"
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|uri
operator|=
name|NetUtils
operator|.
name|getCanonicalUri
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"scheme://host:123/path?q#frag"
argument_list|)
argument_list|,
literal|456
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"scheme://host.a.b:123/path?q#frag"
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCanonicalUriWithDefaultPort ()
specifier|public
name|void
name|testCanonicalUriWithDefaultPort
parameter_list|()
block|{
name|URI
name|uri
decl_stmt|;
name|uri
operator|=
name|NetUtils
operator|.
name|getCanonicalUri
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"scheme://host"
argument_list|)
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"scheme://host.a.b:123"
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|uri
operator|=
name|NetUtils
operator|.
name|getCanonicalUri
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"scheme://host/"
argument_list|)
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"scheme://host.a.b:123/"
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|uri
operator|=
name|NetUtils
operator|.
name|getCanonicalUri
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"scheme://host/path"
argument_list|)
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"scheme://host.a.b:123/path"
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|uri
operator|=
name|NetUtils
operator|.
name|getCanonicalUri
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"scheme://host/path?q#frag"
argument_list|)
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"scheme://host.a.b:123/path?q#frag"
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCanonicalUriWithPath ()
specifier|public
name|void
name|testCanonicalUriWithPath
parameter_list|()
block|{
name|URI
name|uri
decl_stmt|;
name|uri
operator|=
name|NetUtils
operator|.
name|getCanonicalUri
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"path"
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"path"
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|uri
operator|=
name|NetUtils
operator|.
name|getCanonicalUri
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"/path"
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/path"
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCanonicalUriWithNoAuthority ()
specifier|public
name|void
name|testCanonicalUriWithNoAuthority
parameter_list|()
block|{
name|URI
name|uri
decl_stmt|;
name|uri
operator|=
name|NetUtils
operator|.
name|getCanonicalUri
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"scheme:/"
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"scheme:/"
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|uri
operator|=
name|NetUtils
operator|.
name|getCanonicalUri
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"scheme:/path"
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"scheme:/path"
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|uri
operator|=
name|NetUtils
operator|.
name|getCanonicalUri
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"scheme:///"
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"scheme:///"
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|uri
operator|=
name|NetUtils
operator|.
name|getCanonicalUri
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"scheme:///path"
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"scheme:///path"
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCanonicalUriWithNoHost ()
specifier|public
name|void
name|testCanonicalUriWithNoHost
parameter_list|()
block|{
name|URI
name|uri
init|=
name|NetUtils
operator|.
name|getCanonicalUri
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"scheme://:123/path"
argument_list|)
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"scheme://:123/path"
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCanonicalUriWithNoPortNoDefaultPort ()
specifier|public
name|void
name|testCanonicalUriWithNoPortNoDefaultPort
parameter_list|()
block|{
name|URI
name|uri
init|=
name|NetUtils
operator|.
name|getCanonicalUri
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"scheme://host/path"
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"scheme://host.a.b/path"
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetHostNameOfIP ()
specifier|public
name|void
name|testGetHostNameOfIP
parameter_list|()
block|{
name|assertNull
argument_list|(
name|NetUtils
operator|.
name|getHostNameOfIP
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|NetUtils
operator|.
name|getHostNameOfIP
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|NetUtils
operator|.
name|getHostNameOfIP
argument_list|(
literal|"crazytown"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|NetUtils
operator|.
name|getHostNameOfIP
argument_list|(
literal|"127.0.0.1:"
argument_list|)
argument_list|)
expr_stmt|;
comment|// no port
name|assertNull
argument_list|(
name|NetUtils
operator|.
name|getHostNameOfIP
argument_list|(
literal|"127.0.0.1:-1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// bogus port
name|assertNull
argument_list|(
name|NetUtils
operator|.
name|getHostNameOfIP
argument_list|(
literal|"127.0.0.1:A"
argument_list|)
argument_list|)
expr_stmt|;
comment|// bogus port
name|assertNotNull
argument_list|(
name|NetUtils
operator|.
name|getHostNameOfIP
argument_list|(
literal|"127.0.0.1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|NetUtils
operator|.
name|getHostNameOfIP
argument_list|(
literal|"127.0.0.1:1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertBetterArrayEquals (T[] expect, T[]got)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|void
name|assertBetterArrayEquals
parameter_list|(
name|T
index|[]
name|expect
parameter_list|,
name|T
index|[]
name|got
parameter_list|)
block|{
name|String
name|expectStr
init|=
name|StringUtils
operator|.
name|join
argument_list|(
name|expect
argument_list|,
literal|", "
argument_list|)
decl_stmt|;
name|String
name|gotStr
init|=
name|StringUtils
operator|.
name|join
argument_list|(
name|got
argument_list|,
literal|", "
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectStr
argument_list|,
name|gotStr
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

