begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.compress
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|GZIPInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|GZIPOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataInputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|MapFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|RandomDatum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
operator|.
name|CompressionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|zlib
operator|.
name|BuiltInGzipDecompressor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|zlib
operator|.
name|BuiltInZlibDeflater
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|zlib
operator|.
name|BuiltInZlibInflater
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|zlib
operator|.
name|ZlibCompressor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|zlib
operator|.
name|ZlibCompressor
operator|.
name|CompressionLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|zlib
operator|.
name|ZlibCompressor
operator|.
name|CompressionStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|zlib
operator|.
name|ZlibFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|bzip2
operator|.
name|Bzip2Factory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|LineReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|NativeCodeLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestCodec
specifier|public
class|class
name|TestCodec
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestCodec
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
DECL|field|count
specifier|private
name|int
name|count
init|=
literal|10000
decl_stmt|;
DECL|field|seed
specifier|private
name|int
name|seed
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|testDefaultCodec ()
specifier|public
name|void
name|testDefaultCodec
parameter_list|()
throws|throws
name|IOException
block|{
name|codecTest
argument_list|(
name|conf
argument_list|,
name|seed
argument_list|,
literal|0
argument_list|,
literal|"org.apache.hadoop.io.compress.DefaultCodec"
argument_list|)
expr_stmt|;
name|codecTest
argument_list|(
name|conf
argument_list|,
name|seed
argument_list|,
name|count
argument_list|,
literal|"org.apache.hadoop.io.compress.DefaultCodec"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGzipCodec ()
specifier|public
name|void
name|testGzipCodec
parameter_list|()
throws|throws
name|IOException
block|{
name|codecTest
argument_list|(
name|conf
argument_list|,
name|seed
argument_list|,
literal|0
argument_list|,
literal|"org.apache.hadoop.io.compress.GzipCodec"
argument_list|)
expr_stmt|;
name|codecTest
argument_list|(
name|conf
argument_list|,
name|seed
argument_list|,
name|count
argument_list|,
literal|"org.apache.hadoop.io.compress.GzipCodec"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
DECL|method|testBZip2Codec ()
specifier|public
name|void
name|testBZip2Codec
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"io.compression.codec.bzip2.library"
argument_list|,
literal|"java-builtin"
argument_list|)
expr_stmt|;
name|codecTest
argument_list|(
name|conf
argument_list|,
name|seed
argument_list|,
literal|0
argument_list|,
literal|"org.apache.hadoop.io.compress.BZip2Codec"
argument_list|)
expr_stmt|;
name|codecTest
argument_list|(
name|conf
argument_list|,
name|seed
argument_list|,
name|count
argument_list|,
literal|"org.apache.hadoop.io.compress.BZip2Codec"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
DECL|method|testBZip2NativeCodec ()
specifier|public
name|void
name|testBZip2NativeCodec
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"io.compression.codec.bzip2.library"
argument_list|,
literal|"system-native"
argument_list|)
expr_stmt|;
if|if
condition|(
name|NativeCodeLoader
operator|.
name|isNativeCodeLoaded
argument_list|()
condition|)
block|{
if|if
condition|(
name|Bzip2Factory
operator|.
name|isNativeBzip2Loaded
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|codecTest
argument_list|(
name|conf
argument_list|,
name|seed
argument_list|,
literal|0
argument_list|,
literal|"org.apache.hadoop.io.compress.BZip2Codec"
argument_list|)
expr_stmt|;
name|codecTest
argument_list|(
name|conf
argument_list|,
name|seed
argument_list|,
name|count
argument_list|,
literal|"org.apache.hadoop.io.compress.BZip2Codec"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"io.compression.codec.bzip2.library"
argument_list|,
literal|"java-builtin"
argument_list|)
expr_stmt|;
name|codecTest
argument_list|(
name|conf
argument_list|,
name|seed
argument_list|,
literal|0
argument_list|,
literal|"org.apache.hadoop.io.compress.BZip2Codec"
argument_list|)
expr_stmt|;
name|codecTest
argument_list|(
name|conf
argument_list|,
name|seed
argument_list|,
name|count
argument_list|,
literal|"org.apache.hadoop.io.compress.BZip2Codec"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Native hadoop library available but native bzip2 is not"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testSnappyCodec ()
specifier|public
name|void
name|testSnappyCodec
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|SnappyCodec
operator|.
name|isNativeCodeLoaded
argument_list|()
condition|)
block|{
name|codecTest
argument_list|(
name|conf
argument_list|,
name|seed
argument_list|,
literal|0
argument_list|,
literal|"org.apache.hadoop.io.compress.SnappyCodec"
argument_list|)
expr_stmt|;
name|codecTest
argument_list|(
name|conf
argument_list|,
name|seed
argument_list|,
name|count
argument_list|,
literal|"org.apache.hadoop.io.compress.SnappyCodec"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testLz4Codec ()
specifier|public
name|void
name|testLz4Codec
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|NativeCodeLoader
operator|.
name|isNativeCodeLoaded
argument_list|()
condition|)
block|{
if|if
condition|(
name|Lz4Codec
operator|.
name|isNativeCodeLoaded
argument_list|()
condition|)
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IO_COMPRESSION_CODEC_LZ4_USELZ4HC_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|codecTest
argument_list|(
name|conf
argument_list|,
name|seed
argument_list|,
literal|0
argument_list|,
literal|"org.apache.hadoop.io.compress.Lz4Codec"
argument_list|)
expr_stmt|;
name|codecTest
argument_list|(
name|conf
argument_list|,
name|seed
argument_list|,
name|count
argument_list|,
literal|"org.apache.hadoop.io.compress.Lz4Codec"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IO_COMPRESSION_CODEC_LZ4_USELZ4HC_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|codecTest
argument_list|(
name|conf
argument_list|,
name|seed
argument_list|,
literal|0
argument_list|,
literal|"org.apache.hadoop.io.compress.Lz4Codec"
argument_list|)
expr_stmt|;
name|codecTest
argument_list|(
name|conf
argument_list|,
name|seed
argument_list|,
name|count
argument_list|,
literal|"org.apache.hadoop.io.compress.Lz4Codec"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Native hadoop library available but lz4 not"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testDeflateCodec ()
specifier|public
name|void
name|testDeflateCodec
parameter_list|()
throws|throws
name|IOException
block|{
name|codecTest
argument_list|(
name|conf
argument_list|,
name|seed
argument_list|,
literal|0
argument_list|,
literal|"org.apache.hadoop.io.compress.DeflateCodec"
argument_list|)
expr_stmt|;
name|codecTest
argument_list|(
name|conf
argument_list|,
name|seed
argument_list|,
name|count
argument_list|,
literal|"org.apache.hadoop.io.compress.DeflateCodec"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGzipCodecWithParam ()
specifier|public
name|void
name|testGzipCodecWithParam
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
name|ZlibFactory
operator|.
name|setCompressionLevel
argument_list|(
name|conf
argument_list|,
name|CompressionLevel
operator|.
name|BEST_COMPRESSION
argument_list|)
expr_stmt|;
name|ZlibFactory
operator|.
name|setCompressionStrategy
argument_list|(
name|conf
argument_list|,
name|CompressionStrategy
operator|.
name|HUFFMAN_ONLY
argument_list|)
expr_stmt|;
name|codecTest
argument_list|(
name|conf
argument_list|,
name|seed
argument_list|,
literal|0
argument_list|,
literal|"org.apache.hadoop.io.compress.GzipCodec"
argument_list|)
expr_stmt|;
name|codecTest
argument_list|(
name|conf
argument_list|,
name|seed
argument_list|,
name|count
argument_list|,
literal|"org.apache.hadoop.io.compress.GzipCodec"
argument_list|)
expr_stmt|;
block|}
DECL|method|codecTest (Configuration conf, int seed, int count, String codecClass)
specifier|private
specifier|static
name|void
name|codecTest
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|seed
parameter_list|,
name|int
name|count
parameter_list|,
name|String
name|codecClass
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Create the codec
name|CompressionCodec
name|codec
init|=
literal|null
decl_stmt|;
try|try
block|{
name|codec
operator|=
operator|(
name|CompressionCodec
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|conf
operator|.
name|getClassByName
argument_list|(
name|codecClass
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|cnfe
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Illegal codec!"
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Created a Codec object of type: "
operator|+
name|codecClass
argument_list|)
expr_stmt|;
comment|// Generate data
name|DataOutputBuffer
name|data
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|RandomDatum
operator|.
name|Generator
name|generator
init|=
operator|new
name|RandomDatum
operator|.
name|Generator
argument_list|(
name|seed
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|generator
operator|.
name|next
argument_list|()
expr_stmt|;
name|RandomDatum
name|key
init|=
name|generator
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|RandomDatum
name|value
init|=
name|generator
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|key
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|value
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Generated "
operator|+
name|count
operator|+
literal|" records"
argument_list|)
expr_stmt|;
comment|// Compress data
name|DataOutputBuffer
name|compressedDataBuffer
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|CompressionOutputStream
name|deflateFilter
init|=
name|codec
operator|.
name|createOutputStream
argument_list|(
name|compressedDataBuffer
argument_list|)
decl_stmt|;
name|DataOutputStream
name|deflateOut
init|=
operator|new
name|DataOutputStream
argument_list|(
operator|new
name|BufferedOutputStream
argument_list|(
name|deflateFilter
argument_list|)
argument_list|)
decl_stmt|;
name|deflateOut
operator|.
name|write
argument_list|(
name|data
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|deflateOut
operator|.
name|flush
argument_list|()
expr_stmt|;
name|deflateFilter
operator|.
name|finish
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Finished compressing data"
argument_list|)
expr_stmt|;
comment|// De-compress data
name|DataInputBuffer
name|deCompressedDataBuffer
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
name|deCompressedDataBuffer
operator|.
name|reset
argument_list|(
name|compressedDataBuffer
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|compressedDataBuffer
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|CompressionInputStream
name|inflateFilter
init|=
name|codec
operator|.
name|createInputStream
argument_list|(
name|deCompressedDataBuffer
argument_list|)
decl_stmt|;
name|DataInputStream
name|inflateIn
init|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|BufferedInputStream
argument_list|(
name|inflateFilter
argument_list|)
argument_list|)
decl_stmt|;
comment|// Check
name|DataInputBuffer
name|originalData
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
name|originalData
operator|.
name|reset
argument_list|(
name|data
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|DataInputStream
name|originalIn
init|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|BufferedInputStream
argument_list|(
name|originalData
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|RandomDatum
name|k1
init|=
operator|new
name|RandomDatum
argument_list|()
decl_stmt|;
name|RandomDatum
name|v1
init|=
operator|new
name|RandomDatum
argument_list|()
decl_stmt|;
name|k1
operator|.
name|readFields
argument_list|(
name|originalIn
argument_list|)
expr_stmt|;
name|v1
operator|.
name|readFields
argument_list|(
name|originalIn
argument_list|)
expr_stmt|;
name|RandomDatum
name|k2
init|=
operator|new
name|RandomDatum
argument_list|()
decl_stmt|;
name|RandomDatum
name|v2
init|=
operator|new
name|RandomDatum
argument_list|()
decl_stmt|;
name|k2
operator|.
name|readFields
argument_list|(
name|inflateIn
argument_list|)
expr_stmt|;
name|v2
operator|.
name|readFields
argument_list|(
name|inflateIn
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"original and compressed-then-decompressed-output not equal"
argument_list|,
name|k1
operator|.
name|equals
argument_list|(
name|k2
argument_list|)
operator|&&
name|v1
operator|.
name|equals
argument_list|(
name|v2
argument_list|)
argument_list|)
expr_stmt|;
comment|// original and compressed-then-decompressed-output have the same hashCode
name|Map
argument_list|<
name|RandomDatum
argument_list|,
name|String
argument_list|>
name|m
init|=
operator|new
name|HashMap
argument_list|<
name|RandomDatum
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
name|k1
argument_list|,
name|k1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
name|v1
argument_list|,
name|v1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|m
operator|.
name|get
argument_list|(
name|k2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"k1 and k2 hashcode not equal"
argument_list|,
name|result
argument_list|,
name|k1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|m
operator|.
name|get
argument_list|(
name|v2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"v1 and v2 hashcode not equal"
argument_list|,
name|result
argument_list|,
name|v1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// De-compress data byte-at-a-time
name|originalData
operator|.
name|reset
argument_list|(
name|data
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|deCompressedDataBuffer
operator|.
name|reset
argument_list|(
name|compressedDataBuffer
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|compressedDataBuffer
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|inflateFilter
operator|=
name|codec
operator|.
name|createInputStream
argument_list|(
name|deCompressedDataBuffer
argument_list|)
expr_stmt|;
comment|// Check
name|originalIn
operator|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|BufferedInputStream
argument_list|(
name|originalData
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|expected
decl_stmt|;
do|do
block|{
name|expected
operator|=
name|originalIn
operator|.
name|read
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Inflated stream read by byte does not match"
argument_list|,
name|expected
argument_list|,
name|inflateFilter
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|expected
operator|!=
operator|-
literal|1
condition|)
do|;
name|LOG
operator|.
name|info
argument_list|(
literal|"SUCCESS! Completed checking "
operator|+
name|count
operator|+
literal|" records"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSplitableCodecs ()
specifier|public
name|void
name|testSplitableCodecs
parameter_list|()
throws|throws
name|Exception
block|{
name|testSplitableCodec
argument_list|(
name|BZip2Codec
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|testSplitableCodec ( Class<? extends SplittableCompressionCodec> codecClass)
specifier|private
name|void
name|testSplitableCodec
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|SplittableCompressionCodec
argument_list|>
name|codecClass
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|long
name|DEFLBYTES
init|=
literal|2
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|final
name|long
name|seed
init|=
name|rand
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"seed: "
operator|+
name|seed
argument_list|)
expr_stmt|;
name|rand
operator|.
name|setSeed
argument_list|(
name|seed
argument_list|)
expr_stmt|;
name|SplittableCompressionCodec
name|codec
init|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|codecClass
argument_list|,
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|FileStatus
name|infile
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|writeSplitTestFile
argument_list|(
name|fs
argument_list|,
name|rand
argument_list|,
name|codec
argument_list|,
name|DEFLBYTES
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|infile
operator|.
name|getLen
argument_list|()
operator|>
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
name|fail
argument_list|(
literal|"Unexpected compression: "
operator|+
name|DEFLBYTES
operator|+
literal|" -> "
operator|+
name|infile
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
name|flen
init|=
operator|(
name|int
operator|)
name|infile
operator|.
name|getLen
argument_list|()
decl_stmt|;
specifier|final
name|Text
name|line
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
specifier|final
name|Decompressor
name|dcmp
init|=
name|CodecPool
operator|.
name|getDecompressor
argument_list|(
name|codec
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|pos
init|=
literal|0
init|;
name|pos
operator|<
name|infile
operator|.
name|getLen
argument_list|()
condition|;
name|pos
operator|+=
name|rand
operator|.
name|nextInt
argument_list|(
name|flen
operator|/
literal|8
argument_list|)
control|)
block|{
comment|// read from random positions, verifying that there exist two sequential
comment|// lines as written in writeSplitTestFile
specifier|final
name|SplitCompressionInputStream
name|in
init|=
name|codec
operator|.
name|createInputStream
argument_list|(
name|fs
operator|.
name|open
argument_list|(
name|infile
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|,
name|dcmp
argument_list|,
name|pos
argument_list|,
name|flen
argument_list|,
name|SplittableCompressionCodec
operator|.
name|READ_MODE
operator|.
name|BYBLOCK
argument_list|)
decl_stmt|;
if|if
condition|(
name|in
operator|.
name|getAdjustedStart
argument_list|()
operator|>=
name|flen
condition|)
block|{
break|break;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"SAMPLE "
operator|+
name|in
operator|.
name|getAdjustedStart
argument_list|()
operator|+
literal|","
operator|+
name|in
operator|.
name|getAdjustedEnd
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|LineReader
name|lreader
init|=
operator|new
name|LineReader
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|lreader
operator|.
name|readLine
argument_list|(
name|line
argument_list|)
expr_stmt|;
comment|// ignore; likely partial
if|if
condition|(
name|in
operator|.
name|getPos
argument_list|()
operator|>=
name|flen
condition|)
block|{
break|break;
block|}
name|lreader
operator|.
name|readLine
argument_list|(
name|line
argument_list|)
expr_stmt|;
specifier|final
name|int
name|seq1
init|=
name|readLeadingInt
argument_list|(
name|line
argument_list|)
decl_stmt|;
name|lreader
operator|.
name|readLine
argument_list|(
name|line
argument_list|)
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|getPos
argument_list|()
operator|>=
name|flen
condition|)
block|{
break|break;
block|}
specifier|final
name|int
name|seq2
init|=
name|readLeadingInt
argument_list|(
name|line
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Mismatched lines"
argument_list|,
name|seq1
operator|+
literal|1
argument_list|,
name|seq2
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|CodecPool
operator|.
name|returnDecompressor
argument_list|(
name|dcmp
argument_list|)
expr_stmt|;
block|}
comment|// remove on success
name|fs
operator|.
name|delete
argument_list|(
name|infile
operator|.
name|getPath
argument_list|()
operator|.
name|getParent
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|readLeadingInt (Text txt)
specifier|private
specifier|static
name|int
name|readLeadingInt
parameter_list|(
name|Text
name|txt
parameter_list|)
throws|throws
name|IOException
block|{
name|DataInputStream
name|in
init|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|txt
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|in
operator|.
name|readInt
argument_list|()
return|;
block|}
comment|/** Write infLen bytes (deflated) to file in test dir using codec.    * Records are of the form    *&lt;i&gt;&lt;b64 rand&gt;&lt;i+i&gt;&lt;b64 rand&gt;    */
DECL|method|writeSplitTestFile (FileSystem fs, Random rand, CompressionCodec codec, long infLen)
specifier|private
specifier|static
name|Path
name|writeSplitTestFile
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Random
name|rand
parameter_list|,
name|CompressionCodec
name|codec
parameter_list|,
name|long
name|infLen
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|REC_SIZE
init|=
literal|1024
decl_stmt|;
specifier|final
name|Path
name|wd
init|=
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|fs
argument_list|)
argument_list|,
name|codec
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|wd
argument_list|,
literal|"test"
operator|+
name|codec
operator|.
name|getDefaultExtension
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|REC_SIZE
index|]
decl_stmt|;
specifier|final
name|Base64
name|b64
init|=
operator|new
name|Base64
argument_list|(
literal|0
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|DataOutputStream
name|fout
init|=
literal|null
decl_stmt|;
name|Compressor
name|cmp
init|=
name|CodecPool
operator|.
name|getCompressor
argument_list|(
name|codec
argument_list|)
decl_stmt|;
try|try
block|{
name|fout
operator|=
operator|new
name|DataOutputStream
argument_list|(
name|codec
operator|.
name|createOutputStream
argument_list|(
name|fs
operator|.
name|create
argument_list|(
name|file
argument_list|,
literal|true
argument_list|)
argument_list|,
name|cmp
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|DataOutputBuffer
name|dob
init|=
operator|new
name|DataOutputBuffer
argument_list|(
name|REC_SIZE
operator|*
literal|4
operator|/
literal|3
operator|+
literal|4
argument_list|)
decl_stmt|;
name|int
name|seq
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|infLen
operator|>
literal|0
condition|)
block|{
name|rand
operator|.
name|nextBytes
argument_list|(
name|b
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
name|b64enc
init|=
name|b64
operator|.
name|encode
argument_list|(
name|b
argument_list|)
decl_stmt|;
comment|// ensures rand printable, no LF
name|dob
operator|.
name|reset
argument_list|()
expr_stmt|;
name|dob
operator|.
name|writeInt
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|dob
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|b64enc
argument_list|,
literal|0
argument_list|,
name|dob
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|fout
operator|.
name|write
argument_list|(
name|b64enc
argument_list|)
expr_stmt|;
name|fout
operator|.
name|write
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
operator|++
name|seq
expr_stmt|;
name|infLen
operator|-=
name|b64enc
operator|.
name|length
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Wrote "
operator|+
name|seq
operator|+
literal|" records to "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|fout
argument_list|)
expr_stmt|;
name|CodecPool
operator|.
name|returnCompressor
argument_list|(
name|cmp
argument_list|)
expr_stmt|;
block|}
return|return
name|file
return|;
block|}
annotation|@
name|Test
DECL|method|testCodecPoolGzipReuse ()
specifier|public
name|void
name|testCodecPoolGzipReuse
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IO_NATIVE_LIB_AVAILABLE_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assumeTrue
argument_list|(
name|ZlibFactory
operator|.
name|isNativeZlibLoaded
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|GzipCodec
name|gzc
init|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|GzipCodec
operator|.
name|class
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|DefaultCodec
name|dfc
init|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|DefaultCodec
operator|.
name|class
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Compressor
name|c1
init|=
name|CodecPool
operator|.
name|getCompressor
argument_list|(
name|gzc
argument_list|)
decl_stmt|;
name|Compressor
name|c2
init|=
name|CodecPool
operator|.
name|getCompressor
argument_list|(
name|dfc
argument_list|)
decl_stmt|;
name|CodecPool
operator|.
name|returnCompressor
argument_list|(
name|c1
argument_list|)
expr_stmt|;
name|CodecPool
operator|.
name|returnCompressor
argument_list|(
name|c2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Got mismatched ZlibCompressor"
argument_list|,
name|c2
operator|!=
name|CodecPool
operator|.
name|getCompressor
argument_list|(
name|gzc
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|gzipReinitTest (Configuration conf, CompressionCodec codec)
specifier|private
specifier|static
name|void
name|gzipReinitTest
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|CompressionCodec
name|codec
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Add codec to cache
name|ZlibFactory
operator|.
name|setCompressionLevel
argument_list|(
name|conf
argument_list|,
name|CompressionLevel
operator|.
name|BEST_COMPRESSION
argument_list|)
expr_stmt|;
name|ZlibFactory
operator|.
name|setCompressionStrategy
argument_list|(
name|conf
argument_list|,
name|CompressionStrategy
operator|.
name|DEFAULT_STRATEGY
argument_list|)
expr_stmt|;
name|Compressor
name|c1
init|=
name|CodecPool
operator|.
name|getCompressor
argument_list|(
name|codec
argument_list|)
decl_stmt|;
name|CodecPool
operator|.
name|returnCompressor
argument_list|(
name|c1
argument_list|)
expr_stmt|;
comment|// reset compressor's compression level to perform no compression
name|ZlibFactory
operator|.
name|setCompressionLevel
argument_list|(
name|conf
argument_list|,
name|CompressionLevel
operator|.
name|NO_COMPRESSION
argument_list|)
expr_stmt|;
name|Compressor
name|c2
init|=
name|CodecPool
operator|.
name|getCompressor
argument_list|(
name|codec
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// ensure same compressor placed earlier
name|assertTrue
argument_list|(
literal|"Got mismatched ZlibCompressor"
argument_list|,
name|c1
operator|==
name|c2
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|CompressionOutputStream
name|cos
init|=
literal|null
decl_stmt|;
comment|// write trivially compressable data
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
literal|1
operator|<<
literal|15
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|b
argument_list|,
operator|(
name|byte
operator|)
literal|43
argument_list|)
expr_stmt|;
try|try
block|{
name|cos
operator|=
name|codec
operator|.
name|createOutputStream
argument_list|(
name|bos
argument_list|,
name|c2
argument_list|)
expr_stmt|;
name|cos
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cos
operator|!=
literal|null
condition|)
block|{
name|cos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|CodecPool
operator|.
name|returnCompressor
argument_list|(
name|c2
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|outbytes
init|=
name|bos
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
comment|// verify data were not compressed
name|assertTrue
argument_list|(
literal|"Compressed bytes contrary to configuration"
argument_list|,
name|outbytes
operator|.
name|length
operator|>=
name|b
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|codecTestWithNOCompression (Configuration conf, String codecClass)
specifier|private
specifier|static
name|void
name|codecTestWithNOCompression
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|codecClass
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Create a compressor with NO_COMPRESSION and make sure that
comment|// output is not compressed by comparing the size with the
comment|// original input
name|CompressionCodec
name|codec
init|=
literal|null
decl_stmt|;
name|ZlibFactory
operator|.
name|setCompressionLevel
argument_list|(
name|conf
argument_list|,
name|CompressionLevel
operator|.
name|NO_COMPRESSION
argument_list|)
expr_stmt|;
try|try
block|{
name|codec
operator|=
operator|(
name|CompressionCodec
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|conf
operator|.
name|getClassByName
argument_list|(
name|codecClass
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|cnfe
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Illegal codec!"
argument_list|)
throw|;
block|}
name|Compressor
name|c
init|=
name|codec
operator|.
name|createCompressor
argument_list|()
decl_stmt|;
comment|// ensure same compressor placed earlier
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|CompressionOutputStream
name|cos
init|=
literal|null
decl_stmt|;
comment|// write trivially compressable data
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
literal|1
operator|<<
literal|15
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|b
argument_list|,
operator|(
name|byte
operator|)
literal|43
argument_list|)
expr_stmt|;
try|try
block|{
name|cos
operator|=
name|codec
operator|.
name|createOutputStream
argument_list|(
name|bos
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|cos
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cos
operator|!=
literal|null
condition|)
block|{
name|cos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|byte
index|[]
name|outbytes
init|=
name|bos
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
comment|// verify data were not compressed
name|assertTrue
argument_list|(
literal|"Compressed bytes contrary to configuration(NO_COMPRESSION)"
argument_list|,
name|outbytes
operator|.
name|length
operator|>=
name|b
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCodecInitWithCompressionLevel ()
specifier|public
name|void
name|testCodecInitWithCompressionLevel
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IO_NATIVE_LIB_AVAILABLE_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|ZlibFactory
operator|.
name|isNativeZlibLoaded
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testCodecInitWithCompressionLevel with native"
argument_list|)
expr_stmt|;
name|codecTestWithNOCompression
argument_list|(
name|conf
argument_list|,
literal|"org.apache.hadoop.io.compress.GzipCodec"
argument_list|)
expr_stmt|;
name|codecTestWithNOCompression
argument_list|(
name|conf
argument_list|,
literal|"org.apache.hadoop.io.compress.DefaultCodec"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"testCodecInitWithCompressionLevel for native skipped"
operator|+
literal|": native libs not loaded"
argument_list|)
expr_stmt|;
block|}
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IO_NATIVE_LIB_AVAILABLE_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|codecTestWithNOCompression
argument_list|(
name|conf
argument_list|,
literal|"org.apache.hadoop.io.compress.DefaultCodec"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCodecPoolCompressorReinit ()
specifier|public
name|void
name|testCodecPoolCompressorReinit
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IO_NATIVE_LIB_AVAILABLE_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|ZlibFactory
operator|.
name|isNativeZlibLoaded
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|GzipCodec
name|gzc
init|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|GzipCodec
operator|.
name|class
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|gzipReinitTest
argument_list|(
name|conf
argument_list|,
name|gzc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"testCodecPoolCompressorReinit skipped: native libs not loaded"
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|setBoolean
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IO_NATIVE_LIB_AVAILABLE_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|DefaultCodec
name|dfc
init|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|DefaultCodec
operator|.
name|class
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|gzipReinitTest
argument_list|(
name|conf
argument_list|,
name|dfc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSequenceFileDefaultCodec ()
specifier|public
name|void
name|testSequenceFileDefaultCodec
parameter_list|()
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
block|{
name|sequenceFileCodecTest
argument_list|(
name|conf
argument_list|,
literal|100
argument_list|,
literal|"org.apache.hadoop.io.compress.DefaultCodec"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|sequenceFileCodecTest
argument_list|(
name|conf
argument_list|,
literal|200000
argument_list|,
literal|"org.apache.hadoop.io.compress.DefaultCodec"
argument_list|,
literal|1000000
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
DECL|method|testSequenceFileBZip2Codec ()
specifier|public
name|void
name|testSequenceFileBZip2Codec
parameter_list|()
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"io.compression.codec.bzip2.library"
argument_list|,
literal|"java-builtin"
argument_list|)
expr_stmt|;
name|sequenceFileCodecTest
argument_list|(
name|conf
argument_list|,
literal|0
argument_list|,
literal|"org.apache.hadoop.io.compress.BZip2Codec"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|sequenceFileCodecTest
argument_list|(
name|conf
argument_list|,
literal|100
argument_list|,
literal|"org.apache.hadoop.io.compress.BZip2Codec"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|sequenceFileCodecTest
argument_list|(
name|conf
argument_list|,
literal|200000
argument_list|,
literal|"org.apache.hadoop.io.compress.BZip2Codec"
argument_list|,
literal|1000000
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
DECL|method|testSequenceFileBZip2NativeCodec ()
specifier|public
name|void
name|testSequenceFileBZip2NativeCodec
parameter_list|()
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"io.compression.codec.bzip2.library"
argument_list|,
literal|"system-native"
argument_list|)
expr_stmt|;
if|if
condition|(
name|NativeCodeLoader
operator|.
name|isNativeCodeLoaded
argument_list|()
condition|)
block|{
if|if
condition|(
name|Bzip2Factory
operator|.
name|isNativeBzip2Loaded
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|sequenceFileCodecTest
argument_list|(
name|conf
argument_list|,
literal|0
argument_list|,
literal|"org.apache.hadoop.io.compress.BZip2Codec"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|sequenceFileCodecTest
argument_list|(
name|conf
argument_list|,
literal|100
argument_list|,
literal|"org.apache.hadoop.io.compress.BZip2Codec"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|sequenceFileCodecTest
argument_list|(
name|conf
argument_list|,
literal|200000
argument_list|,
literal|"org.apache.hadoop.io.compress.BZip2Codec"
argument_list|,
literal|1000000
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Native hadoop library available but native bzip2 is not"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testSequenceFileDeflateCodec ()
specifier|public
name|void
name|testSequenceFileDeflateCodec
parameter_list|()
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
block|{
name|sequenceFileCodecTest
argument_list|(
name|conf
argument_list|,
literal|100
argument_list|,
literal|"org.apache.hadoop.io.compress.DeflateCodec"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|sequenceFileCodecTest
argument_list|(
name|conf
argument_list|,
literal|200000
argument_list|,
literal|"org.apache.hadoop.io.compress.DeflateCodec"
argument_list|,
literal|1000000
argument_list|)
expr_stmt|;
block|}
DECL|method|sequenceFileCodecTest (Configuration conf, int lines, String codecClass, int blockSize)
specifier|private
specifier|static
name|void
name|sequenceFileCodecTest
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|lines
parameter_list|,
name|String
name|codecClass
parameter_list|,
name|int
name|blockSize
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
block|{
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
literal|"SequenceFileCodecTest."
operator|+
name|codecClass
argument_list|)
decl_stmt|;
comment|// Configuration
name|conf
operator|.
name|setInt
argument_list|(
literal|"io.seqfile.compress.blocksize"
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
comment|// Create the SequenceFile
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating SequenceFile with codec \""
operator|+
name|codecClass
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|SequenceFile
operator|.
name|Writer
name|writer
init|=
name|SequenceFile
operator|.
name|createWriter
argument_list|(
name|fs
argument_list|,
name|conf
argument_list|,
name|filePath
argument_list|,
name|Text
operator|.
name|class
argument_list|,
name|Text
operator|.
name|class
argument_list|,
name|CompressionType
operator|.
name|BLOCK
argument_list|,
operator|(
name|CompressionCodec
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|codecClass
argument_list|)
operator|.
name|newInstance
argument_list|()
argument_list|)
decl_stmt|;
comment|// Write some data
name|LOG
operator|.
name|info
argument_list|(
literal|"Writing to SequenceFile..."
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lines
condition|;
name|i
operator|++
control|)
block|{
name|Text
name|key
init|=
operator|new
name|Text
argument_list|(
literal|"key"
operator|+
name|i
argument_list|)
decl_stmt|;
name|Text
name|value
init|=
operator|new
name|Text
argument_list|(
literal|"value"
operator|+
name|i
argument_list|)
decl_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Read the data back and check
name|LOG
operator|.
name|info
argument_list|(
literal|"Reading from the SequenceFile..."
argument_list|)
expr_stmt|;
name|SequenceFile
operator|.
name|Reader
name|reader
init|=
operator|new
name|SequenceFile
operator|.
name|Reader
argument_list|(
name|fs
argument_list|,
name|filePath
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Writable
name|key
init|=
operator|(
name|Writable
operator|)
name|reader
operator|.
name|getKeyClass
argument_list|()
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|Writable
name|value
init|=
operator|(
name|Writable
operator|)
name|reader
operator|.
name|getValueClass
argument_list|()
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|int
name|lc
init|=
literal|0
decl_stmt|;
try|try
block|{
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|"key"
operator|+
name|lc
argument_list|,
name|key
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value"
operator|+
name|lc
argument_list|,
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|lc
operator|++
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|lines
argument_list|,
name|lc
argument_list|)
expr_stmt|;
comment|// Delete temporary files
name|fs
operator|.
name|delete
argument_list|(
name|filePath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"SUCCESS! Completed SequenceFileCodecTest with codec \""
operator|+
name|codecClass
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
comment|/**    * Regression test for HADOOP-8423: seeking in a block-compressed    * stream would not properly reset the block decompressor state.    */
annotation|@
name|Test
DECL|method|testSnappyMapFile ()
specifier|public
name|void
name|testSnappyMapFile
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|SnappyCodec
operator|.
name|isNativeCodeLoaded
argument_list|()
argument_list|)
expr_stmt|;
name|codecTestMapFile
argument_list|(
name|SnappyCodec
operator|.
name|class
argument_list|,
name|CompressionType
operator|.
name|BLOCK
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
DECL|method|codecTestMapFile (Class<? extends CompressionCodec> clazz, CompressionType type, int records)
specifier|private
name|void
name|codecTestMapFile
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|CompressionCodec
argument_list|>
name|clazz
parameter_list|,
name|CompressionType
name|type
parameter_list|,
name|int
name|records
parameter_list|)
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating MapFiles with "
operator|+
name|records
operator|+
literal|" records using codec "
operator|+
name|clazz
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
argument_list|,
name|clazz
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"-"
operator|+
name|type
operator|+
literal|"-"
operator|+
name|records
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Writing "
operator|+
name|path
argument_list|)
expr_stmt|;
name|createMapFile
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|path
argument_list|,
name|clazz
operator|.
name|newInstance
argument_list|()
argument_list|,
name|type
argument_list|,
name|records
argument_list|)
expr_stmt|;
name|MapFile
operator|.
name|Reader
name|reader
init|=
operator|new
name|MapFile
operator|.
name|Reader
argument_list|(
name|path
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Text
name|key1
init|=
operator|new
name|Text
argument_list|(
literal|"002"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|reader
operator|.
name|get
argument_list|(
name|key1
argument_list|,
operator|new
name|Text
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Text
name|key2
init|=
operator|new
name|Text
argument_list|(
literal|"004"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|reader
operator|.
name|get
argument_list|(
name|key2
argument_list|,
operator|new
name|Text
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createMapFile (Configuration conf, FileSystem fs, Path path, CompressionCodec codec, CompressionType type, int records)
specifier|private
specifier|static
name|void
name|createMapFile
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|,
name|CompressionCodec
name|codec
parameter_list|,
name|CompressionType
name|type
parameter_list|,
name|int
name|records
parameter_list|)
throws|throws
name|IOException
block|{
name|MapFile
operator|.
name|Writer
name|writer
init|=
operator|new
name|MapFile
operator|.
name|Writer
argument_list|(
name|conf
argument_list|,
name|path
argument_list|,
name|MapFile
operator|.
name|Writer
operator|.
name|keyClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
argument_list|,
name|MapFile
operator|.
name|Writer
operator|.
name|valueClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
argument_list|,
name|MapFile
operator|.
name|Writer
operator|.
name|compression
argument_list|(
name|type
argument_list|,
name|codec
argument_list|)
argument_list|)
decl_stmt|;
name|Text
name|key
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|records
condition|;
name|j
operator|++
control|)
block|{
name|key
operator|.
name|set
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%03d"
argument_list|,
name|j
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|key
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|count
init|=
literal|10000
decl_stmt|;
name|String
name|codecClass
init|=
literal|"org.apache.hadoop.io.compress.DefaultCodec"
decl_stmt|;
name|String
name|usage
init|=
literal|"TestCodec [-count N] [-codec<codec class>]"
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|usage
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
comment|// parse command line
if|if
condition|(
name|args
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-count"
argument_list|)
condition|)
block|{
name|count
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
operator|++
name|i
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-codec"
argument_list|)
condition|)
block|{
name|codecClass
operator|=
name|args
index|[
operator|++
name|i
index|]
expr_stmt|;
block|}
block|}
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|int
name|seed
init|=
literal|0
decl_stmt|;
comment|// Note that exceptions will propagate out.
name|codecTest
argument_list|(
name|conf
argument_list|,
name|seed
argument_list|,
name|count
argument_list|,
name|codecClass
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGzipCompatibility ()
specifier|public
name|void
name|testGzipCompatibility
parameter_list|()
throws|throws
name|IOException
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|long
name|seed
init|=
name|r
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|r
operator|.
name|setSeed
argument_list|(
name|seed
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"seed: "
operator|+
name|seed
argument_list|)
expr_stmt|;
name|DataOutputBuffer
name|dflbuf
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|GZIPOutputStream
name|gzout
init|=
operator|new
name|GZIPOutputStream
argument_list|(
name|dflbuf
argument_list|)
decl_stmt|;
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|r
operator|.
name|nextInt
argument_list|(
literal|128
operator|*
literal|1024
operator|+
literal|1
argument_list|)
index|]
decl_stmt|;
name|r
operator|.
name|nextBytes
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|gzout
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|gzout
operator|.
name|close
argument_list|()
expr_stmt|;
name|DataInputBuffer
name|gzbuf
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
name|gzbuf
operator|.
name|reset
argument_list|(
name|dflbuf
operator|.
name|getData
argument_list|()
argument_list|,
name|dflbuf
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IO_NATIVE_LIB_AVAILABLE_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|CompressionCodec
name|codec
init|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|GzipCodec
operator|.
name|class
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Decompressor
name|decom
init|=
name|codec
operator|.
name|createDecompressor
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|decom
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BuiltInGzipDecompressor
operator|.
name|class
argument_list|,
name|decom
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|InputStream
name|gzin
init|=
name|codec
operator|.
name|createInputStream
argument_list|(
name|gzbuf
argument_list|,
name|decom
argument_list|)
decl_stmt|;
name|dflbuf
operator|.
name|reset
argument_list|()
expr_stmt|;
name|IOUtils
operator|.
name|copyBytes
argument_list|(
name|gzin
argument_list|,
name|dflbuf
argument_list|,
literal|4096
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
name|dflchk
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|dflbuf
operator|.
name|getData
argument_list|()
argument_list|,
name|dflbuf
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|b
argument_list|,
name|dflchk
argument_list|)
expr_stmt|;
block|}
DECL|method|GzipConcatTest (Configuration conf, Class<? extends Decompressor> decomClass)
name|void
name|GzipConcatTest
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Decompressor
argument_list|>
name|decomClass
parameter_list|)
throws|throws
name|IOException
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|long
name|seed
init|=
name|r
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|r
operator|.
name|setSeed
argument_list|(
name|seed
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|decomClass
operator|+
literal|" seed: "
operator|+
name|seed
argument_list|)
expr_stmt|;
specifier|final
name|int
name|CONCAT
init|=
name|r
operator|.
name|nextInt
argument_list|(
literal|4
argument_list|)
operator|+
literal|3
decl_stmt|;
specifier|final
name|int
name|BUFLEN
init|=
literal|128
operator|*
literal|1024
decl_stmt|;
name|DataOutputBuffer
name|dflbuf
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|DataOutputBuffer
name|chkbuf
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|BUFLEN
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|CONCAT
condition|;
operator|++
name|i
control|)
block|{
name|GZIPOutputStream
name|gzout
init|=
operator|new
name|GZIPOutputStream
argument_list|(
name|dflbuf
argument_list|)
decl_stmt|;
name|r
operator|.
name|nextBytes
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|int
name|len
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|BUFLEN
argument_list|)
decl_stmt|;
name|int
name|off
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|BUFLEN
operator|-
name|len
argument_list|)
decl_stmt|;
name|chkbuf
operator|.
name|write
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|gzout
operator|.
name|write
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|gzout
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|final
name|byte
index|[]
name|chk
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|chkbuf
operator|.
name|getData
argument_list|()
argument_list|,
name|chkbuf
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
name|CompressionCodec
name|codec
init|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|GzipCodec
operator|.
name|class
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Decompressor
name|decom
init|=
name|codec
operator|.
name|createDecompressor
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|decom
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|decomClass
argument_list|,
name|decom
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|DataInputBuffer
name|gzbuf
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
name|gzbuf
operator|.
name|reset
argument_list|(
name|dflbuf
operator|.
name|getData
argument_list|()
argument_list|,
name|dflbuf
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|InputStream
name|gzin
init|=
name|codec
operator|.
name|createInputStream
argument_list|(
name|gzbuf
argument_list|,
name|decom
argument_list|)
decl_stmt|;
name|dflbuf
operator|.
name|reset
argument_list|()
expr_stmt|;
name|IOUtils
operator|.
name|copyBytes
argument_list|(
name|gzin
argument_list|,
name|dflbuf
argument_list|,
literal|4096
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
name|dflchk
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|dflbuf
operator|.
name|getData
argument_list|()
argument_list|,
name|dflbuf
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|chk
argument_list|,
name|dflchk
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBuiltInGzipConcat ()
specifier|public
name|void
name|testBuiltInGzipConcat
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IO_NATIVE_LIB_AVAILABLE_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|GzipConcatTest
argument_list|(
name|conf
argument_list|,
name|BuiltInGzipDecompressor
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNativeGzipConcat ()
specifier|public
name|void
name|testNativeGzipConcat
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IO_NATIVE_LIB_AVAILABLE_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assumeTrue
argument_list|(
name|ZlibFactory
operator|.
name|isNativeZlibLoaded
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|GzipConcatTest
argument_list|(
name|conf
argument_list|,
name|GzipCodec
operator|.
name|GzipZlibDecompressor
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGzipCodecRead ()
specifier|public
name|void
name|testGzipCodecRead
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Create a gzipped file and try to read it back, using a decompressor
comment|// from the CodecPool.
comment|// Don't use native libs for this test.
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IO_NATIVE_LIB_AVAILABLE_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"ZlibFactory is using native libs against request"
argument_list|,
name|ZlibFactory
operator|.
name|isNativeZlibLoaded
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
comment|// Ensure that the CodecPool has a BuiltInZlibInflater in it.
name|Decompressor
name|zlibDecompressor
init|=
name|ZlibFactory
operator|.
name|getZlibDecompressor
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"zlibDecompressor is null!"
argument_list|,
name|zlibDecompressor
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"ZlibFactory returned unexpected inflator"
argument_list|,
name|zlibDecompressor
operator|instanceof
name|BuiltInZlibInflater
argument_list|)
expr_stmt|;
name|CodecPool
operator|.
name|returnDecompressor
argument_list|(
name|zlibDecompressor
argument_list|)
expr_stmt|;
comment|// Now create a GZip text file.
name|String
name|tmpDir
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp/"
argument_list|)
decl_stmt|;
name|Path
name|f
init|=
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|tmpDir
argument_list|)
argument_list|,
literal|"testGzipCodecRead.txt.gz"
argument_list|)
decl_stmt|;
name|BufferedWriter
name|bw
init|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|GZIPOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|f
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
name|msg
init|=
literal|"This is the message in the file!"
decl_stmt|;
name|bw
operator|.
name|write
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|bw
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Now read it back, using the CodecPool to establish the
comment|// decompressor to use.
name|CompressionCodecFactory
name|ccf
init|=
operator|new
name|CompressionCodecFactory
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|CompressionCodec
name|codec
init|=
name|ccf
operator|.
name|getCodec
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|Decompressor
name|decompressor
init|=
name|CodecPool
operator|.
name|getDecompressor
argument_list|(
name|codec
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|InputStream
name|is
init|=
name|fs
operator|.
name|open
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|is
operator|=
name|codec
operator|.
name|createInputStream
argument_list|(
name|is
argument_list|,
name|decompressor
argument_list|)
expr_stmt|;
name|BufferedReader
name|br
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|is
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
init|=
name|br
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Didn't get the same message back!"
argument_list|,
name|msg
argument_list|,
name|line
argument_list|)
expr_stmt|;
name|br
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|verifyGzipFile (String filename, String msg)
specifier|private
name|void
name|verifyGzipFile
parameter_list|(
name|String
name|filename
parameter_list|,
name|String
name|msg
parameter_list|)
throws|throws
name|IOException
block|{
name|BufferedReader
name|r
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|GZIPInputStream
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|filename
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|line
init|=
name|r
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Got invalid line back from "
operator|+
name|filename
argument_list|,
name|msg
argument_list|,
name|line
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
operator|new
name|File
argument_list|(
name|filename
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGzipLongOverflow ()
specifier|public
name|void
name|testGzipLongOverflow
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testGzipLongOverflow"
argument_list|)
expr_stmt|;
comment|// Don't use native libs for this test.
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IO_NATIVE_LIB_AVAILABLE_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"ZlibFactory is using native libs against request"
argument_list|,
name|ZlibFactory
operator|.
name|isNativeZlibLoaded
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
comment|// Ensure that the CodecPool has a BuiltInZlibInflater in it.
name|Decompressor
name|zlibDecompressor
init|=
name|ZlibFactory
operator|.
name|getZlibDecompressor
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"zlibDecompressor is null!"
argument_list|,
name|zlibDecompressor
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"ZlibFactory returned unexpected inflator"
argument_list|,
name|zlibDecompressor
operator|instanceof
name|BuiltInZlibInflater
argument_list|)
expr_stmt|;
name|CodecPool
operator|.
name|returnDecompressor
argument_list|(
name|zlibDecompressor
argument_list|)
expr_stmt|;
comment|// Now create a GZip text file.
name|String
name|tmpDir
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp/"
argument_list|)
decl_stmt|;
name|Path
name|f
init|=
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|tmpDir
argument_list|)
argument_list|,
literal|"testGzipLongOverflow.bin.gz"
argument_list|)
decl_stmt|;
name|BufferedWriter
name|bw
init|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|GZIPOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|f
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|int
name|NBUF
init|=
literal|1024
operator|*
literal|4
operator|+
literal|1
decl_stmt|;
specifier|final
name|char
index|[]
name|buf
init|=
operator|new
name|char
index|[
literal|1024
operator|*
literal|1024
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buf
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|buf
index|[
name|i
index|]
operator|=
literal|'\0'
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NBUF
condition|;
name|i
operator|++
control|)
block|{
name|bw
operator|.
name|write
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
name|bw
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Now read it back, using the CodecPool to establish the
comment|// decompressor to use.
name|CompressionCodecFactory
name|ccf
init|=
operator|new
name|CompressionCodecFactory
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|CompressionCodec
name|codec
init|=
name|ccf
operator|.
name|getCodec
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|Decompressor
name|decompressor
init|=
name|CodecPool
operator|.
name|getDecompressor
argument_list|(
name|codec
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|InputStream
name|is
init|=
name|fs
operator|.
name|open
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|is
operator|=
name|codec
operator|.
name|createInputStream
argument_list|(
name|is
argument_list|,
name|decompressor
argument_list|)
expr_stmt|;
name|BufferedReader
name|br
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|is
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|NBUF
condition|;
name|j
operator|++
control|)
block|{
name|int
name|n
init|=
name|br
operator|.
name|read
argument_list|(
name|buf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"got wrong read length!"
argument_list|,
name|n
argument_list|,
name|buf
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buf
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|assertEquals
argument_list|(
literal|"got wrong byte!"
argument_list|,
name|buf
index|[
name|i
index|]
argument_list|,
literal|'\0'
argument_list|)
expr_stmt|;
block|}
name|br
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testGzipCodecWrite (boolean useNative)
specifier|public
name|void
name|testGzipCodecWrite
parameter_list|(
name|boolean
name|useNative
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Create a gzipped file using a compressor from the CodecPool,
comment|// and try to read it back via the regular GZIPInputStream.
comment|// Use native libs per the parameter
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IO_NATIVE_LIB_AVAILABLE_KEY
argument_list|,
name|useNative
argument_list|)
expr_stmt|;
if|if
condition|(
name|useNative
condition|)
block|{
name|assumeTrue
argument_list|(
name|ZlibFactory
operator|.
name|isNativeZlibLoaded
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertFalse
argument_list|(
literal|"ZlibFactory is using native libs against request"
argument_list|,
name|ZlibFactory
operator|.
name|isNativeZlibLoaded
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Ensure that the CodecPool has a BuiltInZlibDeflater in it.
name|Compressor
name|zlibCompressor
init|=
name|ZlibFactory
operator|.
name|getZlibCompressor
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"zlibCompressor is null!"
argument_list|,
name|zlibCompressor
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"ZlibFactory returned unexpected deflator"
argument_list|,
name|useNative
condition|?
name|zlibCompressor
operator|instanceof
name|ZlibCompressor
else|:
name|zlibCompressor
operator|instanceof
name|BuiltInZlibDeflater
argument_list|)
expr_stmt|;
name|CodecPool
operator|.
name|returnCompressor
argument_list|(
name|zlibCompressor
argument_list|)
expr_stmt|;
comment|// Create a GZIP text file via the Compressor interface.
name|CompressionCodecFactory
name|ccf
init|=
operator|new
name|CompressionCodecFactory
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|CompressionCodec
name|codec
init|=
name|ccf
operator|.
name|getCodec
argument_list|(
operator|new
name|Path
argument_list|(
literal|"foo.gz"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Codec for .gz file is not GzipCodec"
argument_list|,
name|codec
operator|instanceof
name|GzipCodec
argument_list|)
expr_stmt|;
specifier|final
name|String
name|msg
init|=
literal|"This is the message we are going to compress."
decl_stmt|;
specifier|final
name|String
name|tmpDir
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp/"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|fileName
init|=
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|tmpDir
argument_list|)
argument_list|,
literal|"testGzipCodecWrite.txt.gz"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|BufferedWriter
name|w
init|=
literal|null
decl_stmt|;
name|Compressor
name|gzipCompressor
init|=
name|CodecPool
operator|.
name|getCompressor
argument_list|(
name|codec
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|gzipCompressor
condition|)
block|{
comment|// If it gives us back a Compressor, we should be able to use this
comment|// to write files we can then read back with Java's gzip tools.
name|OutputStream
name|os
init|=
operator|new
name|CompressorStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|fileName
argument_list|)
argument_list|,
name|gzipCompressor
argument_list|)
decl_stmt|;
name|w
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
name|os
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|write
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|CodecPool
operator|.
name|returnCompressor
argument_list|(
name|gzipCompressor
argument_list|)
expr_stmt|;
name|verifyGzipFile
argument_list|(
name|fileName
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
comment|// Create a gzip text file via codec.getOutputStream().
name|w
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
name|codec
operator|.
name|createOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|fileName
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|write
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|verifyGzipFile
argument_list|(
name|fileName
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGzipCodecWriteJava ()
specifier|public
name|void
name|testGzipCodecWriteJava
parameter_list|()
throws|throws
name|IOException
block|{
name|testGzipCodecWrite
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGzipNativeCodecWrite ()
specifier|public
name|void
name|testGzipNativeCodecWrite
parameter_list|()
throws|throws
name|IOException
block|{
name|testGzipCodecWrite
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testCodecPoolAndGzipDecompressor ()
specifier|public
name|void
name|testCodecPoolAndGzipDecompressor
parameter_list|()
block|{
comment|// BuiltInZlibInflater should not be used as the GzipCodec decompressor.
comment|// Assert that this is the case.
comment|// Don't use native libs for this test.
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IO_NATIVE_LIB_AVAILABLE_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"ZlibFactory is using native libs against request"
argument_list|,
name|ZlibFactory
operator|.
name|isNativeZlibLoaded
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
comment|// This should give us a BuiltInZlibInflater.
name|Decompressor
name|zlibDecompressor
init|=
name|ZlibFactory
operator|.
name|getZlibDecompressor
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"zlibDecompressor is null!"
argument_list|,
name|zlibDecompressor
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"ZlibFactory returned unexpected inflator"
argument_list|,
name|zlibDecompressor
operator|instanceof
name|BuiltInZlibInflater
argument_list|)
expr_stmt|;
comment|// its createOutputStream() just wraps the existing stream in a
comment|// java.util.zip.GZIPOutputStream.
name|CompressionCodecFactory
name|ccf
init|=
operator|new
name|CompressionCodecFactory
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|CompressionCodec
name|codec
init|=
name|ccf
operator|.
name|getCodec
argument_list|(
operator|new
name|Path
argument_list|(
literal|"foo.gz"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Codec for .gz file is not GzipCodec"
argument_list|,
name|codec
operator|instanceof
name|GzipCodec
argument_list|)
expr_stmt|;
comment|// make sure we don't get a null decompressor
name|Decompressor
name|codecDecompressor
init|=
name|codec
operator|.
name|createDecompressor
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|codecDecompressor
condition|)
block|{
name|fail
argument_list|(
literal|"Got null codecDecompressor"
argument_list|)
expr_stmt|;
block|}
comment|// Asking the CodecPool for a decompressor for GzipCodec
comment|// should not return null
name|Decompressor
name|poolDecompressor
init|=
name|CodecPool
operator|.
name|getDecompressor
argument_list|(
name|codec
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|poolDecompressor
condition|)
block|{
name|fail
argument_list|(
literal|"Got null poolDecompressor"
argument_list|)
expr_stmt|;
block|}
comment|// return a couple decompressors
name|CodecPool
operator|.
name|returnDecompressor
argument_list|(
name|zlibDecompressor
argument_list|)
expr_stmt|;
name|CodecPool
operator|.
name|returnDecompressor
argument_list|(
name|poolDecompressor
argument_list|)
expr_stmt|;
name|Decompressor
name|poolDecompressor2
init|=
name|CodecPool
operator|.
name|getDecompressor
argument_list|(
name|codec
argument_list|)
decl_stmt|;
if|if
condition|(
name|poolDecompressor
operator|.
name|getClass
argument_list|()
operator|==
name|BuiltInGzipDecompressor
operator|.
name|class
condition|)
block|{
if|if
condition|(
name|poolDecompressor
operator|==
name|poolDecompressor2
condition|)
block|{
name|fail
argument_list|(
literal|"Reused java gzip decompressor in pool"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|poolDecompressor
operator|!=
name|poolDecompressor2
condition|)
block|{
name|fail
argument_list|(
literal|"Did not reuse native gzip decompressor in pool"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

