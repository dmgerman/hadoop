begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ipc
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/** Split from TestRPC. */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|class|TestRPCServerShutdown
specifier|public
class|class
name|TestRPCServerShutdown
extends|extends
name|TestRpcBase
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestRPCServerShutdown
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|setupConf
argument_list|()
expr_stmt|;
block|}
comment|/**    *  Verify the RPC server can shutdown properly when callQueue is full.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testRPCServerShutdown ()
specifier|public
name|void
name|testRPCServerShutdown
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|numClients
init|=
literal|3
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Future
argument_list|<
name|Void
argument_list|>
argument_list|>
name|res
init|=
operator|new
name|ArrayList
argument_list|<
name|Future
argument_list|<
name|Void
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|ExecutorService
name|executorService
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|numClients
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IPC_CLIENT_CONNECT_MAX_RETRIES_KEY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|RPC
operator|.
name|Builder
name|builder
init|=
name|newServerBuilder
argument_list|(
name|conf
argument_list|)
operator|.
name|setQueueSizePerHandler
argument_list|(
literal|1
argument_list|)
operator|.
name|setNumHandlers
argument_list|(
literal|1
argument_list|)
operator|.
name|setVerbose
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|Server
name|server
init|=
name|setupTestServer
argument_list|(
name|builder
argument_list|)
decl_stmt|;
specifier|final
name|TestRpcService
name|proxy
init|=
name|getClient
argument_list|(
name|addr
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
comment|// start a sleep RPC call to consume the only handler thread.
comment|// Start another sleep RPC call to make callQueue full.
comment|// Start another sleep RPC call to make reader thread block on CallQueue.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numClients
condition|;
name|i
operator|++
control|)
block|{
name|res
operator|.
name|add
argument_list|(
name|executorService
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|ServiceException
throws|,
name|InterruptedException
block|{
name|proxy
operator|.
name|sleep
argument_list|(
literal|null
argument_list|,
name|newSleepRequest
argument_list|(
literal|100000
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|server
operator|.
name|getCallQueueLen
argument_list|()
operator|!=
literal|1
operator|||
name|countThreads
argument_list|(
name|CallQueueManager
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|!=
literal|1
operator|||
name|countThreads
argument_list|(
name|PBServerImpl
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|!=
literal|1
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
try|try
block|{
name|stop
argument_list|(
name|server
argument_list|,
name|proxy
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Not enough clients"
argument_list|,
name|numClients
argument_list|,
name|res
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Future
argument_list|<
name|Void
argument_list|>
name|f
range|:
name|res
control|)
block|{
try|try
block|{
name|f
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Future get should not return"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|ServiceException
name|se
init|=
operator|(
name|ServiceException
operator|)
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected exception: "
operator|+
name|se
argument_list|,
name|se
operator|.
name|getCause
argument_list|()
operator|instanceof
name|IOException
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Expected exception"
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|executorService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

