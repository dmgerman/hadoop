begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.viewfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|viewfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ContentSummary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystemTestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FilterFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|viewfs
operator|.
name|ChRootedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestChRootedFileSystem
specifier|public
class|class
name|TestChRootedFileSystem
block|{
DECL|field|fSys
name|FileSystem
name|fSys
decl_stmt|;
comment|// The ChRoootedFs
DECL|field|fSysTarget
name|FileSystem
name|fSysTarget
decl_stmt|;
comment|//
DECL|field|chrootedTo
name|Path
name|chrootedTo
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create the test root on local_fs
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|fSysTarget
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|chrootedTo
operator|=
name|FileSystemTestHelper
operator|.
name|getAbsoluteTestRootPath
argument_list|(
name|fSysTarget
argument_list|)
expr_stmt|;
comment|// In case previous test was killed before cleanup
name|fSysTarget
operator|.
name|delete
argument_list|(
name|chrootedTo
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fSysTarget
operator|.
name|mkdirs
argument_list|(
name|chrootedTo
argument_list|)
expr_stmt|;
comment|// ChRoot to the root of the testDirectory
name|fSys
operator|=
operator|new
name|ChRootedFileSystem
argument_list|(
name|chrootedTo
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|fSysTarget
operator|.
name|delete
argument_list|(
name|chrootedTo
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testURI ()
specifier|public
name|void
name|testURI
parameter_list|()
block|{
name|URI
name|uri
init|=
name|fSys
operator|.
name|getUri
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|chrootedTo
operator|.
name|toUri
argument_list|()
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBasicPaths ()
specifier|public
name|void
name|testBasicPaths
parameter_list|()
block|{
name|URI
name|uri
init|=
name|fSys
operator|.
name|getUri
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|chrootedTo
operator|.
name|toUri
argument_list|()
argument_list|,
name|uri
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|fSys
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/user/"
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|fSys
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|fSys
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/user/"
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|fSys
operator|.
name|getHomeDirectory
argument_list|()
argument_list|)
expr_stmt|;
comment|/*      * ChRootedFs as its uri like file:///chrootRoot.      * This is questionable since path.makequalified(uri, path) ignores      * the pathPart of a uri. So our notion of chrooted URI is questionable.      * But if we were to fix Path#makeQualified() then  the next test should      *  have been:      Assert.assertEquals(         new Path(chrootedTo + "/foo/bar").makeQualified(             FsConstants.LOCAL_FS_URI, null),         fSys.makeQualified(new Path( "/foo/bar")));     */
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo/bar"
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|FsConstants
operator|.
name|LOCAL_FS_URI
argument_list|,
literal|null
argument_list|)
argument_list|,
name|fSys
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo/bar"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**     * Test modify operations (create, mkdir, delete, etc)     *     * Verify the operation via chrootedfs (ie fSys) and *also* via the    *  target file system (ie fSysTarget) that has been chrooted.    */
annotation|@
name|Test
DECL|method|testCreateDelete ()
specifier|public
name|void
name|testCreateDelete
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Create file
name|FileSystemTestHelper
operator|.
name|createFile
argument_list|(
name|fSys
argument_list|,
literal|"/foo"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fSys
operator|.
name|isFile
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fSysTarget
operator|.
name|isFile
argument_list|(
operator|new
name|Path
argument_list|(
name|chrootedTo
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create file with recursive dir
name|FileSystemTestHelper
operator|.
name|createFile
argument_list|(
name|fSys
argument_list|,
literal|"/newDir/foo"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fSys
operator|.
name|isFile
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/newDir/foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fSysTarget
operator|.
name|isFile
argument_list|(
operator|new
name|Path
argument_list|(
name|chrootedTo
argument_list|,
literal|"newDir/foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Delete the created file
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fSys
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/newDir/foo"
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|fSys
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/newDir/foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|fSysTarget
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|chrootedTo
argument_list|,
literal|"newDir/foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create file with a 2 component dirs recursively
name|FileSystemTestHelper
operator|.
name|createFile
argument_list|(
name|fSys
argument_list|,
literal|"/newDir/newDir2/foo"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fSys
operator|.
name|isFile
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/newDir/newDir2/foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fSysTarget
operator|.
name|isFile
argument_list|(
operator|new
name|Path
argument_list|(
name|chrootedTo
argument_list|,
literal|"newDir/newDir2/foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Delete the created file
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fSys
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/newDir/newDir2/foo"
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|fSys
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/newDir/newDir2/foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|fSysTarget
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|chrootedTo
argument_list|,
literal|"newDir/newDir2/foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMkdirDelete ()
specifier|public
name|void
name|testMkdirDelete
parameter_list|()
throws|throws
name|IOException
block|{
name|fSys
operator|.
name|mkdirs
argument_list|(
name|FileSystemTestHelper
operator|.
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"/dirX"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fSys
operator|.
name|isDirectory
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/dirX"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fSysTarget
operator|.
name|isDirectory
argument_list|(
operator|new
name|Path
argument_list|(
name|chrootedTo
argument_list|,
literal|"dirX"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|fSys
operator|.
name|mkdirs
argument_list|(
name|FileSystemTestHelper
operator|.
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"/dirX/dirY"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fSys
operator|.
name|isDirectory
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/dirX/dirY"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fSysTarget
operator|.
name|isDirectory
argument_list|(
operator|new
name|Path
argument_list|(
name|chrootedTo
argument_list|,
literal|"dirX/dirY"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Delete the created dir
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fSys
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/dirX/dirY"
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|fSys
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/dirX/dirY"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|fSysTarget
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|chrootedTo
argument_list|,
literal|"dirX/dirY"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fSys
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/dirX"
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|fSys
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/dirX"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|fSysTarget
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|chrootedTo
argument_list|,
literal|"dirX"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRename ()
specifier|public
name|void
name|testRename
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Rename a file
name|FileSystemTestHelper
operator|.
name|createFile
argument_list|(
name|fSys
argument_list|,
literal|"/newDir/foo"
argument_list|)
expr_stmt|;
name|fSys
operator|.
name|rename
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/newDir/foo"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/newDir/fooBar"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|fSys
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/newDir/foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|fSysTarget
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|chrootedTo
argument_list|,
literal|"newDir/foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fSys
operator|.
name|isFile
argument_list|(
name|FileSystemTestHelper
operator|.
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"/newDir/fooBar"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fSysTarget
operator|.
name|isFile
argument_list|(
operator|new
name|Path
argument_list|(
name|chrootedTo
argument_list|,
literal|"newDir/fooBar"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Rename a dir
name|fSys
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/newDir/dirFoo"
argument_list|)
argument_list|)
expr_stmt|;
name|fSys
operator|.
name|rename
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/newDir/dirFoo"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/newDir/dirFooBar"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|fSys
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/newDir/dirFoo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|fSysTarget
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|chrootedTo
argument_list|,
literal|"newDir/dirFoo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fSys
operator|.
name|isDirectory
argument_list|(
name|FileSystemTestHelper
operator|.
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"/newDir/dirFooBar"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fSysTarget
operator|.
name|isDirectory
argument_list|(
operator|new
name|Path
argument_list|(
name|chrootedTo
argument_list|,
literal|"newDir/dirFooBar"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetContentSummary ()
specifier|public
name|void
name|testGetContentSummary
parameter_list|()
throws|throws
name|IOException
block|{
comment|// GetContentSummary of a dir
name|fSys
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/newDir/dirFoo"
argument_list|)
argument_list|)
expr_stmt|;
name|ContentSummary
name|cs
init|=
name|fSys
operator|.
name|getContentSummary
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/newDir/dirFoo"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|1L
argument_list|,
name|cs
operator|.
name|getQuota
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|1L
argument_list|,
name|cs
operator|.
name|getSpaceQuota
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * We would have liked renames across file system to fail but     * Unfortunately there is not way to distinguish the two file systems     * @throws IOException    */
annotation|@
name|Test
DECL|method|testRenameAcrossFs ()
specifier|public
name|void
name|testRenameAcrossFs
parameter_list|()
throws|throws
name|IOException
block|{
name|fSys
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/newDir/dirFoo"
argument_list|)
argument_list|)
expr_stmt|;
name|fSys
operator|.
name|rename
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/newDir/dirFoo"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"file:///tmp/dirFooBar"
argument_list|)
argument_list|)
expr_stmt|;
name|FileSystemTestHelper
operator|.
name|isDir
argument_list|(
name|fSys
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/tmp/dirFooBar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testList ()
specifier|public
name|void
name|testList
parameter_list|()
throws|throws
name|IOException
block|{
name|FileStatus
name|fs
init|=
name|fSys
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
comment|//  should return the full path not the chrooted path
name|Assert
operator|.
name|assertEquals
argument_list|(
name|fs
operator|.
name|getPath
argument_list|()
argument_list|,
name|chrootedTo
argument_list|)
expr_stmt|;
comment|// list on Slash
name|FileStatus
index|[]
name|dirPaths
init|=
name|fSys
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|dirPaths
operator|.
name|length
argument_list|)
expr_stmt|;
name|FileSystemTestHelper
operator|.
name|createFile
argument_list|(
name|fSys
argument_list|,
literal|"/foo"
argument_list|)
expr_stmt|;
name|FileSystemTestHelper
operator|.
name|createFile
argument_list|(
name|fSys
argument_list|,
literal|"/bar"
argument_list|)
expr_stmt|;
name|fSys
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/dirX"
argument_list|)
argument_list|)
expr_stmt|;
name|fSys
operator|.
name|mkdirs
argument_list|(
name|FileSystemTestHelper
operator|.
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"/dirY"
argument_list|)
argument_list|)
expr_stmt|;
name|fSys
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/dirX/dirXX"
argument_list|)
argument_list|)
expr_stmt|;
name|dirPaths
operator|=
name|fSys
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|dirPaths
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// note 2 crc files
comment|// Note the the file status paths are the full paths on target
name|fs
operator|=
name|FileSystemTestHelper
operator|.
name|containsPath
argument_list|(
operator|new
name|Path
argument_list|(
name|chrootedTo
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
name|dirPaths
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|=
name|FileSystemTestHelper
operator|.
name|containsPath
argument_list|(
operator|new
name|Path
argument_list|(
name|chrootedTo
argument_list|,
literal|"bar"
argument_list|)
argument_list|,
name|dirPaths
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|=
name|FileSystemTestHelper
operator|.
name|containsPath
argument_list|(
operator|new
name|Path
argument_list|(
name|chrootedTo
argument_list|,
literal|"dirX"
argument_list|)
argument_list|,
name|dirPaths
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|=
name|FileSystemTestHelper
operator|.
name|containsPath
argument_list|(
operator|new
name|Path
argument_list|(
name|chrootedTo
argument_list|,
literal|"dirY"
argument_list|)
argument_list|,
name|dirPaths
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWorkingDirectory ()
specifier|public
name|void
name|testWorkingDirectory
parameter_list|()
throws|throws
name|Exception
block|{
comment|// First we cd to our test root
name|fSys
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/testWd"
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|workDir
init|=
operator|new
name|Path
argument_list|(
literal|"/testWd"
argument_list|)
decl_stmt|;
name|fSys
operator|.
name|setWorkingDirectory
argument_list|(
name|workDir
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|workDir
argument_list|,
name|fSys
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|fSys
operator|.
name|setWorkingDirectory
argument_list|(
operator|new
name|Path
argument_list|(
literal|"."
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|workDir
argument_list|,
name|fSys
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|fSys
operator|.
name|setWorkingDirectory
argument_list|(
operator|new
name|Path
argument_list|(
literal|".."
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|workDir
operator|.
name|getParent
argument_list|()
argument_list|,
name|fSys
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
expr_stmt|;
comment|// cd using a relative path
comment|// Go back to our test root
name|workDir
operator|=
operator|new
name|Path
argument_list|(
literal|"/testWd"
argument_list|)
expr_stmt|;
name|fSys
operator|.
name|setWorkingDirectory
argument_list|(
name|workDir
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|workDir
argument_list|,
name|fSys
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|relativeDir
init|=
operator|new
name|Path
argument_list|(
literal|"existingDir1"
argument_list|)
decl_stmt|;
name|Path
name|absoluteDir
init|=
operator|new
name|Path
argument_list|(
name|workDir
argument_list|,
literal|"existingDir1"
argument_list|)
decl_stmt|;
name|fSys
operator|.
name|mkdirs
argument_list|(
name|absoluteDir
argument_list|)
expr_stmt|;
name|fSys
operator|.
name|setWorkingDirectory
argument_list|(
name|relativeDir
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|absoluteDir
argument_list|,
name|fSys
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
expr_stmt|;
comment|// cd using a absolute path
name|absoluteDir
operator|=
operator|new
name|Path
argument_list|(
literal|"/test/existingDir2"
argument_list|)
expr_stmt|;
name|fSys
operator|.
name|mkdirs
argument_list|(
name|absoluteDir
argument_list|)
expr_stmt|;
name|fSys
operator|.
name|setWorkingDirectory
argument_list|(
name|absoluteDir
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|absoluteDir
argument_list|,
name|fSys
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now open a file relative to the wd we just set above.
name|Path
name|absoluteFooPath
init|=
operator|new
name|Path
argument_list|(
name|absoluteDir
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|fSys
operator|.
name|create
argument_list|(
name|absoluteFooPath
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|fSys
operator|.
name|open
argument_list|(
operator|new
name|Path
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Now mkdir relative to the dir we cd'ed to
name|fSys
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"newDir"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fSys
operator|.
name|isDirectory
argument_list|(
operator|new
name|Path
argument_list|(
name|absoluteDir
argument_list|,
literal|"newDir"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|/* Filesystem impls (RawLocal and DistributedFileSystem do not check      * for existing of working dir     absoluteDir = getTestRootPath(fSys, "nonexistingPath");     try {       fSys.setWorkingDirectory(absoluteDir);       Assert.fail("cd to non existing dir should have failed");     } catch (Exception e) {       // Exception as expected     }     */
comment|// Try a URI
specifier|final
name|String
name|LOCAL_FS_ROOT_URI
init|=
literal|"file:///tmp/test"
decl_stmt|;
name|absoluteDir
operator|=
operator|new
name|Path
argument_list|(
name|LOCAL_FS_ROOT_URI
operator|+
literal|"/existingDir"
argument_list|)
expr_stmt|;
name|fSys
operator|.
name|mkdirs
argument_list|(
name|absoluteDir
argument_list|)
expr_stmt|;
name|fSys
operator|.
name|setWorkingDirectory
argument_list|(
name|absoluteDir
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|absoluteDir
argument_list|,
name|fSys
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*    * Test resolvePath(p)     */
annotation|@
name|Test
DECL|method|testResolvePath ()
specifier|public
name|void
name|testResolvePath
parameter_list|()
throws|throws
name|IOException
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|chrootedTo
argument_list|,
name|fSys
operator|.
name|resolvePath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|FileSystemTestHelper
operator|.
name|createFile
argument_list|(
name|fSys
argument_list|,
literal|"/foo"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
name|chrootedTo
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
name|fSys
operator|.
name|resolvePath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|FileNotFoundException
operator|.
name|class
argument_list|)
DECL|method|testResolvePathNonExisting ()
specifier|public
name|void
name|testResolvePathNonExisting
parameter_list|()
throws|throws
name|IOException
block|{
name|fSys
operator|.
name|resolvePath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/nonExisting"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeleteOnExitPathHandling ()
specifier|public
name|void
name|testDeleteOnExitPathHandling
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
literal|"fs.mockfs.impl"
argument_list|,
name|MockFileSystem
operator|.
name|class
argument_list|,
name|FileSystem
operator|.
name|class
argument_list|)
expr_stmt|;
name|URI
name|chrootUri
init|=
name|URI
operator|.
name|create
argument_list|(
literal|"mockfs://foo/a/b"
argument_list|)
decl_stmt|;
name|ChRootedFileSystem
name|chrootFs
init|=
operator|new
name|ChRootedFileSystem
argument_list|(
name|chrootUri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
name|mockFs
init|=
operator|(
operator|(
name|FilterFileSystem
operator|)
name|chrootFs
operator|.
name|getRawFileSystem
argument_list|()
operator|)
operator|.
name|getRawFileSystem
argument_list|()
decl_stmt|;
comment|// ensure delete propagates the correct path
name|Path
name|chrootPath
init|=
operator|new
name|Path
argument_list|(
literal|"/c"
argument_list|)
decl_stmt|;
name|Path
name|rawPath
init|=
operator|new
name|Path
argument_list|(
literal|"/a/b/c"
argument_list|)
decl_stmt|;
name|chrootFs
operator|.
name|delete
argument_list|(
name|chrootPath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockFs
argument_list|)
operator|.
name|delete
argument_list|(
name|eq
argument_list|(
name|rawPath
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|mockFs
argument_list|)
expr_stmt|;
comment|// fake that the path exists for deleteOnExit
name|FileStatus
name|stat
init|=
name|mock
argument_list|(
name|FileStatus
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|getFileStatus
argument_list|(
name|eq
argument_list|(
name|rawPath
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|stat
argument_list|)
expr_stmt|;
comment|// ensure deleteOnExit propagates the correct path
name|chrootFs
operator|.
name|deleteOnExit
argument_list|(
name|chrootPath
argument_list|)
expr_stmt|;
name|chrootFs
operator|.
name|close
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|mockFs
argument_list|)
operator|.
name|delete
argument_list|(
name|eq
argument_list|(
name|rawPath
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|MockFileSystem
specifier|static
class|class
name|MockFileSystem
extends|extends
name|FilterFileSystem
block|{
DECL|method|MockFileSystem ()
name|MockFileSystem
parameter_list|()
block|{
name|super
argument_list|(
name|mock
argument_list|(
name|FileSystem
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|initialize (URI name, Configuration conf)
specifier|public
name|void
name|initialize
parameter_list|(
name|URI
name|name
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{}
block|}
block|}
end_class

end_unit

