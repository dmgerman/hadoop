begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.metrics2.sink
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|sink
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|annotation
operator|.
name|Metric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|annotation
operator|.
name|Metrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|annotation
operator|.
name|Metric
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|impl
operator|.
name|ConfigBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|impl
operator|.
name|MetricsSystemImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|impl
operator|.
name|TestMetricsConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MutableGaugeInt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestFileSink
specifier|public
class|class
name|TestFileSink
block|{
DECL|field|outFile
specifier|private
name|File
name|outFile
decl_stmt|;
comment|// The 2 sample metric classes:
annotation|@
name|Metrics
argument_list|(
name|name
operator|=
literal|"testRecord1"
argument_list|,
name|context
operator|=
literal|"test1"
argument_list|)
DECL|class|MyMetrics1
specifier|static
class|class
name|MyMetrics1
block|{
annotation|@
name|Metric
argument_list|(
name|value
operator|=
block|{
literal|"testTag1"
block|,
literal|""
block|}
argument_list|,
name|type
operator|=
name|Type
operator|.
name|TAG
argument_list|)
DECL|method|testTag1 ()
name|String
name|testTag1
parameter_list|()
block|{
return|return
literal|"testTagValue1"
return|;
block|}
annotation|@
name|Metric
argument_list|(
name|value
operator|=
block|{
literal|"testTag2"
block|,
literal|""
block|}
argument_list|,
name|type
operator|=
name|Type
operator|.
name|TAG
argument_list|)
DECL|method|gettestTag2 ()
name|String
name|gettestTag2
parameter_list|()
block|{
return|return
literal|"testTagValue2"
return|;
block|}
annotation|@
name|Metric
argument_list|(
name|value
operator|=
block|{
literal|"testMetric1"
block|,
literal|"An integer gauge"
block|}
argument_list|,
name|always
operator|=
literal|true
argument_list|)
DECL|field|testMetric1
name|MutableGaugeInt
name|testMetric1
decl_stmt|;
annotation|@
name|Metric
argument_list|(
name|value
operator|=
block|{
literal|"testMetric2"
block|,
literal|"An integer gauge"
block|}
argument_list|,
name|always
operator|=
literal|true
argument_list|)
DECL|field|testMetric2
name|MutableGaugeInt
name|testMetric2
decl_stmt|;
DECL|method|registerWith (MetricsSystem ms)
specifier|public
name|MyMetrics1
name|registerWith
parameter_list|(
name|MetricsSystem
name|ms
parameter_list|)
block|{
return|return
name|ms
operator|.
name|register
argument_list|(
literal|"m1"
argument_list|,
literal|null
argument_list|,
name|this
argument_list|)
return|;
block|}
block|}
annotation|@
name|Metrics
argument_list|(
name|name
operator|=
literal|"testRecord2"
argument_list|,
name|context
operator|=
literal|"test1"
argument_list|)
DECL|class|MyMetrics2
specifier|static
class|class
name|MyMetrics2
block|{
annotation|@
name|Metric
argument_list|(
name|value
operator|=
block|{
literal|"testTag22"
block|,
literal|""
block|}
argument_list|,
name|type
operator|=
name|Type
operator|.
name|TAG
argument_list|)
DECL|method|testTag1 ()
name|String
name|testTag1
parameter_list|()
block|{
return|return
literal|"testTagValue22"
return|;
block|}
DECL|method|registerWith (MetricsSystem ms)
specifier|public
name|MyMetrics2
name|registerWith
parameter_list|(
name|MetricsSystem
name|ms
parameter_list|)
block|{
return|return
name|ms
operator|.
name|register
argument_list|(
literal|"m2"
argument_list|,
literal|null
argument_list|,
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|getTestTempFile (String prefix, String suffix)
specifier|private
name|File
name|getTestTempFile
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|suffix
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|tmpPath
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|,
literal|"/tmp"
argument_list|)
decl_stmt|;
name|String
name|user
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|,
literal|"unknown-user"
argument_list|)
decl_stmt|;
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|tmpPath
operator|+
literal|"/"
operator|+
name|user
argument_list|)
decl_stmt|;
name|dir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
return|return
name|File
operator|.
name|createTempFile
argument_list|(
name|prefix
argument_list|,
name|suffix
argument_list|,
name|dir
argument_list|)
return|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|6000
argument_list|)
DECL|method|testFileSink ()
specifier|public
name|void
name|testFileSink
parameter_list|()
throws|throws
name|IOException
block|{
name|outFile
operator|=
name|getTestTempFile
argument_list|(
literal|"test-file-sink-"
argument_list|,
literal|".out"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|outPath
init|=
name|outFile
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
comment|// NB: specify large period to avoid multiple metrics snapshotting:
operator|new
name|ConfigBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"*.period"
argument_list|,
literal|10000
argument_list|)
operator|.
name|add
argument_list|(
literal|"test.sink.mysink0.class"
argument_list|,
name|FileSink
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
literal|"test.sink.mysink0.filename"
argument_list|,
name|outPath
argument_list|)
comment|// NB: we filter by context to exclude "metricssystem" context metrics:
operator|.
name|add
argument_list|(
literal|"test.sink.mysink0.context"
argument_list|,
literal|"test1"
argument_list|)
operator|.
name|save
argument_list|(
name|TestMetricsConfig
operator|.
name|getTestFilename
argument_list|(
literal|"hadoop-metrics2-test"
argument_list|)
argument_list|)
expr_stmt|;
name|MetricsSystemImpl
name|ms
init|=
operator|new
name|MetricsSystemImpl
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|ms
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|MyMetrics1
name|mm1
init|=
operator|new
name|MyMetrics1
argument_list|()
operator|.
name|registerWith
argument_list|(
name|ms
argument_list|)
decl_stmt|;
operator|new
name|MyMetrics2
argument_list|()
operator|.
name|registerWith
argument_list|(
name|ms
argument_list|)
expr_stmt|;
name|mm1
operator|.
name|testMetric1
operator|.
name|incr
argument_list|()
expr_stmt|;
name|mm1
operator|.
name|testMetric2
operator|.
name|incr
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|ms
operator|.
name|publishMetricsNow
argument_list|()
expr_stmt|;
comment|// publish the metrics
name|ms
operator|.
name|stop
argument_list|()
expr_stmt|;
name|ms
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
literal|null
decl_stmt|;
name|String
name|outFileContent
init|=
literal|null
decl_stmt|;
try|try
block|{
name|is
operator|=
operator|new
name|FileInputStream
argument_list|(
name|outFile
argument_list|)
expr_stmt|;
name|baos
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|(
operator|(
name|int
operator|)
name|outFile
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|copyBytes
argument_list|(
name|is
argument_list|,
name|baos
argument_list|,
literal|1024
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|outFileContent
operator|=
operator|new
name|String
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
literal|null
argument_list|,
name|baos
argument_list|,
name|is
argument_list|)
expr_stmt|;
block|}
comment|// Check the out file content. Should be something like the following:
comment|//1360244820087 test1.testRecord1: Context=test1, testTag1=testTagValue1, testTag2=testTagValue2, Hostname=myhost, testMetric1=1, testMetric2=2
comment|//1360244820089 test1.testRecord2: Context=test1, testTag22=testTagValue22, Hostname=myhost
comment|// Note that in the below expression we allow tags and metrics to go in arbitrary order.
name|Pattern
name|expectedContentPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
comment|// line #1:
literal|"^\\d+\\s+test1.testRecord1:\\s+Context=test1,\\s+"
operator|+
literal|"(testTag1=testTagValue1,\\s+testTag2=testTagValue2|testTag2=testTagValue2,\\s+testTag1=testTagValue1),"
operator|+
literal|"\\s+Hostname=.*,\\s+(testMetric1=1,\\s+testMetric2=2|testMetric2=2,\\s+testMetric1=1)"
operator|+
comment|// line #2:
literal|"$[\\n\\r]*^\\d+\\s+test1.testRecord2:\\s+Context=test1,"
operator|+
literal|"\\s+testTag22=testTagValue22,\\s+Hostname=.*$[\\n\\r]*"
argument_list|,
name|Pattern
operator|.
name|MULTILINE
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|expectedContentPattern
operator|.
name|matcher
argument_list|(
name|outFileContent
argument_list|)
operator|.
name|matches
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|after ()
specifier|public
name|void
name|after
parameter_list|()
block|{
if|if
condition|(
name|outFile
operator|!=
literal|null
condition|)
block|{
name|outFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|outFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

