begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.permission
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestFsPermission
specifier|public
class|class
name|TestFsPermission
block|{
annotation|@
name|Test
DECL|method|testFsAction ()
specifier|public
name|void
name|testFsAction
parameter_list|()
block|{
comment|//implies
for|for
control|(
name|FsAction
name|a
range|:
name|FsAction
operator|.
name|values
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|ALL
operator|.
name|implies
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|FsAction
name|a
range|:
name|FsAction
operator|.
name|values
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|a
operator|==
name|NONE
condition|?
name|NONE
operator|.
name|implies
argument_list|(
name|a
argument_list|)
else|:
operator|!
name|NONE
operator|.
name|implies
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|FsAction
name|a
range|:
name|FsAction
operator|.
name|values
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|a
operator|==
name|READ_EXECUTE
operator|||
name|a
operator|==
name|READ
operator|||
name|a
operator|==
name|EXECUTE
operator|||
name|a
operator|==
name|NONE
condition|?
name|READ_EXECUTE
operator|.
name|implies
argument_list|(
name|a
argument_list|)
else|:
operator|!
name|READ_EXECUTE
operator|.
name|implies
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//masks
name|assertEquals
argument_list|(
name|EXECUTE
argument_list|,
name|EXECUTE
operator|.
name|and
argument_list|(
name|READ_EXECUTE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|READ
argument_list|,
name|READ
operator|.
name|and
argument_list|(
name|READ_EXECUTE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NONE
argument_list|,
name|WRITE
operator|.
name|and
argument_list|(
name|READ_EXECUTE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|READ
argument_list|,
name|READ_EXECUTE
operator|.
name|and
argument_list|(
name|READ_WRITE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NONE
argument_list|,
name|READ_EXECUTE
operator|.
name|and
argument_list|(
name|WRITE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|WRITE_EXECUTE
argument_list|,
name|ALL
operator|.
name|and
argument_list|(
name|WRITE_EXECUTE
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Ensure that when manually specifying permission modes we get    * the expected values back out for all combinations    */
annotation|@
name|Test
DECL|method|testConvertingPermissions ()
specifier|public
name|void
name|testConvertingPermissions
parameter_list|()
block|{
for|for
control|(
name|short
name|s
init|=
literal|0
init|;
name|s
operator|<=
literal|01777
condition|;
name|s
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|s
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|s
argument_list|)
operator|.
name|toShort
argument_list|()
argument_list|)
expr_stmt|;
comment|// check string formats
name|assertEquals
argument_list|(
name|s
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%03o"
argument_list|,
name|s
argument_list|)
argument_list|)
operator|.
name|toShort
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|short
name|s
init|=
literal|0
decl_stmt|;
for|for
control|(
name|boolean
name|sb
range|:
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|true
block|}
control|)
block|{
for|for
control|(
name|FsAction
name|u
range|:
name|FsAction
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|FsAction
name|g
range|:
name|FsAction
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|FsAction
name|o
range|:
name|FsAction
operator|.
name|values
argument_list|()
control|)
block|{
comment|// Cover constructor with sticky bit.
name|FsPermission
name|f
init|=
operator|new
name|FsPermission
argument_list|(
name|u
argument_list|,
name|g
argument_list|,
name|o
argument_list|,
name|sb
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|s
argument_list|,
name|f
operator|.
name|toShort
argument_list|()
argument_list|)
expr_stmt|;
name|FsPermission
name|f2
init|=
operator|new
name|FsPermission
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|s
argument_list|,
name|f2
operator|.
name|toShort
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|02000
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSpecialBitsToString ()
specifier|public
name|void
name|testSpecialBitsToString
parameter_list|()
block|{
for|for
control|(
name|boolean
name|sb
range|:
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|true
block|}
control|)
block|{
for|for
control|(
name|FsAction
name|u
range|:
name|FsAction
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|FsAction
name|g
range|:
name|FsAction
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|FsAction
name|o
range|:
name|FsAction
operator|.
name|values
argument_list|()
control|)
block|{
name|FsPermission
name|f
init|=
operator|new
name|FsPermission
argument_list|(
name|u
argument_list|,
name|g
argument_list|,
name|o
argument_list|,
name|sb
argument_list|)
decl_stmt|;
name|String
name|fString
init|=
name|f
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// Check that sticky bit is represented correctly.
if|if
condition|(
name|f
operator|.
name|getStickyBit
argument_list|()
operator|&&
name|f
operator|.
name|getOtherAction
argument_list|()
operator|.
name|implies
argument_list|(
name|EXECUTE
argument_list|)
condition|)
name|assertEquals
argument_list|(
literal|'t'
argument_list|,
name|fString
operator|.
name|charAt
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|f
operator|.
name|getStickyBit
argument_list|()
operator|&&
operator|!
name|f
operator|.
name|getOtherAction
argument_list|()
operator|.
name|implies
argument_list|(
name|EXECUTE
argument_list|)
condition|)
name|assertEquals
argument_list|(
literal|'T'
argument_list|,
name|fString
operator|.
name|charAt
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|f
operator|.
name|getStickyBit
argument_list|()
operator|&&
name|f
operator|.
name|getOtherAction
argument_list|()
operator|.
name|implies
argument_list|(
name|EXECUTE
argument_list|)
condition|)
name|assertEquals
argument_list|(
literal|'x'
argument_list|,
name|fString
operator|.
name|charAt
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|assertEquals
argument_list|(
literal|'-'
argument_list|,
name|fString
operator|.
name|charAt
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|fString
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testFsPermission ()
specifier|public
name|void
name|testFsPermission
parameter_list|()
block|{
name|String
name|symbolic
init|=
literal|"-rwxrwxrwx"
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
operator|(
literal|1
operator|<<
literal|10
operator|)
condition|;
name|i
operator|++
control|)
block|{
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"----------"
argument_list|)
decl_stmt|;
name|String
name|binary
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%11s"
argument_list|,
name|Integer
operator|.
name|toBinaryString
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|permBinary
init|=
name|binary
operator|.
name|substring
argument_list|(
literal|2
argument_list|,
name|binary
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|len
init|=
name|permBinary
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|len
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|permBinary
operator|.
name|charAt
argument_list|(
name|j
argument_list|)
operator|==
literal|'1'
condition|)
block|{
name|int
name|k
init|=
literal|9
operator|-
operator|(
name|len
operator|-
literal|1
operator|-
name|j
operator|)
decl_stmt|;
name|b
operator|.
name|setCharAt
argument_list|(
name|k
argument_list|,
name|symbolic
operator|.
name|charAt
argument_list|(
name|k
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Check for sticky bit.
if|if
condition|(
name|binary
operator|.
name|charAt
argument_list|(
literal|1
argument_list|)
operator|==
literal|'1'
condition|)
block|{
name|char
name|replacement
init|=
name|b
operator|.
name|charAt
argument_list|(
literal|9
argument_list|)
operator|==
literal|'x'
condition|?
literal|'t'
else|:
literal|'T'
decl_stmt|;
name|b
operator|.
name|setCharAt
argument_list|(
literal|9
argument_list|,
name|replacement
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|i
argument_list|,
name|FsPermission
operator|.
name|valueOf
argument_list|(
name|b
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|toShort
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testFsSymbolicConstructorWithNormalInput ()
specifier|public
name|void
name|testFsSymbolicConstructorWithNormalInput
parameter_list|()
block|{
comment|// Test cases for symbolic representation
comment|//Added both Octal and short representation to show with sticky bit
name|assertEquals
argument_list|(
literal|777
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"+rwx"
argument_list|)
operator|.
name|toOctal
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0777
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"+rwx"
argument_list|)
operator|.
name|toShort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|444
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"+r"
argument_list|)
operator|.
name|toOctal
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0444
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"+r"
argument_list|)
operator|.
name|toShort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|222
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"+w"
argument_list|)
operator|.
name|toOctal
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0222
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"+w"
argument_list|)
operator|.
name|toShort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|111
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"+x"
argument_list|)
operator|.
name|toOctal
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0111
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"+x"
argument_list|)
operator|.
name|toShort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|666
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"+rw"
argument_list|)
operator|.
name|toOctal
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0666
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"+rw"
argument_list|)
operator|.
name|toShort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|333
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"+wx"
argument_list|)
operator|.
name|toOctal
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0333
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"+wx"
argument_list|)
operator|.
name|toShort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|555
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"+rx"
argument_list|)
operator|.
name|toOctal
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0555
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"+rx"
argument_list|)
operator|.
name|toShort
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test case is to test with repeated values in mode.
comment|// Repeated value in input will be ignored as duplicate.
name|assertEquals
argument_list|(
literal|666
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"+rwr"
argument_list|)
operator|.
name|toOctal
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0666
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"+rwr"
argument_list|)
operator|.
name|toShort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|000
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"-rwr"
argument_list|)
operator|.
name|toOctal
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0000
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"-rwr"
argument_list|)
operator|.
name|toShort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1666
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"+rwrt"
argument_list|)
operator|.
name|toOctal
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|01666
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"+rwrt"
argument_list|)
operator|.
name|toShort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|000
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"-rwrt"
argument_list|)
operator|.
name|toOctal
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0000
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"-rwrt"
argument_list|)
operator|.
name|toShort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1777
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"+rwxt"
argument_list|)
operator|.
name|toOctal
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|01777
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"+rwxt"
argument_list|)
operator|.
name|toShort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|000
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"-rt"
argument_list|)
operator|.
name|toOctal
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0000
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"-rt"
argument_list|)
operator|.
name|toShort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|000
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"-rwx"
argument_list|)
operator|.
name|toOctal
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0000
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"-rwx"
argument_list|)
operator|.
name|toShort
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSymbolicPermission ()
specifier|public
name|void
name|testSymbolicPermission
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|SYMBOLIC
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|short
name|val
init|=
literal|0777
decl_stmt|;
name|val
operator|&=
operator|~
name|Short
operator|.
name|valueOf
argument_list|(
name|SYMBOLIC
index|[
name|i
index|]
index|[
literal|1
index|]
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|val
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|SYMBOLIC
index|[
name|i
index|]
index|[
literal|0
index|]
argument_list|)
operator|.
name|toShort
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// add sticky bit to "other" when exec enabled
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|SYMBOLIC
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|short
name|val
init|=
literal|01777
decl_stmt|;
name|val
operator|&=
operator|~
name|Short
operator|.
name|valueOf
argument_list|(
name|SYMBOLIC
index|[
name|i
index|]
index|[
literal|1
index|]
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|val
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|SYMBOLIC
index|[
name|i
index|]
index|[
literal|0
index|]
operator|+
literal|"t"
argument_list|)
operator|.
name|toShort
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testUMaskParser ()
specifier|public
name|void
name|testUMaskParser
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// Ensure that we get the right octal values back for all legal values
for|for
control|(
name|FsAction
name|u
range|:
name|FsAction
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|FsAction
name|g
range|:
name|FsAction
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|FsAction
name|o
range|:
name|FsAction
operator|.
name|values
argument_list|()
control|)
block|{
name|FsPermission
name|f
init|=
operator|new
name|FsPermission
argument_list|(
name|u
argument_list|,
name|g
argument_list|,
name|o
argument_list|)
decl_stmt|;
name|String
name|asOctal
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%1$03o"
argument_list|,
name|f
operator|.
name|toShort
argument_list|()
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FsPermission
operator|.
name|UMASK_LABEL
argument_list|,
name|asOctal
argument_list|)
expr_stmt|;
name|FsPermission
name|fromConf
init|=
name|FsPermission
operator|.
name|getUMask
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|f
argument_list|,
name|fromConf
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testSymbolicUmasks ()
specifier|public
name|void
name|testSymbolicUmasks
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// Test some symbolic to octal settings
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|SYMBOLIC
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|FsPermission
operator|.
name|UMASK_LABEL
argument_list|,
name|SYMBOLIC
index|[
name|i
index|]
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|short
name|val
init|=
name|Short
operator|.
name|valueOf
argument_list|(
name|SYMBOLIC
index|[
name|i
index|]
index|[
literal|1
index|]
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|val
argument_list|,
name|FsPermission
operator|.
name|getUMask
argument_list|(
name|conf
argument_list|)
operator|.
name|toShort
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|set
argument_list|(
name|FsPermission
operator|.
name|UMASK_LABEL
argument_list|,
literal|"a+rw"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0111
argument_list|,
name|FsPermission
operator|.
name|getUMask
argument_list|(
name|conf
argument_list|)
operator|.
name|toShort
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBadUmasks ()
specifier|public
name|void
name|testBadUmasks
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|b
range|:
operator|new
name|String
index|[]
block|{
literal|"1777"
block|,
literal|"22"
block|,
literal|"99"
block|,
literal|"foo"
block|,
literal|""
block|}
control|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|FsPermission
operator|.
name|UMASK_LABEL
argument_list|,
name|b
argument_list|)
expr_stmt|;
try|try
block|{
name|FsPermission
operator|.
name|getUMask
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Shouldn't have been able to parse bad umask"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Exception should specify parsing error and invalid umask: "
operator|+
name|iae
operator|.
name|getMessage
argument_list|()
argument_list|,
name|isCorrectExceptionMessage
argument_list|(
name|iae
operator|.
name|getMessage
argument_list|()
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|isCorrectExceptionMessage (String msg, String umask)
specifier|private
name|boolean
name|isCorrectExceptionMessage
parameter_list|(
name|String
name|msg
parameter_list|,
name|String
name|umask
parameter_list|)
block|{
return|return
name|msg
operator|.
name|contains
argument_list|(
literal|"Unable to parse"
argument_list|)
operator|&&
name|msg
operator|.
name|contains
argument_list|(
name|umask
argument_list|)
operator|&&
name|msg
operator|.
name|contains
argument_list|(
literal|"octal or symbolic"
argument_list|)
return|;
block|}
comment|/**    *  test FsPermission(int) constructor.    */
annotation|@
name|Test
DECL|method|testIntPermission ()
specifier|public
name|void
name|testIntPermission
parameter_list|()
block|{
comment|// Octal           Decimals        Masked OCT      Masked DEC
comment|// 100644          33188           644             420
comment|// 101644          33700           1644            932
comment|// 40644           16804           644             420
comment|// 41644           17316           1644            932
comment|// 644             420             644             420
comment|// 1644            932             1644            932
name|int
index|[]
index|[]
name|permission_mask_maps
init|=
block|{
comment|// Octal                 Decimal    Unix Symbolic
block|{
literal|0100644
block|,
literal|0644
block|,
literal|0
block|}
block|,
comment|// 33188    -rw-r--
block|{
literal|0101644
block|,
literal|01644
block|,
literal|1
block|}
block|,
comment|// 33700    -rw-r-t
block|{
literal|040644
block|,
literal|0644
block|,
literal|0
block|}
block|,
comment|// 16804    drw-r--
block|{
literal|041644
block|,
literal|01644
block|,
literal|1
block|}
comment|// 17316    drw-r-t
block|}
decl_stmt|;
for|for
control|(
name|int
index|[]
name|permission_mask_map
range|:
name|permission_mask_maps
control|)
block|{
name|int
name|original_permission_value
init|=
name|permission_mask_map
index|[
literal|0
index|]
decl_stmt|;
name|int
name|masked_permission_value
init|=
name|permission_mask_map
index|[
literal|1
index|]
decl_stmt|;
name|boolean
name|hasStickyBit
init|=
name|permission_mask_map
index|[
literal|2
index|]
operator|==
literal|1
decl_stmt|;
name|FsPermission
name|fsPermission
init|=
operator|new
name|FsPermission
argument_list|(
name|original_permission_value
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|masked_permission_value
argument_list|,
name|fsPermission
operator|.
name|toShort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hasStickyBit
argument_list|,
name|fsPermission
operator|.
name|getStickyBit
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Symbolic umask list is generated in linux shell using by the command:
comment|// umask 0; umask<octal number>; umask -S
DECL|field|SYMBOLIC
specifier|static
specifier|final
name|String
index|[]
index|[]
name|SYMBOLIC
init|=
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"u=rwx,g=rwx,o=rwx"
block|,
literal|"0"
block|}
block|,
block|{
literal|"u=rwx,g=rwx,o=rw"
block|,
literal|"1"
block|}
block|,
block|{
literal|"u=rwx,g=rwx,o=rx"
block|,
literal|"2"
block|}
block|,
block|{
literal|"u=rwx,g=rwx,o=r"
block|,
literal|"3"
block|}
block|,
block|{
literal|"u=rwx,g=rwx,o=wx"
block|,
literal|"4"
block|}
block|,
block|{
literal|"u=rwx,g=rwx,o=w"
block|,
literal|"5"
block|}
block|,
block|{
literal|"u=rwx,g=rwx,o=x"
block|,
literal|"6"
block|}
block|,
block|{
literal|"u=rwx,g=rwx,o="
block|,
literal|"7"
block|}
block|,
block|{
literal|"u=rwx,g=rw,o=rwx"
block|,
literal|"10"
block|}
block|,
block|{
literal|"u=rwx,g=rw,o=rw"
block|,
literal|"11"
block|}
block|,
block|{
literal|"u=rwx,g=rw,o=rx"
block|,
literal|"12"
block|}
block|,
block|{
literal|"u=rwx,g=rw,o=r"
block|,
literal|"13"
block|}
block|,
block|{
literal|"u=rwx,g=rw,o=wx"
block|,
literal|"14"
block|}
block|,
block|{
literal|"u=rwx,g=rw,o=w"
block|,
literal|"15"
block|}
block|,
block|{
literal|"u=rwx,g=rw,o=x"
block|,
literal|"16"
block|}
block|,
block|{
literal|"u=rwx,g=rw,o="
block|,
literal|"17"
block|}
block|,
block|{
literal|"u=rwx,g=rx,o=rwx"
block|,
literal|"20"
block|}
block|,
block|{
literal|"u=rwx,g=rx,o=rw"
block|,
literal|"21"
block|}
block|,
block|{
literal|"u=rwx,g=rx,o=rx"
block|,
literal|"22"
block|}
block|,
block|{
literal|"u=rwx,g=rx,o=r"
block|,
literal|"23"
block|}
block|,
block|{
literal|"u=rwx,g=rx,o=wx"
block|,
literal|"24"
block|}
block|,
block|{
literal|"u=rwx,g=rx,o=w"
block|,
literal|"25"
block|}
block|,
block|{
literal|"u=rwx,g=rx,o=x"
block|,
literal|"26"
block|}
block|,
block|{
literal|"u=rwx,g=rx,o="
block|,
literal|"27"
block|}
block|,
block|{
literal|"u=rwx,g=r,o=rwx"
block|,
literal|"30"
block|}
block|,
block|{
literal|"u=rwx,g=r,o=rw"
block|,
literal|"31"
block|}
block|,
block|{
literal|"u=rwx,g=r,o=rx"
block|,
literal|"32"
block|}
block|,
block|{
literal|"u=rwx,g=r,o=r"
block|,
literal|"33"
block|}
block|,
block|{
literal|"u=rwx,g=r,o=wx"
block|,
literal|"34"
block|}
block|,
block|{
literal|"u=rwx,g=r,o=w"
block|,
literal|"35"
block|}
block|,
block|{
literal|"u=rwx,g=r,o=x"
block|,
literal|"36"
block|}
block|,
block|{
literal|"u=rwx,g=r,o="
block|,
literal|"37"
block|}
block|,
block|{
literal|"u=rwx,g=wx,o=rwx"
block|,
literal|"40"
block|}
block|,
block|{
literal|"u=rwx,g=wx,o=rw"
block|,
literal|"41"
block|}
block|,
block|{
literal|"u=rwx,g=wx,o=rx"
block|,
literal|"42"
block|}
block|,
block|{
literal|"u=rwx,g=wx,o=r"
block|,
literal|"43"
block|}
block|,
block|{
literal|"u=rwx,g=wx,o=wx"
block|,
literal|"44"
block|}
block|,
block|{
literal|"u=rwx,g=wx,o=w"
block|,
literal|"45"
block|}
block|,
block|{
literal|"u=rwx,g=wx,o=x"
block|,
literal|"46"
block|}
block|,
block|{
literal|"u=rwx,g=wx,o="
block|,
literal|"47"
block|}
block|,
block|{
literal|"u=rwx,g=w,o=rwx"
block|,
literal|"50"
block|}
block|,
block|{
literal|"u=rwx,g=w,o=rw"
block|,
literal|"51"
block|}
block|,
block|{
literal|"u=rwx,g=w,o=rx"
block|,
literal|"52"
block|}
block|,
block|{
literal|"u=rwx,g=w,o=r"
block|,
literal|"53"
block|}
block|,
block|{
literal|"u=rwx,g=w,o=wx"
block|,
literal|"54"
block|}
block|,
block|{
literal|"u=rwx,g=w,o=w"
block|,
literal|"55"
block|}
block|,
block|{
literal|"u=rwx,g=w,o=x"
block|,
literal|"56"
block|}
block|,
block|{
literal|"u=rwx,g=w,o="
block|,
literal|"57"
block|}
block|,
block|{
literal|"u=rwx,g=x,o=rwx"
block|,
literal|"60"
block|}
block|,
block|{
literal|"u=rwx,g=x,o=rw"
block|,
literal|"61"
block|}
block|,
block|{
literal|"u=rwx,g=x,o=rx"
block|,
literal|"62"
block|}
block|,
block|{
literal|"u=rwx,g=x,o=r"
block|,
literal|"63"
block|}
block|,
block|{
literal|"u=rwx,g=x,o=wx"
block|,
literal|"64"
block|}
block|,
block|{
literal|"u=rwx,g=x,o=w"
block|,
literal|"65"
block|}
block|,
block|{
literal|"u=rwx,g=x,o=x"
block|,
literal|"66"
block|}
block|,
block|{
literal|"u=rwx,g=x,o="
block|,
literal|"67"
block|}
block|,
block|{
literal|"u=rwx,g=,o=rwx"
block|,
literal|"70"
block|}
block|,
block|{
literal|"u=rwx,g=,o=rw"
block|,
literal|"71"
block|}
block|,
block|{
literal|"u=rwx,g=,o=rx"
block|,
literal|"72"
block|}
block|,
block|{
literal|"u=rwx,g=,o=r"
block|,
literal|"73"
block|}
block|,
block|{
literal|"u=rwx,g=,o=wx"
block|,
literal|"74"
block|}
block|,
block|{
literal|"u=rwx,g=,o=w"
block|,
literal|"75"
block|}
block|,
block|{
literal|"u=rwx,g=,o=x"
block|,
literal|"76"
block|}
block|,
block|{
literal|"u=rwx,g=,o="
block|,
literal|"77"
block|}
block|,
block|{
literal|"u=rw,g=rwx,o=rwx"
block|,
literal|"100"
block|}
block|,
block|{
literal|"u=rw,g=rwx,o=rw"
block|,
literal|"101"
block|}
block|,
block|{
literal|"u=rw,g=rwx,o=rx"
block|,
literal|"102"
block|}
block|,
block|{
literal|"u=rw,g=rwx,o=r"
block|,
literal|"103"
block|}
block|,
block|{
literal|"u=rw,g=rwx,o=wx"
block|,
literal|"104"
block|}
block|,
block|{
literal|"u=rw,g=rwx,o=w"
block|,
literal|"105"
block|}
block|,
block|{
literal|"u=rw,g=rwx,o=x"
block|,
literal|"106"
block|}
block|,
block|{
literal|"u=rw,g=rwx,o="
block|,
literal|"107"
block|}
block|,
block|{
literal|"u=rw,g=rw,o=rwx"
block|,
literal|"110"
block|}
block|,
block|{
literal|"u=rw,g=rw,o=rw"
block|,
literal|"111"
block|}
block|,
block|{
literal|"u=rw,g=rw,o=rx"
block|,
literal|"112"
block|}
block|,
block|{
literal|"u=rw,g=rw,o=r"
block|,
literal|"113"
block|}
block|,
block|{
literal|"u=rw,g=rw,o=wx"
block|,
literal|"114"
block|}
block|,
block|{
literal|"u=rw,g=rw,o=w"
block|,
literal|"115"
block|}
block|,
block|{
literal|"u=rw,g=rw,o=x"
block|,
literal|"116"
block|}
block|,
block|{
literal|"u=rw,g=rw,o="
block|,
literal|"117"
block|}
block|,
block|{
literal|"u=rw,g=rx,o=rwx"
block|,
literal|"120"
block|}
block|,
block|{
literal|"u=rw,g=rx,o=rw"
block|,
literal|"121"
block|}
block|,
block|{
literal|"u=rw,g=rx,o=rx"
block|,
literal|"122"
block|}
block|,
block|{
literal|"u=rw,g=rx,o=r"
block|,
literal|"123"
block|}
block|,
block|{
literal|"u=rw,g=rx,o=wx"
block|,
literal|"124"
block|}
block|,
block|{
literal|"u=rw,g=rx,o=w"
block|,
literal|"125"
block|}
block|,
block|{
literal|"u=rw,g=rx,o=x"
block|,
literal|"126"
block|}
block|,
block|{
literal|"u=rw,g=rx,o="
block|,
literal|"127"
block|}
block|,
block|{
literal|"u=rw,g=r,o=rwx"
block|,
literal|"130"
block|}
block|,
block|{
literal|"u=rw,g=r,o=rw"
block|,
literal|"131"
block|}
block|,
block|{
literal|"u=rw,g=r,o=rx"
block|,
literal|"132"
block|}
block|,
block|{
literal|"u=rw,g=r,o=r"
block|,
literal|"133"
block|}
block|,
block|{
literal|"u=rw,g=r,o=wx"
block|,
literal|"134"
block|}
block|,
block|{
literal|"u=rw,g=r,o=w"
block|,
literal|"135"
block|}
block|,
block|{
literal|"u=rw,g=r,o=x"
block|,
literal|"136"
block|}
block|,
block|{
literal|"u=rw,g=r,o="
block|,
literal|"137"
block|}
block|,
block|{
literal|"u=rw,g=wx,o=rwx"
block|,
literal|"140"
block|}
block|,
block|{
literal|"u=rw,g=wx,o=rw"
block|,
literal|"141"
block|}
block|,
block|{
literal|"u=rw,g=wx,o=rx"
block|,
literal|"142"
block|}
block|,
block|{
literal|"u=rw,g=wx,o=r"
block|,
literal|"143"
block|}
block|,
block|{
literal|"u=rw,g=wx,o=wx"
block|,
literal|"144"
block|}
block|,
block|{
literal|"u=rw,g=wx,o=w"
block|,
literal|"145"
block|}
block|,
block|{
literal|"u=rw,g=wx,o=x"
block|,
literal|"146"
block|}
block|,
block|{
literal|"u=rw,g=wx,o="
block|,
literal|"147"
block|}
block|,
block|{
literal|"u=rw,g=w,o=rwx"
block|,
literal|"150"
block|}
block|,
block|{
literal|"u=rw,g=w,o=rw"
block|,
literal|"151"
block|}
block|,
block|{
literal|"u=rw,g=w,o=rx"
block|,
literal|"152"
block|}
block|,
block|{
literal|"u=rw,g=w,o=r"
block|,
literal|"153"
block|}
block|,
block|{
literal|"u=rw,g=w,o=wx"
block|,
literal|"154"
block|}
block|,
block|{
literal|"u=rw,g=w,o=w"
block|,
literal|"155"
block|}
block|,
block|{
literal|"u=rw,g=w,o=x"
block|,
literal|"156"
block|}
block|,
block|{
literal|"u=rw,g=w,o="
block|,
literal|"157"
block|}
block|,
block|{
literal|"u=rw,g=x,o=rwx"
block|,
literal|"160"
block|}
block|,
block|{
literal|"u=rw,g=x,o=rw"
block|,
literal|"161"
block|}
block|,
block|{
literal|"u=rw,g=x,o=rx"
block|,
literal|"162"
block|}
block|,
block|{
literal|"u=rw,g=x,o=r"
block|,
literal|"163"
block|}
block|,
block|{
literal|"u=rw,g=x,o=wx"
block|,
literal|"164"
block|}
block|,
block|{
literal|"u=rw,g=x,o=w"
block|,
literal|"165"
block|}
block|,
block|{
literal|"u=rw,g=x,o=x"
block|,
literal|"166"
block|}
block|,
block|{
literal|"u=rw,g=x,o="
block|,
literal|"167"
block|}
block|,
block|{
literal|"u=rw,g=,o=rwx"
block|,
literal|"170"
block|}
block|,
block|{
literal|"u=rw,g=,o=rw"
block|,
literal|"171"
block|}
block|,
block|{
literal|"u=rw,g=,o=rx"
block|,
literal|"172"
block|}
block|,
block|{
literal|"u=rw,g=,o=r"
block|,
literal|"173"
block|}
block|,
block|{
literal|"u=rw,g=,o=wx"
block|,
literal|"174"
block|}
block|,
block|{
literal|"u=rw,g=,o=w"
block|,
literal|"175"
block|}
block|,
block|{
literal|"u=rw,g=,o=x"
block|,
literal|"176"
block|}
block|,
block|{
literal|"u=rw,g=,o="
block|,
literal|"177"
block|}
block|,
block|{
literal|"u=rx,g=rwx,o=rwx"
block|,
literal|"200"
block|}
block|,
block|{
literal|"u=rx,g=rwx,o=rw"
block|,
literal|"201"
block|}
block|,
block|{
literal|"u=rx,g=rwx,o=rx"
block|,
literal|"202"
block|}
block|,
block|{
literal|"u=rx,g=rwx,o=r"
block|,
literal|"203"
block|}
block|,
block|{
literal|"u=rx,g=rwx,o=wx"
block|,
literal|"204"
block|}
block|,
block|{
literal|"u=rx,g=rwx,o=w"
block|,
literal|"205"
block|}
block|,
block|{
literal|"u=rx,g=rwx,o=x"
block|,
literal|"206"
block|}
block|,
block|{
literal|"u=rx,g=rwx,o="
block|,
literal|"207"
block|}
block|,
block|{
literal|"u=rx,g=rw,o=rwx"
block|,
literal|"210"
block|}
block|,
block|{
literal|"u=rx,g=rw,o=rw"
block|,
literal|"211"
block|}
block|,
block|{
literal|"u=rx,g=rw,o=rx"
block|,
literal|"212"
block|}
block|,
block|{
literal|"u=rx,g=rw,o=r"
block|,
literal|"213"
block|}
block|,
block|{
literal|"u=rx,g=rw,o=wx"
block|,
literal|"214"
block|}
block|,
block|{
literal|"u=rx,g=rw,o=w"
block|,
literal|"215"
block|}
block|,
block|{
literal|"u=rx,g=rw,o=x"
block|,
literal|"216"
block|}
block|,
block|{
literal|"u=rx,g=rw,o="
block|,
literal|"217"
block|}
block|,
block|{
literal|"u=rx,g=rx,o=rwx"
block|,
literal|"220"
block|}
block|,
block|{
literal|"u=rx,g=rx,o=rw"
block|,
literal|"221"
block|}
block|,
block|{
literal|"u=rx,g=rx,o=rx"
block|,
literal|"222"
block|}
block|,
block|{
literal|"u=rx,g=rx,o=r"
block|,
literal|"223"
block|}
block|,
block|{
literal|"u=rx,g=rx,o=wx"
block|,
literal|"224"
block|}
block|,
block|{
literal|"u=rx,g=rx,o=w"
block|,
literal|"225"
block|}
block|,
block|{
literal|"u=rx,g=rx,o=x"
block|,
literal|"226"
block|}
block|,
block|{
literal|"u=rx,g=rx,o="
block|,
literal|"227"
block|}
block|,
block|{
literal|"u=rx,g=r,o=rwx"
block|,
literal|"230"
block|}
block|,
block|{
literal|"u=rx,g=r,o=rw"
block|,
literal|"231"
block|}
block|,
block|{
literal|"u=rx,g=r,o=rx"
block|,
literal|"232"
block|}
block|,
block|{
literal|"u=rx,g=r,o=r"
block|,
literal|"233"
block|}
block|,
block|{
literal|"u=rx,g=r,o=wx"
block|,
literal|"234"
block|}
block|,
block|{
literal|"u=rx,g=r,o=w"
block|,
literal|"235"
block|}
block|,
block|{
literal|"u=rx,g=r,o=x"
block|,
literal|"236"
block|}
block|,
block|{
literal|"u=rx,g=r,o="
block|,
literal|"237"
block|}
block|,
block|{
literal|"u=rx,g=wx,o=rwx"
block|,
literal|"240"
block|}
block|,
block|{
literal|"u=rx,g=wx,o=rw"
block|,
literal|"241"
block|}
block|,
block|{
literal|"u=rx,g=wx,o=rx"
block|,
literal|"242"
block|}
block|,
block|{
literal|"u=rx,g=wx,o=r"
block|,
literal|"243"
block|}
block|,
block|{
literal|"u=rx,g=wx,o=wx"
block|,
literal|"244"
block|}
block|,
block|{
literal|"u=rx,g=wx,o=w"
block|,
literal|"245"
block|}
block|,
block|{
literal|"u=rx,g=wx,o=x"
block|,
literal|"246"
block|}
block|,
block|{
literal|"u=rx,g=wx,o="
block|,
literal|"247"
block|}
block|,
block|{
literal|"u=rx,g=w,o=rwx"
block|,
literal|"250"
block|}
block|,
block|{
literal|"u=rx,g=w,o=rw"
block|,
literal|"251"
block|}
block|,
block|{
literal|"u=rx,g=w,o=rx"
block|,
literal|"252"
block|}
block|,
block|{
literal|"u=rx,g=w,o=r"
block|,
literal|"253"
block|}
block|,
block|{
literal|"u=rx,g=w,o=wx"
block|,
literal|"254"
block|}
block|,
block|{
literal|"u=rx,g=w,o=w"
block|,
literal|"255"
block|}
block|,
block|{
literal|"u=rx,g=w,o=x"
block|,
literal|"256"
block|}
block|,
block|{
literal|"u=rx,g=w,o="
block|,
literal|"257"
block|}
block|,
block|{
literal|"u=rx,g=x,o=rwx"
block|,
literal|"260"
block|}
block|,
block|{
literal|"u=rx,g=x,o=rw"
block|,
literal|"261"
block|}
block|,
block|{
literal|"u=rx,g=x,o=rx"
block|,
literal|"262"
block|}
block|,
block|{
literal|"u=rx,g=x,o=r"
block|,
literal|"263"
block|}
block|,
block|{
literal|"u=rx,g=x,o=wx"
block|,
literal|"264"
block|}
block|,
block|{
literal|"u=rx,g=x,o=w"
block|,
literal|"265"
block|}
block|,
block|{
literal|"u=rx,g=x,o=x"
block|,
literal|"266"
block|}
block|,
block|{
literal|"u=rx,g=x,o="
block|,
literal|"267"
block|}
block|,
block|{
literal|"u=rx,g=,o=rwx"
block|,
literal|"270"
block|}
block|,
block|{
literal|"u=rx,g=,o=rw"
block|,
literal|"271"
block|}
block|,
block|{
literal|"u=rx,g=,o=rx"
block|,
literal|"272"
block|}
block|,
block|{
literal|"u=rx,g=,o=r"
block|,
literal|"273"
block|}
block|,
block|{
literal|"u=rx,g=,o=wx"
block|,
literal|"274"
block|}
block|,
block|{
literal|"u=rx,g=,o=w"
block|,
literal|"275"
block|}
block|,
block|{
literal|"u=rx,g=,o=x"
block|,
literal|"276"
block|}
block|,
block|{
literal|"u=rx,g=,o="
block|,
literal|"277"
block|}
block|,
block|{
literal|"u=r,g=rwx,o=rwx"
block|,
literal|"300"
block|}
block|,
block|{
literal|"u=r,g=rwx,o=rw"
block|,
literal|"301"
block|}
block|,
block|{
literal|"u=r,g=rwx,o=rx"
block|,
literal|"302"
block|}
block|,
block|{
literal|"u=r,g=rwx,o=r"
block|,
literal|"303"
block|}
block|,
block|{
literal|"u=r,g=rwx,o=wx"
block|,
literal|"304"
block|}
block|,
block|{
literal|"u=r,g=rwx,o=w"
block|,
literal|"305"
block|}
block|,
block|{
literal|"u=r,g=rwx,o=x"
block|,
literal|"306"
block|}
block|,
block|{
literal|"u=r,g=rwx,o="
block|,
literal|"307"
block|}
block|,
block|{
literal|"u=r,g=rw,o=rwx"
block|,
literal|"310"
block|}
block|,
block|{
literal|"u=r,g=rw,o=rw"
block|,
literal|"311"
block|}
block|,
block|{
literal|"u=r,g=rw,o=rx"
block|,
literal|"312"
block|}
block|,
block|{
literal|"u=r,g=rw,o=r"
block|,
literal|"313"
block|}
block|,
block|{
literal|"u=r,g=rw,o=wx"
block|,
literal|"314"
block|}
block|,
block|{
literal|"u=r,g=rw,o=w"
block|,
literal|"315"
block|}
block|,
block|{
literal|"u=r,g=rw,o=x"
block|,
literal|"316"
block|}
block|,
block|{
literal|"u=r,g=rw,o="
block|,
literal|"317"
block|}
block|,
block|{
literal|"u=r,g=rx,o=rwx"
block|,
literal|"320"
block|}
block|,
block|{
literal|"u=r,g=rx,o=rw"
block|,
literal|"321"
block|}
block|,
block|{
literal|"u=r,g=rx,o=rx"
block|,
literal|"322"
block|}
block|,
block|{
literal|"u=r,g=rx,o=r"
block|,
literal|"323"
block|}
block|,
block|{
literal|"u=r,g=rx,o=wx"
block|,
literal|"324"
block|}
block|,
block|{
literal|"u=r,g=rx,o=w"
block|,
literal|"325"
block|}
block|,
block|{
literal|"u=r,g=rx,o=x"
block|,
literal|"326"
block|}
block|,
block|{
literal|"u=r,g=rx,o="
block|,
literal|"327"
block|}
block|,
block|{
literal|"u=r,g=r,o=rwx"
block|,
literal|"330"
block|}
block|,
block|{
literal|"u=r,g=r,o=rw"
block|,
literal|"331"
block|}
block|,
block|{
literal|"u=r,g=r,o=rx"
block|,
literal|"332"
block|}
block|,
block|{
literal|"u=r,g=r,o=r"
block|,
literal|"333"
block|}
block|,
block|{
literal|"u=r,g=r,o=wx"
block|,
literal|"334"
block|}
block|,
block|{
literal|"u=r,g=r,o=w"
block|,
literal|"335"
block|}
block|,
block|{
literal|"u=r,g=r,o=x"
block|,
literal|"336"
block|}
block|,
block|{
literal|"u=r,g=r,o="
block|,
literal|"337"
block|}
block|,
block|{
literal|"u=r,g=wx,o=rwx"
block|,
literal|"340"
block|}
block|,
block|{
literal|"u=r,g=wx,o=rw"
block|,
literal|"341"
block|}
block|,
block|{
literal|"u=r,g=wx,o=rx"
block|,
literal|"342"
block|}
block|,
block|{
literal|"u=r,g=wx,o=r"
block|,
literal|"343"
block|}
block|,
block|{
literal|"u=r,g=wx,o=wx"
block|,
literal|"344"
block|}
block|,
block|{
literal|"u=r,g=wx,o=w"
block|,
literal|"345"
block|}
block|,
block|{
literal|"u=r,g=wx,o=x"
block|,
literal|"346"
block|}
block|,
block|{
literal|"u=r,g=wx,o="
block|,
literal|"347"
block|}
block|,
block|{
literal|"u=r,g=w,o=rwx"
block|,
literal|"350"
block|}
block|,
block|{
literal|"u=r,g=w,o=rw"
block|,
literal|"351"
block|}
block|,
block|{
literal|"u=r,g=w,o=rx"
block|,
literal|"352"
block|}
block|,
block|{
literal|"u=r,g=w,o=r"
block|,
literal|"353"
block|}
block|,
block|{
literal|"u=r,g=w,o=wx"
block|,
literal|"354"
block|}
block|,
block|{
literal|"u=r,g=w,o=w"
block|,
literal|"355"
block|}
block|,
block|{
literal|"u=r,g=w,o=x"
block|,
literal|"356"
block|}
block|,
block|{
literal|"u=r,g=w,o="
block|,
literal|"357"
block|}
block|,
block|{
literal|"u=r,g=x,o=rwx"
block|,
literal|"360"
block|}
block|,
block|{
literal|"u=r,g=x,o=rw"
block|,
literal|"361"
block|}
block|,
block|{
literal|"u=r,g=x,o=rx"
block|,
literal|"362"
block|}
block|,
block|{
literal|"u=r,g=x,o=r"
block|,
literal|"363"
block|}
block|,
block|{
literal|"u=r,g=x,o=wx"
block|,
literal|"364"
block|}
block|,
block|{
literal|"u=r,g=x,o=w"
block|,
literal|"365"
block|}
block|,
block|{
literal|"u=r,g=x,o=x"
block|,
literal|"366"
block|}
block|,
block|{
literal|"u=r,g=x,o="
block|,
literal|"367"
block|}
block|,
block|{
literal|"u=r,g=,o=rwx"
block|,
literal|"370"
block|}
block|,
block|{
literal|"u=r,g=,o=rw"
block|,
literal|"371"
block|}
block|,
block|{
literal|"u=r,g=,o=rx"
block|,
literal|"372"
block|}
block|,
block|{
literal|"u=r,g=,o=r"
block|,
literal|"373"
block|}
block|,
block|{
literal|"u=r,g=,o=wx"
block|,
literal|"374"
block|}
block|,
block|{
literal|"u=r,g=,o=w"
block|,
literal|"375"
block|}
block|,
block|{
literal|"u=r,g=,o=x"
block|,
literal|"376"
block|}
block|,
block|{
literal|"u=r,g=,o="
block|,
literal|"377"
block|}
block|,
block|{
literal|"u=wx,g=rwx,o=rwx"
block|,
literal|"400"
block|}
block|,
block|{
literal|"u=wx,g=rwx,o=rw"
block|,
literal|"401"
block|}
block|,
block|{
literal|"u=wx,g=rwx,o=rx"
block|,
literal|"402"
block|}
block|,
block|{
literal|"u=wx,g=rwx,o=r"
block|,
literal|"403"
block|}
block|,
block|{
literal|"u=wx,g=rwx,o=wx"
block|,
literal|"404"
block|}
block|,
block|{
literal|"u=wx,g=rwx,o=w"
block|,
literal|"405"
block|}
block|,
block|{
literal|"u=wx,g=rwx,o=x"
block|,
literal|"406"
block|}
block|,
block|{
literal|"u=wx,g=rwx,o="
block|,
literal|"407"
block|}
block|,
block|{
literal|"u=wx,g=rw,o=rwx"
block|,
literal|"410"
block|}
block|,
block|{
literal|"u=wx,g=rw,o=rw"
block|,
literal|"411"
block|}
block|,
block|{
literal|"u=wx,g=rw,o=rx"
block|,
literal|"412"
block|}
block|,
block|{
literal|"u=wx,g=rw,o=r"
block|,
literal|"413"
block|}
block|,
block|{
literal|"u=wx,g=rw,o=wx"
block|,
literal|"414"
block|}
block|,
block|{
literal|"u=wx,g=rw,o=w"
block|,
literal|"415"
block|}
block|,
block|{
literal|"u=wx,g=rw,o=x"
block|,
literal|"416"
block|}
block|,
block|{
literal|"u=wx,g=rw,o="
block|,
literal|"417"
block|}
block|,
block|{
literal|"u=wx,g=rx,o=rwx"
block|,
literal|"420"
block|}
block|,
block|{
literal|"u=wx,g=rx,o=rw"
block|,
literal|"421"
block|}
block|,
block|{
literal|"u=wx,g=rx,o=rx"
block|,
literal|"422"
block|}
block|,
block|{
literal|"u=wx,g=rx,o=r"
block|,
literal|"423"
block|}
block|,
block|{
literal|"u=wx,g=rx,o=wx"
block|,
literal|"424"
block|}
block|,
block|{
literal|"u=wx,g=rx,o=w"
block|,
literal|"425"
block|}
block|,
block|{
literal|"u=wx,g=rx,o=x"
block|,
literal|"426"
block|}
block|,
block|{
literal|"u=wx,g=rx,o="
block|,
literal|"427"
block|}
block|,
block|{
literal|"u=wx,g=r,o=rwx"
block|,
literal|"430"
block|}
block|,
block|{
literal|"u=wx,g=r,o=rw"
block|,
literal|"431"
block|}
block|,
block|{
literal|"u=wx,g=r,o=rx"
block|,
literal|"432"
block|}
block|,
block|{
literal|"u=wx,g=r,o=r"
block|,
literal|"433"
block|}
block|,
block|{
literal|"u=wx,g=r,o=wx"
block|,
literal|"434"
block|}
block|,
block|{
literal|"u=wx,g=r,o=w"
block|,
literal|"435"
block|}
block|,
block|{
literal|"u=wx,g=r,o=x"
block|,
literal|"436"
block|}
block|,
block|{
literal|"u=wx,g=r,o="
block|,
literal|"437"
block|}
block|,
block|{
literal|"u=wx,g=wx,o=rwx"
block|,
literal|"440"
block|}
block|,
block|{
literal|"u=wx,g=wx,o=rw"
block|,
literal|"441"
block|}
block|,
block|{
literal|"u=wx,g=wx,o=rx"
block|,
literal|"442"
block|}
block|,
block|{
literal|"u=wx,g=wx,o=r"
block|,
literal|"443"
block|}
block|,
block|{
literal|"u=wx,g=wx,o=wx"
block|,
literal|"444"
block|}
block|,
block|{
literal|"u=wx,g=wx,o=w"
block|,
literal|"445"
block|}
block|,
block|{
literal|"u=wx,g=wx,o=x"
block|,
literal|"446"
block|}
block|,
block|{
literal|"u=wx,g=wx,o="
block|,
literal|"447"
block|}
block|,
block|{
literal|"u=wx,g=w,o=rwx"
block|,
literal|"450"
block|}
block|,
block|{
literal|"u=wx,g=w,o=rw"
block|,
literal|"451"
block|}
block|,
block|{
literal|"u=wx,g=w,o=rx"
block|,
literal|"452"
block|}
block|,
block|{
literal|"u=wx,g=w,o=r"
block|,
literal|"453"
block|}
block|,
block|{
literal|"u=wx,g=w,o=wx"
block|,
literal|"454"
block|}
block|,
block|{
literal|"u=wx,g=w,o=w"
block|,
literal|"455"
block|}
block|,
block|{
literal|"u=wx,g=w,o=x"
block|,
literal|"456"
block|}
block|,
block|{
literal|"u=wx,g=w,o="
block|,
literal|"457"
block|}
block|,
block|{
literal|"u=wx,g=x,o=rwx"
block|,
literal|"460"
block|}
block|,
block|{
literal|"u=wx,g=x,o=rw"
block|,
literal|"461"
block|}
block|,
block|{
literal|"u=wx,g=x,o=rx"
block|,
literal|"462"
block|}
block|,
block|{
literal|"u=wx,g=x,o=r"
block|,
literal|"463"
block|}
block|,
block|{
literal|"u=wx,g=x,o=wx"
block|,
literal|"464"
block|}
block|,
block|{
literal|"u=wx,g=x,o=w"
block|,
literal|"465"
block|}
block|,
block|{
literal|"u=wx,g=x,o=x"
block|,
literal|"466"
block|}
block|,
block|{
literal|"u=wx,g=x,o="
block|,
literal|"467"
block|}
block|,
block|{
literal|"u=wx,g=,o=rwx"
block|,
literal|"470"
block|}
block|,
block|{
literal|"u=wx,g=,o=rw"
block|,
literal|"471"
block|}
block|,
block|{
literal|"u=wx,g=,o=rx"
block|,
literal|"472"
block|}
block|,
block|{
literal|"u=wx,g=,o=r"
block|,
literal|"473"
block|}
block|,
block|{
literal|"u=wx,g=,o=wx"
block|,
literal|"474"
block|}
block|,
block|{
literal|"u=wx,g=,o=w"
block|,
literal|"475"
block|}
block|,
block|{
literal|"u=wx,g=,o=x"
block|,
literal|"476"
block|}
block|,
block|{
literal|"u=wx,g=,o="
block|,
literal|"477"
block|}
block|,
block|{
literal|"u=w,g=rwx,o=rwx"
block|,
literal|"500"
block|}
block|,
block|{
literal|"u=w,g=rwx,o=rw"
block|,
literal|"501"
block|}
block|,
block|{
literal|"u=w,g=rwx,o=rx"
block|,
literal|"502"
block|}
block|,
block|{
literal|"u=w,g=rwx,o=r"
block|,
literal|"503"
block|}
block|,
block|{
literal|"u=w,g=rwx,o=wx"
block|,
literal|"504"
block|}
block|,
block|{
literal|"u=w,g=rwx,o=w"
block|,
literal|"505"
block|}
block|,
block|{
literal|"u=w,g=rwx,o=x"
block|,
literal|"506"
block|}
block|,
block|{
literal|"u=w,g=rwx,o="
block|,
literal|"507"
block|}
block|,
block|{
literal|"u=w,g=rw,o=rwx"
block|,
literal|"510"
block|}
block|,
block|{
literal|"u=w,g=rw,o=rw"
block|,
literal|"511"
block|}
block|,
block|{
literal|"u=w,g=rw,o=rx"
block|,
literal|"512"
block|}
block|,
block|{
literal|"u=w,g=rw,o=r"
block|,
literal|"513"
block|}
block|,
block|{
literal|"u=w,g=rw,o=wx"
block|,
literal|"514"
block|}
block|,
block|{
literal|"u=w,g=rw,o=w"
block|,
literal|"515"
block|}
block|,
block|{
literal|"u=w,g=rw,o=x"
block|,
literal|"516"
block|}
block|,
block|{
literal|"u=w,g=rw,o="
block|,
literal|"517"
block|}
block|,
block|{
literal|"u=w,g=rx,o=rwx"
block|,
literal|"520"
block|}
block|,
block|{
literal|"u=w,g=rx,o=rw"
block|,
literal|"521"
block|}
block|,
block|{
literal|"u=w,g=rx,o=rx"
block|,
literal|"522"
block|}
block|,
block|{
literal|"u=w,g=rx,o=r"
block|,
literal|"523"
block|}
block|,
block|{
literal|"u=w,g=rx,o=wx"
block|,
literal|"524"
block|}
block|,
block|{
literal|"u=w,g=rx,o=w"
block|,
literal|"525"
block|}
block|,
block|{
literal|"u=w,g=rx,o=x"
block|,
literal|"526"
block|}
block|,
block|{
literal|"u=w,g=rx,o="
block|,
literal|"527"
block|}
block|,
block|{
literal|"u=w,g=r,o=rwx"
block|,
literal|"530"
block|}
block|,
block|{
literal|"u=w,g=r,o=rw"
block|,
literal|"531"
block|}
block|,
block|{
literal|"u=w,g=r,o=rx"
block|,
literal|"532"
block|}
block|,
block|{
literal|"u=w,g=r,o=r"
block|,
literal|"533"
block|}
block|,
block|{
literal|"u=w,g=r,o=wx"
block|,
literal|"534"
block|}
block|,
block|{
literal|"u=w,g=r,o=w"
block|,
literal|"535"
block|}
block|,
block|{
literal|"u=w,g=r,o=x"
block|,
literal|"536"
block|}
block|,
block|{
literal|"u=w,g=r,o="
block|,
literal|"537"
block|}
block|,
block|{
literal|"u=w,g=wx,o=rwx"
block|,
literal|"540"
block|}
block|,
block|{
literal|"u=w,g=wx,o=rw"
block|,
literal|"541"
block|}
block|,
block|{
literal|"u=w,g=wx,o=rx"
block|,
literal|"542"
block|}
block|,
block|{
literal|"u=w,g=wx,o=r"
block|,
literal|"543"
block|}
block|,
block|{
literal|"u=w,g=wx,o=wx"
block|,
literal|"544"
block|}
block|,
block|{
literal|"u=w,g=wx,o=w"
block|,
literal|"545"
block|}
block|,
block|{
literal|"u=w,g=wx,o=x"
block|,
literal|"546"
block|}
block|,
block|{
literal|"u=w,g=wx,o="
block|,
literal|"547"
block|}
block|,
block|{
literal|"u=w,g=w,o=rwx"
block|,
literal|"550"
block|}
block|,
block|{
literal|"u=w,g=w,o=rw"
block|,
literal|"551"
block|}
block|,
block|{
literal|"u=w,g=w,o=rx"
block|,
literal|"552"
block|}
block|,
block|{
literal|"u=w,g=w,o=r"
block|,
literal|"553"
block|}
block|,
block|{
literal|"u=w,g=w,o=wx"
block|,
literal|"554"
block|}
block|,
block|{
literal|"u=w,g=w,o=w"
block|,
literal|"555"
block|}
block|,
block|{
literal|"u=w,g=w,o=x"
block|,
literal|"556"
block|}
block|,
block|{
literal|"u=w,g=w,o="
block|,
literal|"557"
block|}
block|,
block|{
literal|"u=w,g=x,o=rwx"
block|,
literal|"560"
block|}
block|,
block|{
literal|"u=w,g=x,o=rw"
block|,
literal|"561"
block|}
block|,
block|{
literal|"u=w,g=x,o=rx"
block|,
literal|"562"
block|}
block|,
block|{
literal|"u=w,g=x,o=r"
block|,
literal|"563"
block|}
block|,
block|{
literal|"u=w,g=x,o=wx"
block|,
literal|"564"
block|}
block|,
block|{
literal|"u=w,g=x,o=w"
block|,
literal|"565"
block|}
block|,
block|{
literal|"u=w,g=x,o=x"
block|,
literal|"566"
block|}
block|,
block|{
literal|"u=w,g=x,o="
block|,
literal|"567"
block|}
block|,
block|{
literal|"u=w,g=,o=rwx"
block|,
literal|"570"
block|}
block|,
block|{
literal|"u=w,g=,o=rw"
block|,
literal|"571"
block|}
block|,
block|{
literal|"u=w,g=,o=rx"
block|,
literal|"572"
block|}
block|,
block|{
literal|"u=w,g=,o=r"
block|,
literal|"573"
block|}
block|,
block|{
literal|"u=w,g=,o=wx"
block|,
literal|"574"
block|}
block|,
block|{
literal|"u=w,g=,o=w"
block|,
literal|"575"
block|}
block|,
block|{
literal|"u=w,g=,o=x"
block|,
literal|"576"
block|}
block|,
block|{
literal|"u=w,g=,o="
block|,
literal|"577"
block|}
block|,
block|{
literal|"u=x,g=rwx,o=rwx"
block|,
literal|"600"
block|}
block|,
block|{
literal|"u=x,g=rwx,o=rw"
block|,
literal|"601"
block|}
block|,
block|{
literal|"u=x,g=rwx,o=rx"
block|,
literal|"602"
block|}
block|,
block|{
literal|"u=x,g=rwx,o=r"
block|,
literal|"603"
block|}
block|,
block|{
literal|"u=x,g=rwx,o=wx"
block|,
literal|"604"
block|}
block|,
block|{
literal|"u=x,g=rwx,o=w"
block|,
literal|"605"
block|}
block|,
block|{
literal|"u=x,g=rwx,o=x"
block|,
literal|"606"
block|}
block|,
block|{
literal|"u=x,g=rwx,o="
block|,
literal|"607"
block|}
block|,
block|{
literal|"u=x,g=rw,o=rwx"
block|,
literal|"610"
block|}
block|,
block|{
literal|"u=x,g=rw,o=rw"
block|,
literal|"611"
block|}
block|,
block|{
literal|"u=x,g=rw,o=rx"
block|,
literal|"612"
block|}
block|,
block|{
literal|"u=x,g=rw,o=r"
block|,
literal|"613"
block|}
block|,
block|{
literal|"u=x,g=rw,o=wx"
block|,
literal|"614"
block|}
block|,
block|{
literal|"u=x,g=rw,o=w"
block|,
literal|"615"
block|}
block|,
block|{
literal|"u=x,g=rw,o=x"
block|,
literal|"616"
block|}
block|,
block|{
literal|"u=x,g=rw,o="
block|,
literal|"617"
block|}
block|,
block|{
literal|"u=x,g=rx,o=rwx"
block|,
literal|"620"
block|}
block|,
block|{
literal|"u=x,g=rx,o=rw"
block|,
literal|"621"
block|}
block|,
block|{
literal|"u=x,g=rx,o=rx"
block|,
literal|"622"
block|}
block|,
block|{
literal|"u=x,g=rx,o=r"
block|,
literal|"623"
block|}
block|,
block|{
literal|"u=x,g=rx,o=wx"
block|,
literal|"624"
block|}
block|,
block|{
literal|"u=x,g=rx,o=w"
block|,
literal|"625"
block|}
block|,
block|{
literal|"u=x,g=rx,o=x"
block|,
literal|"626"
block|}
block|,
block|{
literal|"u=x,g=rx,o="
block|,
literal|"627"
block|}
block|,
block|{
literal|"u=x,g=r,o=rwx"
block|,
literal|"630"
block|}
block|,
block|{
literal|"u=x,g=r,o=rw"
block|,
literal|"631"
block|}
block|,
block|{
literal|"u=x,g=r,o=rx"
block|,
literal|"632"
block|}
block|,
block|{
literal|"u=x,g=r,o=r"
block|,
literal|"633"
block|}
block|,
block|{
literal|"u=x,g=r,o=wx"
block|,
literal|"634"
block|}
block|,
block|{
literal|"u=x,g=r,o=w"
block|,
literal|"635"
block|}
block|,
block|{
literal|"u=x,g=r,o=x"
block|,
literal|"636"
block|}
block|,
block|{
literal|"u=x,g=r,o="
block|,
literal|"637"
block|}
block|,
block|{
literal|"u=x,g=wx,o=rwx"
block|,
literal|"640"
block|}
block|,
block|{
literal|"u=x,g=wx,o=rw"
block|,
literal|"641"
block|}
block|,
block|{
literal|"u=x,g=wx,o=rx"
block|,
literal|"642"
block|}
block|,
block|{
literal|"u=x,g=wx,o=r"
block|,
literal|"643"
block|}
block|,
block|{
literal|"u=x,g=wx,o=wx"
block|,
literal|"644"
block|}
block|,
block|{
literal|"u=x,g=wx,o=w"
block|,
literal|"645"
block|}
block|,
block|{
literal|"u=x,g=wx,o=x"
block|,
literal|"646"
block|}
block|,
block|{
literal|"u=x,g=wx,o="
block|,
literal|"647"
block|}
block|,
block|{
literal|"u=x,g=w,o=rwx"
block|,
literal|"650"
block|}
block|,
block|{
literal|"u=x,g=w,o=rw"
block|,
literal|"651"
block|}
block|,
block|{
literal|"u=x,g=w,o=rx"
block|,
literal|"652"
block|}
block|,
block|{
literal|"u=x,g=w,o=r"
block|,
literal|"653"
block|}
block|,
block|{
literal|"u=x,g=w,o=wx"
block|,
literal|"654"
block|}
block|,
block|{
literal|"u=x,g=w,o=w"
block|,
literal|"655"
block|}
block|,
block|{
literal|"u=x,g=w,o=x"
block|,
literal|"656"
block|}
block|,
block|{
literal|"u=x,g=w,o="
block|,
literal|"657"
block|}
block|,
block|{
literal|"u=x,g=x,o=rwx"
block|,
literal|"660"
block|}
block|,
block|{
literal|"u=x,g=x,o=rw"
block|,
literal|"661"
block|}
block|,
block|{
literal|"u=x,g=x,o=rx"
block|,
literal|"662"
block|}
block|,
block|{
literal|"u=x,g=x,o=r"
block|,
literal|"663"
block|}
block|,
block|{
literal|"u=x,g=x,o=wx"
block|,
literal|"664"
block|}
block|,
block|{
literal|"u=x,g=x,o=w"
block|,
literal|"665"
block|}
block|,
block|{
literal|"u=x,g=x,o=x"
block|,
literal|"666"
block|}
block|,
block|{
literal|"u=x,g=x,o="
block|,
literal|"667"
block|}
block|,
block|{
literal|"u=x,g=,o=rwx"
block|,
literal|"670"
block|}
block|,
block|{
literal|"u=x,g=,o=rw"
block|,
literal|"671"
block|}
block|,
block|{
literal|"u=x,g=,o=rx"
block|,
literal|"672"
block|}
block|,
block|{
literal|"u=x,g=,o=r"
block|,
literal|"673"
block|}
block|,
block|{
literal|"u=x,g=,o=wx"
block|,
literal|"674"
block|}
block|,
block|{
literal|"u=x,g=,o=w"
block|,
literal|"675"
block|}
block|,
block|{
literal|"u=x,g=,o=x"
block|,
literal|"676"
block|}
block|,
block|{
literal|"u=x,g=,o="
block|,
literal|"677"
block|}
block|,
block|{
literal|"u=,g=rwx,o=rwx"
block|,
literal|"700"
block|}
block|,
block|{
literal|"u=,g=rwx,o=rw"
block|,
literal|"701"
block|}
block|,
block|{
literal|"u=,g=rwx,o=rx"
block|,
literal|"702"
block|}
block|,
block|{
literal|"u=,g=rwx,o=r"
block|,
literal|"703"
block|}
block|,
block|{
literal|"u=,g=rwx,o=wx"
block|,
literal|"704"
block|}
block|,
block|{
literal|"u=,g=rwx,o=w"
block|,
literal|"705"
block|}
block|,
block|{
literal|"u=,g=rwx,o=x"
block|,
literal|"706"
block|}
block|,
block|{
literal|"u=,g=rwx,o="
block|,
literal|"707"
block|}
block|,
block|{
literal|"u=,g=rw,o=rwx"
block|,
literal|"710"
block|}
block|,
block|{
literal|"u=,g=rw,o=rw"
block|,
literal|"711"
block|}
block|,
block|{
literal|"u=,g=rw,o=rx"
block|,
literal|"712"
block|}
block|,
block|{
literal|"u=,g=rw,o=r"
block|,
literal|"713"
block|}
block|,
block|{
literal|"u=,g=rw,o=wx"
block|,
literal|"714"
block|}
block|,
block|{
literal|"u=,g=rw,o=w"
block|,
literal|"715"
block|}
block|,
block|{
literal|"u=,g=rw,o=x"
block|,
literal|"716"
block|}
block|,
block|{
literal|"u=,g=rw,o="
block|,
literal|"717"
block|}
block|,
block|{
literal|"u=,g=rx,o=rwx"
block|,
literal|"720"
block|}
block|,
block|{
literal|"u=,g=rx,o=rw"
block|,
literal|"721"
block|}
block|,
block|{
literal|"u=,g=rx,o=rx"
block|,
literal|"722"
block|}
block|,
block|{
literal|"u=,g=rx,o=r"
block|,
literal|"723"
block|}
block|,
block|{
literal|"u=,g=rx,o=wx"
block|,
literal|"724"
block|}
block|,
block|{
literal|"u=,g=rx,o=w"
block|,
literal|"725"
block|}
block|,
block|{
literal|"u=,g=rx,o=x"
block|,
literal|"726"
block|}
block|,
block|{
literal|"u=,g=rx,o="
block|,
literal|"727"
block|}
block|,
block|{
literal|"u=,g=r,o=rwx"
block|,
literal|"730"
block|}
block|,
block|{
literal|"u=,g=r,o=rw"
block|,
literal|"731"
block|}
block|,
block|{
literal|"u=,g=r,o=rx"
block|,
literal|"732"
block|}
block|,
block|{
literal|"u=,g=r,o=r"
block|,
literal|"733"
block|}
block|,
block|{
literal|"u=,g=r,o=wx"
block|,
literal|"734"
block|}
block|,
block|{
literal|"u=,g=r,o=w"
block|,
literal|"735"
block|}
block|,
block|{
literal|"u=,g=r,o=x"
block|,
literal|"736"
block|}
block|,
block|{
literal|"u=,g=r,o="
block|,
literal|"737"
block|}
block|,
block|{
literal|"u=,g=wx,o=rwx"
block|,
literal|"740"
block|}
block|,
block|{
literal|"u=,g=wx,o=rw"
block|,
literal|"741"
block|}
block|,
block|{
literal|"u=,g=wx,o=rx"
block|,
literal|"742"
block|}
block|,
block|{
literal|"u=,g=wx,o=r"
block|,
literal|"743"
block|}
block|,
block|{
literal|"u=,g=wx,o=wx"
block|,
literal|"744"
block|}
block|,
block|{
literal|"u=,g=wx,o=w"
block|,
literal|"745"
block|}
block|,
block|{
literal|"u=,g=wx,o=x"
block|,
literal|"746"
block|}
block|,
block|{
literal|"u=,g=wx,o="
block|,
literal|"747"
block|}
block|,
block|{
literal|"u=,g=w,o=rwx"
block|,
literal|"750"
block|}
block|,
block|{
literal|"u=,g=w,o=rw"
block|,
literal|"751"
block|}
block|,
block|{
literal|"u=,g=w,o=rx"
block|,
literal|"752"
block|}
block|,
block|{
literal|"u=,g=w,o=r"
block|,
literal|"753"
block|}
block|,
block|{
literal|"u=,g=w,o=wx"
block|,
literal|"754"
block|}
block|,
block|{
literal|"u=,g=w,o=w"
block|,
literal|"755"
block|}
block|,
block|{
literal|"u=,g=w,o=x"
block|,
literal|"756"
block|}
block|,
block|{
literal|"u=,g=w,o="
block|,
literal|"757"
block|}
block|,
block|{
literal|"u=,g=x,o=rwx"
block|,
literal|"760"
block|}
block|,
block|{
literal|"u=,g=x,o=rw"
block|,
literal|"761"
block|}
block|,
block|{
literal|"u=,g=x,o=rx"
block|,
literal|"762"
block|}
block|,
block|{
literal|"u=,g=x,o=r"
block|,
literal|"763"
block|}
block|,
block|{
literal|"u=,g=x,o=wx"
block|,
literal|"764"
block|}
block|,
block|{
literal|"u=,g=x,o=w"
block|,
literal|"765"
block|}
block|,
block|{
literal|"u=,g=x,o=x"
block|,
literal|"766"
block|}
block|,
block|{
literal|"u=,g=x,o="
block|,
literal|"767"
block|}
block|,
block|{
literal|"u=,g=,o=rwx"
block|,
literal|"770"
block|}
block|,
block|{
literal|"u=,g=,o=rw"
block|,
literal|"771"
block|}
block|,
block|{
literal|"u=,g=,o=rx"
block|,
literal|"772"
block|}
block|,
block|{
literal|"u=,g=,o=r"
block|,
literal|"773"
block|}
block|,
block|{
literal|"u=,g=,o=wx"
block|,
literal|"774"
block|}
block|,
block|{
literal|"u=,g=,o=w"
block|,
literal|"775"
block|}
block|,
block|{
literal|"u=,g=,o=x"
block|,
literal|"776"
block|}
block|,
block|{
literal|"u=,g=,o="
block|,
literal|"777"
block|}
block|}
decl_stmt|;
block|}
end_class

end_unit

