begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/** Testing {@link LightWeightResizableGSet} */
end_comment

begin_class
DECL|class|TestLightWeightResizableGSet
specifier|public
class|class
name|TestLightWeightResizableGSet
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestLightWeightResizableGSet
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|random
specifier|private
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|method|generateElements (int length)
specifier|private
name|TestElement
index|[]
name|generateElements
parameter_list|(
name|int
name|length
parameter_list|)
block|{
name|TestElement
index|[]
name|elements
init|=
operator|new
name|TestElement
index|[
name|length
index|]
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|keys
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|long
name|k
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
while|while
condition|(
name|keys
operator|.
name|contains
argument_list|(
name|k
operator|=
name|random
operator|.
name|nextLong
argument_list|()
argument_list|)
condition|)
empty_stmt|;
name|elements
index|[
name|i
index|]
operator|=
operator|new
name|TestElement
argument_list|(
name|k
argument_list|,
name|random
operator|.
name|nextLong
argument_list|()
argument_list|)
expr_stmt|;
name|keys
operator|.
name|add
argument_list|(
name|k
argument_list|)
expr_stmt|;
block|}
return|return
name|elements
return|;
block|}
DECL|method|getKeys (TestElement[] elements)
specifier|private
name|TestKey
index|[]
name|getKeys
parameter_list|(
name|TestElement
index|[]
name|elements
parameter_list|)
block|{
name|TestKey
index|[]
name|keys
init|=
operator|new
name|TestKey
index|[
name|elements
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elements
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|keys
index|[
name|i
index|]
operator|=
operator|new
name|TestKey
argument_list|(
name|elements
index|[
name|i
index|]
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|keys
return|;
block|}
DECL|method|generateElements (TestKey[] keys)
specifier|private
name|TestElement
index|[]
name|generateElements
parameter_list|(
name|TestKey
index|[]
name|keys
parameter_list|)
block|{
name|TestElement
index|[]
name|elements
init|=
operator|new
name|TestElement
index|[
name|keys
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|elements
index|[
name|i
index|]
operator|=
operator|new
name|TestElement
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|,
name|random
operator|.
name|nextLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|elements
return|;
block|}
DECL|class|TestKey
specifier|private
specifier|static
class|class
name|TestKey
block|{
DECL|field|key
specifier|private
specifier|final
name|long
name|key
decl_stmt|;
DECL|method|TestKey (long key)
name|TestKey
parameter_list|(
name|long
name|key
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
block|}
DECL|method|TestKey (TestKey other)
name|TestKey
parameter_list|(
name|TestKey
name|other
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|other
operator|.
name|key
expr_stmt|;
block|}
DECL|method|getKey ()
name|long
name|getKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
call|(
name|int
call|)
argument_list|(
name|key
operator|^
operator|(
name|key
operator|>>>
literal|32
operator|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|TestKey
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|TestKey
name|other
init|=
operator|(
name|TestKey
operator|)
name|o
decl_stmt|;
return|return
name|key
operator|==
name|other
operator|.
name|key
return|;
block|}
block|}
DECL|class|TestElement
specifier|private
specifier|static
class|class
name|TestElement
extends|extends
name|TestKey
implements|implements
name|LightWeightResizableGSet
operator|.
name|LinkedElement
block|{
DECL|field|data
specifier|private
specifier|final
name|long
name|data
decl_stmt|;
DECL|field|next
specifier|private
name|LightWeightResizableGSet
operator|.
name|LinkedElement
name|next
decl_stmt|;
DECL|method|TestElement (long key, long data)
name|TestElement
parameter_list|(
name|long
name|key
parameter_list|,
name|long
name|data
parameter_list|)
block|{
name|super
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|this
operator|.
name|data
operator|=
name|data
expr_stmt|;
block|}
DECL|method|TestElement (TestKey key, long data)
name|TestElement
parameter_list|(
name|TestKey
name|key
parameter_list|,
name|long
name|data
parameter_list|)
block|{
name|super
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|this
operator|.
name|data
operator|=
name|data
expr_stmt|;
block|}
DECL|method|getData ()
name|long
name|getData
parameter_list|()
block|{
return|return
name|data
return|;
block|}
annotation|@
name|Override
DECL|method|setNext (LightWeightResizableGSet.LinkedElement next)
specifier|public
name|void
name|setNext
parameter_list|(
name|LightWeightResizableGSet
operator|.
name|LinkedElement
name|next
parameter_list|)
block|{
name|this
operator|.
name|next
operator|=
name|next
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getNext ()
specifier|public
name|LightWeightResizableGSet
operator|.
name|LinkedElement
name|getNext
parameter_list|()
block|{
return|return
name|next
return|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testBasicOperations ()
specifier|public
name|void
name|testBasicOperations
parameter_list|()
block|{
name|TestElement
index|[]
name|elements
init|=
name|generateElements
argument_list|(
literal|1
operator|<<
literal|16
argument_list|)
decl_stmt|;
specifier|final
name|LightWeightResizableGSet
argument_list|<
name|TestKey
argument_list|,
name|TestElement
argument_list|>
name|set
init|=
operator|new
name|LightWeightResizableGSet
argument_list|<
name|TestKey
argument_list|,
name|TestElement
argument_list|>
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|set
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// put all elements
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elements
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|TestElement
name|element
init|=
name|set
operator|.
name|put
argument_list|(
name|elements
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|element
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// check the set size
name|assertEquals
argument_list|(
name|set
operator|.
name|size
argument_list|()
argument_list|,
name|elements
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// check all elements exist in the set and the data is correct
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elements
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|set
operator|.
name|contains
argument_list|(
name|elements
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|TestElement
name|element
init|=
name|set
operator|.
name|get
argument_list|(
name|elements
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|elements
index|[
name|i
index|]
operator|.
name|getData
argument_list|()
argument_list|,
name|element
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|TestKey
index|[]
name|keys
init|=
name|getKeys
argument_list|(
name|elements
argument_list|)
decl_stmt|;
comment|// generate new elements with same key, but new data
name|TestElement
index|[]
name|newElements
init|=
name|generateElements
argument_list|(
name|keys
argument_list|)
decl_stmt|;
comment|// update the set
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|newElements
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|TestElement
name|element
init|=
name|set
operator|.
name|put
argument_list|(
name|newElements
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|element
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// check the set size
name|assertEquals
argument_list|(
name|set
operator|.
name|size
argument_list|()
argument_list|,
name|elements
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// check all elements exist in the set and the data is updated to new value
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|set
operator|.
name|contains
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|TestElement
name|element
init|=
name|set
operator|.
name|get
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|newElements
index|[
name|i
index|]
operator|.
name|getData
argument_list|()
argument_list|,
name|element
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// test LightWeightHashGSet#values
name|Collection
argument_list|<
name|TestElement
argument_list|>
name|cElements
init|=
name|set
operator|.
name|values
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|cElements
operator|.
name|size
argument_list|()
argument_list|,
name|elements
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|TestElement
name|element
range|:
name|cElements
control|)
block|{
name|assertTrue
argument_list|(
name|set
operator|.
name|contains
argument_list|(
name|element
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// remove elements
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|TestElement
name|element
init|=
name|set
operator|.
name|remove
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|element
operator|!=
literal|null
argument_list|)
expr_stmt|;
comment|// the element should not exist after remove
name|assertFalse
argument_list|(
name|set
operator|.
name|contains
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// check the set size
name|assertEquals
argument_list|(
name|set
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testRemoveAll ()
specifier|public
name|void
name|testRemoveAll
parameter_list|()
block|{
name|TestElement
index|[]
name|elements
init|=
name|generateElements
argument_list|(
literal|1
operator|<<
literal|16
argument_list|)
decl_stmt|;
specifier|final
name|LightWeightResizableGSet
argument_list|<
name|TestKey
argument_list|,
name|TestElement
argument_list|>
name|set
init|=
operator|new
name|LightWeightResizableGSet
argument_list|<
name|TestKey
argument_list|,
name|TestElement
argument_list|>
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|set
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// put all elements
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elements
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|TestElement
name|element
init|=
name|set
operator|.
name|put
argument_list|(
name|elements
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|element
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// check the set size
name|assertEquals
argument_list|(
name|set
operator|.
name|size
argument_list|()
argument_list|,
name|elements
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// remove all through clear
block|{
name|set
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|set
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// check all elements removed
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elements
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertFalse
argument_list|(
name|set
operator|.
name|contains
argument_list|(
name|elements
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|set
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// put all elements back
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elements
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|TestElement
name|element
init|=
name|set
operator|.
name|put
argument_list|(
name|elements
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|element
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// remove all through iterator
block|{
for|for
control|(
name|Iterator
argument_list|<
name|TestElement
argument_list|>
name|iter
init|=
name|set
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TestElement
name|element
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// element should be there before removing
name|assertTrue
argument_list|(
name|set
operator|.
name|contains
argument_list|(
name|element
argument_list|)
argument_list|)
expr_stmt|;
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
comment|// element should not be there now
name|assertFalse
argument_list|(
name|set
operator|.
name|contains
argument_list|(
name|element
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// the deleted elements should not be there
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elements
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertFalse
argument_list|(
name|set
operator|.
name|contains
argument_list|(
name|elements
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// iterator should not have next
name|assertFalse
argument_list|(
name|set
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
comment|// check the set size
name|assertEquals
argument_list|(
name|set
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

