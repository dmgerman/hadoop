begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.conf
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|*
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
operator|.
name|IntegerRanges
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|alias
operator|.
name|CredentialProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|alias
operator|.
name|CredentialProviderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|alias
operator|.
name|LocalJavaKeyStoreProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|PlatformName
operator|.
name|IBM_JAVA
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|AppenderSkeleton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|spi
operator|.
name|LoggingEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_class
DECL|class|TestConfiguration
specifier|public
class|class
name|TestConfiguration
block|{
DECL|field|DOUBLE_DELTA
specifier|private
specifier|static
specifier|final
name|double
name|DOUBLE_DELTA
init|=
literal|0.000000001f
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|CONFIG
specifier|final
specifier|static
name|String
name|CONFIG
init|=
operator|new
name|File
argument_list|(
literal|"./test-config-TestConfiguration.xml"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
DECL|field|CONFIG2
specifier|final
specifier|static
name|String
name|CONFIG2
init|=
operator|new
name|File
argument_list|(
literal|"./test-config2-TestConfiguration.xml"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
DECL|field|CONFIG_CORE
specifier|final
specifier|static
name|String
name|CONFIG_CORE
init|=
operator|new
name|File
argument_list|(
literal|"./core-site.xml"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
DECL|field|CONFIG_FOR_ENUM
specifier|final
specifier|static
name|String
name|CONFIG_FOR_ENUM
init|=
operator|new
name|File
argument_list|(
literal|"./test-config-enum-TestConfiguration.xml"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
DECL|field|CONFIG_FOR_URI
specifier|final
specifier|static
name|String
name|CONFIG_FOR_URI
init|=
literal|"file://"
operator|+
operator|new
name|File
argument_list|(
literal|"./test-config-uri-TestConfiguration.xml"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
DECL|field|CONFIG_MULTI_BYTE
specifier|private
specifier|static
specifier|final
name|String
name|CONFIG_MULTI_BYTE
init|=
operator|new
name|File
argument_list|(
literal|"./test-config-multi-byte-TestConfiguration.xml"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
DECL|field|CONFIG_MULTI_BYTE_SAVED
specifier|private
specifier|static
specifier|final
name|String
name|CONFIG_MULTI_BYTE_SAVED
init|=
operator|new
name|File
argument_list|(
literal|"./test-config-multi-byte-saved-TestConfiguration.xml"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
DECL|field|RAN
specifier|final
specifier|static
name|Random
name|RAN
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|field|XMLHEADER
specifier|final
specifier|static
name|String
name|XMLHEADER
init|=
name|IBM_JAVA
condition|?
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?><configuration>"
else|:
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?><configuration>"
decl_stmt|;
comment|/** Four apostrophes. */
DECL|field|ESCAPED
specifier|public
specifier|static
specifier|final
name|String
name|ESCAPED
init|=
literal|"&apos;&#39;&#0039;&#x27;"
decl_stmt|;
DECL|field|SENSITIVE_CONFIG_KEYS
specifier|private
specifier|static
specifier|final
name|String
name|SENSITIVE_CONFIG_KEYS
init|=
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_SENSITIVE_CONFIG_KEYS
decl_stmt|;
DECL|field|out
specifier|private
name|BufferedWriter
name|out
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
operator|new
name|File
argument_list|(
name|CONFIG
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
operator|new
name|File
argument_list|(
name|CONFIG2
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
operator|new
name|File
argument_list|(
name|CONFIG_FOR_ENUM
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
operator|new
name|File
argument_list|(
operator|new
name|URI
argument_list|(
name|CONFIG_FOR_URI
argument_list|)
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
operator|new
name|File
argument_list|(
name|CONFIG_MULTI_BYTE
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
operator|new
name|File
argument_list|(
name|CONFIG_MULTI_BYTE_SAVED
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
operator|new
name|File
argument_list|(
name|CONFIG_CORE
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
DECL|method|startConfig ()
specifier|private
name|void
name|startConfig
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
literal|"<?xml version=\"1.0\"?>\n"
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"<configuration>\n"
argument_list|)
expr_stmt|;
block|}
DECL|method|writeHeader ()
specifier|private
name|void
name|writeHeader
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
literal|"<?xml version=\"1.0\"?>\n"
argument_list|)
expr_stmt|;
block|}
DECL|method|writeHeader (String encoding)
specifier|private
name|void
name|writeHeader
parameter_list|(
name|String
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
literal|"<?xml version=\"1.0\" encoding=\""
operator|+
name|encoding
operator|+
literal|"\"?>\n"
argument_list|)
expr_stmt|;
block|}
DECL|method|writeConfiguration ()
specifier|private
name|void
name|writeConfiguration
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
literal|"<configuration>\n"
argument_list|)
expr_stmt|;
block|}
DECL|method|endConfig ()
specifier|private
name|void
name|endConfig
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
literal|"</configuration>\n"
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|startInclude (String filename)
specifier|private
name|void
name|startInclude
parameter_list|(
name|String
name|filename
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
literal|"<xi:include href=\""
operator|+
name|filename
operator|+
literal|"\" xmlns:xi=\"http://www.w3.org/2001/XInclude\">\n "
argument_list|)
expr_stmt|;
block|}
DECL|method|endInclude ()
specifier|private
name|void
name|endInclude
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
literal|"</xi:include>\n "
argument_list|)
expr_stmt|;
block|}
DECL|method|startFallback ()
specifier|private
name|void
name|startFallback
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
literal|"<xi:fallback>\n "
argument_list|)
expr_stmt|;
block|}
DECL|method|endFallback ()
specifier|private
name|void
name|endFallback
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
literal|"</xi:fallback>\n "
argument_list|)
expr_stmt|;
block|}
DECL|method|declareEntity (String root, String entity, String value)
specifier|private
name|void
name|declareEntity
parameter_list|(
name|String
name|root
parameter_list|,
name|String
name|entity
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
literal|"<!DOCTYPE "
operator|+
name|root
operator|+
literal|" [\n<!ENTITY "
operator|+
name|entity
operator|+
literal|" \""
operator|+
name|value
operator|+
literal|"\">\n]>"
argument_list|)
expr_stmt|;
block|}
DECL|method|declareSystemEntity (String root, String entity, String value)
specifier|private
name|void
name|declareSystemEntity
parameter_list|(
name|String
name|root
parameter_list|,
name|String
name|entity
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
literal|"<!DOCTYPE "
operator|+
name|root
operator|+
literal|" [\n<!ENTITY "
operator|+
name|entity
operator|+
literal|" SYSTEM \""
operator|+
name|value
operator|+
literal|"\">\n]>"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInputStreamResource ()
specifier|public
name|void
name|testInputStreamResource
parameter_list|()
throws|throws
name|Exception
block|{
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|declareProperty
argument_list|(
literal|"prop"
argument_list|,
literal|"A"
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|InputStream
name|in1
init|=
name|Mockito
operator|.
name|spy
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|writer
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
name|in1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"A"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"prop"
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|in1
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|InputStream
name|in2
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|writer
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
name|in2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"A"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"prop"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFinalWarnings ()
specifier|public
name|void
name|testFinalWarnings
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Make a configuration file with a final property
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|declareProperty
argument_list|(
literal|"prop"
argument_list|,
literal|"A"
argument_list|,
literal|"A"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
name|writer
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|InputStream
name|in1
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
comment|// Make a second config file with a final property with a different value
name|writer
operator|=
operator|new
name|StringWriter
argument_list|()
expr_stmt|;
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|declareProperty
argument_list|(
literal|"prop"
argument_list|,
literal|"BB"
argument_list|,
literal|"BB"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|byte
index|[]
name|bytes2
init|=
name|writer
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|InputStream
name|in2
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes2
argument_list|)
decl_stmt|;
comment|// Attach our own log appender so we can verify output
name|TestAppender
name|appender
init|=
operator|new
name|TestAppender
argument_list|()
decl_stmt|;
specifier|final
name|Logger
name|logger
init|=
name|Logger
operator|.
name|getRootLogger
argument_list|()
decl_stmt|;
name|logger
operator|.
name|addAppender
argument_list|(
name|appender
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Add the 2 different resources - this should generate a warning
name|conf
operator|.
name|addResource
argument_list|(
name|in1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
name|in2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"should see the first value"
argument_list|,
literal|"A"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"prop"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|LoggingEvent
argument_list|>
name|events
init|=
name|appender
operator|.
name|getLog
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"overriding a final parameter should cause logging"
argument_list|,
literal|1
argument_list|,
name|events
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|LoggingEvent
name|loggingEvent
init|=
name|events
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|renderedMessage
init|=
name|loggingEvent
operator|.
name|getRenderedMessage
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"did not see expected string inside message "
operator|+
name|renderedMessage
argument_list|,
name|renderedMessage
operator|.
name|contains
argument_list|(
literal|"an attempt to override final parameter: "
operator|+
literal|"prop;  Ignoring."
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// Make sure the appender is removed
name|logger
operator|.
name|removeAppender
argument_list|(
name|appender
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testNoFinalWarnings ()
specifier|public
name|void
name|testNoFinalWarnings
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Make a configuration file with a final property
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|declareProperty
argument_list|(
literal|"prop"
argument_list|,
literal|"A"
argument_list|,
literal|"A"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
name|writer
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|()
decl_stmt|;
comment|// The 2 input streams both have the same config file
name|InputStream
name|in1
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|InputStream
name|in2
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
comment|// Attach our own log appender so we can verify output
name|TestAppender
name|appender
init|=
operator|new
name|TestAppender
argument_list|()
decl_stmt|;
specifier|final
name|Logger
name|logger
init|=
name|Logger
operator|.
name|getRootLogger
argument_list|()
decl_stmt|;
name|logger
operator|.
name|addAppender
argument_list|(
name|appender
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Add the resource twice from a stream - should not generate warnings
name|conf
operator|.
name|addResource
argument_list|(
name|in1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
name|in2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"A"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"prop"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|LoggingEvent
argument_list|>
name|events
init|=
name|appender
operator|.
name|getLog
argument_list|()
decl_stmt|;
for|for
control|(
name|LoggingEvent
name|loggingEvent
range|:
name|events
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Event = "
operator|+
name|loggingEvent
operator|.
name|getRenderedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"adding same resource twice should not cause logging"
argument_list|,
name|events
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// Make sure the appender is removed
name|logger
operator|.
name|removeAppender
argument_list|(
name|appender
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testFinalWarningsMultiple ()
specifier|public
name|void
name|testFinalWarningsMultiple
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Make a configuration file with a repeated final property
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|declareProperty
argument_list|(
literal|"prop"
argument_list|,
literal|"A"
argument_list|,
literal|"A"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|declareProperty
argument_list|(
literal|"prop"
argument_list|,
literal|"A"
argument_list|,
literal|"A"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
name|writer
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|InputStream
name|in1
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
comment|// Attach our own log appender so we can verify output
name|TestAppender
name|appender
init|=
operator|new
name|TestAppender
argument_list|()
decl_stmt|;
specifier|final
name|Logger
name|logger
init|=
name|Logger
operator|.
name|getRootLogger
argument_list|()
decl_stmt|;
name|logger
operator|.
name|addAppender
argument_list|(
name|appender
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Add the resource - this should not produce a warning
name|conf
operator|.
name|addResource
argument_list|(
name|in1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"should see the value"
argument_list|,
literal|"A"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"prop"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|LoggingEvent
argument_list|>
name|events
init|=
name|appender
operator|.
name|getLog
argument_list|()
decl_stmt|;
for|for
control|(
name|LoggingEvent
name|loggingEvent
range|:
name|events
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Event = "
operator|+
name|loggingEvent
operator|.
name|getRenderedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"adding same resource twice should not cause logging"
argument_list|,
name|events
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// Make sure the appender is removed
name|logger
operator|.
name|removeAppender
argument_list|(
name|appender
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testFinalWarningsMultipleOverride ()
specifier|public
name|void
name|testFinalWarningsMultipleOverride
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Make a configuration file with 2 final properties with different values
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|declareProperty
argument_list|(
literal|"prop"
argument_list|,
literal|"A"
argument_list|,
literal|"A"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|declareProperty
argument_list|(
literal|"prop"
argument_list|,
literal|"BB"
argument_list|,
literal|"BB"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
name|writer
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|InputStream
name|in1
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
comment|// Attach our own log appender so we can verify output
name|TestAppender
name|appender
init|=
operator|new
name|TestAppender
argument_list|()
decl_stmt|;
specifier|final
name|Logger
name|logger
init|=
name|Logger
operator|.
name|getRootLogger
argument_list|()
decl_stmt|;
name|logger
operator|.
name|addAppender
argument_list|(
name|appender
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Add the resource - this should produce a warning
name|conf
operator|.
name|addResource
argument_list|(
name|in1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"should see the value"
argument_list|,
literal|"A"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"prop"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|LoggingEvent
argument_list|>
name|events
init|=
name|appender
operator|.
name|getLog
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"overriding a final parameter should cause logging"
argument_list|,
literal|1
argument_list|,
name|events
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|LoggingEvent
name|loggingEvent
init|=
name|events
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|renderedMessage
init|=
name|loggingEvent
operator|.
name|getRenderedMessage
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"did not see expected string inside message "
operator|+
name|renderedMessage
argument_list|,
name|renderedMessage
operator|.
name|contains
argument_list|(
literal|"an attempt to override final parameter: "
operator|+
literal|"prop;  Ignoring."
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// Make sure the appender is removed
name|logger
operator|.
name|removeAppender
argument_list|(
name|appender
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * A simple appender for white box testing.    */
DECL|class|TestAppender
specifier|private
specifier|static
class|class
name|TestAppender
extends|extends
name|AppenderSkeleton
block|{
DECL|field|log
specifier|private
specifier|final
name|List
argument_list|<
name|LoggingEvent
argument_list|>
name|log
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|requiresLayout ()
annotation|@
name|Override
specifier|public
name|boolean
name|requiresLayout
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|append (final LoggingEvent loggingEvent)
annotation|@
name|Override
specifier|protected
name|void
name|append
parameter_list|(
specifier|final
name|LoggingEvent
name|loggingEvent
parameter_list|)
block|{
name|log
operator|.
name|add
argument_list|(
name|loggingEvent
argument_list|)
expr_stmt|;
block|}
DECL|method|close ()
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{     }
DECL|method|getLog ()
specifier|public
name|List
argument_list|<
name|LoggingEvent
argument_list|>
name|getLog
parameter_list|()
block|{
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|log
argument_list|)
return|;
block|}
block|}
comment|/**    * Tests use of multi-byte characters in property names and values.  This test    * round-trips multi-byte string literals through saving and loading of config    * and asserts that the same values were read.    */
annotation|@
name|Test
DECL|method|testMultiByteCharacters ()
specifier|public
name|void
name|testMultiByteCharacters
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|priorDefaultEncoding
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"file.encoding"
argument_list|)
decl_stmt|;
try|try
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"file.encoding"
argument_list|,
literal|"US-ASCII"
argument_list|)
expr_stmt|;
name|String
name|name
init|=
literal|"multi_byte_\u611b_name"
decl_stmt|;
name|String
name|value
init|=
literal|"multi_byte_\u0641_value"
decl_stmt|;
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|CONFIG_MULTI_BYTE
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|declareProperty
argument_list|(
name|name
argument_list|,
name|value
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
operator|new
name|Path
argument_list|(
name|CONFIG_MULTI_BYTE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|FileOutputStream
name|fos
init|=
operator|new
name|FileOutputStream
argument_list|(
name|CONFIG_MULTI_BYTE_SAVED
argument_list|)
decl_stmt|;
try|try
block|{
name|conf
operator|.
name|writeXml
argument_list|(
name|fos
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|fos
argument_list|)
expr_stmt|;
block|}
name|conf
operator|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
operator|new
name|Path
argument_list|(
name|CONFIG_MULTI_BYTE_SAVED
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"file.encoding"
argument_list|,
name|priorDefaultEncoding
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testVariableSubstitution ()
specifier|public
name|void
name|testVariableSubstitution
parameter_list|()
throws|throws
name|IOException
block|{
comment|// stubbing only environment dependent functions
name|Configuration
name|mock
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mock
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"hadoop_user"
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mock
operator|.
name|getenv
argument_list|(
literal|"FILE_NAME"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"hello"
argument_list|)
expr_stmt|;
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|CONFIG
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|declareProperty
argument_list|(
literal|"my.int"
argument_list|,
literal|"${intvar}"
argument_list|,
literal|"42"
argument_list|)
expr_stmt|;
name|declareProperty
argument_list|(
literal|"intvar"
argument_list|,
literal|"42"
argument_list|,
literal|"42"
argument_list|)
expr_stmt|;
name|declareProperty
argument_list|(
literal|"my.base"
argument_list|,
literal|"/tmp/${user.name}"
argument_list|,
literal|"/tmp/hadoop_user"
argument_list|)
expr_stmt|;
name|declareProperty
argument_list|(
literal|"my.file"
argument_list|,
literal|"${env.FILE_NAME}"
argument_list|,
literal|"hello"
argument_list|)
expr_stmt|;
name|declareProperty
argument_list|(
literal|"my.suffix"
argument_list|,
literal|".txt"
argument_list|,
literal|".txt"
argument_list|)
expr_stmt|;
name|declareProperty
argument_list|(
literal|"my.relfile"
argument_list|,
literal|"${my.file}${my.suffix}"
argument_list|,
literal|"hello.txt"
argument_list|)
expr_stmt|;
name|declareProperty
argument_list|(
literal|"my.fullfile"
argument_list|,
literal|"${my.base}/${my.file}${my.suffix}"
argument_list|,
literal|"/tmp/hadoop_user/hello.txt"
argument_list|)
expr_stmt|;
comment|// check that undefined variables are returned as-is
name|declareProperty
argument_list|(
literal|"my.failsexpand"
argument_list|,
literal|"a${my.undefvar}b"
argument_list|,
literal|"a${my.undefvar}b"
argument_list|)
expr_stmt|;
comment|// check that multiple variable references are resolved
name|declareProperty
argument_list|(
literal|"my.user.group"
argument_list|,
literal|"${user.name} ${user.name}"
argument_list|,
literal|"hadoop_user hadoop_user"
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|Path
name|fileResource
init|=
operator|new
name|Path
argument_list|(
name|CONFIG
argument_list|)
decl_stmt|;
name|mock
operator|.
name|addResource
argument_list|(
name|fileResource
argument_list|)
expr_stmt|;
for|for
control|(
name|Prop
name|p
range|:
name|props
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"p="
operator|+
name|p
operator|.
name|name
argument_list|)
expr_stmt|;
name|String
name|gotVal
init|=
name|mock
operator|.
name|get
argument_list|(
name|p
operator|.
name|name
argument_list|)
decl_stmt|;
name|String
name|gotRawVal
init|=
name|mock
operator|.
name|getRaw
argument_list|(
name|p
operator|.
name|name
argument_list|)
decl_stmt|;
name|assertEq
argument_list|(
name|p
operator|.
name|val
argument_list|,
name|gotRawVal
argument_list|)
expr_stmt|;
name|assertEq
argument_list|(
name|p
operator|.
name|expectEval
argument_list|,
name|gotVal
argument_list|)
expr_stmt|;
block|}
comment|// check that expansion also occurs for getInt()
name|assertTrue
argument_list|(
name|mock
operator|.
name|getInt
argument_list|(
literal|"intvar"
argument_list|,
operator|-
literal|1
argument_list|)
operator|==
literal|42
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mock
operator|.
name|getInt
argument_list|(
literal|"my.int"
argument_list|,
operator|-
literal|1
argument_list|)
operator|==
literal|42
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEnvDefault ()
specifier|public
name|void
name|testEnvDefault
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|mock
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mock
operator|.
name|getenv
argument_list|(
literal|"NULL_VALUE"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mock
operator|.
name|getenv
argument_list|(
literal|"EMPTY_VALUE"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mock
operator|.
name|getenv
argument_list|(
literal|"SOME_VALUE"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"some value"
argument_list|)
expr_stmt|;
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|CONFIG
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
comment|// if var is unbound, literal ${var} is returned
name|declareProperty
argument_list|(
literal|"null1"
argument_list|,
literal|"${env.NULL_VALUE}"
argument_list|,
literal|"${env.NULL_VALUE}"
argument_list|)
expr_stmt|;
name|declareProperty
argument_list|(
literal|"null2"
argument_list|,
literal|"${env.NULL_VALUE-a}"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|declareProperty
argument_list|(
literal|"null3"
argument_list|,
literal|"${env.NULL_VALUE:-b}"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|declareProperty
argument_list|(
literal|"empty1"
argument_list|,
literal|"${env.EMPTY_VALUE}"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|declareProperty
argument_list|(
literal|"empty2"
argument_list|,
literal|"${env.EMPTY_VALUE-c}"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|declareProperty
argument_list|(
literal|"empty3"
argument_list|,
literal|"${env.EMPTY_VALUE:-d}"
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
name|declareProperty
argument_list|(
literal|"some1"
argument_list|,
literal|"${env.SOME_VALUE}"
argument_list|,
literal|"some value"
argument_list|)
expr_stmt|;
name|declareProperty
argument_list|(
literal|"some2"
argument_list|,
literal|"${env.SOME_VALUE-e}"
argument_list|,
literal|"some value"
argument_list|)
expr_stmt|;
name|declareProperty
argument_list|(
literal|"some3"
argument_list|,
literal|"${env.SOME_VALUE:-f}"
argument_list|,
literal|"some value"
argument_list|)
expr_stmt|;
comment|// some edge cases
name|declareProperty
argument_list|(
literal|"edge1"
argument_list|,
literal|"${env.NULL_VALUE-g-h}"
argument_list|,
literal|"g-h"
argument_list|)
expr_stmt|;
name|declareProperty
argument_list|(
literal|"edge2"
argument_list|,
literal|"${env.NULL_VALUE:-i:-j}"
argument_list|,
literal|"i:-j"
argument_list|)
expr_stmt|;
name|declareProperty
argument_list|(
literal|"edge3"
argument_list|,
literal|"${env.NULL_VALUE-}"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|declareProperty
argument_list|(
literal|"edge4"
argument_list|,
literal|"${env.NULL_VALUE:-}"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|declareProperty
argument_list|(
literal|"edge5"
argument_list|,
literal|"${env.NULL_VALUE:}"
argument_list|,
literal|"${env.NULL_VALUE:}"
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|Path
name|fileResource
init|=
operator|new
name|Path
argument_list|(
name|CONFIG
argument_list|)
decl_stmt|;
name|mock
operator|.
name|addResource
argument_list|(
name|fileResource
argument_list|)
expr_stmt|;
for|for
control|(
name|Prop
name|p
range|:
name|props
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"p="
operator|+
name|p
operator|.
name|name
argument_list|)
expr_stmt|;
name|String
name|gotVal
init|=
name|mock
operator|.
name|get
argument_list|(
name|p
operator|.
name|name
argument_list|)
decl_stmt|;
name|String
name|gotRawVal
init|=
name|mock
operator|.
name|getRaw
argument_list|(
name|p
operator|.
name|name
argument_list|)
decl_stmt|;
name|assertEq
argument_list|(
name|p
operator|.
name|val
argument_list|,
name|gotRawVal
argument_list|)
expr_stmt|;
name|assertEq
argument_list|(
name|p
operator|.
name|expectEval
argument_list|,
name|gotVal
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testFinalParam ()
specifier|public
name|void
name|testFinalParam
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|CONFIG
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|declareProperty
argument_list|(
literal|"my.var"
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|Path
name|fileResource
init|=
operator|new
name|Path
argument_list|(
name|CONFIG
argument_list|)
decl_stmt|;
name|Configuration
name|conf1
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf1
operator|.
name|addResource
argument_list|(
name|fileResource
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"my var is not null"
argument_list|,
name|conf1
operator|.
name|get
argument_list|(
literal|"my.var"
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|CONFIG2
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|declareProperty
argument_list|(
literal|"my.var"
argument_list|,
literal|"myval"
argument_list|,
literal|"myval"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|fileResource
operator|=
operator|new
name|Path
argument_list|(
name|CONFIG2
argument_list|)
expr_stmt|;
name|Configuration
name|conf2
init|=
operator|new
name|Configuration
argument_list|(
name|conf1
argument_list|)
decl_stmt|;
name|conf2
operator|.
name|addResource
argument_list|(
name|fileResource
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"my var is not final"
argument_list|,
name|conf2
operator|.
name|get
argument_list|(
literal|"my.var"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCompactFormat ()
specifier|public
name|void
name|testCompactFormat
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|CONFIG
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|appendCompactFormatProperty
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|appendCompactFormatProperty
argument_list|(
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|appendCompactFormatProperty
argument_list|(
literal|"e"
argument_list|,
literal|"f"
argument_list|,
literal|false
argument_list|,
literal|"g"
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|Path
name|fileResource
init|=
operator|new
name|Path
argument_list|(
name|CONFIG
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
name|fileResource
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"d"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|s
init|=
name|conf
operator|.
name|getFinalParameters
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|s
operator|.
name|contains
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"f"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"e"
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|sources
init|=
name|conf
operator|.
name|getPropertySources
argument_list|(
literal|"e"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|sources
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"g"
argument_list|,
name|sources
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fileResource
operator|.
name|toString
argument_list|()
argument_list|,
name|sources
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|assertEq (Object a, Object b)
specifier|public
specifier|static
name|void
name|assertEq
parameter_list|(
name|Object
name|a
parameter_list|,
name|Object
name|b
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"assertEq: "
operator|+
name|a
operator|+
literal|", "
operator|+
name|b
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
DECL|class|Prop
specifier|static
class|class
name|Prop
block|{
DECL|field|name
name|String
name|name
decl_stmt|;
DECL|field|val
name|String
name|val
decl_stmt|;
DECL|field|expectEval
name|String
name|expectEval
decl_stmt|;
block|}
DECL|field|props
name|ArrayList
argument_list|<
name|Prop
argument_list|>
name|props
init|=
operator|new
name|ArrayList
argument_list|<
name|Prop
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|declareProperty (String name, String val, String expectEval)
name|void
name|declareProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|val
parameter_list|,
name|String
name|expectEval
parameter_list|)
throws|throws
name|IOException
block|{
name|declareProperty
argument_list|(
name|name
argument_list|,
name|val
argument_list|,
name|expectEval
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|declareProperty (String name, String val, String expectEval, boolean isFinal)
name|void
name|declareProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|val
parameter_list|,
name|String
name|expectEval
parameter_list|,
name|boolean
name|isFinal
parameter_list|)
throws|throws
name|IOException
block|{
name|appendProperty
argument_list|(
name|name
argument_list|,
name|val
argument_list|,
name|isFinal
argument_list|)
expr_stmt|;
name|Prop
name|p
init|=
operator|new
name|Prop
argument_list|()
decl_stmt|;
name|p
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|p
operator|.
name|val
operator|=
name|val
expr_stmt|;
name|p
operator|.
name|expectEval
operator|=
name|expectEval
expr_stmt|;
name|props
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
DECL|method|appendProperty (String name, String val)
name|void
name|appendProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|appendProperty
argument_list|(
name|name
argument_list|,
name|val
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|appendProperty (String name, String val, boolean isFinal, String ... sources)
name|void
name|appendProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|val
parameter_list|,
name|boolean
name|isFinal
parameter_list|,
name|String
modifier|...
name|sources
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
literal|"<property>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"<name>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"</name>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"<value>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"</value>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|isFinal
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
literal|"<final>true</final>"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|s
range|:
name|sources
control|)
block|{
name|out
operator|.
name|write
argument_list|(
literal|"<source>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"</source>"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|write
argument_list|(
literal|"</property>\n"
argument_list|)
expr_stmt|;
block|}
DECL|method|appendPropertyByTag (String name, String val, String tags, String... sources)
specifier|private
name|void
name|appendPropertyByTag
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|val
parameter_list|,
name|String
name|tags
parameter_list|,
name|String
modifier|...
name|sources
parameter_list|)
throws|throws
name|IOException
block|{
name|appendPropertyByTag
argument_list|(
name|name
argument_list|,
name|val
argument_list|,
literal|false
argument_list|,
name|tags
argument_list|,
name|sources
argument_list|)
expr_stmt|;
block|}
DECL|method|appendPropertyByTag (String name, String val, boolean isFinal, String tag, String... sources)
specifier|private
name|void
name|appendPropertyByTag
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|val
parameter_list|,
name|boolean
name|isFinal
parameter_list|,
name|String
name|tag
parameter_list|,
name|String
modifier|...
name|sources
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
literal|"<property>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"<name>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"</name>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"<value>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"</value>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|isFinal
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
literal|"<final>true</final>"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|s
range|:
name|sources
control|)
block|{
name|out
operator|.
name|write
argument_list|(
literal|"<source>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"</source>"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|write
argument_list|(
literal|"<tag>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|tag
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"</tag>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"</property>\n"
argument_list|)
expr_stmt|;
block|}
DECL|method|appendCompactFormatProperty (String name, String val)
name|void
name|appendCompactFormatProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|appendCompactFormatProperty
argument_list|(
name|name
argument_list|,
name|val
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|appendCompactFormatProperty (String name, String val, boolean isFinal)
name|void
name|appendCompactFormatProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|val
parameter_list|,
name|boolean
name|isFinal
parameter_list|)
throws|throws
name|IOException
block|{
name|appendCompactFormatProperty
argument_list|(
name|name
argument_list|,
name|val
argument_list|,
name|isFinal
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|appendCompactFormatProperty (String name, String val, boolean isFinal, String source)
name|void
name|appendCompactFormatProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|val
parameter_list|,
name|boolean
name|isFinal
parameter_list|,
name|String
name|source
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
literal|"<property "
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"name=\""
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"\" "
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"value=\""
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"\" "
argument_list|)
expr_stmt|;
if|if
condition|(
name|isFinal
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
literal|"final=\"true\" "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|source
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
literal|"source=\""
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"\" "
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|write
argument_list|(
literal|"/>\n"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOverlay ()
specifier|public
name|void
name|testOverlay
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|CONFIG
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|appendProperty
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"b"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"d"
argument_list|,
literal|"e"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"e"
argument_list|,
literal|"f"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|CONFIG2
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|appendProperty
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"b"
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"e"
argument_list|,
literal|"e"
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|Path
name|fileResource
init|=
operator|new
name|Path
argument_list|(
name|CONFIG
argument_list|)
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
name|fileResource
argument_list|)
expr_stmt|;
comment|//set dynamically something
name|conf
operator|.
name|set
argument_list|(
literal|"c"
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"a"
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
name|Configuration
name|clone
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|clone
operator|.
name|addResource
argument_list|(
operator|new
name|Path
argument_list|(
name|CONFIG2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|clone
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|clone
operator|.
name|get
argument_list|(
literal|"b"
argument_list|)
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|clone
operator|.
name|get
argument_list|(
literal|"c"
argument_list|)
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|clone
operator|.
name|get
argument_list|(
literal|"d"
argument_list|)
argument_list|,
literal|"e"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|clone
operator|.
name|get
argument_list|(
literal|"e"
argument_list|)
argument_list|,
literal|"f"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCommentsInValue ()
specifier|public
name|void
name|testCommentsInValue
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|CONFIG
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|appendProperty
argument_list|(
literal|"my.comment"
argument_list|,
literal|"this<!--comment here--> contains a comment"
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|Path
name|fileResource
init|=
operator|new
name|Path
argument_list|(
name|CONFIG
argument_list|)
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
name|fileResource
argument_list|)
expr_stmt|;
comment|//two spaces one after "this", one before "contains"
name|assertEquals
argument_list|(
literal|"this  contains a comment"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"my.comment"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEscapedCharactersInValue ()
specifier|public
name|void
name|testEscapedCharactersInValue
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|CONFIG
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|appendProperty
argument_list|(
literal|"my.comment"
argument_list|,
name|ESCAPED
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|Path
name|fileResource
init|=
operator|new
name|Path
argument_list|(
name|CONFIG
argument_list|)
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
name|fileResource
argument_list|)
expr_stmt|;
comment|//two spaces one after "this", one before "contains"
name|assertEquals
argument_list|(
literal|"''''"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"my.comment"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTrim ()
specifier|public
name|void
name|testTrim
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|CONFIG
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|String
index|[]
name|whitespaces
init|=
block|{
literal|""
block|,
literal|" "
block|,
literal|"\n"
block|,
literal|"\t"
block|}
decl_stmt|;
name|String
index|[]
name|name
init|=
operator|new
name|String
index|[
literal|100
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|name
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|name
index|[
name|i
index|]
operator|=
literal|"foo"
operator|+
name|i
expr_stmt|;
name|StringBuilder
name|prefix
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|StringBuilder
name|postfix
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|3
condition|;
name|j
operator|++
control|)
block|{
name|prefix
operator|.
name|append
argument_list|(
name|whitespaces
index|[
name|RAN
operator|.
name|nextInt
argument_list|(
name|whitespaces
operator|.
name|length
argument_list|)
index|]
argument_list|)
expr_stmt|;
name|postfix
operator|.
name|append
argument_list|(
name|whitespaces
index|[
name|RAN
operator|.
name|nextInt
argument_list|(
name|whitespaces
operator|.
name|length
argument_list|)
index|]
argument_list|)
expr_stmt|;
block|}
name|appendProperty
argument_list|(
name|prefix
operator|+
name|name
index|[
name|i
index|]
operator|+
name|postfix
argument_list|,
name|name
index|[
name|i
index|]
operator|+
literal|".value"
argument_list|)
expr_stmt|;
block|}
name|endConfig
argument_list|()
expr_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
operator|new
name|Path
argument_list|(
name|CONFIG
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|n
range|:
name|name
control|)
block|{
name|assertEquals
argument_list|(
name|n
operator|+
literal|".value"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|n
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGetLocalPath ()
specifier|public
name|void
name|testGetLocalPath
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|String
index|[]
name|dirs
init|=
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|"c"
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dirs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|dirs
index|[
name|i
index|]
operator|=
operator|new
name|Path
argument_list|(
name|GenericTestUtils
operator|.
name|getTempPath
argument_list|(
name|dirs
index|[
name|i
index|]
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|conf
operator|.
name|set
argument_list|(
literal|"dirs"
argument_list|,
name|StringUtils
operator|.
name|join
argument_list|(
name|dirs
argument_list|,
literal|","
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|String
name|localPath
init|=
name|conf
operator|.
name|getLocalPath
argument_list|(
literal|"dirs"
argument_list|,
literal|"dir"
operator|+
name|i
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Path doesn't end in specified dir: "
operator|+
name|localPath
argument_list|,
name|localPath
operator|.
name|endsWith
argument_list|(
literal|"dir"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Path has internal whitespace: "
operator|+
name|localPath
argument_list|,
name|localPath
operator|.
name|contains
argument_list|(
literal|" "
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGetFile ()
specifier|public
name|void
name|testGetFile
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|String
index|[]
name|dirs
init|=
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|"c"
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dirs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|dirs
index|[
name|i
index|]
operator|=
operator|new
name|Path
argument_list|(
name|GenericTestUtils
operator|.
name|getTempPath
argument_list|(
name|dirs
index|[
name|i
index|]
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|conf
operator|.
name|set
argument_list|(
literal|"dirs"
argument_list|,
name|StringUtils
operator|.
name|join
argument_list|(
name|dirs
argument_list|,
literal|","
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|String
name|localPath
init|=
name|conf
operator|.
name|getFile
argument_list|(
literal|"dirs"
argument_list|,
literal|"dir"
operator|+
name|i
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Path doesn't end in specified dir: "
operator|+
name|localPath
argument_list|,
name|localPath
operator|.
name|endsWith
argument_list|(
literal|"dir"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Path has internal whitespace: "
operator|+
name|localPath
argument_list|,
name|localPath
operator|.
name|contains
argument_list|(
literal|" "
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testToString ()
specifier|public
name|void
name|testToString
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|CONFIG
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|Path
name|fileResource
init|=
operator|new
name|Path
argument_list|(
name|CONFIG
argument_list|)
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
name|fileResource
argument_list|)
expr_stmt|;
name|String
name|expectedOutput
init|=
literal|"Configuration: core-default.xml, core-site.xml, "
operator|+
name|fileResource
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedOutput
argument_list|,
name|conf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWriteXml ()
specifier|public
name|void
name|testWriteXml
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|conf
operator|.
name|writeXml
argument_list|(
name|baos
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|baos
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Result has proper header"
argument_list|,
name|result
operator|.
name|startsWith
argument_list|(
name|XMLHEADER
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Result has proper footer"
argument_list|,
name|result
operator|.
name|endsWith
argument_list|(
literal|"</configuration>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIncludes ()
specifier|public
name|void
name|testIncludes
parameter_list|()
throws|throws
name|Exception
block|{
name|tearDown
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"XXX testIncludes"
argument_list|)
expr_stmt|;
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|CONFIG2
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|appendProperty
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"c"
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|File
name|fileUri
init|=
operator|new
name|File
argument_list|(
operator|new
name|URI
argument_list|(
name|CONFIG_FOR_URI
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|fileUri
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|appendProperty
argument_list|(
literal|"e"
argument_list|,
literal|"f"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"g"
argument_list|,
literal|"h"
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|CONFIG
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|startInclude
argument_list|(
name|CONFIG2
argument_list|)
expr_stmt|;
name|endInclude
argument_list|()
expr_stmt|;
name|startInclude
argument_list|(
name|CONFIG_FOR_URI
argument_list|)
expr_stmt|;
name|endInclude
argument_list|()
expr_stmt|;
name|appendProperty
argument_list|(
literal|"i"
argument_list|,
literal|"j"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"k"
argument_list|,
literal|"l"
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
comment|// verify that the includes file contains all properties
name|Path
name|fileResource
init|=
operator|new
name|Path
argument_list|(
name|CONFIG
argument_list|)
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
name|fileResource
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"c"
argument_list|)
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"e"
argument_list|)
argument_list|,
literal|"f"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"g"
argument_list|)
argument_list|,
literal|"h"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"i"
argument_list|)
argument_list|,
literal|"j"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"k"
argument_list|)
argument_list|,
literal|"l"
argument_list|)
expr_stmt|;
name|tearDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCharsetInDocumentEncoding ()
specifier|public
name|void
name|testCharsetInDocumentEncoding
parameter_list|()
throws|throws
name|Exception
block|{
name|tearDown
argument_list|()
expr_stmt|;
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|CONFIG
argument_list|)
argument_list|,
name|StandardCharsets
operator|.
name|ISO_8859_1
argument_list|)
argument_list|)
expr_stmt|;
name|writeHeader
argument_list|(
name|StandardCharsets
operator|.
name|ISO_8859_1
operator|.
name|displayName
argument_list|()
argument_list|)
expr_stmt|;
name|writeConfiguration
argument_list|()
expr_stmt|;
name|appendProperty
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"c"
argument_list|,
literal|"MÃ¼ller"
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
comment|// verify that the includes file contains all properties
name|Path
name|fileResource
init|=
operator|new
name|Path
argument_list|(
name|CONFIG
argument_list|)
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
name|fileResource
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"c"
argument_list|)
argument_list|,
literal|"MÃ¼ller"
argument_list|)
expr_stmt|;
name|tearDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEntityReference ()
specifier|public
name|void
name|testEntityReference
parameter_list|()
throws|throws
name|Exception
block|{
name|tearDown
argument_list|()
expr_stmt|;
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|CONFIG
argument_list|)
argument_list|)
expr_stmt|;
name|writeHeader
argument_list|()
expr_stmt|;
name|declareEntity
argument_list|(
literal|"configuration"
argument_list|,
literal|"d"
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
name|writeConfiguration
argument_list|()
expr_stmt|;
name|appendProperty
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"c"
argument_list|,
literal|"&d;"
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
comment|// verify that the includes file contains all properties
name|Path
name|fileResource
init|=
operator|new
name|Path
argument_list|(
name|CONFIG
argument_list|)
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
name|fileResource
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"c"
argument_list|)
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
name|tearDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSystemEntityReference ()
specifier|public
name|void
name|testSystemEntityReference
parameter_list|()
throws|throws
name|Exception
block|{
name|tearDown
argument_list|()
expr_stmt|;
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|CONFIG2
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"d"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|CONFIG
argument_list|)
argument_list|)
expr_stmt|;
name|writeHeader
argument_list|()
expr_stmt|;
name|declareSystemEntity
argument_list|(
literal|"configuration"
argument_list|,
literal|"d"
argument_list|,
name|CONFIG2
argument_list|)
expr_stmt|;
name|writeConfiguration
argument_list|()
expr_stmt|;
name|appendProperty
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"c"
argument_list|,
literal|"&d;"
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
comment|// verify that the includes file contains all properties
name|Path
name|fileResource
init|=
operator|new
name|Path
argument_list|(
name|CONFIG
argument_list|)
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
name|fileResource
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"c"
argument_list|)
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
name|tearDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIncludesWithFallback ()
specifier|public
name|void
name|testIncludesWithFallback
parameter_list|()
throws|throws
name|Exception
block|{
name|tearDown
argument_list|()
expr_stmt|;
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|CONFIG2
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|appendProperty
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"c"
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|CONFIG
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|startInclude
argument_list|(
name|CONFIG2
argument_list|)
expr_stmt|;
name|startFallback
argument_list|()
expr_stmt|;
name|appendProperty
argument_list|(
literal|"a"
argument_list|,
literal|"b.fallback"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"c"
argument_list|,
literal|"d.fallback"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|endFallback
argument_list|()
expr_stmt|;
name|endInclude
argument_list|()
expr_stmt|;
name|appendProperty
argument_list|(
literal|"e"
argument_list|,
literal|"f"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"g"
argument_list|,
literal|"h"
argument_list|)
expr_stmt|;
name|startInclude
argument_list|(
literal|"MissingConfig.xml"
argument_list|)
expr_stmt|;
name|startFallback
argument_list|()
expr_stmt|;
name|appendProperty
argument_list|(
literal|"i"
argument_list|,
literal|"j.fallback"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"k"
argument_list|,
literal|"l.fallback"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|endFallback
argument_list|()
expr_stmt|;
name|endInclude
argument_list|()
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
comment|// verify that the includes file contains all properties
name|Path
name|fileResource
init|=
operator|new
name|Path
argument_list|(
name|CONFIG
argument_list|)
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
name|fileResource
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"d"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"f"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"e"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"h"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"g"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"j.fallback"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"i"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"l.fallback"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"k"
argument_list|)
argument_list|)
expr_stmt|;
name|tearDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRelativeIncludes ()
specifier|public
name|void
name|testRelativeIncludes
parameter_list|()
throws|throws
name|Exception
block|{
name|tearDown
argument_list|()
expr_stmt|;
name|String
name|relConfig
init|=
operator|new
name|File
argument_list|(
literal|"./tmp/test-config.xml"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|String
name|relConfig2
init|=
operator|new
name|File
argument_list|(
literal|"./tmp/test-config2.xml"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|relConfig
argument_list|)
operator|.
name|getParent
argument_list|()
argument_list|)
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|relConfig2
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|appendProperty
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|relConfig
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
comment|// Add the relative path instead of the absolute one.
name|startInclude
argument_list|(
operator|new
name|File
argument_list|(
name|relConfig2
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|endInclude
argument_list|()
expr_stmt|;
name|appendProperty
argument_list|(
literal|"c"
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
comment|// verify that the includes file contains all properties
name|Path
name|fileResource
init|=
operator|new
name|Path
argument_list|(
name|relConfig
argument_list|)
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
name|fileResource
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"c"
argument_list|)
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
comment|// Cleanup
operator|new
name|File
argument_list|(
name|relConfig
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
operator|new
name|File
argument_list|(
name|relConfig2
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|relConfig
argument_list|)
operator|.
name|getParent
argument_list|()
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIntegerRanges ()
specifier|public
name|void
name|testIntegerRanges
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"first"
argument_list|,
literal|"-100"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"second"
argument_list|,
literal|"4-6,9-10,27"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"third"
argument_list|,
literal|"34-"
argument_list|)
expr_stmt|;
name|Configuration
operator|.
name|IntegerRanges
name|range
init|=
name|conf
operator|.
name|getRange
argument_list|(
literal|"first"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"first = "
operator|+
name|range
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|range
operator|.
name|isIncluded
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|range
operator|.
name|isIncluded
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|range
operator|.
name|isIncluded
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|range
operator|.
name|isIncluded
argument_list|(
literal|101
argument_list|)
argument_list|)
expr_stmt|;
name|range
operator|=
name|conf
operator|.
name|getRange
argument_list|(
literal|"second"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"second = "
operator|+
name|range
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|range
operator|.
name|isIncluded
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|range
operator|.
name|isIncluded
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|range
operator|.
name|isIncluded
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|range
operator|.
name|isIncluded
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|range
operator|.
name|isIncluded
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|range
operator|.
name|isIncluded
argument_list|(
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|range
operator|.
name|isIncluded
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|range
operator|.
name|isIncluded
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|range
operator|.
name|isIncluded
argument_list|(
literal|26
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|range
operator|.
name|isIncluded
argument_list|(
literal|27
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|range
operator|.
name|isIncluded
argument_list|(
literal|28
argument_list|)
argument_list|)
expr_stmt|;
name|range
operator|=
name|conf
operator|.
name|getRange
argument_list|(
literal|"third"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"third = "
operator|+
name|range
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|range
operator|.
name|isIncluded
argument_list|(
literal|33
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|range
operator|.
name|isIncluded
argument_list|(
literal|34
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|range
operator|.
name|isIncluded
argument_list|(
literal|100000000
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetRangeIterator ()
specifier|public
name|void
name|testGetRangeIterator
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|IntegerRanges
name|ranges
init|=
name|config
operator|.
name|getRange
argument_list|(
literal|"Test"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Empty range has values"
argument_list|,
name|ranges
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|ranges
operator|=
name|config
operator|.
name|getRange
argument_list|(
literal|"Test"
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|expected
init|=
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|found
init|=
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Integer
name|i
range|:
name|ranges
control|)
block|{
name|found
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|found
argument_list|)
expr_stmt|;
name|ranges
operator|=
name|config
operator|.
name|getRange
argument_list|(
literal|"Test"
argument_list|,
literal|"5-10,13-14"
argument_list|)
expr_stmt|;
name|expected
operator|=
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|5
argument_list|,
literal|6
argument_list|,
literal|7
argument_list|,
literal|8
argument_list|,
literal|9
argument_list|,
literal|10
argument_list|,
literal|13
argument_list|,
literal|14
argument_list|)
argument_list|)
expr_stmt|;
name|found
operator|=
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Integer
name|i
range|:
name|ranges
control|)
block|{
name|found
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|found
argument_list|)
expr_stmt|;
name|ranges
operator|=
name|config
operator|.
name|getRange
argument_list|(
literal|"Test"
argument_list|,
literal|"8-12, 5- 7"
argument_list|)
expr_stmt|;
name|expected
operator|=
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|5
argument_list|,
literal|6
argument_list|,
literal|7
argument_list|,
literal|8
argument_list|,
literal|9
argument_list|,
literal|10
argument_list|,
literal|11
argument_list|,
literal|12
argument_list|)
argument_list|)
expr_stmt|;
name|found
operator|=
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Integer
name|i
range|:
name|ranges
control|)
block|{
name|found
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|found
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHexValues ()
specifier|public
name|void
name|testHexValues
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|CONFIG
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.hex1"
argument_list|,
literal|"0x10"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.hex2"
argument_list|,
literal|"0xF"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.hex3"
argument_list|,
literal|"-0x10"
argument_list|)
expr_stmt|;
comment|// Invalid?
name|appendProperty
argument_list|(
literal|"test.hex4"
argument_list|,
literal|"-0x10xyz"
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|Path
name|fileResource
init|=
operator|new
name|Path
argument_list|(
name|CONFIG
argument_list|)
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
name|fileResource
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|16
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
literal|"test.hex1"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|16
argument_list|,
name|conf
operator|.
name|getLong
argument_list|(
literal|"test.hex1"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
literal|"test.hex2"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|conf
operator|.
name|getLong
argument_list|(
literal|"test.hex2"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|16
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
literal|"test.hex3"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|16
argument_list|,
name|conf
operator|.
name|getLong
argument_list|(
literal|"test.hex3"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|conf
operator|.
name|getLong
argument_list|(
literal|"test.hex4"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Property had invalid long value, but was read successfully."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
comment|// pass
block|}
try|try
block|{
name|conf
operator|.
name|getInt
argument_list|(
literal|"test.hex4"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Property had invalid int value, but was read successfully."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
comment|// pass
block|}
block|}
annotation|@
name|Test
DECL|method|testIntegerValues ()
specifier|public
name|void
name|testIntegerValues
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|CONFIG
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.int1"
argument_list|,
literal|"20"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.int2"
argument_list|,
literal|"020"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.int3"
argument_list|,
literal|"-20"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.int4"
argument_list|,
literal|" -20 "
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.int5"
argument_list|,
literal|" -20xyz "
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|Path
name|fileResource
init|=
operator|new
name|Path
argument_list|(
name|CONFIG
argument_list|)
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
name|fileResource
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
literal|"test.int1"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|conf
operator|.
name|getLong
argument_list|(
literal|"test.int1"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|conf
operator|.
name|getLongBytes
argument_list|(
literal|"test.int1"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
literal|"test.int2"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|conf
operator|.
name|getLong
argument_list|(
literal|"test.int2"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|conf
operator|.
name|getLongBytes
argument_list|(
literal|"test.int2"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|20
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
literal|"test.int3"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|20
argument_list|,
name|conf
operator|.
name|getLong
argument_list|(
literal|"test.int3"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|20
argument_list|,
name|conf
operator|.
name|getLongBytes
argument_list|(
literal|"test.int3"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|20
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
literal|"test.int4"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|20
argument_list|,
name|conf
operator|.
name|getLong
argument_list|(
literal|"test.int4"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|20
argument_list|,
name|conf
operator|.
name|getLongBytes
argument_list|(
literal|"test.int4"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|conf
operator|.
name|getInt
argument_list|(
literal|"test.int5"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Property had invalid int value, but was read successfully."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
comment|// pass
block|}
block|}
annotation|@
name|Test
DECL|method|testHumanReadableValues ()
specifier|public
name|void
name|testHumanReadableValues
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|CONFIG
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.humanReadableValue1"
argument_list|,
literal|"1m"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.humanReadableValue2"
argument_list|,
literal|"1M"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.humanReadableValue5"
argument_list|,
literal|"1MBCDE"
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|Path
name|fileResource
init|=
operator|new
name|Path
argument_list|(
name|CONFIG
argument_list|)
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
name|fileResource
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1048576
argument_list|,
name|conf
operator|.
name|getLongBytes
argument_list|(
literal|"test.humanReadableValue1"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1048576
argument_list|,
name|conf
operator|.
name|getLongBytes
argument_list|(
literal|"test.humanReadableValue2"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|conf
operator|.
name|getLongBytes
argument_list|(
literal|"test.humanReadableValue5"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Property had invalid human readable value, but was read successfully."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
comment|// pass
block|}
block|}
annotation|@
name|Test
DECL|method|testBooleanValues ()
specifier|public
name|void
name|testBooleanValues
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|CONFIG
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.bool1"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.bool2"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.bool3"
argument_list|,
literal|"  true "
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.bool4"
argument_list|,
literal|" false "
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.bool5"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.bool6"
argument_list|,
literal|"TRUE"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.bool7"
argument_list|,
literal|"FALSE"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.bool8"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|Path
name|fileResource
init|=
operator|new
name|Path
argument_list|(
name|CONFIG
argument_list|)
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
name|fileResource
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|conf
operator|.
name|getBoolean
argument_list|(
literal|"test.bool1"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|conf
operator|.
name|getBoolean
argument_list|(
literal|"test.bool2"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|conf
operator|.
name|getBoolean
argument_list|(
literal|"test.bool3"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|conf
operator|.
name|getBoolean
argument_list|(
literal|"test.bool4"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|conf
operator|.
name|getBoolean
argument_list|(
literal|"test.bool5"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|conf
operator|.
name|getBoolean
argument_list|(
literal|"test.bool6"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|conf
operator|.
name|getBoolean
argument_list|(
literal|"test.bool7"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|conf
operator|.
name|getBoolean
argument_list|(
literal|"test.bool8"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFloatValues ()
specifier|public
name|void
name|testFloatValues
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|CONFIG
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.float1"
argument_list|,
literal|"3.1415"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.float2"
argument_list|,
literal|"003.1415"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.float3"
argument_list|,
literal|"-3.1415"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.float4"
argument_list|,
literal|" -3.1415 "
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.float5"
argument_list|,
literal|"xyz-3.1415xyz"
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|Path
name|fileResource
init|=
operator|new
name|Path
argument_list|(
name|CONFIG
argument_list|)
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
name|fileResource
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3.1415f
argument_list|,
name|conf
operator|.
name|getFloat
argument_list|(
literal|"test.float1"
argument_list|,
literal|0.0f
argument_list|)
argument_list|,
name|DOUBLE_DELTA
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3.1415f
argument_list|,
name|conf
operator|.
name|getFloat
argument_list|(
literal|"test.float2"
argument_list|,
literal|0.0f
argument_list|)
argument_list|,
name|DOUBLE_DELTA
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|3.1415f
argument_list|,
name|conf
operator|.
name|getFloat
argument_list|(
literal|"test.float3"
argument_list|,
literal|0.0f
argument_list|)
argument_list|,
name|DOUBLE_DELTA
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|3.1415f
argument_list|,
name|conf
operator|.
name|getFloat
argument_list|(
literal|"test.float4"
argument_list|,
literal|0.0f
argument_list|)
argument_list|,
name|DOUBLE_DELTA
argument_list|)
expr_stmt|;
try|try
block|{
name|conf
operator|.
name|getFloat
argument_list|(
literal|"test.float5"
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Property had invalid float value, but was read successfully."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
comment|// pass
block|}
block|}
annotation|@
name|Test
DECL|method|testDoubleValues ()
specifier|public
name|void
name|testDoubleValues
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|CONFIG
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.double1"
argument_list|,
literal|"3.1415"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.double2"
argument_list|,
literal|"003.1415"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.double3"
argument_list|,
literal|"-3.1415"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.double4"
argument_list|,
literal|" -3.1415 "
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.double5"
argument_list|,
literal|"xyz-3.1415xyz"
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|Path
name|fileResource
init|=
operator|new
name|Path
argument_list|(
name|CONFIG
argument_list|)
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
name|fileResource
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3.1415
argument_list|,
name|conf
operator|.
name|getDouble
argument_list|(
literal|"test.double1"
argument_list|,
literal|0.0
argument_list|)
argument_list|,
name|DOUBLE_DELTA
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3.1415
argument_list|,
name|conf
operator|.
name|getDouble
argument_list|(
literal|"test.double2"
argument_list|,
literal|0.0
argument_list|)
argument_list|,
name|DOUBLE_DELTA
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|3.1415
argument_list|,
name|conf
operator|.
name|getDouble
argument_list|(
literal|"test.double3"
argument_list|,
literal|0.0
argument_list|)
argument_list|,
name|DOUBLE_DELTA
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|3.1415
argument_list|,
name|conf
operator|.
name|getDouble
argument_list|(
literal|"test.double4"
argument_list|,
literal|0.0
argument_list|)
argument_list|,
name|DOUBLE_DELTA
argument_list|)
expr_stmt|;
try|try
block|{
name|conf
operator|.
name|getDouble
argument_list|(
literal|"test.double5"
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Property had invalid double value, but was read successfully."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
comment|// pass
block|}
block|}
annotation|@
name|Test
DECL|method|testGetClass ()
specifier|public
name|void
name|testGetClass
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|CONFIG
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.class1"
argument_list|,
literal|"java.lang.Integer"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.class2"
argument_list|,
literal|" java.lang.Integer "
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|Path
name|fileResource
init|=
operator|new
name|Path
argument_list|(
name|CONFIG
argument_list|)
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
name|fileResource
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"java.lang.Integer"
argument_list|,
name|conf
operator|.
name|getClass
argument_list|(
literal|"test.class1"
argument_list|,
literal|null
argument_list|)
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"java.lang.Integer"
argument_list|,
name|conf
operator|.
name|getClass
argument_list|(
literal|"test.class2"
argument_list|,
literal|null
argument_list|)
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetClasses ()
specifier|public
name|void
name|testGetClasses
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|CONFIG
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.classes1"
argument_list|,
literal|"java.lang.Integer,java.lang.String"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.classes2"
argument_list|,
literal|" java.lang.Integer , java.lang.String "
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|Path
name|fileResource
init|=
operator|new
name|Path
argument_list|(
name|CONFIG
argument_list|)
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
name|fileResource
argument_list|)
expr_stmt|;
name|String
index|[]
name|expectedNames
init|=
block|{
literal|"java.lang.Integer"
block|,
literal|"java.lang.String"
block|}
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|defaultClasses
init|=
block|{}
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|classes1
init|=
name|conf
operator|.
name|getClasses
argument_list|(
literal|"test.classes1"
argument_list|,
name|defaultClasses
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|classes2
init|=
name|conf
operator|.
name|getClasses
argument_list|(
literal|"test.classes2"
argument_list|,
name|defaultClasses
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|expectedNames
argument_list|,
name|extractClassNames
argument_list|(
name|classes1
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expectedNames
argument_list|,
name|extractClassNames
argument_list|(
name|classes2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetStringCollection ()
specifier|public
name|void
name|testGetStringCollection
parameter_list|()
block|{
name|Configuration
name|c
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|c
operator|.
name|set
argument_list|(
literal|"x"
argument_list|,
literal|" a, b\n,\nc "
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|strs
init|=
name|c
operator|.
name|getTrimmedStringCollection
argument_list|(
literal|"x"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|strs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|"c"
block|}
argument_list|,
name|strs
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check that the result is mutable
name|strs
operator|.
name|add
argument_list|(
literal|"z"
argument_list|)
expr_stmt|;
comment|// Make sure same is true for missing config
name|strs
operator|=
name|c
operator|.
name|getStringCollection
argument_list|(
literal|"does-not-exist"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|strs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|strs
operator|.
name|add
argument_list|(
literal|"z"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetTrimmedStringCollection ()
specifier|public
name|void
name|testGetTrimmedStringCollection
parameter_list|()
block|{
name|Configuration
name|c
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|c
operator|.
name|set
argument_list|(
literal|"x"
argument_list|,
literal|"a, b, c"
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|strs
init|=
name|c
operator|.
name|getStringCollection
argument_list|(
literal|"x"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|strs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|" b"
block|,
literal|" c"
block|}
argument_list|,
name|strs
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check that the result is mutable
name|strs
operator|.
name|add
argument_list|(
literal|"z"
argument_list|)
expr_stmt|;
comment|// Make sure same is true for missing config
name|strs
operator|=
name|c
operator|.
name|getStringCollection
argument_list|(
literal|"does-not-exist"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|strs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|strs
operator|.
name|add
argument_list|(
literal|"z"
argument_list|)
expr_stmt|;
block|}
DECL|method|extractClassNames (Class<?>[] classes)
specifier|private
specifier|static
name|String
index|[]
name|extractClassNames
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|classes
parameter_list|)
block|{
name|String
index|[]
name|classNames
init|=
operator|new
name|String
index|[
name|classes
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|classNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|classNames
index|[
name|i
index|]
operator|=
name|classes
index|[
name|i
index|]
operator|.
name|getCanonicalName
argument_list|()
expr_stmt|;
block|}
return|return
name|classNames
return|;
block|}
DECL|enum|Dingo
DECL|enumConstant|FOO
DECL|enumConstant|BAR
enum|enum
name|Dingo
block|{
name|FOO
block|,
name|BAR
block|}
empty_stmt|;
DECL|enum|Yak
DECL|enumConstant|RAB
DECL|enumConstant|FOO
enum|enum
name|Yak
block|{
name|RAB
block|,
name|FOO
block|}
empty_stmt|;
annotation|@
name|Test
DECL|method|testEnum ()
specifier|public
name|void
name|testEnum
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setEnum
argument_list|(
literal|"test.enum"
argument_list|,
name|Dingo
operator|.
name|FOO
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|Dingo
operator|.
name|FOO
argument_list|,
name|conf
operator|.
name|getEnum
argument_list|(
literal|"test.enum"
argument_list|,
name|Dingo
operator|.
name|BAR
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|Yak
operator|.
name|FOO
argument_list|,
name|conf
operator|.
name|getEnum
argument_list|(
literal|"test.enum"
argument_list|,
name|Yak
operator|.
name|RAB
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setEnum
argument_list|(
literal|"test.enum"
argument_list|,
name|Dingo
operator|.
name|FOO
argument_list|)
expr_stmt|;
name|boolean
name|fail
init|=
literal|false
decl_stmt|;
try|try
block|{
name|conf
operator|.
name|setEnum
argument_list|(
literal|"test.enum"
argument_list|,
name|Dingo
operator|.
name|BAR
argument_list|)
expr_stmt|;
name|conf
operator|.
name|getEnum
argument_list|(
literal|"test.enum"
argument_list|,
name|Yak
operator|.
name|FOO
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|fail
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|fail
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEnumFromXml ()
specifier|public
name|void
name|testEnumFromXml
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|CONFIG_FOR_ENUM
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.enum"
argument_list|,
literal|" \t \n   FOO \t \n"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.enum2"
argument_list|,
literal|" \t \n   Yak.FOO \t \n"
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Path
name|fileResource
init|=
operator|new
name|Path
argument_list|(
name|CONFIG_FOR_ENUM
argument_list|)
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
name|fileResource
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|Yak
operator|.
name|FOO
argument_list|,
name|conf
operator|.
name|getEnum
argument_list|(
literal|"test.enum"
argument_list|,
name|Yak
operator|.
name|FOO
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|fail
init|=
literal|false
decl_stmt|;
try|try
block|{
name|conf
operator|.
name|getEnum
argument_list|(
literal|"test.enum2"
argument_list|,
name|Yak
operator|.
name|FOO
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|fail
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|fail
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTimeDuration ()
specifier|public
name|void
name|testTimeDuration
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setTimeDuration
argument_list|(
literal|"test.time.a"
argument_list|,
literal|7L
argument_list|,
name|SECONDS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"7s"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"test.time.a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|conf
operator|.
name|getTimeDuration
argument_list|(
literal|"test.time.a"
argument_list|,
literal|30
argument_list|,
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7L
argument_list|,
name|conf
operator|.
name|getTimeDuration
argument_list|(
literal|"test.time.a"
argument_list|,
literal|30
argument_list|,
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7000L
argument_list|,
name|conf
operator|.
name|getTimeDuration
argument_list|(
literal|"test.time.a"
argument_list|,
literal|30
argument_list|,
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7000000L
argument_list|,
name|conf
operator|.
name|getTimeDuration
argument_list|(
literal|"test.time.a"
argument_list|,
literal|30
argument_list|,
name|MICROSECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7000000000L
argument_list|,
name|conf
operator|.
name|getTimeDuration
argument_list|(
literal|"test.time.a"
argument_list|,
literal|30
argument_list|,
name|NANOSECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setTimeDuration
argument_list|(
literal|"test.time.b"
argument_list|,
literal|1
argument_list|,
name|DAYS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1d"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"test.time.b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|conf
operator|.
name|getTimeDuration
argument_list|(
literal|"test.time.b"
argument_list|,
literal|1
argument_list|,
name|DAYS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|24
argument_list|,
name|conf
operator|.
name|getTimeDuration
argument_list|(
literal|"test.time.b"
argument_list|,
literal|1
argument_list|,
name|HOURS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MINUTES
operator|.
name|convert
argument_list|(
literal|1
argument_list|,
name|DAYS
argument_list|)
argument_list|,
name|conf
operator|.
name|getTimeDuration
argument_list|(
literal|"test.time.b"
argument_list|,
literal|1
argument_list|,
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
comment|// check default
name|assertEquals
argument_list|(
literal|30L
argument_list|,
name|conf
operator|.
name|getTimeDuration
argument_list|(
literal|"test.time.X"
argument_list|,
literal|30
argument_list|,
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"test.time.X"
argument_list|,
literal|"30"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|30L
argument_list|,
name|conf
operator|.
name|getTimeDuration
argument_list|(
literal|"test.time.X"
argument_list|,
literal|40
argument_list|,
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10L
argument_list|,
name|conf
operator|.
name|getTimeDuration
argument_list|(
literal|"test.time.c"
argument_list|,
literal|"10"
argument_list|,
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|30L
argument_list|,
name|conf
operator|.
name|getTimeDuration
argument_list|(
literal|"test.time.c"
argument_list|,
literal|"30s"
argument_list|,
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|120L
argument_list|,
name|conf
operator|.
name|getTimeDuration
argument_list|(
literal|"test.time.c"
argument_list|,
literal|"2m"
argument_list|,
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"test.time.c"
argument_list|,
literal|"30"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|30L
argument_list|,
name|conf
operator|.
name|getTimeDuration
argument_list|(
literal|"test.time.c"
argument_list|,
literal|"40s"
argument_list|,
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
comment|// check suffix insensitive
name|conf
operator|.
name|set
argument_list|(
literal|"test.time.d"
argument_list|,
literal|"30S"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|30L
argument_list|,
name|conf
operator|.
name|getTimeDuration
argument_list|(
literal|"test.time.d"
argument_list|,
literal|40
argument_list|,
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Configuration
operator|.
name|ParsedTimeDuration
name|ptd
range|:
name|Configuration
operator|.
name|ParsedTimeDuration
operator|.
name|values
argument_list|()
control|)
block|{
name|conf
operator|.
name|setTimeDuration
argument_list|(
literal|"test.time.unit"
argument_list|,
literal|1
argument_list|,
name|ptd
operator|.
name|unit
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
operator|+
name|ptd
operator|.
name|suffix
argument_list|()
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"test.time.unit"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|conf
operator|.
name|getTimeDuration
argument_list|(
literal|"test.time.unit"
argument_list|,
literal|2
argument_list|,
name|ptd
operator|.
name|unit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testTimeDurationWarning ()
specifier|public
name|void
name|testTimeDurationWarning
parameter_list|()
block|{
comment|// check warn for possible loss of precision
specifier|final
name|String
name|warnFormat
init|=
literal|"Possible loss of precision converting %s"
operator|+
literal|" to %s for test.time.warn"
decl_stmt|;
specifier|final
name|ArrayList
argument_list|<
name|String
argument_list|>
name|warnchk
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Configuration
name|wconf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
block|{
annotation|@
name|Override
name|void
name|logDeprecation
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|warnchk
operator|.
name|add
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|String
index|[]
name|convDAYS
init|=
operator|new
name|String
index|[]
block|{
literal|"23h"
block|,
literal|"30m"
block|,
literal|"40s"
block|,
literal|"10us"
block|,
literal|"40000ms"
block|}
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|convDAYS
control|)
block|{
name|wconf
operator|.
name|set
argument_list|(
literal|"test.time.warn"
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|wconf
operator|.
name|getTimeDuration
argument_list|(
literal|"test.time.warn"
argument_list|,
literal|1
argument_list|,
name|DAYS
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|convDAYS
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|String
name|wchk
init|=
name|String
operator|.
name|format
argument_list|(
name|warnFormat
argument_list|,
name|convDAYS
index|[
name|i
index|]
argument_list|,
literal|"DAYS"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|wchk
argument_list|,
name|warnchk
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|warnchk
operator|.
name|clear
argument_list|()
expr_stmt|;
name|wconf
operator|.
name|setTimeDuration
argument_list|(
literal|"test.time.warn"
argument_list|,
literal|1441
argument_list|,
name|MINUTES
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|wconf
operator|.
name|getTimeDuration
argument_list|(
literal|"test.time.warn"
argument_list|,
literal|0
argument_list|,
name|DAYS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|24
argument_list|,
name|wconf
operator|.
name|getTimeDuration
argument_list|(
literal|"test.time.warn"
argument_list|,
literal|0
argument_list|,
name|HOURS
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|dchk
init|=
name|String
operator|.
name|format
argument_list|(
name|warnFormat
argument_list|,
literal|"1441m"
argument_list|,
literal|"DAYS"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|dchk
argument_list|,
name|warnchk
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|hchk
init|=
name|String
operator|.
name|format
argument_list|(
name|warnFormat
argument_list|,
literal|"1441m"
argument_list|,
literal|"HOURS"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|hchk
argument_list|,
name|warnchk
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1441
argument_list|,
name|wconf
operator|.
name|getTimeDuration
argument_list|(
literal|"test.time.warn"
argument_list|,
literal|0
argument_list|,
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
comment|// no warning
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|warnchk
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|86460
argument_list|,
name|wconf
operator|.
name|getTimeDuration
argument_list|(
literal|"test.time.warn"
argument_list|,
literal|0
argument_list|,
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
comment|// no warning
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|warnchk
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPattern ()
specifier|public
name|void
name|testPattern
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|CONFIG
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.pattern1"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.pattern2"
argument_list|,
literal|"("
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.pattern3"
argument_list|,
literal|"a+b"
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|Path
name|fileResource
init|=
operator|new
name|Path
argument_list|(
name|CONFIG
argument_list|)
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
name|fileResource
argument_list|)
expr_stmt|;
name|Pattern
name|defaultPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"x+"
argument_list|)
decl_stmt|;
comment|// Return default if missing
name|assertEquals
argument_list|(
name|defaultPattern
operator|.
name|pattern
argument_list|()
argument_list|,
name|conf
operator|.
name|getPattern
argument_list|(
literal|"xxxxx"
argument_list|,
name|defaultPattern
argument_list|)
operator|.
name|pattern
argument_list|()
argument_list|)
expr_stmt|;
comment|// Return null if empty and default is null
name|assertNull
argument_list|(
name|conf
operator|.
name|getPattern
argument_list|(
literal|"test.pattern1"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// Return default for empty
name|assertEquals
argument_list|(
name|defaultPattern
operator|.
name|pattern
argument_list|()
argument_list|,
name|conf
operator|.
name|getPattern
argument_list|(
literal|"test.pattern1"
argument_list|,
name|defaultPattern
argument_list|)
operator|.
name|pattern
argument_list|()
argument_list|)
expr_stmt|;
comment|// Return default for malformed
name|assertEquals
argument_list|(
name|defaultPattern
operator|.
name|pattern
argument_list|()
argument_list|,
name|conf
operator|.
name|getPattern
argument_list|(
literal|"test.pattern2"
argument_list|,
name|defaultPattern
argument_list|)
operator|.
name|pattern
argument_list|()
argument_list|)
expr_stmt|;
comment|// Works for correct patterns
name|assertEquals
argument_list|(
literal|"a+b"
argument_list|,
name|conf
operator|.
name|getPattern
argument_list|(
literal|"test.pattern3"
argument_list|,
name|defaultPattern
argument_list|)
operator|.
name|pattern
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPropertySource ()
specifier|public
name|void
name|testPropertySource
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|CONFIG
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|Path
name|fileResource
init|=
operator|new
name|Path
argument_list|(
name|CONFIG
argument_list|)
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
name|fileResource
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.defaultFS"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|String
index|[]
name|sources
init|=
name|conf
operator|.
name|getPropertySources
argument_list|(
literal|"test.foo"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|sources
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Resource string returned for a file-loaded property"
operator|+
literal|" must be a proper absolute path"
argument_list|,
name|fileResource
argument_list|,
operator|new
name|Path
argument_list|(
name|sources
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
literal|"Resource string returned for a set() property must be "
operator|+
literal|"\"programmatically\""
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"programmatically"
block|}
argument_list|,
name|conf
operator|.
name|getPropertySources
argument_list|(
literal|"fs.defaultFS"
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
literal|"Resource string returned for an unset property must "
operator|+
literal|"be null"
argument_list|,
literal|null
argument_list|,
name|conf
operator|.
name|getPropertySources
argument_list|(
literal|"fs.defaultFoo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultiplePropertySource ()
specifier|public
name|void
name|testMultiplePropertySource
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|CONFIG
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.foo"
argument_list|,
literal|"bar"
argument_list|,
literal|false
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|Path
name|fileResource
init|=
operator|new
name|Path
argument_list|(
name|CONFIG
argument_list|)
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
name|fileResource
argument_list|)
expr_stmt|;
name|String
index|[]
name|sources
init|=
name|conf
operator|.
name|getPropertySources
argument_list|(
literal|"test.foo"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|sources
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|sources
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|sources
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|sources
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Resource string returned for a file-loaded property"
operator|+
literal|" must be a proper absolute path"
argument_list|,
name|fileResource
argument_list|,
operator|new
name|Path
argument_list|(
name|sources
index|[
literal|3
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSocketAddress ()
specifier|public
name|void
name|testSocketAddress
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|String
name|defaultAddr
init|=
literal|"host:1"
decl_stmt|;
specifier|final
name|int
name|defaultPort
init|=
literal|2
decl_stmt|;
name|InetSocketAddress
name|addr
init|=
literal|null
decl_stmt|;
name|addr
operator|=
name|conf
operator|.
name|getSocketAddr
argument_list|(
literal|"myAddress"
argument_list|,
name|defaultAddr
argument_list|,
name|defaultPort
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|defaultAddr
argument_list|,
name|NetUtils
operator|.
name|getHostPortString
argument_list|(
name|addr
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"myAddress"
argument_list|,
literal|"host2"
argument_list|)
expr_stmt|;
name|addr
operator|=
name|conf
operator|.
name|getSocketAddr
argument_list|(
literal|"myAddress"
argument_list|,
name|defaultAddr
argument_list|,
name|defaultPort
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"host2:"
operator|+
name|defaultPort
argument_list|,
name|NetUtils
operator|.
name|getHostPortString
argument_list|(
name|addr
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"myAddress"
argument_list|,
literal|"host2:3"
argument_list|)
expr_stmt|;
name|addr
operator|=
name|conf
operator|.
name|getSocketAddr
argument_list|(
literal|"myAddress"
argument_list|,
name|defaultAddr
argument_list|,
name|defaultPort
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"host2:3"
argument_list|,
name|NetUtils
operator|.
name|getHostPortString
argument_list|(
name|addr
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"myAddress"
argument_list|,
literal|" \n \t    host4:5     \t \n   "
argument_list|)
expr_stmt|;
name|addr
operator|=
name|conf
operator|.
name|getSocketAddr
argument_list|(
literal|"myAddress"
argument_list|,
name|defaultAddr
argument_list|,
name|defaultPort
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"host4:5"
argument_list|,
name|NetUtils
operator|.
name|getHostPortString
argument_list|(
name|addr
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|threwException
init|=
literal|false
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"myAddress"
argument_list|,
literal|"bad:-port"
argument_list|)
expr_stmt|;
try|try
block|{
name|addr
operator|=
name|conf
operator|.
name|getSocketAddr
argument_list|(
literal|"myAddress"
argument_list|,
name|defaultAddr
argument_list|,
name|defaultPort
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
name|threwException
operator|=
literal|true
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Does not contain a valid host:port authority: "
operator|+
literal|"bad:-port (configuration property 'myAddress')"
argument_list|,
name|iae
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|assertTrue
argument_list|(
name|threwException
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSetSocketAddress ()
specifier|public
name|void
name|testSetSocketAddress
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|NetUtils
operator|.
name|addStaticResolution
argument_list|(
literal|"host"
argument_list|,
literal|"127.0.0.1"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|defaultAddr
init|=
literal|"host:1"
decl_stmt|;
name|InetSocketAddress
name|addr
init|=
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|defaultAddr
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setSocketAddr
argument_list|(
literal|"myAddress"
argument_list|,
name|addr
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|defaultAddr
argument_list|,
name|NetUtils
operator|.
name|getHostPortString
argument_list|(
name|addr
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUpdateSocketAddress ()
specifier|public
name|void
name|testUpdateSocketAddress
parameter_list|()
throws|throws
name|IOException
block|{
name|InetSocketAddress
name|addr
init|=
name|NetUtils
operator|.
name|createSocketAddrForHost
argument_list|(
literal|"host"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|InetSocketAddress
name|connectAddr
init|=
name|conf
operator|.
name|updateConnectAddr
argument_list|(
literal|"myAddress"
argument_list|,
name|addr
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|connectAddr
operator|.
name|getHostName
argument_list|()
argument_list|,
name|addr
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
name|addr
operator|=
operator|new
name|InetSocketAddress
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|connectAddr
operator|=
name|conf
operator|.
name|updateConnectAddr
argument_list|(
literal|"myAddress"
argument_list|,
name|addr
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|connectAddr
operator|.
name|getHostName
argument_list|()
argument_list|,
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReload ()
specifier|public
name|void
name|testReload
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|CONFIG
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.key1"
argument_list|,
literal|"final-value1"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.key2"
argument_list|,
literal|"value2"
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|Path
name|fileResource
init|=
operator|new
name|Path
argument_list|(
name|CONFIG
argument_list|)
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
name|fileResource
argument_list|)
expr_stmt|;
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|CONFIG2
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.key1"
argument_list|,
literal|"value1"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.key3"
argument_list|,
literal|"value3"
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|Path
name|fileResource1
init|=
operator|new
name|Path
argument_list|(
name|CONFIG2
argument_list|)
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
name|fileResource1
argument_list|)
expr_stmt|;
comment|// add a few values via set.
name|conf
operator|.
name|set
argument_list|(
literal|"test.key3"
argument_list|,
literal|"value4"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"test.key4"
argument_list|,
literal|"value5"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"final-value1"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"test.key1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value2"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"test.key2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value4"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"test.key3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value5"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"test.key4"
argument_list|)
argument_list|)
expr_stmt|;
comment|// change values in the test file...
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|CONFIG
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.key1"
argument_list|,
literal|"final-value1"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.key3"
argument_list|,
literal|"final-value3"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|conf
operator|.
name|reloadConfiguration
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value1"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"test.key1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// overlayed property overrides.
name|assertEquals
argument_list|(
literal|"value4"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"test.key3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"test.key2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value5"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"test.key4"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSize ()
specifier|public
name|void
name|testSize
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"a"
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"b"
argument_list|,
literal|"B"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|conf
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testClear ()
specifier|public
name|void
name|testClear
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"a"
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"b"
argument_list|,
literal|"B"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|conf
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|conf
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|Fake_ClassLoader
specifier|public
specifier|static
class|class
name|Fake_ClassLoader
extends|extends
name|ClassLoader
block|{   }
annotation|@
name|Test
DECL|method|testClassLoader ()
specifier|public
name|void
name|testClassLoader
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setQuietMode
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClassLoader
argument_list|(
operator|new
name|Fake_ClassLoader
argument_list|()
argument_list|)
expr_stmt|;
name|Configuration
name|other
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|other
operator|.
name|getClassLoader
argument_list|()
operator|instanceof
name|Fake_ClassLoader
argument_list|)
expr_stmt|;
block|}
DECL|class|JsonConfiguration
specifier|static
class|class
name|JsonConfiguration
block|{
DECL|field|properties
name|JsonProperty
index|[]
name|properties
decl_stmt|;
DECL|method|getProperties ()
specifier|public
name|JsonProperty
index|[]
name|getProperties
parameter_list|()
block|{
return|return
name|properties
return|;
block|}
DECL|method|setProperties (JsonProperty[] properties)
specifier|public
name|void
name|setProperties
parameter_list|(
name|JsonProperty
index|[]
name|properties
parameter_list|)
block|{
name|this
operator|.
name|properties
operator|=
name|properties
expr_stmt|;
block|}
block|}
DECL|class|SingleJsonConfiguration
specifier|static
class|class
name|SingleJsonConfiguration
block|{
DECL|field|property
specifier|private
name|JsonProperty
name|property
decl_stmt|;
DECL|method|getProperty ()
specifier|public
name|JsonProperty
name|getProperty
parameter_list|()
block|{
return|return
name|property
return|;
block|}
DECL|method|setProperty (JsonProperty property)
specifier|public
name|void
name|setProperty
parameter_list|(
name|JsonProperty
name|property
parameter_list|)
block|{
name|this
operator|.
name|property
operator|=
name|property
expr_stmt|;
block|}
block|}
DECL|class|JsonProperty
specifier|static
class|class
name|JsonProperty
block|{
DECL|field|key
name|String
name|key
decl_stmt|;
DECL|method|getKey ()
specifier|public
name|String
name|getKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
DECL|method|setKey (String key)
specifier|public
name|void
name|setKey
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
block|}
DECL|method|getValue ()
specifier|public
name|String
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
DECL|method|setValue (String value)
specifier|public
name|void
name|setValue
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
DECL|method|getIsFinal ()
specifier|public
name|boolean
name|getIsFinal
parameter_list|()
block|{
return|return
name|isFinal
return|;
block|}
DECL|method|setIsFinal (boolean isFinal)
specifier|public
name|void
name|setIsFinal
parameter_list|(
name|boolean
name|isFinal
parameter_list|)
block|{
name|this
operator|.
name|isFinal
operator|=
name|isFinal
expr_stmt|;
block|}
DECL|method|getResource ()
specifier|public
name|String
name|getResource
parameter_list|()
block|{
return|return
name|resource
return|;
block|}
DECL|method|setResource (String resource)
specifier|public
name|void
name|setResource
parameter_list|(
name|String
name|resource
parameter_list|)
block|{
name|this
operator|.
name|resource
operator|=
name|resource
expr_stmt|;
block|}
DECL|field|value
name|String
name|value
decl_stmt|;
DECL|field|isFinal
name|boolean
name|isFinal
decl_stmt|;
DECL|field|resource
name|String
name|resource
decl_stmt|;
block|}
DECL|method|getActualConf (String xmlStr)
specifier|private
name|Configuration
name|getActualConf
parameter_list|(
name|String
name|xmlStr
parameter_list|)
block|{
name|Configuration
name|ac
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|InputStream
name|in
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|xmlStr
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|ac
operator|.
name|addResource
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|ac
return|;
block|}
annotation|@
name|Test
DECL|method|testGetSetTrimmedNames ()
specifier|public
name|void
name|testGetSetTrimmedNames
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|" name"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|" name"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value"
argument_list|,
name|conf
operator|.
name|getRaw
argument_list|(
literal|"  name  "
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDumpProperty ()
specifier|public
name|void
name|testDumpProperty
parameter_list|()
throws|throws
name|IOException
block|{
name|StringWriter
name|outWriter
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|String
name|jsonStr
init|=
literal|null
decl_stmt|;
name|String
name|xmlStr
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Configuration
name|testConf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|CONFIG
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.key1"
argument_list|,
literal|"value1"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.key2"
argument_list|,
literal|"value2"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.key3"
argument_list|,
literal|"value3"
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|Path
name|fileResource
init|=
operator|new
name|Path
argument_list|(
name|CONFIG
argument_list|)
decl_stmt|;
name|testConf
operator|.
name|addResource
argument_list|(
name|fileResource
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// case 1: dump an existing property
comment|// test json format
name|outWriter
operator|=
operator|new
name|StringWriter
argument_list|()
expr_stmt|;
name|Configuration
operator|.
name|dumpConfiguration
argument_list|(
name|testConf
argument_list|,
literal|"test.key2"
argument_list|,
name|outWriter
argument_list|)
expr_stmt|;
name|jsonStr
operator|=
name|outWriter
operator|.
name|toString
argument_list|()
expr_stmt|;
name|outWriter
operator|.
name|close
argument_list|()
expr_stmt|;
name|mapper
operator|=
operator|new
name|ObjectMapper
argument_list|()
expr_stmt|;
name|SingleJsonConfiguration
name|jconf1
init|=
name|mapper
operator|.
name|readValue
argument_list|(
name|jsonStr
argument_list|,
name|SingleJsonConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
name|JsonProperty
name|jp1
init|=
name|jconf1
operator|.
name|getProperty
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"test.key2"
argument_list|,
name|jp1
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value2"
argument_list|,
name|jp1
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|jp1
operator|.
name|isFinal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fileResource
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|jp1
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
comment|// test xml format
name|outWriter
operator|=
operator|new
name|StringWriter
argument_list|()
expr_stmt|;
name|testConf
operator|.
name|writeXml
argument_list|(
literal|"test.key2"
argument_list|,
name|outWriter
argument_list|)
expr_stmt|;
name|xmlStr
operator|=
name|outWriter
operator|.
name|toString
argument_list|()
expr_stmt|;
name|outWriter
operator|.
name|close
argument_list|()
expr_stmt|;
name|Configuration
name|actualConf1
init|=
name|getActualConf
argument_list|(
name|xmlStr
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|actualConf1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value2"
argument_list|,
name|actualConf1
operator|.
name|get
argument_list|(
literal|"test.key2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|actualConf1
operator|.
name|getFinalParameters
argument_list|()
operator|.
name|contains
argument_list|(
literal|"test.key2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fileResource
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|actualConf1
operator|.
name|getPropertySources
argument_list|(
literal|"test.key2"
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// case 2: dump an non existing property
comment|// test json format
try|try
block|{
name|outWriter
operator|=
operator|new
name|StringWriter
argument_list|()
expr_stmt|;
name|Configuration
operator|.
name|dumpConfiguration
argument_list|(
name|testConf
argument_list|,
literal|"test.unknown.key"
argument_list|,
name|outWriter
argument_list|)
expr_stmt|;
name|outWriter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|instanceof
name|IllegalArgumentException
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"test.unknown.key"
argument_list|)
operator|&&
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"not found"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// test xml format
try|try
block|{
name|outWriter
operator|=
operator|new
name|StringWriter
argument_list|()
expr_stmt|;
name|testConf
operator|.
name|writeXml
argument_list|(
literal|"test.unknown.key"
argument_list|,
name|outWriter
argument_list|)
expr_stmt|;
name|outWriter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|instanceof
name|IllegalArgumentException
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"test.unknown.key"
argument_list|)
operator|&&
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"not found"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// case 3: specify a null property, ensure all configurations are dumped
name|outWriter
operator|=
operator|new
name|StringWriter
argument_list|()
expr_stmt|;
name|Configuration
operator|.
name|dumpConfiguration
argument_list|(
name|testConf
argument_list|,
literal|null
argument_list|,
name|outWriter
argument_list|)
expr_stmt|;
name|jsonStr
operator|=
name|outWriter
operator|.
name|toString
argument_list|()
expr_stmt|;
name|mapper
operator|=
operator|new
name|ObjectMapper
argument_list|()
expr_stmt|;
name|JsonConfiguration
name|jconf3
init|=
name|mapper
operator|.
name|readValue
argument_list|(
name|jsonStr
argument_list|,
name|JsonConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|jconf3
operator|.
name|getProperties
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|outWriter
operator|=
operator|new
name|StringWriter
argument_list|()
expr_stmt|;
name|testConf
operator|.
name|writeXml
argument_list|(
literal|null
argument_list|,
name|outWriter
argument_list|)
expr_stmt|;
name|xmlStr
operator|=
name|outWriter
operator|.
name|toString
argument_list|()
expr_stmt|;
name|outWriter
operator|.
name|close
argument_list|()
expr_stmt|;
name|Configuration
name|actualConf3
init|=
name|getActualConf
argument_list|(
name|xmlStr
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|actualConf3
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|actualConf3
operator|.
name|getProps
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"test.key1"
argument_list|)
operator|&&
name|actualConf3
operator|.
name|getProps
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"test.key2"
argument_list|)
operator|&&
name|actualConf3
operator|.
name|getProps
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"test.key3"
argument_list|)
argument_list|)
expr_stmt|;
comment|// case 4: specify an empty property, ensure all configurations are dumped
name|outWriter
operator|=
operator|new
name|StringWriter
argument_list|()
expr_stmt|;
name|Configuration
operator|.
name|dumpConfiguration
argument_list|(
name|testConf
argument_list|,
literal|""
argument_list|,
name|outWriter
argument_list|)
expr_stmt|;
name|jsonStr
operator|=
name|outWriter
operator|.
name|toString
argument_list|()
expr_stmt|;
name|mapper
operator|=
operator|new
name|ObjectMapper
argument_list|()
expr_stmt|;
name|JsonConfiguration
name|jconf4
init|=
name|mapper
operator|.
name|readValue
argument_list|(
name|jsonStr
argument_list|,
name|JsonConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|jconf4
operator|.
name|getProperties
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|outWriter
operator|=
operator|new
name|StringWriter
argument_list|()
expr_stmt|;
name|testConf
operator|.
name|writeXml
argument_list|(
literal|""
argument_list|,
name|outWriter
argument_list|)
expr_stmt|;
name|xmlStr
operator|=
name|outWriter
operator|.
name|toString
argument_list|()
expr_stmt|;
name|outWriter
operator|.
name|close
argument_list|()
expr_stmt|;
name|Configuration
name|actualConf4
init|=
name|getActualConf
argument_list|(
name|xmlStr
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|actualConf4
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|actualConf4
operator|.
name|getProps
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"test.key1"
argument_list|)
operator|&&
name|actualConf4
operator|.
name|getProps
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"test.key2"
argument_list|)
operator|&&
name|actualConf4
operator|.
name|getProps
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"test.key3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|outWriter
operator|!=
literal|null
condition|)
block|{
name|outWriter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testDumpConfiguration ()
specifier|public
name|void
name|testDumpConfiguration
parameter_list|()
throws|throws
name|IOException
block|{
name|StringWriter
name|outWriter
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|Configuration
operator|.
name|dumpConfiguration
argument_list|(
name|conf
argument_list|,
name|outWriter
argument_list|)
expr_stmt|;
name|String
name|jsonStr
init|=
name|outWriter
operator|.
name|toString
argument_list|()
decl_stmt|;
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|JsonConfiguration
name|jconf
init|=
name|mapper
operator|.
name|readValue
argument_list|(
name|jsonStr
argument_list|,
name|JsonConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
name|int
name|defaultLength
init|=
name|jconf
operator|.
name|getProperties
argument_list|()
operator|.
name|length
decl_stmt|;
comment|// add 3 keys to the existing configuration properties
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|CONFIG
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.key1"
argument_list|,
literal|"value1"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.key2"
argument_list|,
literal|"value2"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.key3"
argument_list|,
literal|"value3"
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|Path
name|fileResource
init|=
operator|new
name|Path
argument_list|(
name|CONFIG
argument_list|)
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
name|fileResource
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|outWriter
operator|=
operator|new
name|StringWriter
argument_list|()
expr_stmt|;
name|Configuration
operator|.
name|dumpConfiguration
argument_list|(
name|conf
argument_list|,
name|outWriter
argument_list|)
expr_stmt|;
name|jsonStr
operator|=
name|outWriter
operator|.
name|toString
argument_list|()
expr_stmt|;
name|mapper
operator|=
operator|new
name|ObjectMapper
argument_list|()
expr_stmt|;
name|jconf
operator|=
name|mapper
operator|.
name|readValue
argument_list|(
name|jsonStr
argument_list|,
name|JsonConfiguration
operator|.
name|class
argument_list|)
expr_stmt|;
name|int
name|length
init|=
name|jconf
operator|.
name|getProperties
argument_list|()
operator|.
name|length
decl_stmt|;
comment|// check for consistency in the number of properties parsed in Json format.
name|assertEquals
argument_list|(
name|length
argument_list|,
name|defaultLength
operator|+
literal|3
argument_list|)
expr_stmt|;
comment|//change few keys in another resource file
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|CONFIG2
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.key1"
argument_list|,
literal|"newValue1"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.key2"
argument_list|,
literal|"newValue2"
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|Path
name|fileResource1
init|=
operator|new
name|Path
argument_list|(
name|CONFIG2
argument_list|)
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
name|fileResource1
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|outWriter
operator|=
operator|new
name|StringWriter
argument_list|()
expr_stmt|;
name|Configuration
operator|.
name|dumpConfiguration
argument_list|(
name|conf
argument_list|,
name|outWriter
argument_list|)
expr_stmt|;
name|jsonStr
operator|=
name|outWriter
operator|.
name|toString
argument_list|()
expr_stmt|;
name|mapper
operator|=
operator|new
name|ObjectMapper
argument_list|()
expr_stmt|;
name|jconf
operator|=
name|mapper
operator|.
name|readValue
argument_list|(
name|jsonStr
argument_list|,
name|JsonConfiguration
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// put the keys and their corresponding attributes into a hashmap for their
comment|// efficient retrieval
name|HashMap
argument_list|<
name|String
argument_list|,
name|JsonProperty
argument_list|>
name|confDump
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|JsonProperty
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|JsonProperty
name|prop
range|:
name|jconf
operator|.
name|getProperties
argument_list|()
control|)
block|{
name|confDump
operator|.
name|put
argument_list|(
name|prop
operator|.
name|getKey
argument_list|()
argument_list|,
name|prop
argument_list|)
expr_stmt|;
block|}
comment|// check if the value and resource of test.key1 is changed
name|assertEquals
argument_list|(
literal|"newValue1"
argument_list|,
name|confDump
operator|.
name|get
argument_list|(
literal|"test.key1"
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|confDump
operator|.
name|get
argument_list|(
literal|"test.key1"
argument_list|)
operator|.
name|getIsFinal
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fileResource1
operator|.
name|toString
argument_list|()
argument_list|,
name|confDump
operator|.
name|get
argument_list|(
literal|"test.key1"
argument_list|)
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
comment|// check if final parameter test.key2 is not changed, since it is first
comment|// loaded as final parameter
name|assertEquals
argument_list|(
literal|"value2"
argument_list|,
name|confDump
operator|.
name|get
argument_list|(
literal|"test.key2"
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|confDump
operator|.
name|get
argument_list|(
literal|"test.key2"
argument_list|)
operator|.
name|getIsFinal
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fileResource
operator|.
name|toString
argument_list|()
argument_list|,
name|confDump
operator|.
name|get
argument_list|(
literal|"test.key2"
argument_list|)
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
comment|// check for other keys which are not modified later
name|assertEquals
argument_list|(
literal|"value3"
argument_list|,
name|confDump
operator|.
name|get
argument_list|(
literal|"test.key3"
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|confDump
operator|.
name|get
argument_list|(
literal|"test.key3"
argument_list|)
operator|.
name|getIsFinal
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fileResource
operator|.
name|toString
argument_list|()
argument_list|,
name|confDump
operator|.
name|get
argument_list|(
literal|"test.key3"
argument_list|)
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
comment|// check for resource to be "Unknown" for keys which are loaded using 'set'
comment|// and expansion of properties
name|conf
operator|.
name|set
argument_list|(
literal|"test.key4"
argument_list|,
literal|"value4"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"test.key5"
argument_list|,
literal|"value5"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"test.key6"
argument_list|,
literal|"${test.key5}"
argument_list|)
expr_stmt|;
name|outWriter
operator|=
operator|new
name|StringWriter
argument_list|()
expr_stmt|;
name|Configuration
operator|.
name|dumpConfiguration
argument_list|(
name|conf
argument_list|,
name|outWriter
argument_list|)
expr_stmt|;
name|jsonStr
operator|=
name|outWriter
operator|.
name|toString
argument_list|()
expr_stmt|;
name|mapper
operator|=
operator|new
name|ObjectMapper
argument_list|()
expr_stmt|;
name|jconf
operator|=
name|mapper
operator|.
name|readValue
argument_list|(
name|jsonStr
argument_list|,
name|JsonConfiguration
operator|.
name|class
argument_list|)
expr_stmt|;
name|confDump
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|JsonProperty
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|JsonProperty
name|prop
range|:
name|jconf
operator|.
name|getProperties
argument_list|()
control|)
block|{
name|confDump
operator|.
name|put
argument_list|(
name|prop
operator|.
name|getKey
argument_list|()
argument_list|,
name|prop
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"value5"
argument_list|,
name|confDump
operator|.
name|get
argument_list|(
literal|"test.key6"
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"programmatically"
argument_list|,
name|confDump
operator|.
name|get
argument_list|(
literal|"test.key4"
argument_list|)
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
name|outWriter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDumpConfiguratioWithoutDefaults ()
specifier|public
name|void
name|testDumpConfiguratioWithoutDefaults
parameter_list|()
throws|throws
name|IOException
block|{
comment|// check for case when default resources are not loaded
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|StringWriter
name|outWriter
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|Configuration
operator|.
name|dumpConfiguration
argument_list|(
name|config
argument_list|,
name|outWriter
argument_list|)
expr_stmt|;
name|String
name|jsonStr
init|=
name|outWriter
operator|.
name|toString
argument_list|()
decl_stmt|;
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|JsonConfiguration
name|jconf
init|=
name|mapper
operator|.
name|readValue
argument_list|(
name|jsonStr
argument_list|,
name|JsonConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//ensure that no properties are loaded.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|jconf
operator|.
name|getProperties
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// add 2 keys
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|CONFIG
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.key1"
argument_list|,
literal|"value1"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.key2"
argument_list|,
literal|"value2"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|Path
name|fileResource
init|=
operator|new
name|Path
argument_list|(
name|CONFIG
argument_list|)
decl_stmt|;
name|config
operator|.
name|addResource
argument_list|(
name|fileResource
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|outWriter
operator|=
operator|new
name|StringWriter
argument_list|()
expr_stmt|;
name|Configuration
operator|.
name|dumpConfiguration
argument_list|(
name|config
argument_list|,
name|outWriter
argument_list|)
expr_stmt|;
name|jsonStr
operator|=
name|outWriter
operator|.
name|toString
argument_list|()
expr_stmt|;
name|mapper
operator|=
operator|new
name|ObjectMapper
argument_list|()
expr_stmt|;
name|jconf
operator|=
name|mapper
operator|.
name|readValue
argument_list|(
name|jsonStr
argument_list|,
name|JsonConfiguration
operator|.
name|class
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|JsonProperty
argument_list|>
name|confDump
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|JsonProperty
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|JsonProperty
name|prop
range|:
name|jconf
operator|.
name|getProperties
argument_list|()
control|)
block|{
name|confDump
operator|.
name|put
argument_list|(
name|prop
operator|.
name|getKey
argument_list|()
argument_list|,
name|prop
argument_list|)
expr_stmt|;
block|}
comment|//ensure only 2 keys are loaded
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|jconf
operator|.
name|getProperties
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
comment|//ensure the values are consistent
name|assertEquals
argument_list|(
name|confDump
operator|.
name|get
argument_list|(
literal|"test.key1"
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|,
literal|"value1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|confDump
operator|.
name|get
argument_list|(
literal|"test.key2"
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|,
literal|"value2"
argument_list|)
expr_stmt|;
comment|//check the final tag
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|confDump
operator|.
name|get
argument_list|(
literal|"test.key1"
argument_list|)
operator|.
name|getIsFinal
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|confDump
operator|.
name|get
argument_list|(
literal|"test.key2"
argument_list|)
operator|.
name|getIsFinal
argument_list|()
argument_list|)
expr_stmt|;
comment|//check the resource for each property
for|for
control|(
name|JsonProperty
name|prop
range|:
name|jconf
operator|.
name|getProperties
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|fileResource
operator|.
name|toString
argument_list|()
argument_list|,
name|prop
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDumpSensitiveProperty ()
specifier|public
name|void
name|testDumpSensitiveProperty
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|myPassword
init|=
literal|"ThisIsMyPassword"
decl_stmt|;
name|Configuration
name|testConf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|CONFIG
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.password"
argument_list|,
name|myPassword
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|Path
name|fileResource
init|=
operator|new
name|Path
argument_list|(
name|CONFIG
argument_list|)
decl_stmt|;
name|testConf
operator|.
name|addResource
argument_list|(
name|fileResource
argument_list|)
expr_stmt|;
try|try
init|(
name|StringWriter
name|outWriter
init|=
operator|new
name|StringWriter
argument_list|()
init|)
block|{
name|testConf
operator|.
name|set
argument_list|(
name|SENSITIVE_CONFIG_KEYS
argument_list|,
literal|"password$"
argument_list|)
expr_stmt|;
name|Configuration
operator|.
name|dumpConfiguration
argument_list|(
name|testConf
argument_list|,
literal|"test.password"
argument_list|,
name|outWriter
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|outWriter
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|myPassword
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDumpSensitiveConfiguration ()
specifier|public
name|void
name|testDumpSensitiveConfiguration
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|myPassword
init|=
literal|"ThisIsMyPassword"
decl_stmt|;
name|Configuration
name|testConf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|CONFIG
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.password"
argument_list|,
name|myPassword
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|Path
name|fileResource
init|=
operator|new
name|Path
argument_list|(
name|CONFIG
argument_list|)
decl_stmt|;
name|testConf
operator|.
name|addResource
argument_list|(
name|fileResource
argument_list|)
expr_stmt|;
try|try
init|(
name|StringWriter
name|outWriter
init|=
operator|new
name|StringWriter
argument_list|()
init|)
block|{
name|testConf
operator|.
name|set
argument_list|(
name|SENSITIVE_CONFIG_KEYS
argument_list|,
literal|"password$"
argument_list|)
expr_stmt|;
name|Configuration
operator|.
name|dumpConfiguration
argument_list|(
name|testConf
argument_list|,
name|outWriter
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|outWriter
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|myPassword
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGetValByRegex ()
specifier|public
name|void
name|testGetValByRegex
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|String
name|key1
init|=
literal|"t.abc.key1"
decl_stmt|;
name|String
name|key2
init|=
literal|"t.abc.key2"
decl_stmt|;
name|String
name|key3
init|=
literal|"tt.abc.key3"
decl_stmt|;
name|String
name|key4
init|=
literal|"t.abc.ey3"
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|key1
argument_list|,
literal|"value1"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|key2
argument_list|,
literal|"value2"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|key3
argument_list|,
literal|"value3"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|key4
argument_list|,
literal|"value3"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|res
init|=
name|conf
operator|.
name|getValByRegex
argument_list|(
literal|"^t\\..*\\.key\\d"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Conf didn't get key "
operator|+
name|key1
argument_list|,
name|res
operator|.
name|containsKey
argument_list|(
name|key1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Conf didn't get key "
operator|+
name|key2
argument_list|,
name|res
operator|.
name|containsKey
argument_list|(
name|key2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Picked out wrong key "
operator|+
name|key3
argument_list|,
operator|!
name|res
operator|.
name|containsKey
argument_list|(
name|key3
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Picked out wrong key "
operator|+
name|key4
argument_list|,
operator|!
name|res
operator|.
name|containsKey
argument_list|(
name|key4
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetClassesShouldReturnDefaultValue ()
specifier|public
name|void
name|testGetClassesShouldReturnDefaultValue
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|classes
init|=
name|config
operator|.
name|getClasses
argument_list|(
literal|"testClassName"
argument_list|,
name|Configuration
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Not returning expected number of classes. Number of returned classes ="
operator|+
name|classes
operator|.
name|length
argument_list|,
literal|1
argument_list|,
name|classes
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Not returning the default class Name"
argument_list|,
name|Configuration
operator|.
name|class
argument_list|,
name|classes
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetClassesShouldReturnEmptyArray ()
specifier|public
name|void
name|testGetClassesShouldReturnEmptyArray
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|config
operator|.
name|set
argument_list|(
literal|"testClassName"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|classes
init|=
name|config
operator|.
name|getClasses
argument_list|(
literal|"testClassName"
argument_list|,
name|Configuration
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Not returning expected number of classes. Number of returned classes ="
operator|+
name|classes
operator|.
name|length
argument_list|,
literal|0
argument_list|,
name|classes
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSettingValueNull ()
specifier|public
name|void
name|testSettingValueNull
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
try|try
block|{
name|config
operator|.
name|set
argument_list|(
literal|"testClassName"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should throw an IllegalArgumentException exception "
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|instanceof
name|IllegalArgumentException
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"The value of property testClassName must not be null"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSettingKeyNull ()
specifier|public
name|void
name|testSettingKeyNull
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
try|try
block|{
name|config
operator|.
name|set
argument_list|(
literal|null
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should throw an IllegalArgumentException exception "
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|instanceof
name|IllegalArgumentException
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"Property name must not be null"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testInvalidSubstitution ()
specifier|public
name|void
name|testInvalidSubstitution
parameter_list|()
block|{
specifier|final
name|Configuration
name|configuration
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|// 2-var loops
comment|//
specifier|final
name|String
name|key
init|=
literal|"test.random.key"
decl_stmt|;
for|for
control|(
name|String
name|keyExpression
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|"${"
operator|+
name|key
operator|+
literal|"}"
argument_list|,
literal|"foo${"
operator|+
name|key
operator|+
literal|"}"
argument_list|,
literal|"foo${"
operator|+
name|key
operator|+
literal|"}bar"
argument_list|,
literal|"${"
operator|+
name|key
operator|+
literal|"}bar"
argument_list|)
control|)
block|{
name|configuration
operator|.
name|set
argument_list|(
name|key
argument_list|,
name|keyExpression
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected value"
argument_list|,
name|keyExpression
argument_list|,
name|configuration
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testIncompleteSubbing ()
specifier|public
name|void
name|testIncompleteSubbing
parameter_list|()
block|{
name|Configuration
name|configuration
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|String
name|key
init|=
literal|"test.random.key"
decl_stmt|;
for|for
control|(
name|String
name|keyExpression
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|"{}"
argument_list|,
literal|"${}"
argument_list|,
literal|"{"
operator|+
name|key
argument_list|,
literal|"${"
operator|+
name|key
argument_list|,
literal|"foo${"
operator|+
name|key
argument_list|,
literal|"foo${"
operator|+
name|key
operator|+
literal|"bar"
argument_list|,
literal|"foo{"
operator|+
name|key
operator|+
literal|"}bar"
argument_list|,
literal|"${"
operator|+
name|key
operator|+
literal|"bar"
argument_list|)
control|)
block|{
name|configuration
operator|.
name|set
argument_list|(
name|key
argument_list|,
name|keyExpression
argument_list|)
expr_stmt|;
name|String
name|value
init|=
name|configuration
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected value "
operator|+
name|value
argument_list|,
name|value
operator|.
name|equals
argument_list|(
name|keyExpression
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testBoolean ()
specifier|public
name|void
name|testBoolean
parameter_list|()
block|{
name|boolean
name|value
init|=
literal|true
decl_stmt|;
name|Configuration
name|configuration
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|setBoolean
argument_list|(
literal|"value"
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
name|configuration
operator|.
name|getBoolean
argument_list|(
literal|"value"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBooleanIfUnset ()
specifier|public
name|void
name|testBooleanIfUnset
parameter_list|()
block|{
name|boolean
name|value
init|=
literal|true
decl_stmt|;
name|Configuration
name|configuration
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|setBooleanIfUnset
argument_list|(
literal|"value"
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
name|configuration
operator|.
name|getBoolean
argument_list|(
literal|"value"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setBooleanIfUnset
argument_list|(
literal|"value"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
name|configuration
operator|.
name|getBoolean
argument_list|(
literal|"value"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFloat ()
specifier|public
name|void
name|testFloat
parameter_list|()
block|{
name|float
name|value
init|=
literal|1.0F
decl_stmt|;
name|Configuration
name|configuration
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|setFloat
argument_list|(
literal|"value"
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
name|configuration
operator|.
name|getFloat
argument_list|(
literal|"value"
argument_list|,
literal|0.0F
argument_list|)
argument_list|,
name|DOUBLE_DELTA
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDouble ()
specifier|public
name|void
name|testDouble
parameter_list|()
block|{
name|double
name|value
init|=
literal|1.0D
decl_stmt|;
name|Configuration
name|configuration
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|setDouble
argument_list|(
literal|"value"
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
name|configuration
operator|.
name|getDouble
argument_list|(
literal|"value"
argument_list|,
literal|0.0D
argument_list|)
argument_list|,
name|DOUBLE_DELTA
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInt ()
specifier|public
name|void
name|testInt
parameter_list|()
block|{
name|int
name|value
init|=
literal|1
decl_stmt|;
name|Configuration
name|configuration
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|setInt
argument_list|(
literal|"value"
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
name|configuration
operator|.
name|getInt
argument_list|(
literal|"value"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLong ()
specifier|public
name|void
name|testLong
parameter_list|()
block|{
name|long
name|value
init|=
literal|1L
decl_stmt|;
name|Configuration
name|configuration
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|setLong
argument_list|(
literal|"value"
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
name|configuration
operator|.
name|getLong
argument_list|(
literal|"value"
argument_list|,
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStrings ()
specifier|public
name|void
name|testStrings
parameter_list|()
block|{
name|String
index|[]
name|strings
init|=
block|{
literal|"FOO"
block|,
literal|"BAR"
block|}
decl_stmt|;
name|Configuration
name|configuration
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|setStrings
argument_list|(
literal|"strings"
argument_list|,
name|strings
argument_list|)
expr_stmt|;
name|String
index|[]
name|returnStrings
init|=
name|configuration
operator|.
name|getStrings
argument_list|(
literal|"strings"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|returnStrings
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|strings
index|[
name|i
index|]
argument_list|,
name|returnStrings
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSetPattern ()
specifier|public
name|void
name|testSetPattern
parameter_list|()
block|{
name|Pattern
name|testPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"a+b"
argument_list|)
decl_stmt|;
name|Configuration
name|configuration
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|setPattern
argument_list|(
literal|"testPattern"
argument_list|,
name|testPattern
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testPattern
operator|.
name|pattern
argument_list|()
argument_list|,
name|configuration
operator|.
name|getPattern
argument_list|(
literal|"testPattern"
argument_list|,
name|Pattern
operator|.
name|compile
argument_list|(
literal|""
argument_list|)
argument_list|)
operator|.
name|pattern
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetClassByNameOrNull ()
specifier|public
name|void
name|testGetClassByNameOrNull
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|config
operator|.
name|getClassByNameOrNull
argument_list|(
literal|"java.lang.Object"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetFinalParameters ()
specifier|public
name|void
name|testGetFinalParameters
parameter_list|()
throws|throws
name|Exception
block|{
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|CONFIG
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|declareProperty
argument_list|(
literal|"my.var"
argument_list|,
literal|"x"
argument_list|,
literal|"x"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|Path
name|fileResource
init|=
operator|new
name|Path
argument_list|(
name|CONFIG
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|finalParameters
init|=
name|conf
operator|.
name|getFinalParameters
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
literal|"my.var already exists"
argument_list|,
name|finalParameters
operator|.
name|contains
argument_list|(
literal|"my.var"
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
name|fileResource
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"my.var is undefined"
argument_list|,
literal|"x"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"my.var"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"finalparams not copied"
argument_list|,
name|finalParameters
operator|.
name|contains
argument_list|(
literal|"my.var"
argument_list|)
argument_list|)
expr_stmt|;
name|finalParameters
operator|=
name|conf
operator|.
name|getFinalParameters
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"my.var is not final"
argument_list|,
name|finalParameters
operator|.
name|contains
argument_list|(
literal|"my.var"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * A test to check whether this thread goes into infinite loop because of    * destruction of data structure by resize of Map. This problem was reported    * by SPARK-2546.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testConcurrentAccesses ()
specifier|public
name|void
name|testConcurrentAccesses
parameter_list|()
throws|throws
name|Exception
block|{
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|CONFIG
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|declareProperty
argument_list|(
literal|"some.config"
argument_list|,
literal|"xyz"
argument_list|,
literal|"xyz"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|Path
name|fileResource
init|=
operator|new
name|Path
argument_list|(
name|CONFIG
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
name|fileResource
argument_list|)
expr_stmt|;
class|class
name|ConfigModifyThread
extends|extends
name|Thread
block|{
specifier|final
specifier|private
name|Configuration
name|config
decl_stmt|;
specifier|final
specifier|private
name|String
name|prefix
decl_stmt|;
specifier|public
name|ConfigModifyThread
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|config
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|prefix
operator|=
name|prefix
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10000
condition|;
name|i
operator|++
control|)
block|{
name|config
operator|.
name|set
argument_list|(
literal|"some.config.value-"
operator|+
name|prefix
operator|+
name|i
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|ArrayList
argument_list|<
name|ConfigModifyThread
argument_list|>
name|threads
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|threads
operator|.
name|add
argument_list|(
operator|new
name|ConfigModifyThread
argument_list|(
name|conf
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|t
range|:
name|threads
control|)
block|{
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|t
range|:
name|threads
control|)
block|{
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
comment|// If this test completes without going into infinite loop,
comment|// it's expected behaviour.
block|}
annotation|@
name|Test
DECL|method|testNullValueProperties ()
specifier|public
name|void
name|testNullValueProperties
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setAllowNullValueProperties
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|CONFIG
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|appendProperty
argument_list|(
literal|"attr"
argument_list|,
literal|"value"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"attr"
argument_list|,
literal|""
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|Path
name|fileResource
init|=
operator|new
name|Path
argument_list|(
name|CONFIG
argument_list|)
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
name|fileResource
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"attr"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetPasswordDeprecatedKeyStored ()
specifier|public
name|void
name|testGetPasswordDeprecatedKeyStored
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|oldKey
init|=
literal|"test.password.old.key"
decl_stmt|;
specifier|final
name|String
name|newKey
init|=
literal|"test.password.new.key"
decl_stmt|;
specifier|final
name|String
name|password
init|=
literal|"MyPasswordForDeprecatedKey"
decl_stmt|;
specifier|final
name|File
name|tmpDir
init|=
name|GenericTestUtils
operator|.
name|getRandomizedTestDir
argument_list|()
decl_stmt|;
name|tmpDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
specifier|final
name|String
name|ourUrl
init|=
operator|new
name|URI
argument_list|(
name|LocalJavaKeyStoreProvider
operator|.
name|SCHEME_NAME
argument_list|,
literal|"file"
argument_list|,
operator|new
name|File
argument_list|(
name|tmpDir
argument_list|,
literal|"test.jks"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|conf
operator|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CredentialProviderFactory
operator|.
name|CREDENTIAL_PROVIDER_PATH
argument_list|,
name|ourUrl
argument_list|)
expr_stmt|;
name|CredentialProvider
name|provider
init|=
name|CredentialProviderFactory
operator|.
name|getProviders
argument_list|(
name|conf
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|provider
operator|.
name|createCredentialEntry
argument_list|(
name|oldKey
argument_list|,
name|password
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
name|provider
operator|.
name|flush
argument_list|()
expr_stmt|;
name|Configuration
operator|.
name|addDeprecation
argument_list|(
name|oldKey
argument_list|,
name|newKey
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|conf
operator|.
name|getPassword
argument_list|(
name|newKey
argument_list|)
argument_list|,
name|CoreMatchers
operator|.
name|is
argument_list|(
name|password
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|conf
operator|.
name|getPassword
argument_list|(
name|oldKey
argument_list|)
argument_list|,
name|CoreMatchers
operator|.
name|is
argument_list|(
name|password
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|tmpDir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetPasswordByDeprecatedKey ()
specifier|public
name|void
name|testGetPasswordByDeprecatedKey
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|oldKey
init|=
literal|"test.password.old.key"
decl_stmt|;
specifier|final
name|String
name|newKey
init|=
literal|"test.password.new.key"
decl_stmt|;
specifier|final
name|String
name|password
init|=
literal|"MyPasswordForDeprecatedKey"
decl_stmt|;
specifier|final
name|File
name|tmpDir
init|=
name|GenericTestUtils
operator|.
name|getRandomizedTestDir
argument_list|()
decl_stmt|;
name|tmpDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
specifier|final
name|String
name|ourUrl
init|=
operator|new
name|URI
argument_list|(
name|LocalJavaKeyStoreProvider
operator|.
name|SCHEME_NAME
argument_list|,
literal|"file"
argument_list|,
operator|new
name|File
argument_list|(
name|tmpDir
argument_list|,
literal|"test.jks"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|conf
operator|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CredentialProviderFactory
operator|.
name|CREDENTIAL_PROVIDER_PATH
argument_list|,
name|ourUrl
argument_list|)
expr_stmt|;
name|CredentialProvider
name|provider
init|=
name|CredentialProviderFactory
operator|.
name|getProviders
argument_list|(
name|conf
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|provider
operator|.
name|createCredentialEntry
argument_list|(
name|newKey
argument_list|,
name|password
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
name|provider
operator|.
name|flush
argument_list|()
expr_stmt|;
name|Configuration
operator|.
name|addDeprecation
argument_list|(
name|oldKey
argument_list|,
name|newKey
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|conf
operator|.
name|getPassword
argument_list|(
name|newKey
argument_list|)
argument_list|,
name|CoreMatchers
operator|.
name|is
argument_list|(
name|password
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|conf
operator|.
name|getPassword
argument_list|(
name|oldKey
argument_list|)
argument_list|,
name|CoreMatchers
operator|.
name|is
argument_list|(
name|password
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|tmpDir
argument_list|)
expr_stmt|;
block|}
DECL|method|main (String[] argv)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|argv
parameter_list|)
throws|throws
name|Exception
block|{
name|junit
operator|.
name|textui
operator|.
name|TestRunner
operator|.
name|main
argument_list|(
operator|new
name|String
index|[]
block|{
name|TestConfiguration
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetAllPropertiesByTags ()
specifier|public
name|void
name|testGetAllPropertiesByTags
parameter_list|()
throws|throws
name|Exception
block|{
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|CONFIG_CORE
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|appendPropertyByTag
argument_list|(
literal|"dfs.cblock.trace.io"
argument_list|,
literal|"false"
argument_list|,
literal|"DEBUG"
argument_list|)
expr_stmt|;
name|appendPropertyByTag
argument_list|(
literal|"dfs.replication"
argument_list|,
literal|"1"
argument_list|,
literal|"PERFORMANCE,REQUIRED"
argument_list|)
expr_stmt|;
name|appendPropertyByTag
argument_list|(
literal|"dfs.namenode.logging.level"
argument_list|,
literal|"INFO"
argument_list|,
literal|"CLIENT,DEBUG"
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|Path
name|fileResource
init|=
operator|new
name|Path
argument_list|(
name|CONFIG_CORE
argument_list|)
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
name|fileResource
argument_list|)
expr_stmt|;
name|conf
operator|.
name|getProps
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|PropertyTag
argument_list|>
name|tagList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|tagList
operator|.
name|add
argument_list|(
name|CorePropertyTag
operator|.
name|REQUIRED
argument_list|)
expr_stmt|;
name|tagList
operator|.
name|add
argument_list|(
name|CorePropertyTag
operator|.
name|PERFORMANCE
argument_list|)
expr_stmt|;
name|tagList
operator|.
name|add
argument_list|(
name|CorePropertyTag
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
name|tagList
operator|.
name|add
argument_list|(
name|CorePropertyTag
operator|.
name|CLIENT
argument_list|)
expr_stmt|;
name|Properties
name|properties
init|=
name|conf
operator|.
name|getAllPropertiesByTags
argument_list|(
name|tagList
argument_list|)
decl_stmt|;
name|String
index|[]
name|sources
init|=
name|conf
operator|.
name|getPropertySources
argument_list|(
literal|"dfs.replication"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|sources
operator|.
name|length
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|toString
argument_list|(
name|sources
argument_list|)
operator|.
name|contains
argument_list|(
literal|"core-site.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEq
argument_list|(
literal|3
argument_list|,
name|properties
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEq
argument_list|(
literal|true
argument_list|,
name|properties
operator|.
name|containsKey
argument_list|(
literal|"dfs.namenode.logging.level"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEq
argument_list|(
literal|true
argument_list|,
name|properties
operator|.
name|containsKey
argument_list|(
literal|"dfs.replication"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEq
argument_list|(
literal|true
argument_list|,
name|properties
operator|.
name|containsKey
argument_list|(
literal|"dfs.cblock.trace.io"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEq
argument_list|(
literal|false
argument_list|,
name|properties
operator|.
name|containsKey
argument_list|(
literal|"namenode.host"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetAllPropertiesWithSourceByTags ()
specifier|public
name|void
name|testGetAllPropertiesWithSourceByTags
parameter_list|()
throws|throws
name|Exception
block|{
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|CONFIG
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|appendPropertyByTag
argument_list|(
literal|"dfs.cblock.trace.io"
argument_list|,
literal|"false"
argument_list|,
literal|"DEBUG"
argument_list|,
literal|"hdfs-default.xml"
argument_list|,
literal|"core-site.xml"
argument_list|)
expr_stmt|;
name|appendPropertyByTag
argument_list|(
literal|"dfs.replication"
argument_list|,
literal|"1"
argument_list|,
literal|"PERFORMANCE,HDFS"
argument_list|,
literal|"hdfs-default.xml"
argument_list|)
expr_stmt|;
name|appendPropertyByTag
argument_list|(
literal|"yarn.resourcemanager.work-preserving-recovery"
operator|+
literal|".enabled"
argument_list|,
literal|"INFO"
argument_list|,
literal|"CLIENT,DEBUG"
argument_list|,
literal|"yarn-default.xml"
argument_list|,
literal|"yarn-site"
operator|+
literal|".xml"
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|Path
name|fileResource
init|=
operator|new
name|Path
argument_list|(
name|CONFIG
argument_list|)
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
name|fileResource
argument_list|)
expr_stmt|;
name|conf
operator|.
name|getProps
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|PropertyTag
argument_list|>
name|tagList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|tagList
operator|.
name|add
argument_list|(
name|CorePropertyTag
operator|.
name|REQUIRED
argument_list|)
expr_stmt|;
name|Properties
name|properties
decl_stmt|;
name|properties
operator|=
name|conf
operator|.
name|getAllPropertiesByTags
argument_list|(
name|tagList
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
literal|3
argument_list|,
name|properties
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|tagList
operator|.
name|add
argument_list|(
name|HDFSPropertyTag
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
name|tagList
operator|.
name|add
argument_list|(
name|YarnPropertyTag
operator|.
name|CLIENT
argument_list|)
expr_stmt|;
name|tagList
operator|.
name|add
argument_list|(
name|HDFSPropertyTag
operator|.
name|PERFORMANCE
argument_list|)
expr_stmt|;
name|tagList
operator|.
name|add
argument_list|(
name|HDFSPropertyTag
operator|.
name|HDFS
argument_list|)
expr_stmt|;
name|properties
operator|=
name|conf
operator|.
name|getAllPropertiesByTags
argument_list|(
name|tagList
argument_list|)
expr_stmt|;
name|assertEq
argument_list|(
literal|3
argument_list|,
name|properties
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEq
argument_list|(
literal|true
argument_list|,
name|properties
operator|.
name|containsKey
argument_list|(
literal|"dfs.cblock.trace.io"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEq
argument_list|(
literal|true
argument_list|,
name|properties
operator|.
name|containsKey
argument_list|(
literal|"dfs.replication"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEq
argument_list|(
literal|true
argument_list|,
name|properties
operator|.
name|containsKey
argument_list|(
literal|"yarn.resourcemanager.work-preserving-recovery.enabled"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEq
argument_list|(
literal|false
argument_list|,
name|properties
operator|.
name|containsKey
argument_list|(
literal|"namenode.host"
argument_list|)
argument_list|)
expr_stmt|;
name|tagList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|tagList
operator|.
name|add
argument_list|(
name|HDFSPropertyTag
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
name|properties
operator|=
name|conf
operator|.
name|getAllPropertiesByTags
argument_list|(
name|tagList
argument_list|)
expr_stmt|;
name|assertEq
argument_list|(
literal|true
argument_list|,
name|properties
operator|.
name|containsKey
argument_list|(
literal|"dfs.cblock.trace.io"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEq
argument_list|(
literal|false
argument_list|,
name|properties
operator|.
name|containsKey
argument_list|(
literal|"yarn.resourcemanager"
operator|+
literal|".work-preserving-recovery"
argument_list|)
argument_list|)
expr_stmt|;
name|tagList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|tagList
operator|.
name|add
argument_list|(
name|YarnPropertyTag
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
name|properties
operator|=
name|conf
operator|.
name|getAllPropertiesByTags
argument_list|(
name|tagList
argument_list|)
expr_stmt|;
name|assertEq
argument_list|(
literal|false
argument_list|,
name|properties
operator|.
name|containsKey
argument_list|(
literal|"dfs.cblock.trace.io"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEq
argument_list|(
literal|true
argument_list|,
name|properties
operator|.
name|containsKey
argument_list|(
literal|"yarn.resourcemanager"
operator|+
literal|".work-preserving-recovery.enabled"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

