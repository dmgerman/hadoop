begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.conf
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|ObjectMapper
import|;
end_import

begin_class
DECL|class|TestConfiguration
specifier|public
class|class
name|TestConfiguration
extends|extends
name|TestCase
block|{
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|CONFIG
specifier|final
specifier|static
name|String
name|CONFIG
init|=
operator|new
name|File
argument_list|(
literal|"./test-config.xml"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
DECL|field|CONFIG2
specifier|final
specifier|static
name|String
name|CONFIG2
init|=
operator|new
name|File
argument_list|(
literal|"./test-config2.xml"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
DECL|field|RAN
specifier|final
specifier|static
name|Random
name|RAN
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp ()
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tearDown ()
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
operator|new
name|File
argument_list|(
name|CONFIG
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
operator|new
name|File
argument_list|(
name|CONFIG2
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
DECL|method|startConfig ()
specifier|private
name|void
name|startConfig
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
literal|"<?xml version=\"1.0\"?>\n"
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"<configuration>\n"
argument_list|)
expr_stmt|;
block|}
DECL|method|endConfig ()
specifier|private
name|void
name|endConfig
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
literal|"</configuration>\n"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|addInclude (String filename)
specifier|private
name|void
name|addInclude
parameter_list|(
name|String
name|filename
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
literal|"<xi:include href=\""
operator|+
name|filename
operator|+
literal|"\" xmlns:xi=\"http://www.w3.org/2001/XInclude\"  />\n "
argument_list|)
expr_stmt|;
block|}
DECL|method|testVariableSubstitution ()
specifier|public
name|void
name|testVariableSubstitution
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|CONFIG
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|declareProperty
argument_list|(
literal|"my.int"
argument_list|,
literal|"${intvar}"
argument_list|,
literal|"42"
argument_list|)
expr_stmt|;
name|declareProperty
argument_list|(
literal|"intvar"
argument_list|,
literal|"42"
argument_list|,
literal|"42"
argument_list|)
expr_stmt|;
name|declareProperty
argument_list|(
literal|"my.base"
argument_list|,
literal|"/tmp/${user.name}"
argument_list|,
name|UNSPEC
argument_list|)
expr_stmt|;
name|declareProperty
argument_list|(
literal|"my.file"
argument_list|,
literal|"hello"
argument_list|,
literal|"hello"
argument_list|)
expr_stmt|;
name|declareProperty
argument_list|(
literal|"my.suffix"
argument_list|,
literal|".txt"
argument_list|,
literal|".txt"
argument_list|)
expr_stmt|;
name|declareProperty
argument_list|(
literal|"my.relfile"
argument_list|,
literal|"${my.file}${my.suffix}"
argument_list|,
literal|"hello.txt"
argument_list|)
expr_stmt|;
name|declareProperty
argument_list|(
literal|"my.fullfile"
argument_list|,
literal|"${my.base}/${my.file}${my.suffix}"
argument_list|,
name|UNSPEC
argument_list|)
expr_stmt|;
comment|// check that undefined variables are returned as-is
name|declareProperty
argument_list|(
literal|"my.failsexpand"
argument_list|,
literal|"a${my.undefvar}b"
argument_list|,
literal|"a${my.undefvar}b"
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|Path
name|fileResource
init|=
operator|new
name|Path
argument_list|(
name|CONFIG
argument_list|)
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
name|fileResource
argument_list|)
expr_stmt|;
for|for
control|(
name|Prop
name|p
range|:
name|props
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"p="
operator|+
name|p
operator|.
name|name
argument_list|)
expr_stmt|;
name|String
name|gotVal
init|=
name|conf
operator|.
name|get
argument_list|(
name|p
operator|.
name|name
argument_list|)
decl_stmt|;
name|String
name|gotRawVal
init|=
name|conf
operator|.
name|getRaw
argument_list|(
name|p
operator|.
name|name
argument_list|)
decl_stmt|;
name|assertEq
argument_list|(
name|p
operator|.
name|val
argument_list|,
name|gotRawVal
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|expectEval
operator|==
name|UNSPEC
condition|)
block|{
comment|// expansion is system-dependent (uses System properties)
comment|// can't do exact match so just check that all variables got expanded
name|assertTrue
argument_list|(
name|gotVal
operator|!=
literal|null
operator|&&
operator|-
literal|1
operator|==
name|gotVal
operator|.
name|indexOf
argument_list|(
literal|"${"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEq
argument_list|(
name|p
operator|.
name|expectEval
argument_list|,
name|gotVal
argument_list|)
expr_stmt|;
block|}
block|}
comment|// check that expansion also occurs for getInt()
name|assertTrue
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
literal|"intvar"
argument_list|,
operator|-
literal|1
argument_list|)
operator|==
literal|42
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
literal|"my.int"
argument_list|,
operator|-
literal|1
argument_list|)
operator|==
literal|42
argument_list|)
expr_stmt|;
block|}
DECL|method|testFinalParam ()
specifier|public
name|void
name|testFinalParam
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|CONFIG
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|declareProperty
argument_list|(
literal|"my.var"
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|Path
name|fileResource
init|=
operator|new
name|Path
argument_list|(
name|CONFIG
argument_list|)
decl_stmt|;
name|Configuration
name|conf1
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf1
operator|.
name|addResource
argument_list|(
name|fileResource
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"my var is not null"
argument_list|,
name|conf1
operator|.
name|get
argument_list|(
literal|"my.var"
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|CONFIG2
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|declareProperty
argument_list|(
literal|"my.var"
argument_list|,
literal|"myval"
argument_list|,
literal|"myval"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|fileResource
operator|=
operator|new
name|Path
argument_list|(
name|CONFIG2
argument_list|)
expr_stmt|;
name|Configuration
name|conf2
init|=
operator|new
name|Configuration
argument_list|(
name|conf1
argument_list|)
decl_stmt|;
name|conf2
operator|.
name|addResource
argument_list|(
name|fileResource
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"my var is not final"
argument_list|,
name|conf2
operator|.
name|get
argument_list|(
literal|"my.var"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertEq (Object a, Object b)
specifier|public
specifier|static
name|void
name|assertEq
parameter_list|(
name|Object
name|a
parameter_list|,
name|Object
name|b
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"assertEq: "
operator|+
name|a
operator|+
literal|", "
operator|+
name|b
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
DECL|class|Prop
specifier|static
class|class
name|Prop
block|{
DECL|field|name
name|String
name|name
decl_stmt|;
DECL|field|val
name|String
name|val
decl_stmt|;
DECL|field|expectEval
name|String
name|expectEval
decl_stmt|;
block|}
DECL|field|UNSPEC
specifier|final
name|String
name|UNSPEC
init|=
literal|null
decl_stmt|;
DECL|field|props
name|ArrayList
argument_list|<
name|Prop
argument_list|>
name|props
init|=
operator|new
name|ArrayList
argument_list|<
name|Prop
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|declareProperty (String name, String val, String expectEval)
name|void
name|declareProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|val
parameter_list|,
name|String
name|expectEval
parameter_list|)
throws|throws
name|IOException
block|{
name|declareProperty
argument_list|(
name|name
argument_list|,
name|val
argument_list|,
name|expectEval
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|declareProperty (String name, String val, String expectEval, boolean isFinal)
name|void
name|declareProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|val
parameter_list|,
name|String
name|expectEval
parameter_list|,
name|boolean
name|isFinal
parameter_list|)
throws|throws
name|IOException
block|{
name|appendProperty
argument_list|(
name|name
argument_list|,
name|val
argument_list|,
name|isFinal
argument_list|)
expr_stmt|;
name|Prop
name|p
init|=
operator|new
name|Prop
argument_list|()
decl_stmt|;
name|p
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|p
operator|.
name|val
operator|=
name|val
expr_stmt|;
name|p
operator|.
name|expectEval
operator|=
name|expectEval
expr_stmt|;
name|props
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
DECL|method|appendProperty (String name, String val)
name|void
name|appendProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|appendProperty
argument_list|(
name|name
argument_list|,
name|val
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|appendProperty (String name, String val, boolean isFinal)
name|void
name|appendProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|val
parameter_list|,
name|boolean
name|isFinal
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
literal|"<property>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"<name>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"</name>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"<value>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"</value>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|isFinal
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
literal|"<final>true</final>"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|write
argument_list|(
literal|"</property>\n"
argument_list|)
expr_stmt|;
block|}
DECL|method|testOverlay ()
specifier|public
name|void
name|testOverlay
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|CONFIG
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|appendProperty
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"b"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"d"
argument_list|,
literal|"e"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"e"
argument_list|,
literal|"f"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|CONFIG2
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|appendProperty
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"b"
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"e"
argument_list|,
literal|"e"
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|Path
name|fileResource
init|=
operator|new
name|Path
argument_list|(
name|CONFIG
argument_list|)
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
name|fileResource
argument_list|)
expr_stmt|;
comment|//set dynamically something
name|conf
operator|.
name|set
argument_list|(
literal|"c"
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"a"
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
name|Configuration
name|clone
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|clone
operator|.
name|addResource
argument_list|(
operator|new
name|Path
argument_list|(
name|CONFIG2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|clone
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|clone
operator|.
name|get
argument_list|(
literal|"b"
argument_list|)
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|clone
operator|.
name|get
argument_list|(
literal|"c"
argument_list|)
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|clone
operator|.
name|get
argument_list|(
literal|"d"
argument_list|)
argument_list|,
literal|"e"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|clone
operator|.
name|get
argument_list|(
literal|"e"
argument_list|)
argument_list|,
literal|"f"
argument_list|)
expr_stmt|;
block|}
DECL|method|testCommentsInValue ()
specifier|public
name|void
name|testCommentsInValue
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|CONFIG
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|appendProperty
argument_list|(
literal|"my.comment"
argument_list|,
literal|"this<!--comment here--> contains a comment"
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|Path
name|fileResource
init|=
operator|new
name|Path
argument_list|(
name|CONFIG
argument_list|)
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
name|fileResource
argument_list|)
expr_stmt|;
comment|//two spaces one after "this", one before "contains"
name|assertEquals
argument_list|(
literal|"this  contains a comment"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"my.comment"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testTrim ()
specifier|public
name|void
name|testTrim
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|CONFIG
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|String
index|[]
name|whitespaces
init|=
block|{
literal|""
block|,
literal|" "
block|,
literal|"\n"
block|,
literal|"\t"
block|}
decl_stmt|;
name|String
index|[]
name|name
init|=
operator|new
name|String
index|[
literal|100
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|name
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|name
index|[
name|i
index|]
operator|=
literal|"foo"
operator|+
name|i
expr_stmt|;
name|StringBuilder
name|prefix
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|StringBuilder
name|postfix
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|3
condition|;
name|j
operator|++
control|)
block|{
name|prefix
operator|.
name|append
argument_list|(
name|whitespaces
index|[
name|RAN
operator|.
name|nextInt
argument_list|(
name|whitespaces
operator|.
name|length
argument_list|)
index|]
argument_list|)
expr_stmt|;
name|postfix
operator|.
name|append
argument_list|(
name|whitespaces
index|[
name|RAN
operator|.
name|nextInt
argument_list|(
name|whitespaces
operator|.
name|length
argument_list|)
index|]
argument_list|)
expr_stmt|;
block|}
name|appendProperty
argument_list|(
name|prefix
operator|+
name|name
index|[
name|i
index|]
operator|+
name|postfix
argument_list|,
name|name
index|[
name|i
index|]
operator|+
literal|".value"
argument_list|)
expr_stmt|;
block|}
name|endConfig
argument_list|()
expr_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
operator|new
name|Path
argument_list|(
name|CONFIG
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|n
range|:
name|name
control|)
block|{
name|assertEquals
argument_list|(
name|n
operator|+
literal|".value"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|n
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testGetLocalPath ()
specifier|public
name|void
name|testGetLocalPath
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|String
index|[]
name|dirs
init|=
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|"c"
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dirs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|dirs
index|[
name|i
index|]
operator|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|)
argument_list|,
name|dirs
index|[
name|i
index|]
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|conf
operator|.
name|set
argument_list|(
literal|"dirs"
argument_list|,
name|StringUtils
operator|.
name|join
argument_list|(
name|dirs
argument_list|,
literal|","
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|String
name|localPath
init|=
name|conf
operator|.
name|getLocalPath
argument_list|(
literal|"dirs"
argument_list|,
literal|"dir"
operator|+
name|i
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Path doesn't end in specified dir: "
operator|+
name|localPath
argument_list|,
name|localPath
operator|.
name|endsWith
argument_list|(
literal|"dir"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Path has internal whitespace: "
operator|+
name|localPath
argument_list|,
name|localPath
operator|.
name|contains
argument_list|(
literal|" "
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testGetFile ()
specifier|public
name|void
name|testGetFile
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|String
index|[]
name|dirs
init|=
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|"c"
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dirs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|dirs
index|[
name|i
index|]
operator|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|)
argument_list|,
name|dirs
index|[
name|i
index|]
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|conf
operator|.
name|set
argument_list|(
literal|"dirs"
argument_list|,
name|StringUtils
operator|.
name|join
argument_list|(
name|dirs
argument_list|,
literal|","
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|String
name|localPath
init|=
name|conf
operator|.
name|getFile
argument_list|(
literal|"dirs"
argument_list|,
literal|"dir"
operator|+
name|i
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Path doesn't end in specified dir: "
operator|+
name|localPath
argument_list|,
name|localPath
operator|.
name|endsWith
argument_list|(
literal|"dir"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Path has internal whitespace: "
operator|+
name|localPath
argument_list|,
name|localPath
operator|.
name|contains
argument_list|(
literal|" "
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testToString ()
specifier|public
name|void
name|testToString
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|CONFIG
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|Path
name|fileResource
init|=
operator|new
name|Path
argument_list|(
name|CONFIG
argument_list|)
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
name|fileResource
argument_list|)
expr_stmt|;
name|String
name|expectedOutput
init|=
literal|"Configuration: core-default.xml, core-site.xml, "
operator|+
name|fileResource
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedOutput
argument_list|,
name|conf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testWriteXml ()
specifier|public
name|void
name|testWriteXml
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|conf
operator|.
name|writeXml
argument_list|(
name|baos
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|baos
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Result has proper header"
argument_list|,
name|result
operator|.
name|startsWith
argument_list|(
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?><configuration>"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Result has proper footer"
argument_list|,
name|result
operator|.
name|endsWith
argument_list|(
literal|"</configuration>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIncludes ()
specifier|public
name|void
name|testIncludes
parameter_list|()
throws|throws
name|Exception
block|{
name|tearDown
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"XXX testIncludes"
argument_list|)
expr_stmt|;
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|CONFIG2
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|appendProperty
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"c"
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|CONFIG
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|addInclude
argument_list|(
name|CONFIG2
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"e"
argument_list|,
literal|"f"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"g"
argument_list|,
literal|"h"
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
comment|// verify that the includes file contains all properties
name|Path
name|fileResource
init|=
operator|new
name|Path
argument_list|(
name|CONFIG
argument_list|)
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
name|fileResource
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"c"
argument_list|)
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"e"
argument_list|)
argument_list|,
literal|"f"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"g"
argument_list|)
argument_list|,
literal|"h"
argument_list|)
expr_stmt|;
name|tearDown
argument_list|()
expr_stmt|;
block|}
DECL|field|out
name|BufferedWriter
name|out
decl_stmt|;
DECL|method|testIntegerRanges ()
specifier|public
name|void
name|testIntegerRanges
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"first"
argument_list|,
literal|"-100"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"second"
argument_list|,
literal|"4-6,9-10,27"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"third"
argument_list|,
literal|"34-"
argument_list|)
expr_stmt|;
name|Configuration
operator|.
name|IntegerRanges
name|range
init|=
name|conf
operator|.
name|getRange
argument_list|(
literal|"first"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"first = "
operator|+
name|range
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|range
operator|.
name|isIncluded
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|range
operator|.
name|isIncluded
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|range
operator|.
name|isIncluded
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|range
operator|.
name|isIncluded
argument_list|(
literal|101
argument_list|)
argument_list|)
expr_stmt|;
name|range
operator|=
name|conf
operator|.
name|getRange
argument_list|(
literal|"second"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"second = "
operator|+
name|range
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|range
operator|.
name|isIncluded
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|range
operator|.
name|isIncluded
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|range
operator|.
name|isIncluded
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|range
operator|.
name|isIncluded
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|range
operator|.
name|isIncluded
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|range
operator|.
name|isIncluded
argument_list|(
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|range
operator|.
name|isIncluded
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|range
operator|.
name|isIncluded
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|range
operator|.
name|isIncluded
argument_list|(
literal|26
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|range
operator|.
name|isIncluded
argument_list|(
literal|27
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|range
operator|.
name|isIncluded
argument_list|(
literal|28
argument_list|)
argument_list|)
expr_stmt|;
name|range
operator|=
name|conf
operator|.
name|getRange
argument_list|(
literal|"third"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"third = "
operator|+
name|range
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|range
operator|.
name|isIncluded
argument_list|(
literal|33
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|range
operator|.
name|isIncluded
argument_list|(
literal|34
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|range
operator|.
name|isIncluded
argument_list|(
literal|100000000
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testHexValues ()
specifier|public
name|void
name|testHexValues
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|CONFIG
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.hex1"
argument_list|,
literal|"0x10"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.hex2"
argument_list|,
literal|"0xF"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.hex3"
argument_list|,
literal|"-0x10"
argument_list|)
expr_stmt|;
comment|// Invalid?
name|appendProperty
argument_list|(
literal|"test.hex4"
argument_list|,
literal|"-0x10xyz"
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|Path
name|fileResource
init|=
operator|new
name|Path
argument_list|(
name|CONFIG
argument_list|)
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
name|fileResource
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|16
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
literal|"test.hex1"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|16
argument_list|,
name|conf
operator|.
name|getLong
argument_list|(
literal|"test.hex1"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
literal|"test.hex2"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|conf
operator|.
name|getLong
argument_list|(
literal|"test.hex2"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|16
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
literal|"test.hex3"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|16
argument_list|,
name|conf
operator|.
name|getLong
argument_list|(
literal|"test.hex3"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|conf
operator|.
name|getLong
argument_list|(
literal|"test.hex4"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Property had invalid long value, but was read successfully."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
comment|// pass
block|}
try|try
block|{
name|conf
operator|.
name|getInt
argument_list|(
literal|"test.hex4"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Property had invalid int value, but was read successfully."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
comment|// pass
block|}
block|}
DECL|method|testIntegerValues ()
specifier|public
name|void
name|testIntegerValues
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|CONFIG
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.int1"
argument_list|,
literal|"20"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.int2"
argument_list|,
literal|"020"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.int3"
argument_list|,
literal|"-20"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.int4"
argument_list|,
literal|" -20 "
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.int5"
argument_list|,
literal|" -20xyz "
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|Path
name|fileResource
init|=
operator|new
name|Path
argument_list|(
name|CONFIG
argument_list|)
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
name|fileResource
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
literal|"test.int1"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|conf
operator|.
name|getLong
argument_list|(
literal|"test.int1"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|conf
operator|.
name|getLongBytes
argument_list|(
literal|"test.int1"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
literal|"test.int2"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|conf
operator|.
name|getLong
argument_list|(
literal|"test.int2"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|conf
operator|.
name|getLongBytes
argument_list|(
literal|"test.int2"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|20
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
literal|"test.int3"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|20
argument_list|,
name|conf
operator|.
name|getLong
argument_list|(
literal|"test.int3"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|20
argument_list|,
name|conf
operator|.
name|getLongBytes
argument_list|(
literal|"test.int3"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|20
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
literal|"test.int4"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|20
argument_list|,
name|conf
operator|.
name|getLong
argument_list|(
literal|"test.int4"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|20
argument_list|,
name|conf
operator|.
name|getLongBytes
argument_list|(
literal|"test.int4"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|conf
operator|.
name|getInt
argument_list|(
literal|"test.int5"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Property had invalid int value, but was read successfully."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
comment|// pass
block|}
block|}
DECL|method|testHumanReadableValues ()
specifier|public
name|void
name|testHumanReadableValues
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|CONFIG
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.humanReadableValue1"
argument_list|,
literal|"1m"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.humanReadableValue2"
argument_list|,
literal|"1M"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.humanReadableValue5"
argument_list|,
literal|"1MBCDE"
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|Path
name|fileResource
init|=
operator|new
name|Path
argument_list|(
name|CONFIG
argument_list|)
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
name|fileResource
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1048576
argument_list|,
name|conf
operator|.
name|getLongBytes
argument_list|(
literal|"test.humanReadableValue1"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1048576
argument_list|,
name|conf
operator|.
name|getLongBytes
argument_list|(
literal|"test.humanReadableValue2"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|conf
operator|.
name|getLongBytes
argument_list|(
literal|"test.humanReadableValue5"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Property had invalid human readable value, but was read successfully."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
comment|// pass
block|}
block|}
DECL|method|testBooleanValues ()
specifier|public
name|void
name|testBooleanValues
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|CONFIG
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.bool1"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.bool2"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.bool3"
argument_list|,
literal|"  true "
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.bool4"
argument_list|,
literal|" false "
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.bool5"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|Path
name|fileResource
init|=
operator|new
name|Path
argument_list|(
name|CONFIG
argument_list|)
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
name|fileResource
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|conf
operator|.
name|getBoolean
argument_list|(
literal|"test.bool1"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|conf
operator|.
name|getBoolean
argument_list|(
literal|"test.bool2"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|conf
operator|.
name|getBoolean
argument_list|(
literal|"test.bool3"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|conf
operator|.
name|getBoolean
argument_list|(
literal|"test.bool4"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|conf
operator|.
name|getBoolean
argument_list|(
literal|"test.bool5"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFloatValues ()
specifier|public
name|void
name|testFloatValues
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|CONFIG
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.float1"
argument_list|,
literal|"3.1415"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.float2"
argument_list|,
literal|"003.1415"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.float3"
argument_list|,
literal|"-3.1415"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.float4"
argument_list|,
literal|" -3.1415 "
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.float5"
argument_list|,
literal|"xyz-3.1415xyz"
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|Path
name|fileResource
init|=
operator|new
name|Path
argument_list|(
name|CONFIG
argument_list|)
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
name|fileResource
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3.1415f
argument_list|,
name|conf
operator|.
name|getFloat
argument_list|(
literal|"test.float1"
argument_list|,
literal|0.0f
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3.1415f
argument_list|,
name|conf
operator|.
name|getFloat
argument_list|(
literal|"test.float2"
argument_list|,
literal|0.0f
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|3.1415f
argument_list|,
name|conf
operator|.
name|getFloat
argument_list|(
literal|"test.float3"
argument_list|,
literal|0.0f
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|3.1415f
argument_list|,
name|conf
operator|.
name|getFloat
argument_list|(
literal|"test.float4"
argument_list|,
literal|0.0f
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|conf
operator|.
name|getFloat
argument_list|(
literal|"test.float5"
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Property had invalid float value, but was read successfully."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
comment|// pass
block|}
block|}
DECL|method|testGetClass ()
specifier|public
name|void
name|testGetClass
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|CONFIG
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.class1"
argument_list|,
literal|"java.lang.Integer"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.class2"
argument_list|,
literal|" java.lang.Integer "
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|Path
name|fileResource
init|=
operator|new
name|Path
argument_list|(
name|CONFIG
argument_list|)
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
name|fileResource
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"java.lang.Integer"
argument_list|,
name|conf
operator|.
name|getClass
argument_list|(
literal|"test.class1"
argument_list|,
literal|null
argument_list|)
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"java.lang.Integer"
argument_list|,
name|conf
operator|.
name|getClass
argument_list|(
literal|"test.class2"
argument_list|,
literal|null
argument_list|)
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetClasses ()
specifier|public
name|void
name|testGetClasses
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|CONFIG
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.classes1"
argument_list|,
literal|"java.lang.Integer,java.lang.String"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.classes2"
argument_list|,
literal|" java.lang.Integer , java.lang.String "
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|Path
name|fileResource
init|=
operator|new
name|Path
argument_list|(
name|CONFIG
argument_list|)
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
name|fileResource
argument_list|)
expr_stmt|;
name|String
index|[]
name|expectedNames
init|=
block|{
literal|"java.lang.Integer"
block|,
literal|"java.lang.String"
block|}
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|defaultClasses
init|=
block|{}
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|classes1
init|=
name|conf
operator|.
name|getClasses
argument_list|(
literal|"test.classes1"
argument_list|,
name|defaultClasses
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|classes2
init|=
name|conf
operator|.
name|getClasses
argument_list|(
literal|"test.classes2"
argument_list|,
name|defaultClasses
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|expectedNames
argument_list|,
name|extractClassNames
argument_list|(
name|classes1
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expectedNames
argument_list|,
name|extractClassNames
argument_list|(
name|classes2
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetStringCollection ()
specifier|public
name|void
name|testGetStringCollection
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|c
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|c
operator|.
name|set
argument_list|(
literal|"x"
argument_list|,
literal|" a, b\n,\nc "
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|strs
init|=
name|c
operator|.
name|getTrimmedStringCollection
argument_list|(
literal|"x"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|strs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|"c"
block|}
argument_list|,
name|strs
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check that the result is mutable
name|strs
operator|.
name|add
argument_list|(
literal|"z"
argument_list|)
expr_stmt|;
comment|// Make sure same is true for missing config
name|strs
operator|=
name|c
operator|.
name|getStringCollection
argument_list|(
literal|"does-not-exist"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|strs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|strs
operator|.
name|add
argument_list|(
literal|"z"
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetTrimmedStringCollection ()
specifier|public
name|void
name|testGetTrimmedStringCollection
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|c
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|c
operator|.
name|set
argument_list|(
literal|"x"
argument_list|,
literal|"a, b, c"
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|strs
init|=
name|c
operator|.
name|getStringCollection
argument_list|(
literal|"x"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|strs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|" b"
block|,
literal|" c"
block|}
argument_list|,
name|strs
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check that the result is mutable
name|strs
operator|.
name|add
argument_list|(
literal|"z"
argument_list|)
expr_stmt|;
comment|// Make sure same is true for missing config
name|strs
operator|=
name|c
operator|.
name|getStringCollection
argument_list|(
literal|"does-not-exist"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|strs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|strs
operator|.
name|add
argument_list|(
literal|"z"
argument_list|)
expr_stmt|;
block|}
DECL|method|extractClassNames (Class<?>[] classes)
specifier|private
specifier|static
name|String
index|[]
name|extractClassNames
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|classes
parameter_list|)
block|{
name|String
index|[]
name|classNames
init|=
operator|new
name|String
index|[
name|classes
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|classNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|classNames
index|[
name|i
index|]
operator|=
name|classes
index|[
name|i
index|]
operator|.
name|getCanonicalName
argument_list|()
expr_stmt|;
block|}
return|return
name|classNames
return|;
block|}
DECL|enum|Dingo
DECL|enumConstant|FOO
DECL|enumConstant|BAR
enum|enum
name|Dingo
block|{
name|FOO
block|,
name|BAR
block|}
empty_stmt|;
DECL|enum|Yak
DECL|enumConstant|RAB
DECL|enumConstant|FOO
enum|enum
name|Yak
block|{
name|RAB
block|,
name|FOO
block|}
empty_stmt|;
DECL|method|testEnum ()
specifier|public
name|void
name|testEnum
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setEnum
argument_list|(
literal|"test.enum"
argument_list|,
name|Dingo
operator|.
name|FOO
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|Dingo
operator|.
name|FOO
argument_list|,
name|conf
operator|.
name|getEnum
argument_list|(
literal|"test.enum"
argument_list|,
name|Dingo
operator|.
name|BAR
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|Yak
operator|.
name|FOO
argument_list|,
name|conf
operator|.
name|getEnum
argument_list|(
literal|"test.enum"
argument_list|,
name|Yak
operator|.
name|RAB
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|fail
init|=
literal|false
decl_stmt|;
try|try
block|{
name|conf
operator|.
name|setEnum
argument_list|(
literal|"test.enum"
argument_list|,
name|Dingo
operator|.
name|BAR
argument_list|)
expr_stmt|;
name|Yak
name|y
init|=
name|conf
operator|.
name|getEnum
argument_list|(
literal|"test.enum"
argument_list|,
name|Yak
operator|.
name|FOO
argument_list|)
decl_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|fail
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|fail
argument_list|)
expr_stmt|;
block|}
DECL|method|testPattern ()
specifier|public
name|void
name|testPattern
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|CONFIG
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.pattern1"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.pattern2"
argument_list|,
literal|"("
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.pattern3"
argument_list|,
literal|"a+b"
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|Path
name|fileResource
init|=
operator|new
name|Path
argument_list|(
name|CONFIG
argument_list|)
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
name|fileResource
argument_list|)
expr_stmt|;
name|Pattern
name|defaultPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"x+"
argument_list|)
decl_stmt|;
comment|// Return default if missing
name|assertEquals
argument_list|(
name|defaultPattern
operator|.
name|pattern
argument_list|()
argument_list|,
name|conf
operator|.
name|getPattern
argument_list|(
literal|"xxxxx"
argument_list|,
name|defaultPattern
argument_list|)
operator|.
name|pattern
argument_list|()
argument_list|)
expr_stmt|;
comment|// Return null if empty and default is null
name|assertNull
argument_list|(
name|conf
operator|.
name|getPattern
argument_list|(
literal|"test.pattern1"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// Return default for empty
name|assertEquals
argument_list|(
name|defaultPattern
operator|.
name|pattern
argument_list|()
argument_list|,
name|conf
operator|.
name|getPattern
argument_list|(
literal|"test.pattern1"
argument_list|,
name|defaultPattern
argument_list|)
operator|.
name|pattern
argument_list|()
argument_list|)
expr_stmt|;
comment|// Return default for malformed
name|assertEquals
argument_list|(
name|defaultPattern
operator|.
name|pattern
argument_list|()
argument_list|,
name|conf
operator|.
name|getPattern
argument_list|(
literal|"test.pattern2"
argument_list|,
name|defaultPattern
argument_list|)
operator|.
name|pattern
argument_list|()
argument_list|)
expr_stmt|;
comment|// Works for correct patterns
name|assertEquals
argument_list|(
literal|"a+b"
argument_list|,
name|conf
operator|.
name|getPattern
argument_list|(
literal|"test.pattern3"
argument_list|,
name|defaultPattern
argument_list|)
operator|.
name|pattern
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testReload ()
specifier|public
name|void
name|testReload
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|CONFIG
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.key1"
argument_list|,
literal|"final-value1"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.key2"
argument_list|,
literal|"value2"
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|Path
name|fileResource
init|=
operator|new
name|Path
argument_list|(
name|CONFIG
argument_list|)
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
name|fileResource
argument_list|)
expr_stmt|;
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|CONFIG2
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.key1"
argument_list|,
literal|"value1"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.key3"
argument_list|,
literal|"value3"
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|Path
name|fileResource1
init|=
operator|new
name|Path
argument_list|(
name|CONFIG2
argument_list|)
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
name|fileResource1
argument_list|)
expr_stmt|;
comment|// add a few values via set.
name|conf
operator|.
name|set
argument_list|(
literal|"test.key3"
argument_list|,
literal|"value4"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"test.key4"
argument_list|,
literal|"value5"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"final-value1"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"test.key1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value2"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"test.key2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value4"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"test.key3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value5"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"test.key4"
argument_list|)
argument_list|)
expr_stmt|;
comment|// change values in the test file...
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|CONFIG
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.key1"
argument_list|,
literal|"final-value1"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.key3"
argument_list|,
literal|"final-value3"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|conf
operator|.
name|reloadConfiguration
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value1"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"test.key1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// overlayed property overrides.
name|assertEquals
argument_list|(
literal|"value4"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"test.key3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"test.key2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value5"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"test.key4"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSize ()
specifier|public
name|void
name|testSize
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"a"
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"b"
argument_list|,
literal|"B"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|conf
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testClear ()
specifier|public
name|void
name|testClear
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"a"
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"b"
argument_list|,
literal|"B"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|conf
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|conf
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|Fake_ClassLoader
specifier|public
specifier|static
class|class
name|Fake_ClassLoader
extends|extends
name|ClassLoader
block|{   }
DECL|method|testClassLoader ()
specifier|public
name|void
name|testClassLoader
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setQuietMode
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClassLoader
argument_list|(
operator|new
name|Fake_ClassLoader
argument_list|()
argument_list|)
expr_stmt|;
name|Configuration
name|other
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|other
operator|.
name|getClassLoader
argument_list|()
operator|instanceof
name|Fake_ClassLoader
argument_list|)
expr_stmt|;
block|}
DECL|class|JsonConfiguration
specifier|static
class|class
name|JsonConfiguration
block|{
DECL|field|properties
name|JsonProperty
index|[]
name|properties
decl_stmt|;
DECL|method|getProperties ()
specifier|public
name|JsonProperty
index|[]
name|getProperties
parameter_list|()
block|{
return|return
name|properties
return|;
block|}
DECL|method|setProperties (JsonProperty[] properties)
specifier|public
name|void
name|setProperties
parameter_list|(
name|JsonProperty
index|[]
name|properties
parameter_list|)
block|{
name|this
operator|.
name|properties
operator|=
name|properties
expr_stmt|;
block|}
block|}
DECL|class|JsonProperty
specifier|static
class|class
name|JsonProperty
block|{
DECL|field|key
name|String
name|key
decl_stmt|;
DECL|method|getKey ()
specifier|public
name|String
name|getKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
DECL|method|setKey (String key)
specifier|public
name|void
name|setKey
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
block|}
DECL|method|getValue ()
specifier|public
name|String
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
DECL|method|setValue (String value)
specifier|public
name|void
name|setValue
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
DECL|method|getIsFinal ()
specifier|public
name|boolean
name|getIsFinal
parameter_list|()
block|{
return|return
name|isFinal
return|;
block|}
DECL|method|setIsFinal (boolean isFinal)
specifier|public
name|void
name|setIsFinal
parameter_list|(
name|boolean
name|isFinal
parameter_list|)
block|{
name|this
operator|.
name|isFinal
operator|=
name|isFinal
expr_stmt|;
block|}
DECL|method|getResource ()
specifier|public
name|String
name|getResource
parameter_list|()
block|{
return|return
name|resource
return|;
block|}
DECL|method|setResource (String resource)
specifier|public
name|void
name|setResource
parameter_list|(
name|String
name|resource
parameter_list|)
block|{
name|this
operator|.
name|resource
operator|=
name|resource
expr_stmt|;
block|}
DECL|field|value
name|String
name|value
decl_stmt|;
DECL|field|isFinal
name|boolean
name|isFinal
decl_stmt|;
DECL|field|resource
name|String
name|resource
decl_stmt|;
block|}
DECL|method|testDumpConfiguration ()
specifier|public
name|void
name|testDumpConfiguration
parameter_list|()
throws|throws
name|IOException
block|{
name|StringWriter
name|outWriter
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|Configuration
operator|.
name|dumpConfiguration
argument_list|(
name|conf
argument_list|,
name|outWriter
argument_list|)
expr_stmt|;
name|String
name|jsonStr
init|=
name|outWriter
operator|.
name|toString
argument_list|()
decl_stmt|;
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|JsonConfiguration
name|jconf
init|=
name|mapper
operator|.
name|readValue
argument_list|(
name|jsonStr
argument_list|,
name|JsonConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
name|int
name|defaultLength
init|=
name|jconf
operator|.
name|getProperties
argument_list|()
operator|.
name|length
decl_stmt|;
comment|// add 3 keys to the existing configuration properties
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|CONFIG
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.key1"
argument_list|,
literal|"value1"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.key2"
argument_list|,
literal|"value2"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.key3"
argument_list|,
literal|"value3"
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|Path
name|fileResource
init|=
operator|new
name|Path
argument_list|(
name|CONFIG
argument_list|)
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
name|fileResource
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|outWriter
operator|=
operator|new
name|StringWriter
argument_list|()
expr_stmt|;
name|Configuration
operator|.
name|dumpConfiguration
argument_list|(
name|conf
argument_list|,
name|outWriter
argument_list|)
expr_stmt|;
name|jsonStr
operator|=
name|outWriter
operator|.
name|toString
argument_list|()
expr_stmt|;
name|mapper
operator|=
operator|new
name|ObjectMapper
argument_list|()
expr_stmt|;
name|jconf
operator|=
name|mapper
operator|.
name|readValue
argument_list|(
name|jsonStr
argument_list|,
name|JsonConfiguration
operator|.
name|class
argument_list|)
expr_stmt|;
name|int
name|length
init|=
name|jconf
operator|.
name|getProperties
argument_list|()
operator|.
name|length
decl_stmt|;
comment|// check for consistency in the number of properties parsed in Json format.
name|assertEquals
argument_list|(
name|length
argument_list|,
name|defaultLength
operator|+
literal|3
argument_list|)
expr_stmt|;
comment|//change few keys in another resource file
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|CONFIG2
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.key1"
argument_list|,
literal|"newValue1"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.key2"
argument_list|,
literal|"newValue2"
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|Path
name|fileResource1
init|=
operator|new
name|Path
argument_list|(
name|CONFIG2
argument_list|)
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
name|fileResource1
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|outWriter
operator|=
operator|new
name|StringWriter
argument_list|()
expr_stmt|;
name|Configuration
operator|.
name|dumpConfiguration
argument_list|(
name|conf
argument_list|,
name|outWriter
argument_list|)
expr_stmt|;
name|jsonStr
operator|=
name|outWriter
operator|.
name|toString
argument_list|()
expr_stmt|;
name|mapper
operator|=
operator|new
name|ObjectMapper
argument_list|()
expr_stmt|;
name|jconf
operator|=
name|mapper
operator|.
name|readValue
argument_list|(
name|jsonStr
argument_list|,
name|JsonConfiguration
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// put the keys and their corresponding attributes into a hashmap for their
comment|// efficient retrieval
name|HashMap
argument_list|<
name|String
argument_list|,
name|JsonProperty
argument_list|>
name|confDump
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|JsonProperty
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|JsonProperty
name|prop
range|:
name|jconf
operator|.
name|getProperties
argument_list|()
control|)
block|{
name|confDump
operator|.
name|put
argument_list|(
name|prop
operator|.
name|getKey
argument_list|()
argument_list|,
name|prop
argument_list|)
expr_stmt|;
block|}
comment|// check if the value and resource of test.key1 is changed
name|assertEquals
argument_list|(
literal|"newValue1"
argument_list|,
name|confDump
operator|.
name|get
argument_list|(
literal|"test.key1"
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|confDump
operator|.
name|get
argument_list|(
literal|"test.key1"
argument_list|)
operator|.
name|getIsFinal
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fileResource1
operator|.
name|toString
argument_list|()
argument_list|,
name|confDump
operator|.
name|get
argument_list|(
literal|"test.key1"
argument_list|)
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
comment|// check if final parameter test.key2 is not changed, since it is first
comment|// loaded as final parameter
name|assertEquals
argument_list|(
literal|"value2"
argument_list|,
name|confDump
operator|.
name|get
argument_list|(
literal|"test.key2"
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|confDump
operator|.
name|get
argument_list|(
literal|"test.key2"
argument_list|)
operator|.
name|getIsFinal
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fileResource
operator|.
name|toString
argument_list|()
argument_list|,
name|confDump
operator|.
name|get
argument_list|(
literal|"test.key2"
argument_list|)
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
comment|// check for other keys which are not modified later
name|assertEquals
argument_list|(
literal|"value3"
argument_list|,
name|confDump
operator|.
name|get
argument_list|(
literal|"test.key3"
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|confDump
operator|.
name|get
argument_list|(
literal|"test.key3"
argument_list|)
operator|.
name|getIsFinal
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fileResource
operator|.
name|toString
argument_list|()
argument_list|,
name|confDump
operator|.
name|get
argument_list|(
literal|"test.key3"
argument_list|)
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
comment|// check for resource to be "Unknown" for keys which are loaded using 'set'
comment|// and expansion of properties
name|conf
operator|.
name|set
argument_list|(
literal|"test.key4"
argument_list|,
literal|"value4"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"test.key5"
argument_list|,
literal|"value5"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"test.key6"
argument_list|,
literal|"${test.key5}"
argument_list|)
expr_stmt|;
name|outWriter
operator|=
operator|new
name|StringWriter
argument_list|()
expr_stmt|;
name|Configuration
operator|.
name|dumpConfiguration
argument_list|(
name|conf
argument_list|,
name|outWriter
argument_list|)
expr_stmt|;
name|jsonStr
operator|=
name|outWriter
operator|.
name|toString
argument_list|()
expr_stmt|;
name|mapper
operator|=
operator|new
name|ObjectMapper
argument_list|()
expr_stmt|;
name|jconf
operator|=
name|mapper
operator|.
name|readValue
argument_list|(
name|jsonStr
argument_list|,
name|JsonConfiguration
operator|.
name|class
argument_list|)
expr_stmt|;
name|confDump
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|JsonProperty
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|JsonProperty
name|prop
range|:
name|jconf
operator|.
name|getProperties
argument_list|()
control|)
block|{
name|confDump
operator|.
name|put
argument_list|(
name|prop
operator|.
name|getKey
argument_list|()
argument_list|,
name|prop
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"value5"
argument_list|,
name|confDump
operator|.
name|get
argument_list|(
literal|"test.key6"
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unknown"
argument_list|,
name|confDump
operator|.
name|get
argument_list|(
literal|"test.key4"
argument_list|)
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
name|outWriter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testDumpConfiguratioWithoutDefaults ()
specifier|public
name|void
name|testDumpConfiguratioWithoutDefaults
parameter_list|()
throws|throws
name|IOException
block|{
comment|// check for case when default resources are not loaded
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|StringWriter
name|outWriter
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|Configuration
operator|.
name|dumpConfiguration
argument_list|(
name|config
argument_list|,
name|outWriter
argument_list|)
expr_stmt|;
name|String
name|jsonStr
init|=
name|outWriter
operator|.
name|toString
argument_list|()
decl_stmt|;
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|JsonConfiguration
name|jconf
init|=
name|mapper
operator|.
name|readValue
argument_list|(
name|jsonStr
argument_list|,
name|JsonConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//ensure that no properties are loaded.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|jconf
operator|.
name|getProperties
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// add 2 keys
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|CONFIG
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.key1"
argument_list|,
literal|"value1"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"test.key2"
argument_list|,
literal|"value2"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|Path
name|fileResource
init|=
operator|new
name|Path
argument_list|(
name|CONFIG
argument_list|)
decl_stmt|;
name|config
operator|.
name|addResource
argument_list|(
name|fileResource
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|outWriter
operator|=
operator|new
name|StringWriter
argument_list|()
expr_stmt|;
name|Configuration
operator|.
name|dumpConfiguration
argument_list|(
name|config
argument_list|,
name|outWriter
argument_list|)
expr_stmt|;
name|jsonStr
operator|=
name|outWriter
operator|.
name|toString
argument_list|()
expr_stmt|;
name|mapper
operator|=
operator|new
name|ObjectMapper
argument_list|()
expr_stmt|;
name|jconf
operator|=
name|mapper
operator|.
name|readValue
argument_list|(
name|jsonStr
argument_list|,
name|JsonConfiguration
operator|.
name|class
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|JsonProperty
argument_list|>
name|confDump
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|JsonProperty
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|JsonProperty
name|prop
range|:
name|jconf
operator|.
name|getProperties
argument_list|()
control|)
block|{
name|confDump
operator|.
name|put
argument_list|(
name|prop
operator|.
name|getKey
argument_list|()
argument_list|,
name|prop
argument_list|)
expr_stmt|;
block|}
comment|//ensure only 2 keys are loaded
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|jconf
operator|.
name|getProperties
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
comment|//ensure the values are consistent
name|assertEquals
argument_list|(
name|confDump
operator|.
name|get
argument_list|(
literal|"test.key1"
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|,
literal|"value1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|confDump
operator|.
name|get
argument_list|(
literal|"test.key2"
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|,
literal|"value2"
argument_list|)
expr_stmt|;
comment|//check the final tag
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|confDump
operator|.
name|get
argument_list|(
literal|"test.key1"
argument_list|)
operator|.
name|getIsFinal
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|confDump
operator|.
name|get
argument_list|(
literal|"test.key2"
argument_list|)
operator|.
name|getIsFinal
argument_list|()
argument_list|)
expr_stmt|;
comment|//check the resource for each property
for|for
control|(
name|JsonProperty
name|prop
range|:
name|jconf
operator|.
name|getProperties
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|fileResource
operator|.
name|toString
argument_list|()
argument_list|,
name|prop
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testGetValByRegex ()
specifier|public
name|void
name|testGetValByRegex
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|String
name|key1
init|=
literal|"t.abc.key1"
decl_stmt|;
name|String
name|key2
init|=
literal|"t.abc.key2"
decl_stmt|;
name|String
name|key3
init|=
literal|"tt.abc.key3"
decl_stmt|;
name|String
name|key4
init|=
literal|"t.abc.ey3"
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|key1
argument_list|,
literal|"value1"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|key2
argument_list|,
literal|"value2"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|key3
argument_list|,
literal|"value3"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|key4
argument_list|,
literal|"value3"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|res
init|=
name|conf
operator|.
name|getValByRegex
argument_list|(
literal|"^t\\..*\\.key\\d"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Conf didn't get key "
operator|+
name|key1
argument_list|,
name|res
operator|.
name|containsKey
argument_list|(
name|key1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Conf didn't get key "
operator|+
name|key2
argument_list|,
name|res
operator|.
name|containsKey
argument_list|(
name|key2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Picked out wrong key "
operator|+
name|key3
argument_list|,
operator|!
name|res
operator|.
name|containsKey
argument_list|(
name|key3
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Picked out wrong key "
operator|+
name|key4
argument_list|,
operator|!
name|res
operator|.
name|containsKey
argument_list|(
name|key4
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetClassesShouldReturnDefaultValue ()
specifier|public
name|void
name|testGetClassesShouldReturnDefaultValue
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|classes
init|=
name|config
operator|.
name|getClasses
argument_list|(
literal|"testClassName"
argument_list|,
name|Configuration
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Not returning expected number of classes. Number of returned classes ="
operator|+
name|classes
operator|.
name|length
argument_list|,
literal|1
argument_list|,
name|classes
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Not returning the default class Name"
argument_list|,
name|Configuration
operator|.
name|class
argument_list|,
name|classes
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetClassesShouldReturnEmptyArray ()
specifier|public
name|void
name|testGetClassesShouldReturnEmptyArray
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|config
operator|.
name|set
argument_list|(
literal|"testClassName"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|classes
init|=
name|config
operator|.
name|getClasses
argument_list|(
literal|"testClassName"
argument_list|,
name|Configuration
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Not returning expected number of classes. Number of returned classes ="
operator|+
name|classes
operator|.
name|length
argument_list|,
literal|0
argument_list|,
name|classes
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|main (String[] argv)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|argv
parameter_list|)
throws|throws
name|Exception
block|{
name|junit
operator|.
name|textui
operator|.
name|TestRunner
operator|.
name|main
argument_list|(
operator|new
name|String
index|[]
block|{
name|TestConfiguration
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

