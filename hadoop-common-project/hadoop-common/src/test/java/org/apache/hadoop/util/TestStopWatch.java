begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestStopWatch
specifier|public
class|class
name|TestStopWatch
block|{
annotation|@
name|Test
DECL|method|testStartAndStop ()
specifier|public
name|void
name|testStartAndStop
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|StopWatch
name|sw
init|=
operator|new
name|StopWatch
argument_list|()
init|)
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
name|sw
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
name|sw
operator|.
name|start
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|sw
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
name|sw
operator|.
name|stop
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|sw
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testStopInTryWithResource ()
specifier|public
name|void
name|testStopInTryWithResource
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|StopWatch
name|sw
init|=
operator|new
name|StopWatch
argument_list|()
init|)
block|{
comment|// make sure that no exception is thrown.
block|}
block|}
annotation|@
name|Test
DECL|method|testExceptions ()
specifier|public
name|void
name|testExceptions
parameter_list|()
throws|throws
name|Exception
block|{
name|StopWatch
name|sw
init|=
operator|new
name|StopWatch
argument_list|()
decl_stmt|;
try|try
block|{
name|sw
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"IllegalStateException is expected"
argument_list|,
name|e
operator|instanceof
name|IllegalStateException
argument_list|)
expr_stmt|;
block|}
name|sw
operator|.
name|reset
argument_list|()
expr_stmt|;
name|sw
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|sw
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"IllegalStateException is expected"
argument_list|,
name|e
operator|instanceof
name|IllegalStateException
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

