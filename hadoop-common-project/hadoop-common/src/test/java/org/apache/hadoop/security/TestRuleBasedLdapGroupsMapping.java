begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|RuleBasedLdapGroupsMapping
operator|.
name|CONVERSION_RULE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyInt
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|eq
import|;
end_import

begin_comment
comment|/**  * Test cases to verify the rules supported by RuleBasedLdapGroupsMapping.  */
end_comment

begin_class
DECL|class|TestRuleBasedLdapGroupsMapping
specifier|public
class|class
name|TestRuleBasedLdapGroupsMapping
block|{
annotation|@
name|Test
DECL|method|testGetGroupsToUpper ()
specifier|public
name|void
name|testGetGroupsToUpper
parameter_list|()
throws|throws
name|NamingException
block|{
name|RuleBasedLdapGroupsMapping
name|groupsMapping
init|=
name|Mockito
operator|.
name|spy
argument_list|(
operator|new
name|RuleBasedLdapGroupsMapping
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|groups
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|groups
operator|.
name|add
argument_list|(
literal|"group1"
argument_list|)
expr_stmt|;
name|groups
operator|.
name|add
argument_list|(
literal|"group2"
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
name|groups
argument_list|)
operator|.
name|when
argument_list|(
operator|(
name|LdapGroupsMapping
operator|)
name|groupsMapping
argument_list|)
operator|.
name|doGetGroups
argument_list|(
name|eq
argument_list|(
literal|"admin"
argument_list|)
argument_list|,
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|LdapGroupsMapping
operator|.
name|LDAP_URL_KEY
argument_list|,
literal|"ldap://test"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CONVERSION_RULE_KEY
argument_list|,
literal|"to_upper"
argument_list|)
expr_stmt|;
name|groupsMapping
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|groupsUpper
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|groupsUpper
operator|.
name|add
argument_list|(
literal|"GROUP1"
argument_list|)
expr_stmt|;
name|groupsUpper
operator|.
name|add
argument_list|(
literal|"GROUP2"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|groupsUpper
argument_list|,
name|groupsMapping
operator|.
name|getGroups
argument_list|(
literal|"admin"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetGroupsToLower ()
specifier|public
name|void
name|testGetGroupsToLower
parameter_list|()
throws|throws
name|NamingException
block|{
name|RuleBasedLdapGroupsMapping
name|groupsMapping
init|=
name|Mockito
operator|.
name|spy
argument_list|(
operator|new
name|RuleBasedLdapGroupsMapping
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|groups
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|groups
operator|.
name|add
argument_list|(
literal|"GROUP1"
argument_list|)
expr_stmt|;
name|groups
operator|.
name|add
argument_list|(
literal|"GROUP2"
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
name|groups
argument_list|)
operator|.
name|when
argument_list|(
operator|(
name|LdapGroupsMapping
operator|)
name|groupsMapping
argument_list|)
operator|.
name|doGetGroups
argument_list|(
name|eq
argument_list|(
literal|"admin"
argument_list|)
argument_list|,
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|LdapGroupsMapping
operator|.
name|LDAP_URL_KEY
argument_list|,
literal|"ldap://test"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CONVERSION_RULE_KEY
argument_list|,
literal|"to_lower"
argument_list|)
expr_stmt|;
name|groupsMapping
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|groupsLower
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|groupsLower
operator|.
name|add
argument_list|(
literal|"group1"
argument_list|)
expr_stmt|;
name|groupsLower
operator|.
name|add
argument_list|(
literal|"group2"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|groupsLower
argument_list|,
name|groupsMapping
operator|.
name|getGroups
argument_list|(
literal|"admin"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetGroupsInvalidRule ()
specifier|public
name|void
name|testGetGroupsInvalidRule
parameter_list|()
throws|throws
name|NamingException
block|{
name|RuleBasedLdapGroupsMapping
name|groupsMapping
init|=
name|Mockito
operator|.
name|spy
argument_list|(
operator|new
name|RuleBasedLdapGroupsMapping
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|groups
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|groups
operator|.
name|add
argument_list|(
literal|"group1"
argument_list|)
expr_stmt|;
name|groups
operator|.
name|add
argument_list|(
literal|"GROUP2"
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
name|groups
argument_list|)
operator|.
name|when
argument_list|(
operator|(
name|LdapGroupsMapping
operator|)
name|groupsMapping
argument_list|)
operator|.
name|doGetGroups
argument_list|(
name|eq
argument_list|(
literal|"admin"
argument_list|)
argument_list|,
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|LdapGroupsMapping
operator|.
name|LDAP_URL_KEY
argument_list|,
literal|"ldap://test"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CONVERSION_RULE_KEY
argument_list|,
literal|"none"
argument_list|)
expr_stmt|;
name|groupsMapping
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|groups
argument_list|,
name|groupsMapping
operator|.
name|getGroups
argument_list|(
literal|"admin"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

