begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.net
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Test the static mapping class.  * Because the map is actually static, this map needs to be reset for every test  */
end_comment

begin_class
DECL|class|TestStaticMapping
specifier|public
class|class
name|TestStaticMapping
extends|extends
name|Assert
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestStaticMapping
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Reset the map then create a new instance of the {@link StaticMapping}    * class with a null configuration    * @return a new instance    */
DECL|method|newInstance ()
specifier|private
name|StaticMapping
name|newInstance
parameter_list|()
block|{
name|StaticMapping
operator|.
name|resetMap
argument_list|()
expr_stmt|;
return|return
operator|new
name|StaticMapping
argument_list|()
return|;
block|}
comment|/**    * Reset the map then create a new instance of the {@link StaticMapping}    * class with the topology script in the configuration set to    * the parameter    * @param script a (never executed) script, can be null    * @return a new instance    */
DECL|method|newInstance (String script)
specifier|private
name|StaticMapping
name|newInstance
parameter_list|(
name|String
name|script
parameter_list|)
block|{
name|StaticMapping
name|mapping
init|=
name|newInstance
argument_list|()
decl_stmt|;
name|mapping
operator|.
name|setConf
argument_list|(
name|createConf
argument_list|(
name|script
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|mapping
return|;
block|}
comment|/**    * Create a configuration with a specific topology script    * @param script a (never executed) script, can be null    * @return a configuration    */
DECL|method|createConf (String script)
specifier|private
name|Configuration
name|createConf
parameter_list|(
name|String
name|script
parameter_list|)
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
if|if
condition|(
name|script
operator|!=
literal|null
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|NET_TOPOLOGY_SCRIPT_FILE_NAME_KEY
argument_list|,
name|script
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|conf
operator|.
name|unset
argument_list|(
name|CommonConfigurationKeys
operator|.
name|NET_TOPOLOGY_SCRIPT_FILE_NAME_KEY
argument_list|)
expr_stmt|;
block|}
return|return
name|conf
return|;
block|}
DECL|method|assertSingleSwitch (DNSToSwitchMapping mapping)
specifier|private
name|void
name|assertSingleSwitch
parameter_list|(
name|DNSToSwitchMapping
name|mapping
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Expected a single switch mapping "
operator|+
name|mapping
argument_list|,
literal|true
argument_list|,
name|AbstractDNSToSwitchMapping
operator|.
name|isMappingSingleSwitch
argument_list|(
name|mapping
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertMultiSwitch (DNSToSwitchMapping mapping)
specifier|private
name|void
name|assertMultiSwitch
parameter_list|(
name|DNSToSwitchMapping
name|mapping
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Expected a multi switch mapping "
operator|+
name|mapping
argument_list|,
literal|false
argument_list|,
name|AbstractDNSToSwitchMapping
operator|.
name|isMappingSingleSwitch
argument_list|(
name|mapping
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertMapSize (AbstractDNSToSwitchMapping switchMapping, int expectedSize)
specifier|protected
name|void
name|assertMapSize
parameter_list|(
name|AbstractDNSToSwitchMapping
name|switchMapping
parameter_list|,
name|int
name|expectedSize
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Expected two entries in the map "
operator|+
name|switchMapping
operator|.
name|dumpTopology
argument_list|()
argument_list|,
name|expectedSize
argument_list|,
name|switchMapping
operator|.
name|getSwitchMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|createQueryList ()
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|createQueryList
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|l1
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|l1
operator|.
name|add
argument_list|(
literal|"n1"
argument_list|)
expr_stmt|;
name|l1
operator|.
name|add
argument_list|(
literal|"unknown"
argument_list|)
expr_stmt|;
return|return
name|l1
return|;
block|}
annotation|@
name|Test
DECL|method|testStaticIsSingleSwitchOnNullScript ()
specifier|public
name|void
name|testStaticIsSingleSwitchOnNullScript
parameter_list|()
throws|throws
name|Throwable
block|{
name|StaticMapping
name|mapping
init|=
name|newInstance
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|mapping
operator|.
name|setConf
argument_list|(
name|createConf
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertSingleSwitch
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStaticIsMultiSwitchOnScript ()
specifier|public
name|void
name|testStaticIsMultiSwitchOnScript
parameter_list|()
throws|throws
name|Throwable
block|{
name|StaticMapping
name|mapping
init|=
name|newInstance
argument_list|(
literal|"ls"
argument_list|)
decl_stmt|;
name|assertMultiSwitch
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddResolveNodes ()
specifier|public
name|void
name|testAddResolveNodes
parameter_list|()
throws|throws
name|Throwable
block|{
name|StaticMapping
name|mapping
init|=
name|newInstance
argument_list|()
decl_stmt|;
name|StaticMapping
operator|.
name|addNodeToRack
argument_list|(
literal|"n1"
argument_list|,
literal|"/r1"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|queryList
init|=
name|createQueryList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|resolved
init|=
name|mapping
operator|.
name|resolve
argument_list|(
name|queryList
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|resolved
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/r1"
argument_list|,
name|resolved
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NetworkTopology
operator|.
name|DEFAULT_RACK
argument_list|,
name|resolved
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// get the switch map and examine it
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|switchMap
init|=
name|mapping
operator|.
name|getSwitchMap
argument_list|()
decl_stmt|;
name|String
name|topology
init|=
name|mapping
operator|.
name|dumpTopology
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|topology
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|topology
argument_list|,
literal|1
argument_list|,
name|switchMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|topology
argument_list|,
literal|"/r1"
argument_list|,
name|switchMap
operator|.
name|get
argument_list|(
literal|"n1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify that a configuration string builds a topology    */
annotation|@
name|Test
DECL|method|testReadNodesFromConfig ()
specifier|public
name|void
name|testReadNodesFromConfig
parameter_list|()
throws|throws
name|Throwable
block|{
name|StaticMapping
name|mapping
init|=
name|newInstance
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|StaticMapping
operator|.
name|KEY_HADOOP_CONFIGURED_NODE_MAPPING
argument_list|,
literal|"n1=/r1,n2=/r2"
argument_list|)
expr_stmt|;
name|mapping
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|//even though we have inserted elements into the list, because
comment|//it is driven by the script key in the configuration, it still
comment|//thinks that it is single rack
name|assertSingleSwitch
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|l1
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|l1
operator|.
name|add
argument_list|(
literal|"n1"
argument_list|)
expr_stmt|;
name|l1
operator|.
name|add
argument_list|(
literal|"unknown"
argument_list|)
expr_stmt|;
name|l1
operator|.
name|add
argument_list|(
literal|"n2"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|resolved
init|=
name|mapping
operator|.
name|resolve
argument_list|(
name|l1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|resolved
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/r1"
argument_list|,
name|resolved
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NetworkTopology
operator|.
name|DEFAULT_RACK
argument_list|,
name|resolved
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/r2"
argument_list|,
name|resolved
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|switchMap
init|=
name|mapping
operator|.
name|getSwitchMap
argument_list|()
decl_stmt|;
name|String
name|topology
init|=
name|mapping
operator|.
name|dumpTopology
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|topology
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|topology
argument_list|,
literal|2
argument_list|,
name|switchMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|topology
argument_list|,
literal|"/r1"
argument_list|,
name|switchMap
operator|.
name|get
argument_list|(
literal|"n1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|topology
argument_list|,
name|switchMap
operator|.
name|get
argument_list|(
literal|"unknown"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify that if the inner mapping is single-switch, so is the cached one    * @throws Throwable on any problem    */
annotation|@
name|Test
DECL|method|testCachingRelaysSingleSwitchQueries ()
specifier|public
name|void
name|testCachingRelaysSingleSwitchQueries
parameter_list|()
throws|throws
name|Throwable
block|{
comment|//create a single switch map
name|StaticMapping
name|staticMapping
init|=
name|newInstance
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertSingleSwitch
argument_list|(
name|staticMapping
argument_list|)
expr_stmt|;
name|CachedDNSToSwitchMapping
name|cachedMap
init|=
operator|new
name|CachedDNSToSwitchMapping
argument_list|(
name|staticMapping
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Mapping: "
operator|+
name|cachedMap
operator|+
literal|"\n"
operator|+
name|cachedMap
operator|.
name|dumpTopology
argument_list|()
argument_list|)
expr_stmt|;
name|assertSingleSwitch
argument_list|(
name|cachedMap
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify that if the inner mapping is multi-switch, so is the cached one    * @throws Throwable on any problem    */
annotation|@
name|Test
DECL|method|testCachingRelaysMultiSwitchQueries ()
specifier|public
name|void
name|testCachingRelaysMultiSwitchQueries
parameter_list|()
throws|throws
name|Throwable
block|{
name|StaticMapping
name|staticMapping
init|=
name|newInstance
argument_list|(
literal|"top"
argument_list|)
decl_stmt|;
name|assertMultiSwitch
argument_list|(
name|staticMapping
argument_list|)
expr_stmt|;
name|CachedDNSToSwitchMapping
name|cachedMap
init|=
operator|new
name|CachedDNSToSwitchMapping
argument_list|(
name|staticMapping
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Mapping: "
operator|+
name|cachedMap
operator|+
literal|"\n"
operator|+
name|cachedMap
operator|.
name|dumpTopology
argument_list|()
argument_list|)
expr_stmt|;
name|assertMultiSwitch
argument_list|(
name|cachedMap
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test verifies that resultion queries get relayed to the inner rack    * @throws Throwable on any problem    */
annotation|@
name|Test
DECL|method|testCachingRelaysResolveQueries ()
specifier|public
name|void
name|testCachingRelaysResolveQueries
parameter_list|()
throws|throws
name|Throwable
block|{
name|StaticMapping
name|mapping
init|=
name|newInstance
argument_list|()
decl_stmt|;
name|mapping
operator|.
name|setConf
argument_list|(
name|createConf
argument_list|(
literal|"top"
argument_list|)
argument_list|)
expr_stmt|;
name|StaticMapping
name|staticMapping
init|=
name|mapping
decl_stmt|;
name|CachedDNSToSwitchMapping
name|cachedMap
init|=
operator|new
name|CachedDNSToSwitchMapping
argument_list|(
name|staticMapping
argument_list|)
decl_stmt|;
name|assertMapSize
argument_list|(
name|cachedMap
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|//add a node to the static map
name|StaticMapping
operator|.
name|addNodeToRack
argument_list|(
literal|"n1"
argument_list|,
literal|"/r1"
argument_list|)
expr_stmt|;
comment|//verify it is there
name|assertMapSize
argument_list|(
name|staticMapping
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|//verify that the cache hasn't picked it up yet
name|assertMapSize
argument_list|(
name|cachedMap
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|//now relay the query
name|cachedMap
operator|.
name|resolve
argument_list|(
name|createQueryList
argument_list|()
argument_list|)
expr_stmt|;
comment|//and verify the cache is no longer empty
name|assertMapSize
argument_list|(
name|cachedMap
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test verifies that resultion queries get relayed to the inner rack    * @throws Throwable on any problem    */
annotation|@
name|Test
DECL|method|testCachingCachesNegativeEntries ()
specifier|public
name|void
name|testCachingCachesNegativeEntries
parameter_list|()
throws|throws
name|Throwable
block|{
name|StaticMapping
name|staticMapping
init|=
name|newInstance
argument_list|()
decl_stmt|;
name|CachedDNSToSwitchMapping
name|cachedMap
init|=
operator|new
name|CachedDNSToSwitchMapping
argument_list|(
name|staticMapping
argument_list|)
decl_stmt|;
name|assertMapSize
argument_list|(
name|cachedMap
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertMapSize
argument_list|(
name|staticMapping
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|resolved
init|=
name|cachedMap
operator|.
name|resolve
argument_list|(
name|createQueryList
argument_list|()
argument_list|)
decl_stmt|;
comment|//and verify the cache is no longer empty while the static map is
name|assertMapSize
argument_list|(
name|staticMapping
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertMapSize
argument_list|(
name|cachedMap
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

