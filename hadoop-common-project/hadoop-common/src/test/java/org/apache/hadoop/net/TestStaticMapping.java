begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.net
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Test the static mapping class.  * Because the map is actually static, this map needs to be reset for every test  */
end_comment

begin_class
DECL|class|TestStaticMapping
specifier|public
class|class
name|TestStaticMapping
extends|extends
name|Assert
block|{
comment|/**    * Reset the map then create a new instance of the {@link StaticMapping}    * class    * @return a new instance    */
DECL|method|newInstance ()
specifier|private
name|StaticMapping
name|newInstance
parameter_list|()
block|{
name|StaticMapping
operator|.
name|resetMap
argument_list|()
expr_stmt|;
return|return
operator|new
name|StaticMapping
argument_list|()
return|;
block|}
annotation|@
name|Test
DECL|method|testStaticIsSingleSwitch ()
specifier|public
name|void
name|testStaticIsSingleSwitch
parameter_list|()
throws|throws
name|Throwable
block|{
name|StaticMapping
name|mapping
init|=
name|newInstance
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Empty maps are not single switch"
argument_list|,
name|mapping
operator|.
name|isSingleSwitch
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCachingRelaysQueries ()
specifier|public
name|void
name|testCachingRelaysQueries
parameter_list|()
throws|throws
name|Throwable
block|{
name|StaticMapping
name|staticMapping
init|=
name|newInstance
argument_list|()
decl_stmt|;
name|CachedDNSToSwitchMapping
name|mapping
init|=
operator|new
name|CachedDNSToSwitchMapping
argument_list|(
name|staticMapping
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expected single switch"
argument_list|,
name|mapping
operator|.
name|isSingleSwitch
argument_list|()
argument_list|)
expr_stmt|;
name|StaticMapping
operator|.
name|addNodeToRack
argument_list|(
literal|"n1"
argument_list|,
literal|"r1"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Expected to be multi switch"
argument_list|,
name|mapping
operator|.
name|isSingleSwitch
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddResolveNodes ()
specifier|public
name|void
name|testAddResolveNodes
parameter_list|()
throws|throws
name|Throwable
block|{
name|StaticMapping
name|mapping
init|=
name|newInstance
argument_list|()
decl_stmt|;
name|StaticMapping
operator|.
name|addNodeToRack
argument_list|(
literal|"n1"
argument_list|,
literal|"r1"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|l1
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|l1
operator|.
name|add
argument_list|(
literal|"n1"
argument_list|)
expr_stmt|;
name|l1
operator|.
name|add
argument_list|(
literal|"unknown"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|mappings
init|=
name|mapping
operator|.
name|resolve
argument_list|(
name|l1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|mappings
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"r1"
argument_list|,
name|mappings
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NetworkTopology
operator|.
name|DEFAULT_RACK
argument_list|,
name|mappings
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Mapping is still single switch"
argument_list|,
name|mapping
operator|.
name|isSingleSwitch
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReadNodesFromConfig ()
specifier|public
name|void
name|testReadNodesFromConfig
parameter_list|()
throws|throws
name|Throwable
block|{
name|StaticMapping
name|mapping
init|=
name|newInstance
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|StaticMapping
operator|.
name|KEY_HADOOP_CONFIGURED_NODE_MAPPING
argument_list|,
literal|"n1=r1,n2=r2"
argument_list|)
expr_stmt|;
name|mapping
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|l1
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|l1
operator|.
name|add
argument_list|(
literal|"n1"
argument_list|)
expr_stmt|;
name|l1
operator|.
name|add
argument_list|(
literal|"unknown"
argument_list|)
expr_stmt|;
name|l1
operator|.
name|add
argument_list|(
literal|"n2"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|mappings
init|=
name|mapping
operator|.
name|resolve
argument_list|(
name|l1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|mappings
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"r1"
argument_list|,
name|mappings
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NetworkTopology
operator|.
name|DEFAULT_RACK
argument_list|,
name|mappings
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"r2"
argument_list|,
name|mappings
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Expected to be multi switch"
argument_list|,
name|AbstractDNSToSwitchMapping
operator|.
name|isMappingSingleSwitch
argument_list|(
name|mapping
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNullConfiguration ()
specifier|public
name|void
name|testNullConfiguration
parameter_list|()
throws|throws
name|Throwable
block|{
name|StaticMapping
name|mapping
init|=
name|newInstance
argument_list|()
decl_stmt|;
name|mapping
operator|.
name|setConf
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Null maps is not single switch"
argument_list|,
name|mapping
operator|.
name|isSingleSwitch
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected to be single switch"
argument_list|,
name|AbstractDNSToSwitchMapping
operator|.
name|isMappingSingleSwitch
argument_list|(
name|mapping
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

