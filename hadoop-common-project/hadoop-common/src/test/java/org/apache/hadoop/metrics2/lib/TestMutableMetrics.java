begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.metrics2.lib
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|AdditionalMatchers
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsRecordBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|Interns
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MetricsAsserts
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Test metrics record builder interface and mutable metrics  */
end_comment

begin_class
DECL|class|TestMutableMetrics
specifier|public
class|class
name|TestMutableMetrics
block|{
DECL|field|EPSILON
specifier|private
specifier|final
name|double
name|EPSILON
init|=
literal|1e-42
decl_stmt|;
comment|/**    * Test the snapshot method    */
DECL|method|testSnapshot ()
annotation|@
name|Test
specifier|public
name|void
name|testSnapshot
parameter_list|()
block|{
name|MetricsRecordBuilder
name|mb
init|=
name|mockMetricsRecordBuilder
argument_list|()
decl_stmt|;
name|MetricsRegistry
name|registry
init|=
operator|new
name|MetricsRegistry
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|registry
operator|.
name|newCounter
argument_list|(
literal|"c1"
argument_list|,
literal|"int counter"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|registry
operator|.
name|newCounter
argument_list|(
literal|"c2"
argument_list|,
literal|"long counter"
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
name|registry
operator|.
name|newGauge
argument_list|(
literal|"g1"
argument_list|,
literal|"int gauge"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|registry
operator|.
name|newGauge
argument_list|(
literal|"g2"
argument_list|,
literal|"long gauge"
argument_list|,
literal|4L
argument_list|)
expr_stmt|;
name|registry
operator|.
name|newStat
argument_list|(
literal|"s1"
argument_list|,
literal|"stat"
argument_list|,
literal|"Ops"
argument_list|,
literal|"Time"
argument_list|,
literal|true
argument_list|)
operator|.
name|add
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|registry
operator|.
name|newRate
argument_list|(
literal|"s2"
argument_list|,
literal|"stat"
argument_list|,
literal|false
argument_list|)
operator|.
name|add
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|registry
operator|.
name|snapshot
argument_list|(
name|mb
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MutableStat
name|s2
init|=
operator|(
name|MutableStat
operator|)
name|registry
operator|.
name|get
argument_list|(
literal|"s2"
argument_list|)
decl_stmt|;
name|s2
operator|.
name|snapshot
argument_list|(
name|mb
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// should get the same back.
name|s2
operator|.
name|add
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|s2
operator|.
name|snapshot
argument_list|(
name|mb
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// should get new interval values back
name|verify
argument_list|(
name|mb
argument_list|)
operator|.
name|addCounter
argument_list|(
name|info
argument_list|(
literal|"c1"
argument_list|,
literal|"int counter"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mb
argument_list|)
operator|.
name|addCounter
argument_list|(
name|info
argument_list|(
literal|"c2"
argument_list|,
literal|"long counter"
argument_list|)
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mb
argument_list|)
operator|.
name|addGauge
argument_list|(
name|info
argument_list|(
literal|"g1"
argument_list|,
literal|"int gauge"
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mb
argument_list|)
operator|.
name|addGauge
argument_list|(
name|info
argument_list|(
literal|"g2"
argument_list|,
literal|"long gauge"
argument_list|)
argument_list|,
literal|4L
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mb
argument_list|)
operator|.
name|addCounter
argument_list|(
name|info
argument_list|(
literal|"S1NumOps"
argument_list|,
literal|"Number of ops for stat"
argument_list|)
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mb
argument_list|)
operator|.
name|addGauge
argument_list|(
name|eq
argument_list|(
name|info
argument_list|(
literal|"S1AvgTime"
argument_list|,
literal|"Average time for stat"
argument_list|)
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|0.0
argument_list|,
name|EPSILON
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mb
argument_list|)
operator|.
name|addGauge
argument_list|(
name|eq
argument_list|(
name|info
argument_list|(
literal|"S1StdevTime"
argument_list|,
literal|"Standard deviation of time for stat"
argument_list|)
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|0.0
argument_list|,
name|EPSILON
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mb
argument_list|)
operator|.
name|addGauge
argument_list|(
name|eq
argument_list|(
name|info
argument_list|(
literal|"S1IMinTime"
argument_list|,
literal|"Interval min time for stat"
argument_list|)
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|0.0
argument_list|,
name|EPSILON
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mb
argument_list|)
operator|.
name|addGauge
argument_list|(
name|eq
argument_list|(
name|info
argument_list|(
literal|"S1IMaxTime"
argument_list|,
literal|"Interval max time for stat"
argument_list|)
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|0.0
argument_list|,
name|EPSILON
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mb
argument_list|)
operator|.
name|addGauge
argument_list|(
name|eq
argument_list|(
name|info
argument_list|(
literal|"S1MinTime"
argument_list|,
literal|"Min time for stat"
argument_list|)
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|0.0
argument_list|,
name|EPSILON
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mb
argument_list|)
operator|.
name|addGauge
argument_list|(
name|eq
argument_list|(
name|info
argument_list|(
literal|"S1MaxTime"
argument_list|,
literal|"Max time for stat"
argument_list|)
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|0.0
argument_list|,
name|EPSILON
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mb
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|addCounter
argument_list|(
name|info
argument_list|(
literal|"S2NumOps"
argument_list|,
literal|"Number of ops for stat"
argument_list|)
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mb
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|addGauge
argument_list|(
name|eq
argument_list|(
name|info
argument_list|(
literal|"S2AvgTime"
argument_list|,
literal|"Average time for stat"
argument_list|)
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|0.0
argument_list|,
name|EPSILON
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mb
argument_list|)
operator|.
name|addCounter
argument_list|(
name|info
argument_list|(
literal|"S2NumOps"
argument_list|,
literal|"Number of ops for stat"
argument_list|)
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mb
argument_list|)
operator|.
name|addGauge
argument_list|(
name|eq
argument_list|(
name|info
argument_list|(
literal|"S2AvgTime"
argument_list|,
literal|"Average time for stat"
argument_list|)
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|1.0
argument_list|,
name|EPSILON
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|interface|TestProtocol
interface|interface
name|TestProtocol
block|{
DECL|method|foo ()
name|void
name|foo
parameter_list|()
function_decl|;
DECL|method|bar ()
name|void
name|bar
parameter_list|()
function_decl|;
block|}
DECL|method|testMutableRates ()
annotation|@
name|Test
specifier|public
name|void
name|testMutableRates
parameter_list|()
block|{
name|MetricsRecordBuilder
name|rb
init|=
name|mockMetricsRecordBuilder
argument_list|()
decl_stmt|;
name|MetricsRegistry
name|registry
init|=
operator|new
name|MetricsRegistry
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|MutableRates
name|rates
init|=
operator|new
name|MutableRates
argument_list|(
name|registry
argument_list|)
decl_stmt|;
name|rates
operator|.
name|init
argument_list|(
name|TestProtocol
operator|.
name|class
argument_list|)
expr_stmt|;
name|registry
operator|.
name|snapshot
argument_list|(
name|rb
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertCounter
argument_list|(
literal|"FooNumOps"
argument_list|,
literal|0L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"FooAvgTime"
argument_list|,
literal|0.0
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|assertCounter
argument_list|(
literal|"BarNumOps"
argument_list|,
literal|0L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"BarAvgTime"
argument_list|,
literal|0.0
argument_list|,
name|rb
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

