begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ipc
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|HadoopIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryPolicies
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|Client
operator|.
name|ConnectionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|Server
operator|.
name|Call
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|protobuf
operator|.
name|RpcHeaderProtos
operator|.
name|RpcResponseHeaderProto
operator|.
name|RpcErrorCodeProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|protobuf
operator|.
name|TestProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsRecordBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
operator|.
name|AuthenticationMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AuthorizationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|PolicyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|SecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MetricsAsserts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MockitoUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|internal
operator|.
name|util
operator|.
name|reflection
operator|.
name|Whitebox
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|SocketFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ConnectException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketTimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CyclicBarrier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MetricsAsserts
operator|.
name|assertCounter
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MetricsAsserts
operator|.
name|assertCounterGt
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MetricsAsserts
operator|.
name|getLongCounter
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MetricsAsserts
operator|.
name|getMetrics
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|timeout
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_comment
comment|/** Unit tests for RPC. */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|class|TestRPC
specifier|public
class|class
name|TestRPC
extends|extends
name|TestRpcBase
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestRPC
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|setupConf
argument_list|()
expr_stmt|;
block|}
DECL|field|datasize
name|int
name|datasize
init|=
literal|1024
operator|*
literal|100
decl_stmt|;
DECL|field|numThreads
name|int
name|numThreads
init|=
literal|50
decl_stmt|;
DECL|interface|TestProtocol
specifier|public
interface|interface
name|TestProtocol
extends|extends
name|VersionedProtocol
block|{
DECL|field|versionID
name|long
name|versionID
init|=
literal|1L
decl_stmt|;
DECL|method|ping ()
name|void
name|ping
parameter_list|()
throws|throws
name|IOException
function_decl|;
DECL|method|sleep (long delay)
name|void
name|sleep
parameter_list|(
name|long
name|delay
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
function_decl|;
DECL|method|echo (String value)
name|String
name|echo
parameter_list|(
name|String
name|value
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|echo (String[] value)
name|String
index|[]
name|echo
parameter_list|(
name|String
index|[]
name|value
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|echo (Writable value)
name|Writable
name|echo
parameter_list|(
name|Writable
name|value
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|add (int v1, int v2)
name|int
name|add
parameter_list|(
name|int
name|v1
parameter_list|,
name|int
name|v2
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|add (int[] values)
name|int
name|add
parameter_list|(
name|int
index|[]
name|values
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|error ()
name|int
name|error
parameter_list|()
throws|throws
name|IOException
function_decl|;
block|}
DECL|class|TestImpl
specifier|public
specifier|static
class|class
name|TestImpl
implements|implements
name|TestProtocol
block|{
DECL|field|fastPingCounter
name|int
name|fastPingCounter
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
DECL|method|getProtocolVersion (String protocol, long clientVersion)
specifier|public
name|long
name|getProtocolVersion
parameter_list|(
name|String
name|protocol
parameter_list|,
name|long
name|clientVersion
parameter_list|)
block|{
return|return
name|TestProtocol
operator|.
name|versionID
return|;
block|}
annotation|@
name|Override
DECL|method|getProtocolSignature (String protocol, long clientVersion, int hashcode)
specifier|public
name|ProtocolSignature
name|getProtocolSignature
parameter_list|(
name|String
name|protocol
parameter_list|,
name|long
name|clientVersion
parameter_list|,
name|int
name|hashcode
parameter_list|)
block|{
return|return
operator|new
name|ProtocolSignature
argument_list|(
name|TestProtocol
operator|.
name|versionID
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|ping ()
specifier|public
name|void
name|ping
parameter_list|()
block|{}
annotation|@
name|Override
DECL|method|sleep (long delay)
specifier|public
name|void
name|sleep
parameter_list|(
name|long
name|delay
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|delay
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|echo (String value)
specifier|public
name|String
name|echo
parameter_list|(
name|String
name|value
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|value
return|;
block|}
annotation|@
name|Override
DECL|method|echo (String[] values)
specifier|public
name|String
index|[]
name|echo
parameter_list|(
name|String
index|[]
name|values
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|values
return|;
block|}
annotation|@
name|Override
DECL|method|echo (Writable writable)
specifier|public
name|Writable
name|echo
parameter_list|(
name|Writable
name|writable
parameter_list|)
block|{
return|return
name|writable
return|;
block|}
annotation|@
name|Override
DECL|method|add (int v1, int v2)
specifier|public
name|int
name|add
parameter_list|(
name|int
name|v1
parameter_list|,
name|int
name|v2
parameter_list|)
block|{
return|return
name|v1
operator|+
name|v2
return|;
block|}
annotation|@
name|Override
DECL|method|add (int[] values)
specifier|public
name|int
name|add
parameter_list|(
name|int
index|[]
name|values
parameter_list|)
block|{
name|int
name|sum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|sum
operator|+=
name|values
index|[
name|i
index|]
expr_stmt|;
block|}
return|return
name|sum
return|;
block|}
annotation|@
name|Override
DECL|method|error ()
specifier|public
name|int
name|error
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"bobo"
argument_list|)
throw|;
block|}
block|}
comment|//
comment|// an object that does a bunch of transactions
comment|//
DECL|class|Transactions
specifier|static
class|class
name|Transactions
implements|implements
name|Runnable
block|{
DECL|field|datasize
name|int
name|datasize
decl_stmt|;
DECL|field|proxy
name|TestRpcService
name|proxy
decl_stmt|;
DECL|method|Transactions (TestRpcService proxy, int datasize)
name|Transactions
parameter_list|(
name|TestRpcService
name|proxy
parameter_list|,
name|int
name|datasize
parameter_list|)
block|{
name|this
operator|.
name|proxy
operator|=
name|proxy
expr_stmt|;
name|this
operator|.
name|datasize
operator|=
name|datasize
expr_stmt|;
block|}
comment|// do two RPC that transfers data.
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Integer
index|[]
name|indata
init|=
operator|new
name|Integer
index|[
name|datasize
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|indata
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|TestProtos
operator|.
name|ExchangeRequestProto
name|exchangeRequest
init|=
name|TestProtos
operator|.
name|ExchangeRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|addAllValues
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|indata
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Integer
index|[]
name|outdata
init|=
literal|null
decl_stmt|;
name|TestProtos
operator|.
name|ExchangeResponseProto
name|exchangeResponse
decl_stmt|;
name|TestProtos
operator|.
name|AddRequestProto
name|addRequest
init|=
name|TestProtos
operator|.
name|AddRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setParam1
argument_list|(
literal|1
argument_list|)
operator|.
name|setParam2
argument_list|(
literal|2
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|TestProtos
operator|.
name|AddResponseProto
name|addResponse
decl_stmt|;
name|int
name|val
init|=
literal|0
decl_stmt|;
try|try
block|{
name|exchangeResponse
operator|=
name|proxy
operator|.
name|exchange
argument_list|(
literal|null
argument_list|,
name|exchangeRequest
argument_list|)
expr_stmt|;
name|outdata
operator|=
operator|new
name|Integer
index|[
name|exchangeResponse
operator|.
name|getValuesCount
argument_list|()
index|]
expr_stmt|;
name|outdata
operator|=
name|exchangeResponse
operator|.
name|getValuesList
argument_list|()
operator|.
name|toArray
argument_list|(
name|outdata
argument_list|)
expr_stmt|;
name|addResponse
operator|=
name|proxy
operator|.
name|add
argument_list|(
literal|null
argument_list|,
name|addRequest
argument_list|)
expr_stmt|;
name|val
operator|=
name|addResponse
operator|.
name|getResult
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Exception from RPC exchange() "
operator|+
name|e
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|indata
operator|.
name|length
argument_list|,
name|outdata
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|val
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|outdata
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|outdata
index|[
name|i
index|]
operator|.
name|intValue
argument_list|()
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|//
comment|// A class that does an RPC but does not read its response.
comment|//
DECL|class|SlowRPC
specifier|static
class|class
name|SlowRPC
implements|implements
name|Runnable
block|{
DECL|field|proxy
specifier|private
name|TestRpcService
name|proxy
decl_stmt|;
DECL|field|done
specifier|private
specifier|volatile
name|boolean
name|done
decl_stmt|;
DECL|method|SlowRPC (TestRpcService proxy)
name|SlowRPC
parameter_list|(
name|TestRpcService
name|proxy
parameter_list|)
block|{
name|this
operator|.
name|proxy
operator|=
name|proxy
expr_stmt|;
name|done
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|isDone ()
name|boolean
name|isDone
parameter_list|()
block|{
return|return
name|done
return|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
comment|// this would hang until two fast pings happened
name|ping
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|done
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"SlowRPC ping exception "
operator|+
name|e
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|ping (boolean shouldSlow)
name|void
name|ping
parameter_list|(
name|boolean
name|shouldSlow
parameter_list|)
throws|throws
name|ServiceException
block|{
comment|// this would hang until two fast pings happened
name|proxy
operator|.
name|slowPing
argument_list|(
literal|null
argument_list|,
name|newSlowPingRequest
argument_list|(
name|shouldSlow
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * A basic interface for testing client-side RPC resource cleanup.    */
DECL|interface|StoppedProtocol
specifier|private
interface|interface
name|StoppedProtocol
block|{
DECL|field|versionID
name|long
name|versionID
init|=
literal|0
decl_stmt|;
DECL|method|stop ()
name|void
name|stop
parameter_list|()
function_decl|;
block|}
comment|/**    * A class used for testing cleanup of client side RPC resources.    */
DECL|class|StoppedRpcEngine
specifier|private
specifier|static
class|class
name|StoppedRpcEngine
implements|implements
name|RpcEngine
block|{
annotation|@
name|Override
DECL|method|getProxy ( Class<T> protocol, long clientVersion, InetSocketAddress addr, UserGroupInformation ticket, Configuration conf, SocketFactory factory, int rpcTimeout, RetryPolicy connectionRetryPolicy)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|ProtocolProxy
argument_list|<
name|T
argument_list|>
name|getProxy
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|protocol
parameter_list|,
name|long
name|clientVersion
parameter_list|,
name|InetSocketAddress
name|addr
parameter_list|,
name|UserGroupInformation
name|ticket
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|SocketFactory
name|factory
parameter_list|,
name|int
name|rpcTimeout
parameter_list|,
name|RetryPolicy
name|connectionRetryPolicy
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getProxy
argument_list|(
name|protocol
argument_list|,
name|clientVersion
argument_list|,
name|addr
argument_list|,
name|ticket
argument_list|,
name|conf
argument_list|,
name|factory
argument_list|,
name|rpcTimeout
argument_list|,
name|connectionRetryPolicy
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|getProxy ( Class<T> protocol, long clientVersion, InetSocketAddress addr, UserGroupInformation ticket, Configuration conf, SocketFactory factory, int rpcTimeout, RetryPolicy connectionRetryPolicy, AtomicBoolean fallbackToSimpleAuth)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|ProtocolProxy
argument_list|<
name|T
argument_list|>
name|getProxy
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|protocol
parameter_list|,
name|long
name|clientVersion
parameter_list|,
name|InetSocketAddress
name|addr
parameter_list|,
name|UserGroupInformation
name|ticket
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|SocketFactory
name|factory
parameter_list|,
name|int
name|rpcTimeout
parameter_list|,
name|RetryPolicy
name|connectionRetryPolicy
parameter_list|,
name|AtomicBoolean
name|fallbackToSimpleAuth
parameter_list|)
throws|throws
name|IOException
block|{
name|T
name|proxy
init|=
operator|(
name|T
operator|)
name|Proxy
operator|.
name|newProxyInstance
argument_list|(
name|protocol
operator|.
name|getClassLoader
argument_list|()
argument_list|,
operator|new
name|Class
index|[]
block|{
name|protocol
block|}
argument_list|,
operator|new
name|StoppedInvocationHandler
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|ProtocolProxy
argument_list|<
name|T
argument_list|>
argument_list|(
name|protocol
argument_list|,
name|proxy
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getServer ( Class<?> protocol, Object instance, String bindAddress, int port, int numHandlers, int numReaders, int queueSizePerHandler, boolean verbose, Configuration conf, SecretManager<? extends TokenIdentifier> secretManager, String portRangeConfig)
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
operator|.
name|Server
name|getServer
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|protocol
parameter_list|,
name|Object
name|instance
parameter_list|,
name|String
name|bindAddress
parameter_list|,
name|int
name|port
parameter_list|,
name|int
name|numHandlers
parameter_list|,
name|int
name|numReaders
parameter_list|,
name|int
name|queueSizePerHandler
parameter_list|,
name|boolean
name|verbose
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|SecretManager
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|secretManager
parameter_list|,
name|String
name|portRangeConfig
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getProtocolMetaInfoProxy ( ConnectionId connId, Configuration conf, SocketFactory factory)
specifier|public
name|ProtocolProxy
argument_list|<
name|ProtocolMetaInfoPB
argument_list|>
name|getProtocolMetaInfoProxy
parameter_list|(
name|ConnectionId
name|connId
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|SocketFactory
name|factory
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"This proxy is not supported"
argument_list|)
throw|;
block|}
block|}
comment|/**    * An invocation handler which does nothing when invoking methods, and just    * counts the number of times close() is called.    */
DECL|class|StoppedInvocationHandler
specifier|private
specifier|static
class|class
name|StoppedInvocationHandler
implements|implements
name|InvocationHandler
implements|,
name|Closeable
block|{
DECL|field|closeCalled
specifier|private
name|int
name|closeCalled
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
DECL|method|invoke (Object proxy, Method method, Object[] args)
specifier|public
name|Object
name|invoke
parameter_list|(
name|Object
name|proxy
parameter_list|,
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|closeCalled
operator|++
expr_stmt|;
block|}
DECL|method|getCloseCalled ()
specifier|public
name|int
name|getCloseCalled
parameter_list|()
block|{
return|return
name|closeCalled
return|;
block|}
block|}
annotation|@
name|Test
DECL|method|testConfRpc ()
specifier|public
name|void
name|testConfRpc
parameter_list|()
throws|throws
name|IOException
block|{
name|Server
name|server
init|=
name|newServerBuilder
argument_list|(
name|conf
argument_list|)
operator|.
name|setNumHandlers
argument_list|(
literal|1
argument_list|)
operator|.
name|setVerbose
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// Just one handler
name|int
name|confQ
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IPC_SERVER_HANDLER_QUEUE_SIZE_KEY
argument_list|,
name|CommonConfigurationKeys
operator|.
name|IPC_SERVER_HANDLER_QUEUE_SIZE_DEFAULT
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|confQ
argument_list|,
name|server
operator|.
name|getMaxQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|confReaders
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IPC_SERVER_RPC_READ_THREADS_KEY
argument_list|,
name|CommonConfigurationKeys
operator|.
name|IPC_SERVER_RPC_READ_THREADS_DEFAULT
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|confReaders
argument_list|,
name|server
operator|.
name|getNumReaders
argument_list|()
argument_list|)
expr_stmt|;
name|server
operator|=
name|newServerBuilder
argument_list|(
name|conf
argument_list|)
operator|.
name|setNumHandlers
argument_list|(
literal|1
argument_list|)
operator|.
name|setnumReaders
argument_list|(
literal|3
argument_list|)
operator|.
name|setQueueSizePerHandler
argument_list|(
literal|200
argument_list|)
operator|.
name|setVerbose
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|server
operator|.
name|getNumReaders
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|server
operator|.
name|getMaxQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|server
operator|=
name|newServerBuilder
argument_list|(
name|conf
argument_list|)
operator|.
name|setQueueSizePerHandler
argument_list|(
literal|10
argument_list|)
operator|.
name|setNumHandlers
argument_list|(
literal|2
argument_list|)
operator|.
name|setVerbose
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
literal|10
argument_list|,
name|server
operator|.
name|getMaxQueueSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProxyAddress ()
specifier|public
name|void
name|testProxyAddress
parameter_list|()
throws|throws
name|Exception
block|{
name|Server
name|server
init|=
literal|null
decl_stmt|;
name|TestRpcService
name|proxy
init|=
literal|null
decl_stmt|;
try|try
block|{
name|server
operator|=
name|setupTestServer
argument_list|(
name|conf
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// create a client
name|proxy
operator|=
name|getClient
argument_list|(
name|addr
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|addr
argument_list|,
name|RPC
operator|.
name|getServerAddress
argument_list|(
name|proxy
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stop
argument_list|(
name|server
argument_list|,
name|proxy
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSlowRpc ()
specifier|public
name|void
name|testSlowRpc
parameter_list|()
throws|throws
name|IOException
throws|,
name|ServiceException
block|{
name|Server
name|server
decl_stmt|;
name|TestRpcService
name|proxy
init|=
literal|null
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Testing Slow RPC"
argument_list|)
expr_stmt|;
comment|// create a server with two handlers
name|server
operator|=
name|setupTestServer
argument_list|(
name|conf
argument_list|,
literal|2
argument_list|)
expr_stmt|;
try|try
block|{
comment|// create a client
name|proxy
operator|=
name|getClient
argument_list|(
name|addr
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|SlowRPC
name|slowrpc
init|=
operator|new
name|SlowRPC
argument_list|(
name|proxy
argument_list|)
decl_stmt|;
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
name|slowrpc
argument_list|,
literal|"SlowRPC"
argument_list|)
decl_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// send a slow RPC, which won't return until two fast pings
name|assertTrue
argument_list|(
literal|"Slow RPC should not have finished1."
argument_list|,
operator|!
name|slowrpc
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|slowrpc
operator|.
name|ping
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// first fast ping
comment|// verify that the first RPC is still stuck
name|assertTrue
argument_list|(
literal|"Slow RPC should not have finished2."
argument_list|,
operator|!
name|slowrpc
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|slowrpc
operator|.
name|ping
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// second fast ping
comment|// Now the slow ping should be able to be executed
while|while
condition|(
operator|!
name|slowrpc
operator|.
name|isDone
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Waiting for slow RPC to get done."
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{}
block|}
block|}
finally|finally
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Down slow rpc testing"
argument_list|)
expr_stmt|;
name|stop
argument_list|(
name|server
argument_list|,
name|proxy
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCalls ()
specifier|public
name|void
name|testCalls
parameter_list|()
throws|throws
name|Exception
block|{
name|testCallsInternal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|testCallsInternal (Configuration myConf)
specifier|private
name|void
name|testCallsInternal
parameter_list|(
name|Configuration
name|myConf
parameter_list|)
throws|throws
name|Exception
block|{
name|Server
name|server
decl_stmt|;
name|TestRpcService
name|proxy
init|=
literal|null
decl_stmt|;
name|server
operator|=
name|setupTestServer
argument_list|(
name|myConf
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
name|proxy
operator|=
name|getClient
argument_list|(
name|addr
argument_list|,
name|myConf
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|ping
argument_list|(
literal|null
argument_list|,
name|newEmptyRequest
argument_list|()
argument_list|)
expr_stmt|;
name|TestProtos
operator|.
name|EchoResponseProto
name|echoResp
init|=
name|proxy
operator|.
name|echo
argument_list|(
literal|null
argument_list|,
name|newEchoRequest
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|echoResp
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|echoResp
operator|=
name|proxy
operator|.
name|echo
argument_list|(
literal|null
argument_list|,
name|newEchoRequest
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|echoResp
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|""
argument_list|)
expr_stmt|;
comment|// Check rpcMetrics
name|MetricsRecordBuilder
name|rb
init|=
name|getMetrics
argument_list|(
name|server
operator|.
name|rpcMetrics
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|assertCounter
argument_list|(
literal|"RpcProcessingTimeNumOps"
argument_list|,
literal|3L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|assertCounterGt
argument_list|(
literal|"SentBytes"
argument_list|,
literal|0L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|assertCounterGt
argument_list|(
literal|"ReceivedBytes"
argument_list|,
literal|0L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
comment|// Number of calls to echo method should be 2
name|rb
operator|=
name|getMetrics
argument_list|(
name|server
operator|.
name|rpcDetailedMetrics
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertCounter
argument_list|(
literal|"EchoNumOps"
argument_list|,
literal|2L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
comment|// Number of calls to ping method should be 1
name|assertCounter
argument_list|(
literal|"PingNumOps"
argument_list|,
literal|1L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|String
index|[]
name|strings
init|=
operator|new
name|String
index|[]
block|{
literal|"foo"
block|,
literal|"bar"
block|}
decl_stmt|;
name|TestProtos
operator|.
name|EchoRequestProto2
name|echoRequest2
init|=
name|TestProtos
operator|.
name|EchoRequestProto2
operator|.
name|newBuilder
argument_list|()
operator|.
name|addAllMessage
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|strings
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|TestProtos
operator|.
name|EchoResponseProto2
name|echoResponse2
init|=
name|proxy
operator|.
name|echo2
argument_list|(
literal|null
argument_list|,
name|echoRequest2
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|echoResponse2
operator|.
name|getMessageList
argument_list|()
operator|.
name|toArray
argument_list|()
argument_list|,
name|strings
argument_list|)
argument_list|)
expr_stmt|;
name|echoRequest2
operator|=
name|TestProtos
operator|.
name|EchoRequestProto2
operator|.
name|newBuilder
argument_list|()
operator|.
name|addAllMessage
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|echoResponse2
operator|=
name|proxy
operator|.
name|echo2
argument_list|(
literal|null
argument_list|,
name|echoRequest2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|echoResponse2
operator|.
name|getMessageList
argument_list|()
operator|.
name|toArray
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|TestProtos
operator|.
name|AddRequestProto
name|addRequest
init|=
name|TestProtos
operator|.
name|AddRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setParam1
argument_list|(
literal|1
argument_list|)
operator|.
name|setParam2
argument_list|(
literal|2
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|TestProtos
operator|.
name|AddResponseProto
name|addResponse
init|=
name|proxy
operator|.
name|add
argument_list|(
literal|null
argument_list|,
name|addRequest
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|addResponse
operator|.
name|getResult
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|Integer
index|[]
name|integers
init|=
operator|new
name|Integer
index|[]
block|{
literal|1
block|,
literal|2
block|}
decl_stmt|;
name|TestProtos
operator|.
name|AddRequestProto2
name|addRequest2
init|=
name|TestProtos
operator|.
name|AddRequestProto2
operator|.
name|newBuilder
argument_list|()
operator|.
name|addAllParams
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|integers
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|addResponse
operator|=
name|proxy
operator|.
name|add2
argument_list|(
literal|null
argument_list|,
name|addRequest2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|addResponse
operator|.
name|getResult
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|boolean
name|caught
init|=
literal|false
decl_stmt|;
try|try
block|{
name|proxy
operator|.
name|error
argument_list|(
literal|null
argument_list|,
name|newEmptyRequest
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Caught "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
name|caught
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|caught
argument_list|)
expr_stmt|;
name|rb
operator|=
name|getMetrics
argument_list|(
name|server
operator|.
name|rpcDetailedMetrics
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertCounter
argument_list|(
literal|"RpcServerExceptionNumOps"
argument_list|,
literal|1L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
comment|//proxy.testServerGet();
comment|// create multiple threads and make them do large data transfers
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Starting multi-threaded RPC test..."
argument_list|)
expr_stmt|;
name|server
operator|.
name|setSocketSendBufSize
argument_list|(
literal|1024
argument_list|)
expr_stmt|;
name|Thread
name|threadId
index|[]
init|=
operator|new
name|Thread
index|[
name|numThreads
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
condition|;
name|i
operator|++
control|)
block|{
name|Transactions
name|trans
init|=
operator|new
name|Transactions
argument_list|(
name|proxy
argument_list|,
name|datasize
argument_list|)
decl_stmt|;
name|threadId
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|(
name|trans
argument_list|,
literal|"TransactionThread-"
operator|+
name|i
argument_list|)
expr_stmt|;
name|threadId
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|// wait for all transactions to get over
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Waiting for all threads to finish RPCs..."
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|threadId
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|i
operator|--
expr_stmt|;
comment|// retry
block|}
block|}
block|}
finally|finally
block|{
name|stop
argument_list|(
name|server
argument_list|,
name|proxy
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testClientWithoutServer ()
specifier|public
name|void
name|testClientWithoutServer
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRpcService
name|proxy
decl_stmt|;
name|short
name|invalidPort
init|=
literal|20
decl_stmt|;
name|InetSocketAddress
name|invalidAddress
init|=
operator|new
name|InetSocketAddress
argument_list|(
name|ADDRESS
argument_list|,
name|invalidPort
argument_list|)
decl_stmt|;
name|long
name|invalidClientVersion
init|=
literal|1L
decl_stmt|;
try|try
block|{
name|proxy
operator|=
name|RPC
operator|.
name|getProxy
argument_list|(
name|TestRpcService
operator|.
name|class
argument_list|,
name|invalidClientVersion
argument_list|,
name|invalidAddress
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// Test echo method
name|proxy
operator|.
name|echo
argument_list|(
literal|null
argument_list|,
name|newEchoRequest
argument_list|(
literal|"hello"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"We should not have reached here"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|ioe
parameter_list|)
block|{
comment|//this is what we expected
if|if
condition|(
operator|!
operator|(
name|ioe
operator|.
name|getCause
argument_list|()
operator|instanceof
name|ConnectException
operator|)
condition|)
block|{
name|fail
argument_list|(
literal|"We should not have reached here"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|field|ACL_CONFIG
specifier|private
specifier|static
specifier|final
name|String
name|ACL_CONFIG
init|=
literal|"test.protocol.acl"
decl_stmt|;
DECL|class|TestPolicyProvider
specifier|private
specifier|static
class|class
name|TestPolicyProvider
extends|extends
name|PolicyProvider
block|{
annotation|@
name|Override
DECL|method|getServices ()
specifier|public
name|Service
index|[]
name|getServices
parameter_list|()
block|{
return|return
operator|new
name|Service
index|[]
block|{
operator|new
name|Service
argument_list|(
name|ACL_CONFIG
argument_list|,
name|TestRpcService
operator|.
name|class
argument_list|)
block|}
return|;
block|}
block|}
DECL|method|doRPCs (Configuration myConf, boolean expectFailure)
specifier|private
name|void
name|doRPCs
parameter_list|(
name|Configuration
name|myConf
parameter_list|,
name|boolean
name|expectFailure
parameter_list|)
throws|throws
name|Exception
block|{
name|Server
name|server
decl_stmt|;
name|TestRpcService
name|proxy
init|=
literal|null
decl_stmt|;
name|server
operator|=
name|setupTestServer
argument_list|(
name|myConf
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|server
operator|.
name|refreshServiceAcl
argument_list|(
name|myConf
argument_list|,
operator|new
name|TestPolicyProvider
argument_list|()
argument_list|)
expr_stmt|;
name|TestProtos
operator|.
name|EmptyRequestProto
name|emptyRequestProto
init|=
name|TestProtos
operator|.
name|EmptyRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|proxy
operator|=
name|getClient
argument_list|(
name|addr
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|ping
argument_list|(
literal|null
argument_list|,
name|emptyRequestProto
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectFailure
condition|)
block|{
name|fail
argument_list|(
literal|"Expect RPC.getProxy to fail with AuthorizationException!"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
if|if
condition|(
name|expectFailure
condition|)
block|{
name|RemoteException
name|re
init|=
operator|(
name|RemoteException
operator|)
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|re
operator|.
name|unwrapRemoteException
argument_list|()
operator|instanceof
name|AuthorizationException
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"RPC error code should be UNAUTHORIZED"
argument_list|,
name|RpcErrorCodeProto
operator|.
name|FATAL_UNAUTHORIZED
argument_list|,
name|re
operator|.
name|getErrorCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
finally|finally
block|{
name|MetricsRecordBuilder
name|rb
init|=
name|getMetrics
argument_list|(
name|server
operator|.
name|rpcMetrics
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|expectFailure
condition|)
block|{
name|assertCounter
argument_list|(
literal|"RpcAuthorizationFailures"
argument_list|,
literal|1L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertCounter
argument_list|(
literal|"RpcAuthorizationSuccesses"
argument_list|,
literal|1L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
block|}
comment|//since we don't have authentication turned ON, we should see
comment|// 0 for the authentication successes and 0 for failure
name|assertCounter
argument_list|(
literal|"RpcAuthenticationFailures"
argument_list|,
literal|0L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|assertCounter
argument_list|(
literal|"RpcAuthenticationSuccesses"
argument_list|,
literal|0L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|stop
argument_list|(
name|server
argument_list|,
name|proxy
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testServerAddress ()
specifier|public
name|void
name|testServerAddress
parameter_list|()
throws|throws
name|IOException
block|{
name|Server
name|server
decl_stmt|;
name|server
operator|=
name|setupTestServer
argument_list|(
name|conf
argument_list|,
literal|5
argument_list|)
expr_stmt|;
try|try
block|{
name|InetSocketAddress
name|bindAddr
init|=
name|NetUtils
operator|.
name|getConnectAddress
argument_list|(
name|server
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
argument_list|,
name|bindAddr
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stop
argument_list|(
name|server
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testAuthorization ()
specifier|public
name|void
name|testAuthorization
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|myConf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|myConf
operator|.
name|setBoolean
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_AUTHORIZATION
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Expect to succeed
name|myConf
operator|.
name|set
argument_list|(
name|ACL_CONFIG
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|doRPCs
argument_list|(
name|myConf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Reset authorization to expect failure
name|myConf
operator|.
name|set
argument_list|(
name|ACL_CONFIG
argument_list|,
literal|"invalid invalid"
argument_list|)
expr_stmt|;
name|doRPCs
argument_list|(
name|myConf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|myConf
operator|.
name|setInt
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IPC_SERVER_RPC_READ_THREADS_KEY
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Expect to succeed
name|myConf
operator|.
name|set
argument_list|(
name|ACL_CONFIG
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|doRPCs
argument_list|(
name|myConf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Reset authorization to expect failure
name|myConf
operator|.
name|set
argument_list|(
name|ACL_CONFIG
argument_list|,
literal|"invalid invalid"
argument_list|)
expr_stmt|;
name|doRPCs
argument_list|(
name|myConf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Switch off setting socketTimeout values on RPC sockets.    * Verify that RPC calls still work ok.    */
DECL|method|testNoPings ()
specifier|public
name|void
name|testNoPings
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"ipc.client.ping"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
operator|new
name|TestRPC
argument_list|()
operator|.
name|testCallsInternal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IPC_SERVER_RPC_READ_THREADS_KEY
argument_list|,
literal|2
argument_list|)
expr_stmt|;
operator|new
name|TestRPC
argument_list|()
operator|.
name|testCallsInternal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test stopping a non-registered proxy    * @throws IOException    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|HadoopIllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testStopNonRegisteredProxy ()
specifier|public
name|void
name|testStopNonRegisteredProxy
parameter_list|()
throws|throws
name|IOException
block|{
name|RPC
operator|.
name|stopProxy
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that the mockProtocol helper returns mock proxies that can    * be stopped without error.    */
annotation|@
name|Test
DECL|method|testStopMockObject ()
specifier|public
name|void
name|testStopMockObject
parameter_list|()
throws|throws
name|IOException
block|{
name|RPC
operator|.
name|stopProxy
argument_list|(
name|MockitoUtil
operator|.
name|mockProtocol
argument_list|(
name|TestProtocol
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStopProxy ()
specifier|public
name|void
name|testStopProxy
parameter_list|()
throws|throws
name|IOException
block|{
name|RPC
operator|.
name|setProtocolEngine
argument_list|(
name|conf
argument_list|,
name|StoppedProtocol
operator|.
name|class
argument_list|,
name|StoppedRpcEngine
operator|.
name|class
argument_list|)
expr_stmt|;
name|StoppedProtocol
name|proxy
init|=
name|RPC
operator|.
name|getProxy
argument_list|(
name|StoppedProtocol
operator|.
name|class
argument_list|,
name|StoppedProtocol
operator|.
name|versionID
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|StoppedInvocationHandler
name|invocationHandler
init|=
operator|(
name|StoppedInvocationHandler
operator|)
name|Proxy
operator|.
name|getInvocationHandler
argument_list|(
name|proxy
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|invocationHandler
operator|.
name|getCloseCalled
argument_list|()
argument_list|)
expr_stmt|;
name|RPC
operator|.
name|stopProxy
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|invocationHandler
operator|.
name|getCloseCalled
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWrappedStopProxy ()
specifier|public
name|void
name|testWrappedStopProxy
parameter_list|()
throws|throws
name|IOException
block|{
name|StoppedProtocol
name|wrappedProxy
init|=
name|RPC
operator|.
name|getProxy
argument_list|(
name|StoppedProtocol
operator|.
name|class
argument_list|,
name|StoppedProtocol
operator|.
name|versionID
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|StoppedInvocationHandler
name|invocationHandler
init|=
operator|(
name|StoppedInvocationHandler
operator|)
name|Proxy
operator|.
name|getInvocationHandler
argument_list|(
name|wrappedProxy
argument_list|)
decl_stmt|;
name|StoppedProtocol
name|proxy
init|=
operator|(
name|StoppedProtocol
operator|)
name|RetryProxy
operator|.
name|create
argument_list|(
name|StoppedProtocol
operator|.
name|class
argument_list|,
name|wrappedProxy
argument_list|,
name|RetryPolicies
operator|.
name|RETRY_FOREVER
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|invocationHandler
operator|.
name|getCloseCalled
argument_list|()
argument_list|)
expr_stmt|;
name|RPC
operator|.
name|stopProxy
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|invocationHandler
operator|.
name|getCloseCalled
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testErrorMsgForInsecureClient ()
specifier|public
name|void
name|testErrorMsgForInsecureClient
parameter_list|()
throws|throws
name|IOException
block|{
name|Server
name|server
decl_stmt|;
name|TestRpcService
name|proxy
init|=
literal|null
decl_stmt|;
name|Configuration
name|serverConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|SecurityUtil
operator|.
name|setAuthenticationMethod
argument_list|(
name|AuthenticationMethod
operator|.
name|KERBEROS
argument_list|,
name|serverConf
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|serverConf
argument_list|)
expr_stmt|;
name|server
operator|=
name|setupTestServer
argument_list|(
name|serverConf
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|boolean
name|succeeded
init|=
literal|false
decl_stmt|;
try|try
block|{
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|proxy
operator|=
name|getClient
argument_list|(
name|addr
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|echo
argument_list|(
literal|null
argument_list|,
name|newEchoRequest
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|RemoteException
argument_list|)
expr_stmt|;
name|RemoteException
name|re
init|=
operator|(
name|RemoteException
operator|)
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"LOGGING MESSAGE: "
operator|+
name|re
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"RPC error code should be UNAUTHORIZED"
argument_list|,
name|RpcErrorCodeProto
operator|.
name|FATAL_UNAUTHORIZED
argument_list|,
name|re
operator|.
name|getErrorCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|re
operator|.
name|unwrapRemoteException
argument_list|()
operator|instanceof
name|AccessControlException
argument_list|)
expr_stmt|;
name|succeeded
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|stop
argument_list|(
name|server
argument_list|,
name|proxy
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|succeeded
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IPC_SERVER_RPC_READ_THREADS_KEY
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|serverConf
argument_list|)
expr_stmt|;
name|server
operator|=
name|setupTestServer
argument_list|(
name|serverConf
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|succeeded
operator|=
literal|false
expr_stmt|;
name|proxy
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|proxy
operator|=
name|getClient
argument_list|(
name|addr
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|echo
argument_list|(
literal|null
argument_list|,
name|newEchoRequest
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
name|RemoteException
name|re
init|=
operator|(
name|RemoteException
operator|)
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"LOGGING MESSAGE: "
operator|+
name|re
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"RPC error code should be UNAUTHORIZED"
argument_list|,
name|RpcErrorCodeProto
operator|.
name|FATAL_UNAUTHORIZED
argument_list|,
name|re
operator|.
name|getErrorCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|re
operator|.
name|unwrapRemoteException
argument_list|()
operator|instanceof
name|AccessControlException
argument_list|)
expr_stmt|;
name|succeeded
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|stop
argument_list|(
name|server
argument_list|,
name|proxy
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|succeeded
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that server.stop() properly stops all threads    */
annotation|@
name|Test
DECL|method|testStopsAllThreads ()
specifier|public
name|void
name|testStopsAllThreads
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Server
name|server
decl_stmt|;
name|int
name|threadsBefore
init|=
name|countThreads
argument_list|(
literal|"Server$Listener$Reader"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Expect no Reader threads running before test"
argument_list|,
literal|0
argument_list|,
name|threadsBefore
argument_list|)
expr_stmt|;
name|server
operator|=
name|setupTestServer
argument_list|(
name|conf
argument_list|,
literal|5
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Wait for at least one reader thread to start
name|int
name|threadsRunning
init|=
literal|0
decl_stmt|;
name|long
name|totalSleepTime
init|=
literal|0
decl_stmt|;
do|do
block|{
name|totalSleepTime
operator|+=
literal|10
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|threadsRunning
operator|=
name|countThreads
argument_list|(
literal|"Server$Listener$Reader"
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|threadsRunning
operator|==
literal|0
operator|&&
name|totalSleepTime
operator|<
literal|5000
condition|)
do|;
comment|// Validate that at least one thread started (we didn't timeout)
name|threadsRunning
operator|=
name|countThreads
argument_list|(
literal|"Server$Listener$Reader"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|threadsRunning
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|int
name|threadsAfter
init|=
name|countThreads
argument_list|(
literal|"Server$Listener$Reader"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Expect no Reader threads left running after test"
argument_list|,
literal|0
argument_list|,
name|threadsAfter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRPCBuilder ()
specifier|public
name|void
name|testRPCBuilder
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Test mandatory field conf
try|try
block|{
operator|new
name|RPC
operator|.
name|Builder
argument_list|(
literal|null
argument_list|)
operator|.
name|setProtocol
argument_list|(
name|TestProtocol
operator|.
name|class
argument_list|)
operator|.
name|setInstance
argument_list|(
operator|new
name|TestImpl
argument_list|()
argument_list|)
operator|.
name|setBindAddress
argument_list|(
name|ADDRESS
argument_list|)
operator|.
name|setPort
argument_list|(
literal|0
argument_list|)
operator|.
name|setNumHandlers
argument_list|(
literal|5
argument_list|)
operator|.
name|setVerbose
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Didn't throw HadoopIllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|e
operator|instanceof
name|HadoopIllegalArgumentException
operator|)
condition|)
block|{
name|fail
argument_list|(
literal|"Expecting HadoopIllegalArgumentException but caught "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Test mandatory field protocol
try|try
block|{
operator|new
name|RPC
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|setInstance
argument_list|(
operator|new
name|TestImpl
argument_list|()
argument_list|)
operator|.
name|setBindAddress
argument_list|(
name|ADDRESS
argument_list|)
operator|.
name|setPort
argument_list|(
literal|0
argument_list|)
operator|.
name|setNumHandlers
argument_list|(
literal|5
argument_list|)
operator|.
name|setVerbose
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Didn't throw HadoopIllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|e
operator|instanceof
name|HadoopIllegalArgumentException
operator|)
condition|)
block|{
name|fail
argument_list|(
literal|"Expecting HadoopIllegalArgumentException but caught "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Test mandatory field instance
try|try
block|{
operator|new
name|RPC
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|setProtocol
argument_list|(
name|TestProtocol
operator|.
name|class
argument_list|)
operator|.
name|setBindAddress
argument_list|(
name|ADDRESS
argument_list|)
operator|.
name|setPort
argument_list|(
literal|0
argument_list|)
operator|.
name|setNumHandlers
argument_list|(
literal|5
argument_list|)
operator|.
name|setVerbose
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Didn't throw HadoopIllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|e
operator|instanceof
name|HadoopIllegalArgumentException
operator|)
condition|)
block|{
name|fail
argument_list|(
literal|"Expecting HadoopIllegalArgumentException but caught "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|90000
argument_list|)
DECL|method|testRPCInterruptedSimple ()
specifier|public
name|void
name|testRPCInterruptedSimple
parameter_list|()
throws|throws
name|Exception
block|{
name|Server
name|server
decl_stmt|;
name|TestRpcService
name|proxy
init|=
literal|null
decl_stmt|;
name|RPC
operator|.
name|Builder
name|builder
init|=
name|newServerBuilder
argument_list|(
name|conf
argument_list|)
operator|.
name|setNumHandlers
argument_list|(
literal|5
argument_list|)
operator|.
name|setVerbose
argument_list|(
literal|true
argument_list|)
operator|.
name|setSecretManager
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|server
operator|=
name|setupTestServer
argument_list|(
name|builder
argument_list|)
expr_stmt|;
try|try
block|{
name|proxy
operator|=
name|getClient
argument_list|(
name|addr
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// Connect to the server
name|proxy
operator|.
name|ping
argument_list|(
literal|null
argument_list|,
name|newEmptyRequest
argument_list|()
argument_list|)
expr_stmt|;
comment|// Interrupt self, try another call
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
try|try
block|{
name|proxy
operator|.
name|ping
argument_list|(
literal|null
argument_list|,
name|newEmptyRequest
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Interruption did not cause IPC to fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|se
parameter_list|)
block|{
if|if
condition|(
name|se
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"InterruptedException"
argument_list|)
operator|||
name|se
operator|.
name|getCause
argument_list|()
operator|instanceof
name|InterruptedIOException
condition|)
block|{
comment|// clear interrupt status for future tests
name|Thread
operator|.
name|interrupted
argument_list|()
expr_stmt|;
return|return;
block|}
throw|throw
name|se
throw|;
block|}
block|}
finally|finally
block|{
name|stop
argument_list|(
name|server
argument_list|,
name|proxy
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testRPCInterrupted ()
specifier|public
name|void
name|testRPCInterrupted
parameter_list|()
throws|throws
name|Exception
block|{
name|Server
name|server
decl_stmt|;
name|RPC
operator|.
name|Builder
name|builder
init|=
name|newServerBuilder
argument_list|(
name|conf
argument_list|)
operator|.
name|setNumHandlers
argument_list|(
literal|5
argument_list|)
operator|.
name|setVerbose
argument_list|(
literal|true
argument_list|)
operator|.
name|setSecretManager
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|server
operator|=
name|setupTestServer
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|int
name|numConcurrentRPC
init|=
literal|200
decl_stmt|;
specifier|final
name|CyclicBarrier
name|barrier
init|=
operator|new
name|CyclicBarrier
argument_list|(
name|numConcurrentRPC
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|numConcurrentRPC
argument_list|)
decl_stmt|;
specifier|final
name|AtomicBoolean
name|leaderRunning
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
name|error
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
name|Thread
name|leaderThread
init|=
literal|null
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numConcurrentRPC
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|num
init|=
name|i
decl_stmt|;
specifier|final
name|TestRpcService
name|proxy
init|=
name|getClient
argument_list|(
name|addr
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Thread
name|rpcThread
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
while|while
condition|(
name|num
operator|==
literal|0
operator|||
name|leaderRunning
operator|.
name|get
argument_list|()
condition|)
block|{
name|proxy
operator|.
name|slowPing
argument_list|(
literal|null
argument_list|,
name|newSlowPingRequest
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|proxy
operator|.
name|slowPing
argument_list|(
literal|null
argument_list|,
name|newSlowPingRequest
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|num
operator|==
literal|0
condition|)
block|{
name|leaderRunning
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|error
operator|.
name|set
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|error
argument_list|(
literal|"thread "
operator|+
name|num
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|rpcThread
operator|.
name|start
argument_list|()
expr_stmt|;
if|if
condition|(
name|leaderThread
operator|==
literal|null
condition|)
block|{
name|leaderThread
operator|=
name|rpcThread
expr_stmt|;
block|}
block|}
comment|// let threads get past the barrier
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|// stop a single thread
while|while
condition|(
name|leaderRunning
operator|.
name|get
argument_list|()
condition|)
block|{
name|leaderThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// should not cause any other thread to get an error
name|assertTrue
argument_list|(
literal|"rpc got exception "
operator|+
name|error
operator|.
name|get
argument_list|()
argument_list|,
name|error
operator|.
name|get
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testConnectionPing ()
specifier|public
name|void
name|testConnectionPing
parameter_list|()
throws|throws
name|Exception
block|{
name|Server
name|server
decl_stmt|;
name|TestRpcService
name|proxy
init|=
literal|null
decl_stmt|;
name|int
name|pingInterval
init|=
literal|50
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IPC_CLIENT_PING_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IPC_PING_INTERVAL_KEY
argument_list|,
name|pingInterval
argument_list|)
expr_stmt|;
name|server
operator|=
name|setupTestServer
argument_list|(
name|conf
argument_list|,
literal|5
argument_list|)
expr_stmt|;
try|try
block|{
name|proxy
operator|=
name|getClient
argument_list|(
name|addr
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|sleep
argument_list|(
literal|null
argument_list|,
name|newSleepRequest
argument_list|(
name|pingInterval
operator|*
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stop
argument_list|(
name|server
argument_list|,
name|proxy
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testExternalCall ()
specifier|public
name|void
name|testExternalCall
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"user123"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
specifier|final
name|IOException
name|expectedIOE
init|=
operator|new
name|IOException
argument_list|(
literal|"boom"
argument_list|)
decl_stmt|;
comment|// use 1 handler so the callq can be plugged
specifier|final
name|Server
name|server
init|=
name|setupTestServer
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|AtomicBoolean
name|result
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|ExternalCall
argument_list|<
name|String
argument_list|>
name|remoteUserCall
init|=
name|newExtCall
argument_list|(
name|ugi
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getUserName
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|ExternalCall
argument_list|<
name|String
argument_list|>
name|exceptionCall
init|=
name|newExtCall
argument_list|(
name|ugi
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|run
parameter_list|()
throws|throws
name|Exception
block|{
throw|throw
name|expectedIOE
throw|;
block|}
block|}
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|CyclicBarrier
name|barrier
init|=
operator|new
name|CyclicBarrier
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|ExternalCall
argument_list|<
name|Void
argument_list|>
name|barrierCall
init|=
name|newExtCall
argument_list|(
name|ugi
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
comment|// notify we are in a handler and then wait to keep the callq
comment|// plugged up
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|server
operator|.
name|queueCall
argument_list|(
name|barrierCall
argument_list|)
expr_stmt|;
name|server
operator|.
name|queueCall
argument_list|(
name|exceptionCall
argument_list|)
expr_stmt|;
name|server
operator|.
name|queueCall
argument_list|(
name|remoteUserCall
argument_list|)
expr_stmt|;
comment|// wait for barrier call to enter the handler, check that the other 2
comment|// calls are actually queued
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|server
operator|.
name|getCallQueueLen
argument_list|()
argument_list|)
expr_stmt|;
comment|// unplug the callq
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|barrierCall
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// verify correct ugi is used
name|String
name|answer
init|=
name|remoteUserCall
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|ugi
operator|.
name|getUserName
argument_list|()
argument_list|,
name|answer
argument_list|)
expr_stmt|;
try|try
block|{
name|exceptionCall
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"didn't throw"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|ee
parameter_list|)
block|{
name|assertTrue
argument_list|(
operator|(
name|ee
operator|.
name|getCause
argument_list|()
operator|)
operator|instanceof
name|IOException
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedIOE
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ee
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|newExtCall (UserGroupInformation ugi, PrivilegedExceptionAction<T> callable)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|ExternalCall
argument_list|<
name|T
argument_list|>
name|newExtCall
parameter_list|(
name|UserGroupInformation
name|ugi
parameter_list|,
name|PrivilegedExceptionAction
argument_list|<
name|T
argument_list|>
name|callable
parameter_list|)
block|{
return|return
operator|new
name|ExternalCall
argument_list|<
name|T
argument_list|>
argument_list|(
name|callable
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|String
name|getProtocol
parameter_list|()
block|{
return|return
literal|"test"
return|;
block|}
annotation|@
name|Override
specifier|public
name|UserGroupInformation
name|getRemoteUser
parameter_list|()
block|{
return|return
name|ugi
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Test
DECL|method|testRpcMetrics ()
specifier|public
name|void
name|testRpcMetrics
parameter_list|()
throws|throws
name|Exception
block|{
name|Server
name|server
decl_stmt|;
name|TestRpcService
name|proxy
init|=
literal|null
decl_stmt|;
specifier|final
name|int
name|interval
init|=
literal|1
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|CommonConfigurationKeys
operator|.
name|RPC_METRICS_QUANTILE_ENABLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|RPC_METRICS_PERCENTILES_INTERVALS_KEY
argument_list|,
literal|""
operator|+
name|interval
argument_list|)
expr_stmt|;
name|server
operator|=
name|setupTestServer
argument_list|(
name|conf
argument_list|,
literal|5
argument_list|)
expr_stmt|;
try|try
block|{
name|proxy
operator|=
name|getClient
argument_list|(
name|addr
argument_list|,
name|conf
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|proxy
operator|.
name|ping
argument_list|(
literal|null
argument_list|,
name|newEmptyRequest
argument_list|()
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|echo
argument_list|(
literal|null
argument_list|,
name|newEchoRequest
argument_list|(
literal|""
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|MetricsRecordBuilder
name|rpcMetrics
init|=
name|getMetrics
argument_list|(
name|server
operator|.
name|getRpcMetrics
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expected non-zero rpc queue time"
argument_list|,
name|getLongCounter
argument_list|(
literal|"RpcQueueTimeNumOps"
argument_list|,
name|rpcMetrics
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected non-zero rpc processing time"
argument_list|,
name|getLongCounter
argument_list|(
literal|"RpcProcessingTimeNumOps"
argument_list|,
name|rpcMetrics
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|MetricsAsserts
operator|.
name|assertQuantileGauges
argument_list|(
literal|"RpcQueueTime"
operator|+
name|interval
operator|+
literal|"s"
argument_list|,
name|rpcMetrics
argument_list|)
expr_stmt|;
name|MetricsAsserts
operator|.
name|assertQuantileGauges
argument_list|(
literal|"RpcProcessingTime"
operator|+
name|interval
operator|+
literal|"s"
argument_list|,
name|rpcMetrics
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stop
argument_list|(
name|server
argument_list|,
name|proxy
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    *  Test RPC backoff by queue full.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testClientBackOff ()
specifier|public
name|void
name|testClientBackOff
parameter_list|()
throws|throws
name|Exception
block|{
name|Server
name|server
decl_stmt|;
specifier|final
name|TestRpcService
name|proxy
decl_stmt|;
name|boolean
name|succeeded
init|=
literal|false
decl_stmt|;
specifier|final
name|int
name|numClients
init|=
literal|2
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Future
argument_list|<
name|Void
argument_list|>
argument_list|>
name|res
init|=
operator|new
name|ArrayList
argument_list|<
name|Future
argument_list|<
name|Void
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|ExecutorService
name|executorService
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|numClients
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IPC_CLIENT_CONNECT_MAX_RETRIES_KEY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IPC_NAMESPACE
operator|+
literal|".0."
operator|+
name|CommonConfigurationKeys
operator|.
name|IPC_BACKOFF_ENABLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|RPC
operator|.
name|Builder
name|builder
init|=
name|newServerBuilder
argument_list|(
name|conf
argument_list|)
operator|.
name|setQueueSizePerHandler
argument_list|(
literal|1
argument_list|)
operator|.
name|setNumHandlers
argument_list|(
literal|1
argument_list|)
operator|.
name|setVerbose
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|server
operator|=
name|setupTestServer
argument_list|(
name|builder
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|CallQueueManager
argument_list|<
name|Call
argument_list|>
name|spy
init|=
name|spy
argument_list|(
operator|(
name|CallQueueManager
argument_list|<
name|Call
argument_list|>
operator|)
name|Whitebox
operator|.
name|getInternalState
argument_list|(
name|server
argument_list|,
literal|"callQueue"
argument_list|)
argument_list|)
decl_stmt|;
name|Whitebox
operator|.
name|setInternalState
argument_list|(
name|server
argument_list|,
literal|"callQueue"
argument_list|,
name|spy
argument_list|)
expr_stmt|;
name|Exception
name|lastException
init|=
literal|null
decl_stmt|;
name|proxy
operator|=
name|getClient
argument_list|(
name|addr
argument_list|,
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
comment|// start a sleep RPC call to consume the only handler thread.
comment|// Start another sleep RPC call to make callQueue full.
comment|// Start another sleep RPC call to make reader thread block on CallQueue.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numClients
condition|;
name|i
operator|++
control|)
block|{
name|res
operator|.
name|add
argument_list|(
name|executorService
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|ServiceException
throws|,
name|InterruptedException
block|{
name|proxy
operator|.
name|sleep
argument_list|(
literal|null
argument_list|,
name|newSleepRequest
argument_list|(
literal|100000
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|spy
argument_list|,
name|timeout
argument_list|(
literal|500
argument_list|)
operator|.
name|times
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
operator|.
name|offer
argument_list|(
name|Mockito
operator|.
expr|<
name|Call
operator|>
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|proxy
operator|.
name|sleep
argument_list|(
literal|null
argument_list|,
name|newSleepRequest
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
name|RemoteException
name|re
init|=
operator|(
name|RemoteException
operator|)
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
name|IOException
name|unwrapExeption
init|=
name|re
operator|.
name|unwrapRemoteException
argument_list|()
decl_stmt|;
if|if
condition|(
name|unwrapExeption
operator|instanceof
name|RetriableException
condition|)
block|{
name|succeeded
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|lastException
operator|=
name|unwrapExeption
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|executorService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|stop
argument_list|(
name|server
argument_list|,
name|proxy
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lastException
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Last received non-RetriableException:"
argument_list|,
name|lastException
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"RetriableException not received"
argument_list|,
name|succeeded
argument_list|)
expr_stmt|;
block|}
comment|/**    *  Test RPC backoff by response time of each priority level.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testClientBackOffByResponseTime ()
specifier|public
name|void
name|testClientBackOffByResponseTime
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TestRpcService
name|proxy
decl_stmt|;
name|boolean
name|succeeded
init|=
literal|false
decl_stmt|;
specifier|final
name|int
name|numClients
init|=
literal|1
decl_stmt|;
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|DecayRpcScheduler
operator|.
name|LOG
argument_list|,
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|RPC
operator|.
name|LOG
argument_list|,
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Future
argument_list|<
name|Void
argument_list|>
argument_list|>
name|res
init|=
operator|new
name|ArrayList
argument_list|<
name|Future
argument_list|<
name|Void
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|ExecutorService
name|executorService
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|numClients
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IPC_CLIENT_CONNECT_MAX_RETRIES_KEY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
specifier|final
name|String
name|ns
init|=
name|CommonConfigurationKeys
operator|.
name|IPC_NAMESPACE
operator|+
literal|".0"
decl_stmt|;
name|Server
name|server
init|=
name|setupDecayRpcSchedulerandTestServer
argument_list|(
name|ns
operator|+
literal|"."
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|CallQueueManager
argument_list|<
name|Call
argument_list|>
name|spy
init|=
name|spy
argument_list|(
operator|(
name|CallQueueManager
argument_list|<
name|Call
argument_list|>
operator|)
name|Whitebox
operator|.
name|getInternalState
argument_list|(
name|server
argument_list|,
literal|"callQueue"
argument_list|)
argument_list|)
decl_stmt|;
name|Whitebox
operator|.
name|setInternalState
argument_list|(
name|server
argument_list|,
literal|"callQueue"
argument_list|,
name|spy
argument_list|)
expr_stmt|;
name|Exception
name|lastException
init|=
literal|null
decl_stmt|;
name|proxy
operator|=
name|getClient
argument_list|(
name|addr
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|MetricsRecordBuilder
name|rb1
init|=
name|getMetrics
argument_list|(
literal|"DecayRpcSchedulerMetrics2."
operator|+
name|ns
argument_list|)
decl_stmt|;
specifier|final
name|long
name|beginDecayedCallVolume
init|=
name|MetricsAsserts
operator|.
name|getLongCounter
argument_list|(
literal|"DecayedCallVolume"
argument_list|,
name|rb1
argument_list|)
decl_stmt|;
specifier|final
name|long
name|beginRawCallVolume
init|=
name|MetricsAsserts
operator|.
name|getLongCounter
argument_list|(
literal|"CallVolume"
argument_list|,
name|rb1
argument_list|)
decl_stmt|;
specifier|final
name|int
name|beginUniqueCaller
init|=
name|MetricsAsserts
operator|.
name|getIntCounter
argument_list|(
literal|"UniqueCallers"
argument_list|,
name|rb1
argument_list|)
decl_stmt|;
try|try
block|{
comment|// start a sleep RPC call that sleeps 3s.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numClients
condition|;
name|i
operator|++
control|)
block|{
name|res
operator|.
name|add
argument_list|(
name|executorService
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|ServiceException
throws|,
name|InterruptedException
block|{
name|proxy
operator|.
name|sleep
argument_list|(
literal|null
argument_list|,
name|newSleepRequest
argument_list|(
literal|3000
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|spy
argument_list|,
name|timeout
argument_list|(
literal|500
argument_list|)
operator|.
name|times
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
operator|.
name|offer
argument_list|(
name|Mockito
operator|.
expr|<
name|Call
operator|>
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Start another sleep RPC call and verify the call is backed off due to
comment|// avg response time(3s) exceeds threshold (2s).
try|try
block|{
comment|// wait for the 1st response time update
name|Thread
operator|.
name|sleep
argument_list|(
literal|5500
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|sleep
argument_list|(
literal|null
argument_list|,
name|newSleepRequest
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
name|RemoteException
name|re
init|=
operator|(
name|RemoteException
operator|)
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
name|IOException
name|unwrapExeption
init|=
name|re
operator|.
name|unwrapRemoteException
argument_list|()
decl_stmt|;
if|if
condition|(
name|unwrapExeption
operator|instanceof
name|RetriableException
condition|)
block|{
name|succeeded
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|lastException
operator|=
name|unwrapExeption
expr_stmt|;
block|}
comment|// Lets Metric system update latest metrics
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
name|MetricsRecordBuilder
name|rb2
init|=
name|getMetrics
argument_list|(
literal|"DecayRpcSchedulerMetrics2."
operator|+
name|ns
argument_list|)
decl_stmt|;
name|long
name|decayedCallVolume1
init|=
name|MetricsAsserts
operator|.
name|getLongCounter
argument_list|(
literal|"DecayedCallVolume"
argument_list|,
name|rb2
argument_list|)
decl_stmt|;
name|long
name|rawCallVolume1
init|=
name|MetricsAsserts
operator|.
name|getLongCounter
argument_list|(
literal|"CallVolume"
argument_list|,
name|rb2
argument_list|)
decl_stmt|;
name|int
name|uniqueCaller1
init|=
name|MetricsAsserts
operator|.
name|getIntCounter
argument_list|(
literal|"UniqueCallers"
argument_list|,
name|rb2
argument_list|)
decl_stmt|;
name|long
name|callVolumePriority0
init|=
name|MetricsAsserts
operator|.
name|getLongGauge
argument_list|(
literal|"Priority.0.CompletedCallVolume"
argument_list|,
name|rb2
argument_list|)
decl_stmt|;
name|long
name|callVolumePriority1
init|=
name|MetricsAsserts
operator|.
name|getLongGauge
argument_list|(
literal|"Priority.1.CompletedCallVolume"
argument_list|,
name|rb2
argument_list|)
decl_stmt|;
name|double
name|avgRespTimePriority0
init|=
name|MetricsAsserts
operator|.
name|getDoubleGauge
argument_list|(
literal|"Priority.0.AvgResponseTime"
argument_list|,
name|rb2
argument_list|)
decl_stmt|;
name|double
name|avgRespTimePriority1
init|=
name|MetricsAsserts
operator|.
name|getDoubleGauge
argument_list|(
literal|"Priority.1.AvgResponseTime"
argument_list|,
name|rb2
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"DecayedCallVolume: "
operator|+
name|decayedCallVolume1
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"CallVolume: "
operator|+
name|rawCallVolume1
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"UniqueCaller: "
operator|+
name|uniqueCaller1
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Priority.0.CompletedCallVolume: "
operator|+
name|callVolumePriority0
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Priority.1.CompletedCallVolume: "
operator|+
name|callVolumePriority1
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Priority.0.AvgResponseTime: "
operator|+
name|avgRespTimePriority0
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Priority.1.AvgResponseTime: "
operator|+
name|avgRespTimePriority1
argument_list|)
expr_stmt|;
return|return
name|decayedCallVolume1
operator|>
name|beginDecayedCallVolume
operator|&&
name|rawCallVolume1
operator|>
name|beginRawCallVolume
operator|&&
name|uniqueCaller1
operator|>
name|beginUniqueCaller
return|;
block|}
block|}
argument_list|,
literal|30
argument_list|,
literal|60000
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|executorService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|stop
argument_list|(
name|server
argument_list|,
name|proxy
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lastException
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Last received non-RetriableException:"
argument_list|,
name|lastException
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"RetriableException not received"
argument_list|,
name|succeeded
argument_list|)
expr_stmt|;
block|}
DECL|method|setupDecayRpcSchedulerandTestServer (String ns)
specifier|private
name|Server
name|setupDecayRpcSchedulerandTestServer
parameter_list|(
name|String
name|ns
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|int
name|queueSizePerHandler
init|=
literal|3
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IPC_CLIENT_CONNECT_MAX_RETRIES_KEY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|ns
operator|+
name|CommonConfigurationKeys
operator|.
name|IPC_BACKOFF_ENABLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
name|ns
operator|+
name|CommonConfigurationKeys
operator|.
name|IPC_CALLQUEUE_IMPL_KEY
argument_list|,
literal|"org.apache.hadoop.ipc.FairCallQueue"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
name|ns
operator|+
name|CommonConfigurationKeys
operator|.
name|IPC_SCHEDULER_IMPL_KEY
argument_list|,
literal|"org.apache.hadoop.ipc.DecayRpcScheduler"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|ns
operator|+
name|CommonConfigurationKeys
operator|.
name|IPC_SCHEDULER_PRIORITY_LEVELS_KEY
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|ns
operator|+
name|DecayRpcScheduler
operator|.
name|IPC_DECAYSCHEDULER_BACKOFF_RESPONSETIME_ENABLE_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// set a small thresholds 2s and 4s for level 0 and level 1 for testing
name|conf
operator|.
name|set
argument_list|(
name|ns
operator|+
name|DecayRpcScheduler
operator|.
name|IPC_DECAYSCHEDULER_BACKOFF_RESPONSETIME_THRESHOLDS_KEY
argument_list|,
literal|"2s, 4s"
argument_list|)
expr_stmt|;
comment|// Set max queue size to 3 so that 2 calls from the test won't trigger
comment|// back off because the queue is full.
name|RPC
operator|.
name|Builder
name|builder
init|=
name|newServerBuilder
argument_list|(
name|conf
argument_list|)
operator|.
name|setQueueSizePerHandler
argument_list|(
name|queueSizePerHandler
argument_list|)
operator|.
name|setNumHandlers
argument_list|(
literal|1
argument_list|)
operator|.
name|setVerbose
argument_list|(
literal|true
argument_list|)
decl_stmt|;
return|return
name|setupTestServer
argument_list|(
name|builder
argument_list|)
return|;
block|}
comment|/**    *  Test RPC timeout.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testClientRpcTimeout ()
specifier|public
name|void
name|testClientRpcTimeout
parameter_list|()
throws|throws
name|Exception
block|{
name|Server
name|server
decl_stmt|;
name|TestRpcService
name|proxy
init|=
literal|null
decl_stmt|;
name|RPC
operator|.
name|Builder
name|builder
init|=
name|newServerBuilder
argument_list|(
name|conf
argument_list|)
operator|.
name|setQueueSizePerHandler
argument_list|(
literal|1
argument_list|)
operator|.
name|setNumHandlers
argument_list|(
literal|1
argument_list|)
operator|.
name|setVerbose
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|server
operator|=
name|setupTestServer
argument_list|(
name|builder
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Test RPC timeout with default ipc.client.ping.
try|try
block|{
name|Configuration
name|c
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|c
operator|.
name|setInt
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IPC_CLIENT_RPC_TIMEOUT_KEY
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|proxy
operator|=
name|getClient
argument_list|(
name|addr
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|sleep
argument_list|(
literal|null
argument_list|,
name|newSleepRequest
argument_list|(
literal|3000
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"RPC should time out."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|SocketTimeoutException
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"got expected timeout."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Test RPC timeout when ipc.client.ping is false.
try|try
block|{
name|Configuration
name|c
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|c
operator|.
name|setBoolean
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IPC_CLIENT_PING_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|c
operator|.
name|setInt
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IPC_CLIENT_RPC_TIMEOUT_KEY
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|proxy
operator|=
name|getClient
argument_list|(
name|addr
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|sleep
argument_list|(
literal|null
argument_list|,
name|newSleepRequest
argument_list|(
literal|3000
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"RPC should time out."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|SocketTimeoutException
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"got expected timeout."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Test negative timeout value.
try|try
block|{
name|Configuration
name|c
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|c
operator|.
name|setInt
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IPC_CLIENT_RPC_TIMEOUT_KEY
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|proxy
operator|=
name|getClient
argument_list|(
name|addr
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|sleep
argument_list|(
literal|null
argument_list|,
name|newSleepRequest
argument_list|(
literal|2000
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"got unexpected exception."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"RPC should not time out."
argument_list|)
expr_stmt|;
block|}
comment|// Test RPC timeout greater than ipc.ping.interval.
try|try
block|{
name|Configuration
name|c
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|c
operator|.
name|setBoolean
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IPC_CLIENT_PING_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|c
operator|.
name|setInt
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IPC_PING_INTERVAL_KEY
argument_list|,
literal|800
argument_list|)
expr_stmt|;
name|c
operator|.
name|setInt
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IPC_CLIENT_RPC_TIMEOUT_KEY
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|proxy
operator|=
name|getClient
argument_list|(
name|addr
argument_list|,
name|c
argument_list|)
expr_stmt|;
try|try
block|{
comment|// should not time out because effective rpc-timeout is
comment|// multiple of ping interval: 1600 (= 800 * (1000 / 800 + 1))
name|proxy
operator|.
name|sleep
argument_list|(
literal|null
argument_list|,
name|newSleepRequest
argument_list|(
literal|1300
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"got unexpected exception."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"RPC should not time out."
argument_list|)
expr_stmt|;
block|}
name|proxy
operator|.
name|sleep
argument_list|(
literal|null
argument_list|,
name|newSleepRequest
argument_list|(
literal|2000
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"RPC should time out."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|SocketTimeoutException
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"got expected timeout."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|stop
argument_list|(
name|server
argument_list|,
name|proxy
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
operator|new
name|TestRPC
argument_list|()
operator|.
name|testCallsInternal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

