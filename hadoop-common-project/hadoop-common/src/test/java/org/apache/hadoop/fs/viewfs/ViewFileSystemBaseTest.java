begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.viewfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|viewfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BlockLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystemTestHelper
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystemTestHelper
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntry
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|viewfs
operator|.
name|Constants
operator|.
name|PERMISSION_555
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocatedFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RemoteIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|viewfs
operator|.
name|ConfigUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|viewfs
operator|.
name|ViewFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|viewfs
operator|.
name|ViewFileSystem
operator|.
name|MountPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  *<p>  * A collection of tests for the {@link ViewFileSystem}.  * This test should be used for testing ViewFileSystem that has mount links to   * a target file system such  localFs or Hdfs etc.   *</p>  *<p>  * To test a given target file system create a subclass of this  * test and override {@link #setUp()} to initialize the<code>fsTarget</code>   * to point to the file system to which you want the mount targets  *   * Since this a junit 4 you can also do a single setup before   * the start of any tests.  * E.g.  *     @BeforeClass   public static void clusterSetupAtBegining()  *     @AfterClass    public static void ClusterShutdownAtEnd()  *</p>  */
end_comment

begin_class
DECL|class|ViewFileSystemBaseTest
specifier|public
class|class
name|ViewFileSystemBaseTest
block|{
DECL|field|fsView
name|FileSystem
name|fsView
decl_stmt|;
comment|// the view file system - the mounts are here
DECL|field|fsTarget
name|FileSystem
name|fsTarget
decl_stmt|;
comment|// the target file system - the mount will point here
DECL|field|targetTestRoot
name|Path
name|targetTestRoot
decl_stmt|;
DECL|field|conf
name|Configuration
name|conf
decl_stmt|;
DECL|field|fileSystemTestHelper
specifier|final
name|FileSystemTestHelper
name|fileSystemTestHelper
decl_stmt|;
DECL|method|ViewFileSystemBaseTest ()
specifier|public
name|ViewFileSystemBaseTest
parameter_list|()
block|{
name|this
operator|.
name|fileSystemTestHelper
operator|=
name|createFileSystemHelper
argument_list|()
expr_stmt|;
block|}
DECL|method|createFileSystemHelper ()
specifier|protected
name|FileSystemTestHelper
name|createFileSystemHelper
parameter_list|()
block|{
return|return
operator|new
name|FileSystemTestHelper
argument_list|()
return|;
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|initializeTargetTestRoot
argument_list|()
expr_stmt|;
comment|// Make  user and data dirs - we creates links to them in the mount table
name|fsTarget
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"user"
argument_list|)
argument_list|)
expr_stmt|;
name|fsTarget
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"data"
argument_list|)
argument_list|)
expr_stmt|;
name|fsTarget
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"dir2"
argument_list|)
argument_list|)
expr_stmt|;
name|fsTarget
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"dir3"
argument_list|)
argument_list|)
expr_stmt|;
name|FileSystemTestHelper
operator|.
name|createFile
argument_list|(
name|fsTarget
argument_list|,
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"aFile"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now we use the mount fs to set links to user and dir
comment|// in the test root
comment|// Set up the defaultMT in the config with our mount point links
name|conf
operator|=
name|ViewFileSystemTestSetup
operator|.
name|createConfig
argument_list|()
expr_stmt|;
name|setupMountPoints
argument_list|()
expr_stmt|;
name|fsView
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|FsConstants
operator|.
name|VIEWFS_URI
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|fsTarget
operator|.
name|delete
argument_list|(
name|fileSystemTestHelper
operator|.
name|getTestRootPath
argument_list|(
name|fsTarget
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|initializeTargetTestRoot ()
name|void
name|initializeTargetTestRoot
parameter_list|()
throws|throws
name|IOException
block|{
name|targetTestRoot
operator|=
name|fileSystemTestHelper
operator|.
name|getAbsoluteTestRootPath
argument_list|(
name|fsTarget
argument_list|)
expr_stmt|;
comment|// In case previous test was killed before cleanup
name|fsTarget
operator|.
name|delete
argument_list|(
name|targetTestRoot
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fsTarget
operator|.
name|mkdirs
argument_list|(
name|targetTestRoot
argument_list|)
expr_stmt|;
block|}
DECL|method|setupMountPoints ()
name|void
name|setupMountPoints
parameter_list|()
block|{
name|ConfigUtil
operator|.
name|addLink
argument_list|(
name|conf
argument_list|,
literal|"/targetRoot"
argument_list|,
name|targetTestRoot
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
name|ConfigUtil
operator|.
name|addLink
argument_list|(
name|conf
argument_list|,
literal|"/user"
argument_list|,
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"user"
argument_list|)
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
name|ConfigUtil
operator|.
name|addLink
argument_list|(
name|conf
argument_list|,
literal|"/user2"
argument_list|,
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"user"
argument_list|)
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
name|ConfigUtil
operator|.
name|addLink
argument_list|(
name|conf
argument_list|,
literal|"/data"
argument_list|,
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"data"
argument_list|)
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
name|ConfigUtil
operator|.
name|addLink
argument_list|(
name|conf
argument_list|,
literal|"/internalDir/linkToDir2"
argument_list|,
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"dir2"
argument_list|)
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
name|ConfigUtil
operator|.
name|addLink
argument_list|(
name|conf
argument_list|,
literal|"/internalDir/internalDir2/linkToDir3"
argument_list|,
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"dir3"
argument_list|)
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
name|ConfigUtil
operator|.
name|addLink
argument_list|(
name|conf
argument_list|,
literal|"/danglingLink"
argument_list|,
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"missingTarget"
argument_list|)
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
name|ConfigUtil
operator|.
name|addLink
argument_list|(
name|conf
argument_list|,
literal|"/linkToAFile"
argument_list|,
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"aFile"
argument_list|)
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetMountPoints ()
specifier|public
name|void
name|testGetMountPoints
parameter_list|()
block|{
name|ViewFileSystem
name|viewfs
init|=
operator|(
name|ViewFileSystem
operator|)
name|fsView
decl_stmt|;
name|MountPoint
index|[]
name|mountPoints
init|=
name|viewfs
operator|.
name|getMountPoints
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|getExpectedMountPoints
argument_list|()
argument_list|,
name|mountPoints
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|getExpectedMountPoints ()
name|int
name|getExpectedMountPoints
parameter_list|()
block|{
return|return
literal|8
return|;
block|}
comment|/**    * This default implementation is when viewfs has mount points    * into file systems, such as LocalFs that do no have delegation tokens.    * It should be overridden for when mount points into hdfs.    */
annotation|@
name|Test
DECL|method|testGetDelegationTokens ()
specifier|public
name|void
name|testGetDelegationTokens
parameter_list|()
throws|throws
name|IOException
block|{
name|Token
argument_list|<
name|?
argument_list|>
index|[]
name|delTokens
init|=
name|fsView
operator|.
name|addDelegationTokens
argument_list|(
literal|"sanjay"
argument_list|,
operator|new
name|Credentials
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|getExpectedDelegationTokenCount
argument_list|()
argument_list|,
name|delTokens
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|getExpectedDelegationTokenCount ()
name|int
name|getExpectedDelegationTokenCount
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Test
DECL|method|testGetDelegationTokensWithCredentials ()
specifier|public
name|void
name|testGetDelegationTokensWithCredentials
parameter_list|()
throws|throws
name|IOException
block|{
name|Credentials
name|credentials
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Token
argument_list|<
name|?
argument_list|>
argument_list|>
name|delTokens
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|fsView
operator|.
name|addDelegationTokens
argument_list|(
literal|"sanjay"
argument_list|,
name|credentials
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|expectedTokenCount
init|=
name|getExpectedDelegationTokenCountWithCredentials
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedTokenCount
argument_list|,
name|delTokens
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Credentials
name|newCredentials
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedTokenCount
operator|/
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|Token
argument_list|<
name|?
argument_list|>
name|token
init|=
name|delTokens
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|newCredentials
operator|.
name|addToken
argument_list|(
name|token
operator|.
name|getService
argument_list|()
argument_list|,
name|token
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Token
argument_list|<
name|?
argument_list|>
argument_list|>
name|delTokens2
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|fsView
operator|.
name|addDelegationTokens
argument_list|(
literal|"sanjay"
argument_list|,
name|newCredentials
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|(
name|expectedTokenCount
operator|+
literal|1
operator|)
operator|/
literal|2
argument_list|,
name|delTokens2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getExpectedDelegationTokenCountWithCredentials ()
name|int
name|getExpectedDelegationTokenCountWithCredentials
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Test
DECL|method|testBasicPaths ()
specifier|public
name|void
name|testBasicPaths
parameter_list|()
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|FsConstants
operator|.
name|VIEWFS_URI
argument_list|,
name|fsView
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|fsView
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/user/"
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|fsView
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|fsView
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/user/"
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|fsView
operator|.
name|getHomeDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo/bar"
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|FsConstants
operator|.
name|VIEWFS_URI
argument_list|,
literal|null
argument_list|)
argument_list|,
name|fsView
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo/bar"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLocatedOperationsThroughMountLinks ()
specifier|public
name|void
name|testLocatedOperationsThroughMountLinks
parameter_list|()
throws|throws
name|IOException
block|{
name|testOperationsThroughMountLinksInternal
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOperationsThroughMountLinks ()
specifier|public
name|void
name|testOperationsThroughMountLinks
parameter_list|()
throws|throws
name|IOException
block|{
name|testOperationsThroughMountLinksInternal
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test modify operations (create, mkdir, delete, etc)    * on the mount file system where the pathname references through    * the mount points.  Hence these operation will modify the target    * file system.    *    * Verify the operation via mountfs (ie fSys) and *also* via the    *  target file system (ie fSysLocal) that the mount link points-to.    */
DECL|method|testOperationsThroughMountLinksInternal (boolean located)
specifier|private
name|void
name|testOperationsThroughMountLinksInternal
parameter_list|(
name|boolean
name|located
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Create file
name|fileSystemTestHelper
operator|.
name|createFile
argument_list|(
name|fsView
argument_list|,
literal|"/user/foo"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Created file should be type file"
argument_list|,
name|fsView
operator|.
name|isFile
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/user/foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Target of created file should be type file"
argument_list|,
name|fsTarget
operator|.
name|isFile
argument_list|(
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"user/foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Delete the created file
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Delete should suceed"
argument_list|,
name|fsView
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/user/foo"
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"File should not exist after delete"
argument_list|,
name|fsView
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/user/foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Target File should not exist after delete"
argument_list|,
name|fsTarget
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"user/foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create file with a 2 component dirs
name|fileSystemTestHelper
operator|.
name|createFile
argument_list|(
name|fsView
argument_list|,
literal|"/internalDir/linkToDir2/foo"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Created file should be type file"
argument_list|,
name|fsView
operator|.
name|isFile
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir/linkToDir2/foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Target of created file should be type file"
argument_list|,
name|fsTarget
operator|.
name|isFile
argument_list|(
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"dir2/foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Delete the created file
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Delete should suceed"
argument_list|,
name|fsView
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir/linkToDir2/foo"
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"File should not exist after delete"
argument_list|,
name|fsView
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir/linkToDir2/foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Target File should not exist after delete"
argument_list|,
name|fsTarget
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"dir2/foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create file with a 3 component dirs
name|fileSystemTestHelper
operator|.
name|createFile
argument_list|(
name|fsView
argument_list|,
literal|"/internalDir/internalDir2/linkToDir3/foo"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Created file should be type file"
argument_list|,
name|fsView
operator|.
name|isFile
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir/internalDir2/linkToDir3/foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Target of created file should be type file"
argument_list|,
name|fsTarget
operator|.
name|isFile
argument_list|(
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"dir3/foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Recursive Create file with missing dirs
name|fileSystemTestHelper
operator|.
name|createFile
argument_list|(
name|fsView
argument_list|,
literal|"/internalDir/linkToDir2/missingDir/miss2/foo"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Created file should be type file"
argument_list|,
name|fsView
operator|.
name|isFile
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir/linkToDir2/missingDir/miss2/foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Target of created file should be type file"
argument_list|,
name|fsTarget
operator|.
name|isFile
argument_list|(
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"dir2/missingDir/miss2/foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Delete the created file
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Delete should succeed"
argument_list|,
name|fsView
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir/internalDir2/linkToDir3/foo"
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"File should not exist after delete"
argument_list|,
name|fsView
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir/internalDir2/linkToDir3/foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Target File should not exist after delete"
argument_list|,
name|fsTarget
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"dir3/foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// mkdir
name|fsView
operator|.
name|mkdirs
argument_list|(
name|fileSystemTestHelper
operator|.
name|getTestRootPath
argument_list|(
name|fsView
argument_list|,
literal|"/user/dirX"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"New dir should be type dir"
argument_list|,
name|fsView
operator|.
name|isDirectory
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/user/dirX"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Target of new dir should be of type dir"
argument_list|,
name|fsTarget
operator|.
name|isDirectory
argument_list|(
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"user/dirX"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|fsView
operator|.
name|mkdirs
argument_list|(
name|fileSystemTestHelper
operator|.
name|getTestRootPath
argument_list|(
name|fsView
argument_list|,
literal|"/user/dirX/dirY"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"New dir should be type dir"
argument_list|,
name|fsView
operator|.
name|isDirectory
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/user/dirX/dirY"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Target of new dir should be of type dir"
argument_list|,
name|fsTarget
operator|.
name|isDirectory
argument_list|(
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"user/dirX/dirY"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Delete the created dir
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Delete should succeed"
argument_list|,
name|fsView
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/user/dirX/dirY"
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"File should not exist after delete"
argument_list|,
name|fsView
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/user/dirX/dirY"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Target File should not exist after delete"
argument_list|,
name|fsTarget
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"user/dirX/dirY"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Delete should succeed"
argument_list|,
name|fsView
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/user/dirX"
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"File should not exist after delete"
argument_list|,
name|fsView
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/user/dirX"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|fsTarget
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"user/dirX"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Rename a file
name|fileSystemTestHelper
operator|.
name|createFile
argument_list|(
name|fsView
argument_list|,
literal|"/user/foo"
argument_list|)
expr_stmt|;
name|fsView
operator|.
name|rename
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/user/foo"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/user/fooBar"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Renamed src should not exist"
argument_list|,
name|fsView
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/user/foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Renamed src should not exist in target"
argument_list|,
name|fsTarget
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"user/foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Renamed dest should  exist as file"
argument_list|,
name|fsView
operator|.
name|isFile
argument_list|(
name|fileSystemTestHelper
operator|.
name|getTestRootPath
argument_list|(
name|fsView
argument_list|,
literal|"/user/fooBar"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Renamed dest should  exist as file in target"
argument_list|,
name|fsTarget
operator|.
name|isFile
argument_list|(
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"user/fooBar"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|fsView
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/user/dirFoo"
argument_list|)
argument_list|)
expr_stmt|;
name|fsView
operator|.
name|rename
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/user/dirFoo"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/user/dirFooBar"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Renamed src should not exist"
argument_list|,
name|fsView
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/user/dirFoo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Renamed src should not exist in target"
argument_list|,
name|fsTarget
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"user/dirFoo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Renamed dest should  exist as dir"
argument_list|,
name|fsView
operator|.
name|isDirectory
argument_list|(
name|fileSystemTestHelper
operator|.
name|getTestRootPath
argument_list|(
name|fsView
argument_list|,
literal|"/user/dirFooBar"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Renamed dest should  exist as dir in target"
argument_list|,
name|fsTarget
operator|.
name|isDirectory
argument_list|(
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"user/dirFooBar"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make a directory under a directory that's mounted from the root of another FS
name|fsView
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/targetRoot/dirFoo"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fsView
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/targetRoot/dirFoo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|dirFooPresent
init|=
literal|false
decl_stmt|;
for|for
control|(
name|FileStatus
name|fileStatus
range|:
name|listStatusInternal
argument_list|(
name|located
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/targetRoot/"
argument_list|)
argument_list|)
control|)
block|{
if|if
condition|(
name|fileStatus
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"dirFoo"
argument_list|)
condition|)
block|{
name|dirFooPresent
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dirFooPresent
argument_list|)
expr_stmt|;
block|}
comment|// rename across mount points that point to same target also fail
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IOException
operator|.
name|class
argument_list|)
DECL|method|testRenameAcrossMounts1 ()
specifier|public
name|void
name|testRenameAcrossMounts1
parameter_list|()
throws|throws
name|IOException
block|{
name|fileSystemTestHelper
operator|.
name|createFile
argument_list|(
name|fsView
argument_list|,
literal|"/user/foo"
argument_list|)
expr_stmt|;
name|fsView
operator|.
name|rename
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/user/foo"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/user2/fooBarBar"
argument_list|)
argument_list|)
expr_stmt|;
comment|/* - code if we had wanted this to suceed     Assert.assertFalse(fSys.exists(new Path("/user/foo")));     Assert.assertFalse(fSysLocal.exists(new Path(targetTestRoot,"user/foo")));     Assert.assertTrue(fSys.isFile(FileSystemTestHelper.getTestRootPath(fSys,"/user2/fooBarBar")));     Assert.assertTrue(fSysLocal.isFile(new Path(targetTestRoot,"user/fooBarBar")));     */
block|}
comment|// rename across mount points fail if the mount link targets are different
comment|// even if the targets are part of the same target FS
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IOException
operator|.
name|class
argument_list|)
DECL|method|testRenameAcrossMounts2 ()
specifier|public
name|void
name|testRenameAcrossMounts2
parameter_list|()
throws|throws
name|IOException
block|{
name|fileSystemTestHelper
operator|.
name|createFile
argument_list|(
name|fsView
argument_list|,
literal|"/user/foo"
argument_list|)
expr_stmt|;
name|fsView
operator|.
name|rename
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/user/foo"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/data/fooBar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|field|SupportsBlocks
specifier|static
specifier|protected
name|boolean
name|SupportsBlocks
init|=
literal|false
decl_stmt|;
comment|//  local fs use 1 block
comment|// override for HDFS
annotation|@
name|Test
DECL|method|testGetBlockLocations ()
specifier|public
name|void
name|testGetBlockLocations
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|targetFilePath
init|=
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"data/largeFile"
argument_list|)
decl_stmt|;
name|FileSystemTestHelper
operator|.
name|createFile
argument_list|(
name|fsTarget
argument_list|,
name|targetFilePath
argument_list|,
literal|10
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|Path
name|viewFilePath
init|=
operator|new
name|Path
argument_list|(
literal|"/data/largeFile"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Created File should be type File"
argument_list|,
name|fsView
operator|.
name|isFile
argument_list|(
name|viewFilePath
argument_list|)
argument_list|)
expr_stmt|;
name|BlockLocation
index|[]
name|viewBL
init|=
name|fsView
operator|.
name|getFileBlockLocations
argument_list|(
name|fsView
operator|.
name|getFileStatus
argument_list|(
name|viewFilePath
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|10240
operator|+
literal|100
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SupportsBlocks
condition|?
literal|10
else|:
literal|1
argument_list|,
name|viewBL
operator|.
name|length
argument_list|)
expr_stmt|;
name|BlockLocation
index|[]
name|targetBL
init|=
name|fsTarget
operator|.
name|getFileBlockLocations
argument_list|(
name|fsTarget
operator|.
name|getFileStatus
argument_list|(
name|targetFilePath
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|10240
operator|+
literal|100
argument_list|)
decl_stmt|;
name|compareBLs
argument_list|(
name|viewBL
argument_list|,
name|targetBL
argument_list|)
expr_stmt|;
comment|// Same test but now get it via the FileStatus Parameter
name|fsView
operator|.
name|getFileBlockLocations
argument_list|(
name|fsView
operator|.
name|getFileStatus
argument_list|(
name|viewFilePath
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|10240
operator|+
literal|100
argument_list|)
expr_stmt|;
name|targetBL
operator|=
name|fsTarget
operator|.
name|getFileBlockLocations
argument_list|(
name|fsTarget
operator|.
name|getFileStatus
argument_list|(
name|targetFilePath
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|10240
operator|+
literal|100
argument_list|)
expr_stmt|;
name|compareBLs
argument_list|(
name|viewBL
argument_list|,
name|targetBL
argument_list|)
expr_stmt|;
block|}
DECL|method|compareBLs (BlockLocation[] viewBL, BlockLocation[] targetBL)
name|void
name|compareBLs
parameter_list|(
name|BlockLocation
index|[]
name|viewBL
parameter_list|,
name|BlockLocation
index|[]
name|targetBL
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|targetBL
operator|.
name|length
argument_list|,
name|viewBL
operator|.
name|length
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|BlockLocation
name|vbl
range|:
name|viewBL
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|vbl
operator|.
name|toString
argument_list|()
argument_list|,
name|targetBL
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|targetBL
index|[
name|i
index|]
operator|.
name|getOffset
argument_list|()
argument_list|,
name|vbl
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|targetBL
index|[
name|i
index|]
operator|.
name|getLength
argument_list|()
argument_list|,
name|vbl
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testLocatedListOnInternalDirsOfMountTable ()
specifier|public
name|void
name|testLocatedListOnInternalDirsOfMountTable
parameter_list|()
throws|throws
name|IOException
block|{
name|testListOnInternalDirsOfMountTableInternal
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test "readOps" (e.g. list, listStatus)     * on internal dirs of mount table    * These operations should succeed.    */
comment|// test list on internal dirs of mount table
annotation|@
name|Test
DECL|method|testListOnInternalDirsOfMountTable ()
specifier|public
name|void
name|testListOnInternalDirsOfMountTable
parameter_list|()
throws|throws
name|IOException
block|{
name|testListOnInternalDirsOfMountTableInternal
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testListOnInternalDirsOfMountTableInternal (boolean located)
specifier|private
name|void
name|testListOnInternalDirsOfMountTableInternal
parameter_list|(
name|boolean
name|located
parameter_list|)
throws|throws
name|IOException
block|{
comment|// list on Slash
name|FileStatus
index|[]
name|dirPaths
init|=
name|listStatusInternal
argument_list|(
name|located
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
decl_stmt|;
name|FileStatus
name|fs
decl_stmt|;
name|verifyRootChildren
argument_list|(
name|dirPaths
argument_list|)
expr_stmt|;
comment|// list on internal dir
name|dirPaths
operator|=
name|listStatusInternal
argument_list|(
name|located
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/internalDir"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|dirPaths
operator|.
name|length
argument_list|)
expr_stmt|;
name|fs
operator|=
name|fileSystemTestHelper
operator|.
name|containsPath
argument_list|(
name|fsView
argument_list|,
literal|"/internalDir/internalDir2"
argument_list|,
name|dirPaths
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"A mount should appear as symlink"
argument_list|,
name|fs
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|=
name|fileSystemTestHelper
operator|.
name|containsPath
argument_list|(
name|fsView
argument_list|,
literal|"/internalDir/linkToDir2"
argument_list|,
name|dirPaths
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"A mount should appear as symlink"
argument_list|,
name|fs
operator|.
name|isSymlink
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyRootChildren (FileStatus[] dirPaths)
specifier|private
name|void
name|verifyRootChildren
parameter_list|(
name|FileStatus
index|[]
name|dirPaths
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
name|fs
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|getExpectedDirPaths
argument_list|()
argument_list|,
name|dirPaths
operator|.
name|length
argument_list|)
expr_stmt|;
name|fs
operator|=
name|fileSystemTestHelper
operator|.
name|containsPath
argument_list|(
name|fsView
argument_list|,
literal|"/user"
argument_list|,
name|dirPaths
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"A mount should appear as symlink"
argument_list|,
name|fs
operator|.
name|isSymlink
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|=
name|fileSystemTestHelper
operator|.
name|containsPath
argument_list|(
name|fsView
argument_list|,
literal|"/data"
argument_list|,
name|dirPaths
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"A mount should appear as symlink"
argument_list|,
name|fs
operator|.
name|isSymlink
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|=
name|fileSystemTestHelper
operator|.
name|containsPath
argument_list|(
name|fsView
argument_list|,
literal|"/internalDir"
argument_list|,
name|dirPaths
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"A mount should appear as symlink"
argument_list|,
name|fs
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|=
name|fileSystemTestHelper
operator|.
name|containsPath
argument_list|(
name|fsView
argument_list|,
literal|"/danglingLink"
argument_list|,
name|dirPaths
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"A mount should appear as symlink"
argument_list|,
name|fs
operator|.
name|isSymlink
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|=
name|fileSystemTestHelper
operator|.
name|containsPath
argument_list|(
name|fsView
argument_list|,
literal|"/linkToAFile"
argument_list|,
name|dirPaths
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"A mount should appear as symlink"
argument_list|,
name|fs
operator|.
name|isSymlink
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getExpectedDirPaths ()
name|int
name|getExpectedDirPaths
parameter_list|()
block|{
return|return
literal|7
return|;
block|}
annotation|@
name|Test
DECL|method|testListOnMountTargetDirs ()
specifier|public
name|void
name|testListOnMountTargetDirs
parameter_list|()
throws|throws
name|IOException
block|{
name|testListOnMountTargetDirsInternal
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLocatedListOnMountTargetDirs ()
specifier|public
name|void
name|testLocatedListOnMountTargetDirs
parameter_list|()
throws|throws
name|IOException
block|{
name|testListOnMountTargetDirsInternal
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testListOnMountTargetDirsInternal (boolean located)
specifier|private
name|void
name|testListOnMountTargetDirsInternal
parameter_list|(
name|boolean
name|located
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|dataPath
init|=
operator|new
name|Path
argument_list|(
literal|"/data"
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|dirPaths
init|=
name|listStatusInternal
argument_list|(
name|located
argument_list|,
name|dataPath
argument_list|)
decl_stmt|;
name|FileStatus
name|fs
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|dirPaths
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// add a file
name|long
name|len
init|=
name|fileSystemTestHelper
operator|.
name|createFile
argument_list|(
name|fsView
argument_list|,
literal|"/data/foo"
argument_list|)
decl_stmt|;
name|dirPaths
operator|=
name|listStatusInternal
argument_list|(
name|located
argument_list|,
name|dataPath
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|dirPaths
operator|.
name|length
argument_list|)
expr_stmt|;
name|fs
operator|=
name|fileSystemTestHelper
operator|.
name|containsPath
argument_list|(
name|fsView
argument_list|,
literal|"/data/foo"
argument_list|,
name|dirPaths
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Created file shoudl appear as a file"
argument_list|,
name|fs
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|len
argument_list|,
name|fs
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
comment|// add a dir
name|fsView
operator|.
name|mkdirs
argument_list|(
name|fileSystemTestHelper
operator|.
name|getTestRootPath
argument_list|(
name|fsView
argument_list|,
literal|"/data/dirX"
argument_list|)
argument_list|)
expr_stmt|;
name|dirPaths
operator|=
name|listStatusInternal
argument_list|(
name|located
argument_list|,
name|dataPath
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|dirPaths
operator|.
name|length
argument_list|)
expr_stmt|;
name|fs
operator|=
name|fileSystemTestHelper
operator|.
name|containsPath
argument_list|(
name|fsView
argument_list|,
literal|"/data/foo"
argument_list|,
name|dirPaths
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Created file shoudl appear as a file"
argument_list|,
name|fs
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|=
name|fileSystemTestHelper
operator|.
name|containsPath
argument_list|(
name|fsView
argument_list|,
literal|"/data/dirX"
argument_list|,
name|dirPaths
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Created dir should appear as a dir"
argument_list|,
name|fs
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|listStatusInternal (boolean located, Path dataPath)
specifier|private
name|FileStatus
index|[]
name|listStatusInternal
parameter_list|(
name|boolean
name|located
parameter_list|,
name|Path
name|dataPath
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
index|[]
name|dirPaths
init|=
operator|new
name|FileStatus
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|located
condition|)
block|{
name|RemoteIterator
argument_list|<
name|LocatedFileStatus
argument_list|>
name|statIter
init|=
name|fsView
operator|.
name|listLocatedStatus
argument_list|(
name|dataPath
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|LocatedFileStatus
argument_list|>
name|tmp
init|=
operator|new
name|ArrayList
argument_list|<
name|LocatedFileStatus
argument_list|>
argument_list|(
literal|10
argument_list|)
decl_stmt|;
while|while
condition|(
name|statIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|tmp
operator|.
name|add
argument_list|(
name|statIter
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|dirPaths
operator|=
name|tmp
operator|.
name|toArray
argument_list|(
name|dirPaths
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dirPaths
operator|=
name|fsView
operator|.
name|listStatus
argument_list|(
name|dataPath
argument_list|)
expr_stmt|;
block|}
return|return
name|dirPaths
return|;
block|}
annotation|@
name|Test
DECL|method|testFileStatusOnMountLink ()
specifier|public
name|void
name|testFileStatusOnMountLink
parameter_list|()
throws|throws
name|IOException
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fsView
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|checkFileStatus
argument_list|(
name|fsView
argument_list|,
literal|"/"
argument_list|,
name|fileType
operator|.
name|isDir
argument_list|)
expr_stmt|;
name|checkFileStatus
argument_list|(
name|fsView
argument_list|,
literal|"/user"
argument_list|,
name|fileType
operator|.
name|isDir
argument_list|)
expr_stmt|;
comment|// link followed => dir
name|checkFileStatus
argument_list|(
name|fsView
argument_list|,
literal|"/data"
argument_list|,
name|fileType
operator|.
name|isDir
argument_list|)
expr_stmt|;
name|checkFileStatus
argument_list|(
name|fsView
argument_list|,
literal|"/internalDir"
argument_list|,
name|fileType
operator|.
name|isDir
argument_list|)
expr_stmt|;
name|checkFileStatus
argument_list|(
name|fsView
argument_list|,
literal|"/internalDir/linkToDir2"
argument_list|,
name|fileType
operator|.
name|isDir
argument_list|)
expr_stmt|;
name|checkFileStatus
argument_list|(
name|fsView
argument_list|,
literal|"/internalDir/internalDir2/linkToDir3"
argument_list|,
name|fileType
operator|.
name|isDir
argument_list|)
expr_stmt|;
name|checkFileStatus
argument_list|(
name|fsView
argument_list|,
literal|"/linkToAFile"
argument_list|,
name|fileType
operator|.
name|isFile
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|FileNotFoundException
operator|.
name|class
argument_list|)
DECL|method|testgetFSonDanglingLink ()
specifier|public
name|void
name|testgetFSonDanglingLink
parameter_list|()
throws|throws
name|IOException
block|{
name|fsView
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/danglingLink"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|FileNotFoundException
operator|.
name|class
argument_list|)
DECL|method|testgetFSonNonExistingInternalDir ()
specifier|public
name|void
name|testgetFSonNonExistingInternalDir
parameter_list|()
throws|throws
name|IOException
block|{
name|fsView
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir/nonExisting"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*    * Test resolvePath(p)     */
annotation|@
name|Test
DECL|method|testResolvePathInternalPaths ()
specifier|public
name|void
name|testResolvePathInternalPaths
parameter_list|()
throws|throws
name|IOException
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|fsView
operator|.
name|resolvePath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir"
argument_list|)
argument_list|,
name|fsView
operator|.
name|resolvePath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testResolvePathMountPoints ()
specifier|public
name|void
name|testResolvePathMountPoints
parameter_list|()
throws|throws
name|IOException
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"user"
argument_list|)
argument_list|,
name|fsView
operator|.
name|resolvePath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/user"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"data"
argument_list|)
argument_list|,
name|fsView
operator|.
name|resolvePath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/data"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"dir2"
argument_list|)
argument_list|,
name|fsView
operator|.
name|resolvePath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir/linkToDir2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"dir3"
argument_list|)
argument_list|,
name|fsView
operator|.
name|resolvePath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir/internalDir2/linkToDir3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testResolvePathThroughMountPoints ()
specifier|public
name|void
name|testResolvePathThroughMountPoints
parameter_list|()
throws|throws
name|IOException
block|{
name|fileSystemTestHelper
operator|.
name|createFile
argument_list|(
name|fsView
argument_list|,
literal|"/user/foo"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"user/foo"
argument_list|)
argument_list|,
name|fsView
operator|.
name|resolvePath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/user/foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|fsView
operator|.
name|mkdirs
argument_list|(
name|fileSystemTestHelper
operator|.
name|getTestRootPath
argument_list|(
name|fsView
argument_list|,
literal|"/user/dirX"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"user/dirX"
argument_list|)
argument_list|,
name|fsView
operator|.
name|resolvePath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/user/dirX"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|fsView
operator|.
name|mkdirs
argument_list|(
name|fileSystemTestHelper
operator|.
name|getTestRootPath
argument_list|(
name|fsView
argument_list|,
literal|"/user/dirX/dirY"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"user/dirX/dirY"
argument_list|)
argument_list|,
name|fsView
operator|.
name|resolvePath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/user/dirX/dirY"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|FileNotFoundException
operator|.
name|class
argument_list|)
DECL|method|testResolvePathDanglingLink ()
specifier|public
name|void
name|testResolvePathDanglingLink
parameter_list|()
throws|throws
name|IOException
block|{
name|fsView
operator|.
name|resolvePath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/danglingLink"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|FileNotFoundException
operator|.
name|class
argument_list|)
DECL|method|testResolvePathMissingThroughMountPoints ()
specifier|public
name|void
name|testResolvePathMissingThroughMountPoints
parameter_list|()
throws|throws
name|IOException
block|{
name|fsView
operator|.
name|resolvePath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/user/nonExisting"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|FileNotFoundException
operator|.
name|class
argument_list|)
DECL|method|testResolvePathMissingThroughMountPoints2 ()
specifier|public
name|void
name|testResolvePathMissingThroughMountPoints2
parameter_list|()
throws|throws
name|IOException
block|{
name|fsView
operator|.
name|mkdirs
argument_list|(
name|fileSystemTestHelper
operator|.
name|getTestRootPath
argument_list|(
name|fsView
argument_list|,
literal|"/user/dirX"
argument_list|)
argument_list|)
expr_stmt|;
name|fsView
operator|.
name|resolvePath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/user/dirX/nonExisting"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test modify operations (create, mkdir, rename, etc)     * on internal dirs of mount table    * These operations should fail since the mount table is read-only or    * because the internal dir that it is trying to create already    * exits.    */
comment|// Mkdir on existing internal mount table succeed except for /
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
DECL|method|testInternalMkdirSlash ()
specifier|public
name|void
name|testInternalMkdirSlash
parameter_list|()
throws|throws
name|IOException
block|{
name|fsView
operator|.
name|mkdirs
argument_list|(
name|fileSystemTestHelper
operator|.
name|getTestRootPath
argument_list|(
name|fsView
argument_list|,
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testInternalMkdirExisting1 ()
specifier|public
name|void
name|testInternalMkdirExisting1
parameter_list|()
throws|throws
name|IOException
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"mkdir of existing dir should succeed"
argument_list|,
name|fsView
operator|.
name|mkdirs
argument_list|(
name|fileSystemTestHelper
operator|.
name|getTestRootPath
argument_list|(
name|fsView
argument_list|,
literal|"/internalDir"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testInternalMkdirExisting2 ()
specifier|public
name|void
name|testInternalMkdirExisting2
parameter_list|()
throws|throws
name|IOException
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"mkdir of existing dir should succeed"
argument_list|,
name|fsView
operator|.
name|mkdirs
argument_list|(
name|fileSystemTestHelper
operator|.
name|getTestRootPath
argument_list|(
name|fsView
argument_list|,
literal|"/internalDir/linkToDir2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Mkdir for new internal mount table should fail
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
DECL|method|testInternalMkdirNew ()
specifier|public
name|void
name|testInternalMkdirNew
parameter_list|()
throws|throws
name|IOException
block|{
name|fsView
operator|.
name|mkdirs
argument_list|(
name|fileSystemTestHelper
operator|.
name|getTestRootPath
argument_list|(
name|fsView
argument_list|,
literal|"/dirNew"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
DECL|method|testInternalMkdirNew2 ()
specifier|public
name|void
name|testInternalMkdirNew2
parameter_list|()
throws|throws
name|IOException
block|{
name|fsView
operator|.
name|mkdirs
argument_list|(
name|fileSystemTestHelper
operator|.
name|getTestRootPath
argument_list|(
name|fsView
argument_list|,
literal|"/internalDir/dirNew"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Create File on internal mount table should fail
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
DECL|method|testInternalCreate1 ()
specifier|public
name|void
name|testInternalCreate1
parameter_list|()
throws|throws
name|IOException
block|{
name|fileSystemTestHelper
operator|.
name|createFile
argument_list|(
name|fsView
argument_list|,
literal|"/foo"
argument_list|)
expr_stmt|;
comment|// 1 component
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
DECL|method|testInternalCreate2 ()
specifier|public
name|void
name|testInternalCreate2
parameter_list|()
throws|throws
name|IOException
block|{
comment|// 2 component
name|fileSystemTestHelper
operator|.
name|createFile
argument_list|(
name|fsView
argument_list|,
literal|"/internalDir/foo"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
DECL|method|testInternalCreateMissingDir ()
specifier|public
name|void
name|testInternalCreateMissingDir
parameter_list|()
throws|throws
name|IOException
block|{
name|fileSystemTestHelper
operator|.
name|createFile
argument_list|(
name|fsView
argument_list|,
literal|"/missingDir/foo"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
DECL|method|testInternalCreateMissingDir2 ()
specifier|public
name|void
name|testInternalCreateMissingDir2
parameter_list|()
throws|throws
name|IOException
block|{
name|fileSystemTestHelper
operator|.
name|createFile
argument_list|(
name|fsView
argument_list|,
literal|"/missingDir/miss2/foo"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
DECL|method|testInternalCreateMissingDir3 ()
specifier|public
name|void
name|testInternalCreateMissingDir3
parameter_list|()
throws|throws
name|IOException
block|{
name|fileSystemTestHelper
operator|.
name|createFile
argument_list|(
name|fsView
argument_list|,
literal|"/internalDir/miss2/foo"
argument_list|)
expr_stmt|;
block|}
comment|// Delete on internal mount table should fail
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|FileNotFoundException
operator|.
name|class
argument_list|)
DECL|method|testInternalDeleteNonExisting ()
specifier|public
name|void
name|testInternalDeleteNonExisting
parameter_list|()
throws|throws
name|IOException
block|{
name|fsView
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/NonExisting"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|FileNotFoundException
operator|.
name|class
argument_list|)
DECL|method|testInternalDeleteNonExisting2 ()
specifier|public
name|void
name|testInternalDeleteNonExisting2
parameter_list|()
throws|throws
name|IOException
block|{
name|fsView
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir/NonExisting"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
DECL|method|testInternalDeleteExisting ()
specifier|public
name|void
name|testInternalDeleteExisting
parameter_list|()
throws|throws
name|IOException
block|{
name|fsView
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
DECL|method|testInternalDeleteExisting2 ()
specifier|public
name|void
name|testInternalDeleteExisting2
parameter_list|()
throws|throws
name|IOException
block|{
name|fsView
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir/linkToDir2"
argument_list|)
argument_list|)
operator|.
name|isDirectory
argument_list|()
expr_stmt|;
name|fsView
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir/linkToDir2"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMkdirOfMountLink ()
specifier|public
name|void
name|testMkdirOfMountLink
parameter_list|()
throws|throws
name|IOException
block|{
comment|// data exists - mkdirs returns true even though no permission in internal
comment|// mount table
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"mkdir of existing mount link should succeed"
argument_list|,
name|fsView
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/data"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Rename on internal mount table should fail
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
DECL|method|testInternalRename1 ()
specifier|public
name|void
name|testInternalRename1
parameter_list|()
throws|throws
name|IOException
block|{
name|fsView
operator|.
name|rename
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/newDir"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
DECL|method|testInternalRename2 ()
specifier|public
name|void
name|testInternalRename2
parameter_list|()
throws|throws
name|IOException
block|{
name|fsView
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir/linkToDir2"
argument_list|)
argument_list|)
operator|.
name|isDirectory
argument_list|()
expr_stmt|;
name|fsView
operator|.
name|rename
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir/linkToDir2"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/internalDir/dir1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
DECL|method|testInternalRename3 ()
specifier|public
name|void
name|testInternalRename3
parameter_list|()
throws|throws
name|IOException
block|{
name|fsView
operator|.
name|rename
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/user"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/internalDir/linkToDir2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
DECL|method|testInternalRenameToSlash ()
specifier|public
name|void
name|testInternalRenameToSlash
parameter_list|()
throws|throws
name|IOException
block|{
name|fsView
operator|.
name|rename
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir/linkToDir2/foo"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
DECL|method|testInternalRenameFromSlash ()
specifier|public
name|void
name|testInternalRenameFromSlash
parameter_list|()
throws|throws
name|IOException
block|{
name|fsView
operator|.
name|rename
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
DECL|method|testInternalSetOwner ()
specifier|public
name|void
name|testInternalSetOwner
parameter_list|()
throws|throws
name|IOException
block|{
name|fsView
operator|.
name|setOwner
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir"
argument_list|)
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateNonRecursive ()
specifier|public
name|void
name|testCreateNonRecursive
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
name|fileSystemTestHelper
operator|.
name|getTestRootPath
argument_list|(
name|fsView
argument_list|,
literal|"/user/foo"
argument_list|)
decl_stmt|;
name|fsView
operator|.
name|createNonRecursive
argument_list|(
name|path
argument_list|,
literal|false
argument_list|,
literal|1024
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|1024L
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|FileStatus
name|status
init|=
name|fsView
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/user/foo"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Created file should be type file"
argument_list|,
name|fsView
operator|.
name|isFile
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/user/foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Target of created file should be type file"
argument_list|,
name|fsTarget
operator|.
name|isFile
argument_list|(
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"user/foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRootReadableExecutable ()
specifier|public
name|void
name|testRootReadableExecutable
parameter_list|()
throws|throws
name|IOException
block|{
name|testRootReadableExecutableInternal
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLocatedRootReadableExecutable ()
specifier|public
name|void
name|testLocatedRootReadableExecutable
parameter_list|()
throws|throws
name|IOException
block|{
name|testRootReadableExecutableInternal
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testRootReadableExecutableInternal (boolean located)
specifier|private
name|void
name|testRootReadableExecutableInternal
parameter_list|(
name|boolean
name|located
parameter_list|)
throws|throws
name|IOException
block|{
comment|// verify executable permission on root: cd /
comment|//
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"In root before cd"
argument_list|,
name|fsView
operator|.
name|getWorkingDirectory
argument_list|()
operator|.
name|isRoot
argument_list|()
argument_list|)
expr_stmt|;
name|fsView
operator|.
name|setWorkingDirectory
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Not in root dir after cd"
argument_list|,
name|fsView
operator|.
name|getWorkingDirectory
argument_list|()
operator|.
name|isRoot
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify readable
comment|//
name|verifyRootChildren
argument_list|(
name|listStatusInternal
argument_list|(
name|located
argument_list|,
name|fsView
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify permissions
comment|//
specifier|final
name|FileStatus
name|rootStatus
init|=
name|fsView
operator|.
name|getFileStatus
argument_list|(
name|fsView
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|FsPermission
name|perms
init|=
name|rootStatus
operator|.
name|getPermission
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"User-executable permission not set!"
argument_list|,
name|perms
operator|.
name|getUserAction
argument_list|()
operator|.
name|implies
argument_list|(
name|FsAction
operator|.
name|EXECUTE
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"User-readable permission not set!"
argument_list|,
name|perms
operator|.
name|getUserAction
argument_list|()
operator|.
name|implies
argument_list|(
name|FsAction
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Group-executable permission not set!"
argument_list|,
name|perms
operator|.
name|getGroupAction
argument_list|()
operator|.
name|implies
argument_list|(
name|FsAction
operator|.
name|EXECUTE
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Group-readable permission not set!"
argument_list|,
name|perms
operator|.
name|getGroupAction
argument_list|()
operator|.
name|implies
argument_list|(
name|FsAction
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Other-executable permission not set!"
argument_list|,
name|perms
operator|.
name|getOtherAction
argument_list|()
operator|.
name|implies
argument_list|(
name|FsAction
operator|.
name|EXECUTE
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Other-readable permission not set!"
argument_list|,
name|perms
operator|.
name|getOtherAction
argument_list|()
operator|.
name|implies
argument_list|(
name|FsAction
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify the behavior of ACL operations on paths above the root of    * any mount table entry.    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
DECL|method|testInternalModifyAclEntries ()
specifier|public
name|void
name|testInternalModifyAclEntries
parameter_list|()
throws|throws
name|IOException
block|{
name|fsView
operator|.
name|modifyAclEntries
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir"
argument_list|)
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|AclEntry
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
DECL|method|testInternalRemoveAclEntries ()
specifier|public
name|void
name|testInternalRemoveAclEntries
parameter_list|()
throws|throws
name|IOException
block|{
name|fsView
operator|.
name|removeAclEntries
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir"
argument_list|)
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|AclEntry
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
DECL|method|testInternalRemoveDefaultAcl ()
specifier|public
name|void
name|testInternalRemoveDefaultAcl
parameter_list|()
throws|throws
name|IOException
block|{
name|fsView
operator|.
name|removeDefaultAcl
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
DECL|method|testInternalRemoveAcl ()
specifier|public
name|void
name|testInternalRemoveAcl
parameter_list|()
throws|throws
name|IOException
block|{
name|fsView
operator|.
name|removeAcl
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
DECL|method|testInternalSetAcl ()
specifier|public
name|void
name|testInternalSetAcl
parameter_list|()
throws|throws
name|IOException
block|{
name|fsView
operator|.
name|setAcl
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir"
argument_list|)
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|AclEntry
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInternalGetAclStatus ()
specifier|public
name|void
name|testInternalGetAclStatus
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|UserGroupInformation
name|currentUser
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|AclStatus
name|aclStatus
init|=
name|fsView
operator|.
name|getAclStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|aclStatus
operator|.
name|getOwner
argument_list|()
argument_list|,
name|currentUser
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|aclStatus
operator|.
name|getGroup
argument_list|()
argument_list|,
name|currentUser
operator|.
name|getGroupNames
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|aclStatus
operator|.
name|getEntries
argument_list|()
argument_list|,
name|AclUtil
operator|.
name|getMinimalAcl
argument_list|(
name|PERMISSION_555
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|aclStatus
operator|.
name|isStickyBit
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
DECL|method|testInternalSetXAttr ()
specifier|public
name|void
name|testInternalSetXAttr
parameter_list|()
throws|throws
name|IOException
block|{
name|fsView
operator|.
name|setXAttr
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir"
argument_list|)
argument_list|,
literal|"xattrName"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NotInMountpointException
operator|.
name|class
argument_list|)
DECL|method|testInternalGetXAttr ()
specifier|public
name|void
name|testInternalGetXAttr
parameter_list|()
throws|throws
name|IOException
block|{
name|fsView
operator|.
name|getXAttr
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir"
argument_list|)
argument_list|,
literal|"xattrName"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NotInMountpointException
operator|.
name|class
argument_list|)
DECL|method|testInternalGetXAttrs ()
specifier|public
name|void
name|testInternalGetXAttrs
parameter_list|()
throws|throws
name|IOException
block|{
name|fsView
operator|.
name|getXAttrs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NotInMountpointException
operator|.
name|class
argument_list|)
DECL|method|testInternalGetXAttrsWithNames ()
specifier|public
name|void
name|testInternalGetXAttrsWithNames
parameter_list|()
throws|throws
name|IOException
block|{
name|fsView
operator|.
name|getXAttrs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir"
argument_list|)
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NotInMountpointException
operator|.
name|class
argument_list|)
DECL|method|testInternalListXAttr ()
specifier|public
name|void
name|testInternalListXAttr
parameter_list|()
throws|throws
name|IOException
block|{
name|fsView
operator|.
name|listXAttrs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
DECL|method|testInternalRemoveXAttr ()
specifier|public
name|void
name|testInternalRemoveXAttr
parameter_list|()
throws|throws
name|IOException
block|{
name|fsView
operator|.
name|removeXAttr
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir"
argument_list|)
argument_list|,
literal|"xattrName"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

