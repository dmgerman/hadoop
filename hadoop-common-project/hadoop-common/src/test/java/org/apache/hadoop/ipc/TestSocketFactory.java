begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ipc
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Proxy
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ServerSocket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|SocketFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|SocksSocketFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|StandardSocketFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * test StandardSocketFactory and SocksSocketFactory NetUtils  *  */
end_comment

begin_class
DECL|class|TestSocketFactory
specifier|public
class|class
name|TestSocketFactory
block|{
DECL|field|START_STOP_TIMEOUT_SEC
specifier|private
specifier|static
specifier|final
name|int
name|START_STOP_TIMEOUT_SEC
init|=
literal|30
decl_stmt|;
DECL|field|serverRunnable
specifier|private
name|ServerRunnable
name|serverRunnable
decl_stmt|;
DECL|field|serverThread
specifier|private
name|Thread
name|serverThread
decl_stmt|;
DECL|field|port
specifier|private
name|int
name|port
decl_stmt|;
DECL|method|startTestServer ()
specifier|private
name|void
name|startTestServer
parameter_list|()
throws|throws
name|Exception
block|{
comment|// start simple tcp server.
name|serverRunnable
operator|=
operator|new
name|ServerRunnable
argument_list|()
expr_stmt|;
name|serverThread
operator|=
operator|new
name|Thread
argument_list|(
name|serverRunnable
argument_list|)
expr_stmt|;
name|serverThread
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|long
name|timeout
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|START_STOP_TIMEOUT_SEC
operator|*
literal|1000
decl_stmt|;
while|while
condition|(
operator|!
name|serverRunnable
operator|.
name|isReady
argument_list|()
condition|)
block|{
name|assertNull
argument_list|(
name|serverRunnable
operator|.
name|getThrowable
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
if|if
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|>
name|timeout
condition|)
block|{
name|fail
argument_list|(
literal|"Server thread did not start properly in allowed time of "
operator|+
name|START_STOP_TIMEOUT_SEC
operator|+
literal|" sec."
argument_list|)
expr_stmt|;
block|}
block|}
name|port
operator|=
name|serverRunnable
operator|.
name|getPort
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|stopTestServer ()
specifier|public
name|void
name|stopTestServer
parameter_list|()
throws|throws
name|InterruptedException
block|{
specifier|final
name|Thread
name|t
init|=
name|serverThread
decl_stmt|;
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
name|serverThread
operator|=
literal|null
expr_stmt|;
name|port
operator|=
operator|-
literal|1
expr_stmt|;
comment|// stop server
name|serverRunnable
operator|.
name|stop
argument_list|()
expr_stmt|;
name|t
operator|.
name|join
argument_list|(
name|START_STOP_TIMEOUT_SEC
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|t
operator|.
name|isAlive
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|serverRunnable
operator|.
name|getThrowable
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSocketFactoryAsKeyInMap ()
specifier|public
name|void
name|testSocketFactoryAsKeyInMap
parameter_list|()
block|{
name|Map
argument_list|<
name|SocketFactory
argument_list|,
name|Integer
argument_list|>
name|dummyCache
init|=
operator|new
name|HashMap
argument_list|<
name|SocketFactory
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|toBeCached1
init|=
literal|1
decl_stmt|;
name|int
name|toBeCached2
init|=
literal|2
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_RPC_SOCKET_FACTORY_CLASS_DEFAULT_KEY
argument_list|,
literal|"org.apache.hadoop.ipc.TestSocketFactory$DummySocketFactory"
argument_list|)
expr_stmt|;
specifier|final
name|SocketFactory
name|dummySocketFactory
init|=
name|NetUtils
operator|.
name|getDefaultSocketFactory
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|dummyCache
operator|.
name|put
argument_list|(
name|dummySocketFactory
argument_list|,
name|toBeCached1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_RPC_SOCKET_FACTORY_CLASS_DEFAULT_KEY
argument_list|,
literal|"org.apache.hadoop.net.StandardSocketFactory"
argument_list|)
expr_stmt|;
specifier|final
name|SocketFactory
name|defaultSocketFactory
init|=
name|NetUtils
operator|.
name|getDefaultSocketFactory
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|dummyCache
operator|.
name|put
argument_list|(
name|defaultSocketFactory
argument_list|,
name|toBeCached2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The cache contains two elements"
argument_list|,
literal|2
argument_list|,
name|dummyCache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Equals of both socket factory shouldn't be same"
argument_list|,
name|defaultSocketFactory
operator|.
name|equals
argument_list|(
name|dummySocketFactory
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|toBeCached2
argument_list|,
name|dummyCache
operator|.
name|remove
argument_list|(
name|defaultSocketFactory
argument_list|)
argument_list|)
expr_stmt|;
name|dummyCache
operator|.
name|put
argument_list|(
name|defaultSocketFactory
argument_list|,
name|toBeCached2
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|toBeCached1
argument_list|,
name|dummyCache
operator|.
name|remove
argument_list|(
name|dummySocketFactory
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * A dummy socket factory class that extends the StandardSocketFactory.    */
DECL|class|DummySocketFactory
specifier|static
class|class
name|DummySocketFactory
extends|extends
name|StandardSocketFactory
block|{    }
comment|/**    * Test SocksSocketFactory.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testSocksSocketFactory ()
specifier|public
name|void
name|testSocksSocketFactory
parameter_list|()
throws|throws
name|Exception
block|{
name|startTestServer
argument_list|()
expr_stmt|;
name|testSocketFactory
argument_list|(
operator|new
name|SocksSocketFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test StandardSocketFactory.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testStandardSocketFactory ()
specifier|public
name|void
name|testStandardSocketFactory
parameter_list|()
throws|throws
name|Exception
block|{
name|startTestServer
argument_list|()
expr_stmt|;
name|testSocketFactory
argument_list|(
operator|new
name|StandardSocketFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*    * Common test implementation.    */
DECL|method|testSocketFactory (SocketFactory socketFactory)
specifier|private
name|void
name|testSocketFactory
parameter_list|(
name|SocketFactory
name|socketFactory
parameter_list|)
throws|throws
name|Exception
block|{
name|assertNull
argument_list|(
name|serverRunnable
operator|.
name|getThrowable
argument_list|()
argument_list|)
expr_stmt|;
name|InetAddress
name|address
init|=
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
decl_stmt|;
name|Socket
name|socket
init|=
name|socketFactory
operator|.
name|createSocket
argument_list|(
name|address
argument_list|,
name|port
argument_list|)
decl_stmt|;
name|checkSocket
argument_list|(
name|socket
argument_list|)
expr_stmt|;
name|socket
operator|.
name|close
argument_list|()
expr_stmt|;
name|socket
operator|=
name|socketFactory
operator|.
name|createSocket
argument_list|(
name|address
argument_list|,
name|port
argument_list|,
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkSocket
argument_list|(
name|socket
argument_list|)
expr_stmt|;
name|socket
operator|.
name|close
argument_list|()
expr_stmt|;
name|socket
operator|=
name|socketFactory
operator|.
name|createSocket
argument_list|(
literal|"localhost"
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|checkSocket
argument_list|(
name|socket
argument_list|)
expr_stmt|;
name|socket
operator|.
name|close
argument_list|()
expr_stmt|;
name|socket
operator|=
name|socketFactory
operator|.
name|createSocket
argument_list|(
literal|"localhost"
argument_list|,
name|port
argument_list|,
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkSocket
argument_list|(
name|socket
argument_list|)
expr_stmt|;
name|socket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * test proxy methods    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testProxy ()
specifier|public
name|void
name|testProxy
parameter_list|()
throws|throws
name|Exception
block|{
name|SocksSocketFactory
name|templateWithoutProxy
init|=
operator|new
name|SocksSocketFactory
argument_list|()
decl_stmt|;
name|Proxy
name|proxy
init|=
operator|new
name|Proxy
argument_list|(
name|Type
operator|.
name|SOCKS
argument_list|,
name|InetSocketAddress
operator|.
name|createUnresolved
argument_list|(
literal|"localhost"
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|SocksSocketFactory
name|templateWithProxy
init|=
operator|new
name|SocksSocketFactory
argument_list|(
name|proxy
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|templateWithoutProxy
operator|.
name|equals
argument_list|(
name|templateWithProxy
argument_list|)
argument_list|)
expr_stmt|;
name|Configuration
name|configuration
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|set
argument_list|(
literal|"hadoop.socks.server"
argument_list|,
literal|"localhost:0"
argument_list|)
expr_stmt|;
name|templateWithoutProxy
operator|.
name|setConf
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|templateWithoutProxy
operator|.
name|equals
argument_list|(
name|templateWithProxy
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|checkSocket (Socket socket)
specifier|private
name|void
name|checkSocket
parameter_list|(
name|Socket
name|socket
parameter_list|)
throws|throws
name|Exception
block|{
name|BufferedReader
name|input
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|socket
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|DataOutputStream
name|out
init|=
operator|new
name|DataOutputStream
argument_list|(
name|socket
operator|.
name|getOutputStream
argument_list|()
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeBytes
argument_list|(
literal|"test\n"
argument_list|)
expr_stmt|;
name|String
name|answer
init|=
name|input
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"TEST"
argument_list|,
name|answer
argument_list|)
expr_stmt|;
block|}
comment|/**    * Simple tcp server. Server gets a string, transforms it to upper case and returns it.    */
DECL|class|ServerRunnable
specifier|private
specifier|static
class|class
name|ServerRunnable
implements|implements
name|Runnable
block|{
DECL|field|works
specifier|private
specifier|volatile
name|boolean
name|works
init|=
literal|true
decl_stmt|;
DECL|field|testSocket
specifier|private
name|ServerSocket
name|testSocket
decl_stmt|;
DECL|field|ready
specifier|private
specifier|volatile
name|boolean
name|ready
init|=
literal|false
decl_stmt|;
DECL|field|throwable
specifier|private
specifier|volatile
name|Throwable
name|throwable
decl_stmt|;
DECL|field|port0
specifier|private
name|int
name|port0
decl_stmt|;
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|testSocket
operator|=
operator|new
name|ServerSocket
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|port0
operator|=
name|testSocket
operator|.
name|getLocalPort
argument_list|()
expr_stmt|;
name|ready
operator|=
literal|true
expr_stmt|;
while|while
condition|(
name|works
condition|)
block|{
try|try
block|{
name|Socket
name|connectionSocket
init|=
name|testSocket
operator|.
name|accept
argument_list|()
decl_stmt|;
name|BufferedReader
name|input
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|connectionSocket
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|DataOutputStream
name|out
init|=
operator|new
name|DataOutputStream
argument_list|(
name|connectionSocket
operator|.
name|getOutputStream
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|inData
init|=
name|input
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|String
name|outData
init|=
name|inData
operator|.
name|toUpperCase
argument_list|()
operator|+
literal|"\n"
decl_stmt|;
name|out
operator|.
name|writeBytes
argument_list|(
name|outData
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SocketException
name|ignored
parameter_list|)
block|{            }
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|ioe
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|throwable
operator|=
name|ioe
expr_stmt|;
block|}
block|}
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
name|works
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|testSocket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|isReady ()
specifier|public
name|boolean
name|isReady
parameter_list|()
block|{
return|return
name|ready
return|;
block|}
DECL|method|getPort ()
specifier|public
name|int
name|getPort
parameter_list|()
block|{
return|return
name|port0
return|;
block|}
DECL|method|getThrowable ()
specifier|public
name|Throwable
name|getThrowable
parameter_list|()
block|{
return|return
name|throwable
return|;
block|}
block|}
block|}
end_class

end_unit

