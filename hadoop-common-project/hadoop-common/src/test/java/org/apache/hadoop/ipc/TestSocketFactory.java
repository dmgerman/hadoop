begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ipc
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|SocketFactory
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|StandardSocketFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestSocketFactory
specifier|public
class|class
name|TestSocketFactory
block|{
annotation|@
name|Test
DECL|method|testSocketFactoryAsKeyInMap ()
specifier|public
name|void
name|testSocketFactoryAsKeyInMap
parameter_list|()
block|{
name|Map
argument_list|<
name|SocketFactory
argument_list|,
name|Integer
argument_list|>
name|dummyCache
init|=
operator|new
name|HashMap
argument_list|<
name|SocketFactory
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|toBeCached1
init|=
literal|1
decl_stmt|;
name|int
name|toBeCached2
init|=
literal|2
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_RPC_SOCKET_FACTORY_CLASS_DEFAULT_KEY
argument_list|,
literal|"org.apache.hadoop.ipc.TestSocketFactory$DummySocketFactory"
argument_list|)
expr_stmt|;
specifier|final
name|SocketFactory
name|dummySocketFactory
init|=
name|NetUtils
operator|.
name|getDefaultSocketFactory
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|dummyCache
operator|.
name|put
argument_list|(
name|dummySocketFactory
argument_list|,
name|toBeCached1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_RPC_SOCKET_FACTORY_CLASS_DEFAULT_KEY
argument_list|,
literal|"org.apache.hadoop.net.StandardSocketFactory"
argument_list|)
expr_stmt|;
specifier|final
name|SocketFactory
name|defaultSocketFactory
init|=
name|NetUtils
operator|.
name|getDefaultSocketFactory
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|dummyCache
operator|.
name|put
argument_list|(
name|defaultSocketFactory
argument_list|,
name|toBeCached2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The cache contains two elements"
argument_list|,
literal|2
argument_list|,
name|dummyCache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Equals of both socket factory shouldn't be same"
argument_list|,
name|defaultSocketFactory
operator|.
name|equals
argument_list|(
name|dummySocketFactory
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|toBeCached2
argument_list|,
name|dummyCache
operator|.
name|remove
argument_list|(
name|defaultSocketFactory
argument_list|)
argument_list|)
expr_stmt|;
name|dummyCache
operator|.
name|put
argument_list|(
name|defaultSocketFactory
argument_list|,
name|toBeCached2
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|toBeCached1
argument_list|,
name|dummyCache
operator|.
name|remove
argument_list|(
name|dummySocketFactory
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * A dummy socket factory class that extends the StandardSocketFactory.     */
DECL|class|DummySocketFactory
specifier|static
class|class
name|DummySocketFactory
extends|extends
name|StandardSocketFactory
block|{        }
block|}
end_class

end_unit

