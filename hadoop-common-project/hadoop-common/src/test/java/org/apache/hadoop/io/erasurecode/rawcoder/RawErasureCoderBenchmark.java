begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.erasurecode.rawcoder
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|rawcoder
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|ErasureCoderOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StopWatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * A benchmark tool to test the performance of different erasure coders.  * The tool launches multiple threads to encode/decode certain amount of data,  * and measures the total throughput. It only focuses on performance and doesn't  * validate correctness of the encoded/decoded results.  * User can specify the data size each thread processes, as well as the chunk  * size to use for the coder.  * Different coders are supported. User can specify the coder by a coder index.  * The coder is shared among all the threads.  */
end_comment

begin_class
DECL|class|RawErasureCoderBenchmark
specifier|public
specifier|final
class|class
name|RawErasureCoderBenchmark
block|{
DECL|method|RawErasureCoderBenchmark ()
specifier|private
name|RawErasureCoderBenchmark
parameter_list|()
block|{
comment|// prevent instantiation
block|}
comment|// target size of input data buffer
DECL|field|TARGET_BUFFER_SIZE_MB
specifier|private
specifier|static
specifier|final
name|int
name|TARGET_BUFFER_SIZE_MB
init|=
literal|126
decl_stmt|;
DECL|field|MAX_CHUNK_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|MAX_CHUNK_SIZE
init|=
name|TARGET_BUFFER_SIZE_MB
operator|/
name|BenchData
operator|.
name|NUM_DATA_UNITS
operator|*
literal|1024
decl_stmt|;
DECL|field|CODER_MAKERS
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|RawErasureCoderFactory
argument_list|>
name|CODER_MAKERS
init|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|DummyRawErasureCoderFactory
argument_list|()
argument_list|,
operator|new
name|RSRawErasureCoderFactoryLegacy
argument_list|()
argument_list|,
operator|new
name|RSRawErasureCoderFactory
argument_list|()
argument_list|,
operator|new
name|NativeRSRawErasureCoderFactory
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
DECL|enum|CODER
enum|enum
name|CODER
block|{
DECL|enumConstant|DUMMY_CODER
name|DUMMY_CODER
argument_list|(
literal|"Dummy coder"
argument_list|)
block|,
DECL|enumConstant|LEGACY_RS_CODER
name|LEGACY_RS_CODER
argument_list|(
literal|"Legacy Reed-Solomon Java coder"
argument_list|)
block|,
DECL|enumConstant|RS_CODER
name|RS_CODER
argument_list|(
literal|"Reed-Solomon Java coder"
argument_list|)
block|,
DECL|enumConstant|ISAL_CODER
name|ISAL_CODER
argument_list|(
literal|"ISA-L coder"
argument_list|)
block|;
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|method|CODER (String name)
name|CODER
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|name
return|;
block|}
block|}
static|static
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|CODER_MAKERS
operator|.
name|size
argument_list|()
operator|==
name|CODER
operator|.
name|values
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|printAvailableCoders ()
specifier|private
specifier|static
name|void
name|printAvailableCoders
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"Available coders with coderIndex:\n"
argument_list|)
decl_stmt|;
for|for
control|(
name|CODER
name|coder
range|:
name|CODER
operator|.
name|values
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|coder
operator|.
name|ordinal
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
operator|.
name|append
argument_list|(
name|coder
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|usage (String message)
specifier|private
specifier|static
name|void
name|usage
parameter_list|(
name|String
name|message
parameter_list|)
block|{
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Usage: RawErasureCoderBenchmark<encode/decode><coderIndex> "
operator|+
literal|"[numThreads] [dataSize-in-MB] [chunkSize-in-KB]"
argument_list|)
expr_stmt|;
name|printAvailableCoders
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|opType
init|=
literal|null
decl_stmt|;
name|int
name|coderIndex
init|=
literal|0
decl_stmt|;
comment|// default values
name|int
name|dataSizeMB
init|=
literal|10240
decl_stmt|;
name|int
name|chunkSizeKB
init|=
literal|1024
decl_stmt|;
name|int
name|numThreads
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|opType
operator|=
name|args
index|[
literal|0
index|]
expr_stmt|;
if|if
condition|(
operator|!
literal|"encode"
operator|.
name|equals
argument_list|(
name|opType
argument_list|)
operator|&&
operator|!
literal|"decode"
operator|.
name|equals
argument_list|(
name|opType
argument_list|)
condition|)
block|{
name|usage
argument_list|(
literal|"Invalid type: should be either 'encode' or 'decode'"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|coderIndex
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|coderIndex
operator|<
literal|0
operator|||
name|coderIndex
operator|>=
name|CODER
operator|.
name|values
argument_list|()
operator|.
name|length
condition|)
block|{
name|usage
argument_list|(
literal|"Invalid coder index, should be [0-"
operator|+
operator|(
name|CODER
operator|.
name|values
argument_list|()
operator|.
name|length
operator|-
literal|1
operator|)
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|usage
argument_list|(
literal|"Malformed coder index, "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|usage
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|args
operator|.
name|length
operator|>
literal|2
condition|)
block|{
try|try
block|{
name|numThreads
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|numThreads
operator|<=
literal|0
condition|)
block|{
name|usage
argument_list|(
literal|"Invalid number of threads."
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|usage
argument_list|(
literal|"Malformed number of threads, "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|args
operator|.
name|length
operator|>
literal|3
condition|)
block|{
try|try
block|{
name|dataSizeMB
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|dataSizeMB
operator|<=
literal|0
condition|)
block|{
name|usage
argument_list|(
literal|"Invalid data size."
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|usage
argument_list|(
literal|"Malformed data size, "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|args
operator|.
name|length
operator|>
literal|4
condition|)
block|{
try|try
block|{
name|chunkSizeKB
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|chunkSizeKB
operator|<=
literal|0
condition|)
block|{
name|usage
argument_list|(
literal|"Chunk size should be positive."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|chunkSizeKB
operator|>
name|MAX_CHUNK_SIZE
condition|)
block|{
name|usage
argument_list|(
literal|"Chunk size should be no larger than "
operator|+
name|MAX_CHUNK_SIZE
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|usage
argument_list|(
literal|"Malformed chunk size, "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|performBench
argument_list|(
name|opType
argument_list|,
name|CODER
operator|.
name|values
argument_list|()
index|[
name|coderIndex
index|]
argument_list|,
name|numThreads
argument_list|,
name|dataSizeMB
argument_list|,
name|chunkSizeKB
argument_list|)
expr_stmt|;
block|}
comment|/**    * Performs benchmark.    *    * @param opType      The operation to perform. Can be encode or decode    * @param coder       The coder to use    * @param numThreads  Number of threads to launch concurrently    * @param dataSizeMB  Total test data size in MB    * @param chunkSizeKB Chunk size in KB    */
DECL|method|performBench (String opType, CODER coder, int numThreads, int dataSizeMB, int chunkSizeKB)
specifier|public
specifier|static
name|void
name|performBench
parameter_list|(
name|String
name|opType
parameter_list|,
name|CODER
name|coder
parameter_list|,
name|int
name|numThreads
parameter_list|,
name|int
name|dataSizeMB
parameter_list|,
name|int
name|chunkSizeKB
parameter_list|)
throws|throws
name|Exception
block|{
name|BenchData
operator|.
name|configure
argument_list|(
name|dataSizeMB
argument_list|,
name|chunkSizeKB
argument_list|)
expr_stmt|;
name|RawErasureEncoder
name|encoder
init|=
literal|null
decl_stmt|;
name|RawErasureDecoder
name|decoder
init|=
literal|null
decl_stmt|;
name|ByteBuffer
name|testData
decl_stmt|;
name|boolean
name|isEncode
init|=
name|opType
operator|.
name|equals
argument_list|(
literal|"encode"
argument_list|)
decl_stmt|;
if|if
condition|(
name|isEncode
condition|)
block|{
name|encoder
operator|=
name|getRawEncoder
argument_list|(
name|coder
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|testData
operator|=
name|genTestData
argument_list|(
name|encoder
operator|.
name|preferDirectBuffer
argument_list|()
argument_list|,
name|BenchData
operator|.
name|bufferSizeKB
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|decoder
operator|=
name|getRawDecoder
argument_list|(
name|coder
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|testData
operator|=
name|genTestData
argument_list|(
name|decoder
operator|.
name|preferDirectBuffer
argument_list|()
argument_list|,
name|BenchData
operator|.
name|bufferSizeKB
argument_list|)
expr_stmt|;
block|}
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|numThreads
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Future
argument_list|<
name|Long
argument_list|>
argument_list|>
name|futures
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|numThreads
argument_list|)
decl_stmt|;
name|StopWatch
name|sw
init|=
operator|new
name|StopWatch
argument_list|()
operator|.
name|start
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
condition|;
name|i
operator|++
control|)
block|{
name|futures
operator|.
name|add
argument_list|(
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|BenchmarkCallable
argument_list|(
name|isEncode
argument_list|,
name|encoder
argument_list|,
name|decoder
argument_list|,
name|testData
operator|.
name|duplicate
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Long
argument_list|>
name|durations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|numThreads
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|Future
argument_list|<
name|Long
argument_list|>
name|future
range|:
name|futures
control|)
block|{
name|durations
operator|.
name|add
argument_list|(
name|future
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|long
name|duration
init|=
name|sw
operator|.
name|now
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|double
name|totalDataSize
init|=
name|BenchData
operator|.
name|totalDataSizeKB
operator|*
name|numThreads
operator|/
literal|1024.0
decl_stmt|;
name|DecimalFormat
name|df
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"#.##"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|coder
operator|+
literal|" "
operator|+
name|opType
operator|+
literal|" "
operator|+
name|df
operator|.
name|format
argument_list|(
name|totalDataSize
argument_list|)
operator|+
literal|"MB data, with chunk size "
operator|+
name|BenchData
operator|.
name|chunkSize
operator|/
literal|1024
operator|+
literal|"KB"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Total time: "
operator|+
name|df
operator|.
name|format
argument_list|(
name|duration
operator|/
literal|1000.0
argument_list|)
operator|+
literal|" s."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Total throughput: "
operator|+
name|df
operator|.
name|format
argument_list|(
name|totalDataSize
operator|/
name|duration
operator|*
literal|1000.0
argument_list|)
operator|+
literal|" MB/s"
argument_list|)
expr_stmt|;
name|printThreadStatistics
argument_list|(
name|durations
argument_list|,
name|df
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Error waiting for thread to finish."
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getRawEncoder (int index)
specifier|private
specifier|static
name|RawErasureEncoder
name|getRawEncoder
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|RawErasureEncoder
name|encoder
init|=
name|CODER_MAKERS
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|createEncoder
argument_list|(
name|BenchData
operator|.
name|OPTIONS
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|isDirect
init|=
name|encoder
operator|.
name|preferDirectBuffer
argument_list|()
decl_stmt|;
name|encoder
operator|.
name|encode
argument_list|(
name|getBufferForInit
argument_list|(
name|BenchData
operator|.
name|NUM_DATA_UNITS
argument_list|,
literal|1
argument_list|,
name|isDirect
argument_list|)
argument_list|,
name|getBufferForInit
argument_list|(
name|BenchData
operator|.
name|NUM_PARITY_UNITS
argument_list|,
literal|1
argument_list|,
name|isDirect
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|encoder
return|;
block|}
DECL|method|getRawDecoder (int index)
specifier|private
specifier|static
name|RawErasureDecoder
name|getRawDecoder
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|RawErasureDecoder
name|decoder
init|=
name|CODER_MAKERS
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|createDecoder
argument_list|(
name|BenchData
operator|.
name|OPTIONS
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|isDirect
init|=
name|decoder
operator|.
name|preferDirectBuffer
argument_list|()
decl_stmt|;
name|ByteBuffer
index|[]
name|inputs
init|=
name|getBufferForInit
argument_list|(
name|BenchData
operator|.
name|NUM_ALL_UNITS
argument_list|,
literal|1
argument_list|,
name|isDirect
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|erasedIndex
range|:
name|BenchData
operator|.
name|ERASED_INDEXES
control|)
block|{
name|inputs
index|[
name|erasedIndex
index|]
operator|=
literal|null
expr_stmt|;
block|}
name|decoder
operator|.
name|decode
argument_list|(
name|inputs
argument_list|,
name|BenchData
operator|.
name|ERASED_INDEXES
argument_list|,
name|getBufferForInit
argument_list|(
name|BenchData
operator|.
name|ERASED_INDEXES
operator|.
name|length
argument_list|,
literal|1
argument_list|,
name|isDirect
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|decoder
return|;
block|}
DECL|method|getBufferForInit (int numBuf, int bufCap, boolean isDirect)
specifier|private
specifier|static
name|ByteBuffer
index|[]
name|getBufferForInit
parameter_list|(
name|int
name|numBuf
parameter_list|,
name|int
name|bufCap
parameter_list|,
name|boolean
name|isDirect
parameter_list|)
block|{
name|ByteBuffer
index|[]
name|buffers
init|=
operator|new
name|ByteBuffer
index|[
name|numBuf
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buffers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|buffers
index|[
name|i
index|]
operator|=
name|isDirect
condition|?
name|ByteBuffer
operator|.
name|allocateDirect
argument_list|(
name|bufCap
argument_list|)
else|:
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|bufCap
argument_list|)
expr_stmt|;
block|}
return|return
name|buffers
return|;
block|}
DECL|method|printThreadStatistics ( List<Long> durations, DecimalFormat df)
specifier|private
specifier|static
name|void
name|printThreadStatistics
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|durations
parameter_list|,
name|DecimalFormat
name|df
parameter_list|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|durations
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Threads statistics: "
argument_list|)
expr_stmt|;
name|Double
name|min
init|=
name|durations
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|/
literal|1000.0
decl_stmt|;
name|Double
name|max
init|=
name|durations
operator|.
name|get
argument_list|(
name|durations
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|/
literal|1000.0
decl_stmt|;
name|Long
name|sum
init|=
literal|0L
decl_stmt|;
for|for
control|(
name|Long
name|duration
range|:
name|durations
control|)
block|{
name|sum
operator|+=
name|duration
expr_stmt|;
block|}
name|Double
name|avg
init|=
name|sum
operator|.
name|doubleValue
argument_list|()
operator|/
name|durations
operator|.
name|size
argument_list|()
operator|/
literal|1000.0
decl_stmt|;
name|Double
name|percentile
init|=
name|durations
operator|.
name|get
argument_list|(
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|durations
operator|.
name|size
argument_list|()
operator|*
literal|0.9
argument_list|)
operator|-
literal|1
argument_list|)
operator|/
literal|1000.0
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|durations
operator|.
name|size
argument_list|()
operator|+
literal|" threads in total."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Min: "
operator|+
name|df
operator|.
name|format
argument_list|(
name|min
argument_list|)
operator|+
literal|" s, Max: "
operator|+
name|df
operator|.
name|format
argument_list|(
name|max
argument_list|)
operator|+
literal|" s, Avg: "
operator|+
name|df
operator|.
name|format
argument_list|(
name|avg
argument_list|)
operator|+
literal|" s, 90th Percentile: "
operator|+
name|df
operator|.
name|format
argument_list|(
name|percentile
argument_list|)
operator|+
literal|" s."
argument_list|)
expr_stmt|;
block|}
DECL|method|genTestData (boolean useDirectBuffer, int sizeKB)
specifier|private
specifier|static
name|ByteBuffer
name|genTestData
parameter_list|(
name|boolean
name|useDirectBuffer
parameter_list|,
name|int
name|sizeKB
parameter_list|)
block|{
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|int
name|bufferSize
init|=
name|sizeKB
operator|*
literal|1024
decl_stmt|;
name|byte
index|[]
name|tmp
init|=
operator|new
name|byte
index|[
name|bufferSize
index|]
decl_stmt|;
name|random
operator|.
name|nextBytes
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
name|ByteBuffer
name|data
init|=
name|useDirectBuffer
condition|?
name|ByteBuffer
operator|.
name|allocateDirect
argument_list|(
name|bufferSize
argument_list|)
else|:
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|bufferSize
argument_list|)
decl_stmt|;
name|data
operator|.
name|put
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
name|data
operator|.
name|flip
argument_list|()
expr_stmt|;
return|return
name|data
return|;
block|}
DECL|class|BenchData
specifier|private
specifier|static
class|class
name|BenchData
block|{
DECL|field|OPTIONS
specifier|public
specifier|static
specifier|final
name|ErasureCoderOptions
name|OPTIONS
init|=
operator|new
name|ErasureCoderOptions
argument_list|(
literal|6
argument_list|,
literal|3
argument_list|)
decl_stmt|;
DECL|field|NUM_DATA_UNITS
specifier|public
specifier|static
specifier|final
name|int
name|NUM_DATA_UNITS
init|=
name|OPTIONS
operator|.
name|getNumDataUnits
argument_list|()
decl_stmt|;
DECL|field|NUM_PARITY_UNITS
specifier|public
specifier|static
specifier|final
name|int
name|NUM_PARITY_UNITS
init|=
name|OPTIONS
operator|.
name|getNumParityUnits
argument_list|()
decl_stmt|;
DECL|field|NUM_ALL_UNITS
specifier|public
specifier|static
specifier|final
name|int
name|NUM_ALL_UNITS
init|=
name|OPTIONS
operator|.
name|getNumAllUnits
argument_list|()
decl_stmt|;
DECL|field|chunkSize
specifier|private
specifier|static
name|int
name|chunkSize
decl_stmt|;
DECL|field|totalDataSizeKB
specifier|private
specifier|static
name|long
name|totalDataSizeKB
decl_stmt|;
DECL|field|bufferSizeKB
specifier|private
specifier|static
name|int
name|bufferSizeKB
decl_stmt|;
DECL|field|ERASED_INDEXES
specifier|private
specifier|static
specifier|final
name|int
index|[]
name|ERASED_INDEXES
init|=
operator|new
name|int
index|[]
block|{
literal|6
block|,
literal|7
block|,
literal|8
block|}
decl_stmt|;
DECL|field|inputs
specifier|private
specifier|final
name|ByteBuffer
index|[]
name|inputs
init|=
operator|new
name|ByteBuffer
index|[
name|NUM_DATA_UNITS
index|]
decl_stmt|;
DECL|field|outputs
specifier|private
name|ByteBuffer
index|[]
name|outputs
init|=
operator|new
name|ByteBuffer
index|[
name|NUM_PARITY_UNITS
index|]
decl_stmt|;
DECL|field|decodeInputs
specifier|private
name|ByteBuffer
index|[]
name|decodeInputs
init|=
operator|new
name|ByteBuffer
index|[
name|NUM_ALL_UNITS
index|]
decl_stmt|;
DECL|method|configure (int dataSizeMB, int chunkSizeKB)
specifier|public
specifier|static
name|void
name|configure
parameter_list|(
name|int
name|dataSizeMB
parameter_list|,
name|int
name|chunkSizeKB
parameter_list|)
block|{
name|chunkSize
operator|=
name|chunkSizeKB
operator|*
literal|1024
expr_stmt|;
comment|// buffer size needs to be a multiple of (numDataUnits * chunkSize)
name|int
name|round
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
name|TARGET_BUFFER_SIZE_MB
operator|*
literal|1024.0
operator|/
name|NUM_DATA_UNITS
operator|/
name|chunkSizeKB
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|round
operator|>
literal|0
argument_list|)
expr_stmt|;
name|bufferSizeKB
operator|=
name|NUM_DATA_UNITS
operator|*
name|chunkSizeKB
operator|*
name|round
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Using "
operator|+
name|bufferSizeKB
operator|/
literal|1024
operator|+
literal|"MB buffer."
argument_list|)
expr_stmt|;
name|round
operator|=
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
operator|(
name|dataSizeMB
operator|*
literal|1024.0
operator|)
operator|/
name|bufferSizeKB
argument_list|)
expr_stmt|;
if|if
condition|(
name|round
operator|==
literal|0
condition|)
block|{
name|round
operator|=
literal|1
expr_stmt|;
block|}
name|totalDataSizeKB
operator|=
name|round
operator|*
name|bufferSizeKB
expr_stmt|;
block|}
DECL|method|BenchData (boolean useDirectBuffer)
specifier|public
name|BenchData
parameter_list|(
name|boolean
name|useDirectBuffer
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|outputs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|outputs
index|[
name|i
index|]
operator|=
name|useDirectBuffer
condition|?
name|ByteBuffer
operator|.
name|allocateDirect
argument_list|(
name|chunkSize
argument_list|)
else|:
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|chunkSize
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|prepareDecInput ()
specifier|public
name|void
name|prepareDecInput
parameter_list|()
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|inputs
argument_list|,
literal|0
argument_list|,
name|decodeInputs
argument_list|,
literal|0
argument_list|,
name|NUM_DATA_UNITS
argument_list|)
expr_stmt|;
block|}
DECL|method|encode (RawErasureEncoder encoder)
specifier|public
name|void
name|encode
parameter_list|(
name|RawErasureEncoder
name|encoder
parameter_list|)
block|{
name|encoder
operator|.
name|encode
argument_list|(
name|inputs
argument_list|,
name|outputs
argument_list|)
expr_stmt|;
block|}
DECL|method|decode (RawErasureDecoder decoder)
specifier|public
name|void
name|decode
parameter_list|(
name|RawErasureDecoder
name|decoder
parameter_list|)
block|{
name|decoder
operator|.
name|decode
argument_list|(
name|decodeInputs
argument_list|,
name|ERASED_INDEXES
argument_list|,
name|outputs
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|BenchmarkCallable
specifier|private
specifier|static
class|class
name|BenchmarkCallable
implements|implements
name|Callable
argument_list|<
name|Long
argument_list|>
block|{
DECL|field|isEncode
specifier|private
specifier|final
name|boolean
name|isEncode
decl_stmt|;
DECL|field|encoder
specifier|private
specifier|final
name|RawErasureEncoder
name|encoder
decl_stmt|;
DECL|field|decoder
specifier|private
specifier|final
name|RawErasureDecoder
name|decoder
decl_stmt|;
DECL|field|benchData
specifier|private
specifier|final
name|BenchData
name|benchData
decl_stmt|;
DECL|field|testData
specifier|private
specifier|final
name|ByteBuffer
name|testData
decl_stmt|;
DECL|method|BenchmarkCallable (boolean isEncode, RawErasureEncoder encoder, RawErasureDecoder decoder, ByteBuffer testData)
specifier|public
name|BenchmarkCallable
parameter_list|(
name|boolean
name|isEncode
parameter_list|,
name|RawErasureEncoder
name|encoder
parameter_list|,
name|RawErasureDecoder
name|decoder
parameter_list|,
name|ByteBuffer
name|testData
parameter_list|)
block|{
if|if
condition|(
name|isEncode
condition|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|encoder
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|encoder
operator|=
name|encoder
expr_stmt|;
name|this
operator|.
name|decoder
operator|=
literal|null
expr_stmt|;
name|benchData
operator|=
operator|new
name|BenchData
argument_list|(
name|encoder
operator|.
name|preferDirectBuffer
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|decoder
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|decoder
operator|=
name|decoder
expr_stmt|;
name|this
operator|.
name|encoder
operator|=
literal|null
expr_stmt|;
name|benchData
operator|=
operator|new
name|BenchData
argument_list|(
name|decoder
operator|.
name|preferDirectBuffer
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|isEncode
operator|=
name|isEncode
expr_stmt|;
name|this
operator|.
name|testData
operator|=
name|testData
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|call ()
specifier|public
name|Long
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|rounds
init|=
name|BenchData
operator|.
name|totalDataSizeKB
operator|/
name|BenchData
operator|.
name|bufferSizeKB
decl_stmt|;
name|StopWatch
name|sw
init|=
operator|new
name|StopWatch
argument_list|()
operator|.
name|start
argument_list|()
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rounds
condition|;
name|i
operator|++
control|)
block|{
while|while
condition|(
name|testData
operator|.
name|remaining
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|ByteBuffer
name|output
range|:
name|benchData
operator|.
name|outputs
control|)
block|{
name|output
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|benchData
operator|.
name|inputs
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|benchData
operator|.
name|inputs
index|[
name|j
index|]
operator|=
name|testData
operator|.
name|duplicate
argument_list|()
expr_stmt|;
name|benchData
operator|.
name|inputs
index|[
name|j
index|]
operator|.
name|limit
argument_list|(
name|testData
operator|.
name|position
argument_list|()
operator|+
name|BenchData
operator|.
name|chunkSize
argument_list|)
expr_stmt|;
name|benchData
operator|.
name|inputs
index|[
name|j
index|]
operator|=
name|benchData
operator|.
name|inputs
index|[
name|j
index|]
operator|.
name|slice
argument_list|()
expr_stmt|;
name|testData
operator|.
name|position
argument_list|(
name|testData
operator|.
name|position
argument_list|()
operator|+
name|BenchData
operator|.
name|chunkSize
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isEncode
condition|)
block|{
name|benchData
operator|.
name|encode
argument_list|(
name|encoder
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|benchData
operator|.
name|prepareDecInput
argument_list|()
expr_stmt|;
name|benchData
operator|.
name|decode
argument_list|(
name|decoder
argument_list|)
expr_stmt|;
block|}
block|}
name|testData
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
return|return
name|sw
operator|.
name|now
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

