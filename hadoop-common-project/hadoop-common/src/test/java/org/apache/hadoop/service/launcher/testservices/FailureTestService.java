begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.service.launcher.testservices
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|launcher
operator|.
name|testservices
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|BreakableService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|launcher
operator|.
name|ServiceLaunchException
import|;
end_import

begin_comment
comment|/**  * Launcher test service that does not take CLI arguments.  */
end_comment

begin_class
DECL|class|FailureTestService
specifier|public
class|class
name|FailureTestService
extends|extends
name|BreakableService
block|{
DECL|field|delay
specifier|private
specifier|final
name|int
name|delay
decl_stmt|;
DECL|method|FailureTestService (boolean failOnInit, boolean failOnStart, boolean failOnStop, int delay)
specifier|public
name|FailureTestService
parameter_list|(
name|boolean
name|failOnInit
parameter_list|,
name|boolean
name|failOnStart
parameter_list|,
name|boolean
name|failOnStop
parameter_list|,
name|int
name|delay
parameter_list|)
block|{
name|super
argument_list|(
name|failOnInit
argument_list|,
name|failOnStart
argument_list|,
name|failOnStop
argument_list|)
expr_stmt|;
name|this
operator|.
name|delay
operator|=
name|delay
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|protected
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|delay
operator|>
literal|0
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|delay
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createFailureException (String action)
specifier|protected
name|Exception
name|createFailureException
parameter_list|(
name|String
name|action
parameter_list|)
block|{
return|return
operator|new
name|ServiceLaunchException
argument_list|(
name|getExitCode
argument_list|()
argument_list|,
name|toString
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getExitCode ()
name|int
name|getExitCode
parameter_list|()
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
end_class

end_unit

