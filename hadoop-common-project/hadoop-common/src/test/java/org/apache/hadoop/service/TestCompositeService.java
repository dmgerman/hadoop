begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.service
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|Service
operator|.
name|STATE
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
DECL|class|TestCompositeService
specifier|public
class|class
name|TestCompositeService
block|{
DECL|field|NUM_OF_SERVICES
specifier|private
specifier|static
specifier|final
name|int
name|NUM_OF_SERVICES
init|=
literal|5
decl_stmt|;
DECL|field|FAILED_SERVICE_SEQ_NUMBER
specifier|private
specifier|static
specifier|final
name|int
name|FAILED_SERVICE_SEQ_NUMBER
init|=
literal|2
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestCompositeService
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * flag to state policy of CompositeService, and hence    * what to look for after trying to stop a service from another state    * (e.g inited)    */
DECL|field|STOP_ONLY_STARTED_SERVICES
specifier|private
specifier|static
specifier|final
name|boolean
name|STOP_ONLY_STARTED_SERVICES
init|=
name|CompositeServiceImpl
operator|.
name|isPolicyToStopOnlyStartedServices
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|CompositeServiceImpl
operator|.
name|resetCounter
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCallSequence ()
specifier|public
name|void
name|testCallSequence
parameter_list|()
block|{
name|ServiceManager
name|serviceManager
init|=
operator|new
name|ServiceManager
argument_list|(
literal|"ServiceManager"
argument_list|)
decl_stmt|;
comment|// Add services
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_OF_SERVICES
condition|;
name|i
operator|++
control|)
block|{
name|CompositeServiceImpl
name|service
init|=
operator|new
name|CompositeServiceImpl
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|serviceManager
operator|.
name|addTestService
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
name|CompositeServiceImpl
index|[]
name|services
init|=
name|serviceManager
operator|.
name|getServices
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|CompositeServiceImpl
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Number of registered services "
argument_list|,
name|NUM_OF_SERVICES
argument_list|,
name|services
operator|.
name|length
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// Initialise the composite service
name|serviceManager
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|//verify they were all inited
name|assertInState
argument_list|(
name|STATE
operator|.
name|INITED
argument_list|,
name|services
argument_list|)
expr_stmt|;
comment|// Verify the init() call sequence numbers for every service
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_OF_SERVICES
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"For "
operator|+
name|services
index|[
name|i
index|]
operator|+
literal|" service, init() call sequence number should have been "
argument_list|,
name|i
argument_list|,
name|services
index|[
name|i
index|]
operator|.
name|getCallSequenceNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Reset the call sequence numbers
name|resetServices
argument_list|(
name|services
argument_list|)
expr_stmt|;
name|serviceManager
operator|.
name|start
argument_list|()
expr_stmt|;
comment|//verify they were all started
name|assertInState
argument_list|(
name|STATE
operator|.
name|STARTED
argument_list|,
name|services
argument_list|)
expr_stmt|;
comment|// Verify the start() call sequence numbers for every service
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_OF_SERVICES
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"For "
operator|+
name|services
index|[
name|i
index|]
operator|+
literal|" service, start() call sequence number should have been "
argument_list|,
name|i
argument_list|,
name|services
index|[
name|i
index|]
operator|.
name|getCallSequenceNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|resetServices
argument_list|(
name|services
argument_list|)
expr_stmt|;
name|serviceManager
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|//verify they were all stopped
name|assertInState
argument_list|(
name|STATE
operator|.
name|STOPPED
argument_list|,
name|services
argument_list|)
expr_stmt|;
comment|// Verify the stop() call sequence numbers for every service
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_OF_SERVICES
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"For "
operator|+
name|services
index|[
name|i
index|]
operator|+
literal|" service, stop() call sequence number should have been "
argument_list|,
operator|(
operator|(
name|NUM_OF_SERVICES
operator|-
literal|1
operator|)
operator|-
name|i
operator|)
argument_list|,
name|services
index|[
name|i
index|]
operator|.
name|getCallSequenceNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Try to stop again. This should be a no-op.
name|serviceManager
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// Verify that stop() call sequence numbers for every service don't change.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_OF_SERVICES
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"For "
operator|+
name|services
index|[
name|i
index|]
operator|+
literal|" service, stop() call sequence number should have been "
argument_list|,
operator|(
operator|(
name|NUM_OF_SERVICES
operator|-
literal|1
operator|)
operator|-
name|i
operator|)
argument_list|,
name|services
index|[
name|i
index|]
operator|.
name|getCallSequenceNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|resetServices (CompositeServiceImpl[] services)
specifier|private
name|void
name|resetServices
parameter_list|(
name|CompositeServiceImpl
index|[]
name|services
parameter_list|)
block|{
comment|// Reset the call sequence numbers
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_OF_SERVICES
condition|;
name|i
operator|++
control|)
block|{
name|services
index|[
name|i
index|]
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testServiceStartup ()
specifier|public
name|void
name|testServiceStartup
parameter_list|()
block|{
name|ServiceManager
name|serviceManager
init|=
operator|new
name|ServiceManager
argument_list|(
literal|"ServiceManager"
argument_list|)
decl_stmt|;
comment|// Add services
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_OF_SERVICES
condition|;
name|i
operator|++
control|)
block|{
name|CompositeServiceImpl
name|service
init|=
operator|new
name|CompositeServiceImpl
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
name|FAILED_SERVICE_SEQ_NUMBER
condition|)
block|{
name|service
operator|.
name|setThrowExceptionOnStart
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|serviceManager
operator|.
name|addTestService
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
name|CompositeServiceImpl
index|[]
name|services
init|=
name|serviceManager
operator|.
name|getServices
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|CompositeServiceImpl
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// Initialise the composite service
name|serviceManager
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Start the composite service
try|try
block|{
name|serviceManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Exception should have been thrown due to startup failure of last service"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceTestRuntimeException
name|e
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_OF_SERVICES
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>=
name|FAILED_SERVICE_SEQ_NUMBER
operator|&&
name|STOP_ONLY_STARTED_SERVICES
condition|)
block|{
comment|// Failed service state should be INITED
name|assertEquals
argument_list|(
literal|"Service state should have been "
argument_list|,
name|STATE
operator|.
name|INITED
argument_list|,
name|services
index|[
name|NUM_OF_SERVICES
operator|-
literal|1
index|]
operator|.
name|getServiceState
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|"Service state should have been "
argument_list|,
name|STATE
operator|.
name|STOPPED
argument_list|,
name|services
index|[
name|i
index|]
operator|.
name|getServiceState
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testServiceStop ()
specifier|public
name|void
name|testServiceStop
parameter_list|()
block|{
name|ServiceManager
name|serviceManager
init|=
operator|new
name|ServiceManager
argument_list|(
literal|"ServiceManager"
argument_list|)
decl_stmt|;
comment|// Add services
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_OF_SERVICES
condition|;
name|i
operator|++
control|)
block|{
name|CompositeServiceImpl
name|service
init|=
operator|new
name|CompositeServiceImpl
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
name|FAILED_SERVICE_SEQ_NUMBER
condition|)
block|{
name|service
operator|.
name|setThrowExceptionOnStop
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|serviceManager
operator|.
name|addTestService
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
name|CompositeServiceImpl
index|[]
name|services
init|=
name|serviceManager
operator|.
name|getServices
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|CompositeServiceImpl
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// Initialise the composite service
name|serviceManager
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|serviceManager
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Stop the composite service
try|try
block|{
name|serviceManager
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceTestRuntimeException
name|e
parameter_list|)
block|{     }
name|assertInState
argument_list|(
name|STATE
operator|.
name|STOPPED
argument_list|,
name|services
argument_list|)
expr_stmt|;
block|}
comment|/**    * Assert that all services are in the same expected state    * @param expected expected state value    * @param services services to examine    */
DECL|method|assertInState (STATE expected, CompositeServiceImpl[] services)
specifier|private
name|void
name|assertInState
parameter_list|(
name|STATE
name|expected
parameter_list|,
name|CompositeServiceImpl
index|[]
name|services
parameter_list|)
block|{
name|assertInState
argument_list|(
name|expected
argument_list|,
name|services
argument_list|,
literal|0
argument_list|,
name|services
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**    * Assert that all services are in the same expected state    * @param expected expected state value    * @param services services to examine    * @param start start offset    * @param finish finish offset: the count stops before this number    */
DECL|method|assertInState (STATE expected, CompositeServiceImpl[] services, int start, int finish)
specifier|private
name|void
name|assertInState
parameter_list|(
name|STATE
name|expected
parameter_list|,
name|CompositeServiceImpl
index|[]
name|services
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|finish
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|finish
condition|;
name|i
operator|++
control|)
block|{
name|Service
name|service
init|=
name|services
index|[
name|i
index|]
decl_stmt|;
name|assertInState
argument_list|(
name|expected
argument_list|,
name|service
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertInState (STATE expected, Service service)
specifier|private
name|void
name|assertInState
parameter_list|(
name|STATE
name|expected
parameter_list|,
name|Service
name|service
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Service state should have been "
operator|+
name|expected
operator|+
literal|" in "
operator|+
name|service
argument_list|,
name|expected
argument_list|,
name|service
operator|.
name|getServiceState
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Shut down from not-inited: expect nothing to have happened    */
annotation|@
name|Test
DECL|method|testServiceStopFromNotInited ()
specifier|public
name|void
name|testServiceStopFromNotInited
parameter_list|()
block|{
name|ServiceManager
name|serviceManager
init|=
operator|new
name|ServiceManager
argument_list|(
literal|"ServiceManager"
argument_list|)
decl_stmt|;
comment|// Add services
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_OF_SERVICES
condition|;
name|i
operator|++
control|)
block|{
name|CompositeServiceImpl
name|service
init|=
operator|new
name|CompositeServiceImpl
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|serviceManager
operator|.
name|addTestService
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
name|CompositeServiceImpl
index|[]
name|services
init|=
name|serviceManager
operator|.
name|getServices
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|CompositeServiceImpl
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|serviceManager
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertInState
argument_list|(
name|STATE
operator|.
name|NOTINITED
argument_list|,
name|services
argument_list|)
expr_stmt|;
block|}
comment|/**    * Shut down from inited    */
annotation|@
name|Test
DECL|method|testServiceStopFromInited ()
specifier|public
name|void
name|testServiceStopFromInited
parameter_list|()
block|{
name|ServiceManager
name|serviceManager
init|=
operator|new
name|ServiceManager
argument_list|(
literal|"ServiceManager"
argument_list|)
decl_stmt|;
comment|// Add services
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_OF_SERVICES
condition|;
name|i
operator|++
control|)
block|{
name|CompositeServiceImpl
name|service
init|=
operator|new
name|CompositeServiceImpl
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|serviceManager
operator|.
name|addTestService
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
name|CompositeServiceImpl
index|[]
name|services
init|=
name|serviceManager
operator|.
name|getServices
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|CompositeServiceImpl
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|serviceManager
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|serviceManager
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|STOP_ONLY_STARTED_SERVICES
condition|)
block|{
comment|//this policy => no services were stopped
name|assertInState
argument_list|(
name|STATE
operator|.
name|INITED
argument_list|,
name|services
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertInState
argument_list|(
name|STATE
operator|.
name|STOPPED
argument_list|,
name|services
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Use a null configuration& expect a failure    * @throws Throwable    */
annotation|@
name|Test
DECL|method|testInitNullConf ()
specifier|public
name|void
name|testInitNullConf
parameter_list|()
throws|throws
name|Throwable
block|{
name|ServiceManager
name|serviceManager
init|=
operator|new
name|ServiceManager
argument_list|(
literal|"testInitNullConf"
argument_list|)
decl_stmt|;
name|CompositeServiceImpl
name|service
init|=
operator|new
name|CompositeServiceImpl
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|serviceManager
operator|.
name|addTestService
argument_list|(
name|service
argument_list|)
expr_stmt|;
try|try
block|{
name|serviceManager
operator|.
name|init
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Null Configurations are permitted "
operator|+
name|serviceManager
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceStateException
name|e
parameter_list|)
block|{
comment|//expected
block|}
block|}
comment|/**    * Walk the service through their lifecycle without any children;    * verify that it all works.    */
annotation|@
name|Test
DECL|method|testServiceLifecycleNoChildren ()
specifier|public
name|void
name|testServiceLifecycleNoChildren
parameter_list|()
block|{
name|ServiceManager
name|serviceManager
init|=
operator|new
name|ServiceManager
argument_list|(
literal|"ServiceManager"
argument_list|)
decl_stmt|;
name|serviceManager
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|serviceManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|serviceManager
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddServiceInInit ()
specifier|public
name|void
name|testAddServiceInInit
parameter_list|()
throws|throws
name|Throwable
block|{
name|BreakableService
name|child
init|=
operator|new
name|BreakableService
argument_list|()
decl_stmt|;
name|assertInState
argument_list|(
name|STATE
operator|.
name|NOTINITED
argument_list|,
name|child
argument_list|)
expr_stmt|;
name|CompositeServiceAddingAChild
name|composite
init|=
operator|new
name|CompositeServiceAddingAChild
argument_list|(
name|child
argument_list|)
decl_stmt|;
name|composite
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|assertInState
argument_list|(
name|STATE
operator|.
name|INITED
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testAddIfService ()
specifier|public
name|void
name|testAddIfService
parameter_list|()
block|{
name|CompositeService
name|testService
init|=
operator|new
name|CompositeService
argument_list|(
literal|"TestService"
argument_list|)
block|{
name|Service
name|service
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|Integer
name|notAService
init|=
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Added an integer as a service"
argument_list|,
name|addIfService
argument_list|(
name|notAService
argument_list|)
argument_list|)
expr_stmt|;
name|service
operator|=
operator|new
name|AbstractService
argument_list|(
literal|"Service"
argument_list|)
block|{}
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unable to add a service"
argument_list|,
name|addIfService
argument_list|(
name|service
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|testService
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect number of services"
argument_list|,
literal|1
argument_list|,
name|testService
operator|.
name|getServices
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemoveService ()
specifier|public
name|void
name|testRemoveService
parameter_list|()
block|{
name|CompositeService
name|testService
init|=
operator|new
name|CompositeService
argument_list|(
literal|"TestService"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|Integer
name|notAService
init|=
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Added an integer as a service"
argument_list|,
name|addIfService
argument_list|(
name|notAService
argument_list|)
argument_list|)
expr_stmt|;
name|Service
name|service1
init|=
operator|new
name|AbstractService
argument_list|(
literal|"Service1"
argument_list|)
block|{}
decl_stmt|;
name|addIfService
argument_list|(
name|service1
argument_list|)
expr_stmt|;
name|Service
name|service2
init|=
operator|new
name|AbstractService
argument_list|(
literal|"Service2"
argument_list|)
block|{}
decl_stmt|;
name|addIfService
argument_list|(
name|service2
argument_list|)
expr_stmt|;
name|Service
name|service3
init|=
operator|new
name|AbstractService
argument_list|(
literal|"Service3"
argument_list|)
block|{}
decl_stmt|;
name|addIfService
argument_list|(
name|service3
argument_list|)
expr_stmt|;
name|removeService
argument_list|(
name|service1
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|testService
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect number of services"
argument_list|,
literal|2
argument_list|,
name|testService
operator|.
name|getServices
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// Tests for adding child service to parent
comment|//
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testAddUninitedChildBeforeInit ()
specifier|public
name|void
name|testAddUninitedChildBeforeInit
parameter_list|()
throws|throws
name|Throwable
block|{
name|CompositeService
name|parent
init|=
operator|new
name|CompositeService
argument_list|(
literal|"parent"
argument_list|)
decl_stmt|;
name|BreakableService
name|child
init|=
operator|new
name|BreakableService
argument_list|()
decl_stmt|;
name|AddSiblingService
operator|.
name|addChildToService
argument_list|(
name|parent
argument_list|,
name|child
argument_list|)
expr_stmt|;
name|parent
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|assertInState
argument_list|(
name|STATE
operator|.
name|INITED
argument_list|,
name|child
argument_list|)
expr_stmt|;
name|parent
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertInState
argument_list|(
name|STATE
operator|.
name|STARTED
argument_list|,
name|child
argument_list|)
expr_stmt|;
name|parent
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertInState
argument_list|(
name|STATE
operator|.
name|STOPPED
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testAddUninitedChildInInit ()
specifier|public
name|void
name|testAddUninitedChildInInit
parameter_list|()
throws|throws
name|Throwable
block|{
name|CompositeService
name|parent
init|=
operator|new
name|CompositeService
argument_list|(
literal|"parent"
argument_list|)
decl_stmt|;
name|BreakableService
name|child
init|=
operator|new
name|BreakableService
argument_list|()
decl_stmt|;
name|parent
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|AddSiblingService
operator|.
name|addChildToService
argument_list|(
name|parent
argument_list|,
name|child
argument_list|)
expr_stmt|;
name|assertInState
argument_list|(
name|STATE
operator|.
name|NOTINITED
argument_list|,
name|child
argument_list|)
expr_stmt|;
try|try
block|{
name|parent
operator|.
name|start
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected an exception, got "
operator|+
name|parent
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceStateException
name|e
parameter_list|)
block|{
comment|//expected
block|}
name|assertInState
argument_list|(
name|STATE
operator|.
name|NOTINITED
argument_list|,
name|child
argument_list|)
expr_stmt|;
name|parent
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertInState
argument_list|(
name|STATE
operator|.
name|NOTINITED
argument_list|,
name|child
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect number of services"
argument_list|,
literal|1
argument_list|,
name|parent
operator|.
name|getServices
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testAddUninitedChildInStart ()
specifier|public
name|void
name|testAddUninitedChildInStart
parameter_list|()
throws|throws
name|Throwable
block|{
name|CompositeService
name|parent
init|=
operator|new
name|CompositeService
argument_list|(
literal|"parent"
argument_list|)
decl_stmt|;
name|BreakableService
name|child
init|=
operator|new
name|BreakableService
argument_list|()
decl_stmt|;
name|parent
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|parent
operator|.
name|start
argument_list|()
expr_stmt|;
name|AddSiblingService
operator|.
name|addChildToService
argument_list|(
name|parent
argument_list|,
name|child
argument_list|)
expr_stmt|;
name|assertInState
argument_list|(
name|STATE
operator|.
name|NOTINITED
argument_list|,
name|child
argument_list|)
expr_stmt|;
name|parent
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertInState
argument_list|(
name|STATE
operator|.
name|NOTINITED
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testAddUninitedChildInStop ()
specifier|public
name|void
name|testAddUninitedChildInStop
parameter_list|()
throws|throws
name|Throwable
block|{
name|CompositeService
name|parent
init|=
operator|new
name|CompositeService
argument_list|(
literal|"parent"
argument_list|)
decl_stmt|;
name|BreakableService
name|child
init|=
operator|new
name|BreakableService
argument_list|()
decl_stmt|;
name|parent
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|parent
operator|.
name|start
argument_list|()
expr_stmt|;
name|parent
operator|.
name|stop
argument_list|()
expr_stmt|;
name|AddSiblingService
operator|.
name|addChildToService
argument_list|(
name|parent
argument_list|,
name|child
argument_list|)
expr_stmt|;
name|assertInState
argument_list|(
name|STATE
operator|.
name|NOTINITED
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testAddInitedChildBeforeInit ()
specifier|public
name|void
name|testAddInitedChildBeforeInit
parameter_list|()
throws|throws
name|Throwable
block|{
name|CompositeService
name|parent
init|=
operator|new
name|CompositeService
argument_list|(
literal|"parent"
argument_list|)
decl_stmt|;
name|BreakableService
name|child
init|=
operator|new
name|BreakableService
argument_list|()
decl_stmt|;
name|child
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|AddSiblingService
operator|.
name|addChildToService
argument_list|(
name|parent
argument_list|,
name|child
argument_list|)
expr_stmt|;
name|parent
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|assertInState
argument_list|(
name|STATE
operator|.
name|INITED
argument_list|,
name|child
argument_list|)
expr_stmt|;
name|parent
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertInState
argument_list|(
name|STATE
operator|.
name|STARTED
argument_list|,
name|child
argument_list|)
expr_stmt|;
name|parent
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertInState
argument_list|(
name|STATE
operator|.
name|STOPPED
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testAddInitedChildInInit ()
specifier|public
name|void
name|testAddInitedChildInInit
parameter_list|()
throws|throws
name|Throwable
block|{
name|CompositeService
name|parent
init|=
operator|new
name|CompositeService
argument_list|(
literal|"parent"
argument_list|)
decl_stmt|;
name|BreakableService
name|child
init|=
operator|new
name|BreakableService
argument_list|()
decl_stmt|;
name|child
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|parent
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|AddSiblingService
operator|.
name|addChildToService
argument_list|(
name|parent
argument_list|,
name|child
argument_list|)
expr_stmt|;
name|parent
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertInState
argument_list|(
name|STATE
operator|.
name|STARTED
argument_list|,
name|child
argument_list|)
expr_stmt|;
name|parent
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertInState
argument_list|(
name|STATE
operator|.
name|STOPPED
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testAddInitedChildInStart ()
specifier|public
name|void
name|testAddInitedChildInStart
parameter_list|()
throws|throws
name|Throwable
block|{
name|CompositeService
name|parent
init|=
operator|new
name|CompositeService
argument_list|(
literal|"parent"
argument_list|)
decl_stmt|;
name|BreakableService
name|child
init|=
operator|new
name|BreakableService
argument_list|()
decl_stmt|;
name|child
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|parent
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|parent
operator|.
name|start
argument_list|()
expr_stmt|;
name|AddSiblingService
operator|.
name|addChildToService
argument_list|(
name|parent
argument_list|,
name|child
argument_list|)
expr_stmt|;
name|assertInState
argument_list|(
name|STATE
operator|.
name|INITED
argument_list|,
name|child
argument_list|)
expr_stmt|;
name|parent
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertInState
argument_list|(
name|STATE
operator|.
name|STOPPED
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testAddInitedChildInStop ()
specifier|public
name|void
name|testAddInitedChildInStop
parameter_list|()
throws|throws
name|Throwable
block|{
name|CompositeService
name|parent
init|=
operator|new
name|CompositeService
argument_list|(
literal|"parent"
argument_list|)
decl_stmt|;
name|BreakableService
name|child
init|=
operator|new
name|BreakableService
argument_list|()
decl_stmt|;
name|child
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|parent
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|parent
operator|.
name|start
argument_list|()
expr_stmt|;
name|parent
operator|.
name|stop
argument_list|()
expr_stmt|;
name|AddSiblingService
operator|.
name|addChildToService
argument_list|(
name|parent
argument_list|,
name|child
argument_list|)
expr_stmt|;
name|assertInState
argument_list|(
name|STATE
operator|.
name|INITED
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testAddStartedChildBeforeInit ()
specifier|public
name|void
name|testAddStartedChildBeforeInit
parameter_list|()
throws|throws
name|Throwable
block|{
name|CompositeService
name|parent
init|=
operator|new
name|CompositeService
argument_list|(
literal|"parent"
argument_list|)
decl_stmt|;
name|BreakableService
name|child
init|=
operator|new
name|BreakableService
argument_list|()
decl_stmt|;
name|child
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|child
operator|.
name|start
argument_list|()
expr_stmt|;
name|AddSiblingService
operator|.
name|addChildToService
argument_list|(
name|parent
argument_list|,
name|child
argument_list|)
expr_stmt|;
try|try
block|{
name|parent
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected an exception, got "
operator|+
name|parent
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceStateException
name|e
parameter_list|)
block|{
comment|//expected
block|}
name|parent
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect number of services"
argument_list|,
literal|1
argument_list|,
name|parent
operator|.
name|getServices
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testAddStartedChildInInit ()
specifier|public
name|void
name|testAddStartedChildInInit
parameter_list|()
throws|throws
name|Throwable
block|{
name|CompositeService
name|parent
init|=
operator|new
name|CompositeService
argument_list|(
literal|"parent"
argument_list|)
decl_stmt|;
name|BreakableService
name|child
init|=
operator|new
name|BreakableService
argument_list|()
decl_stmt|;
name|child
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|child
operator|.
name|start
argument_list|()
expr_stmt|;
name|parent
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|AddSiblingService
operator|.
name|addChildToService
argument_list|(
name|parent
argument_list|,
name|child
argument_list|)
expr_stmt|;
name|parent
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertInState
argument_list|(
name|STATE
operator|.
name|STARTED
argument_list|,
name|child
argument_list|)
expr_stmt|;
name|parent
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertInState
argument_list|(
name|STATE
operator|.
name|STOPPED
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testAddStartedChildInStart ()
specifier|public
name|void
name|testAddStartedChildInStart
parameter_list|()
throws|throws
name|Throwable
block|{
name|CompositeService
name|parent
init|=
operator|new
name|CompositeService
argument_list|(
literal|"parent"
argument_list|)
decl_stmt|;
name|BreakableService
name|child
init|=
operator|new
name|BreakableService
argument_list|()
decl_stmt|;
name|child
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|child
operator|.
name|start
argument_list|()
expr_stmt|;
name|parent
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|parent
operator|.
name|start
argument_list|()
expr_stmt|;
name|AddSiblingService
operator|.
name|addChildToService
argument_list|(
name|parent
argument_list|,
name|child
argument_list|)
expr_stmt|;
name|assertInState
argument_list|(
name|STATE
operator|.
name|STARTED
argument_list|,
name|child
argument_list|)
expr_stmt|;
name|parent
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertInState
argument_list|(
name|STATE
operator|.
name|STOPPED
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testAddStartedChildInStop ()
specifier|public
name|void
name|testAddStartedChildInStop
parameter_list|()
throws|throws
name|Throwable
block|{
name|CompositeService
name|parent
init|=
operator|new
name|CompositeService
argument_list|(
literal|"parent"
argument_list|)
decl_stmt|;
name|BreakableService
name|child
init|=
operator|new
name|BreakableService
argument_list|()
decl_stmt|;
name|child
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|child
operator|.
name|start
argument_list|()
expr_stmt|;
name|parent
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|parent
operator|.
name|start
argument_list|()
expr_stmt|;
name|parent
operator|.
name|stop
argument_list|()
expr_stmt|;
name|AddSiblingService
operator|.
name|addChildToService
argument_list|(
name|parent
argument_list|,
name|child
argument_list|)
expr_stmt|;
name|assertInState
argument_list|(
name|STATE
operator|.
name|STARTED
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testAddStoppedChildBeforeInit ()
specifier|public
name|void
name|testAddStoppedChildBeforeInit
parameter_list|()
throws|throws
name|Throwable
block|{
name|CompositeService
name|parent
init|=
operator|new
name|CompositeService
argument_list|(
literal|"parent"
argument_list|)
decl_stmt|;
name|BreakableService
name|child
init|=
operator|new
name|BreakableService
argument_list|()
decl_stmt|;
name|child
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|child
operator|.
name|start
argument_list|()
expr_stmt|;
name|child
operator|.
name|stop
argument_list|()
expr_stmt|;
name|AddSiblingService
operator|.
name|addChildToService
argument_list|(
name|parent
argument_list|,
name|child
argument_list|)
expr_stmt|;
try|try
block|{
name|parent
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected an exception, got "
operator|+
name|parent
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceStateException
name|e
parameter_list|)
block|{
comment|//expected
block|}
name|parent
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect number of services"
argument_list|,
literal|1
argument_list|,
name|parent
operator|.
name|getServices
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testAddStoppedChildInInit ()
specifier|public
name|void
name|testAddStoppedChildInInit
parameter_list|()
throws|throws
name|Throwable
block|{
name|CompositeService
name|parent
init|=
operator|new
name|CompositeService
argument_list|(
literal|"parent"
argument_list|)
decl_stmt|;
name|BreakableService
name|child
init|=
operator|new
name|BreakableService
argument_list|()
decl_stmt|;
name|child
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|child
operator|.
name|start
argument_list|()
expr_stmt|;
name|child
operator|.
name|stop
argument_list|()
expr_stmt|;
name|parent
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|AddSiblingService
operator|.
name|addChildToService
argument_list|(
name|parent
argument_list|,
name|child
argument_list|)
expr_stmt|;
try|try
block|{
name|parent
operator|.
name|start
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected an exception, got "
operator|+
name|parent
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceStateException
name|e
parameter_list|)
block|{
comment|//expected
block|}
name|assertInState
argument_list|(
name|STATE
operator|.
name|STOPPED
argument_list|,
name|child
argument_list|)
expr_stmt|;
name|parent
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect number of services"
argument_list|,
literal|1
argument_list|,
name|parent
operator|.
name|getServices
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testAddStoppedChildInStart ()
specifier|public
name|void
name|testAddStoppedChildInStart
parameter_list|()
throws|throws
name|Throwable
block|{
name|CompositeService
name|parent
init|=
operator|new
name|CompositeService
argument_list|(
literal|"parent"
argument_list|)
decl_stmt|;
name|BreakableService
name|child
init|=
operator|new
name|BreakableService
argument_list|()
decl_stmt|;
name|child
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|child
operator|.
name|start
argument_list|()
expr_stmt|;
name|child
operator|.
name|stop
argument_list|()
expr_stmt|;
name|parent
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|parent
operator|.
name|start
argument_list|()
expr_stmt|;
name|AddSiblingService
operator|.
name|addChildToService
argument_list|(
name|parent
argument_list|,
name|child
argument_list|)
expr_stmt|;
name|parent
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testAddStoppedChildInStop ()
specifier|public
name|void
name|testAddStoppedChildInStop
parameter_list|()
throws|throws
name|Throwable
block|{
name|CompositeService
name|parent
init|=
operator|new
name|CompositeService
argument_list|(
literal|"parent"
argument_list|)
decl_stmt|;
name|BreakableService
name|child
init|=
operator|new
name|BreakableService
argument_list|()
decl_stmt|;
name|child
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|child
operator|.
name|start
argument_list|()
expr_stmt|;
name|child
operator|.
name|stop
argument_list|()
expr_stmt|;
name|parent
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|parent
operator|.
name|start
argument_list|()
expr_stmt|;
name|parent
operator|.
name|stop
argument_list|()
expr_stmt|;
name|AddSiblingService
operator|.
name|addChildToService
argument_list|(
name|parent
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// Tests for adding sibling service to parent
comment|//
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testAddUninitedSiblingBeforeInit ()
specifier|public
name|void
name|testAddUninitedSiblingBeforeInit
parameter_list|()
throws|throws
name|Throwable
block|{
name|CompositeService
name|parent
init|=
operator|new
name|CompositeService
argument_list|(
literal|"parent"
argument_list|)
decl_stmt|;
name|BreakableService
name|sibling
init|=
operator|new
name|BreakableService
argument_list|()
decl_stmt|;
name|parent
operator|.
name|addService
argument_list|(
operator|new
name|AddSiblingService
argument_list|(
name|parent
argument_list|,
name|sibling
argument_list|,
name|STATE
operator|.
name|NOTINITED
argument_list|)
argument_list|)
expr_stmt|;
name|parent
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|assertInState
argument_list|(
name|STATE
operator|.
name|NOTINITED
argument_list|,
name|sibling
argument_list|)
expr_stmt|;
name|parent
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertInState
argument_list|(
name|STATE
operator|.
name|NOTINITED
argument_list|,
name|sibling
argument_list|)
expr_stmt|;
name|parent
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertInState
argument_list|(
name|STATE
operator|.
name|NOTINITED
argument_list|,
name|sibling
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect number of services"
argument_list|,
literal|1
argument_list|,
name|parent
operator|.
name|getServices
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testAddUninitedSiblingInInit ()
specifier|public
name|void
name|testAddUninitedSiblingInInit
parameter_list|()
throws|throws
name|Throwable
block|{
name|CompositeService
name|parent
init|=
operator|new
name|CompositeService
argument_list|(
literal|"parent"
argument_list|)
decl_stmt|;
name|BreakableService
name|sibling
init|=
operator|new
name|BreakableService
argument_list|()
decl_stmt|;
name|parent
operator|.
name|addService
argument_list|(
operator|new
name|AddSiblingService
argument_list|(
name|parent
argument_list|,
name|sibling
argument_list|,
name|STATE
operator|.
name|INITED
argument_list|)
argument_list|)
expr_stmt|;
name|parent
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|parent
operator|.
name|start
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected an exception, got "
operator|+
name|parent
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceStateException
name|e
parameter_list|)
block|{
comment|//expected
block|}
name|parent
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect number of services"
argument_list|,
literal|2
argument_list|,
name|parent
operator|.
name|getServices
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testAddUninitedSiblingInStart ()
specifier|public
name|void
name|testAddUninitedSiblingInStart
parameter_list|()
throws|throws
name|Throwable
block|{
name|CompositeService
name|parent
init|=
operator|new
name|CompositeService
argument_list|(
literal|"parent"
argument_list|)
decl_stmt|;
name|BreakableService
name|sibling
init|=
operator|new
name|BreakableService
argument_list|()
decl_stmt|;
name|parent
operator|.
name|addService
argument_list|(
operator|new
name|AddSiblingService
argument_list|(
name|parent
argument_list|,
name|sibling
argument_list|,
name|STATE
operator|.
name|STARTED
argument_list|)
argument_list|)
expr_stmt|;
name|parent
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|assertInState
argument_list|(
name|STATE
operator|.
name|NOTINITED
argument_list|,
name|sibling
argument_list|)
expr_stmt|;
name|parent
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertInState
argument_list|(
name|STATE
operator|.
name|NOTINITED
argument_list|,
name|sibling
argument_list|)
expr_stmt|;
name|parent
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertInState
argument_list|(
name|STATE
operator|.
name|NOTINITED
argument_list|,
name|sibling
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect number of services"
argument_list|,
literal|2
argument_list|,
name|parent
operator|.
name|getServices
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testAddUninitedSiblingInStop ()
specifier|public
name|void
name|testAddUninitedSiblingInStop
parameter_list|()
throws|throws
name|Throwable
block|{
name|CompositeService
name|parent
init|=
operator|new
name|CompositeService
argument_list|(
literal|"parent"
argument_list|)
decl_stmt|;
name|BreakableService
name|sibling
init|=
operator|new
name|BreakableService
argument_list|()
decl_stmt|;
name|parent
operator|.
name|addService
argument_list|(
operator|new
name|AddSiblingService
argument_list|(
name|parent
argument_list|,
name|sibling
argument_list|,
name|STATE
operator|.
name|STOPPED
argument_list|)
argument_list|)
expr_stmt|;
name|parent
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|assertInState
argument_list|(
name|STATE
operator|.
name|NOTINITED
argument_list|,
name|sibling
argument_list|)
expr_stmt|;
name|parent
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertInState
argument_list|(
name|STATE
operator|.
name|NOTINITED
argument_list|,
name|sibling
argument_list|)
expr_stmt|;
name|parent
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertInState
argument_list|(
name|STATE
operator|.
name|NOTINITED
argument_list|,
name|sibling
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect number of services"
argument_list|,
literal|2
argument_list|,
name|parent
operator|.
name|getServices
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testAddInitedSiblingBeforeInit ()
specifier|public
name|void
name|testAddInitedSiblingBeforeInit
parameter_list|()
throws|throws
name|Throwable
block|{
name|CompositeService
name|parent
init|=
operator|new
name|CompositeService
argument_list|(
literal|"parent"
argument_list|)
decl_stmt|;
name|BreakableService
name|sibling
init|=
operator|new
name|BreakableService
argument_list|()
decl_stmt|;
name|sibling
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|parent
operator|.
name|addService
argument_list|(
operator|new
name|AddSiblingService
argument_list|(
name|parent
argument_list|,
name|sibling
argument_list|,
name|STATE
operator|.
name|NOTINITED
argument_list|)
argument_list|)
expr_stmt|;
name|parent
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|assertInState
argument_list|(
name|STATE
operator|.
name|INITED
argument_list|,
name|sibling
argument_list|)
expr_stmt|;
name|parent
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertInState
argument_list|(
name|STATE
operator|.
name|INITED
argument_list|,
name|sibling
argument_list|)
expr_stmt|;
name|parent
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertInState
argument_list|(
name|STATE
operator|.
name|INITED
argument_list|,
name|sibling
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect number of services"
argument_list|,
literal|1
argument_list|,
name|parent
operator|.
name|getServices
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testAddInitedSiblingInInit ()
specifier|public
name|void
name|testAddInitedSiblingInInit
parameter_list|()
throws|throws
name|Throwable
block|{
name|CompositeService
name|parent
init|=
operator|new
name|CompositeService
argument_list|(
literal|"parent"
argument_list|)
decl_stmt|;
name|BreakableService
name|sibling
init|=
operator|new
name|BreakableService
argument_list|()
decl_stmt|;
name|sibling
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|parent
operator|.
name|addService
argument_list|(
operator|new
name|AddSiblingService
argument_list|(
name|parent
argument_list|,
name|sibling
argument_list|,
name|STATE
operator|.
name|INITED
argument_list|)
argument_list|)
expr_stmt|;
name|parent
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|assertInState
argument_list|(
name|STATE
operator|.
name|INITED
argument_list|,
name|sibling
argument_list|)
expr_stmt|;
name|parent
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertInState
argument_list|(
name|STATE
operator|.
name|STARTED
argument_list|,
name|sibling
argument_list|)
expr_stmt|;
name|parent
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertInState
argument_list|(
name|STATE
operator|.
name|STOPPED
argument_list|,
name|sibling
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect number of services"
argument_list|,
literal|2
argument_list|,
name|parent
operator|.
name|getServices
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testAddInitedSiblingInStart ()
specifier|public
name|void
name|testAddInitedSiblingInStart
parameter_list|()
throws|throws
name|Throwable
block|{
name|CompositeService
name|parent
init|=
operator|new
name|CompositeService
argument_list|(
literal|"parent"
argument_list|)
decl_stmt|;
name|BreakableService
name|sibling
init|=
operator|new
name|BreakableService
argument_list|()
decl_stmt|;
name|sibling
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|parent
operator|.
name|addService
argument_list|(
operator|new
name|AddSiblingService
argument_list|(
name|parent
argument_list|,
name|sibling
argument_list|,
name|STATE
operator|.
name|STARTED
argument_list|)
argument_list|)
expr_stmt|;
name|parent
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|assertInState
argument_list|(
name|STATE
operator|.
name|INITED
argument_list|,
name|sibling
argument_list|)
expr_stmt|;
name|parent
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertInState
argument_list|(
name|STATE
operator|.
name|INITED
argument_list|,
name|sibling
argument_list|)
expr_stmt|;
name|parent
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertInState
argument_list|(
name|STATE
operator|.
name|STOPPED
argument_list|,
name|sibling
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect number of services"
argument_list|,
literal|2
argument_list|,
name|parent
operator|.
name|getServices
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testAddInitedSiblingInStop ()
specifier|public
name|void
name|testAddInitedSiblingInStop
parameter_list|()
throws|throws
name|Throwable
block|{
name|CompositeService
name|parent
init|=
operator|new
name|CompositeService
argument_list|(
literal|"parent"
argument_list|)
decl_stmt|;
name|BreakableService
name|sibling
init|=
operator|new
name|BreakableService
argument_list|()
decl_stmt|;
name|sibling
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|parent
operator|.
name|addService
argument_list|(
operator|new
name|AddSiblingService
argument_list|(
name|parent
argument_list|,
name|sibling
argument_list|,
name|STATE
operator|.
name|STOPPED
argument_list|)
argument_list|)
expr_stmt|;
name|parent
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testAddStartedSiblingBeforeInit ()
specifier|public
name|void
name|testAddStartedSiblingBeforeInit
parameter_list|()
throws|throws
name|Throwable
block|{
name|CompositeService
name|parent
init|=
operator|new
name|CompositeService
argument_list|(
literal|"parent"
argument_list|)
decl_stmt|;
name|BreakableService
name|sibling
init|=
operator|new
name|BreakableService
argument_list|()
decl_stmt|;
name|sibling
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|sibling
operator|.
name|start
argument_list|()
expr_stmt|;
name|parent
operator|.
name|addService
argument_list|(
operator|new
name|AddSiblingService
argument_list|(
name|parent
argument_list|,
name|sibling
argument_list|,
name|STATE
operator|.
name|NOTINITED
argument_list|)
argument_list|)
expr_stmt|;
name|parent
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|assertInState
argument_list|(
name|STATE
operator|.
name|STARTED
argument_list|,
name|sibling
argument_list|)
expr_stmt|;
name|parent
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertInState
argument_list|(
name|STATE
operator|.
name|STARTED
argument_list|,
name|sibling
argument_list|)
expr_stmt|;
name|parent
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertInState
argument_list|(
name|STATE
operator|.
name|STARTED
argument_list|,
name|sibling
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect number of services"
argument_list|,
literal|1
argument_list|,
name|parent
operator|.
name|getServices
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testAddStartedSiblingInInit ()
specifier|public
name|void
name|testAddStartedSiblingInInit
parameter_list|()
throws|throws
name|Throwable
block|{
name|CompositeService
name|parent
init|=
operator|new
name|CompositeService
argument_list|(
literal|"parent"
argument_list|)
decl_stmt|;
name|BreakableService
name|sibling
init|=
operator|new
name|BreakableService
argument_list|()
decl_stmt|;
name|sibling
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|sibling
operator|.
name|start
argument_list|()
expr_stmt|;
name|parent
operator|.
name|addService
argument_list|(
operator|new
name|AddSiblingService
argument_list|(
name|parent
argument_list|,
name|sibling
argument_list|,
name|STATE
operator|.
name|INITED
argument_list|)
argument_list|)
expr_stmt|;
name|parent
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|assertInState
argument_list|(
name|STATE
operator|.
name|STARTED
argument_list|,
name|sibling
argument_list|)
expr_stmt|;
name|parent
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertInState
argument_list|(
name|STATE
operator|.
name|STARTED
argument_list|,
name|sibling
argument_list|)
expr_stmt|;
name|parent
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertInState
argument_list|(
name|STATE
operator|.
name|STOPPED
argument_list|,
name|sibling
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect number of services"
argument_list|,
literal|2
argument_list|,
name|parent
operator|.
name|getServices
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testAddStartedSiblingInStart ()
specifier|public
name|void
name|testAddStartedSiblingInStart
parameter_list|()
throws|throws
name|Throwable
block|{
name|CompositeService
name|parent
init|=
operator|new
name|CompositeService
argument_list|(
literal|"parent"
argument_list|)
decl_stmt|;
name|BreakableService
name|sibling
init|=
operator|new
name|BreakableService
argument_list|()
decl_stmt|;
name|sibling
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|sibling
operator|.
name|start
argument_list|()
expr_stmt|;
name|parent
operator|.
name|addService
argument_list|(
operator|new
name|AddSiblingService
argument_list|(
name|parent
argument_list|,
name|sibling
argument_list|,
name|STATE
operator|.
name|STARTED
argument_list|)
argument_list|)
expr_stmt|;
name|parent
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|assertInState
argument_list|(
name|STATE
operator|.
name|STARTED
argument_list|,
name|sibling
argument_list|)
expr_stmt|;
name|parent
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertInState
argument_list|(
name|STATE
operator|.
name|STARTED
argument_list|,
name|sibling
argument_list|)
expr_stmt|;
name|parent
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertInState
argument_list|(
name|STATE
operator|.
name|STOPPED
argument_list|,
name|sibling
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect number of services"
argument_list|,
literal|2
argument_list|,
name|parent
operator|.
name|getServices
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testAddStartedSiblingInStop ()
specifier|public
name|void
name|testAddStartedSiblingInStop
parameter_list|()
throws|throws
name|Throwable
block|{
name|CompositeService
name|parent
init|=
operator|new
name|CompositeService
argument_list|(
literal|"parent"
argument_list|)
decl_stmt|;
name|BreakableService
name|sibling
init|=
operator|new
name|BreakableService
argument_list|()
decl_stmt|;
name|sibling
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|sibling
operator|.
name|start
argument_list|()
expr_stmt|;
name|parent
operator|.
name|addService
argument_list|(
operator|new
name|AddSiblingService
argument_list|(
name|parent
argument_list|,
name|sibling
argument_list|,
name|STATE
operator|.
name|STOPPED
argument_list|)
argument_list|)
expr_stmt|;
name|parent
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|assertInState
argument_list|(
name|STATE
operator|.
name|STARTED
argument_list|,
name|sibling
argument_list|)
expr_stmt|;
name|parent
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertInState
argument_list|(
name|STATE
operator|.
name|STARTED
argument_list|,
name|sibling
argument_list|)
expr_stmt|;
name|parent
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertInState
argument_list|(
name|STATE
operator|.
name|STARTED
argument_list|,
name|sibling
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect number of services"
argument_list|,
literal|2
argument_list|,
name|parent
operator|.
name|getServices
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testAddStoppedSiblingBeforeInit ()
specifier|public
name|void
name|testAddStoppedSiblingBeforeInit
parameter_list|()
throws|throws
name|Throwable
block|{
name|CompositeService
name|parent
init|=
operator|new
name|CompositeService
argument_list|(
literal|"parent"
argument_list|)
decl_stmt|;
name|BreakableService
name|sibling
init|=
operator|new
name|BreakableService
argument_list|()
decl_stmt|;
name|sibling
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|sibling
operator|.
name|start
argument_list|()
expr_stmt|;
name|sibling
operator|.
name|stop
argument_list|()
expr_stmt|;
name|parent
operator|.
name|addService
argument_list|(
operator|new
name|AddSiblingService
argument_list|(
name|parent
argument_list|,
name|sibling
argument_list|,
name|STATE
operator|.
name|NOTINITED
argument_list|)
argument_list|)
expr_stmt|;
name|parent
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|assertInState
argument_list|(
name|STATE
operator|.
name|STOPPED
argument_list|,
name|sibling
argument_list|)
expr_stmt|;
name|parent
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertInState
argument_list|(
name|STATE
operator|.
name|STOPPED
argument_list|,
name|sibling
argument_list|)
expr_stmt|;
name|parent
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertInState
argument_list|(
name|STATE
operator|.
name|STOPPED
argument_list|,
name|sibling
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect number of services"
argument_list|,
literal|1
argument_list|,
name|parent
operator|.
name|getServices
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testAddStoppedSiblingInInit ()
specifier|public
name|void
name|testAddStoppedSiblingInInit
parameter_list|()
throws|throws
name|Throwable
block|{
name|CompositeService
name|parent
init|=
operator|new
name|CompositeService
argument_list|(
literal|"parent"
argument_list|)
decl_stmt|;
name|BreakableService
name|sibling
init|=
operator|new
name|BreakableService
argument_list|()
decl_stmt|;
name|sibling
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|sibling
operator|.
name|start
argument_list|()
expr_stmt|;
name|sibling
operator|.
name|stop
argument_list|()
expr_stmt|;
name|parent
operator|.
name|addService
argument_list|(
operator|new
name|AddSiblingService
argument_list|(
name|parent
argument_list|,
name|sibling
argument_list|,
name|STATE
operator|.
name|INITED
argument_list|)
argument_list|)
expr_stmt|;
name|parent
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|assertInState
argument_list|(
name|STATE
operator|.
name|STOPPED
argument_list|,
name|sibling
argument_list|)
expr_stmt|;
try|try
block|{
name|parent
operator|.
name|start
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected an exception, got "
operator|+
name|parent
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceStateException
name|e
parameter_list|)
block|{
comment|//expected
block|}
name|parent
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertInState
argument_list|(
name|STATE
operator|.
name|STOPPED
argument_list|,
name|sibling
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect number of services"
argument_list|,
literal|2
argument_list|,
name|parent
operator|.
name|getServices
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testAddStoppedSiblingInStart ()
specifier|public
name|void
name|testAddStoppedSiblingInStart
parameter_list|()
throws|throws
name|Throwable
block|{
name|CompositeService
name|parent
init|=
operator|new
name|CompositeService
argument_list|(
literal|"parent"
argument_list|)
decl_stmt|;
name|BreakableService
name|sibling
init|=
operator|new
name|BreakableService
argument_list|()
decl_stmt|;
name|sibling
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|sibling
operator|.
name|start
argument_list|()
expr_stmt|;
name|sibling
operator|.
name|stop
argument_list|()
expr_stmt|;
name|parent
operator|.
name|addService
argument_list|(
operator|new
name|AddSiblingService
argument_list|(
name|parent
argument_list|,
name|sibling
argument_list|,
name|STATE
operator|.
name|STARTED
argument_list|)
argument_list|)
expr_stmt|;
name|parent
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|assertInState
argument_list|(
name|STATE
operator|.
name|STOPPED
argument_list|,
name|sibling
argument_list|)
expr_stmt|;
name|parent
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertInState
argument_list|(
name|STATE
operator|.
name|STOPPED
argument_list|,
name|sibling
argument_list|)
expr_stmt|;
name|parent
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertInState
argument_list|(
name|STATE
operator|.
name|STOPPED
argument_list|,
name|sibling
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect number of services"
argument_list|,
literal|2
argument_list|,
name|parent
operator|.
name|getServices
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testAddStoppedSiblingInStop ()
specifier|public
name|void
name|testAddStoppedSiblingInStop
parameter_list|()
throws|throws
name|Throwable
block|{
name|CompositeService
name|parent
init|=
operator|new
name|CompositeService
argument_list|(
literal|"parent"
argument_list|)
decl_stmt|;
name|BreakableService
name|sibling
init|=
operator|new
name|BreakableService
argument_list|()
decl_stmt|;
name|sibling
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|sibling
operator|.
name|start
argument_list|()
expr_stmt|;
name|sibling
operator|.
name|stop
argument_list|()
expr_stmt|;
name|parent
operator|.
name|addService
argument_list|(
operator|new
name|AddSiblingService
argument_list|(
name|parent
argument_list|,
name|sibling
argument_list|,
name|STATE
operator|.
name|STOPPED
argument_list|)
argument_list|)
expr_stmt|;
name|parent
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|assertInState
argument_list|(
name|STATE
operator|.
name|STOPPED
argument_list|,
name|sibling
argument_list|)
expr_stmt|;
name|parent
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertInState
argument_list|(
name|STATE
operator|.
name|STOPPED
argument_list|,
name|sibling
argument_list|)
expr_stmt|;
name|parent
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertInState
argument_list|(
name|STATE
operator|.
name|STOPPED
argument_list|,
name|sibling
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect number of services"
argument_list|,
literal|2
argument_list|,
name|parent
operator|.
name|getServices
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|CompositeServiceAddingAChild
specifier|public
specifier|static
class|class
name|CompositeServiceAddingAChild
extends|extends
name|CompositeService
block|{
DECL|field|child
name|Service
name|child
decl_stmt|;
DECL|method|CompositeServiceAddingAChild (Service child)
specifier|public
name|CompositeServiceAddingAChild
parameter_list|(
name|Service
name|child
parameter_list|)
block|{
name|super
argument_list|(
literal|"CompositeServiceAddingAChild"
argument_list|)
expr_stmt|;
name|this
operator|.
name|child
operator|=
name|child
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|addService
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ServiceTestRuntimeException
specifier|public
specifier|static
class|class
name|ServiceTestRuntimeException
extends|extends
name|RuntimeException
block|{
DECL|method|ServiceTestRuntimeException (String message)
specifier|public
name|ServiceTestRuntimeException
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This is a composite service that keeps a count of the number of lifecycle    * events called, and can be set to throw a {@link ServiceTestRuntimeException }    * during service start or stop    */
DECL|class|CompositeServiceImpl
specifier|public
specifier|static
class|class
name|CompositeServiceImpl
extends|extends
name|CompositeService
block|{
DECL|method|isPolicyToStopOnlyStartedServices ()
specifier|public
specifier|static
name|boolean
name|isPolicyToStopOnlyStartedServices
parameter_list|()
block|{
return|return
name|STOP_ONLY_STARTED_SERVICES
return|;
block|}
DECL|field|counter
specifier|private
specifier|static
name|int
name|counter
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|callSequenceNumber
specifier|private
name|int
name|callSequenceNumber
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|throwExceptionOnStart
specifier|private
name|boolean
name|throwExceptionOnStart
decl_stmt|;
DECL|field|throwExceptionOnStop
specifier|private
name|boolean
name|throwExceptionOnStop
decl_stmt|;
DECL|method|CompositeServiceImpl (int sequenceNumber)
specifier|public
name|CompositeServiceImpl
parameter_list|(
name|int
name|sequenceNumber
parameter_list|)
block|{
name|super
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|sequenceNumber
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|counter
operator|++
expr_stmt|;
name|callSequenceNumber
operator|=
name|counter
expr_stmt|;
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|protected
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|throwExceptionOnStart
condition|)
block|{
throw|throw
operator|new
name|ServiceTestRuntimeException
argument_list|(
literal|"Fake service start exception"
argument_list|)
throw|;
block|}
name|counter
operator|++
expr_stmt|;
name|callSequenceNumber
operator|=
name|counter
expr_stmt|;
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|protected
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
name|counter
operator|++
expr_stmt|;
name|callSequenceNumber
operator|=
name|counter
expr_stmt|;
if|if
condition|(
name|throwExceptionOnStop
condition|)
block|{
throw|throw
operator|new
name|ServiceTestRuntimeException
argument_list|(
literal|"Fake service stop exception"
argument_list|)
throw|;
block|}
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
DECL|method|getCounter ()
specifier|public
specifier|static
name|int
name|getCounter
parameter_list|()
block|{
return|return
name|counter
return|;
block|}
DECL|method|getCallSequenceNumber ()
specifier|public
name|int
name|getCallSequenceNumber
parameter_list|()
block|{
return|return
name|callSequenceNumber
return|;
block|}
DECL|method|reset ()
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|callSequenceNumber
operator|=
operator|-
literal|1
expr_stmt|;
name|counter
operator|=
operator|-
literal|1
expr_stmt|;
block|}
DECL|method|resetCounter ()
specifier|public
specifier|static
name|void
name|resetCounter
parameter_list|()
block|{
name|counter
operator|=
operator|-
literal|1
expr_stmt|;
block|}
DECL|method|setThrowExceptionOnStart (boolean throwExceptionOnStart)
specifier|public
name|void
name|setThrowExceptionOnStart
parameter_list|(
name|boolean
name|throwExceptionOnStart
parameter_list|)
block|{
name|this
operator|.
name|throwExceptionOnStart
operator|=
name|throwExceptionOnStart
expr_stmt|;
block|}
DECL|method|setThrowExceptionOnStop (boolean throwExceptionOnStop)
specifier|public
name|void
name|setThrowExceptionOnStop
parameter_list|(
name|boolean
name|throwExceptionOnStop
parameter_list|)
block|{
name|this
operator|.
name|throwExceptionOnStop
operator|=
name|throwExceptionOnStop
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Service "
operator|+
name|getName
argument_list|()
return|;
block|}
block|}
comment|/**    * Composite service that makes the addService method public to all    */
DECL|class|ServiceManager
specifier|public
specifier|static
class|class
name|ServiceManager
extends|extends
name|CompositeService
block|{
DECL|method|addTestService (CompositeService service)
specifier|public
name|void
name|addTestService
parameter_list|(
name|CompositeService
name|service
parameter_list|)
block|{
name|addService
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
DECL|method|ServiceManager (String name)
specifier|public
name|ServiceManager
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|AddSiblingService
specifier|public
specifier|static
class|class
name|AddSiblingService
extends|extends
name|CompositeService
block|{
DECL|field|parent
specifier|private
specifier|final
name|CompositeService
name|parent
decl_stmt|;
DECL|field|serviceToAdd
specifier|private
specifier|final
name|Service
name|serviceToAdd
decl_stmt|;
DECL|field|triggerState
specifier|private
name|STATE
name|triggerState
decl_stmt|;
DECL|method|AddSiblingService (CompositeService parent, Service serviceToAdd, STATE triggerState)
specifier|public
name|AddSiblingService
parameter_list|(
name|CompositeService
name|parent
parameter_list|,
name|Service
name|serviceToAdd
parameter_list|,
name|STATE
name|triggerState
parameter_list|)
block|{
name|super
argument_list|(
literal|"ParentStateManipulatorService"
argument_list|)
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|serviceToAdd
operator|=
name|serviceToAdd
expr_stmt|;
name|this
operator|.
name|triggerState
operator|=
name|triggerState
expr_stmt|;
block|}
comment|/**      * Add the serviceToAdd to the parent if this service      * is in the state requested      */
DECL|method|maybeAddSibling ()
specifier|private
name|void
name|maybeAddSibling
parameter_list|()
block|{
if|if
condition|(
name|getServiceState
argument_list|()
operator|==
name|triggerState
condition|)
block|{
name|parent
operator|.
name|addService
argument_list|(
name|serviceToAdd
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|maybeAddSibling
argument_list|()
expr_stmt|;
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|protected
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
name|maybeAddSibling
argument_list|()
expr_stmt|;
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|protected
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
name|maybeAddSibling
argument_list|()
expr_stmt|;
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
comment|/**      * Expose addService method      * @param parent parent service      * @param child child to add      */
DECL|method|addChildToService (CompositeService parent, Service child)
specifier|public
specifier|static
name|void
name|addChildToService
parameter_list|(
name|CompositeService
name|parent
parameter_list|,
name|Service
name|child
parameter_list|)
block|{
name|parent
operator|.
name|addService
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

