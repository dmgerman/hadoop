begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ipc
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ResponseBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/** Unit tests for ResponseBuffer. */
end_comment

begin_class
DECL|class|TestResponseBuffer
specifier|public
class|class
name|TestResponseBuffer
block|{
annotation|@
name|Test
DECL|method|testBuffer ()
specifier|public
name|void
name|testBuffer
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|startSize
init|=
literal|8
decl_stmt|;
specifier|final
name|String
name|empty
init|=
literal|""
decl_stmt|;
name|ResponseBuffer
name|buf
init|=
operator|new
name|ResponseBuffer
argument_list|(
name|startSize
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|startSize
argument_list|,
name|buf
operator|.
name|capacity
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify it's initially empty
name|checkBuffer
argument_list|(
name|buf
argument_list|,
name|empty
argument_list|)
expr_stmt|;
comment|// write "nothing" and re-verify it's empty
name|buf
operator|.
name|writeBytes
argument_list|(
name|empty
argument_list|)
expr_stmt|;
name|checkBuffer
argument_list|(
name|buf
argument_list|,
name|empty
argument_list|)
expr_stmt|;
comment|// write to the buffer twice and verify it's properly encoded
name|String
name|s1
init|=
literal|"testing123"
decl_stmt|;
name|buf
operator|.
name|writeBytes
argument_list|(
name|s1
argument_list|)
expr_stmt|;
name|checkBuffer
argument_list|(
name|buf
argument_list|,
name|s1
argument_list|)
expr_stmt|;
name|String
name|s2
init|=
literal|"456!"
decl_stmt|;
name|buf
operator|.
name|writeBytes
argument_list|(
name|s2
argument_list|)
expr_stmt|;
name|checkBuffer
argument_list|(
name|buf
argument_list|,
name|s1
operator|+
name|s2
argument_list|)
expr_stmt|;
comment|// reset should not change length of underlying byte array
name|int
name|length
init|=
name|buf
operator|.
name|capacity
argument_list|()
decl_stmt|;
name|buf
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|length
argument_list|,
name|buf
operator|.
name|capacity
argument_list|()
argument_list|)
expr_stmt|;
name|checkBuffer
argument_list|(
name|buf
argument_list|,
name|empty
argument_list|)
expr_stmt|;
comment|// setCapacity will change length of underlying byte array
name|buf
operator|.
name|setCapacity
argument_list|(
name|startSize
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|startSize
argument_list|,
name|buf
operator|.
name|capacity
argument_list|()
argument_list|)
expr_stmt|;
name|checkBuffer
argument_list|(
name|buf
argument_list|,
name|empty
argument_list|)
expr_stmt|;
comment|// make sure it still works
name|buf
operator|.
name|writeBytes
argument_list|(
name|s1
argument_list|)
expr_stmt|;
name|checkBuffer
argument_list|(
name|buf
argument_list|,
name|s1
argument_list|)
expr_stmt|;
name|buf
operator|.
name|writeBytes
argument_list|(
name|s2
argument_list|)
expr_stmt|;
name|checkBuffer
argument_list|(
name|buf
argument_list|,
name|s1
operator|+
name|s2
argument_list|)
expr_stmt|;
block|}
DECL|method|checkBuffer (ResponseBuffer buf, String expected)
specifier|private
name|void
name|checkBuffer
parameter_list|(
name|ResponseBuffer
name|buf
parameter_list|,
name|String
name|expected
parameter_list|)
throws|throws
name|IOException
block|{
comment|// buffer payload length matches expected length
name|int
name|expectedLength
init|=
name|expected
operator|.
name|getBytes
argument_list|()
operator|.
name|length
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedLength
argument_list|,
name|buf
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// buffer has the framing bytes (int)
name|byte
index|[]
name|framed
init|=
name|buf
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedLength
operator|+
literal|4
argument_list|,
name|framed
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// verify encoding of buffer: framing (int) + payload bytes
name|DataInputStream
name|dis
init|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|framed
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedLength
argument_list|,
name|dis
operator|.
name|readInt
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedLength
argument_list|,
name|dis
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|payload
init|=
operator|new
name|byte
index|[
name|expectedLength
index|]
decl_stmt|;
name|dis
operator|.
name|readFully
argument_list|(
name|payload
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
operator|new
name|String
argument_list|(
name|payload
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

