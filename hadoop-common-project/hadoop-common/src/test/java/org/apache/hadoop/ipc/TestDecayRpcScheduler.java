begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ipc
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Thread
operator|.
name|sleep
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_class
DECL|class|TestDecayRpcScheduler
specifier|public
class|class
name|TestDecayRpcScheduler
block|{
DECL|method|mockCall (String id)
specifier|private
name|Schedulable
name|mockCall
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|Schedulable
name|mockCall
init|=
name|mock
argument_list|(
name|Schedulable
operator|.
name|class
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|mock
argument_list|(
name|UserGroupInformation
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|ugi
operator|.
name|getUserName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockCall
operator|.
name|getUserGroupInformation
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ugi
argument_list|)
expr_stmt|;
return|return
name|mockCall
return|;
block|}
DECL|field|scheduler
specifier|private
name|DecayRpcScheduler
name|scheduler
decl_stmt|;
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testNegativeScheduler ()
specifier|public
name|void
name|testNegativeScheduler
parameter_list|()
block|{
name|scheduler
operator|=
operator|new
name|DecayRpcScheduler
argument_list|(
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testZeroScheduler ()
specifier|public
name|void
name|testZeroScheduler
parameter_list|()
block|{
name|scheduler
operator|=
operator|new
name|DecayRpcScheduler
argument_list|(
literal|0
argument_list|,
literal|""
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|testParsePeriod ()
specifier|public
name|void
name|testParsePeriod
parameter_list|()
block|{
comment|// By default
name|scheduler
operator|=
operator|new
name|DecayRpcScheduler
argument_list|(
literal|1
argument_list|,
literal|""
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DecayRpcScheduler
operator|.
name|IPC_SCHEDULER_DECAYSCHEDULER_PERIOD_DEFAULT
argument_list|,
name|scheduler
operator|.
name|getDecayPeriodMillis
argument_list|()
argument_list|)
expr_stmt|;
comment|// Custom
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
literal|"ns."
operator|+
name|DecayRpcScheduler
operator|.
name|IPC_FCQ_DECAYSCHEDULER_PERIOD_KEY
argument_list|,
literal|1058
argument_list|)
expr_stmt|;
name|scheduler
operator|=
operator|new
name|DecayRpcScheduler
argument_list|(
literal|1
argument_list|,
literal|"ns"
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1058L
argument_list|,
name|scheduler
operator|.
name|getDecayPeriodMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|testParseFactor ()
specifier|public
name|void
name|testParseFactor
parameter_list|()
block|{
comment|// Default
name|scheduler
operator|=
operator|new
name|DecayRpcScheduler
argument_list|(
literal|1
argument_list|,
literal|""
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DecayRpcScheduler
operator|.
name|IPC_SCHEDULER_DECAYSCHEDULER_FACTOR_DEFAULT
argument_list|,
name|scheduler
operator|.
name|getDecayFactor
argument_list|()
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
comment|// Custom
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"prefix."
operator|+
name|DecayRpcScheduler
operator|.
name|IPC_FCQ_DECAYSCHEDULER_FACTOR_KEY
argument_list|,
literal|"0.125"
argument_list|)
expr_stmt|;
name|scheduler
operator|=
operator|new
name|DecayRpcScheduler
argument_list|(
literal|1
argument_list|,
literal|"prefix"
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.125
argument_list|,
name|scheduler
operator|.
name|getDecayFactor
argument_list|()
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
block|}
DECL|method|assertEqualDecimalArrays (double[] a, double[] b)
specifier|public
name|void
name|assertEqualDecimalArrays
parameter_list|(
name|double
index|[]
name|a
parameter_list|,
name|double
index|[]
name|b
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|a
operator|.
name|length
argument_list|,
name|b
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|a
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|a
index|[
name|i
index|]
argument_list|,
name|b
index|[
name|i
index|]
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|testParseThresholds ()
specifier|public
name|void
name|testParseThresholds
parameter_list|()
block|{
comment|// Defaults vary by number of queues
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|scheduler
operator|=
operator|new
name|DecayRpcScheduler
argument_list|(
literal|1
argument_list|,
literal|""
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertEqualDecimalArrays
argument_list|(
operator|new
name|double
index|[]
block|{}
argument_list|,
name|scheduler
operator|.
name|getThresholds
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|=
operator|new
name|DecayRpcScheduler
argument_list|(
literal|2
argument_list|,
literal|""
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertEqualDecimalArrays
argument_list|(
operator|new
name|double
index|[]
block|{
literal|0.5
block|}
argument_list|,
name|scheduler
operator|.
name|getThresholds
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|=
operator|new
name|DecayRpcScheduler
argument_list|(
literal|3
argument_list|,
literal|""
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertEqualDecimalArrays
argument_list|(
operator|new
name|double
index|[]
block|{
literal|0.25
block|,
literal|0.5
block|}
argument_list|,
name|scheduler
operator|.
name|getThresholds
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|=
operator|new
name|DecayRpcScheduler
argument_list|(
literal|4
argument_list|,
literal|""
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertEqualDecimalArrays
argument_list|(
operator|new
name|double
index|[]
block|{
literal|0.125
block|,
literal|0.25
block|,
literal|0.5
block|}
argument_list|,
name|scheduler
operator|.
name|getThresholds
argument_list|()
argument_list|)
expr_stmt|;
comment|// Custom
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"ns."
operator|+
name|DecayRpcScheduler
operator|.
name|IPC_FCQ_DECAYSCHEDULER_THRESHOLDS_KEY
argument_list|,
literal|"1, 10, 20, 50, 85"
argument_list|)
expr_stmt|;
name|scheduler
operator|=
operator|new
name|DecayRpcScheduler
argument_list|(
literal|6
argument_list|,
literal|"ns"
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertEqualDecimalArrays
argument_list|(
operator|new
name|double
index|[]
block|{
literal|0.01
block|,
literal|0.1
block|,
literal|0.2
block|,
literal|0.5
block|,
literal|0.85
block|}
argument_list|,
name|scheduler
operator|.
name|getThresholds
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|testAccumulate ()
specifier|public
name|void
name|testAccumulate
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"ns."
operator|+
name|DecayRpcScheduler
operator|.
name|IPC_FCQ_DECAYSCHEDULER_PERIOD_KEY
argument_list|,
literal|"99999999"
argument_list|)
expr_stmt|;
comment|// Never flush
name|scheduler
operator|=
operator|new
name|DecayRpcScheduler
argument_list|(
literal|1
argument_list|,
literal|"ns"
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getCallCountSnapshot
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// empty first
name|scheduler
operator|.
name|getPriorityLevel
argument_list|(
name|mockCall
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getCallCountSnapshot
argument_list|()
operator|.
name|get
argument_list|(
literal|"A"
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getCallCountSnapshot
argument_list|()
operator|.
name|get
argument_list|(
literal|"A"
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|getPriorityLevel
argument_list|(
name|mockCall
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|getPriorityLevel
argument_list|(
name|mockCall
argument_list|(
literal|"B"
argument_list|)
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|getPriorityLevel
argument_list|(
name|mockCall
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|scheduler
operator|.
name|getCallCountSnapshot
argument_list|()
operator|.
name|get
argument_list|(
literal|"A"
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getCallCountSnapshot
argument_list|()
operator|.
name|get
argument_list|(
literal|"B"
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|testDecay ()
specifier|public
name|void
name|testDecay
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"ns."
operator|+
name|DecayRpcScheduler
operator|.
name|IPC_FCQ_DECAYSCHEDULER_PERIOD_KEY
argument_list|,
literal|"999999999"
argument_list|)
expr_stmt|;
comment|// Never
name|conf
operator|.
name|set
argument_list|(
literal|"ns."
operator|+
name|DecayRpcScheduler
operator|.
name|IPC_FCQ_DECAYSCHEDULER_FACTOR_KEY
argument_list|,
literal|"0.5"
argument_list|)
expr_stmt|;
name|scheduler
operator|=
operator|new
name|DecayRpcScheduler
argument_list|(
literal|1
argument_list|,
literal|"ns"
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getTotalCallSnapshot
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|scheduler
operator|.
name|getPriorityLevel
argument_list|(
name|mockCall
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|8
condition|;
name|i
operator|++
control|)
block|{
name|scheduler
operator|.
name|getPriorityLevel
argument_list|(
name|mockCall
argument_list|(
literal|"B"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|12
argument_list|,
name|scheduler
operator|.
name|getTotalCallSnapshot
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|scheduler
operator|.
name|getCallCountSnapshot
argument_list|()
operator|.
name|get
argument_list|(
literal|"A"
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|scheduler
operator|.
name|getCallCountSnapshot
argument_list|()
operator|.
name|get
argument_list|(
literal|"B"
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|forceDecay
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|scheduler
operator|.
name|getTotalCallSnapshot
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|scheduler
operator|.
name|getCallCountSnapshot
argument_list|()
operator|.
name|get
argument_list|(
literal|"A"
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|scheduler
operator|.
name|getCallCountSnapshot
argument_list|()
operator|.
name|get
argument_list|(
literal|"B"
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|forceDecay
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|scheduler
operator|.
name|getTotalCallSnapshot
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getCallCountSnapshot
argument_list|()
operator|.
name|get
argument_list|(
literal|"A"
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|scheduler
operator|.
name|getCallCountSnapshot
argument_list|()
operator|.
name|get
argument_list|(
literal|"B"
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|forceDecay
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getTotalCallSnapshot
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|scheduler
operator|.
name|getCallCountSnapshot
argument_list|()
operator|.
name|get
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getCallCountSnapshot
argument_list|()
operator|.
name|get
argument_list|(
literal|"B"
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|forceDecay
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getTotalCallSnapshot
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|scheduler
operator|.
name|getCallCountSnapshot
argument_list|()
operator|.
name|get
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|scheduler
operator|.
name|getCallCountSnapshot
argument_list|()
operator|.
name|get
argument_list|(
literal|"B"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|testPriority ()
specifier|public
name|void
name|testPriority
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|String
name|namespace
init|=
literal|"ns"
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|namespace
operator|+
literal|"."
operator|+
name|DecayRpcScheduler
operator|.
name|IPC_FCQ_DECAYSCHEDULER_PERIOD_KEY
argument_list|,
literal|"99999999"
argument_list|)
expr_stmt|;
comment|// Never flush
name|conf
operator|.
name|set
argument_list|(
name|namespace
operator|+
literal|"."
operator|+
name|DecayRpcScheduler
operator|.
name|IPC_FCQ_DECAYSCHEDULER_THRESHOLDS_KEY
argument_list|,
literal|"25, 50, 75"
argument_list|)
expr_stmt|;
name|scheduler
operator|=
operator|new
name|DecayRpcScheduler
argument_list|(
literal|4
argument_list|,
name|namespace
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getPriorityLevel
argument_list|(
name|mockCall
argument_list|(
literal|"A"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|scheduler
operator|.
name|getPriorityLevel
argument_list|(
name|mockCall
argument_list|(
literal|"A"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getPriorityLevel
argument_list|(
name|mockCall
argument_list|(
literal|"B"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getPriorityLevel
argument_list|(
name|mockCall
argument_list|(
literal|"B"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getPriorityLevel
argument_list|(
name|mockCall
argument_list|(
literal|"C"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getPriorityLevel
argument_list|(
name|mockCall
argument_list|(
literal|"C"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getPriorityLevel
argument_list|(
name|mockCall
argument_list|(
literal|"A"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getPriorityLevel
argument_list|(
name|mockCall
argument_list|(
literal|"A"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getPriorityLevel
argument_list|(
name|mockCall
argument_list|(
literal|"A"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|scheduler
operator|.
name|getPriorityLevel
argument_list|(
name|mockCall
argument_list|(
literal|"A"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|MBeanServer
name|mbs
init|=
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
decl_stmt|;
name|ObjectName
name|mxbeanName
init|=
operator|new
name|ObjectName
argument_list|(
literal|"Hadoop:service="
operator|+
name|namespace
operator|+
literal|",name=DecayRpcScheduler"
argument_list|)
decl_stmt|;
name|String
name|cvs1
init|=
operator|(
name|String
operator|)
name|mbs
operator|.
name|getAttribute
argument_list|(
name|mxbeanName
argument_list|,
literal|"CallVolumeSummary"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Get expected JMX of CallVolumeSummary before decay"
argument_list|,
name|cvs1
operator|.
name|equals
argument_list|(
literal|"{\"A\":6,\"B\":2,\"C\":2}"
argument_list|)
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|forceDecay
argument_list|()
expr_stmt|;
name|String
name|cvs2
init|=
operator|(
name|String
operator|)
name|mbs
operator|.
name|getAttribute
argument_list|(
name|mxbeanName
argument_list|,
literal|"CallVolumeSummary"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Get expected JMX for CallVolumeSummary after decay"
argument_list|,
name|cvs2
operator|.
name|equals
argument_list|(
literal|"{\"A\":3,\"B\":1,\"C\":1}"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|2000
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|testPeriodic ()
specifier|public
name|void
name|testPeriodic
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"ns."
operator|+
name|DecayRpcScheduler
operator|.
name|IPC_FCQ_DECAYSCHEDULER_PERIOD_KEY
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"ns."
operator|+
name|DecayRpcScheduler
operator|.
name|IPC_FCQ_DECAYSCHEDULER_FACTOR_KEY
argument_list|,
literal|"0.5"
argument_list|)
expr_stmt|;
name|scheduler
operator|=
operator|new
name|DecayRpcScheduler
argument_list|(
literal|1
argument_list|,
literal|"ns"
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|scheduler
operator|.
name|getDecayPeriodMillis
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getTotalCallSnapshot
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|64
condition|;
name|i
operator|++
control|)
block|{
name|scheduler
operator|.
name|getPriorityLevel
argument_list|(
name|mockCall
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// It should eventually decay to zero
while|while
condition|(
name|scheduler
operator|.
name|getTotalCallSnapshot
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

