begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.service.launcher
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|launcher
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|BreakableService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|launcher
operator|.
name|testservices
operator|.
name|ExceptionInExecuteLaunchableService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|launcher
operator|.
name|testservices
operator|.
name|LaunchableRunningService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|launcher
operator|.
name|testservices
operator|.
name|NoArgsAllowedService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Test the inner launcher methods.  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"ThrowableResultOfMethodCallIgnored"
argument_list|)
DECL|class|TestServiceLauncherInnerMethods
specifier|public
class|class
name|TestServiceLauncherInnerMethods
extends|extends
name|AbstractServiceLauncherTestBase
block|{
annotation|@
name|Test
DECL|method|testLaunchService ()
specifier|public
name|void
name|testLaunchService
parameter_list|()
throws|throws
name|Throwable
block|{
name|ServiceLauncher
argument_list|<
name|NoArgsAllowedService
argument_list|>
name|launcher
init|=
name|launchService
argument_list|(
name|NoArgsAllowedService
operator|.
name|class
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
name|NoArgsAllowedService
name|service
init|=
name|launcher
operator|.
name|getService
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"null service from "
operator|+
name|launcher
argument_list|,
name|service
argument_list|)
expr_stmt|;
name|service
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLaunchServiceArgs ()
specifier|public
name|void
name|testLaunchServiceArgs
parameter_list|()
throws|throws
name|Throwable
block|{
name|launchExpectingException
argument_list|(
name|NoArgsAllowedService
operator|.
name|class
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|,
literal|"arguments"
argument_list|,
name|EXIT_COMMAND_ARGUMENT_ERROR
argument_list|,
literal|"one"
argument_list|,
literal|"two"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAccessLaunchedService ()
specifier|public
name|void
name|testAccessLaunchedService
parameter_list|()
throws|throws
name|Throwable
block|{
name|ServiceLauncher
argument_list|<
name|LaunchableRunningService
argument_list|>
name|launcher
init|=
name|launchService
argument_list|(
name|LaunchableRunningService
operator|.
name|class
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
name|LaunchableRunningService
name|service
init|=
name|launcher
operator|.
name|getService
argument_list|()
decl_stmt|;
name|assertInState
argument_list|(
name|service
argument_list|,
name|Service
operator|.
name|STATE
operator|.
name|STARTED
argument_list|)
expr_stmt|;
name|service
operator|.
name|failInRun
operator|=
literal|true
expr_stmt|;
name|service
operator|.
name|setExitCode
argument_list|(
name|EXIT_CONNECTIVITY_PROBLEM
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|EXIT_CONNECTIVITY_PROBLEM
argument_list|,
name|service
operator|.
name|execute
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLaunchThrowableRaised ()
specifier|public
name|void
name|testLaunchThrowableRaised
parameter_list|()
throws|throws
name|Throwable
block|{
name|launchExpectingException
argument_list|(
name|ExceptionInExecuteLaunchableService
operator|.
name|class
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|,
literal|"java.lang.OutOfMemoryError"
argument_list|,
name|EXIT_EXCEPTION_THROWN
argument_list|,
name|ExceptionInExecuteLaunchableService
operator|.
name|ARG_THROWABLE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBreakableServiceLifecycle ()
specifier|public
name|void
name|testBreakableServiceLifecycle
parameter_list|()
throws|throws
name|Throwable
block|{
name|ServiceLauncher
argument_list|<
name|BreakableService
argument_list|>
name|launcher
init|=
name|launchService
argument_list|(
name|BreakableService
operator|.
name|class
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
name|BreakableService
name|service
init|=
name|launcher
operator|.
name|getService
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"null service from "
operator|+
name|launcher
argument_list|,
name|service
argument_list|)
expr_stmt|;
name|service
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConfigLoading ()
specifier|public
name|void
name|testConfigLoading
parameter_list|()
throws|throws
name|Throwable
block|{
name|ServiceLauncher
argument_list|<
name|BreakableService
argument_list|>
name|launcher
init|=
operator|new
name|ServiceLauncher
argument_list|<>
argument_list|(
literal|"BreakableService"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|configurationsToCreate
init|=
name|launcher
operator|.
name|getConfigurationsToCreate
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|configurationsToCreate
operator|.
name|size
argument_list|()
operator|>
literal|1
argument_list|)
expr_stmt|;
name|int
name|created
init|=
name|launcher
operator|.
name|loadConfigurationClasses
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|created
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

