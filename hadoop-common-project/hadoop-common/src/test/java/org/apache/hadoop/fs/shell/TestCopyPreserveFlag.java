begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.shell
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|shell
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystemTestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocalFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|shell
operator|.
name|CopyCommands
operator|.
name|Cp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|shell
operator|.
name|CopyCommands
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|shell
operator|.
name|CopyCommands
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestCopyPreserveFlag
specifier|public
class|class
name|TestCopyPreserveFlag
block|{
DECL|field|MODIFICATION_TIME
specifier|private
specifier|static
specifier|final
name|int
name|MODIFICATION_TIME
init|=
literal|12345000
decl_stmt|;
DECL|field|ACCESS_TIME
specifier|private
specifier|static
specifier|final
name|int
name|ACCESS_TIME
init|=
literal|23456000
decl_stmt|;
DECL|field|DIR_FROM
specifier|private
specifier|static
specifier|final
name|Path
name|DIR_FROM
init|=
operator|new
name|Path
argument_list|(
literal|"d0"
argument_list|)
decl_stmt|;
DECL|field|DIR_TO1
specifier|private
specifier|static
specifier|final
name|Path
name|DIR_TO1
init|=
operator|new
name|Path
argument_list|(
literal|"d1"
argument_list|)
decl_stmt|;
DECL|field|DIR_TO2
specifier|private
specifier|static
specifier|final
name|Path
name|DIR_TO2
init|=
operator|new
name|Path
argument_list|(
literal|"d2"
argument_list|)
decl_stmt|;
DECL|field|FROM
specifier|private
specifier|static
specifier|final
name|Path
name|FROM
init|=
operator|new
name|Path
argument_list|(
name|DIR_FROM
argument_list|,
literal|"f0"
argument_list|)
decl_stmt|;
DECL|field|TO
specifier|private
specifier|static
specifier|final
name|Path
name|TO
init|=
operator|new
name|Path
argument_list|(
name|DIR_TO1
argument_list|,
literal|"f1"
argument_list|)
decl_stmt|;
DECL|field|PERMISSIONS
specifier|private
specifier|static
specifier|final
name|FsPermission
name|PERMISSIONS
init|=
operator|new
name|FsPermission
argument_list|(
name|FsAction
operator|.
name|ALL
argument_list|,
name|FsAction
operator|.
name|EXECUTE
argument_list|,
name|FsAction
operator|.
name|READ_WRITE
argument_list|)
decl_stmt|;
DECL|field|fs
specifier|private
name|FileSystem
name|fs
decl_stmt|;
DECL|field|testDir
specifier|private
name|Path
name|testDir
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
annotation|@
name|Before
DECL|method|initialize ()
specifier|public
name|void
name|initialize
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.file.impl"
argument_list|,
name|LocalFileSystem
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|testDir
operator|=
operator|new
name|FileSystemTestHelper
argument_list|()
operator|.
name|getTestRootPath
argument_list|(
name|fs
argument_list|)
expr_stmt|;
comment|// don't want scheme on the path, just an absolute path
name|testDir
operator|=
operator|new
name|Path
argument_list|(
name|fs
operator|.
name|makeQualified
argument_list|(
name|testDir
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|FileSystem
operator|.
name|setDefaultUri
argument_list|(
name|conf
argument_list|,
name|fs
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setWorkingDirectory
argument_list|(
name|testDir
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|DIR_FROM
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|DIR_TO1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|createNewFile
argument_list|(
name|FROM
argument_list|)
expr_stmt|;
name|FSDataOutputStream
name|output
init|=
name|fs
operator|.
name|create
argument_list|(
name|FROM
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
operator|++
name|i
control|)
block|{
name|output
operator|.
name|writeInt
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|output
operator|.
name|writeChar
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|.
name|setTimes
argument_list|(
name|FROM
argument_list|,
name|MODIFICATION_TIME
argument_list|,
name|ACCESS_TIME
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|FROM
argument_list|,
name|PERMISSIONS
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setTimes
argument_list|(
name|DIR_FROM
argument_list|,
name|MODIFICATION_TIME
argument_list|,
name|ACCESS_TIME
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|DIR_FROM
argument_list|,
name|PERMISSIONS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|cleanup ()
specifier|public
name|void
name|cleanup
parameter_list|()
throws|throws
name|Exception
block|{
name|fs
operator|.
name|delete
argument_list|(
name|testDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|assertAttributesPreserved (Path to)
specifier|private
name|void
name|assertAttributesPreserved
parameter_list|(
name|Path
name|to
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
name|status
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|to
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MODIFICATION_TIME
argument_list|,
name|status
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ACCESS_TIME
argument_list|,
name|status
operator|.
name|getAccessTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PERMISSIONS
argument_list|,
name|status
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertAttributesChanged (Path to)
specifier|private
name|void
name|assertAttributesChanged
parameter_list|(
name|Path
name|to
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
name|status
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|to
argument_list|)
decl_stmt|;
name|assertNotEquals
argument_list|(
name|MODIFICATION_TIME
argument_list|,
name|status
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|ACCESS_TIME
argument_list|,
name|status
operator|.
name|getAccessTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|PERMISSIONS
argument_list|,
name|status
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|run (CommandWithDestination cmd, String... args)
specifier|private
name|void
name|run
parameter_list|(
name|CommandWithDestination
name|cmd
parameter_list|,
name|String
modifier|...
name|args
parameter_list|)
block|{
name|cmd
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmd
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testPutWithP ()
specifier|public
name|void
name|testPutWithP
parameter_list|()
throws|throws
name|Exception
block|{
name|run
argument_list|(
operator|new
name|Put
argument_list|()
argument_list|,
literal|"-p"
argument_list|,
name|FROM
operator|.
name|toString
argument_list|()
argument_list|,
name|TO
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertAttributesPreserved
argument_list|(
name|TO
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testPutWithoutP ()
specifier|public
name|void
name|testPutWithoutP
parameter_list|()
throws|throws
name|Exception
block|{
name|run
argument_list|(
operator|new
name|Put
argument_list|()
argument_list|,
name|FROM
operator|.
name|toString
argument_list|()
argument_list|,
name|TO
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertAttributesChanged
argument_list|(
name|TO
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testGetWithP ()
specifier|public
name|void
name|testGetWithP
parameter_list|()
throws|throws
name|Exception
block|{
name|run
argument_list|(
operator|new
name|Get
argument_list|()
argument_list|,
literal|"-p"
argument_list|,
name|FROM
operator|.
name|toString
argument_list|()
argument_list|,
name|TO
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertAttributesPreserved
argument_list|(
name|TO
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testGetWithoutP ()
specifier|public
name|void
name|testGetWithoutP
parameter_list|()
throws|throws
name|Exception
block|{
name|run
argument_list|(
operator|new
name|Get
argument_list|()
argument_list|,
name|FROM
operator|.
name|toString
argument_list|()
argument_list|,
name|TO
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertAttributesChanged
argument_list|(
name|TO
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testCpWithP ()
specifier|public
name|void
name|testCpWithP
parameter_list|()
throws|throws
name|Exception
block|{
name|run
argument_list|(
operator|new
name|Cp
argument_list|()
argument_list|,
literal|"-p"
argument_list|,
name|FROM
operator|.
name|toString
argument_list|()
argument_list|,
name|TO
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertAttributesPreserved
argument_list|(
name|TO
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testCpWithoutP ()
specifier|public
name|void
name|testCpWithoutP
parameter_list|()
throws|throws
name|Exception
block|{
name|run
argument_list|(
operator|new
name|Cp
argument_list|()
argument_list|,
name|FROM
operator|.
name|toString
argument_list|()
argument_list|,
name|TO
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertAttributesChanged
argument_list|(
name|TO
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testDirectoryCpWithP ()
specifier|public
name|void
name|testDirectoryCpWithP
parameter_list|()
throws|throws
name|Exception
block|{
name|run
argument_list|(
operator|new
name|Cp
argument_list|()
argument_list|,
literal|"-p"
argument_list|,
name|DIR_FROM
operator|.
name|toString
argument_list|()
argument_list|,
name|DIR_TO2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertAttributesPreserved
argument_list|(
name|DIR_TO2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testDirectoryCpWithoutP ()
specifier|public
name|void
name|testDirectoryCpWithoutP
parameter_list|()
throws|throws
name|Exception
block|{
name|run
argument_list|(
operator|new
name|Cp
argument_list|()
argument_list|,
name|DIR_FROM
operator|.
name|toString
argument_list|()
argument_list|,
name|DIR_TO2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertAttributesChanged
argument_list|(
name|DIR_TO2
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

