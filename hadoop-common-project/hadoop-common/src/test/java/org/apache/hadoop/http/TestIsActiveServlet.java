begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.http
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|http
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyInt
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|atLeastOnce
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|never
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * Test if the {@link IsActiveServlet} returns the right answer if the  * underlying service is active.  */
end_comment

begin_class
DECL|class|TestIsActiveServlet
specifier|public
class|class
name|TestIsActiveServlet
block|{
DECL|field|servlet
specifier|private
name|IsActiveServlet
name|servlet
decl_stmt|;
DECL|field|req
specifier|private
name|HttpServletRequest
name|req
decl_stmt|;
DECL|field|resp
specifier|private
name|HttpServletResponse
name|resp
decl_stmt|;
DECL|field|respOut
specifier|private
name|ByteArrayOutputStream
name|respOut
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|req
operator|=
name|mock
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
expr_stmt|;
name|resp
operator|=
name|mock
argument_list|(
name|HttpServletResponse
operator|.
name|class
argument_list|)
expr_stmt|;
name|respOut
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|PrintWriter
name|writer
init|=
operator|new
name|PrintWriter
argument_list|(
name|respOut
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|resp
operator|.
name|getWriter
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSucceedsOnActive ()
specifier|public
name|void
name|testSucceedsOnActive
parameter_list|()
throws|throws
name|IOException
block|{
name|servlet
operator|=
operator|new
name|IsActiveServlet
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|isActive
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
expr_stmt|;
name|String
name|response
init|=
name|doGet
argument_list|()
decl_stmt|;
name|verify
argument_list|(
name|resp
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|sendError
argument_list|(
name|anyInt
argument_list|()
argument_list|,
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|IsActiveServlet
operator|.
name|RESPONSE_ACTIVE
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFailsOnInactive ()
specifier|public
name|void
name|testFailsOnInactive
parameter_list|()
throws|throws
name|IOException
block|{
name|servlet
operator|=
operator|new
name|IsActiveServlet
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|isActive
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
expr_stmt|;
name|doGet
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|resp
argument_list|,
name|atLeastOnce
argument_list|()
argument_list|)
operator|.
name|sendError
argument_list|(
name|eq
argument_list|(
name|HttpServletResponse
operator|.
name|SC_METHOD_NOT_ALLOWED
argument_list|)
argument_list|,
name|eq
argument_list|(
name|IsActiveServlet
operator|.
name|RESPONSE_NOT_ACTIVE
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|doGet ()
specifier|private
name|String
name|doGet
parameter_list|()
throws|throws
name|IOException
block|{
name|servlet
operator|.
name|doGet
argument_list|(
name|req
argument_list|,
name|resp
argument_list|)
expr_stmt|;
return|return
operator|new
name|String
argument_list|(
name|respOut
operator|.
name|toByteArray
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

