begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.oncrpc
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|DatagramPacket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|DatagramSocket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_comment
comment|/**  * A simple UDP based RPC client which just sends one request to a server.  */
end_comment

begin_class
DECL|class|SimpleUdpClient
specifier|public
class|class
name|SimpleUdpClient
block|{
DECL|field|host
specifier|protected
specifier|final
name|String
name|host
decl_stmt|;
DECL|field|port
specifier|protected
specifier|final
name|int
name|port
decl_stmt|;
DECL|field|request
specifier|protected
specifier|final
name|XDR
name|request
decl_stmt|;
DECL|field|oneShot
specifier|protected
specifier|final
name|boolean
name|oneShot
decl_stmt|;
DECL|field|clientSocket
specifier|protected
specifier|final
name|DatagramSocket
name|clientSocket
decl_stmt|;
DECL|method|SimpleUdpClient (String host, int port, XDR request, DatagramSocket clientSocket)
specifier|public
name|SimpleUdpClient
parameter_list|(
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|,
name|XDR
name|request
parameter_list|,
name|DatagramSocket
name|clientSocket
parameter_list|)
block|{
name|this
argument_list|(
name|host
argument_list|,
name|port
argument_list|,
name|request
argument_list|,
literal|true
argument_list|,
name|clientSocket
argument_list|)
expr_stmt|;
block|}
DECL|method|SimpleUdpClient (String host, int port, XDR request, Boolean oneShot, DatagramSocket clientSocket)
specifier|public
name|SimpleUdpClient
parameter_list|(
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|,
name|XDR
name|request
parameter_list|,
name|Boolean
name|oneShot
parameter_list|,
name|DatagramSocket
name|clientSocket
parameter_list|)
block|{
name|this
operator|.
name|host
operator|=
name|host
expr_stmt|;
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
name|this
operator|.
name|request
operator|=
name|request
expr_stmt|;
name|this
operator|.
name|oneShot
operator|=
name|oneShot
expr_stmt|;
name|this
operator|.
name|clientSocket
operator|=
name|clientSocket
expr_stmt|;
block|}
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|IOException
block|{
name|InetAddress
name|IPAddress
init|=
name|InetAddress
operator|.
name|getByName
argument_list|(
name|host
argument_list|)
decl_stmt|;
name|byte
index|[]
name|sendData
init|=
name|request
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|receiveData
init|=
operator|new
name|byte
index|[
literal|65535
index|]
decl_stmt|;
comment|// Use the provided socket if there is one, else just make a new one.
name|DatagramSocket
name|socket
init|=
name|this
operator|.
name|clientSocket
operator|==
literal|null
condition|?
operator|new
name|DatagramSocket
argument_list|()
else|:
name|this
operator|.
name|clientSocket
decl_stmt|;
try|try
block|{
name|DatagramPacket
name|sendPacket
init|=
operator|new
name|DatagramPacket
argument_list|(
name|sendData
argument_list|,
name|sendData
operator|.
name|length
argument_list|,
name|IPAddress
argument_list|,
name|port
argument_list|)
decl_stmt|;
name|socket
operator|.
name|send
argument_list|(
name|sendPacket
argument_list|)
expr_stmt|;
name|DatagramPacket
name|receivePacket
init|=
operator|new
name|DatagramPacket
argument_list|(
name|receiveData
argument_list|,
name|receiveData
operator|.
name|length
argument_list|)
decl_stmt|;
name|socket
operator|.
name|receive
argument_list|(
name|receivePacket
argument_list|)
expr_stmt|;
comment|// Check reply status
name|XDR
name|xdr
init|=
operator|new
name|XDR
argument_list|(
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|receiveData
argument_list|,
literal|0
argument_list|,
name|receivePacket
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|RpcReply
name|reply
init|=
name|RpcReply
operator|.
name|read
argument_list|(
name|xdr
argument_list|)
decl_stmt|;
if|if
condition|(
name|reply
operator|.
name|getState
argument_list|()
operator|!=
name|RpcReply
operator|.
name|ReplyState
operator|.
name|MSG_ACCEPTED
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Request failed: "
operator|+
name|reply
operator|.
name|getState
argument_list|()
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
comment|// If the client socket was passed in to this UDP client, it's on the
comment|// caller of this UDP client to close that socket.
if|if
condition|(
name|this
operator|.
name|clientSocket
operator|==
literal|null
condition|)
block|{
name|socket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

