begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.nfs.nfs3.response
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|response
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|Nfs3FileAttributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|Nfs3Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
operator|.
name|XDR
import|;
end_import

begin_comment
comment|/**  * PATHCONF3 Response  */
end_comment

begin_class
DECL|class|PATHCONF3Response
specifier|public
class|class
name|PATHCONF3Response
extends|extends
name|NFS3Response
block|{
DECL|field|postOpAttr
specifier|private
specifier|final
name|Nfs3FileAttributes
name|postOpAttr
decl_stmt|;
comment|/* The maximum number of hard links to an object. */
DECL|field|linkMax
specifier|private
specifier|final
name|int
name|linkMax
decl_stmt|;
comment|/* The maximum length of a component of a filename. */
DECL|field|nameMax
specifier|private
specifier|final
name|int
name|nameMax
decl_stmt|;
comment|/*    * If TRUE, the server will reject any request that includes a name longer    * than name_max with the error, NFS3ERR_NAMETOOLONG. If FALSE, any length    * name over name_max bytes will be silently truncated to name_max bytes.    */
DECL|field|noTrunc
specifier|private
specifier|final
name|boolean
name|noTrunc
decl_stmt|;
comment|/*    * If TRUE, the server will reject any request to change either the owner or    * the group associated with a file if the caller is not the privileged user.    * (Uid 0.)    */
DECL|field|chownRestricted
specifier|private
specifier|final
name|boolean
name|chownRestricted
decl_stmt|;
comment|/*    * If TRUE, the server file system does not distinguish case when interpreting    * filenames.    */
DECL|field|caseInsensitive
specifier|private
specifier|final
name|boolean
name|caseInsensitive
decl_stmt|;
comment|/*    * If TRUE, the server file system will preserve the case of a name during a    * CREATE, MKDIR, MKNOD, SYMLINK, RENAME, or LINK operation.    */
DECL|field|casePreserving
specifier|private
specifier|final
name|boolean
name|casePreserving
decl_stmt|;
DECL|method|PATHCONF3Response (int status)
specifier|public
name|PATHCONF3Response
parameter_list|(
name|int
name|status
parameter_list|)
block|{
name|this
argument_list|(
name|status
argument_list|,
operator|new
name|Nfs3FileAttributes
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|PATHCONF3Response (int status, Nfs3FileAttributes postOpAttr, int linkMax, int nameMax, boolean noTrunc, boolean chownRestricted, boolean caseInsensitive, boolean casePreserving)
specifier|public
name|PATHCONF3Response
parameter_list|(
name|int
name|status
parameter_list|,
name|Nfs3FileAttributes
name|postOpAttr
parameter_list|,
name|int
name|linkMax
parameter_list|,
name|int
name|nameMax
parameter_list|,
name|boolean
name|noTrunc
parameter_list|,
name|boolean
name|chownRestricted
parameter_list|,
name|boolean
name|caseInsensitive
parameter_list|,
name|boolean
name|casePreserving
parameter_list|)
block|{
name|super
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|this
operator|.
name|postOpAttr
operator|=
name|postOpAttr
expr_stmt|;
name|this
operator|.
name|linkMax
operator|=
name|linkMax
expr_stmt|;
name|this
operator|.
name|nameMax
operator|=
name|nameMax
expr_stmt|;
name|this
operator|.
name|noTrunc
operator|=
name|noTrunc
expr_stmt|;
name|this
operator|.
name|chownRestricted
operator|=
name|chownRestricted
expr_stmt|;
name|this
operator|.
name|caseInsensitive
operator|=
name|caseInsensitive
expr_stmt|;
name|this
operator|.
name|casePreserving
operator|=
name|casePreserving
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|send (XDR out, int xid)
specifier|public
name|XDR
name|send
parameter_list|(
name|XDR
name|out
parameter_list|,
name|int
name|xid
parameter_list|)
block|{
name|super
operator|.
name|send
argument_list|(
name|out
argument_list|,
name|xid
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|postOpAttr
operator|.
name|serialize
argument_list|(
name|out
argument_list|)
expr_stmt|;
if|if
condition|(
name|getStatus
argument_list|()
operator|==
name|Nfs3Status
operator|.
name|NFS3_OK
condition|)
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|linkMax
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|nameMax
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|noTrunc
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|chownRestricted
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|caseInsensitive
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|casePreserving
argument_list|)
expr_stmt|;
block|}
return|return
name|out
return|;
block|}
block|}
end_class

end_unit

