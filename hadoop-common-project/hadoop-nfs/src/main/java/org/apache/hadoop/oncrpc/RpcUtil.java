begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.oncrpc
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ChannelBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ChannelBuffers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandlerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|frame
operator|.
name|FrameDecoder
import|;
end_import

begin_class
DECL|class|RpcUtil
specifier|public
class|class
name|RpcUtil
block|{
comment|/**    * The XID in RPC call. It is used for starting with new seed after each reboot.    */
DECL|field|xid
specifier|private
specifier|static
name|int
name|xid
init|=
call|(
name|int
call|)
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
operator|<<
literal|12
decl_stmt|;
DECL|method|getNewXid (String caller)
specifier|public
specifier|static
name|int
name|getNewXid
parameter_list|(
name|String
name|caller
parameter_list|)
block|{
return|return
name|xid
operator|=
operator|++
name|xid
operator|+
name|caller
operator|.
name|hashCode
argument_list|()
return|;
block|}
DECL|method|constructRpcFrameDecoder ()
specifier|public
specifier|static
name|FrameDecoder
name|constructRpcFrameDecoder
parameter_list|()
block|{
return|return
operator|new
name|RpcFrameDecoder
argument_list|()
return|;
block|}
DECL|class|RpcFrameDecoder
specifier|static
class|class
name|RpcFrameDecoder
extends|extends
name|FrameDecoder
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RpcFrameDecoder
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|currentFrame
specifier|private
name|ChannelBuffer
name|currentFrame
decl_stmt|;
annotation|@
name|Override
DECL|method|decode (ChannelHandlerContext ctx, Channel channel, ChannelBuffer buf)
specifier|protected
name|Object
name|decode
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|Channel
name|channel
parameter_list|,
name|ChannelBuffer
name|buf
parameter_list|)
block|{
if|if
condition|(
name|buf
operator|.
name|readableBytes
argument_list|()
operator|<
literal|4
condition|)
return|return
literal|null
return|;
name|buf
operator|.
name|markReaderIndex
argument_list|()
expr_stmt|;
name|byte
index|[]
name|fragmentHeader
init|=
operator|new
name|byte
index|[
literal|4
index|]
decl_stmt|;
name|buf
operator|.
name|readBytes
argument_list|(
name|fragmentHeader
argument_list|)
expr_stmt|;
name|int
name|length
init|=
name|XDR
operator|.
name|fragmentSize
argument_list|(
name|fragmentHeader
argument_list|)
decl_stmt|;
name|boolean
name|isLast
init|=
name|XDR
operator|.
name|isLastFragment
argument_list|(
name|fragmentHeader
argument_list|)
decl_stmt|;
if|if
condition|(
name|buf
operator|.
name|readableBytes
argument_list|()
operator|<
name|length
condition|)
block|{
name|buf
operator|.
name|resetReaderIndex
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
name|ChannelBuffer
name|newFragment
init|=
name|buf
operator|.
name|readSlice
argument_list|(
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentFrame
operator|==
literal|null
condition|)
block|{
name|currentFrame
operator|=
name|newFragment
expr_stmt|;
block|}
else|else
block|{
name|currentFrame
operator|=
name|ChannelBuffers
operator|.
name|wrappedBuffer
argument_list|(
name|currentFrame
argument_list|,
name|newFragment
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isLast
condition|)
block|{
name|ChannelBuffer
name|completeFrame
init|=
name|currentFrame
decl_stmt|;
name|currentFrame
operator|=
literal|null
expr_stmt|;
return|return
name|completeFrame
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

