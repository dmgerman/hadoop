begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.oncrpc
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
package|;
end_package

begin_comment
comment|/**  * Represent an RPC message as defined in RFC 1831.  */
end_comment

begin_class
DECL|class|RpcMessage
specifier|public
specifier|abstract
class|class
name|RpcMessage
block|{
comment|/** Message type */
DECL|enum|Type
specifier|public
enum|enum
name|Type
block|{
comment|// the order of the values below are significant.
DECL|enumConstant|RPC_CALL
name|RPC_CALL
block|,
DECL|enumConstant|RPC_REPLY
name|RPC_REPLY
block|;
DECL|method|getValue ()
specifier|public
name|int
name|getValue
parameter_list|()
block|{
return|return
name|ordinal
argument_list|()
return|;
block|}
DECL|method|fromValue (int value)
specifier|public
specifier|static
name|Type
name|fromValue
parameter_list|(
name|int
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|<
literal|0
operator|||
name|value
operator|>=
name|values
argument_list|()
operator|.
name|length
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|values
argument_list|()
index|[
name|value
index|]
return|;
block|}
block|}
DECL|field|xid
specifier|protected
specifier|final
name|int
name|xid
decl_stmt|;
DECL|field|messageType
specifier|protected
specifier|final
name|Type
name|messageType
decl_stmt|;
DECL|method|RpcMessage (int xid, Type messageType)
name|RpcMessage
parameter_list|(
name|int
name|xid
parameter_list|,
name|Type
name|messageType
parameter_list|)
block|{
if|if
condition|(
name|messageType
operator|!=
name|Type
operator|.
name|RPC_CALL
operator|&&
name|messageType
operator|!=
name|Type
operator|.
name|RPC_REPLY
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid message type "
operator|+
name|messageType
argument_list|)
throw|;
block|}
name|this
operator|.
name|xid
operator|=
name|xid
expr_stmt|;
name|this
operator|.
name|messageType
operator|=
name|messageType
expr_stmt|;
block|}
DECL|method|write (XDR xdr)
specifier|public
specifier|abstract
name|XDR
name|write
parameter_list|(
name|XDR
name|xdr
parameter_list|)
function_decl|;
DECL|method|getXid ()
specifier|public
name|int
name|getXid
parameter_list|()
block|{
return|return
name|xid
return|;
block|}
DECL|method|getMessageType ()
specifier|public
name|Type
name|getMessageType
parameter_list|()
block|{
return|return
name|messageType
return|;
block|}
DECL|method|validateMessageType (Type expected)
specifier|protected
name|void
name|validateMessageType
parameter_list|(
name|Type
name|expected
parameter_list|)
block|{
if|if
condition|(
name|expected
operator|!=
name|messageType
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Message type is expected to be "
operator|+
name|expected
operator|+
literal|" but got "
operator|+
name|messageType
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

