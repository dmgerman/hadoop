begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.oncrpc
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
operator|.
name|security
operator|.
name|RpcAuthInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
operator|.
name|security
operator|.
name|Verifier
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * Represents an RPC message of type RPC reply as defined in RFC 1831  */
end_comment

begin_class
DECL|class|RpcReply
specifier|public
specifier|abstract
class|class
name|RpcReply
extends|extends
name|RpcMessage
block|{
comment|/** RPC reply_stat as defined in RFC 1831 */
DECL|enum|ReplyState
specifier|public
enum|enum
name|ReplyState
block|{
comment|// the order of the values below are significant.
DECL|enumConstant|MSG_ACCEPTED
name|MSG_ACCEPTED
block|,
DECL|enumConstant|MSG_DENIED
name|MSG_DENIED
block|;
DECL|method|getValue ()
name|int
name|getValue
parameter_list|()
block|{
return|return
name|ordinal
argument_list|()
return|;
block|}
DECL|method|fromValue (int value)
specifier|public
specifier|static
name|ReplyState
name|fromValue
parameter_list|(
name|int
name|value
parameter_list|)
block|{
return|return
name|values
argument_list|()
index|[
name|value
index|]
return|;
block|}
block|}
DECL|field|replyState
specifier|protected
specifier|final
name|ReplyState
name|replyState
decl_stmt|;
DECL|field|verifier
specifier|protected
specifier|final
name|Verifier
name|verifier
decl_stmt|;
DECL|method|RpcReply (int xid, ReplyState state, Verifier verifier)
name|RpcReply
parameter_list|(
name|int
name|xid
parameter_list|,
name|ReplyState
name|state
parameter_list|,
name|Verifier
name|verifier
parameter_list|)
block|{
name|super
argument_list|(
name|xid
argument_list|,
name|RpcMessage
operator|.
name|Type
operator|.
name|RPC_REPLY
argument_list|)
expr_stmt|;
name|this
operator|.
name|replyState
operator|=
name|state
expr_stmt|;
name|this
operator|.
name|verifier
operator|=
name|verifier
expr_stmt|;
block|}
DECL|method|getVerifier ()
specifier|public
name|RpcAuthInfo
name|getVerifier
parameter_list|()
block|{
return|return
name|verifier
return|;
block|}
DECL|method|read (XDR xdr)
specifier|public
specifier|static
name|RpcReply
name|read
parameter_list|(
name|XDR
name|xdr
parameter_list|)
block|{
name|int
name|xid
init|=
name|xdr
operator|.
name|readInt
argument_list|()
decl_stmt|;
specifier|final
name|Type
name|messageType
init|=
name|Type
operator|.
name|fromValue
argument_list|(
name|xdr
operator|.
name|readInt
argument_list|()
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|messageType
operator|==
name|RpcMessage
operator|.
name|Type
operator|.
name|RPC_REPLY
argument_list|)
expr_stmt|;
name|ReplyState
name|stat
init|=
name|ReplyState
operator|.
name|fromValue
argument_list|(
name|xdr
operator|.
name|readInt
argument_list|()
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|stat
condition|)
block|{
case|case
name|MSG_ACCEPTED
case|:
return|return
name|RpcAcceptedReply
operator|.
name|read
argument_list|(
name|xid
argument_list|,
name|stat
argument_list|,
name|xdr
argument_list|)
return|;
case|case
name|MSG_DENIED
case|:
return|return
name|RpcDeniedReply
operator|.
name|read
argument_list|(
name|xid
argument_list|,
name|stat
argument_list|,
name|xdr
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|getState ()
specifier|public
name|ReplyState
name|getState
parameter_list|()
block|{
return|return
name|replyState
return|;
block|}
block|}
end_class

end_unit

