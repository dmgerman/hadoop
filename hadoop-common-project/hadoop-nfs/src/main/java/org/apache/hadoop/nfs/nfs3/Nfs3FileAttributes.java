begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.nfs.nfs3
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|NfsFileType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|NfsTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|response
operator|.
name|WccAttr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
operator|.
name|XDR
import|;
end_import

begin_comment
comment|/**  * File attrbutes reported in NFS.  */
end_comment

begin_class
DECL|class|Nfs3FileAttributes
specifier|public
class|class
name|Nfs3FileAttributes
block|{
DECL|field|type
specifier|private
name|int
name|type
decl_stmt|;
DECL|field|mode
specifier|private
name|int
name|mode
decl_stmt|;
DECL|field|nlink
specifier|private
name|int
name|nlink
decl_stmt|;
DECL|field|uid
specifier|private
name|int
name|uid
decl_stmt|;
DECL|field|gid
specifier|private
name|int
name|gid
decl_stmt|;
DECL|field|size
specifier|private
name|long
name|size
decl_stmt|;
DECL|field|used
specifier|private
name|long
name|used
decl_stmt|;
DECL|field|rdev
specifier|private
name|Specdata3
name|rdev
decl_stmt|;
DECL|field|fsid
specifier|private
name|long
name|fsid
decl_stmt|;
DECL|field|fileId
specifier|private
name|long
name|fileId
decl_stmt|;
DECL|field|atime
specifier|private
name|NfsTime
name|atime
decl_stmt|;
DECL|field|mtime
specifier|private
name|NfsTime
name|mtime
decl_stmt|;
DECL|field|ctime
specifier|private
name|NfsTime
name|ctime
decl_stmt|;
comment|/*    * The interpretation of the two words depends on the type of file system    * object. For a block special (NF3BLK) or character special (NF3CHR) file,    * specdata1 and specdata2 are the major and minor device numbers,    * respectively. (This is obviously a UNIX-specific interpretation.) For all    * other file types, these two elements should either be set to 0 or the    * values should be agreed upon by the client and server. If the client and    * server do not agree upon the values, the client should treat these fields    * as if they are set to 0.    *<br>    * For Hadoop, currently this field is always zero.    */
DECL|class|Specdata3
specifier|public
specifier|static
class|class
name|Specdata3
block|{
DECL|field|specdata1
specifier|final
name|int
name|specdata1
decl_stmt|;
DECL|field|specdata2
specifier|final
name|int
name|specdata2
decl_stmt|;
DECL|method|Specdata3 ()
specifier|public
name|Specdata3
parameter_list|()
block|{
name|specdata1
operator|=
literal|0
expr_stmt|;
name|specdata2
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|Specdata3 (int specdata1, int specdata2)
specifier|public
name|Specdata3
parameter_list|(
name|int
name|specdata1
parameter_list|,
name|int
name|specdata2
parameter_list|)
block|{
name|this
operator|.
name|specdata1
operator|=
name|specdata1
expr_stmt|;
name|this
operator|.
name|specdata2
operator|=
name|specdata2
expr_stmt|;
block|}
DECL|method|getSpecdata1 ()
specifier|public
name|int
name|getSpecdata1
parameter_list|()
block|{
return|return
name|specdata1
return|;
block|}
DECL|method|getSpecdata2 ()
specifier|public
name|int
name|getSpecdata2
parameter_list|()
block|{
return|return
name|specdata2
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"(Specdata3: specdata1"
operator|+
name|specdata1
operator|+
literal|", specdata2:"
operator|+
name|specdata2
operator|+
literal|")"
return|;
block|}
block|}
DECL|method|Nfs3FileAttributes ()
specifier|public
name|Nfs3FileAttributes
parameter_list|()
block|{
name|this
argument_list|(
name|NfsFileType
operator|.
name|NFSREG
argument_list|,
literal|0
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|Nfs3FileAttributes (NfsFileType nfsType, int nlink, short mode, int uid, int gid, long size, long fsid, long fileId, long mtime, long atime)
specifier|public
name|Nfs3FileAttributes
parameter_list|(
name|NfsFileType
name|nfsType
parameter_list|,
name|int
name|nlink
parameter_list|,
name|short
name|mode
parameter_list|,
name|int
name|uid
parameter_list|,
name|int
name|gid
parameter_list|,
name|long
name|size
parameter_list|,
name|long
name|fsid
parameter_list|,
name|long
name|fileId
parameter_list|,
name|long
name|mtime
parameter_list|,
name|long
name|atime
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|nfsType
operator|.
name|toValue
argument_list|()
expr_stmt|;
name|this
operator|.
name|mode
operator|=
name|mode
expr_stmt|;
name|this
operator|.
name|nlink
operator|=
operator|(
name|type
operator|==
name|NfsFileType
operator|.
name|NFSDIR
operator|.
name|toValue
argument_list|()
operator|)
condition|?
operator|(
name|nlink
operator|+
literal|2
operator|)
else|:
literal|1
expr_stmt|;
name|this
operator|.
name|uid
operator|=
name|uid
expr_stmt|;
name|this
operator|.
name|gid
operator|=
name|gid
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
if|if
condition|(
name|type
operator|==
name|NfsFileType
operator|.
name|NFSDIR
operator|.
name|toValue
argument_list|()
condition|)
block|{
name|this
operator|.
name|size
operator|=
name|getDirSize
argument_list|(
name|nlink
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|used
operator|=
name|this
operator|.
name|size
expr_stmt|;
name|this
operator|.
name|rdev
operator|=
operator|new
name|Specdata3
argument_list|()
expr_stmt|;
name|this
operator|.
name|fsid
operator|=
name|fsid
expr_stmt|;
name|this
operator|.
name|fileId
operator|=
name|fileId
expr_stmt|;
name|this
operator|.
name|mtime
operator|=
operator|new
name|NfsTime
argument_list|(
name|mtime
argument_list|)
expr_stmt|;
name|this
operator|.
name|atime
operator|=
name|atime
operator|!=
literal|0
condition|?
operator|new
name|NfsTime
argument_list|(
name|atime
argument_list|)
else|:
name|this
operator|.
name|mtime
expr_stmt|;
name|this
operator|.
name|ctime
operator|=
name|this
operator|.
name|mtime
expr_stmt|;
block|}
DECL|method|Nfs3FileAttributes (Nfs3FileAttributes other)
specifier|public
name|Nfs3FileAttributes
parameter_list|(
name|Nfs3FileAttributes
name|other
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|other
operator|.
name|getType
argument_list|()
expr_stmt|;
name|this
operator|.
name|mode
operator|=
name|other
operator|.
name|getMode
argument_list|()
expr_stmt|;
name|this
operator|.
name|nlink
operator|=
name|other
operator|.
name|getNlink
argument_list|()
expr_stmt|;
name|this
operator|.
name|uid
operator|=
name|other
operator|.
name|getUid
argument_list|()
expr_stmt|;
name|this
operator|.
name|gid
operator|=
name|other
operator|.
name|getGid
argument_list|()
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|other
operator|.
name|getSize
argument_list|()
expr_stmt|;
name|this
operator|.
name|used
operator|=
name|other
operator|.
name|getUsed
argument_list|()
expr_stmt|;
name|this
operator|.
name|rdev
operator|=
operator|new
name|Specdata3
argument_list|()
expr_stmt|;
name|this
operator|.
name|fsid
operator|=
name|other
operator|.
name|getFsid
argument_list|()
expr_stmt|;
name|this
operator|.
name|fileId
operator|=
name|other
operator|.
name|getFileId
argument_list|()
expr_stmt|;
name|this
operator|.
name|mtime
operator|=
operator|new
name|NfsTime
argument_list|(
name|other
operator|.
name|getMtime
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|atime
operator|=
operator|new
name|NfsTime
argument_list|(
name|other
operator|.
name|getAtime
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|ctime
operator|=
operator|new
name|NfsTime
argument_list|(
name|other
operator|.
name|getCtime
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|serialize (XDR xdr)
specifier|public
name|void
name|serialize
parameter_list|(
name|XDR
name|xdr
parameter_list|)
block|{
name|xdr
operator|.
name|writeInt
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|xdr
operator|.
name|writeInt
argument_list|(
name|mode
argument_list|)
expr_stmt|;
name|xdr
operator|.
name|writeInt
argument_list|(
name|nlink
argument_list|)
expr_stmt|;
name|xdr
operator|.
name|writeInt
argument_list|(
name|uid
argument_list|)
expr_stmt|;
name|xdr
operator|.
name|writeInt
argument_list|(
name|gid
argument_list|)
expr_stmt|;
name|xdr
operator|.
name|writeLongAsHyper
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|xdr
operator|.
name|writeLongAsHyper
argument_list|(
name|used
argument_list|)
expr_stmt|;
name|xdr
operator|.
name|writeInt
argument_list|(
name|rdev
operator|.
name|getSpecdata1
argument_list|()
argument_list|)
expr_stmt|;
name|xdr
operator|.
name|writeInt
argument_list|(
name|rdev
operator|.
name|getSpecdata2
argument_list|()
argument_list|)
expr_stmt|;
name|xdr
operator|.
name|writeLongAsHyper
argument_list|(
name|fsid
argument_list|)
expr_stmt|;
name|xdr
operator|.
name|writeLongAsHyper
argument_list|(
name|fileId
argument_list|)
expr_stmt|;
name|atime
operator|.
name|serialize
argument_list|(
name|xdr
argument_list|)
expr_stmt|;
name|mtime
operator|.
name|serialize
argument_list|(
name|xdr
argument_list|)
expr_stmt|;
name|ctime
operator|.
name|serialize
argument_list|(
name|xdr
argument_list|)
expr_stmt|;
block|}
DECL|method|deserialize (XDR xdr)
specifier|public
specifier|static
name|Nfs3FileAttributes
name|deserialize
parameter_list|(
name|XDR
name|xdr
parameter_list|)
block|{
name|Nfs3FileAttributes
name|attr
init|=
operator|new
name|Nfs3FileAttributes
argument_list|()
decl_stmt|;
name|attr
operator|.
name|type
operator|=
name|xdr
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|attr
operator|.
name|mode
operator|=
name|xdr
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|attr
operator|.
name|nlink
operator|=
name|xdr
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|attr
operator|.
name|uid
operator|=
name|xdr
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|attr
operator|.
name|gid
operator|=
name|xdr
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|attr
operator|.
name|size
operator|=
name|xdr
operator|.
name|readHyper
argument_list|()
expr_stmt|;
name|attr
operator|.
name|used
operator|=
name|xdr
operator|.
name|readHyper
argument_list|()
expr_stmt|;
comment|// Ignore rdev
name|xdr
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|xdr
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|attr
operator|.
name|rdev
operator|=
operator|new
name|Specdata3
argument_list|()
expr_stmt|;
name|attr
operator|.
name|fsid
operator|=
name|xdr
operator|.
name|readHyper
argument_list|()
expr_stmt|;
name|attr
operator|.
name|fileId
operator|=
name|xdr
operator|.
name|readHyper
argument_list|()
expr_stmt|;
name|attr
operator|.
name|atime
operator|=
name|NfsTime
operator|.
name|deserialize
argument_list|(
name|xdr
argument_list|)
expr_stmt|;
name|attr
operator|.
name|mtime
operator|=
name|NfsTime
operator|.
name|deserialize
argument_list|(
name|xdr
argument_list|)
expr_stmt|;
name|attr
operator|.
name|ctime
operator|=
name|NfsTime
operator|.
name|deserialize
argument_list|(
name|xdr
argument_list|)
expr_stmt|;
return|return
name|attr
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"type:%d, mode:%d, nlink:%d, uid:%d, gid:%d, "
operator|+
literal|"size:%d, used:%d, rdev:%s, fsid:%d, fileid:%d, atime:%s, "
operator|+
literal|"mtime:%s, ctime:%s"
argument_list|,
name|type
argument_list|,
name|mode
argument_list|,
name|nlink
argument_list|,
name|uid
argument_list|,
name|gid
argument_list|,
name|size
argument_list|,
name|used
argument_list|,
name|rdev
argument_list|,
name|fsid
argument_list|,
name|fileId
argument_list|,
name|atime
argument_list|,
name|mtime
argument_list|,
name|ctime
argument_list|)
return|;
block|}
DECL|method|getNlink ()
specifier|public
name|int
name|getNlink
parameter_list|()
block|{
return|return
name|nlink
return|;
block|}
DECL|method|getUsed ()
specifier|public
name|long
name|getUsed
parameter_list|()
block|{
return|return
name|used
return|;
block|}
DECL|method|getFsid ()
specifier|public
name|long
name|getFsid
parameter_list|()
block|{
return|return
name|fsid
return|;
block|}
DECL|method|getFileId ()
specifier|public
name|long
name|getFileId
parameter_list|()
block|{
return|return
name|fileId
return|;
block|}
DECL|method|getAtime ()
specifier|public
name|NfsTime
name|getAtime
parameter_list|()
block|{
return|return
name|atime
return|;
block|}
DECL|method|getMtime ()
specifier|public
name|NfsTime
name|getMtime
parameter_list|()
block|{
return|return
name|mtime
return|;
block|}
DECL|method|getCtime ()
specifier|public
name|NfsTime
name|getCtime
parameter_list|()
block|{
return|return
name|ctime
return|;
block|}
DECL|method|getType ()
specifier|public
name|int
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
DECL|method|getWccAttr ()
specifier|public
name|WccAttr
name|getWccAttr
parameter_list|()
block|{
return|return
operator|new
name|WccAttr
argument_list|(
name|size
argument_list|,
name|mtime
argument_list|,
name|ctime
argument_list|)
return|;
block|}
DECL|method|getSize ()
specifier|public
name|long
name|getSize
parameter_list|()
block|{
return|return
name|size
return|;
block|}
DECL|method|setSize (long size)
specifier|public
name|void
name|setSize
parameter_list|(
name|long
name|size
parameter_list|)
block|{
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
block|}
DECL|method|setUsed (long used)
specifier|public
name|void
name|setUsed
parameter_list|(
name|long
name|used
parameter_list|)
block|{
name|this
operator|.
name|used
operator|=
name|used
expr_stmt|;
block|}
DECL|method|getMode ()
specifier|public
name|int
name|getMode
parameter_list|()
block|{
return|return
name|this
operator|.
name|mode
return|;
block|}
DECL|method|getUid ()
specifier|public
name|int
name|getUid
parameter_list|()
block|{
return|return
name|this
operator|.
name|uid
return|;
block|}
DECL|method|getGid ()
specifier|public
name|int
name|getGid
parameter_list|()
block|{
return|return
name|this
operator|.
name|gid
return|;
block|}
comment|/**    * HDFS directory size is always zero. Try to return something meaningful    * here. Assume each child take 32bytes.    */
DECL|method|getDirSize (int childNum)
specifier|public
specifier|static
name|long
name|getDirSize
parameter_list|(
name|int
name|childNum
parameter_list|)
block|{
return|return
operator|(
name|childNum
operator|+
literal|2
operator|)
operator|*
literal|32
return|;
block|}
block|}
end_class

end_unit

