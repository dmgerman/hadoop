begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.oncrpc
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ChannelBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandlerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ExceptionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|MessageEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|SimpleChannelHandler
import|;
end_import

begin_comment
comment|/**  * Handler used by {@link SimpleUdpServer}.  */
end_comment

begin_class
DECL|class|SimpleUdpServerHandler
specifier|public
class|class
name|SimpleUdpServerHandler
extends|extends
name|SimpleChannelHandler
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SimpleUdpServerHandler
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|rpcProgram
specifier|private
specifier|final
name|RpcProgram
name|rpcProgram
decl_stmt|;
DECL|method|SimpleUdpServerHandler (RpcProgram rpcProgram)
specifier|public
name|SimpleUdpServerHandler
parameter_list|(
name|RpcProgram
name|rpcProgram
parameter_list|)
block|{
name|this
operator|.
name|rpcProgram
operator|=
name|rpcProgram
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|messageReceived (ChannelHandlerContext ctx, MessageEvent e)
specifier|public
name|void
name|messageReceived
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|MessageEvent
name|e
parameter_list|)
block|{
name|ChannelBuffer
name|buf
init|=
operator|(
name|ChannelBuffer
operator|)
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|XDR
name|request
init|=
operator|new
name|XDR
argument_list|()
decl_stmt|;
name|request
operator|.
name|writeFixedOpaque
argument_list|(
name|buf
operator|.
name|array
argument_list|()
argument_list|)
expr_stmt|;
name|InetAddress
name|remoteInetAddr
init|=
operator|(
operator|(
name|InetSocketAddress
operator|)
name|e
operator|.
name|getRemoteAddress
argument_list|()
operator|)
operator|.
name|getAddress
argument_list|()
decl_stmt|;
name|XDR
name|response
init|=
name|rpcProgram
operator|.
name|handle
argument_list|(
name|request
argument_list|,
name|remoteInetAddr
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|e
operator|.
name|getChannel
argument_list|()
operator|.
name|write
argument_list|(
name|XDR
operator|.
name|writeMessageUdp
argument_list|(
name|response
argument_list|)
argument_list|,
name|e
operator|.
name|getRemoteAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|exceptionCaught (ChannelHandlerContext ctx, ExceptionEvent e)
specifier|public
name|void
name|exceptionCaught
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|ExceptionEvent
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Encountered "
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|getChannel
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

