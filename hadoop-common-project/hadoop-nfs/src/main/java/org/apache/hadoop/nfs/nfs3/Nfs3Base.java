begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.nfs.nfs3
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mount
operator|.
name|MountdBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
operator|.
name|RpcFrameDecoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
operator|.
name|RpcProgram
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
operator|.
name|SimpleTcpServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
operator|.
name|SimpleTcpServerHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|portmap
operator|.
name|PortmapMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelPipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelPipelineFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|Channels
import|;
end_import

begin_comment
comment|/**  * Nfs server. Supports NFS v3 using {@link RpcProgram}.  * Currently Mountd program is also started inside this class.  * Only TCP server is supported and UDP is not supported.  */
end_comment

begin_class
DECL|class|Nfs3Base
specifier|public
specifier|abstract
class|class
name|Nfs3Base
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|Nfs3Base
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|mountd
specifier|private
specifier|final
name|MountdBase
name|mountd
decl_stmt|;
DECL|field|rpcProgram
specifier|private
specifier|final
name|RpcProgram
name|rpcProgram
decl_stmt|;
DECL|method|getMountBase ()
specifier|public
name|MountdBase
name|getMountBase
parameter_list|()
block|{
return|return
name|mountd
return|;
block|}
DECL|method|getRpcProgram ()
specifier|public
name|RpcProgram
name|getRpcProgram
parameter_list|()
block|{
return|return
name|rpcProgram
return|;
block|}
DECL|method|Nfs3Base (MountdBase mountd, RpcProgram program)
specifier|protected
name|Nfs3Base
parameter_list|(
name|MountdBase
name|mountd
parameter_list|,
name|RpcProgram
name|program
parameter_list|)
block|{
name|this
operator|.
name|mountd
operator|=
name|mountd
expr_stmt|;
name|this
operator|.
name|rpcProgram
operator|=
name|program
expr_stmt|;
block|}
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
block|{
name|mountd
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Start mountd
name|rpcProgram
operator|.
name|register
argument_list|(
name|PortmapMapping
operator|.
name|TRANSPORT_TCP
argument_list|)
expr_stmt|;
name|startTCPServer
argument_list|()
expr_stmt|;
comment|// Start TCP server
block|}
DECL|method|startTCPServer ()
specifier|private
name|void
name|startTCPServer
parameter_list|()
block|{
name|SimpleTcpServer
name|tcpServer
init|=
operator|new
name|SimpleTcpServer
argument_list|(
name|Nfs3Constant
operator|.
name|PORT
argument_list|,
name|rpcProgram
argument_list|,
literal|0
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|ChannelPipelineFactory
name|getPipelineFactory
parameter_list|()
block|{
return|return
operator|new
name|ChannelPipelineFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ChannelPipeline
name|getPipeline
parameter_list|()
block|{
return|return
name|Channels
operator|.
name|pipeline
argument_list|(
operator|new
name|RpcFrameDecoder
argument_list|()
argument_list|,
operator|new
name|SimpleTcpServerHandler
argument_list|(
name|rpcProgram
argument_list|)
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
decl_stmt|;
name|tcpServer
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

