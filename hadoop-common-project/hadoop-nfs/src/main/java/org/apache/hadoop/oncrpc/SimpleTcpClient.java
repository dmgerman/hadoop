begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.oncrpc
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
operator|.
name|RpcFrameDecoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
operator|.
name|XDR
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|bootstrap
operator|.
name|ClientBootstrap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelPipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelPipelineFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|Channels
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|nio
operator|.
name|NioClientSocketChannelFactory
import|;
end_import

begin_comment
comment|/**  * A simple TCP based RPC client which just sends a request to a server.  */
end_comment

begin_class
DECL|class|SimpleTcpClient
specifier|public
class|class
name|SimpleTcpClient
block|{
DECL|field|host
specifier|protected
specifier|final
name|String
name|host
decl_stmt|;
DECL|field|port
specifier|protected
specifier|final
name|int
name|port
decl_stmt|;
DECL|field|request
specifier|protected
specifier|final
name|XDR
name|request
decl_stmt|;
DECL|field|pipelineFactory
specifier|protected
name|ChannelPipelineFactory
name|pipelineFactory
decl_stmt|;
DECL|field|oneShot
specifier|protected
specifier|final
name|boolean
name|oneShot
decl_stmt|;
DECL|method|SimpleTcpClient (String host, int port, XDR request)
specifier|public
name|SimpleTcpClient
parameter_list|(
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|,
name|XDR
name|request
parameter_list|)
block|{
name|this
argument_list|(
name|host
argument_list|,
name|port
argument_list|,
name|request
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|SimpleTcpClient (String host, int port, XDR request, Boolean oneShot)
specifier|public
name|SimpleTcpClient
parameter_list|(
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|,
name|XDR
name|request
parameter_list|,
name|Boolean
name|oneShot
parameter_list|)
block|{
name|this
operator|.
name|host
operator|=
name|host
expr_stmt|;
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
name|this
operator|.
name|request
operator|=
name|request
expr_stmt|;
name|this
operator|.
name|oneShot
operator|=
name|oneShot
expr_stmt|;
block|}
DECL|method|setPipelineFactory ()
specifier|protected
name|ChannelPipelineFactory
name|setPipelineFactory
parameter_list|()
block|{
name|this
operator|.
name|pipelineFactory
operator|=
operator|new
name|ChannelPipelineFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ChannelPipeline
name|getPipeline
parameter_list|()
block|{
return|return
name|Channels
operator|.
name|pipeline
argument_list|(
operator|new
name|RpcFrameDecoder
argument_list|()
argument_list|,
operator|new
name|SimpleTcpClientHandler
argument_list|(
name|request
argument_list|)
argument_list|)
return|;
block|}
block|}
expr_stmt|;
return|return
name|this
operator|.
name|pipelineFactory
return|;
block|}
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// Configure the client.
name|ChannelFactory
name|factory
init|=
operator|new
name|NioClientSocketChannelFactory
argument_list|(
name|Executors
operator|.
name|newCachedThreadPool
argument_list|()
argument_list|,
name|Executors
operator|.
name|newCachedThreadPool
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ClientBootstrap
name|bootstrap
init|=
operator|new
name|ClientBootstrap
argument_list|(
name|factory
argument_list|)
decl_stmt|;
comment|// Set up the pipeline factory.
name|bootstrap
operator|.
name|setPipelineFactory
argument_list|(
name|setPipelineFactory
argument_list|()
argument_list|)
expr_stmt|;
name|bootstrap
operator|.
name|setOption
argument_list|(
literal|"tcpNoDelay"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|bootstrap
operator|.
name|setOption
argument_list|(
literal|"keepAlive"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Start the connection attempt.
name|ChannelFuture
name|future
init|=
name|bootstrap
operator|.
name|connect
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|oneShot
condition|)
block|{
comment|// Wait until the connection is closed or the connection attempt fails.
name|future
operator|.
name|getChannel
argument_list|()
operator|.
name|getCloseFuture
argument_list|()
operator|.
name|awaitUninterruptibly
argument_list|()
expr_stmt|;
comment|// Shut down thread pools to exit.
name|bootstrap
operator|.
name|releaseExternalResources
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

