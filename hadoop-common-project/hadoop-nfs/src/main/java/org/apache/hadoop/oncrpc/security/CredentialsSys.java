begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.oncrpc.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
operator|.
name|XDR
import|;
end_import

begin_comment
comment|/** Credential used by AUTH_SYS */
end_comment

begin_class
DECL|class|CredentialsSys
specifier|public
class|class
name|CredentialsSys
extends|extends
name|Credentials
block|{
DECL|field|HOSTNAME
specifier|private
specifier|static
specifier|final
name|String
name|HOSTNAME
decl_stmt|;
static|static
block|{
try|try
block|{
name|String
name|s
init|=
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getHostName
argument_list|()
decl_stmt|;
name|HOSTNAME
operator|=
name|s
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"HOSTNAME = "
operator|+
name|HOSTNAME
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error setting HOSTNAME"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|field|mUID
DECL|field|mGID
specifier|protected
name|int
name|mUID
decl_stmt|,
name|mGID
decl_stmt|;
DECL|field|mAuxGIDs
specifier|protected
name|int
index|[]
name|mAuxGIDs
decl_stmt|;
DECL|field|mHostName
specifier|protected
name|String
name|mHostName
decl_stmt|;
DECL|field|mStamp
specifier|protected
name|int
name|mStamp
decl_stmt|;
DECL|method|CredentialsSys ()
specifier|public
name|CredentialsSys
parameter_list|()
block|{
name|super
argument_list|(
name|AuthFlavor
operator|.
name|AUTH_SYS
argument_list|)
expr_stmt|;
name|this
operator|.
name|mCredentialsLength
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|mHostName
operator|=
name|HOSTNAME
expr_stmt|;
block|}
DECL|method|getGID ()
specifier|public
name|int
name|getGID
parameter_list|()
block|{
return|return
name|mGID
return|;
block|}
DECL|method|getUID ()
specifier|public
name|int
name|getUID
parameter_list|()
block|{
return|return
name|mUID
return|;
block|}
DECL|method|getAuxGIDs ()
specifier|public
name|int
index|[]
name|getAuxGIDs
parameter_list|()
block|{
return|return
name|mAuxGIDs
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getStamp ()
name|int
name|getStamp
parameter_list|()
block|{
return|return
name|mStamp
return|;
block|}
DECL|method|setGID (int gid)
specifier|public
name|void
name|setGID
parameter_list|(
name|int
name|gid
parameter_list|)
block|{
name|this
operator|.
name|mGID
operator|=
name|gid
expr_stmt|;
block|}
DECL|method|setUID (int uid)
specifier|public
name|void
name|setUID
parameter_list|(
name|int
name|uid
parameter_list|)
block|{
name|this
operator|.
name|mUID
operator|=
name|uid
expr_stmt|;
block|}
DECL|method|setStamp (int stamp)
specifier|public
name|void
name|setStamp
parameter_list|(
name|int
name|stamp
parameter_list|)
block|{
name|this
operator|.
name|mStamp
operator|=
name|stamp
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|setHostName (String hostname)
name|void
name|setHostName
parameter_list|(
name|String
name|hostname
parameter_list|)
block|{
name|this
operator|.
name|mHostName
operator|=
name|hostname
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|read (XDR xdr)
specifier|public
name|void
name|read
parameter_list|(
name|XDR
name|xdr
parameter_list|)
block|{
name|mCredentialsLength
operator|=
name|xdr
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|mStamp
operator|=
name|xdr
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|mHostName
operator|=
name|xdr
operator|.
name|readString
argument_list|()
expr_stmt|;
name|mUID
operator|=
name|xdr
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|mGID
operator|=
name|xdr
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|int
name|length
init|=
name|xdr
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|mAuxGIDs
operator|=
operator|new
name|int
index|[
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|mAuxGIDs
index|[
name|i
index|]
operator|=
name|xdr
operator|.
name|readInt
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|write (XDR xdr)
specifier|public
name|void
name|write
parameter_list|(
name|XDR
name|xdr
parameter_list|)
block|{
name|int
name|padding
init|=
literal|0
decl_stmt|;
comment|// Ensure there are padding bytes if hostname is not a multiple of 4.
name|padding
operator|=
literal|4
operator|-
operator|(
name|mHostName
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
operator|.
name|length
operator|%
literal|4
operator|)
expr_stmt|;
comment|// padding bytes is zero if hostname is already a multiple of 4.
name|padding
operator|=
name|padding
operator|%
literal|4
expr_stmt|;
comment|// mStamp + mHostName.length + mHostName + mUID + mGID + mAuxGIDs.count
name|mCredentialsLength
operator|=
literal|20
operator|+
name|mHostName
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
operator|.
name|length
expr_stmt|;
name|mCredentialsLength
operator|=
name|mCredentialsLength
operator|+
name|padding
expr_stmt|;
comment|// mAuxGIDs
if|if
condition|(
name|mAuxGIDs
operator|!=
literal|null
operator|&&
name|mAuxGIDs
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|mCredentialsLength
operator|+=
name|mAuxGIDs
operator|.
name|length
operator|*
literal|4
expr_stmt|;
block|}
name|xdr
operator|.
name|writeInt
argument_list|(
name|mCredentialsLength
argument_list|)
expr_stmt|;
name|xdr
operator|.
name|writeInt
argument_list|(
name|mStamp
argument_list|)
expr_stmt|;
name|xdr
operator|.
name|writeString
argument_list|(
name|mHostName
argument_list|)
expr_stmt|;
name|xdr
operator|.
name|writeInt
argument_list|(
name|mUID
argument_list|)
expr_stmt|;
name|xdr
operator|.
name|writeInt
argument_list|(
name|mGID
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|mAuxGIDs
operator|==
literal|null
operator|)
operator|||
operator|(
name|mAuxGIDs
operator|.
name|length
operator|==
literal|0
operator|)
condition|)
block|{
name|xdr
operator|.
name|writeInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|xdr
operator|.
name|writeInt
argument_list|(
name|mAuxGIDs
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mAuxGIDs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|xdr
operator|.
name|writeInt
argument_list|(
name|mAuxGIDs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

