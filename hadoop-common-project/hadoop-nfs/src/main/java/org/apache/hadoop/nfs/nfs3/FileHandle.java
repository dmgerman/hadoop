begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.nfs.nfs3
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
operator|.
name|XDR
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This is a file handle use by the NFS clients.  * Server returns this handle to the client, which is used by the client  * on subsequent operations to reference the file.  */
end_comment

begin_class
DECL|class|FileHandle
specifier|public
class|class
name|FileHandle
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FileHandle
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|HEXES
specifier|private
specifier|static
specifier|final
name|String
name|HEXES
init|=
literal|"0123456789abcdef"
decl_stmt|;
DECL|field|HANDLE_LEN
specifier|private
specifier|static
specifier|final
name|int
name|HANDLE_LEN
init|=
literal|32
decl_stmt|;
DECL|field|handle
specifier|private
name|byte
index|[]
name|handle
decl_stmt|;
comment|// Opaque handle
DECL|field|fileId
specifier|private
name|long
name|fileId
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|namenodeId
specifier|private
name|int
name|namenodeId
init|=
operator|-
literal|1
decl_stmt|;
DECL|method|FileHandle ()
specifier|public
name|FileHandle
parameter_list|()
block|{
name|handle
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * Handle is a 32 bytes number. For HDFS, the last 8 bytes is fileId    * For ViewFs, last 8 byte is fileId while 4 bytes before that is namenodeId    * @param v file id    * @param n namenode id    */
DECL|method|FileHandle (long v, int n)
specifier|public
name|FileHandle
parameter_list|(
name|long
name|v
parameter_list|,
name|int
name|n
parameter_list|)
block|{
name|fileId
operator|=
name|v
expr_stmt|;
name|namenodeId
operator|=
name|n
expr_stmt|;
name|handle
operator|=
operator|new
name|byte
index|[
name|HANDLE_LEN
index|]
expr_stmt|;
name|handle
index|[
literal|0
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|v
operator|>>>
literal|56
argument_list|)
expr_stmt|;
name|handle
index|[
literal|1
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|v
operator|>>>
literal|48
argument_list|)
expr_stmt|;
name|handle
index|[
literal|2
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|v
operator|>>>
literal|40
argument_list|)
expr_stmt|;
name|handle
index|[
literal|3
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|v
operator|>>>
literal|32
argument_list|)
expr_stmt|;
name|handle
index|[
literal|4
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|v
operator|>>>
literal|24
argument_list|)
expr_stmt|;
name|handle
index|[
literal|5
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|v
operator|>>>
literal|16
argument_list|)
expr_stmt|;
name|handle
index|[
literal|6
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|v
operator|>>>
literal|8
argument_list|)
expr_stmt|;
name|handle
index|[
literal|7
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|v
operator|>>>
literal|0
argument_list|)
expr_stmt|;
name|handle
index|[
literal|8
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|n
operator|>>>
literal|24
argument_list|)
expr_stmt|;
name|handle
index|[
literal|9
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|n
operator|>>>
literal|16
argument_list|)
expr_stmt|;
name|handle
index|[
literal|10
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|n
operator|>>>
literal|8
argument_list|)
expr_stmt|;
name|handle
index|[
literal|11
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|n
operator|>>>
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|12
init|;
name|i
operator|<
name|HANDLE_LEN
condition|;
name|i
operator|++
control|)
block|{
name|handle
index|[
name|i
index|]
operator|=
operator|(
name|byte
operator|)
literal|0
expr_stmt|;
block|}
block|}
DECL|method|FileHandle (long v)
specifier|public
name|FileHandle
parameter_list|(
name|long
name|v
parameter_list|)
block|{
name|this
argument_list|(
name|v
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|FileHandle (String s)
specifier|public
name|FileHandle
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|MessageDigest
name|digest
decl_stmt|;
try|try
block|{
name|digest
operator|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
literal|"MD5"
argument_list|)
expr_stmt|;
name|handle
operator|=
operator|new
name|byte
index|[
name|HANDLE_LEN
index|]
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"MD5 MessageDigest unavailable."
argument_list|)
expr_stmt|;
name|handle
operator|=
literal|null
expr_stmt|;
return|return;
block|}
name|byte
index|[]
name|in
init|=
name|s
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|digest
operator|.
name|update
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|byte
index|[]
name|digestbytes
init|=
name|digest
operator|.
name|digest
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|16
condition|;
name|i
operator|++
control|)
block|{
name|handle
index|[
name|i
index|]
operator|=
operator|(
name|byte
operator|)
literal|0
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|16
init|;
name|i
operator|<
literal|32
condition|;
name|i
operator|++
control|)
block|{
name|handle
index|[
name|i
index|]
operator|=
name|digestbytes
index|[
name|i
operator|-
literal|16
index|]
expr_stmt|;
block|}
block|}
DECL|method|serialize (XDR out)
specifier|public
name|boolean
name|serialize
parameter_list|(
name|XDR
name|out
parameter_list|)
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|handle
operator|.
name|length
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeFixedOpaque
argument_list|(
name|handle
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|bytesToLong (byte[] data, int offset)
specifier|private
name|long
name|bytesToLong
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|ByteBuffer
name|buffer
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|8
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|8
condition|;
name|i
operator|++
control|)
block|{
name|buffer
operator|.
name|put
argument_list|(
name|data
index|[
name|i
operator|+
name|offset
index|]
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|flip
argument_list|()
expr_stmt|;
comment|// need flip
return|return
name|buffer
operator|.
name|getLong
argument_list|()
return|;
block|}
DECL|method|bytesToInt (byte[] data, int offset)
specifier|private
name|int
name|bytesToInt
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|ByteBuffer
name|buffer
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|4
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|buffer
operator|.
name|put
argument_list|(
name|data
index|[
name|i
operator|+
name|offset
index|]
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|flip
argument_list|()
expr_stmt|;
comment|// need flip
return|return
name|buffer
operator|.
name|getInt
argument_list|()
return|;
block|}
DECL|method|deserialize (XDR xdr)
specifier|public
name|boolean
name|deserialize
parameter_list|(
name|XDR
name|xdr
parameter_list|)
block|{
if|if
condition|(
operator|!
name|XDR
operator|.
name|verifyLength
argument_list|(
name|xdr
argument_list|,
literal|32
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|int
name|size
init|=
name|xdr
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|handle
operator|=
name|xdr
operator|.
name|readFixedOpaque
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|fileId
operator|=
name|bytesToLong
argument_list|(
name|handle
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|namenodeId
operator|=
name|bytesToInt
argument_list|(
name|handle
argument_list|,
literal|8
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|hex (byte b)
specifier|private
specifier|static
name|String
name|hex
parameter_list|(
name|byte
name|b
parameter_list|)
block|{
name|StringBuilder
name|strBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|strBuilder
operator|.
name|append
argument_list|(
name|HEXES
operator|.
name|charAt
argument_list|(
operator|(
name|b
operator|&
literal|0xF0
operator|)
operator|>>
literal|4
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|HEXES
operator|.
name|charAt
argument_list|(
operator|(
name|b
operator|&
literal|0x0F
operator|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|strBuilder
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getFileId ()
specifier|public
name|long
name|getFileId
parameter_list|()
block|{
return|return
name|fileId
return|;
block|}
DECL|method|getNamenodeId ()
specifier|public
name|int
name|getNamenodeId
parameter_list|()
block|{
return|return
name|namenodeId
return|;
block|}
DECL|method|getContent ()
specifier|public
name|byte
index|[]
name|getContent
parameter_list|()
block|{
return|return
name|handle
operator|.
name|clone
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|s
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|handle
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|s
operator|.
name|append
argument_list|(
name|hex
argument_list|(
name|handle
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|s
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|FileHandle
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|FileHandle
name|h
init|=
operator|(
name|FileHandle
operator|)
name|o
decl_stmt|;
return|return
name|Arrays
operator|.
name|equals
argument_list|(
name|handle
argument_list|,
name|h
operator|.
name|handle
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|hashCode
argument_list|(
name|handle
argument_list|)
return|;
block|}
DECL|method|dumpFileHandle ()
specifier|public
name|String
name|dumpFileHandle
parameter_list|()
block|{
return|return
literal|"fileId: "
operator|+
name|fileId
operator|+
literal|" namenodeId: "
operator|+
name|namenodeId
return|;
block|}
block|}
end_class

end_unit

