begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.nfs.nfs3
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BiMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|HashBiMap
import|;
end_import

begin_comment
comment|/**  * Map id to user name or group name. It does update every 15 minutes. Only a  * single instance of this class is expected to be on the server.  */
end_comment

begin_class
DECL|class|IdUserGroup
specifier|public
class|class
name|IdUserGroup
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|IdUserGroup
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|OS
specifier|private
specifier|final
specifier|static
name|String
name|OS
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
decl_stmt|;
comment|/** Shell commands to get users and groups */
DECL|field|LINUX_GET_ALL_USERS_CMD
specifier|static
specifier|final
name|String
name|LINUX_GET_ALL_USERS_CMD
init|=
literal|"getent passwd | cut -d: -f1,3"
decl_stmt|;
DECL|field|LINUX_GET_ALL_GROUPS_CMD
specifier|static
specifier|final
name|String
name|LINUX_GET_ALL_GROUPS_CMD
init|=
literal|"getent group | cut -d: -f1,3"
decl_stmt|;
DECL|field|MAC_GET_ALL_USERS_CMD
specifier|static
specifier|final
name|String
name|MAC_GET_ALL_USERS_CMD
init|=
literal|"dscl . -list /Users UniqueID"
decl_stmt|;
DECL|field|MAC_GET_ALL_GROUPS_CMD
specifier|static
specifier|final
name|String
name|MAC_GET_ALL_GROUPS_CMD
init|=
literal|"dscl . -list /Groups PrimaryGroupID"
decl_stmt|;
comment|// Do update every 15 minutes
DECL|field|TIMEOUT
specifier|final
specifier|static
name|long
name|TIMEOUT
init|=
literal|15
operator|*
literal|60
operator|*
literal|1000
decl_stmt|;
comment|// ms
comment|// Maps for id to name map. Guarded by this object monitor lock */
DECL|field|uidNameMap
specifier|private
name|BiMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|uidNameMap
init|=
name|HashBiMap
operator|.
name|create
argument_list|()
decl_stmt|;
DECL|field|gidNameMap
specifier|private
name|BiMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|gidNameMap
init|=
name|HashBiMap
operator|.
name|create
argument_list|()
decl_stmt|;
DECL|field|lastUpdateTime
specifier|private
name|long
name|lastUpdateTime
init|=
literal|0
decl_stmt|;
comment|// Last time maps were updated
DECL|method|IdUserGroup ()
specifier|public
name|IdUserGroup
parameter_list|()
block|{
name|updateMaps
argument_list|()
expr_stmt|;
block|}
DECL|method|isExpired ()
specifier|private
name|boolean
name|isExpired
parameter_list|()
block|{
return|return
name|lastUpdateTime
operator|-
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|>
name|TIMEOUT
return|;
block|}
DECL|method|checkAndUpdateMaps ()
specifier|private
name|void
name|checkAndUpdateMaps
parameter_list|()
block|{
if|if
condition|(
name|isExpired
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Update cache now"
argument_list|)
expr_stmt|;
name|updateMaps
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Get the whole list of users and groups and save them in the maps.    */
DECL|method|updateMapInternal (BiMap<Integer, String> map, String name, String command, String regex)
specifier|private
name|void
name|updateMapInternal
parameter_list|(
name|BiMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|map
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|command
parameter_list|,
name|String
name|regex
parameter_list|)
throws|throws
name|IOException
block|{
name|BufferedReader
name|br
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Process
name|process
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"bash"
block|,
literal|"-c"
block|,
name|command
block|}
argument_list|)
decl_stmt|;
name|br
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|process
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|line
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|br
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|nameId
init|=
name|line
operator|.
name|split
argument_list|(
name|regex
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|nameId
operator|==
literal|null
operator|)
operator|||
operator|(
name|nameId
operator|.
name|length
operator|!=
literal|2
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can't parse "
operator|+
name|name
operator|+
literal|" list entry:"
operator|+
name|line
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"add "
operator|+
name|name
operator|+
literal|":"
operator|+
name|nameId
index|[
literal|0
index|]
operator|+
literal|" id:"
operator|+
name|nameId
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|nameId
index|[
literal|1
index|]
argument_list|)
argument_list|,
name|nameId
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Updated "
operator|+
name|name
operator|+
literal|" map size:"
operator|+
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't update map "
operator|+
name|name
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|br
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|br
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't close BufferedReader of command result"
argument_list|)
expr_stmt|;
name|e1
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|updateMaps ()
specifier|synchronized
specifier|public
name|void
name|updateMaps
parameter_list|()
block|{
name|BiMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|uMap
init|=
name|HashBiMap
operator|.
name|create
argument_list|()
decl_stmt|;
name|BiMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|gMap
init|=
name|HashBiMap
operator|.
name|create
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|OS
operator|.
name|startsWith
argument_list|(
literal|"Linux"
argument_list|)
condition|)
block|{
name|updateMapInternal
argument_list|(
name|uMap
argument_list|,
literal|"user"
argument_list|,
name|LINUX_GET_ALL_USERS_CMD
argument_list|,
literal|":"
argument_list|)
expr_stmt|;
name|updateMapInternal
argument_list|(
name|gMap
argument_list|,
literal|"group"
argument_list|,
name|LINUX_GET_ALL_GROUPS_CMD
argument_list|,
literal|":"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|OS
operator|.
name|startsWith
argument_list|(
literal|"Mac"
argument_list|)
condition|)
block|{
name|updateMapInternal
argument_list|(
name|uMap
argument_list|,
literal|"user"
argument_list|,
name|MAC_GET_ALL_USERS_CMD
argument_list|,
literal|"\\s+"
argument_list|)
expr_stmt|;
name|updateMapInternal
argument_list|(
name|gMap
argument_list|,
literal|"group"
argument_list|,
name|MAC_GET_ALL_GROUPS_CMD
argument_list|,
literal|"\\s+"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Platform is not supported:"
operator|+
name|OS
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't update maps:"
operator|+
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
name|uidNameMap
operator|=
name|uMap
expr_stmt|;
name|gidNameMap
operator|=
name|gMap
expr_stmt|;
name|lastUpdateTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
DECL|method|getUid (String user)
specifier|synchronized
specifier|public
name|int
name|getUid
parameter_list|(
name|String
name|user
parameter_list|)
throws|throws
name|IOException
block|{
name|checkAndUpdateMaps
argument_list|()
expr_stmt|;
name|Integer
name|id
init|=
name|uidNameMap
operator|.
name|inverse
argument_list|()
operator|.
name|get
argument_list|(
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"User just deleted?:"
operator|+
name|user
argument_list|)
throw|;
block|}
return|return
name|id
operator|.
name|intValue
argument_list|()
return|;
block|}
DECL|method|getGid (String group)
specifier|synchronized
specifier|public
name|int
name|getGid
parameter_list|(
name|String
name|group
parameter_list|)
throws|throws
name|IOException
block|{
name|checkAndUpdateMaps
argument_list|()
expr_stmt|;
name|Integer
name|id
init|=
name|gidNameMap
operator|.
name|inverse
argument_list|()
operator|.
name|get
argument_list|(
name|group
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No such group:"
operator|+
name|group
argument_list|)
throw|;
block|}
return|return
name|id
operator|.
name|intValue
argument_list|()
return|;
block|}
DECL|method|getUserName (int uid, String unknown)
specifier|synchronized
specifier|public
name|String
name|getUserName
parameter_list|(
name|int
name|uid
parameter_list|,
name|String
name|unknown
parameter_list|)
block|{
name|checkAndUpdateMaps
argument_list|()
expr_stmt|;
name|String
name|uname
init|=
name|uidNameMap
operator|.
name|get
argument_list|(
name|uid
argument_list|)
decl_stmt|;
if|if
condition|(
name|uname
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Can't find user name for uid "
operator|+
name|uid
operator|+
literal|". Use default user name "
operator|+
name|unknown
argument_list|)
expr_stmt|;
name|uname
operator|=
name|unknown
expr_stmt|;
block|}
return|return
name|uname
return|;
block|}
DECL|method|getGroupName (int gid, String unknown)
specifier|synchronized
specifier|public
name|String
name|getGroupName
parameter_list|(
name|int
name|gid
parameter_list|,
name|String
name|unknown
parameter_list|)
block|{
name|checkAndUpdateMaps
argument_list|()
expr_stmt|;
name|String
name|gname
init|=
name|gidNameMap
operator|.
name|get
argument_list|(
name|gid
argument_list|)
decl_stmt|;
if|if
condition|(
name|gname
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Can't find group name for gid "
operator|+
name|gid
operator|+
literal|". Use default group name "
operator|+
name|unknown
argument_list|)
expr_stmt|;
name|gname
operator|=
name|unknown
expr_stmt|;
block|}
return|return
name|gname
return|;
block|}
comment|// When can't map user, return user name's string hashcode
DECL|method|getUidAllowingUnknown (String user)
specifier|public
name|int
name|getUidAllowingUnknown
parameter_list|(
name|String
name|user
parameter_list|)
block|{
name|checkAndUpdateMaps
argument_list|()
expr_stmt|;
name|int
name|uid
decl_stmt|;
try|try
block|{
name|uid
operator|=
name|getUid
argument_list|(
name|user
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|uid
operator|=
name|user
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Can't map user "
operator|+
name|user
operator|+
literal|". Use its string hashcode:"
operator|+
name|uid
argument_list|)
expr_stmt|;
block|}
return|return
name|uid
return|;
block|}
comment|// When can't map group, return group name's string hashcode
DECL|method|getGidAllowingUnknown (String group)
specifier|public
name|int
name|getGidAllowingUnknown
parameter_list|(
name|String
name|group
parameter_list|)
block|{
name|checkAndUpdateMaps
argument_list|()
expr_stmt|;
name|int
name|gid
decl_stmt|;
try|try
block|{
name|gid
operator|=
name|getGid
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|gid
operator|=
name|group
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Can't map group "
operator|+
name|group
operator|+
literal|". Use its string hashcode:"
operator|+
name|gid
argument_list|)
expr_stmt|;
block|}
return|return
name|gid
return|;
block|}
block|}
end_class

end_unit

