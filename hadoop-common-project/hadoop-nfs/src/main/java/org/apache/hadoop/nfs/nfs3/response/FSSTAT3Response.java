begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.nfs.nfs3.response
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|response
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|Nfs3FileAttributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|Nfs3Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
operator|.
name|XDR
import|;
end_import

begin_comment
comment|/**  * FSSTAT3 Response  */
end_comment

begin_class
DECL|class|FSSTAT3Response
specifier|public
class|class
name|FSSTAT3Response
extends|extends
name|NFS3Response
block|{
DECL|field|postOpAttr
specifier|private
name|Nfs3FileAttributes
name|postOpAttr
decl_stmt|;
comment|// The total size, in bytes, of the file system.
DECL|field|tbytes
specifier|private
specifier|final
name|long
name|tbytes
decl_stmt|;
comment|// The amount of free space, in bytes, in the file system.
DECL|field|fbytes
specifier|private
specifier|final
name|long
name|fbytes
decl_stmt|;
comment|/*    * The amount of free space, in bytes, available to the user identified by the    * authentication information in the RPC. (This reflects space that is    * reserved by the file system; it does not reflect any quota system    * implemented by the server.)    */
DECL|field|abytes
specifier|private
specifier|final
name|long
name|abytes
decl_stmt|;
comment|/*    * The total number of file slots in the file system. (On a UNIX server, this    * often corresponds to the number of inodes configured.)    */
DECL|field|tfiles
specifier|private
specifier|final
name|long
name|tfiles
decl_stmt|;
comment|/* The number of free file slots in the file system. */
DECL|field|ffiles
specifier|private
specifier|final
name|long
name|ffiles
decl_stmt|;
comment|/*    * The number of free file slots that are available to the user corresponding    * to the authentication information in the RPC. (This reflects slots that are    * reserved by the file system; it does not reflect any quota system    * implemented by the server.)    */
DECL|field|afiles
specifier|private
specifier|final
name|long
name|afiles
decl_stmt|;
comment|/*    * A measure of file system volatility: this is the number of seconds for    * which the file system is not expected to change. For a volatile, frequently    * updated file system, this will be 0. For an immutable file system, such as    * a CD-ROM, this would be the largest unsigned integer. For file systems that    * are infrequently modified, for example, one containing local executable    * programs and on-line documentation, a value corresponding to a few hours or    * days might be used. The client may use this as a hint in tuning its cache    * management. Note however, this measure is assumed to be dynamic and may    * change at any time.    */
DECL|field|invarsec
specifier|private
specifier|final
name|int
name|invarsec
decl_stmt|;
DECL|method|FSSTAT3Response (int status)
specifier|public
name|FSSTAT3Response
parameter_list|(
name|int
name|status
parameter_list|)
block|{
name|this
argument_list|(
name|status
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|FSSTAT3Response (int status, Nfs3FileAttributes postOpAttr, long tbytes, long fbytes, long abytes, long tfiles, long ffiles, long afiles, int invarsec)
specifier|public
name|FSSTAT3Response
parameter_list|(
name|int
name|status
parameter_list|,
name|Nfs3FileAttributes
name|postOpAttr
parameter_list|,
name|long
name|tbytes
parameter_list|,
name|long
name|fbytes
parameter_list|,
name|long
name|abytes
parameter_list|,
name|long
name|tfiles
parameter_list|,
name|long
name|ffiles
parameter_list|,
name|long
name|afiles
parameter_list|,
name|int
name|invarsec
parameter_list|)
block|{
name|super
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|this
operator|.
name|postOpAttr
operator|=
name|postOpAttr
expr_stmt|;
name|this
operator|.
name|tbytes
operator|=
name|tbytes
expr_stmt|;
name|this
operator|.
name|fbytes
operator|=
name|fbytes
expr_stmt|;
name|this
operator|.
name|abytes
operator|=
name|abytes
expr_stmt|;
name|this
operator|.
name|tfiles
operator|=
name|tfiles
expr_stmt|;
name|this
operator|.
name|ffiles
operator|=
name|ffiles
expr_stmt|;
name|this
operator|.
name|afiles
operator|=
name|afiles
expr_stmt|;
name|this
operator|.
name|invarsec
operator|=
name|invarsec
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|send (XDR out, int xid)
specifier|public
name|XDR
name|send
parameter_list|(
name|XDR
name|out
parameter_list|,
name|int
name|xid
parameter_list|)
block|{
name|super
operator|.
name|send
argument_list|(
name|out
argument_list|,
name|xid
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|postOpAttr
operator|==
literal|null
condition|)
block|{
name|postOpAttr
operator|=
operator|new
name|Nfs3FileAttributes
argument_list|()
expr_stmt|;
block|}
name|postOpAttr
operator|.
name|serialize
argument_list|(
name|out
argument_list|)
expr_stmt|;
if|if
condition|(
name|getStatus
argument_list|()
operator|==
name|Nfs3Status
operator|.
name|NFS3_OK
condition|)
block|{
name|out
operator|.
name|writeLongAsHyper
argument_list|(
name|tbytes
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLongAsHyper
argument_list|(
name|fbytes
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLongAsHyper
argument_list|(
name|abytes
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLongAsHyper
argument_list|(
name|tfiles
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLongAsHyper
argument_list|(
name|ffiles
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLongAsHyper
argument_list|(
name|afiles
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|invarsec
argument_list|)
expr_stmt|;
block|}
return|return
name|out
return|;
block|}
block|}
end_class

end_unit

