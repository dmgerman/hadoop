begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.portmap
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|portmap
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
operator|.
name|XDR
import|;
end_import

begin_comment
comment|/**  * Represents a mapping entry for in the Portmap service for binding RPC  * protocols. See RFC 1833 for details.  *   * This maps a program to a port number.  */
end_comment

begin_class
DECL|class|PortmapMapping
specifier|public
class|class
name|PortmapMapping
block|{
DECL|field|TRANSPORT_TCP
specifier|public
specifier|static
specifier|final
name|int
name|TRANSPORT_TCP
init|=
literal|6
decl_stmt|;
DECL|field|TRANSPORT_UDP
specifier|public
specifier|static
specifier|final
name|int
name|TRANSPORT_UDP
init|=
literal|17
decl_stmt|;
DECL|field|program
specifier|private
specifier|final
name|int
name|program
decl_stmt|;
DECL|field|version
specifier|private
specifier|final
name|int
name|version
decl_stmt|;
DECL|field|transport
specifier|private
specifier|final
name|int
name|transport
decl_stmt|;
DECL|field|port
specifier|private
specifier|final
name|int
name|port
decl_stmt|;
DECL|method|PortmapMapping (int program, int version, int transport, int port)
specifier|public
name|PortmapMapping
parameter_list|(
name|int
name|program
parameter_list|,
name|int
name|version
parameter_list|,
name|int
name|transport
parameter_list|,
name|int
name|port
parameter_list|)
block|{
name|this
operator|.
name|program
operator|=
name|program
expr_stmt|;
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
name|this
operator|.
name|transport
operator|=
name|transport
expr_stmt|;
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
block|}
DECL|method|serialize (XDR xdr)
specifier|public
name|XDR
name|serialize
parameter_list|(
name|XDR
name|xdr
parameter_list|)
block|{
name|xdr
operator|.
name|writeInt
argument_list|(
name|program
argument_list|)
expr_stmt|;
name|xdr
operator|.
name|writeInt
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|xdr
operator|.
name|writeInt
argument_list|(
name|transport
argument_list|)
expr_stmt|;
name|xdr
operator|.
name|writeInt
argument_list|(
name|port
argument_list|)
expr_stmt|;
return|return
name|xdr
return|;
block|}
DECL|method|deserialize (XDR xdr)
specifier|public
specifier|static
name|PortmapMapping
name|deserialize
parameter_list|(
name|XDR
name|xdr
parameter_list|)
block|{
return|return
operator|new
name|PortmapMapping
argument_list|(
name|xdr
operator|.
name|readInt
argument_list|()
argument_list|,
name|xdr
operator|.
name|readInt
argument_list|()
argument_list|,
name|xdr
operator|.
name|readInt
argument_list|()
argument_list|,
name|xdr
operator|.
name|readInt
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getPort ()
specifier|public
name|int
name|getPort
parameter_list|()
block|{
return|return
name|port
return|;
block|}
DECL|method|key (PortmapMapping mapping)
specifier|public
specifier|static
name|String
name|key
parameter_list|(
name|PortmapMapping
name|mapping
parameter_list|)
block|{
return|return
name|mapping
operator|.
name|program
operator|+
literal|" "
operator|+
name|mapping
operator|.
name|version
operator|+
literal|" "
operator|+
name|mapping
operator|.
name|transport
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"(PortmapMapping-%d:%d:%d:%d)"
argument_list|,
name|program
argument_list|,
name|version
argument_list|,
name|transport
argument_list|,
name|port
argument_list|)
return|;
block|}
block|}
end_class

end_unit

