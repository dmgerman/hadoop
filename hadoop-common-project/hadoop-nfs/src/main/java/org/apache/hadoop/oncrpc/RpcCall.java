begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.oncrpc
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * Represents an RPC message of type RPC call as defined in RFC 1831  */
end_comment

begin_class
DECL|class|RpcCall
specifier|public
class|class
name|RpcCall
extends|extends
name|RpcMessage
block|{
DECL|field|RPC_VERSION
specifier|public
specifier|static
specifier|final
name|int
name|RPC_VERSION
init|=
literal|2
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RpcCall
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|rpcVersion
specifier|private
specifier|final
name|int
name|rpcVersion
decl_stmt|;
DECL|field|program
specifier|private
specifier|final
name|int
name|program
decl_stmt|;
DECL|field|version
specifier|private
specifier|final
name|int
name|version
decl_stmt|;
DECL|field|procedure
specifier|private
specifier|final
name|int
name|procedure
decl_stmt|;
DECL|field|credential
specifier|private
specifier|final
name|RpcAuthInfo
name|credential
decl_stmt|;
DECL|field|verifier
specifier|private
specifier|final
name|RpcAuthInfo
name|verifier
decl_stmt|;
DECL|method|RpcCall (int xid, RpcMessage.Type messageType, int rpcVersion, int program, int version, int procedure, RpcAuthInfo credential, RpcAuthInfo verifier)
specifier|protected
name|RpcCall
parameter_list|(
name|int
name|xid
parameter_list|,
name|RpcMessage
operator|.
name|Type
name|messageType
parameter_list|,
name|int
name|rpcVersion
parameter_list|,
name|int
name|program
parameter_list|,
name|int
name|version
parameter_list|,
name|int
name|procedure
parameter_list|,
name|RpcAuthInfo
name|credential
parameter_list|,
name|RpcAuthInfo
name|verifier
parameter_list|)
block|{
name|super
argument_list|(
name|xid
argument_list|,
name|messageType
argument_list|)
expr_stmt|;
name|this
operator|.
name|rpcVersion
operator|=
name|rpcVersion
expr_stmt|;
name|this
operator|.
name|program
operator|=
name|program
expr_stmt|;
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
name|this
operator|.
name|procedure
operator|=
name|procedure
expr_stmt|;
name|this
operator|.
name|credential
operator|=
name|credential
expr_stmt|;
name|this
operator|.
name|verifier
operator|=
name|verifier
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|validate
argument_list|()
expr_stmt|;
block|}
DECL|method|validateRpcVersion ()
specifier|private
name|void
name|validateRpcVersion
parameter_list|()
block|{
if|if
condition|(
name|rpcVersion
operator|!=
name|RPC_VERSION
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"RPC version is expected to be "
operator|+
name|RPC_VERSION
operator|+
literal|" but got "
operator|+
name|rpcVersion
argument_list|)
throw|;
block|}
block|}
DECL|method|validate ()
specifier|public
name|void
name|validate
parameter_list|()
block|{
name|validateMessageType
argument_list|(
name|RpcMessage
operator|.
name|Type
operator|.
name|RPC_CALL
argument_list|)
expr_stmt|;
name|validateRpcVersion
argument_list|()
expr_stmt|;
comment|// Validate other members
comment|// Throw exception if validation fails
block|}
DECL|method|getRpcVersion ()
specifier|public
name|int
name|getRpcVersion
parameter_list|()
block|{
return|return
name|rpcVersion
return|;
block|}
DECL|method|getProgram ()
specifier|public
name|int
name|getProgram
parameter_list|()
block|{
return|return
name|program
return|;
block|}
DECL|method|getVersion ()
specifier|public
name|int
name|getVersion
parameter_list|()
block|{
return|return
name|version
return|;
block|}
DECL|method|getProcedure ()
specifier|public
name|int
name|getProcedure
parameter_list|()
block|{
return|return
name|procedure
return|;
block|}
DECL|method|getCredential ()
specifier|public
name|RpcAuthInfo
name|getCredential
parameter_list|()
block|{
return|return
name|credential
return|;
block|}
DECL|method|getVerifier ()
specifier|public
name|RpcAuthInfo
name|getVerifier
parameter_list|()
block|{
return|return
name|verifier
return|;
block|}
DECL|method|read (XDR xdr)
specifier|public
specifier|static
name|RpcCall
name|read
parameter_list|(
name|XDR
name|xdr
parameter_list|)
block|{
return|return
operator|new
name|RpcCall
argument_list|(
name|xdr
operator|.
name|readInt
argument_list|()
argument_list|,
name|RpcMessage
operator|.
name|Type
operator|.
name|fromValue
argument_list|(
name|xdr
operator|.
name|readInt
argument_list|()
argument_list|)
argument_list|,
name|xdr
operator|.
name|readInt
argument_list|()
argument_list|,
name|xdr
operator|.
name|readInt
argument_list|()
argument_list|,
name|xdr
operator|.
name|readInt
argument_list|()
argument_list|,
name|xdr
operator|.
name|readInt
argument_list|()
argument_list|,
name|RpcAuthInfo
operator|.
name|read
argument_list|(
name|xdr
argument_list|)
argument_list|,
name|RpcAuthInfo
operator|.
name|read
argument_list|(
name|xdr
argument_list|)
argument_list|)
return|;
block|}
DECL|method|write (XDR out, int xid, int program, int progVersion, int procedure)
specifier|public
specifier|static
name|void
name|write
parameter_list|(
name|XDR
name|out
parameter_list|,
name|int
name|xid
parameter_list|,
name|int
name|program
parameter_list|,
name|int
name|progVersion
parameter_list|,
name|int
name|procedure
parameter_list|)
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|xid
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|RpcMessage
operator|.
name|Type
operator|.
name|RPC_CALL
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|program
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|progVersion
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|procedure
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"Xid:%d, messageType:%s, rpcVersion:%d, program:%d,"
operator|+
literal|" version:%d, procedure:%d, credential:%s, verifier:%s"
argument_list|,
name|xid
argument_list|,
name|messageType
argument_list|,
name|rpcVersion
argument_list|,
name|program
argument_list|,
name|version
argument_list|,
name|procedure
argument_list|,
name|credential
operator|.
name|toString
argument_list|()
argument_list|,
name|verifier
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

