begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.nfs.nfs3.response
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|response
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|NfsTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|FileHandle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|Nfs3FileAttributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|Nfs3Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
operator|.
name|XDR
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
operator|.
name|security
operator|.
name|Verifier
import|;
end_import

begin_comment
comment|/**  * FSINFO3 Response  */
end_comment

begin_class
DECL|class|FSINFO3Response
specifier|public
class|class
name|FSINFO3Response
extends|extends
name|NFS3Response
block|{
DECL|field|postOpAttr
specifier|private
specifier|final
name|Nfs3FileAttributes
name|postOpAttr
decl_stmt|;
comment|/*    * The maximum size in bytes of a READ request supported by the server. Any    * READ with a number greater than rtmax will result in a short read of rtmax    * bytes or less.    */
DECL|field|rtmax
specifier|private
specifier|final
name|int
name|rtmax
decl_stmt|;
comment|/*    * The preferred size of a READ request. This should be the same as rtmax    * unless there is a clear benefit in performance or efficiency.    */
DECL|field|rtpref
specifier|private
specifier|final
name|int
name|rtpref
decl_stmt|;
comment|/* The suggested multiple for the size of a READ request. */
DECL|field|rtmult
specifier|private
specifier|final
name|int
name|rtmult
decl_stmt|;
comment|/*    * The maximum size of a WRITE request supported by the server. In general,    * the client is limited by wtmax since there is no guarantee that a server    * can handle a larger write. Any WRITE with a count greater than wtmax will    * result in a short write of at most wtmax bytes.    */
DECL|field|wtmax
specifier|private
specifier|final
name|int
name|wtmax
decl_stmt|;
comment|/*    * The preferred size of a WRITE request. This should be the same as wtmax    * unless there is a clear benefit in performance or efficiency.    */
DECL|field|wtpref
specifier|private
specifier|final
name|int
name|wtpref
decl_stmt|;
comment|/*    * The suggested multiple for the size of a WRITE request.    */
DECL|field|wtmult
specifier|private
specifier|final
name|int
name|wtmult
decl_stmt|;
comment|/* The preferred size of a READDIR request. */
DECL|field|dtpref
specifier|private
specifier|final
name|int
name|dtpref
decl_stmt|;
comment|/* The maximum size of a file on the file system. */
DECL|field|maxFileSize
specifier|private
specifier|final
name|long
name|maxFileSize
decl_stmt|;
comment|/*    * The server time granularity. When setting a file time using SETATTR, the    * server guarantees only to preserve times to this accuracy. If this is {0,    * 1}, the server can support nanosecond times, {0, 1000000} denotes    * millisecond precision, and {1, 0} indicates that times are accurate only to    * the nearest second.    */
DECL|field|timeDelta
specifier|private
specifier|final
name|NfsTime
name|timeDelta
decl_stmt|;
comment|/*    * A bit mask of file system properties. The following values are defined:    *     * FSF_LINK If this bit is 1 (TRUE), the file system supports hard links.    *     * FSF_SYMLINK If this bit is 1 (TRUE), the file system supports symbolic    * links.    *     * FSF_HOMOGENEOUS If this bit is 1 (TRUE), the information returned by    * PATHCONF is identical for every file and directory in the file system. If    * it is 0 (FALSE), the client should retrieve PATHCONF information for each    * file and directory as required.    *     * FSF_CANSETTIME If this bit is 1 (TRUE), the server will set the times for a    * file via SETATTR if requested (to the accuracy indicated by time_delta). If    * it is 0 (FALSE), the server cannot set times as requested.    */
DECL|field|properties
specifier|private
specifier|final
name|int
name|properties
decl_stmt|;
DECL|method|FSINFO3Response (int status)
specifier|public
name|FSINFO3Response
parameter_list|(
name|int
name|status
parameter_list|)
block|{
name|this
argument_list|(
name|status
argument_list|,
operator|new
name|Nfs3FileAttributes
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|FSINFO3Response (int status, Nfs3FileAttributes postOpAttr, int rtmax, int rtpref, int rtmult, int wtmax, int wtpref, int wtmult, int dtpref, long maxFileSize, NfsTime timeDelta, int properties)
specifier|public
name|FSINFO3Response
parameter_list|(
name|int
name|status
parameter_list|,
name|Nfs3FileAttributes
name|postOpAttr
parameter_list|,
name|int
name|rtmax
parameter_list|,
name|int
name|rtpref
parameter_list|,
name|int
name|rtmult
parameter_list|,
name|int
name|wtmax
parameter_list|,
name|int
name|wtpref
parameter_list|,
name|int
name|wtmult
parameter_list|,
name|int
name|dtpref
parameter_list|,
name|long
name|maxFileSize
parameter_list|,
name|NfsTime
name|timeDelta
parameter_list|,
name|int
name|properties
parameter_list|)
block|{
name|super
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|this
operator|.
name|postOpAttr
operator|=
name|postOpAttr
expr_stmt|;
name|this
operator|.
name|rtmax
operator|=
name|rtmax
expr_stmt|;
name|this
operator|.
name|rtpref
operator|=
name|rtpref
expr_stmt|;
name|this
operator|.
name|rtmult
operator|=
name|rtmult
expr_stmt|;
name|this
operator|.
name|wtmax
operator|=
name|wtmax
expr_stmt|;
name|this
operator|.
name|wtpref
operator|=
name|wtpref
expr_stmt|;
name|this
operator|.
name|wtmult
operator|=
name|wtmult
expr_stmt|;
name|this
operator|.
name|dtpref
operator|=
name|dtpref
expr_stmt|;
name|this
operator|.
name|maxFileSize
operator|=
name|maxFileSize
expr_stmt|;
name|this
operator|.
name|timeDelta
operator|=
name|timeDelta
expr_stmt|;
name|this
operator|.
name|properties
operator|=
name|properties
expr_stmt|;
block|}
DECL|method|deserialize (XDR xdr)
specifier|public
specifier|static
name|FSINFO3Response
name|deserialize
parameter_list|(
name|XDR
name|xdr
parameter_list|)
block|{
name|int
name|status
init|=
name|xdr
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|xdr
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|Nfs3FileAttributes
name|postOpObjAttr
init|=
name|Nfs3FileAttributes
operator|.
name|deserialize
argument_list|(
name|xdr
argument_list|)
decl_stmt|;
name|int
name|rtmax
init|=
literal|0
decl_stmt|;
name|int
name|rtpref
init|=
literal|0
decl_stmt|;
name|int
name|rtmult
init|=
literal|0
decl_stmt|;
name|int
name|wtmax
init|=
literal|0
decl_stmt|;
name|int
name|wtpref
init|=
literal|0
decl_stmt|;
name|int
name|wtmult
init|=
literal|0
decl_stmt|;
name|int
name|dtpref
init|=
literal|0
decl_stmt|;
name|long
name|maxFileSize
init|=
literal|0
decl_stmt|;
name|NfsTime
name|timeDelta
init|=
literal|null
decl_stmt|;
name|int
name|properties
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|status
operator|==
name|Nfs3Status
operator|.
name|NFS3_OK
condition|)
block|{
name|rtmax
operator|=
name|xdr
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|rtpref
operator|=
name|xdr
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|rtmult
operator|=
name|xdr
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|wtmax
operator|=
name|xdr
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|wtpref
operator|=
name|xdr
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|wtmult
operator|=
name|xdr
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|dtpref
operator|=
name|xdr
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|maxFileSize
operator|=
name|xdr
operator|.
name|readHyper
argument_list|()
expr_stmt|;
name|timeDelta
operator|=
name|NfsTime
operator|.
name|deserialize
argument_list|(
name|xdr
argument_list|)
expr_stmt|;
name|properties
operator|=
name|xdr
operator|.
name|readInt
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|FSINFO3Response
argument_list|(
name|status
argument_list|,
name|postOpObjAttr
argument_list|,
name|rtmax
argument_list|,
name|rtpref
argument_list|,
name|rtmult
argument_list|,
name|wtmax
argument_list|,
name|wtpref
argument_list|,
name|wtmult
argument_list|,
name|dtpref
argument_list|,
name|maxFileSize
argument_list|,
name|timeDelta
argument_list|,
name|properties
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|serialize (XDR out, int xid, Verifier verifier)
specifier|public
name|XDR
name|serialize
parameter_list|(
name|XDR
name|out
parameter_list|,
name|int
name|xid
parameter_list|,
name|Verifier
name|verifier
parameter_list|)
block|{
name|super
operator|.
name|serialize
argument_list|(
name|out
argument_list|,
name|xid
argument_list|,
name|verifier
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|postOpAttr
operator|.
name|serialize
argument_list|(
name|out
argument_list|)
expr_stmt|;
if|if
condition|(
name|getStatus
argument_list|()
operator|==
name|Nfs3Status
operator|.
name|NFS3_OK
condition|)
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|rtmax
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|rtpref
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|rtmult
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|wtmax
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|wtpref
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|wtmult
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|dtpref
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLongAsHyper
argument_list|(
name|maxFileSize
argument_list|)
expr_stmt|;
name|timeDelta
operator|.
name|serialize
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
return|return
name|out
return|;
block|}
block|}
end_class

end_unit

