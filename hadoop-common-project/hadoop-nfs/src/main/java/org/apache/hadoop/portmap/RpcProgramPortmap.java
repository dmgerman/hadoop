begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.portmap
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|portmap
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
operator|.
name|RpcAcceptedReply
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
operator|.
name|RpcCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
operator|.
name|RpcInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
operator|.
name|RpcProgram
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
operator|.
name|RpcResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
operator|.
name|RpcUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
operator|.
name|XDR
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
operator|.
name|security
operator|.
name|VerifierNone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ChannelBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ChannelBuffers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandlerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelStateEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ExceptionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|MessageEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|group
operator|.
name|ChannelGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|timeout
operator|.
name|IdleState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|timeout
operator|.
name|IdleStateAwareChannelUpstreamHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|timeout
operator|.
name|IdleStateEvent
import|;
end_import

begin_class
DECL|class|RpcProgramPortmap
specifier|final
class|class
name|RpcProgramPortmap
extends|extends
name|IdleStateAwareChannelUpstreamHandler
implements|implements
name|PortmapInterface
block|{
DECL|field|PROGRAM
specifier|static
specifier|final
name|int
name|PROGRAM
init|=
literal|100000
decl_stmt|;
DECL|field|VERSION
specifier|static
specifier|final
name|int
name|VERSION
init|=
literal|2
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RpcProgramPortmap
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** Map synchronized usis monitor lock of this instance */
DECL|field|map
specifier|private
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|PortmapMapping
argument_list|>
name|map
decl_stmt|;
comment|/** ChannelGroup that remembers all active channels for gracefully shutdown. */
DECL|field|allChannels
specifier|private
specifier|final
name|ChannelGroup
name|allChannels
decl_stmt|;
DECL|method|RpcProgramPortmap (ChannelGroup allChannels)
name|RpcProgramPortmap
parameter_list|(
name|ChannelGroup
name|allChannels
parameter_list|)
block|{
name|this
operator|.
name|allChannels
operator|=
name|allChannels
expr_stmt|;
name|map
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|PortmapMapping
argument_list|>
argument_list|(
literal|256
argument_list|)
expr_stmt|;
name|PortmapMapping
name|m
init|=
operator|new
name|PortmapMapping
argument_list|(
name|PROGRAM
argument_list|,
name|VERSION
argument_list|,
name|PortmapMapping
operator|.
name|TRANSPORT_TCP
argument_list|,
name|RpcProgram
operator|.
name|RPCB_PORT
argument_list|)
decl_stmt|;
name|PortmapMapping
name|m1
init|=
operator|new
name|PortmapMapping
argument_list|(
name|PROGRAM
argument_list|,
name|VERSION
argument_list|,
name|PortmapMapping
operator|.
name|TRANSPORT_UDP
argument_list|,
name|RpcProgram
operator|.
name|RPCB_PORT
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|PortmapMapping
operator|.
name|key
argument_list|(
name|m
argument_list|)
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|PortmapMapping
operator|.
name|key
argument_list|(
name|m1
argument_list|)
argument_list|,
name|m1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|nullOp (int xid, XDR in, XDR out)
specifier|public
name|XDR
name|nullOp
parameter_list|(
name|int
name|xid
parameter_list|,
name|XDR
name|in
parameter_list|,
name|XDR
name|out
parameter_list|)
block|{
return|return
name|PortmapResponse
operator|.
name|voidReply
argument_list|(
name|out
argument_list|,
name|xid
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|set (int xid, XDR in, XDR out)
specifier|public
name|XDR
name|set
parameter_list|(
name|int
name|xid
parameter_list|,
name|XDR
name|in
parameter_list|,
name|XDR
name|out
parameter_list|)
block|{
name|PortmapMapping
name|mapping
init|=
name|PortmapRequest
operator|.
name|mapping
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|PortmapMapping
operator|.
name|key
argument_list|(
name|mapping
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Portmap set key="
operator|+
name|key
argument_list|)
expr_stmt|;
block|}
name|PortmapMapping
name|value
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|mapping
argument_list|)
expr_stmt|;
name|value
operator|=
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
return|return
name|PortmapResponse
operator|.
name|intReply
argument_list|(
name|out
argument_list|,
name|xid
argument_list|,
name|value
operator|.
name|getPort
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|unset (int xid, XDR in, XDR out)
specifier|public
specifier|synchronized
name|XDR
name|unset
parameter_list|(
name|int
name|xid
parameter_list|,
name|XDR
name|in
parameter_list|,
name|XDR
name|out
parameter_list|)
block|{
name|PortmapMapping
name|mapping
init|=
name|PortmapRequest
operator|.
name|mapping
argument_list|(
name|in
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|map
operator|.
name|remove
argument_list|(
name|PortmapMapping
operator|.
name|key
argument_list|(
name|mapping
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|PortmapResponse
operator|.
name|booleanReply
argument_list|(
name|out
argument_list|,
name|xid
argument_list|,
literal|true
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getport (int xid, XDR in, XDR out)
specifier|public
specifier|synchronized
name|XDR
name|getport
parameter_list|(
name|int
name|xid
parameter_list|,
name|XDR
name|in
parameter_list|,
name|XDR
name|out
parameter_list|)
block|{
name|PortmapMapping
name|mapping
init|=
name|PortmapRequest
operator|.
name|mapping
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|PortmapMapping
operator|.
name|key
argument_list|(
name|mapping
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Portmap GETPORT key="
operator|+
name|key
operator|+
literal|" "
operator|+
name|mapping
argument_list|)
expr_stmt|;
block|}
name|PortmapMapping
name|value
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|value
operator|=
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
name|int
name|res
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|res
operator|=
name|value
operator|.
name|getPort
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found mapping for key: "
operator|+
name|key
operator|+
literal|" port:"
operator|+
name|res
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Warning, no mapping for key: "
operator|+
name|key
argument_list|)
expr_stmt|;
block|}
return|return
name|PortmapResponse
operator|.
name|intReply
argument_list|(
name|out
argument_list|,
name|xid
argument_list|,
name|res
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|dump (int xid, XDR in, XDR out)
specifier|public
specifier|synchronized
name|XDR
name|dump
parameter_list|(
name|int
name|xid
parameter_list|,
name|XDR
name|in
parameter_list|,
name|XDR
name|out
parameter_list|)
block|{
name|PortmapMapping
index|[]
name|pmapList
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|pmapList
operator|=
operator|new
name|PortmapMapping
index|[
name|map
operator|.
name|values
argument_list|()
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|map
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
name|pmapList
argument_list|)
expr_stmt|;
block|}
return|return
name|PortmapResponse
operator|.
name|pmapList
argument_list|(
name|out
argument_list|,
name|xid
argument_list|,
name|pmapList
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|messageReceived (ChannelHandlerContext ctx, MessageEvent e)
specifier|public
name|void
name|messageReceived
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|MessageEvent
name|e
parameter_list|)
throws|throws
name|Exception
block|{
name|RpcInfo
name|info
init|=
operator|(
name|RpcInfo
operator|)
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|RpcCall
name|rpcCall
init|=
operator|(
name|RpcCall
operator|)
name|info
operator|.
name|header
argument_list|()
decl_stmt|;
specifier|final
name|Procedure
name|portmapProc
init|=
name|Procedure
operator|.
name|fromValue
argument_list|(
name|rpcCall
operator|.
name|getProcedure
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|xid
init|=
name|rpcCall
operator|.
name|getXid
argument_list|()
decl_stmt|;
name|XDR
name|in
init|=
operator|new
name|XDR
argument_list|(
name|info
operator|.
name|data
argument_list|()
operator|.
name|toByteBuffer
argument_list|()
operator|.
name|asReadOnlyBuffer
argument_list|()
argument_list|,
name|XDR
operator|.
name|State
operator|.
name|READING
argument_list|)
decl_stmt|;
name|XDR
name|out
init|=
operator|new
name|XDR
argument_list|()
decl_stmt|;
if|if
condition|(
name|portmapProc
operator|==
name|Procedure
operator|.
name|PMAPPROC_NULL
condition|)
block|{
name|out
operator|=
name|nullOp
argument_list|(
name|xid
argument_list|,
name|in
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|portmapProc
operator|==
name|Procedure
operator|.
name|PMAPPROC_SET
condition|)
block|{
name|out
operator|=
name|set
argument_list|(
name|xid
argument_list|,
name|in
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|portmapProc
operator|==
name|Procedure
operator|.
name|PMAPPROC_UNSET
condition|)
block|{
name|out
operator|=
name|unset
argument_list|(
name|xid
argument_list|,
name|in
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|portmapProc
operator|==
name|Procedure
operator|.
name|PMAPPROC_DUMP
condition|)
block|{
name|out
operator|=
name|dump
argument_list|(
name|xid
argument_list|,
name|in
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|portmapProc
operator|==
name|Procedure
operator|.
name|PMAPPROC_GETPORT
condition|)
block|{
name|out
operator|=
name|getport
argument_list|(
name|xid
argument_list|,
name|in
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|portmapProc
operator|==
name|Procedure
operator|.
name|PMAPPROC_GETVERSADDR
condition|)
block|{
name|out
operator|=
name|getport
argument_list|(
name|xid
argument_list|,
name|in
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"PortmapHandler unknown rpc procedure="
operator|+
name|portmapProc
argument_list|)
expr_stmt|;
name|RpcAcceptedReply
name|reply
init|=
name|RpcAcceptedReply
operator|.
name|getInstance
argument_list|(
name|xid
argument_list|,
name|RpcAcceptedReply
operator|.
name|AcceptState
operator|.
name|PROC_UNAVAIL
argument_list|,
operator|new
name|VerifierNone
argument_list|()
argument_list|)
decl_stmt|;
name|reply
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
name|ChannelBuffer
name|buf
init|=
name|ChannelBuffers
operator|.
name|wrappedBuffer
argument_list|(
name|out
operator|.
name|asReadOnlyWrap
argument_list|()
operator|.
name|buffer
argument_list|()
argument_list|)
decl_stmt|;
name|RpcResponse
name|rsp
init|=
operator|new
name|RpcResponse
argument_list|(
name|buf
argument_list|,
name|info
operator|.
name|remoteAddress
argument_list|()
argument_list|)
decl_stmt|;
name|RpcUtil
operator|.
name|sendRpcResponse
argument_list|(
name|ctx
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|channelOpen (ChannelHandlerContext ctx, ChannelStateEvent e)
specifier|public
name|void
name|channelOpen
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|ChannelStateEvent
name|e
parameter_list|)
throws|throws
name|Exception
block|{
name|allChannels
operator|.
name|add
argument_list|(
name|e
operator|.
name|getChannel
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|channelIdle (ChannelHandlerContext ctx, IdleStateEvent e)
specifier|public
name|void
name|channelIdle
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|IdleStateEvent
name|e
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|e
operator|.
name|getState
argument_list|()
operator|==
name|IdleState
operator|.
name|ALL_IDLE
condition|)
block|{
name|e
operator|.
name|getChannel
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|exceptionCaught (ChannelHandlerContext ctx, ExceptionEvent e)
specifier|public
name|void
name|exceptionCaught
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|ExceptionEvent
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Encountered "
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|getChannel
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

