begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.oncrpc
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
operator|.
name|security
operator|.
name|RpcAuthInfo
operator|.
name|AuthFlavor
import|;
end_import

begin_comment
comment|/**   * Represents RPC message MSG_DENIED reply body. See RFC 1831 for details.  * This response is sent to a request to indicate failure of the request.  */
end_comment

begin_class
DECL|class|RpcDeniedReply
specifier|public
class|class
name|RpcDeniedReply
extends|extends
name|RpcReply
block|{
DECL|enum|RejectState
specifier|public
enum|enum
name|RejectState
block|{
comment|// the order of the values below are significant.
DECL|enumConstant|RPC_MISMATCH
name|RPC_MISMATCH
block|,
DECL|enumConstant|AUTH_ERROR
name|AUTH_ERROR
block|;
DECL|method|getValue ()
name|int
name|getValue
parameter_list|()
block|{
return|return
name|ordinal
argument_list|()
return|;
block|}
DECL|method|fromValue (int value)
specifier|static
name|RejectState
name|fromValue
parameter_list|(
name|int
name|value
parameter_list|)
block|{
return|return
name|values
argument_list|()
index|[
name|value
index|]
return|;
block|}
block|}
DECL|field|rejectState
specifier|private
specifier|final
name|RejectState
name|rejectState
decl_stmt|;
DECL|method|RpcDeniedReply (int xid, RpcMessage.Type messageType, ReplyState replyState, RejectState rejectState)
name|RpcDeniedReply
parameter_list|(
name|int
name|xid
parameter_list|,
name|RpcMessage
operator|.
name|Type
name|messageType
parameter_list|,
name|ReplyState
name|replyState
parameter_list|,
name|RejectState
name|rejectState
parameter_list|)
block|{
name|super
argument_list|(
name|xid
argument_list|,
name|messageType
argument_list|,
name|replyState
argument_list|)
expr_stmt|;
name|this
operator|.
name|rejectState
operator|=
name|rejectState
expr_stmt|;
block|}
DECL|method|read (int xid, RpcMessage.Type messageType, ReplyState replyState, XDR xdr)
specifier|public
specifier|static
name|RpcDeniedReply
name|read
parameter_list|(
name|int
name|xid
parameter_list|,
name|RpcMessage
operator|.
name|Type
name|messageType
parameter_list|,
name|ReplyState
name|replyState
parameter_list|,
name|XDR
name|xdr
parameter_list|)
block|{
name|RejectState
name|rejectState
init|=
name|RejectState
operator|.
name|fromValue
argument_list|(
name|xdr
operator|.
name|readInt
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|RpcDeniedReply
argument_list|(
name|xid
argument_list|,
name|messageType
argument_list|,
name|replyState
argument_list|,
name|rejectState
argument_list|)
return|;
block|}
DECL|method|getRejectState ()
specifier|public
name|RejectState
name|getRejectState
parameter_list|()
block|{
return|return
name|rejectState
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|new
name|StringBuffer
argument_list|()
operator|.
name|append
argument_list|(
literal|"xid:"
argument_list|)
operator|.
name|append
argument_list|(
name|xid
argument_list|)
operator|.
name|append
argument_list|(
literal|",messageType:"
argument_list|)
operator|.
name|append
argument_list|(
name|messageType
argument_list|)
operator|.
name|append
argument_list|(
literal|"rejectState:"
argument_list|)
operator|.
name|append
argument_list|(
name|rejectState
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|voidReply (XDR xdr, int xid, ReplyState msgAccepted, RejectState rejectState)
specifier|public
specifier|static
name|XDR
name|voidReply
parameter_list|(
name|XDR
name|xdr
parameter_list|,
name|int
name|xid
parameter_list|,
name|ReplyState
name|msgAccepted
parameter_list|,
name|RejectState
name|rejectState
parameter_list|)
block|{
name|xdr
operator|.
name|writeInt
argument_list|(
name|xid
argument_list|)
expr_stmt|;
name|xdr
operator|.
name|writeInt
argument_list|(
name|RpcMessage
operator|.
name|Type
operator|.
name|RPC_REPLY
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|xdr
operator|.
name|writeInt
argument_list|(
name|msgAccepted
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|xdr
operator|.
name|writeInt
argument_list|(
name|AuthFlavor
operator|.
name|AUTH_NONE
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|xdr
operator|.
name|writeVariableOpaque
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|xdr
operator|.
name|writeInt
argument_list|(
name|rejectState
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|xdr
return|;
block|}
block|}
end_class

end_unit

