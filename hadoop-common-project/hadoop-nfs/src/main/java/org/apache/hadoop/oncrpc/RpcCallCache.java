begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.oncrpc
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * This class is used for handling the duplicate<em>non-idempotenty</em> Rpc  * calls. A non-idempotent request is processed as follows:  *<ul>  *<li>If the request is being processed for the first time, its state is  * in-progress in cache.</li>  *<li>If the request is retransimitted and is in-progress state, it is ignored.  *</li>  *<li>If the request is retransimitted and is completed, the previous response  * from the cache is sent back to the client.</li>  *</ul>  *<br>  * A request is identified by the client ID (address of the client) and  * transaction ID (xid) from the Rpc call.  *   */
end_comment

begin_class
DECL|class|RpcCallCache
specifier|public
class|class
name|RpcCallCache
block|{
DECL|class|CacheEntry
specifier|public
specifier|static
class|class
name|CacheEntry
block|{
DECL|field|response
specifier|private
name|RpcResponse
name|response
decl_stmt|;
comment|// null if no response has been sent
DECL|method|CacheEntry ()
specifier|public
name|CacheEntry
parameter_list|()
block|{
name|response
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|isInProgress ()
specifier|public
name|boolean
name|isInProgress
parameter_list|()
block|{
return|return
name|response
operator|==
literal|null
return|;
block|}
DECL|method|isCompleted ()
specifier|public
name|boolean
name|isCompleted
parameter_list|()
block|{
return|return
name|response
operator|!=
literal|null
return|;
block|}
DECL|method|getResponse ()
specifier|public
name|RpcResponse
name|getResponse
parameter_list|()
block|{
return|return
name|response
return|;
block|}
DECL|method|setResponse (RpcResponse response)
specifier|public
name|void
name|setResponse
parameter_list|(
name|RpcResponse
name|response
parameter_list|)
block|{
name|this
operator|.
name|response
operator|=
name|response
expr_stmt|;
block|}
block|}
comment|/**    * Call that is used to track a client in the {@link RpcCallCache}    */
DECL|class|ClientRequest
specifier|public
specifier|static
class|class
name|ClientRequest
block|{
DECL|field|clientId
specifier|protected
specifier|final
name|InetAddress
name|clientId
decl_stmt|;
DECL|field|xid
specifier|protected
specifier|final
name|int
name|xid
decl_stmt|;
DECL|method|getClientId ()
specifier|public
name|InetAddress
name|getClientId
parameter_list|()
block|{
return|return
name|clientId
return|;
block|}
DECL|method|ClientRequest (InetAddress clientId, int xid)
specifier|public
name|ClientRequest
parameter_list|(
name|InetAddress
name|clientId
parameter_list|,
name|int
name|xid
parameter_list|)
block|{
name|this
operator|.
name|clientId
operator|=
name|clientId
expr_stmt|;
name|this
operator|.
name|xid
operator|=
name|xid
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|xid
operator|+
name|clientId
operator|.
name|hashCode
argument_list|()
operator|*
literal|31
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
operator|||
operator|!
operator|(
name|obj
operator|instanceof
name|ClientRequest
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ClientRequest
name|other
init|=
operator|(
name|ClientRequest
operator|)
name|obj
decl_stmt|;
return|return
name|clientId
operator|.
name|equals
argument_list|(
name|other
operator|.
name|clientId
argument_list|)
operator|&&
operator|(
name|xid
operator|==
name|other
operator|.
name|xid
operator|)
return|;
block|}
block|}
DECL|field|program
specifier|private
specifier|final
name|String
name|program
decl_stmt|;
DECL|field|map
specifier|private
specifier|final
name|Map
argument_list|<
name|ClientRequest
argument_list|,
name|CacheEntry
argument_list|>
name|map
decl_stmt|;
DECL|method|RpcCallCache (final String program, final int maxEntries)
specifier|public
name|RpcCallCache
parameter_list|(
specifier|final
name|String
name|program
parameter_list|,
specifier|final
name|int
name|maxEntries
parameter_list|)
block|{
if|if
condition|(
name|maxEntries
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cache size is "
operator|+
name|maxEntries
operator|+
literal|". Should be> 0"
argument_list|)
throw|;
block|}
name|this
operator|.
name|program
operator|=
name|program
expr_stmt|;
name|map
operator|=
operator|new
name|LinkedHashMap
argument_list|<
name|ClientRequest
argument_list|,
name|CacheEntry
argument_list|>
argument_list|()
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|boolean
name|removeEldestEntry
parameter_list|(
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
argument_list|<
name|ClientRequest
argument_list|,
name|CacheEntry
argument_list|>
name|eldest
parameter_list|)
block|{
return|return
name|RpcCallCache
operator|.
name|this
operator|.
name|size
argument_list|()
operator|>
name|maxEntries
return|;
block|}
block|}
expr_stmt|;
block|}
comment|/**    * Return the program name.    * @return RPC program name    */
DECL|method|getProgram ()
specifier|public
name|String
name|getProgram
parameter_list|()
block|{
return|return
name|program
return|;
block|}
comment|/**    * Mark a request as completed and add corresponding response to the cache.    * @param clientId client IP address    * @param xid transaction id    * @param response RPC response    */
DECL|method|callCompleted (InetAddress clientId, int xid, RpcResponse response)
specifier|public
name|void
name|callCompleted
parameter_list|(
name|InetAddress
name|clientId
parameter_list|,
name|int
name|xid
parameter_list|,
name|RpcResponse
name|response
parameter_list|)
block|{
name|ClientRequest
name|req
init|=
operator|new
name|ClientRequest
argument_list|(
name|clientId
argument_list|,
name|xid
argument_list|)
decl_stmt|;
name|CacheEntry
name|e
decl_stmt|;
synchronized|synchronized
init|(
name|map
init|)
block|{
name|e
operator|=
name|map
operator|.
name|get
argument_list|(
name|req
argument_list|)
expr_stmt|;
block|}
name|e
operator|.
name|response
operator|=
name|response
expr_stmt|;
block|}
comment|/**    * Check the cache for an entry. If it does not exist, add the request    * as in progress.    * @param clientId client IP address    * @param xid transaction id    * @return cached entry    */
DECL|method|checkOrAddToCache (InetAddress clientId, int xid)
specifier|public
name|CacheEntry
name|checkOrAddToCache
parameter_list|(
name|InetAddress
name|clientId
parameter_list|,
name|int
name|xid
parameter_list|)
block|{
name|ClientRequest
name|req
init|=
operator|new
name|ClientRequest
argument_list|(
name|clientId
argument_list|,
name|xid
argument_list|)
decl_stmt|;
name|CacheEntry
name|e
decl_stmt|;
synchronized|synchronized
init|(
name|map
init|)
block|{
name|e
operator|=
name|map
operator|.
name|get
argument_list|(
name|req
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|==
literal|null
condition|)
block|{
comment|// Add an inprogress cache entry
name|map
operator|.
name|put
argument_list|(
name|req
argument_list|,
operator|new
name|CacheEntry
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|e
return|;
block|}
comment|/**    * Return number of cached entries.    * @return cache size    */
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|map
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**     * Iterator to the cache entries.    * @return iterator cache iterator    */
annotation|@
name|VisibleForTesting
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|ClientRequest
argument_list|,
name|CacheEntry
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|map
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
end_class

end_unit

