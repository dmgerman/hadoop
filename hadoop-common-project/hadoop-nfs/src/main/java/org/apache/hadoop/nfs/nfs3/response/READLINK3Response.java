begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.nfs.nfs3.response
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|response
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|Nfs3FileAttributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|Nfs3Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
operator|.
name|XDR
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
operator|.
name|security
operator|.
name|Verifier
import|;
end_import

begin_comment
comment|/**  * READLINK3 Response  */
end_comment

begin_class
DECL|class|READLINK3Response
specifier|public
class|class
name|READLINK3Response
extends|extends
name|NFS3Response
block|{
DECL|field|postOpSymlinkAttr
specifier|private
specifier|final
name|Nfs3FileAttributes
name|postOpSymlinkAttr
decl_stmt|;
DECL|field|path
specifier|private
specifier|final
name|byte
name|path
index|[]
decl_stmt|;
DECL|method|READLINK3Response (int status)
specifier|public
name|READLINK3Response
parameter_list|(
name|int
name|status
parameter_list|)
block|{
name|this
argument_list|(
name|status
argument_list|,
operator|new
name|Nfs3FileAttributes
argument_list|()
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|READLINK3Response (int status, Nfs3FileAttributes postOpAttr, byte path[])
specifier|public
name|READLINK3Response
parameter_list|(
name|int
name|status
parameter_list|,
name|Nfs3FileAttributes
name|postOpAttr
parameter_list|,
name|byte
name|path
index|[]
parameter_list|)
block|{
name|super
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|this
operator|.
name|postOpSymlinkAttr
operator|=
name|postOpAttr
expr_stmt|;
name|this
operator|.
name|path
operator|=
operator|new
name|byte
index|[
name|path
operator|.
name|length
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|path
argument_list|,
literal|0
argument_list|,
name|this
operator|.
name|path
argument_list|,
literal|0
argument_list|,
name|path
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeHeaderAndResponse (XDR out, int xid, Verifier verifier)
specifier|public
name|XDR
name|writeHeaderAndResponse
parameter_list|(
name|XDR
name|out
parameter_list|,
name|int
name|xid
parameter_list|,
name|Verifier
name|verifier
parameter_list|)
block|{
name|super
operator|.
name|writeHeaderAndResponse
argument_list|(
name|out
argument_list|,
name|xid
argument_list|,
name|verifier
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Attribute follows
name|postOpSymlinkAttr
operator|.
name|serialize
argument_list|(
name|out
argument_list|)
expr_stmt|;
if|if
condition|(
name|getStatus
argument_list|()
operator|==
name|Nfs3Status
operator|.
name|NFS3_OK
condition|)
block|{
name|out
operator|.
name|writeVariableOpaque
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
return|return
name|out
return|;
block|}
block|}
end_class

end_unit

