begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.portmap
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|portmap
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
operator|.
name|RpcProgram
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
operator|.
name|RpcUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|bootstrap
operator|.
name|ConnectionlessBootstrap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|bootstrap
operator|.
name|ServerBootstrap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelPipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelPipelineFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|Channels
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|group
operator|.
name|ChannelGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|group
operator|.
name|DefaultChannelGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|nio
operator|.
name|NioDatagramChannelFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|nio
operator|.
name|NioServerSocketChannelFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|timeout
operator|.
name|IdleStateHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|util
operator|.
name|HashedWheelTimer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Portmap service for binding RPC protocols. See RFC 1833 for details.  */
end_comment

begin_class
DECL|class|Portmap
specifier|final
class|class
name|Portmap
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Portmap
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|DEFAULT_IDLE_TIME_MILLISECONDS
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_IDLE_TIME_MILLISECONDS
init|=
literal|5000
decl_stmt|;
DECL|field|udpServer
specifier|private
name|ConnectionlessBootstrap
name|udpServer
decl_stmt|;
DECL|field|tcpServer
specifier|private
name|ServerBootstrap
name|tcpServer
decl_stmt|;
DECL|field|allChannels
specifier|private
name|ChannelGroup
name|allChannels
init|=
operator|new
name|DefaultChannelGroup
argument_list|()
decl_stmt|;
DECL|field|udpChannel
specifier|private
name|Channel
name|udpChannel
decl_stmt|;
DECL|field|tcpChannel
specifier|private
name|Channel
name|tcpChannel
decl_stmt|;
DECL|field|handler
specifier|private
specifier|final
name|RpcProgramPortmap
name|handler
init|=
operator|new
name|RpcProgramPortmap
argument_list|(
name|allChannels
argument_list|)
decl_stmt|;
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|StringUtils
operator|.
name|startupShutdownMessage
argument_list|(
name|Portmap
operator|.
name|class
argument_list|,
name|args
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
specifier|final
name|int
name|port
init|=
name|RpcProgram
operator|.
name|RPCB_PORT
decl_stmt|;
name|Portmap
name|pm
init|=
operator|new
name|Portmap
argument_list|()
decl_stmt|;
try|try
block|{
name|pm
operator|.
name|start
argument_list|(
name|DEFAULT_IDLE_TIME_MILLISECONDS
argument_list|,
operator|new
name|InetSocketAddress
argument_list|(
name|port
argument_list|)
argument_list|,
operator|new
name|InetSocketAddress
argument_list|(
name|port
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to start the server. Cause:"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|pm
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|shutdown ()
name|void
name|shutdown
parameter_list|()
block|{
name|allChannels
operator|.
name|close
argument_list|()
operator|.
name|awaitUninterruptibly
argument_list|()
expr_stmt|;
name|tcpServer
operator|.
name|releaseExternalResources
argument_list|()
expr_stmt|;
name|udpServer
operator|.
name|releaseExternalResources
argument_list|()
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getTcpServerLocalAddress ()
name|SocketAddress
name|getTcpServerLocalAddress
parameter_list|()
block|{
return|return
name|tcpChannel
operator|.
name|getLocalAddress
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getUdpServerLoAddress ()
name|SocketAddress
name|getUdpServerLoAddress
parameter_list|()
block|{
return|return
name|udpChannel
operator|.
name|getLocalAddress
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getHandler ()
name|RpcProgramPortmap
name|getHandler
parameter_list|()
block|{
return|return
name|handler
return|;
block|}
DECL|method|start (final int idleTimeMilliSeconds, final SocketAddress tcpAddress, final SocketAddress udpAddress)
name|void
name|start
parameter_list|(
specifier|final
name|int
name|idleTimeMilliSeconds
parameter_list|,
specifier|final
name|SocketAddress
name|tcpAddress
parameter_list|,
specifier|final
name|SocketAddress
name|udpAddress
parameter_list|)
block|{
name|tcpServer
operator|=
operator|new
name|ServerBootstrap
argument_list|(
operator|new
name|NioServerSocketChannelFactory
argument_list|(
name|Executors
operator|.
name|newCachedThreadPool
argument_list|()
argument_list|,
name|Executors
operator|.
name|newCachedThreadPool
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tcpServer
operator|.
name|setPipelineFactory
argument_list|(
operator|new
name|ChannelPipelineFactory
argument_list|()
block|{
specifier|private
specifier|final
name|HashedWheelTimer
name|timer
init|=
operator|new
name|HashedWheelTimer
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|IdleStateHandler
name|idleStateHandler
init|=
operator|new
name|IdleStateHandler
argument_list|(
name|timer
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|idleTimeMilliSeconds
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ChannelPipeline
name|getPipeline
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|Channels
operator|.
name|pipeline
argument_list|(
name|RpcUtil
operator|.
name|constructRpcFrameDecoder
argument_list|()
argument_list|,
name|RpcUtil
operator|.
name|STAGE_RPC_MESSAGE_PARSER
argument_list|,
name|idleStateHandler
argument_list|,
name|handler
argument_list|,
name|RpcUtil
operator|.
name|STAGE_RPC_TCP_RESPONSE
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|tcpServer
operator|.
name|setOption
argument_list|(
literal|"reuseAddress"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tcpServer
operator|.
name|setOption
argument_list|(
literal|"child.reuseAddress"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|udpServer
operator|=
operator|new
name|ConnectionlessBootstrap
argument_list|(
operator|new
name|NioDatagramChannelFactory
argument_list|(
name|Executors
operator|.
name|newCachedThreadPool
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|udpServer
operator|.
name|setPipeline
argument_list|(
name|Channels
operator|.
name|pipeline
argument_list|(
name|RpcUtil
operator|.
name|STAGE_RPC_MESSAGE_PARSER
argument_list|,
name|handler
argument_list|,
name|RpcUtil
operator|.
name|STAGE_RPC_UDP_RESPONSE
argument_list|)
argument_list|)
expr_stmt|;
name|udpServer
operator|.
name|setOption
argument_list|(
literal|"reuseAddress"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tcpChannel
operator|=
name|tcpServer
operator|.
name|bind
argument_list|(
name|tcpAddress
argument_list|)
expr_stmt|;
name|udpChannel
operator|=
name|udpServer
operator|.
name|bind
argument_list|(
name|udpAddress
argument_list|)
expr_stmt|;
name|allChannels
operator|.
name|add
argument_list|(
name|tcpChannel
argument_list|)
expr_stmt|;
name|allChannels
operator|.
name|add
argument_list|(
name|udpChannel
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Portmap server started at tcp://"
operator|+
name|tcpChannel
operator|.
name|getLocalAddress
argument_list|()
operator|+
literal|", udp://"
operator|+
name|udpChannel
operator|.
name|getLocalAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

