begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.oncrpc
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|bootstrap
operator|.
name|ServerBootstrap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelPipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelPipelineFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|Channels
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|nio
operator|.
name|NioServerSocketChannelFactory
import|;
end_import

begin_comment
comment|/**  * Simple UDP server implemented using netty.  */
end_comment

begin_class
DECL|class|SimpleTcpServer
specifier|public
class|class
name|SimpleTcpServer
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SimpleTcpServer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|port
specifier|protected
specifier|final
name|int
name|port
decl_stmt|;
DECL|field|pipelineFactory
specifier|protected
specifier|final
name|ChannelPipelineFactory
name|pipelineFactory
decl_stmt|;
DECL|field|rpcProgram
specifier|protected
specifier|final
name|RpcProgram
name|rpcProgram
decl_stmt|;
comment|/** The maximum number of I/O worker threads */
DECL|field|workerCount
specifier|protected
specifier|final
name|int
name|workerCount
decl_stmt|;
comment|/**    * @param port TCP port where to start the server at    * @param program RPC program corresponding to the server    * @param workercount Number of worker threads    */
DECL|method|SimpleTcpServer (int port, RpcProgram program, int workercount)
specifier|public
name|SimpleTcpServer
parameter_list|(
name|int
name|port
parameter_list|,
name|RpcProgram
name|program
parameter_list|,
name|int
name|workercount
parameter_list|)
block|{
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
name|this
operator|.
name|rpcProgram
operator|=
name|program
expr_stmt|;
name|this
operator|.
name|workerCount
operator|=
name|workercount
expr_stmt|;
name|this
operator|.
name|pipelineFactory
operator|=
name|getPipelineFactory
argument_list|()
expr_stmt|;
block|}
DECL|method|getPipelineFactory ()
specifier|public
name|ChannelPipelineFactory
name|getPipelineFactory
parameter_list|()
block|{
return|return
operator|new
name|ChannelPipelineFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ChannelPipeline
name|getPipeline
parameter_list|()
block|{
return|return
name|Channels
operator|.
name|pipeline
argument_list|(
name|RpcUtil
operator|.
name|constructRpcFrameDecoder
argument_list|()
argument_list|,
operator|new
name|SimpleTcpServerHandler
argument_list|(
name|rpcProgram
argument_list|)
argument_list|)
return|;
block|}
block|}
return|;
block|}
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// Configure the Server.
name|ChannelFactory
name|factory
decl_stmt|;
if|if
condition|(
name|workerCount
operator|==
literal|0
condition|)
block|{
comment|// Use default workers: 2 * the number of available processors
name|factory
operator|=
operator|new
name|NioServerSocketChannelFactory
argument_list|(
name|Executors
operator|.
name|newCachedThreadPool
argument_list|()
argument_list|,
name|Executors
operator|.
name|newCachedThreadPool
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|factory
operator|=
operator|new
name|NioServerSocketChannelFactory
argument_list|(
name|Executors
operator|.
name|newCachedThreadPool
argument_list|()
argument_list|,
name|Executors
operator|.
name|newCachedThreadPool
argument_list|()
argument_list|,
name|workerCount
argument_list|)
expr_stmt|;
block|}
name|ServerBootstrap
name|bootstrap
init|=
operator|new
name|ServerBootstrap
argument_list|(
name|factory
argument_list|)
decl_stmt|;
name|bootstrap
operator|.
name|setPipelineFactory
argument_list|(
name|pipelineFactory
argument_list|)
expr_stmt|;
name|bootstrap
operator|.
name|setOption
argument_list|(
literal|"child.tcpNoDelay"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|bootstrap
operator|.
name|setOption
argument_list|(
literal|"child.keepAlive"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Listen to TCP port
name|bootstrap
operator|.
name|bind
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|port
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Started listening to TCP requests at port "
operator|+
name|port
operator|+
literal|" for "
operator|+
name|rpcProgram
operator|+
literal|" with workerCount "
operator|+
name|workerCount
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

