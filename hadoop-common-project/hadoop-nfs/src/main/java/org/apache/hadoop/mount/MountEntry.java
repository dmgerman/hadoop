begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mount
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mount
package|;
end_package

begin_comment
comment|/**  * Represents a mount entry.  */
end_comment

begin_class
DECL|class|MountEntry
specifier|public
class|class
name|MountEntry
block|{
comment|/** Host corresponding to the mount entry */
DECL|field|host
specifier|private
specifier|final
name|String
name|host
decl_stmt|;
comment|/** Path corresponding to the mount entry */
DECL|field|path
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
DECL|method|MountEntry (String host, String path)
specifier|public
name|MountEntry
parameter_list|(
name|String
name|host
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|host
operator|=
name|host
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
block|}
DECL|method|getHost ()
specifier|public
name|String
name|getHost
parameter_list|()
block|{
return|return
name|this
operator|.
name|host
return|;
block|}
DECL|method|getPath ()
specifier|public
name|String
name|getPath
parameter_list|()
block|{
return|return
name|this
operator|.
name|path
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|MountEntry
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|MountEntry
name|m
init|=
operator|(
name|MountEntry
operator|)
name|o
decl_stmt|;
return|return
name|getHost
argument_list|()
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getHost
argument_list|()
argument_list|)
operator|&&
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getPath
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|host
operator|.
name|hashCode
argument_list|()
operator|*
literal|31
operator|+
name|path
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
end_class

end_unit

