begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.oncrpc
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
operator|.
name|RpcAcceptedReply
operator|.
name|AcceptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ChannelBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandlerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|MessageEvent
import|;
end_import

begin_comment
comment|/**  * A simple client that registers an RPC program with portmap.  */
end_comment

begin_class
DECL|class|RegistrationClient
specifier|public
class|class
name|RegistrationClient
extends|extends
name|SimpleTcpClient
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RegistrationClient
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|RegistrationClient (String host, int port, XDR request)
specifier|public
name|RegistrationClient
parameter_list|(
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|,
name|XDR
name|request
parameter_list|)
block|{
name|super
argument_list|(
name|host
argument_list|,
name|port
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
comment|/**    * Handler to handle response from the server.    */
DECL|class|RegistrationClientHandler
specifier|static
class|class
name|RegistrationClientHandler
extends|extends
name|SimpleTcpClientHandler
block|{
DECL|method|RegistrationClientHandler (XDR request)
specifier|public
name|RegistrationClientHandler
parameter_list|(
name|XDR
name|request
parameter_list|)
block|{
name|super
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
DECL|method|validMessageLength (int len)
specifier|private
name|boolean
name|validMessageLength
parameter_list|(
name|int
name|len
parameter_list|)
block|{
comment|// 28 bytes is the minimal success response size (portmapV2)
if|if
condition|(
name|len
operator|<
literal|28
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Portmap mapping registration failed,"
operator|+
literal|" the response size is less than 28 bytes:"
operator|+
name|len
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|messageReceived (ChannelHandlerContext ctx, MessageEvent e)
specifier|public
name|void
name|messageReceived
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|MessageEvent
name|e
parameter_list|)
block|{
name|ChannelBuffer
name|buf
init|=
operator|(
name|ChannelBuffer
operator|)
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
comment|// Read reply
if|if
condition|(
operator|!
name|validMessageLength
argument_list|(
name|buf
operator|.
name|readableBytes
argument_list|()
argument_list|)
condition|)
block|{
name|e
operator|.
name|getChannel
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
return|return;
block|}
comment|// handling fragment header for TCP, 4 bytes.
name|byte
index|[]
name|fragmentHeader
init|=
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|buf
operator|.
name|array
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|int
name|fragmentSize
init|=
name|XDR
operator|.
name|fragmentSize
argument_list|(
name|fragmentHeader
argument_list|)
decl_stmt|;
name|boolean
name|isLast
init|=
name|XDR
operator|.
name|isLastFragment
argument_list|(
name|fragmentHeader
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|fragmentSize
operator|==
literal|28
operator|&&
name|isLast
operator|==
literal|true
operator|)
assert|;
name|XDR
name|xdr
init|=
operator|new
name|XDR
argument_list|()
decl_stmt|;
name|xdr
operator|.
name|writeFixedOpaque
argument_list|(
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|buf
operator|.
name|array
argument_list|()
argument_list|,
literal|4
argument_list|,
name|buf
operator|.
name|readableBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|RpcReply
name|reply
init|=
name|RpcReply
operator|.
name|read
argument_list|(
name|xdr
argument_list|)
decl_stmt|;
if|if
condition|(
name|reply
operator|.
name|getState
argument_list|()
operator|==
name|RpcReply
operator|.
name|ReplyState
operator|.
name|MSG_ACCEPTED
condition|)
block|{
name|RpcAcceptedReply
name|acceptedReply
init|=
operator|(
name|RpcAcceptedReply
operator|)
name|reply
decl_stmt|;
name|handle
argument_list|(
name|acceptedReply
argument_list|,
name|xdr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|RpcDeniedReply
name|deniedReply
init|=
operator|(
name|RpcDeniedReply
operator|)
name|reply
decl_stmt|;
name|handle
argument_list|(
name|deniedReply
argument_list|)
expr_stmt|;
block|}
name|e
operator|.
name|getChannel
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// shutdown now that request is complete
block|}
DECL|method|handle (RpcDeniedReply deniedReply)
specifier|private
name|void
name|handle
parameter_list|(
name|RpcDeniedReply
name|deniedReply
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Portmap mapping registration request was denied , "
operator|+
name|deniedReply
argument_list|)
expr_stmt|;
block|}
DECL|method|handle (RpcAcceptedReply acceptedReply, XDR xdr)
specifier|private
name|void
name|handle
parameter_list|(
name|RpcAcceptedReply
name|acceptedReply
parameter_list|,
name|XDR
name|xdr
parameter_list|)
block|{
name|AcceptState
name|acceptState
init|=
name|acceptedReply
operator|.
name|getAcceptState
argument_list|()
decl_stmt|;
assert|assert
operator|(
name|acceptState
operator|==
name|AcceptState
operator|.
name|SUCCESS
operator|)
assert|;
name|boolean
name|answer
init|=
name|xdr
operator|.
name|readBoolean
argument_list|()
decl_stmt|;
if|if
condition|(
name|answer
operator|!=
literal|true
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Portmap mapping registration failed, accept state:"
operator|+
name|acceptState
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Portmap mapping registration succeeded"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

