begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.oncrpc
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ChannelBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ChannelBuffers
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * Utility class for building XDR messages based on RFC 4506.  *  * Key points of the format:  *  *<ul>  *<li>Primitives are stored in big-endian order (i.e., the default byte order  * of ByteBuffer).</li>  *<li>Booleans are stored as an integer.</li>  *<li>Each field in the message is always aligned by 4.</li>  *</ul>  *  */
end_comment

begin_class
DECL|class|XDR
specifier|public
specifier|final
class|class
name|XDR
block|{
DECL|field|DEFAULT_INITIAL_CAPACITY
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_INITIAL_CAPACITY
init|=
literal|256
decl_stmt|;
DECL|field|SIZEOF_INT
specifier|private
specifier|static
specifier|final
name|int
name|SIZEOF_INT
init|=
literal|4
decl_stmt|;
DECL|field|SIZEOF_LONG
specifier|private
specifier|static
specifier|final
name|int
name|SIZEOF_LONG
init|=
literal|8
decl_stmt|;
DECL|field|PADDING_BYTES
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|PADDING_BYTES
init|=
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
DECL|field|buf
specifier|private
name|ByteBuffer
name|buf
decl_stmt|;
DECL|enum|State
specifier|public
enum|enum
name|State
block|{
DECL|enumConstant|READING
DECL|enumConstant|WRITING
name|READING
block|,
name|WRITING
block|,   }
DECL|field|state
specifier|private
specifier|final
name|State
name|state
decl_stmt|;
comment|/**    * Construct a new XDR message buffer.    *    * @param initialCapacity    *          the initial capacity of the buffer.    */
DECL|method|XDR (int initialCapacity)
specifier|public
name|XDR
parameter_list|(
name|int
name|initialCapacity
parameter_list|)
block|{
name|this
argument_list|(
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|initialCapacity
argument_list|)
argument_list|,
name|State
operator|.
name|WRITING
argument_list|)
expr_stmt|;
block|}
DECL|method|XDR ()
specifier|public
name|XDR
parameter_list|()
block|{
name|this
argument_list|(
name|DEFAULT_INITIAL_CAPACITY
argument_list|)
expr_stmt|;
block|}
DECL|method|XDR (ByteBuffer buf, State state)
specifier|public
name|XDR
parameter_list|(
name|ByteBuffer
name|buf
parameter_list|,
name|State
name|state
parameter_list|)
block|{
name|this
operator|.
name|buf
operator|=
name|buf
expr_stmt|;
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
block|}
comment|/**    * Wraps a byte array as a read-only XDR message. There's no copy involved,    * thus it is the client's responsibility to ensure that the byte array    * remains unmodified when using the XDR object.    *     * @param src    *          the byte array to be wrapped.    */
DECL|method|XDR (byte[] src)
specifier|public
name|XDR
parameter_list|(
name|byte
index|[]
name|src
parameter_list|)
block|{
name|this
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|src
argument_list|)
operator|.
name|asReadOnlyBuffer
argument_list|()
argument_list|,
name|State
operator|.
name|READING
argument_list|)
expr_stmt|;
block|}
DECL|method|asReadOnlyWrap ()
specifier|public
name|XDR
name|asReadOnlyWrap
parameter_list|()
block|{
name|ByteBuffer
name|b
init|=
name|buf
operator|.
name|asReadOnlyBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|state
operator|==
name|State
operator|.
name|WRITING
condition|)
block|{
name|b
operator|.
name|flip
argument_list|()
expr_stmt|;
block|}
name|XDR
name|n
init|=
operator|new
name|XDR
argument_list|(
name|b
argument_list|,
name|State
operator|.
name|READING
argument_list|)
decl_stmt|;
return|return
name|n
return|;
block|}
DECL|method|buffer ()
specifier|public
name|ByteBuffer
name|buffer
parameter_list|()
block|{
return|return
name|buf
operator|.
name|duplicate
argument_list|()
return|;
block|}
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
comment|// TODO: This overloading intends to be compatible with the semantics of
comment|// the previous version of the class. This function should be separated into
comment|// two with clear semantics.
return|return
name|state
operator|==
name|State
operator|.
name|READING
condition|?
name|buf
operator|.
name|limit
argument_list|()
else|:
name|buf
operator|.
name|position
argument_list|()
return|;
block|}
DECL|method|readInt ()
specifier|public
name|int
name|readInt
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|state
operator|==
name|State
operator|.
name|READING
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|getInt
argument_list|()
return|;
block|}
DECL|method|writeInt (int v)
specifier|public
name|void
name|writeInt
parameter_list|(
name|int
name|v
parameter_list|)
block|{
name|ensureFreeSpace
argument_list|(
name|SIZEOF_INT
argument_list|)
expr_stmt|;
name|buf
operator|.
name|putInt
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
DECL|method|readBoolean ()
specifier|public
name|boolean
name|readBoolean
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|state
operator|==
name|State
operator|.
name|READING
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|getInt
argument_list|()
operator|!=
literal|0
return|;
block|}
DECL|method|writeBoolean (boolean v)
specifier|public
name|void
name|writeBoolean
parameter_list|(
name|boolean
name|v
parameter_list|)
block|{
name|ensureFreeSpace
argument_list|(
name|SIZEOF_INT
argument_list|)
expr_stmt|;
name|buf
operator|.
name|putInt
argument_list|(
name|v
condition|?
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|readHyper ()
specifier|public
name|long
name|readHyper
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|state
operator|==
name|State
operator|.
name|READING
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|getLong
argument_list|()
return|;
block|}
DECL|method|writeLongAsHyper (long v)
specifier|public
name|void
name|writeLongAsHyper
parameter_list|(
name|long
name|v
parameter_list|)
block|{
name|ensureFreeSpace
argument_list|(
name|SIZEOF_LONG
argument_list|)
expr_stmt|;
name|buf
operator|.
name|putLong
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
DECL|method|readFixedOpaque (int size)
specifier|public
name|byte
index|[]
name|readFixedOpaque
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|state
operator|==
name|State
operator|.
name|READING
argument_list|)
expr_stmt|;
name|byte
index|[]
name|r
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
name|buf
operator|.
name|get
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|alignPosition
argument_list|()
expr_stmt|;
return|return
name|r
return|;
block|}
DECL|method|writeFixedOpaque (byte[] src, int length)
specifier|public
name|void
name|writeFixedOpaque
parameter_list|(
name|byte
index|[]
name|src
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|ensureFreeSpace
argument_list|(
name|alignUp
argument_list|(
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|buf
operator|.
name|put
argument_list|(
name|src
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|writePadding
argument_list|()
expr_stmt|;
block|}
DECL|method|writeFixedOpaque (byte[] src)
specifier|public
name|void
name|writeFixedOpaque
parameter_list|(
name|byte
index|[]
name|src
parameter_list|)
block|{
name|writeFixedOpaque
argument_list|(
name|src
argument_list|,
name|src
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|readVariableOpaque ()
specifier|public
name|byte
index|[]
name|readVariableOpaque
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|state
operator|==
name|State
operator|.
name|READING
argument_list|)
expr_stmt|;
name|int
name|size
init|=
name|readInt
argument_list|()
decl_stmt|;
return|return
name|readFixedOpaque
argument_list|(
name|size
argument_list|)
return|;
block|}
DECL|method|writeVariableOpaque (byte[] src)
specifier|public
name|void
name|writeVariableOpaque
parameter_list|(
name|byte
index|[]
name|src
parameter_list|)
block|{
name|ensureFreeSpace
argument_list|(
name|SIZEOF_INT
operator|+
name|alignUp
argument_list|(
name|src
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|buf
operator|.
name|putInt
argument_list|(
name|src
operator|.
name|length
argument_list|)
expr_stmt|;
name|writeFixedOpaque
argument_list|(
name|src
argument_list|)
expr_stmt|;
block|}
DECL|method|readString ()
specifier|public
name|String
name|readString
parameter_list|()
block|{
return|return
operator|new
name|String
argument_list|(
name|readVariableOpaque
argument_list|()
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
return|;
block|}
DECL|method|writeString (String s)
specifier|public
name|void
name|writeString
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|writeVariableOpaque
argument_list|(
name|s
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|writePadding ()
specifier|private
name|void
name|writePadding
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|state
operator|==
name|State
operator|.
name|WRITING
argument_list|)
expr_stmt|;
name|int
name|p
init|=
name|pad
argument_list|(
name|buf
operator|.
name|position
argument_list|()
argument_list|)
decl_stmt|;
name|ensureFreeSpace
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|buf
operator|.
name|put
argument_list|(
name|PADDING_BYTES
argument_list|,
literal|0
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
DECL|method|alignUp (int length)
specifier|private
name|int
name|alignUp
parameter_list|(
name|int
name|length
parameter_list|)
block|{
return|return
name|length
operator|+
name|pad
argument_list|(
name|length
argument_list|)
return|;
block|}
DECL|method|pad (int length)
specifier|private
name|int
name|pad
parameter_list|(
name|int
name|length
parameter_list|)
block|{
switch|switch
condition|(
name|length
operator|%
literal|4
condition|)
block|{
case|case
literal|1
case|:
return|return
literal|3
return|;
case|case
literal|2
case|:
return|return
literal|2
return|;
case|case
literal|3
case|:
return|return
literal|1
return|;
default|default:
return|return
literal|0
return|;
block|}
block|}
DECL|method|alignPosition ()
specifier|private
name|void
name|alignPosition
parameter_list|()
block|{
name|buf
operator|.
name|position
argument_list|(
name|alignUp
argument_list|(
name|buf
operator|.
name|position
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|ensureFreeSpace (int size)
specifier|private
name|void
name|ensureFreeSpace
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|state
operator|==
name|State
operator|.
name|WRITING
argument_list|)
expr_stmt|;
if|if
condition|(
name|buf
operator|.
name|remaining
argument_list|()
operator|<
name|size
condition|)
block|{
name|int
name|newCapacity
init|=
name|buf
operator|.
name|capacity
argument_list|()
operator|*
literal|2
decl_stmt|;
name|int
name|newRemaining
init|=
name|buf
operator|.
name|capacity
argument_list|()
operator|+
name|buf
operator|.
name|remaining
argument_list|()
decl_stmt|;
while|while
condition|(
name|newRemaining
operator|<
name|size
condition|)
block|{
name|newRemaining
operator|+=
name|newCapacity
expr_stmt|;
name|newCapacity
operator|*=
literal|2
expr_stmt|;
block|}
name|ByteBuffer
name|newbuf
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|newCapacity
argument_list|)
decl_stmt|;
name|buf
operator|.
name|flip
argument_list|()
expr_stmt|;
name|newbuf
operator|.
name|put
argument_list|(
name|buf
argument_list|)
expr_stmt|;
name|buf
operator|=
name|newbuf
expr_stmt|;
block|}
block|}
comment|/** check if the rest of data has more than len bytes */
DECL|method|verifyLength (XDR xdr, int len)
specifier|public
specifier|static
name|boolean
name|verifyLength
parameter_list|(
name|XDR
name|xdr
parameter_list|,
name|int
name|len
parameter_list|)
block|{
return|return
name|xdr
operator|.
name|buf
operator|.
name|remaining
argument_list|()
operator|>=
name|len
return|;
block|}
DECL|method|recordMark (int size, boolean last)
specifier|static
name|byte
index|[]
name|recordMark
parameter_list|(
name|int
name|size
parameter_list|,
name|boolean
name|last
parameter_list|)
block|{
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|SIZEOF_INT
index|]
decl_stmt|;
name|ByteBuffer
name|buf
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|b
argument_list|)
decl_stmt|;
name|buf
operator|.
name|putInt
argument_list|(
operator|!
name|last
condition|?
name|size
else|:
name|size
operator||
literal|0x80000000
argument_list|)
expr_stmt|;
return|return
name|b
return|;
block|}
comment|/** Write an XDR message to a TCP ChannelBuffer */
DECL|method|writeMessageTcp (XDR request, boolean last)
specifier|public
specifier|static
name|ChannelBuffer
name|writeMessageTcp
parameter_list|(
name|XDR
name|request
parameter_list|,
name|boolean
name|last
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|request
operator|.
name|state
operator|==
name|XDR
operator|.
name|State
operator|.
name|WRITING
argument_list|)
expr_stmt|;
name|ByteBuffer
name|b
init|=
name|request
operator|.
name|buf
operator|.
name|duplicate
argument_list|()
decl_stmt|;
name|b
operator|.
name|flip
argument_list|()
expr_stmt|;
name|byte
index|[]
name|fragmentHeader
init|=
name|XDR
operator|.
name|recordMark
argument_list|(
name|b
operator|.
name|limit
argument_list|()
argument_list|,
name|last
argument_list|)
decl_stmt|;
name|ByteBuffer
name|headerBuf
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|fragmentHeader
argument_list|)
decl_stmt|;
comment|// TODO: Investigate whether making a copy of the buffer is necessary.
return|return
name|ChannelBuffers
operator|.
name|copiedBuffer
argument_list|(
name|headerBuf
argument_list|,
name|b
argument_list|)
return|;
block|}
comment|/** Write an XDR message to a UDP ChannelBuffer */
DECL|method|writeMessageUdp (XDR response)
specifier|public
specifier|static
name|ChannelBuffer
name|writeMessageUdp
parameter_list|(
name|XDR
name|response
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|response
operator|.
name|state
operator|==
name|XDR
operator|.
name|State
operator|.
name|READING
argument_list|)
expr_stmt|;
comment|// TODO: Investigate whether making a copy of the buffer is necessary.
return|return
name|ChannelBuffers
operator|.
name|copiedBuffer
argument_list|(
name|response
operator|.
name|buf
argument_list|)
return|;
block|}
DECL|method|fragmentSize (byte[] mark)
specifier|public
specifier|static
name|int
name|fragmentSize
parameter_list|(
name|byte
index|[]
name|mark
parameter_list|)
block|{
name|ByteBuffer
name|b
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|mark
argument_list|)
decl_stmt|;
name|int
name|n
init|=
name|b
operator|.
name|getInt
argument_list|()
decl_stmt|;
return|return
name|n
operator|&
literal|0x7fffffff
return|;
block|}
DECL|method|isLastFragment (byte[] mark)
specifier|public
specifier|static
name|boolean
name|isLastFragment
parameter_list|(
name|byte
index|[]
name|mark
parameter_list|)
block|{
name|ByteBuffer
name|b
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|mark
argument_list|)
decl_stmt|;
name|int
name|n
init|=
name|b
operator|.
name|getInt
argument_list|()
decl_stmt|;
return|return
operator|(
name|n
operator|&
literal|0x80000000
operator|)
operator|!=
literal|0
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getBytes ()
specifier|public
name|byte
index|[]
name|getBytes
parameter_list|()
block|{
name|ByteBuffer
name|d
init|=
name|asReadOnlyWrap
argument_list|()
operator|.
name|buffer
argument_list|()
decl_stmt|;
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|d
operator|.
name|remaining
argument_list|()
index|]
decl_stmt|;
name|d
operator|.
name|get
argument_list|(
name|b
argument_list|)
expr_stmt|;
return|return
name|b
return|;
block|}
block|}
end_class

end_unit

