begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.nfs.nfs3.response
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|response
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|NfsTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
operator|.
name|XDR
import|;
end_import

begin_comment
comment|/**  * WccAttr saves attributes used for weak cache consistency  */
end_comment

begin_class
DECL|class|WccAttr
specifier|public
class|class
name|WccAttr
block|{
DECL|field|size
name|long
name|size
decl_stmt|;
DECL|field|mtime
name|NfsTime
name|mtime
decl_stmt|;
comment|// in milliseconds
DECL|field|ctime
name|NfsTime
name|ctime
decl_stmt|;
comment|// in milliseconds
DECL|method|getSize ()
specifier|public
name|long
name|getSize
parameter_list|()
block|{
return|return
name|size
return|;
block|}
DECL|method|getMtime ()
specifier|public
name|NfsTime
name|getMtime
parameter_list|()
block|{
return|return
name|mtime
return|;
block|}
DECL|method|getCtime ()
specifier|public
name|NfsTime
name|getCtime
parameter_list|()
block|{
return|return
name|ctime
return|;
block|}
DECL|method|WccAttr ()
specifier|public
name|WccAttr
parameter_list|()
block|{
name|this
operator|.
name|size
operator|=
literal|0
expr_stmt|;
name|mtime
operator|=
literal|null
expr_stmt|;
name|ctime
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|WccAttr (long size, NfsTime mtime, NfsTime ctime)
specifier|public
name|WccAttr
parameter_list|(
name|long
name|size
parameter_list|,
name|NfsTime
name|mtime
parameter_list|,
name|NfsTime
name|ctime
parameter_list|)
block|{
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
name|this
operator|.
name|mtime
operator|=
name|mtime
expr_stmt|;
name|this
operator|.
name|ctime
operator|=
name|ctime
expr_stmt|;
block|}
DECL|method|deserialize (XDR xdr)
specifier|public
specifier|static
name|WccAttr
name|deserialize
parameter_list|(
name|XDR
name|xdr
parameter_list|)
block|{
name|long
name|size
init|=
name|xdr
operator|.
name|readHyper
argument_list|()
decl_stmt|;
name|NfsTime
name|mtime
init|=
name|NfsTime
operator|.
name|deserialize
argument_list|(
name|xdr
argument_list|)
decl_stmt|;
name|NfsTime
name|ctime
init|=
name|NfsTime
operator|.
name|deserialize
argument_list|(
name|xdr
argument_list|)
decl_stmt|;
return|return
operator|new
name|WccAttr
argument_list|(
name|size
argument_list|,
name|mtime
argument_list|,
name|ctime
argument_list|)
return|;
block|}
DECL|method|serialize (XDR out)
specifier|public
name|void
name|serialize
parameter_list|(
name|XDR
name|out
parameter_list|)
block|{
name|out
operator|.
name|writeLongAsHyper
argument_list|(
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|mtime
operator|==
literal|null
condition|)
block|{
name|mtime
operator|=
operator|new
name|NfsTime
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|mtime
operator|.
name|serialize
argument_list|(
name|out
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctime
operator|==
literal|null
condition|)
block|{
name|ctime
operator|=
operator|new
name|NfsTime
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|ctime
operator|.
name|serialize
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

