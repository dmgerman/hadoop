begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.oncrpc
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_comment
comment|/**  *  Authentication Info as defined in RFC 1831  */
end_comment

begin_class
DECL|class|RpcAuthInfo
specifier|public
class|class
name|RpcAuthInfo
block|{
comment|/** Different types of authentication as defined in RFC 1831 */
DECL|enum|AuthFlavor
specifier|public
enum|enum
name|AuthFlavor
block|{
DECL|enumConstant|AUTH_NONE
name|AUTH_NONE
argument_list|(
literal|0
argument_list|)
block|,
DECL|enumConstant|AUTH_SYS
name|AUTH_SYS
argument_list|(
literal|1
argument_list|)
block|,
DECL|enumConstant|AUTH_SHORT
name|AUTH_SHORT
argument_list|(
literal|2
argument_list|)
block|,
DECL|enumConstant|AUTH_DH
name|AUTH_DH
argument_list|(
literal|3
argument_list|)
block|,
DECL|enumConstant|RPCSEC_GSS
name|RPCSEC_GSS
argument_list|(
literal|6
argument_list|)
block|;
DECL|field|value
specifier|private
name|int
name|value
decl_stmt|;
DECL|method|AuthFlavor (int value)
name|AuthFlavor
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
DECL|method|getValue ()
specifier|public
name|int
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
DECL|method|fromValue (int value)
specifier|static
name|AuthFlavor
name|fromValue
parameter_list|(
name|int
name|value
parameter_list|)
block|{
for|for
control|(
name|AuthFlavor
name|v
range|:
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|v
operator|.
name|value
operator|==
name|value
condition|)
block|{
return|return
name|v
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid AuthFlavor value "
operator|+
name|value
argument_list|)
throw|;
block|}
block|}
DECL|field|flavor
specifier|private
specifier|final
name|AuthFlavor
name|flavor
decl_stmt|;
DECL|field|body
specifier|private
specifier|final
name|byte
index|[]
name|body
decl_stmt|;
DECL|method|RpcAuthInfo (AuthFlavor flavor, byte[] body)
specifier|protected
name|RpcAuthInfo
parameter_list|(
name|AuthFlavor
name|flavor
parameter_list|,
name|byte
index|[]
name|body
parameter_list|)
block|{
name|this
operator|.
name|flavor
operator|=
name|flavor
expr_stmt|;
name|this
operator|.
name|body
operator|=
name|body
expr_stmt|;
block|}
DECL|method|read (XDR xdr)
specifier|public
specifier|static
name|RpcAuthInfo
name|read
parameter_list|(
name|XDR
name|xdr
parameter_list|)
block|{
name|int
name|type
init|=
name|xdr
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|AuthFlavor
name|flavor
init|=
name|AuthFlavor
operator|.
name|fromValue
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|byte
index|[]
name|body
init|=
name|xdr
operator|.
name|readVariableOpaque
argument_list|()
decl_stmt|;
return|return
operator|new
name|RpcAuthInfo
argument_list|(
name|flavor
argument_list|,
name|body
argument_list|)
return|;
block|}
DECL|method|getFlavor ()
specifier|public
name|AuthFlavor
name|getFlavor
parameter_list|()
block|{
return|return
name|flavor
return|;
block|}
DECL|method|getBody ()
specifier|public
name|byte
index|[]
name|getBody
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|copyOf
argument_list|(
name|body
argument_list|,
name|body
operator|.
name|length
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"(AuthFlavor:"
operator|+
name|flavor
operator|+
literal|")"
return|;
block|}
block|}
end_class

end_unit

