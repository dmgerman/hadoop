begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.oncrpc.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
operator|.
name|security
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
operator|.
name|security
operator|.
name|RpcAuthInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
operator|.
name|security
operator|.
name|RpcAuthInfo
operator|.
name|AuthFlavor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests for {@link RpcAuthInfo}  */
end_comment

begin_class
DECL|class|TestRpcAuthInfo
specifier|public
class|class
name|TestRpcAuthInfo
block|{
annotation|@
name|Test
DECL|method|testAuthFlavor ()
specifier|public
name|void
name|testAuthFlavor
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|AuthFlavor
operator|.
name|AUTH_NONE
argument_list|,
name|AuthFlavor
operator|.
name|fromValue
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|AuthFlavor
operator|.
name|AUTH_SYS
argument_list|,
name|AuthFlavor
operator|.
name|fromValue
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|AuthFlavor
operator|.
name|AUTH_SHORT
argument_list|,
name|AuthFlavor
operator|.
name|fromValue
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|AuthFlavor
operator|.
name|AUTH_DH
argument_list|,
name|AuthFlavor
operator|.
name|fromValue
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|AuthFlavor
operator|.
name|RPCSEC_GSS
argument_list|,
name|AuthFlavor
operator|.
name|fromValue
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testInvalidAuthFlavor ()
specifier|public
name|void
name|testInvalidAuthFlavor
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|AuthFlavor
operator|.
name|AUTH_NONE
argument_list|,
name|AuthFlavor
operator|.
name|fromValue
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

