begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.nfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|AccessPrivilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|NfsExports
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|Nfs3Constant
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestNfsExports
specifier|public
class|class
name|TestNfsExports
block|{
DECL|field|address1
specifier|private
specifier|final
name|String
name|address1
init|=
literal|"192.168.0.1"
decl_stmt|;
DECL|field|address2
specifier|private
specifier|final
name|String
name|address2
init|=
literal|"10.0.0.1"
decl_stmt|;
DECL|field|hostname1
specifier|private
specifier|final
name|String
name|hostname1
init|=
literal|"a.b.com"
decl_stmt|;
DECL|field|hostname2
specifier|private
specifier|final
name|String
name|hostname2
init|=
literal|"a.b.org"
decl_stmt|;
DECL|field|ExpirationPeriod
specifier|private
specifier|static
specifier|final
name|long
name|ExpirationPeriod
init|=
name|Nfs3Constant
operator|.
name|EXPORTS_CACHE_EXPIRYTIME_MILLIS_DEFAULT
operator|*
literal|1000
operator|*
literal|1000
decl_stmt|;
DECL|field|CacheSize
specifier|private
specifier|static
specifier|final
name|int
name|CacheSize
init|=
name|Nfs3Constant
operator|.
name|EXPORTS_CACHE_SIZE_DEFAULT
decl_stmt|;
DECL|field|NanosPerMillis
specifier|private
specifier|static
specifier|final
name|long
name|NanosPerMillis
init|=
literal|1000000
decl_stmt|;
annotation|@
name|Test
DECL|method|testWildcardRW ()
specifier|public
name|void
name|testWildcardRW
parameter_list|()
block|{
name|NfsExports
name|matcher
init|=
operator|new
name|NfsExports
argument_list|(
name|CacheSize
argument_list|,
name|ExpirationPeriod
argument_list|,
literal|"* rw"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|AccessPrivilege
operator|.
name|READ_WRITE
argument_list|,
name|matcher
operator|.
name|getAccessPrivilege
argument_list|(
name|address1
argument_list|,
name|hostname1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWildcardRO ()
specifier|public
name|void
name|testWildcardRO
parameter_list|()
block|{
name|NfsExports
name|matcher
init|=
operator|new
name|NfsExports
argument_list|(
name|CacheSize
argument_list|,
name|ExpirationPeriod
argument_list|,
literal|"* ro"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|AccessPrivilege
operator|.
name|READ_ONLY
argument_list|,
name|matcher
operator|.
name|getAccessPrivilege
argument_list|(
name|address1
argument_list|,
name|hostname1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExactAddressRW ()
specifier|public
name|void
name|testExactAddressRW
parameter_list|()
block|{
name|NfsExports
name|matcher
init|=
operator|new
name|NfsExports
argument_list|(
name|CacheSize
argument_list|,
name|ExpirationPeriod
argument_list|,
name|address1
operator|+
literal|" rw"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|AccessPrivilege
operator|.
name|READ_WRITE
argument_list|,
name|matcher
operator|.
name|getAccessPrivilege
argument_list|(
name|address1
argument_list|,
name|hostname1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|AccessPrivilege
operator|.
name|READ_WRITE
operator|==
name|matcher
operator|.
name|getAccessPrivilege
argument_list|(
name|address2
argument_list|,
name|hostname1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExactAddressRO ()
specifier|public
name|void
name|testExactAddressRO
parameter_list|()
block|{
name|NfsExports
name|matcher
init|=
operator|new
name|NfsExports
argument_list|(
name|CacheSize
argument_list|,
name|ExpirationPeriod
argument_list|,
name|address1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|AccessPrivilege
operator|.
name|READ_ONLY
argument_list|,
name|matcher
operator|.
name|getAccessPrivilege
argument_list|(
name|address1
argument_list|,
name|hostname1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|AccessPrivilege
operator|.
name|NONE
argument_list|,
name|matcher
operator|.
name|getAccessPrivilege
argument_list|(
name|address2
argument_list|,
name|hostname1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExactHostRW ()
specifier|public
name|void
name|testExactHostRW
parameter_list|()
block|{
name|NfsExports
name|matcher
init|=
operator|new
name|NfsExports
argument_list|(
name|CacheSize
argument_list|,
name|ExpirationPeriod
argument_list|,
name|hostname1
operator|+
literal|" rw"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|AccessPrivilege
operator|.
name|READ_WRITE
argument_list|,
name|matcher
operator|.
name|getAccessPrivilege
argument_list|(
name|address1
argument_list|,
name|hostname1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExactHostRO ()
specifier|public
name|void
name|testExactHostRO
parameter_list|()
block|{
name|NfsExports
name|matcher
init|=
operator|new
name|NfsExports
argument_list|(
name|CacheSize
argument_list|,
name|ExpirationPeriod
argument_list|,
name|hostname1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|AccessPrivilege
operator|.
name|READ_ONLY
argument_list|,
name|matcher
operator|.
name|getAccessPrivilege
argument_list|(
name|address1
argument_list|,
name|hostname1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCidrShortRW ()
specifier|public
name|void
name|testCidrShortRW
parameter_list|()
block|{
name|NfsExports
name|matcher
init|=
operator|new
name|NfsExports
argument_list|(
name|CacheSize
argument_list|,
name|ExpirationPeriod
argument_list|,
literal|"192.168.0.0/22 rw"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|AccessPrivilege
operator|.
name|READ_WRITE
argument_list|,
name|matcher
operator|.
name|getAccessPrivilege
argument_list|(
name|address1
argument_list|,
name|hostname1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|AccessPrivilege
operator|.
name|NONE
argument_list|,
name|matcher
operator|.
name|getAccessPrivilege
argument_list|(
name|address2
argument_list|,
name|hostname1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCidrShortRO ()
specifier|public
name|void
name|testCidrShortRO
parameter_list|()
block|{
name|NfsExports
name|matcher
init|=
operator|new
name|NfsExports
argument_list|(
name|CacheSize
argument_list|,
name|ExpirationPeriod
argument_list|,
literal|"192.168.0.0/22"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|AccessPrivilege
operator|.
name|READ_ONLY
argument_list|,
name|matcher
operator|.
name|getAccessPrivilege
argument_list|(
name|address1
argument_list|,
name|hostname1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|AccessPrivilege
operator|.
name|NONE
argument_list|,
name|matcher
operator|.
name|getAccessPrivilege
argument_list|(
name|address2
argument_list|,
name|hostname1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCidrLongRW ()
specifier|public
name|void
name|testCidrLongRW
parameter_list|()
block|{
name|NfsExports
name|matcher
init|=
operator|new
name|NfsExports
argument_list|(
name|CacheSize
argument_list|,
name|ExpirationPeriod
argument_list|,
literal|"192.168.0.0/255.255.252.0 rw"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|AccessPrivilege
operator|.
name|READ_WRITE
argument_list|,
name|matcher
operator|.
name|getAccessPrivilege
argument_list|(
name|address1
argument_list|,
name|hostname1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|AccessPrivilege
operator|.
name|NONE
argument_list|,
name|matcher
operator|.
name|getAccessPrivilege
argument_list|(
name|address2
argument_list|,
name|hostname1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCidrLongRO ()
specifier|public
name|void
name|testCidrLongRO
parameter_list|()
block|{
name|NfsExports
name|matcher
init|=
operator|new
name|NfsExports
argument_list|(
name|CacheSize
argument_list|,
name|ExpirationPeriod
argument_list|,
literal|"192.168.0.0/255.255.252.0"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|AccessPrivilege
operator|.
name|READ_ONLY
argument_list|,
name|matcher
operator|.
name|getAccessPrivilege
argument_list|(
name|address1
argument_list|,
name|hostname1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|AccessPrivilege
operator|.
name|NONE
argument_list|,
name|matcher
operator|.
name|getAccessPrivilege
argument_list|(
name|address2
argument_list|,
name|hostname1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRegexIPRW ()
specifier|public
name|void
name|testRegexIPRW
parameter_list|()
block|{
name|NfsExports
name|matcher
init|=
operator|new
name|NfsExports
argument_list|(
name|CacheSize
argument_list|,
name|ExpirationPeriod
argument_list|,
literal|"192.168.0.[0-9]+ rw"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|AccessPrivilege
operator|.
name|READ_WRITE
argument_list|,
name|matcher
operator|.
name|getAccessPrivilege
argument_list|(
name|address1
argument_list|,
name|hostname1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|AccessPrivilege
operator|.
name|NONE
argument_list|,
name|matcher
operator|.
name|getAccessPrivilege
argument_list|(
name|address2
argument_list|,
name|hostname1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRegexIPRO ()
specifier|public
name|void
name|testRegexIPRO
parameter_list|()
block|{
name|NfsExports
name|matcher
init|=
operator|new
name|NfsExports
argument_list|(
name|CacheSize
argument_list|,
name|ExpirationPeriod
argument_list|,
literal|"192.168.0.[0-9]+"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|AccessPrivilege
operator|.
name|READ_ONLY
argument_list|,
name|matcher
operator|.
name|getAccessPrivilege
argument_list|(
name|address1
argument_list|,
name|hostname1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|AccessPrivilege
operator|.
name|NONE
argument_list|,
name|matcher
operator|.
name|getAccessPrivilege
argument_list|(
name|address2
argument_list|,
name|hostname1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRegexHostRW ()
specifier|public
name|void
name|testRegexHostRW
parameter_list|()
block|{
name|NfsExports
name|matcher
init|=
operator|new
name|NfsExports
argument_list|(
name|CacheSize
argument_list|,
name|ExpirationPeriod
argument_list|,
literal|"[a-z]+.b.com rw"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|AccessPrivilege
operator|.
name|READ_WRITE
argument_list|,
name|matcher
operator|.
name|getAccessPrivilege
argument_list|(
name|address1
argument_list|,
name|hostname1
argument_list|)
argument_list|)
expr_stmt|;
comment|// address1 will hit the cache
name|Assert
operator|.
name|assertEquals
argument_list|(
name|AccessPrivilege
operator|.
name|READ_WRITE
argument_list|,
name|matcher
operator|.
name|getAccessPrivilege
argument_list|(
name|address1
argument_list|,
name|hostname2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRegexHostRO ()
specifier|public
name|void
name|testRegexHostRO
parameter_list|()
block|{
name|NfsExports
name|matcher
init|=
operator|new
name|NfsExports
argument_list|(
name|CacheSize
argument_list|,
name|ExpirationPeriod
argument_list|,
literal|"[a-z]+.b.com"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|AccessPrivilege
operator|.
name|READ_ONLY
argument_list|,
name|matcher
operator|.
name|getAccessPrivilege
argument_list|(
name|address1
argument_list|,
name|hostname1
argument_list|)
argument_list|)
expr_stmt|;
comment|// address1 will hit the cache
name|Assert
operator|.
name|assertEquals
argument_list|(
name|AccessPrivilege
operator|.
name|READ_ONLY
argument_list|,
name|matcher
operator|.
name|getAccessPrivilege
argument_list|(
name|address1
argument_list|,
name|hostname2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultiMatchers ()
specifier|public
name|void
name|testMultiMatchers
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|shortExpirationPeriod
init|=
literal|1
operator|*
literal|1000
operator|*
literal|1000
operator|*
literal|1000
decl_stmt|;
comment|// 1s
name|NfsExports
name|matcher
init|=
operator|new
name|NfsExports
argument_list|(
name|CacheSize
argument_list|,
name|shortExpirationPeriod
argument_list|,
literal|"192.168.0.[0-9]+;[a-z]+.b.com rw"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|AccessPrivilege
operator|.
name|READ_ONLY
argument_list|,
name|matcher
operator|.
name|getAccessPrivilege
argument_list|(
name|address1
argument_list|,
name|hostname2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|AccessPrivilege
operator|.
name|READ_ONLY
argument_list|,
name|matcher
operator|.
name|getAccessPrivilege
argument_list|(
name|address1
argument_list|,
name|address1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|AccessPrivilege
operator|.
name|READ_ONLY
argument_list|,
name|matcher
operator|.
name|getAccessPrivilege
argument_list|(
name|address1
argument_list|,
name|hostname1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|AccessPrivilege
operator|.
name|READ_WRITE
argument_list|,
name|matcher
operator|.
name|getAccessPrivilege
argument_list|(
name|address2
argument_list|,
name|hostname1
argument_list|)
argument_list|)
expr_stmt|;
comment|// address2 will hit the cache
name|Assert
operator|.
name|assertEquals
argument_list|(
name|AccessPrivilege
operator|.
name|READ_WRITE
argument_list|,
name|matcher
operator|.
name|getAccessPrivilege
argument_list|(
name|address2
argument_list|,
name|hostname2
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|// no cache for address2 now
name|AccessPrivilege
name|ap
decl_stmt|;
name|long
name|startNanos
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
do|do
block|{
name|ap
operator|=
name|matcher
operator|.
name|getAccessPrivilege
argument_list|(
name|address2
argument_list|,
name|address2
argument_list|)
expr_stmt|;
if|if
condition|(
name|ap
operator|==
name|AccessPrivilege
operator|.
name|NONE
condition|)
block|{
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
operator|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|startNanos
operator|)
operator|/
name|NanosPerMillis
operator|<
literal|5000
condition|)
do|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|AccessPrivilege
operator|.
name|NONE
argument_list|,
name|ap
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

