begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.oncrpc
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
operator|.
name|RpcCallCache
operator|.
name|CacheEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
operator|.
name|RpcCallCache
operator|.
name|ClientRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Unit tests for {@link RpcCallCache}  */
end_comment

begin_class
DECL|class|TestRpcCallCache
specifier|public
class|class
name|TestRpcCallCache
block|{
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testRpcCallCacheConstructorIllegalArgument0 ()
specifier|public
name|void
name|testRpcCallCacheConstructorIllegalArgument0
parameter_list|()
block|{
operator|new
name|RpcCallCache
argument_list|(
literal|"test"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testRpcCallCacheConstructorIllegalArgumentNegative ()
specifier|public
name|void
name|testRpcCallCacheConstructorIllegalArgumentNegative
parameter_list|()
block|{
operator|new
name|RpcCallCache
argument_list|(
literal|"test"
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRpcCallCacheConstructor ()
specifier|public
name|void
name|testRpcCallCacheConstructor
parameter_list|()
block|{
name|RpcCallCache
name|cache
init|=
operator|new
name|RpcCallCache
argument_list|(
literal|"test"
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|cache
operator|.
name|getProgram
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddRemoveEntries ()
specifier|public
name|void
name|testAddRemoveEntries
parameter_list|()
throws|throws
name|UnknownHostException
block|{
name|RpcCallCache
name|cache
init|=
operator|new
name|RpcCallCache
argument_list|(
literal|"test"
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|InetAddress
name|clientIp
init|=
name|InetAddress
operator|.
name|getByName
argument_list|(
literal|"1.1.1.1"
argument_list|)
decl_stmt|;
name|int
name|xid
init|=
literal|100
decl_stmt|;
comment|// Ensure null is returned when there is no entry in the cache
comment|// An entry is added to indicate the request is in progress
name|CacheEntry
name|e
init|=
name|cache
operator|.
name|checkOrAddToCache
argument_list|(
name|clientIp
argument_list|,
name|xid
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|e
operator|=
name|cache
operator|.
name|checkOrAddToCache
argument_list|(
name|clientIp
argument_list|,
name|xid
argument_list|)
expr_stmt|;
name|validateInprogressCacheEntry
argument_list|(
name|e
argument_list|)
expr_stmt|;
comment|// Set call as completed
name|RpcResponse
name|response
init|=
name|mock
argument_list|(
name|RpcResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|cache
operator|.
name|callCompleted
argument_list|(
name|clientIp
argument_list|,
name|xid
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|e
operator|=
name|cache
operator|.
name|checkOrAddToCache
argument_list|(
name|clientIp
argument_list|,
name|xid
argument_list|)
expr_stmt|;
name|validateCompletedCacheEntry
argument_list|(
name|e
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
DECL|method|validateInprogressCacheEntry (CacheEntry c)
specifier|private
name|void
name|validateInprogressCacheEntry
parameter_list|(
name|CacheEntry
name|c
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|c
operator|.
name|isInProgress
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|c
operator|.
name|isCompleted
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|c
operator|.
name|getResponse
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|validateCompletedCacheEntry (CacheEntry c, RpcResponse response)
specifier|private
name|void
name|validateCompletedCacheEntry
parameter_list|(
name|CacheEntry
name|c
parameter_list|,
name|RpcResponse
name|response
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|c
operator|.
name|isInProgress
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|isCompleted
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
argument_list|,
name|c
operator|.
name|getResponse
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCacheEntry ()
specifier|public
name|void
name|testCacheEntry
parameter_list|()
block|{
name|CacheEntry
name|c
init|=
operator|new
name|CacheEntry
argument_list|()
decl_stmt|;
name|validateInprogressCacheEntry
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|isInProgress
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|c
operator|.
name|isCompleted
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|c
operator|.
name|getResponse
argument_list|()
argument_list|)
expr_stmt|;
name|RpcResponse
name|response
init|=
name|mock
argument_list|(
name|RpcResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|c
operator|.
name|setResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|validateCompletedCacheEntry
argument_list|(
name|c
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCacheFunctionality ()
specifier|public
name|void
name|testCacheFunctionality
parameter_list|()
throws|throws
name|UnknownHostException
block|{
name|RpcCallCache
name|cache
init|=
operator|new
name|RpcCallCache
argument_list|(
literal|"Test"
argument_list|,
literal|10
argument_list|)
decl_stmt|;
comment|// Add 20 entries to the cache and only last 10 should be retained
name|int
name|size
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|clientId
init|=
literal|0
init|;
name|clientId
operator|<
literal|20
condition|;
name|clientId
operator|++
control|)
block|{
name|InetAddress
name|clientIp
init|=
name|InetAddress
operator|.
name|getByName
argument_list|(
literal|"1.1.1."
operator|+
name|clientId
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Adding "
operator|+
name|clientIp
argument_list|)
expr_stmt|;
name|cache
operator|.
name|checkOrAddToCache
argument_list|(
name|clientIp
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|size
operator|=
name|Math
operator|.
name|min
argument_list|(
operator|++
name|size
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Cache size "
operator|+
name|cache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|size
argument_list|,
name|cache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Ensure the cache size is correct
comment|// Ensure the cache entries are correct
name|int
name|startEntry
init|=
name|Math
operator|.
name|max
argument_list|(
name|clientId
operator|-
literal|10
operator|+
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|ClientRequest
argument_list|,
name|CacheEntry
argument_list|>
argument_list|>
name|iterator
init|=
name|cache
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|ClientRequest
name|key
init|=
name|iterator
operator|.
name|next
argument_list|()
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Entry "
operator|+
name|key
operator|.
name|getClientId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|InetAddress
operator|.
name|getByName
argument_list|(
literal|"1.1.1."
operator|+
operator|(
name|startEntry
operator|+
name|i
operator|)
argument_list|)
argument_list|,
name|key
operator|.
name|getClientId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Ensure cache entries are returned as in progress.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|CacheEntry
name|e
init|=
name|cache
operator|.
name|checkOrAddToCache
argument_list|(
name|InetAddress
operator|.
name|getByName
argument_list|(
literal|"1.1.1."
operator|+
operator|(
name|startEntry
operator|+
name|i
operator|)
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|isInProgress
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|e
operator|.
name|isCompleted
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

