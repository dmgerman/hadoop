begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.oncrpc
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test for {@link RpcMessage}  */
end_comment

begin_class
DECL|class|TestRpcMessage
specifier|public
class|class
name|TestRpcMessage
block|{
DECL|method|getRpcMessage (int xid, int msgType)
specifier|private
name|RpcMessage
name|getRpcMessage
parameter_list|(
name|int
name|xid
parameter_list|,
name|int
name|msgType
parameter_list|)
block|{
return|return
operator|new
name|RpcMessage
argument_list|(
name|xid
argument_list|,
name|msgType
argument_list|)
block|{
comment|// Anonymous class
block|}
return|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testInvalidMessageType ()
specifier|public
name|void
name|testInvalidMessageType
parameter_list|()
block|{
name|int
name|invalidMsgType
init|=
literal|2
decl_stmt|;
comment|// valid values are 0 and 1
name|getRpcMessage
argument_list|(
literal|0
argument_list|,
name|invalidMsgType
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRpcMessage ()
specifier|public
name|void
name|testRpcMessage
parameter_list|()
block|{
name|RpcMessage
name|msg
init|=
name|getRpcMessage
argument_list|(
literal|0
argument_list|,
name|RpcMessage
operator|.
name|RPC_CALL
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|msg
operator|.
name|getXid
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RpcMessage
operator|.
name|RPC_CALL
argument_list|,
name|msg
operator|.
name|getMessageType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testValidateMessage ()
specifier|public
name|void
name|testValidateMessage
parameter_list|()
block|{
name|RpcMessage
name|msg
init|=
name|getRpcMessage
argument_list|(
literal|0
argument_list|,
name|RpcMessage
operator|.
name|RPC_CALL
argument_list|)
decl_stmt|;
name|msg
operator|.
name|validateMessageType
argument_list|(
name|RpcMessage
operator|.
name|RPC_CALL
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testValidateMessageException ()
specifier|public
name|void
name|testValidateMessageException
parameter_list|()
block|{
name|RpcMessage
name|msg
init|=
name|getRpcMessage
argument_list|(
literal|0
argument_list|,
name|RpcMessage
operator|.
name|RPC_CALL
argument_list|)
decl_stmt|;
name|msg
operator|.
name|validateMessageType
argument_list|(
name|RpcMessage
operator|.
name|RPC_REPLY
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

