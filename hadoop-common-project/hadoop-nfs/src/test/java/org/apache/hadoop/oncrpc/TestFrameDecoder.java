begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.oncrpc
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
operator|.
name|RpcUtil
operator|.
name|RpcFrameDecoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
operator|.
name|security
operator|.
name|CredentialsNone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
operator|.
name|security
operator|.
name|VerifierNone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ByteBufferBackedChannelBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ChannelBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ChannelBuffers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandlerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_class
DECL|class|TestFrameDecoder
specifier|public
class|class
name|TestFrameDecoder
block|{
DECL|field|resultSize
specifier|private
specifier|static
name|int
name|resultSize
decl_stmt|;
DECL|method|testRequest (XDR request, int serverPort)
specifier|static
name|void
name|testRequest
parameter_list|(
name|XDR
name|request
parameter_list|,
name|int
name|serverPort
parameter_list|)
block|{
name|SimpleTcpClient
name|tcpClient
init|=
operator|new
name|SimpleTcpClient
argument_list|(
literal|"localhost"
argument_list|,
name|serverPort
argument_list|,
name|request
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|tcpClient
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
DECL|class|TestRpcProgram
specifier|static
class|class
name|TestRpcProgram
extends|extends
name|RpcProgram
block|{
DECL|method|TestRpcProgram (String program, String host, int port, int progNumber, int lowProgVersion, int highProgVersion)
specifier|protected
name|TestRpcProgram
parameter_list|(
name|String
name|program
parameter_list|,
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|,
name|int
name|progNumber
parameter_list|,
name|int
name|lowProgVersion
parameter_list|,
name|int
name|highProgVersion
parameter_list|)
block|{
name|super
argument_list|(
name|program
argument_list|,
name|host
argument_list|,
name|port
argument_list|,
name|progNumber
argument_list|,
name|lowProgVersion
argument_list|,
name|highProgVersion
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handleInternal (ChannelHandlerContext ctx, RpcInfo info)
specifier|protected
name|void
name|handleInternal
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|RpcInfo
name|info
parameter_list|)
block|{
name|resultSize
operator|=
name|info
operator|.
name|data
argument_list|()
operator|.
name|readableBytes
argument_list|()
expr_stmt|;
name|RpcAcceptedReply
name|reply
init|=
name|RpcAcceptedReply
operator|.
name|getAcceptInstance
argument_list|(
literal|1234
argument_list|,
operator|new
name|VerifierNone
argument_list|()
argument_list|)
decl_stmt|;
name|XDR
name|out
init|=
operator|new
name|XDR
argument_list|()
decl_stmt|;
name|reply
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|ChannelBuffer
name|b
init|=
name|ChannelBuffers
operator|.
name|wrappedBuffer
argument_list|(
name|out
operator|.
name|asReadOnlyWrap
argument_list|()
operator|.
name|buffer
argument_list|()
argument_list|)
decl_stmt|;
name|RpcResponse
name|rsp
init|=
operator|new
name|RpcResponse
argument_list|(
name|b
argument_list|,
name|info
operator|.
name|remoteAddress
argument_list|()
argument_list|)
decl_stmt|;
name|RpcUtil
operator|.
name|sendRpcResponse
argument_list|(
name|ctx
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isIdempotent (RpcCall call)
specifier|protected
name|boolean
name|isIdempotent
parameter_list|(
name|RpcCall
name|call
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSingleFrame ()
specifier|public
name|void
name|testSingleFrame
parameter_list|()
block|{
name|RpcFrameDecoder
name|decoder
init|=
operator|new
name|RpcFrameDecoder
argument_list|()
decl_stmt|;
comment|// Test "Length field is not received yet"
name|ByteBuffer
name|buffer
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ChannelBuffer
name|buf
init|=
operator|new
name|ByteBufferBackedChannelBuffer
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|ChannelBuffer
name|channelBuffer
init|=
operator|(
name|ChannelBuffer
operator|)
name|decoder
operator|.
name|decode
argument_list|(
name|Mockito
operator|.
name|mock
argument_list|(
name|ChannelHandlerContext
operator|.
name|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|mock
argument_list|(
name|Channel
operator|.
name|class
argument_list|)
argument_list|,
name|buf
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|channelBuffer
operator|==
literal|null
argument_list|)
expr_stmt|;
comment|// Test all bytes are not received yet
name|byte
index|[]
name|fragment
init|=
operator|new
name|byte
index|[
literal|4
operator|+
literal|9
index|]
decl_stmt|;
name|fragment
index|[
literal|0
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|1
operator|<<
literal|7
argument_list|)
expr_stmt|;
comment|// final fragment
name|fragment
index|[
literal|1
index|]
operator|=
literal|0
expr_stmt|;
name|fragment
index|[
literal|2
index|]
operator|=
literal|0
expr_stmt|;
name|fragment
index|[
literal|3
index|]
operator|=
operator|(
name|byte
operator|)
literal|10
expr_stmt|;
comment|// fragment size = 10 bytes
name|assertTrue
argument_list|(
name|XDR
operator|.
name|isLastFragment
argument_list|(
name|fragment
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|XDR
operator|.
name|fragmentSize
argument_list|(
name|fragment
argument_list|)
operator|==
literal|10
argument_list|)
expr_stmt|;
name|buffer
operator|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|4
operator|+
literal|9
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|put
argument_list|(
name|fragment
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|flip
argument_list|()
expr_stmt|;
name|buf
operator|=
operator|new
name|ByteBufferBackedChannelBuffer
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|channelBuffer
operator|=
operator|(
name|ChannelBuffer
operator|)
name|decoder
operator|.
name|decode
argument_list|(
name|Mockito
operator|.
name|mock
argument_list|(
name|ChannelHandlerContext
operator|.
name|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|mock
argument_list|(
name|Channel
operator|.
name|class
argument_list|)
argument_list|,
name|buf
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|channelBuffer
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultipleFrames ()
specifier|public
name|void
name|testMultipleFrames
parameter_list|()
block|{
name|RpcFrameDecoder
name|decoder
init|=
operator|new
name|RpcFrameDecoder
argument_list|()
decl_stmt|;
comment|// Test multiple frames
name|byte
index|[]
name|fragment1
init|=
operator|new
name|byte
index|[
literal|4
operator|+
literal|10
index|]
decl_stmt|;
name|fragment1
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
comment|// not final fragment
name|fragment1
index|[
literal|1
index|]
operator|=
literal|0
expr_stmt|;
name|fragment1
index|[
literal|2
index|]
operator|=
literal|0
expr_stmt|;
name|fragment1
index|[
literal|3
index|]
operator|=
operator|(
name|byte
operator|)
literal|10
expr_stmt|;
comment|// fragment size = 10 bytes
name|assertFalse
argument_list|(
name|XDR
operator|.
name|isLastFragment
argument_list|(
name|fragment1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|XDR
operator|.
name|fragmentSize
argument_list|(
name|fragment1
argument_list|)
operator|==
literal|10
argument_list|)
expr_stmt|;
comment|// decoder should wait for the final fragment
name|ByteBuffer
name|buffer
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|4
operator|+
literal|10
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|put
argument_list|(
name|fragment1
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|flip
argument_list|()
expr_stmt|;
name|ChannelBuffer
name|buf
init|=
operator|new
name|ByteBufferBackedChannelBuffer
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|ChannelBuffer
name|channelBuffer
init|=
operator|(
name|ChannelBuffer
operator|)
name|decoder
operator|.
name|decode
argument_list|(
name|Mockito
operator|.
name|mock
argument_list|(
name|ChannelHandlerContext
operator|.
name|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|mock
argument_list|(
name|Channel
operator|.
name|class
argument_list|)
argument_list|,
name|buf
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|channelBuffer
operator|==
literal|null
argument_list|)
expr_stmt|;
name|byte
index|[]
name|fragment2
init|=
operator|new
name|byte
index|[
literal|4
operator|+
literal|10
index|]
decl_stmt|;
name|fragment2
index|[
literal|0
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|1
operator|<<
literal|7
argument_list|)
expr_stmt|;
comment|// final fragment
name|fragment2
index|[
literal|1
index|]
operator|=
literal|0
expr_stmt|;
name|fragment2
index|[
literal|2
index|]
operator|=
literal|0
expr_stmt|;
name|fragment2
index|[
literal|3
index|]
operator|=
operator|(
name|byte
operator|)
literal|10
expr_stmt|;
comment|// fragment size = 10 bytes
name|assertTrue
argument_list|(
name|XDR
operator|.
name|isLastFragment
argument_list|(
name|fragment2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|XDR
operator|.
name|fragmentSize
argument_list|(
name|fragment2
argument_list|)
operator|==
literal|10
argument_list|)
expr_stmt|;
name|buffer
operator|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|4
operator|+
literal|10
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|put
argument_list|(
name|fragment2
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|flip
argument_list|()
expr_stmt|;
name|buf
operator|=
operator|new
name|ByteBufferBackedChannelBuffer
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|channelBuffer
operator|=
operator|(
name|ChannelBuffer
operator|)
name|decoder
operator|.
name|decode
argument_list|(
name|Mockito
operator|.
name|mock
argument_list|(
name|ChannelHandlerContext
operator|.
name|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|mock
argument_list|(
name|Channel
operator|.
name|class
argument_list|)
argument_list|,
name|buf
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|channelBuffer
operator|!=
literal|null
argument_list|)
expr_stmt|;
comment|// Complete frame should have to total size 10+10=20
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|channelBuffer
operator|.
name|readableBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFrames ()
specifier|public
name|void
name|testFrames
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|int
name|serverPort
init|=
literal|30000
operator|+
name|rand
operator|.
name|nextInt
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
name|int
name|retries
init|=
literal|10
decl_stmt|;
comment|// A few retries in case initial choice is in use.
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|RpcProgram
name|program
init|=
operator|new
name|TestFrameDecoder
operator|.
name|TestRpcProgram
argument_list|(
literal|"TestRpcProgram"
argument_list|,
literal|"localhost"
argument_list|,
name|serverPort
argument_list|,
literal|100000
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|SimpleTcpServer
name|tcpServer
init|=
operator|new
name|SimpleTcpServer
argument_list|(
name|serverPort
argument_list|,
name|program
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|tcpServer
operator|.
name|run
argument_list|()
expr_stmt|;
break|break;
comment|// Successfully bound a port, break out.
block|}
catch|catch
parameter_list|(
name|ChannelException
name|ce
parameter_list|)
block|{
if|if
condition|(
name|retries
operator|--
operator|>
literal|0
condition|)
block|{
name|serverPort
operator|+=
name|rand
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
expr_stmt|;
comment|// Port in use? Try another.
block|}
else|else
block|{
throw|throw
name|ce
throw|;
comment|// Out of retries.
block|}
block|}
block|}
name|XDR
name|xdrOut
init|=
name|createGetportMount
argument_list|()
decl_stmt|;
name|int
name|headerSize
init|=
name|xdrOut
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|bufsize
init|=
literal|2
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|bufsize
index|]
decl_stmt|;
name|xdrOut
operator|.
name|writeFixedOpaque
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|int
name|requestSize
init|=
name|xdrOut
operator|.
name|size
argument_list|()
operator|-
name|headerSize
decl_stmt|;
comment|// Send the request to the server
name|testRequest
argument_list|(
name|xdrOut
argument_list|,
name|serverPort
argument_list|)
expr_stmt|;
comment|// Verify the server got the request with right size
name|assertEquals
argument_list|(
name|requestSize
argument_list|,
name|resultSize
argument_list|)
expr_stmt|;
block|}
DECL|method|createPortmapXDRheader (XDR xdr_out, int procedure)
specifier|static
name|void
name|createPortmapXDRheader
parameter_list|(
name|XDR
name|xdr_out
parameter_list|,
name|int
name|procedure
parameter_list|)
block|{
comment|// Make this a method
name|RpcCall
operator|.
name|getInstance
argument_list|(
literal|0
argument_list|,
literal|100000
argument_list|,
literal|2
argument_list|,
name|procedure
argument_list|,
operator|new
name|CredentialsNone
argument_list|()
argument_list|,
operator|new
name|VerifierNone
argument_list|()
argument_list|)
operator|.
name|write
argument_list|(
name|xdr_out
argument_list|)
expr_stmt|;
block|}
DECL|method|createGetportMount ()
specifier|static
name|XDR
name|createGetportMount
parameter_list|()
block|{
name|XDR
name|xdr_out
init|=
operator|new
name|XDR
argument_list|()
decl_stmt|;
name|createPortmapXDRheader
argument_list|(
name|xdr_out
argument_list|,
literal|3
argument_list|)
expr_stmt|;
return|return
name|xdr_out
return|;
block|}
comment|/*    * static void testGetport() { XDR xdr_out = new XDR();    *     * createPortmapXDRheader(xdr_out, 3);    *     * xdr_out.writeInt(100003); xdr_out.writeInt(3); xdr_out.writeInt(6);    * xdr_out.writeInt(0);    *     * XDR request2 = new XDR();    *     * createPortmapXDRheader(xdr_out, 3); request2.writeInt(100003);    * request2.writeInt(3); request2.writeInt(6); request2.writeInt(0);    *     * testRequest(xdr_out); }    *     * static void testDump() { XDR xdr_out = new XDR();    * createPortmapXDRheader(xdr_out, 4); testRequest(xdr_out); }    */
block|}
end_class

end_unit

