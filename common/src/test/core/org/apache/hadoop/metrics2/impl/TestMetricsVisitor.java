begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.metrics2.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentCaptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Captor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|runners
operator|.
name|MockitoJUnitRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|AbstractMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsInfo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|Interns
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MetricsRegistry
import|;
end_import

begin_comment
comment|/**  * Test the metric visitor interface  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|MockitoJUnitRunner
operator|.
name|class
argument_list|)
DECL|class|TestMetricsVisitor
specifier|public
class|class
name|TestMetricsVisitor
block|{
DECL|field|c1
annotation|@
name|Captor
specifier|private
name|ArgumentCaptor
argument_list|<
name|MetricsInfo
argument_list|>
name|c1
decl_stmt|;
DECL|field|c2
annotation|@
name|Captor
specifier|private
name|ArgumentCaptor
argument_list|<
name|MetricsInfo
argument_list|>
name|c2
decl_stmt|;
DECL|field|g1
annotation|@
name|Captor
specifier|private
name|ArgumentCaptor
argument_list|<
name|MetricsInfo
argument_list|>
name|g1
decl_stmt|;
DECL|field|g2
annotation|@
name|Captor
specifier|private
name|ArgumentCaptor
argument_list|<
name|MetricsInfo
argument_list|>
name|g2
decl_stmt|;
DECL|field|g3
annotation|@
name|Captor
specifier|private
name|ArgumentCaptor
argument_list|<
name|MetricsInfo
argument_list|>
name|g3
decl_stmt|;
DECL|field|g4
annotation|@
name|Captor
specifier|private
name|ArgumentCaptor
argument_list|<
name|MetricsInfo
argument_list|>
name|g4
decl_stmt|;
comment|/**    * Test the common use cases    */
DECL|method|testCommon ()
annotation|@
name|Test
specifier|public
name|void
name|testCommon
parameter_list|()
block|{
name|MetricsVisitor
name|visitor
init|=
name|mock
argument_list|(
name|MetricsVisitor
operator|.
name|class
argument_list|)
decl_stmt|;
name|MetricsRegistry
name|registry
init|=
operator|new
name|MetricsRegistry
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|AbstractMetric
argument_list|>
name|metrics
init|=
name|MetricsLists
operator|.
name|builder
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addCounter
argument_list|(
name|info
argument_list|(
literal|"c1"
argument_list|,
literal|"int counter"
argument_list|)
argument_list|,
literal|1
argument_list|)
operator|.
name|addCounter
argument_list|(
name|info
argument_list|(
literal|"c2"
argument_list|,
literal|"long counter"
argument_list|)
argument_list|,
literal|2L
argument_list|)
operator|.
name|addGauge
argument_list|(
name|info
argument_list|(
literal|"g1"
argument_list|,
literal|"int gauge"
argument_list|)
argument_list|,
literal|5
argument_list|)
operator|.
name|addGauge
argument_list|(
name|info
argument_list|(
literal|"g2"
argument_list|,
literal|"long gauge"
argument_list|)
argument_list|,
literal|6L
argument_list|)
operator|.
name|addGauge
argument_list|(
name|info
argument_list|(
literal|"g3"
argument_list|,
literal|"float gauge"
argument_list|)
argument_list|,
literal|7f
argument_list|)
operator|.
name|addGauge
argument_list|(
name|info
argument_list|(
literal|"g4"
argument_list|,
literal|"double gauge"
argument_list|)
argument_list|,
literal|8d
argument_list|)
operator|.
name|metrics
argument_list|()
decl_stmt|;
for|for
control|(
name|AbstractMetric
name|metric
range|:
name|metrics
control|)
block|{
name|metric
operator|.
name|visit
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
block|}
name|verify
argument_list|(
name|visitor
argument_list|)
operator|.
name|counter
argument_list|(
name|c1
operator|.
name|capture
argument_list|()
argument_list|,
name|eq
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c1 name"
argument_list|,
literal|"c1"
argument_list|,
name|c1
operator|.
name|getValue
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c1 description"
argument_list|,
literal|"int counter"
argument_list|,
name|c1
operator|.
name|getValue
argument_list|()
operator|.
name|description
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|visitor
argument_list|)
operator|.
name|counter
argument_list|(
name|c2
operator|.
name|capture
argument_list|()
argument_list|,
name|eq
argument_list|(
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c2 name"
argument_list|,
literal|"c2"
argument_list|,
name|c2
operator|.
name|getValue
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c2 description"
argument_list|,
literal|"long counter"
argument_list|,
name|c2
operator|.
name|getValue
argument_list|()
operator|.
name|description
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|visitor
argument_list|)
operator|.
name|gauge
argument_list|(
name|g1
operator|.
name|capture
argument_list|()
argument_list|,
name|eq
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"g1 name"
argument_list|,
literal|"g1"
argument_list|,
name|g1
operator|.
name|getValue
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"g1 description"
argument_list|,
literal|"int gauge"
argument_list|,
name|g1
operator|.
name|getValue
argument_list|()
operator|.
name|description
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|visitor
argument_list|)
operator|.
name|gauge
argument_list|(
name|g2
operator|.
name|capture
argument_list|()
argument_list|,
name|eq
argument_list|(
literal|6L
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"g2 name"
argument_list|,
literal|"g2"
argument_list|,
name|g2
operator|.
name|getValue
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"g2 description"
argument_list|,
literal|"long gauge"
argument_list|,
name|g2
operator|.
name|getValue
argument_list|()
operator|.
name|description
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|visitor
argument_list|)
operator|.
name|gauge
argument_list|(
name|g3
operator|.
name|capture
argument_list|()
argument_list|,
name|eq
argument_list|(
literal|7f
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"g3 name"
argument_list|,
literal|"g3"
argument_list|,
name|g3
operator|.
name|getValue
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"g3 description"
argument_list|,
literal|"float gauge"
argument_list|,
name|g3
operator|.
name|getValue
argument_list|()
operator|.
name|description
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|visitor
argument_list|)
operator|.
name|gauge
argument_list|(
name|g4
operator|.
name|capture
argument_list|()
argument_list|,
name|eq
argument_list|(
literal|8d
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"g4 name"
argument_list|,
literal|"g4"
argument_list|,
name|g4
operator|.
name|getValue
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"g4 description"
argument_list|,
literal|"double gauge"
argument_list|,
name|g4
operator|.
name|getValue
argument_list|()
operator|.
name|description
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

