begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.metrics2.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentCaptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Captor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|runners
operator|.
name|MockitoJUnitRunner
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|configuration
operator|.
name|SubsetConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MoreAsserts
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsSink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsTag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|annotation
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|Interns
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MetricsRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MutableCounterLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MutableRate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MutableGaugeLong
import|;
end_import

begin_comment
comment|/**  * Test the MetricsSystemImpl class  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|MockitoJUnitRunner
operator|.
name|class
argument_list|)
DECL|class|TestMetricsSystemImpl
specifier|public
class|class
name|TestMetricsSystemImpl
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestMetricsSystemImpl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|r1
annotation|@
name|Captor
specifier|private
name|ArgumentCaptor
argument_list|<
name|MetricsRecord
argument_list|>
name|r1
decl_stmt|;
DECL|field|r2
annotation|@
name|Captor
specifier|private
name|ArgumentCaptor
argument_list|<
name|MetricsRecord
argument_list|>
name|r2
decl_stmt|;
DECL|field|hostname
specifier|private
specifier|static
name|String
name|hostname
init|=
name|MetricsSystemImpl
operator|.
name|getHostname
argument_list|()
decl_stmt|;
DECL|class|TestSink
specifier|public
specifier|static
class|class
name|TestSink
implements|implements
name|MetricsSink
block|{
DECL|method|putMetrics (MetricsRecord record)
annotation|@
name|Override
specifier|public
name|void
name|putMetrics
parameter_list|(
name|MetricsRecord
name|record
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|record
argument_list|)
expr_stmt|;
block|}
DECL|method|flush ()
annotation|@
name|Override
specifier|public
name|void
name|flush
parameter_list|()
block|{}
DECL|method|init (SubsetConfiguration conf)
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|SubsetConfiguration
name|conf
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|MetricsConfig
operator|.
name|toString
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testInitFirst ()
annotation|@
name|Test
specifier|public
name|void
name|testInitFirst
parameter_list|()
throws|throws
name|Exception
block|{
name|ConfigBuilder
name|cb
init|=
operator|new
name|ConfigBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"*.period"
argument_list|,
literal|8
argument_list|)
comment|//.add("test.sink.plugin.urls", getPluginUrlsAsString())
operator|.
name|add
argument_list|(
literal|"test.sink.test.class"
argument_list|,
name|TestSink
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
literal|"test.*.source.filter.exclude"
argument_list|,
literal|"s0"
argument_list|)
operator|.
name|add
argument_list|(
literal|"test.source.s1.metric.filter.exclude"
argument_list|,
literal|"X*"
argument_list|)
operator|.
name|add
argument_list|(
literal|"test.sink.sink1.metric.filter.exclude"
argument_list|,
literal|"Y*"
argument_list|)
operator|.
name|add
argument_list|(
literal|"test.sink.sink2.metric.filter.exclude"
argument_list|,
literal|"Y*"
argument_list|)
operator|.
name|save
argument_list|(
name|TestMetricsConfig
operator|.
name|getTestFilename
argument_list|(
literal|"hadoop-metrics2-test"
argument_list|)
argument_list|)
decl_stmt|;
name|MetricsSystemImpl
name|ms
init|=
operator|new
name|MetricsSystemImpl
argument_list|(
literal|"Test"
argument_list|)
decl_stmt|;
name|ms
operator|.
name|start
argument_list|()
expr_stmt|;
name|ms
operator|.
name|register
argument_list|(
literal|"s0"
argument_list|,
literal|"s0 desc"
argument_list|,
operator|new
name|TestSource
argument_list|(
literal|"s0rec"
argument_list|)
argument_list|)
expr_stmt|;
name|TestSource
name|s1
init|=
name|ms
operator|.
name|register
argument_list|(
literal|"s1"
argument_list|,
literal|"s1 desc"
argument_list|,
operator|new
name|TestSource
argument_list|(
literal|"s1rec"
argument_list|)
argument_list|)
decl_stmt|;
name|s1
operator|.
name|c1
operator|.
name|incr
argument_list|()
expr_stmt|;
name|s1
operator|.
name|xxx
operator|.
name|incr
argument_list|()
expr_stmt|;
name|s1
operator|.
name|g1
operator|.
name|set
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|s1
operator|.
name|yyy
operator|.
name|incr
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|s1
operator|.
name|s1
operator|.
name|add
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|MetricsSink
name|sink1
init|=
name|mock
argument_list|(
name|MetricsSink
operator|.
name|class
argument_list|)
decl_stmt|;
name|MetricsSink
name|sink2
init|=
name|mock
argument_list|(
name|MetricsSink
operator|.
name|class
argument_list|)
decl_stmt|;
name|ms
operator|.
name|registerSink
argument_list|(
literal|"sink1"
argument_list|,
literal|"sink1 desc"
argument_list|,
name|sink1
argument_list|)
expr_stmt|;
name|ms
operator|.
name|registerSink
argument_list|(
literal|"sink2"
argument_list|,
literal|"sink2 desc"
argument_list|,
name|sink2
argument_list|)
expr_stmt|;
name|ms
operator|.
name|onTimerEvent
argument_list|()
expr_stmt|;
comment|// trigger something interesting
name|ms
operator|.
name|stop
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|sink1
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|putMetrics
argument_list|(
name|r1
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MetricsRecord
argument_list|>
name|mr1
init|=
name|r1
operator|.
name|getAllValues
argument_list|()
decl_stmt|;
name|verify
argument_list|(
name|sink2
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|putMetrics
argument_list|(
name|r2
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MetricsRecord
argument_list|>
name|mr2
init|=
name|r2
operator|.
name|getAllValues
argument_list|()
decl_stmt|;
name|checkMetricsRecords
argument_list|(
name|mr1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"output"
argument_list|,
name|mr1
argument_list|,
name|mr2
argument_list|)
expr_stmt|;
block|}
DECL|method|testRegisterDups ()
annotation|@
name|Test
specifier|public
name|void
name|testRegisterDups
parameter_list|()
block|{
name|MetricsSystem
name|ms
init|=
operator|new
name|MetricsSystemImpl
argument_list|()
decl_stmt|;
name|TestSource
name|ts1
init|=
operator|new
name|TestSource
argument_list|(
literal|"ts1"
argument_list|)
decl_stmt|;
name|TestSource
name|ts2
init|=
operator|new
name|TestSource
argument_list|(
literal|"ts2"
argument_list|)
decl_stmt|;
name|ms
operator|.
name|register
argument_list|(
literal|"ts1"
argument_list|,
literal|""
argument_list|,
name|ts1
argument_list|)
expr_stmt|;
name|MetricsSource
name|s1
init|=
name|ms
operator|.
name|getSource
argument_list|(
literal|"ts1"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|s1
argument_list|)
expr_stmt|;
comment|// should work when metrics system is not started
name|ms
operator|.
name|register
argument_list|(
literal|"ts1"
argument_list|,
literal|""
argument_list|,
name|ts2
argument_list|)
expr_stmt|;
name|MetricsSource
name|s2
init|=
name|ms
operator|.
name|getSource
argument_list|(
literal|"ts1"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|s2
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
expr_stmt|;
block|}
DECL|method|testRegisterDupError ()
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetricsException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testRegisterDupError
parameter_list|()
block|{
name|MetricsSystem
name|ms
init|=
operator|new
name|MetricsSystemImpl
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|TestSource
name|ts
init|=
operator|new
name|TestSource
argument_list|(
literal|"ts"
argument_list|)
decl_stmt|;
name|ms
operator|.
name|register
argument_list|(
name|ts
argument_list|)
expr_stmt|;
name|ms
operator|.
name|register
argument_list|(
name|ts
argument_list|)
expr_stmt|;
block|}
DECL|method|checkMetricsRecords (List<MetricsRecord> recs)
specifier|private
name|void
name|checkMetricsRecords
parameter_list|(
name|List
argument_list|<
name|MetricsRecord
argument_list|>
name|recs
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|recs
argument_list|)
expr_stmt|;
name|MetricsRecord
name|r
init|=
name|recs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"name"
argument_list|,
literal|"s1rec"
argument_list|,
name|r
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"tags"
argument_list|,
operator|new
name|MetricsTag
index|[]
block|{
name|tag
argument_list|(
name|MsInfo
operator|.
name|Context
argument_list|,
literal|"test"
argument_list|)
block|,
name|tag
argument_list|(
name|MsInfo
operator|.
name|Hostname
argument_list|,
name|hostname
argument_list|)
block|}
argument_list|,
name|r
operator|.
name|tags
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"metrics"
argument_list|,
name|MetricsLists
operator|.
name|builder
argument_list|(
literal|""
argument_list|)
operator|.
name|addCounter
argument_list|(
name|info
argument_list|(
literal|"C1"
argument_list|,
literal|"C1 desc"
argument_list|)
argument_list|,
literal|1L
argument_list|)
operator|.
name|addGauge
argument_list|(
name|info
argument_list|(
literal|"G1"
argument_list|,
literal|"G1 desc"
argument_list|)
argument_list|,
literal|2L
argument_list|)
operator|.
name|addCounter
argument_list|(
name|info
argument_list|(
literal|"S1NumOps"
argument_list|,
literal|"Number of ops for s1"
argument_list|)
argument_list|,
literal|1L
argument_list|)
operator|.
name|addGauge
argument_list|(
name|info
argument_list|(
literal|"S1AvgTime"
argument_list|,
literal|"Average time for s1"
argument_list|)
argument_list|,
literal|0.0
argument_list|)
operator|.
name|metrics
argument_list|()
argument_list|,
name|r
operator|.
name|metrics
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
name|recs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"NumActiveSinks should be 3"
argument_list|,
name|Iterables
operator|.
name|contains
argument_list|(
name|r
operator|.
name|metrics
argument_list|()
argument_list|,
operator|new
name|MetricGaugeInt
argument_list|(
name|MsInfo
operator|.
name|NumActiveSinks
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Metrics
argument_list|(
name|context
operator|=
literal|"test"
argument_list|)
DECL|class|TestSource
specifier|private
specifier|static
class|class
name|TestSource
block|{
DECL|field|c1
annotation|@
name|Metric
argument_list|(
literal|"C1 desc"
argument_list|)
name|MutableCounterLong
name|c1
decl_stmt|;
DECL|field|xxx
annotation|@
name|Metric
argument_list|(
literal|"XXX desc"
argument_list|)
name|MutableCounterLong
name|xxx
decl_stmt|;
DECL|field|g1
annotation|@
name|Metric
argument_list|(
literal|"G1 desc"
argument_list|)
name|MutableGaugeLong
name|g1
decl_stmt|;
DECL|field|yyy
annotation|@
name|Metric
argument_list|(
literal|"YYY desc"
argument_list|)
name|MutableGaugeLong
name|yyy
decl_stmt|;
DECL|field|s1
annotation|@
name|Metric
name|MutableRate
name|s1
decl_stmt|;
DECL|field|registry
specifier|final
name|MetricsRegistry
name|registry
decl_stmt|;
DECL|method|TestSource (String recName)
name|TestSource
parameter_list|(
name|String
name|recName
parameter_list|)
block|{
name|registry
operator|=
operator|new
name|MetricsRegistry
argument_list|(
name|recName
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getPluginUrlsAsString ()
specifier|private
specifier|static
name|String
name|getPluginUrlsAsString
parameter_list|()
block|{
return|return
literal|"file:metrics2-test-plugin.jar"
return|;
block|}
block|}
end_class

end_unit

