begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.apache.hadoop.io
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestDataByteBuffers
specifier|public
class|class
name|TestDataByteBuffers
block|{
DECL|method|readJunk (DataInput in, Random r, long seed, int iter)
specifier|private
specifier|static
name|void
name|readJunk
parameter_list|(
name|DataInput
name|in
parameter_list|,
name|Random
name|r
parameter_list|,
name|long
name|seed
parameter_list|,
name|int
name|iter
parameter_list|)
throws|throws
name|IOException
block|{
name|r
operator|.
name|setSeed
argument_list|(
name|seed
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iter
condition|;
operator|++
name|i
control|)
block|{
switch|switch
condition|(
name|r
operator|.
name|nextInt
argument_list|(
literal|7
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
name|assertEquals
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|r
operator|.
name|nextInt
argument_list|()
operator|&
literal|0xFF
argument_list|)
argument_list|,
name|in
operator|.
name|readByte
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|assertEquals
argument_list|(
call|(
name|short
call|)
argument_list|(
name|r
operator|.
name|nextInt
argument_list|()
operator|&
literal|0xFFFF
argument_list|)
argument_list|,
name|in
operator|.
name|readShort
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|assertEquals
argument_list|(
name|r
operator|.
name|nextInt
argument_list|()
argument_list|,
name|in
operator|.
name|readInt
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|assertEquals
argument_list|(
name|r
operator|.
name|nextLong
argument_list|()
argument_list|,
name|in
operator|.
name|readLong
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
name|assertEquals
argument_list|(
name|Double
operator|.
name|doubleToLongBits
argument_list|(
name|r
operator|.
name|nextDouble
argument_list|()
argument_list|)
argument_list|,
name|Double
operator|.
name|doubleToLongBits
argument_list|(
name|in
operator|.
name|readDouble
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|5
case|:
name|assertEquals
argument_list|(
name|Float
operator|.
name|floatToIntBits
argument_list|(
name|r
operator|.
name|nextFloat
argument_list|()
argument_list|)
argument_list|,
name|Float
operator|.
name|floatToIntBits
argument_list|(
name|in
operator|.
name|readFloat
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|6
case|:
name|int
name|len
init|=
name|r
operator|.
name|nextInt
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|byte
index|[]
name|vb
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|r
operator|.
name|nextBytes
argument_list|(
name|vb
argument_list|)
expr_stmt|;
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|in
operator|.
name|readFully
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|vb
argument_list|,
name|b
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
DECL|method|writeJunk (DataOutput out, Random r, long seed, int iter)
specifier|private
specifier|static
name|void
name|writeJunk
parameter_list|(
name|DataOutput
name|out
parameter_list|,
name|Random
name|r
parameter_list|,
name|long
name|seed
parameter_list|,
name|int
name|iter
parameter_list|)
throws|throws
name|IOException
block|{
name|r
operator|.
name|setSeed
argument_list|(
name|seed
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iter
condition|;
operator|++
name|i
control|)
block|{
switch|switch
condition|(
name|r
operator|.
name|nextInt
argument_list|(
literal|7
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
name|out
operator|.
name|writeByte
argument_list|(
name|r
operator|.
name|nextInt
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|out
operator|.
name|writeShort
argument_list|(
call|(
name|short
call|)
argument_list|(
name|r
operator|.
name|nextInt
argument_list|()
operator|&
literal|0xFFFF
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|out
operator|.
name|writeInt
argument_list|(
name|r
operator|.
name|nextInt
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|out
operator|.
name|writeLong
argument_list|(
name|r
operator|.
name|nextLong
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
name|out
operator|.
name|writeDouble
argument_list|(
name|r
operator|.
name|nextDouble
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|5
case|:
name|out
operator|.
name|writeFloat
argument_list|(
name|r
operator|.
name|nextFloat
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|6
case|:
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|r
operator|.
name|nextInt
argument_list|(
literal|1024
argument_list|)
index|]
decl_stmt|;
name|r
operator|.
name|nextBytes
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testBaseBuffers ()
specifier|public
name|void
name|testBaseBuffers
parameter_list|()
throws|throws
name|IOException
block|{
name|DataOutputBuffer
name|dob
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|long
name|seed
init|=
name|r
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|r
operator|.
name|setSeed
argument_list|(
name|seed
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"SEED: "
operator|+
name|seed
argument_list|)
expr_stmt|;
name|writeJunk
argument_list|(
name|dob
argument_list|,
name|r
argument_list|,
name|seed
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|DataInputBuffer
name|dib
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
name|dib
operator|.
name|reset
argument_list|(
name|dob
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|dob
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|readJunk
argument_list|(
name|dib
argument_list|,
name|r
argument_list|,
name|seed
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|dob
operator|.
name|reset
argument_list|()
expr_stmt|;
name|writeJunk
argument_list|(
name|dob
argument_list|,
name|r
argument_list|,
name|seed
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|dib
operator|.
name|reset
argument_list|(
name|dob
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|dob
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|readJunk
argument_list|(
name|dib
argument_list|,
name|r
argument_list|,
name|seed
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testByteBuffers ()
specifier|public
name|void
name|testByteBuffers
parameter_list|()
throws|throws
name|IOException
block|{
name|DataOutputByteBuffer
name|dob
init|=
operator|new
name|DataOutputByteBuffer
argument_list|()
decl_stmt|;
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|long
name|seed
init|=
name|r
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|r
operator|.
name|setSeed
argument_list|(
name|seed
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"SEED: "
operator|+
name|seed
argument_list|)
expr_stmt|;
name|writeJunk
argument_list|(
name|dob
argument_list|,
name|r
argument_list|,
name|seed
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|DataInputByteBuffer
name|dib
init|=
operator|new
name|DataInputByteBuffer
argument_list|()
decl_stmt|;
name|dib
operator|.
name|reset
argument_list|(
name|dob
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
name|readJunk
argument_list|(
name|dib
argument_list|,
name|r
argument_list|,
name|seed
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|dob
operator|.
name|reset
argument_list|()
expr_stmt|;
name|writeJunk
argument_list|(
name|dob
argument_list|,
name|r
argument_list|,
name|seed
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|dib
operator|.
name|reset
argument_list|(
name|dob
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
name|readJunk
argument_list|(
name|dib
argument_list|,
name|r
argument_list|,
name|seed
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
block|}
DECL|method|toBytes (ByteBuffer[] bufs, int len)
specifier|private
specifier|static
name|byte
index|[]
name|toBytes
parameter_list|(
name|ByteBuffer
index|[]
name|bufs
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|byte
index|[]
name|ret
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bufs
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|int
name|rem
init|=
name|bufs
index|[
name|i
index|]
operator|.
name|remaining
argument_list|()
decl_stmt|;
name|bufs
index|[
name|i
index|]
operator|.
name|get
argument_list|(
name|ret
argument_list|,
name|pos
argument_list|,
name|rem
argument_list|)
expr_stmt|;
name|pos
operator|+=
name|rem
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Test
DECL|method|testDataOutputByteBufferCompatibility ()
specifier|public
name|void
name|testDataOutputByteBufferCompatibility
parameter_list|()
throws|throws
name|IOException
block|{
name|DataOutputBuffer
name|dob
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|DataOutputByteBuffer
name|dobb
init|=
operator|new
name|DataOutputByteBuffer
argument_list|()
decl_stmt|;
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|long
name|seed
init|=
name|r
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|r
operator|.
name|setSeed
argument_list|(
name|seed
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"SEED: "
operator|+
name|seed
argument_list|)
expr_stmt|;
name|writeJunk
argument_list|(
name|dob
argument_list|,
name|r
argument_list|,
name|seed
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|writeJunk
argument_list|(
name|dobb
argument_list|,
name|r
argument_list|,
name|seed
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|byte
index|[]
name|check
init|=
name|toBytes
argument_list|(
name|dobb
operator|.
name|getData
argument_list|()
argument_list|,
name|dobb
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|dob
operator|.
name|getLength
argument_list|()
argument_list|,
name|check
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|dob
operator|.
name|getData
argument_list|()
argument_list|,
name|dob
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|,
name|check
argument_list|)
expr_stmt|;
name|dob
operator|.
name|reset
argument_list|()
expr_stmt|;
name|dobb
operator|.
name|reset
argument_list|()
expr_stmt|;
name|writeJunk
argument_list|(
name|dob
argument_list|,
name|r
argument_list|,
name|seed
argument_list|,
literal|3000
argument_list|)
expr_stmt|;
name|writeJunk
argument_list|(
name|dobb
argument_list|,
name|r
argument_list|,
name|seed
argument_list|,
literal|3000
argument_list|)
expr_stmt|;
name|check
operator|=
name|toBytes
argument_list|(
name|dobb
operator|.
name|getData
argument_list|()
argument_list|,
name|dobb
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dob
operator|.
name|getLength
argument_list|()
argument_list|,
name|check
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|dob
operator|.
name|getData
argument_list|()
argument_list|,
name|dob
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|,
name|check
argument_list|)
expr_stmt|;
name|dob
operator|.
name|reset
argument_list|()
expr_stmt|;
name|dobb
operator|.
name|reset
argument_list|()
expr_stmt|;
name|writeJunk
argument_list|(
name|dob
argument_list|,
name|r
argument_list|,
name|seed
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|writeJunk
argument_list|(
name|dobb
argument_list|,
name|r
argument_list|,
name|seed
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|check
operator|=
name|toBytes
argument_list|(
name|dobb
operator|.
name|getData
argument_list|()
argument_list|,
name|dobb
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dob
operator|.
name|getLength
argument_list|()
argument_list|,
name|check
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|dob
operator|.
name|getData
argument_list|()
argument_list|,
name|dob
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|,
name|check
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|TestDataInputByteBufferCompatibility ()
specifier|public
name|void
name|TestDataInputByteBufferCompatibility
parameter_list|()
throws|throws
name|IOException
block|{
name|DataOutputBuffer
name|dob
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|long
name|seed
init|=
name|r
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|r
operator|.
name|setSeed
argument_list|(
name|seed
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"SEED: "
operator|+
name|seed
argument_list|)
expr_stmt|;
name|writeJunk
argument_list|(
name|dob
argument_list|,
name|r
argument_list|,
name|seed
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|ByteBuffer
name|buf
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|dob
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|dob
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
name|DataInputByteBuffer
name|dib
init|=
operator|new
name|DataInputByteBuffer
argument_list|()
decl_stmt|;
name|dib
operator|.
name|reset
argument_list|(
name|buf
argument_list|)
expr_stmt|;
name|readJunk
argument_list|(
name|dib
argument_list|,
name|r
argument_list|,
name|seed
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|TestDataOutputByteBufferCompatibility ()
specifier|public
name|void
name|TestDataOutputByteBufferCompatibility
parameter_list|()
throws|throws
name|IOException
block|{
name|DataOutputByteBuffer
name|dob
init|=
operator|new
name|DataOutputByteBuffer
argument_list|()
decl_stmt|;
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|long
name|seed
init|=
name|r
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|r
operator|.
name|setSeed
argument_list|(
name|seed
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"SEED: "
operator|+
name|seed
argument_list|)
expr_stmt|;
name|writeJunk
argument_list|(
name|dob
argument_list|,
name|r
argument_list|,
name|seed
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|ByteBuffer
name|buf
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|dob
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ByteBuffer
name|b
range|:
name|dob
operator|.
name|getData
argument_list|()
control|)
block|{
name|buf
operator|.
name|put
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|flip
argument_list|()
expr_stmt|;
name|DataInputBuffer
name|dib
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
name|dib
operator|.
name|reset
argument_list|(
name|buf
operator|.
name|array
argument_list|()
argument_list|,
literal|0
argument_list|,
name|buf
operator|.
name|remaining
argument_list|()
argument_list|)
expr_stmt|;
name|readJunk
argument_list|(
name|dib
argument_list|,
name|r
argument_list|,
name|seed
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

