begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ipc
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|Sasl
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|ipc
operator|.
name|AvroRemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|util
operator|.
name|Utf8
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|TestSaslRPC
operator|.
name|CustomSecurityInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|TestSaslRPC
operator|.
name|TestTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|TestSaslRPC
operator|.
name|TestTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SaslRpcServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_comment
comment|/** Unit tests for AvroRpc. */
end_comment

begin_class
DECL|class|TestAvroRpc
specifier|public
class|class
name|TestAvroRpc
extends|extends
name|TestCase
block|{
DECL|field|ADDRESS
specifier|private
specifier|static
specifier|final
name|String
name|ADDRESS
init|=
literal|"0.0.0.0"
decl_stmt|;
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestAvroRpc
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|datasize
name|int
name|datasize
init|=
literal|1024
operator|*
literal|100
decl_stmt|;
DECL|field|numThreads
name|int
name|numThreads
init|=
literal|50
decl_stmt|;
DECL|method|TestAvroRpc (String name)
specifier|public
name|TestAvroRpc
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
DECL|class|TestImpl
specifier|public
specifier|static
class|class
name|TestImpl
implements|implements
name|AvroTestProtocol
block|{
DECL|method|ping ()
specifier|public
name|void
name|ping
parameter_list|()
block|{}
DECL|method|echo (String value)
specifier|public
name|String
name|echo
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
name|value
return|;
block|}
DECL|method|add (int v1, int v2)
specifier|public
name|int
name|add
parameter_list|(
name|int
name|v1
parameter_list|,
name|int
name|v2
parameter_list|)
block|{
return|return
name|v1
operator|+
name|v2
return|;
block|}
DECL|method|error ()
specifier|public
name|int
name|error
parameter_list|()
throws|throws
name|Problem
block|{
throw|throw
operator|new
name|Problem
argument_list|()
throw|;
block|}
block|}
DECL|method|testReflect ()
specifier|public
name|void
name|testReflect
parameter_list|()
throws|throws
name|Exception
block|{
name|testReflect
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testSecureReflect ()
specifier|public
name|void
name|testSecureReflect
parameter_list|()
throws|throws
name|Exception
block|{
name|testReflect
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testSpecific ()
specifier|public
name|void
name|testSpecific
parameter_list|()
throws|throws
name|Exception
block|{
name|testSpecific
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testSecureSpecific ()
specifier|public
name|void
name|testSecureSpecific
parameter_list|()
throws|throws
name|Exception
block|{
name|testSpecific
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testReflect (boolean secure)
specifier|private
name|void
name|testReflect
parameter_list|(
name|boolean
name|secure
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|TestTokenSecretManager
name|sm
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|secure
condition|)
block|{
name|makeSecure
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|sm
operator|=
operator|new
name|TestTokenSecretManager
argument_list|()
expr_stmt|;
block|}
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|RPC
operator|.
name|setProtocolEngine
argument_list|(
name|conf
argument_list|,
name|AvroTestProtocol
operator|.
name|class
argument_list|,
name|AvroRpcEngine
operator|.
name|class
argument_list|)
expr_stmt|;
name|Server
name|server
init|=
name|RPC
operator|.
name|getServer
argument_list|(
name|AvroTestProtocol
operator|.
name|class
argument_list|,
operator|new
name|TestImpl
argument_list|()
argument_list|,
name|ADDRESS
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|,
literal|true
argument_list|,
name|conf
argument_list|,
name|sm
argument_list|)
decl_stmt|;
try|try
block|{
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|InetSocketAddress
name|addr
init|=
name|NetUtils
operator|.
name|getConnectAddress
argument_list|(
name|server
argument_list|)
decl_stmt|;
if|if
condition|(
name|secure
condition|)
block|{
name|addToken
argument_list|(
name|sm
argument_list|,
name|addr
argument_list|)
expr_stmt|;
comment|//QOP must be auth
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"auth"
argument_list|,
name|SaslRpcServer
operator|.
name|SASL_PROPS
operator|.
name|get
argument_list|(
name|Sasl
operator|.
name|QOP
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|AvroTestProtocol
name|proxy
init|=
operator|(
name|AvroTestProtocol
operator|)
name|RPC
operator|.
name|getProxy
argument_list|(
name|AvroTestProtocol
operator|.
name|class
argument_list|,
literal|0
argument_list|,
name|addr
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|proxy
operator|.
name|ping
argument_list|()
expr_stmt|;
name|String
name|echo
init|=
name|proxy
operator|.
name|echo
argument_list|(
literal|"hello world"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"hello world"
argument_list|,
name|echo
argument_list|)
expr_stmt|;
name|int
name|intResult
init|=
name|proxy
operator|.
name|add
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|intResult
argument_list|)
expr_stmt|;
name|boolean
name|caught
init|=
literal|false
decl_stmt|;
try|try
block|{
name|proxy
operator|.
name|error
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AvroRemoteException
name|e
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Caught "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
name|caught
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|resetSecurity
argument_list|()
expr_stmt|;
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|makeSecure (Configuration conf)
specifier|private
name|void
name|makeSecure
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.rpc.socket.factory.class.default"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
comment|//Avro doesn't work with security annotations on protocol.
comment|//Avro works ONLY with custom security context
name|SecurityUtil
operator|.
name|setSecurityInfoProviders
argument_list|(
operator|new
name|CustomSecurityInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|resetSecurity ()
specifier|private
name|void
name|resetSecurity
parameter_list|()
block|{
name|SecurityUtil
operator|.
name|setSecurityInfoProviders
argument_list|(
operator|new
name|SecurityInfo
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|addToken (TestTokenSecretManager sm, InetSocketAddress addr)
specifier|private
name|void
name|addToken
parameter_list|(
name|TestTokenSecretManager
name|sm
parameter_list|,
name|InetSocketAddress
name|addr
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|UserGroupInformation
name|current
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|TestTokenIdentifier
name|tokenId
init|=
operator|new
name|TestTokenIdentifier
argument_list|(
operator|new
name|Text
argument_list|(
name|current
operator|.
name|getUserName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|TestTokenIdentifier
argument_list|>
name|token
init|=
operator|new
name|Token
argument_list|<
name|TestTokenIdentifier
argument_list|>
argument_list|(
name|tokenId
argument_list|,
name|sm
argument_list|)
decl_stmt|;
name|Text
name|host
init|=
operator|new
name|Text
argument_list|(
name|addr
operator|.
name|getAddress
argument_list|()
operator|.
name|getHostAddress
argument_list|()
operator|+
literal|":"
operator|+
name|addr
operator|.
name|getPort
argument_list|()
argument_list|)
decl_stmt|;
name|token
operator|.
name|setService
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Service IP address for token is "
operator|+
name|host
argument_list|)
expr_stmt|;
name|current
operator|.
name|addToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
DECL|method|testSpecific (boolean secure)
specifier|private
name|void
name|testSpecific
parameter_list|(
name|boolean
name|secure
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|TestTokenSecretManager
name|sm
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|secure
condition|)
block|{
name|makeSecure
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|sm
operator|=
operator|new
name|TestTokenSecretManager
argument_list|()
expr_stmt|;
block|}
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|RPC
operator|.
name|setProtocolEngine
argument_list|(
name|conf
argument_list|,
name|AvroSpecificTestProtocol
operator|.
name|class
argument_list|,
name|AvroSpecificRpcEngine
operator|.
name|class
argument_list|)
expr_stmt|;
name|Server
name|server
init|=
name|RPC
operator|.
name|getServer
argument_list|(
name|AvroSpecificTestProtocol
operator|.
name|class
argument_list|,
operator|new
name|AvroSpecificTestProtocolImpl
argument_list|()
argument_list|,
name|ADDRESS
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|,
literal|true
argument_list|,
name|conf
argument_list|,
name|sm
argument_list|)
decl_stmt|;
try|try
block|{
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|InetSocketAddress
name|addr
init|=
name|NetUtils
operator|.
name|getConnectAddress
argument_list|(
name|server
argument_list|)
decl_stmt|;
if|if
condition|(
name|secure
condition|)
block|{
name|addToken
argument_list|(
name|sm
argument_list|,
name|addr
argument_list|)
expr_stmt|;
comment|//QOP must be auth
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"auth"
argument_list|,
name|SaslRpcServer
operator|.
name|SASL_PROPS
operator|.
name|get
argument_list|(
name|Sasl
operator|.
name|QOP
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|AvroSpecificTestProtocol
name|proxy
init|=
operator|(
name|AvroSpecificTestProtocol
operator|)
name|RPC
operator|.
name|getProxy
argument_list|(
name|AvroSpecificTestProtocol
operator|.
name|class
argument_list|,
literal|0
argument_list|,
name|addr
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Utf8
name|echo
init|=
name|proxy
operator|.
name|echo
argument_list|(
operator|new
name|Utf8
argument_list|(
literal|"hello world"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"hello world"
argument_list|,
name|echo
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|intResult
init|=
name|proxy
operator|.
name|add
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|intResult
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|resetSecurity
argument_list|()
expr_stmt|;
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|AvroSpecificTestProtocolImpl
specifier|public
specifier|static
class|class
name|AvroSpecificTestProtocolImpl
implements|implements
name|AvroSpecificTestProtocol
block|{
annotation|@
name|Override
DECL|method|add (int arg1, int arg2)
specifier|public
name|int
name|add
parameter_list|(
name|int
name|arg1
parameter_list|,
name|int
name|arg2
parameter_list|)
throws|throws
name|AvroRemoteException
block|{
return|return
name|arg1
operator|+
name|arg2
return|;
block|}
annotation|@
name|Override
DECL|method|echo (Utf8 msg)
specifier|public
name|Utf8
name|echo
parameter_list|(
name|Utf8
name|msg
parameter_list|)
throws|throws
name|AvroRemoteException
block|{
return|return
name|msg
return|;
block|}
block|}
block|}
end_class

end_unit

