begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedOutputStream
import|;
end_import

begin_class
DECL|class|TestProtoUtil
specifier|public
class|class
name|TestProtoUtil
block|{
comment|/**    * Values to test encoding as variable length integers    */
DECL|field|TEST_VINT_VALUES
specifier|private
specifier|static
specifier|final
name|int
index|[]
name|TEST_VINT_VALUES
init|=
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
operator|-
literal|1
block|,
literal|127
block|,
literal|128
block|,
literal|129
block|,
literal|255
block|,
literal|256
block|,
literal|257
block|,
literal|0x1234
block|,
operator|-
literal|0x1234
block|,
literal|0x123456
block|,
operator|-
literal|0x123456
block|,
literal|0x12345678
block|,
operator|-
literal|0x12345678
block|}
decl_stmt|;
comment|/**    * Test that readRawVarint32 is compatible with the varints encoded    * by ProtoBuf's CodedOutputStream.    */
annotation|@
name|Test
DECL|method|testVarInt ()
specifier|public
name|void
name|testVarInt
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Test a few manufactured values
for|for
control|(
name|int
name|value
range|:
name|TEST_VINT_VALUES
control|)
block|{
name|doVarIntTest
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
comment|// Check 1-bits at every bit position
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|!=
literal|0
condition|;
name|i
operator|<<=
literal|1
control|)
block|{
name|doVarIntTest
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|doVarIntTest
argument_list|(
operator|-
name|i
argument_list|)
expr_stmt|;
name|doVarIntTest
argument_list|(
name|i
operator|-
literal|1
argument_list|)
expr_stmt|;
name|doVarIntTest
argument_list|(
operator|~
name|i
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doVarIntTest (int value)
specifier|private
name|void
name|doVarIntTest
parameter_list|(
name|int
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|CodedOutputStream
name|cout
init|=
name|CodedOutputStream
operator|.
name|newInstance
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|cout
operator|.
name|writeRawVarint32
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|cout
operator|.
name|flush
argument_list|()
expr_stmt|;
name|DataInputStream
name|dis
init|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
name|ProtoUtil
operator|.
name|readRawVarint32
argument_list|(
name|dis
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

