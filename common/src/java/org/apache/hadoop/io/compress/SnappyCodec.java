begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.compress
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|snappy
operator|.
name|SnappyCompressor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|snappy
operator|.
name|SnappyDecompressor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xerial
operator|.
name|snappy
operator|.
name|Snappy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xerial
operator|.
name|snappy
operator|.
name|SnappyError
import|;
end_import

begin_class
DECL|class|SnappyCodec
specifier|public
class|class
name|SnappyCodec
implements|implements
name|Configurable
implements|,
name|CompressionCodec
block|{
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|Log
name|logger
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SnappyCodec
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|nativeSnappyLoaded
specifier|private
specifier|static
name|boolean
name|nativeSnappyLoaded
init|=
literal|false
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|SNAPPY_BUFFER_SIZE_KEY
specifier|public
specifier|static
specifier|final
name|String
name|SNAPPY_BUFFER_SIZE_KEY
init|=
literal|"io.compression.codec.snappy.buffersize"
decl_stmt|;
DECL|field|DEFAULT_SNAPPY_BUFFER_SIZE
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_SNAPPY_BUFFER_SIZE
init|=
literal|256
operator|*
literal|1024
decl_stmt|;
DECL|method|SnappyCodec ()
specifier|public
name|SnappyCodec
parameter_list|()
block|{    }
DECL|method|SnappyCodec (Configuration conf)
specifier|public
name|SnappyCodec
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|setConf (Configuration conf)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
DECL|method|getConf ()
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
static|static
block|{
try|try
block|{
if|if
condition|(
name|Snappy
operator|.
name|getNativeLibraryVersion
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Successfully loaded& initialized native-snappy library [snappy-java rev "
operator|+
name|Snappy
operator|.
name|getNativeLibraryVersion
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|nativeSnappyLoaded
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Failed to load native-snappy library"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SnappyError
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Native Snappy load error: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isNativeSnappyLoaded (Configuration conf)
specifier|public
specifier|static
name|boolean
name|isNativeSnappyLoaded
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|nativeSnappyLoaded
return|;
block|}
DECL|method|createOutputStream (OutputStream out)
specifier|public
name|CompressionOutputStream
name|createOutputStream
parameter_list|(
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createOutputStream
argument_list|(
name|out
argument_list|,
name|createCompressor
argument_list|()
argument_list|)
return|;
block|}
DECL|method|createOutputStream (OutputStream out, Compressor compressor)
specifier|public
name|CompressionOutputStream
name|createOutputStream
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|Compressor
name|compressor
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|isNativeSnappyLoaded
argument_list|(
name|conf
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"native-snappy library not available"
argument_list|)
throw|;
block|}
name|int
name|bufferSize
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|SNAPPY_BUFFER_SIZE_KEY
argument_list|,
name|DEFAULT_SNAPPY_BUFFER_SIZE
argument_list|)
decl_stmt|;
name|int
name|compressionOverhead
init|=
name|Snappy
operator|.
name|maxCompressedLength
argument_list|(
name|bufferSize
argument_list|)
operator|-
name|bufferSize
decl_stmt|;
return|return
operator|new
name|BlockCompressorStream
argument_list|(
name|out
argument_list|,
name|compressor
argument_list|,
name|bufferSize
argument_list|,
name|compressionOverhead
argument_list|)
return|;
block|}
DECL|method|getCompressorType ()
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Compressor
argument_list|>
name|getCompressorType
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isNativeSnappyLoaded
argument_list|(
name|conf
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"native-snappy library not available"
argument_list|)
throw|;
block|}
return|return
name|SnappyCompressor
operator|.
name|class
return|;
block|}
DECL|method|createCompressor ()
specifier|public
name|Compressor
name|createCompressor
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isNativeSnappyLoaded
argument_list|(
name|conf
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"native-snappy library not available"
argument_list|)
throw|;
block|}
return|return
operator|new
name|SnappyCompressor
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|SNAPPY_BUFFER_SIZE_KEY
argument_list|,
name|DEFAULT_SNAPPY_BUFFER_SIZE
argument_list|)
argument_list|)
return|;
block|}
DECL|method|createInputStream (InputStream in)
specifier|public
name|CompressionInputStream
name|createInputStream
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createInputStream
argument_list|(
name|in
argument_list|,
name|createDecompressor
argument_list|()
argument_list|)
return|;
block|}
DECL|method|createInputStream (InputStream in, Decompressor decompressor)
specifier|public
name|CompressionInputStream
name|createInputStream
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|Decompressor
name|decompressor
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|isNativeSnappyLoaded
argument_list|(
name|conf
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"native-snappy library not available"
argument_list|)
throw|;
block|}
return|return
operator|new
name|BlockDecompressorStream
argument_list|(
name|in
argument_list|,
name|decompressor
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
name|SNAPPY_BUFFER_SIZE_KEY
argument_list|,
name|DEFAULT_SNAPPY_BUFFER_SIZE
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getDecompressorType ()
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Decompressor
argument_list|>
name|getDecompressorType
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isNativeSnappyLoaded
argument_list|(
name|conf
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"native-snappy library not available"
argument_list|)
throw|;
block|}
return|return
name|SnappyDecompressor
operator|.
name|class
return|;
block|}
DECL|method|createDecompressor ()
specifier|public
name|Decompressor
name|createDecompressor
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isNativeSnappyLoaded
argument_list|(
name|conf
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"native-snappy library not available"
argument_list|)
throw|;
block|}
return|return
operator|new
name|SnappyDecompressor
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|SNAPPY_BUFFER_SIZE_KEY
argument_list|,
name|DEFAULT_SNAPPY_BUFFER_SIZE
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getDefaultExtension ()
specifier|public
name|String
name|getDefaultExtension
parameter_list|()
block|{
return|return
literal|".snappy"
return|;
block|}
block|}
end_class

end_unit

