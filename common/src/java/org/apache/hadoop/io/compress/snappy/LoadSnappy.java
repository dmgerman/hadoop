begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.compress.snappy
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|snappy
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|NativeCodeLoader
import|;
end_import

begin_comment
comment|/**  * Determines if Snappy native library is available and loads it if available.  */
end_comment

begin_class
DECL|class|LoadSnappy
specifier|public
class|class
name|LoadSnappy
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|LoadSnappy
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|AVAILABLE
specifier|private
specifier|static
name|boolean
name|AVAILABLE
init|=
literal|false
decl_stmt|;
DECL|field|LOADED
specifier|private
specifier|static
name|boolean
name|LOADED
init|=
literal|false
decl_stmt|;
static|static
block|{
try|try
block|{
name|System
operator|.
name|loadLibrary
argument_list|(
literal|"snappy"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Snappy native library is available"
argument_list|)
expr_stmt|;
name|AVAILABLE
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsatisfiedLinkError
name|ex
parameter_list|)
block|{
comment|//NOP
block|}
name|boolean
name|hadoopNativeAvailable
init|=
name|NativeCodeLoader
operator|.
name|isNativeCodeLoaded
argument_list|()
decl_stmt|;
name|LOADED
operator|=
name|AVAILABLE
operator|&&
name|hadoopNativeAvailable
expr_stmt|;
if|if
condition|(
name|LOADED
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Snappy native library loaded"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Snappy native library not loaded"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Returns if Snappy native library is loaded.    *    * @return<code>true</code> if Snappy native library is loaded,    *<code>false</code> if not.    */
DECL|method|isAvailable ()
specifier|public
specifier|static
name|boolean
name|isAvailable
parameter_list|()
block|{
return|return
name|AVAILABLE
return|;
block|}
comment|/**    * Returns if Snappy native library is loaded.    *    * @return<code>true</code> if Snappy native library is loaded,    *<code>false</code> if not.    */
DECL|method|isLoaded ()
specifier|public
specifier|static
name|boolean
name|isLoaded
parameter_list|()
block|{
return|return
name|LOADED
return|;
block|}
block|}
end_class

end_unit

