begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_class
DECL|class|DataOutputByteBuffer
specifier|public
class|class
name|DataOutputByteBuffer
extends|extends
name|DataOutputStream
block|{
DECL|class|Buffer
specifier|static
class|class
name|Buffer
extends|extends
name|OutputStream
block|{
DECL|field|b
specifier|final
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
literal|1
index|]
decl_stmt|;
DECL|field|direct
specifier|final
name|boolean
name|direct
decl_stmt|;
DECL|field|active
specifier|final
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|active
init|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|inactive
specifier|final
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|inactive
init|=
operator|new
name|LinkedList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|size
name|int
name|size
decl_stmt|;
DECL|field|length
name|int
name|length
decl_stmt|;
DECL|field|current
name|ByteBuffer
name|current
decl_stmt|;
DECL|method|Buffer (int size, boolean direct)
name|Buffer
parameter_list|(
name|int
name|size
parameter_list|,
name|boolean
name|direct
parameter_list|)
block|{
name|this
operator|.
name|direct
operator|=
name|direct
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
name|current
operator|=
name|direct
condition|?
name|ByteBuffer
operator|.
name|allocateDirect
argument_list|(
name|size
argument_list|)
else|:
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (int b)
specifier|public
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
block|{
name|this
operator|.
name|b
index|[
literal|0
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|b
operator|&
literal|0xFF
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|this
operator|.
name|b
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (byte[] b)
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
block|{
name|write
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (byte[] b, int off, int len)
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|int
name|rem
init|=
name|current
operator|.
name|remaining
argument_list|()
decl_stmt|;
while|while
condition|(
name|len
operator|>
name|rem
condition|)
block|{
name|current
operator|.
name|put
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|rem
argument_list|)
expr_stmt|;
name|length
operator|+=
name|rem
expr_stmt|;
name|current
operator|.
name|flip
argument_list|()
expr_stmt|;
name|active
operator|.
name|add
argument_list|(
name|current
argument_list|)
expr_stmt|;
name|off
operator|+=
name|rem
expr_stmt|;
name|len
operator|-=
name|rem
expr_stmt|;
name|rem
operator|=
name|getBuffer
argument_list|(
name|len
argument_list|)
expr_stmt|;
block|}
name|current
operator|.
name|put
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|length
operator|+=
name|len
expr_stmt|;
block|}
DECL|method|getBuffer (int newsize)
name|int
name|getBuffer
parameter_list|(
name|int
name|newsize
parameter_list|)
block|{
if|if
condition|(
name|inactive
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|size
operator|=
name|Math
operator|.
name|max
argument_list|(
name|size
operator|<<
literal|1
argument_list|,
name|newsize
argument_list|)
expr_stmt|;
name|current
operator|=
name|direct
condition|?
name|ByteBuffer
operator|.
name|allocateDirect
argument_list|(
name|size
argument_list|)
else|:
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|current
operator|=
name|inactive
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
name|current
operator|.
name|remaining
argument_list|()
return|;
block|}
DECL|method|getData ()
name|ByteBuffer
index|[]
name|getData
parameter_list|()
block|{
name|ByteBuffer
index|[]
name|ret
init|=
name|active
operator|.
name|toArray
argument_list|(
operator|new
name|ByteBuffer
index|[
name|active
operator|.
name|size
argument_list|()
operator|+
literal|1
index|]
argument_list|)
decl_stmt|;
name|ByteBuffer
name|tmp
init|=
name|current
operator|.
name|duplicate
argument_list|()
decl_stmt|;
name|tmp
operator|.
name|flip
argument_list|()
expr_stmt|;
name|ret
index|[
name|ret
operator|.
name|length
operator|-
literal|1
index|]
operator|=
name|tmp
operator|.
name|slice
argument_list|()
expr_stmt|;
return|return
name|ret
return|;
block|}
DECL|method|getLength ()
name|int
name|getLength
parameter_list|()
block|{
return|return
name|length
return|;
block|}
DECL|method|reset ()
name|void
name|reset
parameter_list|()
block|{
name|length
operator|=
literal|0
expr_stmt|;
name|current
operator|.
name|rewind
argument_list|()
expr_stmt|;
name|inactive
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|current
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|active
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
name|ByteBuffer
name|b
init|=
name|active
operator|.
name|remove
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|b
operator|.
name|rewind
argument_list|()
expr_stmt|;
name|inactive
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
name|current
operator|=
name|inactive
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|buffers
specifier|private
specifier|final
name|Buffer
name|buffers
decl_stmt|;
DECL|method|DataOutputByteBuffer ()
specifier|public
name|DataOutputByteBuffer
parameter_list|()
block|{
name|this
argument_list|(
literal|32
argument_list|)
expr_stmt|;
block|}
DECL|method|DataOutputByteBuffer (int size)
specifier|public
name|DataOutputByteBuffer
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|this
argument_list|(
name|size
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|DataOutputByteBuffer (int size, boolean direct)
specifier|public
name|DataOutputByteBuffer
parameter_list|(
name|int
name|size
parameter_list|,
name|boolean
name|direct
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|Buffer
argument_list|(
name|size
argument_list|,
name|direct
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|DataOutputByteBuffer (Buffer buffers)
specifier|private
name|DataOutputByteBuffer
parameter_list|(
name|Buffer
name|buffers
parameter_list|)
block|{
name|super
argument_list|(
name|buffers
argument_list|)
expr_stmt|;
name|this
operator|.
name|buffers
operator|=
name|buffers
expr_stmt|;
block|}
DECL|method|getData ()
specifier|public
name|ByteBuffer
index|[]
name|getData
parameter_list|()
block|{
return|return
name|buffers
operator|.
name|getData
argument_list|()
return|;
block|}
DECL|method|getLength ()
specifier|public
name|int
name|getLength
parameter_list|()
block|{
return|return
name|buffers
operator|.
name|getLength
argument_list|()
return|;
block|}
DECL|method|reset ()
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|this
operator|.
name|written
operator|=
literal|0
expr_stmt|;
name|buffers
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

