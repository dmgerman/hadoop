begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.metrics2.lib
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsException
import|;
end_import

begin_comment
comment|/**  * Experimental interface to extend metrics dynamically  */
end_comment

begin_enum
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|enum|DefaultMetricsFactory
specifier|public
enum|enum
name|DefaultMetricsFactory
block|{
DECL|enumConstant|INSTANCE
name|INSTANCE
block|;
comment|// the singleton
DECL|field|mmfImpl
specifier|private
name|MutableMetricsFactory
name|mmfImpl
decl_stmt|;
DECL|method|getAnnotatedMetricsFactory ()
specifier|public
specifier|static
name|MutableMetricsFactory
name|getAnnotatedMetricsFactory
parameter_list|()
block|{
return|return
name|INSTANCE
operator|.
name|getInstance
argument_list|(
name|MutableMetricsFactory
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getInstance (Class<T> cls)
specifier|public
specifier|synchronized
parameter_list|<
name|T
parameter_list|>
name|T
name|getInstance
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|cls
parameter_list|)
block|{
if|if
condition|(
name|cls
operator|==
name|MutableMetricsFactory
operator|.
name|class
condition|)
block|{
if|if
condition|(
name|mmfImpl
operator|==
literal|null
condition|)
block|{
name|mmfImpl
operator|=
operator|new
name|MutableMetricsFactory
argument_list|()
expr_stmt|;
block|}
return|return
operator|(
name|T
operator|)
name|mmfImpl
return|;
block|}
throw|throw
operator|new
name|MetricsException
argument_list|(
literal|"Unknown metrics factory type: "
operator|+
name|cls
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
DECL|method|setInstance (MutableMetricsFactory factory)
specifier|public
specifier|synchronized
name|void
name|setInstance
parameter_list|(
name|MutableMetricsFactory
name|factory
parameter_list|)
block|{
name|mmfImpl
operator|=
name|factory
expr_stmt|;
block|}
block|}
end_enum

end_unit

