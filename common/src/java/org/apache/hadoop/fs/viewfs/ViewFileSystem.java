begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.viewfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|viewfs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|viewfs
operator|.
name|Constants
operator|.
name|PERMISSION_RRR
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BlockLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileChecksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|InvalidPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|UnsupportedFileSystemException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|viewfs
operator|.
name|InodeTree
operator|.
name|INode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|viewfs
operator|.
name|InodeTree
operator|.
name|INodeLink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_comment
comment|/**  * ViewFileSystem (extends the FileSystem interface) implements a client-side  * mount table. Its spec and implementation is identical to {@link ViewFs}.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
comment|/*Evolving for a release,to be changed to Stable */
DECL|class|ViewFileSystem
specifier|public
class|class
name|ViewFileSystem
extends|extends
name|FileSystem
block|{
DECL|method|readOnlyMountTable (final String operation, final String p)
specifier|static
name|AccessControlException
name|readOnlyMountTable
parameter_list|(
specifier|final
name|String
name|operation
parameter_list|,
specifier|final
name|String
name|p
parameter_list|)
block|{
return|return
operator|new
name|AccessControlException
argument_list|(
literal|"InternalDir of ViewFileSystem is readonly; operation="
operator|+
name|operation
operator|+
literal|"Path="
operator|+
name|p
argument_list|)
return|;
block|}
DECL|method|readOnlyMountTable (final String operation, final Path p)
specifier|static
name|AccessControlException
name|readOnlyMountTable
parameter_list|(
specifier|final
name|String
name|operation
parameter_list|,
specifier|final
name|Path
name|p
parameter_list|)
block|{
return|return
name|readOnlyMountTable
argument_list|(
name|operation
argument_list|,
name|p
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
DECL|class|MountPoint
specifier|static
specifier|public
class|class
name|MountPoint
block|{
DECL|field|src
specifier|private
name|Path
name|src
decl_stmt|;
comment|// the src of the mount
DECL|field|targets
specifier|private
name|URI
index|[]
name|targets
decl_stmt|;
comment|//  target of the mount; Multiple targets imply mergeMount
DECL|method|MountPoint (Path srcPath, URI[] targetURIs)
name|MountPoint
parameter_list|(
name|Path
name|srcPath
parameter_list|,
name|URI
index|[]
name|targetURIs
parameter_list|)
block|{
name|src
operator|=
name|srcPath
expr_stmt|;
name|targets
operator|=
name|targetURIs
expr_stmt|;
block|}
DECL|method|getSrc ()
name|Path
name|getSrc
parameter_list|()
block|{
return|return
name|src
return|;
block|}
DECL|method|getTargets ()
name|URI
index|[]
name|getTargets
parameter_list|()
block|{
return|return
name|targets
return|;
block|}
block|}
DECL|field|creationTime
specifier|final
name|long
name|creationTime
decl_stmt|;
comment|// of the the mount table
DECL|field|ugi
specifier|final
name|UserGroupInformation
name|ugi
decl_stmt|;
comment|// the user/group of user who created mtable
DECL|field|myUri
name|URI
name|myUri
decl_stmt|;
DECL|field|workingDir
specifier|private
name|Path
name|workingDir
decl_stmt|;
DECL|field|config
name|Configuration
name|config
decl_stmt|;
DECL|field|fsState
name|InodeTree
argument_list|<
name|FileSystem
argument_list|>
name|fsState
decl_stmt|;
comment|// the fs state; ie the mount table
DECL|field|homeDir
name|Path
name|homeDir
init|=
literal|null
decl_stmt|;
comment|/**    * Prohibits names which contain a ".", "..", ":" or "/"     */
DECL|method|isValidName (final String src)
specifier|private
specifier|static
name|boolean
name|isValidName
parameter_list|(
specifier|final
name|String
name|src
parameter_list|)
block|{
comment|// Check for ".." "." ":" "/"
specifier|final
name|StringTokenizer
name|tokens
init|=
operator|new
name|StringTokenizer
argument_list|(
name|src
argument_list|,
name|Path
operator|.
name|SEPARATOR
argument_list|)
decl_stmt|;
while|while
condition|(
name|tokens
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|element
init|=
name|tokens
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|element
operator|.
name|equals
argument_list|(
literal|".."
argument_list|)
operator|||
name|element
operator|.
name|equals
argument_list|(
literal|"."
argument_list|)
operator|||
operator|(
name|element
operator|.
name|indexOf
argument_list|(
literal|":"
argument_list|)
operator|>=
literal|0
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Make the path Absolute and get the path-part of a pathname.    * Checks that URI matches this file system     * and that the path-part is a valid name.    *     * @param p path    * @return path-part of the Path p    */
DECL|method|getUriPath (final Path p)
specifier|private
name|String
name|getUriPath
parameter_list|(
specifier|final
name|Path
name|p
parameter_list|)
block|{
name|checkPath
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|String
name|s
init|=
name|makeAbsolute
argument_list|(
name|p
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isValidName
argument_list|(
name|s
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidPathException
argument_list|(
literal|"Path part "
operator|+
name|s
operator|+
literal|" from URI"
operator|+
name|p
operator|+
literal|" is not a valid filename."
argument_list|)
throw|;
block|}
return|return
name|s
return|;
block|}
DECL|method|makeAbsolute (final Path f)
specifier|private
name|Path
name|makeAbsolute
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|)
block|{
return|return
name|f
operator|.
name|isAbsolute
argument_list|()
condition|?
name|f
else|:
operator|new
name|Path
argument_list|(
name|workingDir
argument_list|,
name|f
argument_list|)
return|;
block|}
comment|/**    * This is the  constructor with the signature needed by    * {@link FileSystem#createFileSystem(URI, Configuration)}    *     * After this constructor is called initialize() is called.    * @throws IOException     */
DECL|method|ViewFileSystem ()
specifier|public
name|ViewFileSystem
parameter_list|()
throws|throws
name|IOException
block|{
name|ugi
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
expr_stmt|;
name|creationTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
comment|/**    * Called after a new FileSystem instance is constructed.    * @param theUri a uri whose authority section names the host, port, etc. for    *          this FileSystem    * @param conf the configuration    */
DECL|method|initialize (final URI theUri, final Configuration conf)
specifier|public
name|void
name|initialize
parameter_list|(
specifier|final
name|URI
name|theUri
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|initialize
argument_list|(
name|theUri
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|config
operator|=
name|conf
expr_stmt|;
comment|// Now build  client side view (i.e. client side mount table) from config.
specifier|final
name|String
name|authority
init|=
name|theUri
operator|.
name|getAuthority
argument_list|()
decl_stmt|;
try|try
block|{
name|myUri
operator|=
operator|new
name|URI
argument_list|(
name|FsConstants
operator|.
name|VIEWFS_SCHEME
argument_list|,
name|authority
argument_list|,
literal|"/"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fsState
operator|=
operator|new
name|InodeTree
argument_list|<
name|FileSystem
argument_list|>
argument_list|(
name|conf
argument_list|,
name|authority
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|FileSystem
name|getTargetFileSystem
parameter_list|(
specifier|final
name|URI
name|uri
parameter_list|)
throws|throws
name|URISyntaxException
throws|,
name|IOException
block|{
return|return
operator|new
name|ChRootedFileSystem
argument_list|(
name|FileSystem
operator|.
name|get
argument_list|(
name|uri
argument_list|,
name|config
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|uri
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|FileSystem
name|getTargetFileSystem
parameter_list|(
specifier|final
name|INodeDir
argument_list|<
name|FileSystem
argument_list|>
name|dir
parameter_list|)
throws|throws
name|URISyntaxException
block|{
return|return
operator|new
name|InternalDirOfViewFs
argument_list|(
name|dir
argument_list|,
name|creationTime
argument_list|,
name|ugi
argument_list|,
name|myUri
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|FileSystem
name|getTargetFileSystem
parameter_list|(
name|URI
index|[]
name|mergeFsURIList
parameter_list|)
throws|throws
name|URISyntaxException
throws|,
name|UnsupportedFileSystemException
block|{
throw|throw
operator|new
name|UnsupportedFileSystemException
argument_list|(
literal|"mergefs not implemented"
argument_list|)
throw|;
comment|// return MergeFs.createMergeFs(mergeFsURIList, config);
block|}
block|}
expr_stmt|;
name|workingDir
operator|=
name|this
operator|.
name|getHomeDirectory
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"URISyntax exception: "
operator|+
name|theUri
argument_list|)
throw|;
block|}
block|}
comment|/**    * Convenience Constructor for apps to call directly    * @param theUri which must be that of ViewFileSystem    * @param conf    * @throws IOException    */
DECL|method|ViewFileSystem (final URI theUri, final Configuration conf)
name|ViewFileSystem
parameter_list|(
specifier|final
name|URI
name|theUri
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|()
expr_stmt|;
name|initialize
argument_list|(
name|theUri
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Convenience Constructor for apps to call directly    * @param conf    * @throws IOException    */
DECL|method|ViewFileSystem (final Configuration conf)
specifier|public
name|ViewFileSystem
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|FsConstants
operator|.
name|VIEWFS_URI
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|getTrashCanLocation (final Path f)
specifier|public
name|Path
name|getTrashCanLocation
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|)
throws|throws
name|FileNotFoundException
block|{
specifier|final
name|InodeTree
operator|.
name|ResolveResult
argument_list|<
name|FileSystem
argument_list|>
name|res
init|=
name|fsState
operator|.
name|resolve
argument_list|(
name|getUriPath
argument_list|(
name|f
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|res
operator|.
name|isInternalDir
argument_list|()
condition|?
literal|null
else|:
name|res
operator|.
name|targetFileSystem
operator|.
name|getHomeDirectory
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getUri ()
specifier|public
name|URI
name|getUri
parameter_list|()
block|{
return|return
name|myUri
return|;
block|}
annotation|@
name|Override
DECL|method|resolvePath (final Path f)
specifier|public
name|Path
name|resolvePath
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|InodeTree
operator|.
name|ResolveResult
argument_list|<
name|FileSystem
argument_list|>
name|res
decl_stmt|;
name|res
operator|=
name|fsState
operator|.
name|resolve
argument_list|(
name|getUriPath
argument_list|(
name|f
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|res
operator|.
name|isInternalDir
argument_list|()
condition|)
block|{
return|return
name|f
return|;
block|}
return|return
name|res
operator|.
name|targetFileSystem
operator|.
name|resolvePath
argument_list|(
name|res
operator|.
name|remainingPath
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getHomeDirectory ()
specifier|public
name|Path
name|getHomeDirectory
parameter_list|()
block|{
if|if
condition|(
name|homeDir
operator|==
literal|null
condition|)
block|{
name|String
name|base
init|=
name|fsState
operator|.
name|getHomeDirPrefixValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|base
operator|==
literal|null
condition|)
block|{
name|base
operator|=
literal|"/user"
expr_stmt|;
block|}
name|homeDir
operator|=
name|this
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|base
operator|+
literal|"/"
operator|+
name|ugi
operator|.
name|getShortUserName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|homeDir
return|;
block|}
annotation|@
name|Override
DECL|method|getWorkingDirectory ()
specifier|public
name|Path
name|getWorkingDirectory
parameter_list|()
block|{
return|return
name|workingDir
return|;
block|}
annotation|@
name|Override
DECL|method|setWorkingDirectory (final Path new_dir)
specifier|public
name|void
name|setWorkingDirectory
parameter_list|(
specifier|final
name|Path
name|new_dir
parameter_list|)
block|{
name|getUriPath
argument_list|(
name|new_dir
argument_list|)
expr_stmt|;
comment|// this validates the path
name|workingDir
operator|=
name|makeAbsolute
argument_list|(
name|new_dir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|append (final Path f, final int bufferSize, final Progressable progress)
specifier|public
name|FSDataOutputStream
name|append
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|,
specifier|final
name|int
name|bufferSize
parameter_list|,
specifier|final
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
name|InodeTree
operator|.
name|ResolveResult
argument_list|<
name|FileSystem
argument_list|>
name|res
init|=
name|fsState
operator|.
name|resolve
argument_list|(
name|getUriPath
argument_list|(
name|f
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|res
operator|.
name|targetFileSystem
operator|.
name|append
argument_list|(
name|res
operator|.
name|remainingPath
argument_list|,
name|bufferSize
argument_list|,
name|progress
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|create (final Path f, final FsPermission permission, final boolean overwrite, final int bufferSize, final short replication, final long blockSize, final Progressable progress)
specifier|public
name|FSDataOutputStream
name|create
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|,
specifier|final
name|FsPermission
name|permission
parameter_list|,
specifier|final
name|boolean
name|overwrite
parameter_list|,
specifier|final
name|int
name|bufferSize
parameter_list|,
specifier|final
name|short
name|replication
parameter_list|,
specifier|final
name|long
name|blockSize
parameter_list|,
specifier|final
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
name|InodeTree
operator|.
name|ResolveResult
argument_list|<
name|FileSystem
argument_list|>
name|res
decl_stmt|;
try|try
block|{
name|res
operator|=
name|fsState
operator|.
name|resolve
argument_list|(
name|getUriPath
argument_list|(
name|f
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
throw|throw
name|readOnlyMountTable
argument_list|(
literal|"create"
argument_list|,
name|f
argument_list|)
throw|;
block|}
assert|assert
operator|(
name|res
operator|.
name|remainingPath
operator|!=
literal|null
operator|)
assert|;
return|return
name|res
operator|.
name|targetFileSystem
operator|.
name|create
argument_list|(
name|res
operator|.
name|remainingPath
argument_list|,
name|permission
argument_list|,
name|overwrite
argument_list|,
name|bufferSize
argument_list|,
name|replication
argument_list|,
name|blockSize
argument_list|,
name|progress
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|delete (final Path f, final boolean recursive)
specifier|public
name|boolean
name|delete
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|,
specifier|final
name|boolean
name|recursive
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|FileNotFoundException
throws|,
name|IOException
block|{
name|InodeTree
operator|.
name|ResolveResult
argument_list|<
name|FileSystem
argument_list|>
name|res
init|=
name|fsState
operator|.
name|resolve
argument_list|(
name|getUriPath
argument_list|(
name|f
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// If internal dir or target is a mount link (ie remainingPath is Slash)
if|if
condition|(
name|res
operator|.
name|isInternalDir
argument_list|()
operator|||
name|res
operator|.
name|remainingPath
operator|==
name|InodeTree
operator|.
name|SlashPath
condition|)
block|{
throw|throw
name|readOnlyMountTable
argument_list|(
literal|"delete"
argument_list|,
name|f
argument_list|)
throw|;
block|}
return|return
name|res
operator|.
name|targetFileSystem
operator|.
name|delete
argument_list|(
name|res
operator|.
name|remainingPath
argument_list|,
name|recursive
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|delete (final Path f)
specifier|public
name|boolean
name|delete
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|FileNotFoundException
throws|,
name|IOException
block|{
return|return
name|delete
argument_list|(
name|f
argument_list|,
literal|true
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getFileBlockLocations (FileStatus fs, long start, long len)
specifier|public
name|BlockLocation
index|[]
name|getFileBlockLocations
parameter_list|(
name|FileStatus
name|fs
parameter_list|,
name|long
name|start
parameter_list|,
name|long
name|len
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|InodeTree
operator|.
name|ResolveResult
argument_list|<
name|FileSystem
argument_list|>
name|res
init|=
name|fsState
operator|.
name|resolve
argument_list|(
name|getUriPath
argument_list|(
name|fs
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|res
operator|.
name|targetFileSystem
operator|.
name|getFileBlockLocations
argument_list|(
operator|new
name|ViewFsFileStatus
argument_list|(
name|fs
argument_list|,
name|res
operator|.
name|remainingPath
argument_list|)
argument_list|,
name|start
argument_list|,
name|len
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getFileChecksum (final Path f)
specifier|public
name|FileChecksum
name|getFileChecksum
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|FileNotFoundException
throws|,
name|IOException
block|{
name|InodeTree
operator|.
name|ResolveResult
argument_list|<
name|FileSystem
argument_list|>
name|res
init|=
name|fsState
operator|.
name|resolve
argument_list|(
name|getUriPath
argument_list|(
name|f
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|res
operator|.
name|targetFileSystem
operator|.
name|getFileChecksum
argument_list|(
name|f
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getFileStatus (final Path f)
specifier|public
name|FileStatus
name|getFileStatus
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|FileNotFoundException
throws|,
name|IOException
block|{
name|InodeTree
operator|.
name|ResolveResult
argument_list|<
name|FileSystem
argument_list|>
name|res
init|=
name|fsState
operator|.
name|resolve
argument_list|(
name|getUriPath
argument_list|(
name|f
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// FileStatus#getPath is a fully qualified path relative to the root of
comment|// target file system.
comment|// We need to change it to viewfs URI - relative to root of mount table.
comment|// The implementors of RawLocalFileSystem were trying to be very smart.
comment|// They implement FileStatus#getOwener lazily -- the object
comment|// returned is really a RawLocalFileSystem that expect the
comment|// FileStatus#getPath to be unchanged so that it can get owner when needed.
comment|// Hence we need to interpose a new ViewFileSystemFileStatus that
comment|// works around.
name|FileStatus
name|status
init|=
name|res
operator|.
name|targetFileSystem
operator|.
name|getFileStatus
argument_list|(
name|res
operator|.
name|remainingPath
argument_list|)
decl_stmt|;
return|return
operator|new
name|ViewFsFileStatus
argument_list|(
name|status
argument_list|,
name|this
operator|.
name|makeQualified
argument_list|(
name|f
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|listStatus (final Path f)
specifier|public
name|FileStatus
index|[]
name|listStatus
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|FileNotFoundException
throws|,
name|IOException
block|{
name|InodeTree
operator|.
name|ResolveResult
argument_list|<
name|FileSystem
argument_list|>
name|res
init|=
name|fsState
operator|.
name|resolve
argument_list|(
name|getUriPath
argument_list|(
name|f
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|statusLst
init|=
name|res
operator|.
name|targetFileSystem
operator|.
name|listStatus
argument_list|(
name|res
operator|.
name|remainingPath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|res
operator|.
name|isInternalDir
argument_list|()
condition|)
block|{
comment|// We need to change the name in the FileStatus as described in
comment|// {@link #getFileStatus }
name|ChRootedFileSystem
name|targetFs
decl_stmt|;
name|targetFs
operator|=
operator|(
name|ChRootedFileSystem
operator|)
name|res
operator|.
name|targetFileSystem
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|FileStatus
name|status
range|:
name|statusLst
control|)
block|{
name|String
name|suffix
init|=
name|targetFs
operator|.
name|stripOutRoot
argument_list|(
name|status
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|statusLst
index|[
name|i
operator|++
index|]
operator|=
operator|new
name|ViewFsFileStatus
argument_list|(
name|status
argument_list|,
name|this
operator|.
name|makeQualified
argument_list|(
name|suffix
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
name|f
else|:
operator|new
name|Path
argument_list|(
name|res
operator|.
name|resolvedPath
argument_list|,
name|suffix
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|statusLst
return|;
block|}
annotation|@
name|Override
DECL|method|mkdirs (final Path dir, final FsPermission permission)
specifier|public
name|boolean
name|mkdirs
parameter_list|(
specifier|final
name|Path
name|dir
parameter_list|,
specifier|final
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|IOException
block|{
name|InodeTree
operator|.
name|ResolveResult
argument_list|<
name|FileSystem
argument_list|>
name|res
init|=
name|fsState
operator|.
name|resolve
argument_list|(
name|getUriPath
argument_list|(
name|dir
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|res
operator|.
name|targetFileSystem
operator|.
name|mkdirs
argument_list|(
name|res
operator|.
name|remainingPath
argument_list|,
name|permission
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|open (final Path f, final int bufferSize)
specifier|public
name|FSDataInputStream
name|open
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|,
specifier|final
name|int
name|bufferSize
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|FileNotFoundException
throws|,
name|IOException
block|{
name|InodeTree
operator|.
name|ResolveResult
argument_list|<
name|FileSystem
argument_list|>
name|res
init|=
name|fsState
operator|.
name|resolve
argument_list|(
name|getUriPath
argument_list|(
name|f
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|res
operator|.
name|targetFileSystem
operator|.
name|open
argument_list|(
name|res
operator|.
name|remainingPath
argument_list|,
name|bufferSize
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|rename (final Path src, final Path dst)
specifier|public
name|boolean
name|rename
parameter_list|(
specifier|final
name|Path
name|src
parameter_list|,
specifier|final
name|Path
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
comment|// passing resolveLastComponet as false to catch renaming a mount point to
comment|// itself. We need to catch this as an internal operation and fail.
name|InodeTree
operator|.
name|ResolveResult
argument_list|<
name|FileSystem
argument_list|>
name|resSrc
init|=
name|fsState
operator|.
name|resolve
argument_list|(
name|getUriPath
argument_list|(
name|src
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|resSrc
operator|.
name|isInternalDir
argument_list|()
condition|)
block|{
throw|throw
name|readOnlyMountTable
argument_list|(
literal|"rename"
argument_list|,
name|src
argument_list|)
throw|;
block|}
name|InodeTree
operator|.
name|ResolveResult
argument_list|<
name|FileSystem
argument_list|>
name|resDst
init|=
name|fsState
operator|.
name|resolve
argument_list|(
name|getUriPath
argument_list|(
name|dst
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|resDst
operator|.
name|isInternalDir
argument_list|()
condition|)
block|{
throw|throw
name|readOnlyMountTable
argument_list|(
literal|"rename"
argument_list|,
name|dst
argument_list|)
throw|;
block|}
comment|/**     // Alternate 1: renames within same file system - valid but we disallow     // Alternate 2: (as described in next para - valid but we have disallowed it     //     // Note we compare the URIs. the URIs include the link targets.      // hence we allow renames across mount links as long as the mount links     // point to the same target.     if (!resSrc.targetFileSystem.getUri().equals(               resDst.targetFileSystem.getUri())) {       throw new IOException("Renames across Mount points not supported");     }     */
comment|//
comment|// Alternate 3 : renames ONLY within the the same mount links.
comment|//
if|if
condition|(
name|resSrc
operator|.
name|targetFileSystem
operator|!=
name|resDst
operator|.
name|targetFileSystem
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Renames across Mount points not supported"
argument_list|)
throw|;
block|}
return|return
name|resSrc
operator|.
name|targetFileSystem
operator|.
name|rename
argument_list|(
name|resSrc
operator|.
name|remainingPath
argument_list|,
name|resDst
operator|.
name|remainingPath
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setOwner (final Path f, final String username, final String groupname)
specifier|public
name|void
name|setOwner
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|,
specifier|final
name|String
name|username
parameter_list|,
specifier|final
name|String
name|groupname
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|FileNotFoundException
throws|,
name|IOException
block|{
name|InodeTree
operator|.
name|ResolveResult
argument_list|<
name|FileSystem
argument_list|>
name|res
init|=
name|fsState
operator|.
name|resolve
argument_list|(
name|getUriPath
argument_list|(
name|f
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|res
operator|.
name|targetFileSystem
operator|.
name|setOwner
argument_list|(
name|res
operator|.
name|remainingPath
argument_list|,
name|username
argument_list|,
name|groupname
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setPermission (final Path f, final FsPermission permission)
specifier|public
name|void
name|setPermission
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|,
specifier|final
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|FileNotFoundException
throws|,
name|IOException
block|{
name|InodeTree
operator|.
name|ResolveResult
argument_list|<
name|FileSystem
argument_list|>
name|res
init|=
name|fsState
operator|.
name|resolve
argument_list|(
name|getUriPath
argument_list|(
name|f
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|res
operator|.
name|targetFileSystem
operator|.
name|setPermission
argument_list|(
name|res
operator|.
name|remainingPath
argument_list|,
name|permission
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setReplication (final Path f, final short replication)
specifier|public
name|boolean
name|setReplication
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|,
specifier|final
name|short
name|replication
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|FileNotFoundException
throws|,
name|IOException
block|{
name|InodeTree
operator|.
name|ResolveResult
argument_list|<
name|FileSystem
argument_list|>
name|res
init|=
name|fsState
operator|.
name|resolve
argument_list|(
name|getUriPath
argument_list|(
name|f
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|res
operator|.
name|targetFileSystem
operator|.
name|setReplication
argument_list|(
name|res
operator|.
name|remainingPath
argument_list|,
name|replication
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setTimes (final Path f, final long mtime, final long atime)
specifier|public
name|void
name|setTimes
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|,
specifier|final
name|long
name|mtime
parameter_list|,
specifier|final
name|long
name|atime
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|FileNotFoundException
throws|,
name|IOException
block|{
name|InodeTree
operator|.
name|ResolveResult
argument_list|<
name|FileSystem
argument_list|>
name|res
init|=
name|fsState
operator|.
name|resolve
argument_list|(
name|getUriPath
argument_list|(
name|f
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|res
operator|.
name|targetFileSystem
operator|.
name|setTimes
argument_list|(
name|res
operator|.
name|remainingPath
argument_list|,
name|mtime
argument_list|,
name|atime
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setVerifyChecksum (final boolean verifyChecksum)
specifier|public
name|void
name|setVerifyChecksum
parameter_list|(
specifier|final
name|boolean
name|verifyChecksum
parameter_list|)
block|{
comment|// This is a file system level operations, however ViewFileSystem
comment|// points to many file systems. Noop for ViewFileSystem.
block|}
DECL|method|getMountPoints ()
specifier|public
name|MountPoint
index|[]
name|getMountPoints
parameter_list|()
block|{
name|List
argument_list|<
name|InodeTree
operator|.
name|MountPoint
argument_list|<
name|FileSystem
argument_list|>
argument_list|>
name|mountPoints
init|=
name|fsState
operator|.
name|getMountPoints
argument_list|()
decl_stmt|;
name|MountPoint
index|[]
name|result
init|=
operator|new
name|MountPoint
index|[
name|mountPoints
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mountPoints
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|result
index|[
name|i
index|]
operator|=
operator|new
name|MountPoint
argument_list|(
operator|new
name|Path
argument_list|(
name|mountPoints
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|src
argument_list|)
argument_list|,
name|mountPoints
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|target
operator|.
name|targetDirLinkList
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|getDelegationTokens (String renewer)
specifier|public
name|List
argument_list|<
name|Token
argument_list|<
name|?
argument_list|>
argument_list|>
name|getDelegationTokens
parameter_list|(
name|String
name|renewer
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|InodeTree
operator|.
name|MountPoint
argument_list|<
name|FileSystem
argument_list|>
argument_list|>
name|mountPoints
init|=
name|fsState
operator|.
name|getMountPoints
argument_list|()
decl_stmt|;
name|int
name|initialListSize
init|=
literal|0
decl_stmt|;
for|for
control|(
name|InodeTree
operator|.
name|MountPoint
argument_list|<
name|FileSystem
argument_list|>
name|im
range|:
name|mountPoints
control|)
block|{
name|initialListSize
operator|+=
name|im
operator|.
name|target
operator|.
name|targetDirLinkList
operator|.
name|length
expr_stmt|;
block|}
name|List
argument_list|<
name|Token
argument_list|<
name|?
argument_list|>
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|Token
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|(
name|initialListSize
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mountPoints
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|List
argument_list|<
name|Token
argument_list|<
name|?
argument_list|>
argument_list|>
name|tokens
init|=
name|mountPoints
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|target
operator|.
name|targetFileSystem
operator|.
name|getDelegationTokens
argument_list|(
name|renewer
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokens
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|addAll
argument_list|(
name|tokens
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/*    * An instance of this class represents an internal dir of the viewFs     * that is internal dir of the mount table.    * It is a read only mount tables and create, mkdir or delete operations    * are not allowed.    * If called on create or mkdir then this target is the parent of the    * directory in which one is trying to create or mkdir; hence    * in this case the path name passed in is the last component.     * Otherwise this target is the end point of the path and hence    * the path name passed in is null.     */
DECL|class|InternalDirOfViewFs
specifier|static
class|class
name|InternalDirOfViewFs
extends|extends
name|FileSystem
block|{
DECL|field|theInternalDir
specifier|final
name|InodeTree
operator|.
name|INodeDir
argument_list|<
name|FileSystem
argument_list|>
name|theInternalDir
decl_stmt|;
DECL|field|creationTime
specifier|final
name|long
name|creationTime
decl_stmt|;
comment|// of the the mount table
DECL|field|ugi
specifier|final
name|UserGroupInformation
name|ugi
decl_stmt|;
comment|// the user/group of user who created mtable
DECL|field|myUri
specifier|final
name|URI
name|myUri
decl_stmt|;
DECL|method|InternalDirOfViewFs (final InodeTree.INodeDir<FileSystem> dir, final long cTime, final UserGroupInformation ugi, URI uri)
specifier|public
name|InternalDirOfViewFs
parameter_list|(
specifier|final
name|InodeTree
operator|.
name|INodeDir
argument_list|<
name|FileSystem
argument_list|>
name|dir
parameter_list|,
specifier|final
name|long
name|cTime
parameter_list|,
specifier|final
name|UserGroupInformation
name|ugi
parameter_list|,
name|URI
name|uri
parameter_list|)
throws|throws
name|URISyntaxException
block|{
name|myUri
operator|=
name|uri
expr_stmt|;
try|try
block|{
name|initialize
argument_list|(
name|myUri
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot occur"
argument_list|)
throw|;
block|}
name|theInternalDir
operator|=
name|dir
expr_stmt|;
name|creationTime
operator|=
name|cTime
expr_stmt|;
name|this
operator|.
name|ugi
operator|=
name|ugi
expr_stmt|;
block|}
DECL|method|checkPathIsSlash (final Path f)
specifier|static
specifier|private
name|void
name|checkPathIsSlash
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|f
operator|!=
name|InodeTree
operator|.
name|SlashPath
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Internal implementation error: expected file name to be /"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getUri ()
specifier|public
name|URI
name|getUri
parameter_list|()
block|{
return|return
name|myUri
return|;
block|}
annotation|@
name|Override
DECL|method|getWorkingDirectory ()
specifier|public
name|Path
name|getWorkingDirectory
parameter_list|()
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Internal impl error: getWorkingDir should not have been called"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|setWorkingDirectory (final Path new_dir)
specifier|public
name|void
name|setWorkingDirectory
parameter_list|(
specifier|final
name|Path
name|new_dir
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Internal impl error: getWorkingDir should not have been called"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|append (final Path f, final int bufferSize, final Progressable progress)
specifier|public
name|FSDataOutputStream
name|append
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|,
specifier|final
name|int
name|bufferSize
parameter_list|,
specifier|final
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
name|readOnlyMountTable
argument_list|(
literal|"append"
argument_list|,
name|f
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|create (final Path f, final FsPermission permission, final boolean overwrite, final int bufferSize, final short replication, final long blockSize, final Progressable progress)
specifier|public
name|FSDataOutputStream
name|create
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|,
specifier|final
name|FsPermission
name|permission
parameter_list|,
specifier|final
name|boolean
name|overwrite
parameter_list|,
specifier|final
name|int
name|bufferSize
parameter_list|,
specifier|final
name|short
name|replication
parameter_list|,
specifier|final
name|long
name|blockSize
parameter_list|,
specifier|final
name|Progressable
name|progress
parameter_list|)
throws|throws
name|AccessControlException
block|{
throw|throw
name|readOnlyMountTable
argument_list|(
literal|"create"
argument_list|,
name|f
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|delete (final Path f, final boolean recursive)
specifier|public
name|boolean
name|delete
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|,
specifier|final
name|boolean
name|recursive
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|IOException
block|{
name|checkPathIsSlash
argument_list|(
name|f
argument_list|)
expr_stmt|;
throw|throw
name|readOnlyMountTable
argument_list|(
literal|"delete"
argument_list|,
name|f
argument_list|)
throw|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|delete (final Path f)
specifier|public
name|boolean
name|delete
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|IOException
block|{
return|return
name|delete
argument_list|(
name|f
argument_list|,
literal|true
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getFileBlockLocations (final FileStatus fs, final long start, final long len)
specifier|public
name|BlockLocation
index|[]
name|getFileBlockLocations
parameter_list|(
specifier|final
name|FileStatus
name|fs
parameter_list|,
specifier|final
name|long
name|start
parameter_list|,
specifier|final
name|long
name|len
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
name|checkPathIsSlash
argument_list|(
name|fs
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"Path points to dir not a file"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getFileChecksum (final Path f)
specifier|public
name|FileChecksum
name|getFileChecksum
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
name|checkPathIsSlash
argument_list|(
name|f
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"Path points to dir not a file"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getFileStatus (Path f)
specifier|public
name|FileStatus
name|getFileStatus
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|checkPathIsSlash
argument_list|(
name|f
argument_list|)
expr_stmt|;
return|return
operator|new
name|FileStatus
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|creationTime
argument_list|,
name|creationTime
argument_list|,
name|PERMISSION_RRR
argument_list|,
name|ugi
operator|.
name|getUserName
argument_list|()
argument_list|,
name|ugi
operator|.
name|getGroupNames
argument_list|()
index|[
literal|0
index|]
argument_list|,
operator|new
name|Path
argument_list|(
name|theInternalDir
operator|.
name|fullPath
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|myUri
argument_list|,
literal|null
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|listStatus (Path f)
specifier|public
name|FileStatus
index|[]
name|listStatus
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|FileNotFoundException
throws|,
name|IOException
block|{
name|checkPathIsSlash
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|result
init|=
operator|new
name|FileStatus
index|[
name|theInternalDir
operator|.
name|children
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|INode
argument_list|<
name|FileSystem
argument_list|>
argument_list|>
name|iEntry
range|:
name|theInternalDir
operator|.
name|children
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|INode
argument_list|<
name|FileSystem
argument_list|>
name|inode
init|=
name|iEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|inode
operator|instanceof
name|INodeLink
condition|)
block|{
name|INodeLink
argument_list|<
name|FileSystem
argument_list|>
name|link
init|=
operator|(
name|INodeLink
argument_list|<
name|FileSystem
argument_list|>
operator|)
name|inode
decl_stmt|;
name|result
index|[
name|i
operator|++
index|]
operator|=
operator|new
name|FileStatus
argument_list|(
literal|0
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|creationTime
argument_list|,
name|creationTime
argument_list|,
name|PERMISSION_RRR
argument_list|,
name|ugi
operator|.
name|getUserName
argument_list|()
argument_list|,
name|ugi
operator|.
name|getGroupNames
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|link
operator|.
name|getTargetLink
argument_list|()
argument_list|,
operator|new
name|Path
argument_list|(
name|inode
operator|.
name|fullPath
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|myUri
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
index|[
name|i
operator|++
index|]
operator|=
operator|new
name|FileStatus
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|creationTime
argument_list|,
name|creationTime
argument_list|,
name|PERMISSION_RRR
argument_list|,
name|ugi
operator|.
name|getUserName
argument_list|()
argument_list|,
name|ugi
operator|.
name|getGroupNames
argument_list|()
index|[
literal|0
index|]
argument_list|,
operator|new
name|Path
argument_list|(
name|inode
operator|.
name|fullPath
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|myUri
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|mkdirs (Path dir, FsPermission permission)
specifier|public
name|boolean
name|mkdirs
parameter_list|(
name|Path
name|dir
parameter_list|,
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|FileAlreadyExistsException
block|{
if|if
condition|(
name|theInternalDir
operator|.
name|isRoot
operator|&
name|dir
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileAlreadyExistsException
argument_list|(
literal|"/ already exits"
argument_list|)
throw|;
block|}
comment|// Note dir starts with /
if|if
condition|(
name|theInternalDir
operator|.
name|children
operator|.
name|containsKey
argument_list|(
name|dir
operator|.
name|toString
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
comment|// this is the stupid semantics of FileSystem
block|}
throw|throw
name|readOnlyMountTable
argument_list|(
literal|"mkdirs"
argument_list|,
name|dir
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|open (Path f, int bufferSize)
specifier|public
name|FSDataInputStream
name|open
parameter_list|(
name|Path
name|f
parameter_list|,
name|int
name|bufferSize
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|FileNotFoundException
throws|,
name|IOException
block|{
name|checkPathIsSlash
argument_list|(
name|f
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"Path points to dir not a file"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|rename (Path src, Path dst)
specifier|public
name|boolean
name|rename
parameter_list|(
name|Path
name|src
parameter_list|,
name|Path
name|dst
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|IOException
block|{
name|checkPathIsSlash
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|checkPathIsSlash
argument_list|(
name|dst
argument_list|)
expr_stmt|;
throw|throw
name|readOnlyMountTable
argument_list|(
literal|"rename"
argument_list|,
name|src
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|setOwner (Path f, String username, String groupname)
specifier|public
name|void
name|setOwner
parameter_list|(
name|Path
name|f
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|groupname
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|IOException
block|{
name|checkPathIsSlash
argument_list|(
name|f
argument_list|)
expr_stmt|;
throw|throw
name|readOnlyMountTable
argument_list|(
literal|"setOwner"
argument_list|,
name|f
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|setPermission (Path f, FsPermission permission)
specifier|public
name|void
name|setPermission
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|IOException
block|{
name|checkPathIsSlash
argument_list|(
name|f
argument_list|)
expr_stmt|;
throw|throw
name|readOnlyMountTable
argument_list|(
literal|"setPermission"
argument_list|,
name|f
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|setReplication (Path f, short replication)
specifier|public
name|boolean
name|setReplication
parameter_list|(
name|Path
name|f
parameter_list|,
name|short
name|replication
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|IOException
block|{
name|checkPathIsSlash
argument_list|(
name|f
argument_list|)
expr_stmt|;
throw|throw
name|readOnlyMountTable
argument_list|(
literal|"setReplication"
argument_list|,
name|f
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|setTimes (Path f, long mtime, long atime)
specifier|public
name|void
name|setTimes
parameter_list|(
name|Path
name|f
parameter_list|,
name|long
name|mtime
parameter_list|,
name|long
name|atime
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|IOException
block|{
name|checkPathIsSlash
argument_list|(
name|f
argument_list|)
expr_stmt|;
throw|throw
name|readOnlyMountTable
argument_list|(
literal|"setTimes"
argument_list|,
name|f
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|setVerifyChecksum (boolean verifyChecksum)
specifier|public
name|void
name|setVerifyChecksum
parameter_list|(
name|boolean
name|verifyChecksum
parameter_list|)
block|{
comment|// Noop for viewfs
block|}
block|}
block|}
end_class

end_unit

