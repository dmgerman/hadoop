begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_comment
comment|/**   * Provides a trash facility which supports pluggable Trash policies.   *  * See the implementation of the configured TrashPolicy for more  * details.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|Trash
specifier|public
class|class
name|Trash
extends|extends
name|Configured
block|{
DECL|field|trashPolicy
specifier|private
name|TrashPolicy
name|trashPolicy
decl_stmt|;
comment|// configured trash policy instance
comment|/**     * Construct a trash can accessor.    * @param conf a Configuration    */
DECL|method|Trash (Configuration conf)
specifier|public
name|Trash
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Construct a trash can accessor for the FileSystem provided.    * @param fs the FileSystem    * @param conf a Configuration    */
DECL|method|Trash (FileSystem fs, Configuration conf)
specifier|public
name|Trash
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|trashPolicy
operator|=
name|TrashPolicy
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|fs
operator|.
name|getHomeDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * In case of the symlinks or mount points, one has to move the appropriate    * trashbin in the actual volume of the path p being deleted.    *    * Hence we get the file system of the fully-qualified resolved-path and    * then move the path p to the trashbin in that volume,    * @param fs - the filesystem of path p    * @param p - the  path being deleted - to be moved to trasg    * @param conf - configuration    * @return false if the item is already in the trash or trash is disabled    * @throws IOException on error    */
DECL|method|moveToAppropriateTrash (FileSystem fs, Path p, Configuration conf)
specifier|public
specifier|static
name|boolean
name|moveToAppropriateTrash
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|p
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|fullyResolvedPath
init|=
name|fs
operator|.
name|resolvePath
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|Trash
name|trash
init|=
operator|new
name|Trash
argument_list|(
name|FileSystem
operator|.
name|get
argument_list|(
name|fullyResolvedPath
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
name|trash
operator|.
name|moveToTrash
argument_list|(
name|fullyResolvedPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|success
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Moved: '"
operator|+
name|p
operator|+
literal|"' to trash at: "
operator|+
name|trash
operator|.
name|getCurrentTrashDir
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|success
return|;
block|}
comment|/**    * Returns whether the trash is enabled for this filesystem    */
DECL|method|isEnabled ()
specifier|public
name|boolean
name|isEnabled
parameter_list|()
block|{
return|return
name|trashPolicy
operator|.
name|isEnabled
argument_list|()
return|;
block|}
comment|/** Move a file or directory to the current trash directory.    * @return false if the item is already in the trash or trash is disabled    */
DECL|method|moveToTrash (Path path)
specifier|public
name|boolean
name|moveToTrash
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|trashPolicy
operator|.
name|moveToTrash
argument_list|(
name|path
argument_list|)
return|;
block|}
comment|/** Create a trash checkpoint. */
DECL|method|checkpoint ()
specifier|public
name|void
name|checkpoint
parameter_list|()
throws|throws
name|IOException
block|{
name|trashPolicy
operator|.
name|createCheckpoint
argument_list|()
expr_stmt|;
block|}
comment|/** Delete old checkpoint(s). */
DECL|method|expunge ()
specifier|public
name|void
name|expunge
parameter_list|()
throws|throws
name|IOException
block|{
name|trashPolicy
operator|.
name|deleteCheckpoint
argument_list|()
expr_stmt|;
block|}
comment|/** get the current working directory */
DECL|method|getCurrentTrashDir ()
name|Path
name|getCurrentTrashDir
parameter_list|()
block|{
return|return
name|trashPolicy
operator|.
name|getCurrentTrashDir
argument_list|()
return|;
block|}
comment|/** get the configured trash policy */
DECL|method|getTrashPolicy ()
name|TrashPolicy
name|getTrashPolicy
parameter_list|()
block|{
return|return
name|trashPolicy
return|;
block|}
comment|/** Return a {@link Runnable} that periodically empties the trash of all    * users, intended to be run by the superuser.    */
DECL|method|getEmptier ()
specifier|public
name|Runnable
name|getEmptier
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|trashPolicy
operator|.
name|getEmptier
argument_list|()
return|;
block|}
comment|/** Run an emptier.*/
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
operator|new
name|Trash
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
operator|.
name|getEmptier
argument_list|()
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

