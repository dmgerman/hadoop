begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.cosn
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|cosn
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadLocalRandom
import|;
end_import

begin_import
import|import
name|com
operator|.
name|qcloud
operator|.
name|cos
operator|.
name|COSClient
import|;
end_import

begin_import
import|import
name|com
operator|.
name|qcloud
operator|.
name|cos
operator|.
name|ClientConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|qcloud
operator|.
name|cos
operator|.
name|auth
operator|.
name|BasicCOSCredentials
import|;
end_import

begin_import
import|import
name|com
operator|.
name|qcloud
operator|.
name|cos
operator|.
name|auth
operator|.
name|COSCredentials
import|;
end_import

begin_import
import|import
name|com
operator|.
name|qcloud
operator|.
name|cos
operator|.
name|exception
operator|.
name|CosClientException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|qcloud
operator|.
name|cos
operator|.
name|exception
operator|.
name|CosServiceException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|qcloud
operator|.
name|cos
operator|.
name|http
operator|.
name|HttpProtocol
import|;
end_import

begin_import
import|import
name|com
operator|.
name|qcloud
operator|.
name|cos
operator|.
name|model
operator|.
name|AbortMultipartUploadRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|qcloud
operator|.
name|cos
operator|.
name|model
operator|.
name|COSObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|qcloud
operator|.
name|cos
operator|.
name|model
operator|.
name|COSObjectSummary
import|;
end_import

begin_import
import|import
name|com
operator|.
name|qcloud
operator|.
name|cos
operator|.
name|model
operator|.
name|CompleteMultipartUploadRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|qcloud
operator|.
name|cos
operator|.
name|model
operator|.
name|CompleteMultipartUploadResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|qcloud
operator|.
name|cos
operator|.
name|model
operator|.
name|CopyObjectRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|qcloud
operator|.
name|cos
operator|.
name|model
operator|.
name|DeleteObjectRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|qcloud
operator|.
name|cos
operator|.
name|model
operator|.
name|GetObjectMetadataRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|qcloud
operator|.
name|cos
operator|.
name|model
operator|.
name|GetObjectRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|qcloud
operator|.
name|cos
operator|.
name|model
operator|.
name|InitiateMultipartUploadRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|qcloud
operator|.
name|cos
operator|.
name|model
operator|.
name|InitiateMultipartUploadResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|qcloud
operator|.
name|cos
operator|.
name|model
operator|.
name|ListObjectsRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|qcloud
operator|.
name|cos
operator|.
name|model
operator|.
name|ObjectListing
import|;
end_import

begin_import
import|import
name|com
operator|.
name|qcloud
operator|.
name|cos
operator|.
name|model
operator|.
name|ObjectMetadata
import|;
end_import

begin_import
import|import
name|com
operator|.
name|qcloud
operator|.
name|cos
operator|.
name|model
operator|.
name|PartETag
import|;
end_import

begin_import
import|import
name|com
operator|.
name|qcloud
operator|.
name|cos
operator|.
name|model
operator|.
name|PutObjectRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|qcloud
operator|.
name|cos
operator|.
name|model
operator|.
name|PutObjectResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|qcloud
operator|.
name|cos
operator|.
name|model
operator|.
name|UploadPartRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|qcloud
operator|.
name|cos
operator|.
name|model
operator|.
name|UploadPartResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|qcloud
operator|.
name|cos
operator|.
name|region
operator|.
name|Region
import|;
end_import

begin_import
import|import
name|com
operator|.
name|qcloud
operator|.
name|cos
operator|.
name|utils
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|cosn
operator|.
name|auth
operator|.
name|COSCredentialProviderList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|VersionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpStatus
import|;
end_import

begin_comment
comment|/**  * The class actually performs access operation to the COS blob store.  * It provides the bridging logic for the Hadoop's abstract filesystem and COS.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|CosNativeFileSystemStore
class|class
name|CosNativeFileSystemStore
implements|implements
name|NativeFileSystemStore
block|{
DECL|field|cosClient
specifier|private
name|COSClient
name|cosClient
decl_stmt|;
DECL|field|bucketName
specifier|private
name|String
name|bucketName
decl_stmt|;
DECL|field|maxRetryTimes
specifier|private
name|int
name|maxRetryTimes
decl_stmt|;
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CosNativeFileSystemStore
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Initialize the client to access COS blob storage.    *    * @param conf Hadoop configuration with COS configuration options.    * @throws IOException Initialize the COS client failed,    *                     caused by incorrect options.    */
DECL|method|initCOSClient (Configuration conf)
specifier|private
name|void
name|initCOSClient
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|COSCredentialProviderList
name|credentialProviderList
init|=
name|CosNUtils
operator|.
name|createCosCredentialsProviderSet
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
name|region
init|=
name|conf
operator|.
name|get
argument_list|(
name|CosNConfigKeys
operator|.
name|COSN_REGION_KEY
argument_list|)
decl_stmt|;
name|String
name|endpointSuffix
init|=
name|conf
operator|.
name|get
argument_list|(
name|CosNConfigKeys
operator|.
name|COSN_ENDPOINT_SUFFIX_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|region
operator|&&
literal|null
operator|==
name|endpointSuffix
condition|)
block|{
name|String
name|exceptionMsg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"config %s and %s at least one"
argument_list|,
name|CosNConfigKeys
operator|.
name|COSN_REGION_KEY
argument_list|,
name|CosNConfigKeys
operator|.
name|COSN_ENDPOINT_SUFFIX_KEY
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|exceptionMsg
argument_list|)
throw|;
block|}
name|COSCredentials
name|cosCred
decl_stmt|;
name|cosCred
operator|=
operator|new
name|BasicCOSCredentials
argument_list|(
name|credentialProviderList
operator|.
name|getCredentials
argument_list|()
operator|.
name|getCOSAccessKeyId
argument_list|()
argument_list|,
name|credentialProviderList
operator|.
name|getCredentials
argument_list|()
operator|.
name|getCOSSecretKey
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|useHttps
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|CosNConfigKeys
operator|.
name|COSN_USE_HTTPS_KEY
argument_list|,
name|CosNConfigKeys
operator|.
name|DEFAULT_USE_HTTPS
argument_list|)
decl_stmt|;
name|ClientConfig
name|config
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|region
condition|)
block|{
name|config
operator|=
operator|new
name|ClientConfig
argument_list|(
operator|new
name|Region
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|.
name|setEndPointSuffix
argument_list|(
name|endpointSuffix
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|config
operator|=
operator|new
name|ClientConfig
argument_list|(
operator|new
name|Region
argument_list|(
name|region
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|useHttps
condition|)
block|{
name|config
operator|.
name|setHttpProtocol
argument_list|(
name|HttpProtocol
operator|.
name|https
argument_list|)
expr_stmt|;
block|}
name|config
operator|.
name|setUserAgent
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|CosNConfigKeys
operator|.
name|USER_AGENT
argument_list|,
name|CosNConfigKeys
operator|.
name|DEFAULT_USER_AGENT
argument_list|)
operator|+
literal|" For "
operator|+
literal|" Hadoop "
operator|+
name|VersionInfo
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxRetryTimes
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|CosNConfigKeys
operator|.
name|COSN_MAX_RETRIES_KEY
argument_list|,
name|CosNConfigKeys
operator|.
name|DEFAULT_MAX_RETRIES
argument_list|)
expr_stmt|;
name|config
operator|.
name|setMaxConnectionsCount
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|CosNConfigKeys
operator|.
name|MAX_CONNECTION_NUM
argument_list|,
name|CosNConfigKeys
operator|.
name|DEFAULT_MAX_CONNECTION_NUM
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|cosClient
operator|=
operator|new
name|COSClient
argument_list|(
name|cosCred
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
comment|/**    * Initialize the CosNativeFileSystemStore object, including    * its COS client and default COS bucket.    *    * @param uri  The URI of the COS bucket accessed by default.    * @param conf Hadoop configuration with COS configuration options.    * @throws IOException Initialize the COS client failed.    */
annotation|@
name|Override
DECL|method|initialize (URI uri, Configuration conf)
specifier|public
name|void
name|initialize
parameter_list|(
name|URI
name|uri
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|initCOSClient
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|bucketName
operator|=
name|uri
operator|.
name|getHost
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Store a file into COS from the specified input stream, which would be    * retried until the success or maximum number.    *    * @param key         COS object key.    * @param inputStream Input stream to be uploaded into COS.    * @param md5Hash     MD5 value of the content to be uploaded.    * @param length      Length of uploaded content.    * @throws IOException Upload the file failed.    */
DECL|method|storeFileWithRetry (String key, InputStream inputStream, byte[] md5Hash, long length)
specifier|private
name|void
name|storeFileWithRetry
parameter_list|(
name|String
name|key
parameter_list|,
name|InputStream
name|inputStream
parameter_list|,
name|byte
index|[]
name|md5Hash
parameter_list|,
name|long
name|length
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|ObjectMetadata
name|objectMetadata
init|=
operator|new
name|ObjectMetadata
argument_list|()
decl_stmt|;
name|objectMetadata
operator|.
name|setContentMD5
argument_list|(
name|Base64
operator|.
name|encodeAsString
argument_list|(
name|md5Hash
argument_list|)
argument_list|)
expr_stmt|;
name|objectMetadata
operator|.
name|setContentLength
argument_list|(
name|length
argument_list|)
expr_stmt|;
name|PutObjectRequest
name|putObjectRequest
init|=
operator|new
name|PutObjectRequest
argument_list|(
name|bucketName
argument_list|,
name|key
argument_list|,
name|inputStream
argument_list|,
name|objectMetadata
argument_list|)
decl_stmt|;
name|PutObjectResult
name|putObjectResult
init|=
operator|(
name|PutObjectResult
operator|)
name|callCOSClientWithRetry
argument_list|(
name|putObjectRequest
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Store file successfully. COS key: [{}], ETag: [{}], "
operator|+
literal|"MD5: [{}]."
argument_list|,
name|key
argument_list|,
name|putObjectResult
operator|.
name|getETag
argument_list|()
argument_list|,
operator|new
name|String
argument_list|(
name|md5Hash
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|errMsg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Store file failed. COS key: [%s], "
operator|+
literal|"exception: [%s]"
argument_list|,
name|key
argument_list|,
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errMsg
argument_list|)
expr_stmt|;
name|handleException
argument_list|(
operator|new
name|Exception
argument_list|(
name|errMsg
argument_list|)
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Store a local file into COS.    *    * @param key     COS object key.    * @param file    The local file to be uploaded.    * @param md5Hash The MD5 value of the file to be uploaded.    * @throws IOException Upload the file failed.    */
annotation|@
name|Override
DECL|method|storeFile (String key, File file, byte[] md5Hash)
specifier|public
name|void
name|storeFile
parameter_list|(
name|String
name|key
parameter_list|,
name|File
name|file
parameter_list|,
name|byte
index|[]
name|md5Hash
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Store file from local path: [{}]. file length: [{}] COS key: "
operator|+
literal|"[{}] MD5: [{}]."
argument_list|,
name|file
operator|.
name|getCanonicalPath
argument_list|()
argument_list|,
name|file
operator|.
name|length
argument_list|()
argument_list|,
name|key
argument_list|,
operator|new
name|String
argument_list|(
name|md5Hash
argument_list|)
argument_list|)
expr_stmt|;
name|storeFileWithRetry
argument_list|(
name|key
argument_list|,
operator|new
name|BufferedInputStream
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|)
argument_list|,
name|md5Hash
argument_list|,
name|file
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Store a file into COS from the specified input stream.    *    * @param key           COS object key.    * @param inputStream   The Input stream to be uploaded.    * @param md5Hash       The MD5 value of the content to be uploaded.    * @param contentLength Length of uploaded content.    * @throws IOException Upload the file failed.    */
annotation|@
name|Override
DECL|method|storeFile ( String key, InputStream inputStream, byte[] md5Hash, long contentLength)
specifier|public
name|void
name|storeFile
parameter_list|(
name|String
name|key
parameter_list|,
name|InputStream
name|inputStream
parameter_list|,
name|byte
index|[]
name|md5Hash
parameter_list|,
name|long
name|contentLength
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Store file from input stream. COS key: [{}], "
operator|+
literal|"length: [{}], MD5: [{}]."
argument_list|,
name|key
argument_list|,
name|contentLength
argument_list|,
name|md5Hash
argument_list|)
expr_stmt|;
name|storeFileWithRetry
argument_list|(
name|key
argument_list|,
name|inputStream
argument_list|,
name|md5Hash
argument_list|,
name|contentLength
argument_list|)
expr_stmt|;
block|}
comment|// For cos, storeEmptyFile means creating a directory
annotation|@
name|Override
DECL|method|storeEmptyFile (String key)
specifier|public
name|void
name|storeEmptyFile
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|key
operator|.
name|endsWith
argument_list|(
name|CosNFileSystem
operator|.
name|PATH_DELIMITER
argument_list|)
condition|)
block|{
name|key
operator|=
name|key
operator|+
name|CosNFileSystem
operator|.
name|PATH_DELIMITER
expr_stmt|;
block|}
name|ObjectMetadata
name|objectMetadata
init|=
operator|new
name|ObjectMetadata
argument_list|()
decl_stmt|;
name|objectMetadata
operator|.
name|setContentLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|InputStream
name|input
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|PutObjectRequest
name|putObjectRequest
init|=
operator|new
name|PutObjectRequest
argument_list|(
name|bucketName
argument_list|,
name|key
argument_list|,
name|input
argument_list|,
name|objectMetadata
argument_list|)
decl_stmt|;
try|try
block|{
name|PutObjectResult
name|putObjectResult
init|=
operator|(
name|PutObjectResult
operator|)
name|callCOSClientWithRetry
argument_list|(
name|putObjectRequest
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Store empty file successfully. COS key: [{}], ETag: [{}]."
argument_list|,
name|key
argument_list|,
name|putObjectResult
operator|.
name|getETag
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|errMsg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Store empty file failed. "
operator|+
literal|"COS key: [%s], exception: [%s]"
argument_list|,
name|key
argument_list|,
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errMsg
argument_list|)
expr_stmt|;
name|handleException
argument_list|(
operator|new
name|Exception
argument_list|(
name|errMsg
argument_list|)
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|uploadPart (File file, String key, String uploadId, int partNum)
specifier|public
name|PartETag
name|uploadPart
parameter_list|(
name|File
name|file
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|uploadId
parameter_list|,
name|int
name|partNum
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStream
name|inputStream
init|=
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
return|return
name|uploadPart
argument_list|(
name|inputStream
argument_list|,
name|key
argument_list|,
name|uploadId
argument_list|,
name|partNum
argument_list|,
name|file
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|uploadPart (InputStream inputStream, String key, String uploadId, int partNum, long partSize)
specifier|public
name|PartETag
name|uploadPart
parameter_list|(
name|InputStream
name|inputStream
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|uploadId
parameter_list|,
name|int
name|partNum
parameter_list|,
name|long
name|partSize
parameter_list|)
throws|throws
name|IOException
block|{
name|UploadPartRequest
name|uploadPartRequest
init|=
operator|new
name|UploadPartRequest
argument_list|()
decl_stmt|;
name|uploadPartRequest
operator|.
name|setBucketName
argument_list|(
name|this
operator|.
name|bucketName
argument_list|)
expr_stmt|;
name|uploadPartRequest
operator|.
name|setUploadId
argument_list|(
name|uploadId
argument_list|)
expr_stmt|;
name|uploadPartRequest
operator|.
name|setInputStream
argument_list|(
name|inputStream
argument_list|)
expr_stmt|;
name|uploadPartRequest
operator|.
name|setPartNumber
argument_list|(
name|partNum
argument_list|)
expr_stmt|;
name|uploadPartRequest
operator|.
name|setPartSize
argument_list|(
name|partSize
argument_list|)
expr_stmt|;
name|uploadPartRequest
operator|.
name|setKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
try|try
block|{
name|UploadPartResult
name|uploadPartResult
init|=
operator|(
name|UploadPartResult
operator|)
name|callCOSClientWithRetry
argument_list|(
name|uploadPartRequest
argument_list|)
decl_stmt|;
return|return
name|uploadPartResult
operator|.
name|getPartETag
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|errMsg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Current thread: [%d], COS key: [%s], "
operator|+
literal|"upload id: [%s], part num: [%d], exception: [%s]"
argument_list|,
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|key
argument_list|,
name|uploadId
argument_list|,
name|partNum
argument_list|,
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|handleException
argument_list|(
operator|new
name|Exception
argument_list|(
name|errMsg
argument_list|)
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|abortMultipartUpload (String key, String uploadId)
specifier|public
name|void
name|abortMultipartUpload
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|uploadId
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Abort the multipart upload. COS key: [{}], upload id: [{}]."
argument_list|,
name|key
argument_list|,
name|uploadId
argument_list|)
expr_stmt|;
name|AbortMultipartUploadRequest
name|abortMultipartUploadRequest
init|=
operator|new
name|AbortMultipartUploadRequest
argument_list|(
name|bucketName
argument_list|,
name|key
argument_list|,
name|uploadId
argument_list|)
decl_stmt|;
name|cosClient
operator|.
name|abortMultipartUpload
argument_list|(
name|abortMultipartUploadRequest
argument_list|)
expr_stmt|;
block|}
comment|/**    * Initialize a multipart upload and return the upload id.    *    * @param key The COS object key initialized to multipart upload.    * @return The multipart upload id.    */
DECL|method|getUploadId (String key)
specifier|public
name|String
name|getUploadId
parameter_list|(
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|key
operator|||
name|key
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|""
return|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Initiate a multipart upload. bucket: [{}], COS key: [{}]."
argument_list|,
name|bucketName
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|InitiateMultipartUploadRequest
name|initiateMultipartUploadRequest
init|=
operator|new
name|InitiateMultipartUploadRequest
argument_list|(
name|bucketName
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|InitiateMultipartUploadResult
name|initiateMultipartUploadResult
init|=
name|cosClient
operator|.
name|initiateMultipartUpload
argument_list|(
name|initiateMultipartUploadRequest
argument_list|)
decl_stmt|;
return|return
name|initiateMultipartUploadResult
operator|.
name|getUploadId
argument_list|()
return|;
block|}
comment|/**    * Finish a multipart upload process, which will merge all parts uploaded.    *    * @param key          The COS object key to be finished.    * @param uploadId     The upload id of the multipart upload to be finished.    * @param partETagList The etag list of the part that has been uploaded.    * @return The result object of completing the multipart upload process.    */
DECL|method|completeMultipartUpload ( String key, String uploadId, List<PartETag> partETagList)
specifier|public
name|CompleteMultipartUploadResult
name|completeMultipartUpload
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|uploadId
parameter_list|,
name|List
argument_list|<
name|PartETag
argument_list|>
name|partETagList
parameter_list|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|partETagList
argument_list|,
operator|new
name|Comparator
argument_list|<
name|PartETag
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|PartETag
name|o1
parameter_list|,
name|PartETag
name|o2
parameter_list|)
block|{
return|return
name|o1
operator|.
name|getPartNumber
argument_list|()
operator|-
name|o2
operator|.
name|getPartNumber
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Complete the multipart upload. bucket: [{}], COS key: [{}], "
operator|+
literal|"upload id: [{}]."
argument_list|,
name|bucketName
argument_list|,
name|key
argument_list|,
name|uploadId
argument_list|)
expr_stmt|;
name|CompleteMultipartUploadRequest
name|completeMultipartUploadRequest
init|=
operator|new
name|CompleteMultipartUploadRequest
argument_list|(
name|bucketName
argument_list|,
name|key
argument_list|,
name|uploadId
argument_list|,
name|partETagList
argument_list|)
decl_stmt|;
return|return
name|cosClient
operator|.
name|completeMultipartUpload
argument_list|(
name|completeMultipartUploadRequest
argument_list|)
return|;
block|}
DECL|method|queryObjectMetadata (String key)
specifier|private
name|FileMetadata
name|queryObjectMetadata
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|GetObjectMetadataRequest
name|getObjectMetadataRequest
init|=
operator|new
name|GetObjectMetadataRequest
argument_list|(
name|bucketName
argument_list|,
name|key
argument_list|)
decl_stmt|;
try|try
block|{
name|ObjectMetadata
name|objectMetadata
init|=
operator|(
name|ObjectMetadata
operator|)
name|callCOSClientWithRetry
argument_list|(
name|getObjectMetadataRequest
argument_list|)
decl_stmt|;
name|long
name|mtime
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|objectMetadata
operator|.
name|getLastModified
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|mtime
operator|=
name|objectMetadata
operator|.
name|getLastModified
argument_list|()
operator|.
name|getTime
argument_list|()
expr_stmt|;
block|}
name|long
name|fileSize
init|=
name|objectMetadata
operator|.
name|getContentLength
argument_list|()
decl_stmt|;
name|FileMetadata
name|fileMetadata
init|=
operator|new
name|FileMetadata
argument_list|(
name|key
argument_list|,
name|fileSize
argument_list|,
name|mtime
argument_list|,
operator|!
name|key
operator|.
name|endsWith
argument_list|(
name|CosNFileSystem
operator|.
name|PATH_DELIMITER
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Retrieve file metadata. COS key: [{}], ETag: [{}], "
operator|+
literal|"length: [{}]."
argument_list|,
name|key
argument_list|,
name|objectMetadata
operator|.
name|getETag
argument_list|()
argument_list|,
name|objectMetadata
operator|.
name|getContentLength
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|fileMetadata
return|;
block|}
catch|catch
parameter_list|(
name|CosServiceException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getStatusCode
argument_list|()
operator|!=
name|HttpStatus
operator|.
name|SC_NOT_FOUND
condition|)
block|{
name|String
name|errorMsg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Retrieve file metadata file failed. "
operator|+
literal|"COS key: [%s], CosServiceException: [%s]."
argument_list|,
name|key
argument_list|,
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errorMsg
argument_list|)
expr_stmt|;
name|handleException
argument_list|(
operator|new
name|Exception
argument_list|(
name|errorMsg
argument_list|)
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|retrieveMetadata (String key)
specifier|public
name|FileMetadata
name|retrieveMetadata
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|key
operator|.
name|endsWith
argument_list|(
name|CosNFileSystem
operator|.
name|PATH_DELIMITER
argument_list|)
condition|)
block|{
name|key
operator|=
name|key
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|key
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|key
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|FileMetadata
name|fileMetadata
init|=
name|queryObjectMetadata
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileMetadata
operator|!=
literal|null
condition|)
block|{
return|return
name|fileMetadata
return|;
block|}
block|}
comment|// If the key is a directory.
name|key
operator|=
name|key
operator|+
name|CosNFileSystem
operator|.
name|PATH_DELIMITER
expr_stmt|;
return|return
name|queryObjectMetadata
argument_list|(
name|key
argument_list|)
return|;
block|}
comment|/**    * Download a COS object and return the input stream associated with it.    *    * @param key The object key that is being retrieved from the COS bucket    * @return This method returns null if the key is not found    * @throws IOException if failed to download.    */
annotation|@
name|Override
DECL|method|retrieve (String key)
specifier|public
name|InputStream
name|retrieve
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Retrieve object key: [{}]."
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|GetObjectRequest
name|getObjectRequest
init|=
operator|new
name|GetObjectRequest
argument_list|(
name|this
operator|.
name|bucketName
argument_list|,
name|key
argument_list|)
decl_stmt|;
try|try
block|{
name|COSObject
name|cosObject
init|=
operator|(
name|COSObject
operator|)
name|callCOSClientWithRetry
argument_list|(
name|getObjectRequest
argument_list|)
decl_stmt|;
return|return
name|cosObject
operator|.
name|getObjectContent
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|errMsg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Retrieving key: [%s] occurs "
operator|+
literal|"an exception: [%s]."
argument_list|,
name|key
argument_list|,
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Retrieving COS key: [{}] occurs an exception: [{}]."
argument_list|,
name|key
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|handleException
argument_list|(
operator|new
name|Exception
argument_list|(
name|errMsg
argument_list|)
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
comment|// never will get here
return|return
literal|null
return|;
block|}
comment|/**    * Retrieved a part of a COS object, which is specified the start position.    *    * @param key            The object key that is being retrieved from    *                       the COS bucket.    * @param byteRangeStart The start position of the part to be retrieved in    *                       the object.    * @return The input stream associated with the retrieved object.    * @throws IOException if failed to retrieve.    */
annotation|@
name|Override
DECL|method|retrieve (String key, long byteRangeStart)
specifier|public
name|InputStream
name|retrieve
parameter_list|(
name|String
name|key
parameter_list|,
name|long
name|byteRangeStart
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Retrieve COS key:[{}]. range start:[{}]."
argument_list|,
name|key
argument_list|,
name|byteRangeStart
argument_list|)
expr_stmt|;
name|long
name|fileSize
init|=
name|getFileLength
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|long
name|byteRangeEnd
init|=
name|fileSize
operator|-
literal|1
decl_stmt|;
name|GetObjectRequest
name|getObjectRequest
init|=
operator|new
name|GetObjectRequest
argument_list|(
name|this
operator|.
name|bucketName
argument_list|,
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|byteRangeEnd
operator|>=
name|byteRangeStart
condition|)
block|{
name|getObjectRequest
operator|.
name|setRange
argument_list|(
name|byteRangeStart
argument_list|,
name|fileSize
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|COSObject
name|cosObject
init|=
operator|(
name|COSObject
operator|)
name|callCOSClientWithRetry
argument_list|(
name|getObjectRequest
argument_list|)
decl_stmt|;
return|return
name|cosObject
operator|.
name|getObjectContent
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|errMsg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Retrieving COS key: [%s] occurs an exception. "
operator|+
literal|"byte range start: [%s], exception: [%s]."
argument_list|,
name|key
argument_list|,
name|byteRangeStart
argument_list|,
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errMsg
argument_list|)
expr_stmt|;
name|handleException
argument_list|(
operator|new
name|Exception
argument_list|(
name|errMsg
argument_list|)
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
comment|// never will get here
return|return
literal|null
return|;
block|}
comment|/**    * Download a part of a COS object, which is specified the start and    * end position.    *    * @param key            The object key that is being downloaded    * @param byteRangeStart The start position of the part to be retrieved in    *                       the object.    * @param byteRangeEnd   The end position of the part to be retrieved in    *                       the object.    * @return The input stream associated with the retrieved objects.    * @throws IOException If failed to retrieve.    */
annotation|@
name|Override
DECL|method|retrieveBlock (String key, long byteRangeStart, long byteRangeEnd)
specifier|public
name|InputStream
name|retrieveBlock
parameter_list|(
name|String
name|key
parameter_list|,
name|long
name|byteRangeStart
parameter_list|,
name|long
name|byteRangeEnd
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|GetObjectRequest
name|request
init|=
operator|new
name|GetObjectRequest
argument_list|(
name|this
operator|.
name|bucketName
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|request
operator|.
name|setRange
argument_list|(
name|byteRangeStart
argument_list|,
name|byteRangeEnd
argument_list|)
expr_stmt|;
name|COSObject
name|cosObject
init|=
operator|(
name|COSObject
operator|)
name|this
operator|.
name|callCOSClientWithRetry
argument_list|(
name|request
argument_list|)
decl_stmt|;
return|return
name|cosObject
operator|.
name|getObjectContent
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|CosServiceException
name|e
parameter_list|)
block|{
name|String
name|errMsg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Retrieving key [%s] with byteRangeStart [%d] occurs "
operator|+
literal|"an CosServiceException: [%s]."
argument_list|,
name|key
argument_list|,
name|byteRangeStart
argument_list|,
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errMsg
argument_list|)
expr_stmt|;
name|handleException
argument_list|(
operator|new
name|Exception
argument_list|(
name|errMsg
argument_list|)
argument_list|,
name|key
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|CosClientException
name|e
parameter_list|)
block|{
name|String
name|errMsg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Retrieving key [%s] with byteRangeStart [%d] "
operator|+
literal|"occurs an exception: [%s]."
argument_list|,
name|key
argument_list|,
name|byteRangeStart
argument_list|,
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Retrieving COS key: [{}] with byteRangeStart: [{}] "
operator|+
literal|"occurs an exception: [{}]."
argument_list|,
name|key
argument_list|,
name|byteRangeStart
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|handleException
argument_list|(
operator|new
name|Exception
argument_list|(
name|errMsg
argument_list|)
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|list (String prefix, int maxListingLength)
specifier|public
name|PartialListing
name|list
parameter_list|(
name|String
name|prefix
parameter_list|,
name|int
name|maxListingLength
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|list
argument_list|(
name|prefix
argument_list|,
name|maxListingLength
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|list (String prefix, int maxListingLength, String priorLastKey, boolean recurse)
specifier|public
name|PartialListing
name|list
parameter_list|(
name|String
name|prefix
parameter_list|,
name|int
name|maxListingLength
parameter_list|,
name|String
name|priorLastKey
parameter_list|,
name|boolean
name|recurse
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|list
argument_list|(
name|prefix
argument_list|,
name|recurse
condition|?
literal|null
else|:
name|CosNFileSystem
operator|.
name|PATH_DELIMITER
argument_list|,
name|maxListingLength
argument_list|,
name|priorLastKey
argument_list|)
return|;
block|}
comment|/**    * List the metadata for all objects that    * the object key has the specified prefix.    *    * @param prefix           The prefix to be listed.    * @param delimiter        The delimiter is a sign, the same paths between    *                         are listed.    * @param maxListingLength The maximum number of listed entries.    * @param priorLastKey     The last key in any previous search.    * @return A metadata list on the match.    * @throws IOException If list objects failed.    */
DECL|method|list (String prefix, String delimiter, int maxListingLength, String priorLastKey)
specifier|private
name|PartialListing
name|list
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|delimiter
parameter_list|,
name|int
name|maxListingLength
parameter_list|,
name|String
name|priorLastKey
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"List objects. prefix: [{}], delimiter: [{}], "
operator|+
literal|"maxListLength: [{}], priorLastKey: [{}]."
argument_list|,
name|prefix
argument_list|,
name|delimiter
argument_list|,
name|maxListingLength
argument_list|,
name|priorLastKey
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|prefix
operator|.
name|startsWith
argument_list|(
name|CosNFileSystem
operator|.
name|PATH_DELIMITER
argument_list|)
condition|)
block|{
name|prefix
operator|+=
name|CosNFileSystem
operator|.
name|PATH_DELIMITER
expr_stmt|;
block|}
name|ListObjectsRequest
name|listObjectsRequest
init|=
operator|new
name|ListObjectsRequest
argument_list|()
decl_stmt|;
name|listObjectsRequest
operator|.
name|setBucketName
argument_list|(
name|bucketName
argument_list|)
expr_stmt|;
name|listObjectsRequest
operator|.
name|setPrefix
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
name|listObjectsRequest
operator|.
name|setDelimiter
argument_list|(
name|delimiter
argument_list|)
expr_stmt|;
name|listObjectsRequest
operator|.
name|setMarker
argument_list|(
name|priorLastKey
argument_list|)
expr_stmt|;
name|listObjectsRequest
operator|.
name|setMaxKeys
argument_list|(
name|maxListingLength
argument_list|)
expr_stmt|;
name|ObjectListing
name|objectListing
init|=
literal|null
decl_stmt|;
try|try
block|{
name|objectListing
operator|=
operator|(
name|ObjectListing
operator|)
name|callCOSClientWithRetry
argument_list|(
name|listObjectsRequest
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|errMsg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"prefix: [%s], delimiter: [%s], "
operator|+
literal|"maxListingLength: [%d], priorLastKey: [%s]. "
operator|+
literal|"List objects occur an exception: [%s]."
argument_list|,
name|prefix
argument_list|,
operator|(
name|delimiter
operator|==
literal|null
operator|)
condition|?
literal|""
else|:
name|delimiter
argument_list|,
name|maxListingLength
argument_list|,
name|priorLastKey
argument_list|,
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errMsg
argument_list|)
expr_stmt|;
name|handleException
argument_list|(
operator|new
name|Exception
argument_list|(
name|errMsg
argument_list|)
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
name|ArrayList
argument_list|<
name|FileMetadata
argument_list|>
name|fileMetadataArray
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|FileMetadata
argument_list|>
name|commonPrefixArray
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|objectListing
condition|)
block|{
name|String
name|errMsg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"List the prefix: [%s] failed. "
operator|+
literal|"delimiter: [%s], max listing length:"
operator|+
literal|" [%s], prior last key: [%s]"
argument_list|,
name|prefix
argument_list|,
name|delimiter
argument_list|,
name|maxListingLength
argument_list|,
name|priorLastKey
argument_list|)
decl_stmt|;
name|handleException
argument_list|(
operator|new
name|Exception
argument_list|(
name|errMsg
argument_list|)
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|COSObjectSummary
argument_list|>
name|summaries
init|=
name|objectListing
operator|.
name|getObjectSummaries
argument_list|()
decl_stmt|;
for|for
control|(
name|COSObjectSummary
name|cosObjectSummary
range|:
name|summaries
control|)
block|{
name|String
name|filePath
init|=
name|cosObjectSummary
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|filePath
operator|.
name|startsWith
argument_list|(
name|CosNFileSystem
operator|.
name|PATH_DELIMITER
argument_list|)
condition|)
block|{
name|filePath
operator|=
name|CosNFileSystem
operator|.
name|PATH_DELIMITER
operator|+
name|filePath
expr_stmt|;
block|}
if|if
condition|(
name|filePath
operator|.
name|equals
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|long
name|mtime
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|cosObjectSummary
operator|.
name|getLastModified
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|mtime
operator|=
name|cosObjectSummary
operator|.
name|getLastModified
argument_list|()
operator|.
name|getTime
argument_list|()
expr_stmt|;
block|}
name|long
name|fileLen
init|=
name|cosObjectSummary
operator|.
name|getSize
argument_list|()
decl_stmt|;
name|fileMetadataArray
operator|.
name|add
argument_list|(
operator|new
name|FileMetadata
argument_list|(
name|filePath
argument_list|,
name|fileLen
argument_list|,
name|mtime
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|commonPrefixes
init|=
name|objectListing
operator|.
name|getCommonPrefixes
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|commonPrefix
range|:
name|commonPrefixes
control|)
block|{
if|if
condition|(
operator|!
name|commonPrefix
operator|.
name|startsWith
argument_list|(
name|CosNFileSystem
operator|.
name|PATH_DELIMITER
argument_list|)
condition|)
block|{
name|commonPrefix
operator|=
name|CosNFileSystem
operator|.
name|PATH_DELIMITER
operator|+
name|commonPrefix
expr_stmt|;
block|}
name|commonPrefixArray
operator|.
name|add
argument_list|(
operator|new
name|FileMetadata
argument_list|(
name|commonPrefix
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|FileMetadata
index|[]
name|fileMetadata
init|=
operator|new
name|FileMetadata
index|[
name|fileMetadataArray
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fileMetadataArray
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|fileMetadata
index|[
name|i
index|]
operator|=
name|fileMetadataArray
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|FileMetadata
index|[]
name|commonPrefixMetaData
init|=
operator|new
name|FileMetadata
index|[
name|commonPrefixArray
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|commonPrefixArray
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|commonPrefixMetaData
index|[
name|i
index|]
operator|=
name|commonPrefixArray
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
comment|// when truncated is false, it means that listing is finished.
if|if
condition|(
operator|!
name|objectListing
operator|.
name|isTruncated
argument_list|()
condition|)
block|{
return|return
operator|new
name|PartialListing
argument_list|(
literal|null
argument_list|,
name|fileMetadata
argument_list|,
name|commonPrefixMetaData
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|PartialListing
argument_list|(
name|objectListing
operator|.
name|getNextMarker
argument_list|()
argument_list|,
name|fileMetadata
argument_list|,
name|commonPrefixMetaData
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|delete (String key)
specifier|public
name|void
name|delete
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Delete object key: [{}] from bucket: {}."
argument_list|,
name|key
argument_list|,
name|this
operator|.
name|bucketName
argument_list|)
expr_stmt|;
try|try
block|{
name|DeleteObjectRequest
name|deleteObjectRequest
init|=
operator|new
name|DeleteObjectRequest
argument_list|(
name|bucketName
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|callCOSClientWithRetry
argument_list|(
name|deleteObjectRequest
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|errMsg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Delete key: [%s] occurs an exception: [%s]."
argument_list|,
name|key
argument_list|,
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errMsg
argument_list|)
expr_stmt|;
name|handleException
argument_list|(
operator|new
name|Exception
argument_list|(
name|errMsg
argument_list|)
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|rename (String srcKey, String dstKey)
specifier|public
name|void
name|rename
parameter_list|(
name|String
name|srcKey
parameter_list|,
name|String
name|dstKey
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Rename source key: [{}] to dest key: [{}]."
argument_list|,
name|srcKey
argument_list|,
name|dstKey
argument_list|)
expr_stmt|;
try|try
block|{
name|CopyObjectRequest
name|copyObjectRequest
init|=
operator|new
name|CopyObjectRequest
argument_list|(
name|bucketName
argument_list|,
name|srcKey
argument_list|,
name|bucketName
argument_list|,
name|dstKey
argument_list|)
decl_stmt|;
name|callCOSClientWithRetry
argument_list|(
name|copyObjectRequest
argument_list|)
expr_stmt|;
name|DeleteObjectRequest
name|deleteObjectRequest
init|=
operator|new
name|DeleteObjectRequest
argument_list|(
name|bucketName
argument_list|,
name|srcKey
argument_list|)
decl_stmt|;
name|callCOSClientWithRetry
argument_list|(
name|deleteObjectRequest
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|errMsg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Rename object unsuccessfully. "
operator|+
literal|"source cos key: [%s], dest COS "
operator|+
literal|"key: [%s], exception: [%s]"
argument_list|,
name|srcKey
argument_list|,
name|dstKey
argument_list|,
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errMsg
argument_list|)
expr_stmt|;
name|handleException
argument_list|(
operator|new
name|Exception
argument_list|(
name|errMsg
argument_list|)
argument_list|,
name|srcKey
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|copy (String srcKey, String dstKey)
specifier|public
name|void
name|copy
parameter_list|(
name|String
name|srcKey
parameter_list|,
name|String
name|dstKey
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Copy source key: [{}] to dest key: [{}]."
argument_list|,
name|srcKey
argument_list|,
name|dstKey
argument_list|)
expr_stmt|;
try|try
block|{
name|CopyObjectRequest
name|copyObjectRequest
init|=
operator|new
name|CopyObjectRequest
argument_list|(
name|bucketName
argument_list|,
name|srcKey
argument_list|,
name|bucketName
argument_list|,
name|dstKey
argument_list|)
decl_stmt|;
name|callCOSClientWithRetry
argument_list|(
name|copyObjectRequest
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|errMsg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Copy object unsuccessfully. "
operator|+
literal|"source COS key: %s, dest COS key: "
operator|+
literal|"%s, exception: %s"
argument_list|,
name|srcKey
argument_list|,
name|dstKey
argument_list|,
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errMsg
argument_list|)
expr_stmt|;
name|handleException
argument_list|(
operator|new
name|Exception
argument_list|(
name|errMsg
argument_list|)
argument_list|,
name|srcKey
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|purge (String prefix)
specifier|public
name|void
name|purge
parameter_list|(
name|String
name|prefix
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"purge not supported"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|dump ()
specifier|public
name|void
name|dump
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"dump not supported"
argument_list|)
throw|;
block|}
comment|// process Exception and print detail
DECL|method|handleException (Exception e, String key)
specifier|private
name|void
name|handleException
parameter_list|(
name|Exception
name|e
parameter_list|,
name|String
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|cosPath
init|=
name|CosNFileSystem
operator|.
name|SCHEME
operator|+
literal|"://"
operator|+
name|bucketName
operator|+
name|key
decl_stmt|;
name|String
name|exceptInfo
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s : %s"
argument_list|,
name|cosPath
argument_list|,
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|exceptInfo
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getFileLength (String key)
specifier|public
name|long
name|getFileLength
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Get file length. COS key: {}"
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|GetObjectMetadataRequest
name|getObjectMetadataRequest
init|=
operator|new
name|GetObjectMetadataRequest
argument_list|(
name|bucketName
argument_list|,
name|key
argument_list|)
decl_stmt|;
try|try
block|{
name|ObjectMetadata
name|objectMetadata
init|=
operator|(
name|ObjectMetadata
operator|)
name|callCOSClientWithRetry
argument_list|(
name|getObjectMetadataRequest
argument_list|)
decl_stmt|;
return|return
name|objectMetadata
operator|.
name|getContentLength
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|errMsg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Getting file length occurs an exception."
operator|+
literal|"COS key: %s, exception: %s"
argument_list|,
name|key
argument_list|,
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errMsg
argument_list|)
expr_stmt|;
name|handleException
argument_list|(
operator|new
name|Exception
argument_list|(
name|errMsg
argument_list|)
argument_list|,
name|key
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
comment|// never will get here
block|}
block|}
DECL|method|callCOSClientWithRetry (X request)
specifier|private
parameter_list|<
name|X
parameter_list|>
name|Object
name|callCOSClientWithRetry
parameter_list|(
name|X
name|request
parameter_list|)
throws|throws
name|CosServiceException
throws|,
name|IOException
block|{
name|String
name|sdkMethod
init|=
literal|""
decl_stmt|;
name|int
name|retryIndex
init|=
literal|1
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
if|if
condition|(
name|request
operator|instanceof
name|PutObjectRequest
condition|)
block|{
name|sdkMethod
operator|=
literal|"putObject"
expr_stmt|;
return|return
name|this
operator|.
name|cosClient
operator|.
name|putObject
argument_list|(
operator|(
name|PutObjectRequest
operator|)
name|request
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|request
operator|instanceof
name|UploadPartRequest
condition|)
block|{
name|sdkMethod
operator|=
literal|"uploadPart"
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|UploadPartRequest
operator|)
name|request
operator|)
operator|.
name|getInputStream
argument_list|()
operator|instanceof
name|ByteBufferInputStream
condition|)
block|{
operator|(
operator|(
name|UploadPartRequest
operator|)
name|request
operator|)
operator|.
name|getInputStream
argument_list|()
operator|.
name|mark
argument_list|(
call|(
name|int
call|)
argument_list|(
operator|(
name|UploadPartRequest
operator|)
name|request
argument_list|)
operator|.
name|getPartSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|this
operator|.
name|cosClient
operator|.
name|uploadPart
argument_list|(
operator|(
name|UploadPartRequest
operator|)
name|request
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|request
operator|instanceof
name|GetObjectMetadataRequest
condition|)
block|{
name|sdkMethod
operator|=
literal|"queryObjectMeta"
expr_stmt|;
return|return
name|this
operator|.
name|cosClient
operator|.
name|getObjectMetadata
argument_list|(
operator|(
name|GetObjectMetadataRequest
operator|)
name|request
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|request
operator|instanceof
name|DeleteObjectRequest
condition|)
block|{
name|sdkMethod
operator|=
literal|"deleteObject"
expr_stmt|;
name|this
operator|.
name|cosClient
operator|.
name|deleteObject
argument_list|(
operator|(
name|DeleteObjectRequest
operator|)
name|request
argument_list|)
expr_stmt|;
return|return
operator|new
name|Object
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|request
operator|instanceof
name|CopyObjectRequest
condition|)
block|{
name|sdkMethod
operator|=
literal|"copyFile"
expr_stmt|;
return|return
name|this
operator|.
name|cosClient
operator|.
name|copyObject
argument_list|(
operator|(
name|CopyObjectRequest
operator|)
name|request
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|request
operator|instanceof
name|GetObjectRequest
condition|)
block|{
name|sdkMethod
operator|=
literal|"getObject"
expr_stmt|;
return|return
name|this
operator|.
name|cosClient
operator|.
name|getObject
argument_list|(
operator|(
name|GetObjectRequest
operator|)
name|request
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|request
operator|instanceof
name|ListObjectsRequest
condition|)
block|{
name|sdkMethod
operator|=
literal|"listObjects"
expr_stmt|;
return|return
name|this
operator|.
name|cosClient
operator|.
name|listObjects
argument_list|(
operator|(
name|ListObjectsRequest
operator|)
name|request
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"no such method"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|CosServiceException
name|cse
parameter_list|)
block|{
name|String
name|errMsg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Call cos sdk failed, "
operator|+
literal|"retryIndex: [%d / %d], "
operator|+
literal|"call method: %s, exception: %s"
argument_list|,
name|retryIndex
argument_list|,
name|this
operator|.
name|maxRetryTimes
argument_list|,
name|sdkMethod
argument_list|,
name|cse
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|statusCode
init|=
name|cse
operator|.
name|getStatusCode
argument_list|()
decl_stmt|;
comment|// Retry all server errors
if|if
condition|(
name|statusCode
operator|/
literal|100
operator|==
literal|5
condition|)
block|{
if|if
condition|(
name|retryIndex
operator|<=
name|this
operator|.
name|maxRetryTimes
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|errMsg
argument_list|)
expr_stmt|;
name|long
name|sleepLeast
init|=
name|retryIndex
operator|*
literal|300L
decl_stmt|;
name|long
name|sleepBound
init|=
name|retryIndex
operator|*
literal|500L
decl_stmt|;
try|try
block|{
if|if
condition|(
name|request
operator|instanceof
name|UploadPartRequest
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|UploadPartRequest
operator|)
name|request
operator|)
operator|.
name|getInputStream
argument_list|()
operator|instanceof
name|ByteBufferInputStream
condition|)
block|{
operator|(
operator|(
name|UploadPartRequest
operator|)
name|request
operator|)
operator|.
name|getInputStream
argument_list|()
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
name|Thread
operator|.
name|sleep
argument_list|(
name|ThreadLocalRandom
operator|.
name|current
argument_list|()
operator|.
name|nextLong
argument_list|(
name|sleepLeast
argument_list|,
name|sleepBound
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|retryIndex
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
name|errMsg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|errMsg
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
name|cse
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|errMsg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Call cos sdk failed, "
operator|+
literal|"call method: %s, exception: %s"
argument_list|,
name|sdkMethod
argument_list|,
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errMsg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|errMsg
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
literal|null
operator|!=
name|this
operator|.
name|cosClient
condition|)
block|{
name|this
operator|.
name|cosClient
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

