begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.cosn
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|cosn
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|qcloud
operator|.
name|cos
operator|.
name|auth
operator|.
name|COSCredentialsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|cosn
operator|.
name|auth
operator|.
name|COSCredentialProviderList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|cosn
operator|.
name|auth
operator|.
name|EnvironmentVariableCredentialProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|cosn
operator|.
name|auth
operator|.
name|SimpleCredentialProvider
import|;
end_import

begin_comment
comment|/**  * Utility methods for CosN code.  */
end_comment

begin_class
DECL|class|CosNUtils
specifier|public
specifier|final
class|class
name|CosNUtils
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CosNUtils
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|INSTANTIATION_EXCEPTION
specifier|static
specifier|final
name|String
name|INSTANTIATION_EXCEPTION
init|=
literal|"instantiation exception"
decl_stmt|;
DECL|field|NOT_COS_CREDENTIAL_PROVIDER
specifier|static
specifier|final
name|String
name|NOT_COS_CREDENTIAL_PROVIDER
init|=
literal|"is not cos credential provider"
decl_stmt|;
DECL|field|ABSTRACT_CREDENTIAL_PROVIDER
specifier|static
specifier|final
name|String
name|ABSTRACT_CREDENTIAL_PROVIDER
init|=
literal|"is abstract and therefore cannot be created"
decl_stmt|;
DECL|method|CosNUtils ()
specifier|private
name|CosNUtils
parameter_list|()
block|{   }
DECL|method|createCosCredentialsProviderSet ( Configuration conf)
specifier|public
specifier|static
name|COSCredentialProviderList
name|createCosCredentialsProviderSet
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|COSCredentialProviderList
name|credentialProviderList
init|=
operator|new
name|COSCredentialProviderList
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|cosClasses
init|=
name|CosNUtils
operator|.
name|loadCosProviderClasses
argument_list|(
name|conf
argument_list|,
name|CosNConfigKeys
operator|.
name|COSN_CREDENTIALS_PROVIDER
argument_list|)
decl_stmt|;
if|if
condition|(
literal|0
operator|==
name|cosClasses
operator|.
name|length
condition|)
block|{
name|credentialProviderList
operator|.
name|add
argument_list|(
operator|new
name|SimpleCredentialProvider
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|credentialProviderList
operator|.
name|add
argument_list|(
operator|new
name|EnvironmentVariableCredentialProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|credClass
range|:
name|cosClasses
control|)
block|{
name|credentialProviderList
operator|.
name|add
argument_list|(
name|createCOSCredentialProvider
argument_list|(
name|conf
argument_list|,
name|credClass
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|credentialProviderList
return|;
block|}
DECL|method|loadCosProviderClasses ( Configuration conf, String key, Class<?>... defaultValue)
specifier|public
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|loadCosProviderClasses
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|key
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
modifier|...
name|defaultValue
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|conf
operator|.
name|getClasses
argument_list|(
name|key
argument_list|,
name|defaultValue
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|Throwable
name|c
init|=
name|e
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
condition|?
name|e
operator|.
name|getCause
argument_list|()
else|:
name|e
decl_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"From option "
operator|+
name|key
operator|+
literal|' '
operator|+
name|c
argument_list|,
name|c
argument_list|)
throw|;
block|}
block|}
DECL|method|createCOSCredentialProvider ( Configuration conf, Class<?> credClass)
specifier|public
specifier|static
name|COSCredentialsProvider
name|createCOSCredentialProvider
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|credClass
parameter_list|)
throws|throws
name|IOException
block|{
name|COSCredentialsProvider
name|credentialsProvider
decl_stmt|;
if|if
condition|(
operator|!
name|COSCredentialsProvider
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|credClass
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"class "
operator|+
name|credClass
operator|+
literal|" "
operator|+
name|NOT_COS_CREDENTIAL_PROVIDER
argument_list|)
throw|;
block|}
if|if
condition|(
name|Modifier
operator|.
name|isAbstract
argument_list|(
name|credClass
operator|.
name|getModifiers
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"class "
operator|+
name|credClass
operator|+
literal|" "
operator|+
name|ABSTRACT_CREDENTIAL_PROVIDER
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Credential Provider class: "
operator|+
name|credClass
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
comment|// new credClass()
name|Constructor
name|constructor
init|=
name|getConstructor
argument_list|(
name|credClass
argument_list|)
decl_stmt|;
if|if
condition|(
name|constructor
operator|!=
literal|null
condition|)
block|{
name|credentialsProvider
operator|=
operator|(
name|COSCredentialsProvider
operator|)
name|constructor
operator|.
name|newInstance
argument_list|()
expr_stmt|;
return|return
name|credentialsProvider
return|;
block|}
comment|// new credClass(conf)
name|constructor
operator|=
name|getConstructor
argument_list|(
name|credClass
argument_list|,
name|Configuration
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|constructor
condition|)
block|{
name|credentialsProvider
operator|=
operator|(
name|COSCredentialsProvider
operator|)
name|constructor
operator|.
name|newInstance
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
name|credentialsProvider
return|;
block|}
name|Method
name|factory
init|=
name|getFactoryMethod
argument_list|(
name|credClass
argument_list|,
name|COSCredentialsProvider
operator|.
name|class
argument_list|,
literal|"getInstance"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|factory
condition|)
block|{
name|credentialsProvider
operator|=
operator|(
name|COSCredentialsProvider
operator|)
name|factory
operator|.
name|invoke
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
name|credentialsProvider
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Not supported constructor or factory method found"
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|credClass
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|INSTANTIATION_EXCEPTION
operator|+
literal|": "
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|credClass
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|INSTANTIATION_EXCEPTION
operator|+
literal|": "
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
name|Throwable
name|targetException
init|=
name|e
operator|.
name|getTargetException
argument_list|()
decl_stmt|;
if|if
condition|(
name|targetException
operator|==
literal|null
condition|)
block|{
name|targetException
operator|=
name|e
expr_stmt|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
name|credClass
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|INSTANTIATION_EXCEPTION
operator|+
literal|": "
operator|+
name|targetException
argument_list|,
name|targetException
argument_list|)
throw|;
block|}
block|}
DECL|method|getConstructor (Class<?> cl, Class<?>... args)
specifier|private
specifier|static
name|Constructor
argument_list|<
name|?
argument_list|>
name|getConstructor
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cl
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
modifier|...
name|args
parameter_list|)
block|{
try|try
block|{
name|Constructor
name|constructor
init|=
name|cl
operator|.
name|getDeclaredConstructor
argument_list|(
name|args
argument_list|)
decl_stmt|;
return|return
name|Modifier
operator|.
name|isPublic
argument_list|(
name|constructor
operator|.
name|getModifiers
argument_list|()
argument_list|)
condition|?
name|constructor
else|:
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|getFactoryMethod ( Class<?> cl, Class<?> returnType, String methodName)
specifier|private
specifier|static
name|Method
name|getFactoryMethod
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cl
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|returnType
parameter_list|,
name|String
name|methodName
parameter_list|)
block|{
try|try
block|{
name|Method
name|m
init|=
name|cl
operator|.
name|getDeclaredMethod
argument_list|(
name|methodName
argument_list|)
decl_stmt|;
if|if
condition|(
name|Modifier
operator|.
name|isPublic
argument_list|(
name|m
operator|.
name|getModifiers
argument_list|()
argument_list|)
operator|&&
name|Modifier
operator|.
name|isStatic
argument_list|(
name|m
operator|.
name|getModifiers
argument_list|()
argument_list|)
operator|&&
name|returnType
operator|.
name|isAssignableFrom
argument_list|(
name|m
operator|.
name|getReturnType
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|m
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

