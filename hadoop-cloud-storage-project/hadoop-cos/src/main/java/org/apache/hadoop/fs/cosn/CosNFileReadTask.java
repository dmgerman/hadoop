begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.cosn
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|cosn
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryPolicies
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryPolicy
import|;
end_import

begin_comment
comment|/**  * Used by {@link CosNInputStream} as an asynchronous task  * submitted to the thread pool.  * Each task is responsible for reading a part of a large file.  * It is used to pre-read the data from COS to accelerate file reading process.  */
end_comment

begin_class
DECL|class|CosNFileReadTask
specifier|public
class|class
name|CosNFileReadTask
implements|implements
name|Runnable
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CosNFileReadTask
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|key
specifier|private
specifier|final
name|String
name|key
decl_stmt|;
DECL|field|store
specifier|private
specifier|final
name|NativeFileSystemStore
name|store
decl_stmt|;
DECL|field|readBuffer
specifier|private
specifier|final
name|CosNInputStream
operator|.
name|ReadBuffer
name|readBuffer
decl_stmt|;
DECL|field|retryPolicy
specifier|private
name|RetryPolicy
name|retryPolicy
decl_stmt|;
DECL|method|CosNFileReadTask ( Configuration conf, String key, NativeFileSystemStore store, CosNInputStream.ReadBuffer readBuffer)
specifier|public
name|CosNFileReadTask
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|key
parameter_list|,
name|NativeFileSystemStore
name|store
parameter_list|,
name|CosNInputStream
operator|.
name|ReadBuffer
name|readBuffer
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
name|this
operator|.
name|readBuffer
operator|=
name|readBuffer
expr_stmt|;
name|RetryPolicy
name|defaultPolicy
init|=
name|RetryPolicies
operator|.
name|retryUpToMaximumCountWithFixedSleep
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|CosNConfigKeys
operator|.
name|COSN_MAX_RETRIES_KEY
argument_list|,
name|CosNConfigKeys
operator|.
name|DEFAULT_MAX_RETRIES
argument_list|)
argument_list|,
name|conf
operator|.
name|getLong
argument_list|(
name|CosNConfigKeys
operator|.
name|COSN_RETRY_INTERVAL_KEY
argument_list|,
name|CosNConfigKeys
operator|.
name|DEFAULT_RETRY_INTERVAL
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Exception
argument_list|>
argument_list|,
name|RetryPolicy
argument_list|>
name|retryPolicyMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|retryPolicyMap
operator|.
name|put
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
name|defaultPolicy
argument_list|)
expr_stmt|;
name|retryPolicyMap
operator|.
name|put
argument_list|(
name|IndexOutOfBoundsException
operator|.
name|class
argument_list|,
name|RetryPolicies
operator|.
name|TRY_ONCE_THEN_FAIL
argument_list|)
expr_stmt|;
name|retryPolicyMap
operator|.
name|put
argument_list|(
name|NullPointerException
operator|.
name|class
argument_list|,
name|RetryPolicies
operator|.
name|TRY_ONCE_THEN_FAIL
argument_list|)
expr_stmt|;
name|this
operator|.
name|retryPolicy
operator|=
name|RetryPolicies
operator|.
name|retryByException
argument_list|(
name|defaultPolicy
argument_list|,
name|retryPolicyMap
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|int
name|retries
init|=
literal|0
decl_stmt|;
name|RetryPolicy
operator|.
name|RetryAction
name|retryAction
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"read ..."
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|readBuffer
operator|.
name|lock
argument_list|()
expr_stmt|;
do|do
block|{
try|try
block|{
name|InputStream
name|inputStream
init|=
name|this
operator|.
name|store
operator|.
name|retrieveBlock
argument_list|(
name|this
operator|.
name|key
argument_list|,
name|this
operator|.
name|readBuffer
operator|.
name|getStart
argument_list|()
argument_list|,
name|this
operator|.
name|readBuffer
operator|.
name|getEnd
argument_list|()
argument_list|)
decl_stmt|;
name|IOUtils
operator|.
name|readFully
argument_list|(
name|inputStream
argument_list|,
name|this
operator|.
name|readBuffer
operator|.
name|getBuffer
argument_list|()
argument_list|,
literal|0
argument_list|,
name|readBuffer
operator|.
name|getBuffer
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|inputStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|this
operator|.
name|readBuffer
operator|.
name|setStatus
argument_list|(
name|CosNInputStream
operator|.
name|ReadBuffer
operator|.
name|SUCCESS
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|readBuffer
operator|.
name|setStatus
argument_list|(
name|CosNInputStream
operator|.
name|ReadBuffer
operator|.
name|ERROR
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception occurs when retrieve the block range start: "
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|readBuffer
operator|.
name|getStart
argument_list|()
argument_list|)
operator|+
literal|" end: "
operator|+
name|this
operator|.
name|readBuffer
operator|.
name|getEnd
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|retryAction
operator|=
name|this
operator|.
name|retryPolicy
operator|.
name|shouldRetry
argument_list|(
name|e
argument_list|,
name|retries
operator|++
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|retryAction
operator|.
name|action
operator|==
name|RetryPolicy
operator|.
name|RetryAction
operator|.
name|RetryDecision
operator|.
name|RETRY
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|retryAction
operator|.
name|delayMillis
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e1
parameter_list|)
block|{
name|String
name|errMsg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Exception occurs when retry[%s] "
operator|+
literal|"to retrieve the block range start: %s, end:%s"
argument_list|,
name|this
operator|.
name|retryPolicy
operator|.
name|toString
argument_list|()
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|readBuffer
operator|.
name|getStart
argument_list|()
argument_list|)
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|readBuffer
operator|.
name|getEnd
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errMsg
argument_list|,
name|e1
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
do|while
condition|(
name|retryAction
operator|.
name|action
operator|==
name|RetryPolicy
operator|.
name|RetryAction
operator|.
name|RetryDecision
operator|.
name|RETRY
condition|)
do|;
name|this
operator|.
name|readBuffer
operator|.
name|signalAll
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|readBuffer
operator|.
name|unLock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

