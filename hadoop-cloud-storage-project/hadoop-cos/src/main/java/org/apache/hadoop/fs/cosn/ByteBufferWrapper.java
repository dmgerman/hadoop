begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.cosn
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|cosn
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|MappedByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|CleanerUtil
import|;
end_import

begin_comment
comment|/**  * The wrapper for memory buffers and disk buffers.  */
end_comment

begin_class
DECL|class|ByteBufferWrapper
specifier|public
class|class
name|ByteBufferWrapper
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ByteBufferWrapper
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|byteBuffer
specifier|private
name|ByteBuffer
name|byteBuffer
decl_stmt|;
DECL|field|file
specifier|private
name|File
name|file
decl_stmt|;
DECL|field|randomAccessFile
specifier|private
name|RandomAccessFile
name|randomAccessFile
decl_stmt|;
DECL|method|ByteBufferWrapper (ByteBuffer byteBuffer)
name|ByteBufferWrapper
parameter_list|(
name|ByteBuffer
name|byteBuffer
parameter_list|)
block|{
name|this
argument_list|(
name|byteBuffer
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|ByteBufferWrapper (ByteBuffer byteBuffer, RandomAccessFile randomAccessFile, File file)
name|ByteBufferWrapper
parameter_list|(
name|ByteBuffer
name|byteBuffer
parameter_list|,
name|RandomAccessFile
name|randomAccessFile
parameter_list|,
name|File
name|file
parameter_list|)
block|{
name|this
operator|.
name|byteBuffer
operator|=
name|byteBuffer
expr_stmt|;
name|this
operator|.
name|file
operator|=
name|file
expr_stmt|;
name|this
operator|.
name|randomAccessFile
operator|=
name|randomAccessFile
expr_stmt|;
block|}
DECL|method|getByteBuffer ()
specifier|public
name|ByteBuffer
name|getByteBuffer
parameter_list|()
block|{
return|return
name|this
operator|.
name|byteBuffer
return|;
block|}
DECL|method|isDiskBuffer ()
name|boolean
name|isDiskBuffer
parameter_list|()
block|{
return|return
name|this
operator|.
name|file
operator|!=
literal|null
operator|&&
name|this
operator|.
name|randomAccessFile
operator|!=
literal|null
return|;
block|}
DECL|method|munmap (MappedByteBuffer buffer)
specifier|private
name|void
name|munmap
parameter_list|(
name|MappedByteBuffer
name|buffer
parameter_list|)
block|{
if|if
condition|(
name|CleanerUtil
operator|.
name|UNMAP_SUPPORTED
condition|)
block|{
try|try
block|{
name|CleanerUtil
operator|.
name|getCleaner
argument_list|()
operator|.
name|freeBuffer
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to unmap the buffer"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|trace
argument_list|(
name|CleanerUtil
operator|.
name|UNMAP_NOT_SUPPORTED_REASON
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|close ()
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
literal|null
operator|!=
name|this
operator|.
name|byteBuffer
condition|)
block|{
name|this
operator|.
name|byteBuffer
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|IOException
name|exception
init|=
literal|null
decl_stmt|;
comment|// catch all exceptions, and try to free up resources that can be freed.
try|try
block|{
if|if
condition|(
literal|null
operator|!=
name|randomAccessFile
condition|)
block|{
name|this
operator|.
name|randomAccessFile
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Close the random access file occurs an exception."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|exception
operator|=
name|e
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|byteBuffer
operator|instanceof
name|MappedByteBuffer
condition|)
block|{
name|munmap
argument_list|(
operator|(
name|MappedByteBuffer
operator|)
name|this
operator|.
name|byteBuffer
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|this
operator|.
name|file
operator|&&
name|this
operator|.
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|file
operator|.
name|delete
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Delete the tmp file: [{}] failed."
argument_list|,
name|this
operator|.
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
literal|null
operator|!=
name|exception
condition|)
block|{
throw|throw
name|exception
throw|;
block|}
block|}
block|}
end_class

end_unit

