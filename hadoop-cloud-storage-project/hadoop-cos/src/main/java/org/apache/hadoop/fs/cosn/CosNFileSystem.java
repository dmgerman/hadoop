begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.cosn
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|cosn
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListeningExecutorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BufferedFSInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryPolicies
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|BlockingThreadPoolExecutorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_comment
comment|/**  * The core CosN Filesystem implementation.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|CosNFileSystem
specifier|public
class|class
name|CosNFileSystem
extends|extends
name|FileSystem
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CosNFileSystem
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|SCHEME
specifier|public
specifier|static
specifier|final
name|String
name|SCHEME
init|=
literal|"cosn"
decl_stmt|;
DECL|field|PATH_DELIMITER
specifier|public
specifier|static
specifier|final
name|String
name|PATH_DELIMITER
init|=
name|Path
operator|.
name|SEPARATOR
decl_stmt|;
DECL|field|uri
specifier|private
name|URI
name|uri
decl_stmt|;
DECL|field|bucket
specifier|private
name|String
name|bucket
decl_stmt|;
DECL|field|store
specifier|private
name|NativeFileSystemStore
name|store
decl_stmt|;
DECL|field|workingDir
specifier|private
name|Path
name|workingDir
decl_stmt|;
DECL|field|owner
specifier|private
name|String
name|owner
init|=
literal|"Unknown"
decl_stmt|;
DECL|field|group
specifier|private
name|String
name|group
init|=
literal|"Unknown"
decl_stmt|;
DECL|field|boundedIOThreadPool
specifier|private
name|ListeningExecutorService
name|boundedIOThreadPool
decl_stmt|;
DECL|field|boundedCopyThreadPool
specifier|private
name|ListeningExecutorService
name|boundedCopyThreadPool
decl_stmt|;
DECL|method|CosNFileSystem ()
specifier|public
name|CosNFileSystem
parameter_list|()
block|{   }
DECL|method|CosNFileSystem (NativeFileSystemStore store)
specifier|public
name|CosNFileSystem
parameter_list|(
name|NativeFileSystemStore
name|store
parameter_list|)
block|{
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
block|}
comment|/**    * Return the protocol scheme for the FileSystem.    *    * @return<code>cosn</code>    */
annotation|@
name|Override
DECL|method|getScheme ()
specifier|public
name|String
name|getScheme
parameter_list|()
block|{
return|return
name|CosNFileSystem
operator|.
name|SCHEME
return|;
block|}
annotation|@
name|Override
DECL|method|initialize (URI name, Configuration conf)
specifier|public
name|void
name|initialize
parameter_list|(
name|URI
name|name
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|initialize
argument_list|(
name|name
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|bucket
operator|=
name|name
operator|.
name|getHost
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|store
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|store
operator|=
name|createDefaultStore
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|store
operator|.
name|initialize
argument_list|(
name|name
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|uri
operator|=
name|URI
operator|.
name|create
argument_list|(
name|name
operator|.
name|getScheme
argument_list|()
operator|+
literal|"://"
operator|+
name|name
operator|.
name|getAuthority
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|workingDir
operator|=
operator|new
name|Path
argument_list|(
literal|"/user"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|this
operator|.
name|uri
argument_list|,
name|this
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|owner
operator|=
name|getOwnerId
argument_list|()
expr_stmt|;
name|this
operator|.
name|group
operator|=
name|getGroupId
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"owner:"
operator|+
name|owner
operator|+
literal|", group:"
operator|+
name|group
argument_list|)
expr_stmt|;
name|BufferPool
operator|.
name|getInstance
argument_list|()
operator|.
name|initialize
argument_list|(
name|this
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
comment|// initialize the thread pool
name|int
name|uploadThreadPoolSize
init|=
name|this
operator|.
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
name|CosNConfigKeys
operator|.
name|UPLOAD_THREAD_POOL_SIZE_KEY
argument_list|,
name|CosNConfigKeys
operator|.
name|DEFAULT_UPLOAD_THREAD_POOL_SIZE
argument_list|)
decl_stmt|;
name|int
name|readAheadPoolSize
init|=
name|this
operator|.
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
name|CosNConfigKeys
operator|.
name|READ_AHEAD_QUEUE_SIZE
argument_list|,
name|CosNConfigKeys
operator|.
name|DEFAULT_READ_AHEAD_QUEUE_SIZE
argument_list|)
decl_stmt|;
name|int
name|ioThreadPoolSize
init|=
name|uploadThreadPoolSize
operator|+
name|readAheadPoolSize
operator|/
literal|3
decl_stmt|;
name|long
name|threadKeepAlive
init|=
name|this
operator|.
name|getConf
argument_list|()
operator|.
name|getLong
argument_list|(
name|CosNConfigKeys
operator|.
name|THREAD_KEEP_ALIVE_TIME_KEY
argument_list|,
name|CosNConfigKeys
operator|.
name|DEFAULT_THREAD_KEEP_ALIVE_TIME
argument_list|)
decl_stmt|;
name|this
operator|.
name|boundedIOThreadPool
operator|=
name|BlockingThreadPoolExecutorService
operator|.
name|newInstance
argument_list|(
name|ioThreadPoolSize
operator|/
literal|2
argument_list|,
name|ioThreadPoolSize
argument_list|,
name|threadKeepAlive
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
literal|"cos-transfer-thread-pool"
argument_list|)
expr_stmt|;
name|int
name|copyThreadPoolSize
init|=
name|this
operator|.
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
name|CosNConfigKeys
operator|.
name|COPY_THREAD_POOL_SIZE_KEY
argument_list|,
name|CosNConfigKeys
operator|.
name|DEFAULT_COPY_THREAD_POOL_SIZE
argument_list|)
decl_stmt|;
name|this
operator|.
name|boundedCopyThreadPool
operator|=
name|BlockingThreadPoolExecutorService
operator|.
name|newInstance
argument_list|(
name|CosNConfigKeys
operator|.
name|DEFAULT_COPY_THREAD_POOL_SIZE
argument_list|,
name|copyThreadPoolSize
argument_list|,
literal|60L
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
literal|"cos-copy-thread-pool"
argument_list|)
expr_stmt|;
block|}
DECL|method|createDefaultStore (Configuration conf)
specifier|private
specifier|static
name|NativeFileSystemStore
name|createDefaultStore
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|NativeFileSystemStore
name|store
init|=
operator|new
name|CosNativeFileSystemStore
argument_list|()
decl_stmt|;
name|RetryPolicy
name|basePolicy
init|=
name|RetryPolicies
operator|.
name|retryUpToMaximumCountWithFixedSleep
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|CosNConfigKeys
operator|.
name|COSN_MAX_RETRIES_KEY
argument_list|,
name|CosNConfigKeys
operator|.
name|DEFAULT_MAX_RETRIES
argument_list|)
argument_list|,
name|conf
operator|.
name|getLong
argument_list|(
name|CosNConfigKeys
operator|.
name|COSN_RETRY_INTERVAL_KEY
argument_list|,
name|CosNConfigKeys
operator|.
name|DEFAULT_RETRY_INTERVAL
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Exception
argument_list|>
argument_list|,
name|RetryPolicy
argument_list|>
name|exceptionToPolicyMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|exceptionToPolicyMap
operator|.
name|put
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
name|basePolicy
argument_list|)
expr_stmt|;
name|RetryPolicy
name|methodPolicy
init|=
name|RetryPolicies
operator|.
name|retryByException
argument_list|(
name|RetryPolicies
operator|.
name|TRY_ONCE_THEN_FAIL
argument_list|,
name|exceptionToPolicyMap
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RetryPolicy
argument_list|>
name|methodNameToPolicyMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|methodNameToPolicyMap
operator|.
name|put
argument_list|(
literal|"storeFile"
argument_list|,
name|methodPolicy
argument_list|)
expr_stmt|;
name|methodNameToPolicyMap
operator|.
name|put
argument_list|(
literal|"rename"
argument_list|,
name|methodPolicy
argument_list|)
expr_stmt|;
return|return
operator|(
name|NativeFileSystemStore
operator|)
name|RetryProxy
operator|.
name|create
argument_list|(
name|NativeFileSystemStore
operator|.
name|class
argument_list|,
name|store
argument_list|,
name|methodNameToPolicyMap
argument_list|)
return|;
block|}
DECL|method|getOwnerId ()
specifier|private
name|String
name|getOwnerId
parameter_list|()
block|{
return|return
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
return|;
block|}
DECL|method|getGroupId ()
specifier|private
name|String
name|getGroupId
parameter_list|()
block|{
return|return
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
return|;
block|}
DECL|method|getOwnerInfo (boolean getOwnerId)
specifier|private
name|String
name|getOwnerInfo
parameter_list|(
name|boolean
name|getOwnerId
parameter_list|)
block|{
name|String
name|ownerInfoId
init|=
literal|""
decl_stmt|;
try|try
block|{
name|String
name|userName
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
decl_stmt|;
name|String
name|command
init|=
literal|"id -u "
operator|+
name|userName
decl_stmt|;
if|if
condition|(
operator|!
name|getOwnerId
condition|)
block|{
name|command
operator|=
literal|"id -g "
operator|+
name|userName
expr_stmt|;
block|}
name|Process
name|child
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|command
argument_list|)
decl_stmt|;
name|child
operator|.
name|waitFor
argument_list|()
expr_stmt|;
comment|// Get the input stream and read from it
name|InputStream
name|in
init|=
name|child
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
name|StringBuilder
name|strBuffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|c
decl_stmt|;
while|while
condition|(
operator|(
name|c
operator|=
name|in
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|strBuffer
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|c
argument_list|)
expr_stmt|;
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|ownerInfoId
operator|=
name|strBuffer
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Getting owner info occurs a exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|ownerInfoId
return|;
block|}
DECL|method|pathToKey (Path path)
specifier|private
specifier|static
name|String
name|pathToKey
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|getScheme
argument_list|()
operator|!=
literal|null
operator|&&
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// allow uris without trailing slash after bucket to refer to root,
comment|// like cosn://mybucket
return|return
literal|""
return|;
block|}
if|if
condition|(
operator|!
name|path
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Path must be absolute: "
operator|+
name|path
argument_list|)
throw|;
block|}
name|String
name|ret
init|=
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|ret
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
operator|&&
operator|(
name|ret
operator|.
name|indexOf
argument_list|(
literal|"/"
argument_list|)
operator|!=
name|ret
operator|.
name|length
argument_list|()
operator|-
literal|1
operator|)
condition|)
block|{
name|ret
operator|=
name|ret
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|ret
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
DECL|method|keyToPath (String key)
specifier|private
specifier|static
name|Path
name|keyToPath
parameter_list|(
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
operator|!
name|key
operator|.
name|startsWith
argument_list|(
name|PATH_DELIMITER
argument_list|)
condition|)
block|{
return|return
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|key
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|Path
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
DECL|method|makeAbsolute (Path path)
specifier|private
name|Path
name|makeAbsolute
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
return|return
name|path
return|;
block|}
return|return
operator|new
name|Path
argument_list|(
name|workingDir
argument_list|,
name|path
argument_list|)
return|;
block|}
comment|/**    * This optional operation is not yet supported.    */
annotation|@
name|Override
DECL|method|append (Path f, int bufferSize, Progressable progress)
specifier|public
name|FSDataOutputStream
name|append
parameter_list|(
name|Path
name|f
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Not supported"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|create (Path f, FsPermission permission, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)
specifier|public
name|FSDataOutputStream
name|create
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|permission
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
name|fileStatus
decl_stmt|;
try|try
block|{
name|fileStatus
operator|=
name|getFileStatus
argument_list|(
name|f
argument_list|)
expr_stmt|;
if|if
condition|(
name|fileStatus
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileAlreadyExistsException
argument_list|(
name|f
operator|+
literal|" is a directory"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|overwrite
condition|)
block|{
comment|// path references a file and overwrite is disabled
throw|throw
operator|new
name|FileAlreadyExistsException
argument_list|(
name|f
operator|+
literal|" already exists"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating a new file: [{}] in COS."
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
name|Path
name|absolutePath
init|=
name|makeAbsolute
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|pathToKey
argument_list|(
name|absolutePath
argument_list|)
decl_stmt|;
return|return
operator|new
name|FSDataOutputStream
argument_list|(
operator|new
name|CosNOutputStream
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|store
argument_list|,
name|key
argument_list|,
name|blockSize
argument_list|,
name|this
operator|.
name|boundedIOThreadPool
argument_list|)
argument_list|,
name|statistics
argument_list|)
return|;
block|}
DECL|method|rejectRootDirectoryDelete (boolean isEmptyDir, boolean recursive)
specifier|private
name|boolean
name|rejectRootDirectoryDelete
parameter_list|(
name|boolean
name|isEmptyDir
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|PathIOException
block|{
if|if
condition|(
name|isEmptyDir
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|recursive
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|PathIOException
argument_list|(
name|this
operator|.
name|bucket
argument_list|,
literal|"Can not delete root path"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|createNonRecursive (Path f, FsPermission permission, EnumSet<CreateFlag> flags, int bufferSize, short replication, long blockSize, Progressable progress)
specifier|public
name|FSDataOutputStream
name|createNonRecursive
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|permission
parameter_list|,
name|EnumSet
argument_list|<
name|CreateFlag
argument_list|>
name|flags
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|parent
init|=
name|f
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|parent
condition|)
block|{
if|if
condition|(
operator|!
name|getFileStatus
argument_list|(
name|parent
argument_list|)
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileAlreadyExistsException
argument_list|(
literal|"Not a directory: "
operator|+
name|parent
argument_list|)
throw|;
block|}
block|}
return|return
name|create
argument_list|(
name|f
argument_list|,
name|permission
argument_list|,
name|flags
operator|.
name|contains
argument_list|(
name|CreateFlag
operator|.
name|OVERWRITE
argument_list|)
argument_list|,
name|bufferSize
argument_list|,
name|replication
argument_list|,
name|blockSize
argument_list|,
name|progress
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|delete (Path f, boolean recursive)
specifier|public
name|boolean
name|delete
parameter_list|(
name|Path
name|f
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Ready to delete path: [{}]. recursive: [{}]."
argument_list|,
name|f
argument_list|,
name|recursive
argument_list|)
expr_stmt|;
name|FileStatus
name|status
decl_stmt|;
try|try
block|{
name|status
operator|=
name|getFileStatus
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Ready to delete the file: [{}], but it does not exist."
argument_list|,
name|f
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|Path
name|absolutePath
init|=
name|makeAbsolute
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|pathToKey
argument_list|(
name|absolutePath
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|compareToIgnoreCase
argument_list|(
literal|"/"
argument_list|)
operator|==
literal|0
condition|)
block|{
name|FileStatus
index|[]
name|fileStatuses
init|=
name|listStatus
argument_list|(
name|f
argument_list|)
decl_stmt|;
return|return
name|this
operator|.
name|rejectRootDirectoryDelete
argument_list|(
name|fileStatuses
operator|.
name|length
operator|==
literal|0
argument_list|,
name|recursive
argument_list|)
return|;
block|}
if|if
condition|(
name|status
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|key
operator|.
name|endsWith
argument_list|(
name|PATH_DELIMITER
argument_list|)
condition|)
block|{
name|key
operator|+=
name|PATH_DELIMITER
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|recursive
operator|&&
name|listStatus
argument_list|(
name|f
argument_list|)
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|String
name|errMsg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Can not delete the directory: [%s], as"
operator|+
literal|" it is not empty and option recursive is false."
argument_list|,
name|f
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|errMsg
argument_list|)
throw|;
block|}
name|createParent
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|String
name|priorLastKey
init|=
literal|null
decl_stmt|;
do|do
block|{
name|PartialListing
name|listing
init|=
name|store
operator|.
name|list
argument_list|(
name|key
argument_list|,
name|Constants
operator|.
name|COS_MAX_LISTING_LENGTH
argument_list|,
name|priorLastKey
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|FileMetadata
name|file
range|:
name|listing
operator|.
name|getFiles
argument_list|()
control|)
block|{
name|store
operator|.
name|delete
argument_list|(
name|file
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|FileMetadata
name|commonPrefix
range|:
name|listing
operator|.
name|getCommonPrefixes
argument_list|()
control|)
block|{
name|store
operator|.
name|delete
argument_list|(
name|commonPrefix
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|priorLastKey
operator|=
name|listing
operator|.
name|getPriorLastKey
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|priorLastKey
operator|!=
literal|null
condition|)
do|;
try|try
block|{
name|store
operator|.
name|delete
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Deleting the COS key: [{}] occurs an exception."
argument_list|,
name|key
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Delete the file: {}"
argument_list|,
name|f
argument_list|)
expr_stmt|;
name|createParent
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|store
operator|.
name|delete
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|getFileStatus (Path f)
specifier|public
name|FileStatus
name|getFileStatus
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|absolutePath
init|=
name|makeAbsolute
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|pathToKey
argument_list|(
name|absolutePath
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// root always exists
return|return
name|newDirectory
argument_list|(
name|absolutePath
argument_list|)
return|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Call the getFileStatus to obtain the metadata for "
operator|+
literal|"the file: [{}]."
argument_list|,
name|f
argument_list|)
expr_stmt|;
name|FileMetadata
name|meta
init|=
name|store
operator|.
name|retrieveMetadata
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|meta
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|meta
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Path: [{}] is a file. COS key: [{}]"
argument_list|,
name|f
argument_list|,
name|key
argument_list|)
expr_stmt|;
return|return
name|newFile
argument_list|(
name|meta
argument_list|,
name|absolutePath
argument_list|)
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Path: [{}] is a dir. COS key: [{}]"
argument_list|,
name|f
argument_list|,
name|key
argument_list|)
expr_stmt|;
return|return
name|newDirectory
argument_list|(
name|meta
argument_list|,
name|absolutePath
argument_list|)
return|;
block|}
block|}
if|if
condition|(
operator|!
name|key
operator|.
name|endsWith
argument_list|(
name|PATH_DELIMITER
argument_list|)
condition|)
block|{
name|key
operator|+=
name|PATH_DELIMITER
expr_stmt|;
block|}
comment|// Considering that the object store's directory is a common prefix in
comment|// the object key, it needs to check the existence of the path by listing
comment|// the COS key.
name|LOG
operator|.
name|debug
argument_list|(
literal|"List COS key: [{}] to check the existence of the path."
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|PartialListing
name|listing
init|=
name|store
operator|.
name|list
argument_list|(
name|key
argument_list|,
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|listing
operator|.
name|getFiles
argument_list|()
operator|.
name|length
operator|>
literal|0
operator|||
name|listing
operator|.
name|getCommonPrefixes
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Path: [{}] is a directory. COS key: [{}]"
argument_list|,
name|f
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
return|return
name|newDirectory
argument_list|(
name|absolutePath
argument_list|)
return|;
block|}
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"No such file or directory '"
operator|+
name|absolutePath
operator|+
literal|"'"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getUri ()
specifier|public
name|URI
name|getUri
parameter_list|()
block|{
return|return
name|uri
return|;
block|}
comment|/**    *<p>    * If<code>f</code> is a file, this method will make a single call to COS.    * If<code>f</code> is a directory,    * this method will make a maximum of (<i>n</i> / 199) + 2 calls to cos,    * where<i>n</i> is the total number of files    * and directories contained directly in<code>f</code>.    *</p>    */
annotation|@
name|Override
DECL|method|listStatus (Path f)
specifier|public
name|FileStatus
index|[]
name|listStatus
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|absolutePath
init|=
name|makeAbsolute
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|pathToKey
argument_list|(
name|absolutePath
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|FileStatus
name|fileStatus
init|=
name|this
operator|.
name|getFileStatus
argument_list|(
name|f
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileStatus
operator|.
name|isFile
argument_list|()
condition|)
block|{
return|return
operator|new
name|FileStatus
index|[]
block|{
name|fileStatus
block|}
return|;
block|}
block|}
if|if
condition|(
operator|!
name|key
operator|.
name|endsWith
argument_list|(
name|PATH_DELIMITER
argument_list|)
condition|)
block|{
name|key
operator|+=
name|PATH_DELIMITER
expr_stmt|;
block|}
name|URI
name|pathUri
init|=
name|absolutePath
operator|.
name|toUri
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|FileStatus
argument_list|>
name|status
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|priorLastKey
init|=
literal|null
decl_stmt|;
do|do
block|{
name|PartialListing
name|listing
init|=
name|store
operator|.
name|list
argument_list|(
name|key
argument_list|,
name|Constants
operator|.
name|COS_MAX_LISTING_LENGTH
argument_list|,
name|priorLastKey
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|FileMetadata
name|fileMetadata
range|:
name|listing
operator|.
name|getFiles
argument_list|()
control|)
block|{
name|Path
name|subPath
init|=
name|keyToPath
argument_list|(
name|fileMetadata
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileMetadata
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
comment|// this is just the directory we have been asked to list.
name|LOG
operator|.
name|debug
argument_list|(
literal|"The file list contains the COS key [{}] to be listed."
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|status
operator|.
name|add
argument_list|(
name|newFile
argument_list|(
name|fileMetadata
argument_list|,
name|subPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|FileMetadata
name|commonPrefix
range|:
name|listing
operator|.
name|getCommonPrefixes
argument_list|()
control|)
block|{
name|Path
name|subPath
init|=
name|keyToPath
argument_list|(
name|commonPrefix
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|relativePath
init|=
name|pathUri
operator|.
name|relativize
argument_list|(
name|subPath
operator|.
name|toUri
argument_list|()
argument_list|)
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|status
operator|.
name|add
argument_list|(
name|newDirectory
argument_list|(
name|commonPrefix
argument_list|,
operator|new
name|Path
argument_list|(
name|absolutePath
argument_list|,
name|relativePath
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|priorLastKey
operator|=
name|listing
operator|.
name|getPriorLastKey
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|priorLastKey
operator|!=
literal|null
condition|)
do|;
return|return
name|status
operator|.
name|toArray
argument_list|(
operator|new
name|FileStatus
index|[
name|status
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
DECL|method|newFile (FileMetadata meta, Path path)
specifier|private
name|FileStatus
name|newFile
parameter_list|(
name|FileMetadata
name|meta
parameter_list|,
name|Path
name|path
parameter_list|)
block|{
return|return
operator|new
name|FileStatus
argument_list|(
name|meta
operator|.
name|getLength
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|,
name|getDefaultBlockSize
argument_list|()
argument_list|,
name|meta
operator|.
name|getLastModified
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
name|this
operator|.
name|owner
argument_list|,
name|this
operator|.
name|group
argument_list|,
name|path
operator|.
name|makeQualified
argument_list|(
name|this
operator|.
name|getUri
argument_list|()
argument_list|,
name|this
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|newDirectory (Path path)
specifier|private
name|FileStatus
name|newDirectory
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
return|return
operator|new
name|FileStatus
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
name|this
operator|.
name|owner
argument_list|,
name|this
operator|.
name|group
argument_list|,
name|path
operator|.
name|makeQualified
argument_list|(
name|this
operator|.
name|getUri
argument_list|()
argument_list|,
name|this
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|newDirectory (FileMetadata meta, Path path)
specifier|private
name|FileStatus
name|newDirectory
parameter_list|(
name|FileMetadata
name|meta
parameter_list|,
name|Path
name|path
parameter_list|)
block|{
if|if
condition|(
name|meta
operator|==
literal|null
condition|)
block|{
return|return
name|newDirectory
argument_list|(
name|path
argument_list|)
return|;
block|}
return|return
operator|new
name|FileStatus
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|meta
operator|.
name|getLastModified
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
name|this
operator|.
name|owner
argument_list|,
name|this
operator|.
name|group
argument_list|,
name|path
operator|.
name|makeQualified
argument_list|(
name|this
operator|.
name|getUri
argument_list|()
argument_list|,
name|this
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Validate the path from the bottom up.    *    * @param path The path to be validated    * @throws FileAlreadyExistsException The specified path is an existing file    * @throws IOException                Getting the file status of the    *                                    specified path occurs    *                                    an IOException.    */
DECL|method|validatePath (Path path)
specifier|private
name|void
name|validatePath
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|parent
init|=
name|path
operator|.
name|getParent
argument_list|()
decl_stmt|;
do|do
block|{
try|try
block|{
name|FileStatus
name|fileStatus
init|=
name|getFileStatus
argument_list|(
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileStatus
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
break|break;
block|}
else|else
block|{
throw|throw
operator|new
name|FileAlreadyExistsException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Can't make directory for path '%s', it is a file."
argument_list|,
name|parent
argument_list|)
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"The Path: [{}] does not exist."
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
name|parent
operator|=
name|parent
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|parent
operator|!=
literal|null
condition|)
do|;
block|}
annotation|@
name|Override
DECL|method|mkdirs (Path f, FsPermission permission)
specifier|public
name|boolean
name|mkdirs
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|FileStatus
name|fileStatus
init|=
name|getFileStatus
argument_list|(
name|f
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileStatus
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|FileAlreadyExistsException
argument_list|(
literal|"Path is a file: "
operator|+
name|f
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|validatePath
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
return|return
name|mkDirRecursively
argument_list|(
name|f
argument_list|,
name|permission
argument_list|)
return|;
block|}
comment|/**    * Recursively create a directory.    *    * @param f          Absolute path to the directory.    * @param permission Directory permissions. Permission does not work for    *                   the CosN filesystem currently.    * @return Return true if the creation was successful,  throw a IOException.    * @throws IOException The specified path already exists or an error    *                     creating the path.    */
DECL|method|mkDirRecursively (Path f, FsPermission permission)
specifier|public
name|boolean
name|mkDirRecursively
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|absolutePath
init|=
name|makeAbsolute
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|paths
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
do|do
block|{
name|paths
operator|.
name|add
argument_list|(
name|absolutePath
argument_list|)
expr_stmt|;
name|absolutePath
operator|=
name|absolutePath
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|absolutePath
operator|!=
literal|null
condition|)
do|;
for|for
control|(
name|Path
name|path
range|:
name|paths
control|)
block|{
if|if
condition|(
name|path
operator|.
name|equals
argument_list|(
operator|new
name|Path
argument_list|(
name|CosNFileSystem
operator|.
name|PATH_DELIMITER
argument_list|)
argument_list|)
condition|)
block|{
break|break;
block|}
try|try
block|{
name|FileStatus
name|fileStatus
init|=
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileStatus
operator|.
name|isFile
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileAlreadyExistsException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Can't make directory for path: %s, "
operator|+
literal|"since it is a file."
argument_list|,
name|f
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|fileStatus
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Making dir: [{}] in COS"
argument_list|,
name|f
argument_list|)
expr_stmt|;
name|String
name|folderPath
init|=
name|pathToKey
argument_list|(
name|makeAbsolute
argument_list|(
name|f
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|folderPath
operator|.
name|endsWith
argument_list|(
name|PATH_DELIMITER
argument_list|)
condition|)
block|{
name|folderPath
operator|+=
name|PATH_DELIMITER
expr_stmt|;
block|}
name|store
operator|.
name|storeEmptyFile
argument_list|(
name|folderPath
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|mkdir (Path f)
specifier|private
name|boolean
name|mkdir
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|FileStatus
name|fileStatus
init|=
name|getFileStatus
argument_list|(
name|f
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileStatus
operator|.
name|isFile
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileAlreadyExistsException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Can't make directory for path '%s' since it is a file."
argument_list|,
name|f
argument_list|)
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Make directory: [{}] in COS."
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
name|String
name|folderPath
init|=
name|pathToKey
argument_list|(
name|makeAbsolute
argument_list|(
name|f
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|folderPath
operator|.
name|endsWith
argument_list|(
name|PATH_DELIMITER
argument_list|)
condition|)
block|{
name|folderPath
operator|+=
name|PATH_DELIMITER
expr_stmt|;
block|}
name|store
operator|.
name|storeEmptyFile
argument_list|(
name|folderPath
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|open (Path f, int bufferSize)
specifier|public
name|FSDataInputStream
name|open
parameter_list|(
name|Path
name|f
parameter_list|,
name|int
name|bufferSize
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
name|fs
init|=
name|getFileStatus
argument_list|(
name|f
argument_list|)
decl_stmt|;
comment|// will throw if the file doesn't
comment|// exist
if|if
condition|(
name|fs
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"'"
operator|+
name|f
operator|+
literal|"' is a directory"
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Open the file: [{}] for reading."
argument_list|,
name|f
argument_list|)
expr_stmt|;
name|Path
name|absolutePath
init|=
name|makeAbsolute
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|pathToKey
argument_list|(
name|absolutePath
argument_list|)
decl_stmt|;
name|long
name|fileSize
init|=
name|store
operator|.
name|getFileLength
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
operator|new
name|FSDataInputStream
argument_list|(
operator|new
name|BufferedFSInputStream
argument_list|(
operator|new
name|CosNInputStream
argument_list|(
name|this
operator|.
name|getConf
argument_list|()
argument_list|,
name|store
argument_list|,
name|statistics
argument_list|,
name|key
argument_list|,
name|fileSize
argument_list|,
name|this
operator|.
name|boundedIOThreadPool
argument_list|)
argument_list|,
name|bufferSize
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|rename (Path src, Path dst)
specifier|public
name|boolean
name|rename
parameter_list|(
name|Path
name|src
parameter_list|,
name|Path
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Rename source path: [{}] to dest path: [{}]."
argument_list|,
name|src
argument_list|,
name|dst
argument_list|)
expr_stmt|;
comment|// Renaming the root directory is not allowed
if|if
condition|(
name|src
operator|.
name|isRoot
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cannot rename the root directory of a filesystem."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// check the source path whether exists or not
name|FileStatus
name|srcFileStatus
init|=
name|this
operator|.
name|getFileStatus
argument_list|(
name|src
argument_list|)
decl_stmt|;
comment|// Source path and destination path are not allowed to be the same
if|if
condition|(
name|src
operator|.
name|equals
argument_list|(
name|dst
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Source path and dest path refer to "
operator|+
literal|"the same file or directory: [{}]."
argument_list|,
name|dst
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Source path and dest path refer "
operator|+
literal|"the same file or directory"
argument_list|)
throw|;
block|}
comment|// It is not allowed to rename a parent directory to its subdirectory
name|Path
name|dstParentPath
decl_stmt|;
for|for
control|(
name|dstParentPath
operator|=
name|dst
operator|.
name|getParent
argument_list|()
init|;
literal|null
operator|!=
name|dstParentPath
operator|&&
operator|!
name|src
operator|.
name|equals
argument_list|(
name|dstParentPath
argument_list|)
condition|;
name|dstParentPath
operator|=
name|dstParentPath
operator|.
name|getParent
argument_list|()
control|)
block|{
comment|// Recursively find the common parent path of the source and
comment|// destination paths.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Recursively find the common parent directory of the source "
operator|+
literal|"and destination paths. The currently found parent path: {}"
argument_list|,
name|dstParentPath
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|dstParentPath
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"It is not allowed to rename a parent directory:[{}] "
operator|+
literal|"to its subdirectory:[{}]."
argument_list|,
name|src
argument_list|,
name|dst
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"It is not allowed to rename a parent directory: %s "
operator|+
literal|"to its subdirectory: %s"
argument_list|,
name|src
argument_list|,
name|dst
argument_list|)
argument_list|)
throw|;
block|}
name|FileStatus
name|dstFileStatus
decl_stmt|;
try|try
block|{
name|dstFileStatus
operator|=
name|this
operator|.
name|getFileStatus
argument_list|(
name|dst
argument_list|)
expr_stmt|;
comment|// The destination path exists and is a file,
comment|// and the rename operation is not allowed.
if|if
condition|(
name|dstFileStatus
operator|.
name|isFile
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileAlreadyExistsException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"File: %s already exists"
argument_list|,
name|dstFileStatus
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
else|else
block|{
comment|// The destination path is an existing directory,
comment|// and it is checked whether there is a file or directory
comment|// with the same name as the source path under the destination path
name|dst
operator|=
operator|new
name|Path
argument_list|(
name|dst
argument_list|,
name|src
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|statuses
decl_stmt|;
try|try
block|{
name|statuses
operator|=
name|this
operator|.
name|listStatus
argument_list|(
name|dst
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|statuses
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|statuses
operator|&&
name|statuses
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cannot rename source file: [{}] to dest file: [{}], "
operator|+
literal|"because the file already exists."
argument_list|,
name|src
argument_list|,
name|dst
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|FileAlreadyExistsException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"File: %s already exists"
argument_list|,
name|dst
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
comment|// destination path not exists
name|Path
name|tempDstParentPath
init|=
name|dst
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|FileStatus
name|dstParentStatus
init|=
name|this
operator|.
name|getFileStatus
argument_list|(
name|tempDstParentPath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dstParentStatus
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Cannot rename %s to %s, %s is a file"
argument_list|,
name|src
argument_list|,
name|dst
argument_list|,
name|dst
operator|.
name|getParent
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
comment|// The default root directory is definitely there.
block|}
name|boolean
name|result
decl_stmt|;
if|if
condition|(
name|srcFileStatus
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|result
operator|=
name|this
operator|.
name|copyDirectory
argument_list|(
name|src
argument_list|,
name|dst
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|this
operator|.
name|copyFile
argument_list|(
name|src
argument_list|,
name|dst
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|result
condition|)
block|{
comment|//Since rename is a non-atomic operation, after copy fails,
comment|// it is not allowed to delete the data of the original path.
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
name|this
operator|.
name|delete
argument_list|(
name|src
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
DECL|method|copyFile (Path srcPath, Path dstPath)
specifier|private
name|boolean
name|copyFile
parameter_list|(
name|Path
name|srcPath
parameter_list|,
name|Path
name|dstPath
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|srcKey
init|=
name|pathToKey
argument_list|(
name|srcPath
argument_list|)
decl_stmt|;
name|String
name|dstKey
init|=
name|pathToKey
argument_list|(
name|dstPath
argument_list|)
decl_stmt|;
name|this
operator|.
name|store
operator|.
name|copy
argument_list|(
name|srcKey
argument_list|,
name|dstKey
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|copyDirectory (Path srcPath, Path dstPath)
specifier|private
name|boolean
name|copyDirectory
parameter_list|(
name|Path
name|srcPath
parameter_list|,
name|Path
name|dstPath
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|srcKey
init|=
name|pathToKey
argument_list|(
name|srcPath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|srcKey
operator|.
name|endsWith
argument_list|(
name|PATH_DELIMITER
argument_list|)
condition|)
block|{
name|srcKey
operator|+=
name|PATH_DELIMITER
expr_stmt|;
block|}
name|String
name|dstKey
init|=
name|pathToKey
argument_list|(
name|dstPath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dstKey
operator|.
name|endsWith
argument_list|(
name|PATH_DELIMITER
argument_list|)
condition|)
block|{
name|dstKey
operator|+=
name|PATH_DELIMITER
expr_stmt|;
block|}
if|if
condition|(
name|dstKey
operator|.
name|startsWith
argument_list|(
name|srcKey
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"can not copy a directory to a subdirectory of self"
argument_list|)
throw|;
block|}
name|this
operator|.
name|store
operator|.
name|storeEmptyFile
argument_list|(
name|dstKey
argument_list|)
expr_stmt|;
name|CosNCopyFileContext
name|copyFileContext
init|=
operator|new
name|CosNCopyFileContext
argument_list|()
decl_stmt|;
name|int
name|copiesToFinishes
init|=
literal|0
decl_stmt|;
name|String
name|priorLastKey
init|=
literal|null
decl_stmt|;
do|do
block|{
name|PartialListing
name|objectList
init|=
name|this
operator|.
name|store
operator|.
name|list
argument_list|(
name|srcKey
argument_list|,
name|Constants
operator|.
name|COS_MAX_LISTING_LENGTH
argument_list|,
name|priorLastKey
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|FileMetadata
name|file
range|:
name|objectList
operator|.
name|getFiles
argument_list|()
control|)
block|{
name|this
operator|.
name|boundedCopyThreadPool
operator|.
name|execute
argument_list|(
operator|new
name|CosNCopyFileTask
argument_list|(
name|this
operator|.
name|store
argument_list|,
name|file
operator|.
name|getKey
argument_list|()
argument_list|,
name|dstKey
operator|.
name|concat
argument_list|(
name|file
operator|.
name|getKey
argument_list|()
operator|.
name|substring
argument_list|(
name|srcKey
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|copyFileContext
argument_list|)
argument_list|)
expr_stmt|;
name|copiesToFinishes
operator|++
expr_stmt|;
if|if
condition|(
operator|!
name|copyFileContext
operator|.
name|isCopySuccess
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
name|priorLastKey
operator|=
name|objectList
operator|.
name|getPriorLastKey
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
literal|null
operator|!=
name|priorLastKey
condition|)
do|;
name|copyFileContext
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|copyFileContext
operator|.
name|awaitAllFinish
argument_list|(
name|copiesToFinishes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"interrupted when wait copies to finish"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|copyFileContext
operator|.
name|lock
argument_list|()
expr_stmt|;
block|}
return|return
name|copyFileContext
operator|.
name|isCopySuccess
argument_list|()
return|;
block|}
DECL|method|createParent (Path path)
specifier|private
name|void
name|createParent
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|parent
init|=
name|path
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|String
name|parentKey
init|=
name|pathToKey
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Create parent key: {}"
argument_list|,
name|parentKey
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|parentKey
operator|.
name|equals
argument_list|(
name|PATH_DELIMITER
argument_list|)
condition|)
block|{
name|String
name|key
init|=
name|pathToKey
argument_list|(
name|makeAbsolute
argument_list|(
name|parent
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|store
operator|.
name|storeEmptyFile
argument_list|(
name|key
operator|+
name|PATH_DELIMITER
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Store a empty file in COS failed."
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
block|}
block|}
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|getDefaultBlockSize ()
specifier|public
name|long
name|getDefaultBlockSize
parameter_list|()
block|{
return|return
name|getConf
argument_list|()
operator|.
name|getLong
argument_list|(
name|CosNConfigKeys
operator|.
name|COSN_BLOCK_SIZE_KEY
argument_list|,
name|CosNConfigKeys
operator|.
name|DEFAULT_BLOCK_SIZE
argument_list|)
return|;
block|}
comment|/**    * Set the working directory to the given directory.    */
annotation|@
name|Override
DECL|method|setWorkingDirectory (Path newDir)
specifier|public
name|void
name|setWorkingDirectory
parameter_list|(
name|Path
name|newDir
parameter_list|)
block|{
name|workingDir
operator|=
name|newDir
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getWorkingDirectory ()
specifier|public
name|Path
name|getWorkingDirectory
parameter_list|()
block|{
return|return
name|workingDir
return|;
block|}
annotation|@
name|Override
DECL|method|getCanonicalServiceName ()
specifier|public
name|String
name|getCanonicalServiceName
parameter_list|()
block|{
comment|// Does not support Token
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|this
operator|.
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
name|this
operator|.
name|boundedIOThreadPool
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|this
operator|.
name|boundedCopyThreadPool
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

