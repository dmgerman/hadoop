begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.cosn
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|cosn
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|MappedByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_comment
comment|/**  * BufferPool class is used to manage the buffers during program execution.  * It is provided in a thread-safe singleton mode,and  * keeps the program's memory and disk consumption at a stable value.  */
end_comment

begin_class
DECL|class|BufferPool
specifier|public
specifier|final
class|class
name|BufferPool
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BufferPool
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|ourInstance
specifier|private
specifier|static
name|BufferPool
name|ourInstance
init|=
operator|new
name|BufferPool
argument_list|()
decl_stmt|;
comment|/**    * Use this method to get the instance of BufferPool.    *    * @return the instance of BufferPool    */
DECL|method|getInstance ()
specifier|public
specifier|static
name|BufferPool
name|getInstance
parameter_list|()
block|{
return|return
name|ourInstance
return|;
block|}
DECL|field|bufferPool
specifier|private
name|BlockingQueue
argument_list|<
name|ByteBuffer
argument_list|>
name|bufferPool
init|=
literal|null
decl_stmt|;
DECL|field|singleBufferSize
specifier|private
name|long
name|singleBufferSize
init|=
literal|0
decl_stmt|;
DECL|field|diskBufferDir
specifier|private
name|File
name|diskBufferDir
init|=
literal|null
decl_stmt|;
DECL|field|isInitialize
specifier|private
name|AtomicBoolean
name|isInitialize
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|method|BufferPool ()
specifier|private
name|BufferPool
parameter_list|()
block|{   }
DECL|method|createDir (String dirPath)
specifier|private
name|File
name|createDir
parameter_list|(
name|String
name|dirPath
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|dirPath
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|dir
condition|)
block|{
if|if
condition|(
operator|!
name|dir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Buffer dir: [{}] does not exists. create it first."
argument_list|,
name|dirPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|dir
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|dir
operator|.
name|setWritable
argument_list|(
literal|true
argument_list|)
operator|||
operator|!
name|dir
operator|.
name|setReadable
argument_list|(
literal|true
argument_list|)
operator|||
operator|!
name|dir
operator|.
name|setExecutable
argument_list|(
literal|true
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Set the buffer dir: [{}]'s permission [writable,"
operator|+
literal|"readable, executable] failed."
argument_list|,
name|dir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Buffer dir: [{}] is created successfully."
argument_list|,
name|dir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Once again, check if it has been created successfully.
comment|// Prevent problems created by multiple processes at the same time.
if|if
condition|(
operator|!
name|dir
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"buffer dir:"
operator|+
name|dir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" is created unsuccessfully"
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"buffer dir: {} already exists."
argument_list|,
name|dirPath
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"creating buffer dir: "
operator|+
name|dir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"unsuccessfully."
argument_list|)
throw|;
block|}
return|return
name|dir
return|;
block|}
comment|/**    * Create buffers correctly by reading the buffer file directory,    * buffer pool size,and file block size in the configuration.    *    * @param conf Provides configurations for the Hadoop runtime    * @throws IOException Configuration errors,    *                     insufficient or no access for memory or    *                     disk space may cause this exception    */
DECL|method|initialize (Configuration conf)
specifier|public
specifier|synchronized
name|void
name|initialize
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|isInitialize
operator|.
name|get
argument_list|()
condition|)
block|{
return|return;
block|}
name|this
operator|.
name|singleBufferSize
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|CosNConfigKeys
operator|.
name|COSN_BLOCK_SIZE_KEY
argument_list|,
name|CosNConfigKeys
operator|.
name|DEFAULT_BLOCK_SIZE
argument_list|)
expr_stmt|;
comment|// The block size of CosN can only support up to 2GB.
if|if
condition|(
name|this
operator|.
name|singleBufferSize
argument_list|<
name|Constants
operator|.
name|MIN_PART_SIZE
operator|||
name|this
operator|.
name|singleBufferSize
argument_list|>
name|Constants
operator|.
name|MAX_PART_SIZE
condition|)
block|{
name|String
name|exceptionMsg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"The block size of CosN is limited to %d to %d"
argument_list|,
name|Constants
operator|.
name|MIN_PART_SIZE
argument_list|,
name|Constants
operator|.
name|MAX_PART_SIZE
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|exceptionMsg
argument_list|)
throw|;
block|}
name|long
name|memoryBufferLimit
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|CosNConfigKeys
operator|.
name|COSN_UPLOAD_BUFFER_SIZE_KEY
argument_list|,
name|CosNConfigKeys
operator|.
name|DEFAULT_UPLOAD_BUFFER_SIZE
argument_list|)
decl_stmt|;
name|this
operator|.
name|diskBufferDir
operator|=
name|this
operator|.
name|createDir
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|CosNConfigKeys
operator|.
name|COSN_BUFFER_DIR_KEY
argument_list|,
name|CosNConfigKeys
operator|.
name|DEFAULT_BUFFER_DIR
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|bufferPoolSize
init|=
call|(
name|int
call|)
argument_list|(
name|memoryBufferLimit
operator|/
name|this
operator|.
name|singleBufferSize
argument_list|)
decl_stmt|;
if|if
condition|(
literal|0
operator|==
name|bufferPoolSize
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"The total size of the buffer [%d] is "
operator|+
literal|"smaller than a single block [%d]."
operator|+
literal|"please consider increase the buffer size "
operator|+
literal|"or decrease the block size"
argument_list|,
name|memoryBufferLimit
argument_list|,
name|this
operator|.
name|singleBufferSize
argument_list|)
argument_list|)
throw|;
block|}
name|this
operator|.
name|bufferPool
operator|=
operator|new
name|LinkedBlockingQueue
argument_list|<>
argument_list|(
name|bufferPoolSize
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bufferPoolSize
condition|;
name|i
operator|++
control|)
block|{
name|this
operator|.
name|bufferPool
operator|.
name|add
argument_list|(
name|ByteBuffer
operator|.
name|allocateDirect
argument_list|(
operator|(
name|int
operator|)
name|this
operator|.
name|singleBufferSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|isInitialize
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check if the buffer pool has been initialized.    *    * @throws IOException if the buffer pool is not initialized    */
DECL|method|checkInitialize ()
specifier|private
name|void
name|checkInitialize
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|isInitialize
operator|.
name|get
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The buffer pool has not been initialized yet"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Obtain a buffer from this buffer pool through the method.    *    * @param bufferSize expected buffer size to get    * @return a buffer wrapper that satisfies the bufferSize.    * @throws IOException if the buffer pool not initialized,    *                     or the bufferSize parameter is not within    *                     the range[1MB to the single buffer size]    */
DECL|method|getBuffer (int bufferSize)
specifier|public
name|ByteBufferWrapper
name|getBuffer
parameter_list|(
name|int
name|bufferSize
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|checkInitialize
argument_list|()
expr_stmt|;
if|if
condition|(
name|bufferSize
operator|>
literal|0
operator|&&
name|bufferSize
operator|<=
name|this
operator|.
name|singleBufferSize
condition|)
block|{
name|ByteBufferWrapper
name|byteBufferWrapper
init|=
name|this
operator|.
name|getByteBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|byteBufferWrapper
condition|)
block|{
comment|// Use a disk buffer when the memory buffer is not enough
name|byteBufferWrapper
operator|=
name|this
operator|.
name|getMappedBuffer
argument_list|()
expr_stmt|;
block|}
return|return
name|byteBufferWrapper
return|;
block|}
else|else
block|{
name|String
name|exceptionMsg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Parameter buffer size out of range: 1048576 to %d"
argument_list|,
name|this
operator|.
name|singleBufferSize
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|exceptionMsg
argument_list|)
throw|;
block|}
block|}
comment|/**    * Get a ByteBufferWrapper from the buffer pool.    *    * @return a new byte buffer wrapper    * @throws IOException if the buffer pool is not initialized    */
DECL|method|getByteBuffer ()
specifier|private
name|ByteBufferWrapper
name|getByteBuffer
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|checkInitialize
argument_list|()
expr_stmt|;
name|ByteBuffer
name|buffer
init|=
name|this
operator|.
name|bufferPool
operator|.
name|poll
argument_list|()
decl_stmt|;
return|return
name|buffer
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|ByteBufferWrapper
argument_list|(
name|buffer
argument_list|)
return|;
block|}
comment|/**    * Get a mapped buffer from the buffer pool.    *    * @return a new mapped buffer    * @throws IOException If the buffer pool is not initialized.    *                     or some I/O error occurs    */
DECL|method|getMappedBuffer ()
specifier|private
name|ByteBufferWrapper
name|getMappedBuffer
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|checkInitialize
argument_list|()
expr_stmt|;
name|File
name|tmpFile
init|=
name|File
operator|.
name|createTempFile
argument_list|(
name|Constants
operator|.
name|BLOCK_TMP_FILE_PREFIX
argument_list|,
name|Constants
operator|.
name|BLOCK_TMP_FILE_SUFFIX
argument_list|,
name|this
operator|.
name|diskBufferDir
argument_list|)
decl_stmt|;
name|tmpFile
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|RandomAccessFile
name|raf
init|=
operator|new
name|RandomAccessFile
argument_list|(
name|tmpFile
argument_list|,
literal|"rw"
argument_list|)
decl_stmt|;
name|raf
operator|.
name|setLength
argument_list|(
name|this
operator|.
name|singleBufferSize
argument_list|)
expr_stmt|;
name|MappedByteBuffer
name|buf
init|=
name|raf
operator|.
name|getChannel
argument_list|()
operator|.
name|map
argument_list|(
name|FileChannel
operator|.
name|MapMode
operator|.
name|READ_WRITE
argument_list|,
literal|0
argument_list|,
name|this
operator|.
name|singleBufferSize
argument_list|)
decl_stmt|;
return|return
operator|new
name|ByteBufferWrapper
argument_list|(
name|buf
argument_list|,
name|raf
argument_list|,
name|tmpFile
argument_list|)
return|;
block|}
comment|/**    * return the byte buffer wrapper to the buffer pool.    *    * @param byteBufferWrapper the byte buffer wrapper getting from the pool    * @throws InterruptedException if interrupted while waiting    * @throws IOException          some io error occurs    */
DECL|method|returnBuffer (ByteBufferWrapper byteBufferWrapper)
specifier|public
name|void
name|returnBuffer
parameter_list|(
name|ByteBufferWrapper
name|byteBufferWrapper
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
if|if
condition|(
literal|null
operator|==
name|this
operator|.
name|bufferPool
operator|||
literal|null
operator|==
name|byteBufferWrapper
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|byteBufferWrapper
operator|.
name|isDiskBuffer
argument_list|()
condition|)
block|{
name|byteBufferWrapper
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|ByteBuffer
name|byteBuffer
init|=
name|byteBufferWrapper
operator|.
name|getByteBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|byteBuffer
condition|)
block|{
name|byteBuffer
operator|.
name|clear
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Return the buffer to the buffer pool."
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|bufferPool
operator|.
name|offer
argument_list|(
name|byteBuffer
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Return the buffer to buffer pool failed."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

