begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.cosn
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|cosn
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Condition
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSExceptionMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_comment
comment|/**  * The input stream for the COS blob store.  * Optimized sequential read flow based on a forward read-ahead queue  */
end_comment

begin_class
DECL|class|CosNInputStream
specifier|public
class|class
name|CosNInputStream
extends|extends
name|FSInputStream
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CosNInputStream
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * This class is used by {@link CosNInputStream}    * and {@link CosNFileReadTask} to buffer data that read from COS blob store.    */
DECL|class|ReadBuffer
specifier|public
specifier|static
class|class
name|ReadBuffer
block|{
DECL|field|INIT
specifier|public
specifier|static
specifier|final
name|int
name|INIT
init|=
literal|1
decl_stmt|;
DECL|field|SUCCESS
specifier|public
specifier|static
specifier|final
name|int
name|SUCCESS
init|=
literal|0
decl_stmt|;
DECL|field|ERROR
specifier|public
specifier|static
specifier|final
name|int
name|ERROR
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|lock
specifier|private
specifier|final
name|ReentrantLock
name|lock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
DECL|field|readyCondition
specifier|private
name|Condition
name|readyCondition
init|=
name|lock
operator|.
name|newCondition
argument_list|()
decl_stmt|;
DECL|field|buffer
specifier|private
name|byte
index|[]
name|buffer
decl_stmt|;
DECL|field|status
specifier|private
name|int
name|status
decl_stmt|;
DECL|field|start
specifier|private
name|long
name|start
decl_stmt|;
DECL|field|end
specifier|private
name|long
name|end
decl_stmt|;
DECL|method|ReadBuffer (long start, long end)
specifier|public
name|ReadBuffer
parameter_list|(
name|long
name|start
parameter_list|,
name|long
name|end
parameter_list|)
block|{
name|this
operator|.
name|start
operator|=
name|start
expr_stmt|;
name|this
operator|.
name|end
operator|=
name|end
expr_stmt|;
name|this
operator|.
name|buffer
operator|=
operator|new
name|byte
index|[
call|(
name|int
call|)
argument_list|(
name|this
operator|.
name|end
operator|-
name|this
operator|.
name|start
argument_list|)
operator|+
literal|1
index|]
expr_stmt|;
name|this
operator|.
name|status
operator|=
name|INIT
expr_stmt|;
block|}
DECL|method|lock ()
specifier|public
name|void
name|lock
parameter_list|()
block|{
name|this
operator|.
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
block|}
DECL|method|unLock ()
specifier|public
name|void
name|unLock
parameter_list|()
block|{
name|this
operator|.
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
DECL|method|await (int waitStatus)
specifier|public
name|void
name|await
parameter_list|(
name|int
name|waitStatus
parameter_list|)
throws|throws
name|InterruptedException
block|{
while|while
condition|(
name|this
operator|.
name|status
operator|==
name|waitStatus
condition|)
block|{
name|readyCondition
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|signalAll ()
specifier|public
name|void
name|signalAll
parameter_list|()
block|{
name|readyCondition
operator|.
name|signalAll
argument_list|()
expr_stmt|;
block|}
DECL|method|getBuffer ()
specifier|public
name|byte
index|[]
name|getBuffer
parameter_list|()
block|{
return|return
name|this
operator|.
name|buffer
return|;
block|}
DECL|method|getStatus ()
specifier|public
name|int
name|getStatus
parameter_list|()
block|{
return|return
name|this
operator|.
name|status
return|;
block|}
DECL|method|setStatus (int status)
specifier|public
name|void
name|setStatus
parameter_list|(
name|int
name|status
parameter_list|)
block|{
name|this
operator|.
name|status
operator|=
name|status
expr_stmt|;
block|}
DECL|method|getStart ()
specifier|public
name|long
name|getStart
parameter_list|()
block|{
return|return
name|start
return|;
block|}
DECL|method|getEnd ()
specifier|public
name|long
name|getEnd
parameter_list|()
block|{
return|return
name|end
return|;
block|}
block|}
DECL|field|statistics
specifier|private
name|FileSystem
operator|.
name|Statistics
name|statistics
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|store
specifier|private
specifier|final
name|NativeFileSystemStore
name|store
decl_stmt|;
DECL|field|key
specifier|private
specifier|final
name|String
name|key
decl_stmt|;
DECL|field|position
specifier|private
name|long
name|position
init|=
literal|0
decl_stmt|;
DECL|field|nextPos
specifier|private
name|long
name|nextPos
init|=
literal|0
decl_stmt|;
DECL|field|fileSize
specifier|private
name|long
name|fileSize
decl_stmt|;
DECL|field|partRemaining
specifier|private
name|long
name|partRemaining
decl_stmt|;
DECL|field|preReadPartSize
specifier|private
specifier|final
name|long
name|preReadPartSize
decl_stmt|;
DECL|field|maxReadPartNumber
specifier|private
specifier|final
name|int
name|maxReadPartNumber
decl_stmt|;
DECL|field|buffer
specifier|private
name|byte
index|[]
name|buffer
decl_stmt|;
DECL|field|closed
specifier|private
name|boolean
name|closed
decl_stmt|;
DECL|field|readAheadExecutorService
specifier|private
specifier|final
name|ExecutorService
name|readAheadExecutorService
decl_stmt|;
DECL|field|readBufferQueue
specifier|private
specifier|final
name|Queue
argument_list|<
name|ReadBuffer
argument_list|>
name|readBufferQueue
decl_stmt|;
DECL|method|CosNInputStream (Configuration conf, NativeFileSystemStore store, FileSystem.Statistics statistics, String key, long fileSize, ExecutorService readAheadExecutorService)
specifier|public
name|CosNInputStream
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|NativeFileSystemStore
name|store
parameter_list|,
name|FileSystem
operator|.
name|Statistics
name|statistics
parameter_list|,
name|String
name|key
parameter_list|,
name|long
name|fileSize
parameter_list|,
name|ExecutorService
name|readAheadExecutorService
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
name|this
operator|.
name|statistics
operator|=
name|statistics
expr_stmt|;
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|this
operator|.
name|fileSize
operator|=
name|fileSize
expr_stmt|;
name|this
operator|.
name|preReadPartSize
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|CosNConfigKeys
operator|.
name|READ_AHEAD_BLOCK_SIZE_KEY
argument_list|,
name|CosNConfigKeys
operator|.
name|DEFAULT_READ_AHEAD_BLOCK_SIZE
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxReadPartNumber
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|CosNConfigKeys
operator|.
name|READ_AHEAD_QUEUE_SIZE
argument_list|,
name|CosNConfigKeys
operator|.
name|DEFAULT_READ_AHEAD_QUEUE_SIZE
argument_list|)
expr_stmt|;
name|this
operator|.
name|readAheadExecutorService
operator|=
name|readAheadExecutorService
expr_stmt|;
name|this
operator|.
name|readBufferQueue
operator|=
operator|new
name|ArrayDeque
argument_list|<>
argument_list|(
name|this
operator|.
name|maxReadPartNumber
argument_list|)
expr_stmt|;
name|this
operator|.
name|closed
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|reopen (long pos)
specifier|private
specifier|synchronized
name|void
name|reopen
parameter_list|(
name|long
name|pos
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|partSize
decl_stmt|;
if|if
condition|(
name|pos
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|(
name|FSExceptionMessages
operator|.
name|NEGATIVE_SEEK
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|pos
operator|>
name|this
operator|.
name|fileSize
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|(
name|FSExceptionMessages
operator|.
name|CANNOT_SEEK_PAST_EOF
argument_list|)
throw|;
block|}
else|else
block|{
if|if
condition|(
name|pos
operator|+
name|this
operator|.
name|preReadPartSize
operator|>
name|this
operator|.
name|fileSize
condition|)
block|{
name|partSize
operator|=
name|this
operator|.
name|fileSize
operator|-
name|pos
expr_stmt|;
block|}
else|else
block|{
name|partSize
operator|=
name|this
operator|.
name|preReadPartSize
expr_stmt|;
block|}
block|}
name|this
operator|.
name|buffer
operator|=
literal|null
expr_stmt|;
name|boolean
name|isRandomIO
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|pos
operator|==
name|this
operator|.
name|nextPos
condition|)
block|{
name|isRandomIO
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
while|while
condition|(
name|this
operator|.
name|readBufferQueue
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|readBufferQueue
operator|.
name|element
argument_list|()
operator|.
name|getStart
argument_list|()
operator|!=
name|pos
condition|)
block|{
name|this
operator|.
name|readBufferQueue
operator|.
name|poll
argument_list|()
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
name|this
operator|.
name|nextPos
operator|=
name|pos
operator|+
name|partSize
expr_stmt|;
name|int
name|currentBufferQueueSize
init|=
name|this
operator|.
name|readBufferQueue
operator|.
name|size
argument_list|()
decl_stmt|;
name|long
name|lastByteStart
decl_stmt|;
if|if
condition|(
name|currentBufferQueueSize
operator|==
literal|0
condition|)
block|{
name|lastByteStart
operator|=
name|pos
operator|-
name|partSize
expr_stmt|;
block|}
else|else
block|{
name|ReadBuffer
index|[]
name|readBuffers
init|=
name|this
operator|.
name|readBufferQueue
operator|.
name|toArray
argument_list|(
operator|new
name|ReadBuffer
index|[
name|currentBufferQueueSize
index|]
argument_list|)
decl_stmt|;
name|lastByteStart
operator|=
name|readBuffers
index|[
name|currentBufferQueueSize
operator|-
literal|1
index|]
operator|.
name|getStart
argument_list|()
expr_stmt|;
block|}
name|int
name|maxLen
init|=
name|this
operator|.
name|maxReadPartNumber
operator|-
name|currentBufferQueueSize
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxLen
operator|&&
name|i
operator|<
operator|(
name|currentBufferQueueSize
operator|+
literal|1
operator|)
operator|*
literal|2
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|lastByteStart
operator|+
name|partSize
operator|*
operator|(
name|i
operator|+
literal|1
operator|)
operator|>
name|this
operator|.
name|fileSize
condition|)
block|{
break|break;
block|}
name|long
name|byteStart
init|=
name|lastByteStart
operator|+
name|partSize
operator|*
operator|(
name|i
operator|+
literal|1
operator|)
decl_stmt|;
name|long
name|byteEnd
init|=
name|byteStart
operator|+
name|partSize
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|byteEnd
operator|>=
name|this
operator|.
name|fileSize
condition|)
block|{
name|byteEnd
operator|=
name|this
operator|.
name|fileSize
operator|-
literal|1
expr_stmt|;
block|}
name|ReadBuffer
name|readBuffer
init|=
operator|new
name|ReadBuffer
argument_list|(
name|byteStart
argument_list|,
name|byteEnd
argument_list|)
decl_stmt|;
if|if
condition|(
name|readBuffer
operator|.
name|getBuffer
argument_list|()
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|readBuffer
operator|.
name|setStatus
argument_list|(
name|ReadBuffer
operator|.
name|SUCCESS
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|readAheadExecutorService
operator|.
name|execute
argument_list|(
operator|new
name|CosNFileReadTask
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|this
operator|.
name|key
argument_list|,
name|this
operator|.
name|store
argument_list|,
name|readBuffer
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|readBufferQueue
operator|.
name|add
argument_list|(
name|readBuffer
argument_list|)
expr_stmt|;
if|if
condition|(
name|isRandomIO
condition|)
block|{
break|break;
block|}
block|}
name|ReadBuffer
name|readBuffer
init|=
name|this
operator|.
name|readBufferQueue
operator|.
name|poll
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|readBuffer
condition|)
block|{
name|readBuffer
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|readBuffer
operator|.
name|await
argument_list|(
name|ReadBuffer
operator|.
name|INIT
argument_list|)
expr_stmt|;
if|if
condition|(
name|readBuffer
operator|.
name|getStatus
argument_list|()
operator|==
name|ReadBuffer
operator|.
name|ERROR
condition|)
block|{
name|this
operator|.
name|buffer
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|buffer
operator|=
name|readBuffer
operator|.
name|getBuffer
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"An interrupted exception occurred "
operator|+
literal|"when waiting a read buffer."
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|readBuffer
operator|.
name|unLock
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
literal|null
operator|==
name|this
operator|.
name|buffer
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Null IO stream"
argument_list|)
throw|;
block|}
name|this
operator|.
name|position
operator|=
name|pos
expr_stmt|;
name|this
operator|.
name|partRemaining
operator|=
name|partSize
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|seek (long pos)
specifier|public
name|void
name|seek
parameter_list|(
name|long
name|pos
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|pos
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|(
name|FSExceptionMessages
operator|.
name|NEGATIVE_SEEK
argument_list|)
throw|;
block|}
if|if
condition|(
name|pos
operator|>
name|this
operator|.
name|fileSize
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|(
name|FSExceptionMessages
operator|.
name|CANNOT_SEEK_PAST_EOF
argument_list|)
throw|;
block|}
if|if
condition|(
name|this
operator|.
name|position
operator|==
name|pos
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|pos
operator|>
name|position
operator|&&
name|pos
operator|<
name|this
operator|.
name|position
operator|+
name|partRemaining
condition|)
block|{
name|long
name|len
init|=
name|pos
operator|-
name|this
operator|.
name|position
decl_stmt|;
name|this
operator|.
name|position
operator|=
name|pos
expr_stmt|;
name|this
operator|.
name|partRemaining
operator|-=
name|len
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|reopen
argument_list|(
name|pos
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getPos ()
specifier|public
name|long
name|getPos
parameter_list|()
block|{
return|return
name|this
operator|.
name|position
return|;
block|}
annotation|@
name|Override
DECL|method|seekToNewSource (long targetPos)
specifier|public
name|boolean
name|seekToNewSource
parameter_list|(
name|long
name|targetPos
parameter_list|)
block|{
comment|// Currently does not support to seek the offset of a new source
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|read ()
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|closed
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|FSExceptionMessages
operator|.
name|STREAM_IS_CLOSED
argument_list|)
throw|;
block|}
if|if
condition|(
name|this
operator|.
name|partRemaining
operator|<=
literal|0
operator|&&
name|this
operator|.
name|position
operator|<
name|this
operator|.
name|fileSize
condition|)
block|{
name|this
operator|.
name|reopen
argument_list|(
name|this
operator|.
name|position
argument_list|)
expr_stmt|;
block|}
name|int
name|byteRead
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|partRemaining
operator|!=
literal|0
condition|)
block|{
name|byteRead
operator|=
name|this
operator|.
name|buffer
index|[
call|(
name|int
call|)
argument_list|(
name|this
operator|.
name|buffer
operator|.
name|length
operator|-
name|this
operator|.
name|partRemaining
argument_list|)
index|]
operator|&
literal|0xff
expr_stmt|;
block|}
if|if
condition|(
name|byteRead
operator|>=
literal|0
condition|)
block|{
name|this
operator|.
name|position
operator|++
expr_stmt|;
name|this
operator|.
name|partRemaining
operator|--
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|this
operator|.
name|statistics
condition|)
block|{
name|this
operator|.
name|statistics
operator|.
name|incrementBytesRead
argument_list|(
name|byteRead
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|byteRead
return|;
block|}
annotation|@
name|Override
DECL|method|read (byte[] b, int off, int len)
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|closed
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|FSExceptionMessages
operator|.
name|STREAM_IS_CLOSED
argument_list|)
throw|;
block|}
if|if
condition|(
name|len
operator|==
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
if|if
condition|(
name|off
operator|<
literal|0
operator|||
name|len
argument_list|<
literal|0
operator|||
name|len
argument_list|>
name|b
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|()
throw|;
block|}
name|int
name|bytesRead
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|position
operator|<
name|fileSize
operator|&&
name|bytesRead
operator|<
name|len
condition|)
block|{
if|if
condition|(
name|partRemaining
operator|<=
literal|0
condition|)
block|{
name|reopen
argument_list|(
name|position
argument_list|)
expr_stmt|;
block|}
name|int
name|bytes
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|this
operator|.
name|buffer
operator|.
name|length
operator|-
operator|(
name|int
operator|)
name|partRemaining
init|;
name|i
operator|<
name|this
operator|.
name|buffer
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|b
index|[
name|off
operator|+
name|bytesRead
index|]
operator|=
name|this
operator|.
name|buffer
index|[
name|i
index|]
expr_stmt|;
name|bytes
operator|++
expr_stmt|;
name|bytesRead
operator|++
expr_stmt|;
if|if
condition|(
name|off
operator|+
name|bytesRead
operator|>=
name|len
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|bytes
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|position
operator|+=
name|bytes
expr_stmt|;
name|this
operator|.
name|partRemaining
operator|-=
name|bytes
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|partRemaining
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to read from stream. Remaining: "
operator|+
name|this
operator|.
name|partRemaining
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
literal|null
operator|!=
name|this
operator|.
name|statistics
operator|&&
name|bytesRead
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|statistics
operator|.
name|incrementBytesRead
argument_list|(
name|bytesRead
argument_list|)
expr_stmt|;
block|}
return|return
name|bytesRead
operator|==
literal|0
condition|?
operator|-
literal|1
else|:
name|bytesRead
return|;
block|}
annotation|@
name|Override
DECL|method|available ()
specifier|public
name|int
name|available
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|closed
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|FSExceptionMessages
operator|.
name|STREAM_IS_CLOSED
argument_list|)
throw|;
block|}
name|long
name|remaining
init|=
name|this
operator|.
name|fileSize
operator|-
name|this
operator|.
name|position
decl_stmt|;
if|if
condition|(
name|remaining
operator|>
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
return|return
name|Integer
operator|.
name|MAX_VALUE
return|;
block|}
return|return
operator|(
name|int
operator|)
name|remaining
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|closed
condition|)
block|{
return|return;
block|}
name|this
operator|.
name|closed
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|buffer
operator|=
literal|null
expr_stmt|;
block|}
block|}
end_class

end_unit

