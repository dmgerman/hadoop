begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.cosn
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|cosn
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Condition
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_comment
comment|/**  * The context of the copy task, including concurrency control,  * asynchronous acquisition of copy results and etc.  */
end_comment

begin_class
DECL|class|CosNCopyFileContext
specifier|public
class|class
name|CosNCopyFileContext
block|{
DECL|field|lock
specifier|private
specifier|final
name|ReentrantLock
name|lock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
DECL|field|readyCondition
specifier|private
name|Condition
name|readyCondition
init|=
name|lock
operator|.
name|newCondition
argument_list|()
decl_stmt|;
DECL|field|copySuccess
specifier|private
name|AtomicBoolean
name|copySuccess
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
DECL|field|copiesFinish
specifier|private
name|AtomicInteger
name|copiesFinish
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|method|lock ()
specifier|public
name|void
name|lock
parameter_list|()
block|{
name|this
operator|.
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
block|}
DECL|method|unlock ()
specifier|public
name|void
name|unlock
parameter_list|()
block|{
name|this
operator|.
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
DECL|method|awaitAllFinish (int waitCopiesFinish)
specifier|public
name|void
name|awaitAllFinish
parameter_list|(
name|int
name|waitCopiesFinish
parameter_list|)
throws|throws
name|InterruptedException
block|{
while|while
condition|(
name|this
operator|.
name|copiesFinish
operator|.
name|get
argument_list|()
operator|!=
name|waitCopiesFinish
condition|)
block|{
name|this
operator|.
name|readyCondition
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|signalAll ()
specifier|public
name|void
name|signalAll
parameter_list|()
block|{
name|this
operator|.
name|readyCondition
operator|.
name|signalAll
argument_list|()
expr_stmt|;
block|}
DECL|method|isCopySuccess ()
specifier|public
name|boolean
name|isCopySuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|copySuccess
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|setCopySuccess (boolean copySuccess)
specifier|public
name|void
name|setCopySuccess
parameter_list|(
name|boolean
name|copySuccess
parameter_list|)
block|{
name|this
operator|.
name|copySuccess
operator|.
name|set
argument_list|(
name|copySuccess
argument_list|)
expr_stmt|;
block|}
DECL|method|incCopiesFinish ()
specifier|public
name|void
name|incCopiesFinish
parameter_list|()
block|{
name|this
operator|.
name|copiesFinish
operator|.
name|addAndGet
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

