begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.cosn
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|cosn
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|InvalidMarkException
import|;
end_import

begin_comment
comment|/**  * The input stream class is used for buffered files.  * The purpose of providing this class is to optimize buffer read performance.  */
end_comment

begin_class
DECL|class|ByteBufferInputStream
specifier|public
class|class
name|ByteBufferInputStream
extends|extends
name|InputStream
block|{
DECL|field|byteBuffer
specifier|private
name|ByteBuffer
name|byteBuffer
decl_stmt|;
DECL|field|isClosed
specifier|private
name|boolean
name|isClosed
decl_stmt|;
DECL|method|ByteBufferInputStream (ByteBuffer byteBuffer)
specifier|public
name|ByteBufferInputStream
parameter_list|(
name|ByteBuffer
name|byteBuffer
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
literal|null
operator|==
name|byteBuffer
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"byte buffer is null"
argument_list|)
throw|;
block|}
name|this
operator|.
name|byteBuffer
operator|=
name|byteBuffer
expr_stmt|;
name|this
operator|.
name|isClosed
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|read ()
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
literal|null
operator|==
name|this
operator|.
name|byteBuffer
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"this byte buffer for InputStream is null"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|this
operator|.
name|byteBuffer
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
name|this
operator|.
name|byteBuffer
operator|.
name|get
argument_list|()
operator|&
literal|0xFF
return|;
block|}
annotation|@
name|Override
DECL|method|mark (int readLimit)
specifier|public
specifier|synchronized
name|void
name|mark
parameter_list|(
name|int
name|readLimit
parameter_list|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|markSupported
argument_list|()
condition|)
block|{
return|return;
block|}
name|this
operator|.
name|byteBuffer
operator|.
name|mark
argument_list|()
expr_stmt|;
comment|// Parameter readLimit is ignored
block|}
annotation|@
name|Override
DECL|method|markSupported ()
specifier|public
name|boolean
name|markSupported
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|reset ()
specifier|public
specifier|synchronized
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|isClosed
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Closed in InputStream"
argument_list|)
throw|;
block|}
try|try
block|{
name|this
operator|.
name|byteBuffer
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidMarkException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid mark"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|available ()
specifier|public
name|int
name|available
parameter_list|()
block|{
return|return
name|this
operator|.
name|byteBuffer
operator|.
name|remaining
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
name|this
operator|.
name|byteBuffer
operator|.
name|rewind
argument_list|()
expr_stmt|;
name|this
operator|.
name|byteBuffer
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|isClosed
operator|=
literal|true
expr_stmt|;
block|}
block|}
end_class

end_unit

