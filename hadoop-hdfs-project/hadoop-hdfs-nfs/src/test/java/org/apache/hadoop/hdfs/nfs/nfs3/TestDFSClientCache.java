begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.nfs.nfs3
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|nfs
operator|.
name|nfs3
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_class
DECL|class|TestDFSClientCache
specifier|public
class|class
name|TestDFSClientCache
block|{
annotation|@
name|Test
DECL|method|testLruTable ()
specifier|public
name|void
name|testLruTable
parameter_list|()
throws|throws
name|IOException
block|{
name|DFSClientCache
name|cache
init|=
operator|new
name|DFSClientCache
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|DFSClient
name|client
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|DFSClient
operator|.
name|class
argument_list|)
decl_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
name|client
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cache
operator|.
name|containsKey
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|"b"
argument_list|,
name|client
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|"c"
argument_list|,
name|client
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|"d"
argument_list|,
name|client
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cache
operator|.
name|usedSize
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cache
operator|.
name|containsKey
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Cache should have d,c,b in LRU order
name|assertTrue
argument_list|(
name|cache
operator|.
name|containsKey
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Do a lookup to make b the most recently used
name|assertTrue
argument_list|(
name|cache
operator|.
name|get
argument_list|(
literal|"b"
argument_list|)
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|"e"
argument_list|,
name|client
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cache
operator|.
name|usedSize
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
comment|// c should be replaced with e, and cache has e,b,d
name|assertFalse
argument_list|(
name|cache
operator|.
name|containsKey
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cache
operator|.
name|containsKey
argument_list|(
literal|"e"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cache
operator|.
name|containsKey
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cache
operator|.
name|containsKey
argument_list|(
literal|"d"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

