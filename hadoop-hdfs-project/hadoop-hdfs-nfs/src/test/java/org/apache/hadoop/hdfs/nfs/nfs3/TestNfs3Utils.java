begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.nfs.nfs3
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|nfs
operator|.
name|nfs3
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|NfsFileType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|Nfs3FileAttributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_class
DECL|class|TestNfs3Utils
specifier|public
class|class
name|TestNfs3Utils
block|{
annotation|@
name|Test
DECL|method|testGetAccessRightsForUserGroup ()
specifier|public
name|void
name|testGetAccessRightsForUserGroup
parameter_list|()
throws|throws
name|IOException
block|{
name|Nfs3FileAttributes
name|attr
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Nfs3FileAttributes
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|attr
operator|.
name|getUid
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|attr
operator|.
name|getGid
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|attr
operator|.
name|getMode
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|448
argument_list|)
expr_stmt|;
comment|// 700
name|Mockito
operator|.
name|when
argument_list|(
name|attr
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|NfsFileType
operator|.
name|NFSREG
operator|.
name|toValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"No access should be allowed as UID does not match attribute over mode 700"
argument_list|,
literal|0
argument_list|,
name|Nfs3Utils
operator|.
name|getAccessRightsForUserGroup
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|,
name|attr
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|attr
operator|.
name|getUid
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|attr
operator|.
name|getGid
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|attr
operator|.
name|getMode
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|56
argument_list|)
expr_stmt|;
comment|// 070
name|Mockito
operator|.
name|when
argument_list|(
name|attr
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|NfsFileType
operator|.
name|NFSREG
operator|.
name|toValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"No access should be allowed as GID does not match attribute over mode 070"
argument_list|,
literal|0
argument_list|,
name|Nfs3Utils
operator|.
name|getAccessRightsForUserGroup
argument_list|(
literal|2
argument_list|,
literal|4
argument_list|,
literal|null
argument_list|,
name|attr
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|attr
operator|.
name|getUid
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|attr
operator|.
name|getGid
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|attr
operator|.
name|getMode
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|7
argument_list|)
expr_stmt|;
comment|// 007
name|Mockito
operator|.
name|when
argument_list|(
name|attr
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|NfsFileType
operator|.
name|NFSREG
operator|.
name|toValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Access should be allowed as mode is 007 and UID/GID do not match"
argument_list|,
literal|61
comment|/* RWX */
argument_list|,
name|Nfs3Utils
operator|.
name|getAccessRightsForUserGroup
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|,
operator|new
name|int
index|[]
block|{
literal|5
block|,
literal|6
block|}
argument_list|,
name|attr
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|attr
operator|.
name|getUid
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|attr
operator|.
name|getGid
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|attr
operator|.
name|getMode
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|288
argument_list|)
expr_stmt|;
comment|// 440
name|Mockito
operator|.
name|when
argument_list|(
name|attr
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|NfsFileType
operator|.
name|NFSREG
operator|.
name|toValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Access should be allowed as mode is 440 and Aux GID does match"
argument_list|,
literal|1
comment|/* R */
argument_list|,
name|Nfs3Utils
operator|.
name|getAccessRightsForUserGroup
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|,
operator|new
name|int
index|[]
block|{
literal|5
block|,
literal|16
block|,
literal|10
block|}
argument_list|,
name|attr
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|attr
operator|.
name|getUid
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|attr
operator|.
name|getGid
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|attr
operator|.
name|getMode
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|448
argument_list|)
expr_stmt|;
comment|// 700
name|Mockito
operator|.
name|when
argument_list|(
name|attr
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|NfsFileType
operator|.
name|NFSDIR
operator|.
name|toValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Access should be allowed for dir as mode is 700 and UID does match"
argument_list|,
literal|31
comment|/* Lookup */
argument_list|,
name|Nfs3Utils
operator|.
name|getAccessRightsForUserGroup
argument_list|(
literal|2
argument_list|,
literal|4
argument_list|,
operator|new
name|int
index|[]
block|{
literal|5
block|,
literal|16
block|,
literal|10
block|}
argument_list|,
name|attr
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"No access should be allowed for dir as mode is 700 even though GID does match"
argument_list|,
literal|0
argument_list|,
name|Nfs3Utils
operator|.
name|getAccessRightsForUserGroup
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|,
operator|new
name|int
index|[]
block|{
literal|5
block|,
literal|16
block|,
literal|4
block|}
argument_list|,
name|attr
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"No access should be allowed for dir as mode is 700 even though AuxGID does match"
argument_list|,
literal|0
argument_list|,
name|Nfs3Utils
operator|.
name|getAccessRightsForUserGroup
argument_list|(
literal|3
argument_list|,
literal|20
argument_list|,
operator|new
name|int
index|[]
block|{
literal|5
block|,
literal|10
block|}
argument_list|,
name|attr
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

