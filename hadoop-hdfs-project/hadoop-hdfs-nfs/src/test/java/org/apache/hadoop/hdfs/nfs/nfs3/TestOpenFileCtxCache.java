begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.nfs.nfs3
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|nfs
operator|.
name|nfs3
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|nfs
operator|.
name|conf
operator|.
name|NfsConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|nfs
operator|.
name|conf
operator|.
name|NfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|OpenFileCtx
operator|.
name|CommitCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|FileHandle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|IdUserGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|Nfs3FileAttributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_class
DECL|class|TestOpenFileCtxCache
specifier|public
class|class
name|TestOpenFileCtxCache
block|{
DECL|field|cleaned
specifier|static
name|boolean
name|cleaned
init|=
literal|false
decl_stmt|;
annotation|@
name|Test
DECL|method|testEviction ()
specifier|public
name|void
name|testEviction
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|NfsConfiguration
name|conf
init|=
operator|new
name|NfsConfiguration
argument_list|()
decl_stmt|;
comment|// Only two entries will be in the cache
name|conf
operator|.
name|setInt
argument_list|(
name|NfsConfigKeys
operator|.
name|DFS_NFS_MAX_OPEN_FILES_KEY
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|DFSClient
name|dfsClient
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|DFSClient
operator|.
name|class
argument_list|)
decl_stmt|;
name|Nfs3FileAttributes
name|attr
init|=
operator|new
name|Nfs3FileAttributes
argument_list|()
decl_stmt|;
name|HdfsDataOutputStream
name|fos
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HdfsDataOutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|fos
operator|.
name|getPos
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|(
name|long
operator|)
literal|0
argument_list|)
expr_stmt|;
name|OpenFileCtx
name|context1
init|=
operator|new
name|OpenFileCtx
argument_list|(
name|fos
argument_list|,
name|attr
argument_list|,
literal|"/dumpFilePath"
argument_list|,
name|dfsClient
argument_list|,
operator|new
name|IdUserGroup
argument_list|(
operator|new
name|NfsConfiguration
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|OpenFileCtx
name|context2
init|=
operator|new
name|OpenFileCtx
argument_list|(
name|fos
argument_list|,
name|attr
argument_list|,
literal|"/dumpFilePath"
argument_list|,
name|dfsClient
argument_list|,
operator|new
name|IdUserGroup
argument_list|(
operator|new
name|NfsConfiguration
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|OpenFileCtx
name|context3
init|=
operator|new
name|OpenFileCtx
argument_list|(
name|fos
argument_list|,
name|attr
argument_list|,
literal|"/dumpFilePath"
argument_list|,
name|dfsClient
argument_list|,
operator|new
name|IdUserGroup
argument_list|(
operator|new
name|NfsConfiguration
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|OpenFileCtx
name|context4
init|=
operator|new
name|OpenFileCtx
argument_list|(
name|fos
argument_list|,
name|attr
argument_list|,
literal|"/dumpFilePath"
argument_list|,
name|dfsClient
argument_list|,
operator|new
name|IdUserGroup
argument_list|(
operator|new
name|NfsConfiguration
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|OpenFileCtx
name|context5
init|=
operator|new
name|OpenFileCtx
argument_list|(
name|fos
argument_list|,
name|attr
argument_list|,
literal|"/dumpFilePath"
argument_list|,
name|dfsClient
argument_list|,
operator|new
name|IdUserGroup
argument_list|(
operator|new
name|NfsConfiguration
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|OpenFileCtxCache
name|cache
init|=
operator|new
name|OpenFileCtxCache
argument_list|(
name|conf
argument_list|,
literal|10
operator|*
literal|60
operator|*
literal|100
argument_list|)
decl_stmt|;
name|boolean
name|ret
init|=
name|cache
operator|.
name|put
argument_list|(
operator|new
name|FileHandle
argument_list|(
literal|1
argument_list|)
argument_list|,
name|context1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ret
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|ret
operator|=
name|cache
operator|.
name|put
argument_list|(
operator|new
name|FileHandle
argument_list|(
literal|2
argument_list|)
argument_list|,
name|context2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ret
argument_list|)
expr_stmt|;
name|ret
operator|=
name|cache
operator|.
name|put
argument_list|(
operator|new
name|FileHandle
argument_list|(
literal|3
argument_list|)
argument_list|,
name|context3
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ret
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cache
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
comment|// Wait for the oldest stream to be evict-able, insert again
name|Thread
operator|.
name|sleep
argument_list|(
name|NfsConfigKeys
operator|.
name|DFS_NFS_STREAM_TIMEOUT_MIN_DEFAULT
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cache
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|ret
operator|=
name|cache
operator|.
name|put
argument_list|(
operator|new
name|FileHandle
argument_list|(
literal|3
argument_list|)
argument_list|,
name|context3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ret
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cache
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cache
operator|.
name|get
argument_list|(
operator|new
name|FileHandle
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|==
literal|null
argument_list|)
expr_stmt|;
comment|// Test inactive entry is evicted immediately
name|context3
operator|.
name|setActiveStatusForTest
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ret
operator|=
name|cache
operator|.
name|put
argument_list|(
operator|new
name|FileHandle
argument_list|(
literal|4
argument_list|)
argument_list|,
name|context4
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ret
argument_list|)
expr_stmt|;
comment|// Now the cache has context2 and context4
comment|// Test eviction failure if all entries have pending work.
name|context2
operator|.
name|getPendingWritesForTest
argument_list|()
operator|.
name|put
argument_list|(
operator|new
name|OffsetRange
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|)
argument_list|,
operator|new
name|WriteCtx
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|context4
operator|.
name|getPendingCommitsForTest
argument_list|()
operator|.
name|put
argument_list|(
operator|new
name|Long
argument_list|(
literal|100
argument_list|)
argument_list|,
operator|new
name|CommitCtx
argument_list|(
literal|0
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
name|attr
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|NfsConfigKeys
operator|.
name|DFS_NFS_STREAM_TIMEOUT_MIN_DEFAULT
argument_list|)
expr_stmt|;
name|ret
operator|=
name|cache
operator|.
name|put
argument_list|(
operator|new
name|FileHandle
argument_list|(
literal|5
argument_list|)
argument_list|,
name|context5
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testScan ()
specifier|public
name|void
name|testScan
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|NfsConfiguration
name|conf
init|=
operator|new
name|NfsConfiguration
argument_list|()
decl_stmt|;
comment|// Only two entries will be in the cache
name|conf
operator|.
name|setInt
argument_list|(
name|NfsConfigKeys
operator|.
name|DFS_NFS_MAX_OPEN_FILES_KEY
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|DFSClient
name|dfsClient
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|DFSClient
operator|.
name|class
argument_list|)
decl_stmt|;
name|Nfs3FileAttributes
name|attr
init|=
operator|new
name|Nfs3FileAttributes
argument_list|()
decl_stmt|;
name|HdfsDataOutputStream
name|fos
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HdfsDataOutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|fos
operator|.
name|getPos
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|(
name|long
operator|)
literal|0
argument_list|)
expr_stmt|;
name|OpenFileCtx
name|context1
init|=
operator|new
name|OpenFileCtx
argument_list|(
name|fos
argument_list|,
name|attr
argument_list|,
literal|"/dumpFilePath"
argument_list|,
name|dfsClient
argument_list|,
operator|new
name|IdUserGroup
argument_list|(
operator|new
name|NfsConfiguration
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|OpenFileCtx
name|context2
init|=
operator|new
name|OpenFileCtx
argument_list|(
name|fos
argument_list|,
name|attr
argument_list|,
literal|"/dumpFilePath"
argument_list|,
name|dfsClient
argument_list|,
operator|new
name|IdUserGroup
argument_list|(
operator|new
name|NfsConfiguration
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|OpenFileCtx
name|context3
init|=
operator|new
name|OpenFileCtx
argument_list|(
name|fos
argument_list|,
name|attr
argument_list|,
literal|"/dumpFilePath"
argument_list|,
name|dfsClient
argument_list|,
operator|new
name|IdUserGroup
argument_list|(
operator|new
name|NfsConfiguration
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|OpenFileCtx
name|context4
init|=
operator|new
name|OpenFileCtx
argument_list|(
name|fos
argument_list|,
name|attr
argument_list|,
literal|"/dumpFilePath"
argument_list|,
name|dfsClient
argument_list|,
operator|new
name|IdUserGroup
argument_list|(
operator|new
name|NfsConfiguration
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|OpenFileCtxCache
name|cache
init|=
operator|new
name|OpenFileCtxCache
argument_list|(
name|conf
argument_list|,
literal|10
operator|*
literal|60
operator|*
literal|100
argument_list|)
decl_stmt|;
comment|// Test cleaning expired entry
name|boolean
name|ret
init|=
name|cache
operator|.
name|put
argument_list|(
operator|new
name|FileHandle
argument_list|(
literal|1
argument_list|)
argument_list|,
name|context1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ret
argument_list|)
expr_stmt|;
name|ret
operator|=
name|cache
operator|.
name|put
argument_list|(
operator|new
name|FileHandle
argument_list|(
literal|2
argument_list|)
argument_list|,
name|context2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ret
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|NfsConfigKeys
operator|.
name|DFS_NFS_STREAM_TIMEOUT_MIN_DEFAULT
operator|+
literal|1
argument_list|)
expr_stmt|;
name|cache
operator|.
name|scan
argument_list|(
name|NfsConfigKeys
operator|.
name|DFS_NFS_STREAM_TIMEOUT_MIN_DEFAULT
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cache
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// Test cleaning inactive entry
name|ret
operator|=
name|cache
operator|.
name|put
argument_list|(
operator|new
name|FileHandle
argument_list|(
literal|3
argument_list|)
argument_list|,
name|context3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ret
argument_list|)
expr_stmt|;
name|ret
operator|=
name|cache
operator|.
name|put
argument_list|(
operator|new
name|FileHandle
argument_list|(
literal|4
argument_list|)
argument_list|,
name|context4
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ret
argument_list|)
expr_stmt|;
name|context3
operator|.
name|setActiveStatusForTest
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|cache
operator|.
name|scan
argument_list|(
name|NfsConfigKeys
operator|.
name|DFS_NFS_STREAM_TIMEOUT_DEFAULT
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cache
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cache
operator|.
name|get
argument_list|(
operator|new
name|FileHandle
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|==
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cache
operator|.
name|get
argument_list|(
operator|new
name|FileHandle
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

