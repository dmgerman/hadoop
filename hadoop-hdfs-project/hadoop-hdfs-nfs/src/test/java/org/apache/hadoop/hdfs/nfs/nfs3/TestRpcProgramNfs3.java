begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.nfs.nfs3
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|nfs
operator|.
name|nfs3
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|JavaKeyStoreProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProviderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystemTestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|nfs
operator|.
name|conf
operator|.
name|NfsConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|nfs
operator|.
name|conf
operator|.
name|NfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|FileHandle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|Nfs3Constant
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|Nfs3Constant
operator|.
name|WriteStableHow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|Nfs3Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|request
operator|.
name|ACCESS3Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|request
operator|.
name|COMMIT3Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|request
operator|.
name|CREATE3Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|request
operator|.
name|FSINFO3Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|request
operator|.
name|FSSTAT3Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|request
operator|.
name|GETATTR3Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|request
operator|.
name|LOOKUP3Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|request
operator|.
name|MKDIR3Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|request
operator|.
name|PATHCONF3Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|request
operator|.
name|READ3Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|request
operator|.
name|READDIR3Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|request
operator|.
name|READDIRPLUS3Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|request
operator|.
name|READLINK3Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|request
operator|.
name|REMOVE3Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|request
operator|.
name|RENAME3Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|request
operator|.
name|RMDIR3Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|request
operator|.
name|SETATTR3Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|request
operator|.
name|SYMLINK3Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|request
operator|.
name|SetAttr3
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|request
operator|.
name|SetAttr3
operator|.
name|SetAttrField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|request
operator|.
name|WRITE3Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|response
operator|.
name|ACCESS3Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|response
operator|.
name|COMMIT3Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|response
operator|.
name|CREATE3Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|response
operator|.
name|FSINFO3Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|response
operator|.
name|FSSTAT3Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|response
operator|.
name|GETATTR3Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|response
operator|.
name|LOOKUP3Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|response
operator|.
name|MKDIR3Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|response
operator|.
name|PATHCONF3Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|response
operator|.
name|READ3Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|response
operator|.
name|READDIR3Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|response
operator|.
name|READDIRPLUS3Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|response
operator|.
name|READLINK3Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|response
operator|.
name|REMOVE3Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|response
operator|.
name|RENAME3Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|response
operator|.
name|RMDIR3Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|response
operator|.
name|SETATTR3Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|response
operator|.
name|SYMLINK3Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|response
operator|.
name|WRITE3Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
operator|.
name|XDR
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
operator|.
name|security
operator|.
name|SecurityHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|IdMappingConstant
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|DefaultImpersonationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|ProxyUsers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_comment
comment|/**  * Tests for {@link RpcProgramNfs3}  */
end_comment

begin_class
DECL|class|TestRpcProgramNfs3
specifier|public
class|class
name|TestRpcProgramNfs3
block|{
DECL|field|hdfs
specifier|static
name|DistributedFileSystem
name|hdfs
decl_stmt|;
DECL|field|cluster
specifier|static
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
DECL|field|config
specifier|static
name|NfsConfiguration
name|config
init|=
operator|new
name|NfsConfiguration
argument_list|()
decl_stmt|;
DECL|field|dfsAdmin
specifier|static
name|HdfsAdmin
name|dfsAdmin
decl_stmt|;
DECL|field|nn
specifier|static
name|NameNode
name|nn
decl_stmt|;
DECL|field|nfs
specifier|static
name|Nfs3
name|nfs
decl_stmt|;
DECL|field|nfsd
specifier|static
name|RpcProgramNfs3
name|nfsd
decl_stmt|;
DECL|field|securityHandler
specifier|static
name|SecurityHandler
name|securityHandler
decl_stmt|;
DECL|field|securityHandlerUnpriviledged
specifier|static
name|SecurityHandler
name|securityHandlerUnpriviledged
decl_stmt|;
DECL|field|testdir
specifier|static
name|String
name|testdir
init|=
literal|"/tmp"
decl_stmt|;
DECL|field|TEST_KEY
specifier|private
specifier|static
specifier|final
name|String
name|TEST_KEY
init|=
literal|"test_key"
decl_stmt|;
DECL|field|fsHelper
specifier|private
specifier|static
name|FileSystemTestHelper
name|fsHelper
decl_stmt|;
DECL|field|testRootDir
specifier|private
specifier|static
name|File
name|testRootDir
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setup ()
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|currentUser
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
decl_stmt|;
name|config
operator|.
name|set
argument_list|(
literal|"fs.permissions.umask-mode"
argument_list|,
literal|"u=rwx,g=,o="
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|DefaultImpersonationProvider
operator|.
name|getTestProvider
argument_list|()
operator|.
name|getProxySuperuserGroupConfKey
argument_list|(
name|currentUser
argument_list|)
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|DefaultImpersonationProvider
operator|.
name|getTestProvider
argument_list|()
operator|.
name|getProxySuperuserIpConfKey
argument_list|(
name|currentUser
argument_list|)
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|fsHelper
operator|=
operator|new
name|FileSystemTestHelper
argument_list|()
expr_stmt|;
comment|// Set up java key store
name|String
name|testRoot
init|=
name|fsHelper
operator|.
name|getTestRootDir
argument_list|()
decl_stmt|;
name|testRootDir
operator|=
operator|new
name|File
argument_list|(
name|testRoot
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
expr_stmt|;
specifier|final
name|Path
name|jksPath
init|=
operator|new
name|Path
argument_list|(
name|testRootDir
operator|.
name|toString
argument_list|()
argument_list|,
literal|"test.jks"
argument_list|)
decl_stmt|;
name|config
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_ENCRYPTION_KEY_PROVIDER_URI
argument_list|,
name|JavaKeyStoreProvider
operator|.
name|SCHEME_NAME
operator|+
literal|"://file"
operator|+
name|jksPath
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
name|ProxyUsers
operator|.
name|refreshSuperUserGroupsConfiguration
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|config
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|hdfs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|nn
operator|=
name|cluster
operator|.
name|getNameNode
argument_list|()
expr_stmt|;
name|dfsAdmin
operator|=
operator|new
name|HdfsAdmin
argument_list|(
name|cluster
operator|.
name|getURI
argument_list|()
argument_list|,
name|config
argument_list|)
expr_stmt|;
comment|// Use ephemeral ports in case tests are running in parallel
name|config
operator|.
name|setInt
argument_list|(
literal|"nfs3.mountd.port"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|config
operator|.
name|setInt
argument_list|(
literal|"nfs3.server.port"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Start NFS with allowed.hosts set to "* rw"
name|config
operator|.
name|set
argument_list|(
literal|"dfs.nfs.exports.allowed.hosts"
argument_list|,
literal|"* rw"
argument_list|)
expr_stmt|;
name|nfs
operator|=
operator|new
name|Nfs3
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|nfs
operator|.
name|startServiceInternal
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|nfsd
operator|=
operator|(
name|RpcProgramNfs3
operator|)
name|nfs
operator|.
name|getRpcProgram
argument_list|()
expr_stmt|;
name|hdfs
operator|.
name|getClient
argument_list|()
operator|.
name|setKeyProvider
argument_list|(
name|nn
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getProvider
argument_list|()
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createKey
argument_list|(
name|TEST_KEY
argument_list|,
name|cluster
argument_list|,
name|config
argument_list|)
expr_stmt|;
comment|// Mock SecurityHandler which returns system user.name
name|securityHandler
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|SecurityHandler
operator|.
name|class
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|securityHandler
operator|.
name|getUser
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|currentUser
argument_list|)
expr_stmt|;
comment|// Mock SecurityHandler which returns a dummy username "harry"
name|securityHandlerUnpriviledged
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|SecurityHandler
operator|.
name|class
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|securityHandlerUnpriviledged
operator|.
name|getUser
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"harry"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|shutdown ()
specifier|public
specifier|static
name|void
name|shutdown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Before
DECL|method|createFiles ()
specifier|public
name|void
name|createFiles
parameter_list|()
throws|throws
name|IllegalArgumentException
throws|,
name|IOException
block|{
name|hdfs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|testdir
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|testdir
argument_list|)
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|testdir
operator|+
literal|"/foo"
argument_list|)
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
operator|new
name|Path
argument_list|(
name|testdir
operator|+
literal|"/bar"
argument_list|)
argument_list|,
literal|0
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testGetattr ()
specifier|public
name|void
name|testGetattr
parameter_list|()
throws|throws
name|Exception
block|{
name|HdfsFileStatus
name|status
init|=
name|nn
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getFileInfo
argument_list|(
literal|"/tmp/bar"
argument_list|)
decl_stmt|;
name|long
name|dirId
init|=
name|status
operator|.
name|getFileId
argument_list|()
decl_stmt|;
name|FileHandle
name|handle
init|=
operator|new
name|FileHandle
argument_list|(
name|dirId
argument_list|)
decl_stmt|;
name|XDR
name|xdr_req
init|=
operator|new
name|XDR
argument_list|()
decl_stmt|;
name|GETATTR3Request
name|req
init|=
operator|new
name|GETATTR3Request
argument_list|(
name|handle
argument_list|)
decl_stmt|;
name|req
operator|.
name|serialize
argument_list|(
name|xdr_req
argument_list|)
expr_stmt|;
comment|// Attempt by an unpriviledged user should fail.
name|GETATTR3Response
name|response1
init|=
name|nfsd
operator|.
name|getattr
argument_list|(
name|xdr_req
operator|.
name|asReadOnlyWrap
argument_list|()
argument_list|,
name|securityHandlerUnpriviledged
argument_list|,
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
literal|1234
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect return code"
argument_list|,
name|Nfs3Status
operator|.
name|NFS3ERR_ACCES
argument_list|,
name|response1
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// Attempt by a priviledged user should pass.
name|GETATTR3Response
name|response2
init|=
name|nfsd
operator|.
name|getattr
argument_list|(
name|xdr_req
operator|.
name|asReadOnlyWrap
argument_list|()
argument_list|,
name|securityHandler
argument_list|,
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
literal|1234
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect return code"
argument_list|,
name|Nfs3Status
operator|.
name|NFS3_OK
argument_list|,
name|response2
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testSetattr ()
specifier|public
name|void
name|testSetattr
parameter_list|()
throws|throws
name|Exception
block|{
name|HdfsFileStatus
name|status
init|=
name|nn
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getFileInfo
argument_list|(
name|testdir
argument_list|)
decl_stmt|;
name|long
name|dirId
init|=
name|status
operator|.
name|getFileId
argument_list|()
decl_stmt|;
name|XDR
name|xdr_req
init|=
operator|new
name|XDR
argument_list|()
decl_stmt|;
name|FileHandle
name|handle
init|=
operator|new
name|FileHandle
argument_list|(
name|dirId
argument_list|)
decl_stmt|;
name|SetAttr3
name|symAttr
init|=
operator|new
name|SetAttr3
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|SetAttrField
operator|.
name|UID
argument_list|)
argument_list|)
decl_stmt|;
name|SETATTR3Request
name|req
init|=
operator|new
name|SETATTR3Request
argument_list|(
name|handle
argument_list|,
name|symAttr
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|req
operator|.
name|serialize
argument_list|(
name|xdr_req
argument_list|)
expr_stmt|;
comment|// Attempt by an unprivileged user should fail.
name|SETATTR3Response
name|response1
init|=
name|nfsd
operator|.
name|setattr
argument_list|(
name|xdr_req
operator|.
name|asReadOnlyWrap
argument_list|()
argument_list|,
name|securityHandlerUnpriviledged
argument_list|,
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
literal|1234
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect return code"
argument_list|,
name|Nfs3Status
operator|.
name|NFS3ERR_ACCES
argument_list|,
name|response1
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// Attempt by a priviledged user should pass.
name|SETATTR3Response
name|response2
init|=
name|nfsd
operator|.
name|setattr
argument_list|(
name|xdr_req
operator|.
name|asReadOnlyWrap
argument_list|()
argument_list|,
name|securityHandler
argument_list|,
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
literal|1234
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect return code"
argument_list|,
name|Nfs3Status
operator|.
name|NFS3_OK
argument_list|,
name|response2
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testLookup ()
specifier|public
name|void
name|testLookup
parameter_list|()
throws|throws
name|Exception
block|{
name|HdfsFileStatus
name|status
init|=
name|nn
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getFileInfo
argument_list|(
name|testdir
argument_list|)
decl_stmt|;
name|long
name|dirId
init|=
name|status
operator|.
name|getFileId
argument_list|()
decl_stmt|;
name|FileHandle
name|handle
init|=
operator|new
name|FileHandle
argument_list|(
name|dirId
argument_list|)
decl_stmt|;
name|LOOKUP3Request
name|lookupReq
init|=
operator|new
name|LOOKUP3Request
argument_list|(
name|handle
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|XDR
name|xdr_req
init|=
operator|new
name|XDR
argument_list|()
decl_stmt|;
name|lookupReq
operator|.
name|serialize
argument_list|(
name|xdr_req
argument_list|)
expr_stmt|;
comment|// Attempt by an unpriviledged user should fail.
name|LOOKUP3Response
name|response1
init|=
name|nfsd
operator|.
name|lookup
argument_list|(
name|xdr_req
operator|.
name|asReadOnlyWrap
argument_list|()
argument_list|,
name|securityHandlerUnpriviledged
argument_list|,
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
literal|1234
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect return code"
argument_list|,
name|Nfs3Status
operator|.
name|NFS3ERR_ACCES
argument_list|,
name|response1
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// Attempt by a priviledged user should pass.
name|LOOKUP3Response
name|response2
init|=
name|nfsd
operator|.
name|lookup
argument_list|(
name|xdr_req
operator|.
name|asReadOnlyWrap
argument_list|()
argument_list|,
name|securityHandler
argument_list|,
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
literal|1234
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect return code"
argument_list|,
name|Nfs3Status
operator|.
name|NFS3_OK
argument_list|,
name|response2
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testAccess ()
specifier|public
name|void
name|testAccess
parameter_list|()
throws|throws
name|Exception
block|{
name|HdfsFileStatus
name|status
init|=
name|nn
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getFileInfo
argument_list|(
literal|"/tmp/bar"
argument_list|)
decl_stmt|;
name|long
name|dirId
init|=
name|status
operator|.
name|getFileId
argument_list|()
decl_stmt|;
name|FileHandle
name|handle
init|=
operator|new
name|FileHandle
argument_list|(
name|dirId
argument_list|)
decl_stmt|;
name|XDR
name|xdr_req
init|=
operator|new
name|XDR
argument_list|()
decl_stmt|;
name|ACCESS3Request
name|req
init|=
operator|new
name|ACCESS3Request
argument_list|(
name|handle
argument_list|)
decl_stmt|;
name|req
operator|.
name|serialize
argument_list|(
name|xdr_req
argument_list|)
expr_stmt|;
comment|// Attempt by an unpriviledged user should fail.
name|ACCESS3Response
name|response1
init|=
name|nfsd
operator|.
name|access
argument_list|(
name|xdr_req
operator|.
name|asReadOnlyWrap
argument_list|()
argument_list|,
name|securityHandlerUnpriviledged
argument_list|,
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
literal|1234
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect return code"
argument_list|,
name|Nfs3Status
operator|.
name|NFS3ERR_ACCES
argument_list|,
name|response1
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// Attempt by a priviledged user should pass.
name|ACCESS3Response
name|response2
init|=
name|nfsd
operator|.
name|access
argument_list|(
name|xdr_req
operator|.
name|asReadOnlyWrap
argument_list|()
argument_list|,
name|securityHandler
argument_list|,
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
literal|1234
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect return code"
argument_list|,
name|Nfs3Status
operator|.
name|NFS3_OK
argument_list|,
name|response2
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testReadlink ()
specifier|public
name|void
name|testReadlink
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create a symlink first.
name|HdfsFileStatus
name|status
init|=
name|nn
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getFileInfo
argument_list|(
name|testdir
argument_list|)
decl_stmt|;
name|long
name|dirId
init|=
name|status
operator|.
name|getFileId
argument_list|()
decl_stmt|;
name|XDR
name|xdr_req
init|=
operator|new
name|XDR
argument_list|()
decl_stmt|;
name|FileHandle
name|handle
init|=
operator|new
name|FileHandle
argument_list|(
name|dirId
argument_list|)
decl_stmt|;
name|SYMLINK3Request
name|req
init|=
operator|new
name|SYMLINK3Request
argument_list|(
name|handle
argument_list|,
literal|"fubar"
argument_list|,
operator|new
name|SetAttr3
argument_list|()
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|req
operator|.
name|serialize
argument_list|(
name|xdr_req
argument_list|)
expr_stmt|;
name|SYMLINK3Response
name|response
init|=
name|nfsd
operator|.
name|symlink
argument_list|(
name|xdr_req
operator|.
name|asReadOnlyWrap
argument_list|()
argument_list|,
name|securityHandler
argument_list|,
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
literal|1234
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect return code:"
argument_list|,
name|Nfs3Status
operator|.
name|NFS3_OK
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now perform readlink operations.
name|FileHandle
name|handle2
init|=
name|response
operator|.
name|getObjFileHandle
argument_list|()
decl_stmt|;
name|XDR
name|xdr_req2
init|=
operator|new
name|XDR
argument_list|()
decl_stmt|;
name|READLINK3Request
name|req2
init|=
operator|new
name|READLINK3Request
argument_list|(
name|handle2
argument_list|)
decl_stmt|;
name|req2
operator|.
name|serialize
argument_list|(
name|xdr_req2
argument_list|)
expr_stmt|;
comment|// Attempt by an unpriviledged user should fail.
name|READLINK3Response
name|response1
init|=
name|nfsd
operator|.
name|readlink
argument_list|(
name|xdr_req2
operator|.
name|asReadOnlyWrap
argument_list|()
argument_list|,
name|securityHandlerUnpriviledged
argument_list|,
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
literal|1234
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect return code:"
argument_list|,
name|Nfs3Status
operator|.
name|NFS3ERR_ACCES
argument_list|,
name|response1
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// Attempt by a priviledged user should pass.
name|READLINK3Response
name|response2
init|=
name|nfsd
operator|.
name|readlink
argument_list|(
name|xdr_req2
operator|.
name|asReadOnlyWrap
argument_list|()
argument_list|,
name|securityHandler
argument_list|,
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
literal|1234
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect return code:"
argument_list|,
name|Nfs3Status
operator|.
name|NFS3_OK
argument_list|,
name|response2
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testRead ()
specifier|public
name|void
name|testRead
parameter_list|()
throws|throws
name|Exception
block|{
name|HdfsFileStatus
name|status
init|=
name|nn
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getFileInfo
argument_list|(
literal|"/tmp/bar"
argument_list|)
decl_stmt|;
name|long
name|dirId
init|=
name|status
operator|.
name|getFileId
argument_list|()
decl_stmt|;
name|FileHandle
name|handle
init|=
operator|new
name|FileHandle
argument_list|(
name|dirId
argument_list|)
decl_stmt|;
name|READ3Request
name|readReq
init|=
operator|new
name|READ3Request
argument_list|(
name|handle
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|XDR
name|xdr_req
init|=
operator|new
name|XDR
argument_list|()
decl_stmt|;
name|readReq
operator|.
name|serialize
argument_list|(
name|xdr_req
argument_list|)
expr_stmt|;
comment|// Attempt by an unpriviledged user should fail.
name|READ3Response
name|response1
init|=
name|nfsd
operator|.
name|read
argument_list|(
name|xdr_req
operator|.
name|asReadOnlyWrap
argument_list|()
argument_list|,
name|securityHandlerUnpriviledged
argument_list|,
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
literal|1234
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect return code:"
argument_list|,
name|Nfs3Status
operator|.
name|NFS3ERR_ACCES
argument_list|,
name|response1
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// Attempt by a priviledged user should pass.
name|READ3Response
name|response2
init|=
name|nfsd
operator|.
name|read
argument_list|(
name|xdr_req
operator|.
name|asReadOnlyWrap
argument_list|()
argument_list|,
name|securityHandler
argument_list|,
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
literal|1234
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect return code:"
argument_list|,
name|Nfs3Status
operator|.
name|NFS3_OK
argument_list|,
name|response2
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testEncryptedReadWrite ()
specifier|public
name|void
name|testEncryptedReadWrite
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|len
init|=
literal|8192
decl_stmt|;
specifier|final
name|Path
name|zone
init|=
operator|new
name|Path
argument_list|(
literal|"/zone"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|zone
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone
argument_list|,
name|TEST_KEY
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|buffer
index|[
name|i
index|]
operator|=
operator|(
name|byte
operator|)
name|i
expr_stmt|;
block|}
specifier|final
name|String
name|encFile1
init|=
literal|"/zone/myfile"
decl_stmt|;
name|createFileUsingNfs
argument_list|(
name|encFile1
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
name|commit
argument_list|(
name|encFile1
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
literal|"encFile1 not equal"
argument_list|,
name|getFileContentsUsingNfs
argument_list|(
name|encFile1
argument_list|,
name|len
argument_list|)
argument_list|,
name|getFileContentsUsingDfs
argument_list|(
name|encFile1
argument_list|,
name|len
argument_list|)
argument_list|)
expr_stmt|;
comment|/*      * Same thing except this time create the encrypted file using DFS.      */
specifier|final
name|String
name|encFile2
init|=
literal|"/zone/myfile2"
decl_stmt|;
specifier|final
name|Path
name|encFile2Path
init|=
operator|new
name|Path
argument_list|(
name|encFile2
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|encFile2Path
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
literal|"encFile2 not equal"
argument_list|,
name|getFileContentsUsingNfs
argument_list|(
name|encFile2
argument_list|,
name|len
argument_list|)
argument_list|,
name|getFileContentsUsingDfs
argument_list|(
name|encFile2
argument_list|,
name|len
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createFileUsingNfs (String fileName, byte[] buffer)
specifier|private
name|void
name|createFileUsingNfs
parameter_list|(
name|String
name|fileName
parameter_list|,
name|byte
index|[]
name|buffer
parameter_list|)
throws|throws
name|Exception
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
operator|new
name|Path
argument_list|(
name|fileName
argument_list|)
argument_list|,
literal|0
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
specifier|final
name|HdfsFileStatus
name|status
init|=
name|nn
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getFileInfo
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
specifier|final
name|long
name|dirId
init|=
name|status
operator|.
name|getFileId
argument_list|()
decl_stmt|;
specifier|final
name|FileHandle
name|handle
init|=
operator|new
name|FileHandle
argument_list|(
name|dirId
argument_list|)
decl_stmt|;
specifier|final
name|WRITE3Request
name|writeReq
init|=
operator|new
name|WRITE3Request
argument_list|(
name|handle
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|length
argument_list|,
name|WriteStableHow
operator|.
name|DATA_SYNC
argument_list|,
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|buffer
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|XDR
name|xdr_req
init|=
operator|new
name|XDR
argument_list|()
decl_stmt|;
name|writeReq
operator|.
name|serialize
argument_list|(
name|xdr_req
argument_list|)
expr_stmt|;
specifier|final
name|WRITE3Response
name|response
init|=
name|nfsd
operator|.
name|write
argument_list|(
name|xdr_req
operator|.
name|asReadOnlyWrap
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|,
name|securityHandler
argument_list|,
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
literal|1234
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect response: "
argument_list|,
literal|null
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
DECL|method|getFileContentsUsingNfs (String fileName, int len)
specifier|private
name|byte
index|[]
name|getFileContentsUsingNfs
parameter_list|(
name|String
name|fileName
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|HdfsFileStatus
name|status
init|=
name|nn
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getFileInfo
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
specifier|final
name|long
name|dirId
init|=
name|status
operator|.
name|getFileId
argument_list|()
decl_stmt|;
specifier|final
name|FileHandle
name|handle
init|=
operator|new
name|FileHandle
argument_list|(
name|dirId
argument_list|)
decl_stmt|;
specifier|final
name|READ3Request
name|readReq
init|=
operator|new
name|READ3Request
argument_list|(
name|handle
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
decl_stmt|;
specifier|final
name|XDR
name|xdr_req
init|=
operator|new
name|XDR
argument_list|()
decl_stmt|;
name|readReq
operator|.
name|serialize
argument_list|(
name|xdr_req
argument_list|)
expr_stmt|;
specifier|final
name|READ3Response
name|response
init|=
name|nfsd
operator|.
name|read
argument_list|(
name|xdr_req
operator|.
name|asReadOnlyWrap
argument_list|()
argument_list|,
name|securityHandler
argument_list|,
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
literal|1234
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect return code: "
argument_list|,
name|Nfs3Status
operator|.
name|NFS3_OK
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"expected full read"
argument_list|,
name|response
operator|.
name|isEof
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|response
operator|.
name|getData
argument_list|()
operator|.
name|array
argument_list|()
return|;
block|}
DECL|method|getFileContentsUsingDfs (String fileName, int len)
specifier|private
name|byte
index|[]
name|getFileContentsUsingDfs
parameter_list|(
name|String
name|fileName
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|FSDataInputStream
name|in
init|=
name|hdfs
operator|.
name|open
argument_list|(
operator|new
name|Path
argument_list|(
name|fileName
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|ret
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|in
operator|.
name|readFully
argument_list|(
name|ret
argument_list|)
expr_stmt|;
try|try
block|{
name|in
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"expected end of file"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
comment|// expected. Unfortunately there is no associated message to check
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|ret
return|;
block|}
DECL|method|commit (String fileName, int len)
specifier|private
name|void
name|commit
parameter_list|(
name|String
name|fileName
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|HdfsFileStatus
name|status
init|=
name|nn
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getFileInfo
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
specifier|final
name|long
name|dirId
init|=
name|status
operator|.
name|getFileId
argument_list|()
decl_stmt|;
specifier|final
name|FileHandle
name|handle
init|=
operator|new
name|FileHandle
argument_list|(
name|dirId
argument_list|)
decl_stmt|;
specifier|final
name|XDR
name|xdr_req
init|=
operator|new
name|XDR
argument_list|()
decl_stmt|;
specifier|final
name|COMMIT3Request
name|req
init|=
operator|new
name|COMMIT3Request
argument_list|(
name|handle
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
decl_stmt|;
name|req
operator|.
name|serialize
argument_list|(
name|xdr_req
argument_list|)
expr_stmt|;
name|Channel
name|ch
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Channel
operator|.
name|class
argument_list|)
decl_stmt|;
name|COMMIT3Response
name|response2
init|=
name|nfsd
operator|.
name|commit
argument_list|(
name|xdr_req
operator|.
name|asReadOnlyWrap
argument_list|()
argument_list|,
name|ch
argument_list|,
literal|1
argument_list|,
name|securityHandler
argument_list|,
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
literal|1234
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect COMMIT3Response:"
argument_list|,
literal|null
argument_list|,
name|response2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testWrite ()
specifier|public
name|void
name|testWrite
parameter_list|()
throws|throws
name|Exception
block|{
name|HdfsFileStatus
name|status
init|=
name|nn
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getFileInfo
argument_list|(
literal|"/tmp/bar"
argument_list|)
decl_stmt|;
name|long
name|dirId
init|=
name|status
operator|.
name|getFileId
argument_list|()
decl_stmt|;
name|FileHandle
name|handle
init|=
operator|new
name|FileHandle
argument_list|(
name|dirId
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|10
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|buffer
index|[
name|i
index|]
operator|=
operator|(
name|byte
operator|)
name|i
expr_stmt|;
block|}
name|WRITE3Request
name|writeReq
init|=
operator|new
name|WRITE3Request
argument_list|(
name|handle
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|,
name|WriteStableHow
operator|.
name|DATA_SYNC
argument_list|,
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|buffer
argument_list|)
argument_list|)
decl_stmt|;
name|XDR
name|xdr_req
init|=
operator|new
name|XDR
argument_list|()
decl_stmt|;
name|writeReq
operator|.
name|serialize
argument_list|(
name|xdr_req
argument_list|)
expr_stmt|;
comment|// Attempt by an unpriviledged user should fail.
name|WRITE3Response
name|response1
init|=
name|nfsd
operator|.
name|write
argument_list|(
name|xdr_req
operator|.
name|asReadOnlyWrap
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|,
name|securityHandlerUnpriviledged
argument_list|,
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
literal|1234
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect return code:"
argument_list|,
name|Nfs3Status
operator|.
name|NFS3ERR_ACCES
argument_list|,
name|response1
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// Attempt by a priviledged user should pass.
name|WRITE3Response
name|response2
init|=
name|nfsd
operator|.
name|write
argument_list|(
name|xdr_req
operator|.
name|asReadOnlyWrap
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|,
name|securityHandler
argument_list|,
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
literal|1234
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect response:"
argument_list|,
literal|null
argument_list|,
name|response2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testCreate ()
specifier|public
name|void
name|testCreate
parameter_list|()
throws|throws
name|Exception
block|{
name|HdfsFileStatus
name|status
init|=
name|nn
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getFileInfo
argument_list|(
name|testdir
argument_list|)
decl_stmt|;
name|long
name|dirId
init|=
name|status
operator|.
name|getFileId
argument_list|()
decl_stmt|;
name|XDR
name|xdr_req
init|=
operator|new
name|XDR
argument_list|()
decl_stmt|;
name|FileHandle
name|handle
init|=
operator|new
name|FileHandle
argument_list|(
name|dirId
argument_list|)
decl_stmt|;
name|CREATE3Request
name|req
init|=
operator|new
name|CREATE3Request
argument_list|(
name|handle
argument_list|,
literal|"fubar"
argument_list|,
name|Nfs3Constant
operator|.
name|CREATE_UNCHECKED
argument_list|,
operator|new
name|SetAttr3
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|req
operator|.
name|serialize
argument_list|(
name|xdr_req
argument_list|)
expr_stmt|;
comment|// Attempt by an unpriviledged user should fail.
name|CREATE3Response
name|response1
init|=
name|nfsd
operator|.
name|create
argument_list|(
name|xdr_req
operator|.
name|asReadOnlyWrap
argument_list|()
argument_list|,
name|securityHandlerUnpriviledged
argument_list|,
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
literal|1234
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect return code:"
argument_list|,
name|Nfs3Status
operator|.
name|NFS3ERR_ACCES
argument_list|,
name|response1
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// Attempt by a priviledged user should pass.
name|CREATE3Response
name|response2
init|=
name|nfsd
operator|.
name|create
argument_list|(
name|xdr_req
operator|.
name|asReadOnlyWrap
argument_list|()
argument_list|,
name|securityHandler
argument_list|,
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
literal|1234
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect return code:"
argument_list|,
name|Nfs3Status
operator|.
name|NFS3_OK
argument_list|,
name|response2
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testMkdir ()
specifier|public
name|void
name|testMkdir
parameter_list|()
throws|throws
name|Exception
block|{
comment|//FixME
name|HdfsFileStatus
name|status
init|=
name|nn
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getFileInfo
argument_list|(
name|testdir
argument_list|)
decl_stmt|;
name|long
name|dirId
init|=
name|status
operator|.
name|getFileId
argument_list|()
decl_stmt|;
name|XDR
name|xdr_req
init|=
operator|new
name|XDR
argument_list|()
decl_stmt|;
name|FileHandle
name|handle
init|=
operator|new
name|FileHandle
argument_list|(
name|dirId
argument_list|)
decl_stmt|;
name|MKDIR3Request
name|req
init|=
operator|new
name|MKDIR3Request
argument_list|(
name|handle
argument_list|,
literal|"fubar1"
argument_list|,
operator|new
name|SetAttr3
argument_list|()
argument_list|)
decl_stmt|;
name|req
operator|.
name|serialize
argument_list|(
name|xdr_req
argument_list|)
expr_stmt|;
comment|// Attempt to mkdir by an unprivileged user should fail.
name|MKDIR3Response
name|response1
init|=
name|nfsd
operator|.
name|mkdir
argument_list|(
name|xdr_req
operator|.
name|asReadOnlyWrap
argument_list|()
argument_list|,
name|securityHandlerUnpriviledged
argument_list|,
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
literal|1234
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect return code:"
argument_list|,
name|Nfs3Status
operator|.
name|NFS3ERR_ACCES
argument_list|,
name|response1
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|XDR
name|xdr_req2
init|=
operator|new
name|XDR
argument_list|()
decl_stmt|;
name|MKDIR3Request
name|req2
init|=
operator|new
name|MKDIR3Request
argument_list|(
name|handle
argument_list|,
literal|"fubar2"
argument_list|,
operator|new
name|SetAttr3
argument_list|()
argument_list|)
decl_stmt|;
name|req2
operator|.
name|serialize
argument_list|(
name|xdr_req2
argument_list|)
expr_stmt|;
comment|// Attempt to mkdir by a privileged user should pass.
name|MKDIR3Response
name|response2
init|=
name|nfsd
operator|.
name|mkdir
argument_list|(
name|xdr_req2
operator|.
name|asReadOnlyWrap
argument_list|()
argument_list|,
name|securityHandler
argument_list|,
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
literal|1234
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect return code:"
argument_list|,
name|Nfs3Status
operator|.
name|NFS3_OK
argument_list|,
name|response2
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testSymlink ()
specifier|public
name|void
name|testSymlink
parameter_list|()
throws|throws
name|Exception
block|{
name|HdfsFileStatus
name|status
init|=
name|nn
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getFileInfo
argument_list|(
name|testdir
argument_list|)
decl_stmt|;
name|long
name|dirId
init|=
name|status
operator|.
name|getFileId
argument_list|()
decl_stmt|;
name|XDR
name|xdr_req
init|=
operator|new
name|XDR
argument_list|()
decl_stmt|;
name|FileHandle
name|handle
init|=
operator|new
name|FileHandle
argument_list|(
name|dirId
argument_list|)
decl_stmt|;
name|SYMLINK3Request
name|req
init|=
operator|new
name|SYMLINK3Request
argument_list|(
name|handle
argument_list|,
literal|"fubar"
argument_list|,
operator|new
name|SetAttr3
argument_list|()
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|req
operator|.
name|serialize
argument_list|(
name|xdr_req
argument_list|)
expr_stmt|;
comment|// Attempt by an unprivileged user should fail.
name|SYMLINK3Response
name|response1
init|=
name|nfsd
operator|.
name|symlink
argument_list|(
name|xdr_req
operator|.
name|asReadOnlyWrap
argument_list|()
argument_list|,
name|securityHandlerUnpriviledged
argument_list|,
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
literal|1234
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect return code:"
argument_list|,
name|Nfs3Status
operator|.
name|NFS3ERR_ACCES
argument_list|,
name|response1
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// Attempt by a privileged user should pass.
name|SYMLINK3Response
name|response2
init|=
name|nfsd
operator|.
name|symlink
argument_list|(
name|xdr_req
operator|.
name|asReadOnlyWrap
argument_list|()
argument_list|,
name|securityHandler
argument_list|,
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
literal|1234
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect return code:"
argument_list|,
name|Nfs3Status
operator|.
name|NFS3_OK
argument_list|,
name|response2
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testRemove ()
specifier|public
name|void
name|testRemove
parameter_list|()
throws|throws
name|Exception
block|{
name|HdfsFileStatus
name|status
init|=
name|nn
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getFileInfo
argument_list|(
name|testdir
argument_list|)
decl_stmt|;
name|long
name|dirId
init|=
name|status
operator|.
name|getFileId
argument_list|()
decl_stmt|;
name|XDR
name|xdr_req
init|=
operator|new
name|XDR
argument_list|()
decl_stmt|;
name|FileHandle
name|handle
init|=
operator|new
name|FileHandle
argument_list|(
name|dirId
argument_list|)
decl_stmt|;
name|REMOVE3Request
name|req
init|=
operator|new
name|REMOVE3Request
argument_list|(
name|handle
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|req
operator|.
name|serialize
argument_list|(
name|xdr_req
argument_list|)
expr_stmt|;
comment|// Attempt by an unpriviledged user should fail.
name|REMOVE3Response
name|response1
init|=
name|nfsd
operator|.
name|remove
argument_list|(
name|xdr_req
operator|.
name|asReadOnlyWrap
argument_list|()
argument_list|,
name|securityHandlerUnpriviledged
argument_list|,
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
literal|1234
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect return code:"
argument_list|,
name|Nfs3Status
operator|.
name|NFS3ERR_ACCES
argument_list|,
name|response1
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// Attempt by a priviledged user should pass.
name|REMOVE3Response
name|response2
init|=
name|nfsd
operator|.
name|remove
argument_list|(
name|xdr_req
operator|.
name|asReadOnlyWrap
argument_list|()
argument_list|,
name|securityHandler
argument_list|,
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
literal|1234
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect return code:"
argument_list|,
name|Nfs3Status
operator|.
name|NFS3_OK
argument_list|,
name|response2
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testRmdir ()
specifier|public
name|void
name|testRmdir
parameter_list|()
throws|throws
name|Exception
block|{
name|HdfsFileStatus
name|status
init|=
name|nn
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getFileInfo
argument_list|(
name|testdir
argument_list|)
decl_stmt|;
name|long
name|dirId
init|=
name|status
operator|.
name|getFileId
argument_list|()
decl_stmt|;
name|XDR
name|xdr_req
init|=
operator|new
name|XDR
argument_list|()
decl_stmt|;
name|FileHandle
name|handle
init|=
operator|new
name|FileHandle
argument_list|(
name|dirId
argument_list|)
decl_stmt|;
name|RMDIR3Request
name|req
init|=
operator|new
name|RMDIR3Request
argument_list|(
name|handle
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|req
operator|.
name|serialize
argument_list|(
name|xdr_req
argument_list|)
expr_stmt|;
comment|// Attempt by an unprivileged user should fail.
name|RMDIR3Response
name|response1
init|=
name|nfsd
operator|.
name|rmdir
argument_list|(
name|xdr_req
operator|.
name|asReadOnlyWrap
argument_list|()
argument_list|,
name|securityHandlerUnpriviledged
argument_list|,
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
literal|1234
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect return code:"
argument_list|,
name|Nfs3Status
operator|.
name|NFS3ERR_ACCES
argument_list|,
name|response1
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// Attempt by a privileged user should pass.
name|RMDIR3Response
name|response2
init|=
name|nfsd
operator|.
name|rmdir
argument_list|(
name|xdr_req
operator|.
name|asReadOnlyWrap
argument_list|()
argument_list|,
name|securityHandler
argument_list|,
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
literal|1234
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect return code:"
argument_list|,
name|Nfs3Status
operator|.
name|NFS3_OK
argument_list|,
name|response2
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testRename ()
specifier|public
name|void
name|testRename
parameter_list|()
throws|throws
name|Exception
block|{
name|HdfsFileStatus
name|status
init|=
name|nn
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getFileInfo
argument_list|(
name|testdir
argument_list|)
decl_stmt|;
name|long
name|dirId
init|=
name|status
operator|.
name|getFileId
argument_list|()
decl_stmt|;
name|XDR
name|xdr_req
init|=
operator|new
name|XDR
argument_list|()
decl_stmt|;
name|FileHandle
name|handle
init|=
operator|new
name|FileHandle
argument_list|(
name|dirId
argument_list|)
decl_stmt|;
name|RENAME3Request
name|req
init|=
operator|new
name|RENAME3Request
argument_list|(
name|handle
argument_list|,
literal|"bar"
argument_list|,
name|handle
argument_list|,
literal|"fubar"
argument_list|)
decl_stmt|;
name|req
operator|.
name|serialize
argument_list|(
name|xdr_req
argument_list|)
expr_stmt|;
comment|// Attempt by an unprivileged user should fail.
name|RENAME3Response
name|response1
init|=
name|nfsd
operator|.
name|rename
argument_list|(
name|xdr_req
operator|.
name|asReadOnlyWrap
argument_list|()
argument_list|,
name|securityHandlerUnpriviledged
argument_list|,
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
literal|1234
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect return code:"
argument_list|,
name|Nfs3Status
operator|.
name|NFS3ERR_ACCES
argument_list|,
name|response1
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// Attempt by a privileged user should pass.
name|RENAME3Response
name|response2
init|=
name|nfsd
operator|.
name|rename
argument_list|(
name|xdr_req
operator|.
name|asReadOnlyWrap
argument_list|()
argument_list|,
name|securityHandler
argument_list|,
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
literal|1234
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect return code:"
argument_list|,
name|Nfs3Status
operator|.
name|NFS3_OK
argument_list|,
name|response2
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testReaddir ()
specifier|public
name|void
name|testReaddir
parameter_list|()
throws|throws
name|Exception
block|{
name|HdfsFileStatus
name|status
init|=
name|nn
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getFileInfo
argument_list|(
name|testdir
argument_list|)
decl_stmt|;
name|long
name|dirId
init|=
name|status
operator|.
name|getFileId
argument_list|()
decl_stmt|;
name|FileHandle
name|handle
init|=
operator|new
name|FileHandle
argument_list|(
name|dirId
argument_list|)
decl_stmt|;
name|XDR
name|xdr_req
init|=
operator|new
name|XDR
argument_list|()
decl_stmt|;
name|READDIR3Request
name|req
init|=
operator|new
name|READDIR3Request
argument_list|(
name|handle
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|req
operator|.
name|serialize
argument_list|(
name|xdr_req
argument_list|)
expr_stmt|;
comment|// Attempt by an unpriviledged user should fail.
name|READDIR3Response
name|response1
init|=
name|nfsd
operator|.
name|readdir
argument_list|(
name|xdr_req
operator|.
name|asReadOnlyWrap
argument_list|()
argument_list|,
name|securityHandlerUnpriviledged
argument_list|,
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
literal|1234
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect return code:"
argument_list|,
name|Nfs3Status
operator|.
name|NFS3ERR_ACCES
argument_list|,
name|response1
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// Attempt by a priviledged user should pass.
name|READDIR3Response
name|response2
init|=
name|nfsd
operator|.
name|readdir
argument_list|(
name|xdr_req
operator|.
name|asReadOnlyWrap
argument_list|()
argument_list|,
name|securityHandler
argument_list|,
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
literal|1234
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect return code:"
argument_list|,
name|Nfs3Status
operator|.
name|NFS3_OK
argument_list|,
name|response2
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testReaddirplus ()
specifier|public
name|void
name|testReaddirplus
parameter_list|()
throws|throws
name|Exception
block|{
name|HdfsFileStatus
name|status
init|=
name|nn
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getFileInfo
argument_list|(
name|testdir
argument_list|)
decl_stmt|;
name|long
name|dirId
init|=
name|status
operator|.
name|getFileId
argument_list|()
decl_stmt|;
name|FileHandle
name|handle
init|=
operator|new
name|FileHandle
argument_list|(
name|dirId
argument_list|)
decl_stmt|;
name|XDR
name|xdr_req
init|=
operator|new
name|XDR
argument_list|()
decl_stmt|;
name|READDIRPLUS3Request
name|req
init|=
operator|new
name|READDIRPLUS3Request
argument_list|(
name|handle
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|req
operator|.
name|serialize
argument_list|(
name|xdr_req
argument_list|)
expr_stmt|;
comment|// Attempt by an unprivileged user should fail.
name|READDIRPLUS3Response
name|response1
init|=
name|nfsd
operator|.
name|readdirplus
argument_list|(
name|xdr_req
operator|.
name|asReadOnlyWrap
argument_list|()
argument_list|,
name|securityHandlerUnpriviledged
argument_list|,
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
literal|1234
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect return code:"
argument_list|,
name|Nfs3Status
operator|.
name|NFS3ERR_ACCES
argument_list|,
name|response1
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// Attempt by a privileged user should pass.
name|READDIRPLUS3Response
name|response2
init|=
name|nfsd
operator|.
name|readdirplus
argument_list|(
name|xdr_req
operator|.
name|asReadOnlyWrap
argument_list|()
argument_list|,
name|securityHandler
argument_list|,
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
literal|1234
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect return code:"
argument_list|,
name|Nfs3Status
operator|.
name|NFS3_OK
argument_list|,
name|response2
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testFsstat ()
specifier|public
name|void
name|testFsstat
parameter_list|()
throws|throws
name|Exception
block|{
name|HdfsFileStatus
name|status
init|=
name|nn
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getFileInfo
argument_list|(
literal|"/tmp/bar"
argument_list|)
decl_stmt|;
name|long
name|dirId
init|=
name|status
operator|.
name|getFileId
argument_list|()
decl_stmt|;
name|FileHandle
name|handle
init|=
operator|new
name|FileHandle
argument_list|(
name|dirId
argument_list|)
decl_stmt|;
name|XDR
name|xdr_req
init|=
operator|new
name|XDR
argument_list|()
decl_stmt|;
name|FSSTAT3Request
name|req
init|=
operator|new
name|FSSTAT3Request
argument_list|(
name|handle
argument_list|)
decl_stmt|;
name|req
operator|.
name|serialize
argument_list|(
name|xdr_req
argument_list|)
expr_stmt|;
comment|// Attempt by an unpriviledged user should fail.
name|FSSTAT3Response
name|response1
init|=
name|nfsd
operator|.
name|fsstat
argument_list|(
name|xdr_req
operator|.
name|asReadOnlyWrap
argument_list|()
argument_list|,
name|securityHandlerUnpriviledged
argument_list|,
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
literal|1234
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect return code:"
argument_list|,
name|Nfs3Status
operator|.
name|NFS3ERR_ACCES
argument_list|,
name|response1
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// Attempt by a priviledged user should pass.
name|FSSTAT3Response
name|response2
init|=
name|nfsd
operator|.
name|fsstat
argument_list|(
name|xdr_req
operator|.
name|asReadOnlyWrap
argument_list|()
argument_list|,
name|securityHandler
argument_list|,
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
literal|1234
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect return code:"
argument_list|,
name|Nfs3Status
operator|.
name|NFS3_OK
argument_list|,
name|response2
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testFsinfo ()
specifier|public
name|void
name|testFsinfo
parameter_list|()
throws|throws
name|Exception
block|{
name|HdfsFileStatus
name|status
init|=
name|nn
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getFileInfo
argument_list|(
literal|"/tmp/bar"
argument_list|)
decl_stmt|;
name|long
name|dirId
init|=
name|status
operator|.
name|getFileId
argument_list|()
decl_stmt|;
name|FileHandle
name|handle
init|=
operator|new
name|FileHandle
argument_list|(
name|dirId
argument_list|)
decl_stmt|;
name|XDR
name|xdr_req
init|=
operator|new
name|XDR
argument_list|()
decl_stmt|;
name|FSINFO3Request
name|req
init|=
operator|new
name|FSINFO3Request
argument_list|(
name|handle
argument_list|)
decl_stmt|;
name|req
operator|.
name|serialize
argument_list|(
name|xdr_req
argument_list|)
expr_stmt|;
comment|// Attempt by an unpriviledged user should fail.
name|FSINFO3Response
name|response1
init|=
name|nfsd
operator|.
name|fsinfo
argument_list|(
name|xdr_req
operator|.
name|asReadOnlyWrap
argument_list|()
argument_list|,
name|securityHandlerUnpriviledged
argument_list|,
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
literal|1234
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect return code:"
argument_list|,
name|Nfs3Status
operator|.
name|NFS3ERR_ACCES
argument_list|,
name|response1
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// Attempt by a priviledged user should pass.
name|FSINFO3Response
name|response2
init|=
name|nfsd
operator|.
name|fsinfo
argument_list|(
name|xdr_req
operator|.
name|asReadOnlyWrap
argument_list|()
argument_list|,
name|securityHandler
argument_list|,
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
literal|1234
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect return code:"
argument_list|,
name|Nfs3Status
operator|.
name|NFS3_OK
argument_list|,
name|response2
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testPathconf ()
specifier|public
name|void
name|testPathconf
parameter_list|()
throws|throws
name|Exception
block|{
name|HdfsFileStatus
name|status
init|=
name|nn
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getFileInfo
argument_list|(
literal|"/tmp/bar"
argument_list|)
decl_stmt|;
name|long
name|dirId
init|=
name|status
operator|.
name|getFileId
argument_list|()
decl_stmt|;
name|FileHandle
name|handle
init|=
operator|new
name|FileHandle
argument_list|(
name|dirId
argument_list|)
decl_stmt|;
name|XDR
name|xdr_req
init|=
operator|new
name|XDR
argument_list|()
decl_stmt|;
name|PATHCONF3Request
name|req
init|=
operator|new
name|PATHCONF3Request
argument_list|(
name|handle
argument_list|)
decl_stmt|;
name|req
operator|.
name|serialize
argument_list|(
name|xdr_req
argument_list|)
expr_stmt|;
comment|// Attempt by an unpriviledged user should fail.
name|PATHCONF3Response
name|response1
init|=
name|nfsd
operator|.
name|pathconf
argument_list|(
name|xdr_req
operator|.
name|asReadOnlyWrap
argument_list|()
argument_list|,
name|securityHandlerUnpriviledged
argument_list|,
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
literal|1234
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect return code:"
argument_list|,
name|Nfs3Status
operator|.
name|NFS3ERR_ACCES
argument_list|,
name|response1
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// Attempt by a priviledged user should pass.
name|PATHCONF3Response
name|response2
init|=
name|nfsd
operator|.
name|pathconf
argument_list|(
name|xdr_req
operator|.
name|asReadOnlyWrap
argument_list|()
argument_list|,
name|securityHandler
argument_list|,
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
literal|1234
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect return code:"
argument_list|,
name|Nfs3Status
operator|.
name|NFS3_OK
argument_list|,
name|response2
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testCommit ()
specifier|public
name|void
name|testCommit
parameter_list|()
throws|throws
name|Exception
block|{
name|HdfsFileStatus
name|status
init|=
name|nn
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getFileInfo
argument_list|(
literal|"/tmp/bar"
argument_list|)
decl_stmt|;
name|long
name|dirId
init|=
name|status
operator|.
name|getFileId
argument_list|()
decl_stmt|;
name|FileHandle
name|handle
init|=
operator|new
name|FileHandle
argument_list|(
name|dirId
argument_list|)
decl_stmt|;
name|XDR
name|xdr_req
init|=
operator|new
name|XDR
argument_list|()
decl_stmt|;
name|COMMIT3Request
name|req
init|=
operator|new
name|COMMIT3Request
argument_list|(
name|handle
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|req
operator|.
name|serialize
argument_list|(
name|xdr_req
argument_list|)
expr_stmt|;
name|Channel
name|ch
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Channel
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Attempt by an unpriviledged user should fail.
name|COMMIT3Response
name|response1
init|=
name|nfsd
operator|.
name|commit
argument_list|(
name|xdr_req
operator|.
name|asReadOnlyWrap
argument_list|()
argument_list|,
name|ch
argument_list|,
literal|1
argument_list|,
name|securityHandlerUnpriviledged
argument_list|,
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
literal|1234
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect return code:"
argument_list|,
name|Nfs3Status
operator|.
name|NFS3ERR_ACCES
argument_list|,
name|response1
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// Attempt by a priviledged user should pass.
name|COMMIT3Response
name|response2
init|=
name|nfsd
operator|.
name|commit
argument_list|(
name|xdr_req
operator|.
name|asReadOnlyWrap
argument_list|()
argument_list|,
name|ch
argument_list|,
literal|1
argument_list|,
name|securityHandler
argument_list|,
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
literal|1234
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect COMMIT3Response:"
argument_list|,
literal|null
argument_list|,
name|response2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|)
DECL|method|testIdempotent ()
specifier|public
name|void
name|testIdempotent
parameter_list|()
block|{
name|Object
index|[]
index|[]
name|procedures
init|=
block|{
block|{
name|Nfs3Constant
operator|.
name|NFSPROC3
operator|.
name|NULL
block|,
literal|1
block|}
block|,
block|{
name|Nfs3Constant
operator|.
name|NFSPROC3
operator|.
name|GETATTR
block|,
literal|1
block|}
block|,
block|{
name|Nfs3Constant
operator|.
name|NFSPROC3
operator|.
name|SETATTR
block|,
literal|1
block|}
block|,
block|{
name|Nfs3Constant
operator|.
name|NFSPROC3
operator|.
name|LOOKUP
block|,
literal|1
block|}
block|,
block|{
name|Nfs3Constant
operator|.
name|NFSPROC3
operator|.
name|ACCESS
block|,
literal|1
block|}
block|,
block|{
name|Nfs3Constant
operator|.
name|NFSPROC3
operator|.
name|READLINK
block|,
literal|1
block|}
block|,
block|{
name|Nfs3Constant
operator|.
name|NFSPROC3
operator|.
name|READ
block|,
literal|1
block|}
block|,
block|{
name|Nfs3Constant
operator|.
name|NFSPROC3
operator|.
name|WRITE
block|,
literal|1
block|}
block|,
block|{
name|Nfs3Constant
operator|.
name|NFSPROC3
operator|.
name|CREATE
block|,
literal|0
block|}
block|,
block|{
name|Nfs3Constant
operator|.
name|NFSPROC3
operator|.
name|MKDIR
block|,
literal|0
block|}
block|,
block|{
name|Nfs3Constant
operator|.
name|NFSPROC3
operator|.
name|SYMLINK
block|,
literal|0
block|}
block|,
block|{
name|Nfs3Constant
operator|.
name|NFSPROC3
operator|.
name|MKNOD
block|,
literal|0
block|}
block|,
block|{
name|Nfs3Constant
operator|.
name|NFSPROC3
operator|.
name|REMOVE
block|,
literal|0
block|}
block|,
block|{
name|Nfs3Constant
operator|.
name|NFSPROC3
operator|.
name|RMDIR
block|,
literal|0
block|}
block|,
block|{
name|Nfs3Constant
operator|.
name|NFSPROC3
operator|.
name|RENAME
block|,
literal|0
block|}
block|,
block|{
name|Nfs3Constant
operator|.
name|NFSPROC3
operator|.
name|LINK
block|,
literal|0
block|}
block|,
block|{
name|Nfs3Constant
operator|.
name|NFSPROC3
operator|.
name|READDIR
block|,
literal|1
block|}
block|,
block|{
name|Nfs3Constant
operator|.
name|NFSPROC3
operator|.
name|READDIRPLUS
block|,
literal|1
block|}
block|,
block|{
name|Nfs3Constant
operator|.
name|NFSPROC3
operator|.
name|FSSTAT
block|,
literal|1
block|}
block|,
block|{
name|Nfs3Constant
operator|.
name|NFSPROC3
operator|.
name|FSINFO
block|,
literal|1
block|}
block|,
block|{
name|Nfs3Constant
operator|.
name|NFSPROC3
operator|.
name|PATHCONF
block|,
literal|1
block|}
block|,
block|{
name|Nfs3Constant
operator|.
name|NFSPROC3
operator|.
name|COMMIT
block|,
literal|1
block|}
block|}
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|procedure
range|:
name|procedures
control|)
block|{
name|boolean
name|idempotent
init|=
name|procedure
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|Nfs3Constant
operator|.
name|NFSPROC3
name|proc
init|=
operator|(
name|Nfs3Constant
operator|.
name|NFSPROC3
operator|)
name|procedure
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|idempotent
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
literal|"Procedure "
operator|+
name|proc
operator|+
literal|" should be idempotent"
operator|)
argument_list|,
name|proc
operator|.
name|isIdempotent
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
operator|(
literal|"Procedure "
operator|+
name|proc
operator|+
literal|" should be non-idempotent"
operator|)
argument_list|,
name|proc
operator|.
name|isIdempotent
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testDeprecatedKeys ()
specifier|public
name|void
name|testDeprecatedKeys
parameter_list|()
block|{
name|NfsConfiguration
name|conf
init|=
operator|new
name|NfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"nfs3.server.port"
argument_list|,
literal|998
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|NfsConfigKeys
operator|.
name|DFS_NFS_SERVER_PORT_KEY
argument_list|,
literal|0
argument_list|)
operator|==
literal|998
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"nfs3.mountd.port"
argument_list|,
literal|999
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|NfsConfigKeys
operator|.
name|DFS_NFS_MOUNTD_PORT_KEY
argument_list|,
literal|0
argument_list|)
operator|==
literal|999
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"dfs.nfs.exports.allowed.hosts"
argument_list|,
literal|"host1"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|CommonConfigurationKeys
operator|.
name|NFS_EXPORTS_ALLOWED_HOSTS_KEY
argument_list|)
operator|.
name|equals
argument_list|(
literal|"host1"
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"dfs.nfs.exports.cache.expirytime.millis"
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|Nfs3Constant
operator|.
name|NFS_EXPORTS_CACHE_EXPIRYTIME_MILLIS_KEY
argument_list|,
literal|0
argument_list|)
operator|==
literal|1000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"hadoop.nfs.userupdate.milly"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|IdMappingConstant
operator|.
name|USERGROUPID_UPDATE_MILLIS_KEY
argument_list|,
literal|0
argument_list|)
operator|==
literal|10
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"dfs.nfs3.dump.dir"
argument_list|,
literal|"/nfs/tmp"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|NfsConfigKeys
operator|.
name|DFS_NFS_FILE_DUMP_DIR_KEY
argument_list|)
operator|.
name|equals
argument_list|(
literal|"/nfs/tmp"
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"dfs.nfs3.enableDump"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|NfsConfigKeys
operator|.
name|DFS_NFS_FILE_DUMP_KEY
argument_list|,
literal|true
argument_list|)
operator|==
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"dfs.nfs3.max.open.files"
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|NfsConfigKeys
operator|.
name|DFS_NFS_MAX_OPEN_FILES_KEY
argument_list|,
literal|0
argument_list|)
operator|==
literal|500
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"dfs.nfs3.stream.timeout"
argument_list|,
literal|6000
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|NfsConfigKeys
operator|.
name|DFS_NFS_STREAM_TIMEOUT_KEY
argument_list|,
literal|0
argument_list|)
operator|==
literal|6000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"dfs.nfs3.export.point"
argument_list|,
literal|"/dir1"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|NfsConfigKeys
operator|.
name|DFS_NFS_EXPORT_POINT_KEY
argument_list|)
operator|.
name|equals
argument_list|(
literal|"/dir1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

