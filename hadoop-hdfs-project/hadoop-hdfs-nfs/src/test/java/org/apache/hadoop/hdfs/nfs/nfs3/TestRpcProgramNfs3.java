begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.nfs.nfs3
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|nfs
operator|.
name|nfs3
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|Nfs3Constant
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests for {@link RpcProgramNfs3}  */
end_comment

begin_class
DECL|class|TestRpcProgramNfs3
specifier|public
class|class
name|TestRpcProgramNfs3
block|{
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|)
DECL|method|testIdempotent ()
specifier|public
name|void
name|testIdempotent
parameter_list|()
block|{
name|int
index|[]
index|[]
name|procedures
init|=
block|{
block|{
name|Nfs3Constant
operator|.
name|NFSPROC3_NULL
block|,
literal|1
block|}
block|,
block|{
name|Nfs3Constant
operator|.
name|NFSPROC3_GETATTR
block|,
literal|1
block|}
block|,
block|{
name|Nfs3Constant
operator|.
name|NFSPROC3_SETATTR
block|,
literal|1
block|}
block|,
block|{
name|Nfs3Constant
operator|.
name|NFSPROC3_LOOKUP
block|,
literal|1
block|}
block|,
block|{
name|Nfs3Constant
operator|.
name|NFSPROC3_ACCESS
block|,
literal|1
block|}
block|,
block|{
name|Nfs3Constant
operator|.
name|NFSPROC3_READLINK
block|,
literal|1
block|}
block|,
block|{
name|Nfs3Constant
operator|.
name|NFSPROC3_READ
block|,
literal|1
block|}
block|,
block|{
name|Nfs3Constant
operator|.
name|NFSPROC3_WRITE
block|,
literal|1
block|}
block|,
block|{
name|Nfs3Constant
operator|.
name|NFSPROC3_CREATE
block|,
literal|0
block|}
block|,
block|{
name|Nfs3Constant
operator|.
name|NFSPROC3_MKDIR
block|,
literal|0
block|}
block|,
block|{
name|Nfs3Constant
operator|.
name|NFSPROC3_SYMLINK
block|,
literal|0
block|}
block|,
block|{
name|Nfs3Constant
operator|.
name|NFSPROC3_MKNOD
block|,
literal|0
block|}
block|,
block|{
name|Nfs3Constant
operator|.
name|NFSPROC3_REMOVE
block|,
literal|0
block|}
block|,
block|{
name|Nfs3Constant
operator|.
name|NFSPROC3_RMDIR
block|,
literal|0
block|}
block|,
block|{
name|Nfs3Constant
operator|.
name|NFSPROC3_RENAME
block|,
literal|0
block|}
block|,
block|{
name|Nfs3Constant
operator|.
name|NFSPROC3_LINK
block|,
literal|0
block|}
block|,
block|{
name|Nfs3Constant
operator|.
name|NFSPROC3_READDIR
block|,
literal|1
block|}
block|,
block|{
name|Nfs3Constant
operator|.
name|NFSPROC3_READDIRPLUS
block|,
literal|1
block|}
block|,
block|{
name|Nfs3Constant
operator|.
name|NFSPROC3_FSSTAT
block|,
literal|1
block|}
block|,
block|{
name|Nfs3Constant
operator|.
name|NFSPROC3_FSINFO
block|,
literal|1
block|}
block|,
block|{
name|Nfs3Constant
operator|.
name|NFSPROC3_PATHCONF
block|,
literal|1
block|}
block|,
block|{
name|Nfs3Constant
operator|.
name|NFSPROC3_COMMIT
block|,
literal|1
block|}
block|}
decl_stmt|;
for|for
control|(
name|int
index|[]
name|procedure
range|:
name|procedures
control|)
block|{
name|boolean
name|idempotent
init|=
name|procedure
index|[
literal|1
index|]
operator|==
literal|1
decl_stmt|;
name|int
name|proc
init|=
name|procedure
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|idempotent
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
literal|"Procedure "
operator|+
name|proc
operator|+
literal|" should be idempotent"
operator|)
argument_list|,
name|RpcProgramNfs3
operator|.
name|isIdempotent
argument_list|(
name|proc
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
operator|(
literal|"Procedure "
operator|+
name|proc
operator|+
literal|" should be non-idempotent"
operator|)
argument_list|,
name|RpcProgramNfs3
operator|.
name|isIdempotent
argument_list|(
name|proc
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

