begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.nfs.nfs3
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|nfs
operator|.
name|nfs3
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|nfs
operator|.
name|conf
operator|.
name|NfsConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|nfs
operator|.
name|conf
operator|.
name|NfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|Nfs3Constant
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests for {@link RpcProgramNfs3}  */
end_comment

begin_class
DECL|class|TestRpcProgramNfs3
specifier|public
class|class
name|TestRpcProgramNfs3
block|{
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|)
DECL|method|testIdempotent ()
specifier|public
name|void
name|testIdempotent
parameter_list|()
block|{
name|Object
index|[]
index|[]
name|procedures
init|=
block|{
block|{
name|Nfs3Constant
operator|.
name|NFSPROC3
operator|.
name|NULL
block|,
literal|1
block|}
block|,
block|{
name|Nfs3Constant
operator|.
name|NFSPROC3
operator|.
name|GETATTR
block|,
literal|1
block|}
block|,
block|{
name|Nfs3Constant
operator|.
name|NFSPROC3
operator|.
name|SETATTR
block|,
literal|1
block|}
block|,
block|{
name|Nfs3Constant
operator|.
name|NFSPROC3
operator|.
name|LOOKUP
block|,
literal|1
block|}
block|,
block|{
name|Nfs3Constant
operator|.
name|NFSPROC3
operator|.
name|ACCESS
block|,
literal|1
block|}
block|,
block|{
name|Nfs3Constant
operator|.
name|NFSPROC3
operator|.
name|READLINK
block|,
literal|1
block|}
block|,
block|{
name|Nfs3Constant
operator|.
name|NFSPROC3
operator|.
name|READ
block|,
literal|1
block|}
block|,
block|{
name|Nfs3Constant
operator|.
name|NFSPROC3
operator|.
name|WRITE
block|,
literal|1
block|}
block|,
block|{
name|Nfs3Constant
operator|.
name|NFSPROC3
operator|.
name|CREATE
block|,
literal|0
block|}
block|,
block|{
name|Nfs3Constant
operator|.
name|NFSPROC3
operator|.
name|MKDIR
block|,
literal|0
block|}
block|,
block|{
name|Nfs3Constant
operator|.
name|NFSPROC3
operator|.
name|SYMLINK
block|,
literal|0
block|}
block|,
block|{
name|Nfs3Constant
operator|.
name|NFSPROC3
operator|.
name|MKNOD
block|,
literal|0
block|}
block|,
block|{
name|Nfs3Constant
operator|.
name|NFSPROC3
operator|.
name|REMOVE
block|,
literal|0
block|}
block|,
block|{
name|Nfs3Constant
operator|.
name|NFSPROC3
operator|.
name|RMDIR
block|,
literal|0
block|}
block|,
block|{
name|Nfs3Constant
operator|.
name|NFSPROC3
operator|.
name|RENAME
block|,
literal|0
block|}
block|,
block|{
name|Nfs3Constant
operator|.
name|NFSPROC3
operator|.
name|LINK
block|,
literal|0
block|}
block|,
block|{
name|Nfs3Constant
operator|.
name|NFSPROC3
operator|.
name|READDIR
block|,
literal|1
block|}
block|,
block|{
name|Nfs3Constant
operator|.
name|NFSPROC3
operator|.
name|READDIRPLUS
block|,
literal|1
block|}
block|,
block|{
name|Nfs3Constant
operator|.
name|NFSPROC3
operator|.
name|FSSTAT
block|,
literal|1
block|}
block|,
block|{
name|Nfs3Constant
operator|.
name|NFSPROC3
operator|.
name|FSINFO
block|,
literal|1
block|}
block|,
block|{
name|Nfs3Constant
operator|.
name|NFSPROC3
operator|.
name|PATHCONF
block|,
literal|1
block|}
block|,
block|{
name|Nfs3Constant
operator|.
name|NFSPROC3
operator|.
name|COMMIT
block|,
literal|1
block|}
block|}
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|procedure
range|:
name|procedures
control|)
block|{
name|boolean
name|idempotent
init|=
name|procedure
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|Nfs3Constant
operator|.
name|NFSPROC3
name|proc
init|=
operator|(
name|Nfs3Constant
operator|.
name|NFSPROC3
operator|)
name|procedure
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|idempotent
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
literal|"Procedure "
operator|+
name|proc
operator|+
literal|" should be idempotent"
operator|)
argument_list|,
name|proc
operator|.
name|isIdempotent
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
operator|(
literal|"Procedure "
operator|+
name|proc
operator|+
literal|" should be non-idempotent"
operator|)
argument_list|,
name|proc
operator|.
name|isIdempotent
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testDeprecatedKeys ()
specifier|public
name|void
name|testDeprecatedKeys
parameter_list|()
block|{
name|NfsConfiguration
name|conf
init|=
operator|new
name|NfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"nfs3.server.port"
argument_list|,
literal|998
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|NfsConfigKeys
operator|.
name|DFS_NFS_SERVER_PORT_KEY
argument_list|,
literal|0
argument_list|)
operator|==
literal|998
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"nfs3.mountd.port"
argument_list|,
literal|999
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|NfsConfigKeys
operator|.
name|DFS_NFS_MOUNTD_PORT_KEY
argument_list|,
literal|0
argument_list|)
operator|==
literal|999
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"dfs.nfs.exports.allowed.hosts"
argument_list|,
literal|"host1"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|CommonConfigurationKeys
operator|.
name|NFS_EXPORTS_ALLOWED_HOSTS_KEY
argument_list|)
operator|.
name|equals
argument_list|(
literal|"host1"
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"dfs.nfs.exports.cache.expirytime.millis"
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|Nfs3Constant
operator|.
name|NFS_EXPORTS_CACHE_EXPIRYTIME_MILLIS_KEY
argument_list|,
literal|0
argument_list|)
operator|==
literal|1000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"hadoop.nfs.userupdate.milly"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|Nfs3Constant
operator|.
name|NFS_USERGROUP_UPDATE_MILLIS_KEY
argument_list|,
literal|0
argument_list|)
operator|==
literal|10
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"dfs.nfs3.dump.dir"
argument_list|,
literal|"/nfs/tmp"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|NfsConfigKeys
operator|.
name|DFS_NFS_FILE_DUMP_DIR_KEY
argument_list|)
operator|.
name|equals
argument_list|(
literal|"/nfs/tmp"
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"dfs.nfs3.enableDump"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|NfsConfigKeys
operator|.
name|DFS_NFS_FILE_DUMP_KEY
argument_list|,
literal|true
argument_list|)
operator|==
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"dfs.nfs3.max.open.files"
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|NfsConfigKeys
operator|.
name|DFS_NFS_MAX_OPEN_FILES_KEY
argument_list|,
literal|0
argument_list|)
operator|==
literal|500
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"dfs.nfs3.stream.timeout"
argument_list|,
literal|6000
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|NfsConfigKeys
operator|.
name|DFS_NFS_STREAM_TIMEOUT_KEY
argument_list|,
literal|0
argument_list|)
operator|==
literal|6000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"dfs.nfs3.export.point"
argument_list|,
literal|"/dir1"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|NfsConfigKeys
operator|.
name|DFS_NFS_EXPORT_POINT_KEY
argument_list|)
operator|.
name|equals
argument_list|(
literal|"/dir1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

