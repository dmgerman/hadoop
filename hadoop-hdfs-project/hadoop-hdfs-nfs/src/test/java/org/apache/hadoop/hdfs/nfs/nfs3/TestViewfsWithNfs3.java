begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.nfs.nfs3
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|nfs
operator|.
name|nfs3
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|JavaKeyStoreProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystemTestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|viewfs
operator|.
name|ConfigUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSNNTopology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|nfs
operator|.
name|conf
operator|.
name|NfsConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|nfs
operator|.
name|conf
operator|.
name|NfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|nfs
operator|.
name|mount
operator|.
name|RpcProgramMountd
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|FileHandle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|Nfs3Constant
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|Nfs3Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|request
operator|.
name|GETATTR3Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|request
operator|.
name|RENAME3Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|response
operator|.
name|GETATTR3Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|request
operator|.
name|WRITE3Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|response
operator|.
name|RENAME3Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|response
operator|.
name|WRITE3Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
operator|.
name|XDR
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
operator|.
name|security
operator|.
name|SecurityHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|DefaultImpersonationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|ProxyUsers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  * Tests for {@link RpcProgramNfs3} with  * {@link org.apache.hadoop.fs.viewfs.ViewFileSystem}.  */
end_comment

begin_class
DECL|class|TestViewfsWithNfs3
specifier|public
class|class
name|TestViewfsWithNfs3
block|{
DECL|field|hdfs1
specifier|private
specifier|static
name|DistributedFileSystem
name|hdfs1
decl_stmt|;
DECL|field|hdfs2
specifier|private
specifier|static
name|DistributedFileSystem
name|hdfs2
decl_stmt|;
DECL|field|cluster
specifier|private
specifier|static
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
DECL|field|config
specifier|private
specifier|static
name|NfsConfiguration
name|config
init|=
operator|new
name|NfsConfiguration
argument_list|()
decl_stmt|;
DECL|field|dfsAdmin1
specifier|private
specifier|static
name|HdfsAdmin
name|dfsAdmin1
decl_stmt|;
DECL|field|dfsAdmin2
specifier|private
specifier|static
name|HdfsAdmin
name|dfsAdmin2
decl_stmt|;
DECL|field|viewFs
specifier|private
specifier|static
name|FileSystem
name|viewFs
decl_stmt|;
DECL|field|nn1
specifier|private
specifier|static
name|NameNode
name|nn1
decl_stmt|;
DECL|field|nn2
specifier|private
specifier|static
name|NameNode
name|nn2
decl_stmt|;
DECL|field|nfs
specifier|private
specifier|static
name|Nfs3
name|nfs
decl_stmt|;
DECL|field|nfsd
specifier|private
specifier|static
name|RpcProgramNfs3
name|nfsd
decl_stmt|;
DECL|field|mountd
specifier|private
specifier|static
name|RpcProgramMountd
name|mountd
decl_stmt|;
DECL|field|securityHandler
specifier|private
specifier|static
name|SecurityHandler
name|securityHandler
decl_stmt|;
DECL|field|fsHelper
specifier|private
specifier|static
name|FileSystemTestHelper
name|fsHelper
decl_stmt|;
DECL|field|testRootDir
specifier|private
specifier|static
name|File
name|testRootDir
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setup ()
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|currentUser
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
decl_stmt|;
name|config
operator|.
name|set
argument_list|(
literal|"fs.permissions.umask-mode"
argument_list|,
literal|"u=rwx,g=,o="
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|DefaultImpersonationProvider
operator|.
name|getTestProvider
argument_list|()
operator|.
name|getProxySuperuserGroupConfKey
argument_list|(
name|currentUser
argument_list|)
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|DefaultImpersonationProvider
operator|.
name|getTestProvider
argument_list|()
operator|.
name|getProxySuperuserIpConfKey
argument_list|(
name|currentUser
argument_list|)
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|fsHelper
operator|=
operator|new
name|FileSystemTestHelper
argument_list|()
expr_stmt|;
comment|// Set up java key store
name|String
name|testRoot
init|=
name|fsHelper
operator|.
name|getTestRootDir
argument_list|()
decl_stmt|;
name|testRootDir
operator|=
operator|new
name|File
argument_list|(
name|testRoot
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
expr_stmt|;
specifier|final
name|Path
name|jksPath
init|=
operator|new
name|Path
argument_list|(
name|testRootDir
operator|.
name|toString
argument_list|()
argument_list|,
literal|"test.jks"
argument_list|)
decl_stmt|;
name|config
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_KEY_PROVIDER_PATH
argument_list|,
name|JavaKeyStoreProvider
operator|.
name|SCHEME_NAME
operator|+
literal|"://file"
operator|+
name|jksPath
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
name|ProxyUsers
operator|.
name|refreshSuperUserGroupsConfiguration
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|config
argument_list|)
operator|.
name|nnTopology
argument_list|(
name|MiniDFSNNTopology
operator|.
name|simpleFederatedTopology
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|2
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|hdfs1
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|hdfs2
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|nn1
operator|=
name|cluster
operator|.
name|getNameNode
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|nn2
operator|=
name|cluster
operator|.
name|getNameNode
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|nn2
operator|.
name|getServiceRpcAddress
argument_list|()
expr_stmt|;
name|dfsAdmin1
operator|=
operator|new
name|HdfsAdmin
argument_list|(
name|cluster
operator|.
name|getURI
argument_list|(
literal|0
argument_list|)
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|dfsAdmin2
operator|=
operator|new
name|HdfsAdmin
argument_list|(
name|cluster
operator|.
name|getURI
argument_list|(
literal|1
argument_list|)
argument_list|,
name|config
argument_list|)
expr_stmt|;
comment|// Use ephemeral ports in case tests are running in parallel
name|config
operator|.
name|setInt
argument_list|(
literal|"nfs3.mountd.port"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|config
operator|.
name|setInt
argument_list|(
literal|"nfs3.server.port"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|FS_DEFAULT_NAME_KEY
argument_list|,
name|FsConstants
operator|.
name|VIEWFS_URI
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Start NFS with allowed.hosts set to "* rw"
name|config
operator|.
name|set
argument_list|(
literal|"dfs.nfs.exports.allowed.hosts"
argument_list|,
literal|"* rw"
argument_list|)
expr_stmt|;
name|Path
name|base1
init|=
operator|new
name|Path
argument_list|(
literal|"/user1"
argument_list|)
decl_stmt|;
name|Path
name|base2
init|=
operator|new
name|Path
argument_list|(
literal|"/user2"
argument_list|)
decl_stmt|;
name|hdfs1
operator|.
name|delete
argument_list|(
name|base1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|hdfs2
operator|.
name|delete
argument_list|(
name|base2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|hdfs1
operator|.
name|mkdirs
argument_list|(
name|base1
argument_list|)
expr_stmt|;
name|hdfs2
operator|.
name|mkdirs
argument_list|(
name|base2
argument_list|)
expr_stmt|;
name|ConfigUtil
operator|.
name|addLink
argument_list|(
name|config
argument_list|,
literal|"/hdfs1"
argument_list|,
name|hdfs1
operator|.
name|makeQualified
argument_list|(
name|base1
argument_list|)
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
name|ConfigUtil
operator|.
name|addLink
argument_list|(
name|config
argument_list|,
literal|"/hdfs2"
argument_list|,
name|hdfs2
operator|.
name|makeQualified
argument_list|(
name|base2
argument_list|)
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
name|viewFs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|config
operator|.
name|setStrings
argument_list|(
name|NfsConfigKeys
operator|.
name|DFS_NFS_EXPORT_POINT_KEY
argument_list|,
literal|"/hdfs1"
argument_list|,
literal|"/hdfs2"
argument_list|)
expr_stmt|;
name|nfs
operator|=
operator|new
name|Nfs3
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|nfs
operator|.
name|startServiceInternal
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|nfsd
operator|=
operator|(
name|RpcProgramNfs3
operator|)
name|nfs
operator|.
name|getRpcProgram
argument_list|()
expr_stmt|;
name|mountd
operator|=
operator|(
name|RpcProgramMountd
operator|)
name|nfs
operator|.
name|getMountd
argument_list|()
operator|.
name|getRpcProgram
argument_list|()
expr_stmt|;
comment|// Mock SecurityHandler which returns system user.name
name|securityHandler
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|SecurityHandler
operator|.
name|class
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|securityHandler
operator|.
name|getUser
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|currentUser
argument_list|)
expr_stmt|;
name|viewFs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/hdfs2/dir2"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|viewFs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/hdfs2/dir2"
argument_list|)
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|viewFs
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/hdfs1/file1"
argument_list|)
argument_list|,
literal|0
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|viewFs
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/hdfs1/file2"
argument_list|)
argument_list|,
literal|0
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|viewFs
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/hdfs1/write1"
argument_list|)
argument_list|,
literal|0
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|viewFs
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/hdfs2/write2"
argument_list|)
argument_list|,
literal|0
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|viewFs
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/hdfs1/renameMultiNN"
argument_list|)
argument_list|,
literal|0
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|viewFs
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/hdfs1/renameSingleNN"
argument_list|)
argument_list|,
literal|0
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|shutdown ()
specifier|public
specifier|static
name|void
name|shutdown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testNumExports ()
specifier|public
name|void
name|testNumExports
parameter_list|()
throws|throws
name|Exception
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|mountd
operator|.
name|getExports
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|viewFs
operator|.
name|getChildFileSystems
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPaths ()
specifier|public
name|void
name|testPaths
parameter_list|()
throws|throws
name|Exception
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|hdfs1
operator|.
name|resolvePath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/user1/file1"
argument_list|)
argument_list|)
argument_list|,
name|viewFs
operator|.
name|resolvePath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/hdfs1/file1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|hdfs1
operator|.
name|resolvePath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/user1/file2"
argument_list|)
argument_list|)
argument_list|,
name|viewFs
operator|.
name|resolvePath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/hdfs1/file2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|hdfs2
operator|.
name|resolvePath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/user2/dir2"
argument_list|)
argument_list|)
argument_list|,
name|viewFs
operator|.
name|resolvePath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/hdfs2/dir2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFileStatus ()
specifier|public
name|void
name|testFileStatus
parameter_list|()
throws|throws
name|Exception
block|{
name|HdfsFileStatus
name|status
init|=
name|nn1
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getFileInfo
argument_list|(
literal|"/user1/file1"
argument_list|)
decl_stmt|;
name|FileStatus
name|st
init|=
name|viewFs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/hdfs1/file1"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|st
operator|.
name|isDirectory
argument_list|()
argument_list|,
name|status
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|HdfsFileStatus
name|status2
init|=
name|nn2
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getFileInfo
argument_list|(
literal|"/user2/dir2"
argument_list|)
decl_stmt|;
name|FileStatus
name|st2
init|=
name|viewFs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/hdfs2/dir2"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|st2
operator|.
name|isDirectory
argument_list|()
argument_list|,
name|status2
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Test for getattr
DECL|method|testNfsGetAttrResponse (long fileId, int namenodeId, int expectedStatus)
specifier|private
name|void
name|testNfsGetAttrResponse
parameter_list|(
name|long
name|fileId
parameter_list|,
name|int
name|namenodeId
parameter_list|,
name|int
name|expectedStatus
parameter_list|)
block|{
name|FileHandle
name|handle
init|=
operator|new
name|FileHandle
argument_list|(
name|fileId
argument_list|,
name|namenodeId
argument_list|)
decl_stmt|;
name|XDR
name|xdrReq
init|=
operator|new
name|XDR
argument_list|()
decl_stmt|;
name|GETATTR3Request
name|req
init|=
operator|new
name|GETATTR3Request
argument_list|(
name|handle
argument_list|)
decl_stmt|;
name|req
operator|.
name|serialize
argument_list|(
name|xdrReq
argument_list|)
expr_stmt|;
name|GETATTR3Response
name|response
init|=
name|nfsd
operator|.
name|getattr
argument_list|(
name|xdrReq
operator|.
name|asReadOnlyWrap
argument_list|()
argument_list|,
name|securityHandler
argument_list|,
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
literal|1234
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Incorrect return code"
argument_list|,
name|expectedStatus
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testNfsAccessNN1 ()
specifier|public
name|void
name|testNfsAccessNN1
parameter_list|()
throws|throws
name|Exception
block|{
name|HdfsFileStatus
name|status
init|=
name|nn1
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getFileInfo
argument_list|(
literal|"/user1/file1"
argument_list|)
decl_stmt|;
name|int
name|namenodeId
init|=
name|Nfs3Utils
operator|.
name|getNamenodeId
argument_list|(
name|config
argument_list|,
name|hdfs1
operator|.
name|getUri
argument_list|()
argument_list|)
decl_stmt|;
name|testNfsGetAttrResponse
argument_list|(
name|status
operator|.
name|getFileId
argument_list|()
argument_list|,
name|namenodeId
argument_list|,
name|Nfs3Status
operator|.
name|NFS3_OK
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testNfsAccessNN2 ()
specifier|public
name|void
name|testNfsAccessNN2
parameter_list|()
throws|throws
name|Exception
block|{
name|HdfsFileStatus
name|status
init|=
name|nn2
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getFileInfo
argument_list|(
literal|"/user2/dir2"
argument_list|)
decl_stmt|;
name|int
name|namenodeId
init|=
name|Nfs3Utils
operator|.
name|getNamenodeId
argument_list|(
name|config
argument_list|,
name|hdfs2
operator|.
name|getUri
argument_list|()
argument_list|)
decl_stmt|;
name|testNfsGetAttrResponse
argument_list|(
name|status
operator|.
name|getFileId
argument_list|()
argument_list|,
name|namenodeId
argument_list|,
name|Nfs3Status
operator|.
name|NFS3_OK
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testWrongNfsAccess ()
specifier|public
name|void
name|testWrongNfsAccess
parameter_list|()
throws|throws
name|Exception
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|viewFs
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/hdfs1/file3"
argument_list|)
argument_list|,
literal|0
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|HdfsFileStatus
name|status
init|=
name|nn1
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getFileInfo
argument_list|(
literal|"/user1/file3"
argument_list|)
decl_stmt|;
name|int
name|namenodeId
init|=
name|Nfs3Utils
operator|.
name|getNamenodeId
argument_list|(
name|config
argument_list|,
name|hdfs2
operator|.
name|getUri
argument_list|()
argument_list|)
decl_stmt|;
name|testNfsGetAttrResponse
argument_list|(
name|status
operator|.
name|getFileId
argument_list|()
argument_list|,
name|namenodeId
argument_list|,
name|Nfs3Status
operator|.
name|NFS3ERR_IO
argument_list|)
expr_stmt|;
block|}
comment|// Test for write
DECL|method|testNfsWriteResponse (long dirId, int namenodeId)
specifier|private
name|void
name|testNfsWriteResponse
parameter_list|(
name|long
name|dirId
parameter_list|,
name|int
name|namenodeId
parameter_list|)
throws|throws
name|Exception
block|{
name|FileHandle
name|handle
init|=
operator|new
name|FileHandle
argument_list|(
name|dirId
argument_list|,
name|namenodeId
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|10
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|buffer
index|[
name|i
index|]
operator|=
operator|(
name|byte
operator|)
name|i
expr_stmt|;
block|}
name|WRITE3Request
name|writeReq
init|=
operator|new
name|WRITE3Request
argument_list|(
name|handle
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|,
name|Nfs3Constant
operator|.
name|WriteStableHow
operator|.
name|DATA_SYNC
argument_list|,
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|buffer
argument_list|)
argument_list|)
decl_stmt|;
name|XDR
name|xdrReq
init|=
operator|new
name|XDR
argument_list|()
decl_stmt|;
name|writeReq
operator|.
name|serialize
argument_list|(
name|xdrReq
argument_list|)
expr_stmt|;
comment|// Attempt by a priviledged user should pass.
name|WRITE3Response
name|response
init|=
name|nfsd
operator|.
name|write
argument_list|(
name|xdrReq
operator|.
name|asReadOnlyWrap
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|,
name|securityHandler
argument_list|,
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
literal|1234
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Incorrect response:"
argument_list|,
literal|null
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testNfsWriteNN1 ()
specifier|public
name|void
name|testNfsWriteNN1
parameter_list|()
throws|throws
name|Exception
block|{
name|HdfsFileStatus
name|status
init|=
name|nn1
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getFileInfo
argument_list|(
literal|"/user1/write1"
argument_list|)
decl_stmt|;
name|int
name|namenodeId
init|=
name|Nfs3Utils
operator|.
name|getNamenodeId
argument_list|(
name|config
argument_list|,
name|hdfs1
operator|.
name|getUri
argument_list|()
argument_list|)
decl_stmt|;
name|testNfsWriteResponse
argument_list|(
name|status
operator|.
name|getFileId
argument_list|()
argument_list|,
name|namenodeId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testNfsWriteNN2 ()
specifier|public
name|void
name|testNfsWriteNN2
parameter_list|()
throws|throws
name|Exception
block|{
name|HdfsFileStatus
name|status
init|=
name|nn2
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getFileInfo
argument_list|(
literal|"/user2/write2"
argument_list|)
decl_stmt|;
name|int
name|namenodeId
init|=
name|Nfs3Utils
operator|.
name|getNamenodeId
argument_list|(
name|config
argument_list|,
name|hdfs2
operator|.
name|getUri
argument_list|()
argument_list|)
decl_stmt|;
name|testNfsWriteResponse
argument_list|(
name|status
operator|.
name|getFileId
argument_list|()
argument_list|,
name|namenodeId
argument_list|)
expr_stmt|;
block|}
comment|// Test for rename
DECL|method|testNfsRename (FileHandle fromDirHandle, String fromFileName, FileHandle toDirHandle, String toFileName, int expectedStatus)
specifier|private
name|void
name|testNfsRename
parameter_list|(
name|FileHandle
name|fromDirHandle
parameter_list|,
name|String
name|fromFileName
parameter_list|,
name|FileHandle
name|toDirHandle
parameter_list|,
name|String
name|toFileName
parameter_list|,
name|int
name|expectedStatus
parameter_list|)
throws|throws
name|Exception
block|{
name|XDR
name|xdrReq
init|=
operator|new
name|XDR
argument_list|()
decl_stmt|;
name|RENAME3Request
name|req
init|=
operator|new
name|RENAME3Request
argument_list|(
name|fromDirHandle
argument_list|,
name|fromFileName
argument_list|,
name|toDirHandle
argument_list|,
name|toFileName
argument_list|)
decl_stmt|;
name|req
operator|.
name|serialize
argument_list|(
name|xdrReq
argument_list|)
expr_stmt|;
comment|// Attempt by a privileged user should pass.
name|RENAME3Response
name|response
init|=
name|nfsd
operator|.
name|rename
argument_list|(
name|xdrReq
operator|.
name|asReadOnlyWrap
argument_list|()
argument_list|,
name|securityHandler
argument_list|,
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
literal|1234
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedStatus
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testNfsRenameMultiNN ()
specifier|public
name|void
name|testNfsRenameMultiNN
parameter_list|()
throws|throws
name|Exception
block|{
name|HdfsFileStatus
name|fromFileStatus
init|=
name|nn1
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getFileInfo
argument_list|(
literal|"/user1"
argument_list|)
decl_stmt|;
name|int
name|fromNNId
init|=
name|Nfs3Utils
operator|.
name|getNamenodeId
argument_list|(
name|config
argument_list|,
name|hdfs1
operator|.
name|getUri
argument_list|()
argument_list|)
decl_stmt|;
name|FileHandle
name|fromHandle
init|=
operator|new
name|FileHandle
argument_list|(
name|fromFileStatus
operator|.
name|getFileId
argument_list|()
argument_list|,
name|fromNNId
argument_list|)
decl_stmt|;
name|HdfsFileStatus
name|toFileStatus
init|=
name|nn2
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getFileInfo
argument_list|(
literal|"/user2"
argument_list|)
decl_stmt|;
name|int
name|toNNId
init|=
name|Nfs3Utils
operator|.
name|getNamenodeId
argument_list|(
name|config
argument_list|,
name|hdfs2
operator|.
name|getUri
argument_list|()
argument_list|)
decl_stmt|;
name|FileHandle
name|toHandle
init|=
operator|new
name|FileHandle
argument_list|(
name|toFileStatus
operator|.
name|getFileId
argument_list|()
argument_list|,
name|toNNId
argument_list|)
decl_stmt|;
name|HdfsFileStatus
name|statusBeforeRename
init|=
name|nn1
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getFileInfo
argument_list|(
literal|"/user1/renameMultiNN"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|statusBeforeRename
operator|.
name|isDirectory
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testNfsRename
argument_list|(
name|fromHandle
argument_list|,
literal|"renameMultiNN"
argument_list|,
name|toHandle
argument_list|,
literal|"renameMultiNNFail"
argument_list|,
name|Nfs3Status
operator|.
name|NFS3ERR_INVAL
argument_list|)
expr_stmt|;
name|HdfsFileStatus
name|statusAfterRename
init|=
name|nn2
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getFileInfo
argument_list|(
literal|"/user2/renameMultiNNFail"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|statusAfterRename
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|statusAfterRename
operator|=
name|nn1
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getFileInfo
argument_list|(
literal|"/user1/renameMultiNN"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|statusAfterRename
operator|.
name|isDirectory
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testNfsRenameSingleNN ()
specifier|public
name|void
name|testNfsRenameSingleNN
parameter_list|()
throws|throws
name|Exception
block|{
name|HdfsFileStatus
name|fromFileStatus
init|=
name|nn1
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getFileInfo
argument_list|(
literal|"/user1"
argument_list|)
decl_stmt|;
name|int
name|fromNNId
init|=
name|Nfs3Utils
operator|.
name|getNamenodeId
argument_list|(
name|config
argument_list|,
name|hdfs1
operator|.
name|getUri
argument_list|()
argument_list|)
decl_stmt|;
name|FileHandle
name|fromHandle
init|=
operator|new
name|FileHandle
argument_list|(
name|fromFileStatus
operator|.
name|getFileId
argument_list|()
argument_list|,
name|fromNNId
argument_list|)
decl_stmt|;
name|HdfsFileStatus
name|statusBeforeRename
init|=
name|nn1
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getFileInfo
argument_list|(
literal|"/user1/renameSingleNN"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|statusBeforeRename
operator|.
name|isDirectory
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testNfsRename
argument_list|(
name|fromHandle
argument_list|,
literal|"renameSingleNN"
argument_list|,
name|fromHandle
argument_list|,
literal|"renameSingleNNSucess"
argument_list|,
name|Nfs3Status
operator|.
name|NFS3_OK
argument_list|)
expr_stmt|;
name|HdfsFileStatus
name|statusAfterRename
init|=
name|nn1
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getFileInfo
argument_list|(
literal|"/user1/renameSingleNNSucess"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|statusAfterRename
operator|.
name|isDirectory
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|statusAfterRename
operator|=
name|nn1
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getFileInfo
argument_list|(
literal|"/user1/renameSingleNN"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|statusAfterRename
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

