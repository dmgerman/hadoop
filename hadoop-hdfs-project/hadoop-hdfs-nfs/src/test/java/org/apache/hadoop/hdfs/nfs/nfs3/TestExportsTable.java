begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.nfs.nfs3
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|nfs
operator|.
name|nfs3
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileSystemException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|RandomStringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|viewfs
operator|.
name|ConfigUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSNNTopology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|nfs
operator|.
name|conf
operator|.
name|NfsConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|nfs
operator|.
name|conf
operator|.
name|NfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|nfs
operator|.
name|mount
operator|.
name|Mountd
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|nfs
operator|.
name|mount
operator|.
name|RpcProgramMountd
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_class
DECL|class|TestExportsTable
specifier|public
class|class
name|TestExportsTable
block|{
annotation|@
name|Rule
DECL|field|exception
specifier|public
name|ExpectedException
name|exception
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|testHdfsExportPoint ()
specifier|public
name|void
name|testHdfsExportPoint
parameter_list|()
throws|throws
name|IOException
block|{
name|NfsConfiguration
name|config
init|=
operator|new
name|NfsConfiguration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
comment|// Use emphral port in case tests are running in parallel
name|config
operator|.
name|setInt
argument_list|(
literal|"nfs3.mountd.port"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|config
operator|.
name|setInt
argument_list|(
literal|"nfs3.server.port"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
literal|"nfs.http.address"
argument_list|,
literal|"0.0.0.0:0"
argument_list|)
expr_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|config
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
comment|// Start nfs
specifier|final
name|Nfs3
name|nfsServer
init|=
operator|new
name|Nfs3
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|nfsServer
operator|.
name|startServiceInternal
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Mountd
name|mountd
init|=
name|nfsServer
operator|.
name|getMountd
argument_list|()
decl_stmt|;
name|RpcProgramMountd
name|rpcMount
init|=
operator|(
name|RpcProgramMountd
operator|)
name|mountd
operator|.
name|getRpcProgram
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|rpcMount
operator|.
name|getExports
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|String
name|exportInMountd
init|=
name|rpcMount
operator|.
name|getExports
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|exportInMountd
operator|.
name|equals
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testViewFsMultipleExportPoint ()
specifier|public
name|void
name|testViewFsMultipleExportPoint
parameter_list|()
throws|throws
name|IOException
block|{
name|NfsConfiguration
name|config
init|=
operator|new
name|NfsConfiguration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
name|String
name|clusterName
init|=
name|RandomStringUtils
operator|.
name|randomAlphabetic
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|String
name|exportPoint
init|=
literal|"/hdfs1,/hdfs2"
decl_stmt|;
name|config
operator|.
name|setStrings
argument_list|(
name|NfsConfigKeys
operator|.
name|DFS_NFS_EXPORT_POINT_KEY
argument_list|,
name|exportPoint
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|FS_DEFAULT_NAME_KEY
argument_list|,
name|FsConstants
operator|.
name|VIEWFS_SCHEME
operator|+
literal|"://"
operator|+
name|clusterName
argument_list|)
expr_stmt|;
comment|// Use emphral port in case tests are running in parallel
name|config
operator|.
name|setInt
argument_list|(
literal|"nfs3.mountd.port"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|config
operator|.
name|setInt
argument_list|(
literal|"nfs3.server.port"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
literal|"nfs.http.address"
argument_list|,
literal|"0.0.0.0:0"
argument_list|)
expr_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|config
argument_list|)
operator|.
name|nnTopology
argument_list|(
name|MiniDFSNNTopology
operator|.
name|simpleFederatedTopology
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|2
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|DistributedFileSystem
name|hdfs1
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|DistributedFileSystem
name|hdfs2
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|Path
name|base1
init|=
operator|new
name|Path
argument_list|(
literal|"/user1"
argument_list|)
decl_stmt|;
name|Path
name|base2
init|=
operator|new
name|Path
argument_list|(
literal|"/user2"
argument_list|)
decl_stmt|;
name|hdfs1
operator|.
name|delete
argument_list|(
name|base1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|hdfs2
operator|.
name|delete
argument_list|(
name|base2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|hdfs1
operator|.
name|mkdirs
argument_list|(
name|base1
argument_list|)
expr_stmt|;
name|hdfs2
operator|.
name|mkdirs
argument_list|(
name|base2
argument_list|)
expr_stmt|;
name|ConfigUtil
operator|.
name|addLink
argument_list|(
name|config
argument_list|,
name|clusterName
argument_list|,
literal|"/hdfs1"
argument_list|,
name|hdfs1
operator|.
name|makeQualified
argument_list|(
name|base1
argument_list|)
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
name|ConfigUtil
operator|.
name|addLink
argument_list|(
name|config
argument_list|,
name|clusterName
argument_list|,
literal|"/hdfs2"
argument_list|,
name|hdfs2
operator|.
name|makeQualified
argument_list|(
name|base2
argument_list|)
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
comment|// Start nfs
specifier|final
name|Nfs3
name|nfsServer
init|=
operator|new
name|Nfs3
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|nfsServer
operator|.
name|startServiceInternal
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Mountd
name|mountd
init|=
name|nfsServer
operator|.
name|getMountd
argument_list|()
decl_stmt|;
name|RpcProgramMountd
name|rpcMount
init|=
operator|(
name|RpcProgramMountd
operator|)
name|mountd
operator|.
name|getRpcProgram
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|rpcMount
operator|.
name|getExports
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|String
name|exportInMountd1
init|=
name|rpcMount
operator|.
name|getExports
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|exportInMountd1
operator|.
name|equals
argument_list|(
literal|"/hdfs1"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|exportInMountd2
init|=
name|rpcMount
operator|.
name|getExports
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|exportInMountd2
operator|.
name|equals
argument_list|(
literal|"/hdfs2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testViewFsInternalExportPoint ()
specifier|public
name|void
name|testViewFsInternalExportPoint
parameter_list|()
throws|throws
name|IOException
block|{
name|NfsConfiguration
name|config
init|=
operator|new
name|NfsConfiguration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
name|String
name|clusterName
init|=
name|RandomStringUtils
operator|.
name|randomAlphabetic
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|String
name|exportPoint
init|=
literal|"/hdfs1/subpath"
decl_stmt|;
name|config
operator|.
name|setStrings
argument_list|(
name|NfsConfigKeys
operator|.
name|DFS_NFS_EXPORT_POINT_KEY
argument_list|,
name|exportPoint
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|FS_DEFAULT_NAME_KEY
argument_list|,
name|FsConstants
operator|.
name|VIEWFS_SCHEME
operator|+
literal|"://"
operator|+
name|clusterName
argument_list|)
expr_stmt|;
comment|// Use emphral port in case tests are running in parallel
name|config
operator|.
name|setInt
argument_list|(
literal|"nfs3.mountd.port"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|config
operator|.
name|setInt
argument_list|(
literal|"nfs3.server.port"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
literal|"nfs.http.address"
argument_list|,
literal|"0.0.0.0:0"
argument_list|)
expr_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|config
argument_list|)
operator|.
name|nnTopology
argument_list|(
name|MiniDFSNNTopology
operator|.
name|simpleFederatedTopology
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|2
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|DistributedFileSystem
name|hdfs1
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|DistributedFileSystem
name|hdfs2
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|Path
name|base1
init|=
operator|new
name|Path
argument_list|(
literal|"/user1"
argument_list|)
decl_stmt|;
name|Path
name|base2
init|=
operator|new
name|Path
argument_list|(
literal|"/user2"
argument_list|)
decl_stmt|;
name|hdfs1
operator|.
name|delete
argument_list|(
name|base1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|hdfs2
operator|.
name|delete
argument_list|(
name|base2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|hdfs1
operator|.
name|mkdirs
argument_list|(
name|base1
argument_list|)
expr_stmt|;
name|hdfs2
operator|.
name|mkdirs
argument_list|(
name|base2
argument_list|)
expr_stmt|;
name|ConfigUtil
operator|.
name|addLink
argument_list|(
name|config
argument_list|,
name|clusterName
argument_list|,
literal|"/hdfs1"
argument_list|,
name|hdfs1
operator|.
name|makeQualified
argument_list|(
name|base1
argument_list|)
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
name|ConfigUtil
operator|.
name|addLink
argument_list|(
name|config
argument_list|,
name|clusterName
argument_list|,
literal|"/hdfs2"
argument_list|,
name|hdfs2
operator|.
name|makeQualified
argument_list|(
name|base2
argument_list|)
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|subPath
init|=
operator|new
name|Path
argument_list|(
name|base1
argument_list|,
literal|"subpath"
argument_list|)
decl_stmt|;
name|hdfs1
operator|.
name|delete
argument_list|(
name|subPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|hdfs1
operator|.
name|mkdirs
argument_list|(
name|subPath
argument_list|)
expr_stmt|;
comment|// Start nfs
specifier|final
name|Nfs3
name|nfsServer
init|=
operator|new
name|Nfs3
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|nfsServer
operator|.
name|startServiceInternal
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Mountd
name|mountd
init|=
name|nfsServer
operator|.
name|getMountd
argument_list|()
decl_stmt|;
name|RpcProgramMountd
name|rpcMount
init|=
operator|(
name|RpcProgramMountd
operator|)
name|mountd
operator|.
name|getRpcProgram
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|rpcMount
operator|.
name|getExports
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|String
name|exportInMountd
init|=
name|rpcMount
operator|.
name|getExports
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|exportInMountd
operator|.
name|equals
argument_list|(
name|exportPoint
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testViewFsRootExportPoint ()
specifier|public
name|void
name|testViewFsRootExportPoint
parameter_list|()
throws|throws
name|IOException
block|{
name|NfsConfiguration
name|config
init|=
operator|new
name|NfsConfiguration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
name|String
name|clusterName
init|=
name|RandomStringUtils
operator|.
name|randomAlphabetic
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|String
name|exportPoint
init|=
literal|"/"
decl_stmt|;
name|config
operator|.
name|setStrings
argument_list|(
name|NfsConfigKeys
operator|.
name|DFS_NFS_EXPORT_POINT_KEY
argument_list|,
name|exportPoint
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|FS_DEFAULT_NAME_KEY
argument_list|,
name|FsConstants
operator|.
name|VIEWFS_SCHEME
operator|+
literal|"://"
operator|+
name|clusterName
argument_list|)
expr_stmt|;
comment|// Use emphral port in case tests are running in parallel
name|config
operator|.
name|setInt
argument_list|(
literal|"nfs3.mountd.port"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|config
operator|.
name|setInt
argument_list|(
literal|"nfs3.server.port"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
literal|"nfs.http.address"
argument_list|,
literal|"0.0.0.0:0"
argument_list|)
expr_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|config
argument_list|)
operator|.
name|nnTopology
argument_list|(
name|MiniDFSNNTopology
operator|.
name|simpleFederatedTopology
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|2
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|DistributedFileSystem
name|hdfs1
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|DistributedFileSystem
name|hdfs2
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|Path
name|base1
init|=
operator|new
name|Path
argument_list|(
literal|"/user1"
argument_list|)
decl_stmt|;
name|Path
name|base2
init|=
operator|new
name|Path
argument_list|(
literal|"/user2"
argument_list|)
decl_stmt|;
name|hdfs1
operator|.
name|delete
argument_list|(
name|base1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|hdfs2
operator|.
name|delete
argument_list|(
name|base2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|hdfs1
operator|.
name|mkdirs
argument_list|(
name|base1
argument_list|)
expr_stmt|;
name|hdfs2
operator|.
name|mkdirs
argument_list|(
name|base2
argument_list|)
expr_stmt|;
name|ConfigUtil
operator|.
name|addLink
argument_list|(
name|config
argument_list|,
name|clusterName
argument_list|,
literal|"/hdfs1"
argument_list|,
name|hdfs1
operator|.
name|makeQualified
argument_list|(
name|base1
argument_list|)
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
name|ConfigUtil
operator|.
name|addLink
argument_list|(
name|config
argument_list|,
name|clusterName
argument_list|,
literal|"/hdfs2"
argument_list|,
name|hdfs2
operator|.
name|makeQualified
argument_list|(
name|base2
argument_list|)
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|FileSystemException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"Only HDFS is supported as underlyingFileSystem, "
operator|+
literal|"fs scheme:viewfs"
argument_list|)
expr_stmt|;
comment|// Start nfs
specifier|final
name|Nfs3
name|nfsServer
init|=
operator|new
name|Nfs3
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|nfsServer
operator|.
name|startServiceInternal
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testHdfsInternalExportPoint ()
specifier|public
name|void
name|testHdfsInternalExportPoint
parameter_list|()
throws|throws
name|IOException
block|{
name|NfsConfiguration
name|config
init|=
operator|new
name|NfsConfiguration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
name|String
name|exportPoint
init|=
literal|"/myexport1"
decl_stmt|;
name|config
operator|.
name|setStrings
argument_list|(
name|NfsConfigKeys
operator|.
name|DFS_NFS_EXPORT_POINT_KEY
argument_list|,
name|exportPoint
argument_list|)
expr_stmt|;
comment|// Use emphral port in case tests are running in parallel
name|config
operator|.
name|setInt
argument_list|(
literal|"nfs3.mountd.port"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|config
operator|.
name|setInt
argument_list|(
literal|"nfs3.server.port"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
literal|"nfs.http.address"
argument_list|,
literal|"0.0.0.0:0"
argument_list|)
expr_stmt|;
name|Path
name|base
init|=
operator|new
name|Path
argument_list|(
name|exportPoint
argument_list|)
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|config
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|DistributedFileSystem
name|hdfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|delete
argument_list|(
name|base
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|base
argument_list|)
expr_stmt|;
comment|// Start nfs
specifier|final
name|Nfs3
name|nfsServer
init|=
operator|new
name|Nfs3
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|nfsServer
operator|.
name|startServiceInternal
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Mountd
name|mountd
init|=
name|nfsServer
operator|.
name|getMountd
argument_list|()
decl_stmt|;
name|RpcProgramMountd
name|rpcMount
init|=
operator|(
name|RpcProgramMountd
operator|)
name|mountd
operator|.
name|getRpcProgram
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|rpcMount
operator|.
name|getExports
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|String
name|exportInMountd
init|=
name|rpcMount
operator|.
name|getExports
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|exportInMountd
operator|.
name|equals
argument_list|(
name|exportPoint
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testInvalidFsExport ()
specifier|public
name|void
name|testInvalidFsExport
parameter_list|()
throws|throws
name|IOException
block|{
name|NfsConfiguration
name|config
init|=
operator|new
name|NfsConfiguration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
comment|// Use emphral port in case tests are running in parallel
name|config
operator|.
name|setInt
argument_list|(
literal|"nfs3.mountd.port"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|config
operator|.
name|setInt
argument_list|(
literal|"nfs3.server.port"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
literal|"nfs.http.address"
argument_list|,
literal|"0.0.0.0:0"
argument_list|)
expr_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|config
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|FS_DEFAULT_NAME_KEY
argument_list|,
name|FsConstants
operator|.
name|LOCAL_FS_URI
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|FileSystemException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"Only HDFS is supported as underlyingFileSystem, "
operator|+
literal|"fs scheme:file"
argument_list|)
expr_stmt|;
comment|// Start nfs
specifier|final
name|Nfs3
name|nfsServer
init|=
operator|new
name|Nfs3
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|nfsServer
operator|.
name|startServiceInternal
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

