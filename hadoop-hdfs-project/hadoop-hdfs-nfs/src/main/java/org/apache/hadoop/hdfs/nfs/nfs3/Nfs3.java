begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.nfs.nfs3
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|nfs
operator|.
name|nfs3
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|DatagramSocket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|nfs
operator|.
name|conf
operator|.
name|NfsConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|nfs
operator|.
name|conf
operator|.
name|NfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|nfs
operator|.
name|mount
operator|.
name|Mountd
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|Nfs3Base
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * Nfs server. Supports NFS v3 using {@link RpcProgramNfs3}.  * Currently Mountd program is also started inside this class.  * Only TCP server is supported and UDP is not supported.  */
end_comment

begin_class
DECL|class|Nfs3
specifier|public
class|class
name|Nfs3
extends|extends
name|Nfs3Base
block|{
DECL|field|mountd
specifier|private
name|Mountd
name|mountd
decl_stmt|;
DECL|method|Nfs3 (NfsConfiguration conf)
specifier|public
name|Nfs3
parameter_list|(
name|NfsConfiguration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|Nfs3 (NfsConfiguration conf, DatagramSocket registrationSocket, boolean allowInsecurePorts)
specifier|public
name|Nfs3
parameter_list|(
name|NfsConfiguration
name|conf
parameter_list|,
name|DatagramSocket
name|registrationSocket
parameter_list|,
name|boolean
name|allowInsecurePorts
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|RpcProgramNfs3
operator|.
name|createRpcProgramNfs3
argument_list|(
name|conf
argument_list|,
name|registrationSocket
argument_list|,
name|allowInsecurePorts
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|mountd
operator|=
operator|new
name|Mountd
argument_list|(
name|conf
argument_list|,
name|registrationSocket
argument_list|,
name|allowInsecurePorts
argument_list|)
expr_stmt|;
block|}
DECL|method|getMountd ()
specifier|public
name|Mountd
name|getMountd
parameter_list|()
block|{
return|return
name|mountd
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|startServiceInternal (boolean register)
specifier|public
name|void
name|startServiceInternal
parameter_list|(
name|boolean
name|register
parameter_list|)
throws|throws
name|IOException
block|{
name|mountd
operator|.
name|start
argument_list|(
name|register
argument_list|)
expr_stmt|;
comment|// Start mountd
name|start
argument_list|(
name|register
argument_list|)
expr_stmt|;
block|}
DECL|method|startService (String[] args, DatagramSocket registrationSocket)
specifier|static
name|void
name|startService
parameter_list|(
name|String
index|[]
name|args
parameter_list|,
name|DatagramSocket
name|registrationSocket
parameter_list|)
throws|throws
name|IOException
block|{
name|StringUtils
operator|.
name|startupShutdownMessage
argument_list|(
name|Nfs3
operator|.
name|class
argument_list|,
name|args
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
name|NfsConfiguration
name|conf
init|=
operator|new
name|NfsConfiguration
argument_list|()
decl_stmt|;
name|boolean
name|allowInsecurePorts
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|NfsConfigKeys
operator|.
name|DFS_NFS_PORT_MONITORING_DISABLED_KEY
argument_list|,
name|NfsConfigKeys
operator|.
name|DFS_NFS_PORT_MONITORING_DISABLED_DEFAULT
argument_list|)
decl_stmt|;
specifier|final
name|Nfs3
name|nfsServer
init|=
operator|new
name|Nfs3
argument_list|(
name|conf
argument_list|,
name|registrationSocket
argument_list|,
name|allowInsecurePorts
argument_list|)
decl_stmt|;
name|nfsServer
operator|.
name|startServiceInternal
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|startService
argument_list|(
name|args
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

