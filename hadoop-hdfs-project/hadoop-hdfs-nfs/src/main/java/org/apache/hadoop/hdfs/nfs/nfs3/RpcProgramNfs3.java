begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.nfs.nfs3
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|nfs
operator|.
name|nfs3
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|DatagramSocket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|DirectoryListingStartAfterNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FsStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|nfs
operator|.
name|conf
operator|.
name|NfsConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|nfs
operator|.
name|conf
operator|.
name|NfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DirectoryListing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|DNS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|AccessPrivilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|NfsExports
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|NfsFileType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|NfsTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|FileHandle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|Nfs3Constant
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|Nfs3Constant
operator|.
name|NFSPROC3
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|Nfs3Constant
operator|.
name|WriteStableHow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|Nfs3FileAttributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|Nfs3Interface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|Nfs3Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|request
operator|.
name|ACCESS3Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|request
operator|.
name|COMMIT3Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|request
operator|.
name|CREATE3Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|request
operator|.
name|FSINFO3Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|request
operator|.
name|FSSTAT3Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|request
operator|.
name|GETATTR3Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|request
operator|.
name|LOOKUP3Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|request
operator|.
name|MKDIR3Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|request
operator|.
name|PATHCONF3Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|request
operator|.
name|READ3Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|request
operator|.
name|READDIR3Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|request
operator|.
name|READDIRPLUS3Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|request
operator|.
name|READLINK3Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|request
operator|.
name|REMOVE3Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|request
operator|.
name|RENAME3Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|request
operator|.
name|RMDIR3Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|request
operator|.
name|SETATTR3Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|request
operator|.
name|SYMLINK3Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|request
operator|.
name|SetAttr3
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|request
operator|.
name|SetAttr3
operator|.
name|SetAttrField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|request
operator|.
name|WRITE3Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|response
operator|.
name|ACCESS3Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|response
operator|.
name|COMMIT3Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|response
operator|.
name|CREATE3Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|response
operator|.
name|FSINFO3Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|response
operator|.
name|FSSTAT3Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|response
operator|.
name|GETATTR3Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|response
operator|.
name|LOOKUP3Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|response
operator|.
name|MKDIR3Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|response
operator|.
name|NFS3Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|response
operator|.
name|PATHCONF3Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|response
operator|.
name|READ3Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|response
operator|.
name|READDIR3Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|response
operator|.
name|READDIR3Response
operator|.
name|DirList3
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|response
operator|.
name|READDIR3Response
operator|.
name|Entry3
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|response
operator|.
name|READDIRPLUS3Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|response
operator|.
name|READDIRPLUS3Response
operator|.
name|DirListPlus3
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|response
operator|.
name|READLINK3Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|response
operator|.
name|REMOVE3Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|response
operator|.
name|RENAME3Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|response
operator|.
name|RMDIR3Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|response
operator|.
name|SETATTR3Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|response
operator|.
name|SYMLINK3Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|response
operator|.
name|WRITE3Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|response
operator|.
name|WccAttr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|response
operator|.
name|WccData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
operator|.
name|RpcAcceptedReply
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
operator|.
name|RpcCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
operator|.
name|RpcCallCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
operator|.
name|RpcDeniedReply
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
operator|.
name|RpcInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
operator|.
name|RpcProgram
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
operator|.
name|RpcReply
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
operator|.
name|RpcResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
operator|.
name|RpcUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
operator|.
name|XDR
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
operator|.
name|security
operator|.
name|CredentialsSys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
operator|.
name|security
operator|.
name|RpcAuthInfo
operator|.
name|AuthFlavor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
operator|.
name|security
operator|.
name|SecurityHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
operator|.
name|security
operator|.
name|SysSecurityHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
operator|.
name|security
operator|.
name|Verifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
operator|.
name|security
operator|.
name|VerifierNone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|IdMappingConstant
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|IdMappingServiceProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|ShellBasedIdMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AuthorizationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|JvmPauseMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ChannelBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ChannelBuffers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandlerContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * RPC program corresponding to nfs daemon. See {@link Nfs3}.  */
end_comment

begin_class
DECL|class|RpcProgramNfs3
specifier|public
class|class
name|RpcProgramNfs3
extends|extends
name|RpcProgram
implements|implements
name|Nfs3Interface
block|{
DECL|field|DEFAULT_UMASK
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_UMASK
init|=
literal|0022
decl_stmt|;
DECL|field|umask
specifier|public
specifier|static
specifier|final
name|FsPermission
name|umask
init|=
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
name|DEFAULT_UMASK
argument_list|)
decl_stmt|;
DECL|field|LOG
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RpcProgramNfs3
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|config
specifier|private
specifier|final
name|NfsConfiguration
name|config
decl_stmt|;
DECL|field|writeManager
specifier|private
specifier|final
name|WriteManager
name|writeManager
decl_stmt|;
DECL|field|iug
specifier|private
specifier|final
name|IdMappingServiceProvider
name|iug
decl_stmt|;
DECL|field|clientCache
specifier|private
specifier|final
name|DFSClientCache
name|clientCache
decl_stmt|;
DECL|field|exports
specifier|private
specifier|final
name|NfsExports
name|exports
decl_stmt|;
DECL|field|replication
specifier|private
specifier|final
name|short
name|replication
decl_stmt|;
DECL|field|blockSize
specifier|private
specifier|final
name|long
name|blockSize
decl_stmt|;
DECL|field|bufferSize
specifier|private
specifier|final
name|int
name|bufferSize
decl_stmt|;
DECL|field|aixCompatMode
specifier|private
specifier|final
name|boolean
name|aixCompatMode
decl_stmt|;
DECL|field|writeDumpDir
specifier|private
name|String
name|writeDumpDir
decl_stmt|;
comment|// The dir save dump files
DECL|field|rpcCallCache
specifier|private
specifier|final
name|RpcCallCache
name|rpcCallCache
decl_stmt|;
DECL|field|pauseMonitor
specifier|private
name|JvmPauseMonitor
name|pauseMonitor
decl_stmt|;
DECL|field|infoServer
specifier|private
name|Nfs3HttpServer
name|infoServer
init|=
literal|null
decl_stmt|;
DECL|field|metrics
specifier|static
name|Nfs3Metrics
name|metrics
decl_stmt|;
DECL|field|superuser
specifier|private
name|String
name|superuser
decl_stmt|;
DECL|method|RpcProgramNfs3 (NfsConfiguration config, DatagramSocket registrationSocket, boolean allowInsecurePorts)
specifier|public
name|RpcProgramNfs3
parameter_list|(
name|NfsConfiguration
name|config
parameter_list|,
name|DatagramSocket
name|registrationSocket
parameter_list|,
name|boolean
name|allowInsecurePorts
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
literal|"NFS3"
argument_list|,
literal|"localhost"
argument_list|,
name|config
operator|.
name|getInt
argument_list|(
name|NfsConfigKeys
operator|.
name|DFS_NFS_SERVER_PORT_KEY
argument_list|,
name|NfsConfigKeys
operator|.
name|DFS_NFS_SERVER_PORT_DEFAULT
argument_list|)
argument_list|,
name|Nfs3Constant
operator|.
name|PROGRAM
argument_list|,
name|Nfs3Constant
operator|.
name|VERSION
argument_list|,
name|Nfs3Constant
operator|.
name|VERSION
argument_list|,
name|registrationSocket
argument_list|,
name|allowInsecurePorts
argument_list|,
name|config
operator|.
name|getInt
argument_list|(
name|NfsConfigKeys
operator|.
name|NFS_UDP_CLIENT_PORTMAP_TIMEOUT_MILLIS_KEY
argument_list|,
name|NfsConfigKeys
operator|.
name|NFS_UDP_CLIENT_PORTMAP_TIMEOUT_MILLIS_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|FsPermission
operator|.
name|UMASK_LABEL
argument_list|,
literal|"000"
argument_list|)
expr_stmt|;
name|iug
operator|=
operator|new
name|ShellBasedIdMapping
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|aixCompatMode
operator|=
name|config
operator|.
name|getBoolean
argument_list|(
name|NfsConfigKeys
operator|.
name|AIX_COMPAT_MODE_KEY
argument_list|,
name|NfsConfigKeys
operator|.
name|AIX_COMPAT_MODE_DEFAULT
argument_list|)
expr_stmt|;
name|exports
operator|=
name|NfsExports
operator|.
name|getInstance
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|writeManager
operator|=
operator|new
name|WriteManager
argument_list|(
name|iug
argument_list|,
name|config
argument_list|,
name|aixCompatMode
argument_list|)
expr_stmt|;
name|clientCache
operator|=
operator|new
name|DFSClientCache
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|replication
operator|=
operator|(
name|short
operator|)
name|config
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_REPLICATION_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_REPLICATION_DEFAULT
argument_list|)
expr_stmt|;
name|blockSize
operator|=
name|config
operator|.
name|getLongBytes
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_DEFAULT
argument_list|)
expr_stmt|;
name|bufferSize
operator|=
name|config
operator|.
name|getInt
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|IO_FILE_BUFFER_SIZE_KEY
argument_list|,
name|CommonConfigurationKeysPublic
operator|.
name|IO_FILE_BUFFER_SIZE_DEFAULT
argument_list|)
expr_stmt|;
name|writeDumpDir
operator|=
name|config
operator|.
name|get
argument_list|(
name|NfsConfigKeys
operator|.
name|DFS_NFS_FILE_DUMP_DIR_KEY
argument_list|,
name|NfsConfigKeys
operator|.
name|DFS_NFS_FILE_DUMP_DIR_DEFAULT
argument_list|)
expr_stmt|;
name|boolean
name|enableDump
init|=
name|config
operator|.
name|getBoolean
argument_list|(
name|NfsConfigKeys
operator|.
name|DFS_NFS_FILE_DUMP_KEY
argument_list|,
name|NfsConfigKeys
operator|.
name|DFS_NFS_FILE_DUMP_DEFAULT
argument_list|)
decl_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|SecurityUtil
operator|.
name|login
argument_list|(
name|config
argument_list|,
name|NfsConfigKeys
operator|.
name|DFS_NFS_KEYTAB_FILE_KEY
argument_list|,
name|NfsConfigKeys
operator|.
name|DFS_NFS_KERBEROS_PRINCIPAL_KEY
argument_list|)
expr_stmt|;
name|superuser
operator|=
name|config
operator|.
name|get
argument_list|(
name|NfsConfigKeys
operator|.
name|NFS_SUPERUSER_KEY
argument_list|,
name|NfsConfigKeys
operator|.
name|NFS_SUPERUSER_DEFAULT
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Configured HDFS superuser is {}"
argument_list|,
name|superuser
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|enableDump
condition|)
block|{
name|writeDumpDir
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|clearDirectory
argument_list|(
name|writeDumpDir
argument_list|)
expr_stmt|;
block|}
name|rpcCallCache
operator|=
operator|new
name|RpcCallCache
argument_list|(
literal|"NFS3"
argument_list|,
literal|256
argument_list|)
expr_stmt|;
name|infoServer
operator|=
operator|new
name|Nfs3HttpServer
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
DECL|method|createRpcProgramNfs3 (NfsConfiguration config, DatagramSocket registrationSocket, boolean allowInsecurePorts)
specifier|public
specifier|static
name|RpcProgramNfs3
name|createRpcProgramNfs3
parameter_list|(
name|NfsConfiguration
name|config
parameter_list|,
name|DatagramSocket
name|registrationSocket
parameter_list|,
name|boolean
name|allowInsecurePorts
parameter_list|)
throws|throws
name|IOException
block|{
name|DefaultMetricsSystem
operator|.
name|initialize
argument_list|(
literal|"Nfs3"
argument_list|)
expr_stmt|;
name|String
name|displayName
init|=
name|DNS
operator|.
name|getDefaultHost
argument_list|(
literal|"default"
argument_list|,
literal|"default"
argument_list|)
operator|+
name|config
operator|.
name|getInt
argument_list|(
name|NfsConfigKeys
operator|.
name|DFS_NFS_SERVER_PORT_KEY
argument_list|,
name|NfsConfigKeys
operator|.
name|DFS_NFS_SERVER_PORT_DEFAULT
argument_list|)
decl_stmt|;
name|metrics
operator|=
name|Nfs3Metrics
operator|.
name|create
argument_list|(
name|config
argument_list|,
name|displayName
argument_list|)
expr_stmt|;
return|return
operator|new
name|RpcProgramNfs3
argument_list|(
name|config
argument_list|,
name|registrationSocket
argument_list|,
name|allowInsecurePorts
argument_list|)
return|;
block|}
DECL|method|clearDirectory (String writeDumpDir)
specifier|private
name|void
name|clearDirectory
parameter_list|(
name|String
name|writeDumpDir
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|dumpDir
init|=
operator|new
name|File
argument_list|(
name|writeDumpDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|dumpDir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Delete current dump directory {}"
argument_list|,
name|writeDumpDir
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|dumpDir
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot remove current dump directory: "
operator|+
name|dumpDir
argument_list|)
throw|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Create new dump directory {}"
argument_list|,
name|writeDumpDir
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dumpDir
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot create dump directory "
operator|+
name|dumpDir
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|startDaemons ()
specifier|public
name|void
name|startDaemons
parameter_list|()
block|{
if|if
condition|(
name|pauseMonitor
operator|==
literal|null
condition|)
block|{
name|pauseMonitor
operator|=
operator|new
name|JvmPauseMonitor
argument_list|()
expr_stmt|;
name|pauseMonitor
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|pauseMonitor
operator|.
name|start
argument_list|()
expr_stmt|;
name|metrics
operator|.
name|getJvmMetrics
argument_list|()
operator|.
name|setPauseMonitor
argument_list|(
name|pauseMonitor
argument_list|)
expr_stmt|;
block|}
name|writeManager
operator|.
name|startAsyncDataService
argument_list|()
expr_stmt|;
try|try
block|{
name|infoServer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"failed to start web server"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|stopDaemons ()
specifier|public
name|void
name|stopDaemons
parameter_list|()
block|{
if|if
condition|(
name|writeManager
operator|!=
literal|null
condition|)
block|{
name|writeManager
operator|.
name|shutdownAsyncDataService
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|pauseMonitor
operator|!=
literal|null
condition|)
block|{
name|pauseMonitor
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|// Stop the web server
if|if
condition|(
name|infoServer
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|infoServer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception shutting down web server"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|getInfoServer ()
name|Nfs3HttpServer
name|getInfoServer
parameter_list|()
block|{
return|return
name|this
operator|.
name|infoServer
return|;
block|}
comment|// Checks the type of IOException and maps it to appropriate Nfs3Status code.
DECL|method|mapErrorStatus (IOException e)
specifier|private
name|int
name|mapErrorStatus
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|FileNotFoundException
condition|)
block|{
return|return
name|Nfs3Status
operator|.
name|NFS3ERR_STALE
return|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|AccessControlException
condition|)
block|{
return|return
name|Nfs3Status
operator|.
name|NFS3ERR_ACCES
return|;
block|}
else|else
block|{
return|return
name|Nfs3Status
operator|.
name|NFS3ERR_IO
return|;
block|}
block|}
comment|/******************************************************    * RPC call handlers    ******************************************************/
annotation|@
name|Override
DECL|method|nullProcedure ()
specifier|public
name|NFS3Response
name|nullProcedure
parameter_list|()
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"NFS NULL"
argument_list|)
expr_stmt|;
return|return
operator|new
name|NFS3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3_OK
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getattr (XDR xdr, RpcInfo info)
specifier|public
name|GETATTR3Response
name|getattr
parameter_list|(
name|XDR
name|xdr
parameter_list|,
name|RpcInfo
name|info
parameter_list|)
block|{
return|return
name|getattr
argument_list|(
name|xdr
argument_list|,
name|getSecurityHandler
argument_list|(
name|info
argument_list|)
argument_list|,
name|info
operator|.
name|remoteAddress
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getattr (XDR xdr, SecurityHandler securityHandler, SocketAddress remoteAddress)
name|GETATTR3Response
name|getattr
parameter_list|(
name|XDR
name|xdr
parameter_list|,
name|SecurityHandler
name|securityHandler
parameter_list|,
name|SocketAddress
name|remoteAddress
parameter_list|)
block|{
name|GETATTR3Response
name|response
init|=
operator|new
name|GETATTR3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3_OK
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|checkAccessPrivilege
argument_list|(
name|remoteAddress
argument_list|,
name|AccessPrivilege
operator|.
name|READ_ONLY
argument_list|)
condition|)
block|{
name|response
operator|.
name|setStatus
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_ACCES
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
name|GETATTR3Request
name|request
decl_stmt|;
try|try
block|{
name|request
operator|=
name|GETATTR3Request
operator|.
name|deserialize
argument_list|(
name|xdr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Invalid GETATTR request"
argument_list|)
expr_stmt|;
name|response
operator|.
name|setStatus
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_INVAL
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
name|FileHandle
name|handle
init|=
name|request
operator|.
name|getHandle
argument_list|()
decl_stmt|;
name|int
name|namenodeId
init|=
name|handle
operator|.
name|getNamenodeId
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"GETATTR for fileHandle: {} client: {}"
argument_list|,
name|handle
operator|.
name|dumpFileHandle
argument_list|()
argument_list|,
name|remoteAddress
argument_list|)
expr_stmt|;
block|}
name|DFSClient
name|dfsClient
init|=
name|clientCache
operator|.
name|getDfsClient
argument_list|(
name|securityHandler
operator|.
name|getUser
argument_list|()
argument_list|,
name|namenodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|dfsClient
operator|==
literal|null
condition|)
block|{
name|response
operator|.
name|setStatus
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_SERVERFAULT
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
name|Nfs3FileAttributes
name|attrs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|attrs
operator|=
name|writeManager
operator|.
name|getFileAttr
argument_list|(
name|dfsClient
argument_list|,
name|handle
argument_list|,
name|iug
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|r
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|IOException
name|io
init|=
name|r
operator|.
name|unwrapRemoteException
argument_list|()
decl_stmt|;
comment|/**        * AuthorizationException can be thrown if the user can't be proxy'ed.        */
if|if
condition|(
name|io
operator|instanceof
name|AuthorizationException
condition|)
block|{
return|return
operator|new
name|GETATTR3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_ACCES
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|GETATTR3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_IO
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Can't get file attribute, fileId={}"
argument_list|,
name|handle
operator|.
name|getFileId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|int
name|status
init|=
name|mapErrorStatus
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|response
operator|.
name|setStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
if|if
condition|(
name|attrs
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't get path for fileId: {}"
argument_list|,
name|handle
operator|.
name|getFileId
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|setStatus
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_STALE
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
name|response
operator|.
name|setPostOpAttr
argument_list|(
name|attrs
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
comment|// Set attribute, don't support setting "size". For file/dir creation, mode is
comment|// set during creation and setMode should be false here.
DECL|method|setattrInternal (DFSClient dfsClient, String fileIdPath, SetAttr3 newAttr, boolean setMode)
specifier|private
name|void
name|setattrInternal
parameter_list|(
name|DFSClient
name|dfsClient
parameter_list|,
name|String
name|fileIdPath
parameter_list|,
name|SetAttr3
name|newAttr
parameter_list|,
name|boolean
name|setMode
parameter_list|)
throws|throws
name|IOException
block|{
name|EnumSet
argument_list|<
name|SetAttrField
argument_list|>
name|updateFields
init|=
name|newAttr
operator|.
name|getUpdateFields
argument_list|()
decl_stmt|;
if|if
condition|(
name|setMode
operator|&&
name|updateFields
operator|.
name|contains
argument_list|(
name|SetAttrField
operator|.
name|MODE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"set new mode: {}"
argument_list|,
name|newAttr
operator|.
name|getMode
argument_list|()
argument_list|)
expr_stmt|;
name|dfsClient
operator|.
name|setPermission
argument_list|(
name|fileIdPath
argument_list|,
operator|new
name|FsPermission
argument_list|(
call|(
name|short
call|)
argument_list|(
name|newAttr
operator|.
name|getMode
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|updateFields
operator|.
name|contains
argument_list|(
name|SetAttrField
operator|.
name|UID
argument_list|)
operator|||
name|updateFields
operator|.
name|contains
argument_list|(
name|SetAttrField
operator|.
name|GID
argument_list|)
condition|)
block|{
name|String
name|uname
init|=
name|updateFields
operator|.
name|contains
argument_list|(
name|SetAttrField
operator|.
name|UID
argument_list|)
condition|?
name|iug
operator|.
name|getUserName
argument_list|(
name|newAttr
operator|.
name|getUid
argument_list|()
argument_list|,
name|IdMappingConstant
operator|.
name|UNKNOWN_USER
argument_list|)
else|:
literal|null
decl_stmt|;
name|String
name|gname
init|=
name|updateFields
operator|.
name|contains
argument_list|(
name|SetAttrField
operator|.
name|GID
argument_list|)
condition|?
name|iug
operator|.
name|getGroupName
argument_list|(
name|newAttr
operator|.
name|getGid
argument_list|()
argument_list|,
name|IdMappingConstant
operator|.
name|UNKNOWN_GROUP
argument_list|)
else|:
literal|null
decl_stmt|;
name|dfsClient
operator|.
name|setOwner
argument_list|(
name|fileIdPath
argument_list|,
name|uname
argument_list|,
name|gname
argument_list|)
expr_stmt|;
block|}
name|long
name|atime
init|=
name|updateFields
operator|.
name|contains
argument_list|(
name|SetAttrField
operator|.
name|ATIME
argument_list|)
condition|?
name|newAttr
operator|.
name|getAtime
argument_list|()
operator|.
name|getMilliSeconds
argument_list|()
else|:
operator|-
literal|1
decl_stmt|;
name|long
name|mtime
init|=
name|updateFields
operator|.
name|contains
argument_list|(
name|SetAttrField
operator|.
name|MTIME
argument_list|)
condition|?
name|newAttr
operator|.
name|getMtime
argument_list|()
operator|.
name|getMilliSeconds
argument_list|()
else|:
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|atime
operator|!=
operator|-
literal|1
operator|||
name|mtime
operator|!=
operator|-
literal|1
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"set atime: {} mtime: {}"
argument_list|,
name|atime
argument_list|,
name|mtime
argument_list|)
expr_stmt|;
name|dfsClient
operator|.
name|setTimes
argument_list|(
name|fileIdPath
argument_list|,
name|mtime
argument_list|,
name|atime
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|setattr (XDR xdr, RpcInfo info)
specifier|public
name|SETATTR3Response
name|setattr
parameter_list|(
name|XDR
name|xdr
parameter_list|,
name|RpcInfo
name|info
parameter_list|)
block|{
return|return
name|setattr
argument_list|(
name|xdr
argument_list|,
name|getSecurityHandler
argument_list|(
name|info
argument_list|)
argument_list|,
name|info
operator|.
name|remoteAddress
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|setattr (XDR xdr, SecurityHandler securityHandler, SocketAddress remoteAddress)
name|SETATTR3Response
name|setattr
parameter_list|(
name|XDR
name|xdr
parameter_list|,
name|SecurityHandler
name|securityHandler
parameter_list|,
name|SocketAddress
name|remoteAddress
parameter_list|)
block|{
name|SETATTR3Response
name|response
init|=
operator|new
name|SETATTR3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3_OK
argument_list|)
decl_stmt|;
name|SETATTR3Request
name|request
decl_stmt|;
try|try
block|{
name|request
operator|=
name|SETATTR3Request
operator|.
name|deserialize
argument_list|(
name|xdr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Invalid SETATTR request"
argument_list|)
expr_stmt|;
name|response
operator|.
name|setStatus
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_INVAL
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
name|FileHandle
name|handle
init|=
name|request
operator|.
name|getHandle
argument_list|()
decl_stmt|;
name|int
name|namenodeId
init|=
name|handle
operator|.
name|getNamenodeId
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"NFS SETATTR fileHandle: {} client: {}"
argument_list|,
name|handle
operator|.
name|dumpFileHandle
argument_list|()
argument_list|,
name|remoteAddress
argument_list|)
expr_stmt|;
block|}
name|DFSClient
name|dfsClient
init|=
name|clientCache
operator|.
name|getDfsClient
argument_list|(
name|securityHandler
operator|.
name|getUser
argument_list|()
argument_list|,
name|namenodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|dfsClient
operator|==
literal|null
condition|)
block|{
name|response
operator|.
name|setStatus
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_SERVERFAULT
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
if|if
condition|(
name|request
operator|.
name|getAttr
argument_list|()
operator|.
name|getUpdateFields
argument_list|()
operator|.
name|contains
argument_list|(
name|SetAttrField
operator|.
name|SIZE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Setting file size is not supported when setattr, fileId: {}"
argument_list|,
name|handle
operator|.
name|getFileId
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|setStatus
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_INVAL
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
name|String
name|fileIdPath
init|=
name|Nfs3Utils
operator|.
name|getFileIdPath
argument_list|(
name|handle
argument_list|)
decl_stmt|;
name|Nfs3FileAttributes
name|preOpAttr
init|=
literal|null
decl_stmt|;
try|try
block|{
name|preOpAttr
operator|=
name|Nfs3Utils
operator|.
name|getFileAttr
argument_list|(
name|dfsClient
argument_list|,
name|fileIdPath
argument_list|,
name|iug
argument_list|)
expr_stmt|;
if|if
condition|(
name|preOpAttr
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Can't get path for fileId: {}"
argument_list|,
name|handle
operator|.
name|getFileId
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|setStatus
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_STALE
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
name|WccAttr
name|preOpWcc
init|=
name|Nfs3Utils
operator|.
name|getWccAttr
argument_list|(
name|preOpAttr
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|isCheck
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|preOpAttr
operator|.
name|getCtime
argument_list|()
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getCtime
argument_list|()
argument_list|)
condition|)
block|{
name|WccData
name|wccData
init|=
operator|new
name|WccData
argument_list|(
name|preOpWcc
argument_list|,
name|preOpAttr
argument_list|)
decl_stmt|;
return|return
operator|new
name|SETATTR3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_NOT_SYNC
argument_list|,
name|wccData
argument_list|)
return|;
block|}
block|}
comment|// check the write access privilege
if|if
condition|(
operator|!
name|checkAccessPrivilege
argument_list|(
name|remoteAddress
argument_list|,
name|AccessPrivilege
operator|.
name|READ_WRITE
argument_list|)
condition|)
block|{
return|return
operator|new
name|SETATTR3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_ACCES
argument_list|,
operator|new
name|WccData
argument_list|(
name|preOpWcc
argument_list|,
name|preOpAttr
argument_list|)
argument_list|)
return|;
block|}
name|setattrInternal
argument_list|(
name|dfsClient
argument_list|,
name|fileIdPath
argument_list|,
name|request
operator|.
name|getAttr
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Nfs3FileAttributes
name|postOpAttr
init|=
name|Nfs3Utils
operator|.
name|getFileAttr
argument_list|(
name|dfsClient
argument_list|,
name|fileIdPath
argument_list|,
name|iug
argument_list|)
decl_stmt|;
name|WccData
name|wccData
init|=
operator|new
name|WccData
argument_list|(
name|preOpWcc
argument_list|,
name|postOpAttr
argument_list|)
decl_stmt|;
return|return
operator|new
name|SETATTR3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3_OK
argument_list|,
name|wccData
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|WccData
name|wccData
init|=
literal|null
decl_stmt|;
try|try
block|{
name|wccData
operator|=
name|Nfs3Utils
operator|.
name|createWccData
argument_list|(
name|Nfs3Utils
operator|.
name|getWccAttr
argument_list|(
name|preOpAttr
argument_list|)
argument_list|,
name|dfsClient
argument_list|,
name|fileIdPath
argument_list|,
name|iug
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Can't get postOpAttr for fileIdPath: {}"
argument_list|,
name|fileIdPath
argument_list|,
name|e1
argument_list|)
expr_stmt|;
block|}
name|int
name|status
init|=
name|mapErrorStatus
argument_list|(
name|e
argument_list|)
decl_stmt|;
return|return
operator|new
name|SETATTR3Response
argument_list|(
name|status
argument_list|,
name|wccData
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|lookup (XDR xdr, RpcInfo info)
specifier|public
name|LOOKUP3Response
name|lookup
parameter_list|(
name|XDR
name|xdr
parameter_list|,
name|RpcInfo
name|info
parameter_list|)
block|{
return|return
name|lookup
argument_list|(
name|xdr
argument_list|,
name|getSecurityHandler
argument_list|(
name|info
argument_list|)
argument_list|,
name|info
operator|.
name|remoteAddress
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|lookup (XDR xdr, SecurityHandler securityHandler, SocketAddress remoteAddress)
name|LOOKUP3Response
name|lookup
parameter_list|(
name|XDR
name|xdr
parameter_list|,
name|SecurityHandler
name|securityHandler
parameter_list|,
name|SocketAddress
name|remoteAddress
parameter_list|)
block|{
name|LOOKUP3Response
name|response
init|=
operator|new
name|LOOKUP3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3_OK
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|checkAccessPrivilege
argument_list|(
name|remoteAddress
argument_list|,
name|AccessPrivilege
operator|.
name|READ_ONLY
argument_list|)
condition|)
block|{
name|response
operator|.
name|setStatus
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_ACCES
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
name|LOOKUP3Request
name|request
decl_stmt|;
try|try
block|{
name|request
operator|=
name|LOOKUP3Request
operator|.
name|deserialize
argument_list|(
name|xdr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Invalid LOOKUP request"
argument_list|)
expr_stmt|;
return|return
operator|new
name|LOOKUP3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_INVAL
argument_list|)
return|;
block|}
name|FileHandle
name|dirHandle
init|=
name|request
operator|.
name|getHandle
argument_list|()
decl_stmt|;
name|String
name|fileName
init|=
name|request
operator|.
name|getName
argument_list|()
decl_stmt|;
name|int
name|namenodeId
init|=
name|dirHandle
operator|.
name|getNamenodeId
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"NFS LOOKUP dir fileHandle: {} name: {} client: {}"
argument_list|,
name|dirHandle
operator|.
name|dumpFileHandle
argument_list|()
argument_list|,
name|fileName
argument_list|,
name|remoteAddress
argument_list|)
expr_stmt|;
block|}
name|DFSClient
name|dfsClient
init|=
name|clientCache
operator|.
name|getDfsClient
argument_list|(
name|securityHandler
operator|.
name|getUser
argument_list|()
argument_list|,
name|namenodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|dfsClient
operator|==
literal|null
condition|)
block|{
name|response
operator|.
name|setStatus
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_SERVERFAULT
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
try|try
block|{
name|String
name|dirFileIdPath
init|=
name|Nfs3Utils
operator|.
name|getFileIdPath
argument_list|(
name|dirHandle
argument_list|)
decl_stmt|;
name|Nfs3FileAttributes
name|postOpObjAttr
init|=
name|writeManager
operator|.
name|getFileAttr
argument_list|(
name|dfsClient
argument_list|,
name|dirHandle
argument_list|,
name|fileName
argument_list|,
name|namenodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|postOpObjAttr
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"NFS LOOKUP fileId: {} name: {} does not exist"
argument_list|,
name|dirHandle
operator|.
name|getFileId
argument_list|()
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|Nfs3FileAttributes
name|postOpDirAttr
init|=
name|Nfs3Utils
operator|.
name|getFileAttr
argument_list|(
name|dfsClient
argument_list|,
name|dirFileIdPath
argument_list|,
name|iug
argument_list|)
decl_stmt|;
return|return
operator|new
name|LOOKUP3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_NOENT
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|postOpDirAttr
argument_list|)
return|;
block|}
name|Nfs3FileAttributes
name|postOpDirAttr
init|=
name|Nfs3Utils
operator|.
name|getFileAttr
argument_list|(
name|dfsClient
argument_list|,
name|dirFileIdPath
argument_list|,
name|iug
argument_list|)
decl_stmt|;
if|if
condition|(
name|postOpDirAttr
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Can't get path for dir fileId: {}"
argument_list|,
name|dirHandle
operator|.
name|getFileId
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|LOOKUP3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_STALE
argument_list|)
return|;
block|}
name|FileHandle
name|fileHandle
init|=
operator|new
name|FileHandle
argument_list|(
name|postOpObjAttr
operator|.
name|getFileId
argument_list|()
argument_list|,
name|namenodeId
argument_list|)
decl_stmt|;
return|return
operator|new
name|LOOKUP3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3_OK
argument_list|,
name|fileHandle
argument_list|,
name|postOpObjAttr
argument_list|,
name|postOpDirAttr
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|int
name|status
init|=
name|mapErrorStatus
argument_list|(
name|e
argument_list|)
decl_stmt|;
return|return
operator|new
name|LOOKUP3Response
argument_list|(
name|status
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|access (XDR xdr, RpcInfo info)
specifier|public
name|ACCESS3Response
name|access
parameter_list|(
name|XDR
name|xdr
parameter_list|,
name|RpcInfo
name|info
parameter_list|)
block|{
return|return
name|access
argument_list|(
name|xdr
argument_list|,
name|getSecurityHandler
argument_list|(
name|info
argument_list|)
argument_list|,
name|info
operator|.
name|remoteAddress
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|access (XDR xdr, SecurityHandler securityHandler, SocketAddress remoteAddress)
name|ACCESS3Response
name|access
parameter_list|(
name|XDR
name|xdr
parameter_list|,
name|SecurityHandler
name|securityHandler
parameter_list|,
name|SocketAddress
name|remoteAddress
parameter_list|)
block|{
name|ACCESS3Response
name|response
init|=
operator|new
name|ACCESS3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3_OK
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|checkAccessPrivilege
argument_list|(
name|remoteAddress
argument_list|,
name|AccessPrivilege
operator|.
name|READ_ONLY
argument_list|)
condition|)
block|{
name|response
operator|.
name|setStatus
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_ACCES
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
name|ACCESS3Request
name|request
decl_stmt|;
try|try
block|{
name|request
operator|=
name|ACCESS3Request
operator|.
name|deserialize
argument_list|(
name|xdr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Invalid ACCESS request"
argument_list|)
expr_stmt|;
return|return
operator|new
name|ACCESS3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_INVAL
argument_list|)
return|;
block|}
name|FileHandle
name|handle
init|=
name|request
operator|.
name|getHandle
argument_list|()
decl_stmt|;
name|int
name|namenodeId
init|=
name|handle
operator|.
name|getNamenodeId
argument_list|()
decl_stmt|;
name|DFSClient
name|dfsClient
init|=
name|clientCache
operator|.
name|getDfsClient
argument_list|(
name|securityHandler
operator|.
name|getUser
argument_list|()
argument_list|,
name|namenodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|dfsClient
operator|==
literal|null
condition|)
block|{
name|response
operator|.
name|setStatus
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_SERVERFAULT
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"NFS ACCESS fileHandle: {} client: {}"
argument_list|,
name|handle
operator|.
name|dumpFileHandle
argument_list|()
argument_list|,
name|remoteAddress
argument_list|)
expr_stmt|;
block|}
name|Nfs3FileAttributes
name|attrs
decl_stmt|;
try|try
block|{
name|attrs
operator|=
name|writeManager
operator|.
name|getFileAttr
argument_list|(
name|dfsClient
argument_list|,
name|handle
argument_list|,
name|iug
argument_list|)
expr_stmt|;
if|if
condition|(
name|attrs
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't get path for fileId: {}"
argument_list|,
name|handle
operator|.
name|getFileId
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|ACCESS3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_STALE
argument_list|)
return|;
block|}
if|if
condition|(
name|iug
operator|.
name|getUserName
argument_list|(
name|securityHandler
operator|.
name|getUid
argument_list|()
argument_list|,
literal|"unknown"
argument_list|)
operator|.
name|equals
argument_list|(
name|superuser
argument_list|)
condition|)
block|{
name|int
name|access
init|=
name|Nfs3Constant
operator|.
name|ACCESS3_LOOKUP
operator||
name|Nfs3Constant
operator|.
name|ACCESS3_DELETE
operator||
name|Nfs3Constant
operator|.
name|ACCESS3_EXECUTE
operator||
name|Nfs3Constant
operator|.
name|ACCESS3_EXTEND
operator||
name|Nfs3Constant
operator|.
name|ACCESS3_MODIFY
operator||
name|Nfs3Constant
operator|.
name|ACCESS3_READ
decl_stmt|;
return|return
operator|new
name|ACCESS3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3_OK
argument_list|,
name|attrs
argument_list|,
name|access
argument_list|)
return|;
block|}
name|int
name|access
init|=
name|Nfs3Utils
operator|.
name|getAccessRightsForUserGroup
argument_list|(
name|securityHandler
operator|.
name|getUid
argument_list|()
argument_list|,
name|securityHandler
operator|.
name|getGid
argument_list|()
argument_list|,
name|securityHandler
operator|.
name|getAuxGids
argument_list|()
argument_list|,
name|attrs
argument_list|)
decl_stmt|;
return|return
operator|new
name|ACCESS3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3_OK
argument_list|,
name|attrs
argument_list|,
name|access
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|r
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|IOException
name|io
init|=
name|r
operator|.
name|unwrapRemoteException
argument_list|()
decl_stmt|;
comment|/**        * AuthorizationException can be thrown if the user can't be proxy'ed.        */
if|if
condition|(
name|io
operator|instanceof
name|AuthorizationException
condition|)
block|{
return|return
operator|new
name|ACCESS3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_ACCES
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|ACCESS3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_IO
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|int
name|status
init|=
name|mapErrorStatus
argument_list|(
name|e
argument_list|)
decl_stmt|;
return|return
operator|new
name|ACCESS3Response
argument_list|(
name|status
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|readlink (XDR xdr, RpcInfo info)
specifier|public
name|READLINK3Response
name|readlink
parameter_list|(
name|XDR
name|xdr
parameter_list|,
name|RpcInfo
name|info
parameter_list|)
block|{
return|return
name|readlink
argument_list|(
name|xdr
argument_list|,
name|getSecurityHandler
argument_list|(
name|info
argument_list|)
argument_list|,
name|info
operator|.
name|remoteAddress
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|readlink (XDR xdr, SecurityHandler securityHandler, SocketAddress remoteAddress)
name|READLINK3Response
name|readlink
parameter_list|(
name|XDR
name|xdr
parameter_list|,
name|SecurityHandler
name|securityHandler
parameter_list|,
name|SocketAddress
name|remoteAddress
parameter_list|)
block|{
name|READLINK3Response
name|response
init|=
operator|new
name|READLINK3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3_OK
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|checkAccessPrivilege
argument_list|(
name|remoteAddress
argument_list|,
name|AccessPrivilege
operator|.
name|READ_ONLY
argument_list|)
condition|)
block|{
name|response
operator|.
name|setStatus
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_ACCES
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
name|READLINK3Request
name|request
decl_stmt|;
try|try
block|{
name|request
operator|=
name|READLINK3Request
operator|.
name|deserialize
argument_list|(
name|xdr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Invalid READLINK request"
argument_list|)
expr_stmt|;
return|return
operator|new
name|READLINK3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_INVAL
argument_list|)
return|;
block|}
name|FileHandle
name|handle
init|=
name|request
operator|.
name|getHandle
argument_list|()
decl_stmt|;
name|int
name|namenodeId
init|=
name|handle
operator|.
name|getNamenodeId
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"NFS READLINK fileHandle: {} client: {}"
argument_list|,
name|handle
operator|.
name|dumpFileHandle
argument_list|()
argument_list|,
name|remoteAddress
argument_list|)
expr_stmt|;
block|}
name|DFSClient
name|dfsClient
init|=
name|clientCache
operator|.
name|getDfsClient
argument_list|(
name|securityHandler
operator|.
name|getUser
argument_list|()
argument_list|,
name|namenodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|dfsClient
operator|==
literal|null
condition|)
block|{
name|response
operator|.
name|setStatus
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_SERVERFAULT
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
name|String
name|fileIdPath
init|=
name|Nfs3Utils
operator|.
name|getFileIdPath
argument_list|(
name|handle
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|target
init|=
name|dfsClient
operator|.
name|getLinkTarget
argument_list|(
name|fileIdPath
argument_list|)
decl_stmt|;
name|Nfs3FileAttributes
name|postOpAttr
init|=
name|Nfs3Utils
operator|.
name|getFileAttr
argument_list|(
name|dfsClient
argument_list|,
name|fileIdPath
argument_list|,
name|iug
argument_list|)
decl_stmt|;
if|if
condition|(
name|postOpAttr
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Can't get path for fileId: {}"
argument_list|,
name|handle
operator|.
name|getFileId
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|READLINK3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_STALE
argument_list|)
return|;
block|}
if|if
condition|(
name|postOpAttr
operator|.
name|getType
argument_list|()
operator|!=
name|NfsFileType
operator|.
name|NFSLNK
operator|.
name|toValue
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Not a symlink, fileId: {}"
argument_list|,
name|handle
operator|.
name|getFileId
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|READLINK3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_INVAL
argument_list|)
return|;
block|}
if|if
condition|(
name|target
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Symlink target should not be null, fileId: {}"
argument_list|,
name|handle
operator|.
name|getFileId
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|READLINK3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_SERVERFAULT
argument_list|)
return|;
block|}
name|int
name|rtmax
init|=
name|config
operator|.
name|getInt
argument_list|(
name|NfsConfigKeys
operator|.
name|DFS_NFS_MAX_READ_TRANSFER_SIZE_KEY
argument_list|,
name|NfsConfigKeys
operator|.
name|DFS_NFS_MAX_READ_TRANSFER_SIZE_DEFAULT
argument_list|)
decl_stmt|;
if|if
condition|(
name|rtmax
operator|<
name|target
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
operator|.
name|length
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Link size: {} is larger than max transfer size: {}"
argument_list|,
name|target
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
operator|.
name|length
argument_list|,
name|rtmax
argument_list|)
expr_stmt|;
return|return
operator|new
name|READLINK3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_IO
argument_list|,
name|postOpAttr
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
return|;
block|}
return|return
operator|new
name|READLINK3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3_OK
argument_list|,
name|postOpAttr
argument_list|,
name|target
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Readlink error"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|int
name|status
init|=
name|mapErrorStatus
argument_list|(
name|e
argument_list|)
decl_stmt|;
return|return
operator|new
name|READLINK3Response
argument_list|(
name|status
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|read (XDR xdr, RpcInfo info)
specifier|public
name|READ3Response
name|read
parameter_list|(
name|XDR
name|xdr
parameter_list|,
name|RpcInfo
name|info
parameter_list|)
block|{
return|return
name|read
argument_list|(
name|xdr
argument_list|,
name|getSecurityHandler
argument_list|(
name|info
argument_list|)
argument_list|,
name|info
operator|.
name|remoteAddress
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|read (XDR xdr, SecurityHandler securityHandler, SocketAddress remoteAddress)
name|READ3Response
name|read
parameter_list|(
name|XDR
name|xdr
parameter_list|,
name|SecurityHandler
name|securityHandler
parameter_list|,
name|SocketAddress
name|remoteAddress
parameter_list|)
block|{
name|READ3Response
name|response
init|=
operator|new
name|READ3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3_OK
argument_list|)
decl_stmt|;
specifier|final
name|String
name|userName
init|=
name|securityHandler
operator|.
name|getUser
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|checkAccessPrivilege
argument_list|(
name|remoteAddress
argument_list|,
name|AccessPrivilege
operator|.
name|READ_ONLY
argument_list|)
condition|)
block|{
name|response
operator|.
name|setStatus
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_ACCES
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
name|READ3Request
name|request
decl_stmt|;
try|try
block|{
name|request
operator|=
name|READ3Request
operator|.
name|deserialize
argument_list|(
name|xdr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Invalid READ request"
argument_list|)
expr_stmt|;
return|return
operator|new
name|READ3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_INVAL
argument_list|)
return|;
block|}
name|long
name|offset
init|=
name|request
operator|.
name|getOffset
argument_list|()
decl_stmt|;
name|int
name|count
init|=
name|request
operator|.
name|getCount
argument_list|()
decl_stmt|;
name|FileHandle
name|handle
init|=
name|request
operator|.
name|getHandle
argument_list|()
decl_stmt|;
name|int
name|namenodeId
init|=
name|handle
operator|.
name|getNamenodeId
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"NFS READ fileHandle: {} offset: {} count: {} client: {}"
argument_list|,
name|handle
operator|.
name|dumpFileHandle
argument_list|()
argument_list|,
name|offset
argument_list|,
name|count
argument_list|,
name|remoteAddress
argument_list|)
expr_stmt|;
block|}
name|DFSClient
name|dfsClient
init|=
name|clientCache
operator|.
name|getDfsClient
argument_list|(
name|userName
argument_list|,
name|namenodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|dfsClient
operator|==
literal|null
condition|)
block|{
name|response
operator|.
name|setStatus
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_SERVERFAULT
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
name|Nfs3FileAttributes
name|attrs
decl_stmt|;
name|boolean
name|eof
decl_stmt|;
if|if
condition|(
name|count
operator|==
literal|0
condition|)
block|{
comment|// Only do access check.
try|try
block|{
comment|// Don't read from cache. Client may not have read permission.
name|attrs
operator|=
name|Nfs3Utils
operator|.
name|getFileAttr
argument_list|(
name|dfsClient
argument_list|,
name|Nfs3Utils
operator|.
name|getFileIdPath
argument_list|(
name|handle
argument_list|)
argument_list|,
name|iug
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Get error accessing file, fileId: {}"
argument_list|,
name|handle
operator|.
name|getFileId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
operator|new
name|READ3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_IO
argument_list|)
return|;
block|}
if|if
condition|(
name|attrs
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Can't get path for fileId: {}"
argument_list|,
name|handle
operator|.
name|getFileId
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|READ3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_NOENT
argument_list|)
return|;
block|}
name|int
name|access
init|=
name|Nfs3Utils
operator|.
name|getAccessRightsForUserGroup
argument_list|(
name|securityHandler
operator|.
name|getUid
argument_list|()
argument_list|,
name|securityHandler
operator|.
name|getGid
argument_list|()
argument_list|,
name|securityHandler
operator|.
name|getAuxGids
argument_list|()
argument_list|,
name|attrs
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|access
operator|&
name|Nfs3Constant
operator|.
name|ACCESS3_READ
operator|)
operator|!=
literal|0
condition|)
block|{
name|eof
operator|=
name|offset
operator|>=
name|attrs
operator|.
name|getSize
argument_list|()
expr_stmt|;
return|return
operator|new
name|READ3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3_OK
argument_list|,
name|attrs
argument_list|,
literal|0
argument_list|,
name|eof
argument_list|,
name|ByteBuffer
operator|.
name|wrap
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|READ3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_ACCES
argument_list|)
return|;
block|}
block|}
comment|// In case there is buffered data for the same file, flush it. This can be
comment|// optimized later by reading from the cache.
name|int
name|ret
init|=
name|writeManager
operator|.
name|commitBeforeRead
argument_list|(
name|dfsClient
argument_list|,
name|handle
argument_list|,
name|offset
operator|+
name|count
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|!=
name|Nfs3Status
operator|.
name|NFS3_OK
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"commitBeforeRead didn't succeed with ret={}. "
operator|+
literal|"Read may not get most recent data."
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|int
name|rtmax
init|=
name|config
operator|.
name|getInt
argument_list|(
name|NfsConfigKeys
operator|.
name|DFS_NFS_MAX_READ_TRANSFER_SIZE_KEY
argument_list|,
name|NfsConfigKeys
operator|.
name|DFS_NFS_MAX_READ_TRANSFER_SIZE_DEFAULT
argument_list|)
decl_stmt|;
name|int
name|buffSize
init|=
name|Math
operator|.
name|min
argument_list|(
name|rtmax
argument_list|,
name|count
argument_list|)
decl_stmt|;
name|byte
index|[]
name|readbuffer
init|=
operator|new
name|byte
index|[
name|buffSize
index|]
decl_stmt|;
name|int
name|readCount
init|=
literal|0
decl_stmt|;
comment|/**        * Retry exactly once because the DFSInputStream can be stale.        */
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1
condition|;
operator|++
name|i
control|)
block|{
name|FSDataInputStream
name|fis
init|=
name|clientCache
operator|.
name|getDfsInputStream
argument_list|(
name|userName
argument_list|,
name|Nfs3Utils
operator|.
name|getFileIdPath
argument_list|(
name|handle
argument_list|)
argument_list|,
name|namenodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fis
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|READ3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_ACCES
argument_list|)
return|;
block|}
try|try
block|{
name|readCount
operator|=
name|fis
operator|.
name|read
argument_list|(
name|offset
argument_list|,
name|readbuffer
argument_list|,
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|incrBytesRead
argument_list|(
name|readCount
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// TODO: A cleaner way is to throw a new type of exception
comment|// which requires incompatible changes.
if|if
condition|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Stream closed"
argument_list|)
condition|)
block|{
name|clientCache
operator|.
name|invalidateDfsInputStream
argument_list|(
name|userName
argument_list|,
name|Nfs3Utils
operator|.
name|getFileIdPath
argument_list|(
name|handle
argument_list|)
argument_list|,
name|namenodeId
argument_list|)
expr_stmt|;
continue|continue;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
name|attrs
operator|=
name|Nfs3Utils
operator|.
name|getFileAttr
argument_list|(
name|dfsClient
argument_list|,
name|Nfs3Utils
operator|.
name|getFileIdPath
argument_list|(
name|handle
argument_list|)
argument_list|,
name|iug
argument_list|)
expr_stmt|;
if|if
condition|(
name|readCount
operator|<
name|count
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Partial read. Asked offset: {} count: {} and read back: {} "
operator|+
literal|"file size: {}"
argument_list|,
name|offset
argument_list|,
name|count
argument_list|,
name|readCount
argument_list|,
name|attrs
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// HDFS returns -1 for read beyond file size.
if|if
condition|(
name|readCount
operator|<
literal|0
condition|)
block|{
name|readCount
operator|=
literal|0
expr_stmt|;
block|}
name|eof
operator|=
operator|(
name|offset
operator|+
name|readCount
operator|)
operator|>=
name|attrs
operator|.
name|getSize
argument_list|()
expr_stmt|;
return|return
operator|new
name|READ3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3_OK
argument_list|,
name|attrs
argument_list|,
name|readCount
argument_list|,
name|eof
argument_list|,
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|readbuffer
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Read error. Offset: {} count: {}"
argument_list|,
name|offset
argument_list|,
name|count
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|int
name|status
init|=
name|mapErrorStatus
argument_list|(
name|e
argument_list|)
decl_stmt|;
return|return
operator|new
name|READ3Response
argument_list|(
name|status
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|write (XDR xdr, RpcInfo info)
specifier|public
name|WRITE3Response
name|write
parameter_list|(
name|XDR
name|xdr
parameter_list|,
name|RpcInfo
name|info
parameter_list|)
block|{
name|SecurityHandler
name|securityHandler
init|=
name|getSecurityHandler
argument_list|(
name|info
argument_list|)
decl_stmt|;
name|RpcCall
name|rpcCall
init|=
operator|(
name|RpcCall
operator|)
name|info
operator|.
name|header
argument_list|()
decl_stmt|;
name|int
name|xid
init|=
name|rpcCall
operator|.
name|getXid
argument_list|()
decl_stmt|;
name|SocketAddress
name|remoteAddress
init|=
name|info
operator|.
name|remoteAddress
argument_list|()
decl_stmt|;
return|return
name|write
argument_list|(
name|xdr
argument_list|,
name|info
operator|.
name|channel
argument_list|()
argument_list|,
name|xid
argument_list|,
name|securityHandler
argument_list|,
name|remoteAddress
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|write (XDR xdr, Channel channel, int xid, SecurityHandler securityHandler, SocketAddress remoteAddress)
name|WRITE3Response
name|write
parameter_list|(
name|XDR
name|xdr
parameter_list|,
name|Channel
name|channel
parameter_list|,
name|int
name|xid
parameter_list|,
name|SecurityHandler
name|securityHandler
parameter_list|,
name|SocketAddress
name|remoteAddress
parameter_list|)
block|{
name|WRITE3Response
name|response
init|=
operator|new
name|WRITE3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3_OK
argument_list|)
decl_stmt|;
name|WRITE3Request
name|request
decl_stmt|;
try|try
block|{
name|request
operator|=
name|WRITE3Request
operator|.
name|deserialize
argument_list|(
name|xdr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Invalid WRITE request"
argument_list|)
expr_stmt|;
return|return
operator|new
name|WRITE3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_INVAL
argument_list|)
return|;
block|}
name|long
name|offset
init|=
name|request
operator|.
name|getOffset
argument_list|()
decl_stmt|;
name|int
name|count
init|=
name|request
operator|.
name|getCount
argument_list|()
decl_stmt|;
name|WriteStableHow
name|stableHow
init|=
name|request
operator|.
name|getStableHow
argument_list|()
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|request
operator|.
name|getData
argument_list|()
operator|.
name|array
argument_list|()
decl_stmt|;
if|if
condition|(
name|data
operator|.
name|length
operator|<
name|count
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Invalid argument, data size is less than count in request"
argument_list|)
expr_stmt|;
return|return
operator|new
name|WRITE3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_INVAL
argument_list|)
return|;
block|}
name|FileHandle
name|handle
init|=
name|request
operator|.
name|getHandle
argument_list|()
decl_stmt|;
name|int
name|namenodeId
init|=
name|handle
operator|.
name|getNamenodeId
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"NFS WRITE fileHandle: {} offset: {} length: {} "
operator|+
literal|"stableHow: {} xid: {} client: {}"
argument_list|,
name|handle
operator|.
name|dumpFileHandle
argument_list|()
argument_list|,
name|offset
argument_list|,
name|count
argument_list|,
name|stableHow
operator|.
name|getValue
argument_list|()
argument_list|,
name|xid
argument_list|,
name|remoteAddress
argument_list|)
expr_stmt|;
block|}
name|DFSClient
name|dfsClient
init|=
name|clientCache
operator|.
name|getDfsClient
argument_list|(
name|securityHandler
operator|.
name|getUser
argument_list|()
argument_list|,
name|namenodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|dfsClient
operator|==
literal|null
condition|)
block|{
name|response
operator|.
name|setStatus
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_SERVERFAULT
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
name|Nfs3FileAttributes
name|preOpAttr
init|=
literal|null
decl_stmt|;
try|try
block|{
name|preOpAttr
operator|=
name|writeManager
operator|.
name|getFileAttr
argument_list|(
name|dfsClient
argument_list|,
name|handle
argument_list|,
name|iug
argument_list|)
expr_stmt|;
if|if
condition|(
name|preOpAttr
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't get path for fileId: {}"
argument_list|,
name|handle
operator|.
name|getFileId
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|WRITE3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_STALE
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
name|checkAccessPrivilege
argument_list|(
name|remoteAddress
argument_list|,
name|AccessPrivilege
operator|.
name|READ_WRITE
argument_list|)
condition|)
block|{
return|return
operator|new
name|WRITE3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_ACCES
argument_list|,
operator|new
name|WccData
argument_list|(
name|Nfs3Utils
operator|.
name|getWccAttr
argument_list|(
name|preOpAttr
argument_list|)
argument_list|,
name|preOpAttr
argument_list|)
argument_list|,
literal|0
argument_list|,
name|stableHow
argument_list|,
name|Nfs3Constant
operator|.
name|WRITE_COMMIT_VERF
argument_list|)
return|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"requested offset={} and current filesize={}"
argument_list|,
name|offset
argument_list|,
name|preOpAttr
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|writeManager
operator|.
name|handleWrite
argument_list|(
name|dfsClient
argument_list|,
name|request
argument_list|,
name|channel
argument_list|,
name|xid
argument_list|,
name|preOpAttr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Error writing to fileId {} at offset {} and length {}"
argument_list|,
name|handle
operator|.
name|getFileId
argument_list|()
argument_list|,
name|offset
argument_list|,
name|data
operator|.
name|length
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// Try to return WccData
name|Nfs3FileAttributes
name|postOpAttr
init|=
literal|null
decl_stmt|;
try|try
block|{
name|postOpAttr
operator|=
name|writeManager
operator|.
name|getFileAttr
argument_list|(
name|dfsClient
argument_list|,
name|handle
argument_list|,
name|iug
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Can't get postOpAttr for fileId: {}"
argument_list|,
name|e1
argument_list|)
expr_stmt|;
block|}
name|WccAttr
name|attr
init|=
name|preOpAttr
operator|==
literal|null
condition|?
literal|null
else|:
name|Nfs3Utils
operator|.
name|getWccAttr
argument_list|(
name|preOpAttr
argument_list|)
decl_stmt|;
name|WccData
name|fileWcc
init|=
operator|new
name|WccData
argument_list|(
name|attr
argument_list|,
name|postOpAttr
argument_list|)
decl_stmt|;
name|int
name|status
init|=
name|mapErrorStatus
argument_list|(
name|e
argument_list|)
decl_stmt|;
return|return
operator|new
name|WRITE3Response
argument_list|(
name|status
argument_list|,
name|fileWcc
argument_list|,
literal|0
argument_list|,
name|request
operator|.
name|getStableHow
argument_list|()
argument_list|,
name|Nfs3Constant
operator|.
name|WRITE_COMMIT_VERF
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|create (XDR xdr, RpcInfo info)
specifier|public
name|CREATE3Response
name|create
parameter_list|(
name|XDR
name|xdr
parameter_list|,
name|RpcInfo
name|info
parameter_list|)
block|{
return|return
name|create
argument_list|(
name|xdr
argument_list|,
name|getSecurityHandler
argument_list|(
name|info
argument_list|)
argument_list|,
name|info
operator|.
name|remoteAddress
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|create (XDR xdr, SecurityHandler securityHandler, SocketAddress remoteAddress)
name|CREATE3Response
name|create
parameter_list|(
name|XDR
name|xdr
parameter_list|,
name|SecurityHandler
name|securityHandler
parameter_list|,
name|SocketAddress
name|remoteAddress
parameter_list|)
block|{
name|CREATE3Response
name|response
init|=
operator|new
name|CREATE3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3_OK
argument_list|)
decl_stmt|;
name|CREATE3Request
name|request
decl_stmt|;
try|try
block|{
name|request
operator|=
name|CREATE3Request
operator|.
name|deserialize
argument_list|(
name|xdr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Invalid CREATE request"
argument_list|)
expr_stmt|;
return|return
operator|new
name|CREATE3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_INVAL
argument_list|)
return|;
block|}
name|FileHandle
name|dirHandle
init|=
name|request
operator|.
name|getHandle
argument_list|()
decl_stmt|;
name|String
name|fileName
init|=
name|request
operator|.
name|getName
argument_list|()
decl_stmt|;
name|int
name|namenodeId
init|=
name|dirHandle
operator|.
name|getNamenodeId
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"NFS CREATE dir fileHandle: {} filename: {} client: {}"
argument_list|,
name|dirHandle
operator|.
name|dumpFileHandle
argument_list|()
argument_list|,
name|fileName
argument_list|,
name|remoteAddress
argument_list|)
expr_stmt|;
block|}
name|DFSClient
name|dfsClient
init|=
name|clientCache
operator|.
name|getDfsClient
argument_list|(
name|securityHandler
operator|.
name|getUser
argument_list|()
argument_list|,
name|namenodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|dfsClient
operator|==
literal|null
condition|)
block|{
name|response
operator|.
name|setStatus
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_SERVERFAULT
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
name|int
name|createMode
init|=
name|request
operator|.
name|getMode
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|createMode
operator|!=
name|Nfs3Constant
operator|.
name|CREATE_EXCLUSIVE
operator|)
operator|&&
name|request
operator|.
name|getObjAttr
argument_list|()
operator|.
name|getUpdateFields
argument_list|()
operator|.
name|contains
argument_list|(
name|SetAttrField
operator|.
name|SIZE
argument_list|)
operator|&&
name|request
operator|.
name|getObjAttr
argument_list|()
operator|.
name|getSize
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Setting file size is not supported when creating file: {} "
operator|+
literal|"dir fileId: {}"
argument_list|,
name|fileName
argument_list|,
name|dirHandle
operator|.
name|getFileId
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|CREATE3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_INVAL
argument_list|)
return|;
block|}
name|HdfsDataOutputStream
name|fos
init|=
literal|null
decl_stmt|;
name|String
name|dirFileIdPath
init|=
name|Nfs3Utils
operator|.
name|getFileIdPath
argument_list|(
name|dirHandle
argument_list|)
decl_stmt|;
name|Nfs3FileAttributes
name|preOpDirAttr
init|=
literal|null
decl_stmt|;
name|Nfs3FileAttributes
name|postOpObjAttr
init|=
literal|null
decl_stmt|;
name|FileHandle
name|fileHandle
init|=
literal|null
decl_stmt|;
name|WccData
name|dirWcc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|preOpDirAttr
operator|=
name|Nfs3Utils
operator|.
name|getFileAttr
argument_list|(
name|dfsClient
argument_list|,
name|dirFileIdPath
argument_list|,
name|iug
argument_list|)
expr_stmt|;
if|if
condition|(
name|preOpDirAttr
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't get path for dirHandle: {}"
argument_list|,
name|dirHandle
argument_list|)
expr_stmt|;
return|return
operator|new
name|CREATE3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_STALE
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
name|checkAccessPrivilege
argument_list|(
name|remoteAddress
argument_list|,
name|AccessPrivilege
operator|.
name|READ_WRITE
argument_list|)
condition|)
block|{
return|return
operator|new
name|CREATE3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_ACCES
argument_list|,
literal|null
argument_list|,
name|preOpDirAttr
argument_list|,
operator|new
name|WccData
argument_list|(
name|Nfs3Utils
operator|.
name|getWccAttr
argument_list|(
name|preOpDirAttr
argument_list|)
argument_list|,
name|preOpDirAttr
argument_list|)
argument_list|)
return|;
block|}
name|String
name|fileIdPath
init|=
name|Nfs3Utils
operator|.
name|getFileIdPath
argument_list|(
name|dirHandle
argument_list|)
operator|+
literal|"/"
operator|+
name|fileName
decl_stmt|;
name|SetAttr3
name|setAttr3
init|=
name|request
operator|.
name|getObjAttr
argument_list|()
decl_stmt|;
assert|assert
operator|(
name|setAttr3
operator|!=
literal|null
operator|)
assert|;
name|FsPermission
name|permission
init|=
name|setAttr3
operator|.
name|getUpdateFields
argument_list|()
operator|.
name|contains
argument_list|(
name|SetAttrField
operator|.
name|MODE
argument_list|)
condition|?
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
name|setAttr3
operator|.
name|getMode
argument_list|()
argument_list|)
else|:
name|FsPermission
operator|.
name|getDefault
argument_list|()
operator|.
name|applyUMask
argument_list|(
name|umask
argument_list|)
decl_stmt|;
name|EnumSet
argument_list|<
name|CreateFlag
argument_list|>
name|flag
init|=
operator|(
name|createMode
operator|!=
name|Nfs3Constant
operator|.
name|CREATE_EXCLUSIVE
operator|)
condition|?
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateFlag
operator|.
name|CREATE
argument_list|,
name|CreateFlag
operator|.
name|OVERWRITE
argument_list|)
else|:
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateFlag
operator|.
name|CREATE
argument_list|)
decl_stmt|;
name|fos
operator|=
name|dfsClient
operator|.
name|createWrappedOutputStream
argument_list|(
name|dfsClient
operator|.
name|create
argument_list|(
name|fileIdPath
argument_list|,
name|permission
argument_list|,
name|flag
argument_list|,
literal|false
argument_list|,
name|replication
argument_list|,
name|blockSize
argument_list|,
literal|null
argument_list|,
name|bufferSize
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|createMode
operator|==
name|Nfs3Constant
operator|.
name|CREATE_UNCHECKED
operator|)
operator|||
operator|(
name|createMode
operator|==
name|Nfs3Constant
operator|.
name|CREATE_GUARDED
operator|)
condition|)
block|{
comment|// Set group if it's not specified in the request.
if|if
condition|(
operator|!
name|setAttr3
operator|.
name|getUpdateFields
argument_list|()
operator|.
name|contains
argument_list|(
name|SetAttrField
operator|.
name|GID
argument_list|)
condition|)
block|{
name|setAttr3
operator|.
name|getUpdateFields
argument_list|()
operator|.
name|add
argument_list|(
name|SetAttrField
operator|.
name|GID
argument_list|)
expr_stmt|;
name|setAttr3
operator|.
name|setGid
argument_list|(
name|securityHandler
operator|.
name|getGid
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|setattrInternal
argument_list|(
name|dfsClient
argument_list|,
name|fileIdPath
argument_list|,
name|setAttr3
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|postOpObjAttr
operator|=
name|Nfs3Utils
operator|.
name|getFileAttr
argument_list|(
name|dfsClient
argument_list|,
name|fileIdPath
argument_list|,
name|iug
argument_list|)
expr_stmt|;
name|dirWcc
operator|=
name|Nfs3Utils
operator|.
name|createWccData
argument_list|(
name|Nfs3Utils
operator|.
name|getWccAttr
argument_list|(
name|preOpDirAttr
argument_list|)
argument_list|,
name|dfsClient
argument_list|,
name|dirFileIdPath
argument_list|,
name|iug
argument_list|)
expr_stmt|;
comment|// Add open stream
name|OpenFileCtx
name|openFileCtx
init|=
operator|new
name|OpenFileCtx
argument_list|(
name|fos
argument_list|,
name|postOpObjAttr
argument_list|,
name|writeDumpDir
operator|+
literal|"/"
operator|+
name|postOpObjAttr
operator|.
name|getFileId
argument_list|()
argument_list|,
name|dfsClient
argument_list|,
name|iug
argument_list|,
name|aixCompatMode
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|fileHandle
operator|=
operator|new
name|FileHandle
argument_list|(
name|postOpObjAttr
operator|.
name|getFileId
argument_list|()
argument_list|,
name|namenodeId
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|writeManager
operator|.
name|addOpenFileStream
argument_list|(
name|fileHandle
argument_list|,
name|openFileCtx
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Can't add more stream, close it."
operator|+
literal|" Future write will become append"
argument_list|)
expr_stmt|;
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
name|fos
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Opened stream for file: {}, fileId: {}"
argument_list|,
name|fileName
argument_list|,
name|fileHandle
operator|.
name|getFileId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|fos
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't close stream for dirFileId: {} filename: {}"
argument_list|,
name|dirHandle
operator|.
name|getFileId
argument_list|()
argument_list|,
name|fileName
argument_list|,
name|e1
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|dirWcc
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|dirWcc
operator|=
name|Nfs3Utils
operator|.
name|createWccData
argument_list|(
name|Nfs3Utils
operator|.
name|getWccAttr
argument_list|(
name|preOpDirAttr
argument_list|)
argument_list|,
name|dfsClient
argument_list|,
name|dirFileIdPath
argument_list|,
name|iug
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Can't get postOpDirAttr for dirFileId: {}"
argument_list|,
name|dirHandle
operator|.
name|getFileId
argument_list|()
argument_list|,
name|e1
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|status
init|=
name|mapErrorStatus
argument_list|(
name|e
argument_list|)
decl_stmt|;
return|return
operator|new
name|CREATE3Response
argument_list|(
name|status
argument_list|,
name|fileHandle
argument_list|,
name|postOpObjAttr
argument_list|,
name|dirWcc
argument_list|)
return|;
block|}
return|return
operator|new
name|CREATE3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3_OK
argument_list|,
name|fileHandle
argument_list|,
name|postOpObjAttr
argument_list|,
name|dirWcc
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|mkdir (XDR xdr, RpcInfo info)
specifier|public
name|MKDIR3Response
name|mkdir
parameter_list|(
name|XDR
name|xdr
parameter_list|,
name|RpcInfo
name|info
parameter_list|)
block|{
return|return
name|mkdir
argument_list|(
name|xdr
argument_list|,
name|getSecurityHandler
argument_list|(
name|info
argument_list|)
argument_list|,
name|info
operator|.
name|remoteAddress
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|mkdir (XDR xdr, SecurityHandler securityHandler, SocketAddress remoteAddress)
name|MKDIR3Response
name|mkdir
parameter_list|(
name|XDR
name|xdr
parameter_list|,
name|SecurityHandler
name|securityHandler
parameter_list|,
name|SocketAddress
name|remoteAddress
parameter_list|)
block|{
name|MKDIR3Response
name|response
init|=
operator|new
name|MKDIR3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3_OK
argument_list|)
decl_stmt|;
name|MKDIR3Request
name|request
decl_stmt|;
try|try
block|{
name|request
operator|=
name|MKDIR3Request
operator|.
name|deserialize
argument_list|(
name|xdr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Invalid MKDIR request"
argument_list|)
expr_stmt|;
return|return
operator|new
name|MKDIR3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_INVAL
argument_list|)
return|;
block|}
name|FileHandle
name|dirHandle
init|=
name|request
operator|.
name|getHandle
argument_list|()
decl_stmt|;
name|String
name|fileName
init|=
name|request
operator|.
name|getName
argument_list|()
decl_stmt|;
name|int
name|namenodeId
init|=
name|dirHandle
operator|.
name|getNamenodeId
argument_list|()
decl_stmt|;
name|DFSClient
name|dfsClient
init|=
name|clientCache
operator|.
name|getDfsClient
argument_list|(
name|securityHandler
operator|.
name|getUser
argument_list|()
argument_list|,
name|namenodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|dfsClient
operator|==
literal|null
condition|)
block|{
name|response
operator|.
name|setStatus
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_SERVERFAULT
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"NFS MKDIR dirHandle: {} filename: {} client: {}"
argument_list|,
name|dirHandle
operator|.
name|dumpFileHandle
argument_list|()
argument_list|,
name|fileName
argument_list|,
name|remoteAddress
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|getObjAttr
argument_list|()
operator|.
name|getUpdateFields
argument_list|()
operator|.
name|contains
argument_list|(
name|SetAttrField
operator|.
name|SIZE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Setting file size is not supported when mkdir: "
operator|+
literal|"{} in dirHandle {}"
argument_list|,
name|fileName
argument_list|,
name|dirHandle
argument_list|)
expr_stmt|;
return|return
operator|new
name|MKDIR3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_INVAL
argument_list|)
return|;
block|}
name|String
name|dirFileIdPath
init|=
name|Nfs3Utils
operator|.
name|getFileIdPath
argument_list|(
name|dirHandle
argument_list|)
decl_stmt|;
name|Nfs3FileAttributes
name|preOpDirAttr
init|=
literal|null
decl_stmt|;
name|Nfs3FileAttributes
name|postOpDirAttr
init|=
literal|null
decl_stmt|;
name|Nfs3FileAttributes
name|postOpObjAttr
init|=
literal|null
decl_stmt|;
name|FileHandle
name|objFileHandle
init|=
literal|null
decl_stmt|;
try|try
block|{
name|preOpDirAttr
operator|=
name|Nfs3Utils
operator|.
name|getFileAttr
argument_list|(
name|dfsClient
argument_list|,
name|dirFileIdPath
argument_list|,
name|iug
argument_list|)
expr_stmt|;
if|if
condition|(
name|preOpDirAttr
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Can't get path for dir fileId: {}"
argument_list|,
name|dirHandle
operator|.
name|getFileId
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|MKDIR3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_STALE
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
name|checkAccessPrivilege
argument_list|(
name|remoteAddress
argument_list|,
name|AccessPrivilege
operator|.
name|READ_WRITE
argument_list|)
condition|)
block|{
return|return
operator|new
name|MKDIR3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_ACCES
argument_list|,
literal|null
argument_list|,
name|preOpDirAttr
argument_list|,
operator|new
name|WccData
argument_list|(
name|Nfs3Utils
operator|.
name|getWccAttr
argument_list|(
name|preOpDirAttr
argument_list|)
argument_list|,
name|preOpDirAttr
argument_list|)
argument_list|)
return|;
block|}
specifier|final
name|String
name|fileIdPath
init|=
name|dirFileIdPath
operator|+
literal|"/"
operator|+
name|fileName
decl_stmt|;
name|SetAttr3
name|setAttr3
init|=
name|request
operator|.
name|getObjAttr
argument_list|()
decl_stmt|;
name|FsPermission
name|permission
init|=
name|setAttr3
operator|.
name|getUpdateFields
argument_list|()
operator|.
name|contains
argument_list|(
name|SetAttrField
operator|.
name|MODE
argument_list|)
condition|?
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
name|setAttr3
operator|.
name|getMode
argument_list|()
argument_list|)
else|:
name|FsPermission
operator|.
name|getDefault
argument_list|()
operator|.
name|applyUMask
argument_list|(
name|umask
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dfsClient
operator|.
name|mkdirs
argument_list|(
name|fileIdPath
argument_list|,
name|permission
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|WccData
name|dirWcc
init|=
name|Nfs3Utils
operator|.
name|createWccData
argument_list|(
name|Nfs3Utils
operator|.
name|getWccAttr
argument_list|(
name|preOpDirAttr
argument_list|)
argument_list|,
name|dfsClient
argument_list|,
name|dirFileIdPath
argument_list|,
name|iug
argument_list|)
decl_stmt|;
return|return
operator|new
name|MKDIR3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_IO
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|dirWcc
argument_list|)
return|;
block|}
comment|// Set group if it's not specified in the request.
if|if
condition|(
operator|!
name|setAttr3
operator|.
name|getUpdateFields
argument_list|()
operator|.
name|contains
argument_list|(
name|SetAttrField
operator|.
name|GID
argument_list|)
condition|)
block|{
name|setAttr3
operator|.
name|getUpdateFields
argument_list|()
operator|.
name|add
argument_list|(
name|SetAttrField
operator|.
name|GID
argument_list|)
expr_stmt|;
name|setAttr3
operator|.
name|setGid
argument_list|(
name|securityHandler
operator|.
name|getGid
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|setattrInternal
argument_list|(
name|dfsClient
argument_list|,
name|fileIdPath
argument_list|,
name|setAttr3
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|postOpObjAttr
operator|=
name|Nfs3Utils
operator|.
name|getFileAttr
argument_list|(
name|dfsClient
argument_list|,
name|fileIdPath
argument_list|,
name|iug
argument_list|)
expr_stmt|;
name|objFileHandle
operator|=
operator|new
name|FileHandle
argument_list|(
name|postOpObjAttr
operator|.
name|getFileId
argument_list|()
argument_list|,
name|namenodeId
argument_list|)
expr_stmt|;
name|WccData
name|dirWcc
init|=
name|Nfs3Utils
operator|.
name|createWccData
argument_list|(
name|Nfs3Utils
operator|.
name|getWccAttr
argument_list|(
name|preOpDirAttr
argument_list|)
argument_list|,
name|dfsClient
argument_list|,
name|dirFileIdPath
argument_list|,
name|iug
argument_list|)
decl_stmt|;
return|return
operator|new
name|MKDIR3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3_OK
argument_list|,
operator|new
name|FileHandle
argument_list|(
name|postOpObjAttr
operator|.
name|getFileId
argument_list|()
argument_list|,
name|namenodeId
argument_list|)
argument_list|,
name|postOpObjAttr
argument_list|,
name|dirWcc
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// Try to return correct WccData
if|if
condition|(
name|postOpDirAttr
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|postOpDirAttr
operator|=
name|Nfs3Utils
operator|.
name|getFileAttr
argument_list|(
name|dfsClient
argument_list|,
name|dirFileIdPath
argument_list|,
name|iug
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Can't get postOpDirAttr for {}"
argument_list|,
name|dirFileIdPath
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|WccData
name|dirWcc
init|=
operator|new
name|WccData
argument_list|(
name|Nfs3Utils
operator|.
name|getWccAttr
argument_list|(
name|preOpDirAttr
argument_list|)
argument_list|,
name|postOpDirAttr
argument_list|)
decl_stmt|;
name|int
name|status
init|=
name|mapErrorStatus
argument_list|(
name|e
argument_list|)
decl_stmt|;
return|return
operator|new
name|MKDIR3Response
argument_list|(
name|status
argument_list|,
name|objFileHandle
argument_list|,
name|postOpObjAttr
argument_list|,
name|dirWcc
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|mknod (XDR xdr, RpcInfo info)
specifier|public
name|READDIR3Response
name|mknod
parameter_list|(
name|XDR
name|xdr
parameter_list|,
name|RpcInfo
name|info
parameter_list|)
block|{
return|return
operator|new
name|READDIR3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_NOTSUPP
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|remove (XDR xdr, RpcInfo info)
specifier|public
name|REMOVE3Response
name|remove
parameter_list|(
name|XDR
name|xdr
parameter_list|,
name|RpcInfo
name|info
parameter_list|)
block|{
return|return
name|remove
argument_list|(
name|xdr
argument_list|,
name|getSecurityHandler
argument_list|(
name|info
argument_list|)
argument_list|,
name|info
operator|.
name|remoteAddress
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|remove (XDR xdr, SecurityHandler securityHandler, SocketAddress remoteAddress)
name|REMOVE3Response
name|remove
parameter_list|(
name|XDR
name|xdr
parameter_list|,
name|SecurityHandler
name|securityHandler
parameter_list|,
name|SocketAddress
name|remoteAddress
parameter_list|)
block|{
name|REMOVE3Response
name|response
init|=
operator|new
name|REMOVE3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3_OK
argument_list|)
decl_stmt|;
name|REMOVE3Request
name|request
decl_stmt|;
try|try
block|{
name|request
operator|=
name|REMOVE3Request
operator|.
name|deserialize
argument_list|(
name|xdr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Invalid REMOVE request"
argument_list|)
expr_stmt|;
return|return
operator|new
name|REMOVE3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_INVAL
argument_list|)
return|;
block|}
name|FileHandle
name|dirHandle
init|=
name|request
operator|.
name|getHandle
argument_list|()
decl_stmt|;
name|int
name|namenodeId
init|=
name|dirHandle
operator|.
name|getNamenodeId
argument_list|()
decl_stmt|;
name|String
name|fileName
init|=
name|request
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"NFS REMOVE dir fileHandle: {} fileName: {} client: {}"
argument_list|,
name|dirHandle
operator|.
name|dumpFileHandle
argument_list|()
argument_list|,
name|fileName
argument_list|,
name|remoteAddress
argument_list|)
expr_stmt|;
block|}
name|DFSClient
name|dfsClient
init|=
name|clientCache
operator|.
name|getDfsClient
argument_list|(
name|securityHandler
operator|.
name|getUser
argument_list|()
argument_list|,
name|namenodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|dfsClient
operator|==
literal|null
condition|)
block|{
name|response
operator|.
name|setStatus
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_SERVERFAULT
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
name|String
name|dirFileIdPath
init|=
name|Nfs3Utils
operator|.
name|getFileIdPath
argument_list|(
name|dirHandle
argument_list|)
decl_stmt|;
name|Nfs3FileAttributes
name|preOpDirAttr
init|=
literal|null
decl_stmt|;
name|Nfs3FileAttributes
name|postOpDirAttr
init|=
literal|null
decl_stmt|;
try|try
block|{
name|preOpDirAttr
operator|=
name|Nfs3Utils
operator|.
name|getFileAttr
argument_list|(
name|dfsClient
argument_list|,
name|dirFileIdPath
argument_list|,
name|iug
argument_list|)
expr_stmt|;
if|if
condition|(
name|preOpDirAttr
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Can't get path for dir fileId: {}"
argument_list|,
name|dirHandle
operator|.
name|getFileId
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|REMOVE3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_STALE
argument_list|)
return|;
block|}
name|WccData
name|errWcc
init|=
operator|new
name|WccData
argument_list|(
name|Nfs3Utils
operator|.
name|getWccAttr
argument_list|(
name|preOpDirAttr
argument_list|)
argument_list|,
name|preOpDirAttr
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|checkAccessPrivilege
argument_list|(
name|remoteAddress
argument_list|,
name|AccessPrivilege
operator|.
name|READ_WRITE
argument_list|)
condition|)
block|{
return|return
operator|new
name|REMOVE3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_ACCES
argument_list|,
name|errWcc
argument_list|)
return|;
block|}
name|String
name|fileIdPath
init|=
name|dirFileIdPath
operator|+
literal|"/"
operator|+
name|fileName
decl_stmt|;
name|HdfsFileStatus
name|fstat
init|=
name|Nfs3Utils
operator|.
name|getFileStatus
argument_list|(
name|dfsClient
argument_list|,
name|fileIdPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|fstat
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|REMOVE3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_NOENT
argument_list|,
name|errWcc
argument_list|)
return|;
block|}
if|if
condition|(
name|fstat
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
return|return
operator|new
name|REMOVE3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_ISDIR
argument_list|,
name|errWcc
argument_list|)
return|;
block|}
name|boolean
name|result
init|=
name|dfsClient
operator|.
name|delete
argument_list|(
name|fileIdPath
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|WccData
name|dirWcc
init|=
name|Nfs3Utils
operator|.
name|createWccData
argument_list|(
name|Nfs3Utils
operator|.
name|getWccAttr
argument_list|(
name|preOpDirAttr
argument_list|)
argument_list|,
name|dfsClient
argument_list|,
name|dirFileIdPath
argument_list|,
name|iug
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|result
condition|)
block|{
return|return
operator|new
name|REMOVE3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_ACCES
argument_list|,
name|dirWcc
argument_list|)
return|;
block|}
return|return
operator|new
name|REMOVE3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3_OK
argument_list|,
name|dirWcc
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// Try to return correct WccData
if|if
condition|(
name|postOpDirAttr
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|postOpDirAttr
operator|=
name|Nfs3Utils
operator|.
name|getFileAttr
argument_list|(
name|dfsClient
argument_list|,
name|dirFileIdPath
argument_list|,
name|iug
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Can't get postOpDirAttr for {}"
argument_list|,
name|dirFileIdPath
argument_list|,
name|e1
argument_list|)
expr_stmt|;
block|}
block|}
name|WccData
name|dirWcc
init|=
operator|new
name|WccData
argument_list|(
name|Nfs3Utils
operator|.
name|getWccAttr
argument_list|(
name|preOpDirAttr
argument_list|)
argument_list|,
name|postOpDirAttr
argument_list|)
decl_stmt|;
name|int
name|status
init|=
name|mapErrorStatus
argument_list|(
name|e
argument_list|)
decl_stmt|;
return|return
operator|new
name|REMOVE3Response
argument_list|(
name|status
argument_list|,
name|dirWcc
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|rmdir (XDR xdr, RpcInfo info)
specifier|public
name|RMDIR3Response
name|rmdir
parameter_list|(
name|XDR
name|xdr
parameter_list|,
name|RpcInfo
name|info
parameter_list|)
block|{
return|return
name|rmdir
argument_list|(
name|xdr
argument_list|,
name|getSecurityHandler
argument_list|(
name|info
argument_list|)
argument_list|,
name|info
operator|.
name|remoteAddress
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|rmdir (XDR xdr, SecurityHandler securityHandler, SocketAddress remoteAddress)
name|RMDIR3Response
name|rmdir
parameter_list|(
name|XDR
name|xdr
parameter_list|,
name|SecurityHandler
name|securityHandler
parameter_list|,
name|SocketAddress
name|remoteAddress
parameter_list|)
block|{
name|RMDIR3Response
name|response
init|=
operator|new
name|RMDIR3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3_OK
argument_list|)
decl_stmt|;
name|RMDIR3Request
name|request
decl_stmt|;
try|try
block|{
name|request
operator|=
name|RMDIR3Request
operator|.
name|deserialize
argument_list|(
name|xdr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Invalid RMDIR request"
argument_list|)
expr_stmt|;
return|return
operator|new
name|RMDIR3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_INVAL
argument_list|)
return|;
block|}
name|FileHandle
name|dirHandle
init|=
name|request
operator|.
name|getHandle
argument_list|()
decl_stmt|;
name|String
name|fileName
init|=
name|request
operator|.
name|getName
argument_list|()
decl_stmt|;
name|int
name|namenodeId
init|=
name|dirHandle
operator|.
name|getNamenodeId
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"NFS RMDIR dir fileHandle: {} fileName: {} client: {}"
argument_list|,
name|dirHandle
operator|.
name|dumpFileHandle
argument_list|()
argument_list|,
name|fileName
argument_list|,
name|remoteAddress
argument_list|)
expr_stmt|;
block|}
name|DFSClient
name|dfsClient
init|=
name|clientCache
operator|.
name|getDfsClient
argument_list|(
name|securityHandler
operator|.
name|getUser
argument_list|()
argument_list|,
name|namenodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|dfsClient
operator|==
literal|null
condition|)
block|{
name|response
operator|.
name|setStatus
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_SERVERFAULT
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
name|String
name|dirFileIdPath
init|=
name|Nfs3Utils
operator|.
name|getFileIdPath
argument_list|(
name|dirHandle
argument_list|)
decl_stmt|;
name|Nfs3FileAttributes
name|preOpDirAttr
init|=
literal|null
decl_stmt|;
name|Nfs3FileAttributes
name|postOpDirAttr
init|=
literal|null
decl_stmt|;
try|try
block|{
name|preOpDirAttr
operator|=
name|Nfs3Utils
operator|.
name|getFileAttr
argument_list|(
name|dfsClient
argument_list|,
name|dirFileIdPath
argument_list|,
name|iug
argument_list|)
expr_stmt|;
if|if
condition|(
name|preOpDirAttr
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Can't get path for dir fileId: {}"
argument_list|,
name|dirHandle
operator|.
name|getFileId
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|RMDIR3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_STALE
argument_list|)
return|;
block|}
name|WccData
name|errWcc
init|=
operator|new
name|WccData
argument_list|(
name|Nfs3Utils
operator|.
name|getWccAttr
argument_list|(
name|preOpDirAttr
argument_list|)
argument_list|,
name|preOpDirAttr
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|checkAccessPrivilege
argument_list|(
name|remoteAddress
argument_list|,
name|AccessPrivilege
operator|.
name|READ_WRITE
argument_list|)
condition|)
block|{
return|return
operator|new
name|RMDIR3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_ACCES
argument_list|,
name|errWcc
argument_list|)
return|;
block|}
name|String
name|fileIdPath
init|=
name|dirFileIdPath
operator|+
literal|"/"
operator|+
name|fileName
decl_stmt|;
name|HdfsFileStatus
name|fstat
init|=
name|Nfs3Utils
operator|.
name|getFileStatus
argument_list|(
name|dfsClient
argument_list|,
name|fileIdPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|fstat
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|RMDIR3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_NOENT
argument_list|,
name|errWcc
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
name|fstat
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
return|return
operator|new
name|RMDIR3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_NOTDIR
argument_list|,
name|errWcc
argument_list|)
return|;
block|}
if|if
condition|(
name|fstat
operator|.
name|getChildrenNum
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
operator|new
name|RMDIR3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_NOTEMPTY
argument_list|,
name|errWcc
argument_list|)
return|;
block|}
name|boolean
name|result
init|=
name|dfsClient
operator|.
name|delete
argument_list|(
name|fileIdPath
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|WccData
name|dirWcc
init|=
name|Nfs3Utils
operator|.
name|createWccData
argument_list|(
name|Nfs3Utils
operator|.
name|getWccAttr
argument_list|(
name|preOpDirAttr
argument_list|)
argument_list|,
name|dfsClient
argument_list|,
name|dirFileIdPath
argument_list|,
name|iug
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|result
condition|)
block|{
return|return
operator|new
name|RMDIR3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_ACCES
argument_list|,
name|dirWcc
argument_list|)
return|;
block|}
return|return
operator|new
name|RMDIR3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3_OK
argument_list|,
name|dirWcc
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// Try to return correct WccData
if|if
condition|(
name|postOpDirAttr
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|postOpDirAttr
operator|=
name|Nfs3Utils
operator|.
name|getFileAttr
argument_list|(
name|dfsClient
argument_list|,
name|dirFileIdPath
argument_list|,
name|iug
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Can't get postOpDirAttr for {}"
argument_list|,
name|dirFileIdPath
argument_list|,
name|e1
argument_list|)
expr_stmt|;
block|}
block|}
name|WccData
name|dirWcc
init|=
operator|new
name|WccData
argument_list|(
name|Nfs3Utils
operator|.
name|getWccAttr
argument_list|(
name|preOpDirAttr
argument_list|)
argument_list|,
name|postOpDirAttr
argument_list|)
decl_stmt|;
name|int
name|status
init|=
name|mapErrorStatus
argument_list|(
name|e
argument_list|)
decl_stmt|;
return|return
operator|new
name|RMDIR3Response
argument_list|(
name|status
argument_list|,
name|dirWcc
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|rename (XDR xdr, RpcInfo info)
specifier|public
name|RENAME3Response
name|rename
parameter_list|(
name|XDR
name|xdr
parameter_list|,
name|RpcInfo
name|info
parameter_list|)
block|{
return|return
name|rename
argument_list|(
name|xdr
argument_list|,
name|getSecurityHandler
argument_list|(
name|info
argument_list|)
argument_list|,
name|info
operator|.
name|remoteAddress
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|rename (XDR xdr, SecurityHandler securityHandler, SocketAddress remoteAddress)
name|RENAME3Response
name|rename
parameter_list|(
name|XDR
name|xdr
parameter_list|,
name|SecurityHandler
name|securityHandler
parameter_list|,
name|SocketAddress
name|remoteAddress
parameter_list|)
block|{
name|RENAME3Response
name|response
init|=
operator|new
name|RENAME3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3_OK
argument_list|)
decl_stmt|;
name|RENAME3Request
name|request
init|=
literal|null
decl_stmt|;
try|try
block|{
name|request
operator|=
name|RENAME3Request
operator|.
name|deserialize
argument_list|(
name|xdr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Invalid RENAME request"
argument_list|)
expr_stmt|;
return|return
operator|new
name|RENAME3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_INVAL
argument_list|)
return|;
block|}
name|FileHandle
name|fromHandle
init|=
name|request
operator|.
name|getFromDirHandle
argument_list|()
decl_stmt|;
name|int
name|fromNamenodeId
init|=
name|fromHandle
operator|.
name|getNamenodeId
argument_list|()
decl_stmt|;
name|String
name|fromName
init|=
name|request
operator|.
name|getFromName
argument_list|()
decl_stmt|;
name|FileHandle
name|toHandle
init|=
name|request
operator|.
name|getToDirHandle
argument_list|()
decl_stmt|;
name|int
name|toNamenodeId
init|=
name|toHandle
operator|.
name|getNamenodeId
argument_list|()
decl_stmt|;
name|String
name|toName
init|=
name|request
operator|.
name|getToName
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"NFS RENAME from: {}/{} to: {}/{} client: {}"
argument_list|,
name|fromHandle
operator|.
name|dumpFileHandle
argument_list|()
argument_list|,
name|fromName
argument_list|,
name|toHandle
operator|.
name|dumpFileHandle
argument_list|()
argument_list|,
name|toName
argument_list|,
name|remoteAddress
argument_list|)
expr_stmt|;
block|}
name|DFSClient
name|dfsClient
init|=
name|clientCache
operator|.
name|getDfsClient
argument_list|(
name|securityHandler
operator|.
name|getUser
argument_list|()
argument_list|,
name|fromNamenodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|dfsClient
operator|==
literal|null
condition|)
block|{
name|response
operator|.
name|setStatus
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_SERVERFAULT
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
if|if
condition|(
name|fromNamenodeId
operator|!=
name|toNamenodeId
condition|)
block|{
comment|// renaming file from one namenode to another is not supported
name|response
operator|.
name|setStatus
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_INVAL
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
name|String
name|fromDirFileIdPath
init|=
name|Nfs3Utils
operator|.
name|getFileIdPath
argument_list|(
name|fromHandle
argument_list|)
decl_stmt|;
name|String
name|toDirFileIdPath
init|=
name|Nfs3Utils
operator|.
name|getFileIdPath
argument_list|(
name|toHandle
argument_list|)
decl_stmt|;
name|Nfs3FileAttributes
name|fromPreOpAttr
init|=
literal|null
decl_stmt|;
name|Nfs3FileAttributes
name|toPreOpAttr
init|=
literal|null
decl_stmt|;
name|WccData
name|fromDirWcc
init|=
literal|null
decl_stmt|;
name|WccData
name|toDirWcc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fromPreOpAttr
operator|=
name|Nfs3Utils
operator|.
name|getFileAttr
argument_list|(
name|dfsClient
argument_list|,
name|fromDirFileIdPath
argument_list|,
name|iug
argument_list|)
expr_stmt|;
if|if
condition|(
name|fromPreOpAttr
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Can't get path for fromHandle fileId: {}"
argument_list|,
name|fromHandle
operator|.
name|getFileId
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|RENAME3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_STALE
argument_list|)
return|;
block|}
name|toPreOpAttr
operator|=
name|Nfs3Utils
operator|.
name|getFileAttr
argument_list|(
name|dfsClient
argument_list|,
name|toDirFileIdPath
argument_list|,
name|iug
argument_list|)
expr_stmt|;
if|if
condition|(
name|toPreOpAttr
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Can't get path for toHandle fileId: {}"
argument_list|,
name|toHandle
operator|.
name|getFileId
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|RENAME3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_STALE
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
name|checkAccessPrivilege
argument_list|(
name|remoteAddress
argument_list|,
name|AccessPrivilege
operator|.
name|READ_WRITE
argument_list|)
condition|)
block|{
name|WccData
name|fromWcc
init|=
operator|new
name|WccData
argument_list|(
name|Nfs3Utils
operator|.
name|getWccAttr
argument_list|(
name|fromPreOpAttr
argument_list|)
argument_list|,
name|fromPreOpAttr
argument_list|)
decl_stmt|;
name|WccData
name|toWcc
init|=
operator|new
name|WccData
argument_list|(
name|Nfs3Utils
operator|.
name|getWccAttr
argument_list|(
name|toPreOpAttr
argument_list|)
argument_list|,
name|toPreOpAttr
argument_list|)
decl_stmt|;
return|return
operator|new
name|RENAME3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_ACCES
argument_list|,
name|fromWcc
argument_list|,
name|toWcc
argument_list|)
return|;
block|}
name|String
name|src
init|=
name|fromDirFileIdPath
operator|+
literal|"/"
operator|+
name|fromName
decl_stmt|;
name|String
name|dst
init|=
name|toDirFileIdPath
operator|+
literal|"/"
operator|+
name|toName
decl_stmt|;
name|dfsClient
operator|.
name|rename
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
name|Options
operator|.
name|Rename
operator|.
name|NONE
argument_list|)
expr_stmt|;
comment|// Assemble the reply
name|fromDirWcc
operator|=
name|Nfs3Utils
operator|.
name|createWccData
argument_list|(
name|Nfs3Utils
operator|.
name|getWccAttr
argument_list|(
name|fromPreOpAttr
argument_list|)
argument_list|,
name|dfsClient
argument_list|,
name|fromDirFileIdPath
argument_list|,
name|iug
argument_list|)
expr_stmt|;
name|toDirWcc
operator|=
name|Nfs3Utils
operator|.
name|createWccData
argument_list|(
name|Nfs3Utils
operator|.
name|getWccAttr
argument_list|(
name|toPreOpAttr
argument_list|)
argument_list|,
name|dfsClient
argument_list|,
name|toDirFileIdPath
argument_list|,
name|iug
argument_list|)
expr_stmt|;
return|return
operator|new
name|RENAME3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3_OK
argument_list|,
name|fromDirWcc
argument_list|,
name|toDirWcc
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// Try to return correct WccData
try|try
block|{
name|fromDirWcc
operator|=
name|Nfs3Utils
operator|.
name|createWccData
argument_list|(
name|Nfs3Utils
operator|.
name|getWccAttr
argument_list|(
name|fromPreOpAttr
argument_list|)
argument_list|,
name|dfsClient
argument_list|,
name|fromDirFileIdPath
argument_list|,
name|iug
argument_list|)
expr_stmt|;
name|toDirWcc
operator|=
name|Nfs3Utils
operator|.
name|createWccData
argument_list|(
name|Nfs3Utils
operator|.
name|getWccAttr
argument_list|(
name|toPreOpAttr
argument_list|)
argument_list|,
name|dfsClient
argument_list|,
name|toDirFileIdPath
argument_list|,
name|iug
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Can't get postOpDirAttr for {} or {}"
argument_list|,
name|fromDirFileIdPath
argument_list|,
name|toDirFileIdPath
argument_list|,
name|e1
argument_list|)
expr_stmt|;
block|}
name|int
name|status
init|=
name|mapErrorStatus
argument_list|(
name|e
argument_list|)
decl_stmt|;
return|return
operator|new
name|RENAME3Response
argument_list|(
name|status
argument_list|,
name|fromDirWcc
argument_list|,
name|toDirWcc
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|symlink (XDR xdr, RpcInfo info)
specifier|public
name|SYMLINK3Response
name|symlink
parameter_list|(
name|XDR
name|xdr
parameter_list|,
name|RpcInfo
name|info
parameter_list|)
block|{
return|return
name|symlink
argument_list|(
name|xdr
argument_list|,
name|getSecurityHandler
argument_list|(
name|info
argument_list|)
argument_list|,
name|info
operator|.
name|remoteAddress
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|symlink (XDR xdr, SecurityHandler securityHandler, SocketAddress remoteAddress)
name|SYMLINK3Response
name|symlink
parameter_list|(
name|XDR
name|xdr
parameter_list|,
name|SecurityHandler
name|securityHandler
parameter_list|,
name|SocketAddress
name|remoteAddress
parameter_list|)
block|{
name|SYMLINK3Response
name|response
init|=
operator|new
name|SYMLINK3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3_OK
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|checkAccessPrivilege
argument_list|(
name|remoteAddress
argument_list|,
name|AccessPrivilege
operator|.
name|READ_WRITE
argument_list|)
condition|)
block|{
name|response
operator|.
name|setStatus
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_ACCES
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
name|SYMLINK3Request
name|request
decl_stmt|;
try|try
block|{
name|request
operator|=
name|SYMLINK3Request
operator|.
name|deserialize
argument_list|(
name|xdr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Invalid SYMLINK request"
argument_list|)
expr_stmt|;
name|response
operator|.
name|setStatus
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_INVAL
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
name|FileHandle
name|dirHandle
init|=
name|request
operator|.
name|getHandle
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|request
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|symData
init|=
name|request
operator|.
name|getSymData
argument_list|()
decl_stmt|;
name|String
name|linkDirIdPath
init|=
name|Nfs3Utils
operator|.
name|getFileIdPath
argument_list|(
name|dirHandle
argument_list|)
decl_stmt|;
name|int
name|namenodeId
init|=
name|dirHandle
operator|.
name|getNamenodeId
argument_list|()
decl_stmt|;
comment|// Don't do any name check to source path, just leave it to HDFS
name|String
name|linkIdPath
init|=
name|linkDirIdPath
operator|+
literal|"/"
operator|+
name|name
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"NFS SYMLINK, target: {} link: {} namenodeId: {} client: {}"
argument_list|,
name|symData
argument_list|,
name|linkIdPath
argument_list|,
name|namenodeId
argument_list|,
name|remoteAddress
argument_list|)
expr_stmt|;
name|DFSClient
name|dfsClient
init|=
name|clientCache
operator|.
name|getDfsClient
argument_list|(
name|securityHandler
operator|.
name|getUser
argument_list|()
argument_list|,
name|namenodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|dfsClient
operator|==
literal|null
condition|)
block|{
name|response
operator|.
name|setStatus
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_SERVERFAULT
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
try|try
block|{
name|WccData
name|dirWcc
init|=
name|response
operator|.
name|getDirWcc
argument_list|()
decl_stmt|;
name|WccAttr
name|preOpAttr
init|=
name|Nfs3Utils
operator|.
name|getWccAttr
argument_list|(
name|dfsClient
argument_list|,
name|linkDirIdPath
argument_list|)
decl_stmt|;
name|dirWcc
operator|.
name|setPreOpAttr
argument_list|(
name|preOpAttr
argument_list|)
expr_stmt|;
name|dfsClient
operator|.
name|createSymlink
argument_list|(
name|symData
argument_list|,
name|linkIdPath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Set symlink attr is considered as to change the attr of the target
comment|// file. So no need to set symlink attr here after it's created.
name|HdfsFileStatus
name|linkstat
init|=
name|dfsClient
operator|.
name|getFileLinkInfo
argument_list|(
name|linkIdPath
argument_list|)
decl_stmt|;
name|Nfs3FileAttributes
name|objAttr
init|=
name|Nfs3Utils
operator|.
name|getNfs3FileAttrFromFileStatus
argument_list|(
name|linkstat
argument_list|,
name|iug
argument_list|)
decl_stmt|;
name|dirWcc
operator|.
name|setPostOpAttr
argument_list|(
name|Nfs3Utils
operator|.
name|getFileAttr
argument_list|(
name|dfsClient
argument_list|,
name|linkDirIdPath
argument_list|,
name|iug
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|SYMLINK3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3_OK
argument_list|,
operator|new
name|FileHandle
argument_list|(
name|objAttr
operator|.
name|getFileId
argument_list|()
argument_list|,
name|namenodeId
argument_list|)
argument_list|,
name|objAttr
argument_list|,
name|dirWcc
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|int
name|status
init|=
name|mapErrorStatus
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|response
operator|.
name|setStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|link (XDR xdr, RpcInfo info)
specifier|public
name|READDIR3Response
name|link
parameter_list|(
name|XDR
name|xdr
parameter_list|,
name|RpcInfo
name|info
parameter_list|)
block|{
return|return
operator|new
name|READDIR3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_NOTSUPP
argument_list|)
return|;
block|}
comment|/**    * Used by readdir and readdirplus to get dirents. It retries the listing if    * the startAfter can't be found anymore.    */
DECL|method|listPaths (DFSClient dfsClient, String dirFileIdPath, byte[] startAfter)
specifier|private
name|DirectoryListing
name|listPaths
parameter_list|(
name|DFSClient
name|dfsClient
parameter_list|,
name|String
name|dirFileIdPath
parameter_list|,
name|byte
index|[]
name|startAfter
parameter_list|)
throws|throws
name|IOException
block|{
name|DirectoryListing
name|dlisting
decl_stmt|;
try|try
block|{
name|dlisting
operator|=
name|dfsClient
operator|.
name|listPaths
argument_list|(
name|dirFileIdPath
argument_list|,
name|startAfter
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|e
parameter_list|)
block|{
name|IOException
name|io
init|=
name|e
operator|.
name|unwrapRemoteException
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|io
operator|instanceof
name|DirectoryListingStartAfterNotFoundException
operator|)
condition|)
block|{
throw|throw
name|io
throw|;
block|}
comment|// This happens when startAfter was just deleted
name|LOG
operator|.
name|info
argument_list|(
literal|"Cookie couldn't be found: {}, do listing from beginning"
argument_list|,
operator|new
name|String
argument_list|(
name|startAfter
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|dlisting
operator|=
name|dfsClient
operator|.
name|listPaths
argument_list|(
name|dirFileIdPath
argument_list|,
name|HdfsFileStatus
operator|.
name|EMPTY_NAME
argument_list|)
expr_stmt|;
block|}
return|return
name|dlisting
return|;
block|}
annotation|@
name|Override
DECL|method|readdir (XDR xdr, RpcInfo info)
specifier|public
name|READDIR3Response
name|readdir
parameter_list|(
name|XDR
name|xdr
parameter_list|,
name|RpcInfo
name|info
parameter_list|)
block|{
return|return
name|readdir
argument_list|(
name|xdr
argument_list|,
name|getSecurityHandler
argument_list|(
name|info
argument_list|)
argument_list|,
name|info
operator|.
name|remoteAddress
argument_list|()
argument_list|)
return|;
block|}
DECL|method|readdir (XDR xdr, SecurityHandler securityHandler, SocketAddress remoteAddress)
specifier|public
name|READDIR3Response
name|readdir
parameter_list|(
name|XDR
name|xdr
parameter_list|,
name|SecurityHandler
name|securityHandler
parameter_list|,
name|SocketAddress
name|remoteAddress
parameter_list|)
block|{
name|READDIR3Response
name|response
init|=
operator|new
name|READDIR3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3_OK
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|checkAccessPrivilege
argument_list|(
name|remoteAddress
argument_list|,
name|AccessPrivilege
operator|.
name|READ_ONLY
argument_list|)
condition|)
block|{
name|response
operator|.
name|setStatus
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_ACCES
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
name|READDIR3Request
name|request
decl_stmt|;
try|try
block|{
name|request
operator|=
name|READDIR3Request
operator|.
name|deserialize
argument_list|(
name|xdr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Invalid READDIR request"
argument_list|)
expr_stmt|;
return|return
operator|new
name|READDIR3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_INVAL
argument_list|)
return|;
block|}
name|FileHandle
name|handle
init|=
name|request
operator|.
name|getHandle
argument_list|()
decl_stmt|;
name|int
name|namenodeId
init|=
name|handle
operator|.
name|getNamenodeId
argument_list|()
decl_stmt|;
name|long
name|cookie
init|=
name|request
operator|.
name|getCookie
argument_list|()
decl_stmt|;
if|if
condition|(
name|cookie
operator|<
literal|0
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Invalid READDIR request, with negative cookie: {}"
argument_list|,
name|cookie
argument_list|)
expr_stmt|;
return|return
operator|new
name|READDIR3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_INVAL
argument_list|)
return|;
block|}
name|long
name|count
init|=
name|request
operator|.
name|getCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
operator|<=
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Nonpositive count in invalid READDIR request: {}"
argument_list|,
name|count
argument_list|)
expr_stmt|;
return|return
operator|new
name|READDIR3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3_OK
argument_list|)
return|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"NFS READDIR fileHandle: {} cookie: {} count: {} client: {}"
argument_list|,
name|handle
operator|.
name|dumpFileHandle
argument_list|()
argument_list|,
name|cookie
argument_list|,
name|count
argument_list|,
name|remoteAddress
argument_list|)
expr_stmt|;
block|}
name|DFSClient
name|dfsClient
init|=
name|clientCache
operator|.
name|getDfsClient
argument_list|(
name|securityHandler
operator|.
name|getUser
argument_list|()
argument_list|,
name|namenodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|dfsClient
operator|==
literal|null
condition|)
block|{
name|response
operator|.
name|setStatus
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_SERVERFAULT
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
name|HdfsFileStatus
name|dirStatus
decl_stmt|;
name|DirectoryListing
name|dlisting
decl_stmt|;
name|Nfs3FileAttributes
name|postOpAttr
decl_stmt|;
name|long
name|dotdotFileId
init|=
literal|0
decl_stmt|;
try|try
block|{
name|String
name|dirFileIdPath
init|=
name|Nfs3Utils
operator|.
name|getFileIdPath
argument_list|(
name|handle
argument_list|)
decl_stmt|;
name|dirStatus
operator|=
name|dfsClient
operator|.
name|getFileInfo
argument_list|(
name|dirFileIdPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|dirStatus
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Can't get path for fileId: {}"
argument_list|,
name|handle
operator|.
name|getFileId
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|READDIR3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_STALE
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
name|dirStatus
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't readdir for regular file, fileId: {}"
argument_list|,
name|handle
operator|.
name|getFileId
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|READDIR3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_NOTDIR
argument_list|)
return|;
block|}
name|long
name|cookieVerf
init|=
name|request
operator|.
name|getCookieVerf
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|cookieVerf
operator|!=
literal|0
operator|)
operator|&&
operator|(
name|cookieVerf
operator|!=
name|dirStatus
operator|.
name|getModificationTime
argument_list|()
operator|)
condition|)
block|{
if|if
condition|(
name|aixCompatMode
condition|)
block|{
comment|// The AIX NFS client misinterprets RFC-1813 and will repeatedly send
comment|// the same cookieverf value even across VFS-level readdir calls,
comment|// instead of getting a new cookieverf for every VFS-level readdir
comment|// call, and reusing the cookieverf only in the event that multiple
comment|// incremental NFS-level readdir calls must be made to fetch all of
comment|// the directory entries. This means that whenever a readdir call is
comment|// made by an AIX NFS client for a given directory, and that directory
comment|// is subsequently modified, thus changing its mtime, no later readdir
comment|// calls will succeed from AIX for that directory until the FS is
comment|// unmounted/remounted. See HDFS-6549 for more info.
name|LOG
operator|.
name|warn
argument_list|(
literal|"AIX compatibility mode enabled, ignoring cookieverf "
operator|+
literal|"mismatches."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"CookieVerf mismatch. request cookieVerf: {} "
operator|+
literal|"dir cookieVerf: {}"
argument_list|,
name|cookieVerf
argument_list|,
name|dirStatus
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|READDIR3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_BAD_COOKIE
argument_list|,
name|Nfs3Utils
operator|.
name|getFileAttr
argument_list|(
name|dfsClient
argument_list|,
name|dirFileIdPath
argument_list|,
name|iug
argument_list|)
argument_list|)
return|;
block|}
block|}
if|if
condition|(
name|cookie
operator|==
literal|0
condition|)
block|{
comment|// Get dotdot fileId
name|String
name|dotdotFileIdPath
init|=
name|dirFileIdPath
operator|+
literal|"/.."
decl_stmt|;
name|HdfsFileStatus
name|dotdotStatus
init|=
name|dfsClient
operator|.
name|getFileInfo
argument_list|(
name|dotdotFileIdPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|dotdotStatus
operator|==
literal|null
condition|)
block|{
comment|// This should not happen
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can't get path for handle path: "
operator|+
name|dotdotFileIdPath
argument_list|)
throw|;
block|}
name|dotdotFileId
operator|=
name|dotdotStatus
operator|.
name|getFileId
argument_list|()
expr_stmt|;
block|}
comment|// Get the list from the resume point
name|byte
index|[]
name|startAfter
decl_stmt|;
if|if
condition|(
name|cookie
operator|==
literal|0
condition|)
block|{
name|startAfter
operator|=
name|HdfsFileStatus
operator|.
name|EMPTY_NAME
expr_stmt|;
block|}
else|else
block|{
name|String
name|inodeIdPath
init|=
name|Nfs3Utils
operator|.
name|getFileIdPath
argument_list|(
name|cookie
argument_list|)
decl_stmt|;
name|startAfter
operator|=
name|inodeIdPath
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|dlisting
operator|=
name|listPaths
argument_list|(
name|dfsClient
argument_list|,
name|dirFileIdPath
argument_list|,
name|startAfter
argument_list|)
expr_stmt|;
name|postOpAttr
operator|=
name|Nfs3Utils
operator|.
name|getFileAttr
argument_list|(
name|dfsClient
argument_list|,
name|dirFileIdPath
argument_list|,
name|iug
argument_list|)
expr_stmt|;
if|if
condition|(
name|postOpAttr
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't get path for fileId: {}"
argument_list|,
name|handle
operator|.
name|getFileId
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|READDIR3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_STALE
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|int
name|status
init|=
name|mapErrorStatus
argument_list|(
name|e
argument_list|)
decl_stmt|;
return|return
operator|new
name|READDIR3Response
argument_list|(
name|status
argument_list|)
return|;
block|}
comment|/**      * Set up the dirents in the response. fileId is used as the cookie with one      * exception. Linux client can either be stuck with "ls" command (on REHL)      * or report "Too many levels of symbolic links" (Ubuntu).      *      * The problem is that, only two items returned, "." and ".." when the      * namespace is empty. Both of them are "/" with the same cookie(root      * fileId). Linux client doesn't think such a directory is a real directory.      * Even though NFS protocol specifies cookie is an opaque data, Linux client      * somehow doesn't like an empty dir returns same cookie for both "." and      * "..".      *      * The workaround is to use 0 as the cookie for "." and always return "." as      * the first entry in readdir/readdirplus response.      */
name|HdfsFileStatus
index|[]
name|fstatus
init|=
name|dlisting
operator|.
name|getPartialListing
argument_list|()
decl_stmt|;
name|int
name|n
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|fstatus
operator|.
name|length
argument_list|,
name|count
operator|-
literal|2
argument_list|)
decl_stmt|;
name|boolean
name|eof
init|=
operator|(
name|n
operator|>=
name|fstatus
operator|.
name|length
operator|)
operator|&&
operator|!
name|dlisting
operator|.
name|hasMore
argument_list|()
decl_stmt|;
name|Entry3
index|[]
name|entries
decl_stmt|;
if|if
condition|(
name|cookie
operator|==
literal|0
condition|)
block|{
name|entries
operator|=
operator|new
name|Entry3
index|[
name|n
operator|+
literal|2
index|]
expr_stmt|;
name|entries
index|[
literal|0
index|]
operator|=
operator|new
name|READDIR3Response
operator|.
name|Entry3
argument_list|(
name|postOpAttr
operator|.
name|getFileId
argument_list|()
argument_list|,
literal|"."
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|entries
index|[
literal|1
index|]
operator|=
operator|new
name|READDIR3Response
operator|.
name|Entry3
argument_list|(
name|dotdotFileId
argument_list|,
literal|".."
argument_list|,
name|dotdotFileId
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
name|n
operator|+
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|entries
index|[
name|i
index|]
operator|=
operator|new
name|READDIR3Response
operator|.
name|Entry3
argument_list|(
name|fstatus
index|[
name|i
operator|-
literal|2
index|]
operator|.
name|getFileId
argument_list|()
argument_list|,
name|fstatus
index|[
name|i
operator|-
literal|2
index|]
operator|.
name|getLocalName
argument_list|()
argument_list|,
name|fstatus
index|[
name|i
operator|-
literal|2
index|]
operator|.
name|getFileId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Resume from last readdirplus. If the cookie is "..", the result
comment|// list is up the directory content since HDFS uses name as resume point.
name|entries
operator|=
operator|new
name|Entry3
index|[
name|n
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|entries
index|[
name|i
index|]
operator|=
operator|new
name|READDIR3Response
operator|.
name|Entry3
argument_list|(
name|fstatus
index|[
name|i
index|]
operator|.
name|getFileId
argument_list|()
argument_list|,
name|fstatus
index|[
name|i
index|]
operator|.
name|getLocalName
argument_list|()
argument_list|,
name|fstatus
index|[
name|i
index|]
operator|.
name|getFileId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|DirList3
name|dirList
init|=
operator|new
name|READDIR3Response
operator|.
name|DirList3
argument_list|(
name|entries
argument_list|,
name|eof
argument_list|)
decl_stmt|;
return|return
operator|new
name|READDIR3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3_OK
argument_list|,
name|postOpAttr
argument_list|,
name|dirStatus
operator|.
name|getModificationTime
argument_list|()
argument_list|,
name|dirList
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|readdirplus (XDR xdr, RpcInfo info)
specifier|public
name|READDIRPLUS3Response
name|readdirplus
parameter_list|(
name|XDR
name|xdr
parameter_list|,
name|RpcInfo
name|info
parameter_list|)
block|{
return|return
name|readdirplus
argument_list|(
name|xdr
argument_list|,
name|getSecurityHandler
argument_list|(
name|info
argument_list|)
argument_list|,
name|info
operator|.
name|remoteAddress
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|readdirplus (XDR xdr, SecurityHandler securityHandler, SocketAddress remoteAddress)
name|READDIRPLUS3Response
name|readdirplus
parameter_list|(
name|XDR
name|xdr
parameter_list|,
name|SecurityHandler
name|securityHandler
parameter_list|,
name|SocketAddress
name|remoteAddress
parameter_list|)
block|{
if|if
condition|(
operator|!
name|checkAccessPrivilege
argument_list|(
name|remoteAddress
argument_list|,
name|AccessPrivilege
operator|.
name|READ_ONLY
argument_list|)
condition|)
block|{
return|return
operator|new
name|READDIRPLUS3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_ACCES
argument_list|)
return|;
block|}
name|READDIRPLUS3Request
name|request
init|=
literal|null
decl_stmt|;
try|try
block|{
name|request
operator|=
name|READDIRPLUS3Request
operator|.
name|deserialize
argument_list|(
name|xdr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Invalid READDIRPLUS request"
argument_list|)
expr_stmt|;
return|return
operator|new
name|READDIRPLUS3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_INVAL
argument_list|)
return|;
block|}
name|FileHandle
name|handle
init|=
name|request
operator|.
name|getHandle
argument_list|()
decl_stmt|;
name|int
name|namenodeId
init|=
name|handle
operator|.
name|getNamenodeId
argument_list|()
decl_stmt|;
name|long
name|cookie
init|=
name|request
operator|.
name|getCookie
argument_list|()
decl_stmt|;
if|if
condition|(
name|cookie
operator|<
literal|0
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Invalid READDIRPLUS request, with negative cookie: {}"
argument_list|,
name|cookie
argument_list|)
expr_stmt|;
return|return
operator|new
name|READDIRPLUS3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_INVAL
argument_list|)
return|;
block|}
name|long
name|dirCount
init|=
name|request
operator|.
name|getDirCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|dirCount
operator|<=
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Nonpositive dircount in invalid READDIRPLUS request: {}"
argument_list|,
name|dirCount
argument_list|)
expr_stmt|;
return|return
operator|new
name|READDIRPLUS3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_INVAL
argument_list|)
return|;
block|}
name|int
name|maxCount
init|=
name|request
operator|.
name|getMaxCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|maxCount
operator|<=
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Nonpositive maxcount in invalid READDIRPLUS request: {}"
argument_list|,
name|maxCount
argument_list|)
expr_stmt|;
return|return
operator|new
name|READDIRPLUS3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_INVAL
argument_list|)
return|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"NFS READDIRPLUS fileHandle: {} cookie: {} dirCount: {} "
operator|+
literal|"maxCount: {} client: {}"
argument_list|,
name|handle
operator|.
name|dumpFileHandle
argument_list|()
argument_list|,
name|cookie
argument_list|,
name|dirCount
argument_list|,
name|maxCount
argument_list|,
name|remoteAddress
argument_list|)
expr_stmt|;
block|}
name|DFSClient
name|dfsClient
init|=
name|clientCache
operator|.
name|getDfsClient
argument_list|(
name|securityHandler
operator|.
name|getUser
argument_list|()
argument_list|,
name|namenodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|dfsClient
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|READDIRPLUS3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_SERVERFAULT
argument_list|)
return|;
block|}
name|HdfsFileStatus
name|dirStatus
decl_stmt|;
name|DirectoryListing
name|dlisting
decl_stmt|;
name|Nfs3FileAttributes
name|postOpDirAttr
decl_stmt|;
name|long
name|dotdotFileId
init|=
literal|0
decl_stmt|;
name|HdfsFileStatus
name|dotdotStatus
init|=
literal|null
decl_stmt|;
try|try
block|{
name|String
name|dirFileIdPath
init|=
name|Nfs3Utils
operator|.
name|getFileIdPath
argument_list|(
name|handle
argument_list|)
decl_stmt|;
name|dirStatus
operator|=
name|dfsClient
operator|.
name|getFileInfo
argument_list|(
name|dirFileIdPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|dirStatus
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Can't get path for fileId: {}"
argument_list|,
name|handle
operator|.
name|getFileId
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|READDIRPLUS3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_STALE
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
name|dirStatus
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't readdirplus for regular file, fileId: {}"
argument_list|,
name|handle
operator|.
name|getFileId
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|READDIRPLUS3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_NOTDIR
argument_list|)
return|;
block|}
name|long
name|cookieVerf
init|=
name|request
operator|.
name|getCookieVerf
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|cookieVerf
operator|!=
literal|0
operator|)
operator|&&
operator|(
name|cookieVerf
operator|!=
name|dirStatus
operator|.
name|getModificationTime
argument_list|()
operator|)
condition|)
block|{
if|if
condition|(
name|aixCompatMode
condition|)
block|{
comment|// The AIX NFS client misinterprets RFC-1813 and will repeatedly send
comment|// the same cookieverf value even across VFS-level readdir calls,
comment|// instead of getting a new cookieverf for every VFS-level readdir
comment|// call. This means that whenever a readdir call is made by an AIX NFS
comment|// client for a given directory, and that directory is subsequently
comment|// modified, thus changing its mtime, no later readdir calls will
comment|// succeed for that directory from AIX until the FS is
comment|// unmounted/remounted. See HDFS-6549 for more info.
name|LOG
operator|.
name|warn
argument_list|(
literal|"AIX compatibility mode enabled, ignoring cookieverf "
operator|+
literal|"mismatches."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"cookieverf mismatch. request cookieverf: {} "
operator|+
literal|"dir cookieverf: {}"
argument_list|,
name|cookieVerf
argument_list|,
name|dirStatus
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|READDIRPLUS3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_BAD_COOKIE
argument_list|,
name|Nfs3Utils
operator|.
name|getFileAttr
argument_list|(
name|dfsClient
argument_list|,
name|dirFileIdPath
argument_list|,
name|iug
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
if|if
condition|(
name|cookie
operator|==
literal|0
condition|)
block|{
comment|// Get dotdot fileId
name|String
name|dotdotFileIdPath
init|=
name|dirFileIdPath
operator|+
literal|"/.."
decl_stmt|;
name|dotdotStatus
operator|=
name|dfsClient
operator|.
name|getFileInfo
argument_list|(
name|dotdotFileIdPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|dotdotStatus
operator|==
literal|null
condition|)
block|{
comment|// This should not happen
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can't get path for handle path: "
operator|+
name|dotdotFileIdPath
argument_list|)
throw|;
block|}
name|dotdotFileId
operator|=
name|dotdotStatus
operator|.
name|getFileId
argument_list|()
expr_stmt|;
block|}
comment|// Get the list from the resume point
name|byte
index|[]
name|startAfter
decl_stmt|;
if|if
condition|(
name|cookie
operator|==
literal|0
condition|)
block|{
name|startAfter
operator|=
name|HdfsFileStatus
operator|.
name|EMPTY_NAME
expr_stmt|;
block|}
else|else
block|{
name|String
name|inodeIdPath
init|=
name|Nfs3Utils
operator|.
name|getFileIdPath
argument_list|(
name|cookie
argument_list|)
decl_stmt|;
name|startAfter
operator|=
name|inodeIdPath
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|dlisting
operator|=
name|listPaths
argument_list|(
name|dfsClient
argument_list|,
name|dirFileIdPath
argument_list|,
name|startAfter
argument_list|)
expr_stmt|;
name|postOpDirAttr
operator|=
name|Nfs3Utils
operator|.
name|getFileAttr
argument_list|(
name|dfsClient
argument_list|,
name|dirFileIdPath
argument_list|,
name|iug
argument_list|)
expr_stmt|;
if|if
condition|(
name|postOpDirAttr
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Can't get path for fileId: {}"
argument_list|,
name|handle
operator|.
name|getFileId
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|READDIRPLUS3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_STALE
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|int
name|status
init|=
name|mapErrorStatus
argument_list|(
name|e
argument_list|)
decl_stmt|;
return|return
operator|new
name|READDIRPLUS3Response
argument_list|(
name|status
argument_list|)
return|;
block|}
comment|// Set up the dirents in the response
name|HdfsFileStatus
index|[]
name|fstatus
init|=
name|dlisting
operator|.
name|getPartialListing
argument_list|()
decl_stmt|;
name|int
name|n
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|fstatus
operator|.
name|length
argument_list|,
name|dirCount
operator|-
literal|2
argument_list|)
decl_stmt|;
name|boolean
name|eof
init|=
operator|(
name|n
operator|>=
name|fstatus
operator|.
name|length
operator|)
operator|&&
operator|!
name|dlisting
operator|.
name|hasMore
argument_list|()
decl_stmt|;
name|READDIRPLUS3Response
operator|.
name|EntryPlus3
index|[]
name|entries
decl_stmt|;
if|if
condition|(
name|cookie
operator|==
literal|0
condition|)
block|{
name|entries
operator|=
operator|new
name|READDIRPLUS3Response
operator|.
name|EntryPlus3
index|[
name|n
operator|+
literal|2
index|]
expr_stmt|;
name|entries
index|[
literal|0
index|]
operator|=
operator|new
name|READDIRPLUS3Response
operator|.
name|EntryPlus3
argument_list|(
name|postOpDirAttr
operator|.
name|getFileId
argument_list|()
argument_list|,
literal|"."
argument_list|,
literal|0
argument_list|,
name|postOpDirAttr
argument_list|,
operator|new
name|FileHandle
argument_list|(
name|postOpDirAttr
operator|.
name|getFileId
argument_list|()
argument_list|,
name|namenodeId
argument_list|)
argument_list|)
expr_stmt|;
name|entries
index|[
literal|1
index|]
operator|=
operator|new
name|READDIRPLUS3Response
operator|.
name|EntryPlus3
argument_list|(
name|dotdotFileId
argument_list|,
literal|".."
argument_list|,
name|dotdotFileId
argument_list|,
name|Nfs3Utils
operator|.
name|getNfs3FileAttrFromFileStatus
argument_list|(
name|dotdotStatus
argument_list|,
name|iug
argument_list|)
argument_list|,
operator|new
name|FileHandle
argument_list|(
name|dotdotFileId
argument_list|,
name|namenodeId
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
name|n
operator|+
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|long
name|fileId
init|=
name|fstatus
index|[
name|i
operator|-
literal|2
index|]
operator|.
name|getFileId
argument_list|()
decl_stmt|;
name|FileHandle
name|childHandle
init|=
operator|new
name|FileHandle
argument_list|(
name|fileId
argument_list|,
name|namenodeId
argument_list|)
decl_stmt|;
name|Nfs3FileAttributes
name|attr
decl_stmt|;
try|try
block|{
name|attr
operator|=
name|writeManager
operator|.
name|getFileAttr
argument_list|(
name|dfsClient
argument_list|,
name|childHandle
argument_list|,
name|iug
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't get file attributes for fileId: {}"
argument_list|,
name|fileId
argument_list|,
name|e
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|entries
index|[
name|i
index|]
operator|=
operator|new
name|READDIRPLUS3Response
operator|.
name|EntryPlus3
argument_list|(
name|fileId
argument_list|,
name|fstatus
index|[
name|i
operator|-
literal|2
index|]
operator|.
name|getLocalName
argument_list|()
argument_list|,
name|fileId
argument_list|,
name|attr
argument_list|,
name|childHandle
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Resume from last readdirplus. If the cookie is "..", the result
comment|// list is up the directory content since HDFS uses name as resume point.
name|entries
operator|=
operator|new
name|READDIRPLUS3Response
operator|.
name|EntryPlus3
index|[
name|n
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|long
name|fileId
init|=
name|fstatus
index|[
name|i
index|]
operator|.
name|getFileId
argument_list|()
decl_stmt|;
name|FileHandle
name|childHandle
init|=
operator|new
name|FileHandle
argument_list|(
name|fileId
argument_list|,
name|namenodeId
argument_list|)
decl_stmt|;
name|Nfs3FileAttributes
name|attr
decl_stmt|;
try|try
block|{
name|attr
operator|=
name|writeManager
operator|.
name|getFileAttr
argument_list|(
name|dfsClient
argument_list|,
name|childHandle
argument_list|,
name|iug
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't get file attributes for fileId: {}"
argument_list|,
name|fileId
argument_list|,
name|e
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|entries
index|[
name|i
index|]
operator|=
operator|new
name|READDIRPLUS3Response
operator|.
name|EntryPlus3
argument_list|(
name|fileId
argument_list|,
name|fstatus
index|[
name|i
index|]
operator|.
name|getLocalName
argument_list|()
argument_list|,
name|fileId
argument_list|,
name|attr
argument_list|,
name|childHandle
argument_list|)
expr_stmt|;
block|}
block|}
name|DirListPlus3
name|dirListPlus
init|=
operator|new
name|READDIRPLUS3Response
operator|.
name|DirListPlus3
argument_list|(
name|entries
argument_list|,
name|eof
argument_list|)
decl_stmt|;
return|return
operator|new
name|READDIRPLUS3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3_OK
argument_list|,
name|postOpDirAttr
argument_list|,
name|dirStatus
operator|.
name|getModificationTime
argument_list|()
argument_list|,
name|dirListPlus
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|fsstat (XDR xdr, RpcInfo info)
specifier|public
name|FSSTAT3Response
name|fsstat
parameter_list|(
name|XDR
name|xdr
parameter_list|,
name|RpcInfo
name|info
parameter_list|)
block|{
return|return
name|fsstat
argument_list|(
name|xdr
argument_list|,
name|getSecurityHandler
argument_list|(
name|info
argument_list|)
argument_list|,
name|info
operator|.
name|remoteAddress
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|fsstat (XDR xdr, SecurityHandler securityHandler, SocketAddress remoteAddress)
name|FSSTAT3Response
name|fsstat
parameter_list|(
name|XDR
name|xdr
parameter_list|,
name|SecurityHandler
name|securityHandler
parameter_list|,
name|SocketAddress
name|remoteAddress
parameter_list|)
block|{
name|FSSTAT3Response
name|response
init|=
operator|new
name|FSSTAT3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3_OK
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|checkAccessPrivilege
argument_list|(
name|remoteAddress
argument_list|,
name|AccessPrivilege
operator|.
name|READ_ONLY
argument_list|)
condition|)
block|{
name|response
operator|.
name|setStatus
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_ACCES
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
name|FSSTAT3Request
name|request
decl_stmt|;
try|try
block|{
name|request
operator|=
name|FSSTAT3Request
operator|.
name|deserialize
argument_list|(
name|xdr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Invalid FSSTAT request"
argument_list|)
expr_stmt|;
return|return
operator|new
name|FSSTAT3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_INVAL
argument_list|)
return|;
block|}
name|FileHandle
name|handle
init|=
name|request
operator|.
name|getHandle
argument_list|()
decl_stmt|;
name|int
name|namenodeId
init|=
name|handle
operator|.
name|getNamenodeId
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"NFS FSSTAT fileHandle: {} client: {}"
argument_list|,
name|handle
operator|.
name|dumpFileHandle
argument_list|()
argument_list|,
name|remoteAddress
argument_list|)
expr_stmt|;
block|}
name|DFSClient
name|dfsClient
init|=
name|clientCache
operator|.
name|getDfsClient
argument_list|(
name|securityHandler
operator|.
name|getUser
argument_list|()
argument_list|,
name|namenodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|dfsClient
operator|==
literal|null
condition|)
block|{
name|response
operator|.
name|setStatus
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_SERVERFAULT
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
try|try
block|{
name|FsStatus
name|fsStatus
init|=
name|dfsClient
operator|.
name|getDiskStatus
argument_list|()
decl_stmt|;
name|long
name|totalBytes
init|=
name|fsStatus
operator|.
name|getCapacity
argument_list|()
decl_stmt|;
name|long
name|freeBytes
init|=
name|fsStatus
operator|.
name|getRemaining
argument_list|()
decl_stmt|;
name|Nfs3FileAttributes
name|attrs
init|=
name|writeManager
operator|.
name|getFileAttr
argument_list|(
name|dfsClient
argument_list|,
name|handle
argument_list|,
name|iug
argument_list|)
decl_stmt|;
if|if
condition|(
name|attrs
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Can't get path for fileId: {}"
argument_list|,
name|handle
operator|.
name|getFileId
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|FSSTAT3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_STALE
argument_list|)
return|;
block|}
name|long
name|maxFsObjects
init|=
name|config
operator|.
name|getLong
argument_list|(
literal|"dfs.max.objects"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxFsObjects
operator|==
literal|0
condition|)
block|{
comment|// A value of zero in HDFS indicates no limit to the number
comment|// of objects that dfs supports. Using Integer.MAX_VALUE instead of
comment|// Long.MAX_VALUE so 32bit client won't complain.
name|maxFsObjects
operator|=
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
return|return
operator|new
name|FSSTAT3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3_OK
argument_list|,
name|attrs
argument_list|,
name|totalBytes
argument_list|,
name|freeBytes
argument_list|,
name|freeBytes
argument_list|,
name|maxFsObjects
argument_list|,
name|maxFsObjects
argument_list|,
name|maxFsObjects
argument_list|,
literal|0
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|r
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|IOException
name|io
init|=
name|r
operator|.
name|unwrapRemoteException
argument_list|()
decl_stmt|;
comment|/**        * AuthorizationException can be thrown if the user can't be proxy'ed.        */
if|if
condition|(
name|io
operator|instanceof
name|AuthorizationException
condition|)
block|{
return|return
operator|new
name|FSSTAT3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_ACCES
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|FSSTAT3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_IO
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|int
name|status
init|=
name|mapErrorStatus
argument_list|(
name|e
argument_list|)
decl_stmt|;
return|return
operator|new
name|FSSTAT3Response
argument_list|(
name|status
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|fsinfo (XDR xdr, RpcInfo info)
specifier|public
name|FSINFO3Response
name|fsinfo
parameter_list|(
name|XDR
name|xdr
parameter_list|,
name|RpcInfo
name|info
parameter_list|)
block|{
return|return
name|fsinfo
argument_list|(
name|xdr
argument_list|,
name|getSecurityHandler
argument_list|(
name|info
argument_list|)
argument_list|,
name|info
operator|.
name|remoteAddress
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|fsinfo (XDR xdr, SecurityHandler securityHandler, SocketAddress remoteAddress)
name|FSINFO3Response
name|fsinfo
parameter_list|(
name|XDR
name|xdr
parameter_list|,
name|SecurityHandler
name|securityHandler
parameter_list|,
name|SocketAddress
name|remoteAddress
parameter_list|)
block|{
name|FSINFO3Response
name|response
init|=
operator|new
name|FSINFO3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3_OK
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|checkAccessPrivilege
argument_list|(
name|remoteAddress
argument_list|,
name|AccessPrivilege
operator|.
name|READ_ONLY
argument_list|)
condition|)
block|{
name|response
operator|.
name|setStatus
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_ACCES
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
name|FSINFO3Request
name|request
decl_stmt|;
try|try
block|{
name|request
operator|=
name|FSINFO3Request
operator|.
name|deserialize
argument_list|(
name|xdr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Invalid FSINFO request"
argument_list|)
expr_stmt|;
return|return
operator|new
name|FSINFO3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_INVAL
argument_list|)
return|;
block|}
name|FileHandle
name|handle
init|=
name|request
operator|.
name|getHandle
argument_list|()
decl_stmt|;
name|int
name|namenodeId
init|=
name|handle
operator|.
name|getNamenodeId
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"NFS FSINFO fileHandle: {} client: {}"
argument_list|,
name|remoteAddress
argument_list|,
name|handle
operator|.
name|dumpFileHandle
argument_list|()
argument_list|,
name|remoteAddress
argument_list|)
expr_stmt|;
block|}
name|DFSClient
name|dfsClient
init|=
name|clientCache
operator|.
name|getDfsClient
argument_list|(
name|securityHandler
operator|.
name|getUser
argument_list|()
argument_list|,
name|namenodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|dfsClient
operator|==
literal|null
condition|)
block|{
name|response
operator|.
name|setStatus
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_SERVERFAULT
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
try|try
block|{
name|int
name|rtmax
init|=
name|config
operator|.
name|getInt
argument_list|(
name|NfsConfigKeys
operator|.
name|DFS_NFS_MAX_READ_TRANSFER_SIZE_KEY
argument_list|,
name|NfsConfigKeys
operator|.
name|DFS_NFS_MAX_READ_TRANSFER_SIZE_DEFAULT
argument_list|)
decl_stmt|;
name|int
name|wtmax
init|=
name|config
operator|.
name|getInt
argument_list|(
name|NfsConfigKeys
operator|.
name|DFS_NFS_MAX_WRITE_TRANSFER_SIZE_KEY
argument_list|,
name|NfsConfigKeys
operator|.
name|DFS_NFS_MAX_WRITE_TRANSFER_SIZE_DEFAULT
argument_list|)
decl_stmt|;
name|int
name|dtperf
init|=
name|config
operator|.
name|getInt
argument_list|(
name|NfsConfigKeys
operator|.
name|DFS_NFS_MAX_READDIR_TRANSFER_SIZE_KEY
argument_list|,
name|NfsConfigKeys
operator|.
name|DFS_NFS_MAX_READDIR_TRANSFER_SIZE_DEFAULT
argument_list|)
decl_stmt|;
name|Nfs3FileAttributes
name|attrs
init|=
name|Nfs3Utils
operator|.
name|getFileAttr
argument_list|(
name|dfsClient
argument_list|,
name|Nfs3Utils
operator|.
name|getFileIdPath
argument_list|(
name|handle
argument_list|)
argument_list|,
name|iug
argument_list|)
decl_stmt|;
if|if
condition|(
name|attrs
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Can't get path for fileId: {}"
argument_list|,
name|handle
operator|.
name|getFileId
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|FSINFO3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_STALE
argument_list|)
return|;
block|}
name|int
name|fsProperty
init|=
name|Nfs3Constant
operator|.
name|FSF3_CANSETTIME
operator||
name|Nfs3Constant
operator|.
name|FSF3_HOMOGENEOUS
decl_stmt|;
return|return
operator|new
name|FSINFO3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3_OK
argument_list|,
name|attrs
argument_list|,
name|rtmax
argument_list|,
name|rtmax
argument_list|,
literal|1
argument_list|,
name|wtmax
argument_list|,
name|wtmax
argument_list|,
literal|1
argument_list|,
name|dtperf
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
operator|new
name|NfsTime
argument_list|(
literal|1
argument_list|)
argument_list|,
name|fsProperty
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|int
name|status
init|=
name|mapErrorStatus
argument_list|(
name|e
argument_list|)
decl_stmt|;
return|return
operator|new
name|FSINFO3Response
argument_list|(
name|status
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|pathconf (XDR xdr, RpcInfo info)
specifier|public
name|PATHCONF3Response
name|pathconf
parameter_list|(
name|XDR
name|xdr
parameter_list|,
name|RpcInfo
name|info
parameter_list|)
block|{
return|return
name|pathconf
argument_list|(
name|xdr
argument_list|,
name|getSecurityHandler
argument_list|(
name|info
argument_list|)
argument_list|,
name|info
operator|.
name|remoteAddress
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|pathconf (XDR xdr, SecurityHandler securityHandler, SocketAddress remoteAddress)
name|PATHCONF3Response
name|pathconf
parameter_list|(
name|XDR
name|xdr
parameter_list|,
name|SecurityHandler
name|securityHandler
parameter_list|,
name|SocketAddress
name|remoteAddress
parameter_list|)
block|{
name|PATHCONF3Response
name|response
init|=
operator|new
name|PATHCONF3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3_OK
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|checkAccessPrivilege
argument_list|(
name|remoteAddress
argument_list|,
name|AccessPrivilege
operator|.
name|READ_ONLY
argument_list|)
condition|)
block|{
name|response
operator|.
name|setStatus
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_ACCES
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
name|PATHCONF3Request
name|request
decl_stmt|;
try|try
block|{
name|request
operator|=
name|PATHCONF3Request
operator|.
name|deserialize
argument_list|(
name|xdr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Invalid PATHCONF request"
argument_list|)
expr_stmt|;
return|return
operator|new
name|PATHCONF3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_INVAL
argument_list|)
return|;
block|}
name|FileHandle
name|handle
init|=
name|request
operator|.
name|getHandle
argument_list|()
decl_stmt|;
name|Nfs3FileAttributes
name|attrs
decl_stmt|;
name|int
name|namenodeId
init|=
name|handle
operator|.
name|getNamenodeId
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"NFS PATHCONF fileHandle: {} client: {}"
argument_list|,
name|handle
operator|.
name|dumpFileHandle
argument_list|()
argument_list|,
name|remoteAddress
argument_list|)
expr_stmt|;
block|}
name|DFSClient
name|dfsClient
init|=
name|clientCache
operator|.
name|getDfsClient
argument_list|(
name|securityHandler
operator|.
name|getUser
argument_list|()
argument_list|,
name|namenodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|dfsClient
operator|==
literal|null
condition|)
block|{
name|response
operator|.
name|setStatus
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_SERVERFAULT
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
try|try
block|{
name|attrs
operator|=
name|Nfs3Utils
operator|.
name|getFileAttr
argument_list|(
name|dfsClient
argument_list|,
name|Nfs3Utils
operator|.
name|getFileIdPath
argument_list|(
name|handle
argument_list|)
argument_list|,
name|iug
argument_list|)
expr_stmt|;
if|if
condition|(
name|attrs
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Can't get path for fileId: {}"
argument_list|,
name|handle
operator|.
name|getFileId
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|PATHCONF3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_STALE
argument_list|)
return|;
block|}
return|return
operator|new
name|PATHCONF3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3_OK
argument_list|,
name|attrs
argument_list|,
literal|0
argument_list|,
name|HdfsServerConstants
operator|.
name|MAX_PATH_LENGTH
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|int
name|status
init|=
name|mapErrorStatus
argument_list|(
name|e
argument_list|)
decl_stmt|;
return|return
operator|new
name|PATHCONF3Response
argument_list|(
name|status
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|commit (XDR xdr, RpcInfo info)
specifier|public
name|COMMIT3Response
name|commit
parameter_list|(
name|XDR
name|xdr
parameter_list|,
name|RpcInfo
name|info
parameter_list|)
block|{
name|SecurityHandler
name|securityHandler
init|=
name|getSecurityHandler
argument_list|(
name|info
argument_list|)
decl_stmt|;
name|RpcCall
name|rpcCall
init|=
operator|(
name|RpcCall
operator|)
name|info
operator|.
name|header
argument_list|()
decl_stmt|;
name|int
name|xid
init|=
name|rpcCall
operator|.
name|getXid
argument_list|()
decl_stmt|;
name|SocketAddress
name|remoteAddress
init|=
name|info
operator|.
name|remoteAddress
argument_list|()
decl_stmt|;
return|return
name|commit
argument_list|(
name|xdr
argument_list|,
name|info
operator|.
name|channel
argument_list|()
argument_list|,
name|xid
argument_list|,
name|securityHandler
argument_list|,
name|remoteAddress
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|commit (XDR xdr, Channel channel, int xid, SecurityHandler securityHandler, SocketAddress remoteAddress)
name|COMMIT3Response
name|commit
parameter_list|(
name|XDR
name|xdr
parameter_list|,
name|Channel
name|channel
parameter_list|,
name|int
name|xid
parameter_list|,
name|SecurityHandler
name|securityHandler
parameter_list|,
name|SocketAddress
name|remoteAddress
parameter_list|)
block|{
name|COMMIT3Response
name|response
init|=
operator|new
name|COMMIT3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3_OK
argument_list|)
decl_stmt|;
name|COMMIT3Request
name|request
decl_stmt|;
try|try
block|{
name|request
operator|=
name|COMMIT3Request
operator|.
name|deserialize
argument_list|(
name|xdr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Invalid COMMIT request"
argument_list|)
expr_stmt|;
name|response
operator|.
name|setStatus
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_INVAL
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
name|FileHandle
name|handle
init|=
name|request
operator|.
name|getHandle
argument_list|()
decl_stmt|;
name|int
name|namenodeId
init|=
name|handle
operator|.
name|getNamenodeId
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"NFS COMMIT fileHandle: {} offset={} count={} client: {}"
argument_list|,
name|handle
operator|.
name|dumpFileHandle
argument_list|()
argument_list|,
name|request
operator|.
name|getOffset
argument_list|()
argument_list|,
name|request
operator|.
name|getCount
argument_list|()
argument_list|,
name|remoteAddress
argument_list|)
expr_stmt|;
block|}
name|DFSClient
name|dfsClient
init|=
name|clientCache
operator|.
name|getDfsClient
argument_list|(
name|securityHandler
operator|.
name|getUser
argument_list|()
argument_list|,
name|namenodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|dfsClient
operator|==
literal|null
condition|)
block|{
name|response
operator|.
name|setStatus
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_SERVERFAULT
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
name|String
name|fileIdPath
init|=
name|Nfs3Utils
operator|.
name|getFileIdPath
argument_list|(
name|handle
argument_list|)
decl_stmt|;
name|Nfs3FileAttributes
name|preOpAttr
init|=
literal|null
decl_stmt|;
try|try
block|{
name|preOpAttr
operator|=
name|Nfs3Utils
operator|.
name|getFileAttr
argument_list|(
name|dfsClient
argument_list|,
name|fileIdPath
argument_list|,
name|iug
argument_list|)
expr_stmt|;
if|if
condition|(
name|preOpAttr
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Can't get path for fileId: {}"
argument_list|,
name|handle
operator|.
name|getFileId
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|COMMIT3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_STALE
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
name|checkAccessPrivilege
argument_list|(
name|remoteAddress
argument_list|,
name|AccessPrivilege
operator|.
name|READ_WRITE
argument_list|)
condition|)
block|{
return|return
operator|new
name|COMMIT3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_ACCES
argument_list|,
operator|new
name|WccData
argument_list|(
name|Nfs3Utils
operator|.
name|getWccAttr
argument_list|(
name|preOpAttr
argument_list|)
argument_list|,
name|preOpAttr
argument_list|)
argument_list|,
name|Nfs3Constant
operator|.
name|WRITE_COMMIT_VERF
argument_list|)
return|;
block|}
name|long
name|commitOffset
init|=
operator|(
name|request
operator|.
name|getCount
argument_list|()
operator|==
literal|0
operator|)
condition|?
literal|0
else|:
operator|(
name|request
operator|.
name|getOffset
argument_list|()
operator|+
name|request
operator|.
name|getCount
argument_list|()
operator|)
decl_stmt|;
comment|// Insert commit as an async request
name|writeManager
operator|.
name|handleCommit
argument_list|(
name|dfsClient
argument_list|,
name|handle
argument_list|,
name|commitOffset
argument_list|,
name|channel
argument_list|,
name|xid
argument_list|,
name|preOpAttr
argument_list|,
name|namenodeId
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Nfs3FileAttributes
name|postOpAttr
init|=
literal|null
decl_stmt|;
try|try
block|{
name|postOpAttr
operator|=
name|writeManager
operator|.
name|getFileAttr
argument_list|(
name|dfsClient
argument_list|,
name|handle
argument_list|,
name|iug
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Can't get postOpAttr for fileId: {}"
argument_list|,
name|handle
operator|.
name|getFileId
argument_list|()
argument_list|,
name|e1
argument_list|)
expr_stmt|;
block|}
name|WccData
name|fileWcc
init|=
operator|new
name|WccData
argument_list|(
name|Nfs3Utils
operator|.
name|getWccAttr
argument_list|(
name|preOpAttr
argument_list|)
argument_list|,
name|postOpAttr
argument_list|)
decl_stmt|;
name|int
name|status
init|=
name|mapErrorStatus
argument_list|(
name|e
argument_list|)
decl_stmt|;
return|return
operator|new
name|COMMIT3Response
argument_list|(
name|status
argument_list|,
name|fileWcc
argument_list|,
name|Nfs3Constant
operator|.
name|WRITE_COMMIT_VERF
argument_list|)
return|;
block|}
block|}
DECL|method|getSecurityHandler (Credentials credentials, Verifier verifier)
specifier|private
name|SecurityHandler
name|getSecurityHandler
parameter_list|(
name|Credentials
name|credentials
parameter_list|,
name|Verifier
name|verifier
parameter_list|)
block|{
if|if
condition|(
name|credentials
operator|instanceof
name|CredentialsSys
condition|)
block|{
return|return
operator|new
name|SysSecurityHandler
argument_list|(
operator|(
name|CredentialsSys
operator|)
name|credentials
argument_list|,
name|iug
argument_list|)
return|;
block|}
else|else
block|{
comment|// TODO: support GSS and handle other cases
return|return
literal|null
return|;
block|}
block|}
DECL|method|getSecurityHandler (RpcInfo info)
specifier|private
name|SecurityHandler
name|getSecurityHandler
parameter_list|(
name|RpcInfo
name|info
parameter_list|)
block|{
name|RpcCall
name|rpcCall
init|=
operator|(
name|RpcCall
operator|)
name|info
operator|.
name|header
argument_list|()
decl_stmt|;
return|return
name|getSecurityHandler
argument_list|(
name|rpcCall
operator|.
name|getCredential
argument_list|()
argument_list|,
name|rpcCall
operator|.
name|getVerifier
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|handleInternal (ChannelHandlerContext ctx, RpcInfo info)
specifier|public
name|void
name|handleInternal
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|RpcInfo
name|info
parameter_list|)
block|{
name|RpcCall
name|rpcCall
init|=
operator|(
name|RpcCall
operator|)
name|info
operator|.
name|header
argument_list|()
decl_stmt|;
specifier|final
name|NFSPROC3
name|nfsproc3
init|=
name|NFSPROC3
operator|.
name|fromValue
argument_list|(
name|rpcCall
operator|.
name|getProcedure
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|xid
init|=
name|rpcCall
operator|.
name|getXid
argument_list|()
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|info
operator|.
name|data
argument_list|()
operator|.
name|readableBytes
argument_list|()
index|]
decl_stmt|;
name|info
operator|.
name|data
argument_list|()
operator|.
name|readBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|XDR
name|xdr
init|=
operator|new
name|XDR
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|XDR
name|out
init|=
operator|new
name|XDR
argument_list|()
decl_stmt|;
name|InetAddress
name|client
init|=
operator|(
operator|(
name|InetSocketAddress
operator|)
name|info
operator|.
name|remoteAddress
argument_list|()
operator|)
operator|.
name|getAddress
argument_list|()
decl_stmt|;
name|Credentials
name|credentials
init|=
name|rpcCall
operator|.
name|getCredential
argument_list|()
decl_stmt|;
comment|// Ignore auth only for NFSPROC3_NULL, especially for Linux clients.
if|if
condition|(
name|nfsproc3
operator|!=
name|NFSPROC3
operator|.
name|NULL
condition|)
block|{
if|if
condition|(
name|credentials
operator|.
name|getFlavor
argument_list|()
operator|!=
name|AuthFlavor
operator|.
name|AUTH_SYS
operator|&&
name|credentials
operator|.
name|getFlavor
argument_list|()
operator|!=
name|AuthFlavor
operator|.
name|RPCSEC_GSS
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Wrong RPC AUTH flavor, {} is not AUTH_SYS or RPCSEC_GSS."
argument_list|,
name|credentials
operator|.
name|getFlavor
argument_list|()
argument_list|)
expr_stmt|;
name|XDR
name|reply
init|=
operator|new
name|XDR
argument_list|()
decl_stmt|;
name|RpcDeniedReply
name|rdr
init|=
operator|new
name|RpcDeniedReply
argument_list|(
name|xid
argument_list|,
name|RpcReply
operator|.
name|ReplyState
operator|.
name|MSG_ACCEPTED
argument_list|,
name|RpcDeniedReply
operator|.
name|RejectState
operator|.
name|AUTH_ERROR
argument_list|,
operator|new
name|VerifierNone
argument_list|()
argument_list|)
decl_stmt|;
name|rdr
operator|.
name|write
argument_list|(
name|reply
argument_list|)
expr_stmt|;
name|ChannelBuffer
name|buf
init|=
name|ChannelBuffers
operator|.
name|wrappedBuffer
argument_list|(
name|reply
operator|.
name|asReadOnlyWrap
argument_list|()
operator|.
name|buffer
argument_list|()
argument_list|)
decl_stmt|;
name|RpcResponse
name|rsp
init|=
operator|new
name|RpcResponse
argument_list|(
name|buf
argument_list|,
name|info
operator|.
name|remoteAddress
argument_list|()
argument_list|)
decl_stmt|;
name|RpcUtil
operator|.
name|sendRpcResponse
argument_list|(
name|ctx
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
operator|!
name|isIdempotent
argument_list|(
name|rpcCall
argument_list|)
condition|)
block|{
name|RpcCallCache
operator|.
name|CacheEntry
name|entry
init|=
name|rpcCallCache
operator|.
name|checkOrAddToCache
argument_list|(
name|client
argument_list|,
name|xid
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
comment|// in cache
if|if
condition|(
name|entry
operator|.
name|isCompleted
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Sending the cached reply to retransmitted request {}"
argument_list|,
name|xid
argument_list|)
expr_stmt|;
name|RpcUtil
operator|.
name|sendRpcResponse
argument_list|(
name|ctx
argument_list|,
name|entry
operator|.
name|getResponse
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
comment|// else request is in progress
name|LOG
operator|.
name|info
argument_list|(
literal|"Retransmitted request, transaction still in progress {}"
argument_list|,
name|xid
argument_list|)
expr_stmt|;
comment|// Ignore the request and do nothing
return|return;
block|}
block|}
block|}
comment|// Since write and commit could be async, they use their own startTime and
comment|// only record success requests.
specifier|final
name|long
name|startTime
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|NFS3Response
name|response
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|nfsproc3
operator|==
name|NFSPROC3
operator|.
name|NULL
condition|)
block|{
name|response
operator|=
name|nullProcedure
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nfsproc3
operator|==
name|NFSPROC3
operator|.
name|GETATTR
condition|)
block|{
name|response
operator|=
name|getattr
argument_list|(
name|xdr
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|addGetattr
argument_list|(
name|Nfs3Utils
operator|.
name|getElapsedTime
argument_list|(
name|startTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nfsproc3
operator|==
name|NFSPROC3
operator|.
name|SETATTR
condition|)
block|{
name|response
operator|=
name|setattr
argument_list|(
name|xdr
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|addSetattr
argument_list|(
name|Nfs3Utils
operator|.
name|getElapsedTime
argument_list|(
name|startTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nfsproc3
operator|==
name|NFSPROC3
operator|.
name|LOOKUP
condition|)
block|{
name|response
operator|=
name|lookup
argument_list|(
name|xdr
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|addLookup
argument_list|(
name|Nfs3Utils
operator|.
name|getElapsedTime
argument_list|(
name|startTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nfsproc3
operator|==
name|NFSPROC3
operator|.
name|ACCESS
condition|)
block|{
name|response
operator|=
name|access
argument_list|(
name|xdr
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|addAccess
argument_list|(
name|Nfs3Utils
operator|.
name|getElapsedTime
argument_list|(
name|startTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nfsproc3
operator|==
name|NFSPROC3
operator|.
name|READLINK
condition|)
block|{
name|response
operator|=
name|readlink
argument_list|(
name|xdr
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|addReadlink
argument_list|(
name|Nfs3Utils
operator|.
name|getElapsedTime
argument_list|(
name|startTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nfsproc3
operator|==
name|NFSPROC3
operator|.
name|READ
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"{}{}"
argument_list|,
name|Nfs3Utils
operator|.
name|READ_RPC_START
argument_list|,
name|xid
argument_list|)
expr_stmt|;
name|response
operator|=
name|read
argument_list|(
name|xdr
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"{}{}"
argument_list|,
name|Nfs3Utils
operator|.
name|READ_RPC_END
argument_list|,
name|xid
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|addRead
argument_list|(
name|Nfs3Utils
operator|.
name|getElapsedTime
argument_list|(
name|startTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nfsproc3
operator|==
name|NFSPROC3
operator|.
name|WRITE
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"{}{}"
argument_list|,
name|Nfs3Utils
operator|.
name|WRITE_RPC_START
argument_list|,
name|xid
argument_list|)
expr_stmt|;
name|response
operator|=
name|write
argument_list|(
name|xdr
argument_list|,
name|info
argument_list|)
expr_stmt|;
comment|// Write end debug trace is in Nfs3Utils.writeChannel
block|}
elseif|else
if|if
condition|(
name|nfsproc3
operator|==
name|NFSPROC3
operator|.
name|CREATE
condition|)
block|{
name|response
operator|=
name|create
argument_list|(
name|xdr
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|addCreate
argument_list|(
name|Nfs3Utils
operator|.
name|getElapsedTime
argument_list|(
name|startTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nfsproc3
operator|==
name|NFSPROC3
operator|.
name|MKDIR
condition|)
block|{
name|response
operator|=
name|mkdir
argument_list|(
name|xdr
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|addMkdir
argument_list|(
name|Nfs3Utils
operator|.
name|getElapsedTime
argument_list|(
name|startTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nfsproc3
operator|==
name|NFSPROC3
operator|.
name|SYMLINK
condition|)
block|{
name|response
operator|=
name|symlink
argument_list|(
name|xdr
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|addSymlink
argument_list|(
name|Nfs3Utils
operator|.
name|getElapsedTime
argument_list|(
name|startTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nfsproc3
operator|==
name|NFSPROC3
operator|.
name|MKNOD
condition|)
block|{
name|response
operator|=
name|mknod
argument_list|(
name|xdr
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|addMknod
argument_list|(
name|Nfs3Utils
operator|.
name|getElapsedTime
argument_list|(
name|startTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nfsproc3
operator|==
name|NFSPROC3
operator|.
name|REMOVE
condition|)
block|{
name|response
operator|=
name|remove
argument_list|(
name|xdr
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|addRemove
argument_list|(
name|Nfs3Utils
operator|.
name|getElapsedTime
argument_list|(
name|startTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nfsproc3
operator|==
name|NFSPROC3
operator|.
name|RMDIR
condition|)
block|{
name|response
operator|=
name|rmdir
argument_list|(
name|xdr
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|addRmdir
argument_list|(
name|Nfs3Utils
operator|.
name|getElapsedTime
argument_list|(
name|startTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nfsproc3
operator|==
name|NFSPROC3
operator|.
name|RENAME
condition|)
block|{
name|response
operator|=
name|rename
argument_list|(
name|xdr
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|addRename
argument_list|(
name|Nfs3Utils
operator|.
name|getElapsedTime
argument_list|(
name|startTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nfsproc3
operator|==
name|NFSPROC3
operator|.
name|LINK
condition|)
block|{
name|response
operator|=
name|link
argument_list|(
name|xdr
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|addLink
argument_list|(
name|Nfs3Utils
operator|.
name|getElapsedTime
argument_list|(
name|startTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nfsproc3
operator|==
name|NFSPROC3
operator|.
name|READDIR
condition|)
block|{
name|response
operator|=
name|readdir
argument_list|(
name|xdr
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|addReaddir
argument_list|(
name|Nfs3Utils
operator|.
name|getElapsedTime
argument_list|(
name|startTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nfsproc3
operator|==
name|NFSPROC3
operator|.
name|READDIRPLUS
condition|)
block|{
name|response
operator|=
name|readdirplus
argument_list|(
name|xdr
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|addReaddirplus
argument_list|(
name|Nfs3Utils
operator|.
name|getElapsedTime
argument_list|(
name|startTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nfsproc3
operator|==
name|NFSPROC3
operator|.
name|FSSTAT
condition|)
block|{
name|response
operator|=
name|fsstat
argument_list|(
name|xdr
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|addFsstat
argument_list|(
name|Nfs3Utils
operator|.
name|getElapsedTime
argument_list|(
name|startTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nfsproc3
operator|==
name|NFSPROC3
operator|.
name|FSINFO
condition|)
block|{
name|response
operator|=
name|fsinfo
argument_list|(
name|xdr
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|addFsinfo
argument_list|(
name|Nfs3Utils
operator|.
name|getElapsedTime
argument_list|(
name|startTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nfsproc3
operator|==
name|NFSPROC3
operator|.
name|PATHCONF
condition|)
block|{
name|response
operator|=
name|pathconf
argument_list|(
name|xdr
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|addPathconf
argument_list|(
name|Nfs3Utils
operator|.
name|getElapsedTime
argument_list|(
name|startTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nfsproc3
operator|==
name|NFSPROC3
operator|.
name|COMMIT
condition|)
block|{
name|response
operator|=
name|commit
argument_list|(
name|xdr
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Invalid procedure
name|RpcAcceptedReply
operator|.
name|getInstance
argument_list|(
name|xid
argument_list|,
name|RpcAcceptedReply
operator|.
name|AcceptState
operator|.
name|PROC_UNAVAIL
argument_list|,
operator|new
name|VerifierNone
argument_list|()
argument_list|)
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|response
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No sync response, expect an async response for request XID={}"
argument_list|,
name|rpcCall
operator|.
name|getXid
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// TODO: currently we just return VerifierNone
name|out
operator|=
name|response
operator|.
name|serialize
argument_list|(
name|out
argument_list|,
name|xid
argument_list|,
operator|new
name|VerifierNone
argument_list|()
argument_list|)
expr_stmt|;
name|ChannelBuffer
name|buf
init|=
name|ChannelBuffers
operator|.
name|wrappedBuffer
argument_list|(
name|out
operator|.
name|asReadOnlyWrap
argument_list|()
operator|.
name|buffer
argument_list|()
argument_list|)
decl_stmt|;
name|RpcResponse
name|rsp
init|=
operator|new
name|RpcResponse
argument_list|(
name|buf
argument_list|,
name|info
operator|.
name|remoteAddress
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isIdempotent
argument_list|(
name|rpcCall
argument_list|)
condition|)
block|{
name|rpcCallCache
operator|.
name|callCompleted
argument_list|(
name|client
argument_list|,
name|xid
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
block|}
name|RpcUtil
operator|.
name|sendRpcResponse
argument_list|(
name|ctx
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isIdempotent (RpcCall call)
specifier|protected
name|boolean
name|isIdempotent
parameter_list|(
name|RpcCall
name|call
parameter_list|)
block|{
specifier|final
name|NFSPROC3
name|nfsproc3
init|=
name|NFSPROC3
operator|.
name|fromValue
argument_list|(
name|call
operator|.
name|getProcedure
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|nfsproc3
operator|==
literal|null
operator|||
name|nfsproc3
operator|.
name|isIdempotent
argument_list|()
return|;
block|}
DECL|method|checkAccessPrivilege (SocketAddress remoteAddress, final AccessPrivilege expected)
specifier|private
name|boolean
name|checkAccessPrivilege
parameter_list|(
name|SocketAddress
name|remoteAddress
parameter_list|,
specifier|final
name|AccessPrivilege
name|expected
parameter_list|)
block|{
comment|// Port monitoring
if|if
condition|(
operator|!
name|doPortMonitoring
argument_list|(
name|remoteAddress
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// Check export table
if|if
condition|(
name|exports
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|InetAddress
name|client
init|=
operator|(
operator|(
name|InetSocketAddress
operator|)
name|remoteAddress
operator|)
operator|.
name|getAddress
argument_list|()
decl_stmt|;
name|AccessPrivilege
name|access
init|=
name|exports
operator|.
name|getAccessPrivilege
argument_list|(
name|client
argument_list|)
decl_stmt|;
if|if
condition|(
name|access
operator|==
name|AccessPrivilege
operator|.
name|NONE
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|access
operator|==
name|AccessPrivilege
operator|.
name|READ_ONLY
operator|&&
name|expected
operator|==
name|AccessPrivilege
operator|.
name|READ_WRITE
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getWriteManager ()
name|WriteManager
name|getWriteManager
parameter_list|()
block|{
return|return
name|this
operator|.
name|writeManager
return|;
block|}
block|}
end_class

end_unit

