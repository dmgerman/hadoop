begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.nfs.nfs3
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|nfs
operator|.
name|nfs3
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|FileHandle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|Nfs3Constant
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Daemon
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_comment
comment|/**  * A cache saves OpenFileCtx objects for different users. Each cache entry is  * used to maintain the writing context for a single file.  */
end_comment

begin_class
DECL|class|OpenFileCtxCache
class|class
name|OpenFileCtxCache
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|OpenFileCtxCache
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Insert and delete with openFileMap are synced
DECL|field|openFileMap
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|FileHandle
argument_list|,
name|OpenFileCtx
argument_list|>
name|openFileMap
init|=
name|Maps
operator|.
name|newConcurrentMap
argument_list|()
decl_stmt|;
DECL|field|maxStreams
specifier|private
specifier|final
name|int
name|maxStreams
decl_stmt|;
DECL|field|streamTimeout
specifier|private
specifier|final
name|long
name|streamTimeout
decl_stmt|;
DECL|field|streamMonitor
specifier|private
specifier|final
name|StreamMonitor
name|streamMonitor
decl_stmt|;
DECL|method|OpenFileCtxCache (Configuration config, long streamTimeout)
name|OpenFileCtxCache
parameter_list|(
name|Configuration
name|config
parameter_list|,
name|long
name|streamTimeout
parameter_list|)
block|{
name|maxStreams
operator|=
name|config
operator|.
name|getInt
argument_list|(
name|Nfs3Constant
operator|.
name|MAX_OPEN_FILES
argument_list|,
name|Nfs3Constant
operator|.
name|MAX_OPEN_FILES_DEFAULT
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Maximum open streams is "
operator|+
name|maxStreams
argument_list|)
expr_stmt|;
name|this
operator|.
name|streamTimeout
operator|=
name|streamTimeout
expr_stmt|;
name|streamMonitor
operator|=
operator|new
name|StreamMonitor
argument_list|()
expr_stmt|;
block|}
comment|/**    * The entry to be evicted is based on the following rules:<br>    * 1. if the OpenFileCtx has any pending task, it will not be chosen.<br>    * 2. if there is inactive OpenFileCtx, the first found one is to evict.<br>    * 3. For OpenFileCtx entries don't belong to group 1 or 2, the idlest one     * is select. If it's idle longer than OUTPUT_STREAM_TIMEOUT_MIN_DEFAULT, it    * will be evicted. Otherwise, the whole eviction request is failed.    */
annotation|@
name|VisibleForTesting
DECL|method|getEntryToEvict ()
name|Entry
argument_list|<
name|FileHandle
argument_list|,
name|OpenFileCtx
argument_list|>
name|getEntryToEvict
parameter_list|()
block|{
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|FileHandle
argument_list|,
name|OpenFileCtx
argument_list|>
argument_list|>
name|it
init|=
name|openFileMap
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"openFileMap size:"
operator|+
name|openFileMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Entry
argument_list|<
name|FileHandle
argument_list|,
name|OpenFileCtx
argument_list|>
name|idlest
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|FileHandle
argument_list|,
name|OpenFileCtx
argument_list|>
name|pairs
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|OpenFileCtx
name|ctx
init|=
name|pairs
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ctx
operator|.
name|getActiveState
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Got one inactive stream: "
operator|+
name|ctx
argument_list|)
expr_stmt|;
block|}
return|return
name|pairs
return|;
block|}
if|if
condition|(
name|ctx
operator|.
name|hasPendingWork
argument_list|()
condition|)
block|{
comment|// Always skip files with pending work.
continue|continue;
block|}
if|if
condition|(
name|idlest
operator|==
literal|null
condition|)
block|{
name|idlest
operator|=
name|pairs
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|ctx
operator|.
name|getLastAccessTime
argument_list|()
operator|<
name|idlest
operator|.
name|getValue
argument_list|()
operator|.
name|getLastAccessTime
argument_list|()
condition|)
block|{
name|idlest
operator|=
name|pairs
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|idlest
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"No eviction candidate. All streams have pending work."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
else|else
block|{
name|long
name|idleTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|idlest
operator|.
name|getValue
argument_list|()
operator|.
name|getLastAccessTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|idleTime
operator|<
name|Nfs3Constant
operator|.
name|OUTPUT_STREAM_TIMEOUT_MIN_DEFAULT
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"idlest stream's idle time:"
operator|+
name|idleTime
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|warn
argument_list|(
literal|"All opened streams are busy, can't remove any from cache."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|idlest
return|;
block|}
block|}
block|}
DECL|method|put (FileHandle h, OpenFileCtx context)
name|boolean
name|put
parameter_list|(
name|FileHandle
name|h
parameter_list|,
name|OpenFileCtx
name|context
parameter_list|)
block|{
name|OpenFileCtx
name|toEvict
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|openFileMap
operator|.
name|size
argument_list|()
operator|<=
name|this
operator|.
name|maxStreams
argument_list|,
literal|"stream cache size "
operator|+
name|openFileMap
operator|.
name|size
argument_list|()
operator|+
literal|"  is larger than maximum"
operator|+
name|this
operator|.
name|maxStreams
argument_list|)
expr_stmt|;
if|if
condition|(
name|openFileMap
operator|.
name|size
argument_list|()
operator|==
name|this
operator|.
name|maxStreams
condition|)
block|{
name|Entry
argument_list|<
name|FileHandle
argument_list|,
name|OpenFileCtx
argument_list|>
name|pairs
init|=
name|getEntryToEvict
argument_list|()
decl_stmt|;
if|if
condition|(
name|pairs
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Evict stream ctx: "
operator|+
name|pairs
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|toEvict
operator|=
name|openFileMap
operator|.
name|remove
argument_list|(
name|pairs
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|toEvict
operator|==
name|pairs
operator|.
name|getValue
argument_list|()
argument_list|,
literal|"The deleted entry is not the same as odlest found."
argument_list|)
expr_stmt|;
block|}
block|}
name|openFileMap
operator|.
name|put
argument_list|(
name|h
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
comment|// Cleanup the old stream outside the lock
if|if
condition|(
name|toEvict
operator|!=
literal|null
condition|)
block|{
name|toEvict
operator|.
name|cleanup
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|scan (long streamTimeout)
name|void
name|scan
parameter_list|(
name|long
name|streamTimeout
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|OpenFileCtx
argument_list|>
name|ctxToRemove
init|=
operator|new
name|ArrayList
argument_list|<
name|OpenFileCtx
argument_list|>
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|FileHandle
argument_list|,
name|OpenFileCtx
argument_list|>
argument_list|>
name|it
init|=
name|openFileMap
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"openFileMap size:"
operator|+
name|openFileMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|FileHandle
argument_list|,
name|OpenFileCtx
argument_list|>
name|pairs
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|FileHandle
name|handle
init|=
name|pairs
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|OpenFileCtx
name|ctx
init|=
name|pairs
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ctx
operator|.
name|streamCleanup
argument_list|(
name|handle
operator|.
name|getFileId
argument_list|()
argument_list|,
name|streamTimeout
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// Check it again inside lock before removing
synchronized|synchronized
init|(
name|this
init|)
block|{
name|OpenFileCtx
name|ctx2
init|=
name|openFileMap
operator|.
name|get
argument_list|(
name|handle
argument_list|)
decl_stmt|;
if|if
condition|(
name|ctx2
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|ctx2
operator|.
name|streamCleanup
argument_list|(
name|handle
operator|.
name|getFileId
argument_list|()
argument_list|,
name|streamTimeout
argument_list|)
condition|)
block|{
name|openFileMap
operator|.
name|remove
argument_list|(
name|handle
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"After remove stream "
operator|+
name|handle
operator|.
name|getFileId
argument_list|()
operator|+
literal|", the stream number:"
operator|+
name|openFileMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ctxToRemove
operator|.
name|add
argument_list|(
name|ctx2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// Invoke the cleanup outside the lock
for|for
control|(
name|OpenFileCtx
name|ofc
range|:
name|ctxToRemove
control|)
block|{
name|ofc
operator|.
name|cleanup
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|get (FileHandle key)
name|OpenFileCtx
name|get
parameter_list|(
name|FileHandle
name|key
parameter_list|)
block|{
return|return
name|openFileMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
DECL|method|size ()
name|int
name|size
parameter_list|()
block|{
return|return
name|openFileMap
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|start ()
name|void
name|start
parameter_list|()
block|{
name|streamMonitor
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|// Evict all entries
DECL|method|cleanAll ()
name|void
name|cleanAll
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|OpenFileCtx
argument_list|>
name|cleanedContext
init|=
operator|new
name|ArrayList
argument_list|<
name|OpenFileCtx
argument_list|>
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|FileHandle
argument_list|,
name|OpenFileCtx
argument_list|>
argument_list|>
name|it
init|=
name|openFileMap
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"openFileMap size:"
operator|+
name|openFileMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|FileHandle
argument_list|,
name|OpenFileCtx
argument_list|>
name|pairs
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|OpenFileCtx
name|ctx
init|=
name|pairs
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
name|cleanedContext
operator|.
name|add
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Invoke the cleanup outside the lock
for|for
control|(
name|OpenFileCtx
name|ofc
range|:
name|cleanedContext
control|)
block|{
name|ofc
operator|.
name|cleanup
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|shutdown ()
name|void
name|shutdown
parameter_list|()
block|{
comment|// stop the dump thread
if|if
condition|(
name|streamMonitor
operator|!=
literal|null
operator|&&
name|streamMonitor
operator|.
name|isAlive
argument_list|()
condition|)
block|{
name|streamMonitor
operator|.
name|shouldRun
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|streamMonitor
operator|.
name|interrupt
argument_list|()
expr_stmt|;
try|try
block|{
name|streamMonitor
operator|.
name|join
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{       }
block|}
name|cleanAll
argument_list|()
expr_stmt|;
block|}
comment|/**    * StreamMonitor wakes up periodically to find and closes idle streams.    */
DECL|class|StreamMonitor
class|class
name|StreamMonitor
extends|extends
name|Daemon
block|{
DECL|field|rotation
specifier|private
specifier|final
specifier|static
name|int
name|rotation
init|=
literal|5
operator|*
literal|1000
decl_stmt|;
comment|// 5 seconds
DECL|field|lastWakeupTime
specifier|private
name|long
name|lastWakeupTime
init|=
literal|0
decl_stmt|;
DECL|field|shouldRun
specifier|private
name|boolean
name|shouldRun
init|=
literal|true
decl_stmt|;
DECL|method|shouldRun (boolean shouldRun)
name|void
name|shouldRun
parameter_list|(
name|boolean
name|shouldRun
parameter_list|)
block|{
name|this
operator|.
name|shouldRun
operator|=
name|shouldRun
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
name|shouldRun
condition|)
block|{
name|scan
argument_list|(
name|streamTimeout
argument_list|)
expr_stmt|;
comment|// Check if it can sleep
try|try
block|{
name|long
name|workedTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|lastWakeupTime
decl_stmt|;
if|if
condition|(
name|workedTime
operator|<
name|rotation
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"StreamMonitor can still have a sleep:"
operator|+
operator|(
operator|(
name|rotation
operator|-
name|workedTime
operator|)
operator|/
literal|1000
operator|)
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
name|rotation
operator|-
name|workedTime
argument_list|)
expr_stmt|;
block|}
name|lastWakeupTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"StreamMonitor got interrupted"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

