begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.nfs.nfs3
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|nfs
operator|.
name|nfs3
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|FileHandle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|Nfs3Constant
operator|.
name|WriteStableHow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|Channel
import|;
end_import

begin_comment
comment|/**  * WriteCtx saves the context of one write request, such as request, channel,  * xid and reply status.  */
end_comment

begin_class
DECL|class|WriteCtx
class|class
name|WriteCtx
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|WriteCtx
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * In memory write data has 3 states. ALLOW_DUMP: not sequential write, still    * wait for prerequisit writes. NO_DUMP: sequential write, no need to dump    * since it will be written to HDFS soon. DUMPED: already dumped to a file.    */
DECL|enum|DataState
specifier|public
specifier|static
enum|enum
name|DataState
block|{
DECL|enumConstant|ALLOW_DUMP
name|ALLOW_DUMP
block|,
DECL|enumConstant|NO_DUMP
name|NO_DUMP
block|,
DECL|enumConstant|DUMPED
name|DUMPED
block|;   }
DECL|field|handle
specifier|private
specifier|final
name|FileHandle
name|handle
decl_stmt|;
DECL|field|offset
specifier|private
specifier|final
name|long
name|offset
decl_stmt|;
DECL|field|count
specifier|private
specifier|final
name|int
name|count
decl_stmt|;
DECL|field|stableHow
specifier|private
specifier|final
name|WriteStableHow
name|stableHow
decl_stmt|;
DECL|field|data
specifier|private
name|byte
index|[]
name|data
decl_stmt|;
DECL|field|channel
specifier|private
specifier|final
name|Channel
name|channel
decl_stmt|;
DECL|field|xid
specifier|private
specifier|final
name|int
name|xid
decl_stmt|;
DECL|field|replied
specifier|private
name|boolean
name|replied
decl_stmt|;
DECL|field|dataState
specifier|private
name|DataState
name|dataState
decl_stmt|;
DECL|method|getDataState ()
specifier|public
name|DataState
name|getDataState
parameter_list|()
block|{
return|return
name|dataState
return|;
block|}
DECL|method|setDataState (DataState dataState)
specifier|public
name|void
name|setDataState
parameter_list|(
name|DataState
name|dataState
parameter_list|)
block|{
name|this
operator|.
name|dataState
operator|=
name|dataState
expr_stmt|;
block|}
DECL|field|raf
specifier|private
name|RandomAccessFile
name|raf
decl_stmt|;
DECL|field|dumpFileOffset
specifier|private
name|long
name|dumpFileOffset
decl_stmt|;
comment|// Return the dumped data size
DECL|method|dumpData (FileOutputStream dumpOut, RandomAccessFile raf)
specifier|public
name|long
name|dumpData
parameter_list|(
name|FileOutputStream
name|dumpOut
parameter_list|,
name|RandomAccessFile
name|raf
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|dataState
operator|!=
name|DataState
operator|.
name|ALLOW_DUMP
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"No need to dump with status(replied,dataState):"
operator|+
literal|"("
operator|+
name|replied
operator|+
literal|","
operator|+
name|dataState
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
name|this
operator|.
name|raf
operator|=
name|raf
expr_stmt|;
name|dumpFileOffset
operator|=
name|dumpOut
operator|.
name|getChannel
argument_list|()
operator|.
name|position
argument_list|()
expr_stmt|;
name|dumpOut
operator|.
name|write
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"After dump, new dumpFileOffset:"
operator|+
name|dumpFileOffset
argument_list|)
expr_stmt|;
block|}
name|data
operator|=
literal|null
expr_stmt|;
name|dataState
operator|=
name|DataState
operator|.
name|DUMPED
expr_stmt|;
return|return
name|count
return|;
block|}
DECL|method|getHandle ()
specifier|public
name|FileHandle
name|getHandle
parameter_list|()
block|{
return|return
name|handle
return|;
block|}
DECL|method|getOffset ()
specifier|public
name|long
name|getOffset
parameter_list|()
block|{
return|return
name|offset
return|;
block|}
DECL|method|getCount ()
specifier|public
name|int
name|getCount
parameter_list|()
block|{
return|return
name|count
return|;
block|}
DECL|method|getStableHow ()
specifier|public
name|WriteStableHow
name|getStableHow
parameter_list|()
block|{
return|return
name|stableHow
return|;
block|}
DECL|method|getData ()
specifier|public
name|byte
index|[]
name|getData
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|dataState
operator|!=
name|DataState
operator|.
name|DUMPED
condition|)
block|{
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Data is not dumpted but has null:"
operator|+
name|this
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// read back
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Data is dumpted but not null"
argument_list|)
throw|;
block|}
name|data
operator|=
operator|new
name|byte
index|[
name|count
index|]
expr_stmt|;
name|raf
operator|.
name|seek
argument_list|(
name|dumpFileOffset
argument_list|)
expr_stmt|;
name|int
name|size
init|=
name|raf
operator|.
name|read
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|count
argument_list|)
decl_stmt|;
if|if
condition|(
name|size
operator|!=
name|count
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Data count is "
operator|+
name|count
operator|+
literal|", but read back "
operator|+
name|size
operator|+
literal|"bytes"
argument_list|)
throw|;
block|}
block|}
return|return
name|data
return|;
block|}
DECL|method|getChannel ()
name|Channel
name|getChannel
parameter_list|()
block|{
return|return
name|channel
return|;
block|}
DECL|method|getXid ()
name|int
name|getXid
parameter_list|()
block|{
return|return
name|xid
return|;
block|}
DECL|method|getReplied ()
name|boolean
name|getReplied
parameter_list|()
block|{
return|return
name|replied
return|;
block|}
DECL|method|setReplied (boolean replied)
name|void
name|setReplied
parameter_list|(
name|boolean
name|replied
parameter_list|)
block|{
name|this
operator|.
name|replied
operator|=
name|replied
expr_stmt|;
block|}
DECL|method|WriteCtx (FileHandle handle, long offset, int count, WriteStableHow stableHow, byte[] data, Channel channel, int xid, boolean replied, DataState dataState)
name|WriteCtx
parameter_list|(
name|FileHandle
name|handle
parameter_list|,
name|long
name|offset
parameter_list|,
name|int
name|count
parameter_list|,
name|WriteStableHow
name|stableHow
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|Channel
name|channel
parameter_list|,
name|int
name|xid
parameter_list|,
name|boolean
name|replied
parameter_list|,
name|DataState
name|dataState
parameter_list|)
block|{
name|this
operator|.
name|handle
operator|=
name|handle
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
name|this
operator|.
name|count
operator|=
name|count
expr_stmt|;
name|this
operator|.
name|stableHow
operator|=
name|stableHow
expr_stmt|;
name|this
operator|.
name|data
operator|=
name|data
expr_stmt|;
name|this
operator|.
name|channel
operator|=
name|channel
expr_stmt|;
name|this
operator|.
name|xid
operator|=
name|xid
expr_stmt|;
name|this
operator|.
name|replied
operator|=
name|replied
expr_stmt|;
name|this
operator|.
name|dataState
operator|=
name|dataState
expr_stmt|;
name|raf
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Id:"
operator|+
name|handle
operator|.
name|getFileId
argument_list|()
operator|+
literal|" offset:"
operator|+
name|offset
operator|+
literal|" count:"
operator|+
name|count
operator|+
literal|" stableHow:"
operator|+
name|stableHow
operator|+
literal|" replied:"
operator|+
name|replied
operator|+
literal|" dataState:"
operator|+
name|dataState
operator|+
literal|" xid:"
operator|+
name|xid
return|;
block|}
block|}
end_class

end_unit

