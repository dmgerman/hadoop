begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.nfs.nfs3
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|nfs
operator|.
name|nfs3
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|OpenFileCtx
operator|.
name|COMMIT_STATUS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|NfsFileType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|FileHandle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|IdUserGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|Nfs3Constant
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|Nfs3Constant
operator|.
name|WriteStableHow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|Nfs3FileAttributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|Nfs3Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|request
operator|.
name|WRITE3Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|response
operator|.
name|COMMIT3Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|response
operator|.
name|WRITE3Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|response
operator|.
name|WccData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
operator|.
name|XDR
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
operator|.
name|security
operator|.
name|VerifierNone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Daemon
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_comment
comment|/**  * Manage the writes and responds asynchronously.  */
end_comment

begin_class
DECL|class|WriteManager
specifier|public
class|class
name|WriteManager
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|WriteManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|config
specifier|private
specifier|final
name|Configuration
name|config
decl_stmt|;
DECL|field|iug
specifier|private
specifier|final
name|IdUserGroup
name|iug
decl_stmt|;
DECL|field|openFileMap
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|FileHandle
argument_list|,
name|OpenFileCtx
argument_list|>
name|openFileMap
init|=
name|Maps
operator|.
name|newConcurrentMap
argument_list|()
decl_stmt|;
DECL|field|asyncDataService
specifier|private
name|AsyncDataService
name|asyncDataService
decl_stmt|;
DECL|field|asyncDataServiceStarted
specifier|private
name|boolean
name|asyncDataServiceStarted
init|=
literal|false
decl_stmt|;
DECL|field|streamMonitor
specifier|private
specifier|final
name|StreamMonitor
name|streamMonitor
decl_stmt|;
comment|/**    * The time limit to wait for accumulate reordered sequential writes to the    * same file before the write is considered done.    */
DECL|field|streamTimeout
specifier|private
name|long
name|streamTimeout
decl_stmt|;
DECL|field|DEFAULT_STREAM_TIMEOUT
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_STREAM_TIMEOUT
init|=
literal|10
operator|*
literal|60
operator|*
literal|1000
decl_stmt|;
comment|//10 minutes
DECL|field|MINIMIUM_STREAM_TIMEOUT
specifier|public
specifier|static
specifier|final
name|long
name|MINIMIUM_STREAM_TIMEOUT
init|=
literal|10
operator|*
literal|1000
decl_stmt|;
comment|//10 seconds
DECL|method|addOpenFileStream (FileHandle h, OpenFileCtx ctx)
name|void
name|addOpenFileStream
parameter_list|(
name|FileHandle
name|h
parameter_list|,
name|OpenFileCtx
name|ctx
parameter_list|)
block|{
name|openFileMap
operator|.
name|put
argument_list|(
name|h
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"After add the new stream "
operator|+
name|h
operator|.
name|getFileId
argument_list|()
operator|+
literal|", the stream number:"
operator|+
name|openFileMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|WriteManager (IdUserGroup iug, final Configuration config)
name|WriteManager
parameter_list|(
name|IdUserGroup
name|iug
parameter_list|,
specifier|final
name|Configuration
name|config
parameter_list|)
block|{
name|this
operator|.
name|iug
operator|=
name|iug
expr_stmt|;
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
name|streamTimeout
operator|=
name|config
operator|.
name|getLong
argument_list|(
literal|"dfs.nfs3.stream.timeout"
argument_list|,
name|DEFAULT_STREAM_TIMEOUT
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Stream timeout is "
operator|+
name|streamTimeout
operator|+
literal|"ms."
argument_list|)
expr_stmt|;
if|if
condition|(
name|streamTimeout
operator|<
name|MINIMIUM_STREAM_TIMEOUT
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Reset stream timeout to minimum value "
operator|+
name|MINIMIUM_STREAM_TIMEOUT
operator|+
literal|"ms."
argument_list|)
expr_stmt|;
name|streamTimeout
operator|=
name|MINIMIUM_STREAM_TIMEOUT
expr_stmt|;
block|}
name|this
operator|.
name|streamMonitor
operator|=
operator|new
name|StreamMonitor
argument_list|()
expr_stmt|;
block|}
DECL|method|startAsyncDataSerivce ()
specifier|private
name|void
name|startAsyncDataSerivce
parameter_list|()
block|{
name|streamMonitor
operator|.
name|start
argument_list|()
expr_stmt|;
name|this
operator|.
name|asyncDataService
operator|=
operator|new
name|AsyncDataService
argument_list|()
expr_stmt|;
name|asyncDataServiceStarted
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|shutdownAsyncDataService ()
specifier|private
name|void
name|shutdownAsyncDataService
parameter_list|()
block|{
name|asyncDataService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|asyncDataServiceStarted
operator|=
literal|false
expr_stmt|;
name|streamMonitor
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
DECL|method|handleWrite (DFSClient dfsClient, WRITE3Request request, Channel channel, int xid, Nfs3FileAttributes preOpAttr)
name|void
name|handleWrite
parameter_list|(
name|DFSClient
name|dfsClient
parameter_list|,
name|WRITE3Request
name|request
parameter_list|,
name|Channel
name|channel
parameter_list|,
name|int
name|xid
parameter_list|,
name|Nfs3FileAttributes
name|preOpAttr
parameter_list|)
throws|throws
name|IOException
block|{
comment|// First write request starts the async data service
if|if
condition|(
operator|!
name|asyncDataServiceStarted
condition|)
block|{
name|startAsyncDataSerivce
argument_list|()
expr_stmt|;
block|}
name|long
name|offset
init|=
name|request
operator|.
name|getOffset
argument_list|()
decl_stmt|;
name|int
name|count
init|=
name|request
operator|.
name|getCount
argument_list|()
decl_stmt|;
name|WriteStableHow
name|stableHow
init|=
name|request
operator|.
name|getStableHow
argument_list|()
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|request
operator|.
name|getData
argument_list|()
operator|.
name|array
argument_list|()
decl_stmt|;
if|if
condition|(
name|data
operator|.
name|length
operator|<
name|count
condition|)
block|{
name|WRITE3Response
name|response
init|=
operator|new
name|WRITE3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_INVAL
argument_list|)
decl_stmt|;
name|Nfs3Utils
operator|.
name|writeChannel
argument_list|(
name|channel
argument_list|,
name|response
operator|.
name|writeHeaderAndResponse
argument_list|(
operator|new
name|XDR
argument_list|()
argument_list|,
name|xid
argument_list|,
operator|new
name|VerifierNone
argument_list|()
argument_list|)
argument_list|,
name|xid
argument_list|)
expr_stmt|;
return|return;
block|}
name|FileHandle
name|handle
init|=
name|request
operator|.
name|getHandle
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"handleWrite fileId: "
operator|+
name|handle
operator|.
name|getFileId
argument_list|()
operator|+
literal|" offset: "
operator|+
name|offset
operator|+
literal|" length:"
operator|+
name|count
operator|+
literal|" stableHow:"
operator|+
name|stableHow
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Check if there is a stream to write
name|FileHandle
name|fileHandle
init|=
name|request
operator|.
name|getHandle
argument_list|()
decl_stmt|;
name|OpenFileCtx
name|openFileCtx
init|=
name|openFileMap
operator|.
name|get
argument_list|(
name|fileHandle
argument_list|)
decl_stmt|;
if|if
condition|(
name|openFileCtx
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No opened stream for fileId:"
operator|+
name|fileHandle
operator|.
name|getFileId
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|fileIdPath
init|=
name|Nfs3Utils
operator|.
name|getFileIdPath
argument_list|(
name|fileHandle
operator|.
name|getFileId
argument_list|()
argument_list|)
decl_stmt|;
name|HdfsDataOutputStream
name|fos
init|=
literal|null
decl_stmt|;
name|Nfs3FileAttributes
name|latestAttr
init|=
literal|null
decl_stmt|;
try|try
block|{
name|int
name|bufferSize
init|=
name|config
operator|.
name|getInt
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|IO_FILE_BUFFER_SIZE_KEY
argument_list|,
name|CommonConfigurationKeysPublic
operator|.
name|IO_FILE_BUFFER_SIZE_DEFAULT
argument_list|)
decl_stmt|;
name|fos
operator|=
name|dfsClient
operator|.
name|append
argument_list|(
name|fileIdPath
argument_list|,
name|bufferSize
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|latestAttr
operator|=
name|Nfs3Utils
operator|.
name|getFileAttr
argument_list|(
name|dfsClient
argument_list|,
name|fileIdPath
argument_list|,
name|iug
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't apapend to file:"
operator|+
name|fileIdPath
operator|+
literal|", error:"
operator|+
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|fos
operator|!=
literal|null
condition|)
block|{
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|WccData
name|fileWcc
init|=
operator|new
name|WccData
argument_list|(
name|Nfs3Utils
operator|.
name|getWccAttr
argument_list|(
name|preOpAttr
argument_list|)
argument_list|,
name|preOpAttr
argument_list|)
decl_stmt|;
name|WRITE3Response
name|response
init|=
operator|new
name|WRITE3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_IO
argument_list|,
name|fileWcc
argument_list|,
name|count
argument_list|,
name|request
operator|.
name|getStableHow
argument_list|()
argument_list|,
name|Nfs3Constant
operator|.
name|WRITE_COMMIT_VERF
argument_list|)
decl_stmt|;
name|Nfs3Utils
operator|.
name|writeChannel
argument_list|(
name|channel
argument_list|,
name|response
operator|.
name|writeHeaderAndResponse
argument_list|(
operator|new
name|XDR
argument_list|()
argument_list|,
name|xid
argument_list|,
operator|new
name|VerifierNone
argument_list|()
argument_list|)
argument_list|,
name|xid
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Add open stream
name|String
name|writeDumpDir
init|=
name|config
operator|.
name|get
argument_list|(
name|Nfs3Constant
operator|.
name|FILE_DUMP_DIR_KEY
argument_list|,
name|Nfs3Constant
operator|.
name|FILE_DUMP_DIR_DEFAULT
argument_list|)
decl_stmt|;
name|openFileCtx
operator|=
operator|new
name|OpenFileCtx
argument_list|(
name|fos
argument_list|,
name|latestAttr
argument_list|,
name|writeDumpDir
operator|+
literal|"/"
operator|+
name|fileHandle
operator|.
name|getFileId
argument_list|()
argument_list|,
name|dfsClient
argument_list|,
name|iug
argument_list|)
expr_stmt|;
name|addOpenFileStream
argument_list|(
name|fileHandle
argument_list|,
name|openFileCtx
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"opened stream for file:"
operator|+
name|fileHandle
operator|.
name|getFileId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Add write into the async job queue
name|openFileCtx
operator|.
name|receivedNewWrite
argument_list|(
name|dfsClient
argument_list|,
name|request
argument_list|,
name|channel
argument_list|,
name|xid
argument_list|,
name|asyncDataService
argument_list|,
name|iug
argument_list|)
expr_stmt|;
return|return;
block|}
DECL|method|handleCommit (DFSClient dfsClient, FileHandle fileHandle, long commitOffset, Channel channel, int xid, Nfs3FileAttributes preOpAttr)
name|void
name|handleCommit
parameter_list|(
name|DFSClient
name|dfsClient
parameter_list|,
name|FileHandle
name|fileHandle
parameter_list|,
name|long
name|commitOffset
parameter_list|,
name|Channel
name|channel
parameter_list|,
name|int
name|xid
parameter_list|,
name|Nfs3FileAttributes
name|preOpAttr
parameter_list|)
block|{
name|int
name|status
decl_stmt|;
name|OpenFileCtx
name|openFileCtx
init|=
name|openFileMap
operator|.
name|get
argument_list|(
name|fileHandle
argument_list|)
decl_stmt|;
if|if
condition|(
name|openFileCtx
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No opened stream for fileId:"
operator|+
name|fileHandle
operator|.
name|getFileId
argument_list|()
operator|+
literal|" commitOffset="
operator|+
name|commitOffset
operator|+
literal|". Return success in this case."
argument_list|)
expr_stmt|;
name|status
operator|=
name|Nfs3Status
operator|.
name|NFS3_OK
expr_stmt|;
block|}
else|else
block|{
name|COMMIT_STATUS
name|ret
init|=
name|openFileCtx
operator|.
name|checkCommit
argument_list|(
name|dfsClient
argument_list|,
name|commitOffset
argument_list|,
name|channel
argument_list|,
name|xid
argument_list|,
name|preOpAttr
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|ret
condition|)
block|{
case|case
name|COMMIT_FINISHED
case|:
case|case
name|COMMIT_INACTIVE_CTX
case|:
name|status
operator|=
name|Nfs3Status
operator|.
name|NFS3_OK
expr_stmt|;
break|break;
case|case
name|COMMIT_INACTIVE_WITH_PENDING_WRITE
case|:
case|case
name|COMMIT_ERROR
case|:
name|status
operator|=
name|Nfs3Status
operator|.
name|NFS3ERR_IO
expr_stmt|;
break|break;
case|case
name|COMMIT_WAIT
case|:
comment|// Do nothing. Commit is async now.
return|return;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Wring error code:"
operator|+
name|ret
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|// Send out the response
name|Nfs3FileAttributes
name|postOpAttr
init|=
literal|null
decl_stmt|;
try|try
block|{
name|String
name|fileIdPath
init|=
name|Nfs3Utils
operator|.
name|getFileIdPath
argument_list|(
name|preOpAttr
operator|.
name|getFileid
argument_list|()
argument_list|)
decl_stmt|;
name|postOpAttr
operator|=
name|Nfs3Utils
operator|.
name|getFileAttr
argument_list|(
name|dfsClient
argument_list|,
name|fileIdPath
argument_list|,
name|iug
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Can't get postOpAttr for fileId: "
operator|+
name|preOpAttr
operator|.
name|getFileid
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|WccData
name|fileWcc
init|=
operator|new
name|WccData
argument_list|(
name|Nfs3Utils
operator|.
name|getWccAttr
argument_list|(
name|preOpAttr
argument_list|)
argument_list|,
name|postOpAttr
argument_list|)
decl_stmt|;
name|COMMIT3Response
name|response
init|=
operator|new
name|COMMIT3Response
argument_list|(
name|status
argument_list|,
name|fileWcc
argument_list|,
name|Nfs3Constant
operator|.
name|WRITE_COMMIT_VERF
argument_list|)
decl_stmt|;
name|Nfs3Utils
operator|.
name|writeChannelCommit
argument_list|(
name|channel
argument_list|,
name|response
operator|.
name|writeHeaderAndResponse
argument_list|(
operator|new
name|XDR
argument_list|()
argument_list|,
name|xid
argument_list|,
operator|new
name|VerifierNone
argument_list|()
argument_list|)
argument_list|,
name|xid
argument_list|)
expr_stmt|;
block|}
comment|/**    * If the file is in cache, update the size based on the cached data size    */
DECL|method|getFileAttr (DFSClient client, FileHandle fileHandle, IdUserGroup iug)
name|Nfs3FileAttributes
name|getFileAttr
parameter_list|(
name|DFSClient
name|client
parameter_list|,
name|FileHandle
name|fileHandle
parameter_list|,
name|IdUserGroup
name|iug
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|fileIdPath
init|=
name|Nfs3Utils
operator|.
name|getFileIdPath
argument_list|(
name|fileHandle
argument_list|)
decl_stmt|;
name|Nfs3FileAttributes
name|attr
init|=
name|Nfs3Utils
operator|.
name|getFileAttr
argument_list|(
name|client
argument_list|,
name|fileIdPath
argument_list|,
name|iug
argument_list|)
decl_stmt|;
if|if
condition|(
name|attr
operator|!=
literal|null
condition|)
block|{
name|OpenFileCtx
name|openFileCtx
init|=
name|openFileMap
operator|.
name|get
argument_list|(
name|fileHandle
argument_list|)
decl_stmt|;
if|if
condition|(
name|openFileCtx
operator|!=
literal|null
condition|)
block|{
name|attr
operator|.
name|setSize
argument_list|(
name|openFileCtx
operator|.
name|getNextOffset
argument_list|()
argument_list|)
expr_stmt|;
name|attr
operator|.
name|setUsed
argument_list|(
name|openFileCtx
operator|.
name|getNextOffset
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|attr
return|;
block|}
DECL|method|getFileAttr (DFSClient client, FileHandle dirHandle, String fileName)
name|Nfs3FileAttributes
name|getFileAttr
parameter_list|(
name|DFSClient
name|client
parameter_list|,
name|FileHandle
name|dirHandle
parameter_list|,
name|String
name|fileName
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|fileIdPath
init|=
name|Nfs3Utils
operator|.
name|getFileIdPath
argument_list|(
name|dirHandle
argument_list|)
operator|+
literal|"/"
operator|+
name|fileName
decl_stmt|;
name|Nfs3FileAttributes
name|attr
init|=
name|Nfs3Utils
operator|.
name|getFileAttr
argument_list|(
name|client
argument_list|,
name|fileIdPath
argument_list|,
name|iug
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|attr
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|attr
operator|.
name|getType
argument_list|()
operator|==
name|NfsFileType
operator|.
name|NFSREG
operator|.
name|toValue
argument_list|()
operator|)
condition|)
block|{
name|OpenFileCtx
name|openFileCtx
init|=
name|openFileMap
operator|.
name|get
argument_list|(
operator|new
name|FileHandle
argument_list|(
name|attr
operator|.
name|getFileId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|openFileCtx
operator|!=
literal|null
condition|)
block|{
name|attr
operator|.
name|setSize
argument_list|(
name|openFileCtx
operator|.
name|getNextOffset
argument_list|()
argument_list|)
expr_stmt|;
name|attr
operator|.
name|setUsed
argument_list|(
name|openFileCtx
operator|.
name|getNextOffset
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|attr
return|;
block|}
comment|/**    * StreamMonitor wakes up periodically to find and closes idle streams.    */
DECL|class|StreamMonitor
class|class
name|StreamMonitor
extends|extends
name|Daemon
block|{
DECL|field|rotation
specifier|private
name|int
name|rotation
init|=
literal|5
operator|*
literal|1000
decl_stmt|;
comment|// 5 seconds
DECL|field|lastWakeupTime
specifier|private
name|long
name|lastWakeupTime
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|FileHandle
argument_list|,
name|OpenFileCtx
argument_list|>
argument_list|>
name|it
init|=
name|openFileMap
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"openFileMap size:"
operator|+
name|openFileMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|FileHandle
argument_list|,
name|OpenFileCtx
argument_list|>
name|pairs
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|OpenFileCtx
name|ctx
init|=
name|pairs
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|streamCleanup
argument_list|(
operator|(
name|pairs
operator|.
name|getKey
argument_list|()
operator|)
operator|.
name|getFileId
argument_list|()
argument_list|,
name|streamTimeout
argument_list|)
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"After remove stream "
operator|+
name|pairs
operator|.
name|getKey
argument_list|()
operator|.
name|getFileId
argument_list|()
operator|+
literal|", the stream number:"
operator|+
name|openFileMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Check if it can sleep
try|try
block|{
name|long
name|workedTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|lastWakeupTime
decl_stmt|;
if|if
condition|(
name|workedTime
operator|<
name|rotation
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"StreamMonitor can still have a sleep:"
operator|+
operator|(
operator|(
name|rotation
operator|-
name|workedTime
operator|)
operator|/
literal|1000
operator|)
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
name|rotation
operator|-
name|workedTime
argument_list|)
expr_stmt|;
block|}
name|lastWakeupTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"StreamMonitor got interrupted"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

