begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.nfs.nfs3
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|nfs
operator|.
name|nfs3
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|InvalidParameterException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsDataOutputStream
operator|.
name|SyncFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|FileHandle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|IdUserGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|Nfs3Constant
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|Nfs3Constant
operator|.
name|WriteStableHow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|Nfs3FileAttributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|Nfs3Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|request
operator|.
name|WRITE3Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|response
operator|.
name|WRITE3Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|response
operator|.
name|WccAttr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|response
operator|.
name|WccData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
operator|.
name|XDR
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|Channel
import|;
end_import

begin_comment
comment|/**  * OpenFileCtx saves the context of one HDFS file output stream. Access to it is  * synchronized by its member lock.  */
end_comment

begin_class
DECL|class|OpenFileCtx
class|class
name|OpenFileCtx
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|OpenFileCtx
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Lock to synchronize OpenFileCtx changes. Thread should get this lock before    * any read/write operation to an OpenFileCtx object    */
DECL|field|ctxLock
specifier|private
specifier|final
name|ReentrantLock
name|ctxLock
decl_stmt|;
comment|// The stream status. False means the stream is closed.
DECL|field|activeState
specifier|private
name|boolean
name|activeState
decl_stmt|;
comment|// The stream write-back status. True means one thread is doing write back.
DECL|field|asyncStatus
specifier|private
name|boolean
name|asyncStatus
decl_stmt|;
DECL|field|fos
specifier|private
specifier|final
name|FSDataOutputStream
name|fos
decl_stmt|;
DECL|field|latestAttr
specifier|private
specifier|final
name|Nfs3FileAttributes
name|latestAttr
decl_stmt|;
DECL|field|nextOffset
specifier|private
name|long
name|nextOffset
decl_stmt|;
DECL|field|pendingWrites
specifier|private
specifier|final
name|SortedMap
argument_list|<
name|OffsetRange
argument_list|,
name|WriteCtx
argument_list|>
name|pendingWrites
decl_stmt|;
comment|// The last write, commit request or write-back event. Updating time to keep
comment|// output steam alive.
DECL|field|lastAccessTime
specifier|private
name|long
name|lastAccessTime
decl_stmt|;
comment|// Pending writes water mark for dump, 1MB
DECL|field|DUMP_WRITE_WATER_MARK
specifier|private
specifier|static
name|int
name|DUMP_WRITE_WATER_MARK
init|=
literal|1024
operator|*
literal|1024
decl_stmt|;
DECL|field|dumpOut
specifier|private
name|FileOutputStream
name|dumpOut
decl_stmt|;
DECL|field|nonSequentialWriteInMemory
specifier|private
name|long
name|nonSequentialWriteInMemory
decl_stmt|;
DECL|field|enabledDump
specifier|private
name|boolean
name|enabledDump
decl_stmt|;
DECL|field|raf
specifier|private
name|RandomAccessFile
name|raf
decl_stmt|;
DECL|field|dumpFilePath
specifier|private
specifier|final
name|String
name|dumpFilePath
decl_stmt|;
DECL|method|updateLastAccessTime ()
specifier|private
name|void
name|updateLastAccessTime
parameter_list|()
block|{
name|lastAccessTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
DECL|method|checkStreamTimeout (long streamTimeout)
specifier|private
name|boolean
name|checkStreamTimeout
parameter_list|(
name|long
name|streamTimeout
parameter_list|)
block|{
return|return
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|lastAccessTime
operator|>
name|streamTimeout
return|;
block|}
comment|// Increase or decrease the memory occupation of non-sequential writes
DECL|method|updateNonSequentialWriteInMemory (long count)
specifier|private
name|long
name|updateNonSequentialWriteInMemory
parameter_list|(
name|long
name|count
parameter_list|)
block|{
name|nonSequentialWriteInMemory
operator|+=
name|count
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Update nonSequentialWriteInMemory by "
operator|+
name|count
operator|+
literal|" new value:"
operator|+
name|nonSequentialWriteInMemory
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nonSequentialWriteInMemory
operator|<
literal|0
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"nonSequentialWriteInMemory is negative after update with count "
operator|+
name|count
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"nonSequentialWriteInMemory is negative after update with count "
operator|+
name|count
argument_list|)
throw|;
block|}
return|return
name|nonSequentialWriteInMemory
return|;
block|}
DECL|method|OpenFileCtx (FSDataOutputStream fos, Nfs3FileAttributes latestAttr, String dumpFilePath)
name|OpenFileCtx
parameter_list|(
name|FSDataOutputStream
name|fos
parameter_list|,
name|Nfs3FileAttributes
name|latestAttr
parameter_list|,
name|String
name|dumpFilePath
parameter_list|)
block|{
name|this
operator|.
name|fos
operator|=
name|fos
expr_stmt|;
name|this
operator|.
name|latestAttr
operator|=
name|latestAttr
expr_stmt|;
name|pendingWrites
operator|=
operator|new
name|TreeMap
argument_list|<
name|OffsetRange
argument_list|,
name|WriteCtx
argument_list|>
argument_list|()
expr_stmt|;
name|updateLastAccessTime
argument_list|()
expr_stmt|;
name|activeState
operator|=
literal|true
expr_stmt|;
name|asyncStatus
operator|=
literal|false
expr_stmt|;
name|dumpOut
operator|=
literal|null
expr_stmt|;
name|raf
operator|=
literal|null
expr_stmt|;
name|nonSequentialWriteInMemory
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|dumpFilePath
operator|=
name|dumpFilePath
expr_stmt|;
name|enabledDump
operator|=
name|dumpFilePath
operator|==
literal|null
condition|?
literal|false
else|:
literal|true
expr_stmt|;
name|ctxLock
operator|=
operator|new
name|ReentrantLock
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|lockCtx ()
specifier|private
name|void
name|lockCtx
parameter_list|()
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|StackTraceElement
index|[]
name|stacktrace
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getStackTrace
argument_list|()
decl_stmt|;
name|StackTraceElement
name|e
init|=
name|stacktrace
index|[
literal|2
index|]
decl_stmt|;
name|String
name|methodName
init|=
name|e
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"lock ctx, caller:"
operator|+
name|methodName
argument_list|)
expr_stmt|;
block|}
name|ctxLock
operator|.
name|lock
argument_list|()
expr_stmt|;
block|}
DECL|method|unlockCtx ()
specifier|private
name|void
name|unlockCtx
parameter_list|()
block|{
name|ctxLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|StackTraceElement
index|[]
name|stacktrace
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getStackTrace
argument_list|()
decl_stmt|;
name|StackTraceElement
name|e
init|=
name|stacktrace
index|[
literal|2
index|]
decl_stmt|;
name|String
name|methodName
init|=
name|e
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"unlock ctx, caller:"
operator|+
name|methodName
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Make a copy of the latestAttr
DECL|method|copyLatestAttr ()
specifier|public
name|Nfs3FileAttributes
name|copyLatestAttr
parameter_list|()
block|{
name|Nfs3FileAttributes
name|ret
decl_stmt|;
name|lockCtx
argument_list|()
expr_stmt|;
try|try
block|{
name|ret
operator|=
operator|new
name|Nfs3FileAttributes
argument_list|(
name|latestAttr
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|unlockCtx
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
DECL|method|getNextOffsetUnprotected ()
specifier|private
name|long
name|getNextOffsetUnprotected
parameter_list|()
block|{
assert|assert
operator|(
name|ctxLock
operator|.
name|isLocked
argument_list|()
operator|)
assert|;
return|return
name|nextOffset
return|;
block|}
DECL|method|getNextOffset ()
specifier|public
name|long
name|getNextOffset
parameter_list|()
block|{
name|long
name|ret
decl_stmt|;
name|lockCtx
argument_list|()
expr_stmt|;
try|try
block|{
name|ret
operator|=
name|getNextOffsetUnprotected
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|unlockCtx
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
comment|// Get flushed offset. Note that flushed data may not be persisted.
DECL|method|getFlushedOffset ()
specifier|private
name|long
name|getFlushedOffset
parameter_list|()
block|{
return|return
name|fos
operator|.
name|getPos
argument_list|()
return|;
block|}
comment|// Check if need to dump the new writes
DECL|method|checkDump (long count)
specifier|private
name|void
name|checkDump
parameter_list|(
name|long
name|count
parameter_list|)
block|{
assert|assert
operator|(
name|ctxLock
operator|.
name|isLocked
argument_list|()
operator|)
assert|;
comment|// Always update the in memory count
name|updateNonSequentialWriteInMemory
argument_list|(
name|count
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|enabledDump
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Do nothing, dump is disabled."
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
if|if
condition|(
name|nonSequentialWriteInMemory
operator|<
name|DUMP_WRITE_WATER_MARK
condition|)
block|{
return|return;
block|}
comment|// Create dump outputstream for the first time
if|if
condition|(
name|dumpOut
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Create dump file:"
operator|+
name|dumpFilePath
argument_list|)
expr_stmt|;
name|File
name|dumpFile
init|=
operator|new
name|File
argument_list|(
name|dumpFilePath
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|dumpFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"The dump file should not exist:"
operator|+
name|dumpFilePath
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"The dump file should not exist:"
operator|+
name|dumpFilePath
argument_list|)
throw|;
block|}
name|dumpOut
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|dumpFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Got failure when creating dump stream "
operator|+
name|dumpFilePath
operator|+
literal|" with error:"
operator|+
name|e
argument_list|)
expr_stmt|;
name|enabledDump
operator|=
literal|false
expr_stmt|;
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|dumpOut
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
comment|// Get raf for the first dump
if|if
condition|(
name|raf
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|raf
operator|=
operator|new
name|RandomAccessFile
argument_list|(
name|dumpFilePath
argument_list|,
literal|"r"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't get random access to file "
operator|+
name|dumpFilePath
argument_list|)
expr_stmt|;
comment|// Disable dump
name|enabledDump
operator|=
literal|false
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Start dump, current write number:"
operator|+
name|pendingWrites
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Iterator
argument_list|<
name|OffsetRange
argument_list|>
name|it
init|=
name|pendingWrites
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|OffsetRange
name|key
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|WriteCtx
name|writeCtx
init|=
name|pendingWrites
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
try|try
block|{
name|long
name|dumpedDataSize
init|=
name|writeCtx
operator|.
name|dumpData
argument_list|(
name|dumpOut
argument_list|,
name|raf
argument_list|)
decl_stmt|;
if|if
condition|(
name|dumpedDataSize
operator|>
literal|0
condition|)
block|{
name|updateNonSequentialWriteInMemory
argument_list|(
operator|-
name|dumpedDataSize
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Dump data failed:"
operator|+
name|writeCtx
operator|+
literal|" with error:"
operator|+
name|e
argument_list|)
expr_stmt|;
comment|// Disable dump
name|enabledDump
operator|=
literal|false
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
name|nonSequentialWriteInMemory
operator|!=
literal|0
condition|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"After dump, nonSequentialWriteInMemory is not zero: "
operator|+
name|nonSequentialWriteInMemory
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"After dump, nonSequentialWriteInMemory is not zero: "
operator|+
name|nonSequentialWriteInMemory
argument_list|)
throw|;
block|}
block|}
DECL|method|checkRepeatedWriteRequest (WRITE3Request request, Channel channel, int xid)
specifier|private
name|WriteCtx
name|checkRepeatedWriteRequest
parameter_list|(
name|WRITE3Request
name|request
parameter_list|,
name|Channel
name|channel
parameter_list|,
name|int
name|xid
parameter_list|)
block|{
name|OffsetRange
name|range
init|=
operator|new
name|OffsetRange
argument_list|(
name|request
operator|.
name|getOffset
argument_list|()
argument_list|,
name|request
operator|.
name|getOffset
argument_list|()
operator|+
name|request
operator|.
name|getCount
argument_list|()
argument_list|)
decl_stmt|;
name|WriteCtx
name|writeCtx
init|=
name|pendingWrites
operator|.
name|get
argument_list|(
name|range
argument_list|)
decl_stmt|;
if|if
condition|(
name|writeCtx
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
if|if
condition|(
name|xid
operator|!=
name|writeCtx
operator|.
name|getXid
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Got a repeated request, same range, with a different xid:"
operator|+
name|xid
operator|+
literal|" xid in old request:"
operator|+
name|writeCtx
operator|.
name|getXid
argument_list|()
argument_list|)
expr_stmt|;
comment|//TODO: better handling.
block|}
return|return
name|writeCtx
return|;
block|}
block|}
DECL|method|receivedNewWrite (DFSClient dfsClient, WRITE3Request request, Channel channel, int xid, AsyncDataService asyncDataService, IdUserGroup iug)
specifier|public
name|void
name|receivedNewWrite
parameter_list|(
name|DFSClient
name|dfsClient
parameter_list|,
name|WRITE3Request
name|request
parameter_list|,
name|Channel
name|channel
parameter_list|,
name|int
name|xid
parameter_list|,
name|AsyncDataService
name|asyncDataService
parameter_list|,
name|IdUserGroup
name|iug
parameter_list|)
block|{
name|lockCtx
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|activeState
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"OpenFileCtx is inactive, fileId:"
operator|+
name|request
operator|.
name|getHandle
argument_list|()
operator|.
name|getFileId
argument_list|()
argument_list|)
expr_stmt|;
name|WccData
name|fileWcc
init|=
operator|new
name|WccData
argument_list|(
name|latestAttr
operator|.
name|getWccAttr
argument_list|()
argument_list|,
name|latestAttr
argument_list|)
decl_stmt|;
name|WRITE3Response
name|response
init|=
operator|new
name|WRITE3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_IO
argument_list|,
name|fileWcc
argument_list|,
literal|0
argument_list|,
name|request
operator|.
name|getStableHow
argument_list|()
argument_list|,
name|Nfs3Constant
operator|.
name|WRITE_COMMIT_VERF
argument_list|)
decl_stmt|;
name|Nfs3Utils
operator|.
name|writeChannel
argument_list|(
name|channel
argument_list|,
name|response
operator|.
name|send
argument_list|(
operator|new
name|XDR
argument_list|()
argument_list|,
name|xid
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Handle repeated write requests(same xid or not).
comment|// If already replied, send reply again. If not replied, drop the
comment|// repeated request.
name|WriteCtx
name|existantWriteCtx
init|=
name|checkRepeatedWriteRequest
argument_list|(
name|request
argument_list|,
name|channel
argument_list|,
name|xid
argument_list|)
decl_stmt|;
if|if
condition|(
name|existantWriteCtx
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|existantWriteCtx
operator|.
name|getReplied
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Repeated write request which hasn't be served: xid="
operator|+
name|xid
operator|+
literal|", drop it."
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Repeated write request which is already served: xid="
operator|+
name|xid
operator|+
literal|", resend response."
argument_list|)
expr_stmt|;
block|}
name|WccData
name|fileWcc
init|=
operator|new
name|WccData
argument_list|(
name|latestAttr
operator|.
name|getWccAttr
argument_list|()
argument_list|,
name|latestAttr
argument_list|)
decl_stmt|;
name|WRITE3Response
name|response
init|=
operator|new
name|WRITE3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3_OK
argument_list|,
name|fileWcc
argument_list|,
name|request
operator|.
name|getCount
argument_list|()
argument_list|,
name|request
operator|.
name|getStableHow
argument_list|()
argument_list|,
name|Nfs3Constant
operator|.
name|WRITE_COMMIT_VERF
argument_list|)
decl_stmt|;
name|Nfs3Utils
operator|.
name|writeChannel
argument_list|(
name|channel
argument_list|,
name|response
operator|.
name|send
argument_list|(
operator|new
name|XDR
argument_list|()
argument_list|,
name|xid
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|updateLastAccessTime
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|receivedNewWriteInternal
argument_list|(
name|dfsClient
argument_list|,
name|request
argument_list|,
name|channel
argument_list|,
name|xid
argument_list|,
name|asyncDataService
argument_list|,
name|iug
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|unlockCtx
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|receivedNewWriteInternal (DFSClient dfsClient, WRITE3Request request, Channel channel, int xid, AsyncDataService asyncDataService, IdUserGroup iug)
specifier|private
name|void
name|receivedNewWriteInternal
parameter_list|(
name|DFSClient
name|dfsClient
parameter_list|,
name|WRITE3Request
name|request
parameter_list|,
name|Channel
name|channel
parameter_list|,
name|int
name|xid
parameter_list|,
name|AsyncDataService
name|asyncDataService
parameter_list|,
name|IdUserGroup
name|iug
parameter_list|)
block|{
name|long
name|offset
init|=
name|request
operator|.
name|getOffset
argument_list|()
decl_stmt|;
name|int
name|count
init|=
name|request
operator|.
name|getCount
argument_list|()
decl_stmt|;
name|WriteStableHow
name|stableHow
init|=
name|request
operator|.
name|getStableHow
argument_list|()
decl_stmt|;
comment|// Get file length, fail non-append call
name|WccAttr
name|preOpAttr
init|=
name|latestAttr
operator|.
name|getWccAttr
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"requesed offset="
operator|+
name|offset
operator|+
literal|" and current filesize="
operator|+
name|preOpAttr
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|long
name|nextOffset
init|=
name|getNextOffsetUnprotected
argument_list|()
decl_stmt|;
if|if
condition|(
name|offset
operator|==
name|nextOffset
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Add to the list, update nextOffset and notify the writer,"
operator|+
literal|" nextOffset:"
operator|+
name|nextOffset
argument_list|)
expr_stmt|;
name|WriteCtx
name|writeCtx
init|=
operator|new
name|WriteCtx
argument_list|(
name|request
operator|.
name|getHandle
argument_list|()
argument_list|,
name|request
operator|.
name|getOffset
argument_list|()
argument_list|,
name|request
operator|.
name|getCount
argument_list|()
argument_list|,
name|request
operator|.
name|getStableHow
argument_list|()
argument_list|,
name|request
operator|.
name|getData
argument_list|()
operator|.
name|array
argument_list|()
argument_list|,
name|channel
argument_list|,
name|xid
argument_list|,
literal|false
argument_list|,
name|WriteCtx
operator|.
name|NO_DUMP
argument_list|)
decl_stmt|;
name|addWrite
argument_list|(
name|writeCtx
argument_list|)
expr_stmt|;
comment|// Create an async task and change openFileCtx status to indicate async
comment|// task pending
if|if
condition|(
operator|!
name|asyncStatus
condition|)
block|{
name|asyncStatus
operator|=
literal|true
expr_stmt|;
name|asyncDataService
operator|.
name|execute
argument_list|(
operator|new
name|AsyncDataService
operator|.
name|WriteBackTask
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Update the write time first
name|updateLastAccessTime
argument_list|()
expr_stmt|;
name|Nfs3FileAttributes
name|postOpAttr
init|=
operator|new
name|Nfs3FileAttributes
argument_list|(
name|latestAttr
argument_list|)
decl_stmt|;
comment|// Send response immediately for unstable write
if|if
condition|(
name|request
operator|.
name|getStableHow
argument_list|()
operator|==
name|WriteStableHow
operator|.
name|UNSTABLE
condition|)
block|{
name|WccData
name|fileWcc
init|=
operator|new
name|WccData
argument_list|(
name|preOpAttr
argument_list|,
name|postOpAttr
argument_list|)
decl_stmt|;
name|WRITE3Response
name|response
init|=
operator|new
name|WRITE3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3_OK
argument_list|,
name|fileWcc
argument_list|,
name|count
argument_list|,
name|stableHow
argument_list|,
name|Nfs3Constant
operator|.
name|WRITE_COMMIT_VERF
argument_list|)
decl_stmt|;
name|Nfs3Utils
operator|.
name|writeChannel
argument_list|(
name|channel
argument_list|,
name|response
operator|.
name|send
argument_list|(
operator|new
name|XDR
argument_list|()
argument_list|,
name|xid
argument_list|)
argument_list|)
expr_stmt|;
name|writeCtx
operator|.
name|setReplied
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|offset
operator|>
name|nextOffset
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Add new write to the list but not update nextOffset:"
operator|+
name|nextOffset
argument_list|)
expr_stmt|;
name|WriteCtx
name|writeCtx
init|=
operator|new
name|WriteCtx
argument_list|(
name|request
operator|.
name|getHandle
argument_list|()
argument_list|,
name|request
operator|.
name|getOffset
argument_list|()
argument_list|,
name|request
operator|.
name|getCount
argument_list|()
argument_list|,
name|request
operator|.
name|getStableHow
argument_list|()
argument_list|,
name|request
operator|.
name|getData
argument_list|()
operator|.
name|array
argument_list|()
argument_list|,
name|channel
argument_list|,
name|xid
argument_list|,
literal|false
argument_list|,
name|WriteCtx
operator|.
name|ALLOW_DUMP
argument_list|)
decl_stmt|;
name|addWrite
argument_list|(
name|writeCtx
argument_list|)
expr_stmt|;
comment|// Check if need to dump some pending requests to file
name|checkDump
argument_list|(
name|request
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|updateLastAccessTime
argument_list|()
expr_stmt|;
name|Nfs3FileAttributes
name|postOpAttr
init|=
operator|new
name|Nfs3FileAttributes
argument_list|(
name|latestAttr
argument_list|)
decl_stmt|;
comment|// In test, noticed some Linux client sends a batch (e.g., 1MB)
comment|// of reordered writes and won't send more writes until it gets
comment|// responses of the previous batch. So here send response immediately for
comment|// unstable non-sequential write
if|if
condition|(
name|request
operator|.
name|getStableHow
argument_list|()
operator|==
name|WriteStableHow
operator|.
name|UNSTABLE
condition|)
block|{
name|WccData
name|fileWcc
init|=
operator|new
name|WccData
argument_list|(
name|preOpAttr
argument_list|,
name|postOpAttr
argument_list|)
decl_stmt|;
name|WRITE3Response
name|response
init|=
operator|new
name|WRITE3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3_OK
argument_list|,
name|fileWcc
argument_list|,
name|count
argument_list|,
name|stableHow
argument_list|,
name|Nfs3Constant
operator|.
name|WRITE_COMMIT_VERF
argument_list|)
decl_stmt|;
name|Nfs3Utils
operator|.
name|writeChannel
argument_list|(
name|channel
argument_list|,
name|response
operator|.
name|send
argument_list|(
operator|new
name|XDR
argument_list|()
argument_list|,
name|xid
argument_list|)
argument_list|)
expr_stmt|;
name|writeCtx
operator|.
name|setReplied
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// offset< nextOffset
name|LOG
operator|.
name|warn
argument_list|(
literal|"(offset,count,nextOffset):"
operator|+
literal|"("
operator|+
name|offset
operator|+
literal|","
operator|+
name|count
operator|+
literal|","
operator|+
name|nextOffset
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|WccData
name|wccData
init|=
operator|new
name|WccData
argument_list|(
name|preOpAttr
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|WRITE3Response
name|response
decl_stmt|;
if|if
condition|(
name|offset
operator|+
name|count
operator|>
name|nextOffset
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Haven't noticed any partial overwrite out of a sequential file"
operator|+
literal|"write requests, so treat it as a real random write, no support."
argument_list|)
expr_stmt|;
name|response
operator|=
operator|new
name|WRITE3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_INVAL
argument_list|,
name|wccData
argument_list|,
literal|0
argument_list|,
name|WriteStableHow
operator|.
name|UNSTABLE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Process perfectOverWrite"
argument_list|)
expr_stmt|;
block|}
name|response
operator|=
name|processPerfectOverWrite
argument_list|(
name|dfsClient
argument_list|,
name|offset
argument_list|,
name|count
argument_list|,
name|stableHow
argument_list|,
name|request
operator|.
name|getData
argument_list|()
operator|.
name|array
argument_list|()
argument_list|,
name|Nfs3Utils
operator|.
name|getFileIdPath
argument_list|(
name|request
operator|.
name|getHandle
argument_list|()
argument_list|)
argument_list|,
name|wccData
argument_list|,
name|iug
argument_list|)
expr_stmt|;
block|}
name|updateLastAccessTime
argument_list|()
expr_stmt|;
name|Nfs3Utils
operator|.
name|writeChannel
argument_list|(
name|channel
argument_list|,
name|response
operator|.
name|send
argument_list|(
operator|new
name|XDR
argument_list|()
argument_list|,
name|xid
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Honor 2 kinds of overwrites: 1). support some application like touch(write    * the same content back to change mtime), 2) client somehow sends the same    * write again in a different RPC.    */
DECL|method|processPerfectOverWrite (DFSClient dfsClient, long offset, int count, WriteStableHow stableHow, byte[] data, String path, WccData wccData, IdUserGroup iug)
specifier|private
name|WRITE3Response
name|processPerfectOverWrite
parameter_list|(
name|DFSClient
name|dfsClient
parameter_list|,
name|long
name|offset
parameter_list|,
name|int
name|count
parameter_list|,
name|WriteStableHow
name|stableHow
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|String
name|path
parameter_list|,
name|WccData
name|wccData
parameter_list|,
name|IdUserGroup
name|iug
parameter_list|)
block|{
assert|assert
operator|(
name|ctxLock
operator|.
name|isLocked
argument_list|()
operator|)
assert|;
name|WRITE3Response
name|response
init|=
literal|null
decl_stmt|;
comment|// Read the content back
name|byte
index|[]
name|readbuffer
init|=
operator|new
name|byte
index|[
name|count
index|]
decl_stmt|;
name|int
name|readCount
init|=
literal|0
decl_stmt|;
name|FSDataInputStream
name|fis
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// Sync file data and length to avoid partial read failure
operator|(
operator|(
name|HdfsDataOutputStream
operator|)
name|fos
operator|)
operator|.
name|hsync
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|SyncFlag
operator|.
name|UPDATE_LENGTH
argument_list|)
argument_list|)
expr_stmt|;
name|fis
operator|=
operator|new
name|FSDataInputStream
argument_list|(
name|dfsClient
operator|.
name|open
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|readCount
operator|=
name|fis
operator|.
name|read
argument_list|(
name|offset
argument_list|,
name|readbuffer
argument_list|,
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
if|if
condition|(
name|readCount
operator|<
name|count
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't read back "
operator|+
name|count
operator|+
literal|" bytes, partial read size:"
operator|+
name|readCount
argument_list|)
expr_stmt|;
return|return
name|response
operator|=
operator|new
name|WRITE3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_IO
argument_list|,
name|wccData
argument_list|,
literal|0
argument_list|,
name|stableHow
argument_list|,
name|Nfs3Constant
operator|.
name|WRITE_COMMIT_VERF
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Read failed when processing possible perfect overwrite, path="
operator|+
name|path
operator|+
literal|" error:"
operator|+
name|e
argument_list|)
expr_stmt|;
return|return
name|response
operator|=
operator|new
name|WRITE3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_IO
argument_list|,
name|wccData
argument_list|,
literal|0
argument_list|,
name|stableHow
argument_list|,
name|Nfs3Constant
operator|.
name|WRITE_COMMIT_VERF
argument_list|)
return|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|fis
argument_list|)
expr_stmt|;
block|}
comment|// Compare with the request
name|Comparator
name|comparator
init|=
operator|new
name|Comparator
argument_list|()
decl_stmt|;
if|if
condition|(
name|comparator
operator|.
name|compare
argument_list|(
name|readbuffer
argument_list|,
literal|0
argument_list|,
name|readCount
argument_list|,
name|data
argument_list|,
literal|0
argument_list|,
name|count
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Perfect overwrite has different content"
argument_list|)
expr_stmt|;
name|response
operator|=
operator|new
name|WRITE3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_INVAL
argument_list|,
name|wccData
argument_list|,
literal|0
argument_list|,
name|stableHow
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Perfect overwrite has same content,"
operator|+
literal|" updating the mtime, then return success"
argument_list|)
expr_stmt|;
name|Nfs3FileAttributes
name|postOpAttr
init|=
literal|null
decl_stmt|;
try|try
block|{
name|dfsClient
operator|.
name|setTimes
argument_list|(
name|path
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|postOpAttr
operator|=
name|Nfs3Utils
operator|.
name|getFileAttr
argument_list|(
name|dfsClient
argument_list|,
name|path
argument_list|,
name|iug
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got error when processing perfect overwrite, path="
operator|+
name|path
operator|+
literal|" error:"
operator|+
name|e
argument_list|)
expr_stmt|;
return|return
operator|new
name|WRITE3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_IO
argument_list|,
name|wccData
argument_list|,
literal|0
argument_list|,
name|stableHow
argument_list|,
literal|0
argument_list|)
return|;
block|}
name|wccData
operator|.
name|setPostOpAttr
argument_list|(
name|postOpAttr
argument_list|)
expr_stmt|;
name|response
operator|=
operator|new
name|WRITE3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3_OK
argument_list|,
name|wccData
argument_list|,
name|count
argument_list|,
name|stableHow
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
name|response
return|;
block|}
DECL|field|COMMIT_FINISHED
specifier|public
specifier|final
specifier|static
name|int
name|COMMIT_FINISHED
init|=
literal|0
decl_stmt|;
DECL|field|COMMIT_WAIT
specifier|public
specifier|final
specifier|static
name|int
name|COMMIT_WAIT
init|=
literal|1
decl_stmt|;
DECL|field|COMMIT_INACTIVE_CTX
specifier|public
specifier|final
specifier|static
name|int
name|COMMIT_INACTIVE_CTX
init|=
literal|2
decl_stmt|;
DECL|field|COMMIT_ERROR
specifier|public
specifier|final
specifier|static
name|int
name|COMMIT_ERROR
init|=
literal|3
decl_stmt|;
comment|/**    * return one commit status: COMMIT_FINISHED, COMMIT_WAIT,    * COMMIT_INACTIVE_CTX, COMMIT_ERROR    */
DECL|method|checkCommit (long commitOffset)
specifier|public
name|int
name|checkCommit
parameter_list|(
name|long
name|commitOffset
parameter_list|)
block|{
name|int
name|ret
init|=
name|COMMIT_WAIT
decl_stmt|;
name|lockCtx
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|activeState
condition|)
block|{
name|ret
operator|=
name|COMMIT_INACTIVE_CTX
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|checkCommitInternal
argument_list|(
name|commitOffset
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|unlockCtx
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
DECL|method|checkCommitInternal (long commitOffset)
specifier|private
name|int
name|checkCommitInternal
parameter_list|(
name|long
name|commitOffset
parameter_list|)
block|{
if|if
condition|(
name|commitOffset
operator|==
literal|0
condition|)
block|{
comment|// Commit whole file
name|commitOffset
operator|=
name|getNextOffsetUnprotected
argument_list|()
expr_stmt|;
block|}
name|long
name|flushed
init|=
name|getFlushedOffset
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"getFlushedOffset="
operator|+
name|flushed
operator|+
literal|" commitOffset="
operator|+
name|commitOffset
argument_list|)
expr_stmt|;
if|if
condition|(
name|flushed
operator|<
name|commitOffset
condition|)
block|{
comment|// Keep stream active
name|updateLastAccessTime
argument_list|()
expr_stmt|;
return|return
name|COMMIT_WAIT
return|;
block|}
name|int
name|ret
init|=
name|COMMIT_WAIT
decl_stmt|;
try|try
block|{
comment|// Sync file data and length
operator|(
operator|(
name|HdfsDataOutputStream
operator|)
name|fos
operator|)
operator|.
name|hsync
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|SyncFlag
operator|.
name|UPDATE_LENGTH
argument_list|)
argument_list|)
expr_stmt|;
comment|// Nothing to do for metadata since attr related change is pass-through
name|ret
operator|=
name|COMMIT_FINISHED
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Got stream error during data sync:"
operator|+
name|e
argument_list|)
expr_stmt|;
comment|// Do nothing. Stream will be closed eventually by StreamMonitor.
name|ret
operator|=
name|COMMIT_ERROR
expr_stmt|;
block|}
comment|// Keep stream active
name|updateLastAccessTime
argument_list|()
expr_stmt|;
return|return
name|ret
return|;
block|}
DECL|method|addWrite (WriteCtx writeCtx)
specifier|private
name|void
name|addWrite
parameter_list|(
name|WriteCtx
name|writeCtx
parameter_list|)
block|{
assert|assert
operator|(
name|ctxLock
operator|.
name|isLocked
argument_list|()
operator|)
assert|;
name|long
name|offset
init|=
name|writeCtx
operator|.
name|getOffset
argument_list|()
decl_stmt|;
name|int
name|count
init|=
name|writeCtx
operator|.
name|getCount
argument_list|()
decl_stmt|;
name|pendingWrites
operator|.
name|put
argument_list|(
operator|new
name|OffsetRange
argument_list|(
name|offset
argument_list|,
name|offset
operator|+
name|count
argument_list|)
argument_list|,
name|writeCtx
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check stream status to decide if it should be closed    * @return true, remove stream; false, keep stream    */
DECL|method|streamCleanup (long fileId, long streamTimeout)
specifier|public
name|boolean
name|streamCleanup
parameter_list|(
name|long
name|fileId
parameter_list|,
name|long
name|streamTimeout
parameter_list|)
block|{
if|if
condition|(
name|streamTimeout
operator|<
name|WriteManager
operator|.
name|MINIMIUM_STREAM_TIMEOUT
condition|)
block|{
throw|throw
operator|new
name|InvalidParameterException
argument_list|(
literal|"StreamTimeout"
operator|+
name|streamTimeout
operator|+
literal|"ms is less than MINIMIUM_STREAM_TIMEOUT "
operator|+
name|WriteManager
operator|.
name|MINIMIUM_STREAM_TIMEOUT
operator|+
literal|"ms"
argument_list|)
throw|;
block|}
name|boolean
name|flag
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|ctxLock
operator|.
name|tryLock
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Another thread is working on it"
operator|+
name|ctxLock
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|flag
return|;
block|}
try|try
block|{
comment|// Check the stream timeout
if|if
condition|(
name|checkStreamTimeout
argument_list|(
name|streamTimeout
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"closing stream for fileId:"
operator|+
name|fileId
argument_list|)
expr_stmt|;
name|cleanup
argument_list|()
expr_stmt|;
name|flag
operator|=
literal|true
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|unlockCtx
argument_list|()
expr_stmt|;
block|}
return|return
name|flag
return|;
block|}
comment|// Invoked by AsynDataService to do the write back
DECL|method|executeWriteBack ()
specifier|public
name|void
name|executeWriteBack
parameter_list|()
block|{
name|long
name|nextOffset
decl_stmt|;
name|OffsetRange
name|key
decl_stmt|;
name|WriteCtx
name|writeCtx
decl_stmt|;
try|try
block|{
comment|// Don't lock OpenFileCtx for all writes to reduce the timeout of other
comment|// client request to the same file
while|while
condition|(
literal|true
condition|)
block|{
name|lockCtx
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|asyncStatus
condition|)
block|{
comment|// This should never happen. There should be only one thread working
comment|// on one OpenFileCtx anytime.
name|LOG
operator|.
name|fatal
argument_list|(
literal|"The openFileCtx has false async status"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"The openFileCtx has false async status"
argument_list|)
throw|;
block|}
comment|// Any single write failure can change activeState to false, so do the
comment|// check each loop.
if|if
condition|(
name|pendingWrites
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"The asyn write task has no pendding writes, fileId: "
operator|+
name|latestAttr
operator|.
name|getFileId
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
if|if
condition|(
operator|!
name|activeState
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"The openFileCtx is not active anymore, fileId: "
operator|+
name|latestAttr
operator|.
name|getFileId
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
comment|// Get the next sequential write
name|nextOffset
operator|=
name|getNextOffsetUnprotected
argument_list|()
expr_stmt|;
name|key
operator|=
name|pendingWrites
operator|.
name|firstKey
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"key.getMin()="
operator|+
name|key
operator|.
name|getMin
argument_list|()
operator|+
literal|" nextOffset="
operator|+
name|nextOffset
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|key
operator|.
name|getMin
argument_list|()
operator|>
name|nextOffset
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"The next sequencial write has not arrived yet"
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|getMin
argument_list|()
operator|<
name|nextOffset
operator|&&
name|key
operator|.
name|getMax
argument_list|()
operator|>
name|nextOffset
condition|)
block|{
comment|// Can't handle overlapping write. Didn't see it in tests yet.
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Got a overlapping write ("
operator|+
name|key
operator|.
name|getMin
argument_list|()
operator|+
literal|","
operator|+
name|key
operator|.
name|getMax
argument_list|()
operator|+
literal|"), nextOffset="
operator|+
name|nextOffset
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Got a overlapping write ("
operator|+
name|key
operator|.
name|getMin
argument_list|()
operator|+
literal|","
operator|+
name|key
operator|.
name|getMax
argument_list|()
operator|+
literal|"), nextOffset="
operator|+
name|nextOffset
argument_list|)
throw|;
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Remove write("
operator|+
name|key
operator|.
name|getMin
argument_list|()
operator|+
literal|"-"
operator|+
name|key
operator|.
name|getMax
argument_list|()
operator|+
literal|") from the list"
argument_list|)
expr_stmt|;
block|}
name|writeCtx
operator|=
name|pendingWrites
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
comment|// Do the write
name|doSingleWrite
argument_list|(
name|writeCtx
argument_list|)
expr_stmt|;
name|updateLastAccessTime
argument_list|()
expr_stmt|;
block|}
name|unlockCtx
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
comment|// Always reset the async status so another async task can be created
comment|// for this file
name|asyncStatus
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|ctxLock
operator|.
name|isHeldByCurrentThread
argument_list|()
condition|)
block|{
name|unlockCtx
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|doSingleWrite (final WriteCtx writeCtx)
specifier|private
name|void
name|doSingleWrite
parameter_list|(
specifier|final
name|WriteCtx
name|writeCtx
parameter_list|)
block|{
assert|assert
operator|(
name|ctxLock
operator|.
name|isLocked
argument_list|()
operator|)
assert|;
name|Channel
name|channel
init|=
name|writeCtx
operator|.
name|getChannel
argument_list|()
decl_stmt|;
name|int
name|xid
init|=
name|writeCtx
operator|.
name|getXid
argument_list|()
decl_stmt|;
name|long
name|offset
init|=
name|writeCtx
operator|.
name|getOffset
argument_list|()
decl_stmt|;
name|int
name|count
init|=
name|writeCtx
operator|.
name|getCount
argument_list|()
decl_stmt|;
name|WriteStableHow
name|stableHow
init|=
name|writeCtx
operator|.
name|getStableHow
argument_list|()
decl_stmt|;
name|byte
index|[]
name|data
init|=
literal|null
decl_stmt|;
try|try
block|{
name|data
operator|=
name|writeCtx
operator|.
name|getData
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to get request data offset:"
operator|+
name|offset
operator|+
literal|" count:"
operator|+
name|count
operator|+
literal|" error:"
operator|+
name|e1
argument_list|)
expr_stmt|;
comment|// Cleanup everything
name|cleanup
argument_list|()
expr_stmt|;
return|return;
block|}
assert|assert
operator|(
name|data
operator|.
name|length
operator|==
name|count
operator|)
assert|;
name|FileHandle
name|handle
init|=
name|writeCtx
operator|.
name|getHandle
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"do write, fileId: "
operator|+
name|handle
operator|.
name|getFileId
argument_list|()
operator|+
literal|" offset: "
operator|+
name|offset
operator|+
literal|" length:"
operator|+
name|count
operator|+
literal|" stableHow:"
operator|+
name|stableHow
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|fos
operator|.
name|write
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
if|if
condition|(
name|fos
operator|.
name|getPos
argument_list|()
operator|!=
operator|(
name|offset
operator|+
name|count
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"output stream is out of sync, pos="
operator|+
name|fos
operator|.
name|getPos
argument_list|()
operator|+
literal|" and nextOffset should be"
operator|+
operator|(
name|offset
operator|+
name|count
operator|)
argument_list|)
throw|;
block|}
name|nextOffset
operator|=
name|fos
operator|.
name|getPos
argument_list|()
expr_stmt|;
comment|// Reduce memory occupation size if request was allowed dumped
if|if
condition|(
name|writeCtx
operator|.
name|getDataState
argument_list|()
operator|==
name|WriteCtx
operator|.
name|ALLOW_DUMP
condition|)
block|{
name|updateNonSequentialWriteInMemory
argument_list|(
operator|-
name|count
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|writeCtx
operator|.
name|getReplied
argument_list|()
condition|)
block|{
name|WccAttr
name|preOpAttr
init|=
name|latestAttr
operator|.
name|getWccAttr
argument_list|()
decl_stmt|;
name|WccData
name|fileWcc
init|=
operator|new
name|WccData
argument_list|(
name|preOpAttr
argument_list|,
name|latestAttr
argument_list|)
decl_stmt|;
name|WRITE3Response
name|response
init|=
operator|new
name|WRITE3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3_OK
argument_list|,
name|fileWcc
argument_list|,
name|count
argument_list|,
name|stableHow
argument_list|,
name|Nfs3Constant
operator|.
name|WRITE_COMMIT_VERF
argument_list|)
decl_stmt|;
name|Nfs3Utils
operator|.
name|writeChannel
argument_list|(
name|channel
argument_list|,
name|response
operator|.
name|send
argument_list|(
operator|new
name|XDR
argument_list|()
argument_list|,
name|xid
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error writing to fileId "
operator|+
name|handle
operator|.
name|getFileId
argument_list|()
operator|+
literal|" at offset "
operator|+
name|offset
operator|+
literal|" and length "
operator|+
name|data
operator|.
name|length
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|writeCtx
operator|.
name|getReplied
argument_list|()
condition|)
block|{
name|WRITE3Response
name|response
init|=
operator|new
name|WRITE3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_IO
argument_list|)
decl_stmt|;
name|Nfs3Utils
operator|.
name|writeChannel
argument_list|(
name|channel
argument_list|,
name|response
operator|.
name|send
argument_list|(
operator|new
name|XDR
argument_list|()
argument_list|,
name|xid
argument_list|)
argument_list|)
expr_stmt|;
comment|// Keep stream open. Either client retries or SteamMonitor closes it.
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Clean up open file context for fileId: "
operator|+
name|latestAttr
operator|.
name|getFileid
argument_list|()
argument_list|)
expr_stmt|;
name|cleanup
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|cleanup ()
specifier|private
name|void
name|cleanup
parameter_list|()
block|{
assert|assert
operator|(
name|ctxLock
operator|.
name|isLocked
argument_list|()
operator|)
assert|;
name|activeState
operator|=
literal|false
expr_stmt|;
comment|// Close stream
try|try
block|{
if|if
condition|(
name|fos
operator|!=
literal|null
condition|)
block|{
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Can't close stream for fileId:"
operator|+
name|latestAttr
operator|.
name|getFileid
argument_list|()
operator|+
literal|", error:"
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Reply error for pending writes
name|LOG
operator|.
name|info
argument_list|(
literal|"There are "
operator|+
name|pendingWrites
operator|.
name|size
argument_list|()
operator|+
literal|" pending writes."
argument_list|)
expr_stmt|;
name|WccAttr
name|preOpAttr
init|=
name|latestAttr
operator|.
name|getWccAttr
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|pendingWrites
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|OffsetRange
name|key
init|=
name|pendingWrites
operator|.
name|firstKey
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Fail pending write: ("
operator|+
name|key
operator|.
name|getMin
argument_list|()
operator|+
literal|","
operator|+
name|key
operator|.
name|getMax
argument_list|()
operator|+
literal|"), nextOffset="
operator|+
name|getNextOffsetUnprotected
argument_list|()
argument_list|)
expr_stmt|;
name|WriteCtx
name|writeCtx
init|=
name|pendingWrites
operator|.
name|remove
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|writeCtx
operator|.
name|getReplied
argument_list|()
condition|)
block|{
name|WccData
name|fileWcc
init|=
operator|new
name|WccData
argument_list|(
name|preOpAttr
argument_list|,
name|latestAttr
argument_list|)
decl_stmt|;
name|WRITE3Response
name|response
init|=
operator|new
name|WRITE3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_IO
argument_list|,
name|fileWcc
argument_list|,
literal|0
argument_list|,
name|writeCtx
operator|.
name|getStableHow
argument_list|()
argument_list|,
name|Nfs3Constant
operator|.
name|WRITE_COMMIT_VERF
argument_list|)
decl_stmt|;
name|Nfs3Utils
operator|.
name|writeChannel
argument_list|(
name|writeCtx
operator|.
name|getChannel
argument_list|()
argument_list|,
name|response
operator|.
name|send
argument_list|(
operator|new
name|XDR
argument_list|()
argument_list|,
name|writeCtx
operator|.
name|getXid
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Cleanup dump file
if|if
condition|(
name|dumpOut
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|dumpOut
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|raf
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|raf
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
name|File
name|dumpFile
init|=
operator|new
name|File
argument_list|(
name|dumpFilePath
argument_list|)
decl_stmt|;
if|if
condition|(
name|dumpFile
operator|.
name|delete
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to delete dumpfile: "
operator|+
name|dumpFile
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

