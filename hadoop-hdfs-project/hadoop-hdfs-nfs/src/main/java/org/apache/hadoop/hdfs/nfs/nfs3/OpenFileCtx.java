begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.nfs.nfs3
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|nfs
operator|.
name|nfs3
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|ClosedChannelException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentNavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentSkipListMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsDataOutputStream
operator|.
name|SyncFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|WriteCtx
operator|.
name|DataState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|FileHandle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|IdUserGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|Nfs3Constant
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|Nfs3Constant
operator|.
name|WriteStableHow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|Nfs3FileAttributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|Nfs3Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|request
operator|.
name|WRITE3Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|response
operator|.
name|COMMIT3Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|response
operator|.
name|WRITE3Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|response
operator|.
name|WccAttr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|nfs
operator|.
name|nfs3
operator|.
name|response
operator|.
name|WccData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
operator|.
name|XDR
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|oncrpc
operator|.
name|security
operator|.
name|VerifierNone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Daemon
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * OpenFileCtx saves the context of one HDFS file output stream. Access to it is  * synchronized by its member lock.  */
end_comment

begin_class
DECL|class|OpenFileCtx
class|class
name|OpenFileCtx
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|OpenFileCtx
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Pending writes water mark for dump, 1MB
DECL|field|DUMP_WRITE_WATER_MARK
specifier|private
specifier|static
name|long
name|DUMP_WRITE_WATER_MARK
init|=
literal|1024
operator|*
literal|1024
decl_stmt|;
DECL|enum|COMMIT_STATUS
specifier|static
enum|enum
name|COMMIT_STATUS
block|{
DECL|enumConstant|COMMIT_FINISHED
name|COMMIT_FINISHED
block|,
DECL|enumConstant|COMMIT_WAIT
name|COMMIT_WAIT
block|,
DECL|enumConstant|COMMIT_INACTIVE_CTX
name|COMMIT_INACTIVE_CTX
block|,
DECL|enumConstant|COMMIT_INACTIVE_WITH_PENDING_WRITE
name|COMMIT_INACTIVE_WITH_PENDING_WRITE
block|,
DECL|enumConstant|COMMIT_ERROR
name|COMMIT_ERROR
block|,
DECL|enumConstant|COMMIT_DO_SYNC
name|COMMIT_DO_SYNC
block|;   }
DECL|field|client
specifier|private
specifier|final
name|DFSClient
name|client
decl_stmt|;
DECL|field|iug
specifier|private
specifier|final
name|IdUserGroup
name|iug
decl_stmt|;
comment|// The stream status. False means the stream is closed.
DECL|field|activeState
specifier|private
specifier|volatile
name|boolean
name|activeState
decl_stmt|;
comment|// The stream write-back status. True means one thread is doing write back.
DECL|field|asyncStatus
specifier|private
specifier|volatile
name|boolean
name|asyncStatus
decl_stmt|;
DECL|field|asyncWriteBackStartOffset
specifier|private
specifier|volatile
name|long
name|asyncWriteBackStartOffset
decl_stmt|;
comment|/**    * The current offset of the file in HDFS. All the content before this offset    * has been written back to HDFS.    */
DECL|field|nextOffset
specifier|private
name|AtomicLong
name|nextOffset
decl_stmt|;
DECL|field|fos
specifier|private
specifier|final
name|HdfsDataOutputStream
name|fos
decl_stmt|;
comment|// It's updated after each sync to HDFS
DECL|field|latestAttr
specifier|private
name|Nfs3FileAttributes
name|latestAttr
decl_stmt|;
DECL|field|pendingWrites
specifier|private
specifier|final
name|ConcurrentNavigableMap
argument_list|<
name|OffsetRange
argument_list|,
name|WriteCtx
argument_list|>
name|pendingWrites
decl_stmt|;
DECL|field|pendingCommits
specifier|private
specifier|final
name|ConcurrentNavigableMap
argument_list|<
name|Long
argument_list|,
name|CommitCtx
argument_list|>
name|pendingCommits
decl_stmt|;
DECL|class|CommitCtx
specifier|static
class|class
name|CommitCtx
block|{
DECL|field|offset
specifier|private
specifier|final
name|long
name|offset
decl_stmt|;
DECL|field|channel
specifier|private
specifier|final
name|Channel
name|channel
decl_stmt|;
DECL|field|xid
specifier|private
specifier|final
name|int
name|xid
decl_stmt|;
DECL|field|preOpAttr
specifier|private
specifier|final
name|Nfs3FileAttributes
name|preOpAttr
decl_stmt|;
comment|// Remember time for debug purpose
DECL|field|startTime
specifier|private
specifier|final
name|long
name|startTime
decl_stmt|;
DECL|method|getOffset ()
name|long
name|getOffset
parameter_list|()
block|{
return|return
name|offset
return|;
block|}
DECL|method|getChannel ()
name|Channel
name|getChannel
parameter_list|()
block|{
return|return
name|channel
return|;
block|}
DECL|method|getXid ()
name|int
name|getXid
parameter_list|()
block|{
return|return
name|xid
return|;
block|}
DECL|method|getPreOpAttr ()
name|Nfs3FileAttributes
name|getPreOpAttr
parameter_list|()
block|{
return|return
name|preOpAttr
return|;
block|}
DECL|method|getStartTime ()
name|long
name|getStartTime
parameter_list|()
block|{
return|return
name|startTime
return|;
block|}
DECL|method|CommitCtx (long offset, Channel channel, int xid, Nfs3FileAttributes preOpAttr)
name|CommitCtx
parameter_list|(
name|long
name|offset
parameter_list|,
name|Channel
name|channel
parameter_list|,
name|int
name|xid
parameter_list|,
name|Nfs3FileAttributes
name|preOpAttr
parameter_list|)
block|{
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
name|this
operator|.
name|channel
operator|=
name|channel
expr_stmt|;
name|this
operator|.
name|xid
operator|=
name|xid
expr_stmt|;
name|this
operator|.
name|preOpAttr
operator|=
name|preOpAttr
expr_stmt|;
name|this
operator|.
name|startTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"offset: %d xid: %d startTime: %d"
argument_list|,
name|offset
argument_list|,
name|xid
argument_list|,
name|startTime
argument_list|)
return|;
block|}
block|}
comment|// The last write, commit request or write-back event. Updating time to keep
comment|// output steam alive.
DECL|field|lastAccessTime
specifier|private
name|long
name|lastAccessTime
decl_stmt|;
DECL|field|enabledDump
specifier|private
specifier|volatile
name|boolean
name|enabledDump
decl_stmt|;
DECL|field|dumpOut
specifier|private
name|FileOutputStream
name|dumpOut
decl_stmt|;
DECL|field|nonSequentialWriteInMemory
specifier|private
name|AtomicLong
name|nonSequentialWriteInMemory
decl_stmt|;
DECL|field|raf
specifier|private
name|RandomAccessFile
name|raf
decl_stmt|;
DECL|field|dumpFilePath
specifier|private
specifier|final
name|String
name|dumpFilePath
decl_stmt|;
DECL|field|dumpThread
specifier|private
name|Daemon
name|dumpThread
decl_stmt|;
DECL|method|updateLastAccessTime ()
specifier|private
name|void
name|updateLastAccessTime
parameter_list|()
block|{
name|lastAccessTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
DECL|method|checkStreamTimeout (long streamTimeout)
specifier|private
name|boolean
name|checkStreamTimeout
parameter_list|(
name|long
name|streamTimeout
parameter_list|)
block|{
return|return
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|lastAccessTime
operator|>
name|streamTimeout
return|;
block|}
DECL|method|getLastAccessTime ()
name|long
name|getLastAccessTime
parameter_list|()
block|{
return|return
name|lastAccessTime
return|;
block|}
DECL|method|getNextOffset ()
specifier|public
name|long
name|getNextOffset
parameter_list|()
block|{
return|return
name|nextOffset
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|getActiveState ()
name|boolean
name|getActiveState
parameter_list|()
block|{
return|return
name|this
operator|.
name|activeState
return|;
block|}
DECL|method|hasPendingWork ()
name|boolean
name|hasPendingWork
parameter_list|()
block|{
return|return
operator|(
name|pendingWrites
operator|.
name|size
argument_list|()
operator|!=
literal|0
operator|||
name|pendingCommits
operator|.
name|size
argument_list|()
operator|!=
literal|0
operator|)
return|;
block|}
comment|// Increase or decrease the memory occupation of non-sequential writes
DECL|method|updateNonSequentialWriteInMemory (long count)
specifier|private
name|long
name|updateNonSequentialWriteInMemory
parameter_list|(
name|long
name|count
parameter_list|)
block|{
name|long
name|newValue
init|=
name|nonSequentialWriteInMemory
operator|.
name|addAndGet
argument_list|(
name|count
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Update nonSequentialWriteInMemory by "
operator|+
name|count
operator|+
literal|" new value:"
operator|+
name|newValue
argument_list|)
expr_stmt|;
block|}
name|Preconditions
operator|.
name|checkState
argument_list|(
name|newValue
operator|>=
literal|0
argument_list|,
literal|"nonSequentialWriteInMemory is negative after update with count "
operator|+
name|count
argument_list|)
expr_stmt|;
return|return
name|newValue
return|;
block|}
DECL|method|OpenFileCtx (HdfsDataOutputStream fos, Nfs3FileAttributes latestAttr, String dumpFilePath, DFSClient client, IdUserGroup iug)
name|OpenFileCtx
parameter_list|(
name|HdfsDataOutputStream
name|fos
parameter_list|,
name|Nfs3FileAttributes
name|latestAttr
parameter_list|,
name|String
name|dumpFilePath
parameter_list|,
name|DFSClient
name|client
parameter_list|,
name|IdUserGroup
name|iug
parameter_list|)
block|{
name|this
operator|.
name|fos
operator|=
name|fos
expr_stmt|;
name|this
operator|.
name|latestAttr
operator|=
name|latestAttr
expr_stmt|;
comment|// We use the ReverseComparatorOnMin as the comparator of the map. In this
comment|// way, we first dump the data with larger offset. In the meanwhile, we
comment|// retrieve the last element to write back to HDFS.
name|pendingWrites
operator|=
operator|new
name|ConcurrentSkipListMap
argument_list|<
name|OffsetRange
argument_list|,
name|WriteCtx
argument_list|>
argument_list|(
name|OffsetRange
operator|.
name|ReverseComparatorOnMin
argument_list|)
expr_stmt|;
name|pendingCommits
operator|=
operator|new
name|ConcurrentSkipListMap
argument_list|<
name|Long
argument_list|,
name|CommitCtx
argument_list|>
argument_list|()
expr_stmt|;
name|updateLastAccessTime
argument_list|()
expr_stmt|;
name|activeState
operator|=
literal|true
expr_stmt|;
name|asyncStatus
operator|=
literal|false
expr_stmt|;
name|asyncWriteBackStartOffset
operator|=
literal|0
expr_stmt|;
name|dumpOut
operator|=
literal|null
expr_stmt|;
name|raf
operator|=
literal|null
expr_stmt|;
name|nonSequentialWriteInMemory
operator|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|dumpFilePath
operator|=
name|dumpFilePath
expr_stmt|;
name|enabledDump
operator|=
name|dumpFilePath
operator|==
literal|null
condition|?
literal|false
else|:
literal|true
expr_stmt|;
name|nextOffset
operator|=
operator|new
name|AtomicLong
argument_list|()
expr_stmt|;
name|nextOffset
operator|.
name|set
argument_list|(
name|latestAttr
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|nextOffset
operator|.
name|get
argument_list|()
operator|==
name|this
operator|.
name|fos
operator|.
name|getPos
argument_list|()
operator|)
assert|;
name|dumpThread
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
name|this
operator|.
name|iug
operator|=
name|iug
expr_stmt|;
block|}
DECL|method|getLatestAttr ()
specifier|public
name|Nfs3FileAttributes
name|getLatestAttr
parameter_list|()
block|{
return|return
name|latestAttr
return|;
block|}
comment|// Get flushed offset. Note that flushed data may not be persisted.
DECL|method|getFlushedOffset ()
specifier|private
name|long
name|getFlushedOffset
parameter_list|()
block|{
return|return
name|fos
operator|.
name|getPos
argument_list|()
return|;
block|}
comment|// Check if need to dump the new writes
DECL|method|checkDump ()
specifier|private
name|void
name|checkDump
parameter_list|()
block|{
if|if
condition|(
operator|!
name|enabledDump
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Do nothing, dump is disabled."
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
if|if
condition|(
name|nonSequentialWriteInMemory
operator|.
name|get
argument_list|()
operator|<
name|DUMP_WRITE_WATER_MARK
condition|)
block|{
return|return;
block|}
comment|// wake up the dumper thread to dump the data
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|nonSequentialWriteInMemory
operator|.
name|get
argument_list|()
operator|>=
name|DUMP_WRITE_WATER_MARK
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Asking dumper to dump..."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dumpThread
operator|==
literal|null
condition|)
block|{
name|dumpThread
operator|=
operator|new
name|Daemon
argument_list|(
operator|new
name|Dumper
argument_list|()
argument_list|)
expr_stmt|;
name|dumpThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|class|Dumper
class|class
name|Dumper
implements|implements
name|Runnable
block|{
comment|/** Dump data into a file */
DECL|method|dump ()
specifier|private
name|void
name|dump
parameter_list|()
block|{
comment|// Create dump outputstream for the first time
if|if
condition|(
name|dumpOut
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Create dump file:"
operator|+
name|dumpFilePath
argument_list|)
expr_stmt|;
name|File
name|dumpFile
init|=
operator|new
name|File
argument_list|(
name|dumpFilePath
argument_list|)
decl_stmt|;
try|try
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
comment|// check if alive again
name|Preconditions
operator|.
name|checkState
argument_list|(
name|dumpFile
operator|.
name|createNewFile
argument_list|()
argument_list|,
literal|"The dump file should not exist: %s"
argument_list|,
name|dumpFilePath
argument_list|)
expr_stmt|;
name|dumpOut
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|dumpFile
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Got failure when creating dump stream "
operator|+
name|dumpFilePath
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|enabledDump
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|dumpOut
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|dumpOut
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't close dump stream "
operator|+
name|dumpFilePath
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return;
block|}
block|}
comment|// Get raf for the first dump
if|if
condition|(
name|raf
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|raf
operator|=
operator|new
name|RandomAccessFile
argument_list|(
name|dumpFilePath
argument_list|,
literal|"r"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't get random access to file "
operator|+
name|dumpFilePath
argument_list|)
expr_stmt|;
comment|// Disable dump
name|enabledDump
operator|=
literal|false
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Start dump. Before dump, nonSequentialWriteInMemory == "
operator|+
name|nonSequentialWriteInMemory
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Iterator
argument_list|<
name|OffsetRange
argument_list|>
name|it
init|=
name|pendingWrites
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|activeState
operator|&&
name|it
operator|.
name|hasNext
argument_list|()
operator|&&
name|nonSequentialWriteInMemory
operator|.
name|get
argument_list|()
operator|>
literal|0
condition|)
block|{
name|OffsetRange
name|key
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|WriteCtx
name|writeCtx
init|=
name|pendingWrites
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|writeCtx
operator|==
literal|null
condition|)
block|{
comment|// This write was just deleted
continue|continue;
block|}
try|try
block|{
name|long
name|dumpedDataSize
init|=
name|writeCtx
operator|.
name|dumpData
argument_list|(
name|dumpOut
argument_list|,
name|raf
argument_list|)
decl_stmt|;
if|if
condition|(
name|dumpedDataSize
operator|>
literal|0
condition|)
block|{
name|updateNonSequentialWriteInMemory
argument_list|(
operator|-
name|dumpedDataSize
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Dump data failed:"
operator|+
name|writeCtx
operator|+
literal|" with error:"
operator|+
name|e
operator|+
literal|" OpenFileCtx state:"
operator|+
name|activeState
argument_list|)
expr_stmt|;
comment|// Disable dump
name|enabledDump
operator|=
literal|false
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"After dump, nonSequentialWriteInMemory == "
operator|+
name|nonSequentialWriteInMemory
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
name|activeState
operator|&&
name|enabledDump
condition|)
block|{
try|try
block|{
if|if
condition|(
name|nonSequentialWriteInMemory
operator|.
name|get
argument_list|()
operator|>=
name|DUMP_WRITE_WATER_MARK
condition|)
block|{
name|dump
argument_list|()
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|OpenFileCtx
operator|.
name|this
init|)
block|{
if|if
condition|(
name|nonSequentialWriteInMemory
operator|.
name|get
argument_list|()
operator|<
name|DUMP_WRITE_WATER_MARK
condition|)
block|{
try|try
block|{
name|OpenFileCtx
operator|.
name|this
operator|.
name|wait
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Dumper woke up"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Dumper is interrupted, dumpFilePath= "
operator|+
name|OpenFileCtx
operator|.
name|this
operator|.
name|dumpFilePath
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Dumper checking OpenFileCtx activeState: "
operator|+
name|activeState
operator|+
literal|" enabledDump: "
operator|+
name|enabledDump
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Dumper get Throwable: "
operator|+
name|t
operator|+
literal|". dumpFilePath: "
operator|+
name|OpenFileCtx
operator|.
name|this
operator|.
name|dumpFilePath
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|checkRepeatedWriteRequest (WRITE3Request request, Channel channel, int xid)
specifier|private
name|WriteCtx
name|checkRepeatedWriteRequest
parameter_list|(
name|WRITE3Request
name|request
parameter_list|,
name|Channel
name|channel
parameter_list|,
name|int
name|xid
parameter_list|)
block|{
name|OffsetRange
name|range
init|=
operator|new
name|OffsetRange
argument_list|(
name|request
operator|.
name|getOffset
argument_list|()
argument_list|,
name|request
operator|.
name|getOffset
argument_list|()
operator|+
name|request
operator|.
name|getCount
argument_list|()
argument_list|)
decl_stmt|;
name|WriteCtx
name|writeCtx
init|=
name|pendingWrites
operator|.
name|get
argument_list|(
name|range
argument_list|)
decl_stmt|;
if|if
condition|(
name|writeCtx
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
if|if
condition|(
name|xid
operator|!=
name|writeCtx
operator|.
name|getXid
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Got a repeated request, same range, with a different xid:"
operator|+
name|xid
operator|+
literal|" xid in old request:"
operator|+
name|writeCtx
operator|.
name|getXid
argument_list|()
argument_list|)
expr_stmt|;
comment|//TODO: better handling.
block|}
return|return
name|writeCtx
return|;
block|}
block|}
DECL|method|receivedNewWrite (DFSClient dfsClient, WRITE3Request request, Channel channel, int xid, AsyncDataService asyncDataService, IdUserGroup iug)
specifier|public
name|void
name|receivedNewWrite
parameter_list|(
name|DFSClient
name|dfsClient
parameter_list|,
name|WRITE3Request
name|request
parameter_list|,
name|Channel
name|channel
parameter_list|,
name|int
name|xid
parameter_list|,
name|AsyncDataService
name|asyncDataService
parameter_list|,
name|IdUserGroup
name|iug
parameter_list|)
block|{
if|if
condition|(
operator|!
name|activeState
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"OpenFileCtx is inactive, fileId:"
operator|+
name|request
operator|.
name|getHandle
argument_list|()
operator|.
name|getFileId
argument_list|()
argument_list|)
expr_stmt|;
name|WccData
name|fileWcc
init|=
operator|new
name|WccData
argument_list|(
name|latestAttr
operator|.
name|getWccAttr
argument_list|()
argument_list|,
name|latestAttr
argument_list|)
decl_stmt|;
name|WRITE3Response
name|response
init|=
operator|new
name|WRITE3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_IO
argument_list|,
name|fileWcc
argument_list|,
literal|0
argument_list|,
name|request
operator|.
name|getStableHow
argument_list|()
argument_list|,
name|Nfs3Constant
operator|.
name|WRITE_COMMIT_VERF
argument_list|)
decl_stmt|;
name|Nfs3Utils
operator|.
name|writeChannel
argument_list|(
name|channel
argument_list|,
name|response
operator|.
name|writeHeaderAndResponse
argument_list|(
operator|new
name|XDR
argument_list|()
argument_list|,
name|xid
argument_list|,
operator|new
name|VerifierNone
argument_list|()
argument_list|)
argument_list|,
name|xid
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Update the write time first
name|updateLastAccessTime
argument_list|()
expr_stmt|;
comment|// Handle repeated write requests (same xid or not).
comment|// If already replied, send reply again. If not replied, drop the
comment|// repeated request.
name|WriteCtx
name|existantWriteCtx
init|=
name|checkRepeatedWriteRequest
argument_list|(
name|request
argument_list|,
name|channel
argument_list|,
name|xid
argument_list|)
decl_stmt|;
if|if
condition|(
name|existantWriteCtx
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|existantWriteCtx
operator|.
name|getReplied
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Repeated write request which hasn't be served: xid="
operator|+
name|xid
operator|+
literal|", drop it."
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Repeated write request which is already served: xid="
operator|+
name|xid
operator|+
literal|", resend response."
argument_list|)
expr_stmt|;
block|}
name|WccData
name|fileWcc
init|=
operator|new
name|WccData
argument_list|(
name|latestAttr
operator|.
name|getWccAttr
argument_list|()
argument_list|,
name|latestAttr
argument_list|)
decl_stmt|;
name|WRITE3Response
name|response
init|=
operator|new
name|WRITE3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3_OK
argument_list|,
name|fileWcc
argument_list|,
name|request
operator|.
name|getCount
argument_list|()
argument_list|,
name|request
operator|.
name|getStableHow
argument_list|()
argument_list|,
name|Nfs3Constant
operator|.
name|WRITE_COMMIT_VERF
argument_list|)
decl_stmt|;
name|Nfs3Utils
operator|.
name|writeChannel
argument_list|(
name|channel
argument_list|,
name|response
operator|.
name|writeHeaderAndResponse
argument_list|(
operator|new
name|XDR
argument_list|()
argument_list|,
name|xid
argument_list|,
operator|new
name|VerifierNone
argument_list|()
argument_list|)
argument_list|,
name|xid
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// not a repeated write request
name|receivedNewWriteInternal
argument_list|(
name|dfsClient
argument_list|,
name|request
argument_list|,
name|channel
argument_list|,
name|xid
argument_list|,
name|asyncDataService
argument_list|,
name|iug
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|alterWriteRequest (WRITE3Request request, long cachedOffset)
specifier|public
specifier|static
name|void
name|alterWriteRequest
parameter_list|(
name|WRITE3Request
name|request
parameter_list|,
name|long
name|cachedOffset
parameter_list|)
block|{
name|long
name|offset
init|=
name|request
operator|.
name|getOffset
argument_list|()
decl_stmt|;
name|int
name|count
init|=
name|request
operator|.
name|getCount
argument_list|()
decl_stmt|;
name|long
name|smallerCount
init|=
name|offset
operator|+
name|count
operator|-
name|cachedOffset
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Got overwrite with appended data (%d-%d),"
operator|+
literal|" current offset %d,"
operator|+
literal|" drop the overlapped section (%d-%d)"
operator|+
literal|" and append new data (%d-%d)."
argument_list|,
name|offset
argument_list|,
operator|(
name|offset
operator|+
name|count
operator|-
literal|1
operator|)
argument_list|,
name|cachedOffset
argument_list|,
name|offset
argument_list|,
operator|(
name|cachedOffset
operator|-
literal|1
operator|)
argument_list|,
name|cachedOffset
argument_list|,
operator|(
name|offset
operator|+
name|count
operator|-
literal|1
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ByteBuffer
name|data
init|=
name|request
operator|.
name|getData
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|data
operator|.
name|position
argument_list|()
operator|==
literal|0
argument_list|,
literal|"The write request data has non-zero position"
argument_list|)
expr_stmt|;
name|data
operator|.
name|position
argument_list|(
call|(
name|int
call|)
argument_list|(
name|cachedOffset
operator|-
name|offset
argument_list|)
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|data
operator|.
name|limit
argument_list|()
operator|-
name|data
operator|.
name|position
argument_list|()
operator|==
name|smallerCount
argument_list|,
literal|"The write request buffer has wrong limit/position regarding count"
argument_list|)
expr_stmt|;
name|request
operator|.
name|setOffset
argument_list|(
name|cachedOffset
argument_list|)
expr_stmt|;
name|request
operator|.
name|setCount
argument_list|(
operator|(
name|int
operator|)
name|smallerCount
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates and adds a WriteCtx into the pendingWrites map. This is a    * synchronized method to handle concurrent writes.    *     * @return A non-null {@link WriteCtx} instance if the incoming write    *         request's offset>= nextOffset. Otherwise null.    */
DECL|method|addWritesToCache (WRITE3Request request, Channel channel, int xid)
specifier|private
specifier|synchronized
name|WriteCtx
name|addWritesToCache
parameter_list|(
name|WRITE3Request
name|request
parameter_list|,
name|Channel
name|channel
parameter_list|,
name|int
name|xid
parameter_list|)
block|{
name|long
name|offset
init|=
name|request
operator|.
name|getOffset
argument_list|()
decl_stmt|;
name|int
name|count
init|=
name|request
operator|.
name|getCount
argument_list|()
decl_stmt|;
name|long
name|cachedOffset
init|=
name|nextOffset
operator|.
name|get
argument_list|()
decl_stmt|;
name|int
name|originalCount
init|=
name|WriteCtx
operator|.
name|INVALID_ORIGINAL_COUNT
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"requesed offset="
operator|+
name|offset
operator|+
literal|" and current offset="
operator|+
name|cachedOffset
argument_list|)
expr_stmt|;
block|}
comment|// Handle a special case first
if|if
condition|(
operator|(
name|offset
operator|<
name|cachedOffset
operator|)
operator|&&
operator|(
name|offset
operator|+
name|count
operator|>
name|cachedOffset
operator|)
condition|)
block|{
comment|// One Linux client behavior: after a file is closed and reopened to
comment|// write, the client sometimes combines previous written data(could still
comment|// be in kernel buffer) with newly appended data in one write. This is
comment|// usually the first write after file reopened. In this
comment|// case, we log the event and drop the overlapped section.
name|LOG
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Got overwrite with appended data (%d-%d),"
operator|+
literal|" current offset %d,"
operator|+
literal|" drop the overlapped section (%d-%d)"
operator|+
literal|" and append new data (%d-%d)."
argument_list|,
name|offset
argument_list|,
operator|(
name|offset
operator|+
name|count
operator|-
literal|1
operator|)
argument_list|,
name|cachedOffset
argument_list|,
name|offset
argument_list|,
operator|(
name|cachedOffset
operator|-
literal|1
operator|)
argument_list|,
name|cachedOffset
argument_list|,
operator|(
name|offset
operator|+
name|count
operator|-
literal|1
operator|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|pendingWrites
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"There are other pending writes, fail this jumbo write"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|LOG
operator|.
name|warn
argument_list|(
literal|"Modify this write to write only the appended data"
argument_list|)
expr_stmt|;
name|alterWriteRequest
argument_list|(
name|request
argument_list|,
name|cachedOffset
argument_list|)
expr_stmt|;
comment|// Update local variable
name|originalCount
operator|=
name|count
expr_stmt|;
name|offset
operator|=
name|request
operator|.
name|getOffset
argument_list|()
expr_stmt|;
name|count
operator|=
name|request
operator|.
name|getCount
argument_list|()
expr_stmt|;
block|}
comment|// Fail non-append call
if|if
condition|(
name|offset
operator|<
name|cachedOffset
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"(offset,count,nextOffset):"
operator|+
literal|"("
operator|+
name|offset
operator|+
literal|","
operator|+
name|count
operator|+
literal|","
operator|+
name|nextOffset
operator|+
literal|")"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
else|else
block|{
name|DataState
name|dataState
init|=
name|offset
operator|==
name|cachedOffset
condition|?
name|WriteCtx
operator|.
name|DataState
operator|.
name|NO_DUMP
else|:
name|WriteCtx
operator|.
name|DataState
operator|.
name|ALLOW_DUMP
decl_stmt|;
name|WriteCtx
name|writeCtx
init|=
operator|new
name|WriteCtx
argument_list|(
name|request
operator|.
name|getHandle
argument_list|()
argument_list|,
name|request
operator|.
name|getOffset
argument_list|()
argument_list|,
name|request
operator|.
name|getCount
argument_list|()
argument_list|,
name|originalCount
argument_list|,
name|request
operator|.
name|getStableHow
argument_list|()
argument_list|,
name|request
operator|.
name|getData
argument_list|()
argument_list|,
name|channel
argument_list|,
name|xid
argument_list|,
literal|false
argument_list|,
name|dataState
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Add new write to the list with nextOffset "
operator|+
name|cachedOffset
operator|+
literal|" and requesed offset="
operator|+
name|offset
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|writeCtx
operator|.
name|getDataState
argument_list|()
operator|==
name|WriteCtx
operator|.
name|DataState
operator|.
name|ALLOW_DUMP
condition|)
block|{
comment|// update the memory size
name|updateNonSequentialWriteInMemory
argument_list|(
name|count
argument_list|)
expr_stmt|;
block|}
comment|// check if there is a WriteCtx with the same range in pendingWrites
name|WriteCtx
name|oldWriteCtx
init|=
name|checkRepeatedWriteRequest
argument_list|(
name|request
argument_list|,
name|channel
argument_list|,
name|xid
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldWriteCtx
operator|==
literal|null
condition|)
block|{
name|addWrite
argument_list|(
name|writeCtx
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Got a repeated request, same range, with xid:"
operator|+
name|writeCtx
operator|.
name|getXid
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|writeCtx
return|;
block|}
block|}
comment|/** Process an overwrite write request */
DECL|method|processOverWrite (DFSClient dfsClient, WRITE3Request request, Channel channel, int xid, IdUserGroup iug)
specifier|private
name|void
name|processOverWrite
parameter_list|(
name|DFSClient
name|dfsClient
parameter_list|,
name|WRITE3Request
name|request
parameter_list|,
name|Channel
name|channel
parameter_list|,
name|int
name|xid
parameter_list|,
name|IdUserGroup
name|iug
parameter_list|)
block|{
name|WccData
name|wccData
init|=
operator|new
name|WccData
argument_list|(
name|latestAttr
operator|.
name|getWccAttr
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|long
name|offset
init|=
name|request
operator|.
name|getOffset
argument_list|()
decl_stmt|;
name|int
name|count
init|=
name|request
operator|.
name|getCount
argument_list|()
decl_stmt|;
name|WriteStableHow
name|stableHow
init|=
name|request
operator|.
name|getStableHow
argument_list|()
decl_stmt|;
name|WRITE3Response
name|response
decl_stmt|;
name|long
name|cachedOffset
init|=
name|nextOffset
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|offset
operator|+
name|count
operator|>
name|cachedOffset
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Treat this jumbo write as a real random write, no support."
argument_list|)
expr_stmt|;
name|response
operator|=
operator|new
name|WRITE3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_INVAL
argument_list|,
name|wccData
argument_list|,
literal|0
argument_list|,
name|WriteStableHow
operator|.
name|UNSTABLE
argument_list|,
name|Nfs3Constant
operator|.
name|WRITE_COMMIT_VERF
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Process perfectOverWrite"
argument_list|)
expr_stmt|;
block|}
comment|// TODO: let executor handle perfect overwrite
name|response
operator|=
name|processPerfectOverWrite
argument_list|(
name|dfsClient
argument_list|,
name|offset
argument_list|,
name|count
argument_list|,
name|stableHow
argument_list|,
name|request
operator|.
name|getData
argument_list|()
operator|.
name|array
argument_list|()
argument_list|,
name|Nfs3Utils
operator|.
name|getFileIdPath
argument_list|(
name|request
operator|.
name|getHandle
argument_list|()
argument_list|)
argument_list|,
name|wccData
argument_list|,
name|iug
argument_list|)
expr_stmt|;
block|}
name|updateLastAccessTime
argument_list|()
expr_stmt|;
name|Nfs3Utils
operator|.
name|writeChannel
argument_list|(
name|channel
argument_list|,
name|response
operator|.
name|writeHeaderAndResponse
argument_list|(
operator|new
name|XDR
argument_list|()
argument_list|,
name|xid
argument_list|,
operator|new
name|VerifierNone
argument_list|()
argument_list|)
argument_list|,
name|xid
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check if we can start the write (back to HDFS) now. If there is no hole for    * writing, and there is no other threads writing (i.e., asyncStatus is    * false), start the writing and set asyncStatus to true.    *     * @return True if the new write is sequencial and we can start writing    *         (including the case that there is already a thread writing).    */
DECL|method|checkAndStartWrite ( AsyncDataService asyncDataService, WriteCtx writeCtx)
specifier|private
specifier|synchronized
name|boolean
name|checkAndStartWrite
parameter_list|(
name|AsyncDataService
name|asyncDataService
parameter_list|,
name|WriteCtx
name|writeCtx
parameter_list|)
block|{
if|if
condition|(
name|writeCtx
operator|.
name|getOffset
argument_list|()
operator|==
name|nextOffset
operator|.
name|get
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|asyncStatus
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Trigger the write back task. Current nextOffset: "
operator|+
name|nextOffset
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|asyncStatus
operator|=
literal|true
expr_stmt|;
name|asyncWriteBackStartOffset
operator|=
name|writeCtx
operator|.
name|getOffset
argument_list|()
expr_stmt|;
name|asyncDataService
operator|.
name|execute
argument_list|(
operator|new
name|AsyncDataService
operator|.
name|WriteBackTask
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"The write back thread is working."
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|method|receivedNewWriteInternal (DFSClient dfsClient, WRITE3Request request, Channel channel, int xid, AsyncDataService asyncDataService, IdUserGroup iug)
specifier|private
name|void
name|receivedNewWriteInternal
parameter_list|(
name|DFSClient
name|dfsClient
parameter_list|,
name|WRITE3Request
name|request
parameter_list|,
name|Channel
name|channel
parameter_list|,
name|int
name|xid
parameter_list|,
name|AsyncDataService
name|asyncDataService
parameter_list|,
name|IdUserGroup
name|iug
parameter_list|)
block|{
name|WriteStableHow
name|stableHow
init|=
name|request
operator|.
name|getStableHow
argument_list|()
decl_stmt|;
name|WccAttr
name|preOpAttr
init|=
name|latestAttr
operator|.
name|getWccAttr
argument_list|()
decl_stmt|;
name|int
name|count
init|=
name|request
operator|.
name|getCount
argument_list|()
decl_stmt|;
name|WriteCtx
name|writeCtx
init|=
name|addWritesToCache
argument_list|(
name|request
argument_list|,
name|channel
argument_list|,
name|xid
argument_list|)
decl_stmt|;
if|if
condition|(
name|writeCtx
operator|==
literal|null
condition|)
block|{
comment|// offset< nextOffset
name|processOverWrite
argument_list|(
name|dfsClient
argument_list|,
name|request
argument_list|,
name|channel
argument_list|,
name|xid
argument_list|,
name|iug
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// The writes is added to pendingWrites.
comment|// Check and start writing back if necessary
name|boolean
name|startWriting
init|=
name|checkAndStartWrite
argument_list|(
name|asyncDataService
argument_list|,
name|writeCtx
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|startWriting
condition|)
block|{
comment|// offset> nextOffset. check if we need to dump data
name|checkDump
argument_list|()
expr_stmt|;
comment|// In test, noticed some Linux client sends a batch (e.g., 1MB)
comment|// of reordered writes and won't send more writes until it gets
comment|// responses of the previous batch. So here send response immediately
comment|// for unstable non-sequential write
if|if
condition|(
name|stableHow
operator|!=
name|WriteStableHow
operator|.
name|UNSTABLE
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Have to change stable write to unstable write:"
operator|+
name|request
operator|.
name|getStableHow
argument_list|()
argument_list|)
expr_stmt|;
name|stableHow
operator|=
name|WriteStableHow
operator|.
name|UNSTABLE
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"UNSTABLE write request, send response for offset: "
operator|+
name|writeCtx
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|WccData
name|fileWcc
init|=
operator|new
name|WccData
argument_list|(
name|preOpAttr
argument_list|,
name|latestAttr
argument_list|)
decl_stmt|;
name|WRITE3Response
name|response
init|=
operator|new
name|WRITE3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3_OK
argument_list|,
name|fileWcc
argument_list|,
name|count
argument_list|,
name|stableHow
argument_list|,
name|Nfs3Constant
operator|.
name|WRITE_COMMIT_VERF
argument_list|)
decl_stmt|;
name|Nfs3Utils
operator|.
name|writeChannel
argument_list|(
name|channel
argument_list|,
name|response
operator|.
name|writeHeaderAndResponse
argument_list|(
operator|new
name|XDR
argument_list|()
argument_list|,
name|xid
argument_list|,
operator|new
name|VerifierNone
argument_list|()
argument_list|)
argument_list|,
name|xid
argument_list|)
expr_stmt|;
name|writeCtx
operator|.
name|setReplied
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Honor 2 kinds of overwrites: 1). support some application like touch(write    * the same content back to change mtime), 2) client somehow sends the same    * write again in a different RPC.    */
DECL|method|processPerfectOverWrite (DFSClient dfsClient, long offset, int count, WriteStableHow stableHow, byte[] data, String path, WccData wccData, IdUserGroup iug)
specifier|private
name|WRITE3Response
name|processPerfectOverWrite
parameter_list|(
name|DFSClient
name|dfsClient
parameter_list|,
name|long
name|offset
parameter_list|,
name|int
name|count
parameter_list|,
name|WriteStableHow
name|stableHow
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|String
name|path
parameter_list|,
name|WccData
name|wccData
parameter_list|,
name|IdUserGroup
name|iug
parameter_list|)
block|{
name|WRITE3Response
name|response
init|=
literal|null
decl_stmt|;
comment|// Read the content back
name|byte
index|[]
name|readbuffer
init|=
operator|new
name|byte
index|[
name|count
index|]
decl_stmt|;
name|int
name|readCount
init|=
literal|0
decl_stmt|;
name|FSDataInputStream
name|fis
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// Sync file data and length to avoid partial read failure
name|fos
operator|.
name|hsync
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|SyncFlag
operator|.
name|UPDATE_LENGTH
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClosedChannelException
name|closedException
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"The FSDataOutputStream has been closed. "
operator|+
literal|"Continue processing the perfect overwrite."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"hsync failed when processing possible perfect overwrite, path="
operator|+
name|path
operator|+
literal|" error:"
operator|+
name|e
argument_list|)
expr_stmt|;
return|return
operator|new
name|WRITE3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_IO
argument_list|,
name|wccData
argument_list|,
literal|0
argument_list|,
name|stableHow
argument_list|,
name|Nfs3Constant
operator|.
name|WRITE_COMMIT_VERF
argument_list|)
return|;
block|}
try|try
block|{
name|fis
operator|=
operator|new
name|FSDataInputStream
argument_list|(
name|dfsClient
operator|.
name|open
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|readCount
operator|=
name|fis
operator|.
name|read
argument_list|(
name|offset
argument_list|,
name|readbuffer
argument_list|,
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
if|if
condition|(
name|readCount
operator|<
name|count
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't read back "
operator|+
name|count
operator|+
literal|" bytes, partial read size:"
operator|+
name|readCount
argument_list|)
expr_stmt|;
return|return
operator|new
name|WRITE3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_IO
argument_list|,
name|wccData
argument_list|,
literal|0
argument_list|,
name|stableHow
argument_list|,
name|Nfs3Constant
operator|.
name|WRITE_COMMIT_VERF
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Read failed when processing possible perfect overwrite, path="
operator|+
name|path
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
operator|new
name|WRITE3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_IO
argument_list|,
name|wccData
argument_list|,
literal|0
argument_list|,
name|stableHow
argument_list|,
name|Nfs3Constant
operator|.
name|WRITE_COMMIT_VERF
argument_list|)
return|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|fis
argument_list|)
expr_stmt|;
block|}
comment|// Compare with the request
name|Comparator
name|comparator
init|=
operator|new
name|Comparator
argument_list|()
decl_stmt|;
if|if
condition|(
name|comparator
operator|.
name|compare
argument_list|(
name|readbuffer
argument_list|,
literal|0
argument_list|,
name|readCount
argument_list|,
name|data
argument_list|,
literal|0
argument_list|,
name|count
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Perfect overwrite has different content"
argument_list|)
expr_stmt|;
name|response
operator|=
operator|new
name|WRITE3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_INVAL
argument_list|,
name|wccData
argument_list|,
literal|0
argument_list|,
name|stableHow
argument_list|,
name|Nfs3Constant
operator|.
name|WRITE_COMMIT_VERF
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Perfect overwrite has same content,"
operator|+
literal|" updating the mtime, then return success"
argument_list|)
expr_stmt|;
name|Nfs3FileAttributes
name|postOpAttr
init|=
literal|null
decl_stmt|;
try|try
block|{
name|dfsClient
operator|.
name|setTimes
argument_list|(
name|path
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|postOpAttr
operator|=
name|Nfs3Utils
operator|.
name|getFileAttr
argument_list|(
name|dfsClient
argument_list|,
name|path
argument_list|,
name|iug
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got error when processing perfect overwrite, path="
operator|+
name|path
operator|+
literal|" error:"
operator|+
name|e
argument_list|)
expr_stmt|;
return|return
operator|new
name|WRITE3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_IO
argument_list|,
name|wccData
argument_list|,
literal|0
argument_list|,
name|stableHow
argument_list|,
name|Nfs3Constant
operator|.
name|WRITE_COMMIT_VERF
argument_list|)
return|;
block|}
name|wccData
operator|.
name|setPostOpAttr
argument_list|(
name|postOpAttr
argument_list|)
expr_stmt|;
name|response
operator|=
operator|new
name|WRITE3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3_OK
argument_list|,
name|wccData
argument_list|,
name|count
argument_list|,
name|stableHow
argument_list|,
name|Nfs3Constant
operator|.
name|WRITE_COMMIT_VERF
argument_list|)
expr_stmt|;
block|}
return|return
name|response
return|;
block|}
comment|/**    * Check the commit status with the given offset    * @param commitOffset the offset to commit    * @param channel the channel to return response    * @param xid the xid of the commit request    * @param preOpAttr the preOp attribute    * @param fromRead whether the commit is triggered from read request    * @return one commit status: COMMIT_FINISHED, COMMIT_WAIT,    * COMMIT_INACTIVE_CTX, COMMIT_INACTIVE_WITH_PENDING_WRITE, COMMIT_ERROR    */
DECL|method|checkCommit (DFSClient dfsClient, long commitOffset, Channel channel, int xid, Nfs3FileAttributes preOpAttr, boolean fromRead)
specifier|public
name|COMMIT_STATUS
name|checkCommit
parameter_list|(
name|DFSClient
name|dfsClient
parameter_list|,
name|long
name|commitOffset
parameter_list|,
name|Channel
name|channel
parameter_list|,
name|int
name|xid
parameter_list|,
name|Nfs3FileAttributes
name|preOpAttr
parameter_list|,
name|boolean
name|fromRead
parameter_list|)
block|{
if|if
condition|(
operator|!
name|fromRead
condition|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|channel
operator|!=
literal|null
operator|&&
name|preOpAttr
operator|!=
literal|null
argument_list|)
expr_stmt|;
comment|// Keep stream active
name|updateLastAccessTime
argument_list|()
expr_stmt|;
block|}
name|Preconditions
operator|.
name|checkState
argument_list|(
name|commitOffset
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|COMMIT_STATUS
name|ret
init|=
name|checkCommitInternal
argument_list|(
name|commitOffset
argument_list|,
name|channel
argument_list|,
name|xid
argument_list|,
name|preOpAttr
argument_list|,
name|fromRead
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Got commit status: "
operator|+
name|ret
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Do the sync outside the lock
if|if
condition|(
name|ret
operator|==
name|COMMIT_STATUS
operator|.
name|COMMIT_DO_SYNC
operator|||
name|ret
operator|==
name|COMMIT_STATUS
operator|.
name|COMMIT_FINISHED
condition|)
block|{
try|try
block|{
comment|// Sync file data and length
name|fos
operator|.
name|hsync
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|SyncFlag
operator|.
name|UPDATE_LENGTH
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|=
name|COMMIT_STATUS
operator|.
name|COMMIT_FINISHED
expr_stmt|;
comment|// Remove COMMIT_DO_SYNC status
comment|// Nothing to do for metadata since attr related change is pass-through
block|}
catch|catch
parameter_list|(
name|ClosedChannelException
name|cce
parameter_list|)
block|{
if|if
condition|(
name|pendingWrites
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ret
operator|=
name|COMMIT_STATUS
operator|.
name|COMMIT_FINISHED
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|COMMIT_STATUS
operator|.
name|COMMIT_ERROR
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Got stream error during data sync:"
operator|+
name|e
argument_list|)
expr_stmt|;
comment|// Do nothing. Stream will be closed eventually by StreamMonitor.
comment|// status = Nfs3Status.NFS3ERR_IO;
name|ret
operator|=
name|COMMIT_STATUS
operator|.
name|COMMIT_ERROR
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|checkCommitInternal (long commitOffset, Channel channel, int xid, Nfs3FileAttributes preOpAttr, boolean fromRead)
specifier|synchronized
name|COMMIT_STATUS
name|checkCommitInternal
parameter_list|(
name|long
name|commitOffset
parameter_list|,
name|Channel
name|channel
parameter_list|,
name|int
name|xid
parameter_list|,
name|Nfs3FileAttributes
name|preOpAttr
parameter_list|,
name|boolean
name|fromRead
parameter_list|)
block|{
if|if
condition|(
operator|!
name|activeState
condition|)
block|{
if|if
condition|(
name|pendingWrites
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|COMMIT_STATUS
operator|.
name|COMMIT_INACTIVE_CTX
return|;
block|}
else|else
block|{
comment|// TODO: return success if already committed
return|return
name|COMMIT_STATUS
operator|.
name|COMMIT_INACTIVE_WITH_PENDING_WRITE
return|;
block|}
block|}
name|long
name|flushed
init|=
name|getFlushedOffset
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"getFlushedOffset="
operator|+
name|flushed
operator|+
literal|" commitOffset="
operator|+
name|commitOffset
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|commitOffset
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|commitOffset
operator|>
name|flushed
condition|)
block|{
if|if
condition|(
operator|!
name|fromRead
condition|)
block|{
name|CommitCtx
name|commitCtx
init|=
operator|new
name|CommitCtx
argument_list|(
name|commitOffset
argument_list|,
name|channel
argument_list|,
name|xid
argument_list|,
name|preOpAttr
argument_list|)
decl_stmt|;
name|pendingCommits
operator|.
name|put
argument_list|(
name|commitOffset
argument_list|,
name|commitCtx
argument_list|)
expr_stmt|;
block|}
return|return
name|COMMIT_STATUS
operator|.
name|COMMIT_WAIT
return|;
block|}
else|else
block|{
return|return
name|COMMIT_STATUS
operator|.
name|COMMIT_DO_SYNC
return|;
block|}
block|}
name|Entry
argument_list|<
name|OffsetRange
argument_list|,
name|WriteCtx
argument_list|>
name|key
init|=
name|pendingWrites
operator|.
name|firstEntry
argument_list|()
decl_stmt|;
comment|// Commit whole file, commitOffset == 0
if|if
condition|(
name|pendingWrites
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Note that, there is no guarantee data is synced. TODO: We could still
comment|// do a sync here though the output stream might be closed.
return|return
name|COMMIT_STATUS
operator|.
name|COMMIT_FINISHED
return|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|fromRead
condition|)
block|{
comment|// Insert commit
name|long
name|maxOffset
init|=
name|key
operator|.
name|getKey
argument_list|()
operator|.
name|getMax
argument_list|()
operator|-
literal|1
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|maxOffset
operator|>
literal|0
argument_list|)
expr_stmt|;
name|CommitCtx
name|commitCtx
init|=
operator|new
name|CommitCtx
argument_list|(
name|maxOffset
argument_list|,
name|channel
argument_list|,
name|xid
argument_list|,
name|preOpAttr
argument_list|)
decl_stmt|;
name|pendingCommits
operator|.
name|put
argument_list|(
name|maxOffset
argument_list|,
name|commitCtx
argument_list|)
expr_stmt|;
block|}
return|return
name|COMMIT_STATUS
operator|.
name|COMMIT_WAIT
return|;
block|}
block|}
DECL|method|addWrite (WriteCtx writeCtx)
specifier|private
name|void
name|addWrite
parameter_list|(
name|WriteCtx
name|writeCtx
parameter_list|)
block|{
name|long
name|offset
init|=
name|writeCtx
operator|.
name|getOffset
argument_list|()
decl_stmt|;
name|int
name|count
init|=
name|writeCtx
operator|.
name|getCount
argument_list|()
decl_stmt|;
comment|// For the offset range (min, max), min is inclusive, and max is exclusive
name|pendingWrites
operator|.
name|put
argument_list|(
operator|new
name|OffsetRange
argument_list|(
name|offset
argument_list|,
name|offset
operator|+
name|count
argument_list|)
argument_list|,
name|writeCtx
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check stream status to decide if it should be closed    * @return true, remove stream; false, keep stream    */
DECL|method|streamCleanup (long fileId, long streamTimeout)
specifier|public
specifier|synchronized
name|boolean
name|streamCleanup
parameter_list|(
name|long
name|fileId
parameter_list|,
name|long
name|streamTimeout
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|streamTimeout
operator|>=
name|Nfs3Constant
operator|.
name|OUTPUT_STREAM_TIMEOUT_MIN_DEFAULT
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|activeState
condition|)
block|{
return|return
literal|true
return|;
block|}
name|boolean
name|flag
init|=
literal|false
decl_stmt|;
comment|// Check the stream timeout
if|if
condition|(
name|checkStreamTimeout
argument_list|(
name|streamTimeout
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"stream can be closed for fileId:"
operator|+
name|fileId
argument_list|)
expr_stmt|;
block|}
name|flag
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|flag
return|;
block|}
comment|/**    * Get (and remove) the next WriteCtx from {@link #pendingWrites} if possible.    *     * @return Null if {@link #pendingWrites} is null, or the next WriteCtx's    *         offset is larger than nextOffSet.    */
DECL|method|offerNextToWrite ()
specifier|private
specifier|synchronized
name|WriteCtx
name|offerNextToWrite
parameter_list|()
block|{
if|if
condition|(
name|pendingWrites
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"The asyn write task has no pending writes, fileId: "
operator|+
name|latestAttr
operator|.
name|getFileId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// process pending commit again to handle this race: a commit is added
comment|// to pendingCommits map just after the last doSingleWrite returns.
comment|// There is no pending write and the commit should be handled by the
comment|// last doSingleWrite. Due to the race, the commit is left along and
comment|// can't be processed until cleanup. Therefore, we should do another
comment|// processCommits to fix the race issue.
name|processCommits
argument_list|(
name|nextOffset
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// nextOffset has same value as
comment|// flushedOffset
name|this
operator|.
name|asyncStatus
operator|=
literal|false
expr_stmt|;
return|return
literal|null
return|;
block|}
name|Entry
argument_list|<
name|OffsetRange
argument_list|,
name|WriteCtx
argument_list|>
name|lastEntry
init|=
name|pendingWrites
operator|.
name|lastEntry
argument_list|()
decl_stmt|;
name|OffsetRange
name|range
init|=
name|lastEntry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|WriteCtx
name|toWrite
init|=
name|lastEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"range.getMin()="
operator|+
name|range
operator|.
name|getMin
argument_list|()
operator|+
literal|" nextOffset="
operator|+
name|nextOffset
argument_list|)
expr_stmt|;
block|}
name|long
name|offset
init|=
name|nextOffset
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|range
operator|.
name|getMin
argument_list|()
operator|>
name|offset
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"The next sequencial write has not arrived yet"
argument_list|)
expr_stmt|;
block|}
name|processCommits
argument_list|(
name|nextOffset
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// handle race
name|this
operator|.
name|asyncStatus
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|range
operator|.
name|getMin
argument_list|()
operator|<
name|offset
operator|&&
name|range
operator|.
name|getMax
argument_list|()
operator|>
name|offset
condition|)
block|{
comment|// shouldn't happen since we do sync for overlapped concurrent writers
name|LOG
operator|.
name|warn
argument_list|(
literal|"Got a overlapping write ("
operator|+
name|range
operator|.
name|getMin
argument_list|()
operator|+
literal|","
operator|+
name|range
operator|.
name|getMax
argument_list|()
operator|+
literal|"), nextOffset="
operator|+
name|offset
operator|+
literal|". Silently drop it now"
argument_list|)
expr_stmt|;
name|pendingWrites
operator|.
name|remove
argument_list|(
name|range
argument_list|)
expr_stmt|;
name|processCommits
argument_list|(
name|nextOffset
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// handle race
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Remove write("
operator|+
name|range
operator|.
name|getMin
argument_list|()
operator|+
literal|"-"
operator|+
name|range
operator|.
name|getMax
argument_list|()
operator|+
literal|") from the list"
argument_list|)
expr_stmt|;
block|}
comment|// after writing, remove the WriteCtx from cache
name|pendingWrites
operator|.
name|remove
argument_list|(
name|range
argument_list|)
expr_stmt|;
comment|// update nextOffset
name|nextOffset
operator|.
name|addAndGet
argument_list|(
name|toWrite
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Change nextOffset to "
operator|+
name|nextOffset
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|toWrite
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/** Invoked by AsynDataService to write back to HDFS */
DECL|method|executeWriteBack ()
name|void
name|executeWriteBack
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|asyncStatus
argument_list|,
literal|"openFileCtx has false asyncStatus, fileId:"
operator|+
name|latestAttr
operator|.
name|getFileId
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|long
name|startOffset
init|=
name|asyncWriteBackStartOffset
decl_stmt|;
try|try
block|{
while|while
condition|(
name|activeState
condition|)
block|{
comment|// asyncStatus could be changed to false in offerNextToWrite()
name|WriteCtx
name|toWrite
init|=
name|offerNextToWrite
argument_list|()
decl_stmt|;
if|if
condition|(
name|toWrite
operator|!=
literal|null
condition|)
block|{
comment|// Do the write
name|doSingleWrite
argument_list|(
name|toWrite
argument_list|)
expr_stmt|;
name|updateLastAccessTime
argument_list|()
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|activeState
operator|&&
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"The openFileCtx is not active anymore, fileId: "
operator|+
name|latestAttr
operator|.
name|getFileId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
comment|// Make sure to reset asyncStatus to false unless a race happens
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|startOffset
operator|==
name|asyncWriteBackStartOffset
condition|)
block|{
name|asyncStatus
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Another asyn task is already started before this one"
operator|+
literal|" is finalized. fileId:"
operator|+
name|latestAttr
operator|.
name|getFileId
argument_list|()
operator|+
literal|" asyncStatus:"
operator|+
name|asyncStatus
operator|+
literal|" original startOffset:"
operator|+
name|startOffset
operator|+
literal|" new startOffset:"
operator|+
name|asyncWriteBackStartOffset
operator|+
literal|". Won't change asyncStatus here."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|processCommits (long offset)
specifier|private
name|void
name|processCommits
parameter_list|(
name|long
name|offset
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|offset
operator|>
literal|0
argument_list|)
expr_stmt|;
name|long
name|flushedOffset
init|=
name|getFlushedOffset
argument_list|()
decl_stmt|;
name|Entry
argument_list|<
name|Long
argument_list|,
name|CommitCtx
argument_list|>
name|entry
init|=
name|pendingCommits
operator|.
name|firstEntry
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
operator|||
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|offset
operator|>
name|flushedOffset
condition|)
block|{
return|return;
block|}
comment|// Now do sync for the ready commits
name|int
name|status
init|=
name|Nfs3Status
operator|.
name|NFS3ERR_IO
decl_stmt|;
try|try
block|{
comment|// Sync file data and length
name|fos
operator|.
name|hsync
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|SyncFlag
operator|.
name|UPDATE_LENGTH
argument_list|)
argument_list|)
expr_stmt|;
name|status
operator|=
name|Nfs3Status
operator|.
name|NFS3_OK
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClosedChannelException
name|cce
parameter_list|)
block|{
if|if
condition|(
operator|!
name|pendingWrites
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't sync for fileId: "
operator|+
name|latestAttr
operator|.
name|getFileId
argument_list|()
operator|+
literal|". Channel closed with writes pending."
argument_list|,
name|cce
argument_list|)
expr_stmt|;
block|}
name|status
operator|=
name|Nfs3Status
operator|.
name|NFS3ERR_IO
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Got stream error during data sync:"
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// Do nothing. Stream will be closed eventually by StreamMonitor.
name|status
operator|=
name|Nfs3Status
operator|.
name|NFS3ERR_IO
expr_stmt|;
block|}
comment|// Update latestAttr
try|try
block|{
name|latestAttr
operator|=
name|Nfs3Utils
operator|.
name|getFileAttr
argument_list|(
name|client
argument_list|,
name|Nfs3Utils
operator|.
name|getFileIdPath
argument_list|(
name|latestAttr
operator|.
name|getFileId
argument_list|()
argument_list|)
argument_list|,
name|iug
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't get new file attr, fileId: "
operator|+
name|latestAttr
operator|.
name|getFileId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|status
operator|=
name|Nfs3Status
operator|.
name|NFS3ERR_IO
expr_stmt|;
block|}
if|if
condition|(
name|latestAttr
operator|.
name|getSize
argument_list|()
operator|!=
name|offset
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"After sync, the expect file size: "
operator|+
name|offset
operator|+
literal|", however actual file size is: "
operator|+
name|latestAttr
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|status
operator|=
name|Nfs3Status
operator|.
name|NFS3ERR_IO
expr_stmt|;
block|}
name|WccData
name|wccData
init|=
operator|new
name|WccData
argument_list|(
name|Nfs3Utils
operator|.
name|getWccAttr
argument_list|(
name|latestAttr
argument_list|)
argument_list|,
name|latestAttr
argument_list|)
decl_stmt|;
comment|// Send response for the ready commits
while|while
condition|(
name|entry
operator|!=
literal|null
operator|&&
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|offset
operator|<=
name|flushedOffset
condition|)
block|{
name|pendingCommits
operator|.
name|remove
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|CommitCtx
name|commit
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|COMMIT3Response
name|response
init|=
operator|new
name|COMMIT3Response
argument_list|(
name|status
argument_list|,
name|wccData
argument_list|,
name|Nfs3Constant
operator|.
name|WRITE_COMMIT_VERF
argument_list|)
decl_stmt|;
name|Nfs3Utils
operator|.
name|writeChannelCommit
argument_list|(
name|commit
operator|.
name|getChannel
argument_list|()
argument_list|,
name|response
operator|.
name|writeHeaderAndResponse
argument_list|(
operator|new
name|XDR
argument_list|()
argument_list|,
name|commit
operator|.
name|getXid
argument_list|()
argument_list|,
operator|new
name|VerifierNone
argument_list|()
argument_list|)
argument_list|,
name|commit
operator|.
name|getXid
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"FileId: "
operator|+
name|latestAttr
operator|.
name|getFileId
argument_list|()
operator|+
literal|" Service time:"
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|commit
operator|.
name|getStartTime
argument_list|()
operator|)
operator|+
literal|"ms. Sent response for commit:"
operator|+
name|commit
argument_list|)
expr_stmt|;
block|}
name|entry
operator|=
name|pendingCommits
operator|.
name|firstEntry
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|doSingleWrite (final WriteCtx writeCtx)
specifier|private
name|void
name|doSingleWrite
parameter_list|(
specifier|final
name|WriteCtx
name|writeCtx
parameter_list|)
block|{
name|Channel
name|channel
init|=
name|writeCtx
operator|.
name|getChannel
argument_list|()
decl_stmt|;
name|int
name|xid
init|=
name|writeCtx
operator|.
name|getXid
argument_list|()
decl_stmt|;
name|long
name|offset
init|=
name|writeCtx
operator|.
name|getOffset
argument_list|()
decl_stmt|;
name|int
name|count
init|=
name|writeCtx
operator|.
name|getCount
argument_list|()
decl_stmt|;
name|WriteStableHow
name|stableHow
init|=
name|writeCtx
operator|.
name|getStableHow
argument_list|()
decl_stmt|;
name|FileHandle
name|handle
init|=
name|writeCtx
operator|.
name|getHandle
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"do write, fileId: "
operator|+
name|handle
operator|.
name|getFileId
argument_list|()
operator|+
literal|" offset: "
operator|+
name|offset
operator|+
literal|" length:"
operator|+
name|count
operator|+
literal|" stableHow:"
operator|+
name|stableHow
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
comment|// The write is not protected by lock. asyncState is used to make sure
comment|// there is one thread doing write back at any time
name|writeCtx
operator|.
name|writeData
argument_list|(
name|fos
argument_list|)
expr_stmt|;
name|long
name|flushedOffset
init|=
name|getFlushedOffset
argument_list|()
decl_stmt|;
if|if
condition|(
name|flushedOffset
operator|!=
operator|(
name|offset
operator|+
name|count
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"output stream is out of sync, pos="
operator|+
name|flushedOffset
operator|+
literal|" and nextOffset should be"
operator|+
operator|(
name|offset
operator|+
name|count
operator|)
argument_list|)
throw|;
block|}
comment|// Reduce memory occupation size if request was allowed dumped
if|if
condition|(
name|writeCtx
operator|.
name|getDataState
argument_list|()
operator|==
name|WriteCtx
operator|.
name|DataState
operator|.
name|ALLOW_DUMP
condition|)
block|{
synchronized|synchronized
init|(
name|writeCtx
init|)
block|{
if|if
condition|(
name|writeCtx
operator|.
name|getDataState
argument_list|()
operator|==
name|WriteCtx
operator|.
name|DataState
operator|.
name|ALLOW_DUMP
condition|)
block|{
name|writeCtx
operator|.
name|setDataState
argument_list|(
name|WriteCtx
operator|.
name|DataState
operator|.
name|NO_DUMP
argument_list|)
expr_stmt|;
name|updateNonSequentialWriteInMemory
argument_list|(
operator|-
name|count
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"After writing "
operator|+
name|handle
operator|.
name|getFileId
argument_list|()
operator|+
literal|" at offset "
operator|+
name|offset
operator|+
literal|", updated the memory count, new value:"
operator|+
name|nonSequentialWriteInMemory
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|writeCtx
operator|.
name|getReplied
argument_list|()
condition|)
block|{
if|if
condition|(
name|stableHow
operator|!=
name|WriteStableHow
operator|.
name|UNSTABLE
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Do sync for stable write:"
operator|+
name|writeCtx
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|stableHow
operator|==
name|WriteStableHow
operator|.
name|DATA_SYNC
condition|)
block|{
name|fos
operator|.
name|hsync
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|stableHow
operator|==
name|WriteStableHow
operator|.
name|FILE_SYNC
argument_list|,
literal|"Unknown WriteStableHow:"
operator|+
name|stableHow
argument_list|)
expr_stmt|;
comment|// Sync file data and length
name|fos
operator|.
name|hsync
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|SyncFlag
operator|.
name|UPDATE_LENGTH
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"hsync failed with writeCtx:"
operator|+
name|writeCtx
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
name|WccAttr
name|preOpAttr
init|=
name|latestAttr
operator|.
name|getWccAttr
argument_list|()
decl_stmt|;
name|WccData
name|fileWcc
init|=
operator|new
name|WccData
argument_list|(
name|preOpAttr
argument_list|,
name|latestAttr
argument_list|)
decl_stmt|;
if|if
condition|(
name|writeCtx
operator|.
name|getOriginalCount
argument_list|()
operator|!=
name|WriteCtx
operator|.
name|INVALID_ORIGINAL_COUNT
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Return original count:"
operator|+
name|writeCtx
operator|.
name|getOriginalCount
argument_list|()
operator|+
literal|" instead of real data count:"
operator|+
name|count
argument_list|)
expr_stmt|;
name|count
operator|=
name|writeCtx
operator|.
name|getOriginalCount
argument_list|()
expr_stmt|;
block|}
name|WRITE3Response
name|response
init|=
operator|new
name|WRITE3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3_OK
argument_list|,
name|fileWcc
argument_list|,
name|count
argument_list|,
name|stableHow
argument_list|,
name|Nfs3Constant
operator|.
name|WRITE_COMMIT_VERF
argument_list|)
decl_stmt|;
name|Nfs3Utils
operator|.
name|writeChannel
argument_list|(
name|channel
argument_list|,
name|response
operator|.
name|writeHeaderAndResponse
argument_list|(
operator|new
name|XDR
argument_list|()
argument_list|,
name|xid
argument_list|,
operator|new
name|VerifierNone
argument_list|()
argument_list|)
argument_list|,
name|xid
argument_list|)
expr_stmt|;
block|}
comment|// Handle the waiting commits without holding any lock
name|processCommits
argument_list|(
name|writeCtx
operator|.
name|getOffset
argument_list|()
operator|+
name|writeCtx
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error writing to fileId "
operator|+
name|handle
operator|.
name|getFileId
argument_list|()
operator|+
literal|" at offset "
operator|+
name|offset
operator|+
literal|" and length "
operator|+
name|count
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|writeCtx
operator|.
name|getReplied
argument_list|()
condition|)
block|{
name|WRITE3Response
name|response
init|=
operator|new
name|WRITE3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_IO
argument_list|)
decl_stmt|;
name|Nfs3Utils
operator|.
name|writeChannel
argument_list|(
name|channel
argument_list|,
name|response
operator|.
name|writeHeaderAndResponse
argument_list|(
operator|new
name|XDR
argument_list|()
argument_list|,
name|xid
argument_list|,
operator|new
name|VerifierNone
argument_list|()
argument_list|)
argument_list|,
name|xid
argument_list|)
expr_stmt|;
comment|// Keep stream open. Either client retries or SteamMonitor closes it.
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Clean up open file context for fileId: "
operator|+
name|latestAttr
operator|.
name|getFileId
argument_list|()
argument_list|)
expr_stmt|;
name|cleanup
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|cleanup ()
specifier|synchronized
name|void
name|cleanup
parameter_list|()
block|{
if|if
condition|(
operator|!
name|activeState
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Current OpenFileCtx is already inactive, no need to cleanup."
argument_list|)
expr_stmt|;
return|return;
block|}
name|activeState
operator|=
literal|false
expr_stmt|;
comment|// stop the dump thread
if|if
condition|(
name|dumpThread
operator|!=
literal|null
operator|&&
name|dumpThread
operator|.
name|isAlive
argument_list|()
condition|)
block|{
name|dumpThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
try|try
block|{
name|dumpThread
operator|.
name|join
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{       }
block|}
comment|// Close stream
try|try
block|{
if|if
condition|(
name|fos
operator|!=
literal|null
condition|)
block|{
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Can't close stream for fileId:"
operator|+
name|latestAttr
operator|.
name|getFileId
argument_list|()
operator|+
literal|", error:"
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Reply error for pending writes
name|LOG
operator|.
name|info
argument_list|(
literal|"There are "
operator|+
name|pendingWrites
operator|.
name|size
argument_list|()
operator|+
literal|" pending writes."
argument_list|)
expr_stmt|;
name|WccAttr
name|preOpAttr
init|=
name|latestAttr
operator|.
name|getWccAttr
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|pendingWrites
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|OffsetRange
name|key
init|=
name|pendingWrites
operator|.
name|firstKey
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Fail pending write: ("
operator|+
name|key
operator|.
name|getMin
argument_list|()
operator|+
literal|","
operator|+
name|key
operator|.
name|getMax
argument_list|()
operator|+
literal|"), nextOffset="
operator|+
name|nextOffset
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|WriteCtx
name|writeCtx
init|=
name|pendingWrites
operator|.
name|remove
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|writeCtx
operator|.
name|getReplied
argument_list|()
condition|)
block|{
name|WccData
name|fileWcc
init|=
operator|new
name|WccData
argument_list|(
name|preOpAttr
argument_list|,
name|latestAttr
argument_list|)
decl_stmt|;
name|WRITE3Response
name|response
init|=
operator|new
name|WRITE3Response
argument_list|(
name|Nfs3Status
operator|.
name|NFS3ERR_IO
argument_list|,
name|fileWcc
argument_list|,
literal|0
argument_list|,
name|writeCtx
operator|.
name|getStableHow
argument_list|()
argument_list|,
name|Nfs3Constant
operator|.
name|WRITE_COMMIT_VERF
argument_list|)
decl_stmt|;
name|Nfs3Utils
operator|.
name|writeChannel
argument_list|(
name|writeCtx
operator|.
name|getChannel
argument_list|()
argument_list|,
name|response
operator|.
name|writeHeaderAndResponse
argument_list|(
operator|new
name|XDR
argument_list|()
argument_list|,
name|writeCtx
operator|.
name|getXid
argument_list|()
argument_list|,
operator|new
name|VerifierNone
argument_list|()
argument_list|)
argument_list|,
name|writeCtx
operator|.
name|getXid
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Cleanup dump file
if|if
condition|(
name|dumpOut
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|dumpOut
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to close outputstream of dump file"
operator|+
name|dumpFilePath
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|File
name|dumpFile
init|=
operator|new
name|File
argument_list|(
name|dumpFilePath
argument_list|)
decl_stmt|;
if|if
condition|(
name|dumpFile
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|dumpFile
operator|.
name|delete
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to delete dumpfile: "
operator|+
name|dumpFile
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|raf
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|raf
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Got exception when closing input stream of dump file."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|getPendingWritesForTest ()
name|ConcurrentNavigableMap
argument_list|<
name|OffsetRange
argument_list|,
name|WriteCtx
argument_list|>
name|getPendingWritesForTest
parameter_list|()
block|{
return|return
name|pendingWrites
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getPendingCommitsForTest ()
name|ConcurrentNavigableMap
argument_list|<
name|Long
argument_list|,
name|CommitCtx
argument_list|>
name|getPendingCommitsForTest
parameter_list|()
block|{
return|return
name|pendingCommits
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getNextOffsetForTest ()
name|long
name|getNextOffsetForTest
parameter_list|()
block|{
return|return
name|nextOffset
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|setNextOffsetForTest (long newValue)
name|void
name|setNextOffsetForTest
parameter_list|(
name|long
name|newValue
parameter_list|)
block|{
name|nextOffset
operator|.
name|set
argument_list|(
name|newValue
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|setActiveStatusForTest (boolean activeState)
name|void
name|setActiveStatusForTest
parameter_list|(
name|boolean
name|activeState
parameter_list|)
block|{
name|this
operator|.
name|activeState
operator|=
name|activeState
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"activeState: %b asyncStatus: %b nextOffset: %d"
argument_list|,
name|activeState
argument_list|,
name|asyncStatus
argument_list|,
name|nextOffset
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

