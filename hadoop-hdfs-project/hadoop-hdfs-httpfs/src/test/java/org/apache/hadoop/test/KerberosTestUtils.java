begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License. See accompanying LICENSE file.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.test
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|kerberos
operator|.
name|KerberosPrincipal
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|AppConfigurationEntry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|util
operator|.
name|KerberosUtil
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedActionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_comment
comment|/**  * Test helper class for Java Kerberos setup.  */
end_comment

begin_class
DECL|class|KerberosTestUtils
specifier|public
class|class
name|KerberosTestUtils
block|{
DECL|field|PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|PREFIX
init|=
literal|"httpfs.test."
decl_stmt|;
DECL|field|REALM
specifier|public
specifier|static
specifier|final
name|String
name|REALM
init|=
name|PREFIX
operator|+
literal|"kerberos.realm"
decl_stmt|;
DECL|field|CLIENT_PRINCIPAL
specifier|public
specifier|static
specifier|final
name|String
name|CLIENT_PRINCIPAL
init|=
name|PREFIX
operator|+
literal|"kerberos.client.principal"
decl_stmt|;
DECL|field|SERVER_PRINCIPAL
specifier|public
specifier|static
specifier|final
name|String
name|SERVER_PRINCIPAL
init|=
name|PREFIX
operator|+
literal|"kerberos.server.principal"
decl_stmt|;
DECL|field|KEYTAB_FILE
specifier|public
specifier|static
specifier|final
name|String
name|KEYTAB_FILE
init|=
name|PREFIX
operator|+
literal|"kerberos.keytab.file"
decl_stmt|;
DECL|method|getRealm ()
specifier|public
specifier|static
name|String
name|getRealm
parameter_list|()
block|{
return|return
name|System
operator|.
name|getProperty
argument_list|(
name|REALM
argument_list|,
literal|"LOCALHOST"
argument_list|)
return|;
block|}
DECL|method|getClientPrincipal ()
specifier|public
specifier|static
name|String
name|getClientPrincipal
parameter_list|()
block|{
return|return
name|System
operator|.
name|getProperty
argument_list|(
name|CLIENT_PRINCIPAL
argument_list|,
literal|"client"
argument_list|)
operator|+
literal|"@"
operator|+
name|getRealm
argument_list|()
return|;
block|}
DECL|method|getServerPrincipal ()
specifier|public
specifier|static
name|String
name|getServerPrincipal
parameter_list|()
block|{
return|return
name|System
operator|.
name|getProperty
argument_list|(
name|SERVER_PRINCIPAL
argument_list|,
literal|"HTTP/localhost"
argument_list|)
operator|+
literal|"@"
operator|+
name|getRealm
argument_list|()
return|;
block|}
DECL|method|getKeytabFile ()
specifier|public
specifier|static
name|String
name|getKeytabFile
parameter_list|()
block|{
name|String
name|keytabFile
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.home"
argument_list|)
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
operator|+
literal|".keytab"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
name|System
operator|.
name|getProperty
argument_list|(
name|KEYTAB_FILE
argument_list|,
name|keytabFile
argument_list|)
return|;
block|}
DECL|class|KerberosConfiguration
specifier|private
specifier|static
class|class
name|KerberosConfiguration
extends|extends
name|Configuration
block|{
DECL|field|principal
specifier|private
name|String
name|principal
decl_stmt|;
DECL|method|KerberosConfiguration (String principal)
specifier|public
name|KerberosConfiguration
parameter_list|(
name|String
name|principal
parameter_list|)
block|{
name|this
operator|.
name|principal
operator|=
name|principal
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getAppConfigurationEntry (String name)
specifier|public
name|AppConfigurationEntry
index|[]
name|getAppConfigurationEntry
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|options
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"keyTab"
argument_list|,
name|KerberosTestUtils
operator|.
name|getKeytabFile
argument_list|()
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"principal"
argument_list|,
name|principal
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"useKeyTab"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"storeKey"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"doNotPrompt"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"useTicketCache"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"renewTGT"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"refreshKrb5Config"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"isInitiator"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|String
name|ticketCache
init|=
name|System
operator|.
name|getenv
argument_list|(
literal|"KRB5CCNAME"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ticketCache
operator|!=
literal|null
condition|)
block|{
name|options
operator|.
name|put
argument_list|(
literal|"ticketCache"
argument_list|,
name|ticketCache
argument_list|)
expr_stmt|;
block|}
name|options
operator|.
name|put
argument_list|(
literal|"debug"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
return|return
operator|new
name|AppConfigurationEntry
index|[]
block|{
operator|new
name|AppConfigurationEntry
argument_list|(
name|KerberosUtil
operator|.
name|getKrb5LoginModuleName
argument_list|()
argument_list|,
name|AppConfigurationEntry
operator|.
name|LoginModuleControlFlag
operator|.
name|REQUIRED
argument_list|,
name|options
argument_list|)
block|,}
return|;
block|}
block|}
DECL|method|doAs (String principal, final Callable<T> callable)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|doAs
parameter_list|(
name|String
name|principal
parameter_list|,
specifier|final
name|Callable
argument_list|<
name|T
argument_list|>
name|callable
parameter_list|)
throws|throws
name|Exception
block|{
name|LoginContext
name|loginContext
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Set
argument_list|<
name|Principal
argument_list|>
name|principals
init|=
operator|new
name|HashSet
argument_list|<
name|Principal
argument_list|>
argument_list|()
decl_stmt|;
name|principals
operator|.
name|add
argument_list|(
operator|new
name|KerberosPrincipal
argument_list|(
name|KerberosTestUtils
operator|.
name|getClientPrincipal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Subject
name|subject
init|=
operator|new
name|Subject
argument_list|(
literal|false
argument_list|,
name|principals
argument_list|,
operator|new
name|HashSet
argument_list|<
name|Object
argument_list|>
argument_list|()
argument_list|,
operator|new
name|HashSet
argument_list|<
name|Object
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|loginContext
operator|=
operator|new
name|LoginContext
argument_list|(
literal|""
argument_list|,
name|subject
argument_list|,
literal|null
argument_list|,
operator|new
name|KerberosConfiguration
argument_list|(
name|principal
argument_list|)
argument_list|)
expr_stmt|;
name|loginContext
operator|.
name|login
argument_list|()
expr_stmt|;
name|subject
operator|=
name|loginContext
operator|.
name|getSubject
argument_list|()
expr_stmt|;
return|return
name|Subject
operator|.
name|doAs
argument_list|(
name|subject
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|T
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|callable
operator|.
name|call
argument_list|()
return|;
block|}
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|PrivilegedActionException
name|ex
parameter_list|)
block|{
throw|throw
name|ex
operator|.
name|getException
argument_list|()
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|loginContext
operator|!=
literal|null
condition|)
block|{
name|loginContext
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|doAsClient (Callable<T> callable)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|doAsClient
parameter_list|(
name|Callable
argument_list|<
name|T
argument_list|>
name|callable
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|doAs
argument_list|(
name|getClientPrincipal
argument_list|()
argument_list|,
name|callable
argument_list|)
return|;
block|}
DECL|method|doAsServer (Callable<T> callable)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|doAsServer
parameter_list|(
name|Callable
argument_list|<
name|T
argument_list|>
name|callable
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|doAs
argument_list|(
name|getServerPrincipal
argument_list|()
argument_list|,
name|callable
argument_list|)
return|;
block|}
block|}
end_class

end_unit

