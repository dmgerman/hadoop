begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.test
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|MessageFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|MethodRule
import|;
end_import

begin_class
DECL|class|HTestCase
specifier|public
specifier|abstract
class|class
name|HTestCase
block|{
DECL|field|TEST_WAITFOR_RATIO_PROP
specifier|public
specifier|static
specifier|final
name|String
name|TEST_WAITFOR_RATIO_PROP
init|=
literal|"test.waitfor.ratio"
decl_stmt|;
static|static
block|{
name|SysPropsForTestsLoader
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
DECL|field|WAITFOR_RATIO_DEFAULT
specifier|private
specifier|static
name|float
name|WAITFOR_RATIO_DEFAULT
init|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
name|TEST_WAITFOR_RATIO_PROP
argument_list|,
literal|"1"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|waitForRatio
specifier|private
name|float
name|waitForRatio
init|=
name|WAITFOR_RATIO_DEFAULT
decl_stmt|;
annotation|@
name|Rule
DECL|field|testDir
specifier|public
name|MethodRule
name|testDir
init|=
operator|new
name|TestDirHelper
argument_list|()
decl_stmt|;
annotation|@
name|Rule
DECL|field|jettyTestHelper
specifier|public
name|MethodRule
name|jettyTestHelper
init|=
operator|new
name|TestJettyHelper
argument_list|()
decl_stmt|;
annotation|@
name|Rule
DECL|field|exceptionHelper
specifier|public
name|MethodRule
name|exceptionHelper
init|=
operator|new
name|TestExceptionHelper
argument_list|()
decl_stmt|;
comment|/**    * Sets the 'wait for ratio' used in the {@link #sleep(long)},    * {@link #waitFor(int, Predicate)} and    * {@link #waitFor(int, boolean, Predicate)} method for the current    * test class.    *<p/>    * This is useful when running tests in slow machine for tests    * that are time sensitive.    *    * @param ratio the 'wait for ratio' to set.    */
DECL|method|setWaitForRatio (float ratio)
specifier|protected
name|void
name|setWaitForRatio
parameter_list|(
name|float
name|ratio
parameter_list|)
block|{
name|waitForRatio
operator|=
name|ratio
expr_stmt|;
block|}
comment|/*    * Returns the 'wait for ratio' used in the {@link #sleep(long)},    * {@link #waitFor(int, Predicate)} and    * {@link #waitFor(int, boolean, Predicate)} methods for the current    * test class.    *<p/>    * This is useful when running tests in slow machine for tests    * that are time sensitive.    *<p/>    * The default value is obtained from the Java System property    *<code>test.wait.for.ratio</code> which defaults to<code>1</code>.    *    * @return the 'wait for ratio' for the current test class.    */
DECL|method|getWaitForRatio ()
specifier|protected
name|float
name|getWaitForRatio
parameter_list|()
block|{
return|return
name|waitForRatio
return|;
block|}
comment|/**    * A predicate 'closure' used by the {@link #waitFor(int, Predicate)} and    * {@link #waitFor(int, boolean, Predicate)} methods.    */
DECL|interface|Predicate
specifier|public
specifier|static
interface|interface
name|Predicate
block|{
comment|/**      * Perform a predicate evaluation.      *      * @return the boolean result of the evaluation.      *      * @throws Exception thrown if the predicate evaluation could not evaluate.      */
DECL|method|evaluate ()
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
function_decl|;
block|}
comment|/**    * Makes the current thread sleep for the specified number of milliseconds.    *<p/>    * The sleep time is multiplied by the {@link #getWaitForRatio()}.    *    * @param time the number of milliseconds to sleep.    */
DECL|method|sleep (long time)
specifier|protected
name|void
name|sleep
parameter_list|(
name|long
name|time
parameter_list|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
call|(
name|long
call|)
argument_list|(
name|getWaitForRatio
argument_list|()
operator|*
name|time
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"Sleep interrupted, {0}"
argument_list|,
name|ex
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Waits up to the specified timeout for the given {@link Predicate} to    * become<code>true</code>, failing the test if the timeout is reached    * and the Predicate is still<code>false</code>.    *<p/>    * The timeout time is multiplied by the {@link #getWaitForRatio()}.    *    * @param timeout the timeout in milliseconds to wait for the predicate.    * @param predicate the predicate ot evaluate.    *    * @return the effective wait, in milli-seconds until the predicate become    *<code>true</code>.    */
DECL|method|waitFor (int timeout, Predicate predicate)
specifier|protected
name|long
name|waitFor
parameter_list|(
name|int
name|timeout
parameter_list|,
name|Predicate
name|predicate
parameter_list|)
block|{
return|return
name|waitFor
argument_list|(
name|timeout
argument_list|,
literal|false
argument_list|,
name|predicate
argument_list|)
return|;
block|}
comment|/**    * Waits up to the specified timeout for the given {@link Predicate} to    * become<code>true</code>.    *<p/>    * The timeout time is multiplied by the {@link #getWaitForRatio()}.    *    * @param timeout the timeout in milliseconds to wait for the predicate.    * @param failIfTimeout indicates if the test should be failed if the    * predicate times out.    * @param predicate the predicate ot evaluate.    *    * @return the effective wait, in milli-seconds until the predicate become    *<code>true</code> or<code>-1</code> if the predicate did not evaluate    *         to<code>true</code>.    */
DECL|method|waitFor (int timeout, boolean failIfTimeout, Predicate predicate)
specifier|protected
name|long
name|waitFor
parameter_list|(
name|int
name|timeout
parameter_list|,
name|boolean
name|failIfTimeout
parameter_list|,
name|Predicate
name|predicate
parameter_list|)
block|{
name|long
name|started
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
name|long
name|mustEnd
init|=
name|Time
operator|.
name|now
argument_list|()
operator|+
call|(
name|long
call|)
argument_list|(
name|getWaitForRatio
argument_list|()
operator|*
name|timeout
argument_list|)
decl_stmt|;
name|long
name|lastEcho
init|=
literal|0
decl_stmt|;
try|try
block|{
name|long
name|waiting
init|=
name|mustEnd
operator|-
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"Waiting up to [{0}] msec"
argument_list|,
name|waiting
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|eval
decl_stmt|;
while|while
condition|(
operator|!
operator|(
name|eval
operator|=
name|predicate
operator|.
name|evaluate
argument_list|()
operator|)
operator|&&
name|Time
operator|.
name|now
argument_list|()
operator|<
name|mustEnd
condition|)
block|{
if|if
condition|(
operator|(
name|Time
operator|.
name|now
argument_list|()
operator|-
name|lastEcho
operator|)
operator|>
literal|5000
condition|)
block|{
name|waiting
operator|=
name|mustEnd
operator|-
name|Time
operator|.
name|now
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"Waiting up to [{0}] msec"
argument_list|,
name|waiting
argument_list|)
argument_list|)
expr_stmt|;
name|lastEcho
operator|=
name|Time
operator|.
name|now
argument_list|()
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|eval
condition|)
block|{
if|if
condition|(
name|failIfTimeout
condition|)
block|{
name|fail
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"Waiting timed out after [{0}] msec"
argument_list|,
name|timeout
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"Waiting timed out after [{0}] msec"
argument_list|,
name|timeout
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|(
name|eval
operator|)
condition|?
name|Time
operator|.
name|now
argument_list|()
operator|-
name|started
else|:
operator|-
literal|1
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

