begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.test
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|MethodRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|model
operator|.
name|FrameworkMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|model
operator|.
name|Statement
import|;
end_import

begin_class
DECL|class|TestExceptionHelper
specifier|public
class|class
name|TestExceptionHelper
implements|implements
name|MethodRule
block|{
annotation|@
name|Test
DECL|method|dummy ()
specifier|public
name|void
name|dummy
parameter_list|()
block|{   }
annotation|@
name|Override
DECL|method|apply (final Statement statement, final FrameworkMethod frameworkMethod, final Object o)
specifier|public
name|Statement
name|apply
parameter_list|(
specifier|final
name|Statement
name|statement
parameter_list|,
specifier|final
name|FrameworkMethod
name|frameworkMethod
parameter_list|,
specifier|final
name|Object
name|o
parameter_list|)
block|{
return|return
operator|new
name|Statement
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|evaluate
parameter_list|()
throws|throws
name|Throwable
block|{
name|TestException
name|testExceptionAnnotation
init|=
name|frameworkMethod
operator|.
name|getAnnotation
argument_list|(
name|TestException
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|statement
operator|.
name|evaluate
argument_list|()
expr_stmt|;
if|if
condition|(
name|testExceptionAnnotation
operator|!=
literal|null
condition|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|Throwable
argument_list|>
name|klass
init|=
name|testExceptionAnnotation
operator|.
name|exception
argument_list|()
decl_stmt|;
name|fail
argument_list|(
literal|"Expected Exception: "
operator|+
name|klass
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
if|if
condition|(
name|testExceptionAnnotation
operator|!=
literal|null
condition|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|Throwable
argument_list|>
name|klass
init|=
name|testExceptionAnnotation
operator|.
name|exception
argument_list|()
decl_stmt|;
if|if
condition|(
name|klass
operator|.
name|isInstance
argument_list|(
name|ex
argument_list|)
condition|)
block|{
name|String
name|regExp
init|=
name|testExceptionAnnotation
operator|.
name|msgRegExp
argument_list|()
decl_stmt|;
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|regExp
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|pattern
operator|.
name|matcher
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|find
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"Expected Exception Message pattern: "
operator|+
name|regExp
operator|+
literal|" got message: "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|fail
argument_list|(
literal|"Expected Exception: "
operator|+
name|klass
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" got: "
operator|+
name|ex
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

