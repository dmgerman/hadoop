begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.http.server
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|http
operator|.
name|server
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|HTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|HadoopUsersConfTestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|TestDir
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|TestDirHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|TestJetty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|TestJettyHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|jetty
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|jetty
operator|.
name|webapp
operator|.
name|WebAppContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|MessageFormat
import|;
end_import

begin_comment
comment|/**  * This test class ensures that everything works as expected when ACL  * support is turned off HDFS.  This is the default configuration.  The other  * tests operate with ACL support turned on.  */
end_comment

begin_class
DECL|class|TestHttpFSServerNoACLs
specifier|public
class|class
name|TestHttpFSServerNoACLs
extends|extends
name|HTestCase
block|{
DECL|field|miniDfs
specifier|private
name|MiniDFSCluster
name|miniDfs
decl_stmt|;
DECL|field|nnConf
specifier|private
name|Configuration
name|nnConf
decl_stmt|;
comment|/**    * Fire up our own hand-rolled MiniDFSCluster.  We do this here instead    * of relying on TestHdfsHelper because we don't want to turn on ACL    * support.    *    * @throws Exception    */
DECL|method|startMiniDFS ()
specifier|private
name|void
name|startMiniDFS
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|testDirRoot
init|=
name|TestDirHelper
operator|.
name|getTestDir
argument_list|()
decl_stmt|;
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"hadoop.log.dir"
argument_list|)
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"hadoop.log.dir"
argument_list|,
operator|new
name|File
argument_list|(
name|testDirRoot
argument_list|,
literal|"hadoop-log"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|)
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"test.build.data"
argument_list|,
operator|new
name|File
argument_list|(
name|testDirRoot
argument_list|,
literal|"hadoop-data"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Configuration
name|conf
init|=
name|HadoopUsersConfTestHelper
operator|.
name|getBaseConf
argument_list|()
decl_stmt|;
name|HadoopUsersConfTestHelper
operator|.
name|addUserConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.hdfs.impl.disable.cache"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"dfs.block.access.token.enable"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"dfs.permissions"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.security.authentication"
argument_list|,
literal|"simple"
argument_list|)
expr_stmt|;
comment|// Explicitly turn off ACL support
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_ACLS_ENABLED_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|MiniDFSCluster
operator|.
name|Builder
name|builder
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|builder
operator|.
name|numDataNodes
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|miniDfs
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|nnConf
operator|=
name|miniDfs
operator|.
name|getConfiguration
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create an HttpFS Server to talk to the MiniDFSCluster we created.    * @throws Exception    */
DECL|method|createHttpFSServer ()
specifier|private
name|void
name|createHttpFSServer
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|homeDir
init|=
name|TestDirHelper
operator|.
name|getTestDir
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|homeDir
argument_list|,
literal|"conf"
argument_list|)
operator|.
name|mkdir
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|homeDir
argument_list|,
literal|"log"
argument_list|)
operator|.
name|mkdir
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|homeDir
argument_list|,
literal|"temp"
argument_list|)
operator|.
name|mkdir
argument_list|()
argument_list|)
expr_stmt|;
name|HttpFSServerWebApp
operator|.
name|setHomeDirForCurrentThread
argument_list|(
name|homeDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|secretFile
init|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|homeDir
argument_list|,
literal|"conf"
argument_list|)
argument_list|,
literal|"secret"
argument_list|)
decl_stmt|;
name|Writer
name|w
init|=
operator|new
name|FileWriter
argument_list|(
name|secretFile
argument_list|)
decl_stmt|;
name|w
operator|.
name|write
argument_list|(
literal|"secret"
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// HDFS configuration
name|File
name|hadoopConfDir
init|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|homeDir
argument_list|,
literal|"conf"
argument_list|)
argument_list|,
literal|"hadoop-conf"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|hadoopConfDir
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|()
throw|;
block|}
name|String
name|fsDefaultName
init|=
name|nnConf
operator|.
name|get
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|FS_DEFAULT_NAME_KEY
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|FS_DEFAULT_NAME_KEY
argument_list|,
name|fsDefaultName
argument_list|)
expr_stmt|;
comment|// Explicitly turn off ACLs, just in case the default becomes true later
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_ACLS_ENABLED_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|File
name|hdfsSite
init|=
operator|new
name|File
argument_list|(
name|hadoopConfDir
argument_list|,
literal|"hdfs-site.xml"
argument_list|)
decl_stmt|;
name|OutputStream
name|os
init|=
operator|new
name|FileOutputStream
argument_list|(
name|hdfsSite
argument_list|)
decl_stmt|;
name|conf
operator|.
name|writeXml
argument_list|(
name|os
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// HTTPFS configuration
name|conf
operator|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"httpfs.hadoop.config.dir"
argument_list|,
name|hadoopConfDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"httpfs.proxyuser."
operator|+
name|HadoopUsersConfTestHelper
operator|.
name|getHadoopProxyUser
argument_list|()
operator|+
literal|".groups"
argument_list|,
name|HadoopUsersConfTestHelper
operator|.
name|getHadoopProxyUserGroups
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"httpfs.proxyuser."
operator|+
name|HadoopUsersConfTestHelper
operator|.
name|getHadoopProxyUser
argument_list|()
operator|+
literal|".hosts"
argument_list|,
name|HadoopUsersConfTestHelper
operator|.
name|getHadoopProxyUserHosts
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"httpfs.authentication.signature.secret.file"
argument_list|,
name|secretFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|httpfsSite
init|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|homeDir
argument_list|,
literal|"conf"
argument_list|)
argument_list|,
literal|"httpfs-site.xml"
argument_list|)
decl_stmt|;
name|os
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|httpfsSite
argument_list|)
expr_stmt|;
name|conf
operator|.
name|writeXml
argument_list|(
name|os
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
name|ClassLoader
name|cl
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
name|URL
name|url
init|=
name|cl
operator|.
name|getResource
argument_list|(
literal|"webapp"
argument_list|)
decl_stmt|;
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|()
throw|;
block|}
name|WebAppContext
name|context
init|=
operator|new
name|WebAppContext
argument_list|(
name|url
operator|.
name|getPath
argument_list|()
argument_list|,
literal|"/webhdfs"
argument_list|)
decl_stmt|;
name|Server
name|server
init|=
name|TestJettyHelper
operator|.
name|getJettyServer
argument_list|()
decl_stmt|;
name|server
operator|.
name|addHandler
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|/**    * Talks to the http interface to get the json output of a *STATUS command    * on the given file.    *    * @param filename The file to query.    * @param command Either GETFILESTATUS, LISTSTATUS, or ACLSTATUS    * @param expectOK Is this operation expected to succeed?    * @throws Exception    */
DECL|method|getStatus (String filename, String command, boolean expectOK)
specifier|private
name|void
name|getStatus
parameter_list|(
name|String
name|filename
parameter_list|,
name|String
name|command
parameter_list|,
name|boolean
name|expectOK
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|user
init|=
name|HadoopUsersConfTestHelper
operator|.
name|getHadoopUsers
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
comment|// Remove leading / from filename
if|if
condition|(
name|filename
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'/'
condition|)
block|{
name|filename
operator|=
name|filename
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|String
name|pathOps
init|=
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"/webhdfs/v1/{0}?user.name={1}&op={2}"
argument_list|,
name|filename
argument_list|,
name|user
argument_list|,
name|command
argument_list|)
decl_stmt|;
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|TestJettyHelper
operator|.
name|getJettyURL
argument_list|()
argument_list|,
name|pathOps
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|connect
argument_list|()
expr_stmt|;
name|int
name|resp
init|=
name|conn
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
name|BufferedReader
name|reader
decl_stmt|;
if|if
condition|(
name|expectOK
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|resp
argument_list|)
expr_stmt|;
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|conn
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|res
init|=
name|reader
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|!
name|res
operator|.
name|contains
argument_list|(
literal|"aclBit"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|res
operator|.
name|contains
argument_list|(
literal|"owner"
argument_list|)
argument_list|)
expr_stmt|;
comment|// basic sanity check
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_INTERNAL_ERROR
argument_list|,
name|resp
argument_list|)
expr_stmt|;
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|conn
operator|.
name|getErrorStream
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|res
init|=
name|reader
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|res
operator|.
name|contains
argument_list|(
literal|"AclException"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|res
operator|.
name|contains
argument_list|(
literal|"Support for ACLs has been disabled"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * General-purpose http PUT command to the httpfs server.    * @param filename The file to operate upon    * @param command The command to perform (SETACL, etc)    * @param params Parameters, like "aclspec=..."    */
DECL|method|putCmd (String filename, String command, String params, boolean expectOK)
specifier|private
name|void
name|putCmd
parameter_list|(
name|String
name|filename
parameter_list|,
name|String
name|command
parameter_list|,
name|String
name|params
parameter_list|,
name|boolean
name|expectOK
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|user
init|=
name|HadoopUsersConfTestHelper
operator|.
name|getHadoopUsers
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
comment|// Remove leading / from filename
if|if
condition|(
name|filename
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'/'
condition|)
block|{
name|filename
operator|=
name|filename
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|String
name|pathOps
init|=
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"/webhdfs/v1/{0}?user.name={1}{2}{3}&op={4}"
argument_list|,
name|filename
argument_list|,
name|user
argument_list|,
operator|(
name|params
operator|==
literal|null
operator|)
condition|?
literal|""
else|:
literal|"&"
argument_list|,
operator|(
name|params
operator|==
literal|null
operator|)
condition|?
literal|""
else|:
name|params
argument_list|,
name|command
argument_list|)
decl_stmt|;
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|TestJettyHelper
operator|.
name|getJettyURL
argument_list|()
argument_list|,
name|pathOps
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|setRequestMethod
argument_list|(
literal|"PUT"
argument_list|)
expr_stmt|;
name|conn
operator|.
name|connect
argument_list|()
expr_stmt|;
name|int
name|resp
init|=
name|conn
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|expectOK
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|resp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_INTERNAL_ERROR
argument_list|,
name|resp
argument_list|)
expr_stmt|;
name|BufferedReader
name|reader
decl_stmt|;
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|conn
operator|.
name|getErrorStream
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|err
init|=
name|reader
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|err
operator|.
name|contains
argument_list|(
literal|"AclException"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|err
operator|.
name|contains
argument_list|(
literal|"Support for ACLs has been disabled"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Ensure that    *<ol>    *<li>GETFILESTATUS and LISTSTATUS work happily</li>    *<li>ACLSTATUS throws an exception</li>    *<li>The ACL SET, REMOVE, etc calls all fail</li>    *</ol>    *    * @throws Exception    */
annotation|@
name|Test
annotation|@
name|TestDir
annotation|@
name|TestJetty
DECL|method|testWithNoAcls ()
specifier|public
name|void
name|testWithNoAcls
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|aclUser1
init|=
literal|"user:foo:rw-"
decl_stmt|;
specifier|final
name|String
name|rmAclUser1
init|=
literal|"user:foo:"
decl_stmt|;
specifier|final
name|String
name|aclUser2
init|=
literal|"user:bar:r--"
decl_stmt|;
specifier|final
name|String
name|aclGroup1
init|=
literal|"group::r--"
decl_stmt|;
specifier|final
name|String
name|aclSpec
init|=
literal|"aclspec=user::rwx,"
operator|+
name|aclUser1
operator|+
literal|","
operator|+
name|aclGroup1
operator|+
literal|",other::---"
decl_stmt|;
specifier|final
name|String
name|modAclSpec
init|=
literal|"aclspec="
operator|+
name|aclUser2
decl_stmt|;
specifier|final
name|String
name|remAclSpec
init|=
literal|"aclspec="
operator|+
name|rmAclUser1
decl_stmt|;
specifier|final
name|String
name|defUser1
init|=
literal|"default:user:glarch:r-x"
decl_stmt|;
specifier|final
name|String
name|defSpec1
init|=
literal|"aclspec="
operator|+
name|defUser1
decl_stmt|;
specifier|final
name|String
name|dir
init|=
literal|"/noACLs"
decl_stmt|;
specifier|final
name|String
name|path
init|=
name|dir
operator|+
literal|"/foo"
decl_stmt|;
name|startMiniDFS
argument_list|()
expr_stmt|;
name|createHttpFSServer
argument_list|()
expr_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|nnConf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
name|OutputStream
name|os
init|=
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|path
argument_list|)
argument_list|)
decl_stmt|;
name|os
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
comment|/* The normal status calls work as expected; GETACLSTATUS fails */
name|getStatus
argument_list|(
name|path
argument_list|,
literal|"GETFILESTATUS"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|getStatus
argument_list|(
name|dir
argument_list|,
literal|"LISTSTATUS"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|getStatus
argument_list|(
name|path
argument_list|,
literal|"GETACLSTATUS"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|/* All the ACL-based PUT commands fail with ACL exceptions */
name|putCmd
argument_list|(
name|path
argument_list|,
literal|"SETACL"
argument_list|,
name|aclSpec
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|putCmd
argument_list|(
name|path
argument_list|,
literal|"MODIFYACLENTRIES"
argument_list|,
name|modAclSpec
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|putCmd
argument_list|(
name|path
argument_list|,
literal|"REMOVEACLENTRIES"
argument_list|,
name|remAclSpec
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|putCmd
argument_list|(
name|path
argument_list|,
literal|"REMOVEACL"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|putCmd
argument_list|(
name|dir
argument_list|,
literal|"SETACL"
argument_list|,
name|defSpec1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|putCmd
argument_list|(
name|dir
argument_list|,
literal|"REMOVEDEFAULTACL"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|miniDfs
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

