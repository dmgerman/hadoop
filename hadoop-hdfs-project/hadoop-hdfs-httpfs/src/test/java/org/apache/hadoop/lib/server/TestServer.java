begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.lib.server
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|lib
operator|.
name|server
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|lib
operator|.
name|lang
operator|.
name|XException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|HTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|TestDir
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|TestDirHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|TestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestServer
specifier|public
class|class
name|TestServer
extends|extends
name|HTestCase
block|{
annotation|@
name|Test
annotation|@
name|TestDir
DECL|method|constructorsGetters ()
specifier|public
name|void
name|constructorsGetters
parameter_list|()
throws|throws
name|Exception
block|{
name|Server
name|server
init|=
operator|new
name|Server
argument_list|(
literal|"server"
argument_list|,
literal|"/a"
argument_list|,
literal|"/b"
argument_list|,
literal|"/c"
argument_list|,
literal|"/d"
argument_list|,
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|server
operator|.
name|getHomeDir
argument_list|()
argument_list|,
literal|"/a"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|server
operator|.
name|getConfigDir
argument_list|()
argument_list|,
literal|"/b"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|server
operator|.
name|getLogDir
argument_list|()
argument_list|,
literal|"/c"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|server
operator|.
name|getTempDir
argument_list|()
argument_list|,
literal|"/d"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|server
operator|.
name|getName
argument_list|()
argument_list|,
literal|"server"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|server
operator|.
name|getPrefix
argument_list|()
argument_list|,
literal|"server"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|server
operator|.
name|getPrefixedName
argument_list|(
literal|"name"
argument_list|)
argument_list|,
literal|"server.name"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|server
operator|.
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
name|server
operator|=
operator|new
name|Server
argument_list|(
literal|"server"
argument_list|,
literal|"/a"
argument_list|,
literal|"/b"
argument_list|,
literal|"/c"
argument_list|,
literal|"/d"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|server
operator|.
name|getHomeDir
argument_list|()
argument_list|,
literal|"/a"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|server
operator|.
name|getConfigDir
argument_list|()
argument_list|,
literal|"/b"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|server
operator|.
name|getLogDir
argument_list|()
argument_list|,
literal|"/c"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|server
operator|.
name|getTempDir
argument_list|()
argument_list|,
literal|"/d"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|server
operator|.
name|getName
argument_list|()
argument_list|,
literal|"server"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|server
operator|.
name|getPrefix
argument_list|()
argument_list|,
literal|"server"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|server
operator|.
name|getPrefixedName
argument_list|(
literal|"name"
argument_list|)
argument_list|,
literal|"server.name"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|server
operator|.
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
name|server
operator|=
operator|new
name|Server
argument_list|(
literal|"server"
argument_list|,
name|TestDirHelper
operator|.
name|getTestDir
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|server
operator|.
name|getHomeDir
argument_list|()
argument_list|,
name|TestDirHelper
operator|.
name|getTestDir
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|server
operator|.
name|getConfigDir
argument_list|()
argument_list|,
name|TestDirHelper
operator|.
name|getTestDir
argument_list|()
operator|+
literal|"/conf"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|server
operator|.
name|getLogDir
argument_list|()
argument_list|,
name|TestDirHelper
operator|.
name|getTestDir
argument_list|()
operator|+
literal|"/log"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|server
operator|.
name|getTempDir
argument_list|()
argument_list|,
name|TestDirHelper
operator|.
name|getTestDir
argument_list|()
operator|+
literal|"/temp"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|server
operator|.
name|getName
argument_list|()
argument_list|,
literal|"server"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|server
operator|.
name|getPrefix
argument_list|()
argument_list|,
literal|"server"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|server
operator|.
name|getPrefixedName
argument_list|(
literal|"name"
argument_list|)
argument_list|,
literal|"server.name"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|server
operator|.
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
name|server
operator|=
operator|new
name|Server
argument_list|(
literal|"server"
argument_list|,
name|TestDirHelper
operator|.
name|getTestDir
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|server
operator|.
name|getHomeDir
argument_list|()
argument_list|,
name|TestDirHelper
operator|.
name|getTestDir
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|server
operator|.
name|getConfigDir
argument_list|()
argument_list|,
name|TestDirHelper
operator|.
name|getTestDir
argument_list|()
operator|+
literal|"/conf"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|server
operator|.
name|getLogDir
argument_list|()
argument_list|,
name|TestDirHelper
operator|.
name|getTestDir
argument_list|()
operator|+
literal|"/log"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|server
operator|.
name|getTempDir
argument_list|()
argument_list|,
name|TestDirHelper
operator|.
name|getTestDir
argument_list|()
operator|+
literal|"/temp"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|server
operator|.
name|getName
argument_list|()
argument_list|,
literal|"server"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|server
operator|.
name|getPrefix
argument_list|()
argument_list|,
literal|"server"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|server
operator|.
name|getPrefixedName
argument_list|(
literal|"name"
argument_list|)
argument_list|,
literal|"server.name"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|server
operator|.
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestException
argument_list|(
name|exception
operator|=
name|ServerException
operator|.
name|class
argument_list|,
name|msgRegExp
operator|=
literal|"S01.*"
argument_list|)
annotation|@
name|TestDir
DECL|method|initNoHomeDir ()
specifier|public
name|void
name|initNoHomeDir
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|homeDir
init|=
operator|new
name|File
argument_list|(
name|TestDirHelper
operator|.
name|getTestDir
argument_list|()
argument_list|,
literal|"home"
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"server.services"
argument_list|,
name|TestService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Server
name|server
init|=
operator|new
name|Server
argument_list|(
literal|"server"
argument_list|,
name|homeDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|server
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestException
argument_list|(
name|exception
operator|=
name|ServerException
operator|.
name|class
argument_list|,
name|msgRegExp
operator|=
literal|"S02.*"
argument_list|)
annotation|@
name|TestDir
DECL|method|initHomeDirNotDir ()
specifier|public
name|void
name|initHomeDirNotDir
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|homeDir
init|=
operator|new
name|File
argument_list|(
name|TestDirHelper
operator|.
name|getTestDir
argument_list|()
argument_list|,
literal|"home"
argument_list|)
decl_stmt|;
operator|new
name|FileOutputStream
argument_list|(
name|homeDir
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"server.services"
argument_list|,
name|TestService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Server
name|server
init|=
operator|new
name|Server
argument_list|(
literal|"server"
argument_list|,
name|homeDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|server
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestException
argument_list|(
name|exception
operator|=
name|ServerException
operator|.
name|class
argument_list|,
name|msgRegExp
operator|=
literal|"S01.*"
argument_list|)
annotation|@
name|TestDir
DECL|method|initNoConfigDir ()
specifier|public
name|void
name|initNoConfigDir
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|homeDir
init|=
operator|new
name|File
argument_list|(
name|TestDirHelper
operator|.
name|getTestDir
argument_list|()
argument_list|,
literal|"home"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|homeDir
operator|.
name|mkdir
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|homeDir
argument_list|,
literal|"log"
argument_list|)
operator|.
name|mkdir
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|homeDir
argument_list|,
literal|"temp"
argument_list|)
operator|.
name|mkdir
argument_list|()
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"server.services"
argument_list|,
name|TestService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Server
name|server
init|=
operator|new
name|Server
argument_list|(
literal|"server"
argument_list|,
name|homeDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|server
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestException
argument_list|(
name|exception
operator|=
name|ServerException
operator|.
name|class
argument_list|,
name|msgRegExp
operator|=
literal|"S02.*"
argument_list|)
annotation|@
name|TestDir
DECL|method|initConfigDirNotDir ()
specifier|public
name|void
name|initConfigDirNotDir
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|homeDir
init|=
operator|new
name|File
argument_list|(
name|TestDirHelper
operator|.
name|getTestDir
argument_list|()
argument_list|,
literal|"home"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|homeDir
operator|.
name|mkdir
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|homeDir
argument_list|,
literal|"log"
argument_list|)
operator|.
name|mkdir
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|homeDir
argument_list|,
literal|"temp"
argument_list|)
operator|.
name|mkdir
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|configDir
init|=
operator|new
name|File
argument_list|(
name|homeDir
argument_list|,
literal|"conf"
argument_list|)
decl_stmt|;
operator|new
name|FileOutputStream
argument_list|(
name|configDir
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"server.services"
argument_list|,
name|TestService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Server
name|server
init|=
operator|new
name|Server
argument_list|(
literal|"server"
argument_list|,
name|homeDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|server
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestException
argument_list|(
name|exception
operator|=
name|ServerException
operator|.
name|class
argument_list|,
name|msgRegExp
operator|=
literal|"S01.*"
argument_list|)
annotation|@
name|TestDir
DECL|method|initNoLogDir ()
specifier|public
name|void
name|initNoLogDir
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|homeDir
init|=
operator|new
name|File
argument_list|(
name|TestDirHelper
operator|.
name|getTestDir
argument_list|()
argument_list|,
literal|"home"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|homeDir
operator|.
name|mkdir
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|homeDir
argument_list|,
literal|"conf"
argument_list|)
operator|.
name|mkdir
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|homeDir
argument_list|,
literal|"temp"
argument_list|)
operator|.
name|mkdir
argument_list|()
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"server.services"
argument_list|,
name|TestService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Server
name|server
init|=
operator|new
name|Server
argument_list|(
literal|"server"
argument_list|,
name|homeDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|server
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestException
argument_list|(
name|exception
operator|=
name|ServerException
operator|.
name|class
argument_list|,
name|msgRegExp
operator|=
literal|"S02.*"
argument_list|)
annotation|@
name|TestDir
DECL|method|initLogDirNotDir ()
specifier|public
name|void
name|initLogDirNotDir
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|homeDir
init|=
operator|new
name|File
argument_list|(
name|TestDirHelper
operator|.
name|getTestDir
argument_list|()
argument_list|,
literal|"home"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|homeDir
operator|.
name|mkdir
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|homeDir
argument_list|,
literal|"conf"
argument_list|)
operator|.
name|mkdir
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|homeDir
argument_list|,
literal|"temp"
argument_list|)
operator|.
name|mkdir
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|logDir
init|=
operator|new
name|File
argument_list|(
name|homeDir
argument_list|,
literal|"log"
argument_list|)
decl_stmt|;
operator|new
name|FileOutputStream
argument_list|(
name|logDir
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"server.services"
argument_list|,
name|TestService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Server
name|server
init|=
operator|new
name|Server
argument_list|(
literal|"server"
argument_list|,
name|homeDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|server
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestException
argument_list|(
name|exception
operator|=
name|ServerException
operator|.
name|class
argument_list|,
name|msgRegExp
operator|=
literal|"S01.*"
argument_list|)
annotation|@
name|TestDir
DECL|method|initNoTempDir ()
specifier|public
name|void
name|initNoTempDir
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|homeDir
init|=
operator|new
name|File
argument_list|(
name|TestDirHelper
operator|.
name|getTestDir
argument_list|()
argument_list|,
literal|"home"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|homeDir
operator|.
name|mkdir
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|homeDir
argument_list|,
literal|"conf"
argument_list|)
operator|.
name|mkdir
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|homeDir
argument_list|,
literal|"log"
argument_list|)
operator|.
name|mkdir
argument_list|()
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"server.services"
argument_list|,
name|TestService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Server
name|server
init|=
operator|new
name|Server
argument_list|(
literal|"server"
argument_list|,
name|homeDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|server
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestException
argument_list|(
name|exception
operator|=
name|ServerException
operator|.
name|class
argument_list|,
name|msgRegExp
operator|=
literal|"S02.*"
argument_list|)
annotation|@
name|TestDir
DECL|method|initTempDirNotDir ()
specifier|public
name|void
name|initTempDirNotDir
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|homeDir
init|=
operator|new
name|File
argument_list|(
name|TestDirHelper
operator|.
name|getTestDir
argument_list|()
argument_list|,
literal|"home"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|homeDir
operator|.
name|mkdir
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|homeDir
argument_list|,
literal|"conf"
argument_list|)
operator|.
name|mkdir
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|homeDir
argument_list|,
literal|"log"
argument_list|)
operator|.
name|mkdir
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|tempDir
init|=
operator|new
name|File
argument_list|(
name|homeDir
argument_list|,
literal|"temp"
argument_list|)
decl_stmt|;
operator|new
name|FileOutputStream
argument_list|(
name|tempDir
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"server.services"
argument_list|,
name|TestService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Server
name|server
init|=
operator|new
name|Server
argument_list|(
literal|"server"
argument_list|,
name|homeDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|server
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestException
argument_list|(
name|exception
operator|=
name|ServerException
operator|.
name|class
argument_list|,
name|msgRegExp
operator|=
literal|"S05.*"
argument_list|)
annotation|@
name|TestDir
DECL|method|siteFileNotAFile ()
specifier|public
name|void
name|siteFileNotAFile
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|homeDir
init|=
name|TestDirHelper
operator|.
name|getTestDir
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|File
name|siteFile
init|=
operator|new
name|File
argument_list|(
name|homeDir
argument_list|,
literal|"server-site.xml"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|siteFile
operator|.
name|mkdir
argument_list|()
argument_list|)
expr_stmt|;
name|Server
name|server
init|=
operator|new
name|Server
argument_list|(
literal|"server"
argument_list|,
name|homeDir
argument_list|,
name|homeDir
argument_list|,
name|homeDir
argument_list|,
name|homeDir
argument_list|)
decl_stmt|;
name|server
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
DECL|method|createServer (Configuration conf)
specifier|private
name|Server
name|createServer
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
operator|new
name|Server
argument_list|(
literal|"server"
argument_list|,
name|TestDirHelper
operator|.
name|getTestDir
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|TestDirHelper
operator|.
name|getTestDir
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|TestDirHelper
operator|.
name|getTestDir
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|TestDirHelper
operator|.
name|getTestDir
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|conf
argument_list|)
return|;
block|}
annotation|@
name|Test
annotation|@
name|TestDir
DECL|method|log4jFile ()
specifier|public
name|void
name|log4jFile
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|is
init|=
name|Server
operator|.
name|getResource
argument_list|(
literal|"default-log4j.properties"
argument_list|)
decl_stmt|;
name|OutputStream
name|os
init|=
operator|new
name|FileOutputStream
argument_list|(
operator|new
name|File
argument_list|(
name|TestDirHelper
operator|.
name|getTestDir
argument_list|()
argument_list|,
literal|"server-log4j.properties"
argument_list|)
argument_list|)
decl_stmt|;
name|IOUtils
operator|.
name|copyBytes
argument_list|(
name|is
argument_list|,
name|os
argument_list|,
literal|1024
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|Server
name|server
init|=
name|createServer
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|server
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
DECL|class|LifeCycleService
specifier|public
specifier|static
class|class
name|LifeCycleService
extends|extends
name|BaseService
block|{
DECL|method|LifeCycleService ()
specifier|public
name|LifeCycleService
parameter_list|()
block|{
name|super
argument_list|(
literal|"lifecycle"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|init ()
specifier|protected
name|void
name|init
parameter_list|()
throws|throws
name|ServiceException
block|{
name|assertEquals
argument_list|(
name|getServer
argument_list|()
operator|.
name|getStatus
argument_list|()
argument_list|,
name|Server
operator|.
name|Status
operator|.
name|BOOTING
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|destroy ()
specifier|public
name|void
name|destroy
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|getServer
argument_list|()
operator|.
name|getStatus
argument_list|()
argument_list|,
name|Server
operator|.
name|Status
operator|.
name|SHUTTING_DOWN
argument_list|)
expr_stmt|;
name|super
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getInterface ()
specifier|public
name|Class
name|getInterface
parameter_list|()
block|{
return|return
name|LifeCycleService
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|Test
annotation|@
name|TestDir
DECL|method|lifeCycle ()
specifier|public
name|void
name|lifeCycle
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"server.services"
argument_list|,
name|LifeCycleService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Server
name|server
init|=
name|createServer
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|server
operator|.
name|getStatus
argument_list|()
argument_list|,
name|Server
operator|.
name|Status
operator|.
name|UNDEF
argument_list|)
expr_stmt|;
name|server
operator|.
name|init
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|server
operator|.
name|get
argument_list|(
name|LifeCycleService
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|server
operator|.
name|getStatus
argument_list|()
argument_list|,
name|Server
operator|.
name|Status
operator|.
name|NORMAL
argument_list|)
expr_stmt|;
name|server
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|server
operator|.
name|getStatus
argument_list|()
argument_list|,
name|Server
operator|.
name|Status
operator|.
name|SHUTDOWN
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestDir
DECL|method|startWithStatusNotNormal ()
specifier|public
name|void
name|startWithStatusNotNormal
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"server.startup.status"
argument_list|,
literal|"ADMIN"
argument_list|)
expr_stmt|;
name|Server
name|server
init|=
name|createServer
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|server
operator|.
name|init
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|server
operator|.
name|getStatus
argument_list|()
argument_list|,
name|Server
operator|.
name|Status
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
name|server
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
annotation|@
name|TestDir
DECL|method|nonSeteableStatus ()
specifier|public
name|void
name|nonSeteableStatus
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|Server
name|server
init|=
name|createServer
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|server
operator|.
name|init
argument_list|()
expr_stmt|;
name|server
operator|.
name|setStatus
argument_list|(
name|Server
operator|.
name|Status
operator|.
name|SHUTDOWN
argument_list|)
expr_stmt|;
block|}
DECL|class|TestService
specifier|public
specifier|static
class|class
name|TestService
implements|implements
name|Service
block|{
DECL|field|LIFECYCLE
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|LIFECYCLE
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|init (Server server)
specifier|public
name|void
name|init
parameter_list|(
name|Server
name|server
parameter_list|)
throws|throws
name|ServiceException
block|{
name|LIFECYCLE
operator|.
name|add
argument_list|(
literal|"init"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|postInit ()
specifier|public
name|void
name|postInit
parameter_list|()
throws|throws
name|ServiceException
block|{
name|LIFECYCLE
operator|.
name|add
argument_list|(
literal|"postInit"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|destroy ()
specifier|public
name|void
name|destroy
parameter_list|()
block|{
name|LIFECYCLE
operator|.
name|add
argument_list|(
literal|"destroy"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getServiceDependencies ()
specifier|public
name|Class
index|[]
name|getServiceDependencies
parameter_list|()
block|{
return|return
operator|new
name|Class
index|[
literal|0
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|getInterface ()
specifier|public
name|Class
name|getInterface
parameter_list|()
block|{
return|return
name|TestService
operator|.
name|class
return|;
block|}
annotation|@
name|Override
DECL|method|serverStatusChange (Server.Status oldStatus, Server.Status newStatus)
specifier|public
name|void
name|serverStatusChange
parameter_list|(
name|Server
operator|.
name|Status
name|oldStatus
parameter_list|,
name|Server
operator|.
name|Status
name|newStatus
parameter_list|)
throws|throws
name|ServiceException
block|{
name|LIFECYCLE
operator|.
name|add
argument_list|(
literal|"serverStatusChange"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|TestServiceExceptionOnStatusChange
specifier|public
specifier|static
class|class
name|TestServiceExceptionOnStatusChange
extends|extends
name|TestService
block|{
annotation|@
name|Override
DECL|method|serverStatusChange (Server.Status oldStatus, Server.Status newStatus)
specifier|public
name|void
name|serverStatusChange
parameter_list|(
name|Server
operator|.
name|Status
name|oldStatus
parameter_list|,
name|Server
operator|.
name|Status
name|newStatus
parameter_list|)
throws|throws
name|ServiceException
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Test
annotation|@
name|TestDir
DECL|method|changeStatus ()
specifier|public
name|void
name|changeStatus
parameter_list|()
throws|throws
name|Exception
block|{
name|TestService
operator|.
name|LIFECYCLE
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"server.services"
argument_list|,
name|TestService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Server
name|server
init|=
name|createServer
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|server
operator|.
name|init
argument_list|()
expr_stmt|;
name|server
operator|.
name|setStatus
argument_list|(
name|Server
operator|.
name|Status
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|TestService
operator|.
name|LIFECYCLE
operator|.
name|contains
argument_list|(
literal|"serverStatusChange"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestException
argument_list|(
name|exception
operator|=
name|ServerException
operator|.
name|class
argument_list|,
name|msgRegExp
operator|=
literal|"S11.*"
argument_list|)
annotation|@
name|TestDir
DECL|method|changeStatusServiceException ()
specifier|public
name|void
name|changeStatusServiceException
parameter_list|()
throws|throws
name|Exception
block|{
name|TestService
operator|.
name|LIFECYCLE
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"server.services"
argument_list|,
name|TestServiceExceptionOnStatusChange
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Server
name|server
init|=
name|createServer
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|server
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestDir
DECL|method|setSameStatus ()
specifier|public
name|void
name|setSameStatus
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"server.services"
argument_list|,
name|TestService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Server
name|server
init|=
name|createServer
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|server
operator|.
name|init
argument_list|()
expr_stmt|;
name|TestService
operator|.
name|LIFECYCLE
operator|.
name|clear
argument_list|()
expr_stmt|;
name|server
operator|.
name|setStatus
argument_list|(
name|server
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|TestService
operator|.
name|LIFECYCLE
operator|.
name|contains
argument_list|(
literal|"serverStatusChange"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestDir
DECL|method|serviceLifeCycle ()
specifier|public
name|void
name|serviceLifeCycle
parameter_list|()
throws|throws
name|Exception
block|{
name|TestService
operator|.
name|LIFECYCLE
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"server.services"
argument_list|,
name|TestService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Server
name|server
init|=
name|createServer
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|server
operator|.
name|init
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|server
operator|.
name|get
argument_list|(
name|TestService
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|server
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|TestService
operator|.
name|LIFECYCLE
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"init"
argument_list|,
literal|"postInit"
argument_list|,
literal|"serverStatusChange"
argument_list|,
literal|"destroy"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestDir
DECL|method|loadingDefaultConfig ()
specifier|public
name|void
name|loadingDefaultConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dir
init|=
name|TestDirHelper
operator|.
name|getTestDir
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|Server
name|server
init|=
operator|new
name|Server
argument_list|(
literal|"testserver"
argument_list|,
name|dir
argument_list|,
name|dir
argument_list|,
name|dir
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|server
operator|.
name|init
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|server
operator|.
name|getConfig
argument_list|()
operator|.
name|get
argument_list|(
literal|"testserver.a"
argument_list|)
argument_list|,
literal|"default"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestDir
DECL|method|loadingSiteConfig ()
specifier|public
name|void
name|loadingSiteConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dir
init|=
name|TestDirHelper
operator|.
name|getTestDir
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|File
name|configFile
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|,
literal|"testserver-site.xml"
argument_list|)
decl_stmt|;
name|Writer
name|w
init|=
operator|new
name|FileWriter
argument_list|(
name|configFile
argument_list|)
decl_stmt|;
name|w
operator|.
name|write
argument_list|(
literal|"<configuration><property><name>testserver.a</name><value>site</value></property></configuration>"
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|Server
name|server
init|=
operator|new
name|Server
argument_list|(
literal|"testserver"
argument_list|,
name|dir
argument_list|,
name|dir
argument_list|,
name|dir
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|server
operator|.
name|init
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|server
operator|.
name|getConfig
argument_list|()
operator|.
name|get
argument_list|(
literal|"testserver.a"
argument_list|)
argument_list|,
literal|"site"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestDir
DECL|method|loadingSysPropConfig ()
specifier|public
name|void
name|loadingSysPropConfig
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"testserver.a"
argument_list|,
literal|"sysprop"
argument_list|)
expr_stmt|;
name|String
name|dir
init|=
name|TestDirHelper
operator|.
name|getTestDir
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|File
name|configFile
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|,
literal|"testserver-site.xml"
argument_list|)
decl_stmt|;
name|Writer
name|w
init|=
operator|new
name|FileWriter
argument_list|(
name|configFile
argument_list|)
decl_stmt|;
name|w
operator|.
name|write
argument_list|(
literal|"<configuration><property><name>testserver.a</name><value>site</value></property></configuration>"
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|Server
name|server
init|=
operator|new
name|Server
argument_list|(
literal|"testserver"
argument_list|,
name|dir
argument_list|,
name|dir
argument_list|,
name|dir
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|server
operator|.
name|init
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|server
operator|.
name|getConfig
argument_list|()
operator|.
name|get
argument_list|(
literal|"testserver.a"
argument_list|)
argument_list|,
literal|"sysprop"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|getProperties
argument_list|()
operator|.
name|remove
argument_list|(
literal|"testserver.a"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
annotation|@
name|TestDir
DECL|method|illegalState1 ()
specifier|public
name|void
name|illegalState1
parameter_list|()
throws|throws
name|Exception
block|{
name|Server
name|server
init|=
operator|new
name|Server
argument_list|(
literal|"server"
argument_list|,
name|TestDirHelper
operator|.
name|getTestDir
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|server
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
annotation|@
name|TestDir
DECL|method|illegalState2 ()
specifier|public
name|void
name|illegalState2
parameter_list|()
throws|throws
name|Exception
block|{
name|Server
name|server
init|=
operator|new
name|Server
argument_list|(
literal|"server"
argument_list|,
name|TestDirHelper
operator|.
name|getTestDir
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|server
operator|.
name|get
argument_list|(
name|Object
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
annotation|@
name|TestDir
DECL|method|illegalState3 ()
specifier|public
name|void
name|illegalState3
parameter_list|()
throws|throws
name|Exception
block|{
name|Server
name|server
init|=
operator|new
name|Server
argument_list|(
literal|"server"
argument_list|,
name|TestDirHelper
operator|.
name|getTestDir
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|server
operator|.
name|setService
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
annotation|@
name|TestDir
DECL|method|illegalState4 ()
specifier|public
name|void
name|illegalState4
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dir
init|=
name|TestDirHelper
operator|.
name|getTestDir
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|Server
name|server
init|=
operator|new
name|Server
argument_list|(
literal|"server"
argument_list|,
name|dir
argument_list|,
name|dir
argument_list|,
name|dir
argument_list|,
name|dir
argument_list|,
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|server
operator|.
name|init
argument_list|()
expr_stmt|;
name|server
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
DECL|field|ORDER
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|ORDER
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|class|MyService
specifier|public
specifier|abstract
specifier|static
class|class
name|MyService
implements|implements
name|Service
implements|,
name|XException
operator|.
name|ERROR
block|{
DECL|field|id
specifier|private
name|String
name|id
decl_stmt|;
DECL|field|serviceInterface
specifier|private
name|Class
name|serviceInterface
decl_stmt|;
DECL|field|dependencies
specifier|private
name|Class
index|[]
name|dependencies
decl_stmt|;
DECL|field|failOnInit
specifier|private
name|boolean
name|failOnInit
decl_stmt|;
DECL|field|failOnDestroy
specifier|private
name|boolean
name|failOnDestroy
decl_stmt|;
DECL|method|MyService (String id, Class serviceInterface, Class[] dependencies, boolean failOnInit, boolean failOnDestroy)
specifier|protected
name|MyService
parameter_list|(
name|String
name|id
parameter_list|,
name|Class
name|serviceInterface
parameter_list|,
name|Class
index|[]
name|dependencies
parameter_list|,
name|boolean
name|failOnInit
parameter_list|,
name|boolean
name|failOnDestroy
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|serviceInterface
operator|=
name|serviceInterface
expr_stmt|;
name|this
operator|.
name|dependencies
operator|=
name|dependencies
expr_stmt|;
name|this
operator|.
name|failOnInit
operator|=
name|failOnInit
expr_stmt|;
name|this
operator|.
name|failOnDestroy
operator|=
name|failOnDestroy
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|init (Server server)
specifier|public
name|void
name|init
parameter_list|(
name|Server
name|server
parameter_list|)
throws|throws
name|ServiceException
block|{
name|ORDER
operator|.
name|add
argument_list|(
name|id
operator|+
literal|".init"
argument_list|)
expr_stmt|;
if|if
condition|(
name|failOnInit
condition|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|this
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|postInit ()
specifier|public
name|void
name|postInit
parameter_list|()
throws|throws
name|ServiceException
block|{
name|ORDER
operator|.
name|add
argument_list|(
name|id
operator|+
literal|".postInit"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getTemplate ()
specifier|public
name|String
name|getTemplate
parameter_list|()
block|{
return|return
literal|""
return|;
block|}
annotation|@
name|Override
DECL|method|destroy ()
specifier|public
name|void
name|destroy
parameter_list|()
block|{
name|ORDER
operator|.
name|add
argument_list|(
name|id
operator|+
literal|".destroy"
argument_list|)
expr_stmt|;
if|if
condition|(
name|failOnDestroy
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getServiceDependencies ()
specifier|public
name|Class
index|[]
name|getServiceDependencies
parameter_list|()
block|{
return|return
name|dependencies
return|;
block|}
annotation|@
name|Override
DECL|method|getInterface ()
specifier|public
name|Class
name|getInterface
parameter_list|()
block|{
return|return
name|serviceInterface
return|;
block|}
annotation|@
name|Override
DECL|method|serverStatusChange (Server.Status oldStatus, Server.Status newStatus)
specifier|public
name|void
name|serverStatusChange
parameter_list|(
name|Server
operator|.
name|Status
name|oldStatus
parameter_list|,
name|Server
operator|.
name|Status
name|newStatus
parameter_list|)
throws|throws
name|ServiceException
block|{     }
block|}
DECL|class|MyService1
specifier|public
specifier|static
class|class
name|MyService1
extends|extends
name|MyService
block|{
DECL|method|MyService1 ()
specifier|public
name|MyService1
parameter_list|()
block|{
name|super
argument_list|(
literal|"s1"
argument_list|,
name|MyService1
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|MyService1 (String id, Class serviceInterface, Class[] dependencies, boolean failOnInit, boolean failOnDestroy)
specifier|protected
name|MyService1
parameter_list|(
name|String
name|id
parameter_list|,
name|Class
name|serviceInterface
parameter_list|,
name|Class
index|[]
name|dependencies
parameter_list|,
name|boolean
name|failOnInit
parameter_list|,
name|boolean
name|failOnDestroy
parameter_list|)
block|{
name|super
argument_list|(
name|id
argument_list|,
name|serviceInterface
argument_list|,
name|dependencies
argument_list|,
name|failOnInit
argument_list|,
name|failOnDestroy
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|MyService2
specifier|public
specifier|static
class|class
name|MyService2
extends|extends
name|MyService
block|{
DECL|method|MyService2 ()
specifier|public
name|MyService2
parameter_list|()
block|{
name|super
argument_list|(
literal|"s2"
argument_list|,
name|MyService2
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|MyService3
specifier|public
specifier|static
class|class
name|MyService3
extends|extends
name|MyService
block|{
DECL|method|MyService3 ()
specifier|public
name|MyService3
parameter_list|()
block|{
name|super
argument_list|(
literal|"s3"
argument_list|,
name|MyService3
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|MyService1a
specifier|public
specifier|static
class|class
name|MyService1a
extends|extends
name|MyService1
block|{
DECL|method|MyService1a ()
specifier|public
name|MyService1a
parameter_list|()
block|{
name|super
argument_list|(
literal|"s1a"
argument_list|,
name|MyService1
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|MyService4
specifier|public
specifier|static
class|class
name|MyService4
extends|extends
name|MyService1
block|{
DECL|method|MyService4 ()
specifier|public
name|MyService4
parameter_list|()
block|{
name|super
argument_list|(
literal|"s4a"
argument_list|,
name|String
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|MyService5
specifier|public
specifier|static
class|class
name|MyService5
extends|extends
name|MyService
block|{
DECL|method|MyService5 ()
specifier|public
name|MyService5
parameter_list|()
block|{
name|super
argument_list|(
literal|"s5"
argument_list|,
name|MyService5
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|MyService5 (String id, Class serviceInterface, Class[] dependencies, boolean failOnInit, boolean failOnDestroy)
specifier|protected
name|MyService5
parameter_list|(
name|String
name|id
parameter_list|,
name|Class
name|serviceInterface
parameter_list|,
name|Class
index|[]
name|dependencies
parameter_list|,
name|boolean
name|failOnInit
parameter_list|,
name|boolean
name|failOnDestroy
parameter_list|)
block|{
name|super
argument_list|(
name|id
argument_list|,
name|serviceInterface
argument_list|,
name|dependencies
argument_list|,
name|failOnInit
argument_list|,
name|failOnDestroy
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|MyService5a
specifier|public
specifier|static
class|class
name|MyService5a
extends|extends
name|MyService5
block|{
DECL|method|MyService5a ()
specifier|public
name|MyService5a
parameter_list|()
block|{
name|super
argument_list|(
literal|"s5a"
argument_list|,
name|MyService5
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|MyService6
specifier|public
specifier|static
class|class
name|MyService6
extends|extends
name|MyService
block|{
DECL|method|MyService6 ()
specifier|public
name|MyService6
parameter_list|()
block|{
name|super
argument_list|(
literal|"s6"
argument_list|,
name|MyService6
operator|.
name|class
argument_list|,
operator|new
name|Class
index|[]
block|{
name|MyService1
operator|.
name|class
block|}
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|MyService7
specifier|public
specifier|static
class|class
name|MyService7
extends|extends
name|MyService
block|{
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"UnusedParameters"
block|}
argument_list|)
DECL|method|MyService7 (String foo)
specifier|public
name|MyService7
parameter_list|(
name|String
name|foo
parameter_list|)
block|{
name|super
argument_list|(
literal|"s6"
argument_list|,
name|MyService7
operator|.
name|class
argument_list|,
operator|new
name|Class
index|[]
block|{
name|MyService1
operator|.
name|class
block|}
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
annotation|@
name|TestException
argument_list|(
name|exception
operator|=
name|ServerException
operator|.
name|class
argument_list|,
name|msgRegExp
operator|=
literal|"S08.*"
argument_list|)
annotation|@
name|TestDir
DECL|method|invalidSservice ()
specifier|public
name|void
name|invalidSservice
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dir
init|=
name|TestDirHelper
operator|.
name|getTestDir
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"server.services"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|Server
name|server
init|=
operator|new
name|Server
argument_list|(
literal|"server"
argument_list|,
name|dir
argument_list|,
name|dir
argument_list|,
name|dir
argument_list|,
name|dir
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|server
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestException
argument_list|(
name|exception
operator|=
name|ServerException
operator|.
name|class
argument_list|,
name|msgRegExp
operator|=
literal|"S07.*"
argument_list|)
annotation|@
name|TestDir
DECL|method|serviceWithNoDefaultConstructor ()
specifier|public
name|void
name|serviceWithNoDefaultConstructor
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dir
init|=
name|TestDirHelper
operator|.
name|getTestDir
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"server.services"
argument_list|,
name|MyService7
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Server
name|server
init|=
operator|new
name|Server
argument_list|(
literal|"server"
argument_list|,
name|dir
argument_list|,
name|dir
argument_list|,
name|dir
argument_list|,
name|dir
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|server
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestException
argument_list|(
name|exception
operator|=
name|ServerException
operator|.
name|class
argument_list|,
name|msgRegExp
operator|=
literal|"S04.*"
argument_list|)
annotation|@
name|TestDir
DECL|method|serviceNotImplementingServiceInterface ()
specifier|public
name|void
name|serviceNotImplementingServiceInterface
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dir
init|=
name|TestDirHelper
operator|.
name|getTestDir
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"server.services"
argument_list|,
name|MyService4
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Server
name|server
init|=
operator|new
name|Server
argument_list|(
literal|"server"
argument_list|,
name|dir
argument_list|,
name|dir
argument_list|,
name|dir
argument_list|,
name|dir
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|server
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestException
argument_list|(
name|exception
operator|=
name|ServerException
operator|.
name|class
argument_list|,
name|msgRegExp
operator|=
literal|"S10.*"
argument_list|)
annotation|@
name|TestDir
DECL|method|serviceWithMissingDependency ()
specifier|public
name|void
name|serviceWithMissingDependency
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dir
init|=
name|TestDirHelper
operator|.
name|getTestDir
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|String
name|services
init|=
name|StringUtils
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|MyService3
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|MyService6
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"server.services"
argument_list|,
name|services
argument_list|)
expr_stmt|;
name|Server
name|server
init|=
operator|new
name|Server
argument_list|(
literal|"server"
argument_list|,
name|dir
argument_list|,
name|dir
argument_list|,
name|dir
argument_list|,
name|dir
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|server
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestDir
DECL|method|services ()
specifier|public
name|void
name|services
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dir
init|=
name|TestDirHelper
operator|.
name|getTestDir
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|Configuration
name|conf
decl_stmt|;
name|Server
name|server
decl_stmt|;
comment|// no services
name|ORDER
operator|.
name|clear
argument_list|()
expr_stmt|;
name|conf
operator|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|server
operator|=
operator|new
name|Server
argument_list|(
literal|"server"
argument_list|,
name|dir
argument_list|,
name|dir
argument_list|,
name|dir
argument_list|,
name|dir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|server
operator|.
name|init
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ORDER
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// 2 services init/destroy
name|ORDER
operator|.
name|clear
argument_list|()
expr_stmt|;
name|String
name|services
init|=
name|StringUtils
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|MyService1
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|MyService3
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|conf
operator|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"server.services"
argument_list|,
name|services
argument_list|)
expr_stmt|;
name|server
operator|=
operator|new
name|Server
argument_list|(
literal|"server"
argument_list|,
name|dir
argument_list|,
name|dir
argument_list|,
name|dir
argument_list|,
name|dir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|server
operator|.
name|init
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|server
operator|.
name|get
argument_list|(
name|MyService1
operator|.
name|class
argument_list|)
operator|.
name|getInterface
argument_list|()
argument_list|,
name|MyService1
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|server
operator|.
name|get
argument_list|(
name|MyService3
operator|.
name|class
argument_list|)
operator|.
name|getInterface
argument_list|()
argument_list|,
name|MyService3
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ORDER
operator|.
name|size
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ORDER
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"s1.init"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ORDER
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"s3.init"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ORDER
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|"s1.postInit"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ORDER
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
literal|"s3.postInit"
argument_list|)
expr_stmt|;
name|server
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ORDER
operator|.
name|size
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ORDER
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|,
literal|"s3.destroy"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ORDER
operator|.
name|get
argument_list|(
literal|5
argument_list|)
argument_list|,
literal|"s1.destroy"
argument_list|)
expr_stmt|;
comment|// 3 services, 2nd one fails on init
name|ORDER
operator|.
name|clear
argument_list|()
expr_stmt|;
name|services
operator|=
name|StringUtils
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|MyService1
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|MyService2
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|MyService3
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"server.services"
argument_list|,
name|services
argument_list|)
expr_stmt|;
name|server
operator|=
operator|new
name|Server
argument_list|(
literal|"server"
argument_list|,
name|dir
argument_list|,
name|dir
argument_list|,
name|dir
argument_list|,
name|dir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
name|server
operator|.
name|init
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServerException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|MyService2
operator|.
name|class
argument_list|,
name|ex
operator|.
name|getError
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|ORDER
operator|.
name|size
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ORDER
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"s1.init"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ORDER
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"s2.init"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ORDER
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|"s1.destroy"
argument_list|)
expr_stmt|;
comment|// 2 services one fails on destroy
name|ORDER
operator|.
name|clear
argument_list|()
expr_stmt|;
name|services
operator|=
name|StringUtils
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|MyService1
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|MyService5
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"server.services"
argument_list|,
name|services
argument_list|)
expr_stmt|;
name|server
operator|=
operator|new
name|Server
argument_list|(
literal|"server"
argument_list|,
name|dir
argument_list|,
name|dir
argument_list|,
name|dir
argument_list|,
name|dir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|server
operator|.
name|init
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ORDER
operator|.
name|size
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ORDER
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"s1.init"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ORDER
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"s5.init"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ORDER
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|"s1.postInit"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ORDER
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
literal|"s5.postInit"
argument_list|)
expr_stmt|;
name|server
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ORDER
operator|.
name|size
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ORDER
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|,
literal|"s5.destroy"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ORDER
operator|.
name|get
argument_list|(
literal|5
argument_list|)
argument_list|,
literal|"s1.destroy"
argument_list|)
expr_stmt|;
comment|// service override via ext
name|ORDER
operator|.
name|clear
argument_list|()
expr_stmt|;
name|services
operator|=
name|StringUtils
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|MyService1
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|MyService3
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|servicesExt
init|=
name|StringUtils
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|MyService1a
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|conf
operator|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"server.services"
argument_list|,
name|services
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"server.services.ext"
argument_list|,
name|servicesExt
argument_list|)
expr_stmt|;
name|server
operator|=
operator|new
name|Server
argument_list|(
literal|"server"
argument_list|,
name|dir
argument_list|,
name|dir
argument_list|,
name|dir
argument_list|,
name|dir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|server
operator|.
name|init
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|server
operator|.
name|get
argument_list|(
name|MyService1
operator|.
name|class
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|,
name|MyService1a
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ORDER
operator|.
name|size
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ORDER
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"s1a.init"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ORDER
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"s3.init"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ORDER
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|"s1a.postInit"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ORDER
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
literal|"s3.postInit"
argument_list|)
expr_stmt|;
name|server
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ORDER
operator|.
name|size
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ORDER
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|,
literal|"s3.destroy"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ORDER
operator|.
name|get
argument_list|(
literal|5
argument_list|)
argument_list|,
literal|"s1a.destroy"
argument_list|)
expr_stmt|;
comment|// service override via setService
name|ORDER
operator|.
name|clear
argument_list|()
expr_stmt|;
name|services
operator|=
name|StringUtils
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|MyService1
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|MyService3
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"server.services"
argument_list|,
name|services
argument_list|)
expr_stmt|;
name|server
operator|=
operator|new
name|Server
argument_list|(
literal|"server"
argument_list|,
name|dir
argument_list|,
name|dir
argument_list|,
name|dir
argument_list|,
name|dir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|server
operator|.
name|init
argument_list|()
expr_stmt|;
name|server
operator|.
name|setService
argument_list|(
name|MyService1a
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ORDER
operator|.
name|size
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ORDER
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|,
literal|"s1.destroy"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ORDER
operator|.
name|get
argument_list|(
literal|5
argument_list|)
argument_list|,
literal|"s1a.init"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|server
operator|.
name|get
argument_list|(
name|MyService1
operator|.
name|class
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|,
name|MyService1a
operator|.
name|class
argument_list|)
expr_stmt|;
name|server
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ORDER
operator|.
name|size
argument_list|()
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ORDER
operator|.
name|get
argument_list|(
literal|6
argument_list|)
argument_list|,
literal|"s3.destroy"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ORDER
operator|.
name|get
argument_list|(
literal|7
argument_list|)
argument_list|,
literal|"s1a.destroy"
argument_list|)
expr_stmt|;
comment|// service add via setService
name|ORDER
operator|.
name|clear
argument_list|()
expr_stmt|;
name|services
operator|=
name|StringUtils
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|MyService1
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|MyService3
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"server.services"
argument_list|,
name|services
argument_list|)
expr_stmt|;
name|server
operator|=
operator|new
name|Server
argument_list|(
literal|"server"
argument_list|,
name|dir
argument_list|,
name|dir
argument_list|,
name|dir
argument_list|,
name|dir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|server
operator|.
name|init
argument_list|()
expr_stmt|;
name|server
operator|.
name|setService
argument_list|(
name|MyService5
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ORDER
operator|.
name|size
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ORDER
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|,
literal|"s5.init"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|server
operator|.
name|get
argument_list|(
name|MyService5
operator|.
name|class
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|,
name|MyService5
operator|.
name|class
argument_list|)
expr_stmt|;
name|server
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ORDER
operator|.
name|size
argument_list|()
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ORDER
operator|.
name|get
argument_list|(
literal|5
argument_list|)
argument_list|,
literal|"s5.destroy"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ORDER
operator|.
name|get
argument_list|(
literal|6
argument_list|)
argument_list|,
literal|"s3.destroy"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ORDER
operator|.
name|get
argument_list|(
literal|7
argument_list|)
argument_list|,
literal|"s1.destroy"
argument_list|)
expr_stmt|;
comment|// service add via setService exception
name|ORDER
operator|.
name|clear
argument_list|()
expr_stmt|;
name|services
operator|=
name|StringUtils
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|MyService1
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|MyService3
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"server.services"
argument_list|,
name|services
argument_list|)
expr_stmt|;
name|server
operator|=
operator|new
name|Server
argument_list|(
literal|"server"
argument_list|,
name|dir
argument_list|,
name|dir
argument_list|,
name|dir
argument_list|,
name|dir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|server
operator|.
name|init
argument_list|()
expr_stmt|;
try|try
block|{
name|server
operator|.
name|setService
argument_list|(
name|MyService7
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServerException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|ServerException
operator|.
name|ERROR
operator|.
name|S09
argument_list|,
name|ex
operator|.
name|getError
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|ORDER
operator|.
name|size
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ORDER
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|,
literal|"s3.destroy"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ORDER
operator|.
name|get
argument_list|(
literal|5
argument_list|)
argument_list|,
literal|"s1.destroy"
argument_list|)
expr_stmt|;
comment|// service with dependency
name|ORDER
operator|.
name|clear
argument_list|()
expr_stmt|;
name|services
operator|=
name|StringUtils
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|MyService1
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|MyService6
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"server.services"
argument_list|,
name|services
argument_list|)
expr_stmt|;
name|server
operator|=
operator|new
name|Server
argument_list|(
literal|"server"
argument_list|,
name|dir
argument_list|,
name|dir
argument_list|,
name|dir
argument_list|,
name|dir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|server
operator|.
name|init
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|server
operator|.
name|get
argument_list|(
name|MyService1
operator|.
name|class
argument_list|)
operator|.
name|getInterface
argument_list|()
argument_list|,
name|MyService1
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|server
operator|.
name|get
argument_list|(
name|MyService6
operator|.
name|class
argument_list|)
operator|.
name|getInterface
argument_list|()
argument_list|,
name|MyService6
operator|.
name|class
argument_list|)
expr_stmt|;
name|server
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

