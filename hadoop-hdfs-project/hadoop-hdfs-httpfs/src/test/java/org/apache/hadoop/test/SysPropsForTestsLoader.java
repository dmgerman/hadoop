begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.test
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|MessageFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_class
DECL|class|SysPropsForTestsLoader
specifier|public
class|class
name|SysPropsForTestsLoader
block|{
DECL|field|TEST_PROPERTIES_PROP
specifier|public
specifier|static
specifier|final
name|String
name|TEST_PROPERTIES_PROP
init|=
literal|"test.properties"
decl_stmt|;
static|static
block|{
try|try
block|{
name|String
name|testFileName
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|TEST_PROPERTIES_PROP
argument_list|,
literal|"test.properties"
argument_list|)
decl_stmt|;
name|File
name|currentDir
init|=
operator|new
name|File
argument_list|(
name|testFileName
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
name|File
name|testFile
init|=
operator|new
name|File
argument_list|(
name|currentDir
argument_list|,
name|testFileName
argument_list|)
decl_stmt|;
while|while
condition|(
name|currentDir
operator|!=
literal|null
operator|&&
operator|!
name|testFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|testFile
operator|=
operator|new
name|File
argument_list|(
name|testFile
operator|.
name|getAbsoluteFile
argument_list|()
operator|.
name|getParentFile
argument_list|()
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|testFileName
argument_list|)
expr_stmt|;
name|currentDir
operator|=
name|currentDir
operator|.
name|getParentFile
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentDir
operator|!=
literal|null
condition|)
block|{
name|testFile
operator|=
operator|new
name|File
argument_list|(
name|currentDir
argument_list|,
name|testFileName
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|testFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|">>> "
operator|+
name|TEST_PROPERTIES_PROP
operator|+
literal|" : "
operator|+
name|testFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|Properties
name|testProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|testProperties
operator|.
name|load
argument_list|(
operator|new
name|FileReader
argument_list|(
name|testFile
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
name|entry
range|:
name|testProperties
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|System
operator|.
name|getProperties
argument_list|()
operator|.
name|containsKey
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|System
operator|.
name|setProperty
argument_list|(
operator|(
name|String
operator|)
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|String
operator|)
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
name|TEST_PROPERTIES_PROP
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"Specified 'test.properties' file does not exist [{0}]"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
name|TEST_PROPERTIES_PROP
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|">>> "
operator|+
name|TEST_PROPERTIES_PROP
operator|+
literal|" :<NONE>"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
DECL|method|init ()
specifier|public
specifier|static
name|void
name|init
parameter_list|()
block|{   }
block|}
end_class

end_unit

