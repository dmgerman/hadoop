begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.lib.server
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|lib
operator|.
name|server
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|HTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_class
DECL|class|TestBaseService
specifier|public
class|class
name|TestBaseService
extends|extends
name|HTestCase
block|{
DECL|class|MyService
specifier|public
specifier|static
class|class
name|MyService
extends|extends
name|BaseService
block|{
DECL|field|INIT
specifier|static
name|Boolean
name|INIT
decl_stmt|;
DECL|method|MyService ()
specifier|public
name|MyService
parameter_list|()
block|{
name|super
argument_list|(
literal|"myservice"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|init ()
specifier|protected
name|void
name|init
parameter_list|()
throws|throws
name|ServiceException
block|{
name|INIT
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getInterface ()
specifier|public
name|Class
name|getInterface
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Test
DECL|method|baseService ()
specifier|public
name|void
name|baseService
parameter_list|()
throws|throws
name|Exception
block|{
name|BaseService
name|service
init|=
operator|new
name|MyService
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|service
operator|.
name|getInterface
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|service
operator|.
name|getPrefix
argument_list|()
argument_list|,
literal|"myservice"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|service
operator|.
name|getServiceDependencies
argument_list|()
operator|.
name|length
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Server
name|server
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Server
operator|.
name|class
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"server.myservice.foo"
argument_list|,
literal|"FOO"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"server.myservice1.bar"
argument_list|,
literal|"BAR"
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|server
operator|.
name|getConfig
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|server
operator|.
name|getPrefixedName
argument_list|(
literal|"myservice.foo"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"server.myservice.foo"
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|server
operator|.
name|getPrefixedName
argument_list|(
literal|"myservice."
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"server.myservice."
argument_list|)
expr_stmt|;
name|service
operator|.
name|init
argument_list|(
name|server
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|service
operator|.
name|getPrefixedName
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|"server.myservice.foo"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|service
operator|.
name|getServiceConfig
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|service
operator|.
name|getServiceConfig
argument_list|()
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|"FOO"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|MyService
operator|.
name|INIT
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

