begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.http.client
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|http
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BlockStoragePolicySpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ContentSummary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileChecksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystemTestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RemoteIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|http
operator|.
name|server
operator|.
name|HttpFSServerWebApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|AppendTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|BlockStoragePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshotException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|WebHdfsFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|HFSTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|HadoopUsersConfTestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|TestDir
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|TestDirHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|TestHdfs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|TestHdfsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|TestJetty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|TestJettyHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|webapp
operator|.
name|WebAppContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|value
operator|=
name|Parameterized
operator|.
name|class
argument_list|)
DECL|class|BaseTestHttpFSWith
specifier|public
specifier|abstract
class|class
name|BaseTestHttpFSWith
extends|extends
name|HFSTestCase
block|{
DECL|method|getProxiedFSTestDir ()
specifier|protected
specifier|abstract
name|Path
name|getProxiedFSTestDir
parameter_list|()
function_decl|;
DECL|method|getProxiedFSURI ()
specifier|protected
specifier|abstract
name|String
name|getProxiedFSURI
parameter_list|()
function_decl|;
DECL|method|getProxiedFSConf ()
specifier|protected
specifier|abstract
name|Configuration
name|getProxiedFSConf
parameter_list|()
function_decl|;
DECL|method|isLocalFS ()
specifier|protected
name|boolean
name|isLocalFS
parameter_list|()
block|{
return|return
name|getProxiedFSURI
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"file://"
argument_list|)
return|;
block|}
DECL|method|createHttpFSServer ()
specifier|private
name|void
name|createHttpFSServer
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|homeDir
init|=
name|TestDirHelper
operator|.
name|getTestDir
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|homeDir
argument_list|,
literal|"conf"
argument_list|)
operator|.
name|mkdir
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|homeDir
argument_list|,
literal|"log"
argument_list|)
operator|.
name|mkdir
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|homeDir
argument_list|,
literal|"temp"
argument_list|)
operator|.
name|mkdir
argument_list|()
argument_list|)
expr_stmt|;
name|HttpFSServerWebApp
operator|.
name|setHomeDirForCurrentThread
argument_list|(
name|homeDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|secretFile
init|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|homeDir
argument_list|,
literal|"conf"
argument_list|)
argument_list|,
literal|"secret"
argument_list|)
decl_stmt|;
name|Writer
name|w
init|=
operator|new
name|FileWriter
argument_list|(
name|secretFile
argument_list|)
decl_stmt|;
name|w
operator|.
name|write
argument_list|(
literal|"secret"
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//FileSystem being served by HttpFS
name|String
name|fsDefaultName
init|=
name|getProxiedFSURI
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|FS_DEFAULT_NAME_KEY
argument_list|,
name|fsDefaultName
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_ACLS_ENABLED_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_XATTRS_ENABLED_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|File
name|hdfsSite
init|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|homeDir
argument_list|,
literal|"conf"
argument_list|)
argument_list|,
literal|"hdfs-site.xml"
argument_list|)
decl_stmt|;
name|OutputStream
name|os
init|=
operator|new
name|FileOutputStream
argument_list|(
name|hdfsSite
argument_list|)
decl_stmt|;
name|conf
operator|.
name|writeXml
argument_list|(
name|os
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//HTTPFS configuration
name|conf
operator|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"httpfs.proxyuser."
operator|+
name|HadoopUsersConfTestHelper
operator|.
name|getHadoopProxyUser
argument_list|()
operator|+
literal|".groups"
argument_list|,
name|HadoopUsersConfTestHelper
operator|.
name|getHadoopProxyUserGroups
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"httpfs.proxyuser."
operator|+
name|HadoopUsersConfTestHelper
operator|.
name|getHadoopProxyUser
argument_list|()
operator|+
literal|".hosts"
argument_list|,
name|HadoopUsersConfTestHelper
operator|.
name|getHadoopProxyUserHosts
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"httpfs.authentication.signature.secret.file"
argument_list|,
name|secretFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|httpfsSite
init|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|homeDir
argument_list|,
literal|"conf"
argument_list|)
argument_list|,
literal|"httpfs-site.xml"
argument_list|)
decl_stmt|;
name|os
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|httpfsSite
argument_list|)
expr_stmt|;
name|conf
operator|.
name|writeXml
argument_list|(
name|os
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
name|ClassLoader
name|cl
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
name|URL
name|url
init|=
name|cl
operator|.
name|getResource
argument_list|(
literal|"webapp"
argument_list|)
decl_stmt|;
name|WebAppContext
name|context
init|=
operator|new
name|WebAppContext
argument_list|(
name|url
operator|.
name|getPath
argument_list|()
argument_list|,
literal|"/webhdfs"
argument_list|)
decl_stmt|;
name|Server
name|server
init|=
name|TestJettyHelper
operator|.
name|getJettyServer
argument_list|()
decl_stmt|;
name|server
operator|.
name|setHandler
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|getFileSystemClass ()
specifier|protected
name|Class
name|getFileSystemClass
parameter_list|()
block|{
return|return
name|HttpFSFileSystem
operator|.
name|class
return|;
block|}
DECL|method|getScheme ()
specifier|protected
name|String
name|getScheme
parameter_list|()
block|{
return|return
literal|"webhdfs"
return|;
block|}
DECL|method|getHttpFSFileSystem (Configuration conf)
specifier|protected
name|FileSystem
name|getHttpFSFileSystem
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
literal|"fs.webhdfs.impl"
argument_list|,
name|getFileSystemClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
name|getScheme
argument_list|()
operator|+
literal|"://"
operator|+
name|TestJettyHelper
operator|.
name|getJettyURL
argument_list|()
operator|.
name|toURI
argument_list|()
operator|.
name|getAuthority
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|FileSystem
operator|.
name|get
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
return|;
block|}
DECL|method|getHttpFSFileSystem ()
specifier|protected
name|FileSystem
name|getHttpFSFileSystem
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
return|return
name|getHttpFSFileSystem
argument_list|(
name|conf
argument_list|)
return|;
block|}
DECL|method|testGet ()
specifier|protected
name|void
name|testGet
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|getHttpFSFileSystem
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
name|getScheme
argument_list|()
operator|+
literal|"://"
operator|+
name|TestJettyHelper
operator|.
name|getJettyURL
argument_list|()
operator|.
name|toURI
argument_list|()
operator|.
name|getAuthority
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|uri
argument_list|)
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testOpen ()
specifier|private
name|void
name|testOpen
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|getProxiedFSConf
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|getProxiedFSTestDir
argument_list|()
argument_list|,
literal|"foo.txt"
argument_list|)
decl_stmt|;
name|OutputStream
name|os
init|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|os
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|=
name|getHttpFSFileSystem
argument_list|()
expr_stmt|;
name|InputStream
name|is
init|=
name|fs
operator|.
name|open
argument_list|(
operator|new
name|Path
argument_list|(
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|is
operator|.
name|read
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testCreate (Path path, boolean override)
specifier|private
name|void
name|testCreate
parameter_list|(
name|Path
name|path
parameter_list|,
name|boolean
name|override
parameter_list|)
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|getHttpFSFileSystem
argument_list|()
decl_stmt|;
name|FsPermission
name|permission
init|=
operator|new
name|FsPermission
argument_list|(
name|FsAction
operator|.
name|READ_WRITE
argument_list|,
name|FsAction
operator|.
name|NONE
argument_list|,
name|FsAction
operator|.
name|NONE
argument_list|)
decl_stmt|;
name|OutputStream
name|os
init|=
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|,
name|permission
argument_list|,
name|override
argument_list|,
literal|1024
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|100
operator|*
literal|1024
operator|*
literal|1024
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|os
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|getProxiedFSConf
argument_list|()
argument_list|)
expr_stmt|;
name|FileStatus
name|status
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isLocalFS
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
name|status
operator|.
name|getReplication
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|status
operator|.
name|getBlockSize
argument_list|()
argument_list|,
literal|100
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|status
operator|.
name|getPermission
argument_list|()
argument_list|,
name|permission
argument_list|)
expr_stmt|;
name|InputStream
name|is
init|=
name|fs
operator|.
name|open
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|is
operator|.
name|read
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testCreate ()
specifier|private
name|void
name|testCreate
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|getProxiedFSTestDir
argument_list|()
argument_list|,
literal|"foo.txt"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|getProxiedFSConf
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testCreate
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testCreate
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|testCreate
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"the create should have failed because the file exists "
operator|+
literal|"and override is FALSE"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"#"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|ex
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testAppend ()
specifier|private
name|void
name|testAppend
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|isLocalFS
argument_list|()
condition|)
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|getProxiedFSConf
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|getProxiedFSTestDir
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|getProxiedFSTestDir
argument_list|()
argument_list|,
literal|"foo.txt"
argument_list|)
decl_stmt|;
name|OutputStream
name|os
init|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|os
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|=
name|getHttpFSFileSystem
argument_list|()
expr_stmt|;
name|os
operator|=
name|fs
operator|.
name|append
argument_list|(
operator|new
name|Path
argument_list|(
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|getProxiedFSConf
argument_list|()
argument_list|)
expr_stmt|;
name|InputStream
name|is
init|=
name|fs
operator|.
name|open
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|is
operator|.
name|read
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|is
operator|.
name|read
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|is
operator|.
name|read
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testTruncate ()
specifier|private
name|void
name|testTruncate
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|isLocalFS
argument_list|()
condition|)
block|{
specifier|final
name|short
name|repl
init|=
literal|3
decl_stmt|;
specifier|final
name|int
name|blockSize
init|=
literal|1024
decl_stmt|;
specifier|final
name|int
name|numOfBlocks
init|=
literal|2
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|getProxiedFSConf
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|getProxiedFSTestDir
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|getProxiedFSTestDir
argument_list|()
argument_list|,
literal|"foo.txt"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|data
init|=
name|FileSystemTestHelper
operator|.
name|getFileData
argument_list|(
name|numOfBlocks
argument_list|,
name|blockSize
argument_list|)
decl_stmt|;
name|FileSystemTestHelper
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|file
argument_list|,
name|data
argument_list|,
name|blockSize
argument_list|,
name|repl
argument_list|)
expr_stmt|;
specifier|final
name|int
name|newLength
init|=
name|blockSize
decl_stmt|;
name|boolean
name|isReady
init|=
name|fs
operator|.
name|truncate
argument_list|(
name|file
argument_list|,
name|newLength
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Recovery is not expected."
argument_list|,
name|isReady
argument_list|)
expr_stmt|;
name|FileStatus
name|fileStatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|fileStatus
operator|.
name|getLen
argument_list|()
argument_list|,
name|newLength
argument_list|)
expr_stmt|;
name|AppendTestUtil
operator|.
name|checkFullFile
argument_list|(
name|fs
argument_list|,
name|file
argument_list|,
name|newLength
argument_list|,
name|data
argument_list|,
name|file
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testConcat ()
specifier|private
name|void
name|testConcat
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|config
init|=
name|getProxiedFSConf
argument_list|()
decl_stmt|;
name|config
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isLocalFS
argument_list|()
condition|)
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|getProxiedFSTestDir
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|path1
init|=
operator|new
name|Path
argument_list|(
literal|"/test/foo.txt"
argument_list|)
decl_stmt|;
name|Path
name|path2
init|=
operator|new
name|Path
argument_list|(
literal|"/test/bar.txt"
argument_list|)
decl_stmt|;
name|Path
name|path3
init|=
operator|new
name|Path
argument_list|(
literal|"/test/derp.txt"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|path1
argument_list|,
literal|1024
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|path2
argument_list|,
literal|1024
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|path3
argument_list|,
literal|1024
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|=
name|getHttpFSFileSystem
argument_list|()
expr_stmt|;
name|fs
operator|.
name|concat
argument_list|(
name|path1
argument_list|,
operator|new
name|Path
index|[]
block|{
name|path2
block|,
name|path3
block|}
argument_list|)
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|path1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|path2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|path3
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testRename ()
specifier|private
name|void
name|testRename
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|getProxiedFSConf
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|getProxiedFSTestDir
argument_list|()
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|=
name|getHttpFSFileSystem
argument_list|()
expr_stmt|;
name|Path
name|oldPath
init|=
operator|new
name|Path
argument_list|(
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|newPath
init|=
operator|new
name|Path
argument_list|(
name|path
operator|.
name|getParent
argument_list|()
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|rename
argument_list|(
name|oldPath
argument_list|,
name|newPath
argument_list|)
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|getProxiedFSConf
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|oldPath
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|newPath
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testDelete ()
specifier|private
name|void
name|testDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
name|getProxiedFSTestDir
argument_list|()
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|Path
name|bar
init|=
operator|new
name|Path
argument_list|(
name|getProxiedFSTestDir
argument_list|()
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|Path
name|foe
init|=
operator|new
name|Path
argument_list|(
name|getProxiedFSTestDir
argument_list|()
argument_list|,
literal|"foe"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|getProxiedFSConf
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|foo
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|bar
argument_list|,
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|foe
argument_list|)
expr_stmt|;
name|FileSystem
name|hoopFs
init|=
name|getHttpFSFileSystem
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|hoopFs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|foo
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|foo
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|hoopFs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|bar
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{     }
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|bar
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hoopFs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|bar
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|bar
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|foe
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hoopFs
operator|.
name|delete
argument_list|(
name|foe
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|foe
argument_list|)
argument_list|)
expr_stmt|;
name|hoopFs
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testListStatus ()
specifier|private
name|void
name|testListStatus
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|getProxiedFSConf
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|getProxiedFSTestDir
argument_list|()
argument_list|,
literal|"foo.txt"
argument_list|)
decl_stmt|;
name|OutputStream
name|os
init|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|os
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
name|FileStatus
name|status1
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|=
name|getHttpFSFileSystem
argument_list|()
expr_stmt|;
name|FileStatus
name|status2
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|status2
operator|.
name|getPermission
argument_list|()
argument_list|,
name|status1
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|status2
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|status1
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|status2
operator|.
name|getReplication
argument_list|()
argument_list|,
name|status1
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|status2
operator|.
name|getBlockSize
argument_list|()
argument_list|,
name|status1
operator|.
name|getBlockSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|status2
operator|.
name|getAccessTime
argument_list|()
argument_list|,
name|status1
operator|.
name|getAccessTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|status2
operator|.
name|getModificationTime
argument_list|()
argument_list|,
name|status1
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|status2
operator|.
name|getOwner
argument_list|()
argument_list|,
name|status1
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|status2
operator|.
name|getGroup
argument_list|()
argument_list|,
name|status1
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|status2
operator|.
name|getLen
argument_list|()
argument_list|,
name|status1
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|stati
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|path
operator|.
name|getParent
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stati
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|stati
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|path
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// The full path should be the path to the file. See HDFS-12139
name|FileStatus
index|[]
name|statl
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|statl
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|status2
operator|.
name|getPath
argument_list|()
argument_list|,
name|statl
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|statl
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|path
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|stati
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
argument_list|,
name|statl
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testFileStatusAttr ()
specifier|private
name|void
name|testFileStatusAttr
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|isLocalFS
argument_list|()
condition|)
block|{
comment|// Create a directory
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp/tmp-snap-test"
argument_list|)
decl_stmt|;
name|DistributedFileSystem
name|distributedFs
init|=
operator|(
name|DistributedFileSystem
operator|)
name|FileSystem
operator|.
name|get
argument_list|(
name|path
operator|.
name|toUri
argument_list|()
argument_list|,
name|this
operator|.
name|getProxiedFSConf
argument_list|()
argument_list|)
decl_stmt|;
name|distributedFs
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|)
expr_stmt|;
comment|// Get the FileSystem instance that's being tested
name|FileSystem
name|fs
init|=
name|this
operator|.
name|getHttpFSFileSystem
argument_list|()
decl_stmt|;
comment|// Check FileStatus
name|assertFalse
argument_list|(
literal|"Snapshot should be disallowed by default"
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|isSnapshotEnabled
argument_list|()
argument_list|)
expr_stmt|;
comment|// Allow snapshot
name|distributedFs
operator|.
name|allowSnapshot
argument_list|(
name|path
argument_list|)
expr_stmt|;
comment|// Check FileStatus
name|assertTrue
argument_list|(
literal|"Snapshot enabled bit is not set in FileStatus"
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|isSnapshotEnabled
argument_list|()
argument_list|)
expr_stmt|;
comment|// Disallow snapshot
name|distributedFs
operator|.
name|disallowSnapshot
argument_list|(
name|path
argument_list|)
expr_stmt|;
comment|// Check FileStatus
name|assertFalse
argument_list|(
literal|"Snapshot enabled bit is not cleared in FileStatus"
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|isSnapshotEnabled
argument_list|()
argument_list|)
expr_stmt|;
comment|// Cleanup
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|distributedFs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|assertSameListing (FileSystem expected, FileSystem actual, Path p)
specifier|private
specifier|static
name|void
name|assertSameListing
parameter_list|(
name|FileSystem
name|expected
parameter_list|,
name|FileSystem
name|actual
parameter_list|,
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Consume all the entries from both iterators
name|RemoteIterator
argument_list|<
name|FileStatus
argument_list|>
name|exIt
init|=
name|expected
operator|.
name|listStatusIterator
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FileStatus
argument_list|>
name|exStatuses
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|exIt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|exStatuses
operator|.
name|add
argument_list|(
name|exIt
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|RemoteIterator
argument_list|<
name|FileStatus
argument_list|>
name|acIt
init|=
name|actual
operator|.
name|listStatusIterator
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FileStatus
argument_list|>
name|acStatuses
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|acIt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|acStatuses
operator|.
name|add
argument_list|(
name|acIt
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|exStatuses
operator|.
name|size
argument_list|()
argument_list|,
name|acStatuses
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|exStatuses
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|FileStatus
name|expectedStatus
init|=
name|exStatuses
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|FileStatus
name|actualStatus
init|=
name|acStatuses
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// Path URIs are fully qualified, so compare just the path component
name|assertEquals
argument_list|(
name|expectedStatus
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|actualStatus
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testListStatusBatch ()
specifier|private
name|void
name|testListStatusBatch
parameter_list|()
throws|throws
name|Exception
block|{
comment|// LocalFileSystem writes checksum files next to the data files, which
comment|// show up when listing via LFS. This makes the listings not compare
comment|// properly.
name|Assume
operator|.
name|assumeFalse
argument_list|(
name|isLocalFS
argument_list|()
argument_list|)
expr_stmt|;
name|FileSystem
name|proxyFs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|getProxiedFSConf
argument_list|()
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_LIST_LIMIT
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|FileSystem
name|httpFs
init|=
name|getHttpFSFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Test an empty directory
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
name|getProxiedFSTestDir
argument_list|()
argument_list|,
literal|"dir"
argument_list|)
decl_stmt|;
name|proxyFs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|assertSameListing
argument_list|(
name|proxyFs
argument_list|,
name|httpFs
argument_list|,
name|dir
argument_list|)
expr_stmt|;
comment|// Create and test in a loop
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|proxyFs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"file"
operator|+
name|i
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertSameListing
argument_list|(
name|proxyFs
argument_list|,
name|httpFs
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
comment|// Test for HDFS-12139
name|Path
name|dir1
init|=
operator|new
name|Path
argument_list|(
name|getProxiedFSTestDir
argument_list|()
argument_list|,
literal|"dir1"
argument_list|)
decl_stmt|;
name|proxyFs
operator|.
name|mkdirs
argument_list|(
name|dir1
argument_list|)
expr_stmt|;
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
name|dir1
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
name|proxyFs
operator|.
name|create
argument_list|(
name|file1
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|RemoteIterator
argument_list|<
name|FileStatus
argument_list|>
name|si
init|=
name|proxyFs
operator|.
name|listStatusIterator
argument_list|(
name|dir1
argument_list|)
decl_stmt|;
name|FileStatus
name|statusl
init|=
name|si
operator|.
name|next
argument_list|()
decl_stmt|;
name|FileStatus
name|status
init|=
name|proxyFs
operator|.
name|getFileStatus
argument_list|(
name|file1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|file1
operator|.
name|getName
argument_list|()
argument_list|,
name|statusl
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|status
operator|.
name|getPath
argument_list|()
argument_list|,
name|statusl
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|si
operator|=
name|proxyFs
operator|.
name|listStatusIterator
argument_list|(
name|file1
argument_list|)
expr_stmt|;
name|statusl
operator|=
name|si
operator|.
name|next
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|file1
operator|.
name|getName
argument_list|()
argument_list|,
name|statusl
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|status
operator|.
name|getPath
argument_list|()
argument_list|,
name|statusl
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testWorkingdirectory ()
specifier|private
name|void
name|testWorkingdirectory
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|getProxiedFSConf
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|workingDir
init|=
name|fs
operator|.
name|getWorkingDirectory
argument_list|()
decl_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|=
name|getHttpFSFileSystem
argument_list|()
expr_stmt|;
if|if
condition|(
name|isLocalFS
argument_list|()
condition|)
block|{
name|fs
operator|.
name|setWorkingDirectory
argument_list|(
name|workingDir
argument_list|)
expr_stmt|;
block|}
name|Path
name|httpFSWorkingDir
init|=
name|fs
operator|.
name|getWorkingDirectory
argument_list|()
decl_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|httpFSWorkingDir
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|workingDir
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|=
name|getHttpFSFileSystem
argument_list|()
expr_stmt|;
name|fs
operator|.
name|setWorkingDirectory
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/tmp"
argument_list|)
argument_list|)
expr_stmt|;
name|workingDir
operator|=
name|fs
operator|.
name|getWorkingDirectory
argument_list|()
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|workingDir
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/tmp"
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testTrashRoot ()
specifier|private
name|void
name|testTrashRoot
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|isLocalFS
argument_list|()
condition|)
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|getProxiedFSConf
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|rootDir
init|=
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|fooPath
init|=
operator|new
name|Path
argument_list|(
name|getProxiedFSTestDir
argument_list|()
argument_list|,
literal|"foo.txt"
argument_list|)
decl_stmt|;
name|OutputStream
name|os
init|=
name|fs
operator|.
name|create
argument_list|(
name|fooPath
argument_list|)
decl_stmt|;
name|os
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
name|Path
name|trashPath
init|=
name|fs
operator|.
name|getTrashRoot
argument_list|(
name|rootDir
argument_list|)
decl_stmt|;
name|Path
name|fooTrashPath
init|=
name|fs
operator|.
name|getTrashRoot
argument_list|(
name|fooPath
argument_list|)
decl_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|=
name|getHttpFSFileSystem
argument_list|()
expr_stmt|;
name|Path
name|httpFSTrashPath
init|=
name|fs
operator|.
name|getTrashRoot
argument_list|(
name|rootDir
argument_list|)
decl_stmt|;
name|Path
name|httpFSFooTrashPath
init|=
name|fs
operator|.
name|getTrashRoot
argument_list|(
name|fooPath
argument_list|)
decl_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|trashPath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|httpFSTrashPath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fooTrashPath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|httpFSFooTrashPath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// trash path is related to USER, not path
name|assertEquals
argument_list|(
name|trashPath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|fooTrashPath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testMkdirs ()
specifier|private
name|void
name|testMkdirs
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|getProxiedFSTestDir
argument_list|()
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|getHttpFSFileSystem
argument_list|()
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|getProxiedFSConf
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testSetTimes ()
specifier|private
name|void
name|testSetTimes
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|isLocalFS
argument_list|()
condition|)
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|getProxiedFSConf
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|getProxiedFSTestDir
argument_list|()
argument_list|,
literal|"foo.txt"
argument_list|)
decl_stmt|;
name|OutputStream
name|os
init|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|os
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
name|FileStatus
name|status1
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|long
name|at
init|=
name|status1
operator|.
name|getAccessTime
argument_list|()
decl_stmt|;
name|long
name|mt
init|=
name|status1
operator|.
name|getModificationTime
argument_list|()
decl_stmt|;
name|fs
operator|=
name|getHttpFSFileSystem
argument_list|()
expr_stmt|;
name|fs
operator|.
name|setTimes
argument_list|(
name|path
argument_list|,
name|mt
operator|-
literal|10
argument_list|,
name|at
operator|-
literal|20
argument_list|)
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|getProxiedFSConf
argument_list|()
argument_list|)
expr_stmt|;
name|status1
operator|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|long
name|atNew
init|=
name|status1
operator|.
name|getAccessTime
argument_list|()
decl_stmt|;
name|long
name|mtNew
init|=
name|status1
operator|.
name|getModificationTime
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|mtNew
argument_list|,
name|mt
operator|-
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|atNew
argument_list|,
name|at
operator|-
literal|20
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSetPermission ()
specifier|protected
name|void
name|testSetPermission
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|getProxiedFSConf
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|getProxiedFSTestDir
argument_list|()
argument_list|,
literal|"foodir"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|fs
operator|=
name|getHttpFSFileSystem
argument_list|()
expr_stmt|;
name|FsPermission
name|permission1
init|=
operator|new
name|FsPermission
argument_list|(
name|FsAction
operator|.
name|READ_WRITE
argument_list|,
name|FsAction
operator|.
name|NONE
argument_list|,
name|FsAction
operator|.
name|NONE
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|path
argument_list|,
name|permission1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|getProxiedFSConf
argument_list|()
argument_list|)
expr_stmt|;
name|FileStatus
name|status1
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|FsPermission
name|permission2
init|=
name|status1
operator|.
name|getPermission
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|permission2
argument_list|,
name|permission1
argument_list|)
expr_stmt|;
comment|//sticky bit
name|fs
operator|=
name|getHttpFSFileSystem
argument_list|()
expr_stmt|;
name|permission1
operator|=
operator|new
name|FsPermission
argument_list|(
name|FsAction
operator|.
name|READ_WRITE
argument_list|,
name|FsAction
operator|.
name|NONE
argument_list|,
name|FsAction
operator|.
name|NONE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|path
argument_list|,
name|permission1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|getProxiedFSConf
argument_list|()
argument_list|)
expr_stmt|;
name|status1
operator|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|permission2
operator|=
name|status1
operator|.
name|getPermission
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|permission2
operator|.
name|getStickyBit
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|permission2
argument_list|,
name|permission1
argument_list|)
expr_stmt|;
block|}
DECL|method|testSetOwner ()
specifier|private
name|void
name|testSetOwner
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|isLocalFS
argument_list|()
condition|)
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|getProxiedFSConf
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|getProxiedFSTestDir
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|getProxiedFSTestDir
argument_list|()
argument_list|,
literal|"foo.txt"
argument_list|)
decl_stmt|;
name|OutputStream
name|os
init|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|os
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|=
name|getHttpFSFileSystem
argument_list|()
expr_stmt|;
name|String
name|user
init|=
name|HadoopUsersConfTestHelper
operator|.
name|getHadoopUsers
argument_list|()
index|[
literal|1
index|]
decl_stmt|;
name|String
name|group
init|=
name|HadoopUsersConfTestHelper
operator|.
name|getHadoopUserGroups
argument_list|(
name|user
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
name|fs
operator|.
name|setOwner
argument_list|(
name|path
argument_list|,
name|user
argument_list|,
name|group
argument_list|)
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|getProxiedFSConf
argument_list|()
argument_list|)
expr_stmt|;
name|FileStatus
name|status1
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|status1
operator|.
name|getOwner
argument_list|()
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|status1
operator|.
name|getGroup
argument_list|()
argument_list|,
name|group
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSetReplication ()
specifier|private
name|void
name|testSetReplication
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|getProxiedFSConf
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|getProxiedFSTestDir
argument_list|()
argument_list|,
literal|"foo.txt"
argument_list|)
decl_stmt|;
name|OutputStream
name|os
init|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|os
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|.
name|setReplication
argument_list|(
name|path
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|=
name|getHttpFSFileSystem
argument_list|()
expr_stmt|;
name|fs
operator|.
name|setReplication
argument_list|(
name|path
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|getProxiedFSConf
argument_list|()
argument_list|)
expr_stmt|;
name|FileStatus
name|status1
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|status1
operator|.
name|getReplication
argument_list|()
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|testChecksum ()
specifier|private
name|void
name|testChecksum
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|isLocalFS
argument_list|()
condition|)
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|getProxiedFSConf
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|getProxiedFSTestDir
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|getProxiedFSTestDir
argument_list|()
argument_list|,
literal|"foo.txt"
argument_list|)
decl_stmt|;
name|OutputStream
name|os
init|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|os
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
name|FileChecksum
name|hdfsChecksum
init|=
name|fs
operator|.
name|getFileChecksum
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|=
name|getHttpFSFileSystem
argument_list|()
expr_stmt|;
name|FileChecksum
name|httpChecksum
init|=
name|fs
operator|.
name|getFileChecksum
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|httpChecksum
operator|.
name|getAlgorithmName
argument_list|()
argument_list|,
name|hdfsChecksum
operator|.
name|getAlgorithmName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|httpChecksum
operator|.
name|getLength
argument_list|()
argument_list|,
name|hdfsChecksum
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|httpChecksum
operator|.
name|getBytes
argument_list|()
argument_list|,
name|hdfsChecksum
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testContentSummary ()
specifier|private
name|void
name|testContentSummary
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|getProxiedFSConf
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|getProxiedFSTestDir
argument_list|()
argument_list|,
literal|"foo.txt"
argument_list|)
decl_stmt|;
name|OutputStream
name|os
init|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|os
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
name|ContentSummary
name|hdfsContentSummary
init|=
name|fs
operator|.
name|getContentSummary
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|=
name|getHttpFSFileSystem
argument_list|()
expr_stmt|;
name|ContentSummary
name|httpContentSummary
init|=
name|fs
operator|.
name|getContentSummary
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|httpContentSummary
operator|.
name|getDirectoryCount
argument_list|()
argument_list|,
name|hdfsContentSummary
operator|.
name|getDirectoryCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|httpContentSummary
operator|.
name|getFileCount
argument_list|()
argument_list|,
name|hdfsContentSummary
operator|.
name|getFileCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|httpContentSummary
operator|.
name|getLength
argument_list|()
argument_list|,
name|hdfsContentSummary
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|httpContentSummary
operator|.
name|getQuota
argument_list|()
argument_list|,
name|hdfsContentSummary
operator|.
name|getQuota
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|httpContentSummary
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|,
name|hdfsContentSummary
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|httpContentSummary
operator|.
name|getSpaceQuota
argument_list|()
argument_list|,
name|hdfsContentSummary
operator|.
name|getSpaceQuota
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Set xattr */
DECL|method|testSetXAttr ()
specifier|private
name|void
name|testSetXAttr
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|isLocalFS
argument_list|()
condition|)
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|getProxiedFSConf
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|getProxiedFSTestDir
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|getProxiedFSTestDir
argument_list|()
argument_list|,
literal|"foo.txt"
argument_list|)
decl_stmt|;
name|OutputStream
name|os
init|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|os
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|String
name|name1
init|=
literal|"user.a1"
decl_stmt|;
specifier|final
name|byte
index|[]
name|value1
init|=
operator|new
name|byte
index|[]
block|{
literal|0x31
block|,
literal|0x32
block|,
literal|0x33
block|}
decl_stmt|;
specifier|final
name|String
name|name2
init|=
literal|"user.a2"
decl_stmt|;
specifier|final
name|byte
index|[]
name|value2
init|=
operator|new
name|byte
index|[]
block|{
literal|0x41
block|,
literal|0x42
block|,
literal|0x43
block|}
decl_stmt|;
specifier|final
name|String
name|name3
init|=
literal|"user.a3"
decl_stmt|;
specifier|final
name|byte
index|[]
name|value3
init|=
literal|null
decl_stmt|;
specifier|final
name|String
name|name4
init|=
literal|"trusted.a1"
decl_stmt|;
specifier|final
name|byte
index|[]
name|value4
init|=
operator|new
name|byte
index|[]
block|{
literal|0x31
block|,
literal|0x32
block|,
literal|0x33
block|}
decl_stmt|;
specifier|final
name|String
name|name5
init|=
literal|"a1"
decl_stmt|;
name|fs
operator|=
name|getHttpFSFileSystem
argument_list|()
expr_stmt|;
name|fs
operator|.
name|setXAttr
argument_list|(
name|path
argument_list|,
name|name1
argument_list|,
name|value1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setXAttr
argument_list|(
name|path
argument_list|,
name|name2
argument_list|,
name|value2
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setXAttr
argument_list|(
name|path
argument_list|,
name|name3
argument_list|,
name|value3
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setXAttr
argument_list|(
name|path
argument_list|,
name|name4
argument_list|,
name|value4
argument_list|)
expr_stmt|;
try|try
block|{
name|fs
operator|.
name|setXAttr
argument_list|(
name|path
argument_list|,
name|name5
argument_list|,
name|value1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Set xAttr with incorrect name format should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{       }
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{       }
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|getProxiedFSConf
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|xAttrs
init|=
name|fs
operator|.
name|getXAttrs
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|xAttrs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|value1
argument_list|,
name|xAttrs
operator|.
name|get
argument_list|(
name|name1
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|value2
argument_list|,
name|xAttrs
operator|.
name|get
argument_list|(
name|name2
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
name|xAttrs
operator|.
name|get
argument_list|(
name|name3
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|value4
argument_list|,
name|xAttrs
operator|.
name|get
argument_list|(
name|name4
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Get xattrs */
DECL|method|testGetXAttrs ()
specifier|private
name|void
name|testGetXAttrs
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|isLocalFS
argument_list|()
condition|)
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|getProxiedFSConf
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|getProxiedFSTestDir
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|getProxiedFSTestDir
argument_list|()
argument_list|,
literal|"foo.txt"
argument_list|)
decl_stmt|;
name|OutputStream
name|os
init|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|os
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|String
name|name1
init|=
literal|"user.a1"
decl_stmt|;
specifier|final
name|byte
index|[]
name|value1
init|=
operator|new
name|byte
index|[]
block|{
literal|0x31
block|,
literal|0x32
block|,
literal|0x33
block|}
decl_stmt|;
specifier|final
name|String
name|name2
init|=
literal|"user.a2"
decl_stmt|;
specifier|final
name|byte
index|[]
name|value2
init|=
operator|new
name|byte
index|[]
block|{
literal|0x41
block|,
literal|0x42
block|,
literal|0x43
block|}
decl_stmt|;
specifier|final
name|String
name|name3
init|=
literal|"user.a3"
decl_stmt|;
specifier|final
name|byte
index|[]
name|value3
init|=
literal|null
decl_stmt|;
specifier|final
name|String
name|name4
init|=
literal|"trusted.a1"
decl_stmt|;
specifier|final
name|byte
index|[]
name|value4
init|=
operator|new
name|byte
index|[]
block|{
literal|0x31
block|,
literal|0x32
block|,
literal|0x33
block|}
decl_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|getProxiedFSConf
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setXAttr
argument_list|(
name|path
argument_list|,
name|name1
argument_list|,
name|value1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setXAttr
argument_list|(
name|path
argument_list|,
name|name2
argument_list|,
name|value2
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setXAttr
argument_list|(
name|path
argument_list|,
name|name3
argument_list|,
name|value3
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setXAttr
argument_list|(
name|path
argument_list|,
name|name4
argument_list|,
name|value4
argument_list|)
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Get xattrs with names parameter
name|fs
operator|=
name|getHttpFSFileSystem
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|names
operator|.
name|add
argument_list|(
name|name1
argument_list|)
expr_stmt|;
name|names
operator|.
name|add
argument_list|(
name|name2
argument_list|)
expr_stmt|;
name|names
operator|.
name|add
argument_list|(
name|name3
argument_list|)
expr_stmt|;
name|names
operator|.
name|add
argument_list|(
name|name4
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|xAttrs
init|=
name|fs
operator|.
name|getXAttrs
argument_list|(
name|path
argument_list|,
name|names
argument_list|)
decl_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|xAttrs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|value1
argument_list|,
name|xAttrs
operator|.
name|get
argument_list|(
name|name1
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|value2
argument_list|,
name|xAttrs
operator|.
name|get
argument_list|(
name|name2
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
name|xAttrs
operator|.
name|get
argument_list|(
name|name3
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|value4
argument_list|,
name|xAttrs
operator|.
name|get
argument_list|(
name|name4
argument_list|)
argument_list|)
expr_stmt|;
comment|// Get specific xattr
name|fs
operator|=
name|getHttpFSFileSystem
argument_list|()
expr_stmt|;
name|byte
index|[]
name|value
init|=
name|fs
operator|.
name|getXAttr
argument_list|(
name|path
argument_list|,
name|name1
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|value1
argument_list|,
name|value
argument_list|)
expr_stmt|;
specifier|final
name|String
name|name5
init|=
literal|"a1"
decl_stmt|;
try|try
block|{
name|value
operator|=
name|fs
operator|.
name|getXAttr
argument_list|(
name|path
argument_list|,
name|name5
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Get xAttr with incorrect name format should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{       }
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{       }
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Get all xattrs
name|fs
operator|=
name|getHttpFSFileSystem
argument_list|()
expr_stmt|;
name|xAttrs
operator|=
name|fs
operator|.
name|getXAttrs
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|xAttrs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|value1
argument_list|,
name|xAttrs
operator|.
name|get
argument_list|(
name|name1
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|value2
argument_list|,
name|xAttrs
operator|.
name|get
argument_list|(
name|name2
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
name|xAttrs
operator|.
name|get
argument_list|(
name|name3
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|value4
argument_list|,
name|xAttrs
operator|.
name|get
argument_list|(
name|name4
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Remove xattr */
DECL|method|testRemoveXAttr ()
specifier|private
name|void
name|testRemoveXAttr
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|isLocalFS
argument_list|()
condition|)
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|getProxiedFSConf
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|getProxiedFSTestDir
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|getProxiedFSTestDir
argument_list|()
argument_list|,
literal|"foo.txt"
argument_list|)
decl_stmt|;
name|OutputStream
name|os
init|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|os
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|String
name|name1
init|=
literal|"user.a1"
decl_stmt|;
specifier|final
name|byte
index|[]
name|value1
init|=
operator|new
name|byte
index|[]
block|{
literal|0x31
block|,
literal|0x32
block|,
literal|0x33
block|}
decl_stmt|;
specifier|final
name|String
name|name2
init|=
literal|"user.a2"
decl_stmt|;
specifier|final
name|byte
index|[]
name|value2
init|=
operator|new
name|byte
index|[]
block|{
literal|0x41
block|,
literal|0x42
block|,
literal|0x43
block|}
decl_stmt|;
specifier|final
name|String
name|name3
init|=
literal|"user.a3"
decl_stmt|;
specifier|final
name|byte
index|[]
name|value3
init|=
literal|null
decl_stmt|;
specifier|final
name|String
name|name4
init|=
literal|"trusted.a1"
decl_stmt|;
specifier|final
name|byte
index|[]
name|value4
init|=
operator|new
name|byte
index|[]
block|{
literal|0x31
block|,
literal|0x32
block|,
literal|0x33
block|}
decl_stmt|;
specifier|final
name|String
name|name5
init|=
literal|"a1"
decl_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|getProxiedFSConf
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setXAttr
argument_list|(
name|path
argument_list|,
name|name1
argument_list|,
name|value1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setXAttr
argument_list|(
name|path
argument_list|,
name|name2
argument_list|,
name|value2
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setXAttr
argument_list|(
name|path
argument_list|,
name|name3
argument_list|,
name|value3
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setXAttr
argument_list|(
name|path
argument_list|,
name|name4
argument_list|,
name|value4
argument_list|)
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|=
name|getHttpFSFileSystem
argument_list|()
expr_stmt|;
name|fs
operator|.
name|removeXAttr
argument_list|(
name|path
argument_list|,
name|name1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|removeXAttr
argument_list|(
name|path
argument_list|,
name|name3
argument_list|)
expr_stmt|;
name|fs
operator|.
name|removeXAttr
argument_list|(
name|path
argument_list|,
name|name4
argument_list|)
expr_stmt|;
try|try
block|{
name|fs
operator|.
name|removeXAttr
argument_list|(
name|path
argument_list|,
name|name5
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Remove xAttr with incorrect name format should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{       }
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{       }
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|getProxiedFSConf
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|xAttrs
init|=
name|fs
operator|.
name|getXAttrs
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|xAttrs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|value2
argument_list|,
name|xAttrs
operator|.
name|get
argument_list|(
name|name2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** List xattrs */
DECL|method|testListXAttrs ()
specifier|private
name|void
name|testListXAttrs
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|isLocalFS
argument_list|()
condition|)
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|getProxiedFSConf
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|getProxiedFSTestDir
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|getProxiedFSTestDir
argument_list|()
argument_list|,
literal|"foo.txt"
argument_list|)
decl_stmt|;
name|OutputStream
name|os
init|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|os
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|String
name|name1
init|=
literal|"user.a1"
decl_stmt|;
specifier|final
name|byte
index|[]
name|value1
init|=
operator|new
name|byte
index|[]
block|{
literal|0x31
block|,
literal|0x32
block|,
literal|0x33
block|}
decl_stmt|;
specifier|final
name|String
name|name2
init|=
literal|"user.a2"
decl_stmt|;
specifier|final
name|byte
index|[]
name|value2
init|=
operator|new
name|byte
index|[]
block|{
literal|0x41
block|,
literal|0x42
block|,
literal|0x43
block|}
decl_stmt|;
specifier|final
name|String
name|name3
init|=
literal|"user.a3"
decl_stmt|;
specifier|final
name|byte
index|[]
name|value3
init|=
literal|null
decl_stmt|;
specifier|final
name|String
name|name4
init|=
literal|"trusted.a1"
decl_stmt|;
specifier|final
name|byte
index|[]
name|value4
init|=
operator|new
name|byte
index|[]
block|{
literal|0x31
block|,
literal|0x32
block|,
literal|0x33
block|}
decl_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|getProxiedFSConf
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setXAttr
argument_list|(
name|path
argument_list|,
name|name1
argument_list|,
name|value1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setXAttr
argument_list|(
name|path
argument_list|,
name|name2
argument_list|,
name|value2
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setXAttr
argument_list|(
name|path
argument_list|,
name|name3
argument_list|,
name|value3
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setXAttr
argument_list|(
name|path
argument_list|,
name|name4
argument_list|,
name|value4
argument_list|)
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|=
name|getHttpFSFileSystem
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|fs
operator|.
name|listXAttrs
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|names
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|names
operator|.
name|contains
argument_list|(
name|name1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|names
operator|.
name|contains
argument_list|(
name|name2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|names
operator|.
name|contains
argument_list|(
name|name3
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|names
operator|.
name|contains
argument_list|(
name|name4
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Runs assertions testing that two AclStatus objects contain the same info    * @param a First AclStatus    * @param b Second AclStatus    * @throws Exception    */
DECL|method|assertSameAcls (AclStatus a, AclStatus b)
specifier|private
name|void
name|assertSameAcls
parameter_list|(
name|AclStatus
name|a
parameter_list|,
name|AclStatus
name|b
parameter_list|)
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|a
operator|.
name|getOwner
argument_list|()
operator|.
name|equals
argument_list|(
name|b
operator|.
name|getOwner
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|a
operator|.
name|getGroup
argument_list|()
operator|.
name|equals
argument_list|(
name|b
operator|.
name|getGroup
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|a
operator|.
name|isStickyBit
argument_list|()
operator|==
name|b
operator|.
name|isStickyBit
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|a
operator|.
name|getEntries
argument_list|()
operator|.
name|size
argument_list|()
operator|==
name|b
operator|.
name|getEntries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|AclEntry
name|e
range|:
name|a
operator|.
name|getEntries
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|b
operator|.
name|getEntries
argument_list|()
operator|.
name|contains
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|AclEntry
name|e
range|:
name|b
operator|.
name|getEntries
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|a
operator|.
name|getEntries
argument_list|()
operator|.
name|contains
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertSameAcls (FileSystem expected, FileSystem actual, Path path)
specifier|private
specifier|static
name|void
name|assertSameAcls
parameter_list|(
name|FileSystem
name|expected
parameter_list|,
name|FileSystem
name|actual
parameter_list|,
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
name|expectedFileStatus
init|=
name|expected
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|FileStatus
name|actualFileStatus
init|=
name|actual
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|actualFileStatus
operator|.
name|hasAcl
argument_list|()
argument_list|,
name|expectedFileStatus
operator|.
name|hasAcl
argument_list|()
argument_list|)
expr_stmt|;
comment|// backwards compat
name|assertEquals
argument_list|(
name|actualFileStatus
operator|.
name|getPermission
argument_list|()
operator|.
name|getAclBit
argument_list|()
argument_list|,
name|expectedFileStatus
operator|.
name|getPermission
argument_list|()
operator|.
name|getAclBit
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Simple ACL tests on a file:  Set an acl, add an acl, remove one acl,    * and remove all acls.    * @throws Exception    */
DECL|method|testFileAcls ()
specifier|private
name|void
name|testFileAcls
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|isLocalFS
argument_list|()
condition|)
block|{
return|return;
block|}
specifier|final
name|String
name|aclUser1
init|=
literal|"user:foo:rw-"
decl_stmt|;
specifier|final
name|String
name|rmAclUser1
init|=
literal|"user:foo:"
decl_stmt|;
specifier|final
name|String
name|aclUser2
init|=
literal|"user:bar:r--"
decl_stmt|;
specifier|final
name|String
name|aclGroup1
init|=
literal|"group::r--"
decl_stmt|;
specifier|final
name|String
name|aclSet
init|=
literal|"user::rwx,"
operator|+
name|aclUser1
operator|+
literal|","
operator|+
name|aclGroup1
operator|+
literal|",other::---"
decl_stmt|;
name|FileSystem
name|proxyFs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|getProxiedFSConf
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|httpfs
init|=
name|getHttpFSFileSystem
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|getProxiedFSTestDir
argument_list|()
argument_list|,
literal|"testAclStatus.txt"
argument_list|)
decl_stmt|;
name|OutputStream
name|os
init|=
name|proxyFs
operator|.
name|create
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|os
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
name|AclStatus
name|proxyAclStat
init|=
name|proxyFs
operator|.
name|getAclStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|AclStatus
name|httpfsAclStat
init|=
name|httpfs
operator|.
name|getAclStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertSameAcls
argument_list|(
name|httpfsAclStat
argument_list|,
name|proxyAclStat
argument_list|)
expr_stmt|;
name|assertSameAcls
argument_list|(
name|httpfs
argument_list|,
name|proxyFs
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|httpfs
operator|.
name|setAcl
argument_list|(
name|path
argument_list|,
name|AclEntry
operator|.
name|parseAclSpec
argument_list|(
name|aclSet
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|proxyAclStat
operator|=
name|proxyFs
operator|.
name|getAclStatus
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|httpfsAclStat
operator|=
name|httpfs
operator|.
name|getAclStatus
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|assertSameAcls
argument_list|(
name|httpfsAclStat
argument_list|,
name|proxyAclStat
argument_list|)
expr_stmt|;
name|assertSameAcls
argument_list|(
name|httpfs
argument_list|,
name|proxyFs
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|httpfs
operator|.
name|modifyAclEntries
argument_list|(
name|path
argument_list|,
name|AclEntry
operator|.
name|parseAclSpec
argument_list|(
name|aclUser2
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|proxyAclStat
operator|=
name|proxyFs
operator|.
name|getAclStatus
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|httpfsAclStat
operator|=
name|httpfs
operator|.
name|getAclStatus
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|assertSameAcls
argument_list|(
name|httpfsAclStat
argument_list|,
name|proxyAclStat
argument_list|)
expr_stmt|;
name|assertSameAcls
argument_list|(
name|httpfs
argument_list|,
name|proxyFs
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|httpfs
operator|.
name|removeAclEntries
argument_list|(
name|path
argument_list|,
name|AclEntry
operator|.
name|parseAclSpec
argument_list|(
name|rmAclUser1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|proxyAclStat
operator|=
name|proxyFs
operator|.
name|getAclStatus
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|httpfsAclStat
operator|=
name|httpfs
operator|.
name|getAclStatus
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|assertSameAcls
argument_list|(
name|httpfsAclStat
argument_list|,
name|proxyAclStat
argument_list|)
expr_stmt|;
name|assertSameAcls
argument_list|(
name|httpfs
argument_list|,
name|proxyFs
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|httpfs
operator|.
name|removeAcl
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|proxyAclStat
operator|=
name|proxyFs
operator|.
name|getAclStatus
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|httpfsAclStat
operator|=
name|httpfs
operator|.
name|getAclStatus
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|assertSameAcls
argument_list|(
name|httpfsAclStat
argument_list|,
name|proxyAclStat
argument_list|)
expr_stmt|;
name|assertSameAcls
argument_list|(
name|httpfs
argument_list|,
name|proxyFs
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
comment|/**    * Simple acl tests on a directory: set a default acl, remove default acls.    * @throws Exception    */
DECL|method|testDirAcls ()
specifier|private
name|void
name|testDirAcls
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|isLocalFS
argument_list|()
condition|)
block|{
return|return;
block|}
specifier|final
name|String
name|defUser1
init|=
literal|"default:user:glarch:r-x"
decl_stmt|;
name|FileSystem
name|proxyFs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|getProxiedFSConf
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|httpfs
init|=
name|getHttpFSFileSystem
argument_list|()
decl_stmt|;
name|Path
name|dir
init|=
name|getProxiedFSTestDir
argument_list|()
decl_stmt|;
comment|/* ACL Status on a directory */
name|AclStatus
name|proxyAclStat
init|=
name|proxyFs
operator|.
name|getAclStatus
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|AclStatus
name|httpfsAclStat
init|=
name|httpfs
operator|.
name|getAclStatus
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|assertSameAcls
argument_list|(
name|httpfsAclStat
argument_list|,
name|proxyAclStat
argument_list|)
expr_stmt|;
name|assertSameAcls
argument_list|(
name|httpfs
argument_list|,
name|proxyFs
argument_list|,
name|dir
argument_list|)
expr_stmt|;
comment|/* Set a default ACL on the directory */
name|httpfs
operator|.
name|setAcl
argument_list|(
name|dir
argument_list|,
operator|(
name|AclEntry
operator|.
name|parseAclSpec
argument_list|(
name|defUser1
argument_list|,
literal|true
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|proxyAclStat
operator|=
name|proxyFs
operator|.
name|getAclStatus
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|httpfsAclStat
operator|=
name|httpfs
operator|.
name|getAclStatus
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|assertSameAcls
argument_list|(
name|httpfsAclStat
argument_list|,
name|proxyAclStat
argument_list|)
expr_stmt|;
name|assertSameAcls
argument_list|(
name|httpfs
argument_list|,
name|proxyFs
argument_list|,
name|dir
argument_list|)
expr_stmt|;
comment|/* Remove the default ACL */
name|httpfs
operator|.
name|removeDefaultAcl
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|proxyAclStat
operator|=
name|proxyFs
operator|.
name|getAclStatus
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|httpfsAclStat
operator|=
name|httpfs
operator|.
name|getAclStatus
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|assertSameAcls
argument_list|(
name|httpfsAclStat
argument_list|,
name|proxyAclStat
argument_list|)
expr_stmt|;
name|assertSameAcls
argument_list|(
name|httpfs
argument_list|,
name|proxyFs
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
DECL|method|testEncryption ()
specifier|private
name|void
name|testEncryption
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|isLocalFS
argument_list|()
condition|)
block|{
return|return;
block|}
name|FileSystem
name|proxyFs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|getProxiedFSConf
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|httpFs
init|=
name|getHttpFSFileSystem
argument_list|()
decl_stmt|;
name|FileStatus
name|proxyStatus
init|=
name|proxyFs
operator|.
name|getFileStatus
argument_list|(
name|TestHdfsHelper
operator|.
name|ENCRYPTED_FILE
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|proxyStatus
operator|.
name|isEncrypted
argument_list|()
argument_list|)
expr_stmt|;
name|FileStatus
name|httpStatus
init|=
name|httpFs
operator|.
name|getFileStatus
argument_list|(
name|TestHdfsHelper
operator|.
name|ENCRYPTED_FILE
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|httpStatus
operator|.
name|isEncrypted
argument_list|()
argument_list|)
expr_stmt|;
name|proxyStatus
operator|=
name|proxyFs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|httpStatus
operator|=
name|httpFs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|proxyStatus
operator|.
name|isEncrypted
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|httpStatus
operator|.
name|isEncrypted
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testErasureCoding ()
specifier|private
name|void
name|testErasureCoding
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeFalse
argument_list|(
literal|"Assume its not a local FS!"
argument_list|,
name|isLocalFS
argument_list|()
argument_list|)
expr_stmt|;
name|FileSystem
name|proxyFs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|getProxiedFSConf
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|httpFS
init|=
name|getHttpFSFileSystem
argument_list|()
decl_stmt|;
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|getProxiedFSTestDir
argument_list|()
argument_list|,
literal|"foo.txt"
argument_list|)
decl_stmt|;
name|proxyFs
operator|.
name|create
argument_list|(
name|filePath
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|ContractTestUtils
operator|.
name|assertNotErasureCoded
argument_list|(
name|httpFS
argument_list|,
name|getProxiedFSTestDir
argument_list|()
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|assertNotErasureCoded
argument_list|(
name|httpFS
argument_list|,
name|filePath
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|assertErasureCoded
argument_list|(
name|httpFS
argument_list|,
name|TestHdfsHelper
operator|.
name|ERASURE_CODING_DIR
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|assertErasureCoded
argument_list|(
name|httpFS
argument_list|,
name|TestHdfsHelper
operator|.
name|ERASURE_CODING_FILE
argument_list|)
expr_stmt|;
name|proxyFs
operator|.
name|close
argument_list|()
expr_stmt|;
name|httpFS
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testStoragePolicy ()
specifier|private
name|void
name|testStoragePolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeFalse
argument_list|(
literal|"Assume its not a local FS"
argument_list|,
name|isLocalFS
argument_list|()
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|getProxiedFSConf
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|getProxiedFSTestDir
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|getProxiedFSTestDir
argument_list|()
argument_list|,
literal|"policy.txt"
argument_list|)
decl_stmt|;
name|FileSystem
name|httpfs
init|=
name|getHttpFSFileSystem
argument_list|()
decl_stmt|;
comment|// test getAllStoragePolicies
name|BlockStoragePolicy
index|[]
name|dfsPolicies
init|=
operator|(
name|BlockStoragePolicy
index|[]
operator|)
name|fs
operator|.
name|getAllStoragePolicies
argument_list|()
operator|.
name|toArray
argument_list|()
decl_stmt|;
name|BlockStoragePolicy
index|[]
name|httpPolicies
init|=
operator|(
name|BlockStoragePolicy
index|[]
operator|)
name|httpfs
operator|.
name|getAllStoragePolicies
argument_list|()
operator|.
name|toArray
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
literal|"Policy array returned from the DFS and HttpFS should be equals"
argument_list|,
name|dfsPolicies
argument_list|,
name|httpPolicies
argument_list|)
expr_stmt|;
comment|// test get/set/unset policies
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
literal|0
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
comment|// get defaultPolicy
name|BlockStoragePolicySpi
name|defaultdfsPolicy
init|=
name|fs
operator|.
name|getStoragePolicy
argument_list|(
name|path
argument_list|)
decl_stmt|;
comment|// set policy through webhdfs
name|httpfs
operator|.
name|setStoragePolicy
argument_list|(
name|path
argument_list|,
name|HdfsConstants
operator|.
name|COLD_STORAGE_POLICY_NAME
argument_list|)
expr_stmt|;
comment|// get policy from dfs
name|BlockStoragePolicySpi
name|dfsPolicy
init|=
name|fs
operator|.
name|getStoragePolicy
argument_list|(
name|path
argument_list|)
decl_stmt|;
comment|// get policy from webhdfs
name|BlockStoragePolicySpi
name|httpFsPolicy
init|=
name|httpfs
operator|.
name|getStoragePolicy
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Storage policy returned from the get API should"
operator|+
literal|" be same as set policy"
argument_list|,
name|HdfsConstants
operator|.
name|COLD_STORAGE_POLICY_NAME
operator|.
name|toString
argument_list|()
argument_list|,
name|httpFsPolicy
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Storage policy returned from the DFS and HttpFS should be equals"
argument_list|,
name|httpFsPolicy
argument_list|,
name|dfsPolicy
argument_list|)
expr_stmt|;
comment|// unset policy
name|httpfs
operator|.
name|unsetStoragePolicy
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"After unset storage policy, the get API shoudld"
operator|+
literal|" return the default policy"
argument_list|,
name|defaultdfsPolicy
argument_list|,
name|httpfs
operator|.
name|getStoragePolicy
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|enum|Operation
specifier|protected
enum|enum
name|Operation
block|{
DECL|enumConstant|GET
DECL|enumConstant|OPEN
DECL|enumConstant|CREATE
DECL|enumConstant|APPEND
DECL|enumConstant|TRUNCATE
DECL|enumConstant|CONCAT
DECL|enumConstant|RENAME
DECL|enumConstant|DELETE
DECL|enumConstant|LIST_STATUS
name|GET
block|,
name|OPEN
block|,
name|CREATE
block|,
name|APPEND
block|,
name|TRUNCATE
block|,
name|CONCAT
block|,
name|RENAME
block|,
name|DELETE
block|,
name|LIST_STATUS
block|,
DECL|enumConstant|WORKING_DIRECTORY
DECL|enumConstant|MKDIRS
DECL|enumConstant|SET_TIMES
DECL|enumConstant|SET_PERMISSION
DECL|enumConstant|SET_OWNER
name|WORKING_DIRECTORY
block|,
name|MKDIRS
block|,
name|SET_TIMES
block|,
name|SET_PERMISSION
block|,
name|SET_OWNER
block|,
DECL|enumConstant|SET_REPLICATION
DECL|enumConstant|CHECKSUM
DECL|enumConstant|CONTENT_SUMMARY
DECL|enumConstant|FILEACLS
DECL|enumConstant|DIRACLS
DECL|enumConstant|SET_XATTR
name|SET_REPLICATION
block|,
name|CHECKSUM
block|,
name|CONTENT_SUMMARY
block|,
name|FILEACLS
block|,
name|DIRACLS
block|,
name|SET_XATTR
block|,
DECL|enumConstant|GET_XATTRS
DECL|enumConstant|REMOVE_XATTR
DECL|enumConstant|LIST_XATTRS
DECL|enumConstant|ENCRYPTION
DECL|enumConstant|LIST_STATUS_BATCH
name|GET_XATTRS
block|,
name|REMOVE_XATTR
block|,
name|LIST_XATTRS
block|,
name|ENCRYPTION
block|,
name|LIST_STATUS_BATCH
block|,
DECL|enumConstant|GETTRASHROOT
DECL|enumConstant|STORAGEPOLICY
DECL|enumConstant|ERASURE_CODING
name|GETTRASHROOT
block|,
name|STORAGEPOLICY
block|,
name|ERASURE_CODING
block|,
DECL|enumConstant|CREATE_SNAPSHOT
DECL|enumConstant|RENAME_SNAPSHOT
DECL|enumConstant|DELETE_SNAPSHOT
name|CREATE_SNAPSHOT
block|,
name|RENAME_SNAPSHOT
block|,
name|DELETE_SNAPSHOT
block|,
DECL|enumConstant|ALLOW_SNAPSHOT
DECL|enumConstant|DISALLOW_SNAPSHOT
DECL|enumConstant|DISALLOW_SNAPSHOT_EXCEPTION
name|ALLOW_SNAPSHOT
block|,
name|DISALLOW_SNAPSHOT
block|,
name|DISALLOW_SNAPSHOT_EXCEPTION
block|,
DECL|enumConstant|FILE_STATUS_ATTR
name|FILE_STATUS_ATTR
block|}
DECL|method|operation (Operation op)
specifier|private
name|void
name|operation
parameter_list|(
name|Operation
name|op
parameter_list|)
throws|throws
name|Exception
block|{
switch|switch
condition|(
name|op
condition|)
block|{
case|case
name|GET
case|:
name|testGet
argument_list|()
expr_stmt|;
break|break;
case|case
name|OPEN
case|:
name|testOpen
argument_list|()
expr_stmt|;
break|break;
case|case
name|CREATE
case|:
name|testCreate
argument_list|()
expr_stmt|;
break|break;
case|case
name|APPEND
case|:
name|testAppend
argument_list|()
expr_stmt|;
break|break;
case|case
name|TRUNCATE
case|:
name|testTruncate
argument_list|()
expr_stmt|;
break|break;
case|case
name|CONCAT
case|:
name|testConcat
argument_list|()
expr_stmt|;
break|break;
case|case
name|RENAME
case|:
name|testRename
argument_list|()
expr_stmt|;
break|break;
case|case
name|DELETE
case|:
name|testDelete
argument_list|()
expr_stmt|;
break|break;
case|case
name|LIST_STATUS
case|:
name|testListStatus
argument_list|()
expr_stmt|;
break|break;
case|case
name|WORKING_DIRECTORY
case|:
name|testWorkingdirectory
argument_list|()
expr_stmt|;
break|break;
case|case
name|MKDIRS
case|:
name|testMkdirs
argument_list|()
expr_stmt|;
break|break;
case|case
name|SET_TIMES
case|:
name|testSetTimes
argument_list|()
expr_stmt|;
break|break;
case|case
name|SET_PERMISSION
case|:
name|testSetPermission
argument_list|()
expr_stmt|;
break|break;
case|case
name|SET_OWNER
case|:
name|testSetOwner
argument_list|()
expr_stmt|;
break|break;
case|case
name|SET_REPLICATION
case|:
name|testSetReplication
argument_list|()
expr_stmt|;
break|break;
case|case
name|CHECKSUM
case|:
name|testChecksum
argument_list|()
expr_stmt|;
break|break;
case|case
name|CONTENT_SUMMARY
case|:
name|testContentSummary
argument_list|()
expr_stmt|;
break|break;
case|case
name|FILEACLS
case|:
name|testFileAcls
argument_list|()
expr_stmt|;
break|break;
case|case
name|DIRACLS
case|:
name|testDirAcls
argument_list|()
expr_stmt|;
break|break;
case|case
name|SET_XATTR
case|:
name|testSetXAttr
argument_list|()
expr_stmt|;
break|break;
case|case
name|REMOVE_XATTR
case|:
name|testRemoveXAttr
argument_list|()
expr_stmt|;
break|break;
case|case
name|GET_XATTRS
case|:
name|testGetXAttrs
argument_list|()
expr_stmt|;
break|break;
case|case
name|LIST_XATTRS
case|:
name|testListXAttrs
argument_list|()
expr_stmt|;
break|break;
case|case
name|ENCRYPTION
case|:
name|testEncryption
argument_list|()
expr_stmt|;
break|break;
case|case
name|LIST_STATUS_BATCH
case|:
name|testListStatusBatch
argument_list|()
expr_stmt|;
break|break;
case|case
name|GETTRASHROOT
case|:
name|testTrashRoot
argument_list|()
expr_stmt|;
break|break;
case|case
name|STORAGEPOLICY
case|:
name|testStoragePolicy
argument_list|()
expr_stmt|;
break|break;
case|case
name|ERASURE_CODING
case|:
name|testErasureCoding
argument_list|()
expr_stmt|;
break|break;
case|case
name|CREATE_SNAPSHOT
case|:
name|testCreateSnapshot
argument_list|()
expr_stmt|;
break|break;
case|case
name|RENAME_SNAPSHOT
case|:
name|testRenameSnapshot
argument_list|()
expr_stmt|;
break|break;
case|case
name|DELETE_SNAPSHOT
case|:
name|testDeleteSnapshot
argument_list|()
expr_stmt|;
break|break;
case|case
name|ALLOW_SNAPSHOT
case|:
name|testAllowSnapshot
argument_list|()
expr_stmt|;
break|break;
case|case
name|DISALLOW_SNAPSHOT
case|:
name|testDisallowSnapshot
argument_list|()
expr_stmt|;
break|break;
case|case
name|DISALLOW_SNAPSHOT_EXCEPTION
case|:
name|testDisallowSnapshotException
argument_list|()
expr_stmt|;
case|case
name|FILE_STATUS_ATTR
case|:
name|testFileStatusAttr
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
annotation|@
name|Parameterized
operator|.
name|Parameters
DECL|method|operations ()
specifier|public
specifier|static
name|Collection
name|operations
parameter_list|()
block|{
name|Object
index|[]
index|[]
name|ops
init|=
operator|new
name|Object
index|[
name|Operation
operator|.
name|values
argument_list|()
operator|.
name|length
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Operation
operator|.
name|values
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ops
index|[
name|i
index|]
operator|=
operator|new
name|Object
index|[]
block|{
name|Operation
operator|.
name|values
argument_list|()
index|[
name|i
index|]
block|}
expr_stmt|;
block|}
comment|//To test one or a subset of operations do:
comment|//return Arrays.asList(new Object[][]{ new Object[]{Operation.APPEND}});
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|ops
argument_list|)
return|;
block|}
DECL|field|operation
specifier|private
name|Operation
name|operation
decl_stmt|;
DECL|method|BaseTestHttpFSWith (Operation operation)
specifier|public
name|BaseTestHttpFSWith
parameter_list|(
name|Operation
name|operation
parameter_list|)
block|{
name|this
operator|.
name|operation
operator|=
name|operation
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestDir
annotation|@
name|TestJetty
annotation|@
name|TestHdfs
DECL|method|testOperation ()
specifier|public
name|void
name|testOperation
parameter_list|()
throws|throws
name|Exception
block|{
name|createHttpFSServer
argument_list|()
expr_stmt|;
name|operation
argument_list|(
name|operation
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestDir
annotation|@
name|TestJetty
annotation|@
name|TestHdfs
DECL|method|testOperationDoAs ()
specifier|public
name|void
name|testOperationDoAs
parameter_list|()
throws|throws
name|Exception
block|{
name|createHttpFSServer
argument_list|()
expr_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createProxyUser
argument_list|(
name|HadoopUsersConfTestHelper
operator|.
name|getHadoopUsers
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
argument_list|)
decl_stmt|;
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|operation
argument_list|(
name|operation
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreateSnapshot (String snapshotName)
specifier|private
name|void
name|testCreateSnapshot
parameter_list|(
name|String
name|snapshotName
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|isLocalFS
argument_list|()
condition|)
block|{
name|Path
name|snapshottablePath
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp/tmp-snap-test"
argument_list|)
decl_stmt|;
name|createSnapshotTestsPreconditions
argument_list|(
name|snapshottablePath
argument_list|)
expr_stmt|;
comment|//Now get the FileSystem instance that's being tested
name|FileSystem
name|fs
init|=
name|this
operator|.
name|getHttpFSFileSystem
argument_list|()
decl_stmt|;
if|if
condition|(
name|snapshotName
operator|==
literal|null
condition|)
block|{
name|fs
operator|.
name|createSnapshot
argument_list|(
name|snapshottablePath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fs
operator|.
name|createSnapshot
argument_list|(
name|snapshottablePath
argument_list|,
name|snapshotName
argument_list|)
expr_stmt|;
block|}
name|Path
name|snapshotsDir
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp/tmp-snap-test/.snapshot"
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|snapshotItems
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|snapshotsDir
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Should have exactly one snapshot."
argument_list|,
name|snapshotItems
operator|.
name|length
operator|==
literal|1
argument_list|)
expr_stmt|;
name|String
name|resultingSnapName
init|=
name|snapshotItems
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|snapshotName
operator|==
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Snapshot auto generated name not matching pattern"
argument_list|,
name|Pattern
operator|.
name|matches
argument_list|(
literal|"(s)(\\d{8})(-)(\\d{6})(\\.)(\\d{3})"
argument_list|,
name|resultingSnapName
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
literal|"Snapshot name is not same as passed name."
argument_list|,
name|snapshotName
operator|.
name|equals
argument_list|(
name|resultingSnapName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|cleanSnapshotTests
argument_list|(
name|snapshottablePath
argument_list|,
name|resultingSnapName
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCreateSnapshot ()
specifier|private
name|void
name|testCreateSnapshot
parameter_list|()
throws|throws
name|Exception
block|{
name|testCreateSnapshot
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|testCreateSnapshot
argument_list|(
literal|"snap-with-name"
argument_list|)
expr_stmt|;
block|}
DECL|method|createSnapshotTestsPreconditions (Path snapshottablePath, Boolean allowSnapshot)
specifier|private
name|void
name|createSnapshotTestsPreconditions
parameter_list|(
name|Path
name|snapshottablePath
parameter_list|,
name|Boolean
name|allowSnapshot
parameter_list|)
throws|throws
name|Exception
block|{
comment|//Needed to get a DistributedFileSystem instance, in order to
comment|//call allowSnapshot on the newly created directory
name|DistributedFileSystem
name|distributedFs
init|=
operator|(
name|DistributedFileSystem
operator|)
name|FileSystem
operator|.
name|get
argument_list|(
name|snapshottablePath
operator|.
name|toUri
argument_list|()
argument_list|,
name|this
operator|.
name|getProxiedFSConf
argument_list|()
argument_list|)
decl_stmt|;
name|distributedFs
operator|.
name|mkdirs
argument_list|(
name|snapshottablePath
argument_list|)
expr_stmt|;
if|if
condition|(
name|allowSnapshot
condition|)
block|{
name|distributedFs
operator|.
name|allowSnapshot
argument_list|(
name|snapshottablePath
argument_list|)
expr_stmt|;
block|}
name|Path
name|subdirPath
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp/tmp-snap-test/subdir"
argument_list|)
decl_stmt|;
name|distributedFs
operator|.
name|mkdirs
argument_list|(
name|subdirPath
argument_list|)
expr_stmt|;
block|}
DECL|method|createSnapshotTestsPreconditions (Path snapshottablePath)
specifier|private
name|void
name|createSnapshotTestsPreconditions
parameter_list|(
name|Path
name|snapshottablePath
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Allow snapshot by default for snapshot test
name|createSnapshotTestsPreconditions
argument_list|(
name|snapshottablePath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|cleanSnapshotTests (Path snapshottablePath, String resultingSnapName)
specifier|private
name|void
name|cleanSnapshotTests
parameter_list|(
name|Path
name|snapshottablePath
parameter_list|,
name|String
name|resultingSnapName
parameter_list|)
throws|throws
name|Exception
block|{
name|DistributedFileSystem
name|distributedFs
init|=
operator|(
name|DistributedFileSystem
operator|)
name|FileSystem
operator|.
name|get
argument_list|(
name|snapshottablePath
operator|.
name|toUri
argument_list|()
argument_list|,
name|this
operator|.
name|getProxiedFSConf
argument_list|()
argument_list|)
decl_stmt|;
name|distributedFs
operator|.
name|deleteSnapshot
argument_list|(
name|snapshottablePath
argument_list|,
name|resultingSnapName
argument_list|)
expr_stmt|;
name|distributedFs
operator|.
name|delete
argument_list|(
name|snapshottablePath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testRenameSnapshot ()
specifier|private
name|void
name|testRenameSnapshot
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|isLocalFS
argument_list|()
condition|)
block|{
name|Path
name|snapshottablePath
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp/tmp-snap-test"
argument_list|)
decl_stmt|;
name|createSnapshotTestsPreconditions
argument_list|(
name|snapshottablePath
argument_list|)
expr_stmt|;
comment|//Now get the FileSystem instance that's being tested
name|FileSystem
name|fs
init|=
name|this
operator|.
name|getHttpFSFileSystem
argument_list|()
decl_stmt|;
name|fs
operator|.
name|createSnapshot
argument_list|(
name|snapshottablePath
argument_list|,
literal|"snap-to-rename"
argument_list|)
expr_stmt|;
name|fs
operator|.
name|renameSnapshot
argument_list|(
name|snapshottablePath
argument_list|,
literal|"snap-to-rename"
argument_list|,
literal|"snap-new-name"
argument_list|)
expr_stmt|;
name|Path
name|snapshotsDir
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp/tmp-snap-test/.snapshot"
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|snapshotItems
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|snapshotsDir
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Should have exactly one snapshot."
argument_list|,
name|snapshotItems
operator|.
name|length
operator|==
literal|1
argument_list|)
expr_stmt|;
name|String
name|resultingSnapName
init|=
name|snapshotItems
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Snapshot name is not same as passed name."
argument_list|,
literal|"snap-new-name"
operator|.
name|equals
argument_list|(
name|resultingSnapName
argument_list|)
argument_list|)
expr_stmt|;
name|cleanSnapshotTests
argument_list|(
name|snapshottablePath
argument_list|,
name|resultingSnapName
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testDeleteSnapshot ()
specifier|private
name|void
name|testDeleteSnapshot
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|isLocalFS
argument_list|()
condition|)
block|{
name|Path
name|snapshottablePath
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp/tmp-snap-test"
argument_list|)
decl_stmt|;
name|createSnapshotTestsPreconditions
argument_list|(
name|snapshottablePath
argument_list|)
expr_stmt|;
comment|//Now get the FileSystem instance that's being tested
name|FileSystem
name|fs
init|=
name|this
operator|.
name|getHttpFSFileSystem
argument_list|()
decl_stmt|;
name|fs
operator|.
name|createSnapshot
argument_list|(
name|snapshottablePath
argument_list|,
literal|"snap-to-delete"
argument_list|)
expr_stmt|;
name|Path
name|snapshotsDir
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp/tmp-snap-test/.snapshot"
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|snapshotItems
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|snapshotsDir
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Should have exactly one snapshot."
argument_list|,
name|snapshotItems
operator|.
name|length
operator|==
literal|1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|deleteSnapshot
argument_list|(
name|snapshottablePath
argument_list|,
literal|"snap-to-delete"
argument_list|)
expr_stmt|;
name|snapshotItems
operator|=
name|fs
operator|.
name|listStatus
argument_list|(
name|snapshotsDir
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"There should be no snapshot anymore."
argument_list|,
name|snapshotItems
operator|.
name|length
operator|==
literal|0
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|snapshottablePath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testAllowSnapshot ()
specifier|private
name|void
name|testAllowSnapshot
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|isLocalFS
argument_list|()
condition|)
block|{
comment|// Create a directory with snapshot disallowed
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp/tmp-snap-test"
argument_list|)
decl_stmt|;
name|createSnapshotTestsPreconditions
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Get the FileSystem instance that's being tested
name|FileSystem
name|fs
init|=
name|this
operator|.
name|getHttpFSFileSystem
argument_list|()
decl_stmt|;
comment|// Check FileStatus
name|assertFalse
argument_list|(
literal|"Snapshot should be disallowed by default"
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|isSnapshotEnabled
argument_list|()
argument_list|)
expr_stmt|;
comment|// Allow snapshot
if|if
condition|(
name|fs
operator|instanceof
name|HttpFSFileSystem
condition|)
block|{
name|HttpFSFileSystem
name|httpFS
init|=
operator|(
name|HttpFSFileSystem
operator|)
name|fs
decl_stmt|;
name|httpFS
operator|.
name|allowSnapshot
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fs
operator|instanceof
name|WebHdfsFileSystem
condition|)
block|{
name|WebHdfsFileSystem
name|webHdfsFileSystem
init|=
operator|(
name|WebHdfsFileSystem
operator|)
name|fs
decl_stmt|;
name|webHdfsFileSystem
operator|.
name|allowSnapshot
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|fs
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" doesn't support allowSnapshot"
argument_list|)
expr_stmt|;
block|}
comment|// Check FileStatus
name|assertTrue
argument_list|(
literal|"allowSnapshot failed"
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|isSnapshotEnabled
argument_list|()
argument_list|)
expr_stmt|;
comment|// Cleanup
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testDisallowSnapshot ()
specifier|private
name|void
name|testDisallowSnapshot
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|isLocalFS
argument_list|()
condition|)
block|{
comment|// Create a directory with snapshot allowed
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp/tmp-snap-test"
argument_list|)
decl_stmt|;
name|createSnapshotTestsPreconditions
argument_list|(
name|path
argument_list|)
expr_stmt|;
comment|// Get the FileSystem instance that's being tested
name|FileSystem
name|fs
init|=
name|this
operator|.
name|getHttpFSFileSystem
argument_list|()
decl_stmt|;
comment|// Check FileStatus
name|assertTrue
argument_list|(
literal|"Snapshot should be allowed by DFS"
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|isSnapshotEnabled
argument_list|()
argument_list|)
expr_stmt|;
comment|// Disallow snapshot
if|if
condition|(
name|fs
operator|instanceof
name|HttpFSFileSystem
condition|)
block|{
name|HttpFSFileSystem
name|httpFS
init|=
operator|(
name|HttpFSFileSystem
operator|)
name|fs
decl_stmt|;
name|httpFS
operator|.
name|disallowSnapshot
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fs
operator|instanceof
name|WebHdfsFileSystem
condition|)
block|{
name|WebHdfsFileSystem
name|webHdfsFileSystem
init|=
operator|(
name|WebHdfsFileSystem
operator|)
name|fs
decl_stmt|;
name|webHdfsFileSystem
operator|.
name|disallowSnapshot
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|fs
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" doesn't support disallowSnapshot"
argument_list|)
expr_stmt|;
block|}
comment|// Check FileStatus
name|assertFalse
argument_list|(
literal|"disallowSnapshot failed"
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|isSnapshotEnabled
argument_list|()
argument_list|)
expr_stmt|;
comment|// Cleanup
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testDisallowSnapshotException ()
specifier|private
name|void
name|testDisallowSnapshotException
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|isLocalFS
argument_list|()
condition|)
block|{
comment|// Create a directory with snapshot allowed
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp/tmp-snap-test"
argument_list|)
decl_stmt|;
name|createSnapshotTestsPreconditions
argument_list|(
name|path
argument_list|)
expr_stmt|;
comment|// Get the FileSystem instance that's being tested
name|FileSystem
name|fs
init|=
name|this
operator|.
name|getHttpFSFileSystem
argument_list|()
decl_stmt|;
comment|// Check FileStatus
name|assertTrue
argument_list|(
literal|"Snapshot should be allowed by DFS"
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|isSnapshotEnabled
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create some snapshots
name|fs
operator|.
name|createSnapshot
argument_list|(
name|path
argument_list|,
literal|"snap-01"
argument_list|)
expr_stmt|;
name|fs
operator|.
name|createSnapshot
argument_list|(
name|path
argument_list|,
literal|"snap-02"
argument_list|)
expr_stmt|;
comment|// Disallow snapshot
name|boolean
name|disallowSuccess
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|fs
operator|instanceof
name|HttpFSFileSystem
condition|)
block|{
name|HttpFSFileSystem
name|httpFS
init|=
operator|(
name|HttpFSFileSystem
operator|)
name|fs
decl_stmt|;
try|try
block|{
name|httpFS
operator|.
name|disallowSnapshot
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|disallowSuccess
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SnapshotException
name|e
parameter_list|)
block|{
comment|// Expect SnapshotException
block|}
block|}
elseif|else
if|if
condition|(
name|fs
operator|instanceof
name|WebHdfsFileSystem
condition|)
block|{
name|WebHdfsFileSystem
name|webHdfsFileSystem
init|=
operator|(
name|WebHdfsFileSystem
operator|)
name|fs
decl_stmt|;
try|try
block|{
name|webHdfsFileSystem
operator|.
name|disallowSnapshot
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|disallowSuccess
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SnapshotException
name|e
parameter_list|)
block|{
comment|// Expect SnapshotException
block|}
block|}
else|else
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|fs
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" doesn't support disallowSnapshot"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|disallowSuccess
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"disallowSnapshot doesn't throw SnapshotException when "
operator|+
literal|"disallowing snapshot on a directory with at least one snapshot"
argument_list|)
expr_stmt|;
block|}
comment|// Check FileStatus, should still be enabled since
comment|// disallow snapshot should fail
name|assertTrue
argument_list|(
literal|"disallowSnapshot should not have succeeded"
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|isSnapshotEnabled
argument_list|()
argument_list|)
expr_stmt|;
comment|// Cleanup
name|fs
operator|.
name|deleteSnapshot
argument_list|(
name|path
argument_list|,
literal|"snap-02"
argument_list|)
expr_stmt|;
name|fs
operator|.
name|deleteSnapshot
argument_list|(
name|path
argument_list|,
literal|"snap-01"
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

