begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.lib.lang
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|lib
operator|.
name|lang
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|HTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestXException
specifier|public
class|class
name|TestXException
extends|extends
name|HTestCase
block|{
DECL|enum|TestERROR
specifier|public
specifier|static
enum|enum
name|TestERROR
implements|implements
name|XException
operator|.
name|ERROR
block|{
DECL|enumConstant|TC
name|TC
block|;
annotation|@
name|Override
DECL|method|getTemplate ()
specifier|public
name|String
name|getTemplate
parameter_list|()
block|{
return|return
literal|"{0}"
return|;
block|}
block|}
annotation|@
name|Test
DECL|method|testXException ()
specifier|public
name|void
name|testXException
parameter_list|()
throws|throws
name|Exception
block|{
name|XException
name|ex
init|=
operator|new
name|XException
argument_list|(
name|TestERROR
operator|.
name|TC
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ex
operator|.
name|getError
argument_list|()
argument_list|,
name|TestERROR
operator|.
name|TC
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"TC: {0}"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|ex
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|ex
operator|=
operator|new
name|XException
argument_list|(
name|TestERROR
operator|.
name|TC
argument_list|,
literal|"msg"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ex
operator|.
name|getError
argument_list|()
argument_list|,
name|TestERROR
operator|.
name|TC
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"TC: msg"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|ex
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|Exception
name|cause
init|=
operator|new
name|Exception
argument_list|()
decl_stmt|;
name|ex
operator|=
operator|new
name|XException
argument_list|(
name|TestERROR
operator|.
name|TC
argument_list|,
name|cause
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ex
operator|.
name|getError
argument_list|()
argument_list|,
name|TestERROR
operator|.
name|TC
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"TC: "
operator|+
name|cause
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ex
operator|.
name|getCause
argument_list|()
argument_list|,
name|cause
argument_list|)
expr_stmt|;
name|XException
name|xcause
init|=
name|ex
decl_stmt|;
name|ex
operator|=
operator|new
name|XException
argument_list|(
name|xcause
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ex
operator|.
name|getError
argument_list|()
argument_list|,
name|TestERROR
operator|.
name|TC
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|xcause
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ex
operator|.
name|getCause
argument_list|()
argument_list|,
name|xcause
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

