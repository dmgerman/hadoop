begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.lib.wsrs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|lib
operator|.
name|wsrs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|TestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|TestExceptionHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|MethodRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|MDC
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|core
operator|.
name|HttpContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|core
operator|.
name|HttpRequestContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|core
operator|.
name|spi
operator|.
name|component
operator|.
name|ComponentScope
import|;
end_import

begin_class
DECL|class|TestUserProvider
specifier|public
class|class
name|TestUserProvider
block|{
annotation|@
name|Rule
DECL|field|exceptionHelper
specifier|public
name|MethodRule
name|exceptionHelper
init|=
operator|new
name|TestExceptionHelper
argument_list|()
decl_stmt|;
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|noUser ()
specifier|public
name|void
name|noUser
parameter_list|()
block|{
name|MDC
operator|.
name|remove
argument_list|(
literal|"user"
argument_list|)
expr_stmt|;
name|HttpRequestContext
name|request
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpRequestContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|request
operator|.
name|getUserPrincipal
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|MultivaluedMap
name|map
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|MultivaluedMap
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|map
operator|.
name|getFirst
argument_list|(
name|UserProvider
operator|.
name|USER_NAME_PARAM
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|request
operator|.
name|getQueryParameters
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|HttpContext
name|context
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|context
operator|.
name|getRequest
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|UserProvider
name|up
init|=
operator|new
name|UserProvider
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|up
operator|.
name|getValue
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|MDC
operator|.
name|get
argument_list|(
literal|"user"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|queryStringUser ()
specifier|public
name|void
name|queryStringUser
parameter_list|()
block|{
name|MDC
operator|.
name|remove
argument_list|(
literal|"user"
argument_list|)
expr_stmt|;
name|HttpRequestContext
name|request
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpRequestContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|request
operator|.
name|getUserPrincipal
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|MultivaluedMap
name|map
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|MultivaluedMap
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|map
operator|.
name|getFirst
argument_list|(
name|UserProvider
operator|.
name|USER_NAME_PARAM
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|request
operator|.
name|getQueryParameters
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|HttpContext
name|context
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|context
operator|.
name|getRequest
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|UserProvider
name|up
init|=
operator|new
name|UserProvider
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|up
operator|.
name|getValue
argument_list|(
name|context
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MDC
operator|.
name|get
argument_list|(
literal|"user"
argument_list|)
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|principalUser ()
specifier|public
name|void
name|principalUser
parameter_list|()
block|{
name|MDC
operator|.
name|remove
argument_list|(
literal|"user"
argument_list|)
expr_stmt|;
name|HttpRequestContext
name|request
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpRequestContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|request
operator|.
name|getUserPrincipal
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Principal
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"bar"
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|HttpContext
name|context
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|context
operator|.
name|getRequest
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|UserProvider
name|up
init|=
operator|new
name|UserProvider
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|up
operator|.
name|getValue
argument_list|(
name|context
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MDC
operator|.
name|get
argument_list|(
literal|"user"
argument_list|)
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getters ()
specifier|public
name|void
name|getters
parameter_list|()
block|{
name|UserProvider
name|up
init|=
operator|new
name|UserProvider
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|up
operator|.
name|getScope
argument_list|()
argument_list|,
name|ComponentScope
operator|.
name|PerRequest
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|up
operator|.
name|getInjectable
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|Principal
operator|.
name|class
argument_list|)
argument_list|,
name|up
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|up
operator|.
name|getInjectable
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestException
argument_list|(
name|exception
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|userNameEmpty ()
specifier|public
name|void
name|userNameEmpty
parameter_list|()
block|{
name|UserProvider
operator|.
name|UserParam
name|userParam
init|=
operator|new
name|UserProvider
operator|.
name|UserParam
argument_list|(
literal|"username"
argument_list|)
decl_stmt|;
name|userParam
operator|.
name|parseParam
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestException
argument_list|(
name|exception
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|userNameInvalidStart ()
specifier|public
name|void
name|userNameInvalidStart
parameter_list|()
block|{
name|UserProvider
operator|.
name|UserParam
name|userParam
init|=
operator|new
name|UserProvider
operator|.
name|UserParam
argument_list|(
literal|"username"
argument_list|)
decl_stmt|;
name|userParam
operator|.
name|parseParam
argument_list|(
literal|"1x"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestException
argument_list|(
name|exception
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|userNameInvalidDollarSign ()
specifier|public
name|void
name|userNameInvalidDollarSign
parameter_list|()
block|{
name|UserProvider
operator|.
name|UserParam
name|userParam
init|=
operator|new
name|UserProvider
operator|.
name|UserParam
argument_list|(
literal|"username"
argument_list|)
decl_stmt|;
name|userParam
operator|.
name|parseParam
argument_list|(
literal|"1$x"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|userNameMinLength ()
specifier|public
name|void
name|userNameMinLength
parameter_list|()
block|{
name|UserProvider
operator|.
name|UserParam
name|userParam
init|=
operator|new
name|UserProvider
operator|.
name|UserParam
argument_list|(
literal|"username"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|userParam
operator|.
name|parseParam
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|userNameValidDollarSign ()
specifier|public
name|void
name|userNameValidDollarSign
parameter_list|()
block|{
name|UserProvider
operator|.
name|UserParam
name|userParam
init|=
operator|new
name|UserProvider
operator|.
name|UserParam
argument_list|(
literal|"username"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|userParam
operator|.
name|parseParam
argument_list|(
literal|"a$"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

