begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.lib.lang
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|lib
operator|.
name|lang
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|HTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_class
DECL|class|TestRunnableCallable
specifier|public
class|class
name|TestRunnableCallable
extends|extends
name|HTestCase
block|{
DECL|class|R
specifier|public
specifier|static
class|class
name|R
implements|implements
name|Runnable
block|{
DECL|field|RUN
name|boolean
name|RUN
decl_stmt|;
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|RUN
operator|=
literal|true
expr_stmt|;
block|}
block|}
DECL|class|C
specifier|public
specifier|static
class|class
name|C
implements|implements
name|Callable
block|{
DECL|field|RUN
name|boolean
name|RUN
decl_stmt|;
annotation|@
name|Override
DECL|method|call ()
specifier|public
name|Object
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|RUN
operator|=
literal|true
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
DECL|class|CEx
specifier|public
specifier|static
class|class
name|CEx
implements|implements
name|Callable
block|{
annotation|@
name|Override
DECL|method|call ()
specifier|public
name|Object
name|call
parameter_list|()
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|Exception
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Test
DECL|method|runnable ()
specifier|public
name|void
name|runnable
parameter_list|()
throws|throws
name|Exception
block|{
name|R
name|r
init|=
operator|new
name|R
argument_list|()
decl_stmt|;
name|RunnableCallable
name|rc
init|=
operator|new
name|RunnableCallable
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|rc
operator|.
name|run
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|r
operator|.
name|RUN
argument_list|)
expr_stmt|;
name|r
operator|=
operator|new
name|R
argument_list|()
expr_stmt|;
name|rc
operator|=
operator|new
name|RunnableCallable
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|rc
operator|.
name|call
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|r
operator|.
name|RUN
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rc
operator|.
name|toString
argument_list|()
argument_list|,
literal|"R"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|callable ()
specifier|public
name|void
name|callable
parameter_list|()
throws|throws
name|Exception
block|{
name|C
name|c
init|=
operator|new
name|C
argument_list|()
decl_stmt|;
name|RunnableCallable
name|rc
init|=
operator|new
name|RunnableCallable
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|rc
operator|.
name|run
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|c
operator|.
name|RUN
argument_list|)
expr_stmt|;
name|c
operator|=
operator|new
name|C
argument_list|()
expr_stmt|;
name|rc
operator|=
operator|new
name|RunnableCallable
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|rc
operator|.
name|call
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|c
operator|.
name|RUN
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rc
operator|.
name|toString
argument_list|()
argument_list|,
literal|"C"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|RuntimeException
operator|.
name|class
argument_list|)
DECL|method|callableExRun ()
specifier|public
name|void
name|callableExRun
parameter_list|()
throws|throws
name|Exception
block|{
name|CEx
name|c
init|=
operator|new
name|CEx
argument_list|()
decl_stmt|;
name|RunnableCallable
name|rc
init|=
operator|new
name|RunnableCallable
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|rc
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

