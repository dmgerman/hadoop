begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.lib.wsrs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|lib
operator|.
name|wsrs
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestEnumParam
specifier|public
class|class
name|TestEnumParam
block|{
DECL|enum|ENUM
specifier|public
specifier|static
enum|enum
name|ENUM
block|{
DECL|enumConstant|FOO
DECL|enumConstant|BAR
name|FOO
block|,
name|BAR
block|}
annotation|@
name|Test
DECL|method|param ()
specifier|public
name|void
name|param
parameter_list|()
throws|throws
name|Exception
block|{
name|EnumParam
argument_list|<
name|ENUM
argument_list|>
name|param
init|=
operator|new
name|EnumParam
argument_list|<
name|ENUM
argument_list|>
argument_list|(
literal|"p"
argument_list|,
literal|"FOO"
argument_list|,
name|ENUM
operator|.
name|class
argument_list|)
block|{     }
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|param
operator|.
name|getDomain
argument_list|()
argument_list|,
literal|"FOO,BAR"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|param
operator|.
name|value
argument_list|()
argument_list|,
name|ENUM
operator|.
name|FOO
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|param
operator|.
name|toString
argument_list|()
argument_list|,
literal|"FOO"
argument_list|)
expr_stmt|;
name|param
operator|=
operator|new
name|EnumParam
argument_list|<
name|ENUM
argument_list|>
argument_list|(
literal|"p"
argument_list|,
literal|null
argument_list|,
name|ENUM
operator|.
name|class
argument_list|)
block|{     }
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|param
operator|.
name|value
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|param
operator|=
operator|new
name|EnumParam
argument_list|<
name|ENUM
argument_list|>
argument_list|(
literal|"p"
argument_list|,
literal|""
argument_list|,
name|ENUM
operator|.
name|class
argument_list|)
block|{     }
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|param
operator|.
name|value
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|invalid1 ()
specifier|public
name|void
name|invalid1
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|EnumParam
argument_list|<
name|ENUM
argument_list|>
argument_list|(
literal|"p"
argument_list|,
literal|"x"
argument_list|,
name|ENUM
operator|.
name|class
argument_list|)
block|{     }
expr_stmt|;
block|}
block|}
end_class

end_unit

