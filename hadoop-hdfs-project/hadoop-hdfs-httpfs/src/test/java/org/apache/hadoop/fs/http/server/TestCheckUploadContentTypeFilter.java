begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.http.server
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|http
operator|.
name|server
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|http
operator|.
name|client
operator|.
name|HttpFSFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterChain
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_class
DECL|class|TestCheckUploadContentTypeFilter
specifier|public
class|class
name|TestCheckUploadContentTypeFilter
block|{
annotation|@
name|Test
DECL|method|putUpload ()
specifier|public
name|void
name|putUpload
parameter_list|()
throws|throws
name|Exception
block|{
name|test
argument_list|(
literal|"PUT"
argument_list|,
name|HttpFSFileSystem
operator|.
name|PutOpValues
operator|.
name|CREATE
operator|.
name|toString
argument_list|()
argument_list|,
literal|"application/octet-stream"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|postUpload ()
specifier|public
name|void
name|postUpload
parameter_list|()
throws|throws
name|Exception
block|{
name|test
argument_list|(
literal|"POST"
argument_list|,
name|HttpFSFileSystem
operator|.
name|PostOpValues
operator|.
name|APPEND
operator|.
name|toString
argument_list|()
argument_list|,
literal|"APPLICATION/OCTET-STREAM"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|putUploadWrong ()
specifier|public
name|void
name|putUploadWrong
parameter_list|()
throws|throws
name|Exception
block|{
name|test
argument_list|(
literal|"PUT"
argument_list|,
name|HttpFSFileSystem
operator|.
name|PutOpValues
operator|.
name|CREATE
operator|.
name|toString
argument_list|()
argument_list|,
literal|"plain/text"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|test
argument_list|(
literal|"PUT"
argument_list|,
name|HttpFSFileSystem
operator|.
name|PutOpValues
operator|.
name|CREATE
operator|.
name|toString
argument_list|()
argument_list|,
literal|"plain/text"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|postUploadWrong ()
specifier|public
name|void
name|postUploadWrong
parameter_list|()
throws|throws
name|Exception
block|{
name|test
argument_list|(
literal|"POST"
argument_list|,
name|HttpFSFileSystem
operator|.
name|PostOpValues
operator|.
name|APPEND
operator|.
name|toString
argument_list|()
argument_list|,
literal|"plain/text"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|test
argument_list|(
literal|"POST"
argument_list|,
name|HttpFSFileSystem
operator|.
name|PostOpValues
operator|.
name|APPEND
operator|.
name|toString
argument_list|()
argument_list|,
literal|"plain/text"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getOther ()
specifier|public
name|void
name|getOther
parameter_list|()
throws|throws
name|Exception
block|{
name|test
argument_list|(
literal|"GET"
argument_list|,
name|HttpFSFileSystem
operator|.
name|GetOpValues
operator|.
name|GETHOMEDIR
operator|.
name|toString
argument_list|()
argument_list|,
literal|"plain/text"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|putOther ()
specifier|public
name|void
name|putOther
parameter_list|()
throws|throws
name|Exception
block|{
name|test
argument_list|(
literal|"PUT"
argument_list|,
name|HttpFSFileSystem
operator|.
name|PutOpValues
operator|.
name|MKDIRS
operator|.
name|toString
argument_list|()
argument_list|,
literal|"plain/text"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|test (String method, String operation, String contentType, boolean upload, boolean error)
specifier|private
name|void
name|test
parameter_list|(
name|String
name|method
parameter_list|,
name|String
name|operation
parameter_list|,
name|String
name|contentType
parameter_list|,
name|boolean
name|upload
parameter_list|,
name|boolean
name|error
parameter_list|)
throws|throws
name|Exception
block|{
name|HttpServletRequest
name|request
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|HttpServletResponse
name|response
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpServletResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|reset
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|request
operator|.
name|getMethod
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|method
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
name|HttpFSFileSystem
operator|.
name|OP_PARAM
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|operation
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
name|HttpFSParams
operator|.
name|DataParam
operator|.
name|NAME
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Boolean
operator|.
name|toString
argument_list|(
name|upload
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|request
operator|.
name|getContentType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|contentType
argument_list|)
expr_stmt|;
name|FilterChain
name|chain
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|FilterChain
operator|.
name|class
argument_list|)
decl_stmt|;
name|Filter
name|filter
init|=
operator|new
name|CheckUploadContentTypeFilter
argument_list|()
decl_stmt|;
name|filter
operator|.
name|doFilter
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
name|chain
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
condition|)
block|{
name|Mockito
operator|.
name|verify
argument_list|(
name|response
argument_list|)
operator|.
name|sendError
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
name|HttpServletResponse
operator|.
name|SC_BAD_REQUEST
argument_list|)
argument_list|,
name|Mockito
operator|.
name|contains
argument_list|(
literal|"Data upload"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Mockito
operator|.
name|verify
argument_list|(
name|chain
argument_list|)
operator|.
name|doFilter
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

