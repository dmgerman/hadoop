begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.http.server
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|http
operator|.
name|server
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshotDiffReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshottableDirectoryStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|JsonUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|lib
operator|.
name|service
operator|.
name|FileSystemAccess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|util
operator|.
name|SignerSecretProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|util
operator|.
name|StringSignerSecretProviderCreator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|AbstractDelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|web
operator|.
name|DelegationTokenAuthenticator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|web
operator|.
name|KerberosDelegationTokenAuthenticationHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|simple
operator|.
name|JSONArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|MessageFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|XAttrCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|http
operator|.
name|server
operator|.
name|HttpFSParametersProvider
operator|.
name|DataParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|http
operator|.
name|server
operator|.
name|HttpFSParametersProvider
operator|.
name|NoRedirectParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|WebHdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|lib
operator|.
name|server
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|lib
operator|.
name|server
operator|.
name|ServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|lib
operator|.
name|service
operator|.
name|Groups
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|client
operator|.
name|AuthenticatedURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
operator|.
name|AuthenticationToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|util
operator|.
name|Signer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|HFSTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|HadoopUsersConfTestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|TestDir
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|TestDirHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|TestHdfs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|TestHdfsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|TestJetty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|TestJettyHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|simple
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|simple
operator|.
name|parser
operator|.
name|JSONParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|webapp
operator|.
name|WebAppContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|HttpMethod
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
operator|.
name|AuthenticationFilter
import|;
end_import

begin_comment
comment|/**  * Main test class for HttpFSServer.  */
end_comment

begin_class
DECL|class|TestHttpFSServer
specifier|public
class|class
name|TestHttpFSServer
extends|extends
name|HFSTestCase
block|{
annotation|@
name|Test
annotation|@
name|TestDir
annotation|@
name|TestJetty
DECL|method|server ()
specifier|public
name|void
name|server
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dir
init|=
name|TestDirHelper
operator|.
name|getTestDir
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|Configuration
name|httpfsConf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|HttpFSServerWebApp
name|server
init|=
operator|new
name|HttpFSServerWebApp
argument_list|(
name|dir
argument_list|,
name|dir
argument_list|,
name|dir
argument_list|,
name|dir
argument_list|,
name|httpfsConf
argument_list|)
decl_stmt|;
name|server
operator|.
name|init
argument_list|()
expr_stmt|;
name|server
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
comment|/**    * Mock groups.    */
DECL|class|MockGroups
specifier|public
specifier|static
class|class
name|MockGroups
implements|implements
name|Service
implements|,
name|Groups
block|{
annotation|@
name|Override
DECL|method|init (org.apache.hadoop.lib.server.Server server)
specifier|public
name|void
name|init
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|lib
operator|.
name|server
operator|.
name|Server
name|server
parameter_list|)
throws|throws
name|ServiceException
block|{     }
annotation|@
name|Override
DECL|method|postInit ()
specifier|public
name|void
name|postInit
parameter_list|()
throws|throws
name|ServiceException
block|{     }
annotation|@
name|Override
DECL|method|destroy ()
specifier|public
name|void
name|destroy
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|getServiceDependencies ()
specifier|public
name|Class
index|[]
name|getServiceDependencies
parameter_list|()
block|{
return|return
operator|new
name|Class
index|[
literal|0
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|getInterface ()
specifier|public
name|Class
name|getInterface
parameter_list|()
block|{
return|return
name|Groups
operator|.
name|class
return|;
block|}
annotation|@
name|Override
DECL|method|serverStatusChange ( org.apache.hadoop.lib.server.Server.Status oldStatus, org.apache.hadoop.lib.server.Server.Status newStatus)
specifier|public
name|void
name|serverStatusChange
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|lib
operator|.
name|server
operator|.
name|Server
operator|.
name|Status
name|oldStatus
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|lib
operator|.
name|server
operator|.
name|Server
operator|.
name|Status
name|newStatus
parameter_list|)
throws|throws
name|ServiceException
block|{     }
annotation|@
name|Override
DECL|method|getGroups (String user)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getGroups
parameter_list|(
name|String
name|user
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|HadoopUsersConfTestHelper
operator|.
name|getHadoopUserGroups
argument_list|(
name|user
argument_list|)
argument_list|)
return|;
block|}
block|}
DECL|method|createHttpFSConf (boolean addDelegationTokenAuthHandler, boolean sslEnabled)
specifier|private
name|Configuration
name|createHttpFSConf
parameter_list|(
name|boolean
name|addDelegationTokenAuthHandler
parameter_list|,
name|boolean
name|sslEnabled
parameter_list|)
throws|throws
name|Exception
block|{
name|File
name|homeDir
init|=
name|TestDirHelper
operator|.
name|getTestDir
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|homeDir
argument_list|,
literal|"conf"
argument_list|)
operator|.
name|mkdir
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|homeDir
argument_list|,
literal|"log"
argument_list|)
operator|.
name|mkdir
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|homeDir
argument_list|,
literal|"temp"
argument_list|)
operator|.
name|mkdir
argument_list|()
argument_list|)
expr_stmt|;
name|HttpFSServerWebApp
operator|.
name|setHomeDirForCurrentThread
argument_list|(
name|homeDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|secretFile
init|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|homeDir
argument_list|,
literal|"conf"
argument_list|)
argument_list|,
literal|"secret"
argument_list|)
decl_stmt|;
name|Writer
name|w
init|=
operator|new
name|FileWriter
argument_list|(
name|secretFile
argument_list|)
decl_stmt|;
name|w
operator|.
name|write
argument_list|(
literal|"secret"
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// HDFS configuration
name|File
name|hadoopConfDir
init|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|homeDir
argument_list|,
literal|"conf"
argument_list|)
argument_list|,
literal|"hadoop-conf"
argument_list|)
decl_stmt|;
name|hadoopConfDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|Configuration
name|hdfsConf
init|=
name|TestHdfsHelper
operator|.
name|getHdfsConf
argument_list|()
decl_stmt|;
comment|// Http Server's conf should be based on HDFS's conf
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
name|hdfsConf
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_ACLS_ENABLED_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_XATTRS_ENABLED_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|File
name|hdfsSite
init|=
operator|new
name|File
argument_list|(
name|hadoopConfDir
argument_list|,
literal|"hdfs-site.xml"
argument_list|)
decl_stmt|;
name|OutputStream
name|os
init|=
operator|new
name|FileOutputStream
argument_list|(
name|hdfsSite
argument_list|)
decl_stmt|;
name|conf
operator|.
name|writeXml
argument_list|(
name|os
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// HTTPFS configuration
name|conf
operator|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|addDelegationTokenAuthHandler
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
literal|"httpfs.authentication.type"
argument_list|,
name|HttpFSKerberosAuthenticationHandlerForTesting
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|set
argument_list|(
literal|"httpfs.services.ext"
argument_list|,
name|MockGroups
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"httpfs.admin.group"
argument_list|,
name|HadoopUsersConfTestHelper
operator|.
name|getHadoopUserGroups
argument_list|(
name|HadoopUsersConfTestHelper
operator|.
name|getHadoopUsers
argument_list|()
index|[
literal|0
index|]
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"httpfs.proxyuser."
operator|+
name|HadoopUsersConfTestHelper
operator|.
name|getHadoopProxyUser
argument_list|()
operator|+
literal|".groups"
argument_list|,
name|HadoopUsersConfTestHelper
operator|.
name|getHadoopProxyUserGroups
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"httpfs.proxyuser."
operator|+
name|HadoopUsersConfTestHelper
operator|.
name|getHadoopProxyUser
argument_list|()
operator|+
literal|".hosts"
argument_list|,
name|HadoopUsersConfTestHelper
operator|.
name|getHadoopProxyUserHosts
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"httpfs.authentication.signature.secret.file"
argument_list|,
name|secretFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"httpfs.hadoop.config.dir"
argument_list|,
name|hadoopConfDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|sslEnabled
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
literal|"httpfs.ssl.enabled"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
name|File
name|httpfsSite
init|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|homeDir
argument_list|,
literal|"conf"
argument_list|)
argument_list|,
literal|"httpfs-site.xml"
argument_list|)
decl_stmt|;
name|os
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|httpfsSite
argument_list|)
expr_stmt|;
name|conf
operator|.
name|writeXml
argument_list|(
name|os
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|conf
return|;
block|}
comment|/**    * Write configuration to a site file under Hadoop configuration dir.    */
DECL|method|writeConf (Configuration conf, String sitename)
specifier|private
name|void
name|writeConf
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|sitename
parameter_list|)
throws|throws
name|Exception
block|{
name|File
name|homeDir
init|=
name|TestDirHelper
operator|.
name|getTestDir
argument_list|()
decl_stmt|;
comment|// HDFS configuration
name|File
name|hadoopConfDir
init|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|homeDir
argument_list|,
literal|"conf"
argument_list|)
argument_list|,
literal|"hadoop-conf"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|hadoopConfDir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|siteFile
init|=
operator|new
name|File
argument_list|(
name|hadoopConfDir
argument_list|,
name|sitename
argument_list|)
decl_stmt|;
name|OutputStream
name|os
init|=
operator|new
name|FileOutputStream
argument_list|(
name|siteFile
argument_list|)
decl_stmt|;
name|conf
operator|.
name|writeXml
argument_list|(
name|os
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|createHttpFSServer (boolean addDelegationTokenAuthHandler, boolean sslEnabled)
specifier|private
name|Server
name|createHttpFSServer
parameter_list|(
name|boolean
name|addDelegationTokenAuthHandler
parameter_list|,
name|boolean
name|sslEnabled
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|createHttpFSConf
argument_list|(
name|addDelegationTokenAuthHandler
argument_list|,
name|sslEnabled
argument_list|)
decl_stmt|;
name|ClassLoader
name|cl
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
name|URL
name|url
init|=
name|cl
operator|.
name|getResource
argument_list|(
literal|"webapp"
argument_list|)
decl_stmt|;
name|WebAppContext
name|context
init|=
operator|new
name|WebAppContext
argument_list|(
name|url
operator|.
name|getPath
argument_list|()
argument_list|,
literal|"/webhdfs"
argument_list|)
decl_stmt|;
name|Server
name|server
init|=
name|TestJettyHelper
operator|.
name|getJettyServer
argument_list|()
decl_stmt|;
name|server
operator|.
name|setHandler
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
if|if
condition|(
name|addDelegationTokenAuthHandler
condition|)
block|{
name|HttpFSServerWebApp
operator|.
name|get
argument_list|()
operator|.
name|setAuthority
argument_list|(
name|TestJettyHelper
operator|.
name|getAuthority
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|server
return|;
block|}
DECL|method|getSignedTokenString ()
specifier|private
name|String
name|getSignedTokenString
parameter_list|()
throws|throws
name|Exception
block|{
name|AuthenticationToken
name|token
init|=
operator|new
name|AuthenticationToken
argument_list|(
literal|"u"
argument_list|,
literal|"p"
argument_list|,
operator|new
name|KerberosDelegationTokenAuthenticationHandler
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|token
operator|.
name|setExpires
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|100000000
argument_list|)
expr_stmt|;
name|SignerSecretProvider
name|secretProvider
init|=
name|StringSignerSecretProviderCreator
operator|.
name|newStringSignerSecretProvider
argument_list|()
decl_stmt|;
name|Properties
name|secretProviderProps
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|secretProviderProps
operator|.
name|setProperty
argument_list|(
name|AuthenticationFilter
operator|.
name|SIGNATURE_SECRET
argument_list|,
literal|"secret"
argument_list|)
expr_stmt|;
name|secretProvider
operator|.
name|init
argument_list|(
name|secretProviderProps
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Signer
name|signer
init|=
operator|new
name|Signer
argument_list|(
name|secretProvider
argument_list|)
decl_stmt|;
return|return
name|signer
operator|.
name|sign
argument_list|(
name|token
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
DECL|method|delegationTokenCommonTests (boolean sslEnabled)
specifier|private
name|void
name|delegationTokenCommonTests
parameter_list|(
name|boolean
name|sslEnabled
parameter_list|)
throws|throws
name|Exception
block|{
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|TestJettyHelper
operator|.
name|getJettyURL
argument_list|()
argument_list|,
literal|"/webhdfs/v1/?op=GETHOMEDIRECTORY"
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_UNAUTHORIZED
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|tokenSigned
init|=
name|getSignedTokenString
argument_list|()
decl_stmt|;
name|url
operator|=
operator|new
name|URL
argument_list|(
name|TestJettyHelper
operator|.
name|getJettyURL
argument_list|()
argument_list|,
literal|"/webhdfs/v1/?op=GETDELEGATIONTOKEN"
argument_list|)
expr_stmt|;
name|conn
operator|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|conn
operator|.
name|setRequestProperty
argument_list|(
literal|"Cookie"
argument_list|,
name|AuthenticatedURL
operator|.
name|AUTH_COOKIE
operator|+
literal|"="
operator|+
name|tokenSigned
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
operator|(
name|JSONObject
operator|)
operator|new
name|JSONParser
argument_list|()
operator|.
name|parse
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|conn
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|json
operator|=
operator|(
name|JSONObject
operator|)
name|json
operator|.
name|get
argument_list|(
name|DelegationTokenAuthenticator
operator|.
name|DELEGATION_TOKEN_JSON
argument_list|)
expr_stmt|;
name|String
name|tokenStr
init|=
operator|(
name|String
operator|)
name|json
operator|.
name|get
argument_list|(
name|DelegationTokenAuthenticator
operator|.
name|DELEGATION_TOKEN_URL_STRING_JSON
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|AbstractDelegationTokenIdentifier
argument_list|>
name|dToken
init|=
operator|new
name|Token
argument_list|<
name|AbstractDelegationTokenIdentifier
argument_list|>
argument_list|()
decl_stmt|;
name|dToken
operator|.
name|decodeFromUrlString
argument_list|(
name|tokenStr
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|sslEnabled
condition|?
name|WebHdfsConstants
operator|.
name|SWEBHDFS_TOKEN_KIND
else|:
name|WebHdfsConstants
operator|.
name|WEBHDFS_TOKEN_KIND
argument_list|,
name|dToken
operator|.
name|getKind
argument_list|()
argument_list|)
expr_stmt|;
name|url
operator|=
operator|new
name|URL
argument_list|(
name|TestJettyHelper
operator|.
name|getJettyURL
argument_list|()
argument_list|,
literal|"/webhdfs/v1/?op=GETHOMEDIRECTORY&delegation="
operator|+
name|tokenStr
argument_list|)
expr_stmt|;
name|conn
operator|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|url
operator|=
operator|new
name|URL
argument_list|(
name|TestJettyHelper
operator|.
name|getJettyURL
argument_list|()
argument_list|,
literal|"/webhdfs/v1/?op=RENEWDELEGATIONTOKEN&token="
operator|+
name|tokenStr
argument_list|)
expr_stmt|;
name|conn
operator|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|conn
operator|.
name|setRequestMethod
argument_list|(
literal|"PUT"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_UNAUTHORIZED
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|url
operator|=
operator|new
name|URL
argument_list|(
name|TestJettyHelper
operator|.
name|getJettyURL
argument_list|()
argument_list|,
literal|"/webhdfs/v1/?op=RENEWDELEGATIONTOKEN&token="
operator|+
name|tokenStr
argument_list|)
expr_stmt|;
name|conn
operator|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|conn
operator|.
name|setRequestMethod
argument_list|(
literal|"PUT"
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setRequestProperty
argument_list|(
literal|"Cookie"
argument_list|,
name|AuthenticatedURL
operator|.
name|AUTH_COOKIE
operator|+
literal|"="
operator|+
name|tokenSigned
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|url
operator|=
operator|new
name|URL
argument_list|(
name|TestJettyHelper
operator|.
name|getJettyURL
argument_list|()
argument_list|,
literal|"/webhdfs/v1/?op=CANCELDELEGATIONTOKEN&token="
operator|+
name|tokenStr
argument_list|)
expr_stmt|;
name|conn
operator|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|conn
operator|.
name|setRequestMethod
argument_list|(
literal|"PUT"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|url
operator|=
operator|new
name|URL
argument_list|(
name|TestJettyHelper
operator|.
name|getJettyURL
argument_list|()
argument_list|,
literal|"/webhdfs/v1/?op=GETHOMEDIRECTORY&delegation="
operator|+
name|tokenStr
argument_list|)
expr_stmt|;
name|conn
operator|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_FORBIDDEN
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// getTrash test with delegation
name|url
operator|=
operator|new
name|URL
argument_list|(
name|TestJettyHelper
operator|.
name|getJettyURL
argument_list|()
argument_list|,
literal|"/webhdfs/v1/?op=GETTRASHROOT&delegation="
operator|+
name|tokenStr
argument_list|)
expr_stmt|;
name|conn
operator|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_FORBIDDEN
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|url
operator|=
operator|new
name|URL
argument_list|(
name|TestJettyHelper
operator|.
name|getJettyURL
argument_list|()
argument_list|,
literal|"/webhdfs/v1/?op=GETTRASHROOT"
argument_list|)
expr_stmt|;
name|conn
operator|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|conn
operator|.
name|setRequestProperty
argument_list|(
literal|"Cookie"
argument_list|,
name|AuthenticatedURL
operator|.
name|AUTH_COOKIE
operator|+
literal|"="
operator|+
name|tokenSigned
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestDir
annotation|@
name|TestJetty
annotation|@
name|TestHdfs
DECL|method|instrumentation ()
specifier|public
name|void
name|instrumentation
parameter_list|()
throws|throws
name|Exception
block|{
name|createHttpFSServer
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|TestJettyHelper
operator|.
name|getJettyURL
argument_list|()
argument_list|,
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"/webhdfs/v1?user.name={0}&op=instrumentation"
argument_list|,
literal|"nobody"
argument_list|)
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_UNAUTHORIZED
argument_list|)
expr_stmt|;
name|url
operator|=
operator|new
name|URL
argument_list|(
name|TestJettyHelper
operator|.
name|getJettyURL
argument_list|()
argument_list|,
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"/webhdfs/v1?user.name={0}&op=instrumentation"
argument_list|,
name|HadoopUsersConfTestHelper
operator|.
name|getHadoopUsers
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|conn
operator|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|conn
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
init|=
name|reader
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|line
operator|.
name|contains
argument_list|(
literal|"\"counters\":{"
argument_list|)
argument_list|)
expr_stmt|;
name|url
operator|=
operator|new
name|URL
argument_list|(
name|TestJettyHelper
operator|.
name|getJettyURL
argument_list|()
argument_list|,
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"/webhdfs/v1/foo?user.name={0}&op=instrumentation"
argument_list|,
name|HadoopUsersConfTestHelper
operator|.
name|getHadoopUsers
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|conn
operator|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_BAD_REQUEST
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestDir
annotation|@
name|TestJetty
annotation|@
name|TestHdfs
DECL|method|testHdfsAccess ()
specifier|public
name|void
name|testHdfsAccess
parameter_list|()
throws|throws
name|Exception
block|{
name|createHttpFSServer
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|String
name|user
init|=
name|HadoopUsersConfTestHelper
operator|.
name|getHadoopUsers
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|TestJettyHelper
operator|.
name|getJettyURL
argument_list|()
argument_list|,
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"/webhdfs/v1/?user.name={0}&op=liststatus"
argument_list|,
name|user
argument_list|)
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|conn
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestDir
annotation|@
name|TestJetty
annotation|@
name|TestHdfs
DECL|method|testMkdirs ()
specifier|public
name|void
name|testMkdirs
parameter_list|()
throws|throws
name|Exception
block|{
name|createHttpFSServer
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|String
name|user
init|=
name|HadoopUsersConfTestHelper
operator|.
name|getHadoopUsers
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|TestJettyHelper
operator|.
name|getJettyURL
argument_list|()
argument_list|,
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"/webhdfs/v1/tmp/sub-tmp?user.name={0}&op=MKDIRS"
argument_list|,
name|user
argument_list|)
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|setRequestMethod
argument_list|(
literal|"PUT"
argument_list|)
expr_stmt|;
name|conn
operator|.
name|connect
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
name|getStatus
argument_list|(
literal|"/tmp/sub-tmp"
argument_list|,
literal|"LISTSTATUS"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestDir
annotation|@
name|TestJetty
annotation|@
name|TestHdfs
DECL|method|testGlobFilter ()
specifier|public
name|void
name|testGlobFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|createHttpFSServer
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|TestHdfsHelper
operator|.
name|getHdfsConf
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/tmp"
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/tmp/foo.txt"
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
name|user
init|=
name|HadoopUsersConfTestHelper
operator|.
name|getHadoopUsers
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|TestJettyHelper
operator|.
name|getJettyURL
argument_list|()
argument_list|,
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"/webhdfs/v1/tmp?user.name={0}&op=liststatus&filter=f*"
argument_list|,
name|user
argument_list|)
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|conn
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Talks to the http interface to create a file.    *    * @param filename The file to create    * @param perms The permission field, if any (may be null)    * @throws Exception    */
DECL|method|createWithHttp (String filename, String perms)
specifier|private
name|void
name|createWithHttp
parameter_list|(
name|String
name|filename
parameter_list|,
name|String
name|perms
parameter_list|)
throws|throws
name|Exception
block|{
name|createWithHttp
argument_list|(
name|filename
argument_list|,
name|perms
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Talks to the http interface to create a file.    *    * @param filename The file to create    * @param perms The permission field, if any (may be null)    * @param unmaskedPerms The unmaskedPermission field, if any (may be null)    * @throws Exception    */
DECL|method|createWithHttp (String filename, String perms, String unmaskedPerms)
specifier|private
name|void
name|createWithHttp
parameter_list|(
name|String
name|filename
parameter_list|,
name|String
name|perms
parameter_list|,
name|String
name|unmaskedPerms
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|user
init|=
name|HadoopUsersConfTestHelper
operator|.
name|getHadoopUsers
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
comment|// Remove leading / from filename
if|if
condition|(
name|filename
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'/'
condition|)
block|{
name|filename
operator|=
name|filename
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|String
name|pathOps
decl_stmt|;
if|if
condition|(
name|perms
operator|==
literal|null
condition|)
block|{
name|pathOps
operator|=
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"/webhdfs/v1/{0}?user.name={1}&op=CREATE"
argument_list|,
name|filename
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pathOps
operator|=
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"/webhdfs/v1/{0}?user.name={1}&permission={2}&op=CREATE"
argument_list|,
name|filename
argument_list|,
name|user
argument_list|,
name|perms
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|unmaskedPerms
operator|!=
literal|null
condition|)
block|{
name|pathOps
operator|=
name|pathOps
operator|+
literal|"&unmaskedpermission="
operator|+
name|unmaskedPerms
expr_stmt|;
block|}
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|TestJettyHelper
operator|.
name|getJettyURL
argument_list|()
argument_list|,
name|pathOps
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|addRequestProperty
argument_list|(
literal|"Content-Type"
argument_list|,
literal|"application/octet-stream"
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setRequestMethod
argument_list|(
literal|"PUT"
argument_list|)
expr_stmt|;
name|conn
operator|.
name|connect
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_CREATED
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Talks to the http interface to create a directory.    *    * @param dirname The directory to create    * @param perms The permission field, if any (may be null)    * @param unmaskedPerms The unmaskedPermission field, if any (may be null)    * @throws Exception    */
DECL|method|createDirWithHttp (String dirname, String perms, String unmaskedPerms)
specifier|private
name|void
name|createDirWithHttp
parameter_list|(
name|String
name|dirname
parameter_list|,
name|String
name|perms
parameter_list|,
name|String
name|unmaskedPerms
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|user
init|=
name|HadoopUsersConfTestHelper
operator|.
name|getHadoopUsers
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
comment|// Remove leading / from filename
if|if
condition|(
name|dirname
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'/'
condition|)
block|{
name|dirname
operator|=
name|dirname
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|String
name|pathOps
decl_stmt|;
if|if
condition|(
name|perms
operator|==
literal|null
condition|)
block|{
name|pathOps
operator|=
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"/webhdfs/v1/{0}?user.name={1}&op=MKDIRS"
argument_list|,
name|dirname
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pathOps
operator|=
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"/webhdfs/v1/{0}?user.name={1}&permission={2}&op=MKDIRS"
argument_list|,
name|dirname
argument_list|,
name|user
argument_list|,
name|perms
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|unmaskedPerms
operator|!=
literal|null
condition|)
block|{
name|pathOps
operator|=
name|pathOps
operator|+
literal|"&unmaskedpermission="
operator|+
name|unmaskedPerms
expr_stmt|;
block|}
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|TestJettyHelper
operator|.
name|getJettyURL
argument_list|()
argument_list|,
name|pathOps
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|setRequestMethod
argument_list|(
literal|"PUT"
argument_list|)
expr_stmt|;
name|conn
operator|.
name|connect
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Talks to the http interface to get the json output of a *STATUS command    * on the given file.    *    * @param filename The file to query.    * @param command Either GETFILESTATUS, LISTSTATUS, or ACLSTATUS    * @return A string containing the JSON output describing the file.    * @throws Exception    */
DECL|method|getStatus (String filename, String command)
specifier|private
name|String
name|getStatus
parameter_list|(
name|String
name|filename
parameter_list|,
name|String
name|command
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|user
init|=
name|HadoopUsersConfTestHelper
operator|.
name|getHadoopUsers
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
comment|// Remove leading / from filename
if|if
condition|(
name|filename
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'/'
condition|)
block|{
name|filename
operator|=
name|filename
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|String
name|pathOps
init|=
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"/webhdfs/v1/{0}?user.name={1}&op={2}"
argument_list|,
name|filename
argument_list|,
name|user
argument_list|,
name|command
argument_list|)
decl_stmt|;
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|TestJettyHelper
operator|.
name|getJettyURL
argument_list|()
argument_list|,
name|pathOps
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|connect
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|conn
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|reader
operator|.
name|readLine
argument_list|()
return|;
block|}
comment|/**    * General-purpose http PUT command to the httpfs server.    * @param filename The file to operate upon    * @param command The command to perform (SETACL, etc)    * @param params Parameters, like "aclspec=..."    */
DECL|method|putCmd (String filename, String command, String params)
specifier|private
name|void
name|putCmd
parameter_list|(
name|String
name|filename
parameter_list|,
name|String
name|command
parameter_list|,
name|String
name|params
parameter_list|)
throws|throws
name|Exception
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|putCmdWithReturn
argument_list|(
name|filename
argument_list|,
name|command
argument_list|,
name|params
argument_list|)
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * General-purpose http PUT command to the httpfs server,    * which returns relted HttpURLConnection instance.    * @param filename The file to operate upon    * @param command The command to perform (SETACL, etc)    * @param params Parameters, like "aclspec=..."    * @return HttpURLConnection the HttpURLConnection instance for the given PUT    */
DECL|method|putCmdWithReturn (String filename, String command, String params)
specifier|private
name|HttpURLConnection
name|putCmdWithReturn
parameter_list|(
name|String
name|filename
parameter_list|,
name|String
name|command
parameter_list|,
name|String
name|params
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|user
init|=
name|HadoopUsersConfTestHelper
operator|.
name|getHadoopUsers
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
comment|// Remove leading / from filename
if|if
condition|(
name|filename
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'/'
condition|)
block|{
name|filename
operator|=
name|filename
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|String
name|pathOps
init|=
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"/webhdfs/v1/{0}?user.name={1}{2}{3}&op={4}"
argument_list|,
name|filename
argument_list|,
name|user
argument_list|,
operator|(
name|params
operator|==
literal|null
operator|)
condition|?
literal|""
else|:
literal|"&"
argument_list|,
operator|(
name|params
operator|==
literal|null
operator|)
condition|?
literal|""
else|:
name|params
argument_list|,
name|command
argument_list|)
decl_stmt|;
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|TestJettyHelper
operator|.
name|getJettyURL
argument_list|()
argument_list|,
name|pathOps
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|setRequestMethod
argument_list|(
literal|"PUT"
argument_list|)
expr_stmt|;
name|conn
operator|.
name|connect
argument_list|()
expr_stmt|;
return|return
name|conn
return|;
block|}
comment|/**    * Given the JSON output from the GETFILESTATUS call, return the    * 'permission' value.    *    * @param statusJson JSON from GETFILESTATUS    * @return The value of 'permission' in statusJson    * @throws Exception    */
DECL|method|getPerms (String statusJson)
specifier|private
name|String
name|getPerms
parameter_list|(
name|String
name|statusJson
parameter_list|)
throws|throws
name|Exception
block|{
name|JSONParser
name|parser
init|=
operator|new
name|JSONParser
argument_list|()
decl_stmt|;
name|JSONObject
name|jsonObject
init|=
operator|(
name|JSONObject
operator|)
name|parser
operator|.
name|parse
argument_list|(
name|statusJson
argument_list|)
decl_stmt|;
name|JSONObject
name|details
init|=
operator|(
name|JSONObject
operator|)
name|jsonObject
operator|.
name|get
argument_list|(
literal|"FileStatus"
argument_list|)
decl_stmt|;
return|return
operator|(
name|String
operator|)
name|details
operator|.
name|get
argument_list|(
literal|"permission"
argument_list|)
return|;
block|}
comment|/**    * Given the JSON output from the GETTRASHPATH call, return the    * 'path' value.    *    * @param statusJson JSON from GETTRASHPATH    * @return The value of 'path' in statusJson    * @throws Exception    */
DECL|method|getPath (String statusJson)
specifier|private
name|String
name|getPath
parameter_list|(
name|String
name|statusJson
parameter_list|)
throws|throws
name|Exception
block|{
name|JSONParser
name|parser
init|=
operator|new
name|JSONParser
argument_list|()
decl_stmt|;
name|JSONObject
name|details
init|=
operator|(
name|JSONObject
operator|)
name|parser
operator|.
name|parse
argument_list|(
name|statusJson
argument_list|)
decl_stmt|;
return|return
operator|(
name|String
operator|)
name|details
operator|.
name|get
argument_list|(
literal|"Path"
argument_list|)
return|;
block|}
comment|/**    * Given the JSON output from the GETACLSTATUS call, return the    * 'entries' value as a List<String>.    * @param statusJson JSON from GETACLSTATUS    * @return A List of Strings which are the elements of the ACL entries    * @throws Exception    */
DECL|method|getAclEntries (String statusJson)
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getAclEntries
parameter_list|(
name|String
name|statusJson
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|JSONParser
name|parser
init|=
operator|new
name|JSONParser
argument_list|()
decl_stmt|;
name|JSONObject
name|jsonObject
init|=
operator|(
name|JSONObject
operator|)
name|parser
operator|.
name|parse
argument_list|(
name|statusJson
argument_list|)
decl_stmt|;
name|JSONObject
name|details
init|=
operator|(
name|JSONObject
operator|)
name|jsonObject
operator|.
name|get
argument_list|(
literal|"AclStatus"
argument_list|)
decl_stmt|;
name|JSONArray
name|jsonEntries
init|=
operator|(
name|JSONArray
operator|)
name|details
operator|.
name|get
argument_list|(
literal|"entries"
argument_list|)
decl_stmt|;
if|if
condition|(
name|jsonEntries
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Object
name|e
range|:
name|jsonEntries
control|)
block|{
name|entries
operator|.
name|add
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|entries
return|;
block|}
comment|/**    * Parse xAttrs from JSON result of GETXATTRS call, return xAttrs Map.    * @param statusJson JSON from GETXATTRS    * @return Map<String, byte[]> xAttrs Map    * @throws Exception    */
DECL|method|getXAttrs (String statusJson)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|getXAttrs
parameter_list|(
name|String
name|statusJson
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|xAttrs
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|JSONParser
name|parser
init|=
operator|new
name|JSONParser
argument_list|()
decl_stmt|;
name|JSONObject
name|jsonObject
init|=
operator|(
name|JSONObject
operator|)
name|parser
operator|.
name|parse
argument_list|(
name|statusJson
argument_list|)
decl_stmt|;
name|JSONArray
name|jsonXAttrs
init|=
operator|(
name|JSONArray
operator|)
name|jsonObject
operator|.
name|get
argument_list|(
literal|"XAttrs"
argument_list|)
decl_stmt|;
if|if
condition|(
name|jsonXAttrs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Object
name|a
range|:
name|jsonXAttrs
control|)
block|{
name|String
name|name
init|=
call|(
name|String
call|)
argument_list|(
operator|(
name|JSONObject
operator|)
name|a
argument_list|)
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|String
name|value
init|=
call|(
name|String
call|)
argument_list|(
operator|(
name|JSONObject
operator|)
name|a
argument_list|)
operator|.
name|get
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|xAttrs
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|decodeXAttrValue
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|xAttrs
return|;
block|}
comment|/** Decode xattr value from string. */
DECL|method|decodeXAttrValue (String value)
specifier|private
name|byte
index|[]
name|decodeXAttrValue
parameter_list|(
name|String
name|value
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
return|return
name|XAttrCodec
operator|.
name|decodeValue
argument_list|(
name|value
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|byte
index|[
literal|0
index|]
return|;
block|}
block|}
comment|/**    *    * @param stat AclStatus object from a call to getAclStatus    * @param name The name of the ACL being searched for    * @return The AclEntry if found, or null otherwise    * @throws IOException    */
DECL|method|findAclWithName (AclStatus stat, String name)
specifier|private
name|AclEntry
name|findAclWithName
parameter_list|(
name|AclStatus
name|stat
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|AclEntry
name|relevantAcl
init|=
literal|null
decl_stmt|;
name|Iterator
argument_list|<
name|AclEntry
argument_list|>
name|it
init|=
name|stat
operator|.
name|getEntries
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|AclEntry
name|e
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|relevantAcl
operator|=
name|e
expr_stmt|;
break|break;
block|}
block|}
return|return
name|relevantAcl
return|;
block|}
comment|/**    * Validate that files are created with 755 permissions when no    * 'permissions' attribute is specified, and when 'permissions'    * is specified, that value is honored.    */
annotation|@
name|Test
annotation|@
name|TestDir
annotation|@
name|TestJetty
annotation|@
name|TestHdfs
DECL|method|testPerms ()
specifier|public
name|void
name|testPerms
parameter_list|()
throws|throws
name|Exception
block|{
name|createHttpFSServer
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|TestHdfsHelper
operator|.
name|getHdfsConf
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/perm"
argument_list|)
argument_list|)
expr_stmt|;
name|createWithHttp
argument_list|(
literal|"/perm/none"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|String
name|statusJson
init|=
name|getStatus
argument_list|(
literal|"/perm/none"
argument_list|,
literal|"GETFILESTATUS"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"755"
operator|.
name|equals
argument_list|(
name|getPerms
argument_list|(
name|statusJson
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|createWithHttp
argument_list|(
literal|"/perm/p-777"
argument_list|,
literal|"777"
argument_list|)
expr_stmt|;
name|statusJson
operator|=
name|getStatus
argument_list|(
literal|"/perm/p-777"
argument_list|,
literal|"GETFILESTATUS"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"777"
operator|.
name|equals
argument_list|(
name|getPerms
argument_list|(
name|statusJson
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|createWithHttp
argument_list|(
literal|"/perm/p-654"
argument_list|,
literal|"654"
argument_list|)
expr_stmt|;
name|statusJson
operator|=
name|getStatus
argument_list|(
literal|"/perm/p-654"
argument_list|,
literal|"GETFILESTATUS"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"654"
operator|.
name|equals
argument_list|(
name|getPerms
argument_list|(
name|statusJson
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|createWithHttp
argument_list|(
literal|"/perm/p-321"
argument_list|,
literal|"321"
argument_list|)
expr_stmt|;
name|statusJson
operator|=
name|getStatus
argument_list|(
literal|"/perm/p-321"
argument_list|,
literal|"GETFILESTATUS"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"321"
operator|.
name|equals
argument_list|(
name|getPerms
argument_list|(
name|statusJson
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Validate XAttr get/set/remove calls.    */
annotation|@
name|Test
annotation|@
name|TestDir
annotation|@
name|TestJetty
annotation|@
name|TestHdfs
DECL|method|testXAttrs ()
specifier|public
name|void
name|testXAttrs
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|name1
init|=
literal|"user.a1"
decl_stmt|;
specifier|final
name|byte
index|[]
name|value1
init|=
operator|new
name|byte
index|[]
block|{
literal|0x31
block|,
literal|0x32
block|,
literal|0x33
block|}
decl_stmt|;
specifier|final
name|String
name|name2
init|=
literal|"user.a2"
decl_stmt|;
specifier|final
name|byte
index|[]
name|value2
init|=
operator|new
name|byte
index|[]
block|{
literal|0x41
block|,
literal|0x42
block|,
literal|0x43
block|}
decl_stmt|;
specifier|final
name|String
name|dir
init|=
literal|"/xattrTest"
decl_stmt|;
specifier|final
name|String
name|path
init|=
name|dir
operator|+
literal|"/file"
decl_stmt|;
name|createHttpFSServer
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|TestHdfsHelper
operator|.
name|getHdfsConf
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
name|createWithHttp
argument_list|(
name|path
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|String
name|statusJson
init|=
name|getStatus
argument_list|(
name|path
argument_list|,
literal|"GETXATTRS"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|xAttrs
init|=
name|getXAttrs
argument_list|(
name|statusJson
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|xAttrs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Set two xattrs
name|putCmd
argument_list|(
name|path
argument_list|,
literal|"SETXATTR"
argument_list|,
name|setXAttrParam
argument_list|(
name|name1
argument_list|,
name|value1
argument_list|)
argument_list|)
expr_stmt|;
name|putCmd
argument_list|(
name|path
argument_list|,
literal|"SETXATTR"
argument_list|,
name|setXAttrParam
argument_list|(
name|name2
argument_list|,
name|value2
argument_list|)
argument_list|)
expr_stmt|;
name|statusJson
operator|=
name|getStatus
argument_list|(
name|path
argument_list|,
literal|"GETXATTRS"
argument_list|)
expr_stmt|;
name|xAttrs
operator|=
name|getXAttrs
argument_list|(
name|statusJson
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|xAttrs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|value1
argument_list|,
name|xAttrs
operator|.
name|get
argument_list|(
name|name1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|value2
argument_list|,
name|xAttrs
operator|.
name|get
argument_list|(
name|name2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Remove one xattr
name|putCmd
argument_list|(
name|path
argument_list|,
literal|"REMOVEXATTR"
argument_list|,
literal|"xattr.name="
operator|+
name|name1
argument_list|)
expr_stmt|;
name|statusJson
operator|=
name|getStatus
argument_list|(
name|path
argument_list|,
literal|"GETXATTRS"
argument_list|)
expr_stmt|;
name|xAttrs
operator|=
name|getXAttrs
argument_list|(
name|statusJson
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|xAttrs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|value2
argument_list|,
name|xAttrs
operator|.
name|get
argument_list|(
name|name2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Remove another xattr, then there is no xattr
name|putCmd
argument_list|(
name|path
argument_list|,
literal|"REMOVEXATTR"
argument_list|,
literal|"xattr.name="
operator|+
name|name2
argument_list|)
expr_stmt|;
name|statusJson
operator|=
name|getStatus
argument_list|(
name|path
argument_list|,
literal|"GETXATTRS"
argument_list|)
expr_stmt|;
name|xAttrs
operator|=
name|getXAttrs
argument_list|(
name|statusJson
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|xAttrs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Params for setting an xAttr. */
DECL|method|setXAttrParam (String name, byte[] value)
specifier|public
specifier|static
name|String
name|setXAttrParam
parameter_list|(
name|String
name|name
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|"xattr.name="
operator|+
name|name
operator|+
literal|"&xattr.value="
operator|+
name|XAttrCodec
operator|.
name|encodeValue
argument_list|(
name|value
argument_list|,
name|XAttrCodec
operator|.
name|HEX
argument_list|)
operator|+
literal|"&encoding=hex&flag=create"
return|;
block|}
comment|/**    * Validate the various ACL set/modify/remove calls.  General strategy is    * to verify each of the following steps with GETFILESTATUS, LISTSTATUS,    * and GETACLSTATUS:    *<ol>    *<li>Create a file with no ACLs</li>    *<li>Add a user + group ACL</li>    *<li>Add another user ACL</li>    *<li>Remove the first user ACL</li>    *<li>Remove all ACLs</li>    *</ol>    */
annotation|@
name|Test
annotation|@
name|TestDir
annotation|@
name|TestJetty
annotation|@
name|TestHdfs
DECL|method|testFileAcls ()
specifier|public
name|void
name|testFileAcls
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|aclUser1
init|=
literal|"user:foo:rw-"
decl_stmt|;
specifier|final
name|String
name|remAclUser1
init|=
literal|"user:foo:"
decl_stmt|;
specifier|final
name|String
name|aclUser2
init|=
literal|"user:bar:r--"
decl_stmt|;
specifier|final
name|String
name|aclGroup1
init|=
literal|"group::r--"
decl_stmt|;
specifier|final
name|String
name|aclSpec
init|=
literal|"aclspec=user::rwx,"
operator|+
name|aclUser1
operator|+
literal|","
operator|+
name|aclGroup1
operator|+
literal|",other::---"
decl_stmt|;
specifier|final
name|String
name|modAclSpec
init|=
literal|"aclspec="
operator|+
name|aclUser2
decl_stmt|;
specifier|final
name|String
name|remAclSpec
init|=
literal|"aclspec="
operator|+
name|remAclUser1
decl_stmt|;
specifier|final
name|String
name|dir
init|=
literal|"/aclFileTest"
decl_stmt|;
specifier|final
name|String
name|path
init|=
name|dir
operator|+
literal|"/test"
decl_stmt|;
name|String
name|statusJson
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|aclEntries
decl_stmt|;
name|createHttpFSServer
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|TestHdfsHelper
operator|.
name|getHdfsConf
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
name|createWithHttp
argument_list|(
name|path
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|/* getfilestatus and liststatus don't have 'aclBit' in their reply */
name|statusJson
operator|=
name|getStatus
argument_list|(
name|path
argument_list|,
literal|"GETFILESTATUS"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|statusJson
operator|.
name|indexOf
argument_list|(
literal|"aclBit"
argument_list|)
argument_list|)
expr_stmt|;
name|statusJson
operator|=
name|getStatus
argument_list|(
name|dir
argument_list|,
literal|"LISTSTATUS"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|statusJson
operator|.
name|indexOf
argument_list|(
literal|"aclBit"
argument_list|)
argument_list|)
expr_stmt|;
comment|/* getaclstatus works and returns no entries */
name|statusJson
operator|=
name|getStatus
argument_list|(
name|path
argument_list|,
literal|"GETACLSTATUS"
argument_list|)
expr_stmt|;
name|aclEntries
operator|=
name|getAclEntries
argument_list|(
name|statusJson
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|aclEntries
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|/*      * Now set an ACL on the file.  (getfile|list)status have aclBit,      * and aclstatus has entries that looks familiar.      */
name|putCmd
argument_list|(
name|path
argument_list|,
literal|"SETACL"
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|statusJson
operator|=
name|getStatus
argument_list|(
name|path
argument_list|,
literal|"GETFILESTATUS"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|statusJson
operator|.
name|indexOf
argument_list|(
literal|"aclBit"
argument_list|)
argument_list|)
expr_stmt|;
name|statusJson
operator|=
name|getStatus
argument_list|(
name|dir
argument_list|,
literal|"LISTSTATUS"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|statusJson
operator|.
name|indexOf
argument_list|(
literal|"aclBit"
argument_list|)
argument_list|)
expr_stmt|;
name|statusJson
operator|=
name|getStatus
argument_list|(
name|path
argument_list|,
literal|"GETACLSTATUS"
argument_list|)
expr_stmt|;
name|aclEntries
operator|=
name|getAclEntries
argument_list|(
name|statusJson
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|aclEntries
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|aclEntries
operator|.
name|contains
argument_list|(
name|aclUser1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|aclEntries
operator|.
name|contains
argument_list|(
name|aclGroup1
argument_list|)
argument_list|)
expr_stmt|;
comment|/* Modify acl entries to add another user acl */
name|putCmd
argument_list|(
name|path
argument_list|,
literal|"MODIFYACLENTRIES"
argument_list|,
name|modAclSpec
argument_list|)
expr_stmt|;
name|statusJson
operator|=
name|getStatus
argument_list|(
name|path
argument_list|,
literal|"GETACLSTATUS"
argument_list|)
expr_stmt|;
name|aclEntries
operator|=
name|getAclEntries
argument_list|(
name|statusJson
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|aclEntries
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|aclEntries
operator|.
name|contains
argument_list|(
name|aclUser1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|aclEntries
operator|.
name|contains
argument_list|(
name|aclUser2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|aclEntries
operator|.
name|contains
argument_list|(
name|aclGroup1
argument_list|)
argument_list|)
expr_stmt|;
comment|/* Remove the first user acl entry and verify */
name|putCmd
argument_list|(
name|path
argument_list|,
literal|"REMOVEACLENTRIES"
argument_list|,
name|remAclSpec
argument_list|)
expr_stmt|;
name|statusJson
operator|=
name|getStatus
argument_list|(
name|path
argument_list|,
literal|"GETACLSTATUS"
argument_list|)
expr_stmt|;
name|aclEntries
operator|=
name|getAclEntries
argument_list|(
name|statusJson
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|aclEntries
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|aclEntries
operator|.
name|contains
argument_list|(
name|aclUser2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|aclEntries
operator|.
name|contains
argument_list|(
name|aclGroup1
argument_list|)
argument_list|)
expr_stmt|;
comment|/* Remove all acls and verify */
name|putCmd
argument_list|(
name|path
argument_list|,
literal|"REMOVEACL"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|statusJson
operator|=
name|getStatus
argument_list|(
name|path
argument_list|,
literal|"GETACLSTATUS"
argument_list|)
expr_stmt|;
name|aclEntries
operator|=
name|getAclEntries
argument_list|(
name|statusJson
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|aclEntries
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|statusJson
operator|=
name|getStatus
argument_list|(
name|path
argument_list|,
literal|"GETFILESTATUS"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|statusJson
operator|.
name|indexOf
argument_list|(
literal|"aclBit"
argument_list|)
argument_list|)
expr_stmt|;
name|statusJson
operator|=
name|getStatus
argument_list|(
name|dir
argument_list|,
literal|"LISTSTATUS"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|statusJson
operator|.
name|indexOf
argument_list|(
literal|"aclBit"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test ACL operations on a directory, including default ACLs.    * General strategy is to use GETFILESTATUS and GETACLSTATUS to verify:    *<ol>    *<li>Initial status with no ACLs</li>    *<li>The addition of a default ACL</li>    *<li>The removal of default ACLs</li>    *</ol>    *    * @throws Exception    */
annotation|@
name|Test
annotation|@
name|TestDir
annotation|@
name|TestJetty
annotation|@
name|TestHdfs
DECL|method|testDirAcls ()
specifier|public
name|void
name|testDirAcls
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|defUser1
init|=
literal|"default:user:glarch:r-x"
decl_stmt|;
specifier|final
name|String
name|defSpec1
init|=
literal|"aclspec="
operator|+
name|defUser1
decl_stmt|;
specifier|final
name|String
name|dir
init|=
literal|"/aclDirTest"
decl_stmt|;
name|String
name|statusJson
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|aclEntries
decl_stmt|;
name|createHttpFSServer
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|TestHdfsHelper
operator|.
name|getHdfsConf
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
comment|/* getfilestatus and liststatus don't have 'aclBit' in their reply */
name|statusJson
operator|=
name|getStatus
argument_list|(
name|dir
argument_list|,
literal|"GETFILESTATUS"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|statusJson
operator|.
name|indexOf
argument_list|(
literal|"aclBit"
argument_list|)
argument_list|)
expr_stmt|;
comment|/* No ACLs, either */
name|statusJson
operator|=
name|getStatus
argument_list|(
name|dir
argument_list|,
literal|"GETACLSTATUS"
argument_list|)
expr_stmt|;
name|aclEntries
operator|=
name|getAclEntries
argument_list|(
name|statusJson
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|aclEntries
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|/* Give it a default ACL and verify */
name|putCmd
argument_list|(
name|dir
argument_list|,
literal|"SETACL"
argument_list|,
name|defSpec1
argument_list|)
expr_stmt|;
name|statusJson
operator|=
name|getStatus
argument_list|(
name|dir
argument_list|,
literal|"GETFILESTATUS"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|statusJson
operator|.
name|indexOf
argument_list|(
literal|"aclBit"
argument_list|)
argument_list|)
expr_stmt|;
name|statusJson
operator|=
name|getStatus
argument_list|(
name|dir
argument_list|,
literal|"GETACLSTATUS"
argument_list|)
expr_stmt|;
name|aclEntries
operator|=
name|getAclEntries
argument_list|(
name|statusJson
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|aclEntries
operator|.
name|size
argument_list|()
operator|==
literal|5
argument_list|)
expr_stmt|;
comment|/* 4 Entries are default:(user|group|mask|other):perm */
name|Assert
operator|.
name|assertTrue
argument_list|(
name|aclEntries
operator|.
name|contains
argument_list|(
name|defUser1
argument_list|)
argument_list|)
expr_stmt|;
comment|/* Remove the default ACL and re-verify */
name|putCmd
argument_list|(
name|dir
argument_list|,
literal|"REMOVEDEFAULTACL"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|statusJson
operator|=
name|getStatus
argument_list|(
name|dir
argument_list|,
literal|"GETFILESTATUS"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|statusJson
operator|.
name|indexOf
argument_list|(
literal|"aclBit"
argument_list|)
argument_list|)
expr_stmt|;
name|statusJson
operator|=
name|getStatus
argument_list|(
name|dir
argument_list|,
literal|"GETACLSTATUS"
argument_list|)
expr_stmt|;
name|aclEntries
operator|=
name|getAclEntries
argument_list|(
name|statusJson
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|aclEntries
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestDir
annotation|@
name|TestJetty
annotation|@
name|TestHdfs
DECL|method|testCustomizedUserAndGroupNames ()
specifier|public
name|void
name|testCustomizedUserAndGroupNames
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Start server with default configuration
name|Server
name|server
init|=
name|createHttpFSServer
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|HttpFSServerWebApp
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
name|FileSystemAccess
operator|.
name|class
argument_list|)
operator|.
name|getFileSystemConfiguration
argument_list|()
decl_stmt|;
comment|// Change pattern config
name|conf
operator|.
name|set
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|DFS_WEBHDFS_USER_PATTERN_KEY
argument_list|,
literal|"^[A-Za-z0-9_][A-Za-z0-9._-]*[$]?$"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|DFS_WEBHDFS_ACL_PERMISSION_PATTERN_KEY
argument_list|,
literal|"^(default:)?(user|group|mask|other):"
operator|+
literal|"[[0-9A-Za-z_][@A-Za-z0-9._-]]*:([rwx-]{3})?(,(default:)?"
operator|+
literal|"(user|group|mask|other):[[0-9A-Za-z_][@A-Za-z0-9._-]]*:"
operator|+
literal|"([rwx-]{3})?)*$"
argument_list|)
expr_stmt|;
comment|// Save configuration to site file
name|writeConf
argument_list|(
name|conf
argument_list|,
literal|"hdfs-site.xml"
argument_list|)
expr_stmt|;
comment|// Restart the HttpFS server to apply new config
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|String
name|aclUser
init|=
literal|"user:123:rw-"
decl_stmt|;
specifier|final
name|String
name|aclGroup
init|=
literal|"group:foo@bar:r--"
decl_stmt|;
specifier|final
name|String
name|aclSpec
init|=
literal|"aclspec=user::rwx,"
operator|+
name|aclUser
operator|+
literal|",group::rwx,"
operator|+
name|aclGroup
operator|+
literal|",other::---"
decl_stmt|;
specifier|final
name|String
name|dir
init|=
literal|"/aclFileTestCustom"
decl_stmt|;
specifier|final
name|String
name|path
init|=
name|dir
operator|+
literal|"/test"
decl_stmt|;
comment|// Create test dir
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
name|createWithHttp
argument_list|(
name|path
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Set ACL
name|putCmd
argument_list|(
name|path
argument_list|,
literal|"SETACL"
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
comment|// Verify ACL
name|String
name|statusJson
init|=
name|getStatus
argument_list|(
name|path
argument_list|,
literal|"GETACLSTATUS"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|aclEntries
init|=
name|getAclEntries
argument_list|(
name|statusJson
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|aclEntries
operator|.
name|contains
argument_list|(
name|aclUser
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|aclEntries
operator|.
name|contains
argument_list|(
name|aclGroup
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestDir
annotation|@
name|TestJetty
annotation|@
name|TestHdfs
DECL|method|testOpenOffsetLength ()
specifier|public
name|void
name|testOpenOffsetLength
parameter_list|()
throws|throws
name|Exception
block|{
name|createHttpFSServer
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|byte
index|[]
name|array
init|=
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|}
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|TestHdfsHelper
operator|.
name|getHdfsConf
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/tmp"
argument_list|)
argument_list|)
expr_stmt|;
name|OutputStream
name|os
init|=
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/tmp/foo"
argument_list|)
argument_list|)
decl_stmt|;
name|os
operator|.
name|write
argument_list|(
name|array
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
name|user
init|=
name|HadoopUsersConfTestHelper
operator|.
name|getHadoopUsers
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|TestJettyHelper
operator|.
name|getJettyURL
argument_list|()
argument_list|,
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"/webhdfs/v1/tmp/foo?user.name={0}&op=open&offset=1&length=2"
argument_list|,
name|user
argument_list|)
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|InputStream
name|is
init|=
name|conn
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|is
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|is
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|is
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestDir
annotation|@
name|TestJetty
annotation|@
name|TestHdfs
DECL|method|testCreateFileWithUnmaskedPermissions ()
specifier|public
name|void
name|testCreateFileWithUnmaskedPermissions
parameter_list|()
throws|throws
name|Exception
block|{
name|createHttpFSServer
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|TestHdfsHelper
operator|.
name|getHdfsConf
argument_list|()
argument_list|)
decl_stmt|;
comment|// Create a folder with a default acl default:user2:rw-
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/tmp"
argument_list|)
argument_list|)
expr_stmt|;
name|AclEntry
name|acl
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntry
operator|.
name|Builder
argument_list|()
operator|.
name|setType
argument_list|(
name|AclEntryType
operator|.
name|USER
argument_list|)
operator|.
name|setScope
argument_list|(
name|AclEntryScope
operator|.
name|DEFAULT
argument_list|)
operator|.
name|setName
argument_list|(
literal|"user2"
argument_list|)
operator|.
name|setPermission
argument_list|(
name|FsAction
operator|.
name|READ_WRITE
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|fs
operator|.
name|setAcl
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/tmp"
argument_list|)
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|AclEntry
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|acl
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|notUnmaskedFile
init|=
literal|"/tmp/notUnmasked"
decl_stmt|;
name|String
name|unmaskedFile
init|=
literal|"/tmp/unmasked"
decl_stmt|;
comment|// Create a file inside the folder. It should inherit the default acl
comment|// but the mask should affect the ACL permissions. The mask is controlled
comment|// by the group permissions, which are 0, and hence the mask will make
comment|// the effective permission of the inherited ACL be NONE.
name|createWithHttp
argument_list|(
name|notUnmaskedFile
argument_list|,
literal|"700"
argument_list|)
expr_stmt|;
comment|// Pull the relevant ACL from the FS object and check the mask has affected
comment|// its permissions.
name|AclStatus
name|aclStatus
init|=
name|fs
operator|.
name|getAclStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|notUnmaskedFile
argument_list|)
argument_list|)
decl_stmt|;
name|AclEntry
name|theAcl
init|=
name|findAclWithName
argument_list|(
name|aclStatus
argument_list|,
literal|"user2"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|theAcl
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|FsAction
operator|.
name|NONE
argument_list|,
name|aclStatus
operator|.
name|getEffectivePermission
argument_list|(
name|theAcl
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create another file, this time pass a mask of 777. Now the inherited
comment|// permissions should be as expected
name|createWithHttp
argument_list|(
name|unmaskedFile
argument_list|,
literal|"700"
argument_list|,
literal|"777"
argument_list|)
expr_stmt|;
name|aclStatus
operator|=
name|fs
operator|.
name|getAclStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|unmaskedFile
argument_list|)
argument_list|)
expr_stmt|;
name|theAcl
operator|=
name|findAclWithName
argument_list|(
name|aclStatus
argument_list|,
literal|"user2"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|theAcl
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|FsAction
operator|.
name|READ_WRITE
argument_list|,
name|aclStatus
operator|.
name|getEffectivePermission
argument_list|(
name|theAcl
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestDir
annotation|@
name|TestJetty
annotation|@
name|TestHdfs
DECL|method|testMkdirWithUnmaskedPermissions ()
specifier|public
name|void
name|testMkdirWithUnmaskedPermissions
parameter_list|()
throws|throws
name|Exception
block|{
name|createHttpFSServer
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|TestHdfsHelper
operator|.
name|getHdfsConf
argument_list|()
argument_list|)
decl_stmt|;
comment|// Create a folder with a default acl default:user2:rw-
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/tmp"
argument_list|)
argument_list|)
expr_stmt|;
name|AclEntry
name|acl
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntry
operator|.
name|Builder
argument_list|()
operator|.
name|setType
argument_list|(
name|AclEntryType
operator|.
name|USER
argument_list|)
operator|.
name|setScope
argument_list|(
name|AclEntryScope
operator|.
name|DEFAULT
argument_list|)
operator|.
name|setName
argument_list|(
literal|"user2"
argument_list|)
operator|.
name|setPermission
argument_list|(
name|FsAction
operator|.
name|READ_WRITE
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|fs
operator|.
name|setAcl
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/tmp"
argument_list|)
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|AclEntry
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|acl
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|notUnmaskedDir
init|=
literal|"/tmp/notUnmaskedDir"
decl_stmt|;
name|String
name|unmaskedDir
init|=
literal|"/tmp/unmaskedDir"
decl_stmt|;
comment|// Create a file inside the folder. It should inherit the default acl
comment|// but the mask should affect the ACL permissions. The mask is controlled
comment|// by the group permissions, which are 0, and hence the mask will make
comment|// the effective permission of the inherited ACL be NONE.
name|createDirWithHttp
argument_list|(
name|notUnmaskedDir
argument_list|,
literal|"700"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Pull the relevant ACL from the FS object and check the mask has affected
comment|// its permissions.
name|AclStatus
name|aclStatus
init|=
name|fs
operator|.
name|getAclStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|notUnmaskedDir
argument_list|)
argument_list|)
decl_stmt|;
name|AclEntry
name|theAcl
init|=
name|findAclWithName
argument_list|(
name|aclStatus
argument_list|,
literal|"user2"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|theAcl
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|FsAction
operator|.
name|NONE
argument_list|,
name|aclStatus
operator|.
name|getEffectivePermission
argument_list|(
name|theAcl
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create another file, this time pass a mask of 777. Now the inherited
comment|// permissions should be as expected
name|createDirWithHttp
argument_list|(
name|unmaskedDir
argument_list|,
literal|"700"
argument_list|,
literal|"777"
argument_list|)
expr_stmt|;
name|aclStatus
operator|=
name|fs
operator|.
name|getAclStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|unmaskedDir
argument_list|)
argument_list|)
expr_stmt|;
name|theAcl
operator|=
name|findAclWithName
argument_list|(
name|aclStatus
argument_list|,
literal|"user2"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|theAcl
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|FsAction
operator|.
name|READ_WRITE
argument_list|,
name|aclStatus
operator|.
name|getEffectivePermission
argument_list|(
name|theAcl
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestDir
annotation|@
name|TestJetty
annotation|@
name|TestHdfs
DECL|method|testPutNoOperation ()
specifier|public
name|void
name|testPutNoOperation
parameter_list|()
throws|throws
name|Exception
block|{
name|createHttpFSServer
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|String
name|user
init|=
name|HadoopUsersConfTestHelper
operator|.
name|getHadoopUsers
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|TestJettyHelper
operator|.
name|getJettyURL
argument_list|()
argument_list|,
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"/webhdfs/v1/foo?user.name={0}"
argument_list|,
name|user
argument_list|)
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|setDoInput
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setDoOutput
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setRequestMethod
argument_list|(
literal|"PUT"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_BAD_REQUEST
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestDir
annotation|@
name|TestJetty
annotation|@
name|TestHdfs
DECL|method|testGetTrashRoot ()
specifier|public
name|void
name|testGetTrashRoot
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|user
init|=
name|HadoopUsersConfTestHelper
operator|.
name|getHadoopUsers
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|createHttpFSServer
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|String
name|trashJson
init|=
name|getStatus
argument_list|(
literal|"/"
argument_list|,
literal|"GETTRASHROOT"
argument_list|)
decl_stmt|;
name|String
name|trashPath
init|=
name|getPath
argument_list|(
name|trashJson
argument_list|)
decl_stmt|;
name|Path
name|expectedPath
init|=
operator|new
name|Path
argument_list|(
name|FileSystem
operator|.
name|USER_HOME_PREFIX
argument_list|,
operator|new
name|Path
argument_list|(
name|user
argument_list|,
name|FileSystem
operator|.
name|TRASH_PREFIX
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedPath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|trashPath
argument_list|)
expr_stmt|;
name|byte
index|[]
name|array
init|=
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|}
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|TestHdfsHelper
operator|.
name|getHdfsConf
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/tmp"
argument_list|)
argument_list|)
expr_stmt|;
name|OutputStream
name|os
init|=
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/tmp/foo"
argument_list|)
argument_list|)
decl_stmt|;
name|os
operator|.
name|write
argument_list|(
name|array
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
name|trashJson
operator|=
name|getStatus
argument_list|(
literal|"/tmp/foo"
argument_list|,
literal|"GETTRASHROOT"
argument_list|)
expr_stmt|;
name|trashPath
operator|=
name|getPath
argument_list|(
name|trashJson
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedPath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|trashPath
argument_list|)
expr_stmt|;
comment|//TestHdfsHelp has already set up EZ environment
specifier|final
name|Path
name|ezFile
init|=
name|TestHdfsHelper
operator|.
name|ENCRYPTED_FILE
decl_stmt|;
specifier|final
name|Path
name|ezPath
init|=
name|TestHdfsHelper
operator|.
name|ENCRYPTION_ZONE
decl_stmt|;
name|trashJson
operator|=
name|getStatus
argument_list|(
name|ezFile
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
literal|"GETTRASHROOT"
argument_list|)
expr_stmt|;
name|trashPath
operator|=
name|getPath
argument_list|(
name|trashJson
argument_list|)
expr_stmt|;
name|expectedPath
operator|=
operator|new
name|Path
argument_list|(
name|ezPath
argument_list|,
operator|new
name|Path
argument_list|(
name|FileSystem
operator|.
name|TRASH_PREFIX
argument_list|,
name|user
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedPath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|trashPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestDir
annotation|@
name|TestJetty
annotation|@
name|TestHdfs
DECL|method|testDelegationTokenOperations ()
specifier|public
name|void
name|testDelegationTokenOperations
parameter_list|()
throws|throws
name|Exception
block|{
name|createHttpFSServer
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|delegationTokenCommonTests
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|snapshotTestPreconditions (String httpMethod, String snapOperation, String additionalParams)
specifier|private
name|HttpURLConnection
name|snapshotTestPreconditions
parameter_list|(
name|String
name|httpMethod
parameter_list|,
name|String
name|snapOperation
parameter_list|,
name|String
name|additionalParams
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|user
init|=
name|HadoopUsersConfTestHelper
operator|.
name|getHadoopUsers
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|TestJettyHelper
operator|.
name|getJettyURL
argument_list|()
argument_list|,
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"/webhdfs/v1/tmp/tmp-snap-test/subdir?user.name={0}&op=MKDIRS"
argument_list|,
name|user
argument_list|)
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|setRequestMethod
argument_list|(
literal|"PUT"
argument_list|)
expr_stmt|;
name|conn
operator|.
name|connect
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
comment|//needed to make the given dir snapshottable
name|Path
name|snapshottablePath
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp/tmp-snap-test"
argument_list|)
decl_stmt|;
name|DistributedFileSystem
name|dfs
init|=
operator|(
name|DistributedFileSystem
operator|)
name|FileSystem
operator|.
name|get
argument_list|(
name|snapshottablePath
operator|.
name|toUri
argument_list|()
argument_list|,
name|TestHdfsHelper
operator|.
name|getHdfsConf
argument_list|()
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|allowSnapshot
argument_list|(
name|snapshottablePath
argument_list|)
expr_stmt|;
comment|//Try to create snapshot passing snapshot name
name|url
operator|=
operator|new
name|URL
argument_list|(
name|TestJettyHelper
operator|.
name|getJettyURL
argument_list|()
argument_list|,
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"/webhdfs/v1/tmp/tmp-snap-test?user.name={0}&op={1}&{2}"
argument_list|,
name|user
argument_list|,
name|snapOperation
argument_list|,
name|additionalParams
argument_list|)
argument_list|)
expr_stmt|;
name|conn
operator|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|conn
operator|.
name|setRequestMethod
argument_list|(
name|httpMethod
argument_list|)
expr_stmt|;
name|conn
operator|.
name|connect
argument_list|()
expr_stmt|;
return|return
name|conn
return|;
block|}
annotation|@
name|Test
annotation|@
name|TestDir
annotation|@
name|TestJetty
annotation|@
name|TestHdfs
DECL|method|testAllowSnapshot ()
specifier|public
name|void
name|testAllowSnapshot
parameter_list|()
throws|throws
name|Exception
block|{
name|createHttpFSServer
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Create a test directory
name|String
name|pathString
init|=
literal|"/tmp/tmp-snap-allow-test"
decl_stmt|;
name|createDirWithHttp
argument_list|(
name|pathString
argument_list|,
literal|"700"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|pathString
argument_list|)
decl_stmt|;
name|DistributedFileSystem
name|dfs
init|=
operator|(
name|DistributedFileSystem
operator|)
name|FileSystem
operator|.
name|get
argument_list|(
name|path
operator|.
name|toUri
argument_list|()
argument_list|,
name|TestHdfsHelper
operator|.
name|getHdfsConf
argument_list|()
argument_list|)
decl_stmt|;
comment|// FileStatus should have snapshot enabled bit unset by default
name|Assert
operator|.
name|assertFalse
argument_list|(
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|isSnapshotEnabled
argument_list|()
argument_list|)
expr_stmt|;
comment|// Send a request with ALLOWSNAPSHOT API
name|String
name|user
init|=
name|HadoopUsersConfTestHelper
operator|.
name|getHadoopUsers
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|TestJettyHelper
operator|.
name|getJettyURL
argument_list|()
argument_list|,
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"/webhdfs/v1{0}?user.name={1}&op=ALLOWSNAPSHOT"
argument_list|,
name|pathString
argument_list|,
name|user
argument_list|)
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|setRequestMethod
argument_list|(
literal|"PUT"
argument_list|)
expr_stmt|;
name|conn
operator|.
name|connect
argument_list|()
expr_stmt|;
comment|// Should return HTTP_OK
name|Assert
operator|.
name|assertEquals
argument_list|(
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
comment|// FileStatus should have snapshot enabled bit set
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|isSnapshotEnabled
argument_list|()
argument_list|)
expr_stmt|;
comment|// Clean up
name|dfs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestDir
annotation|@
name|TestJetty
annotation|@
name|TestHdfs
DECL|method|testDisallowSnapshot ()
specifier|public
name|void
name|testDisallowSnapshot
parameter_list|()
throws|throws
name|Exception
block|{
name|createHttpFSServer
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Create a test directory
name|String
name|pathString
init|=
literal|"/tmp/tmp-snap-disallow-test"
decl_stmt|;
name|createDirWithHttp
argument_list|(
name|pathString
argument_list|,
literal|"700"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|pathString
argument_list|)
decl_stmt|;
name|DistributedFileSystem
name|dfs
init|=
operator|(
name|DistributedFileSystem
operator|)
name|FileSystem
operator|.
name|get
argument_list|(
name|path
operator|.
name|toUri
argument_list|()
argument_list|,
name|TestHdfsHelper
operator|.
name|getHdfsConf
argument_list|()
argument_list|)
decl_stmt|;
comment|// Allow snapshot
name|dfs
operator|.
name|allowSnapshot
argument_list|(
name|path
argument_list|)
expr_stmt|;
comment|// FileStatus should have snapshot enabled bit set so far
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|isSnapshotEnabled
argument_list|()
argument_list|)
expr_stmt|;
comment|// Send a request with DISALLOWSNAPSHOT API
name|String
name|user
init|=
name|HadoopUsersConfTestHelper
operator|.
name|getHadoopUsers
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|TestJettyHelper
operator|.
name|getJettyURL
argument_list|()
argument_list|,
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"/webhdfs/v1{0}?user.name={1}&op=DISALLOWSNAPSHOT"
argument_list|,
name|pathString
argument_list|,
name|user
argument_list|)
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|setRequestMethod
argument_list|(
literal|"PUT"
argument_list|)
expr_stmt|;
name|conn
operator|.
name|connect
argument_list|()
expr_stmt|;
comment|// Should return HTTP_OK
name|Assert
operator|.
name|assertEquals
argument_list|(
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
comment|// FileStatus should not have snapshot enabled bit set
name|Assert
operator|.
name|assertFalse
argument_list|(
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|isSnapshotEnabled
argument_list|()
argument_list|)
expr_stmt|;
comment|// Clean up
name|dfs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestDir
annotation|@
name|TestJetty
annotation|@
name|TestHdfs
DECL|method|testDisallowSnapshotException ()
specifier|public
name|void
name|testDisallowSnapshotException
parameter_list|()
throws|throws
name|Exception
block|{
name|createHttpFSServer
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Create a test directory
name|String
name|pathString
init|=
literal|"/tmp/tmp-snap-disallow-exception-test"
decl_stmt|;
name|createDirWithHttp
argument_list|(
name|pathString
argument_list|,
literal|"700"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|pathString
argument_list|)
decl_stmt|;
name|DistributedFileSystem
name|dfs
init|=
operator|(
name|DistributedFileSystem
operator|)
name|FileSystem
operator|.
name|get
argument_list|(
name|path
operator|.
name|toUri
argument_list|()
argument_list|,
name|TestHdfsHelper
operator|.
name|getHdfsConf
argument_list|()
argument_list|)
decl_stmt|;
comment|// Allow snapshot
name|dfs
operator|.
name|allowSnapshot
argument_list|(
name|path
argument_list|)
expr_stmt|;
comment|// FileStatus should have snapshot enabled bit set so far
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|isSnapshotEnabled
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create some snapshots
name|dfs
operator|.
name|createSnapshot
argument_list|(
name|path
argument_list|,
literal|"snap-01"
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|createSnapshot
argument_list|(
name|path
argument_list|,
literal|"snap-02"
argument_list|)
expr_stmt|;
comment|// Send a request with DISALLOWSNAPSHOT API
name|String
name|user
init|=
name|HadoopUsersConfTestHelper
operator|.
name|getHadoopUsers
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|TestJettyHelper
operator|.
name|getJettyURL
argument_list|()
argument_list|,
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"/webhdfs/v1{0}?user.name={1}&op=DISALLOWSNAPSHOT"
argument_list|,
name|pathString
argument_list|,
name|user
argument_list|)
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|setRequestMethod
argument_list|(
literal|"PUT"
argument_list|)
expr_stmt|;
name|conn
operator|.
name|connect
argument_list|()
expr_stmt|;
comment|// Should not return HTTP_OK
name|Assert
operator|.
name|assertNotEquals
argument_list|(
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
comment|// FileStatus should still have snapshot enabled bit set
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|isSnapshotEnabled
argument_list|()
argument_list|)
expr_stmt|;
comment|// Clean up
name|dfs
operator|.
name|deleteSnapshot
argument_list|(
name|path
argument_list|,
literal|"snap-02"
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|deleteSnapshot
argument_list|(
name|path
argument_list|,
literal|"snap-01"
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestDir
annotation|@
name|TestJetty
annotation|@
name|TestHdfs
DECL|method|testCreateSnapshot ()
specifier|public
name|void
name|testCreateSnapshot
parameter_list|()
throws|throws
name|Exception
block|{
name|createHttpFSServer
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|HttpURLConnection
name|conn
init|=
name|snapshotTestPreconditions
argument_list|(
literal|"PUT"
argument_list|,
literal|"CREATESNAPSHOT"
argument_list|,
literal|"snapshotname=snap-with-name"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
specifier|final
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|conn
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|result
init|=
name|reader
operator|.
name|readLine
argument_list|()
decl_stmt|;
comment|//Validates if the content format is correct
name|Assert
operator|.
name|assertTrue
argument_list|(
name|result
operator|.
name|equals
argument_list|(
literal|"{\"Path\":\"/tmp/tmp-snap-test/.snapshot/snap-with-name\"}"
argument_list|)
argument_list|)
expr_stmt|;
comment|//Validates if the snapshot is properly created under .snapshot folder
name|result
operator|=
name|getStatus
argument_list|(
literal|"/tmp/tmp-snap-test/.snapshot"
argument_list|,
literal|"LISTSTATUS"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|result
operator|.
name|contains
argument_list|(
literal|"snap-with-name"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestDir
annotation|@
name|TestJetty
annotation|@
name|TestHdfs
DECL|method|testCreateSnapshotNoSnapshotName ()
specifier|public
name|void
name|testCreateSnapshotNoSnapshotName
parameter_list|()
throws|throws
name|Exception
block|{
name|createHttpFSServer
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|HttpURLConnection
name|conn
init|=
name|snapshotTestPreconditions
argument_list|(
literal|"PUT"
argument_list|,
literal|"CREATESNAPSHOT"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
specifier|final
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|conn
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|result
init|=
name|reader
operator|.
name|readLine
argument_list|()
decl_stmt|;
comment|//Validates if the content format is correct
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Pattern
operator|.
name|matches
argument_list|(
literal|"(\\{\\\"Path\\\"\\:\\\"/tmp/tmp-snap-test/.snapshot/s)"
operator|+
literal|"(\\d{8})(-)(\\d{6})(\\.)(\\d{3})(\\\"\\})"
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
comment|//Validates if the snapshot is properly created under .snapshot folder
name|result
operator|=
name|getStatus
argument_list|(
literal|"/tmp/tmp-snap-test/.snapshot"
argument_list|,
literal|"LISTSTATUS"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Pattern
operator|.
name|matches
argument_list|(
literal|"(.+)(\\\"pathSuffix\\\":\\\"s)"
operator|+
literal|"(\\d{8})(-)(\\d{6})(\\.)(\\d{3})(\\\")(.+)"
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestDir
annotation|@
name|TestJetty
annotation|@
name|TestHdfs
DECL|method|testRenameSnapshot ()
specifier|public
name|void
name|testRenameSnapshot
parameter_list|()
throws|throws
name|Exception
block|{
name|createHttpFSServer
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|HttpURLConnection
name|conn
init|=
name|snapshotTestPreconditions
argument_list|(
literal|"PUT"
argument_list|,
literal|"CREATESNAPSHOT"
argument_list|,
literal|"snapshotname=snap-to-rename"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
name|conn
operator|=
name|snapshotTestPreconditions
argument_list|(
literal|"PUT"
argument_list|,
literal|"RENAMESNAPSHOT"
argument_list|,
literal|"oldsnapshotname=snap-to-rename"
operator|+
literal|"&snapshotname=snap-renamed"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
comment|//Validates the snapshot is properly renamed under .snapshot folder
name|String
name|result
init|=
name|getStatus
argument_list|(
literal|"/tmp/tmp-snap-test/.snapshot"
argument_list|,
literal|"LISTSTATUS"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|result
operator|.
name|contains
argument_list|(
literal|"snap-renamed"
argument_list|)
argument_list|)
expr_stmt|;
comment|//There should be no snapshot named snap-to-rename now
name|Assert
operator|.
name|assertFalse
argument_list|(
name|result
operator|.
name|contains
argument_list|(
literal|"snap-to-rename"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestDir
annotation|@
name|TestJetty
annotation|@
name|TestHdfs
DECL|method|testDelegationTokenOperationsSsl ()
specifier|public
name|void
name|testDelegationTokenOperationsSsl
parameter_list|()
throws|throws
name|Exception
block|{
name|createHttpFSServer
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|delegationTokenCommonTests
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestDir
annotation|@
name|TestJetty
annotation|@
name|TestHdfs
DECL|method|testDeleteSnapshot ()
specifier|public
name|void
name|testDeleteSnapshot
parameter_list|()
throws|throws
name|Exception
block|{
name|createHttpFSServer
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|HttpURLConnection
name|conn
init|=
name|snapshotTestPreconditions
argument_list|(
literal|"PUT"
argument_list|,
literal|"CREATESNAPSHOT"
argument_list|,
literal|"snapshotname=snap-to-delete"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
name|conn
operator|=
name|snapshotTestPreconditions
argument_list|(
literal|"DELETE"
argument_list|,
literal|"DELETESNAPSHOT"
argument_list|,
literal|"snapshotname=snap-to-delete"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
comment|//Validates the snapshot is not under .snapshot folder anymore
name|String
name|result
init|=
name|getStatus
argument_list|(
literal|"/tmp/tmp-snap-test/.snapshot"
argument_list|,
literal|"LISTSTATUS"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|result
operator|.
name|contains
argument_list|(
literal|"snap-to-delete"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|sendRequestToHttpFSServer (String path, String op, String additionalParams)
specifier|private
name|HttpURLConnection
name|sendRequestToHttpFSServer
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|op
parameter_list|,
name|String
name|additionalParams
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|user
init|=
name|HadoopUsersConfTestHelper
operator|.
name|getHadoopUsers
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|TestJettyHelper
operator|.
name|getJettyURL
argument_list|()
argument_list|,
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"/webhdfs/v1{0}?user.name={1}&op={2}&{3}"
argument_list|,
name|path
argument_list|,
name|user
argument_list|,
name|op
argument_list|,
name|additionalParams
argument_list|)
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|setRequestMethod
argument_list|(
literal|"GET"
argument_list|)
expr_stmt|;
name|conn
operator|.
name|connect
argument_list|()
expr_stmt|;
return|return
name|conn
return|;
block|}
DECL|method|sendRequestGetSnapshotDiff (String path, String oldsnapshotname, String snapshotname)
specifier|private
name|HttpURLConnection
name|sendRequestGetSnapshotDiff
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|oldsnapshotname
parameter_list|,
name|String
name|snapshotname
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|sendRequestToHttpFSServer
argument_list|(
name|path
argument_list|,
literal|"GETSNAPSHOTDIFF"
argument_list|,
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"oldsnapshotname={0}&snapshotname={1}"
argument_list|,
name|oldsnapshotname
argument_list|,
name|snapshotname
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Test
annotation|@
name|TestDir
annotation|@
name|TestJetty
annotation|@
name|TestHdfs
DECL|method|testGetSnapshotDiff ()
specifier|public
name|void
name|testGetSnapshotDiff
parameter_list|()
throws|throws
name|Exception
block|{
name|createHttpFSServer
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Create a test directory
name|String
name|pathStr
init|=
literal|"/tmp/tmp-snap-diff-test"
decl_stmt|;
name|createDirWithHttp
argument_list|(
name|pathStr
argument_list|,
literal|"700"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|pathStr
argument_list|)
decl_stmt|;
name|DistributedFileSystem
name|dfs
init|=
operator|(
name|DistributedFileSystem
operator|)
name|FileSystem
operator|.
name|get
argument_list|(
name|path
operator|.
name|toUri
argument_list|()
argument_list|,
name|TestHdfsHelper
operator|.
name|getHdfsConf
argument_list|()
argument_list|)
decl_stmt|;
comment|// Enable snapshot
name|dfs
operator|.
name|allowSnapshot
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|isSnapshotEnabled
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create a file and take a snapshot
name|String
name|file1
init|=
name|pathStr
operator|+
literal|"/file1"
decl_stmt|;
name|createWithHttp
argument_list|(
name|file1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|createSnapshot
argument_list|(
name|path
argument_list|,
literal|"snap1"
argument_list|)
expr_stmt|;
comment|// Create another file and take a snapshot
name|String
name|file2
init|=
name|pathStr
operator|+
literal|"/file2"
decl_stmt|;
name|createWithHttp
argument_list|(
name|file2
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|createSnapshot
argument_list|(
name|path
argument_list|,
literal|"snap2"
argument_list|)
expr_stmt|;
comment|// Send a request with GETSNAPSHOTDIFF API
name|HttpURLConnection
name|conn
init|=
name|sendRequestGetSnapshotDiff
argument_list|(
name|pathStr
argument_list|,
literal|"snap1"
argument_list|,
literal|"snap2"
argument_list|)
decl_stmt|;
comment|// Should return HTTP_OK
name|Assert
operator|.
name|assertEquals
argument_list|(
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
comment|// Verify the response
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|conn
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// The response should be a one-line JSON string.
name|String
name|result
init|=
name|reader
operator|.
name|readLine
argument_list|()
decl_stmt|;
comment|// Verify the content of diff with DFS API.
name|SnapshotDiffReport
name|dfsDiffReport
init|=
name|dfs
operator|.
name|getSnapshotDiffReport
argument_list|(
name|path
argument_list|,
literal|"snap1"
argument_list|,
literal|"snap2"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|result
argument_list|,
name|JsonUtil
operator|.
name|toJsonString
argument_list|(
name|dfsDiffReport
argument_list|)
argument_list|)
expr_stmt|;
comment|// Clean up
name|dfs
operator|.
name|deleteSnapshot
argument_list|(
name|path
argument_list|,
literal|"snap2"
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|deleteSnapshot
argument_list|(
name|path
argument_list|,
literal|"snap1"
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestDir
annotation|@
name|TestJetty
annotation|@
name|TestHdfs
DECL|method|testGetSnapshotDiffIllegalParam ()
specifier|public
name|void
name|testGetSnapshotDiffIllegalParam
parameter_list|()
throws|throws
name|Exception
block|{
name|createHttpFSServer
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Create a test directory
name|String
name|pathStr
init|=
literal|"/tmp/tmp-snap-diff-exc-test"
decl_stmt|;
name|createDirWithHttp
argument_list|(
name|pathStr
argument_list|,
literal|"700"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|pathStr
argument_list|)
decl_stmt|;
name|DistributedFileSystem
name|dfs
init|=
operator|(
name|DistributedFileSystem
operator|)
name|FileSystem
operator|.
name|get
argument_list|(
name|path
operator|.
name|toUri
argument_list|()
argument_list|,
name|TestHdfsHelper
operator|.
name|getHdfsConf
argument_list|()
argument_list|)
decl_stmt|;
comment|// Enable snapshot
name|dfs
operator|.
name|allowSnapshot
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|isSnapshotEnabled
argument_list|()
argument_list|)
expr_stmt|;
comment|// Send requests with GETSNAPSHOTDIFF API
comment|// Snapshots snap1 and snap2 are not created, expect failures but not NPE
name|HttpURLConnection
name|conn
init|=
name|sendRequestGetSnapshotDiff
argument_list|(
name|pathStr
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotEquals
argument_list|(
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
name|sendRequestGetSnapshotDiff
argument_list|(
name|pathStr
argument_list|,
literal|"snap1"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotEquals
argument_list|(
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
name|sendRequestGetSnapshotDiff
argument_list|(
name|pathStr
argument_list|,
literal|""
argument_list|,
literal|"snap2"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotEquals
argument_list|(
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
name|sendRequestGetSnapshotDiff
argument_list|(
name|pathStr
argument_list|,
literal|"snap1"
argument_list|,
literal|"snap2"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotEquals
argument_list|(
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
comment|// Clean up
name|dfs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyGetSnapshottableDirectoryList (DistributedFileSystem dfs)
specifier|private
name|void
name|verifyGetSnapshottableDirectoryList
parameter_list|(
name|DistributedFileSystem
name|dfs
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Send a request
name|HttpURLConnection
name|conn
init|=
name|sendRequestToHttpFSServer
argument_list|(
literal|"/"
argument_list|,
literal|"GETSNAPSHOTTABLEDIRECTORYLIST"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
comment|// Should return HTTP_OK
name|Assert
operator|.
name|assertEquals
argument_list|(
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
comment|// Verify the response
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|conn
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// The response should be a one-line JSON string.
name|String
name|dirLst
init|=
name|reader
operator|.
name|readLine
argument_list|()
decl_stmt|;
comment|// Verify the content of diff with DFS API.
name|SnapshottableDirectoryStatus
index|[]
name|dfsDirLst
init|=
name|dfs
operator|.
name|getSnapshottableDirListing
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dirLst
argument_list|,
name|JsonUtil
operator|.
name|toJsonString
argument_list|(
name|dfsDirLst
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestDir
annotation|@
name|TestJetty
annotation|@
name|TestHdfs
DECL|method|testGetSnapshottableDirectoryList ()
specifier|public
name|void
name|testGetSnapshottableDirectoryList
parameter_list|()
throws|throws
name|Exception
block|{
name|createHttpFSServer
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Create test directories
name|String
name|pathStr1
init|=
literal|"/tmp/tmp-snap-dirlist-test-1"
decl_stmt|;
name|createDirWithHttp
argument_list|(
name|pathStr1
argument_list|,
literal|"700"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Path
name|path1
init|=
operator|new
name|Path
argument_list|(
name|pathStr1
argument_list|)
decl_stmt|;
name|String
name|pathStr2
init|=
literal|"/tmp/tmp-snap-dirlist-test-2"
decl_stmt|;
name|createDirWithHttp
argument_list|(
name|pathStr2
argument_list|,
literal|"700"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Path
name|path2
init|=
operator|new
name|Path
argument_list|(
name|pathStr2
argument_list|)
decl_stmt|;
name|DistributedFileSystem
name|dfs
init|=
operator|(
name|DistributedFileSystem
operator|)
name|FileSystem
operator|.
name|get
argument_list|(
name|path1
operator|.
name|toUri
argument_list|()
argument_list|,
name|TestHdfsHelper
operator|.
name|getHdfsConf
argument_list|()
argument_list|)
decl_stmt|;
comment|// Verify response when there is no snapshottable directory
name|verifyGetSnapshottableDirectoryList
argument_list|(
name|dfs
argument_list|)
expr_stmt|;
comment|// Enable snapshot for path1
name|dfs
operator|.
name|allowSnapshot
argument_list|(
name|path1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|path1
argument_list|)
operator|.
name|isSnapshotEnabled
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify response when there is one snapshottable directory
name|verifyGetSnapshottableDirectoryList
argument_list|(
name|dfs
argument_list|)
expr_stmt|;
comment|// Enable snapshot for path2
name|dfs
operator|.
name|allowSnapshot
argument_list|(
name|path2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|path2
argument_list|)
operator|.
name|isSnapshotEnabled
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify response when there are two snapshottable directories
name|verifyGetSnapshottableDirectoryList
argument_list|(
name|dfs
argument_list|)
expr_stmt|;
comment|// Clean up and verify
name|dfs
operator|.
name|delete
argument_list|(
name|path2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyGetSnapshottableDirectoryList
argument_list|(
name|dfs
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|delete
argument_list|(
name|path1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyGetSnapshottableDirectoryList
argument_list|(
name|dfs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestDir
annotation|@
name|TestJetty
annotation|@
name|TestHdfs
DECL|method|testNoRedirect ()
specifier|public
name|void
name|testNoRedirect
parameter_list|()
throws|throws
name|Exception
block|{
name|createHttpFSServer
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|String
name|testContent
init|=
literal|"Test content"
decl_stmt|;
specifier|final
name|String
name|path
init|=
literal|"/testfile.txt"
decl_stmt|;
specifier|final
name|String
name|username
init|=
name|HadoopUsersConfTestHelper
operator|.
name|getHadoopUsers
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
comment|// Trigger the creation of the file which shouldn't redirect
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|TestJettyHelper
operator|.
name|getJettyURL
argument_list|()
argument_list|,
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"/webhdfs/v1{0}?user.name={1}&op=CREATE&noredirect=true"
argument_list|,
name|path
argument_list|,
name|username
argument_list|)
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|setRequestMethod
argument_list|(
name|HttpMethod
operator|.
name|PUT
argument_list|)
expr_stmt|;
name|conn
operator|.
name|connect
argument_list|()
expr_stmt|;
comment|// Verify that it returned the final write location
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
operator|(
name|JSONObject
operator|)
operator|new
name|JSONParser
argument_list|()
operator|.
name|parse
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|conn
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|location
init|=
operator|(
name|String
operator|)
name|json
operator|.
name|get
argument_list|(
literal|"Location"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|location
operator|.
name|contains
argument_list|(
name|DataParam
operator|.
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|location
operator|.
name|contains
argument_list|(
name|NoRedirectParam
operator|.
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|location
operator|.
name|contains
argument_list|(
literal|"CREATE"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Wrong location: "
operator|+
name|location
argument_list|,
name|location
operator|.
name|startsWith
argument_list|(
name|TestJettyHelper
operator|.
name|getJettyURL
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Use the location to actually write the file
name|url
operator|=
operator|new
name|URL
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|conn
operator|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|conn
operator|.
name|setRequestMethod
argument_list|(
name|HttpMethod
operator|.
name|PUT
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setRequestProperty
argument_list|(
literal|"Content-Type"
argument_list|,
name|MediaType
operator|.
name|APPLICATION_OCTET_STREAM
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setDoOutput
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|conn
operator|.
name|connect
argument_list|()
expr_stmt|;
name|OutputStream
name|os
init|=
name|conn
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
name|os
operator|.
name|write
argument_list|(
name|testContent
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Verify that it created the file and returned the location
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_CREATED
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|=
operator|(
name|JSONObject
operator|)
operator|new
name|JSONParser
argument_list|()
operator|.
name|parse
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|conn
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|location
operator|=
operator|(
name|String
operator|)
name|json
operator|.
name|get
argument_list|(
literal|"Location"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TestJettyHelper
operator|.
name|getJettyURL
argument_list|()
operator|+
literal|"/webhdfs/v1"
operator|+
name|path
argument_list|,
name|location
argument_list|)
expr_stmt|;
comment|// Read the file which shouldn't redirect
name|url
operator|=
operator|new
name|URL
argument_list|(
name|TestJettyHelper
operator|.
name|getJettyURL
argument_list|()
argument_list|,
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"/webhdfs/v1{0}?user.name={1}&op=OPEN&noredirect=true"
argument_list|,
name|path
argument_list|,
name|username
argument_list|)
argument_list|)
expr_stmt|;
name|conn
operator|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|conn
operator|.
name|setRequestMethod
argument_list|(
name|HttpMethod
operator|.
name|GET
argument_list|)
expr_stmt|;
name|conn
operator|.
name|connect
argument_list|()
expr_stmt|;
comment|// Verify that we got the final location to read from
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|=
operator|(
name|JSONObject
operator|)
operator|new
name|JSONParser
argument_list|()
operator|.
name|parse
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|conn
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|location
operator|=
operator|(
name|String
operator|)
name|json
operator|.
name|get
argument_list|(
literal|"Location"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|!
name|location
operator|.
name|contains
argument_list|(
name|NoRedirectParam
operator|.
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|location
operator|.
name|contains
argument_list|(
literal|"OPEN"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Wrong location: "
operator|+
name|location
argument_list|,
name|location
operator|.
name|startsWith
argument_list|(
name|TestJettyHelper
operator|.
name|getJettyURL
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Use the location to actually read
name|url
operator|=
operator|new
name|URL
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|conn
operator|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|conn
operator|.
name|setRequestMethod
argument_list|(
name|HttpMethod
operator|.
name|GET
argument_list|)
expr_stmt|;
name|conn
operator|.
name|connect
argument_list|()
expr_stmt|;
comment|// Verify that we read what we wrote
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|content
init|=
name|IOUtils
operator|.
name|toString
argument_list|(
name|conn
operator|.
name|getInputStream
argument_list|()
argument_list|,
name|Charset
operator|.
name|defaultCharset
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|testContent
argument_list|,
name|content
argument_list|)
expr_stmt|;
comment|// Get the checksum of the file which shouldn't redirect
name|url
operator|=
operator|new
name|URL
argument_list|(
name|TestJettyHelper
operator|.
name|getJettyURL
argument_list|()
argument_list|,
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"/webhdfs/v1{0}?user.name={1}&op=GETFILECHECKSUM&noredirect=true"
argument_list|,
name|path
argument_list|,
name|username
argument_list|)
argument_list|)
expr_stmt|;
name|conn
operator|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|conn
operator|.
name|setRequestMethod
argument_list|(
name|HttpMethod
operator|.
name|GET
argument_list|)
expr_stmt|;
name|conn
operator|.
name|connect
argument_list|()
expr_stmt|;
comment|// Verify that we got the final location to write to
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|=
operator|(
name|JSONObject
operator|)
operator|new
name|JSONParser
argument_list|()
operator|.
name|parse
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|conn
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|location
operator|=
operator|(
name|String
operator|)
name|json
operator|.
name|get
argument_list|(
literal|"Location"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|!
name|location
operator|.
name|contains
argument_list|(
name|NoRedirectParam
operator|.
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|location
operator|.
name|contains
argument_list|(
literal|"GETFILECHECKSUM"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Wrong location: "
operator|+
name|location
argument_list|,
name|location
operator|.
name|startsWith
argument_list|(
name|TestJettyHelper
operator|.
name|getJettyURL
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Use the location to actually get the checksum
name|url
operator|=
operator|new
name|URL
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|conn
operator|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|conn
operator|.
name|setRequestMethod
argument_list|(
name|HttpMethod
operator|.
name|GET
argument_list|)
expr_stmt|;
name|conn
operator|.
name|connect
argument_list|()
expr_stmt|;
comment|// Verify that we read what we wrote
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|=
operator|(
name|JSONObject
operator|)
operator|new
name|JSONParser
argument_list|()
operator|.
name|parse
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|conn
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|JSONObject
name|checksum
init|=
operator|(
name|JSONObject
operator|)
name|json
operator|.
name|get
argument_list|(
literal|"FileChecksum"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"0000020000000000000000001b9c0a445fed3c0bf1e1aa7438d96b1500000000"
argument_list|,
name|checksum
operator|.
name|get
argument_list|(
literal|"bytes"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|28L
argument_list|,
name|checksum
operator|.
name|get
argument_list|(
literal|"length"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"MD5-of-0MD5-of-512CRC32C"
argument_list|,
name|checksum
operator|.
name|get
argument_list|(
literal|"algorithm"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

