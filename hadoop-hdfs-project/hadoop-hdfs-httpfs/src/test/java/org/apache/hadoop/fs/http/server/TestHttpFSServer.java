begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.http.server
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|http
operator|.
name|server
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|simple
operator|.
name|JSONArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|MessageFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|XAttrCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|http
operator|.
name|client
operator|.
name|HttpFSKerberosAuthenticator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|lib
operator|.
name|server
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|lib
operator|.
name|server
operator|.
name|ServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|lib
operator|.
name|service
operator|.
name|Groups
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|client
operator|.
name|AuthenticatedURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
operator|.
name|AuthenticationToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|util
operator|.
name|Signer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|HFSTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|HadoopUsersConfTestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|TestDir
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|TestDirHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|TestHdfs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|TestHdfsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|TestJetty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|TestJettyHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|simple
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|simple
operator|.
name|parser
operator|.
name|JSONParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|jetty
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|jetty
operator|.
name|webapp
operator|.
name|WebAppContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_class
DECL|class|TestHttpFSServer
specifier|public
class|class
name|TestHttpFSServer
extends|extends
name|HFSTestCase
block|{
annotation|@
name|Test
annotation|@
name|TestDir
annotation|@
name|TestJetty
DECL|method|server ()
specifier|public
name|void
name|server
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dir
init|=
name|TestDirHelper
operator|.
name|getTestDir
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|Configuration
name|httpfsConf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|HttpFSServerWebApp
name|server
init|=
operator|new
name|HttpFSServerWebApp
argument_list|(
name|dir
argument_list|,
name|dir
argument_list|,
name|dir
argument_list|,
name|dir
argument_list|,
name|httpfsConf
argument_list|)
decl_stmt|;
name|server
operator|.
name|init
argument_list|()
expr_stmt|;
name|server
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
DECL|class|MockGroups
specifier|public
specifier|static
class|class
name|MockGroups
implements|implements
name|Service
implements|,
name|Groups
block|{
annotation|@
name|Override
DECL|method|init (org.apache.hadoop.lib.server.Server server)
specifier|public
name|void
name|init
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|lib
operator|.
name|server
operator|.
name|Server
name|server
parameter_list|)
throws|throws
name|ServiceException
block|{     }
annotation|@
name|Override
DECL|method|postInit ()
specifier|public
name|void
name|postInit
parameter_list|()
throws|throws
name|ServiceException
block|{     }
annotation|@
name|Override
DECL|method|destroy ()
specifier|public
name|void
name|destroy
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|getServiceDependencies ()
specifier|public
name|Class
index|[]
name|getServiceDependencies
parameter_list|()
block|{
return|return
operator|new
name|Class
index|[
literal|0
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|getInterface ()
specifier|public
name|Class
name|getInterface
parameter_list|()
block|{
return|return
name|Groups
operator|.
name|class
return|;
block|}
annotation|@
name|Override
DECL|method|serverStatusChange (org.apache.hadoop.lib.server.Server.Status oldStatus, org.apache.hadoop.lib.server.Server.Status newStatus)
specifier|public
name|void
name|serverStatusChange
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|lib
operator|.
name|server
operator|.
name|Server
operator|.
name|Status
name|oldStatus
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|lib
operator|.
name|server
operator|.
name|Server
operator|.
name|Status
name|newStatus
parameter_list|)
throws|throws
name|ServiceException
block|{     }
annotation|@
name|Override
DECL|method|getGroups (String user)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getGroups
parameter_list|(
name|String
name|user
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|HadoopUsersConfTestHelper
operator|.
name|getHadoopUserGroups
argument_list|(
name|user
argument_list|)
argument_list|)
return|;
block|}
block|}
DECL|method|createHttpFSServer (boolean addDelegationTokenAuthHandler)
specifier|private
name|void
name|createHttpFSServer
parameter_list|(
name|boolean
name|addDelegationTokenAuthHandler
parameter_list|)
throws|throws
name|Exception
block|{
name|File
name|homeDir
init|=
name|TestDirHelper
operator|.
name|getTestDir
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|homeDir
argument_list|,
literal|"conf"
argument_list|)
operator|.
name|mkdir
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|homeDir
argument_list|,
literal|"log"
argument_list|)
operator|.
name|mkdir
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|homeDir
argument_list|,
literal|"temp"
argument_list|)
operator|.
name|mkdir
argument_list|()
argument_list|)
expr_stmt|;
name|HttpFSServerWebApp
operator|.
name|setHomeDirForCurrentThread
argument_list|(
name|homeDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|secretFile
init|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|homeDir
argument_list|,
literal|"conf"
argument_list|)
argument_list|,
literal|"secret"
argument_list|)
decl_stmt|;
name|Writer
name|w
init|=
operator|new
name|FileWriter
argument_list|(
name|secretFile
argument_list|)
decl_stmt|;
name|w
operator|.
name|write
argument_list|(
literal|"secret"
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//HDFS configuration
name|File
name|hadoopConfDir
init|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|homeDir
argument_list|,
literal|"conf"
argument_list|)
argument_list|,
literal|"hadoop-conf"
argument_list|)
decl_stmt|;
name|hadoopConfDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|String
name|fsDefaultName
init|=
name|TestHdfsHelper
operator|.
name|getHdfsConf
argument_list|()
operator|.
name|get
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|FS_DEFAULT_NAME_KEY
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|FS_DEFAULT_NAME_KEY
argument_list|,
name|fsDefaultName
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_ACLS_ENABLED_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_XATTRS_ENABLED_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|File
name|hdfsSite
init|=
operator|new
name|File
argument_list|(
name|hadoopConfDir
argument_list|,
literal|"hdfs-site.xml"
argument_list|)
decl_stmt|;
name|OutputStream
name|os
init|=
operator|new
name|FileOutputStream
argument_list|(
name|hdfsSite
argument_list|)
decl_stmt|;
name|conf
operator|.
name|writeXml
argument_list|(
name|os
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//HTTPFS configuration
name|conf
operator|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|addDelegationTokenAuthHandler
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
literal|"httpfs.authentication.type"
argument_list|,
name|HttpFSKerberosAuthenticationHandlerForTesting
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|set
argument_list|(
literal|"httpfs.services.ext"
argument_list|,
name|MockGroups
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"httpfs.admin.group"
argument_list|,
name|HadoopUsersConfTestHelper
operator|.
name|getHadoopUserGroups
argument_list|(
name|HadoopUsersConfTestHelper
operator|.
name|getHadoopUsers
argument_list|()
index|[
literal|0
index|]
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"httpfs.proxyuser."
operator|+
name|HadoopUsersConfTestHelper
operator|.
name|getHadoopProxyUser
argument_list|()
operator|+
literal|".groups"
argument_list|,
name|HadoopUsersConfTestHelper
operator|.
name|getHadoopProxyUserGroups
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"httpfs.proxyuser."
operator|+
name|HadoopUsersConfTestHelper
operator|.
name|getHadoopProxyUser
argument_list|()
operator|+
literal|".hosts"
argument_list|,
name|HadoopUsersConfTestHelper
operator|.
name|getHadoopProxyUserHosts
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"httpfs.authentication.signature.secret.file"
argument_list|,
name|secretFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"httpfs.hadoop.config.dir"
argument_list|,
name|hadoopConfDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|httpfsSite
init|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|homeDir
argument_list|,
literal|"conf"
argument_list|)
argument_list|,
literal|"httpfs-site.xml"
argument_list|)
decl_stmt|;
name|os
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|httpfsSite
argument_list|)
expr_stmt|;
name|conf
operator|.
name|writeXml
argument_list|(
name|os
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
name|ClassLoader
name|cl
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
name|URL
name|url
init|=
name|cl
operator|.
name|getResource
argument_list|(
literal|"webapp"
argument_list|)
decl_stmt|;
name|WebAppContext
name|context
init|=
operator|new
name|WebAppContext
argument_list|(
name|url
operator|.
name|getPath
argument_list|()
argument_list|,
literal|"/webhdfs"
argument_list|)
decl_stmt|;
name|Server
name|server
init|=
name|TestJettyHelper
operator|.
name|getJettyServer
argument_list|()
decl_stmt|;
name|server
operator|.
name|addHandler
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
if|if
condition|(
name|addDelegationTokenAuthHandler
condition|)
block|{
name|HttpFSServerWebApp
operator|.
name|get
argument_list|()
operator|.
name|setAuthority
argument_list|(
name|TestJettyHelper
operator|.
name|getAuthority
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
annotation|@
name|TestDir
annotation|@
name|TestJetty
annotation|@
name|TestHdfs
DECL|method|instrumentation ()
specifier|public
name|void
name|instrumentation
parameter_list|()
throws|throws
name|Exception
block|{
name|createHttpFSServer
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|TestJettyHelper
operator|.
name|getJettyURL
argument_list|()
argument_list|,
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"/webhdfs/v1?user.name={0}&op=instrumentation"
argument_list|,
literal|"nobody"
argument_list|)
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_UNAUTHORIZED
argument_list|)
expr_stmt|;
name|url
operator|=
operator|new
name|URL
argument_list|(
name|TestJettyHelper
operator|.
name|getJettyURL
argument_list|()
argument_list|,
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"/webhdfs/v1?user.name={0}&op=instrumentation"
argument_list|,
name|HadoopUsersConfTestHelper
operator|.
name|getHadoopUsers
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|conn
operator|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|conn
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
init|=
name|reader
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|line
operator|.
name|contains
argument_list|(
literal|"\"counters\":{"
argument_list|)
argument_list|)
expr_stmt|;
name|url
operator|=
operator|new
name|URL
argument_list|(
name|TestJettyHelper
operator|.
name|getJettyURL
argument_list|()
argument_list|,
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"/webhdfs/v1/foo?user.name={0}&op=instrumentation"
argument_list|,
name|HadoopUsersConfTestHelper
operator|.
name|getHadoopUsers
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|conn
operator|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_BAD_REQUEST
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestDir
annotation|@
name|TestJetty
annotation|@
name|TestHdfs
DECL|method|testHdfsAccess ()
specifier|public
name|void
name|testHdfsAccess
parameter_list|()
throws|throws
name|Exception
block|{
name|createHttpFSServer
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|String
name|user
init|=
name|HadoopUsersConfTestHelper
operator|.
name|getHadoopUsers
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|TestJettyHelper
operator|.
name|getJettyURL
argument_list|()
argument_list|,
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"/webhdfs/v1/?user.name={0}&op=liststatus"
argument_list|,
name|user
argument_list|)
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|conn
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestDir
annotation|@
name|TestJetty
annotation|@
name|TestHdfs
DECL|method|testGlobFilter ()
specifier|public
name|void
name|testGlobFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|createHttpFSServer
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|TestHdfsHelper
operator|.
name|getHdfsConf
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/tmp"
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/tmp/foo.txt"
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
name|user
init|=
name|HadoopUsersConfTestHelper
operator|.
name|getHadoopUsers
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|TestJettyHelper
operator|.
name|getJettyURL
argument_list|()
argument_list|,
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"/webhdfs/v1/tmp?user.name={0}&op=liststatus&filter=f*"
argument_list|,
name|user
argument_list|)
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|conn
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Talks to the http interface to create a file.    *    * @param filename The file to create    * @param perms The permission field, if any (may be null)    * @throws Exception    */
DECL|method|createWithHttp ( String filename, String perms )
specifier|private
name|void
name|createWithHttp
parameter_list|(
name|String
name|filename
parameter_list|,
name|String
name|perms
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|user
init|=
name|HadoopUsersConfTestHelper
operator|.
name|getHadoopUsers
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
comment|// Remove leading / from filename
if|if
condition|(
name|filename
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'/'
condition|)
block|{
name|filename
operator|=
name|filename
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|String
name|pathOps
decl_stmt|;
if|if
condition|(
name|perms
operator|==
literal|null
condition|)
block|{
name|pathOps
operator|=
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"/webhdfs/v1/{0}?user.name={1}&op=CREATE"
argument_list|,
name|filename
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pathOps
operator|=
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"/webhdfs/v1/{0}?user.name={1}&permission={2}&op=CREATE"
argument_list|,
name|filename
argument_list|,
name|user
argument_list|,
name|perms
argument_list|)
expr_stmt|;
block|}
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|TestJettyHelper
operator|.
name|getJettyURL
argument_list|()
argument_list|,
name|pathOps
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|addRequestProperty
argument_list|(
literal|"Content-Type"
argument_list|,
literal|"application/octet-stream"
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setRequestMethod
argument_list|(
literal|"PUT"
argument_list|)
expr_stmt|;
name|conn
operator|.
name|connect
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_CREATED
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Talks to the http interface to get the json output of a *STATUS command    * on the given file.    *    * @param filename The file to query.    * @param command Either GETFILESTATUS, LISTSTATUS, or ACLSTATUS    * @return A string containing the JSON output describing the file.    * @throws Exception    */
DECL|method|getStatus (String filename, String command)
specifier|private
name|String
name|getStatus
parameter_list|(
name|String
name|filename
parameter_list|,
name|String
name|command
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|user
init|=
name|HadoopUsersConfTestHelper
operator|.
name|getHadoopUsers
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
comment|// Remove leading / from filename
if|if
condition|(
name|filename
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'/'
condition|)
block|{
name|filename
operator|=
name|filename
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|String
name|pathOps
init|=
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"/webhdfs/v1/{0}?user.name={1}&op={2}"
argument_list|,
name|filename
argument_list|,
name|user
argument_list|,
name|command
argument_list|)
decl_stmt|;
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|TestJettyHelper
operator|.
name|getJettyURL
argument_list|()
argument_list|,
name|pathOps
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|connect
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|conn
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|reader
operator|.
name|readLine
argument_list|()
return|;
block|}
comment|/**    * General-purpose http PUT command to the httpfs server.    * @param filename The file to operate upon    * @param command The command to perform (SETACL, etc)    * @param params Parameters, like "aclspec=..."    */
DECL|method|putCmd (String filename, String command, String params)
specifier|private
name|void
name|putCmd
parameter_list|(
name|String
name|filename
parameter_list|,
name|String
name|command
parameter_list|,
name|String
name|params
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|user
init|=
name|HadoopUsersConfTestHelper
operator|.
name|getHadoopUsers
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
comment|// Remove leading / from filename
if|if
condition|(
name|filename
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'/'
condition|)
block|{
name|filename
operator|=
name|filename
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|String
name|pathOps
init|=
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"/webhdfs/v1/{0}?user.name={1}{2}{3}&op={4}"
argument_list|,
name|filename
argument_list|,
name|user
argument_list|,
operator|(
name|params
operator|==
literal|null
operator|)
condition|?
literal|""
else|:
literal|"&"
argument_list|,
operator|(
name|params
operator|==
literal|null
operator|)
condition|?
literal|""
else|:
name|params
argument_list|,
name|command
argument_list|)
decl_stmt|;
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|TestJettyHelper
operator|.
name|getJettyURL
argument_list|()
argument_list|,
name|pathOps
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|setRequestMethod
argument_list|(
literal|"PUT"
argument_list|)
expr_stmt|;
name|conn
operator|.
name|connect
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Given the JSON output from the GETFILESTATUS call, return the    * 'permission' value.    *    * @param statusJson JSON from GETFILESTATUS    * @return The value of 'permission' in statusJson    * @throws Exception    */
DECL|method|getPerms ( String statusJson )
specifier|private
name|String
name|getPerms
parameter_list|(
name|String
name|statusJson
parameter_list|)
throws|throws
name|Exception
block|{
name|JSONParser
name|parser
init|=
operator|new
name|JSONParser
argument_list|()
decl_stmt|;
name|JSONObject
name|jsonObject
init|=
operator|(
name|JSONObject
operator|)
name|parser
operator|.
name|parse
argument_list|(
name|statusJson
argument_list|)
decl_stmt|;
name|JSONObject
name|details
init|=
operator|(
name|JSONObject
operator|)
name|jsonObject
operator|.
name|get
argument_list|(
literal|"FileStatus"
argument_list|)
decl_stmt|;
return|return
operator|(
name|String
operator|)
name|details
operator|.
name|get
argument_list|(
literal|"permission"
argument_list|)
return|;
block|}
comment|/**    * Given the JSON output from the GETACLSTATUS call, return the    * 'entries' value as a List<String>.    * @param statusJson JSON from GETACLSTATUS    * @return A List of Strings which are the elements of the ACL entries    * @throws Exception    */
DECL|method|getAclEntries ( String statusJson )
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getAclEntries
parameter_list|(
name|String
name|statusJson
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|JSONParser
name|parser
init|=
operator|new
name|JSONParser
argument_list|()
decl_stmt|;
name|JSONObject
name|jsonObject
init|=
operator|(
name|JSONObject
operator|)
name|parser
operator|.
name|parse
argument_list|(
name|statusJson
argument_list|)
decl_stmt|;
name|JSONObject
name|details
init|=
operator|(
name|JSONObject
operator|)
name|jsonObject
operator|.
name|get
argument_list|(
literal|"AclStatus"
argument_list|)
decl_stmt|;
name|JSONArray
name|jsonEntries
init|=
operator|(
name|JSONArray
operator|)
name|details
operator|.
name|get
argument_list|(
literal|"entries"
argument_list|)
decl_stmt|;
if|if
condition|(
name|jsonEntries
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Object
name|e
range|:
name|jsonEntries
control|)
block|{
name|entries
operator|.
name|add
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|entries
return|;
block|}
comment|/**    * Parse xAttrs from JSON result of GETXATTRS call, return xAttrs Map.    * @param statusJson JSON from GETXATTRS    * @return Map<String, byte[]> xAttrs Map    * @throws Exception    */
DECL|method|getXAttrs (String statusJson)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|getXAttrs
parameter_list|(
name|String
name|statusJson
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|xAttrs
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|JSONParser
name|parser
init|=
operator|new
name|JSONParser
argument_list|()
decl_stmt|;
name|JSONObject
name|jsonObject
init|=
operator|(
name|JSONObject
operator|)
name|parser
operator|.
name|parse
argument_list|(
name|statusJson
argument_list|)
decl_stmt|;
name|JSONArray
name|jsonXAttrs
init|=
operator|(
name|JSONArray
operator|)
name|jsonObject
operator|.
name|get
argument_list|(
literal|"XAttrs"
argument_list|)
decl_stmt|;
if|if
condition|(
name|jsonXAttrs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Object
name|a
range|:
name|jsonXAttrs
control|)
block|{
name|String
name|name
init|=
call|(
name|String
call|)
argument_list|(
operator|(
name|JSONObject
operator|)
name|a
argument_list|)
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|String
name|value
init|=
call|(
name|String
call|)
argument_list|(
operator|(
name|JSONObject
operator|)
name|a
argument_list|)
operator|.
name|get
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|xAttrs
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|decodeXAttrValue
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|xAttrs
return|;
block|}
comment|/** Decode xattr value from string */
DECL|method|decodeXAttrValue (String value)
specifier|private
name|byte
index|[]
name|decodeXAttrValue
parameter_list|(
name|String
name|value
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
return|return
name|XAttrCodec
operator|.
name|decodeValue
argument_list|(
name|value
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|byte
index|[
literal|0
index|]
return|;
block|}
block|}
comment|/**    * Validate that files are created with 755 permissions when no    * 'permissions' attribute is specified, and when 'permissions'    * is specified, that value is honored.    */
annotation|@
name|Test
annotation|@
name|TestDir
annotation|@
name|TestJetty
annotation|@
name|TestHdfs
DECL|method|testPerms ()
specifier|public
name|void
name|testPerms
parameter_list|()
throws|throws
name|Exception
block|{
name|createHttpFSServer
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|TestHdfsHelper
operator|.
name|getHdfsConf
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/perm"
argument_list|)
argument_list|)
expr_stmt|;
name|createWithHttp
argument_list|(
literal|"/perm/none"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|String
name|statusJson
init|=
name|getStatus
argument_list|(
literal|"/perm/none"
argument_list|,
literal|"GETFILESTATUS"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"755"
operator|.
name|equals
argument_list|(
name|getPerms
argument_list|(
name|statusJson
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|createWithHttp
argument_list|(
literal|"/perm/p-777"
argument_list|,
literal|"777"
argument_list|)
expr_stmt|;
name|statusJson
operator|=
name|getStatus
argument_list|(
literal|"/perm/p-777"
argument_list|,
literal|"GETFILESTATUS"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"777"
operator|.
name|equals
argument_list|(
name|getPerms
argument_list|(
name|statusJson
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|createWithHttp
argument_list|(
literal|"/perm/p-654"
argument_list|,
literal|"654"
argument_list|)
expr_stmt|;
name|statusJson
operator|=
name|getStatus
argument_list|(
literal|"/perm/p-654"
argument_list|,
literal|"GETFILESTATUS"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"654"
operator|.
name|equals
argument_list|(
name|getPerms
argument_list|(
name|statusJson
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|createWithHttp
argument_list|(
literal|"/perm/p-321"
argument_list|,
literal|"321"
argument_list|)
expr_stmt|;
name|statusJson
operator|=
name|getStatus
argument_list|(
literal|"/perm/p-321"
argument_list|,
literal|"GETFILESTATUS"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"321"
operator|.
name|equals
argument_list|(
name|getPerms
argument_list|(
name|statusJson
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Validate XAttr get/set/remove calls.    */
annotation|@
name|Test
annotation|@
name|TestDir
annotation|@
name|TestJetty
annotation|@
name|TestHdfs
DECL|method|testXAttrs ()
specifier|public
name|void
name|testXAttrs
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|name1
init|=
literal|"user.a1"
decl_stmt|;
specifier|final
name|byte
index|[]
name|value1
init|=
operator|new
name|byte
index|[]
block|{
literal|0x31
block|,
literal|0x32
block|,
literal|0x33
block|}
decl_stmt|;
specifier|final
name|String
name|name2
init|=
literal|"user.a2"
decl_stmt|;
specifier|final
name|byte
index|[]
name|value2
init|=
operator|new
name|byte
index|[]
block|{
literal|0x41
block|,
literal|0x42
block|,
literal|0x43
block|}
decl_stmt|;
specifier|final
name|String
name|dir
init|=
literal|"/xattrTest"
decl_stmt|;
specifier|final
name|String
name|path
init|=
name|dir
operator|+
literal|"/file"
decl_stmt|;
name|createHttpFSServer
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|TestHdfsHelper
operator|.
name|getHdfsConf
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
name|createWithHttp
argument_list|(
name|path
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|String
name|statusJson
init|=
name|getStatus
argument_list|(
name|path
argument_list|,
literal|"GETXATTRS"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|xAttrs
init|=
name|getXAttrs
argument_list|(
name|statusJson
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|xAttrs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Set two xattrs
name|putCmd
argument_list|(
name|path
argument_list|,
literal|"SETXATTR"
argument_list|,
name|setXAttrParam
argument_list|(
name|name1
argument_list|,
name|value1
argument_list|)
argument_list|)
expr_stmt|;
name|putCmd
argument_list|(
name|path
argument_list|,
literal|"SETXATTR"
argument_list|,
name|setXAttrParam
argument_list|(
name|name2
argument_list|,
name|value2
argument_list|)
argument_list|)
expr_stmt|;
name|statusJson
operator|=
name|getStatus
argument_list|(
name|path
argument_list|,
literal|"GETXATTRS"
argument_list|)
expr_stmt|;
name|xAttrs
operator|=
name|getXAttrs
argument_list|(
name|statusJson
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|xAttrs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|value1
argument_list|,
name|xAttrs
operator|.
name|get
argument_list|(
name|name1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|value2
argument_list|,
name|xAttrs
operator|.
name|get
argument_list|(
name|name2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Remove one xattr
name|putCmd
argument_list|(
name|path
argument_list|,
literal|"REMOVEXATTR"
argument_list|,
literal|"xattr.name="
operator|+
name|name1
argument_list|)
expr_stmt|;
name|statusJson
operator|=
name|getStatus
argument_list|(
name|path
argument_list|,
literal|"GETXATTRS"
argument_list|)
expr_stmt|;
name|xAttrs
operator|=
name|getXAttrs
argument_list|(
name|statusJson
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|xAttrs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|value2
argument_list|,
name|xAttrs
operator|.
name|get
argument_list|(
name|name2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Remove another xattr, then there is no xattr
name|putCmd
argument_list|(
name|path
argument_list|,
literal|"REMOVEXATTR"
argument_list|,
literal|"xattr.name="
operator|+
name|name2
argument_list|)
expr_stmt|;
name|statusJson
operator|=
name|getStatus
argument_list|(
name|path
argument_list|,
literal|"GETXATTRS"
argument_list|)
expr_stmt|;
name|xAttrs
operator|=
name|getXAttrs
argument_list|(
name|statusJson
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|xAttrs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Params for setting an xAttr */
DECL|method|setXAttrParam (String name, byte[] value)
specifier|public
specifier|static
name|String
name|setXAttrParam
parameter_list|(
name|String
name|name
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|"xattr.name="
operator|+
name|name
operator|+
literal|"&xattr.value="
operator|+
name|XAttrCodec
operator|.
name|encodeValue
argument_list|(
name|value
argument_list|,
name|XAttrCodec
operator|.
name|HEX
argument_list|)
operator|+
literal|"&encoding=hex&flag=create"
return|;
block|}
comment|/**    * Validate the various ACL set/modify/remove calls.  General strategy is    * to verify each of the following steps with GETFILESTATUS, LISTSTATUS,    * and GETACLSTATUS:    *<ol>    *<li>Create a file with no ACLs</li>    *<li>Add a user + group ACL</li>    *<li>Add another user ACL</li>    *<li>Remove the first user ACL</li>    *<li>Remove all ACLs</li>    *</ol>    */
annotation|@
name|Test
annotation|@
name|TestDir
annotation|@
name|TestJetty
annotation|@
name|TestHdfs
DECL|method|testFileAcls ()
specifier|public
name|void
name|testFileAcls
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|aclUser1
init|=
literal|"user:foo:rw-"
decl_stmt|;
specifier|final
name|String
name|aclUser2
init|=
literal|"user:bar:r--"
decl_stmt|;
specifier|final
name|String
name|aclGroup1
init|=
literal|"group::r--"
decl_stmt|;
specifier|final
name|String
name|aclSpec
init|=
literal|"aclspec=user::rwx,"
operator|+
name|aclUser1
operator|+
literal|","
operator|+
name|aclGroup1
operator|+
literal|",other::---"
decl_stmt|;
specifier|final
name|String
name|modAclSpec
init|=
literal|"aclspec="
operator|+
name|aclUser2
decl_stmt|;
specifier|final
name|String
name|remAclSpec
init|=
literal|"aclspec="
operator|+
name|aclUser1
decl_stmt|;
specifier|final
name|String
name|dir
init|=
literal|"/aclFileTest"
decl_stmt|;
specifier|final
name|String
name|path
init|=
name|dir
operator|+
literal|"/test"
decl_stmt|;
name|String
name|statusJson
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|aclEntries
decl_stmt|;
name|createHttpFSServer
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|TestHdfsHelper
operator|.
name|getHdfsConf
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
name|createWithHttp
argument_list|(
name|path
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|/* getfilestatus and liststatus don't have 'aclBit' in their reply */
name|statusJson
operator|=
name|getStatus
argument_list|(
name|path
argument_list|,
literal|"GETFILESTATUS"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|statusJson
operator|.
name|indexOf
argument_list|(
literal|"aclBit"
argument_list|)
argument_list|)
expr_stmt|;
name|statusJson
operator|=
name|getStatus
argument_list|(
name|dir
argument_list|,
literal|"LISTSTATUS"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|statusJson
operator|.
name|indexOf
argument_list|(
literal|"aclBit"
argument_list|)
argument_list|)
expr_stmt|;
comment|/* getaclstatus works and returns no entries */
name|statusJson
operator|=
name|getStatus
argument_list|(
name|path
argument_list|,
literal|"GETACLSTATUS"
argument_list|)
expr_stmt|;
name|aclEntries
operator|=
name|getAclEntries
argument_list|(
name|statusJson
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|aclEntries
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|/*      * Now set an ACL on the file.  (getfile|list)status have aclBit,      * and aclstatus has entries that looks familiar.      */
name|putCmd
argument_list|(
name|path
argument_list|,
literal|"SETACL"
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|statusJson
operator|=
name|getStatus
argument_list|(
name|path
argument_list|,
literal|"GETFILESTATUS"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|statusJson
operator|.
name|indexOf
argument_list|(
literal|"aclBit"
argument_list|)
argument_list|)
expr_stmt|;
name|statusJson
operator|=
name|getStatus
argument_list|(
name|dir
argument_list|,
literal|"LISTSTATUS"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|statusJson
operator|.
name|indexOf
argument_list|(
literal|"aclBit"
argument_list|)
argument_list|)
expr_stmt|;
name|statusJson
operator|=
name|getStatus
argument_list|(
name|path
argument_list|,
literal|"GETACLSTATUS"
argument_list|)
expr_stmt|;
name|aclEntries
operator|=
name|getAclEntries
argument_list|(
name|statusJson
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|aclEntries
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|aclEntries
operator|.
name|contains
argument_list|(
name|aclUser1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|aclEntries
operator|.
name|contains
argument_list|(
name|aclGroup1
argument_list|)
argument_list|)
expr_stmt|;
comment|/* Modify acl entries to add another user acl */
name|putCmd
argument_list|(
name|path
argument_list|,
literal|"MODIFYACLENTRIES"
argument_list|,
name|modAclSpec
argument_list|)
expr_stmt|;
name|statusJson
operator|=
name|getStatus
argument_list|(
name|path
argument_list|,
literal|"GETACLSTATUS"
argument_list|)
expr_stmt|;
name|aclEntries
operator|=
name|getAclEntries
argument_list|(
name|statusJson
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|aclEntries
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|aclEntries
operator|.
name|contains
argument_list|(
name|aclUser1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|aclEntries
operator|.
name|contains
argument_list|(
name|aclUser2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|aclEntries
operator|.
name|contains
argument_list|(
name|aclGroup1
argument_list|)
argument_list|)
expr_stmt|;
comment|/* Remove the first user acl entry and verify */
name|putCmd
argument_list|(
name|path
argument_list|,
literal|"REMOVEACLENTRIES"
argument_list|,
name|remAclSpec
argument_list|)
expr_stmt|;
name|statusJson
operator|=
name|getStatus
argument_list|(
name|path
argument_list|,
literal|"GETACLSTATUS"
argument_list|)
expr_stmt|;
name|aclEntries
operator|=
name|getAclEntries
argument_list|(
name|statusJson
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|aclEntries
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|aclEntries
operator|.
name|contains
argument_list|(
name|aclUser2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|aclEntries
operator|.
name|contains
argument_list|(
name|aclGroup1
argument_list|)
argument_list|)
expr_stmt|;
comment|/* Remove all acls and verify */
name|putCmd
argument_list|(
name|path
argument_list|,
literal|"REMOVEACL"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|statusJson
operator|=
name|getStatus
argument_list|(
name|path
argument_list|,
literal|"GETACLSTATUS"
argument_list|)
expr_stmt|;
name|aclEntries
operator|=
name|getAclEntries
argument_list|(
name|statusJson
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|aclEntries
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|statusJson
operator|=
name|getStatus
argument_list|(
name|path
argument_list|,
literal|"GETFILESTATUS"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|statusJson
operator|.
name|indexOf
argument_list|(
literal|"aclBit"
argument_list|)
argument_list|)
expr_stmt|;
name|statusJson
operator|=
name|getStatus
argument_list|(
name|dir
argument_list|,
literal|"LISTSTATUS"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|statusJson
operator|.
name|indexOf
argument_list|(
literal|"aclBit"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test ACL operations on a directory, including default ACLs.    * General strategy is to use GETFILESTATUS and GETACLSTATUS to verify:    *<ol>    *<li>Initial status with no ACLs</li>    *<li>The addition of a default ACL</li>    *<li>The removal of default ACLs</li>    *</ol>    *    * @throws Exception    */
annotation|@
name|Test
annotation|@
name|TestDir
annotation|@
name|TestJetty
annotation|@
name|TestHdfs
DECL|method|testDirAcls ()
specifier|public
name|void
name|testDirAcls
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|defUser1
init|=
literal|"default:user:glarch:r-x"
decl_stmt|;
specifier|final
name|String
name|defSpec1
init|=
literal|"aclspec="
operator|+
name|defUser1
decl_stmt|;
specifier|final
name|String
name|dir
init|=
literal|"/aclDirTest"
decl_stmt|;
name|String
name|statusJson
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|aclEntries
decl_stmt|;
name|createHttpFSServer
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|TestHdfsHelper
operator|.
name|getHdfsConf
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
comment|/* getfilestatus and liststatus don't have 'aclBit' in their reply */
name|statusJson
operator|=
name|getStatus
argument_list|(
name|dir
argument_list|,
literal|"GETFILESTATUS"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|statusJson
operator|.
name|indexOf
argument_list|(
literal|"aclBit"
argument_list|)
argument_list|)
expr_stmt|;
comment|/* No ACLs, either */
name|statusJson
operator|=
name|getStatus
argument_list|(
name|dir
argument_list|,
literal|"GETACLSTATUS"
argument_list|)
expr_stmt|;
name|aclEntries
operator|=
name|getAclEntries
argument_list|(
name|statusJson
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|aclEntries
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|/* Give it a default ACL and verify */
name|putCmd
argument_list|(
name|dir
argument_list|,
literal|"SETACL"
argument_list|,
name|defSpec1
argument_list|)
expr_stmt|;
name|statusJson
operator|=
name|getStatus
argument_list|(
name|dir
argument_list|,
literal|"GETFILESTATUS"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|statusJson
operator|.
name|indexOf
argument_list|(
literal|"aclBit"
argument_list|)
argument_list|)
expr_stmt|;
name|statusJson
operator|=
name|getStatus
argument_list|(
name|dir
argument_list|,
literal|"GETACLSTATUS"
argument_list|)
expr_stmt|;
name|aclEntries
operator|=
name|getAclEntries
argument_list|(
name|statusJson
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|aclEntries
operator|.
name|size
argument_list|()
operator|==
literal|5
argument_list|)
expr_stmt|;
comment|/* 4 Entries are default:(user|group|mask|other):perm */
name|Assert
operator|.
name|assertTrue
argument_list|(
name|aclEntries
operator|.
name|contains
argument_list|(
name|defUser1
argument_list|)
argument_list|)
expr_stmt|;
comment|/* Remove the default ACL and re-verify */
name|putCmd
argument_list|(
name|dir
argument_list|,
literal|"REMOVEDEFAULTACL"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|statusJson
operator|=
name|getStatus
argument_list|(
name|dir
argument_list|,
literal|"GETFILESTATUS"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|statusJson
operator|.
name|indexOf
argument_list|(
literal|"aclBit"
argument_list|)
argument_list|)
expr_stmt|;
name|statusJson
operator|=
name|getStatus
argument_list|(
name|dir
argument_list|,
literal|"GETACLSTATUS"
argument_list|)
expr_stmt|;
name|aclEntries
operator|=
name|getAclEntries
argument_list|(
name|statusJson
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|aclEntries
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestDir
annotation|@
name|TestJetty
annotation|@
name|TestHdfs
DECL|method|testOpenOffsetLength ()
specifier|public
name|void
name|testOpenOffsetLength
parameter_list|()
throws|throws
name|Exception
block|{
name|createHttpFSServer
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|byte
index|[]
name|array
init|=
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|}
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|TestHdfsHelper
operator|.
name|getHdfsConf
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/tmp"
argument_list|)
argument_list|)
expr_stmt|;
name|OutputStream
name|os
init|=
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/tmp/foo"
argument_list|)
argument_list|)
decl_stmt|;
name|os
operator|.
name|write
argument_list|(
name|array
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
name|user
init|=
name|HadoopUsersConfTestHelper
operator|.
name|getHadoopUsers
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|TestJettyHelper
operator|.
name|getJettyURL
argument_list|()
argument_list|,
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"/webhdfs/v1/tmp/foo?user.name={0}&op=open&offset=1&length=2"
argument_list|,
name|user
argument_list|)
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|InputStream
name|is
init|=
name|conn
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|is
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|is
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|is
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestDir
annotation|@
name|TestJetty
annotation|@
name|TestHdfs
DECL|method|testPutNoOperation ()
specifier|public
name|void
name|testPutNoOperation
parameter_list|()
throws|throws
name|Exception
block|{
name|createHttpFSServer
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|String
name|user
init|=
name|HadoopUsersConfTestHelper
operator|.
name|getHadoopUsers
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|TestJettyHelper
operator|.
name|getJettyURL
argument_list|()
argument_list|,
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"/webhdfs/v1/foo?user.name={0}"
argument_list|,
name|user
argument_list|)
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|setDoInput
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setDoOutput
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setRequestMethod
argument_list|(
literal|"PUT"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_BAD_REQUEST
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestDir
annotation|@
name|TestJetty
annotation|@
name|TestHdfs
DECL|method|testDelegationTokenOperations ()
specifier|public
name|void
name|testDelegationTokenOperations
parameter_list|()
throws|throws
name|Exception
block|{
name|createHttpFSServer
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|TestJettyHelper
operator|.
name|getJettyURL
argument_list|()
argument_list|,
literal|"/webhdfs/v1/?op=GETHOMEDIRECTORY"
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_UNAUTHORIZED
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|AuthenticationToken
name|token
init|=
operator|new
name|AuthenticationToken
argument_list|(
literal|"u"
argument_list|,
literal|"p"
argument_list|,
name|HttpFSKerberosAuthenticationHandlerForTesting
operator|.
name|TYPE
argument_list|)
decl_stmt|;
name|token
operator|.
name|setExpires
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|100000000
argument_list|)
expr_stmt|;
name|Signer
name|signer
init|=
operator|new
name|Signer
argument_list|(
literal|"secret"
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|tokenSigned
init|=
name|signer
operator|.
name|sign
argument_list|(
name|token
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|url
operator|=
operator|new
name|URL
argument_list|(
name|TestJettyHelper
operator|.
name|getJettyURL
argument_list|()
argument_list|,
literal|"/webhdfs/v1/?op=GETHOMEDIRECTORY"
argument_list|)
expr_stmt|;
name|conn
operator|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|conn
operator|.
name|setRequestProperty
argument_list|(
literal|"Cookie"
argument_list|,
name|AuthenticatedURL
operator|.
name|AUTH_COOKIE
operator|+
literal|"="
operator|+
name|tokenSigned
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|url
operator|=
operator|new
name|URL
argument_list|(
name|TestJettyHelper
operator|.
name|getJettyURL
argument_list|()
argument_list|,
literal|"/webhdfs/v1/?op=GETDELEGATIONTOKEN"
argument_list|)
expr_stmt|;
name|conn
operator|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|conn
operator|.
name|setRequestProperty
argument_list|(
literal|"Cookie"
argument_list|,
name|AuthenticatedURL
operator|.
name|AUTH_COOKIE
operator|+
literal|"="
operator|+
name|tokenSigned
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
operator|(
name|JSONObject
operator|)
operator|new
name|JSONParser
argument_list|()
operator|.
name|parse
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|conn
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|json
operator|=
operator|(
name|JSONObject
operator|)
name|json
operator|.
name|get
argument_list|(
name|HttpFSKerberosAuthenticator
operator|.
name|DELEGATION_TOKEN_JSON
argument_list|)
expr_stmt|;
name|String
name|tokenStr
init|=
operator|(
name|String
operator|)
name|json
operator|.
name|get
argument_list|(
name|HttpFSKerberosAuthenticator
operator|.
name|DELEGATION_TOKEN_URL_STRING_JSON
argument_list|)
decl_stmt|;
name|url
operator|=
operator|new
name|URL
argument_list|(
name|TestJettyHelper
operator|.
name|getJettyURL
argument_list|()
argument_list|,
literal|"/webhdfs/v1/?op=GETHOMEDIRECTORY&delegation="
operator|+
name|tokenStr
argument_list|)
expr_stmt|;
name|conn
operator|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|url
operator|=
operator|new
name|URL
argument_list|(
name|TestJettyHelper
operator|.
name|getJettyURL
argument_list|()
argument_list|,
literal|"/webhdfs/v1/?op=RENEWDELEGATIONTOKEN&token="
operator|+
name|tokenStr
argument_list|)
expr_stmt|;
name|conn
operator|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|conn
operator|.
name|setRequestMethod
argument_list|(
literal|"PUT"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_UNAUTHORIZED
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|url
operator|=
operator|new
name|URL
argument_list|(
name|TestJettyHelper
operator|.
name|getJettyURL
argument_list|()
argument_list|,
literal|"/webhdfs/v1/?op=RENEWDELEGATIONTOKEN&token="
operator|+
name|tokenStr
argument_list|)
expr_stmt|;
name|conn
operator|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|conn
operator|.
name|setRequestMethod
argument_list|(
literal|"PUT"
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setRequestProperty
argument_list|(
literal|"Cookie"
argument_list|,
name|AuthenticatedURL
operator|.
name|AUTH_COOKIE
operator|+
literal|"="
operator|+
name|tokenSigned
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|url
operator|=
operator|new
name|URL
argument_list|(
name|TestJettyHelper
operator|.
name|getJettyURL
argument_list|()
argument_list|,
literal|"/webhdfs/v1/?op=CANCELDELEGATIONTOKEN&token="
operator|+
name|tokenStr
argument_list|)
expr_stmt|;
name|conn
operator|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|conn
operator|.
name|setRequestMethod
argument_list|(
literal|"PUT"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|url
operator|=
operator|new
name|URL
argument_list|(
name|TestJettyHelper
operator|.
name|getJettyURL
argument_list|()
argument_list|,
literal|"/webhdfs/v1/?op=GETHOMEDIRECTORY&delegation="
operator|+
name|tokenStr
argument_list|)
expr_stmt|;
name|conn
operator|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_FORBIDDEN
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

