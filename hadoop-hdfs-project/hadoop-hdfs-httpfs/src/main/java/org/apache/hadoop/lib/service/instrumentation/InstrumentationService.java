begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.lib.service.instrumentation
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|lib
operator|.
name|service
operator|.
name|instrumentation
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|lib
operator|.
name|server
operator|.
name|BaseService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|lib
operator|.
name|server
operator|.
name|ServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|lib
operator|.
name|service
operator|.
name|Instrumentation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|lib
operator|.
name|service
operator|.
name|Scheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|simple
operator|.
name|JSONAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|simple
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|simple
operator|.
name|JSONStreamAware
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_class
DECL|class|InstrumentationService
specifier|public
class|class
name|InstrumentationService
extends|extends
name|BaseService
implements|implements
name|Instrumentation
block|{
DECL|field|PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|PREFIX
init|=
literal|"instrumentation"
decl_stmt|;
DECL|field|CONF_TIMERS_SIZE
specifier|public
specifier|static
specifier|final
name|String
name|CONF_TIMERS_SIZE
init|=
literal|"timers.size"
decl_stmt|;
DECL|field|timersSize
specifier|private
name|int
name|timersSize
decl_stmt|;
DECL|field|counterLock
specifier|private
name|Lock
name|counterLock
decl_stmt|;
DECL|field|timerLock
specifier|private
name|Lock
name|timerLock
decl_stmt|;
DECL|field|variableLock
specifier|private
name|Lock
name|variableLock
decl_stmt|;
DECL|field|samplerLock
specifier|private
name|Lock
name|samplerLock
decl_stmt|;
DECL|field|counters
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|AtomicLong
argument_list|>
argument_list|>
name|counters
decl_stmt|;
DECL|field|timers
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Timer
argument_list|>
argument_list|>
name|timers
decl_stmt|;
DECL|field|variables
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|VariableHolder
argument_list|>
argument_list|>
name|variables
decl_stmt|;
DECL|field|samplers
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Sampler
argument_list|>
argument_list|>
name|samplers
decl_stmt|;
DECL|field|samplersList
specifier|private
name|List
argument_list|<
name|Sampler
argument_list|>
name|samplersList
decl_stmt|;
DECL|field|all
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
argument_list|>
name|all
decl_stmt|;
DECL|method|InstrumentationService ()
specifier|public
name|InstrumentationService
parameter_list|()
block|{
name|super
argument_list|(
name|PREFIX
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|init ()
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|ServiceException
block|{
name|timersSize
operator|=
name|getServiceConfig
argument_list|()
operator|.
name|getInt
argument_list|(
name|CONF_TIMERS_SIZE
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|counterLock
operator|=
operator|new
name|ReentrantLock
argument_list|()
expr_stmt|;
name|timerLock
operator|=
operator|new
name|ReentrantLock
argument_list|()
expr_stmt|;
name|variableLock
operator|=
operator|new
name|ReentrantLock
argument_list|()
expr_stmt|;
name|samplerLock
operator|=
operator|new
name|ReentrantLock
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|VariableHolder
argument_list|>
name|jvmVariables
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|VariableHolder
argument_list|>
argument_list|()
decl_stmt|;
name|counters
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|AtomicLong
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|timers
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Timer
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|variables
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|VariableHolder
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|samplers
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Sampler
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|samplersList
operator|=
operator|new
name|ArrayList
argument_list|<
name|Sampler
argument_list|>
argument_list|()
expr_stmt|;
name|all
operator|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|all
operator|.
name|put
argument_list|(
literal|"os-env"
argument_list|,
name|System
operator|.
name|getenv
argument_list|()
argument_list|)
expr_stmt|;
name|all
operator|.
name|put
argument_list|(
literal|"sys-props"
argument_list|,
call|(
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
call|)
argument_list|(
name|Map
argument_list|)
name|System
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|all
operator|.
name|put
argument_list|(
literal|"jvm"
argument_list|,
name|jvmVariables
argument_list|)
expr_stmt|;
name|all
operator|.
name|put
argument_list|(
literal|"counters"
argument_list|,
operator|(
name|Map
operator|)
name|counters
argument_list|)
expr_stmt|;
name|all
operator|.
name|put
argument_list|(
literal|"timers"
argument_list|,
operator|(
name|Map
operator|)
name|timers
argument_list|)
expr_stmt|;
name|all
operator|.
name|put
argument_list|(
literal|"variables"
argument_list|,
operator|(
name|Map
operator|)
name|variables
argument_list|)
expr_stmt|;
name|all
operator|.
name|put
argument_list|(
literal|"samplers"
argument_list|,
operator|(
name|Map
operator|)
name|samplers
argument_list|)
expr_stmt|;
name|jvmVariables
operator|.
name|put
argument_list|(
literal|"free.memory"
argument_list|,
operator|new
name|VariableHolder
argument_list|<
name|Long
argument_list|>
argument_list|(
operator|new
name|Instrumentation
operator|.
name|Variable
argument_list|<
name|Long
argument_list|>
argument_list|()
block|{
specifier|public
name|Long
name|getValue
parameter_list|()
block|{
return|return
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|freeMemory
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|jvmVariables
operator|.
name|put
argument_list|(
literal|"max.memory"
argument_list|,
operator|new
name|VariableHolder
argument_list|<
name|Long
argument_list|>
argument_list|(
operator|new
name|Instrumentation
operator|.
name|Variable
argument_list|<
name|Long
argument_list|>
argument_list|()
block|{
specifier|public
name|Long
name|getValue
parameter_list|()
block|{
return|return
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|maxMemory
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|jvmVariables
operator|.
name|put
argument_list|(
literal|"total.memory"
argument_list|,
operator|new
name|VariableHolder
argument_list|<
name|Long
argument_list|>
argument_list|(
operator|new
name|Instrumentation
operator|.
name|Variable
argument_list|<
name|Long
argument_list|>
argument_list|()
block|{
specifier|public
name|Long
name|getValue
parameter_list|()
block|{
return|return
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|totalMemory
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|postInit ()
specifier|public
name|void
name|postInit
parameter_list|()
throws|throws
name|ServiceException
block|{
name|Scheduler
name|scheduler
init|=
name|getServer
argument_list|()
operator|.
name|get
argument_list|(
name|Scheduler
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|scheduler
operator|!=
literal|null
condition|)
block|{
name|scheduler
operator|.
name|schedule
argument_list|(
operator|new
name|SamplersRunnable
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getInterface ()
specifier|public
name|Class
name|getInterface
parameter_list|()
block|{
return|return
name|Instrumentation
operator|.
name|class
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getToAdd (String group, String name, Class<T> klass, Lock lock, Map<String, Map<String, T>> map)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|T
name|getToAdd
parameter_list|(
name|String
name|group
parameter_list|,
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|klass
parameter_list|,
name|Lock
name|lock
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
argument_list|>
name|map
parameter_list|)
block|{
name|boolean
name|locked
init|=
literal|false
decl_stmt|;
try|try
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|groupMap
init|=
name|map
operator|.
name|get
argument_list|(
name|group
argument_list|)
decl_stmt|;
if|if
condition|(
name|groupMap
operator|==
literal|null
condition|)
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|locked
operator|=
literal|true
expr_stmt|;
name|groupMap
operator|=
name|map
operator|.
name|get
argument_list|(
name|group
argument_list|)
expr_stmt|;
if|if
condition|(
name|groupMap
operator|==
literal|null
condition|)
block|{
name|groupMap
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
argument_list|()
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|group
argument_list|,
name|groupMap
argument_list|)
expr_stmt|;
block|}
block|}
name|T
name|element
init|=
name|groupMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|element
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|locked
condition|)
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|locked
operator|=
literal|true
expr_stmt|;
block|}
name|element
operator|=
name|groupMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|element
operator|==
literal|null
condition|)
block|{
try|try
block|{
if|if
condition|(
name|klass
operator|==
name|Timer
operator|.
name|class
condition|)
block|{
name|element
operator|=
operator|(
name|T
operator|)
operator|new
name|Timer
argument_list|(
name|timersSize
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|element
operator|=
name|klass
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
name|groupMap
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|element
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|element
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|locked
condition|)
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|class|Cron
specifier|static
class|class
name|Cron
implements|implements
name|Instrumentation
operator|.
name|Cron
block|{
DECL|field|start
name|long
name|start
decl_stmt|;
DECL|field|lapStart
name|long
name|lapStart
decl_stmt|;
DECL|field|own
name|long
name|own
decl_stmt|;
DECL|field|total
name|long
name|total
decl_stmt|;
DECL|method|start ()
specifier|public
name|Cron
name|start
parameter_list|()
block|{
if|if
condition|(
name|total
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cron already used"
argument_list|)
throw|;
block|}
if|if
condition|(
name|start
operator|==
literal|0
condition|)
block|{
name|start
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|lapStart
operator|=
name|start
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|lapStart
operator|==
literal|0
condition|)
block|{
name|lapStart
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|stop ()
specifier|public
name|Cron
name|stop
parameter_list|()
block|{
if|if
condition|(
name|total
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cron already used"
argument_list|)
throw|;
block|}
if|if
condition|(
name|lapStart
operator|>
literal|0
condition|)
block|{
name|own
operator|+=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|lapStart
expr_stmt|;
name|lapStart
operator|=
literal|0
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|end ()
name|void
name|end
parameter_list|()
block|{
name|stop
argument_list|()
expr_stmt|;
name|total
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
expr_stmt|;
block|}
block|}
DECL|class|Timer
specifier|static
class|class
name|Timer
implements|implements
name|JSONAware
implements|,
name|JSONStreamAware
block|{
DECL|field|LAST_TOTAL
specifier|static
specifier|final
name|int
name|LAST_TOTAL
init|=
literal|0
decl_stmt|;
DECL|field|LAST_OWN
specifier|static
specifier|final
name|int
name|LAST_OWN
init|=
literal|1
decl_stmt|;
DECL|field|AVG_TOTAL
specifier|static
specifier|final
name|int
name|AVG_TOTAL
init|=
literal|2
decl_stmt|;
DECL|field|AVG_OWN
specifier|static
specifier|final
name|int
name|AVG_OWN
init|=
literal|3
decl_stmt|;
DECL|field|lock
name|Lock
name|lock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
DECL|field|own
specifier|private
name|long
index|[]
name|own
decl_stmt|;
DECL|field|total
specifier|private
name|long
index|[]
name|total
decl_stmt|;
DECL|field|last
specifier|private
name|int
name|last
decl_stmt|;
DECL|field|full
specifier|private
name|boolean
name|full
decl_stmt|;
DECL|field|size
specifier|private
name|int
name|size
decl_stmt|;
DECL|method|Timer (int size)
specifier|public
name|Timer
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
name|own
operator|=
operator|new
name|long
index|[
name|size
index|]
expr_stmt|;
name|total
operator|=
operator|new
name|long
index|[
name|size
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|own
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
name|total
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
name|last
operator|=
operator|-
literal|1
expr_stmt|;
block|}
DECL|method|getValues ()
name|long
index|[]
name|getValues
parameter_list|()
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|long
index|[]
name|values
init|=
operator|new
name|long
index|[
literal|4
index|]
decl_stmt|;
name|values
index|[
name|LAST_TOTAL
index|]
operator|=
name|total
index|[
name|last
index|]
expr_stmt|;
name|values
index|[
name|LAST_OWN
index|]
operator|=
name|own
index|[
name|last
index|]
expr_stmt|;
name|int
name|limit
init|=
operator|(
name|full
operator|)
condition|?
name|size
else|:
operator|(
name|last
operator|+
literal|1
operator|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|limit
condition|;
name|i
operator|++
control|)
block|{
name|values
index|[
name|AVG_TOTAL
index|]
operator|+=
name|total
index|[
name|i
index|]
expr_stmt|;
name|values
index|[
name|AVG_OWN
index|]
operator|+=
name|own
index|[
name|i
index|]
expr_stmt|;
block|}
name|values
index|[
name|AVG_TOTAL
index|]
operator|=
name|values
index|[
name|AVG_TOTAL
index|]
operator|/
name|limit
expr_stmt|;
name|values
index|[
name|AVG_OWN
index|]
operator|=
name|values
index|[
name|AVG_OWN
index|]
operator|/
name|limit
expr_stmt|;
return|return
name|values
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|addCron (Cron cron)
name|void
name|addCron
parameter_list|(
name|Cron
name|cron
parameter_list|)
block|{
name|cron
operator|.
name|end
argument_list|()
expr_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|last
operator|=
operator|(
name|last
operator|+
literal|1
operator|)
operator|%
name|size
expr_stmt|;
name|full
operator|=
name|full
operator|||
name|last
operator|==
operator|(
name|size
operator|-
literal|1
operator|)
expr_stmt|;
name|total
index|[
name|last
index|]
operator|=
name|cron
operator|.
name|total
expr_stmt|;
name|own
index|[
name|last
index|]
operator|=
name|cron
operator|.
name|own
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getJSON ()
specifier|private
name|JSONObject
name|getJSON
parameter_list|()
block|{
name|long
index|[]
name|values
init|=
name|getValues
argument_list|()
decl_stmt|;
name|JSONObject
name|json
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
name|json
operator|.
name|put
argument_list|(
literal|"lastTotal"
argument_list|,
name|values
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
literal|"lastOwn"
argument_list|,
name|values
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
literal|"avgTotal"
argument_list|,
name|values
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
literal|"avgOwn"
argument_list|,
name|values
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
return|return
name|json
return|;
block|}
annotation|@
name|Override
DECL|method|toJSONString ()
specifier|public
name|String
name|toJSONString
parameter_list|()
block|{
return|return
name|getJSON
argument_list|()
operator|.
name|toJSONString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|writeJSONString (Writer out)
specifier|public
name|void
name|writeJSONString
parameter_list|(
name|Writer
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|getJSON
argument_list|()
operator|.
name|writeJSONString
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|createCron ()
specifier|public
name|Cron
name|createCron
parameter_list|()
block|{
return|return
operator|new
name|Cron
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|incr (String group, String name, long count)
specifier|public
name|void
name|incr
parameter_list|(
name|String
name|group
parameter_list|,
name|String
name|name
parameter_list|,
name|long
name|count
parameter_list|)
block|{
name|AtomicLong
name|counter
init|=
name|getToAdd
argument_list|(
name|group
argument_list|,
name|name
argument_list|,
name|AtomicLong
operator|.
name|class
argument_list|,
name|counterLock
argument_list|,
name|counters
argument_list|)
decl_stmt|;
name|counter
operator|.
name|addAndGet
argument_list|(
name|count
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|addCron (String group, String name, Instrumentation.Cron cron)
specifier|public
name|void
name|addCron
parameter_list|(
name|String
name|group
parameter_list|,
name|String
name|name
parameter_list|,
name|Instrumentation
operator|.
name|Cron
name|cron
parameter_list|)
block|{
name|Timer
name|timer
init|=
name|getToAdd
argument_list|(
name|group
argument_list|,
name|name
argument_list|,
name|Timer
operator|.
name|class
argument_list|,
name|timerLock
argument_list|,
name|timers
argument_list|)
decl_stmt|;
name|timer
operator|.
name|addCron
argument_list|(
operator|(
name|Cron
operator|)
name|cron
argument_list|)
expr_stmt|;
block|}
DECL|class|VariableHolder
specifier|static
class|class
name|VariableHolder
parameter_list|<
name|E
parameter_list|>
implements|implements
name|JSONAware
implements|,
name|JSONStreamAware
block|{
DECL|field|var
name|Variable
argument_list|<
name|E
argument_list|>
name|var
decl_stmt|;
DECL|method|VariableHolder ()
specifier|public
name|VariableHolder
parameter_list|()
block|{     }
DECL|method|VariableHolder (Variable<E> var)
specifier|public
name|VariableHolder
parameter_list|(
name|Variable
argument_list|<
name|E
argument_list|>
name|var
parameter_list|)
block|{
name|this
operator|.
name|var
operator|=
name|var
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getJSON ()
specifier|private
name|JSONObject
name|getJSON
parameter_list|()
block|{
name|JSONObject
name|json
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
name|json
operator|.
name|put
argument_list|(
literal|"value"
argument_list|,
name|var
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|json
return|;
block|}
annotation|@
name|Override
DECL|method|toJSONString ()
specifier|public
name|String
name|toJSONString
parameter_list|()
block|{
return|return
name|getJSON
argument_list|()
operator|.
name|toJSONString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|writeJSONString (Writer out)
specifier|public
name|void
name|writeJSONString
parameter_list|(
name|Writer
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
name|toJSONString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|addVariable (String group, String name, Variable<?> variable)
specifier|public
name|void
name|addVariable
parameter_list|(
name|String
name|group
parameter_list|,
name|String
name|name
parameter_list|,
name|Variable
argument_list|<
name|?
argument_list|>
name|variable
parameter_list|)
block|{
name|VariableHolder
name|holder
init|=
name|getToAdd
argument_list|(
name|group
argument_list|,
name|name
argument_list|,
name|VariableHolder
operator|.
name|class
argument_list|,
name|variableLock
argument_list|,
name|variables
argument_list|)
decl_stmt|;
name|holder
operator|.
name|var
operator|=
name|variable
expr_stmt|;
block|}
DECL|class|Sampler
specifier|static
class|class
name|Sampler
implements|implements
name|JSONAware
implements|,
name|JSONStreamAware
block|{
DECL|field|variable
name|Variable
argument_list|<
name|Long
argument_list|>
name|variable
decl_stmt|;
DECL|field|values
name|long
index|[]
name|values
decl_stmt|;
DECL|field|sum
specifier|private
name|AtomicLong
name|sum
decl_stmt|;
DECL|field|last
specifier|private
name|int
name|last
decl_stmt|;
DECL|field|full
specifier|private
name|boolean
name|full
decl_stmt|;
DECL|method|init (int size, Variable<Long> variable)
name|void
name|init
parameter_list|(
name|int
name|size
parameter_list|,
name|Variable
argument_list|<
name|Long
argument_list|>
name|variable
parameter_list|)
block|{
name|this
operator|.
name|variable
operator|=
name|variable
expr_stmt|;
name|values
operator|=
operator|new
name|long
index|[
name|size
index|]
expr_stmt|;
name|sum
operator|=
operator|new
name|AtomicLong
argument_list|()
expr_stmt|;
name|last
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|sample ()
name|void
name|sample
parameter_list|()
block|{
name|int
name|index
init|=
name|last
decl_stmt|;
name|long
name|valueGoingOut
init|=
name|values
index|[
name|last
index|]
decl_stmt|;
name|full
operator|=
name|full
operator|||
name|last
operator|==
operator|(
name|values
operator|.
name|length
operator|-
literal|1
operator|)
expr_stmt|;
name|last
operator|=
operator|(
name|last
operator|+
literal|1
operator|)
operator|%
name|values
operator|.
name|length
expr_stmt|;
name|values
index|[
name|index
index|]
operator|=
name|variable
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|sum
operator|.
name|addAndGet
argument_list|(
operator|-
name|valueGoingOut
operator|+
name|values
index|[
name|index
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|getRate ()
name|double
name|getRate
parameter_list|()
block|{
return|return
operator|(
operator|(
name|double
operator|)
name|sum
operator|.
name|get
argument_list|()
operator|)
operator|/
operator|(
operator|(
name|full
operator|)
condition|?
name|values
operator|.
name|length
else|:
operator|(
operator|(
name|last
operator|==
literal|0
operator|)
condition|?
literal|1
else|:
name|last
operator|)
operator|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getJSON ()
specifier|private
name|JSONObject
name|getJSON
parameter_list|()
block|{
name|JSONObject
name|json
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
name|json
operator|.
name|put
argument_list|(
literal|"sampler"
argument_list|,
name|getRate
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
literal|"size"
argument_list|,
operator|(
name|full
operator|)
condition|?
name|values
operator|.
name|length
else|:
name|last
argument_list|)
expr_stmt|;
return|return
name|json
return|;
block|}
annotation|@
name|Override
DECL|method|toJSONString ()
specifier|public
name|String
name|toJSONString
parameter_list|()
block|{
return|return
name|getJSON
argument_list|()
operator|.
name|toJSONString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|writeJSONString (Writer out)
specifier|public
name|void
name|writeJSONString
parameter_list|(
name|Writer
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
name|toJSONString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|addSampler (String group, String name, int samplingSize, Variable<Long> variable)
specifier|public
name|void
name|addSampler
parameter_list|(
name|String
name|group
parameter_list|,
name|String
name|name
parameter_list|,
name|int
name|samplingSize
parameter_list|,
name|Variable
argument_list|<
name|Long
argument_list|>
name|variable
parameter_list|)
block|{
name|Sampler
name|sampler
init|=
name|getToAdd
argument_list|(
name|group
argument_list|,
name|name
argument_list|,
name|Sampler
operator|.
name|class
argument_list|,
name|samplerLock
argument_list|,
name|samplers
argument_list|)
decl_stmt|;
name|samplerLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|sampler
operator|.
name|init
argument_list|(
name|samplingSize
argument_list|,
name|variable
argument_list|)
expr_stmt|;
name|samplersList
operator|.
name|add
argument_list|(
name|sampler
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|samplerLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|SamplersRunnable
class|class
name|SamplersRunnable
implements|implements
name|Runnable
block|{
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|samplerLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|Sampler
name|sampler
range|:
name|samplersList
control|)
block|{
name|sampler
operator|.
name|sample
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|samplerLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|getSnapshot ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
argument_list|>
name|getSnapshot
parameter_list|()
block|{
return|return
name|all
return|;
block|}
block|}
end_class

end_unit

