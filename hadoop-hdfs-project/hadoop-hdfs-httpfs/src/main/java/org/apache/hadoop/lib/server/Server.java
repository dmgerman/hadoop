begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.lib.server
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|lib
operator|.
name|server
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|lib
operator|.
name|util
operator|.
name|Check
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|lib
operator|.
name|util
operator|.
name|ConfigurationUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|PropertyConfigurator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|MessageFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_comment
comment|/**  * A Server class provides standard configuration, logging and {@link Service}  * lifecyle management.  *<p/>  * A Server normally has a home directory, a configuration directory, a temp  * directory and logs directory.  *<p/>  * The Server configuration is loaded from 2 overlapped files,  *<code>#SERVER#-default.xml</code> and<code>#SERVER#-site.xml</code>. The  * default file is loaded from the classpath, the site file is laoded from the  * configuration directory.  *<p/>  * The Server collects all configuration properties prefixed with  *<code>#SERVER#</code>. The property names are then trimmed from the  *<code>#SERVER#</code> prefix.  *<p/>  * The Server log configuration is loaded from the  *<code>#SERVICE#-log4j.properties</code> file in the configuration directory.  *<p/>  * The lifecycle of server is defined in by {@link Server.Status} enum.  * When a server is create, its status is UNDEF, when being initialized it is  * BOOTING, once initialization is complete by default transitions to NORMAL.  * The<code>#SERVER#.startup.status</code> configuration property can be used  * to specify a different startup status (NORMAL, ADMIN or HALTED).  *<p/>  * Services classes are defined in the<code>#SERVER#.services</code> and  *<code>#SERVER#.services.ext</code> properties. They are loaded in order  * (services first, then services.ext).  *<p/>  * Before initializing the services, they are traversed and duplicate service  * interface are removed from the service list. The last service using a given  * interface wins (this enables a simple override mechanism).  *<p/>  * After the services have been resoloved by interface de-duplication they are  * initialized in order. Once all services are initialized they are  * post-initialized (this enables late/conditional service bindings).  *<p/>  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|Server
specifier|public
class|class
name|Server
block|{
DECL|field|log
specifier|private
name|Logger
name|log
decl_stmt|;
comment|/**    * Server property name that defines the service classes.    */
DECL|field|CONF_SERVICES
specifier|public
specifier|static
specifier|final
name|String
name|CONF_SERVICES
init|=
literal|"services"
decl_stmt|;
comment|/**    * Server property name that defines the service extension classes.    */
DECL|field|CONF_SERVICES_EXT
specifier|public
specifier|static
specifier|final
name|String
name|CONF_SERVICES_EXT
init|=
literal|"services.ext"
decl_stmt|;
comment|/**    * Server property name that defines server startup status.    */
DECL|field|CONF_STARTUP_STATUS
specifier|public
specifier|static
specifier|final
name|String
name|CONF_STARTUP_STATUS
init|=
literal|"startup.status"
decl_stmt|;
comment|/**    * Enumeration that defines the server status.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|enum|Status
specifier|public
specifier|static
enum|enum
name|Status
block|{
DECL|enumConstant|UNDEF
name|UNDEF
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
block|,
DECL|enumConstant|BOOTING
name|BOOTING
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
block|,
DECL|enumConstant|HALTED
name|HALTED
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
block|,
DECL|enumConstant|ADMIN
name|ADMIN
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
block|,
DECL|enumConstant|NORMAL
name|NORMAL
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
block|,
DECL|enumConstant|SHUTTING_DOWN
name|SHUTTING_DOWN
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
block|,
DECL|enumConstant|SHUTDOWN
name|SHUTDOWN
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
block|;
DECL|field|settable
specifier|private
name|boolean
name|settable
decl_stmt|;
DECL|field|operational
specifier|private
name|boolean
name|operational
decl_stmt|;
comment|/**      * Status constructor.      *      * @param settable indicates if the status is settable.      * @param operational indicates if the server is operational      * when in this status.      */
DECL|method|Status (boolean settable, boolean operational)
specifier|private
name|Status
parameter_list|(
name|boolean
name|settable
parameter_list|,
name|boolean
name|operational
parameter_list|)
block|{
name|this
operator|.
name|settable
operator|=
name|settable
expr_stmt|;
name|this
operator|.
name|operational
operator|=
name|operational
expr_stmt|;
block|}
comment|/**      * Returns if this server status is operational.      *      * @return if this server status is operational.      */
DECL|method|isOperational ()
specifier|public
name|boolean
name|isOperational
parameter_list|()
block|{
return|return
name|operational
return|;
block|}
block|}
comment|/**    * Name of the log4j configuration file the Server will load from the    * classpath if the<code>#SERVER#-log4j.properties</code> is not defined    * in the server configuration directory.    */
DECL|field|DEFAULT_LOG4J_PROPERTIES
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_LOG4J_PROPERTIES
init|=
literal|"default-log4j.properties"
decl_stmt|;
DECL|field|status
specifier|private
name|Status
name|status
decl_stmt|;
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|homeDir
specifier|private
name|String
name|homeDir
decl_stmt|;
DECL|field|configDir
specifier|private
name|String
name|configDir
decl_stmt|;
DECL|field|logDir
specifier|private
name|String
name|logDir
decl_stmt|;
DECL|field|tempDir
specifier|private
name|String
name|tempDir
decl_stmt|;
DECL|field|config
specifier|private
name|Configuration
name|config
decl_stmt|;
DECL|field|services
specifier|private
name|Map
argument_list|<
name|Class
argument_list|,
name|Service
argument_list|>
name|services
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Class
argument_list|,
name|Service
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Creates a server instance.    *<p/>    * The config, log and temp directories are all under the specified home directory.    *    * @param name server name.    * @param homeDir server home directory.    */
DECL|method|Server (String name, String homeDir)
specifier|public
name|Server
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|homeDir
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
name|homeDir
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a server instance.    *    * @param name server name.    * @param homeDir server home directory.    * @param configDir config directory.    * @param logDir log directory.    * @param tempDir temp directory.    */
DECL|method|Server (String name, String homeDir, String configDir, String logDir, String tempDir)
specifier|public
name|Server
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|homeDir
parameter_list|,
name|String
name|configDir
parameter_list|,
name|String
name|logDir
parameter_list|,
name|String
name|tempDir
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
name|homeDir
argument_list|,
name|configDir
argument_list|,
name|logDir
argument_list|,
name|tempDir
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a server instance.    *<p/>    * The config, log and temp directories are all under the specified home directory.    *<p/>    * It uses the provided configuration instead loading it from the config dir.    *    * @param name server name.    * @param homeDir server home directory.    * @param config server configuration.    */
DECL|method|Server (String name, String homeDir, Configuration config)
specifier|public
name|Server
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|homeDir
parameter_list|,
name|Configuration
name|config
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
name|homeDir
argument_list|,
name|homeDir
operator|+
literal|"/conf"
argument_list|,
name|homeDir
operator|+
literal|"/log"
argument_list|,
name|homeDir
operator|+
literal|"/temp"
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a server instance.    *<p/>    * It uses the provided configuration instead loading it from the config dir.    *    * @param name server name.    * @param homeDir server home directory.    * @param configDir config directory.    * @param logDir log directory.    * @param tempDir temp directory.    * @param config server configuration.    */
DECL|method|Server (String name, String homeDir, String configDir, String logDir, String tempDir, Configuration config)
specifier|public
name|Server
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|homeDir
parameter_list|,
name|String
name|configDir
parameter_list|,
name|String
name|logDir
parameter_list|,
name|String
name|tempDir
parameter_list|,
name|Configuration
name|config
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|Check
operator|.
name|notEmpty
argument_list|(
name|name
argument_list|,
literal|"name"
argument_list|)
operator|.
name|trim
argument_list|()
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|this
operator|.
name|homeDir
operator|=
name|Check
operator|.
name|notEmpty
argument_list|(
name|homeDir
argument_list|,
literal|"homeDir"
argument_list|)
expr_stmt|;
name|this
operator|.
name|configDir
operator|=
name|Check
operator|.
name|notEmpty
argument_list|(
name|configDir
argument_list|,
literal|"configDir"
argument_list|)
expr_stmt|;
name|this
operator|.
name|logDir
operator|=
name|Check
operator|.
name|notEmpty
argument_list|(
name|logDir
argument_list|,
literal|"logDir"
argument_list|)
expr_stmt|;
name|this
operator|.
name|tempDir
operator|=
name|Check
operator|.
name|notEmpty
argument_list|(
name|tempDir
argument_list|,
literal|"tempDir"
argument_list|)
expr_stmt|;
name|checkAbsolutePath
argument_list|(
name|homeDir
argument_list|,
literal|"homeDir"
argument_list|)
expr_stmt|;
name|checkAbsolutePath
argument_list|(
name|configDir
argument_list|,
literal|"configDir"
argument_list|)
expr_stmt|;
name|checkAbsolutePath
argument_list|(
name|logDir
argument_list|,
literal|"logDir"
argument_list|)
expr_stmt|;
name|checkAbsolutePath
argument_list|(
name|tempDir
argument_list|,
literal|"tempDir"
argument_list|)
expr_stmt|;
if|if
condition|(
name|config
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|config
operator|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ConfigurationUtils
operator|.
name|copy
argument_list|(
name|config
argument_list|,
name|this
operator|.
name|config
argument_list|)
expr_stmt|;
block|}
name|status
operator|=
name|Status
operator|.
name|UNDEF
expr_stmt|;
block|}
comment|/**    * Validates that the specified value is an absolute path (starts with '/').    *    * @param value value to verify it is an absolute path.    * @param name name to use in the exception if the value is not an absolute    * path.    *    * @return the value.    *    * @throws IllegalArgumentException thrown if the value is not an absolute    * path.    */
DECL|method|checkAbsolutePath (String value, String name)
specifier|private
name|String
name|checkAbsolutePath
parameter_list|(
name|String
name|value
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|new
name|File
argument_list|(
name|value
argument_list|)
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"[{0}] must be an absolute path [{1}]"
argument_list|,
name|name
argument_list|,
name|value
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|value
return|;
block|}
comment|/**    * Returns the current server status.    *    * @return the current server status.    */
DECL|method|getStatus ()
specifier|public
name|Status
name|getStatus
parameter_list|()
block|{
return|return
name|status
return|;
block|}
comment|/**    * Sets a new server status.    *<p/>    * The status must be settable.    *<p/>    * All services will be notified o the status change via the    * {@link Service#serverStatusChange(Server.Status, Server.Status)} method. If a service    * throws an exception during the notification, the server will be destroyed.    *    * @param status status to set.    *    * @throws ServerException thrown if the service has been destroy because of    * a failed notification to a service.    */
DECL|method|setStatus (Status status)
specifier|public
name|void
name|setStatus
parameter_list|(
name|Status
name|status
parameter_list|)
throws|throws
name|ServerException
block|{
name|Check
operator|.
name|notNull
argument_list|(
name|status
argument_list|,
literal|"status"
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|.
name|settable
condition|)
block|{
if|if
condition|(
name|status
operator|!=
name|this
operator|.
name|status
condition|)
block|{
name|Status
name|oldStatus
init|=
name|this
operator|.
name|status
decl_stmt|;
name|this
operator|.
name|status
operator|=
name|status
expr_stmt|;
for|for
control|(
name|Service
name|service
range|:
name|services
operator|.
name|values
argument_list|()
control|)
block|{
try|try
block|{
name|service
operator|.
name|serverStatusChange
argument_list|(
name|oldStatus
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Service [{}] exception during status change to [{}] -server shutting down-,  {}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|service
operator|.
name|getInterface
argument_list|()
operator|.
name|getSimpleName
argument_list|()
block|,
name|status
block|,
name|ex
operator|.
name|getMessage
argument_list|()
block|,
name|ex
block|}
argument_list|)
expr_stmt|;
name|destroy
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|ServerException
argument_list|(
name|ServerException
operator|.
name|ERROR
operator|.
name|S11
argument_list|,
name|service
operator|.
name|getInterface
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|status
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Status ["
operator|+
name|status
operator|+
literal|" is not settable"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Verifies the server is operational.    *    * @throws IllegalStateException thrown if the server is not operational.    */
DECL|method|ensureOperational ()
specifier|protected
name|void
name|ensureOperational
parameter_list|()
block|{
if|if
condition|(
operator|!
name|getStatus
argument_list|()
operator|.
name|isOperational
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Server is not running"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Convenience method that returns a resource as inputstream from the    * classpath.    *<p/>    * It first attempts to use the Thread's context classloader and if not    * set it uses the<code>ClassUtils</code> classloader.    *    * @param name resource to retrieve.    *    * @return inputstream with the resource, NULL if the resource does not    *         exist.    */
DECL|method|getResource (String name)
specifier|static
name|InputStream
name|getResource
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Check
operator|.
name|notEmpty
argument_list|(
name|name
argument_list|,
literal|"name"
argument_list|)
expr_stmt|;
name|ClassLoader
name|cl
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
if|if
condition|(
name|cl
operator|==
literal|null
condition|)
block|{
name|cl
operator|=
name|Server
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
expr_stmt|;
block|}
return|return
name|cl
operator|.
name|getResourceAsStream
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**    * Initializes the Server.    *<p/>    * The initialization steps are:    *<ul>    *<li>It verifies the service home and temp directories exist</li>    *<li>Loads the Server<code>#SERVER#-default.xml</code>    * configuration file from the classpath</li>    *<li>Initializes log4j logging. If the    *<code>#SERVER#-log4j.properties</code> file does not exist in the config    * directory it load<code>default-log4j.properties</code> from the classpath    *</li>    *<li>Loads the<code>#SERVER#-site.xml</code> file from the server config    * directory and merges it with the default configuration.</li>    *<li>Loads the services</li>    *<li>Initializes the services</li>    *<li>Post-initializes the services</li>    *<li>Sets the server startup status</li>    *    * @throws ServerException thrown if the server could not be initialized.    */
DECL|method|init ()
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|ServerException
block|{
if|if
condition|(
name|status
operator|!=
name|Status
operator|.
name|UNDEF
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Server already initialized"
argument_list|)
throw|;
block|}
name|status
operator|=
name|Status
operator|.
name|BOOTING
expr_stmt|;
name|verifyDir
argument_list|(
name|homeDir
argument_list|)
expr_stmt|;
name|verifyDir
argument_list|(
name|tempDir
argument_list|)
expr_stmt|;
name|Properties
name|serverInfo
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
try|try
block|{
name|InputStream
name|is
init|=
name|getResource
argument_list|(
name|name
operator|+
literal|".properties"
argument_list|)
decl_stmt|;
name|serverInfo
operator|.
name|load
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not load server information file: "
operator|+
name|name
operator|+
literal|".properties"
argument_list|)
throw|;
block|}
name|initLog
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"++++++++++++++++++++++++++++++++++++++++++++++++++++++"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Server [{}] starting"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"  Built information:"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"    Version           : {}"
argument_list|,
name|serverInfo
operator|.
name|getProperty
argument_list|(
name|name
operator|+
literal|".version"
argument_list|,
literal|"undef"
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"    Source Repository : {}"
argument_list|,
name|serverInfo
operator|.
name|getProperty
argument_list|(
name|name
operator|+
literal|".source.repository"
argument_list|,
literal|"undef"
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"    Source Revision   : {}"
argument_list|,
name|serverInfo
operator|.
name|getProperty
argument_list|(
name|name
operator|+
literal|".source.revision"
argument_list|,
literal|"undef"
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"    Built by          : {}"
argument_list|,
name|serverInfo
operator|.
name|getProperty
argument_list|(
name|name
operator|+
literal|".build.username"
argument_list|,
literal|"undef"
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"    Built timestamp   : {}"
argument_list|,
name|serverInfo
operator|.
name|getProperty
argument_list|(
name|name
operator|+
literal|".build.timestamp"
argument_list|,
literal|"undef"
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"  Runtime information:"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"    Home   dir: {}"
argument_list|,
name|homeDir
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"    Config dir: {}"
argument_list|,
operator|(
name|config
operator|==
literal|null
operator|)
condition|?
name|configDir
else|:
literal|"-"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"    Log    dir: {}"
argument_list|,
name|logDir
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"    Temp   dir: {}"
argument_list|,
name|tempDir
argument_list|)
expr_stmt|;
name|initConfig
argument_list|()
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Loading services"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Service
argument_list|>
name|list
init|=
name|loadServices
argument_list|()
decl_stmt|;
try|try
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Initializing services"
argument_list|)
expr_stmt|;
name|initServices
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Services initialized"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServerException
name|ex
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Services initialization failure, destroying initialized services"
argument_list|)
expr_stmt|;
name|destroyServices
argument_list|()
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
name|Status
name|status
init|=
name|Status
operator|.
name|valueOf
argument_list|(
name|getConfig
argument_list|()
operator|.
name|get
argument_list|(
name|getPrefixedName
argument_list|(
name|CONF_STARTUP_STATUS
argument_list|)
argument_list|,
name|Status
operator|.
name|NORMAL
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|setStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Server [{}] started!, status [{}]"
argument_list|,
name|name
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verifies the specified directory exists.    *    * @param dir directory to verify it exists.    *    * @throws ServerException thrown if the directory does not exist or it the    * path it is not a directory.    */
DECL|method|verifyDir (String dir)
specifier|private
name|void
name|verifyDir
parameter_list|(
name|String
name|dir
parameter_list|)
throws|throws
name|ServerException
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ServerException
argument_list|(
name|ServerException
operator|.
name|ERROR
operator|.
name|S01
argument_list|,
name|dir
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ServerException
argument_list|(
name|ServerException
operator|.
name|ERROR
operator|.
name|S02
argument_list|,
name|dir
argument_list|)
throw|;
block|}
block|}
comment|/**    * Initializes Log4j logging.    *    * @throws ServerException thrown if Log4j could not be initialized.    */
DECL|method|initLog ()
specifier|protected
name|void
name|initLog
parameter_list|()
throws|throws
name|ServerException
block|{
name|verifyDir
argument_list|(
name|logDir
argument_list|)
expr_stmt|;
name|LogManager
operator|.
name|resetConfiguration
argument_list|()
expr_stmt|;
name|File
name|log4jFile
init|=
operator|new
name|File
argument_list|(
name|configDir
argument_list|,
name|name
operator|+
literal|"-log4j.properties"
argument_list|)
decl_stmt|;
if|if
condition|(
name|log4jFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|PropertyConfigurator
operator|.
name|configureAndWatch
argument_list|(
name|log4jFile
operator|.
name|toString
argument_list|()
argument_list|,
literal|10
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|//every 10 secs
name|log
operator|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Server
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
try|try
block|{
name|InputStream
name|is
init|=
name|getResource
argument_list|(
name|DEFAULT_LOG4J_PROPERTIES
argument_list|)
decl_stmt|;
name|props
operator|.
name|load
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|ServerException
argument_list|(
name|ServerException
operator|.
name|ERROR
operator|.
name|S03
argument_list|,
name|DEFAULT_LOG4J_PROPERTIES
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
name|PropertyConfigurator
operator|.
name|configure
argument_list|(
name|props
argument_list|)
expr_stmt|;
name|log
operator|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Server
operator|.
name|class
argument_list|)
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"Log4j [{}] configuration file not found, using default configuration from classpath"
argument_list|,
name|log4jFile
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Loads and inializes the server configuration.    *    * @throws ServerException thrown if the configuration could not be loaded/initialized.    */
DECL|method|initConfig ()
specifier|protected
name|void
name|initConfig
parameter_list|()
throws|throws
name|ServerException
block|{
name|verifyDir
argument_list|(
name|configDir
argument_list|)
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|configDir
argument_list|)
decl_stmt|;
name|Configuration
name|defaultConf
decl_stmt|;
name|String
name|defaultConfig
init|=
name|name
operator|+
literal|"-default.xml"
decl_stmt|;
name|ClassLoader
name|classLoader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
name|InputStream
name|inputStream
init|=
name|classLoader
operator|.
name|getResourceAsStream
argument_list|(
name|defaultConfig
argument_list|)
decl_stmt|;
if|if
condition|(
name|inputStream
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Default configuration file not available in classpath [{}]"
argument_list|,
name|defaultConfig
argument_list|)
expr_stmt|;
name|defaultConf
operator|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|defaultConf
operator|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ConfigurationUtils
operator|.
name|load
argument_list|(
name|defaultConf
argument_list|,
name|inputStream
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|ServerException
argument_list|(
name|ServerException
operator|.
name|ERROR
operator|.
name|S03
argument_list|,
name|defaultConfig
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|config
operator|==
literal|null
condition|)
block|{
name|Configuration
name|siteConf
decl_stmt|;
name|File
name|siteFile
init|=
operator|new
name|File
argument_list|(
name|file
argument_list|,
name|name
operator|+
literal|"-site.xml"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|siteFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Site configuration file [{}] not found in config directory"
argument_list|,
name|siteFile
argument_list|)
expr_stmt|;
name|siteConf
operator|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|siteFile
operator|.
name|isFile
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ServerException
argument_list|(
name|ServerException
operator|.
name|ERROR
operator|.
name|S05
argument_list|,
name|siteFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
try|try
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Loading site configuration from [{}]"
argument_list|,
name|siteFile
argument_list|)
expr_stmt|;
name|inputStream
operator|=
operator|new
name|FileInputStream
argument_list|(
name|siteFile
argument_list|)
expr_stmt|;
name|siteConf
operator|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ConfigurationUtils
operator|.
name|load
argument_list|(
name|siteConf
argument_list|,
name|inputStream
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|ServerException
argument_list|(
name|ServerException
operator|.
name|ERROR
operator|.
name|S06
argument_list|,
name|siteFile
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
name|config
operator|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ConfigurationUtils
operator|.
name|copy
argument_list|(
name|siteConf
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
name|ConfigurationUtils
operator|.
name|injectDefaults
argument_list|(
name|defaultConf
argument_list|,
name|config
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|System
operator|.
name|getProperties
argument_list|()
operator|.
name|stringPropertyNames
argument_list|()
control|)
block|{
name|String
name|value
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|getPrefix
argument_list|()
operator|+
literal|"."
argument_list|)
condition|)
block|{
name|config
operator|.
name|set
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|name
operator|.
name|endsWith
argument_list|(
literal|".password"
argument_list|)
operator|||
name|name
operator|.
name|endsWith
argument_list|(
literal|".secret"
argument_list|)
condition|)
block|{
name|value
operator|=
literal|"*MASKED*"
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"System property sets  {}: {}"
argument_list|,
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Loaded Configuration:"
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"------------------------------------------------------"
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|config
control|)
block|{
name|String
name|name
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|config
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|endsWith
argument_list|(
literal|".password"
argument_list|)
operator|||
name|name
operator|.
name|endsWith
argument_list|(
literal|".secret"
argument_list|)
condition|)
block|{
name|value
operator|=
literal|"*MASKED*"
expr_stmt|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"  {}: {}"
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"------------------------------------------------------"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Loads the specified services.    *    * @param classes services classes to load.    * @param list list of loaded service in order of appearance in the    * configuration.    *    * @throws ServerException thrown if a service class could not be loaded.    */
DECL|method|loadServices (Class[] classes, List<Service> list)
specifier|private
name|void
name|loadServices
parameter_list|(
name|Class
index|[]
name|classes
parameter_list|,
name|List
argument_list|<
name|Service
argument_list|>
name|list
parameter_list|)
throws|throws
name|ServerException
block|{
for|for
control|(
name|Class
name|klass
range|:
name|classes
control|)
block|{
try|try
block|{
name|Service
name|service
init|=
operator|(
name|Service
operator|)
name|klass
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Loading service [{}] implementation [{}]"
argument_list|,
name|service
operator|.
name|getInterface
argument_list|()
argument_list|,
name|service
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|service
operator|.
name|getInterface
argument_list|()
operator|.
name|isInstance
argument_list|(
name|service
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ServerException
argument_list|(
name|ServerException
operator|.
name|ERROR
operator|.
name|S04
argument_list|,
name|klass
argument_list|,
name|service
operator|.
name|getInterface
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|list
operator|.
name|add
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServerException
name|ex
parameter_list|)
block|{
throw|throw
name|ex
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|ServerException
argument_list|(
name|ServerException
operator|.
name|ERROR
operator|.
name|S07
argument_list|,
name|klass
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Loads services defined in<code>services</code> and    *<code>services.ext</code> and de-dups them.    *    * @return List of final services to initialize.    *    * @throws ServerException throw if the services could not be loaded.    */
DECL|method|loadServices ()
specifier|protected
name|List
argument_list|<
name|Service
argument_list|>
name|loadServices
parameter_list|()
throws|throws
name|ServerException
block|{
try|try
block|{
name|Map
argument_list|<
name|Class
argument_list|,
name|Service
argument_list|>
name|map
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Class
argument_list|,
name|Service
argument_list|>
argument_list|()
decl_stmt|;
name|Class
index|[]
name|classes
init|=
name|getConfig
argument_list|()
operator|.
name|getClasses
argument_list|(
name|getPrefixedName
argument_list|(
name|CONF_SERVICES
argument_list|)
argument_list|)
decl_stmt|;
name|Class
index|[]
name|classesExt
init|=
name|getConfig
argument_list|()
operator|.
name|getClasses
argument_list|(
name|getPrefixedName
argument_list|(
name|CONF_SERVICES_EXT
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Service
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Service
argument_list|>
argument_list|()
decl_stmt|;
name|loadServices
argument_list|(
name|classes
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|loadServices
argument_list|(
name|classesExt
argument_list|,
name|list
argument_list|)
expr_stmt|;
comment|//removing duplicate services, strategy: last one wins
for|for
control|(
name|Service
name|service
range|:
name|list
control|)
block|{
if|if
condition|(
name|map
operator|.
name|containsKey
argument_list|(
name|service
operator|.
name|getInterface
argument_list|()
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Replacing service [{}] implementation [{}]"
argument_list|,
name|service
operator|.
name|getInterface
argument_list|()
argument_list|,
name|service
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|map
operator|.
name|put
argument_list|(
name|service
operator|.
name|getInterface
argument_list|()
argument_list|,
name|service
argument_list|)
expr_stmt|;
block|}
name|list
operator|=
operator|new
name|ArrayList
argument_list|<
name|Service
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Class
argument_list|,
name|Service
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|ServerException
argument_list|(
name|ServerException
operator|.
name|ERROR
operator|.
name|S08
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
comment|/**    * Initializes the list of services.    *    * @param services services to initialized, it must be a de-dupped list of    * services.    *    * @throws ServerException thrown if the services could not be initialized.    */
DECL|method|initServices (List<Service> services)
specifier|protected
name|void
name|initServices
parameter_list|(
name|List
argument_list|<
name|Service
argument_list|>
name|services
parameter_list|)
throws|throws
name|ServerException
block|{
for|for
control|(
name|Service
name|service
range|:
name|services
control|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Initializing service [{}]"
argument_list|,
name|service
operator|.
name|getInterface
argument_list|()
argument_list|)
expr_stmt|;
name|checkServiceDependencies
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|service
operator|.
name|init
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|services
operator|.
name|put
argument_list|(
name|service
operator|.
name|getInterface
argument_list|()
argument_list|,
name|service
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Service
name|service
range|:
name|services
control|)
block|{
name|service
operator|.
name|postInit
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Checks if all service dependencies of a service are available.    *    * @param service service to check if all its dependencies are available.    *    * @throws ServerException thrown if a service dependency is missing.    */
DECL|method|checkServiceDependencies (Service service)
specifier|protected
name|void
name|checkServiceDependencies
parameter_list|(
name|Service
name|service
parameter_list|)
throws|throws
name|ServerException
block|{
if|if
condition|(
name|service
operator|.
name|getServiceDependencies
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Class
name|dependency
range|:
name|service
operator|.
name|getServiceDependencies
argument_list|()
control|)
block|{
if|if
condition|(
name|services
operator|.
name|get
argument_list|(
name|dependency
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ServerException
argument_list|(
name|ServerException
operator|.
name|ERROR
operator|.
name|S10
argument_list|,
name|service
operator|.
name|getClass
argument_list|()
argument_list|,
name|dependency
argument_list|)
throw|;
block|}
block|}
block|}
block|}
comment|/**    * Destroys the server services.    */
DECL|method|destroyServices ()
specifier|protected
name|void
name|destroyServices
parameter_list|()
block|{
name|List
argument_list|<
name|Service
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Service
argument_list|>
argument_list|(
name|services
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|reverse
argument_list|(
name|list
argument_list|)
expr_stmt|;
for|for
control|(
name|Service
name|service
range|:
name|list
control|)
block|{
try|try
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Destroying service [{}]"
argument_list|,
name|service
operator|.
name|getInterface
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not destroy service [{}], {}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|service
operator|.
name|getInterface
argument_list|()
block|,
name|ex
operator|.
name|getMessage
argument_list|()
block|,
name|ex
block|}
argument_list|)
expr_stmt|;
block|}
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Services destroyed"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Destroys the server.    *<p/>    * All services are destroyed in reverse order of initialization, then the    * Log4j framework is shutdown.    */
DECL|method|destroy ()
specifier|public
name|void
name|destroy
parameter_list|()
block|{
name|ensureOperational
argument_list|()
expr_stmt|;
name|destroyServices
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Server [{}] shutdown!"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"======================================================"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|Boolean
operator|.
name|getBoolean
argument_list|(
literal|"test.circus"
argument_list|)
condition|)
block|{
name|LogManager
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|status
operator|=
name|Status
operator|.
name|SHUTDOWN
expr_stmt|;
block|}
comment|/**    * Returns the name of the server.    *    * @return the server name.    */
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**    * Returns the server prefix for server configuration properties.    *<p/>    * By default it is the server name.    *    * @return the prefix for server configuration properties.    */
DECL|method|getPrefix ()
specifier|public
name|String
name|getPrefix
parameter_list|()
block|{
return|return
name|getName
argument_list|()
return|;
block|}
comment|/**    * Returns the prefixed name of a server property.    *    * @param name of the property.    *    * @return prefixed name of the property.    */
DECL|method|getPrefixedName (String name)
specifier|public
name|String
name|getPrefixedName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|getPrefix
argument_list|()
operator|+
literal|"."
operator|+
name|Check
operator|.
name|notEmpty
argument_list|(
name|name
argument_list|,
literal|"name"
argument_list|)
return|;
block|}
comment|/**    * Returns the server home dir.    *    * @return the server home dir.    */
DECL|method|getHomeDir ()
specifier|public
name|String
name|getHomeDir
parameter_list|()
block|{
return|return
name|homeDir
return|;
block|}
comment|/**    * Returns the server config dir.    *    * @return the server config dir.    */
DECL|method|getConfigDir ()
specifier|public
name|String
name|getConfigDir
parameter_list|()
block|{
return|return
name|configDir
return|;
block|}
comment|/**    * Returns the server log dir.    *    * @return the server log dir.    */
DECL|method|getLogDir ()
specifier|public
name|String
name|getLogDir
parameter_list|()
block|{
return|return
name|logDir
return|;
block|}
comment|/**    * Returns the server temp dir.    *    * @return the server temp dir.    */
DECL|method|getTempDir ()
specifier|public
name|String
name|getTempDir
parameter_list|()
block|{
return|return
name|tempDir
return|;
block|}
comment|/**    * Returns the server configuration.    *    * @return the server configuration.    */
DECL|method|getConfig ()
specifier|public
name|Configuration
name|getConfig
parameter_list|()
block|{
return|return
name|config
return|;
block|}
comment|/**    * Returns the {@link Service} associated to the specified interface.    *    * @param serviceKlass service interface.    *    * @return the service implementation.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|get (Class<T> serviceKlass)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|get
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|serviceKlass
parameter_list|)
block|{
name|ensureOperational
argument_list|()
expr_stmt|;
name|Check
operator|.
name|notNull
argument_list|(
name|serviceKlass
argument_list|,
literal|"serviceKlass"
argument_list|)
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|services
operator|.
name|get
argument_list|(
name|serviceKlass
argument_list|)
return|;
block|}
comment|/**    * Adds a service programmatically.    *<p/>    * If a service with the same interface exists, it will be destroyed and    * removed before the given one is initialized and added.    *<p/>    * If an exception is thrown the server is destroyed.    *    * @param klass service class to add.    *    * @throws ServerException throw if the service could not initialized/added    * to the server.    */
DECL|method|setService (Class<? extends Service> klass)
specifier|public
name|void
name|setService
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Service
argument_list|>
name|klass
parameter_list|)
throws|throws
name|ServerException
block|{
name|ensureOperational
argument_list|()
expr_stmt|;
name|Check
operator|.
name|notNull
argument_list|(
name|klass
argument_list|,
literal|"serviceKlass"
argument_list|)
expr_stmt|;
if|if
condition|(
name|getStatus
argument_list|()
operator|==
name|Status
operator|.
name|SHUTTING_DOWN
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Server shutting down"
argument_list|)
throw|;
block|}
try|try
block|{
name|Service
name|newService
init|=
name|klass
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|Service
name|oldService
init|=
name|services
operator|.
name|get
argument_list|(
name|newService
operator|.
name|getInterface
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldService
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|oldService
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not destroy service [{}], {}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|oldService
operator|.
name|getInterface
argument_list|()
block|,
name|ex
operator|.
name|getMessage
argument_list|()
block|,
name|ex
block|}
argument_list|)
expr_stmt|;
block|}
block|}
name|newService
operator|.
name|init
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|services
operator|.
name|put
argument_list|(
name|newService
operator|.
name|getInterface
argument_list|()
argument_list|,
name|newService
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not set service [{}] programmatically -server shutting down-, {}"
argument_list|,
name|klass
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|destroy
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|ServerException
argument_list|(
name|ServerException
operator|.
name|ERROR
operator|.
name|S09
argument_list|,
name|klass
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

