begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.lib.lang
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|lib
operator|.
name|lang
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|lib
operator|.
name|util
operator|.
name|Check
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_comment
comment|/**  * Adapter class that allows<code>Runnable</code>s and<code>Callable</code>s to  * be treated as the other.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|RunnableCallable
specifier|public
class|class
name|RunnableCallable
implements|implements
name|Callable
argument_list|<
name|Void
argument_list|>
implements|,
name|Runnable
block|{
DECL|field|runnable
specifier|private
name|Runnable
name|runnable
decl_stmt|;
DECL|field|callable
specifier|private
name|Callable
argument_list|<
name|?
argument_list|>
name|callable
decl_stmt|;
comment|/**    * Constructor that takes a runnable.    *    * @param runnable runnable.    */
DECL|method|RunnableCallable (Runnable runnable)
specifier|public
name|RunnableCallable
parameter_list|(
name|Runnable
name|runnable
parameter_list|)
block|{
name|this
operator|.
name|runnable
operator|=
name|Check
operator|.
name|notNull
argument_list|(
name|runnable
argument_list|,
literal|"runnable"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructor that takes a callable.    *    * @param callable callable.    */
DECL|method|RunnableCallable (Callable<?> callable)
specifier|public
name|RunnableCallable
parameter_list|(
name|Callable
argument_list|<
name|?
argument_list|>
name|callable
parameter_list|)
block|{
name|this
operator|.
name|callable
operator|=
name|Check
operator|.
name|notNull
argument_list|(
name|callable
argument_list|,
literal|"callable"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Invokes the wrapped callable/runnable as a callable.    *    * @return void    *    * @throws Exception thrown by the wrapped callable/runnable invocation.    */
annotation|@
name|Override
DECL|method|call ()
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|runnable
operator|!=
literal|null
condition|)
block|{
name|runnable
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|callable
operator|.
name|call
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Invokes the wrapped callable/runnable as a runnable.    *    * @throws RuntimeException thrown by the wrapped callable/runnable invocation.    */
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|runnable
operator|!=
literal|null
condition|)
block|{
name|runnable
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|callable
operator|.
name|call
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Returns the class name of the wrapper callable/runnable.    *    * @return the class name of the wrapper callable/runnable.    */
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|(
name|runnable
operator|!=
literal|null
operator|)
condition|?
name|runnable
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
else|:
name|callable
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
return|;
block|}
block|}
end_class

end_unit

