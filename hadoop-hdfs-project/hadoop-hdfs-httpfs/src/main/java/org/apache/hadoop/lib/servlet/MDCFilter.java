begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.lib.servlet
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|lib
operator|.
name|servlet
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|MDC
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterChain
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_comment
comment|/**  * Filter that sets request contextual information for the slf4j MDC.  *<p>  * It sets the following values:  *<ul>  *<li>hostname: if the {@link HostnameFilter} is present and configured  * before this filter</li>  *<li>user: the<code>HttpServletRequest.getUserPrincipal().getName()</code></li>  *<li>method: the HTTP method fo the request (GET, POST, ...)</li>  *<li>path: the path of the request URL</li>  *</ul>  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|MDCFilter
specifier|public
class|class
name|MDCFilter
implements|implements
name|Filter
block|{
comment|/**    * Initializes the filter.    *<p>    * This implementation is a NOP.    *    * @param config filter configuration.    *    * @throws ServletException thrown if the filter could not be initialized.    */
annotation|@
name|Override
DECL|method|init (FilterConfig config)
specifier|public
name|void
name|init
parameter_list|(
name|FilterConfig
name|config
parameter_list|)
throws|throws
name|ServletException
block|{   }
comment|/**    * Sets the slf4j<code>MDC</code> and delegates the request to the chain.    *    * @param request servlet request.    * @param response servlet response.    * @param chain filter chain.    *    * @throws IOException thrown if an IO error occurs.    * @throws ServletException thrown if a servlet error occurs.    */
annotation|@
name|Override
DECL|method|doFilter (ServletRequest request, ServletResponse response, FilterChain chain)
specifier|public
name|void
name|doFilter
parameter_list|(
name|ServletRequest
name|request
parameter_list|,
name|ServletResponse
name|response
parameter_list|,
name|FilterChain
name|chain
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServletException
block|{
try|try
block|{
name|MDC
operator|.
name|clear
argument_list|()
expr_stmt|;
name|String
name|hostname
init|=
name|HostnameFilter
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|hostname
operator|!=
literal|null
condition|)
block|{
name|MDC
operator|.
name|put
argument_list|(
literal|"hostname"
argument_list|,
name|HostnameFilter
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Principal
name|principal
init|=
operator|(
operator|(
name|HttpServletRequest
operator|)
name|request
operator|)
operator|.
name|getUserPrincipal
argument_list|()
decl_stmt|;
name|String
name|user
init|=
operator|(
name|principal
operator|!=
literal|null
operator|)
condition|?
name|principal
operator|.
name|getName
argument_list|()
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|user
operator|!=
literal|null
condition|)
block|{
name|MDC
operator|.
name|put
argument_list|(
literal|"user"
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
name|MDC
operator|.
name|put
argument_list|(
literal|"method"
argument_list|,
operator|(
operator|(
name|HttpServletRequest
operator|)
name|request
operator|)
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
name|MDC
operator|.
name|put
argument_list|(
literal|"path"
argument_list|,
operator|(
operator|(
name|HttpServletRequest
operator|)
name|request
operator|)
operator|.
name|getPathInfo
argument_list|()
argument_list|)
expr_stmt|;
name|chain
operator|.
name|doFilter
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|MDC
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Destroys the filter.    *<p>    * This implementation is a NOP.    */
annotation|@
name|Override
DECL|method|destroy ()
specifier|public
name|void
name|destroy
parameter_list|()
block|{   }
block|}
end_class

end_unit

