begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.http.server
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|http
operator|.
name|server
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|http
operator|.
name|client
operator|.
name|HttpFSFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|http
operator|.
name|server
operator|.
name|HttpFSParams
operator|.
name|AccessTimeParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|http
operator|.
name|server
operator|.
name|HttpFSParams
operator|.
name|BlockSizeParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|http
operator|.
name|server
operator|.
name|HttpFSParams
operator|.
name|DataParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|http
operator|.
name|server
operator|.
name|HttpFSParams
operator|.
name|DeleteOpParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|http
operator|.
name|server
operator|.
name|HttpFSParams
operator|.
name|DeleteRecursiveParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|http
operator|.
name|server
operator|.
name|HttpFSParams
operator|.
name|DoAsParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|http
operator|.
name|server
operator|.
name|HttpFSParams
operator|.
name|FilterParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|http
operator|.
name|server
operator|.
name|HttpFSParams
operator|.
name|FsPathParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|http
operator|.
name|server
operator|.
name|HttpFSParams
operator|.
name|GetOpParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|http
operator|.
name|server
operator|.
name|HttpFSParams
operator|.
name|GroupParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|http
operator|.
name|server
operator|.
name|HttpFSParams
operator|.
name|LenParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|http
operator|.
name|server
operator|.
name|HttpFSParams
operator|.
name|ModifiedTimeParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|http
operator|.
name|server
operator|.
name|HttpFSParams
operator|.
name|OffsetParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|http
operator|.
name|server
operator|.
name|HttpFSParams
operator|.
name|OverwriteParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|http
operator|.
name|server
operator|.
name|HttpFSParams
operator|.
name|OwnerParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|http
operator|.
name|server
operator|.
name|HttpFSParams
operator|.
name|PermissionParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|http
operator|.
name|server
operator|.
name|HttpFSParams
operator|.
name|PostOpParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|http
operator|.
name|server
operator|.
name|HttpFSParams
operator|.
name|PutOpParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|http
operator|.
name|server
operator|.
name|HttpFSParams
operator|.
name|ReplicationParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|http
operator|.
name|server
operator|.
name|HttpFSParams
operator|.
name|ToPathParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|lib
operator|.
name|service
operator|.
name|FileSystemAccess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|lib
operator|.
name|service
operator|.
name|FileSystemAccessException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|lib
operator|.
name|service
operator|.
name|Groups
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|lib
operator|.
name|service
operator|.
name|Instrumentation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|lib
operator|.
name|service
operator|.
name|ProxyUser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|lib
operator|.
name|servlet
operator|.
name|FileSystemReleaseFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|lib
operator|.
name|servlet
operator|.
name|HostnameFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|lib
operator|.
name|wsrs
operator|.
name|InputStreamEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|simple
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|MDC
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Consumes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|DELETE
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|DefaultValue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|POST
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PUT
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PathParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|QueryParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriInfo
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|MessageFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Main class of HttpFSServer server.  *<p/>  * The<code>HttpFSServer</code> class uses Jersey JAX-RS to binds HTTP requests to the  * different operations.  */
end_comment

begin_class
annotation|@
name|Path
argument_list|(
name|HttpFSFileSystem
operator|.
name|SERVICE_VERSION
argument_list|)
DECL|class|HttpFSServer
specifier|public
class|class
name|HttpFSServer
block|{
DECL|field|AUDIT_LOG
specifier|private
specifier|static
name|Logger
name|AUDIT_LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
literal|"httpfsaudit"
argument_list|)
decl_stmt|;
comment|/**    * Special binding for '/' as it is not handled by the wildcard binding.    *    * @param user principal making the request.    * @param op GET operation, default value is @link org.apache.hadoop.fs.http.client.HttpFSFileSystem.GetOpValues#OPEN}.    * @param filter Glob filter, default value is none. Used only if the    * operation is @link org.apache.hadoop.fs.http.client.HttpFSFileSystem.GetOpValues#LISTSTATUS}    * @param doAs user being impersonated, defualt value is none. It can be used    * only if the current user is a HttpFSServer proxyuser.    *    * @return the request response    *    * @throws IOException thrown if an IO error occurred. Thrown exceptions are    * handled by {@link HttpFSExceptionProvider}.    * @throws FileSystemAccessException thrown if a FileSystemAccess releated error occurred. Thrown    * exceptions are handled by {@link HttpFSExceptionProvider}.    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
DECL|method|root (@ontext Principal user, @QueryParam(GetOpParam.NAME) GetOpParam op, @QueryParam(FilterParam.NAME) @DefaultValue(FilterParam.DEFAULT) FilterParam filter, @QueryParam(DoAsParam.NAME) @DefaultValue(DoAsParam.DEFAULT) DoAsParam doAs)
specifier|public
name|Response
name|root
parameter_list|(
annotation|@
name|Context
name|Principal
name|user
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|GetOpParam
operator|.
name|NAME
argument_list|)
name|GetOpParam
name|op
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|FilterParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|FilterParam
operator|.
name|DEFAULT
argument_list|)
name|FilterParam
name|filter
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|DoAsParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|DoAsParam
operator|.
name|DEFAULT
argument_list|)
name|DoAsParam
name|doAs
parameter_list|)
throws|throws
name|IOException
throws|,
name|FileSystemAccessException
block|{
return|return
name|get
argument_list|(
name|user
argument_list|,
operator|new
name|FsPathParam
argument_list|(
literal|""
argument_list|)
argument_list|,
name|op
argument_list|,
operator|new
name|OffsetParam
argument_list|(
name|OffsetParam
operator|.
name|DEFAULT
argument_list|)
argument_list|,
operator|new
name|LenParam
argument_list|(
name|LenParam
operator|.
name|DEFAULT
argument_list|)
argument_list|,
name|filter
argument_list|,
name|doAs
argument_list|,
operator|new
name|OverwriteParam
argument_list|(
name|OverwriteParam
operator|.
name|DEFAULT
argument_list|)
argument_list|,
operator|new
name|BlockSizeParam
argument_list|(
name|BlockSizeParam
operator|.
name|DEFAULT
argument_list|)
argument_list|,
operator|new
name|PermissionParam
argument_list|(
name|PermissionParam
operator|.
name|DEFAULT
argument_list|)
argument_list|,
operator|new
name|ReplicationParam
argument_list|(
name|ReplicationParam
operator|.
name|DEFAULT
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Resolves the effective user that will be used to request a FileSystemAccess filesystem.    *<p/>    * If the doAs-user is NULL or the same as the user, it returns the user.    *<p/>    * Otherwise it uses proxyuser rules (see {@link ProxyUser} to determine if the    * current user can impersonate the doAs-user.    *<p/>    * If the current user cannot impersonate the doAs-user an    *<code>AccessControlException</code> will be thrown.    *    * @param user principal for whom the filesystem instance is.    * @param doAs do-as user, if any.    *    * @return the effective user.    *    * @throws IOException thrown if an IO error occurrs.    * @throws AccessControlException thrown if the current user cannot impersonate    * the doAs-user.    */
DECL|method|getEffectiveUser (Principal user, String doAs)
specifier|private
name|String
name|getEffectiveUser
parameter_list|(
name|Principal
name|user
parameter_list|,
name|String
name|doAs
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|effectiveUser
init|=
name|user
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|doAs
operator|!=
literal|null
operator|&&
operator|!
name|doAs
operator|.
name|equals
argument_list|(
name|user
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|ProxyUser
name|proxyUser
init|=
name|HttpFSServerWebApp
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
name|ProxyUser
operator|.
name|class
argument_list|)
decl_stmt|;
name|proxyUser
operator|.
name|validate
argument_list|(
name|user
operator|.
name|getName
argument_list|()
argument_list|,
name|HostnameFilter
operator|.
name|get
argument_list|()
argument_list|,
name|doAs
argument_list|)
expr_stmt|;
name|effectiveUser
operator|=
name|doAs
expr_stmt|;
name|AUDIT_LOG
operator|.
name|info
argument_list|(
literal|"Proxy user [{}] DoAs user [{}]"
argument_list|,
name|user
operator|.
name|getName
argument_list|()
argument_list|,
name|doAs
argument_list|)
expr_stmt|;
block|}
return|return
name|effectiveUser
return|;
block|}
comment|/**    * Executes a {@link FileSystemAccess.FileSystemExecutor} using a filesystem for the effective    * user.    *    * @param user principal making the request.    * @param doAs do-as user, if any.    * @param executor FileSystemExecutor to execute.    *    * @return FileSystemExecutor response    *    * @throws IOException thrown if an IO error occurrs.    * @throws FileSystemAccessException thrown if a FileSystemAccess releated error occurred. Thrown    * exceptions are handled by {@link HttpFSExceptionProvider}.    */
DECL|method|fsExecute (Principal user, String doAs, FileSystemAccess.FileSystemExecutor<T> executor)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|T
name|fsExecute
parameter_list|(
name|Principal
name|user
parameter_list|,
name|String
name|doAs
parameter_list|,
name|FileSystemAccess
operator|.
name|FileSystemExecutor
argument_list|<
name|T
argument_list|>
name|executor
parameter_list|)
throws|throws
name|IOException
throws|,
name|FileSystemAccessException
block|{
name|String
name|hadoopUser
init|=
name|getEffectiveUser
argument_list|(
name|user
argument_list|,
name|doAs
argument_list|)
decl_stmt|;
name|FileSystemAccess
name|fsAccess
init|=
name|HttpFSServerWebApp
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
name|FileSystemAccess
operator|.
name|class
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
name|HttpFSServerWebApp
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
name|FileSystemAccess
operator|.
name|class
argument_list|)
operator|.
name|getFileSystemConfiguration
argument_list|()
decl_stmt|;
return|return
name|fsAccess
operator|.
name|execute
argument_list|(
name|hadoopUser
argument_list|,
name|conf
argument_list|,
name|executor
argument_list|)
return|;
block|}
comment|/**    * Returns a filesystem instance. The fileystem instance is wired for release at the completion of    * the current Servlet request via the {@link FileSystemReleaseFilter}.    *<p/>    * If a do-as user is specified, the current user must be a valid proxyuser, otherwise an    *<code>AccessControlException</code> will be thrown.    *    * @param user principal for whom the filesystem instance is.    * @param doAs do-as user, if any.    *    * @return a filesystem for the specified user or do-as user.    *    * @throws IOException thrown if an IO error occurred. Thrown exceptions are    * handled by {@link HttpFSExceptionProvider}.    * @throws FileSystemAccessException thrown if a FileSystemAccess releated error occurred. Thrown    * exceptions are handled by {@link HttpFSExceptionProvider}.    */
DECL|method|createFileSystem (Principal user, String doAs)
specifier|private
name|FileSystem
name|createFileSystem
parameter_list|(
name|Principal
name|user
parameter_list|,
name|String
name|doAs
parameter_list|)
throws|throws
name|IOException
throws|,
name|FileSystemAccessException
block|{
name|String
name|hadoopUser
init|=
name|getEffectiveUser
argument_list|(
name|user
argument_list|,
name|doAs
argument_list|)
decl_stmt|;
name|FileSystemAccess
name|fsAccess
init|=
name|HttpFSServerWebApp
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
name|FileSystemAccess
operator|.
name|class
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
name|HttpFSServerWebApp
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
name|FileSystemAccess
operator|.
name|class
argument_list|)
operator|.
name|getFileSystemConfiguration
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|fsAccess
operator|.
name|createFileSystem
argument_list|(
name|hadoopUser
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|FileSystemReleaseFilter
operator|.
name|setFileSystem
argument_list|(
name|fs
argument_list|)
expr_stmt|;
return|return
name|fs
return|;
block|}
comment|/**    * Binding to handle all GET requests, supported operations are    * @link org.apache.hadoop.fs.http.client.HttpFSFileSystem.GetOpValues}.    *<p/>    * The @link org.apache.hadoop.fs.http.client.HttpFSFileSystem.GetOpValues#INSTRUMENTATION} operation is available only    * to users that are in HttpFSServer's admin group (see {@link HttpFSServer}. It returns    * HttpFSServer instrumentation data. The specified path must be '/'.    *    * @param user principal making the request.    * @param path path for the GET request.    * @param op GET operation, default value is @link org.apache.hadoop.fs.http.client.HttpFSFileSystem.GetOpValues#OPEN}.    * @param offset of the  file being fetch, used only with    * @link org.apache.hadoop.fs.http.client.HttpFSFileSystem.GetOpValues#OPEN} operations.    * @param len amounts of bytes, used only with @link org.apache.hadoop.fs.http.client.HttpFSFileSystem.GetOpValues#OPEN}    * operations.    * @param filter Glob filter, default value is none. Used only if the    * operation is @link org.apache.hadoop.fs.http.client.HttpFSFileSystem.GetOpValues#LISTSTATUS}    * @param doAs user being impersonated, defualt value is none. It can be used    * only if the current user is a HttpFSServer proxyuser.    * @param override default is true. Used only for    * @link org.apache.hadoop.fs.http.client.HttpFSFileSystem.PutOpValues#CREATE} operations.    * @param blockSize block size to set, used only by    * @link org.apache.hadoop.fs.http.client.HttpFSFileSystem.PutOpValues#CREATE} operations.    * @param permission permission to set, used only by    * @link org.apache.hadoop.fs.http.client.HttpFSFileSystem.PutOpValues#SETPERMISSION}.    * @param replication replication factor to set, used only by    * @link org.apache.hadoop.fs.http.client.HttpFSFileSystem.PutOpValues#SETREPLICATION}.    *    * @return the request response.    *    * @throws IOException thrown if an IO error occurred. Thrown exceptions are    * handled by {@link HttpFSExceptionProvider}.    * @throws FileSystemAccessException thrown if a FileSystemAccess releated error occurred. Thrown    * exceptions are handled by {@link HttpFSExceptionProvider}.    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"{path:.*}"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_OCTET_STREAM
block|,
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
DECL|method|get (@ontext Principal user, @PathParam(R) @DefaultValue(R) FsPathParam path, @QueryParam(GetOpParam.NAME) GetOpParam op, @QueryParam(OffsetParam.NAME) @DefaultValue(OffsetParam.DEFAULT) OffsetParam offset, @QueryParam(LenParam.NAME) @DefaultValue(LenParam.DEFAULT) LenParam len, @QueryParam(FilterParam.NAME) @DefaultValue(FilterParam.DEFAULT) FilterParam filter, @QueryParam(DoAsParam.NAME) @DefaultValue(DoAsParam.DEFAULT) DoAsParam doAs, @QueryParam(OverwriteParam.NAME) @DefaultValue(OverwriteParam.DEFAULT) OverwriteParam override, @QueryParam(BlockSizeParam.NAME) @DefaultValue(BlockSizeParam.DEFAULT) BlockSizeParam blockSize, @QueryParam(PermissionParam.NAME) @DefaultValue(PermissionParam.DEFAULT) PermissionParam permission, @QueryParam(ReplicationParam.NAME) @DefaultValue(ReplicationParam.DEFAULT) ReplicationParam replication )
specifier|public
name|Response
name|get
parameter_list|(
annotation|@
name|Context
name|Principal
name|user
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"path"
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
literal|""
argument_list|)
name|FsPathParam
name|path
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|GetOpParam
operator|.
name|NAME
argument_list|)
name|GetOpParam
name|op
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|OffsetParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|OffsetParam
operator|.
name|DEFAULT
argument_list|)
name|OffsetParam
name|offset
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|LenParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|LenParam
operator|.
name|DEFAULT
argument_list|)
name|LenParam
name|len
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|FilterParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|FilterParam
operator|.
name|DEFAULT
argument_list|)
name|FilterParam
name|filter
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|DoAsParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|DoAsParam
operator|.
name|DEFAULT
argument_list|)
name|DoAsParam
name|doAs
parameter_list|,
comment|//these params are only for createHandle operation acceptance purposes
annotation|@
name|QueryParam
argument_list|(
name|OverwriteParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|OverwriteParam
operator|.
name|DEFAULT
argument_list|)
name|OverwriteParam
name|override
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|BlockSizeParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|BlockSizeParam
operator|.
name|DEFAULT
argument_list|)
name|BlockSizeParam
name|blockSize
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|PermissionParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|PermissionParam
operator|.
name|DEFAULT
argument_list|)
name|PermissionParam
name|permission
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|ReplicationParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|ReplicationParam
operator|.
name|DEFAULT
argument_list|)
name|ReplicationParam
name|replication
parameter_list|)
throws|throws
name|IOException
throws|,
name|FileSystemAccessException
block|{
name|Response
name|response
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|op
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"Missing [{0}] parameter"
argument_list|,
name|GetOpParam
operator|.
name|NAME
argument_list|)
argument_list|)
throw|;
block|}
else|else
block|{
name|path
operator|.
name|makeAbsolute
argument_list|()
expr_stmt|;
name|MDC
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|OP_PARAM
argument_list|,
name|op
operator|.
name|value
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|op
operator|.
name|value
argument_list|()
condition|)
block|{
case|case
name|OPEN
case|:
block|{
comment|//Invoking the command directly using an unmanaged FileSystem that is released by the
comment|//FileSystemReleaseFilter
name|FSOperations
operator|.
name|FSOpen
name|command
init|=
operator|new
name|FSOperations
operator|.
name|FSOpen
argument_list|(
name|path
operator|.
name|value
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|createFileSystem
argument_list|(
name|user
argument_list|,
name|doAs
operator|.
name|value
argument_list|()
argument_list|)
decl_stmt|;
name|InputStream
name|is
init|=
name|command
operator|.
name|execute
argument_list|(
name|fs
argument_list|)
decl_stmt|;
name|AUDIT_LOG
operator|.
name|info
argument_list|(
literal|"[{}] offset [{}] len [{}]"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|path
block|,
name|offset
block|,
name|len
block|}
argument_list|)
expr_stmt|;
name|InputStreamEntity
name|entity
init|=
operator|new
name|InputStreamEntity
argument_list|(
name|is
argument_list|,
name|offset
operator|.
name|value
argument_list|()
argument_list|,
name|len
operator|.
name|value
argument_list|()
argument_list|)
decl_stmt|;
name|response
operator|=
name|Response
operator|.
name|ok
argument_list|(
name|entity
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_OCTET_STREAM
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|GETFILESTATUS
case|:
block|{
name|FSOperations
operator|.
name|FSFileStatus
name|command
init|=
operator|new
name|FSOperations
operator|.
name|FSFileStatus
argument_list|(
name|path
operator|.
name|value
argument_list|()
argument_list|)
decl_stmt|;
name|Map
name|json
init|=
name|fsExecute
argument_list|(
name|user
argument_list|,
name|doAs
operator|.
name|value
argument_list|()
argument_list|,
name|command
argument_list|)
decl_stmt|;
name|AUDIT_LOG
operator|.
name|info
argument_list|(
literal|"[{}]"
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|response
operator|=
name|Response
operator|.
name|ok
argument_list|(
name|json
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|LISTSTATUS
case|:
block|{
name|FSOperations
operator|.
name|FSListStatus
name|command
init|=
operator|new
name|FSOperations
operator|.
name|FSListStatus
argument_list|(
name|path
operator|.
name|value
argument_list|()
argument_list|,
name|filter
operator|.
name|value
argument_list|()
argument_list|)
decl_stmt|;
name|Map
name|json
init|=
name|fsExecute
argument_list|(
name|user
argument_list|,
name|doAs
operator|.
name|value
argument_list|()
argument_list|,
name|command
argument_list|)
decl_stmt|;
if|if
condition|(
name|filter
operator|.
name|value
argument_list|()
operator|==
literal|null
condition|)
block|{
name|AUDIT_LOG
operator|.
name|info
argument_list|(
literal|"[{}]"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|AUDIT_LOG
operator|.
name|info
argument_list|(
literal|"[{}] filter [{}]"
argument_list|,
name|path
argument_list|,
name|filter
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|response
operator|=
name|Response
operator|.
name|ok
argument_list|(
name|json
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|GETHOMEDIR
case|:
block|{
name|FSOperations
operator|.
name|FSHomeDir
name|command
init|=
operator|new
name|FSOperations
operator|.
name|FSHomeDir
argument_list|()
decl_stmt|;
name|JSONObject
name|json
init|=
name|fsExecute
argument_list|(
name|user
argument_list|,
name|doAs
operator|.
name|value
argument_list|()
argument_list|,
name|command
argument_list|)
decl_stmt|;
name|AUDIT_LOG
operator|.
name|info
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|response
operator|=
name|Response
operator|.
name|ok
argument_list|(
name|json
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|INSTRUMENTATION
case|:
block|{
if|if
condition|(
operator|!
name|path
operator|.
name|value
argument_list|()
operator|.
name|equals
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"Invalid path for {0}={1}, must be '/'"
argument_list|,
name|GetOpParam
operator|.
name|NAME
argument_list|,
name|HttpFSFileSystem
operator|.
name|GetOpValues
operator|.
name|INSTRUMENTATION
argument_list|)
argument_list|)
throw|;
block|}
name|Groups
name|groups
init|=
name|HttpFSServerWebApp
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
name|Groups
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|userGroups
init|=
name|groups
operator|.
name|getGroups
argument_list|(
name|user
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|userGroups
operator|.
name|contains
argument_list|(
name|HttpFSServerWebApp
operator|.
name|get
argument_list|()
operator|.
name|getAdminGroup
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"User not in HttpFSServer admin group"
argument_list|)
throw|;
block|}
name|Instrumentation
name|instrumentation
init|=
name|HttpFSServerWebApp
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
name|Instrumentation
operator|.
name|class
argument_list|)
decl_stmt|;
name|Map
name|snapshot
init|=
name|instrumentation
operator|.
name|getSnapshot
argument_list|()
decl_stmt|;
name|response
operator|=
name|Response
operator|.
name|ok
argument_list|(
name|snapshot
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|GETCONTENTSUMMARY
case|:
block|{
name|FSOperations
operator|.
name|FSContentSummary
name|command
init|=
operator|new
name|FSOperations
operator|.
name|FSContentSummary
argument_list|(
name|path
operator|.
name|value
argument_list|()
argument_list|)
decl_stmt|;
name|Map
name|json
init|=
name|fsExecute
argument_list|(
name|user
argument_list|,
name|doAs
operator|.
name|value
argument_list|()
argument_list|,
name|command
argument_list|)
decl_stmt|;
name|AUDIT_LOG
operator|.
name|info
argument_list|(
literal|"[{}]"
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|response
operator|=
name|Response
operator|.
name|ok
argument_list|(
name|json
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|GETFILECHECKSUM
case|:
block|{
name|FSOperations
operator|.
name|FSFileChecksum
name|command
init|=
operator|new
name|FSOperations
operator|.
name|FSFileChecksum
argument_list|(
name|path
operator|.
name|value
argument_list|()
argument_list|)
decl_stmt|;
name|Map
name|json
init|=
name|fsExecute
argument_list|(
name|user
argument_list|,
name|doAs
operator|.
name|value
argument_list|()
argument_list|,
name|command
argument_list|)
decl_stmt|;
name|AUDIT_LOG
operator|.
name|info
argument_list|(
literal|"[{}]"
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|response
operator|=
name|Response
operator|.
name|ok
argument_list|(
name|json
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|GETDELEGATIONTOKEN
case|:
block|{
name|response
operator|=
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|GETFILEBLOCKLOCATIONS
case|:
block|{
name|response
operator|=
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
return|return
name|response
return|;
block|}
block|}
comment|/**    * Creates the URL for an upload operation (create or append).    *    * @param uriInfo uri info of the request.    * @param uploadOperation operation for the upload URL.    *    * @return the URI for uploading data.    */
DECL|method|createUploadRedirectionURL (UriInfo uriInfo, Enum<?> uploadOperation)
specifier|protected
name|URI
name|createUploadRedirectionURL
parameter_list|(
name|UriInfo
name|uriInfo
parameter_list|,
name|Enum
argument_list|<
name|?
argument_list|>
name|uploadOperation
parameter_list|)
block|{
name|UriBuilder
name|uriBuilder
init|=
name|uriInfo
operator|.
name|getRequestUriBuilder
argument_list|()
decl_stmt|;
name|uriBuilder
operator|=
name|uriBuilder
operator|.
name|replaceQueryParam
argument_list|(
name|PutOpParam
operator|.
name|NAME
argument_list|,
name|uploadOperation
argument_list|)
operator|.
name|queryParam
argument_list|(
name|DataParam
operator|.
name|NAME
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
return|return
name|uriBuilder
operator|.
name|build
argument_list|(
literal|null
argument_list|)
return|;
block|}
comment|/**    * Binding to handle all DELETE requests.    *    * @param user principal making the request.    * @param path path for the DELETE request.    * @param op DELETE operation, default value is @link org.apache.hadoop.fs.http.client.HttpFSFileSystem.DeleteOpValues#DELETE}.    * @param recursive indicates if the delete is recursive, default is<code>false</code>    * @param doAs user being impersonated, defualt value is none. It can be used    * only if the current user is a HttpFSServer proxyuser.    *    * @return the request response.    *    * @throws IOException thrown if an IO error occurred. Thrown exceptions are    * handled by {@link HttpFSExceptionProvider}.    * @throws FileSystemAccessException thrown if a FileSystemAccess releated error occurred. Thrown    * exceptions are handled by {@link HttpFSExceptionProvider}.    */
annotation|@
name|DELETE
annotation|@
name|Path
argument_list|(
literal|"{path:.*}"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
DECL|method|delete (@ontext Principal user, @PathParam(R) FsPathParam path, @QueryParam(DeleteOpParam.NAME) DeleteOpParam op, @QueryParam(DeleteRecursiveParam.NAME) @DefaultValue(DeleteRecursiveParam.DEFAULT) DeleteRecursiveParam recursive, @QueryParam(DoAsParam.NAME) @DefaultValue(DoAsParam.DEFAULT) DoAsParam doAs)
specifier|public
name|Response
name|delete
parameter_list|(
annotation|@
name|Context
name|Principal
name|user
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"path"
argument_list|)
name|FsPathParam
name|path
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|DeleteOpParam
operator|.
name|NAME
argument_list|)
name|DeleteOpParam
name|op
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|DeleteRecursiveParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|DeleteRecursiveParam
operator|.
name|DEFAULT
argument_list|)
name|DeleteRecursiveParam
name|recursive
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|DoAsParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|DoAsParam
operator|.
name|DEFAULT
argument_list|)
name|DoAsParam
name|doAs
parameter_list|)
throws|throws
name|IOException
throws|,
name|FileSystemAccessException
block|{
name|Response
name|response
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|op
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"Missing [{0}] parameter"
argument_list|,
name|DeleteOpParam
operator|.
name|NAME
argument_list|)
argument_list|)
throw|;
block|}
switch|switch
condition|(
name|op
operator|.
name|value
argument_list|()
condition|)
block|{
case|case
name|DELETE
case|:
block|{
name|path
operator|.
name|makeAbsolute
argument_list|()
expr_stmt|;
name|MDC
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|OP_PARAM
argument_list|,
literal|"DELETE"
argument_list|)
expr_stmt|;
name|AUDIT_LOG
operator|.
name|info
argument_list|(
literal|"[{}] recursive [{}]"
argument_list|,
name|path
argument_list|,
name|recursive
argument_list|)
expr_stmt|;
name|FSOperations
operator|.
name|FSDelete
name|command
init|=
operator|new
name|FSOperations
operator|.
name|FSDelete
argument_list|(
name|path
operator|.
name|value
argument_list|()
argument_list|,
name|recursive
operator|.
name|value
argument_list|()
argument_list|)
decl_stmt|;
name|JSONObject
name|json
init|=
name|fsExecute
argument_list|(
name|user
argument_list|,
name|doAs
operator|.
name|value
argument_list|()
argument_list|,
name|command
argument_list|)
decl_stmt|;
name|response
operator|=
name|Response
operator|.
name|ok
argument_list|(
name|json
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
return|return
name|response
return|;
block|}
comment|/**    * Binding to handle all PUT requests, supported operations are    * @link org.apache.hadoop.fs.http.client.HttpFSFileSystem.PutOpValues}.    *    * @param is request input stream, used only for    * @link org.apache.hadoop.fs.http.client.HttpFSFileSystem.PostOpValues#APPEND} operations.    * @param user principal making the request.    * @param uriInfo the request uriInfo.    * @param path path for the PUT request.    * @param op PUT operation, no default value.    * @param toPath new path, used only for    * {@link org.apache.hadoop.fs.http.client.HttpFSFileSystem.PutOpValues#RENAME} operations.    * @link org.apache.hadoop.fs.http.client.HttpFSFileSystem.PutOpValues#SETTIMES}.    * @param owner owner to set, used only for    * @link org.apache.hadoop.fs.http.client.HttpFSFileSystem.PutOpValues#SETOWNER} operations.    * @param group group to set, used only for    * @link org.apache.hadoop.fs.http.client.HttpFSFileSystem.PutOpValues#SETOWNER} operations.    * @param override default is true. Used only for    * @link org.apache.hadoop.fs.http.client.HttpFSFileSystem.PutOpValues#CREATE} operations.    * @param blockSize block size to set, used only by    * @link org.apache.hadoop.fs.http.client.HttpFSFileSystem.PutOpValues#CREATE} operations.    * @param permission permission to set, used only by    * @link org.apache.hadoop.fs.http.client.HttpFSFileSystem.PutOpValues#SETPERMISSION}.    * @param replication replication factor to set, used only by    * @link org.apache.hadoop.fs.http.client.HttpFSFileSystem.PutOpValues#SETREPLICATION}.    * @param modifiedTime modified time, in seconds since EPOC, used only by    * @link org.apache.hadoop.fs.http.client.HttpFSFileSystem.PutOpValues#SETTIMES}.    * @param accessTime accessed time, in seconds since EPOC, used only by    * @link org.apache.hadoop.fs.http.client.HttpFSFileSystem.PutOpValues#SETTIMES}.    * @param hasData indicates if the append request is uploading data or not    * (just getting the handle).    * @param doAs user being impersonated, defualt value is none. It can be used    * only if the current user is a HttpFSServer proxyuser.    *    * @return the request response.    *    * @throws IOException thrown if an IO error occurred. Thrown exceptions are    * handled by {@link HttpFSExceptionProvider}.    * @throws FileSystemAccessException thrown if a FileSystemAccess releated error occurred. Thrown    * exceptions are handled by {@link HttpFSExceptionProvider}.    */
annotation|@
name|PUT
annotation|@
name|Path
argument_list|(
literal|"{path:.*}"
argument_list|)
annotation|@
name|Consumes
argument_list|(
block|{
literal|"*/*"
block|}
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
DECL|method|put (InputStream is, @Context Principal user, @Context UriInfo uriInfo, @PathParam(R) FsPathParam path, @QueryParam(PutOpParam.NAME) PutOpParam op, @QueryParam(ToPathParam.NAME) @DefaultValue(ToPathParam.DEFAULT) ToPathParam toPath, @QueryParam(OwnerParam.NAME) @DefaultValue(OwnerParam.DEFAULT) OwnerParam owner, @QueryParam(GroupParam.NAME) @DefaultValue(GroupParam.DEFAULT) GroupParam group, @QueryParam(OverwriteParam.NAME) @DefaultValue(OverwriteParam.DEFAULT) OverwriteParam override, @QueryParam(BlockSizeParam.NAME) @DefaultValue(BlockSizeParam.DEFAULT) BlockSizeParam blockSize, @QueryParam(PermissionParam.NAME) @DefaultValue(PermissionParam.DEFAULT) PermissionParam permission, @QueryParam(ReplicationParam.NAME) @DefaultValue(ReplicationParam.DEFAULT) ReplicationParam replication, @QueryParam(ModifiedTimeParam.NAME) @DefaultValue(ModifiedTimeParam.DEFAULT) ModifiedTimeParam modifiedTime, @QueryParam(AccessTimeParam.NAME) @DefaultValue(AccessTimeParam.DEFAULT) AccessTimeParam accessTime, @QueryParam(DataParam.NAME) @DefaultValue(DataParam.DEFAULT) DataParam hasData, @QueryParam(DoAsParam.NAME) @DefaultValue(DoAsParam.DEFAULT) DoAsParam doAs)
specifier|public
name|Response
name|put
parameter_list|(
name|InputStream
name|is
parameter_list|,
annotation|@
name|Context
name|Principal
name|user
parameter_list|,
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"path"
argument_list|)
name|FsPathParam
name|path
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|PutOpParam
operator|.
name|NAME
argument_list|)
name|PutOpParam
name|op
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|ToPathParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|ToPathParam
operator|.
name|DEFAULT
argument_list|)
name|ToPathParam
name|toPath
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|OwnerParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|OwnerParam
operator|.
name|DEFAULT
argument_list|)
name|OwnerParam
name|owner
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|GroupParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|GroupParam
operator|.
name|DEFAULT
argument_list|)
name|GroupParam
name|group
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|OverwriteParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|OverwriteParam
operator|.
name|DEFAULT
argument_list|)
name|OverwriteParam
name|override
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|BlockSizeParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|BlockSizeParam
operator|.
name|DEFAULT
argument_list|)
name|BlockSizeParam
name|blockSize
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|PermissionParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|PermissionParam
operator|.
name|DEFAULT
argument_list|)
name|PermissionParam
name|permission
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|ReplicationParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|ReplicationParam
operator|.
name|DEFAULT
argument_list|)
name|ReplicationParam
name|replication
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|ModifiedTimeParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|ModifiedTimeParam
operator|.
name|DEFAULT
argument_list|)
name|ModifiedTimeParam
name|modifiedTime
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|AccessTimeParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|AccessTimeParam
operator|.
name|DEFAULT
argument_list|)
name|AccessTimeParam
name|accessTime
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|DataParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|DataParam
operator|.
name|DEFAULT
argument_list|)
name|DataParam
name|hasData
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|DoAsParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|DoAsParam
operator|.
name|DEFAULT
argument_list|)
name|DoAsParam
name|doAs
parameter_list|)
throws|throws
name|IOException
throws|,
name|FileSystemAccessException
block|{
name|Response
name|response
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|op
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"Missing [{0}] parameter"
argument_list|,
name|PutOpParam
operator|.
name|NAME
argument_list|)
argument_list|)
throw|;
block|}
name|path
operator|.
name|makeAbsolute
argument_list|()
expr_stmt|;
name|MDC
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|OP_PARAM
argument_list|,
name|op
operator|.
name|value
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|op
operator|.
name|value
argument_list|()
condition|)
block|{
case|case
name|CREATE
case|:
block|{
if|if
condition|(
operator|!
name|hasData
operator|.
name|value
argument_list|()
condition|)
block|{
name|response
operator|=
name|Response
operator|.
name|temporaryRedirect
argument_list|(
name|createUploadRedirectionURL
argument_list|(
name|uriInfo
argument_list|,
name|HttpFSFileSystem
operator|.
name|PutOpValues
operator|.
name|CREATE
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|FSOperations
operator|.
name|FSCreate
name|command
init|=
operator|new
name|FSOperations
operator|.
name|FSCreate
argument_list|(
name|is
argument_list|,
name|path
operator|.
name|value
argument_list|()
argument_list|,
name|permission
operator|.
name|value
argument_list|()
argument_list|,
name|override
operator|.
name|value
argument_list|()
argument_list|,
name|replication
operator|.
name|value
argument_list|()
argument_list|,
name|blockSize
operator|.
name|value
argument_list|()
argument_list|)
decl_stmt|;
name|fsExecute
argument_list|(
name|user
argument_list|,
name|doAs
operator|.
name|value
argument_list|()
argument_list|,
name|command
argument_list|)
expr_stmt|;
name|AUDIT_LOG
operator|.
name|info
argument_list|(
literal|"[{}] permission [{}] override [{}] replication [{}] blockSize [{}]"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|path
block|,
name|permission
block|,
name|override
block|,
name|replication
block|,
name|blockSize
block|}
argument_list|)
expr_stmt|;
name|response
operator|=
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|CREATED
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
case|case
name|MKDIRS
case|:
block|{
name|FSOperations
operator|.
name|FSMkdirs
name|command
init|=
operator|new
name|FSOperations
operator|.
name|FSMkdirs
argument_list|(
name|path
operator|.
name|value
argument_list|()
argument_list|,
name|permission
operator|.
name|value
argument_list|()
argument_list|)
decl_stmt|;
name|JSONObject
name|json
init|=
name|fsExecute
argument_list|(
name|user
argument_list|,
name|doAs
operator|.
name|value
argument_list|()
argument_list|,
name|command
argument_list|)
decl_stmt|;
name|AUDIT_LOG
operator|.
name|info
argument_list|(
literal|"[{}] permission [{}]"
argument_list|,
name|path
argument_list|,
name|permission
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|=
name|Response
operator|.
name|ok
argument_list|(
name|json
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|RENAME
case|:
block|{
name|FSOperations
operator|.
name|FSRename
name|command
init|=
operator|new
name|FSOperations
operator|.
name|FSRename
argument_list|(
name|path
operator|.
name|value
argument_list|()
argument_list|,
name|toPath
operator|.
name|value
argument_list|()
argument_list|)
decl_stmt|;
name|JSONObject
name|json
init|=
name|fsExecute
argument_list|(
name|user
argument_list|,
name|doAs
operator|.
name|value
argument_list|()
argument_list|,
name|command
argument_list|)
decl_stmt|;
name|AUDIT_LOG
operator|.
name|info
argument_list|(
literal|"[{}] to [{}]"
argument_list|,
name|path
argument_list|,
name|toPath
argument_list|)
expr_stmt|;
name|response
operator|=
name|Response
operator|.
name|ok
argument_list|(
name|json
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|SETOWNER
case|:
block|{
name|FSOperations
operator|.
name|FSSetOwner
name|command
init|=
operator|new
name|FSOperations
operator|.
name|FSSetOwner
argument_list|(
name|path
operator|.
name|value
argument_list|()
argument_list|,
name|owner
operator|.
name|value
argument_list|()
argument_list|,
name|group
operator|.
name|value
argument_list|()
argument_list|)
decl_stmt|;
name|fsExecute
argument_list|(
name|user
argument_list|,
name|doAs
operator|.
name|value
argument_list|()
argument_list|,
name|command
argument_list|)
expr_stmt|;
name|AUDIT_LOG
operator|.
name|info
argument_list|(
literal|"[{}] to (O/G)[{}]"
argument_list|,
name|path
argument_list|,
name|owner
operator|.
name|value
argument_list|()
operator|+
literal|":"
operator|+
name|group
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|=
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|SETPERMISSION
case|:
block|{
name|FSOperations
operator|.
name|FSSetPermission
name|command
init|=
operator|new
name|FSOperations
operator|.
name|FSSetPermission
argument_list|(
name|path
operator|.
name|value
argument_list|()
argument_list|,
name|permission
operator|.
name|value
argument_list|()
argument_list|)
decl_stmt|;
name|fsExecute
argument_list|(
name|user
argument_list|,
name|doAs
operator|.
name|value
argument_list|()
argument_list|,
name|command
argument_list|)
expr_stmt|;
name|AUDIT_LOG
operator|.
name|info
argument_list|(
literal|"[{}] to [{}]"
argument_list|,
name|path
argument_list|,
name|permission
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|=
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|SETREPLICATION
case|:
block|{
name|FSOperations
operator|.
name|FSSetReplication
name|command
init|=
operator|new
name|FSOperations
operator|.
name|FSSetReplication
argument_list|(
name|path
operator|.
name|value
argument_list|()
argument_list|,
name|replication
operator|.
name|value
argument_list|()
argument_list|)
decl_stmt|;
name|JSONObject
name|json
init|=
name|fsExecute
argument_list|(
name|user
argument_list|,
name|doAs
operator|.
name|value
argument_list|()
argument_list|,
name|command
argument_list|)
decl_stmt|;
name|AUDIT_LOG
operator|.
name|info
argument_list|(
literal|"[{}] to [{}]"
argument_list|,
name|path
argument_list|,
name|replication
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|=
name|Response
operator|.
name|ok
argument_list|(
name|json
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|SETTIMES
case|:
block|{
name|FSOperations
operator|.
name|FSSetTimes
name|command
init|=
operator|new
name|FSOperations
operator|.
name|FSSetTimes
argument_list|(
name|path
operator|.
name|value
argument_list|()
argument_list|,
name|modifiedTime
operator|.
name|value
argument_list|()
argument_list|,
name|accessTime
operator|.
name|value
argument_list|()
argument_list|)
decl_stmt|;
name|fsExecute
argument_list|(
name|user
argument_list|,
name|doAs
operator|.
name|value
argument_list|()
argument_list|,
name|command
argument_list|)
expr_stmt|;
name|AUDIT_LOG
operator|.
name|info
argument_list|(
literal|"[{}] to (M/A)[{}]"
argument_list|,
name|path
argument_list|,
name|modifiedTime
operator|.
name|value
argument_list|()
operator|+
literal|":"
operator|+
name|accessTime
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|=
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|RENEWDELEGATIONTOKEN
case|:
block|{
name|response
operator|=
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|CANCELDELEGATIONTOKEN
case|:
block|{
name|response
operator|=
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
return|return
name|response
return|;
block|}
comment|/**    * Binding to handle all OPST requests, supported operations are    * @link org.apache.hadoop.fs.http.client.HttpFSFileSystem.PostOpValues}.    *    * @param is request input stream, used only for    * @link org.apache.hadoop.fs.http.client.HttpFSFileSystem.PostOpValues#APPEND} operations.    * @param user principal making the request.    * @param uriInfo the request uriInfo.    * @param path path for the POST request.    * @param op POST operation, default is @link org.apache.hadoop.fs.http.client.HttpFSFileSystem.PostOpValues#APPEND}.    * @param hasData indicates if the append request is uploading data or not (just getting the handle).    * @param doAs user being impersonated, defualt value is none. It can be used    * only if the current user is a HttpFSServer proxyuser.    *    * @return the request response.    *    * @throws IOException thrown if an IO error occurred. Thrown exceptions are    * handled by {@link HttpFSExceptionProvider}.    * @throws FileSystemAccessException thrown if a FileSystemAccess releated error occurred. Thrown    * exceptions are handled by {@link HttpFSExceptionProvider}.    */
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
literal|"{path:.*}"
argument_list|)
annotation|@
name|Consumes
argument_list|(
block|{
literal|"*/*"
block|}
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
DECL|method|post (InputStream is, @Context Principal user, @Context UriInfo uriInfo, @PathParam(R) FsPathParam path, @QueryParam(PostOpParam.NAME) PostOpParam op, @QueryParam(DataParam.NAME) @DefaultValue(DataParam.DEFAULT) DataParam hasData, @QueryParam(DoAsParam.NAME) @DefaultValue(DoAsParam.DEFAULT) DoAsParam doAs)
specifier|public
name|Response
name|post
parameter_list|(
name|InputStream
name|is
parameter_list|,
annotation|@
name|Context
name|Principal
name|user
parameter_list|,
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"path"
argument_list|)
name|FsPathParam
name|path
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|PostOpParam
operator|.
name|NAME
argument_list|)
name|PostOpParam
name|op
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|DataParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|DataParam
operator|.
name|DEFAULT
argument_list|)
name|DataParam
name|hasData
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|DoAsParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|DoAsParam
operator|.
name|DEFAULT
argument_list|)
name|DoAsParam
name|doAs
parameter_list|)
throws|throws
name|IOException
throws|,
name|FileSystemAccessException
block|{
name|Response
name|response
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|op
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"Missing [{0}] parameter"
argument_list|,
name|PostOpParam
operator|.
name|NAME
argument_list|)
argument_list|)
throw|;
block|}
name|path
operator|.
name|makeAbsolute
argument_list|()
expr_stmt|;
name|MDC
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|OP_PARAM
argument_list|,
name|op
operator|.
name|value
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|op
operator|.
name|value
argument_list|()
condition|)
block|{
case|case
name|APPEND
case|:
block|{
if|if
condition|(
operator|!
name|hasData
operator|.
name|value
argument_list|()
condition|)
block|{
name|response
operator|=
name|Response
operator|.
name|temporaryRedirect
argument_list|(
name|createUploadRedirectionURL
argument_list|(
name|uriInfo
argument_list|,
name|HttpFSFileSystem
operator|.
name|PostOpValues
operator|.
name|APPEND
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|FSOperations
operator|.
name|FSAppend
name|command
init|=
operator|new
name|FSOperations
operator|.
name|FSAppend
argument_list|(
name|is
argument_list|,
name|path
operator|.
name|value
argument_list|()
argument_list|)
decl_stmt|;
name|fsExecute
argument_list|(
name|user
argument_list|,
name|doAs
operator|.
name|value
argument_list|()
argument_list|,
name|command
argument_list|)
expr_stmt|;
name|AUDIT_LOG
operator|.
name|info
argument_list|(
literal|"[{}]"
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|response
operator|=
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
block|}
return|return
name|response
return|;
block|}
block|}
end_class

end_unit

