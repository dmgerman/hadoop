begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.http.server
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|http
operator|.
name|server
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|XAttrCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|XAttrSetFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|http
operator|.
name|client
operator|.
name|HttpFSFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|http
operator|.
name|client
operator|.
name|HttpFSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|http
operator|.
name|server
operator|.
name|HttpFSParametersProvider
operator|.
name|AccessTimeParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|http
operator|.
name|server
operator|.
name|HttpFSParametersProvider
operator|.
name|AclPermissionParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|http
operator|.
name|server
operator|.
name|HttpFSParametersProvider
operator|.
name|BlockSizeParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|http
operator|.
name|server
operator|.
name|HttpFSParametersProvider
operator|.
name|DataParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|http
operator|.
name|server
operator|.
name|HttpFSParametersProvider
operator|.
name|DestinationParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|http
operator|.
name|server
operator|.
name|HttpFSParametersProvider
operator|.
name|FilterParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|http
operator|.
name|server
operator|.
name|HttpFSParametersProvider
operator|.
name|GroupParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|http
operator|.
name|server
operator|.
name|HttpFSParametersProvider
operator|.
name|LenParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|http
operator|.
name|server
operator|.
name|HttpFSParametersProvider
operator|.
name|ModifiedTimeParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|http
operator|.
name|server
operator|.
name|HttpFSParametersProvider
operator|.
name|NewLengthParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|http
operator|.
name|server
operator|.
name|HttpFSParametersProvider
operator|.
name|OffsetParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|http
operator|.
name|server
operator|.
name|HttpFSParametersProvider
operator|.
name|OldSnapshotNameParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|http
operator|.
name|server
operator|.
name|HttpFSParametersProvider
operator|.
name|OperationParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|http
operator|.
name|server
operator|.
name|HttpFSParametersProvider
operator|.
name|OverwriteParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|http
operator|.
name|server
operator|.
name|HttpFSParametersProvider
operator|.
name|OwnerParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|http
operator|.
name|server
operator|.
name|HttpFSParametersProvider
operator|.
name|PermissionParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|http
operator|.
name|server
operator|.
name|HttpFSParametersProvider
operator|.
name|PolicyNameParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|http
operator|.
name|server
operator|.
name|HttpFSParametersProvider
operator|.
name|RecursiveParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|http
operator|.
name|server
operator|.
name|HttpFSParametersProvider
operator|.
name|ReplicationParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|http
operator|.
name|server
operator|.
name|HttpFSParametersProvider
operator|.
name|SourcesParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|http
operator|.
name|server
operator|.
name|HttpFSParametersProvider
operator|.
name|UnmaskedPermissionParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|http
operator|.
name|server
operator|.
name|HttpFSParametersProvider
operator|.
name|SnapshotNameParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|http
operator|.
name|server
operator|.
name|HttpFSParametersProvider
operator|.
name|XAttrEncodingParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|http
operator|.
name|server
operator|.
name|HttpFSParametersProvider
operator|.
name|XAttrNameParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|http
operator|.
name|server
operator|.
name|HttpFSParametersProvider
operator|.
name|XAttrSetFlagParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|http
operator|.
name|server
operator|.
name|HttpFSParametersProvider
operator|.
name|XAttrValueParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|http
operator|.
name|JettyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|lib
operator|.
name|service
operator|.
name|FileSystemAccess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|lib
operator|.
name|service
operator|.
name|FileSystemAccessException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|lib
operator|.
name|service
operator|.
name|Groups
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|lib
operator|.
name|service
operator|.
name|Instrumentation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|lib
operator|.
name|servlet
operator|.
name|FileSystemReleaseFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|lib
operator|.
name|wsrs
operator|.
name|InputStreamEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|lib
operator|.
name|wsrs
operator|.
name|Parameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|web
operator|.
name|HttpUserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|simple
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|MDC
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Consumes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|DELETE
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|POST
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PUT
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PathParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|QueryParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriInfo
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|MessageFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Main class of HttpFSServer server.  *<p>  * The<code>HttpFSServer</code> class uses Jersey JAX-RS to binds HTTP requests to the  * different operations.  */
end_comment

begin_class
annotation|@
name|Path
argument_list|(
name|HttpFSFileSystem
operator|.
name|SERVICE_VERSION
argument_list|)
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|HttpFSServer
specifier|public
class|class
name|HttpFSServer
block|{
DECL|field|AUDIT_LOG
specifier|private
specifier|static
name|Logger
name|AUDIT_LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
literal|"httpfsaudit"
argument_list|)
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HttpFSServer
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Executes a {@link FileSystemAccess.FileSystemExecutor} using a filesystem for the effective    * user.    *    * @param ugi user making the request.    * @param executor FileSystemExecutor to execute.    *    * @return FileSystemExecutor response    *    * @throws IOException thrown if an IO error occurs.    * @throws FileSystemAccessException thrown if a FileSystemAccess releated error occurred. Thrown    * exceptions are handled by {@link HttpFSExceptionProvider}.    */
DECL|method|fsExecute (UserGroupInformation ugi, FileSystemAccess.FileSystemExecutor<T> executor)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|T
name|fsExecute
parameter_list|(
name|UserGroupInformation
name|ugi
parameter_list|,
name|FileSystemAccess
operator|.
name|FileSystemExecutor
argument_list|<
name|T
argument_list|>
name|executor
parameter_list|)
throws|throws
name|IOException
throws|,
name|FileSystemAccessException
block|{
name|FileSystemAccess
name|fsAccess
init|=
name|HttpFSServerWebApp
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
name|FileSystemAccess
operator|.
name|class
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
name|HttpFSServerWebApp
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
name|FileSystemAccess
operator|.
name|class
argument_list|)
operator|.
name|getFileSystemConfiguration
argument_list|()
decl_stmt|;
return|return
name|fsAccess
operator|.
name|execute
argument_list|(
name|ugi
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|conf
argument_list|,
name|executor
argument_list|)
return|;
block|}
comment|/**    * Returns a filesystem instance. The fileystem instance is wired for release at the completion of    * the current Servlet request via the {@link FileSystemReleaseFilter}.    *<p>    * If a do-as user is specified, the current user must be a valid proxyuser, otherwise an    *<code>AccessControlException</code> will be thrown.    *    * @param ugi principal for whom the filesystem instance is.    *    * @return a filesystem for the specified user or do-as user.    *    * @throws IOException thrown if an IO error occurred. Thrown exceptions are    * handled by {@link HttpFSExceptionProvider}.    * @throws FileSystemAccessException thrown if a FileSystemAccess releated error occurred. Thrown    * exceptions are handled by {@link HttpFSExceptionProvider}.    */
DECL|method|createFileSystem (UserGroupInformation ugi)
specifier|private
name|FileSystem
name|createFileSystem
parameter_list|(
name|UserGroupInformation
name|ugi
parameter_list|)
throws|throws
name|IOException
throws|,
name|FileSystemAccessException
block|{
name|String
name|hadoopUser
init|=
name|ugi
operator|.
name|getShortUserName
argument_list|()
decl_stmt|;
name|FileSystemAccess
name|fsAccess
init|=
name|HttpFSServerWebApp
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
name|FileSystemAccess
operator|.
name|class
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
name|HttpFSServerWebApp
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
name|FileSystemAccess
operator|.
name|class
argument_list|)
operator|.
name|getFileSystemConfiguration
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|fsAccess
operator|.
name|createFileSystem
argument_list|(
name|hadoopUser
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|FileSystemReleaseFilter
operator|.
name|setFileSystem
argument_list|(
name|fs
argument_list|)
expr_stmt|;
return|return
name|fs
return|;
block|}
DECL|method|enforceRootPath (HttpFSFileSystem.Operation op, String path)
specifier|private
name|void
name|enforceRootPath
parameter_list|(
name|HttpFSFileSystem
operator|.
name|Operation
name|op
parameter_list|,
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
operator|!
name|path
operator|.
name|equals
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"Operation [{0}], invalid path [{1}], must be '/'"
argument_list|,
name|op
argument_list|,
name|path
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|/**    * Special binding for '/' as it is not handled by the wildcard binding.    *    * @param op the HttpFS operation of the request.    * @param params the HttpFS parameters of the request.    *    * @return the request response.    *    * @throws IOException thrown if an IO error occurred. Thrown exceptions are    * handled by {@link HttpFSExceptionProvider}.    * @throws FileSystemAccessException thrown if a FileSystemAccess releated    * error occurred. Thrown exceptions are handled by    * {@link HttpFSExceptionProvider}.    */
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|)
DECL|method|getRoot (@ueryParamOperationParam.NAME) OperationParam op, @Context Parameters params, @Context HttpServletRequest request)
specifier|public
name|Response
name|getRoot
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
name|OperationParam
operator|.
name|NAME
argument_list|)
name|OperationParam
name|op
parameter_list|,
annotation|@
name|Context
name|Parameters
name|params
parameter_list|,
annotation|@
name|Context
name|HttpServletRequest
name|request
parameter_list|)
throws|throws
name|IOException
throws|,
name|FileSystemAccessException
block|{
return|return
name|get
argument_list|(
literal|""
argument_list|,
name|op
argument_list|,
name|params
argument_list|,
name|request
argument_list|)
return|;
block|}
DECL|method|makeAbsolute (String path)
specifier|private
name|String
name|makeAbsolute
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
literal|"/"
operator|+
operator|(
operator|(
name|path
operator|!=
literal|null
operator|)
condition|?
name|path
else|:
literal|""
operator|)
return|;
block|}
comment|/**    * Binding to handle GET requests, supported operations are    *    * @param path the path for operation.    * @param op the HttpFS operation of the request.    * @param params the HttpFS parameters of the request.    *    * @return the request response.    *    * @throws IOException thrown if an IO error occurred. Thrown exceptions are    * handled by {@link HttpFSExceptionProvider}.    * @throws FileSystemAccessException thrown if a FileSystemAccess releated    * error occurred. Thrown exceptions are handled by    * {@link HttpFSExceptionProvider}.    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"{path:.*}"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_OCTET_STREAM
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
DECL|method|get (@athParamR) String path, @QueryParam(OperationParam.NAME) OperationParam op, @Context Parameters params, @Context HttpServletRequest request)
specifier|public
name|Response
name|get
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"path"
argument_list|)
name|String
name|path
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|OperationParam
operator|.
name|NAME
argument_list|)
name|OperationParam
name|op
parameter_list|,
annotation|@
name|Context
name|Parameters
name|params
parameter_list|,
annotation|@
name|Context
name|HttpServletRequest
name|request
parameter_list|)
throws|throws
name|IOException
throws|,
name|FileSystemAccessException
block|{
name|UserGroupInformation
name|user
init|=
name|HttpUserGroupInformation
operator|.
name|get
argument_list|()
decl_stmt|;
name|Response
name|response
decl_stmt|;
name|path
operator|=
name|makeAbsolute
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|MDC
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|OP_PARAM
argument_list|,
name|op
operator|.
name|value
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|MDC
operator|.
name|put
argument_list|(
literal|"hostname"
argument_list|,
name|request
operator|.
name|getRemoteAddr
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|op
operator|.
name|value
argument_list|()
condition|)
block|{
case|case
name|OPEN
case|:
block|{
comment|//Invoking the command directly using an unmanaged FileSystem that is
comment|// released by the FileSystemReleaseFilter
specifier|final
name|FSOperations
operator|.
name|FSOpen
name|command
init|=
operator|new
name|FSOperations
operator|.
name|FSOpen
argument_list|(
name|path
argument_list|)
decl_stmt|;
specifier|final
name|FileSystem
name|fs
init|=
name|createFileSystem
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createProxyUser
argument_list|(
name|user
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|is
operator|=
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|InputStream
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|InputStream
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|command
operator|.
name|execute
argument_list|(
name|fs
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Open interrupted."
argument_list|,
name|ie
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
name|Long
name|offset
init|=
name|params
operator|.
name|get
argument_list|(
name|OffsetParam
operator|.
name|NAME
argument_list|,
name|OffsetParam
operator|.
name|class
argument_list|)
decl_stmt|;
name|Long
name|len
init|=
name|params
operator|.
name|get
argument_list|(
name|LenParam
operator|.
name|NAME
argument_list|,
name|LenParam
operator|.
name|class
argument_list|)
decl_stmt|;
name|AUDIT_LOG
operator|.
name|info
argument_list|(
literal|"[{}] offset [{}] len [{}]"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|path
block|,
name|offset
block|,
name|len
block|}
argument_list|)
expr_stmt|;
name|InputStreamEntity
name|entity
init|=
operator|new
name|InputStreamEntity
argument_list|(
name|is
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
decl_stmt|;
name|response
operator|=
name|Response
operator|.
name|ok
argument_list|(
name|entity
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_OCTET_STREAM
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|GETFILESTATUS
case|:
block|{
name|FSOperations
operator|.
name|FSFileStatus
name|command
init|=
operator|new
name|FSOperations
operator|.
name|FSFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|Map
name|json
init|=
name|fsExecute
argument_list|(
name|user
argument_list|,
name|command
argument_list|)
decl_stmt|;
name|AUDIT_LOG
operator|.
name|info
argument_list|(
literal|"[{}]"
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|response
operator|=
name|Response
operator|.
name|ok
argument_list|(
name|json
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|LISTSTATUS
case|:
block|{
name|String
name|filter
init|=
name|params
operator|.
name|get
argument_list|(
name|FilterParam
operator|.
name|NAME
argument_list|,
name|FilterParam
operator|.
name|class
argument_list|)
decl_stmt|;
name|FSOperations
operator|.
name|FSListStatus
name|command
init|=
operator|new
name|FSOperations
operator|.
name|FSListStatus
argument_list|(
name|path
argument_list|,
name|filter
argument_list|)
decl_stmt|;
name|Map
name|json
init|=
name|fsExecute
argument_list|(
name|user
argument_list|,
name|command
argument_list|)
decl_stmt|;
name|AUDIT_LOG
operator|.
name|info
argument_list|(
literal|"[{}] filter [{}]"
argument_list|,
name|path
argument_list|,
operator|(
name|filter
operator|!=
literal|null
operator|)
condition|?
name|filter
else|:
literal|"-"
argument_list|)
expr_stmt|;
name|response
operator|=
name|Response
operator|.
name|ok
argument_list|(
name|json
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|GETHOMEDIRECTORY
case|:
block|{
name|enforceRootPath
argument_list|(
name|op
operator|.
name|value
argument_list|()
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|FSOperations
operator|.
name|FSHomeDir
name|command
init|=
operator|new
name|FSOperations
operator|.
name|FSHomeDir
argument_list|()
decl_stmt|;
name|JSONObject
name|json
init|=
name|fsExecute
argument_list|(
name|user
argument_list|,
name|command
argument_list|)
decl_stmt|;
name|AUDIT_LOG
operator|.
name|info
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|response
operator|=
name|Response
operator|.
name|ok
argument_list|(
name|json
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|INSTRUMENTATION
case|:
block|{
name|enforceRootPath
argument_list|(
name|op
operator|.
name|value
argument_list|()
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|Groups
name|groups
init|=
name|HttpFSServerWebApp
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
name|Groups
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|userGroups
init|=
name|groups
operator|.
name|getGroups
argument_list|(
name|user
operator|.
name|getShortUserName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|userGroups
operator|.
name|contains
argument_list|(
name|HttpFSServerWebApp
operator|.
name|get
argument_list|()
operator|.
name|getAdminGroup
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"User not in HttpFSServer admin group"
argument_list|)
throw|;
block|}
name|Instrumentation
name|instrumentation
init|=
name|HttpFSServerWebApp
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
name|Instrumentation
operator|.
name|class
argument_list|)
decl_stmt|;
name|Map
name|snapshot
init|=
name|instrumentation
operator|.
name|getSnapshot
argument_list|()
decl_stmt|;
name|response
operator|=
name|Response
operator|.
name|ok
argument_list|(
name|snapshot
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|GETCONTENTSUMMARY
case|:
block|{
name|FSOperations
operator|.
name|FSContentSummary
name|command
init|=
operator|new
name|FSOperations
operator|.
name|FSContentSummary
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|Map
name|json
init|=
name|fsExecute
argument_list|(
name|user
argument_list|,
name|command
argument_list|)
decl_stmt|;
name|AUDIT_LOG
operator|.
name|info
argument_list|(
literal|"[{}]"
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|response
operator|=
name|Response
operator|.
name|ok
argument_list|(
name|json
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|GETFILECHECKSUM
case|:
block|{
name|FSOperations
operator|.
name|FSFileChecksum
name|command
init|=
operator|new
name|FSOperations
operator|.
name|FSFileChecksum
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|Map
name|json
init|=
name|fsExecute
argument_list|(
name|user
argument_list|,
name|command
argument_list|)
decl_stmt|;
name|AUDIT_LOG
operator|.
name|info
argument_list|(
literal|"[{}]"
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|response
operator|=
name|Response
operator|.
name|ok
argument_list|(
name|json
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|GETFILEBLOCKLOCATIONS
case|:
block|{
name|response
operator|=
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|GETACLSTATUS
case|:
block|{
name|FSOperations
operator|.
name|FSAclStatus
name|command
init|=
operator|new
name|FSOperations
operator|.
name|FSAclStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|Map
name|json
init|=
name|fsExecute
argument_list|(
name|user
argument_list|,
name|command
argument_list|)
decl_stmt|;
name|AUDIT_LOG
operator|.
name|info
argument_list|(
literal|"ACL status for [{}]"
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|response
operator|=
name|Response
operator|.
name|ok
argument_list|(
name|json
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|GETXATTRS
case|:
block|{
name|List
argument_list|<
name|String
argument_list|>
name|xattrNames
init|=
name|params
operator|.
name|getValues
argument_list|(
name|XAttrNameParam
operator|.
name|NAME
argument_list|,
name|XAttrNameParam
operator|.
name|class
argument_list|)
decl_stmt|;
name|XAttrCodec
name|encoding
init|=
name|params
operator|.
name|get
argument_list|(
name|XAttrEncodingParam
operator|.
name|NAME
argument_list|,
name|XAttrEncodingParam
operator|.
name|class
argument_list|)
decl_stmt|;
name|FSOperations
operator|.
name|FSGetXAttrs
name|command
init|=
operator|new
name|FSOperations
operator|.
name|FSGetXAttrs
argument_list|(
name|path
argument_list|,
name|xattrNames
argument_list|,
name|encoding
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|Map
name|json
init|=
name|fsExecute
argument_list|(
name|user
argument_list|,
name|command
argument_list|)
decl_stmt|;
name|AUDIT_LOG
operator|.
name|info
argument_list|(
literal|"XAttrs for [{}]"
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|response
operator|=
name|Response
operator|.
name|ok
argument_list|(
name|json
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|LISTXATTRS
case|:
block|{
name|FSOperations
operator|.
name|FSListXAttrs
name|command
init|=
operator|new
name|FSOperations
operator|.
name|FSListXAttrs
argument_list|(
name|path
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|Map
name|json
init|=
name|fsExecute
argument_list|(
name|user
argument_list|,
name|command
argument_list|)
decl_stmt|;
name|AUDIT_LOG
operator|.
name|info
argument_list|(
literal|"XAttr names for [{}]"
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|response
operator|=
name|Response
operator|.
name|ok
argument_list|(
name|json
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|LISTSTATUS_BATCH
case|:
block|{
name|String
name|startAfter
init|=
name|params
operator|.
name|get
argument_list|(
name|HttpFSParametersProvider
operator|.
name|StartAfterParam
operator|.
name|NAME
argument_list|,
name|HttpFSParametersProvider
operator|.
name|StartAfterParam
operator|.
name|class
argument_list|)
decl_stmt|;
name|byte
index|[]
name|token
init|=
name|HttpFSUtils
operator|.
name|EMPTY_BYTES
decl_stmt|;
if|if
condition|(
name|startAfter
operator|!=
literal|null
condition|)
block|{
name|token
operator|=
name|startAfter
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
block|}
name|FSOperations
operator|.
name|FSListStatusBatch
name|command
init|=
operator|new
name|FSOperations
operator|.
name|FSListStatusBatch
argument_list|(
name|path
argument_list|,
name|token
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|Map
name|json
init|=
name|fsExecute
argument_list|(
name|user
argument_list|,
name|command
argument_list|)
decl_stmt|;
name|AUDIT_LOG
operator|.
name|info
argument_list|(
literal|"[{}] token [{}]"
argument_list|,
name|path
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|response
operator|=
name|Response
operator|.
name|ok
argument_list|(
name|json
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|GETTRASHROOT
case|:
block|{
name|FSOperations
operator|.
name|FSTrashRoot
name|command
init|=
operator|new
name|FSOperations
operator|.
name|FSTrashRoot
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|JSONObject
name|json
init|=
name|fsExecute
argument_list|(
name|user
argument_list|,
name|command
argument_list|)
decl_stmt|;
name|AUDIT_LOG
operator|.
name|info
argument_list|(
literal|"[{}]"
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|response
operator|=
name|Response
operator|.
name|ok
argument_list|(
name|json
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|GETALLSTORAGEPOLICY
case|:
block|{
name|FSOperations
operator|.
name|FSGetAllStoragePolicies
name|command
init|=
operator|new
name|FSOperations
operator|.
name|FSGetAllStoragePolicies
argument_list|()
decl_stmt|;
name|JSONObject
name|json
init|=
name|fsExecute
argument_list|(
name|user
argument_list|,
name|command
argument_list|)
decl_stmt|;
name|AUDIT_LOG
operator|.
name|info
argument_list|(
literal|"[{}]"
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|response
operator|=
name|Response
operator|.
name|ok
argument_list|(
name|json
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|GETSTORAGEPOLICY
case|:
block|{
name|FSOperations
operator|.
name|FSGetStoragePolicy
name|command
init|=
operator|new
name|FSOperations
operator|.
name|FSGetStoragePolicy
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|JSONObject
name|json
init|=
name|fsExecute
argument_list|(
name|user
argument_list|,
name|command
argument_list|)
decl_stmt|;
name|AUDIT_LOG
operator|.
name|info
argument_list|(
literal|"[{}]"
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|response
operator|=
name|Response
operator|.
name|ok
argument_list|(
name|json
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|GETSNAPSHOTDIFF
case|:
block|{
name|String
name|oldSnapshotName
init|=
name|params
operator|.
name|get
argument_list|(
name|OldSnapshotNameParam
operator|.
name|NAME
argument_list|,
name|OldSnapshotNameParam
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|snapshotName
init|=
name|params
operator|.
name|get
argument_list|(
name|SnapshotNameParam
operator|.
name|NAME
argument_list|,
name|SnapshotNameParam
operator|.
name|class
argument_list|)
decl_stmt|;
name|FSOperations
operator|.
name|FSGetSnapshotDiff
name|command
init|=
operator|new
name|FSOperations
operator|.
name|FSGetSnapshotDiff
argument_list|(
name|path
argument_list|,
name|oldSnapshotName
argument_list|,
name|snapshotName
argument_list|)
decl_stmt|;
name|String
name|js
init|=
name|fsExecute
argument_list|(
name|user
argument_list|,
name|command
argument_list|)
decl_stmt|;
name|AUDIT_LOG
operator|.
name|info
argument_list|(
literal|"[{}]"
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|response
operator|=
name|Response
operator|.
name|ok
argument_list|(
name|js
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|GETSNAPSHOTTABLEDIRECTORYLIST
case|:
block|{
name|FSOperations
operator|.
name|FSGetSnapshottableDirListing
name|command
init|=
operator|new
name|FSOperations
operator|.
name|FSGetSnapshottableDirListing
argument_list|()
decl_stmt|;
name|String
name|js
init|=
name|fsExecute
argument_list|(
name|user
argument_list|,
name|command
argument_list|)
decl_stmt|;
name|AUDIT_LOG
operator|.
name|info
argument_list|(
literal|"[{}]"
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
name|response
operator|=
name|Response
operator|.
name|ok
argument_list|(
name|js
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"Invalid HTTP GET operation [{0}]"
argument_list|,
name|op
operator|.
name|value
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
return|return
name|response
return|;
block|}
comment|/**    * Binding to handle DELETE requests.    *    * @param path the path for operation.    * @param op the HttpFS operation of the request.    * @param params the HttpFS parameters of the request.    *    * @return the request response.    *    * @throws IOException thrown if an IO error occurred. Thrown exceptions are    * handled by {@link HttpFSExceptionProvider}.    * @throws FileSystemAccessException thrown if a FileSystemAccess releated    * error occurred. Thrown exceptions are handled by    * {@link HttpFSExceptionProvider}.    */
annotation|@
name|DELETE
annotation|@
name|Path
argument_list|(
literal|"{path:.*}"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|)
DECL|method|delete (@athParamR) String path, @QueryParam(OperationParam.NAME) OperationParam op, @Context Parameters params, @Context HttpServletRequest request)
specifier|public
name|Response
name|delete
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"path"
argument_list|)
name|String
name|path
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|OperationParam
operator|.
name|NAME
argument_list|)
name|OperationParam
name|op
parameter_list|,
annotation|@
name|Context
name|Parameters
name|params
parameter_list|,
annotation|@
name|Context
name|HttpServletRequest
name|request
parameter_list|)
throws|throws
name|IOException
throws|,
name|FileSystemAccessException
block|{
name|UserGroupInformation
name|user
init|=
name|HttpUserGroupInformation
operator|.
name|get
argument_list|()
decl_stmt|;
name|Response
name|response
decl_stmt|;
name|path
operator|=
name|makeAbsolute
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|MDC
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|OP_PARAM
argument_list|,
name|op
operator|.
name|value
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|MDC
operator|.
name|put
argument_list|(
literal|"hostname"
argument_list|,
name|request
operator|.
name|getRemoteAddr
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|op
operator|.
name|value
argument_list|()
condition|)
block|{
case|case
name|DELETE
case|:
block|{
name|Boolean
name|recursive
init|=
name|params
operator|.
name|get
argument_list|(
name|RecursiveParam
operator|.
name|NAME
argument_list|,
name|RecursiveParam
operator|.
name|class
argument_list|)
decl_stmt|;
name|AUDIT_LOG
operator|.
name|info
argument_list|(
literal|"[{}] recursive [{}]"
argument_list|,
name|path
argument_list|,
name|recursive
argument_list|)
expr_stmt|;
name|FSOperations
operator|.
name|FSDelete
name|command
init|=
operator|new
name|FSOperations
operator|.
name|FSDelete
argument_list|(
name|path
argument_list|,
name|recursive
argument_list|)
decl_stmt|;
name|JSONObject
name|json
init|=
name|fsExecute
argument_list|(
name|user
argument_list|,
name|command
argument_list|)
decl_stmt|;
name|response
operator|=
name|Response
operator|.
name|ok
argument_list|(
name|json
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|DELETESNAPSHOT
case|:
block|{
name|String
name|snapshotName
init|=
name|params
operator|.
name|get
argument_list|(
name|SnapshotNameParam
operator|.
name|NAME
argument_list|,
name|SnapshotNameParam
operator|.
name|class
argument_list|)
decl_stmt|;
name|FSOperations
operator|.
name|FSDeleteSnapshot
name|command
init|=
operator|new
name|FSOperations
operator|.
name|FSDeleteSnapshot
argument_list|(
name|path
argument_list|,
name|snapshotName
argument_list|)
decl_stmt|;
name|fsExecute
argument_list|(
name|user
argument_list|,
name|command
argument_list|)
expr_stmt|;
name|AUDIT_LOG
operator|.
name|info
argument_list|(
literal|"[{}] deleted snapshot [{}]"
argument_list|,
name|path
argument_list|,
name|snapshotName
argument_list|)
expr_stmt|;
name|response
operator|=
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"Invalid HTTP DELETE operation [{0}]"
argument_list|,
name|op
operator|.
name|value
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
return|return
name|response
return|;
block|}
comment|/**    * Binding to handle POST requests.    *    * @param is the inputstream for the request payload.    * @param uriInfo the of the request.    * @param path the path for operation.    * @param op the HttpFS operation of the request.    * @param params the HttpFS parameters of the request.    *    * @return the request response.    *    * @throws IOException thrown if an IO error occurred. Thrown exceptions are    * handled by {@link HttpFSExceptionProvider}.    * @throws FileSystemAccessException thrown if a FileSystemAccess releated    * error occurred. Thrown exceptions are handled by    * {@link HttpFSExceptionProvider}.    */
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
literal|"{path:.*}"
argument_list|)
annotation|@
name|Consumes
argument_list|(
block|{
literal|"*/*"
block|}
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
DECL|method|post (InputStream is, @Context UriInfo uriInfo, @PathParam(R) String path, @QueryParam(OperationParam.NAME) OperationParam op, @Context Parameters params, @Context HttpServletRequest request)
specifier|public
name|Response
name|post
parameter_list|(
name|InputStream
name|is
parameter_list|,
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"path"
argument_list|)
name|String
name|path
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|OperationParam
operator|.
name|NAME
argument_list|)
name|OperationParam
name|op
parameter_list|,
annotation|@
name|Context
name|Parameters
name|params
parameter_list|,
annotation|@
name|Context
name|HttpServletRequest
name|request
parameter_list|)
throws|throws
name|IOException
throws|,
name|FileSystemAccessException
block|{
name|UserGroupInformation
name|user
init|=
name|HttpUserGroupInformation
operator|.
name|get
argument_list|()
decl_stmt|;
name|Response
name|response
decl_stmt|;
name|path
operator|=
name|makeAbsolute
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|MDC
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|OP_PARAM
argument_list|,
name|op
operator|.
name|value
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|MDC
operator|.
name|put
argument_list|(
literal|"hostname"
argument_list|,
name|request
operator|.
name|getRemoteAddr
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|op
operator|.
name|value
argument_list|()
condition|)
block|{
case|case
name|APPEND
case|:
block|{
name|Boolean
name|hasData
init|=
name|params
operator|.
name|get
argument_list|(
name|DataParam
operator|.
name|NAME
argument_list|,
name|DataParam
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|hasData
condition|)
block|{
name|response
operator|=
name|Response
operator|.
name|temporaryRedirect
argument_list|(
name|createUploadRedirectionURL
argument_list|(
name|uriInfo
argument_list|,
name|HttpFSFileSystem
operator|.
name|Operation
operator|.
name|APPEND
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|FSOperations
operator|.
name|FSAppend
name|command
init|=
operator|new
name|FSOperations
operator|.
name|FSAppend
argument_list|(
name|is
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|fsExecute
argument_list|(
name|user
argument_list|,
name|command
argument_list|)
expr_stmt|;
name|AUDIT_LOG
operator|.
name|info
argument_list|(
literal|"[{}]"
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|response
operator|=
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
case|case
name|CONCAT
case|:
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"HTTPFS SERVER CONCAT"
argument_list|)
expr_stmt|;
name|String
name|sources
init|=
name|params
operator|.
name|get
argument_list|(
name|SourcesParam
operator|.
name|NAME
argument_list|,
name|SourcesParam
operator|.
name|class
argument_list|)
decl_stmt|;
name|FSOperations
operator|.
name|FSConcat
name|command
init|=
operator|new
name|FSOperations
operator|.
name|FSConcat
argument_list|(
name|path
argument_list|,
name|sources
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
decl_stmt|;
name|fsExecute
argument_list|(
name|user
argument_list|,
name|command
argument_list|)
expr_stmt|;
name|AUDIT_LOG
operator|.
name|info
argument_list|(
literal|"[{}]"
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"SENT RESPONSE"
argument_list|)
expr_stmt|;
name|response
operator|=
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|TRUNCATE
case|:
block|{
name|Long
name|newLength
init|=
name|params
operator|.
name|get
argument_list|(
name|NewLengthParam
operator|.
name|NAME
argument_list|,
name|NewLengthParam
operator|.
name|class
argument_list|)
decl_stmt|;
name|FSOperations
operator|.
name|FSTruncate
name|command
init|=
operator|new
name|FSOperations
operator|.
name|FSTruncate
argument_list|(
name|path
argument_list|,
name|newLength
argument_list|)
decl_stmt|;
name|JSONObject
name|json
init|=
name|fsExecute
argument_list|(
name|user
argument_list|,
name|command
argument_list|)
decl_stmt|;
name|AUDIT_LOG
operator|.
name|info
argument_list|(
literal|"Truncate [{}] to length [{}]"
argument_list|,
name|path
argument_list|,
name|newLength
argument_list|)
expr_stmt|;
name|response
operator|=
name|Response
operator|.
name|ok
argument_list|(
name|json
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|UNSETSTORAGEPOLICY
case|:
block|{
name|FSOperations
operator|.
name|FSUnsetStoragePolicy
name|command
init|=
operator|new
name|FSOperations
operator|.
name|FSUnsetStoragePolicy
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|fsExecute
argument_list|(
name|user
argument_list|,
name|command
argument_list|)
expr_stmt|;
name|AUDIT_LOG
operator|.
name|info
argument_list|(
literal|"Unset storage policy [{}]"
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|response
operator|=
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"Invalid HTTP POST operation [{0}]"
argument_list|,
name|op
operator|.
name|value
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
return|return
name|response
return|;
block|}
comment|/**    * Creates the URL for an upload operation (create or append).    *    * @param uriInfo uri info of the request.    * @param uploadOperation operation for the upload URL.    *    * @return the URI for uploading data.    */
DECL|method|createUploadRedirectionURL (UriInfo uriInfo, Enum<?> uploadOperation)
specifier|protected
name|URI
name|createUploadRedirectionURL
parameter_list|(
name|UriInfo
name|uriInfo
parameter_list|,
name|Enum
argument_list|<
name|?
argument_list|>
name|uploadOperation
parameter_list|)
block|{
name|UriBuilder
name|uriBuilder
init|=
name|uriInfo
operator|.
name|getRequestUriBuilder
argument_list|()
decl_stmt|;
name|uriBuilder
operator|=
name|uriBuilder
operator|.
name|replaceQueryParam
argument_list|(
name|OperationParam
operator|.
name|NAME
argument_list|,
name|uploadOperation
argument_list|)
operator|.
name|queryParam
argument_list|(
name|DataParam
operator|.
name|NAME
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
return|return
name|uriBuilder
operator|.
name|build
argument_list|(
literal|null
argument_list|)
return|;
block|}
comment|/**    * Binding to handle PUT requests.    *    * @param is the inputstream for the request payload.    * @param uriInfo the of the request.    * @param path the path for operation.    * @param op the HttpFS operation of the request.    * @param params the HttpFS parameters of the request.    *    * @return the request response.    *    * @throws IOException thrown if an IO error occurred. Thrown exceptions are    * handled by {@link HttpFSExceptionProvider}.    * @throws FileSystemAccessException thrown if a FileSystemAccess releated    * error occurred. Thrown exceptions are handled by    * {@link HttpFSExceptionProvider}.    */
annotation|@
name|PUT
annotation|@
name|Path
argument_list|(
literal|"{path:.*}"
argument_list|)
annotation|@
name|Consumes
argument_list|(
block|{
literal|"*/*"
block|}
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
DECL|method|put (InputStream is, @Context UriInfo uriInfo, @PathParam(R) String path, @QueryParam(OperationParam.NAME) OperationParam op, @Context Parameters params, @Context HttpServletRequest request)
specifier|public
name|Response
name|put
parameter_list|(
name|InputStream
name|is
parameter_list|,
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"path"
argument_list|)
name|String
name|path
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|OperationParam
operator|.
name|NAME
argument_list|)
name|OperationParam
name|op
parameter_list|,
annotation|@
name|Context
name|Parameters
name|params
parameter_list|,
annotation|@
name|Context
name|HttpServletRequest
name|request
parameter_list|)
throws|throws
name|IOException
throws|,
name|FileSystemAccessException
block|{
name|UserGroupInformation
name|user
init|=
name|HttpUserGroupInformation
operator|.
name|get
argument_list|()
decl_stmt|;
name|Response
name|response
decl_stmt|;
name|path
operator|=
name|makeAbsolute
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|MDC
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|OP_PARAM
argument_list|,
name|op
operator|.
name|value
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|MDC
operator|.
name|put
argument_list|(
literal|"hostname"
argument_list|,
name|request
operator|.
name|getRemoteAddr
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|op
operator|.
name|value
argument_list|()
condition|)
block|{
case|case
name|CREATE
case|:
block|{
name|Boolean
name|hasData
init|=
name|params
operator|.
name|get
argument_list|(
name|DataParam
operator|.
name|NAME
argument_list|,
name|DataParam
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|hasData
condition|)
block|{
name|response
operator|=
name|Response
operator|.
name|temporaryRedirect
argument_list|(
name|createUploadRedirectionURL
argument_list|(
name|uriInfo
argument_list|,
name|HttpFSFileSystem
operator|.
name|Operation
operator|.
name|CREATE
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Short
name|permission
init|=
name|params
operator|.
name|get
argument_list|(
name|PermissionParam
operator|.
name|NAME
argument_list|,
name|PermissionParam
operator|.
name|class
argument_list|)
decl_stmt|;
name|Short
name|unmaskedPermission
init|=
name|params
operator|.
name|get
argument_list|(
name|UnmaskedPermissionParam
operator|.
name|NAME
argument_list|,
name|UnmaskedPermissionParam
operator|.
name|class
argument_list|)
decl_stmt|;
name|Boolean
name|override
init|=
name|params
operator|.
name|get
argument_list|(
name|OverwriteParam
operator|.
name|NAME
argument_list|,
name|OverwriteParam
operator|.
name|class
argument_list|)
decl_stmt|;
name|Short
name|replication
init|=
name|params
operator|.
name|get
argument_list|(
name|ReplicationParam
operator|.
name|NAME
argument_list|,
name|ReplicationParam
operator|.
name|class
argument_list|)
decl_stmt|;
name|Long
name|blockSize
init|=
name|params
operator|.
name|get
argument_list|(
name|BlockSizeParam
operator|.
name|NAME
argument_list|,
name|BlockSizeParam
operator|.
name|class
argument_list|)
decl_stmt|;
name|FSOperations
operator|.
name|FSCreate
name|command
init|=
operator|new
name|FSOperations
operator|.
name|FSCreate
argument_list|(
name|is
argument_list|,
name|path
argument_list|,
name|permission
argument_list|,
name|override
argument_list|,
name|replication
argument_list|,
name|blockSize
argument_list|,
name|unmaskedPermission
argument_list|)
decl_stmt|;
name|fsExecute
argument_list|(
name|user
argument_list|,
name|command
argument_list|)
expr_stmt|;
name|AUDIT_LOG
operator|.
name|info
argument_list|(
literal|"[{}] permission [{}] override [{}] "
operator|+
literal|"replication [{}] blockSize [{}] unmaskedpermission [{}]"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|path
block|,
name|permission
block|,
name|override
block|,
name|replication
block|,
name|blockSize
block|,
name|unmaskedPermission
block|}
argument_list|)
expr_stmt|;
name|response
operator|=
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|CREATED
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
case|case
name|ALLOWSNAPSHOT
case|:
block|{
name|FSOperations
operator|.
name|FSAllowSnapshot
name|command
init|=
operator|new
name|FSOperations
operator|.
name|FSAllowSnapshot
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|fsExecute
argument_list|(
name|user
argument_list|,
name|command
argument_list|)
expr_stmt|;
name|AUDIT_LOG
operator|.
name|info
argument_list|(
literal|"[{}] allowed snapshot"
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|response
operator|=
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|DISALLOWSNAPSHOT
case|:
block|{
name|FSOperations
operator|.
name|FSDisallowSnapshot
name|command
init|=
operator|new
name|FSOperations
operator|.
name|FSDisallowSnapshot
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|fsExecute
argument_list|(
name|user
argument_list|,
name|command
argument_list|)
expr_stmt|;
name|AUDIT_LOG
operator|.
name|info
argument_list|(
literal|"[{}] disallowed snapshot"
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|response
operator|=
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|CREATESNAPSHOT
case|:
block|{
name|String
name|snapshotName
init|=
name|params
operator|.
name|get
argument_list|(
name|SnapshotNameParam
operator|.
name|NAME
argument_list|,
name|SnapshotNameParam
operator|.
name|class
argument_list|)
decl_stmt|;
name|FSOperations
operator|.
name|FSCreateSnapshot
name|command
init|=
operator|new
name|FSOperations
operator|.
name|FSCreateSnapshot
argument_list|(
name|path
argument_list|,
name|snapshotName
argument_list|)
decl_stmt|;
name|String
name|json
init|=
name|fsExecute
argument_list|(
name|user
argument_list|,
name|command
argument_list|)
decl_stmt|;
name|AUDIT_LOG
operator|.
name|info
argument_list|(
literal|"[{}] snapshot created as [{}]"
argument_list|,
name|path
argument_list|,
name|snapshotName
argument_list|)
expr_stmt|;
name|response
operator|=
name|Response
operator|.
name|ok
argument_list|(
name|json
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|SETXATTR
case|:
block|{
name|String
name|xattrName
init|=
name|params
operator|.
name|get
argument_list|(
name|XAttrNameParam
operator|.
name|NAME
argument_list|,
name|XAttrNameParam
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|xattrValue
init|=
name|params
operator|.
name|get
argument_list|(
name|XAttrValueParam
operator|.
name|NAME
argument_list|,
name|XAttrValueParam
operator|.
name|class
argument_list|)
decl_stmt|;
name|EnumSet
argument_list|<
name|XAttrSetFlag
argument_list|>
name|flag
init|=
name|params
operator|.
name|get
argument_list|(
name|XAttrSetFlagParam
operator|.
name|NAME
argument_list|,
name|XAttrSetFlagParam
operator|.
name|class
argument_list|)
decl_stmt|;
name|FSOperations
operator|.
name|FSSetXAttr
name|command
init|=
operator|new
name|FSOperations
operator|.
name|FSSetXAttr
argument_list|(
name|path
argument_list|,
name|xattrName
argument_list|,
name|xattrValue
argument_list|,
name|flag
argument_list|)
decl_stmt|;
name|fsExecute
argument_list|(
name|user
argument_list|,
name|command
argument_list|)
expr_stmt|;
name|AUDIT_LOG
operator|.
name|info
argument_list|(
literal|"[{}] to xAttr [{}]"
argument_list|,
name|path
argument_list|,
name|xattrName
argument_list|)
expr_stmt|;
name|response
operator|=
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|RENAMESNAPSHOT
case|:
block|{
name|String
name|oldSnapshotName
init|=
name|params
operator|.
name|get
argument_list|(
name|OldSnapshotNameParam
operator|.
name|NAME
argument_list|,
name|OldSnapshotNameParam
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|snapshotName
init|=
name|params
operator|.
name|get
argument_list|(
name|SnapshotNameParam
operator|.
name|NAME
argument_list|,
name|SnapshotNameParam
operator|.
name|class
argument_list|)
decl_stmt|;
name|FSOperations
operator|.
name|FSRenameSnapshot
name|command
init|=
operator|new
name|FSOperations
operator|.
name|FSRenameSnapshot
argument_list|(
name|path
argument_list|,
name|oldSnapshotName
argument_list|,
name|snapshotName
argument_list|)
decl_stmt|;
name|fsExecute
argument_list|(
name|user
argument_list|,
name|command
argument_list|)
expr_stmt|;
name|AUDIT_LOG
operator|.
name|info
argument_list|(
literal|"[{}] renamed snapshot [{}] to [{}]"
argument_list|,
name|path
argument_list|,
name|oldSnapshotName
argument_list|,
name|snapshotName
argument_list|)
expr_stmt|;
name|response
operator|=
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|REMOVEXATTR
case|:
block|{
name|String
name|xattrName
init|=
name|params
operator|.
name|get
argument_list|(
name|XAttrNameParam
operator|.
name|NAME
argument_list|,
name|XAttrNameParam
operator|.
name|class
argument_list|)
decl_stmt|;
name|FSOperations
operator|.
name|FSRemoveXAttr
name|command
init|=
operator|new
name|FSOperations
operator|.
name|FSRemoveXAttr
argument_list|(
name|path
argument_list|,
name|xattrName
argument_list|)
decl_stmt|;
name|fsExecute
argument_list|(
name|user
argument_list|,
name|command
argument_list|)
expr_stmt|;
name|AUDIT_LOG
operator|.
name|info
argument_list|(
literal|"[{}] removed xAttr [{}]"
argument_list|,
name|path
argument_list|,
name|xattrName
argument_list|)
expr_stmt|;
name|response
operator|=
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|MKDIRS
case|:
block|{
name|Short
name|permission
init|=
name|params
operator|.
name|get
argument_list|(
name|PermissionParam
operator|.
name|NAME
argument_list|,
name|PermissionParam
operator|.
name|class
argument_list|)
decl_stmt|;
name|Short
name|unmaskedPermission
init|=
name|params
operator|.
name|get
argument_list|(
name|UnmaskedPermissionParam
operator|.
name|NAME
argument_list|,
name|UnmaskedPermissionParam
operator|.
name|class
argument_list|)
decl_stmt|;
name|FSOperations
operator|.
name|FSMkdirs
name|command
init|=
operator|new
name|FSOperations
operator|.
name|FSMkdirs
argument_list|(
name|path
argument_list|,
name|permission
argument_list|,
name|unmaskedPermission
argument_list|)
decl_stmt|;
name|JSONObject
name|json
init|=
name|fsExecute
argument_list|(
name|user
argument_list|,
name|command
argument_list|)
decl_stmt|;
name|AUDIT_LOG
operator|.
name|info
argument_list|(
literal|"[{}] permission [{}] unmaskedpermission [{}]"
argument_list|,
name|path
argument_list|,
name|permission
argument_list|,
name|unmaskedPermission
argument_list|)
expr_stmt|;
name|response
operator|=
name|Response
operator|.
name|ok
argument_list|(
name|json
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|RENAME
case|:
block|{
name|String
name|toPath
init|=
name|params
operator|.
name|get
argument_list|(
name|DestinationParam
operator|.
name|NAME
argument_list|,
name|DestinationParam
operator|.
name|class
argument_list|)
decl_stmt|;
name|FSOperations
operator|.
name|FSRename
name|command
init|=
operator|new
name|FSOperations
operator|.
name|FSRename
argument_list|(
name|path
argument_list|,
name|toPath
argument_list|)
decl_stmt|;
name|JSONObject
name|json
init|=
name|fsExecute
argument_list|(
name|user
argument_list|,
name|command
argument_list|)
decl_stmt|;
name|AUDIT_LOG
operator|.
name|info
argument_list|(
literal|"[{}] to [{}]"
argument_list|,
name|path
argument_list|,
name|toPath
argument_list|)
expr_stmt|;
name|response
operator|=
name|Response
operator|.
name|ok
argument_list|(
name|json
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|SETOWNER
case|:
block|{
name|String
name|owner
init|=
name|params
operator|.
name|get
argument_list|(
name|OwnerParam
operator|.
name|NAME
argument_list|,
name|OwnerParam
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|group
init|=
name|params
operator|.
name|get
argument_list|(
name|GroupParam
operator|.
name|NAME
argument_list|,
name|GroupParam
operator|.
name|class
argument_list|)
decl_stmt|;
name|FSOperations
operator|.
name|FSSetOwner
name|command
init|=
operator|new
name|FSOperations
operator|.
name|FSSetOwner
argument_list|(
name|path
argument_list|,
name|owner
argument_list|,
name|group
argument_list|)
decl_stmt|;
name|fsExecute
argument_list|(
name|user
argument_list|,
name|command
argument_list|)
expr_stmt|;
name|AUDIT_LOG
operator|.
name|info
argument_list|(
literal|"[{}] to (O/G)[{}]"
argument_list|,
name|path
argument_list|,
name|owner
operator|+
literal|":"
operator|+
name|group
argument_list|)
expr_stmt|;
name|response
operator|=
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|SETPERMISSION
case|:
block|{
name|Short
name|permission
init|=
name|params
operator|.
name|get
argument_list|(
name|PermissionParam
operator|.
name|NAME
argument_list|,
name|PermissionParam
operator|.
name|class
argument_list|)
decl_stmt|;
name|FSOperations
operator|.
name|FSSetPermission
name|command
init|=
operator|new
name|FSOperations
operator|.
name|FSSetPermission
argument_list|(
name|path
argument_list|,
name|permission
argument_list|)
decl_stmt|;
name|fsExecute
argument_list|(
name|user
argument_list|,
name|command
argument_list|)
expr_stmt|;
name|AUDIT_LOG
operator|.
name|info
argument_list|(
literal|"[{}] to [{}]"
argument_list|,
name|path
argument_list|,
name|permission
argument_list|)
expr_stmt|;
name|response
operator|=
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|SETREPLICATION
case|:
block|{
name|Short
name|replication
init|=
name|params
operator|.
name|get
argument_list|(
name|ReplicationParam
operator|.
name|NAME
argument_list|,
name|ReplicationParam
operator|.
name|class
argument_list|)
decl_stmt|;
name|FSOperations
operator|.
name|FSSetReplication
name|command
init|=
operator|new
name|FSOperations
operator|.
name|FSSetReplication
argument_list|(
name|path
argument_list|,
name|replication
argument_list|)
decl_stmt|;
name|JSONObject
name|json
init|=
name|fsExecute
argument_list|(
name|user
argument_list|,
name|command
argument_list|)
decl_stmt|;
name|AUDIT_LOG
operator|.
name|info
argument_list|(
literal|"[{}] to [{}]"
argument_list|,
name|path
argument_list|,
name|replication
argument_list|)
expr_stmt|;
name|response
operator|=
name|Response
operator|.
name|ok
argument_list|(
name|json
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|SETTIMES
case|:
block|{
name|Long
name|modifiedTime
init|=
name|params
operator|.
name|get
argument_list|(
name|ModifiedTimeParam
operator|.
name|NAME
argument_list|,
name|ModifiedTimeParam
operator|.
name|class
argument_list|)
decl_stmt|;
name|Long
name|accessTime
init|=
name|params
operator|.
name|get
argument_list|(
name|AccessTimeParam
operator|.
name|NAME
argument_list|,
name|AccessTimeParam
operator|.
name|class
argument_list|)
decl_stmt|;
name|FSOperations
operator|.
name|FSSetTimes
name|command
init|=
operator|new
name|FSOperations
operator|.
name|FSSetTimes
argument_list|(
name|path
argument_list|,
name|modifiedTime
argument_list|,
name|accessTime
argument_list|)
decl_stmt|;
name|fsExecute
argument_list|(
name|user
argument_list|,
name|command
argument_list|)
expr_stmt|;
name|AUDIT_LOG
operator|.
name|info
argument_list|(
literal|"[{}] to (M/A)[{}]"
argument_list|,
name|path
argument_list|,
name|modifiedTime
operator|+
literal|":"
operator|+
name|accessTime
argument_list|)
expr_stmt|;
name|response
operator|=
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|SETACL
case|:
block|{
name|String
name|aclSpec
init|=
name|params
operator|.
name|get
argument_list|(
name|AclPermissionParam
operator|.
name|NAME
argument_list|,
name|AclPermissionParam
operator|.
name|class
argument_list|)
decl_stmt|;
name|FSOperations
operator|.
name|FSSetAcl
name|command
init|=
operator|new
name|FSOperations
operator|.
name|FSSetAcl
argument_list|(
name|path
argument_list|,
name|aclSpec
argument_list|)
decl_stmt|;
name|fsExecute
argument_list|(
name|user
argument_list|,
name|command
argument_list|)
expr_stmt|;
name|AUDIT_LOG
operator|.
name|info
argument_list|(
literal|"[{}] to acl [{}]"
argument_list|,
name|path
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|response
operator|=
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|REMOVEACL
case|:
block|{
name|FSOperations
operator|.
name|FSRemoveAcl
name|command
init|=
operator|new
name|FSOperations
operator|.
name|FSRemoveAcl
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|fsExecute
argument_list|(
name|user
argument_list|,
name|command
argument_list|)
expr_stmt|;
name|AUDIT_LOG
operator|.
name|info
argument_list|(
literal|"[{}] removed acl"
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|response
operator|=
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|MODIFYACLENTRIES
case|:
block|{
name|String
name|aclSpec
init|=
name|params
operator|.
name|get
argument_list|(
name|AclPermissionParam
operator|.
name|NAME
argument_list|,
name|AclPermissionParam
operator|.
name|class
argument_list|)
decl_stmt|;
name|FSOperations
operator|.
name|FSModifyAclEntries
name|command
init|=
operator|new
name|FSOperations
operator|.
name|FSModifyAclEntries
argument_list|(
name|path
argument_list|,
name|aclSpec
argument_list|)
decl_stmt|;
name|fsExecute
argument_list|(
name|user
argument_list|,
name|command
argument_list|)
expr_stmt|;
name|AUDIT_LOG
operator|.
name|info
argument_list|(
literal|"[{}] modify acl entry with [{}]"
argument_list|,
name|path
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|response
operator|=
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|REMOVEACLENTRIES
case|:
block|{
name|String
name|aclSpec
init|=
name|params
operator|.
name|get
argument_list|(
name|AclPermissionParam
operator|.
name|NAME
argument_list|,
name|AclPermissionParam
operator|.
name|class
argument_list|)
decl_stmt|;
name|FSOperations
operator|.
name|FSRemoveAclEntries
name|command
init|=
operator|new
name|FSOperations
operator|.
name|FSRemoveAclEntries
argument_list|(
name|path
argument_list|,
name|aclSpec
argument_list|)
decl_stmt|;
name|fsExecute
argument_list|(
name|user
argument_list|,
name|command
argument_list|)
expr_stmt|;
name|AUDIT_LOG
operator|.
name|info
argument_list|(
literal|"[{}] remove acl entry [{}]"
argument_list|,
name|path
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|response
operator|=
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|REMOVEDEFAULTACL
case|:
block|{
name|FSOperations
operator|.
name|FSRemoveDefaultAcl
name|command
init|=
operator|new
name|FSOperations
operator|.
name|FSRemoveDefaultAcl
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|fsExecute
argument_list|(
name|user
argument_list|,
name|command
argument_list|)
expr_stmt|;
name|AUDIT_LOG
operator|.
name|info
argument_list|(
literal|"[{}] remove default acl"
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|response
operator|=
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|SETSTORAGEPOLICY
case|:
block|{
name|String
name|policyName
init|=
name|params
operator|.
name|get
argument_list|(
name|PolicyNameParam
operator|.
name|NAME
argument_list|,
name|PolicyNameParam
operator|.
name|class
argument_list|)
decl_stmt|;
name|FSOperations
operator|.
name|FSSetStoragePolicy
name|command
init|=
operator|new
name|FSOperations
operator|.
name|FSSetStoragePolicy
argument_list|(
name|path
argument_list|,
name|policyName
argument_list|)
decl_stmt|;
name|fsExecute
argument_list|(
name|user
argument_list|,
name|command
argument_list|)
expr_stmt|;
name|AUDIT_LOG
operator|.
name|info
argument_list|(
literal|"[{}] to policy [{}]"
argument_list|,
name|path
argument_list|,
name|policyName
argument_list|)
expr_stmt|;
name|response
operator|=
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"Invalid HTTP PUT operation [{0}]"
argument_list|,
name|op
operator|.
name|value
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
return|return
name|response
return|;
block|}
block|}
end_class

end_unit

