begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.http.server
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|http
operator|.
name|server
package|;
end_package

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|container
operator|.
name|ContainerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|lib
operator|.
name|service
operator|.
name|FileSystemAccessException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|lib
operator|.
name|wsrs
operator|.
name|ExceptionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|MDC
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * JAX-RS<code>ExceptionMapper</code> implementation that maps HttpFSServer's  * exceptions to HTTP status codes.  */
end_comment

begin_class
annotation|@
name|Provider
DECL|class|HttpFSExceptionProvider
specifier|public
class|class
name|HttpFSExceptionProvider
extends|extends
name|ExceptionProvider
block|{
DECL|field|AUDIT_LOG
specifier|private
specifier|static
name|Logger
name|AUDIT_LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
literal|"httpfsaudit"
argument_list|)
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HttpFSExceptionProvider
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Maps different exceptions thrown by HttpFSServer to HTTP status codes.    *<p/>    *<ul>    *<li>SecurityException : HTTP UNAUTHORIZED</li>    *<li>FileNotFoundException : HTTP NOT_FOUND</li>    *<li>IOException : INTERNAL_HTTP SERVER_ERROR</li>    *<li>UnsupporteOperationException : HTTP BAD_REQUEST</li>    *<li>all other exceptions : HTTP INTERNAL_SERVER_ERROR</li>    *</ul>    *    * @param throwable exception thrown.    *    * @return mapped HTTP status code    */
annotation|@
name|Override
DECL|method|toResponse (Throwable throwable)
specifier|public
name|Response
name|toResponse
parameter_list|(
name|Throwable
name|throwable
parameter_list|)
block|{
name|Response
operator|.
name|Status
name|status
decl_stmt|;
if|if
condition|(
name|throwable
operator|instanceof
name|FileSystemAccessException
condition|)
block|{
name|throwable
operator|=
name|throwable
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|throwable
operator|instanceof
name|ContainerException
condition|)
block|{
name|throwable
operator|=
name|throwable
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|throwable
operator|instanceof
name|SecurityException
condition|)
block|{
name|status
operator|=
name|Response
operator|.
name|Status
operator|.
name|UNAUTHORIZED
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|throwable
operator|instanceof
name|FileNotFoundException
condition|)
block|{
name|status
operator|=
name|Response
operator|.
name|Status
operator|.
name|NOT_FOUND
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|throwable
operator|instanceof
name|IOException
condition|)
block|{
name|status
operator|=
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|throwable
operator|instanceof
name|UnsupportedOperationException
condition|)
block|{
name|status
operator|=
name|Response
operator|.
name|Status
operator|.
name|BAD_REQUEST
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|throwable
operator|instanceof
name|IllegalArgumentException
condition|)
block|{
name|status
operator|=
name|Response
operator|.
name|Status
operator|.
name|BAD_REQUEST
expr_stmt|;
block|}
else|else
block|{
name|status
operator|=
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
expr_stmt|;
block|}
return|return
name|createResponse
argument_list|(
name|status
argument_list|,
name|throwable
argument_list|)
return|;
block|}
comment|/**    * Logs the HTTP status code and exception in HttpFSServer's log.    *    * @param status HTTP status code.    * @param throwable exception thrown.    */
annotation|@
name|Override
DECL|method|log (Response.Status status, Throwable throwable)
specifier|protected
name|void
name|log
parameter_list|(
name|Response
operator|.
name|Status
name|status
parameter_list|,
name|Throwable
name|throwable
parameter_list|)
block|{
name|String
name|method
init|=
name|MDC
operator|.
name|get
argument_list|(
literal|"method"
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|MDC
operator|.
name|get
argument_list|(
literal|"path"
argument_list|)
decl_stmt|;
name|String
name|message
init|=
name|getOneLineMessage
argument_list|(
name|throwable
argument_list|)
decl_stmt|;
name|AUDIT_LOG
operator|.
name|warn
argument_list|(
literal|"FAILED [{}:{}] response [{}] {}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|method
block|,
name|path
block|,
name|status
block|,
name|message
block|}
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"[{}:{}] response [{}] {}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|method
block|,
name|path
block|,
name|status
block|,
name|message
block|}
argument_list|,
name|throwable
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

