begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.lib.lang
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|lib
operator|.
name|lang
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|lib
operator|.
name|util
operator|.
name|Check
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|MessageFormat
import|;
end_import

begin_comment
comment|/**  * Generic exception that requires error codes and uses the a message  * template from the error code.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|XException
specifier|public
class|class
name|XException
extends|extends
name|Exception
block|{
comment|/**    * Interface to define error codes.    */
DECL|interface|ERROR
specifier|public
specifier|static
interface|interface
name|ERROR
block|{
comment|/**      * Returns the template for the error.      *      * @return the template for the error, the template must be in JDK      *<code>MessageFormat</code> syntax (using {#} positional parameters).      */
DECL|method|getTemplate ()
specifier|public
name|String
name|getTemplate
parameter_list|()
function_decl|;
block|}
DECL|field|error
specifier|private
name|ERROR
name|error
decl_stmt|;
comment|/**    * Private constructor used by the public constructors.    *    * @param error error code.    * @param message error message.    * @param cause exception cause if any.    */
DECL|method|XException (ERROR error, String message, Throwable cause)
specifier|private
name|XException
parameter_list|(
name|ERROR
name|error
parameter_list|,
name|String
name|message
parameter_list|,
name|Throwable
name|cause
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|,
name|cause
argument_list|)
expr_stmt|;
name|this
operator|.
name|error
operator|=
name|error
expr_stmt|;
block|}
comment|/**    * Creates an XException using another XException as cause.    *<p>    * The error code and error message are extracted from the cause.    *    * @param cause exception cause.    */
DECL|method|XException (XException cause)
specifier|public
name|XException
parameter_list|(
name|XException
name|cause
parameter_list|)
block|{
name|this
argument_list|(
name|cause
operator|.
name|getError
argument_list|()
argument_list|,
name|cause
operator|.
name|getMessage
argument_list|()
argument_list|,
name|cause
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates an XException using the specified error code. The exception    * message is resolved using the error code template and the passed    * parameters.    *    * @param error error code for the XException.    * @param params parameters to use when creating the error message    * with the error code template.    */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"ThrowableResultOfMethodCallIgnored"
block|}
argument_list|)
DECL|method|XException (ERROR error, Object... params)
specifier|public
name|XException
parameter_list|(
name|ERROR
name|error
parameter_list|,
name|Object
modifier|...
name|params
parameter_list|)
block|{
name|this
argument_list|(
name|Check
operator|.
name|notNull
argument_list|(
name|error
argument_list|,
literal|"error"
argument_list|)
argument_list|,
name|format
argument_list|(
name|error
argument_list|,
name|params
argument_list|)
argument_list|,
name|getCause
argument_list|(
name|params
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns the error code of the exception.    *    * @return the error code of the exception.    */
DECL|method|getError ()
specifier|public
name|ERROR
name|getError
parameter_list|()
block|{
return|return
name|error
return|;
block|}
comment|/**    * Creates a message using a error message template and arguments.    *<p>    * The template must be in JDK<code>MessageFormat</code> syntax    * (using {#} positional parameters).    *    * @param error error code, to get the template from.    * @param args arguments to use for creating the message.    *    * @return the resolved error message.    */
DECL|method|format (ERROR error, Object... args)
specifier|private
specifier|static
name|String
name|format
parameter_list|(
name|ERROR
name|error
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
name|String
name|template
init|=
name|error
operator|.
name|getTemplate
argument_list|()
decl_stmt|;
if|if
condition|(
name|template
operator|==
literal|null
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" {"
argument_list|)
operator|.
name|append
argument_list|(
name|i
argument_list|)
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
block|}
name|template
operator|=
name|sb
operator|.
name|deleteCharAt
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
return|return
name|error
operator|+
literal|": "
operator|+
name|MessageFormat
operator|.
name|format
argument_list|(
name|template
argument_list|,
name|args
argument_list|)
return|;
block|}
comment|/**    * Returns the last parameter if it is an instance of<code>Throwable</code>    * returns it else it returns NULL.    *    * @param params parameters to look for a cause.    *    * @return the last parameter if it is an instance of<code>Throwable</code>    *         returns it else it returns NULL.    */
DECL|method|getCause (Object... params)
specifier|private
specifier|static
name|Throwable
name|getCause
parameter_list|(
name|Object
modifier|...
name|params
parameter_list|)
block|{
name|Throwable
name|throwable
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|params
operator|!=
literal|null
operator|&&
name|params
operator|.
name|length
operator|>
literal|0
operator|&&
name|params
index|[
name|params
operator|.
name|length
operator|-
literal|1
index|]
operator|instanceof
name|Throwable
condition|)
block|{
name|throwable
operator|=
operator|(
name|Throwable
operator|)
name|params
index|[
name|params
operator|.
name|length
operator|-
literal|1
index|]
expr_stmt|;
block|}
return|return
name|throwable
return|;
block|}
block|}
end_class

end_unit

