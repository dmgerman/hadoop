begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.lib.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|lib
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|MessageFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * Utility methods to check preconditions.  *<p>  * Commonly used for method arguments preconditions.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|Check
specifier|public
class|class
name|Check
block|{
comment|/**    * Verifies a variable is not NULL.    *    * @param obj the variable to check.    * @param name the name to use in the exception message.    *    * @return the variable.    *    * @throws IllegalArgumentException if the variable is NULL.    */
DECL|method|notNull (T obj, String name)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|notNull
parameter_list|(
name|T
name|obj
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|name
operator|+
literal|" cannot be null"
argument_list|)
throw|;
block|}
return|return
name|obj
return|;
block|}
comment|/**    * Verifies a list does not have any NULL elements.    *    * @param list the list to check.    * @param name the name to use in the exception message.    *    * @return the list.    *    * @throws IllegalArgumentException if the list has NULL elements.    */
DECL|method|notNullElements (List<T> list, String name)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|notNullElements
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|list
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|notNull
argument_list|(
name|list
argument_list|,
name|name
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|notNull
argument_list|(
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"list [{0}] element [{1}]"
argument_list|,
name|name
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
comment|/**    * Verifies a string is not NULL and not emtpy    *    * @param str the variable to check.    * @param name the name to use in the exception message.    *    * @return the variable.    *    * @throws IllegalArgumentException if the variable is NULL or empty.    */
DECL|method|notEmpty (String str, String name)
specifier|public
specifier|static
name|String
name|notEmpty
parameter_list|(
name|String
name|str
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|str
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|name
operator|+
literal|" cannot be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|str
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|name
operator|+
literal|" cannot be empty"
argument_list|)
throw|;
block|}
return|return
name|str
return|;
block|}
comment|/**    * Verifies a string list is not NULL and not emtpy    *    * @param list the list to check.    * @param name the name to use in the exception message.    *    * @return the variable.    *    * @throws IllegalArgumentException if the string list has NULL or empty    * elements.    */
DECL|method|notEmptyElements (List<String> list, String name)
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|notEmptyElements
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|list
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|notNull
argument_list|(
name|list
argument_list|,
name|name
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|notEmpty
argument_list|(
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"list [{0}] element [{1}]"
argument_list|,
name|name
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
DECL|field|IDENTIFIER_PATTERN_STR
specifier|private
specifier|static
specifier|final
name|String
name|IDENTIFIER_PATTERN_STR
init|=
literal|"[a-zA-z_][a-zA-Z0-9_\\-]*"
decl_stmt|;
DECL|field|IDENTIFIER_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|IDENTIFIER_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^"
operator|+
name|IDENTIFIER_PATTERN_STR
operator|+
literal|"$"
argument_list|)
decl_stmt|;
comment|/**    * Verifies a value is a valid identifier,    *<code>[a-zA-z_][a-zA-Z0-9_\-]*</code>, up to a maximum length.    *    * @param value string to check if it is a valid identifier.    * @param maxLen maximun length.    * @param name the name to use in the exception message.    *    * @return the value.    *    * @throws IllegalArgumentException if the string is not a valid identifier.    */
DECL|method|validIdentifier (String value, int maxLen, String name)
specifier|public
specifier|static
name|String
name|validIdentifier
parameter_list|(
name|String
name|value
parameter_list|,
name|int
name|maxLen
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|Check
operator|.
name|notEmpty
argument_list|(
name|value
argument_list|,
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|.
name|length
argument_list|()
operator|>
name|maxLen
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"[{0}] = [{1}] exceeds max len [{2}]"
argument_list|,
name|name
argument_list|,
name|value
argument_list|,
name|maxLen
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|IDENTIFIER_PATTERN
operator|.
name|matcher
argument_list|(
name|value
argument_list|)
operator|.
name|find
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"[{0}] = [{1}] must be '{2}'"
argument_list|,
name|name
argument_list|,
name|value
argument_list|,
name|IDENTIFIER_PATTERN_STR
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|value
return|;
block|}
comment|/**    * Verifies an integer is greater than zero.    *    * @param value integer value.    * @param name the name to use in the exception message.    *    * @return the value.    *    * @throws IllegalArgumentException if the integer is zero or less.    */
DECL|method|gt0 (int value, String name)
specifier|public
specifier|static
name|int
name|gt0
parameter_list|(
name|int
name|value
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
operator|(
name|int
operator|)
name|gt0
argument_list|(
operator|(
name|long
operator|)
name|value
argument_list|,
name|name
argument_list|)
return|;
block|}
comment|/**    * Verifies an long is greater than zero.    *    * @param value long value.    * @param name the name to use in the exception message.    *    * @return the value.    *    * @throws IllegalArgumentException if the long is zero or less.    */
DECL|method|gt0 (long value, String name)
specifier|public
specifier|static
name|long
name|gt0
parameter_list|(
name|long
name|value
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|value
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"parameter [{0}] = [{1}] must be greater than zero"
argument_list|,
name|name
argument_list|,
name|value
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|value
return|;
block|}
comment|/**    * Verifies an integer is greater or equal to zero.    *    * @param value integer value.    * @param name the name to use in the exception message.    *    * @return the value.    *    * @throws IllegalArgumentException if the integer is greater or equal to zero.    */
DECL|method|ge0 (int value, String name)
specifier|public
specifier|static
name|int
name|ge0
parameter_list|(
name|int
name|value
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
operator|(
name|int
operator|)
name|ge0
argument_list|(
operator|(
name|long
operator|)
name|value
argument_list|,
name|name
argument_list|)
return|;
block|}
comment|/**    * Verifies an long is greater or equal to zero.    *    * @param value integer value.    * @param name the name to use in the exception message.    *    * @return the value.    *    * @throws IllegalArgumentException if the long is greater or equal to zero.    */
DECL|method|ge0 (long value, String name)
specifier|public
specifier|static
name|long
name|ge0
parameter_list|(
name|long
name|value
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|value
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"parameter [{0}] = [{1}] must be greater than or equals zero"
argument_list|,
name|name
argument_list|,
name|value
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|value
return|;
block|}
block|}
end_class

end_unit

