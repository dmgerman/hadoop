begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.http.client
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|http
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|client
operator|.
name|AuthenticatedURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|client
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|client
operator|.
name|Authenticator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|client
operator|.
name|KerberosAuthenticator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|AbstractDelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|simple
operator|.
name|JSONArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|simple
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * A<code>KerberosAuthenticator</code> subclass that fallback to  * {@link HttpFSPseudoAuthenticator}.  */
end_comment

begin_class
DECL|class|HttpFSKerberosAuthenticator
specifier|public
class|class
name|HttpFSKerberosAuthenticator
extends|extends
name|KerberosAuthenticator
block|{
comment|/**    * Returns the fallback authenticator if the server does not use    * Kerberos SPNEGO HTTP authentication.    *    * @return a {@link HttpFSPseudoAuthenticator} instance.    */
annotation|@
name|Override
DECL|method|getFallBackAuthenticator ()
specifier|protected
name|Authenticator
name|getFallBackAuthenticator
parameter_list|()
block|{
return|return
operator|new
name|HttpFSPseudoAuthenticator
argument_list|()
return|;
block|}
DECL|field|HTTP_GET
specifier|private
specifier|static
specifier|final
name|String
name|HTTP_GET
init|=
literal|"GET"
decl_stmt|;
DECL|field|HTTP_PUT
specifier|private
specifier|static
specifier|final
name|String
name|HTTP_PUT
init|=
literal|"PUT"
decl_stmt|;
DECL|field|DELEGATION_PARAM
specifier|public
specifier|static
specifier|final
name|String
name|DELEGATION_PARAM
init|=
literal|"delegation"
decl_stmt|;
DECL|field|TOKEN_PARAM
specifier|public
specifier|static
specifier|final
name|String
name|TOKEN_PARAM
init|=
literal|"token"
decl_stmt|;
DECL|field|RENEWER_PARAM
specifier|public
specifier|static
specifier|final
name|String
name|RENEWER_PARAM
init|=
literal|"renewer"
decl_stmt|;
DECL|field|TOKEN_KIND
specifier|public
specifier|static
specifier|final
name|String
name|TOKEN_KIND
init|=
literal|"HTTPFS_DELEGATION_TOKEN"
decl_stmt|;
DECL|field|DELEGATION_TOKEN_JSON
specifier|public
specifier|static
specifier|final
name|String
name|DELEGATION_TOKEN_JSON
init|=
literal|"Token"
decl_stmt|;
DECL|field|DELEGATION_TOKENS_JSON
specifier|public
specifier|static
specifier|final
name|String
name|DELEGATION_TOKENS_JSON
init|=
literal|"Tokens"
decl_stmt|;
DECL|field|DELEGATION_TOKEN_URL_STRING_JSON
specifier|public
specifier|static
specifier|final
name|String
name|DELEGATION_TOKEN_URL_STRING_JSON
init|=
literal|"urlString"
decl_stmt|;
DECL|field|RENEW_DELEGATION_TOKEN_JSON
specifier|public
specifier|static
specifier|final
name|String
name|RENEW_DELEGATION_TOKEN_JSON
init|=
literal|"long"
decl_stmt|;
comment|/**    * DelegationToken operations.    */
DECL|enum|DelegationTokenOperation
specifier|public
specifier|static
enum|enum
name|DelegationTokenOperation
block|{
DECL|enumConstant|GETDELEGATIONTOKEN
name|GETDELEGATIONTOKEN
argument_list|(
name|HTTP_GET
argument_list|,
literal|true
argument_list|)
block|,
DECL|enumConstant|GETDELEGATIONTOKENS
name|GETDELEGATIONTOKENS
argument_list|(
name|HTTP_GET
argument_list|,
literal|true
argument_list|)
block|,
DECL|enumConstant|RENEWDELEGATIONTOKEN
name|RENEWDELEGATIONTOKEN
argument_list|(
name|HTTP_PUT
argument_list|,
literal|true
argument_list|)
block|,
DECL|enumConstant|CANCELDELEGATIONTOKEN
name|CANCELDELEGATIONTOKEN
argument_list|(
name|HTTP_PUT
argument_list|,
literal|false
argument_list|)
block|;
DECL|field|httpMethod
specifier|private
name|String
name|httpMethod
decl_stmt|;
DECL|field|requiresKerberosCredentials
specifier|private
name|boolean
name|requiresKerberosCredentials
decl_stmt|;
DECL|method|DelegationTokenOperation (String httpMethod, boolean requiresKerberosCredentials)
specifier|private
name|DelegationTokenOperation
parameter_list|(
name|String
name|httpMethod
parameter_list|,
name|boolean
name|requiresKerberosCredentials
parameter_list|)
block|{
name|this
operator|.
name|httpMethod
operator|=
name|httpMethod
expr_stmt|;
name|this
operator|.
name|requiresKerberosCredentials
operator|=
name|requiresKerberosCredentials
expr_stmt|;
block|}
DECL|method|getHttpMethod ()
specifier|public
name|String
name|getHttpMethod
parameter_list|()
block|{
return|return
name|httpMethod
return|;
block|}
DECL|method|requiresKerberosCredentials ()
specifier|public
name|boolean
name|requiresKerberosCredentials
parameter_list|()
block|{
return|return
name|requiresKerberosCredentials
return|;
block|}
block|}
DECL|method|injectDelegationToken (Map<String, String> params, Token<?> dtToken)
specifier|public
specifier|static
name|void
name|injectDelegationToken
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|,
name|Token
argument_list|<
name|?
argument_list|>
name|dtToken
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|dtToken
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|put
argument_list|(
name|DELEGATION_PARAM
argument_list|,
name|dtToken
operator|.
name|encodeToUrlString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|hasDelegationToken (URL url)
specifier|private
name|boolean
name|hasDelegationToken
parameter_list|(
name|URL
name|url
parameter_list|)
block|{
return|return
name|url
operator|.
name|getQuery
argument_list|()
operator|.
name|contains
argument_list|(
name|DELEGATION_PARAM
operator|+
literal|"="
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|authenticate (URL url, AuthenticatedURL.Token token)
specifier|public
name|void
name|authenticate
parameter_list|(
name|URL
name|url
parameter_list|,
name|AuthenticatedURL
operator|.
name|Token
name|token
parameter_list|)
throws|throws
name|IOException
throws|,
name|AuthenticationException
block|{
if|if
condition|(
operator|!
name|hasDelegationToken
argument_list|(
name|url
argument_list|)
condition|)
block|{
name|super
operator|.
name|authenticate
argument_list|(
name|url
argument_list|,
name|token
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|OP_PARAM
specifier|public
specifier|static
specifier|final
name|String
name|OP_PARAM
init|=
literal|"op"
decl_stmt|;
DECL|method|getDelegationTokens (URI fsURI, InetSocketAddress httpFSAddr, DelegationTokenOperation op, AuthenticatedURL.Token token, String renewer)
specifier|private
specifier|static
name|List
argument_list|<
name|Token
argument_list|<
name|?
argument_list|>
argument_list|>
name|getDelegationTokens
parameter_list|(
name|URI
name|fsURI
parameter_list|,
name|InetSocketAddress
name|httpFSAddr
parameter_list|,
name|DelegationTokenOperation
name|op
parameter_list|,
name|AuthenticatedURL
operator|.
name|Token
name|token
parameter_list|,
name|String
name|renewer
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|OP_PARAM
argument_list|,
name|op
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|RENEWER_PARAM
argument_list|,
name|renewer
argument_list|)
expr_stmt|;
name|URL
name|url
init|=
name|HttpFSUtils
operator|.
name|createHttpURL
argument_list|(
operator|new
name|Path
argument_list|(
name|fsURI
argument_list|)
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|AuthenticatedURL
name|aUrl
init|=
operator|new
name|AuthenticatedURL
argument_list|(
operator|new
name|HttpFSKerberosAuthenticator
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|HttpURLConnection
name|conn
init|=
name|aUrl
operator|.
name|openConnection
argument_list|(
name|url
argument_list|,
name|token
argument_list|)
decl_stmt|;
name|conn
operator|.
name|setRequestMethod
argument_list|(
name|op
operator|.
name|getHttpMethod
argument_list|()
argument_list|)
expr_stmt|;
name|HttpFSUtils
operator|.
name|validateResponse
argument_list|(
name|conn
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|op
operator|==
name|DelegationTokenOperation
operator|.
name|GETDELEGATIONTOKEN
condition|)
block|{
name|JSONObject
name|json
init|=
call|(
name|JSONObject
call|)
argument_list|(
operator|(
name|JSONObject
operator|)
name|HttpFSUtils
operator|.
name|jsonParse
argument_list|(
name|conn
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
name|DELEGATION_TOKEN_JSON
argument_list|)
decl_stmt|;
name|String
name|tokenStr
init|=
operator|(
name|String
operator|)
name|json
operator|.
name|get
argument_list|(
name|DELEGATION_TOKEN_URL_STRING_JSON
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|tokenStr
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|op
operator|==
name|DelegationTokenOperation
operator|.
name|GETDELEGATIONTOKENS
condition|)
block|{
name|JSONObject
name|json
init|=
call|(
name|JSONObject
call|)
argument_list|(
operator|(
name|JSONObject
operator|)
name|HttpFSUtils
operator|.
name|jsonParse
argument_list|(
name|conn
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
name|DELEGATION_TOKENS_JSON
argument_list|)
decl_stmt|;
name|JSONArray
name|array
init|=
operator|(
name|JSONArray
operator|)
name|json
operator|.
name|get
argument_list|(
name|DELEGATION_TOKEN_JSON
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|element
range|:
name|array
control|)
block|{
name|String
name|tokenStr
init|=
call|(
name|String
call|)
argument_list|(
operator|(
name|Map
operator|)
name|element
argument_list|)
operator|.
name|get
argument_list|(
name|DELEGATION_TOKEN_URL_STRING_JSON
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|tokenStr
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid operation: "
operator|+
name|op
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|Token
argument_list|<
name|?
argument_list|>
argument_list|>
name|dTokens
init|=
operator|new
name|ArrayList
argument_list|<
name|Token
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|tokenStr
range|:
name|list
control|)
block|{
name|Token
argument_list|<
name|AbstractDelegationTokenIdentifier
argument_list|>
name|dToken
init|=
operator|new
name|Token
argument_list|<
name|AbstractDelegationTokenIdentifier
argument_list|>
argument_list|()
decl_stmt|;
name|dToken
operator|.
name|decodeFromUrlString
argument_list|(
name|tokenStr
argument_list|)
expr_stmt|;
name|dTokens
operator|.
name|add
argument_list|(
name|dToken
argument_list|)
expr_stmt|;
name|SecurityUtil
operator|.
name|setTokenService
argument_list|(
name|dToken
argument_list|,
name|httpFSAddr
argument_list|)
expr_stmt|;
block|}
return|return
name|dTokens
return|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|ex
operator|.
name|toString
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
DECL|method|getDelegationTokens (URI fsURI, InetSocketAddress httpFSAddr, AuthenticatedURL.Token token, String renewer)
specifier|public
specifier|static
name|List
argument_list|<
name|Token
argument_list|<
name|?
argument_list|>
argument_list|>
name|getDelegationTokens
parameter_list|(
name|URI
name|fsURI
parameter_list|,
name|InetSocketAddress
name|httpFSAddr
parameter_list|,
name|AuthenticatedURL
operator|.
name|Token
name|token
parameter_list|,
name|String
name|renewer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getDelegationTokens
argument_list|(
name|fsURI
argument_list|,
name|httpFSAddr
argument_list|,
name|DelegationTokenOperation
operator|.
name|GETDELEGATIONTOKENS
argument_list|,
name|token
argument_list|,
name|renewer
argument_list|)
return|;
block|}
DECL|method|getDelegationToken (URI fsURI, InetSocketAddress httpFSAddr, AuthenticatedURL.Token token, String renewer)
specifier|public
specifier|static
name|Token
argument_list|<
name|?
argument_list|>
name|getDelegationToken
parameter_list|(
name|URI
name|fsURI
parameter_list|,
name|InetSocketAddress
name|httpFSAddr
parameter_list|,
name|AuthenticatedURL
operator|.
name|Token
name|token
parameter_list|,
name|String
name|renewer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getDelegationTokens
argument_list|(
name|fsURI
argument_list|,
name|httpFSAddr
argument_list|,
name|DelegationTokenOperation
operator|.
name|GETDELEGATIONTOKENS
argument_list|,
name|token
argument_list|,
name|renewer
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
DECL|method|renewDelegationToken (URI fsURI, AuthenticatedURL.Token token, Token<?> dToken)
specifier|public
specifier|static
name|long
name|renewDelegationToken
parameter_list|(
name|URI
name|fsURI
parameter_list|,
name|AuthenticatedURL
operator|.
name|Token
name|token
parameter_list|,
name|Token
argument_list|<
name|?
argument_list|>
name|dToken
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|OP_PARAM
argument_list|,
name|DelegationTokenOperation
operator|.
name|RENEWDELEGATIONTOKEN
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|TOKEN_PARAM
argument_list|,
name|dToken
operator|.
name|encodeToUrlString
argument_list|()
argument_list|)
expr_stmt|;
name|URL
name|url
init|=
name|HttpFSUtils
operator|.
name|createHttpURL
argument_list|(
operator|new
name|Path
argument_list|(
name|fsURI
argument_list|)
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|AuthenticatedURL
name|aUrl
init|=
operator|new
name|AuthenticatedURL
argument_list|(
operator|new
name|HttpFSKerberosAuthenticator
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|HttpURLConnection
name|conn
init|=
name|aUrl
operator|.
name|openConnection
argument_list|(
name|url
argument_list|,
name|token
argument_list|)
decl_stmt|;
name|conn
operator|.
name|setRequestMethod
argument_list|(
name|DelegationTokenOperation
operator|.
name|RENEWDELEGATIONTOKEN
operator|.
name|getHttpMethod
argument_list|()
argument_list|)
expr_stmt|;
name|HttpFSUtils
operator|.
name|validateResponse
argument_list|(
name|conn
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
call|(
name|JSONObject
call|)
argument_list|(
operator|(
name|JSONObject
operator|)
name|HttpFSUtils
operator|.
name|jsonParse
argument_list|(
name|conn
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
name|DELEGATION_TOKEN_JSON
argument_list|)
decl_stmt|;
return|return
call|(
name|Long
call|)
argument_list|(
name|json
operator|.
name|get
argument_list|(
name|RENEW_DELEGATION_TOKEN_JSON
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|ex
operator|.
name|toString
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
DECL|method|cancelDelegationToken (URI fsURI, AuthenticatedURL.Token token, Token<?> dToken)
specifier|public
specifier|static
name|void
name|cancelDelegationToken
parameter_list|(
name|URI
name|fsURI
parameter_list|,
name|AuthenticatedURL
operator|.
name|Token
name|token
parameter_list|,
name|Token
argument_list|<
name|?
argument_list|>
name|dToken
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|OP_PARAM
argument_list|,
name|DelegationTokenOperation
operator|.
name|CANCELDELEGATIONTOKEN
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|TOKEN_PARAM
argument_list|,
name|dToken
operator|.
name|encodeToUrlString
argument_list|()
argument_list|)
expr_stmt|;
name|URL
name|url
init|=
name|HttpFSUtils
operator|.
name|createHttpURL
argument_list|(
operator|new
name|Path
argument_list|(
name|fsURI
argument_list|)
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|AuthenticatedURL
name|aUrl
init|=
operator|new
name|AuthenticatedURL
argument_list|(
operator|new
name|HttpFSKerberosAuthenticator
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|HttpURLConnection
name|conn
init|=
name|aUrl
operator|.
name|openConnection
argument_list|(
name|url
argument_list|,
name|token
argument_list|)
decl_stmt|;
name|conn
operator|.
name|setRequestMethod
argument_list|(
name|DelegationTokenOperation
operator|.
name|CANCELDELEGATIONTOKEN
operator|.
name|getHttpMethod
argument_list|()
argument_list|)
expr_stmt|;
name|HttpFSUtils
operator|.
name|validateResponse
argument_list|(
name|conn
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|ex
operator|.
name|toString
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

