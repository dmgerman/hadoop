begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.lib.wsrs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|lib
operator|.
name|wsrs
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|core
operator|.
name|HttpContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|core
operator|.
name|spi
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|core
operator|.
name|spi
operator|.
name|component
operator|.
name|ComponentScope
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|server
operator|.
name|impl
operator|.
name|inject
operator|.
name|AbstractHttpContextInjectable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|spi
operator|.
name|inject
operator|.
name|Injectable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|spi
operator|.
name|inject
operator|.
name|InjectableProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|MessageFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Jersey provider that parses the request parameters based on the  * given parameter definition.   */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|ParametersProvider
specifier|public
class|class
name|ParametersProvider
extends|extends
name|AbstractHttpContextInjectable
argument_list|<
name|Parameters
argument_list|>
implements|implements
name|InjectableProvider
argument_list|<
name|Context
argument_list|,
name|Type
argument_list|>
block|{
DECL|field|driverParam
specifier|private
name|String
name|driverParam
decl_stmt|;
DECL|field|enumClass
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|Enum
argument_list|>
name|enumClass
decl_stmt|;
DECL|field|paramsDef
specifier|private
name|Map
argument_list|<
name|Enum
argument_list|,
name|Class
argument_list|<
name|Param
argument_list|<
name|?
argument_list|>
argument_list|>
index|[]
argument_list|>
name|paramsDef
decl_stmt|;
DECL|method|ParametersProvider (String driverParam, Class<? extends Enum> enumClass, Map<Enum, Class<Param<?>>[]> paramsDef)
specifier|public
name|ParametersProvider
parameter_list|(
name|String
name|driverParam
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Enum
argument_list|>
name|enumClass
parameter_list|,
name|Map
argument_list|<
name|Enum
argument_list|,
name|Class
argument_list|<
name|Param
argument_list|<
name|?
argument_list|>
argument_list|>
index|[]
argument_list|>
name|paramsDef
parameter_list|)
block|{
name|this
operator|.
name|driverParam
operator|=
name|driverParam
expr_stmt|;
name|this
operator|.
name|enumClass
operator|=
name|enumClass
expr_stmt|;
name|this
operator|.
name|paramsDef
operator|=
name|paramsDef
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getValue (HttpContext httpContext)
specifier|public
name|Parameters
name|getValue
parameter_list|(
name|HttpContext
name|httpContext
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Param
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Param
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|queryString
init|=
name|httpContext
operator|.
name|getRequest
argument_list|()
operator|.
name|getQueryParameters
argument_list|()
decl_stmt|;
name|String
name|str
init|=
operator|(
operator|(
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|queryString
operator|)
operator|.
name|getFirst
argument_list|(
name|driverParam
argument_list|)
decl_stmt|;
if|if
condition|(
name|str
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"Missing Operation parameter [{0}]"
argument_list|,
name|driverParam
argument_list|)
argument_list|)
throw|;
block|}
name|Enum
name|op
decl_stmt|;
try|try
block|{
name|op
operator|=
name|Enum
operator|.
name|valueOf
argument_list|(
name|enumClass
argument_list|,
name|StringUtils
operator|.
name|toUpperCase
argument_list|(
name|str
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"Invalid Operation [{0}]"
argument_list|,
name|str
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|paramsDef
operator|.
name|containsKey
argument_list|(
name|op
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"Unsupported Operation [{0}]"
argument_list|,
name|op
argument_list|)
argument_list|)
throw|;
block|}
for|for
control|(
name|Class
argument_list|<
name|Param
argument_list|<
name|?
argument_list|>
argument_list|>
name|paramClass
range|:
name|paramsDef
operator|.
name|get
argument_list|(
name|op
argument_list|)
control|)
block|{
name|Param
argument_list|<
name|?
argument_list|>
name|param
init|=
name|newParam
argument_list|(
name|paramClass
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Param
argument_list|<
name|?
argument_list|>
argument_list|>
name|paramList
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ps
init|=
name|queryString
operator|.
name|get
argument_list|(
name|param
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ps
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|p
range|:
name|ps
control|)
block|{
try|try
block|{
name|param
operator|.
name|parseParam
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|ex
operator|.
name|toString
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
name|paramList
operator|.
name|add
argument_list|(
name|param
argument_list|)
expr_stmt|;
name|param
operator|=
name|newParam
argument_list|(
name|paramClass
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|paramList
operator|.
name|add
argument_list|(
name|param
argument_list|)
expr_stmt|;
block|}
name|map
operator|.
name|put
argument_list|(
name|param
operator|.
name|getName
argument_list|()
argument_list|,
name|paramList
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|Parameters
argument_list|(
name|map
argument_list|)
return|;
block|}
DECL|method|newParam (Class<Param<?>> paramClass)
specifier|private
name|Param
argument_list|<
name|?
argument_list|>
name|newParam
parameter_list|(
name|Class
argument_list|<
name|Param
argument_list|<
name|?
argument_list|>
argument_list|>
name|paramClass
parameter_list|)
block|{
try|try
block|{
return|return
name|paramClass
operator|.
name|newInstance
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"Param class [{0}] does not have default constructor"
argument_list|,
name|paramClass
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getScope ()
specifier|public
name|ComponentScope
name|getScope
parameter_list|()
block|{
return|return
name|ComponentScope
operator|.
name|PerRequest
return|;
block|}
annotation|@
name|Override
DECL|method|getInjectable (ComponentContext componentContext, Context context, Type type)
specifier|public
name|Injectable
name|getInjectable
parameter_list|(
name|ComponentContext
name|componentContext
parameter_list|,
name|Context
name|context
parameter_list|,
name|Type
name|type
parameter_list|)
block|{
return|return
operator|(
name|type
operator|.
name|equals
argument_list|(
name|Parameters
operator|.
name|class
argument_list|)
operator|)
condition|?
name|this
else|:
literal|null
return|;
block|}
block|}
end_class

end_unit

