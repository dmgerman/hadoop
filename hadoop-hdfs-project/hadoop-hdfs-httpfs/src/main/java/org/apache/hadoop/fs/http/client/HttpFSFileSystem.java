begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.http.client
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|http
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ContentSummary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|DelegationTokenRenewer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileChecksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PositionedReadable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|QuotaUsage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Seekable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|XAttrCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|XAttrSetFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|BlockStoragePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|FsPermissionExtension
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshotDiffReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshottableDirectoryStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|JsonUtilClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|lib
operator|.
name|wsrs
operator|.
name|EnumSetParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|web
operator|.
name|DelegationTokenAuthenticatedURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|web
operator|.
name|DelegationTokenAuthenticator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|web
operator|.
name|KerberosDelegationTokenAuthenticator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|HttpExceptionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|simple
operator|.
name|JSONArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|simple
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|simple
operator|.
name|parser
operator|.
name|JSONParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|simple
operator|.
name|parser
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilterInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|MessageFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * HttpFSServer implementation of the FileSystemAccess FileSystem.  *<p>  * This implementation allows a user to access HDFS over HTTP via a HttpFSServer server.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|HttpFSFileSystem
specifier|public
class|class
name|HttpFSFileSystem
extends|extends
name|FileSystem
implements|implements
name|DelegationTokenRenewer
operator|.
name|Renewable
block|{
DECL|field|SERVICE_NAME
specifier|public
specifier|static
specifier|final
name|String
name|SERVICE_NAME
init|=
name|HttpFSUtils
operator|.
name|SERVICE_NAME
decl_stmt|;
DECL|field|SERVICE_VERSION
specifier|public
specifier|static
specifier|final
name|String
name|SERVICE_VERSION
init|=
name|HttpFSUtils
operator|.
name|SERVICE_VERSION
decl_stmt|;
DECL|field|SCHEME
specifier|public
specifier|static
specifier|final
name|String
name|SCHEME
init|=
literal|"webhdfs"
decl_stmt|;
DECL|field|OP_PARAM
specifier|public
specifier|static
specifier|final
name|String
name|OP_PARAM
init|=
literal|"op"
decl_stmt|;
DECL|field|DO_AS_PARAM
specifier|public
specifier|static
specifier|final
name|String
name|DO_AS_PARAM
init|=
literal|"doas"
decl_stmt|;
DECL|field|OVERWRITE_PARAM
specifier|public
specifier|static
specifier|final
name|String
name|OVERWRITE_PARAM
init|=
literal|"overwrite"
decl_stmt|;
DECL|field|REPLICATION_PARAM
specifier|public
specifier|static
specifier|final
name|String
name|REPLICATION_PARAM
init|=
literal|"replication"
decl_stmt|;
DECL|field|BLOCKSIZE_PARAM
specifier|public
specifier|static
specifier|final
name|String
name|BLOCKSIZE_PARAM
init|=
literal|"blocksize"
decl_stmt|;
DECL|field|PERMISSION_PARAM
specifier|public
specifier|static
specifier|final
name|String
name|PERMISSION_PARAM
init|=
literal|"permission"
decl_stmt|;
DECL|field|UNMASKED_PERMISSION_PARAM
specifier|public
specifier|static
specifier|final
name|String
name|UNMASKED_PERMISSION_PARAM
init|=
literal|"unmaskedpermission"
decl_stmt|;
DECL|field|ACLSPEC_PARAM
specifier|public
specifier|static
specifier|final
name|String
name|ACLSPEC_PARAM
init|=
literal|"aclspec"
decl_stmt|;
DECL|field|DESTINATION_PARAM
specifier|public
specifier|static
specifier|final
name|String
name|DESTINATION_PARAM
init|=
literal|"destination"
decl_stmt|;
DECL|field|RECURSIVE_PARAM
specifier|public
specifier|static
specifier|final
name|String
name|RECURSIVE_PARAM
init|=
literal|"recursive"
decl_stmt|;
DECL|field|SOURCES_PARAM
specifier|public
specifier|static
specifier|final
name|String
name|SOURCES_PARAM
init|=
literal|"sources"
decl_stmt|;
DECL|field|OWNER_PARAM
specifier|public
specifier|static
specifier|final
name|String
name|OWNER_PARAM
init|=
literal|"owner"
decl_stmt|;
DECL|field|GROUP_PARAM
specifier|public
specifier|static
specifier|final
name|String
name|GROUP_PARAM
init|=
literal|"group"
decl_stmt|;
DECL|field|MODIFICATION_TIME_PARAM
specifier|public
specifier|static
specifier|final
name|String
name|MODIFICATION_TIME_PARAM
init|=
literal|"modificationtime"
decl_stmt|;
DECL|field|ACCESS_TIME_PARAM
specifier|public
specifier|static
specifier|final
name|String
name|ACCESS_TIME_PARAM
init|=
literal|"accesstime"
decl_stmt|;
DECL|field|XATTR_NAME_PARAM
specifier|public
specifier|static
specifier|final
name|String
name|XATTR_NAME_PARAM
init|=
literal|"xattr.name"
decl_stmt|;
DECL|field|XATTR_VALUE_PARAM
specifier|public
specifier|static
specifier|final
name|String
name|XATTR_VALUE_PARAM
init|=
literal|"xattr.value"
decl_stmt|;
DECL|field|XATTR_SET_FLAG_PARAM
specifier|public
specifier|static
specifier|final
name|String
name|XATTR_SET_FLAG_PARAM
init|=
literal|"flag"
decl_stmt|;
DECL|field|XATTR_ENCODING_PARAM
specifier|public
specifier|static
specifier|final
name|String
name|XATTR_ENCODING_PARAM
init|=
literal|"encoding"
decl_stmt|;
DECL|field|NEW_LENGTH_PARAM
specifier|public
specifier|static
specifier|final
name|String
name|NEW_LENGTH_PARAM
init|=
literal|"newlength"
decl_stmt|;
DECL|field|START_AFTER_PARAM
specifier|public
specifier|static
specifier|final
name|String
name|START_AFTER_PARAM
init|=
literal|"startAfter"
decl_stmt|;
DECL|field|POLICY_NAME_PARAM
specifier|public
specifier|static
specifier|final
name|String
name|POLICY_NAME_PARAM
init|=
literal|"storagepolicy"
decl_stmt|;
DECL|field|SNAPSHOT_NAME_PARAM
specifier|public
specifier|static
specifier|final
name|String
name|SNAPSHOT_NAME_PARAM
init|=
literal|"snapshotname"
decl_stmt|;
DECL|field|OLD_SNAPSHOT_NAME_PARAM
specifier|public
specifier|static
specifier|final
name|String
name|OLD_SNAPSHOT_NAME_PARAM
init|=
literal|"oldsnapshotname"
decl_stmt|;
DECL|field|DEFAULT_PERMISSION
specifier|public
specifier|static
specifier|final
name|Short
name|DEFAULT_PERMISSION
init|=
literal|0755
decl_stmt|;
DECL|field|ACLSPEC_DEFAULT
specifier|public
specifier|static
specifier|final
name|String
name|ACLSPEC_DEFAULT
init|=
literal|""
decl_stmt|;
DECL|field|RENAME_JSON
specifier|public
specifier|static
specifier|final
name|String
name|RENAME_JSON
init|=
literal|"boolean"
decl_stmt|;
DECL|field|TRUNCATE_JSON
specifier|public
specifier|static
specifier|final
name|String
name|TRUNCATE_JSON
init|=
literal|"boolean"
decl_stmt|;
DECL|field|DELETE_JSON
specifier|public
specifier|static
specifier|final
name|String
name|DELETE_JSON
init|=
literal|"boolean"
decl_stmt|;
DECL|field|MKDIRS_JSON
specifier|public
specifier|static
specifier|final
name|String
name|MKDIRS_JSON
init|=
literal|"boolean"
decl_stmt|;
DECL|field|HOME_DIR_JSON
specifier|public
specifier|static
specifier|final
name|String
name|HOME_DIR_JSON
init|=
literal|"Path"
decl_stmt|;
DECL|field|TRASH_DIR_JSON
specifier|public
specifier|static
specifier|final
name|String
name|TRASH_DIR_JSON
init|=
literal|"Path"
decl_stmt|;
DECL|field|SET_REPLICATION_JSON
specifier|public
specifier|static
specifier|final
name|String
name|SET_REPLICATION_JSON
init|=
literal|"boolean"
decl_stmt|;
DECL|field|UPLOAD_CONTENT_TYPE
specifier|public
specifier|static
specifier|final
name|String
name|UPLOAD_CONTENT_TYPE
init|=
literal|"application/octet-stream"
decl_stmt|;
DECL|field|SNAPSHOT_JSON
specifier|public
specifier|static
specifier|final
name|String
name|SNAPSHOT_JSON
init|=
literal|"Path"
decl_stmt|;
DECL|enum|FILE_TYPE
specifier|public
enum|enum
name|FILE_TYPE
block|{
DECL|enumConstant|FILE
DECL|enumConstant|DIRECTORY
DECL|enumConstant|SYMLINK
name|FILE
block|,
name|DIRECTORY
block|,
name|SYMLINK
block|;
DECL|method|getType (FileStatus fileStatus)
specifier|public
specifier|static
name|FILE_TYPE
name|getType
parameter_list|(
name|FileStatus
name|fileStatus
parameter_list|)
block|{
if|if
condition|(
name|fileStatus
operator|.
name|isFile
argument_list|()
condition|)
block|{
return|return
name|FILE
return|;
block|}
if|if
condition|(
name|fileStatus
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
return|return
name|DIRECTORY
return|;
block|}
if|if
condition|(
name|fileStatus
operator|.
name|isSymlink
argument_list|()
condition|)
block|{
return|return
name|SYMLINK
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Could not determine filetype for: "
operator|+
name|fileStatus
operator|.
name|getPath
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|field|FILE_STATUSES_JSON
specifier|public
specifier|static
specifier|final
name|String
name|FILE_STATUSES_JSON
init|=
literal|"FileStatuses"
decl_stmt|;
DECL|field|FILE_STATUS_JSON
specifier|public
specifier|static
specifier|final
name|String
name|FILE_STATUS_JSON
init|=
literal|"FileStatus"
decl_stmt|;
DECL|field|PATH_SUFFIX_JSON
specifier|public
specifier|static
specifier|final
name|String
name|PATH_SUFFIX_JSON
init|=
literal|"pathSuffix"
decl_stmt|;
DECL|field|TYPE_JSON
specifier|public
specifier|static
specifier|final
name|String
name|TYPE_JSON
init|=
literal|"type"
decl_stmt|;
DECL|field|LENGTH_JSON
specifier|public
specifier|static
specifier|final
name|String
name|LENGTH_JSON
init|=
literal|"length"
decl_stmt|;
DECL|field|OWNER_JSON
specifier|public
specifier|static
specifier|final
name|String
name|OWNER_JSON
init|=
literal|"owner"
decl_stmt|;
DECL|field|GROUP_JSON
specifier|public
specifier|static
specifier|final
name|String
name|GROUP_JSON
init|=
literal|"group"
decl_stmt|;
DECL|field|PERMISSION_JSON
specifier|public
specifier|static
specifier|final
name|String
name|PERMISSION_JSON
init|=
literal|"permission"
decl_stmt|;
DECL|field|ACCESS_TIME_JSON
specifier|public
specifier|static
specifier|final
name|String
name|ACCESS_TIME_JSON
init|=
literal|"accessTime"
decl_stmt|;
DECL|field|MODIFICATION_TIME_JSON
specifier|public
specifier|static
specifier|final
name|String
name|MODIFICATION_TIME_JSON
init|=
literal|"modificationTime"
decl_stmt|;
DECL|field|BLOCK_SIZE_JSON
specifier|public
specifier|static
specifier|final
name|String
name|BLOCK_SIZE_JSON
init|=
literal|"blockSize"
decl_stmt|;
DECL|field|REPLICATION_JSON
specifier|public
specifier|static
specifier|final
name|String
name|REPLICATION_JSON
init|=
literal|"replication"
decl_stmt|;
DECL|field|XATTRS_JSON
specifier|public
specifier|static
specifier|final
name|String
name|XATTRS_JSON
init|=
literal|"XAttrs"
decl_stmt|;
DECL|field|XATTR_NAME_JSON
specifier|public
specifier|static
specifier|final
name|String
name|XATTR_NAME_JSON
init|=
literal|"name"
decl_stmt|;
DECL|field|XATTR_VALUE_JSON
specifier|public
specifier|static
specifier|final
name|String
name|XATTR_VALUE_JSON
init|=
literal|"value"
decl_stmt|;
DECL|field|XATTRNAMES_JSON
specifier|public
specifier|static
specifier|final
name|String
name|XATTRNAMES_JSON
init|=
literal|"XAttrNames"
decl_stmt|;
DECL|field|FILE_CHECKSUM_JSON
specifier|public
specifier|static
specifier|final
name|String
name|FILE_CHECKSUM_JSON
init|=
literal|"FileChecksum"
decl_stmt|;
DECL|field|CHECKSUM_ALGORITHM_JSON
specifier|public
specifier|static
specifier|final
name|String
name|CHECKSUM_ALGORITHM_JSON
init|=
literal|"algorithm"
decl_stmt|;
DECL|field|CHECKSUM_BYTES_JSON
specifier|public
specifier|static
specifier|final
name|String
name|CHECKSUM_BYTES_JSON
init|=
literal|"bytes"
decl_stmt|;
DECL|field|CHECKSUM_LENGTH_JSON
specifier|public
specifier|static
specifier|final
name|String
name|CHECKSUM_LENGTH_JSON
init|=
literal|"length"
decl_stmt|;
DECL|field|CONTENT_SUMMARY_JSON
specifier|public
specifier|static
specifier|final
name|String
name|CONTENT_SUMMARY_JSON
init|=
literal|"ContentSummary"
decl_stmt|;
DECL|field|CONTENT_SUMMARY_DIRECTORY_COUNT_JSON
specifier|public
specifier|static
specifier|final
name|String
name|CONTENT_SUMMARY_DIRECTORY_COUNT_JSON
init|=
literal|"directoryCount"
decl_stmt|;
DECL|field|CONTENT_SUMMARY_FILE_COUNT_JSON
specifier|public
specifier|static
specifier|final
name|String
name|CONTENT_SUMMARY_FILE_COUNT_JSON
init|=
literal|"fileCount"
decl_stmt|;
DECL|field|CONTENT_SUMMARY_LENGTH_JSON
specifier|public
specifier|static
specifier|final
name|String
name|CONTENT_SUMMARY_LENGTH_JSON
init|=
literal|"length"
decl_stmt|;
DECL|field|QUOTA_USAGE_JSON
specifier|public
specifier|static
specifier|final
name|String
name|QUOTA_USAGE_JSON
init|=
literal|"QuotaUsage"
decl_stmt|;
DECL|field|QUOTA_USAGE_FILE_AND_DIRECTORY_COUNT_JSON
specifier|public
specifier|static
specifier|final
name|String
name|QUOTA_USAGE_FILE_AND_DIRECTORY_COUNT_JSON
init|=
literal|"fileAndDirectoryCount"
decl_stmt|;
DECL|field|QUOTA_USAGE_QUOTA_JSON
specifier|public
specifier|static
specifier|final
name|String
name|QUOTA_USAGE_QUOTA_JSON
init|=
literal|"quota"
decl_stmt|;
DECL|field|QUOTA_USAGE_SPACE_CONSUMED_JSON
specifier|public
specifier|static
specifier|final
name|String
name|QUOTA_USAGE_SPACE_CONSUMED_JSON
init|=
literal|"spaceConsumed"
decl_stmt|;
DECL|field|QUOTA_USAGE_SPACE_QUOTA_JSON
specifier|public
specifier|static
specifier|final
name|String
name|QUOTA_USAGE_SPACE_QUOTA_JSON
init|=
literal|"spaceQuota"
decl_stmt|;
DECL|field|QUOTA_USAGE_CONSUMED_JSON
specifier|public
specifier|static
specifier|final
name|String
name|QUOTA_USAGE_CONSUMED_JSON
init|=
literal|"consumed"
decl_stmt|;
DECL|field|QUOTA_USAGE_TYPE_QUOTA_JSON
specifier|public
specifier|static
specifier|final
name|String
name|QUOTA_USAGE_TYPE_QUOTA_JSON
init|=
literal|"typeQuota"
decl_stmt|;
DECL|field|ACL_STATUS_JSON
specifier|public
specifier|static
specifier|final
name|String
name|ACL_STATUS_JSON
init|=
literal|"AclStatus"
decl_stmt|;
DECL|field|ACL_STICKY_BIT_JSON
specifier|public
specifier|static
specifier|final
name|String
name|ACL_STICKY_BIT_JSON
init|=
literal|"stickyBit"
decl_stmt|;
DECL|field|ACL_ENTRIES_JSON
specifier|public
specifier|static
specifier|final
name|String
name|ACL_ENTRIES_JSON
init|=
literal|"entries"
decl_stmt|;
DECL|field|ACL_BIT_JSON
specifier|public
specifier|static
specifier|final
name|String
name|ACL_BIT_JSON
init|=
literal|"aclBit"
decl_stmt|;
DECL|field|ENC_BIT_JSON
specifier|public
specifier|static
specifier|final
name|String
name|ENC_BIT_JSON
init|=
literal|"encBit"
decl_stmt|;
DECL|field|EC_BIT_JSON
specifier|public
specifier|static
specifier|final
name|String
name|EC_BIT_JSON
init|=
literal|"ecBit"
decl_stmt|;
DECL|field|SNAPSHOT_BIT_JSON
specifier|public
specifier|static
specifier|final
name|String
name|SNAPSHOT_BIT_JSON
init|=
literal|"snapshotEnabled"
decl_stmt|;
DECL|field|DIRECTORY_LISTING_JSON
specifier|public
specifier|static
specifier|final
name|String
name|DIRECTORY_LISTING_JSON
init|=
literal|"DirectoryListing"
decl_stmt|;
DECL|field|PARTIAL_LISTING_JSON
specifier|public
specifier|static
specifier|final
name|String
name|PARTIAL_LISTING_JSON
init|=
literal|"partialListing"
decl_stmt|;
DECL|field|REMAINING_ENTRIES_JSON
specifier|public
specifier|static
specifier|final
name|String
name|REMAINING_ENTRIES_JSON
init|=
literal|"remainingEntries"
decl_stmt|;
DECL|field|STORAGE_POLICIES_JSON
specifier|public
specifier|static
specifier|final
name|String
name|STORAGE_POLICIES_JSON
init|=
literal|"BlockStoragePolicies"
decl_stmt|;
DECL|field|STORAGE_POLICY_JSON
specifier|public
specifier|static
specifier|final
name|String
name|STORAGE_POLICY_JSON
init|=
literal|"BlockStoragePolicy"
decl_stmt|;
DECL|field|HTTP_TEMPORARY_REDIRECT
specifier|public
specifier|static
specifier|final
name|int
name|HTTP_TEMPORARY_REDIRECT
init|=
literal|307
decl_stmt|;
DECL|field|HTTP_GET
specifier|private
specifier|static
specifier|final
name|String
name|HTTP_GET
init|=
literal|"GET"
decl_stmt|;
DECL|field|HTTP_PUT
specifier|private
specifier|static
specifier|final
name|String
name|HTTP_PUT
init|=
literal|"PUT"
decl_stmt|;
DECL|field|HTTP_POST
specifier|private
specifier|static
specifier|final
name|String
name|HTTP_POST
init|=
literal|"POST"
decl_stmt|;
DECL|field|HTTP_DELETE
specifier|private
specifier|static
specifier|final
name|String
name|HTTP_DELETE
init|=
literal|"DELETE"
decl_stmt|;
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|enum|Operation
specifier|public
enum|enum
name|Operation
block|{
DECL|enumConstant|OPEN
DECL|enumConstant|GETFILESTATUS
DECL|enumConstant|LISTSTATUS
name|OPEN
parameter_list|(
name|HTTP_GET
parameter_list|)
operator|,
constructor|GETFILESTATUS(HTTP_GET
block|)
enum|,
name|LISTSTATUS
parameter_list|(
name|HTTP_GET
parameter_list|)
operator|,
DECL|enumConstant|GETHOMEDIRECTORY
DECL|enumConstant|GETCONTENTSUMMARY
constructor|GETHOMEDIRECTORY(HTTP_GET
block|)
operator|,
name|GETCONTENTSUMMARY
argument_list|(
name|HTTP_GET
argument_list|)
operator|,
DECL|enumConstant|GETQUOTAUSAGE
DECL|enumConstant|GETFILECHECKSUM
name|GETQUOTAUSAGE
argument_list|(
name|HTTP_GET
argument_list|)
operator|,
name|GETFILECHECKSUM
argument_list|(
name|HTTP_GET
argument_list|)
operator|,
DECL|enumConstant|GETFILEBLOCKLOCATIONS
DECL|enumConstant|INSTRUMENTATION
name|GETFILEBLOCKLOCATIONS
argument_list|(
name|HTTP_GET
argument_list|)
operator|,
name|INSTRUMENTATION
argument_list|(
name|HTTP_GET
argument_list|)
operator|,
DECL|enumConstant|GETACLSTATUS
DECL|enumConstant|GETTRASHROOT
name|GETACLSTATUS
argument_list|(
name|HTTP_GET
argument_list|)
operator|,
name|GETTRASHROOT
argument_list|(
name|HTTP_GET
argument_list|)
operator|,
DECL|enumConstant|APPEND
DECL|enumConstant|CONCAT
DECL|enumConstant|TRUNCATE
name|APPEND
argument_list|(
name|HTTP_POST
argument_list|)
operator|,
name|CONCAT
argument_list|(
name|HTTP_POST
argument_list|)
operator|,
name|TRUNCATE
argument_list|(
name|HTTP_POST
argument_list|)
operator|,
DECL|enumConstant|CREATE
DECL|enumConstant|MKDIRS
DECL|enumConstant|RENAME
DECL|enumConstant|SETOWNER
name|CREATE
argument_list|(
name|HTTP_PUT
argument_list|)
operator|,
name|MKDIRS
argument_list|(
name|HTTP_PUT
argument_list|)
operator|,
name|RENAME
argument_list|(
name|HTTP_PUT
argument_list|)
operator|,
name|SETOWNER
argument_list|(
name|HTTP_PUT
argument_list|)
operator|,
DECL|enumConstant|SETPERMISSION
DECL|enumConstant|SETREPLICATION
DECL|enumConstant|SETTIMES
name|SETPERMISSION
argument_list|(
name|HTTP_PUT
argument_list|)
operator|,
name|SETREPLICATION
argument_list|(
name|HTTP_PUT
argument_list|)
operator|,
name|SETTIMES
argument_list|(
name|HTTP_PUT
argument_list|)
operator|,
DECL|enumConstant|MODIFYACLENTRIES
DECL|enumConstant|REMOVEACLENTRIES
name|MODIFYACLENTRIES
argument_list|(
name|HTTP_PUT
argument_list|)
operator|,
name|REMOVEACLENTRIES
argument_list|(
name|HTTP_PUT
argument_list|)
operator|,
DECL|enumConstant|REMOVEDEFAULTACL
DECL|enumConstant|REMOVEACL
DECL|enumConstant|SETACL
name|REMOVEDEFAULTACL
argument_list|(
name|HTTP_PUT
argument_list|)
operator|,
name|REMOVEACL
argument_list|(
name|HTTP_PUT
argument_list|)
operator|,
name|SETACL
argument_list|(
name|HTTP_PUT
argument_list|)
operator|,
DECL|enumConstant|DELETE
DECL|enumConstant|SETXATTR
DECL|enumConstant|GETXATTRS
name|DELETE
argument_list|(
name|HTTP_DELETE
argument_list|)
operator|,
name|SETXATTR
argument_list|(
name|HTTP_PUT
argument_list|)
operator|,
name|GETXATTRS
argument_list|(
name|HTTP_GET
argument_list|)
operator|,
DECL|enumConstant|REMOVEXATTR
DECL|enumConstant|LISTXATTRS
DECL|enumConstant|LISTSTATUS_BATCH
name|REMOVEXATTR
argument_list|(
name|HTTP_PUT
argument_list|)
operator|,
name|LISTXATTRS
argument_list|(
name|HTTP_GET
argument_list|)
operator|,
name|LISTSTATUS_BATCH
argument_list|(
name|HTTP_GET
argument_list|)
operator|,
DECL|enumConstant|GETALLSTORAGEPOLICY
DECL|enumConstant|GETSTORAGEPOLICY
name|GETALLSTORAGEPOLICY
argument_list|(
name|HTTP_GET
argument_list|)
operator|,
name|GETSTORAGEPOLICY
argument_list|(
name|HTTP_GET
argument_list|)
operator|,
DECL|enumConstant|SETSTORAGEPOLICY
DECL|enumConstant|UNSETSTORAGEPOLICY
name|SETSTORAGEPOLICY
argument_list|(
name|HTTP_PUT
argument_list|)
operator|,
name|UNSETSTORAGEPOLICY
argument_list|(
name|HTTP_POST
argument_list|)
operator|,
DECL|enumConstant|ALLOWSNAPSHOT
DECL|enumConstant|DISALLOWSNAPSHOT
name|ALLOWSNAPSHOT
argument_list|(
name|HTTP_PUT
argument_list|)
operator|,
name|DISALLOWSNAPSHOT
argument_list|(
name|HTTP_PUT
argument_list|)
operator|,
DECL|enumConstant|CREATESNAPSHOT
DECL|enumConstant|DELETESNAPSHOT
name|CREATESNAPSHOT
argument_list|(
name|HTTP_PUT
argument_list|)
operator|,
name|DELETESNAPSHOT
argument_list|(
name|HTTP_DELETE
argument_list|)
operator|,
DECL|enumConstant|RENAMESNAPSHOT
DECL|enumConstant|GETSNAPSHOTDIFF
name|RENAMESNAPSHOT
argument_list|(
name|HTTP_PUT
argument_list|)
operator|,
name|GETSNAPSHOTDIFF
argument_list|(
name|HTTP_GET
argument_list|)
operator|,
DECL|enumConstant|GETSNAPSHOTTABLEDIRECTORYLIST
name|GETSNAPSHOTTABLEDIRECTORYLIST
argument_list|(
name|HTTP_GET
argument_list|)
expr_stmt|;
end_class

begin_decl_stmt
DECL|field|httpMethod
specifier|private
name|String
name|httpMethod
decl_stmt|;
end_decl_stmt

begin_expr_stmt
DECL|method|Operation (String httpMethod)
name|Operation
argument_list|(
name|String
name|httpMethod
argument_list|)
block|{
name|this
operator|.
name|httpMethod
operator|=
name|httpMethod
block|;     }
DECL|method|getMethod ()
specifier|public
name|String
name|getMethod
argument_list|()
block|{
return|return
name|httpMethod
return|;
block|}
end_expr_stmt

begin_decl_stmt
unit|}    private
DECL|field|authURL
name|DelegationTokenAuthenticatedURL
name|authURL
decl_stmt|;
end_decl_stmt

begin_decl_stmt
DECL|field|authToken
specifier|private
name|DelegationTokenAuthenticatedURL
operator|.
name|Token
name|authToken
init|=
operator|new
name|DelegationTokenAuthenticatedURL
operator|.
name|Token
argument_list|()
decl_stmt|;
end_decl_stmt

begin_decl_stmt
DECL|field|uri
specifier|private
name|URI
name|uri
decl_stmt|;
end_decl_stmt

begin_decl_stmt
DECL|field|workingDir
specifier|private
name|Path
name|workingDir
decl_stmt|;
end_decl_stmt

begin_decl_stmt
DECL|field|realUser
specifier|private
name|UserGroupInformation
name|realUser
decl_stmt|;
end_decl_stmt

begin_comment
comment|/**    * Convenience method that creates a<code>HttpURLConnection</code> for the    * HttpFSServer file system operations.    *<p>    * This methods performs and injects any needed authentication credentials    * via the {@link #getConnection(URL, String)} method    *    * @param method the HTTP method.    * @param params the query string parameters.    * @param path the file path    * @param makeQualified if the path should be 'makeQualified'    *    * @return a<code>HttpURLConnection</code> for the HttpFSServer server,    *         authenticated and ready to use for the specified path and file system operation.    *    * @throws IOException thrown if an IO error occurs.    */
end_comment

begin_function
DECL|method|getConnection (final String method, Map<String, String> params, Path path, boolean makeQualified)
specifier|private
name|HttpURLConnection
name|getConnection
parameter_list|(
specifier|final
name|String
name|method
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|,
name|Path
name|path
parameter_list|,
name|boolean
name|makeQualified
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getConnection
argument_list|(
name|method
argument_list|,
name|params
argument_list|,
literal|null
argument_list|,
name|path
argument_list|,
name|makeQualified
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Convenience method that creates a<code>HttpURLConnection</code> for the    * HttpFSServer file system operations.    *<p/>    * This methods performs and injects any needed authentication credentials    * via the {@link #getConnection(URL, String)} method    *    * @param method the HTTP method.    * @param params the query string parameters.    * @param multiValuedParams multi valued parameters of the query string    * @param path the file path    * @param makeQualified if the path should be 'makeQualified'    *    * @return HttpURLConnection a<code>HttpURLConnection</code> for the    *         HttpFSServer server, authenticated and ready to use for the    *         specified path and file system operation.    *    * @throws IOException thrown if an IO error occurs.    */
end_comment

begin_function
DECL|method|getConnection (final String method, Map<String, String> params, Map<String, List<String>> multiValuedParams, Path path, boolean makeQualified)
specifier|private
name|HttpURLConnection
name|getConnection
parameter_list|(
specifier|final
name|String
name|method
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|multiValuedParams
parameter_list|,
name|Path
name|path
parameter_list|,
name|boolean
name|makeQualified
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|makeQualified
condition|)
block|{
name|path
operator|=
name|makeQualified
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
specifier|final
name|URL
name|url
init|=
name|HttpFSUtils
operator|.
name|createURL
argument_list|(
name|path
argument_list|,
name|params
argument_list|,
name|multiValuedParams
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|HttpURLConnection
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|HttpURLConnection
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getConnection
argument_list|(
name|url
argument_list|,
name|method
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
if|if
condition|(
name|ex
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|ex
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
end_function

begin_comment
comment|/**    * Convenience method that creates a<code>HttpURLConnection</code> for the specified URL.    *<p>    * This methods performs and injects any needed authentication credentials.    *    * @param url url to connect to.    * @param method the HTTP method.    *    * @return a<code>HttpURLConnection</code> for the HttpFSServer server, authenticated and ready to use for    *         the specified path and file system operation.    *    * @throws IOException thrown if an IO error occurs.    */
end_comment

begin_function
DECL|method|getConnection (URL url, String method)
specifier|private
name|HttpURLConnection
name|getConnection
parameter_list|(
name|URL
name|url
parameter_list|,
name|String
name|method
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|HttpURLConnection
name|conn
init|=
name|authURL
operator|.
name|openConnection
argument_list|(
name|url
argument_list|,
name|authToken
argument_list|)
decl_stmt|;
name|conn
operator|.
name|setRequestMethod
argument_list|(
name|method
argument_list|)
expr_stmt|;
if|if
condition|(
name|method
operator|.
name|equals
argument_list|(
name|HTTP_POST
argument_list|)
operator|||
name|method
operator|.
name|equals
argument_list|(
name|HTTP_PUT
argument_list|)
condition|)
block|{
name|conn
operator|.
name|setDoOutput
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|conn
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
end_function

begin_comment
comment|/**    * Called after a new FileSystem instance is constructed.    *    * @param name a uri whose authority section names the host, port, etc. for this FileSystem    * @param conf the configuration    */
end_comment

begin_function
annotation|@
name|Override
DECL|method|initialize (URI name, Configuration conf)
specifier|public
name|void
name|initialize
parameter_list|(
name|URI
name|name
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
comment|//the real use is the one that has the Kerberos credentials needed for
comment|//SPNEGO to work
name|realUser
operator|=
name|ugi
operator|.
name|getRealUser
argument_list|()
expr_stmt|;
if|if
condition|(
name|realUser
operator|==
literal|null
condition|)
block|{
name|realUser
operator|=
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|initialize
argument_list|(
name|name
argument_list|,
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
name|uri
operator|=
operator|new
name|URI
argument_list|(
name|name
operator|.
name|getScheme
argument_list|()
operator|+
literal|"://"
operator|+
name|name
operator|.
name|getAuthority
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
name|Class
argument_list|<
name|?
extends|extends
name|DelegationTokenAuthenticator
argument_list|>
name|klass
init|=
name|getConf
argument_list|()
operator|.
name|getClass
argument_list|(
literal|"httpfs.authenticator.class"
argument_list|,
name|KerberosDelegationTokenAuthenticator
operator|.
name|class
argument_list|,
name|DelegationTokenAuthenticator
operator|.
name|class
argument_list|)
decl_stmt|;
name|DelegationTokenAuthenticator
name|authenticator
init|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|klass
argument_list|,
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|authURL
operator|=
operator|new
name|DelegationTokenAuthenticatedURL
argument_list|(
name|authenticator
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|getScheme ()
specifier|public
name|String
name|getScheme
parameter_list|()
block|{
return|return
name|SCHEME
return|;
block|}
end_function

begin_comment
comment|/**    * Returns a URI whose scheme and authority identify this FileSystem.    *    * @return the URI whose scheme and authority identify this FileSystem.    */
end_comment

begin_function
annotation|@
name|Override
DECL|method|getUri ()
specifier|public
name|URI
name|getUri
parameter_list|()
block|{
return|return
name|uri
return|;
block|}
end_function

begin_comment
comment|/**    * Get the default port for this file system.    * @return the default port or 0 if there isn't one    */
end_comment

begin_function
annotation|@
name|Override
DECL|method|getDefaultPort ()
specifier|protected
name|int
name|getDefaultPort
parameter_list|()
block|{
return|return
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HTTP_PORT_DEFAULT
return|;
block|}
end_function

begin_comment
comment|/**    * HttpFSServer subclass of the<code>FSDataInputStream</code>.    *<p>    * This implementation does not support the    *<code>PositionReadable</code> and<code>Seekable</code> methods.    */
end_comment

begin_class
DECL|class|HttpFSDataInputStream
specifier|private
specifier|static
class|class
name|HttpFSDataInputStream
extends|extends
name|FilterInputStream
implements|implements
name|Seekable
implements|,
name|PositionedReadable
block|{
DECL|method|HttpFSDataInputStream (InputStream in, int bufferSize)
specifier|protected
name|HttpFSDataInputStream
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|int
name|bufferSize
parameter_list|)
block|{
name|super
argument_list|(
operator|new
name|BufferedInputStream
argument_list|(
name|in
argument_list|,
name|bufferSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|read (long position, byte[] buffer, int offset, int length)
specifier|public
name|int
name|read
parameter_list|(
name|long
name|position
parameter_list|,
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|readFully (long position, byte[] buffer, int offset, int length)
specifier|public
name|void
name|readFully
parameter_list|(
name|long
name|position
parameter_list|,
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|readFully (long position, byte[] buffer)
specifier|public
name|void
name|readFully
parameter_list|(
name|long
name|position
parameter_list|,
name|byte
index|[]
name|buffer
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|seek (long pos)
specifier|public
name|void
name|seek
parameter_list|(
name|long
name|pos
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getPos ()
specifier|public
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|seekToNewSource (long targetPos)
specifier|public
name|boolean
name|seekToNewSource
parameter_list|(
name|long
name|targetPos
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
end_class

begin_comment
comment|/**    * Opens an FSDataInputStream at the indicated Path.    *<p>    * IMPORTANT: the returned<code>FSDataInputStream</code> does not support the    *<code>PositionReadable</code> and<code>Seekable</code> methods.    *    * @param f the file name to open    * @param bufferSize the size of the buffer to be used.    */
end_comment

begin_function
annotation|@
name|Override
DECL|method|open (Path f, int bufferSize)
specifier|public
name|FSDataInputStream
name|open
parameter_list|(
name|Path
name|f
parameter_list|,
name|int
name|bufferSize
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|OP_PARAM
argument_list|,
name|Operation
operator|.
name|OPEN
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|HttpURLConnection
name|conn
init|=
name|getConnection
argument_list|(
name|Operation
operator|.
name|OPEN
operator|.
name|getMethod
argument_list|()
argument_list|,
name|params
argument_list|,
name|f
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|HttpExceptionUtils
operator|.
name|validateResponse
argument_list|(
name|conn
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
return|return
operator|new
name|FSDataInputStream
argument_list|(
operator|new
name|HttpFSDataInputStream
argument_list|(
name|conn
operator|.
name|getInputStream
argument_list|()
argument_list|,
name|bufferSize
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * HttpFSServer subclass of the<code>FSDataOutputStream</code>.    *<p>    * This implementation closes the underlying HTTP connection validating the Http connection status    * at closing time.    */
end_comment

begin_class
DECL|class|HttpFSDataOutputStream
specifier|private
specifier|static
class|class
name|HttpFSDataOutputStream
extends|extends
name|FSDataOutputStream
block|{
DECL|field|conn
specifier|private
name|HttpURLConnection
name|conn
decl_stmt|;
DECL|field|closeStatus
specifier|private
name|int
name|closeStatus
decl_stmt|;
DECL|method|HttpFSDataOutputStream (HttpURLConnection conn, OutputStream out, int closeStatus, Statistics stats)
specifier|public
name|HttpFSDataOutputStream
parameter_list|(
name|HttpURLConnection
name|conn
parameter_list|,
name|OutputStream
name|out
parameter_list|,
name|int
name|closeStatus
parameter_list|,
name|Statistics
name|stats
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|out
argument_list|,
name|stats
argument_list|)
expr_stmt|;
name|this
operator|.
name|conn
operator|=
name|conn
expr_stmt|;
name|this
operator|.
name|closeStatus
operator|=
name|closeStatus
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|HttpExceptionUtils
operator|.
name|validateResponse
argument_list|(
name|conn
argument_list|,
name|closeStatus
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_comment
comment|/**    * Converts a<code>FsPermission</code> to a Unix octal representation.    *    * @param p the permission.    *    * @return the Unix string symbolic reprentation.    */
end_comment

begin_function
DECL|method|permissionToString (FsPermission p)
specifier|public
specifier|static
name|String
name|permissionToString
parameter_list|(
name|FsPermission
name|p
parameter_list|)
block|{
return|return
name|Integer
operator|.
name|toString
argument_list|(
operator|(
name|p
operator|==
literal|null
operator|)
condition|?
name|DEFAULT_PERMISSION
else|:
name|p
operator|.
name|toShort
argument_list|()
argument_list|,
literal|8
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/*    * Common handling for uploading data for create and append operations.    */
end_comment

begin_function
DECL|method|uploadData (String method, Path f, Map<String, String> params, int bufferSize, int expectedStatus)
specifier|private
name|FSDataOutputStream
name|uploadData
parameter_list|(
name|String
name|method
parameter_list|,
name|Path
name|f
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|int
name|expectedStatus
parameter_list|)
throws|throws
name|IOException
block|{
name|HttpURLConnection
name|conn
init|=
name|getConnection
argument_list|(
name|method
argument_list|,
name|params
argument_list|,
name|f
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|conn
operator|.
name|setInstanceFollowRedirects
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|boolean
name|exceptionAlreadyHandled
init|=
literal|false
decl_stmt|;
try|try
block|{
if|if
condition|(
name|conn
operator|.
name|getResponseCode
argument_list|()
operator|==
name|HTTP_TEMPORARY_REDIRECT
condition|)
block|{
name|exceptionAlreadyHandled
operator|=
literal|true
expr_stmt|;
name|String
name|location
init|=
name|conn
operator|.
name|getHeaderField
argument_list|(
literal|"Location"
argument_list|)
decl_stmt|;
if|if
condition|(
name|location
operator|!=
literal|null
condition|)
block|{
name|conn
operator|=
name|getConnection
argument_list|(
operator|new
name|URL
argument_list|(
name|location
argument_list|)
argument_list|,
name|method
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setRequestProperty
argument_list|(
literal|"Content-Type"
argument_list|,
name|UPLOAD_CONTENT_TYPE
argument_list|)
expr_stmt|;
try|try
block|{
name|OutputStream
name|os
init|=
operator|new
name|BufferedOutputStream
argument_list|(
name|conn
operator|.
name|getOutputStream
argument_list|()
argument_list|,
name|bufferSize
argument_list|)
decl_stmt|;
return|return
operator|new
name|HttpFSDataOutputStream
argument_list|(
name|conn
argument_list|,
name|os
argument_list|,
name|expectedStatus
argument_list|,
name|statistics
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|HttpExceptionUtils
operator|.
name|validateResponse
argument_list|(
name|conn
argument_list|,
name|expectedStatus
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
else|else
block|{
name|HttpExceptionUtils
operator|.
name|validateResponse
argument_list|(
name|conn
argument_list|,
name|HTTP_TEMPORARY_REDIRECT
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Missing HTTP 'Location' header for ["
operator|+
name|conn
operator|.
name|getURL
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"Expected HTTP status was [307], received [{0}]"
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|exceptionAlreadyHandled
condition|)
block|{
throw|throw
name|ex
throw|;
block|}
else|else
block|{
name|HttpExceptionUtils
operator|.
name|validateResponse
argument_list|(
name|conn
argument_list|,
name|HTTP_TEMPORARY_REDIRECT
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
block|}
end_function

begin_comment
comment|/**    * Opens an FSDataOutputStream at the indicated Path with write-progress    * reporting.    *<p>    * IMPORTANT: The<code>Progressable</code> parameter is not used.    *    * @param f the file name to open.    * @param permission file permission.    * @param overwrite if a file with this name already exists, then if true,    * the file will be overwritten, and if false an error will be thrown.    * @param bufferSize the size of the buffer to be used.    * @param replication required block replication for the file.    * @param blockSize block size.    * @param progress progressable.    *    * @throws IOException    * @see #setPermission(Path, FsPermission)    */
end_comment

begin_function
annotation|@
name|Override
DECL|method|create (Path f, FsPermission permission, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)
specifier|public
name|FSDataOutputStream
name|create
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|permission
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|OP_PARAM
argument_list|,
name|Operation
operator|.
name|CREATE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|OVERWRITE_PARAM
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|overwrite
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|REPLICATION_PARAM
argument_list|,
name|Short
operator|.
name|toString
argument_list|(
name|replication
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|BLOCKSIZE_PARAM
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|blockSize
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|PERMISSION_PARAM
argument_list|,
name|permissionToString
argument_list|(
name|permission
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|uploadData
argument_list|(
name|Operation
operator|.
name|CREATE
operator|.
name|getMethod
argument_list|()
argument_list|,
name|f
argument_list|,
name|params
argument_list|,
name|bufferSize
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_CREATED
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Append to an existing file (optional operation).    *<p>    * IMPORTANT: The<code>Progressable</code> parameter is not used.    *    * @param f the existing file to be appended.    * @param bufferSize the size of the buffer to be used.    * @param progress for reporting progress if it is not null.    *    * @throws IOException    */
end_comment

begin_function
annotation|@
name|Override
DECL|method|append (Path f, int bufferSize, Progressable progress)
specifier|public
name|FSDataOutputStream
name|append
parameter_list|(
name|Path
name|f
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|OP_PARAM
argument_list|,
name|Operation
operator|.
name|APPEND
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|uploadData
argument_list|(
name|Operation
operator|.
name|APPEND
operator|.
name|getMethod
argument_list|()
argument_list|,
name|f
argument_list|,
name|params
argument_list|,
name|bufferSize
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Truncate a file.    *     * @param f the file to be truncated.    * @param newLength The size the file is to be truncated to.    *    * @throws IOException    */
end_comment

begin_function
annotation|@
name|Override
DECL|method|truncate (Path f, long newLength)
specifier|public
name|boolean
name|truncate
parameter_list|(
name|Path
name|f
parameter_list|,
name|long
name|newLength
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|OP_PARAM
argument_list|,
name|Operation
operator|.
name|TRUNCATE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|NEW_LENGTH_PARAM
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|newLength
argument_list|)
argument_list|)
expr_stmt|;
name|HttpURLConnection
name|conn
init|=
name|getConnection
argument_list|(
name|Operation
operator|.
name|TRUNCATE
operator|.
name|getMethod
argument_list|()
argument_list|,
name|params
argument_list|,
name|f
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|JSONObject
name|json
init|=
operator|(
name|JSONObject
operator|)
name|HttpFSUtils
operator|.
name|jsonParse
argument_list|(
name|conn
argument_list|)
decl_stmt|;
return|return
operator|(
name|Boolean
operator|)
name|json
operator|.
name|get
argument_list|(
name|TRUNCATE_JSON
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Concat existing files together.    * @param f the path to the target destination.    * @param psrcs the paths to the sources to use for the concatenation.    *    * @throws IOException    */
end_comment

begin_function
annotation|@
name|Override
DECL|method|concat (Path f, Path[] psrcs)
specifier|public
name|void
name|concat
parameter_list|(
name|Path
name|f
parameter_list|,
name|Path
index|[]
name|psrcs
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|strPaths
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|psrcs
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|Path
name|psrc
range|:
name|psrcs
control|)
block|{
name|strPaths
operator|.
name|add
argument_list|(
name|psrc
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|srcs
init|=
name|StringUtils
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|strPaths
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|OP_PARAM
argument_list|,
name|Operation
operator|.
name|CONCAT
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|SOURCES_PARAM
argument_list|,
name|srcs
argument_list|)
expr_stmt|;
name|HttpURLConnection
name|conn
init|=
name|getConnection
argument_list|(
name|Operation
operator|.
name|CONCAT
operator|.
name|getMethod
argument_list|()
argument_list|,
name|params
argument_list|,
name|f
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|HttpExceptionUtils
operator|.
name|validateResponse
argument_list|(
name|conn
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Renames Path src to Path dst.  Can take place on local fs    * or remote DFS.    */
end_comment

begin_function
annotation|@
name|Override
DECL|method|rename (Path src, Path dst)
specifier|public
name|boolean
name|rename
parameter_list|(
name|Path
name|src
parameter_list|,
name|Path
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|OP_PARAM
argument_list|,
name|Operation
operator|.
name|RENAME
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|DESTINATION_PARAM
argument_list|,
name|dst
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|HttpURLConnection
name|conn
init|=
name|getConnection
argument_list|(
name|Operation
operator|.
name|RENAME
operator|.
name|getMethod
argument_list|()
argument_list|,
name|params
argument_list|,
name|src
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|HttpExceptionUtils
operator|.
name|validateResponse
argument_list|(
name|conn
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
operator|(
name|JSONObject
operator|)
name|HttpFSUtils
operator|.
name|jsonParse
argument_list|(
name|conn
argument_list|)
decl_stmt|;
return|return
operator|(
name|Boolean
operator|)
name|json
operator|.
name|get
argument_list|(
name|RENAME_JSON
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Delete a file.    *    * @deprecated Use delete(Path, boolean) instead    */
end_comment

begin_function
annotation|@
name|Deprecated
annotation|@
name|Override
DECL|method|delete (Path f)
specifier|public
name|boolean
name|delete
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|delete
argument_list|(
name|f
argument_list|,
literal|false
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Delete a file.    *    * @param f the path to delete.    * @param recursive if path is a directory and set to    * true, the directory is deleted else throws an exception. In    * case of a file the recursive can be set to either true or false.    *    * @return true if delete is successful else false.    *    * @throws IOException    */
end_comment

begin_function
annotation|@
name|Override
DECL|method|delete (Path f, boolean recursive)
specifier|public
name|boolean
name|delete
parameter_list|(
name|Path
name|f
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|OP_PARAM
argument_list|,
name|Operation
operator|.
name|DELETE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|RECURSIVE_PARAM
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|recursive
argument_list|)
argument_list|)
expr_stmt|;
name|HttpURLConnection
name|conn
init|=
name|getConnection
argument_list|(
name|Operation
operator|.
name|DELETE
operator|.
name|getMethod
argument_list|()
argument_list|,
name|params
argument_list|,
name|f
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|HttpExceptionUtils
operator|.
name|validateResponse
argument_list|(
name|conn
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
operator|(
name|JSONObject
operator|)
name|HttpFSUtils
operator|.
name|jsonParse
argument_list|(
name|conn
argument_list|)
decl_stmt|;
return|return
operator|(
name|Boolean
operator|)
name|json
operator|.
name|get
argument_list|(
name|DELETE_JSON
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|toFileStatuses (JSONObject json, Path f)
specifier|private
name|FileStatus
index|[]
name|toFileStatuses
parameter_list|(
name|JSONObject
name|json
parameter_list|,
name|Path
name|f
parameter_list|)
block|{
name|json
operator|=
operator|(
name|JSONObject
operator|)
name|json
operator|.
name|get
argument_list|(
name|FILE_STATUSES_JSON
argument_list|)
expr_stmt|;
name|JSONArray
name|jsonArray
init|=
operator|(
name|JSONArray
operator|)
name|json
operator|.
name|get
argument_list|(
name|FILE_STATUS_JSON
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|array
init|=
operator|new
name|FileStatus
index|[
name|jsonArray
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|f
operator|=
name|makeQualified
argument_list|(
name|f
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jsonArray
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|array
index|[
name|i
index|]
operator|=
name|createFileStatus
argument_list|(
name|f
argument_list|,
operator|(
name|JSONObject
operator|)
name|jsonArray
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|array
return|;
block|}
end_function

begin_comment
comment|/**    * Get {@link FileStatus} of files/directories in the given path. If path    * corresponds to a file then {@link FileStatus} of that file is returned.    * Else if path represents a directory then {@link FileStatus} of all    * files/directories inside given path is returned.    *    * @param f given path    * @return the statuses of the files/directories in the given path    */
end_comment

begin_function
annotation|@
name|Override
DECL|method|listStatus (Path f)
specifier|public
name|FileStatus
index|[]
name|listStatus
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|OP_PARAM
argument_list|,
name|Operation
operator|.
name|LISTSTATUS
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|HttpURLConnection
name|conn
init|=
name|getConnection
argument_list|(
name|Operation
operator|.
name|LISTSTATUS
operator|.
name|getMethod
argument_list|()
argument_list|,
name|params
argument_list|,
name|f
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|HttpExceptionUtils
operator|.
name|validateResponse
argument_list|(
name|conn
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
operator|(
name|JSONObject
operator|)
name|HttpFSUtils
operator|.
name|jsonParse
argument_list|(
name|conn
argument_list|)
decl_stmt|;
return|return
name|toFileStatuses
argument_list|(
name|json
argument_list|,
name|f
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Get {@link DirectoryEntries} of the given path. {@link DirectoryEntries}    * contains an array of {@link FileStatus}, as well as iteration information.    *    * @param f given path    * @return {@link DirectoryEntries} for given path    */
end_comment

begin_function
annotation|@
name|Override
DECL|method|listStatusBatch (Path f, byte[] token)
specifier|public
name|DirectoryEntries
name|listStatusBatch
parameter_list|(
name|Path
name|f
parameter_list|,
name|byte
index|[]
name|token
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|OP_PARAM
argument_list|,
name|Operation
operator|.
name|LISTSTATUS_BATCH
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|token
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|put
argument_list|(
name|START_AFTER_PARAM
argument_list|,
operator|new
name|String
argument_list|(
name|token
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|HttpURLConnection
name|conn
init|=
name|getConnection
argument_list|(
name|Operation
operator|.
name|LISTSTATUS_BATCH
operator|.
name|getMethod
argument_list|()
argument_list|,
name|params
argument_list|,
name|f
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|HttpExceptionUtils
operator|.
name|validateResponse
argument_list|(
name|conn
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
comment|// Parse the FileStatus array
name|JSONObject
name|json
init|=
operator|(
name|JSONObject
operator|)
name|HttpFSUtils
operator|.
name|jsonParse
argument_list|(
name|conn
argument_list|)
decl_stmt|;
name|JSONObject
name|listing
init|=
operator|(
name|JSONObject
operator|)
name|json
operator|.
name|get
argument_list|(
name|DIRECTORY_LISTING_JSON
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|statuses
init|=
name|toFileStatuses
argument_list|(
operator|(
name|JSONObject
operator|)
name|listing
operator|.
name|get
argument_list|(
name|PARTIAL_LISTING_JSON
argument_list|)
argument_list|,
name|f
argument_list|)
decl_stmt|;
comment|// New token is the last FileStatus entry
name|byte
index|[]
name|newToken
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|statuses
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|newToken
operator|=
name|statuses
index|[
name|statuses
operator|.
name|length
operator|-
literal|1
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
block|}
comment|// Parse the remainingEntries boolean into hasMore
specifier|final
name|long
name|remainingEntries
init|=
operator|(
name|Long
operator|)
name|listing
operator|.
name|get
argument_list|(
name|REMAINING_ENTRIES_JSON
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|hasMore
init|=
name|remainingEntries
operator|>
literal|0
condition|?
literal|true
else|:
literal|false
decl_stmt|;
return|return
operator|new
name|DirectoryEntries
argument_list|(
name|statuses
argument_list|,
name|newToken
argument_list|,
name|hasMore
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Set the current working directory for the given file system. All relative    * paths will be resolved relative to it.    *    * @param newDir new directory.    */
end_comment

begin_function
annotation|@
name|Override
DECL|method|setWorkingDirectory (Path newDir)
specifier|public
name|void
name|setWorkingDirectory
parameter_list|(
name|Path
name|newDir
parameter_list|)
block|{
name|workingDir
operator|=
name|newDir
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Get the current working directory for the given file system    *    * @return the directory pathname    */
end_comment

begin_function
annotation|@
name|Override
DECL|method|getWorkingDirectory ()
specifier|public
name|Path
name|getWorkingDirectory
parameter_list|()
block|{
if|if
condition|(
name|workingDir
operator|==
literal|null
condition|)
block|{
name|workingDir
operator|=
name|getHomeDirectory
argument_list|()
expr_stmt|;
block|}
return|return
name|workingDir
return|;
block|}
end_function

begin_comment
comment|/**    * Make the given file and all non-existent parents into    * directories. Has the semantics of Unix 'mkdir -p'.    * Existence of the directory hierarchy is not an error.    */
end_comment

begin_function
annotation|@
name|Override
DECL|method|mkdirs (Path f, FsPermission permission)
specifier|public
name|boolean
name|mkdirs
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|OP_PARAM
argument_list|,
name|Operation
operator|.
name|MKDIRS
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|PERMISSION_PARAM
argument_list|,
name|permissionToString
argument_list|(
name|permission
argument_list|)
argument_list|)
expr_stmt|;
name|HttpURLConnection
name|conn
init|=
name|getConnection
argument_list|(
name|Operation
operator|.
name|MKDIRS
operator|.
name|getMethod
argument_list|()
argument_list|,
name|params
argument_list|,
name|f
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|HttpExceptionUtils
operator|.
name|validateResponse
argument_list|(
name|conn
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
operator|(
name|JSONObject
operator|)
name|HttpFSUtils
operator|.
name|jsonParse
argument_list|(
name|conn
argument_list|)
decl_stmt|;
return|return
operator|(
name|Boolean
operator|)
name|json
operator|.
name|get
argument_list|(
name|MKDIRS_JSON
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Return a file status object that represents the path.    *    * @param f The path we want information from    *    * @return a FileStatus object    *    * @throws FileNotFoundException when the path does not exist;    * IOException see specific implementation    */
end_comment

begin_function
annotation|@
name|Override
DECL|method|getFileStatus (Path f)
specifier|public
name|FileStatus
name|getFileStatus
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|OP_PARAM
argument_list|,
name|Operation
operator|.
name|GETFILESTATUS
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|HttpURLConnection
name|conn
init|=
name|getConnection
argument_list|(
name|Operation
operator|.
name|GETFILESTATUS
operator|.
name|getMethod
argument_list|()
argument_list|,
name|params
argument_list|,
name|f
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|HttpExceptionUtils
operator|.
name|validateResponse
argument_list|(
name|conn
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
operator|(
name|JSONObject
operator|)
name|HttpFSUtils
operator|.
name|jsonParse
argument_list|(
name|conn
argument_list|)
decl_stmt|;
name|json
operator|=
operator|(
name|JSONObject
operator|)
name|json
operator|.
name|get
argument_list|(
name|FILE_STATUS_JSON
argument_list|)
expr_stmt|;
name|f
operator|=
name|makeQualified
argument_list|(
name|f
argument_list|)
expr_stmt|;
return|return
name|createFileStatus
argument_list|(
name|f
argument_list|,
name|json
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Return the current user's home directory in this filesystem.    * The default implementation returns "/user/$USER/".    */
end_comment

begin_function
annotation|@
name|Override
DECL|method|getHomeDirectory ()
specifier|public
name|Path
name|getHomeDirectory
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|OP_PARAM
argument_list|,
name|Operation
operator|.
name|GETHOMEDIRECTORY
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|HttpURLConnection
name|conn
init|=
name|getConnection
argument_list|(
name|Operation
operator|.
name|GETHOMEDIRECTORY
operator|.
name|getMethod
argument_list|()
argument_list|,
name|params
argument_list|,
operator|new
name|Path
argument_list|(
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|"/"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|HttpExceptionUtils
operator|.
name|validateResponse
argument_list|(
name|conn
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
operator|(
name|JSONObject
operator|)
name|HttpFSUtils
operator|.
name|jsonParse
argument_list|(
name|conn
argument_list|)
decl_stmt|;
return|return
operator|new
name|Path
argument_list|(
operator|(
name|String
operator|)
name|json
operator|.
name|get
argument_list|(
name|HOME_DIR_JSON
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
end_function

begin_comment
comment|/**    * Get the root directory of Trash for a path in HDFS.    * 1. File in encryption zone returns /ez1/.Trash/username.    * 2. File not in encryption zone, or encountered exception when checking    *    the encryption zone of the path, returns /users/username/.Trash.    * Caller appends either Current or checkpoint timestamp    * for trash destination.    * The default implementation returns "/user/username/.Trash".    * @param fullPath the trash root of the path to be determined.    * @return trash root    */
end_comment

begin_function
annotation|@
name|Override
DECL|method|getTrashRoot (Path fullPath)
specifier|public
name|Path
name|getTrashRoot
parameter_list|(
name|Path
name|fullPath
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|OP_PARAM
argument_list|,
name|Operation
operator|.
name|GETTRASHROOT
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|HttpURLConnection
name|conn
init|=
name|getConnection
argument_list|(
name|Operation
operator|.
name|GETTRASHROOT
operator|.
name|getMethod
argument_list|()
argument_list|,
name|params
argument_list|,
name|fullPath
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|HttpExceptionUtils
operator|.
name|validateResponse
argument_list|(
name|conn
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
operator|(
name|JSONObject
operator|)
name|HttpFSUtils
operator|.
name|jsonParse
argument_list|(
name|conn
argument_list|)
decl_stmt|;
return|return
operator|new
name|Path
argument_list|(
operator|(
name|String
operator|)
name|json
operator|.
name|get
argument_list|(
name|TRASH_DIR_JSON
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot find trash root of "
operator|+
name|fullPath
argument_list|,
name|ex
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|getTrashRoot
argument_list|(
name|fullPath
argument_list|)
return|;
block|}
block|}
end_function

begin_comment
comment|/**    * Set owner of a path (i.e. a file or a directory).    * The parameters username and groupname cannot both be null.    *    * @param p The path    * @param username If it is null, the original username remains unchanged.    * @param groupname If it is null, the original groupname remains unchanged.    */
end_comment

begin_function
annotation|@
name|Override
DECL|method|setOwner (Path p, String username, String groupname)
specifier|public
name|void
name|setOwner
parameter_list|(
name|Path
name|p
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|groupname
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|OP_PARAM
argument_list|,
name|Operation
operator|.
name|SETOWNER
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|OWNER_PARAM
argument_list|,
name|username
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|GROUP_PARAM
argument_list|,
name|groupname
argument_list|)
expr_stmt|;
name|HttpURLConnection
name|conn
init|=
name|getConnection
argument_list|(
name|Operation
operator|.
name|SETOWNER
operator|.
name|getMethod
argument_list|()
argument_list|,
name|params
argument_list|,
name|p
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|HttpExceptionUtils
operator|.
name|validateResponse
argument_list|(
name|conn
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Set permission of a path.    *    * @param p path.    * @param permission permission.    */
end_comment

begin_function
annotation|@
name|Override
DECL|method|setPermission (Path p, FsPermission permission)
specifier|public
name|void
name|setPermission
parameter_list|(
name|Path
name|p
parameter_list|,
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|OP_PARAM
argument_list|,
name|Operation
operator|.
name|SETPERMISSION
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|PERMISSION_PARAM
argument_list|,
name|permissionToString
argument_list|(
name|permission
argument_list|)
argument_list|)
expr_stmt|;
name|HttpURLConnection
name|conn
init|=
name|getConnection
argument_list|(
name|Operation
operator|.
name|SETPERMISSION
operator|.
name|getMethod
argument_list|()
argument_list|,
name|params
argument_list|,
name|p
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|HttpExceptionUtils
operator|.
name|validateResponse
argument_list|(
name|conn
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Set access time of a file    *    * @param p The path    * @param mtime Set the modification time of this file.    * The number of milliseconds since Jan 1, 1970.    * A value of -1 means that this call should not set modification time.    * @param atime Set the access time of this file.    * The number of milliseconds since Jan 1, 1970.    * A value of -1 means that this call should not set access time.    */
end_comment

begin_function
annotation|@
name|Override
DECL|method|setTimes (Path p, long mtime, long atime)
specifier|public
name|void
name|setTimes
parameter_list|(
name|Path
name|p
parameter_list|,
name|long
name|mtime
parameter_list|,
name|long
name|atime
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|OP_PARAM
argument_list|,
name|Operation
operator|.
name|SETTIMES
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|MODIFICATION_TIME_PARAM
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|mtime
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|ACCESS_TIME_PARAM
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|atime
argument_list|)
argument_list|)
expr_stmt|;
name|HttpURLConnection
name|conn
init|=
name|getConnection
argument_list|(
name|Operation
operator|.
name|SETTIMES
operator|.
name|getMethod
argument_list|()
argument_list|,
name|params
argument_list|,
name|p
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|HttpExceptionUtils
operator|.
name|validateResponse
argument_list|(
name|conn
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Set replication for an existing file.    *    * @param src file name    * @param replication new replication    *    * @return true if successful;    *         false if file does not exist or is a directory    *    * @throws IOException    */
end_comment

begin_function
annotation|@
name|Override
DECL|method|setReplication (Path src, short replication)
specifier|public
name|boolean
name|setReplication
parameter_list|(
name|Path
name|src
parameter_list|,
name|short
name|replication
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|OP_PARAM
argument_list|,
name|Operation
operator|.
name|SETREPLICATION
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|REPLICATION_PARAM
argument_list|,
name|Short
operator|.
name|toString
argument_list|(
name|replication
argument_list|)
argument_list|)
expr_stmt|;
name|HttpURLConnection
name|conn
init|=
name|getConnection
argument_list|(
name|Operation
operator|.
name|SETREPLICATION
operator|.
name|getMethod
argument_list|()
argument_list|,
name|params
argument_list|,
name|src
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|HttpExceptionUtils
operator|.
name|validateResponse
argument_list|(
name|conn
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
operator|(
name|JSONObject
operator|)
name|HttpFSUtils
operator|.
name|jsonParse
argument_list|(
name|conn
argument_list|)
decl_stmt|;
return|return
operator|(
name|Boolean
operator|)
name|json
operator|.
name|get
argument_list|(
name|SET_REPLICATION_JSON
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Modify the ACL entries for a file.    *    * @param path Path to modify    * @param aclSpec describing modifications    * @throws IOException    */
end_comment

begin_function
annotation|@
name|Override
DECL|method|modifyAclEntries (Path path, List<AclEntry> aclSpec)
specifier|public
name|void
name|modifyAclEntries
parameter_list|(
name|Path
name|path
parameter_list|,
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|OP_PARAM
argument_list|,
name|Operation
operator|.
name|MODIFYACLENTRIES
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|ACLSPEC_PARAM
argument_list|,
name|AclEntry
operator|.
name|aclSpecToString
argument_list|(
name|aclSpec
argument_list|)
argument_list|)
expr_stmt|;
name|HttpURLConnection
name|conn
init|=
name|getConnection
argument_list|(
name|Operation
operator|.
name|MODIFYACLENTRIES
operator|.
name|getMethod
argument_list|()
argument_list|,
name|params
argument_list|,
name|path
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|HttpExceptionUtils
operator|.
name|validateResponse
argument_list|(
name|conn
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Remove the specified ACL entries from a file    * @param path Path to modify    * @param aclSpec describing entries to remove    * @throws IOException    */
end_comment

begin_function
annotation|@
name|Override
DECL|method|removeAclEntries (Path path, List<AclEntry> aclSpec)
specifier|public
name|void
name|removeAclEntries
parameter_list|(
name|Path
name|path
parameter_list|,
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|OP_PARAM
argument_list|,
name|Operation
operator|.
name|REMOVEACLENTRIES
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|ACLSPEC_PARAM
argument_list|,
name|AclEntry
operator|.
name|aclSpecToString
argument_list|(
name|aclSpec
argument_list|)
argument_list|)
expr_stmt|;
name|HttpURLConnection
name|conn
init|=
name|getConnection
argument_list|(
name|Operation
operator|.
name|REMOVEACLENTRIES
operator|.
name|getMethod
argument_list|()
argument_list|,
name|params
argument_list|,
name|path
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|HttpExceptionUtils
operator|.
name|validateResponse
argument_list|(
name|conn
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Removes the default ACL for the given file    * @param path Path from which to remove the default ACL.    * @throws IOException    */
end_comment

begin_function
annotation|@
name|Override
DECL|method|removeDefaultAcl (Path path)
specifier|public
name|void
name|removeDefaultAcl
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|OP_PARAM
argument_list|,
name|Operation
operator|.
name|REMOVEDEFAULTACL
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|HttpURLConnection
name|conn
init|=
name|getConnection
argument_list|(
name|Operation
operator|.
name|REMOVEDEFAULTACL
operator|.
name|getMethod
argument_list|()
argument_list|,
name|params
argument_list|,
name|path
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|HttpExceptionUtils
operator|.
name|validateResponse
argument_list|(
name|conn
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Remove all ACLs from a file    * @param path Path from which to remove all ACLs    * @throws IOException    */
end_comment

begin_function
annotation|@
name|Override
DECL|method|removeAcl (Path path)
specifier|public
name|void
name|removeAcl
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|OP_PARAM
argument_list|,
name|Operation
operator|.
name|REMOVEACL
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|HttpURLConnection
name|conn
init|=
name|getConnection
argument_list|(
name|Operation
operator|.
name|REMOVEACL
operator|.
name|getMethod
argument_list|()
argument_list|,
name|params
argument_list|,
name|path
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|HttpExceptionUtils
operator|.
name|validateResponse
argument_list|(
name|conn
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Set the ACLs for the given file    * @param path Path to modify    * @param aclSpec describing modifications, must include    *                entries for user, group, and others for compatibility    *                with permission bits.    * @throws IOException    */
end_comment

begin_function
annotation|@
name|Override
DECL|method|setAcl (Path path, List<AclEntry> aclSpec)
specifier|public
name|void
name|setAcl
parameter_list|(
name|Path
name|path
parameter_list|,
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|OP_PARAM
argument_list|,
name|Operation
operator|.
name|SETACL
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|ACLSPEC_PARAM
argument_list|,
name|AclEntry
operator|.
name|aclSpecToString
argument_list|(
name|aclSpec
argument_list|)
argument_list|)
expr_stmt|;
name|HttpURLConnection
name|conn
init|=
name|getConnection
argument_list|(
name|Operation
operator|.
name|SETACL
operator|.
name|getMethod
argument_list|()
argument_list|,
name|params
argument_list|,
name|path
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|HttpExceptionUtils
operator|.
name|validateResponse
argument_list|(
name|conn
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Get the ACL information for a given file    * @param path Path to acquire ACL info for    * @return the ACL information in JSON format    * @throws IOException    */
end_comment

begin_function
annotation|@
name|Override
DECL|method|getAclStatus (Path path)
specifier|public
name|AclStatus
name|getAclStatus
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|OP_PARAM
argument_list|,
name|Operation
operator|.
name|GETACLSTATUS
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|HttpURLConnection
name|conn
init|=
name|getConnection
argument_list|(
name|Operation
operator|.
name|GETACLSTATUS
operator|.
name|getMethod
argument_list|()
argument_list|,
name|params
argument_list|,
name|path
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|HttpExceptionUtils
operator|.
name|validateResponse
argument_list|(
name|conn
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
operator|(
name|JSONObject
operator|)
name|HttpFSUtils
operator|.
name|jsonParse
argument_list|(
name|conn
argument_list|)
decl_stmt|;
name|json
operator|=
operator|(
name|JSONObject
operator|)
name|json
operator|.
name|get
argument_list|(
name|ACL_STATUS_JSON
argument_list|)
expr_stmt|;
return|return
name|createAclStatus
argument_list|(
name|json
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/** Convert a string to a FsPermission object. */
end_comment

begin_function
DECL|method|toFsPermission (JSONObject json)
specifier|static
name|FsPermission
name|toFsPermission
parameter_list|(
name|JSONObject
name|json
parameter_list|)
block|{
specifier|final
name|String
name|s
init|=
operator|(
name|String
operator|)
name|json
operator|.
name|get
argument_list|(
name|PERMISSION_JSON
argument_list|)
decl_stmt|;
return|return
operator|new
name|FsPermission
argument_list|(
name|Short
operator|.
name|parseShort
argument_list|(
name|s
argument_list|,
literal|8
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|createFileStatus (Path parent, JSONObject json)
specifier|private
name|FileStatus
name|createFileStatus
parameter_list|(
name|Path
name|parent
parameter_list|,
name|JSONObject
name|json
parameter_list|)
block|{
name|String
name|pathSuffix
init|=
operator|(
name|String
operator|)
name|json
operator|.
name|get
argument_list|(
name|PATH_SUFFIX_JSON
argument_list|)
decl_stmt|;
name|Path
name|path
init|=
operator|(
name|pathSuffix
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|)
condition|?
name|parent
else|:
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
name|pathSuffix
argument_list|)
decl_stmt|;
name|FILE_TYPE
name|type
init|=
name|FILE_TYPE
operator|.
name|valueOf
argument_list|(
operator|(
name|String
operator|)
name|json
operator|.
name|get
argument_list|(
name|TYPE_JSON
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|len
init|=
operator|(
name|Long
operator|)
name|json
operator|.
name|get
argument_list|(
name|LENGTH_JSON
argument_list|)
decl_stmt|;
name|String
name|owner
init|=
operator|(
name|String
operator|)
name|json
operator|.
name|get
argument_list|(
name|OWNER_JSON
argument_list|)
decl_stmt|;
name|String
name|group
init|=
operator|(
name|String
operator|)
name|json
operator|.
name|get
argument_list|(
name|GROUP_JSON
argument_list|)
decl_stmt|;
specifier|final
name|FsPermission
name|permission
init|=
name|toFsPermission
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|long
name|aTime
init|=
operator|(
name|Long
operator|)
name|json
operator|.
name|get
argument_list|(
name|ACCESS_TIME_JSON
argument_list|)
decl_stmt|;
name|long
name|mTime
init|=
operator|(
name|Long
operator|)
name|json
operator|.
name|get
argument_list|(
name|MODIFICATION_TIME_JSON
argument_list|)
decl_stmt|;
name|long
name|blockSize
init|=
operator|(
name|Long
operator|)
name|json
operator|.
name|get
argument_list|(
name|BLOCK_SIZE_JSON
argument_list|)
decl_stmt|;
name|short
name|replication
init|=
operator|(
operator|(
name|Long
operator|)
name|json
operator|.
name|get
argument_list|(
name|REPLICATION_JSON
argument_list|)
operator|)
operator|.
name|shortValue
argument_list|()
decl_stmt|;
specifier|final
name|Boolean
name|aclBit
init|=
operator|(
name|Boolean
operator|)
name|json
operator|.
name|get
argument_list|(
name|ACL_BIT_JSON
argument_list|)
decl_stmt|;
specifier|final
name|Boolean
name|encBit
init|=
operator|(
name|Boolean
operator|)
name|json
operator|.
name|get
argument_list|(
name|ENC_BIT_JSON
argument_list|)
decl_stmt|;
specifier|final
name|Boolean
name|erasureBit
init|=
operator|(
name|Boolean
operator|)
name|json
operator|.
name|get
argument_list|(
name|EC_BIT_JSON
argument_list|)
decl_stmt|;
specifier|final
name|Boolean
name|snapshotEnabledBit
init|=
operator|(
name|Boolean
operator|)
name|json
operator|.
name|get
argument_list|(
name|SNAPSHOT_BIT_JSON
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|aBit
init|=
operator|(
name|aclBit
operator|!=
literal|null
operator|)
condition|?
name|aclBit
else|:
literal|false
decl_stmt|;
specifier|final
name|boolean
name|eBit
init|=
operator|(
name|encBit
operator|!=
literal|null
operator|)
condition|?
name|encBit
else|:
literal|false
decl_stmt|;
specifier|final
name|boolean
name|ecBit
init|=
operator|(
name|erasureBit
operator|!=
literal|null
operator|)
condition|?
name|erasureBit
else|:
literal|false
decl_stmt|;
specifier|final
name|boolean
name|seBit
init|=
operator|(
name|snapshotEnabledBit
operator|!=
literal|null
operator|)
condition|?
name|snapshotEnabledBit
else|:
literal|false
decl_stmt|;
if|if
condition|(
name|aBit
operator|||
name|eBit
operator|||
name|ecBit
operator|||
name|seBit
condition|)
block|{
comment|// include this for compatibility with 2.x
name|FsPermissionExtension
name|deprecatedPerm
init|=
operator|new
name|FsPermissionExtension
argument_list|(
name|permission
argument_list|,
name|aBit
argument_list|,
name|eBit
argument_list|,
name|ecBit
argument_list|)
decl_stmt|;
name|FileStatus
name|fileStatus
init|=
operator|new
name|FileStatus
argument_list|(
name|len
argument_list|,
name|FILE_TYPE
operator|.
name|DIRECTORY
operator|==
name|type
argument_list|,
name|replication
argument_list|,
name|blockSize
argument_list|,
name|mTime
argument_list|,
name|aTime
argument_list|,
name|deprecatedPerm
argument_list|,
name|owner
argument_list|,
name|group
argument_list|,
literal|null
argument_list|,
name|path
argument_list|,
name|FileStatus
operator|.
name|attributes
argument_list|(
name|aBit
argument_list|,
name|eBit
argument_list|,
name|ecBit
argument_list|,
name|seBit
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|fileStatus
return|;
block|}
else|else
block|{
return|return
operator|new
name|FileStatus
argument_list|(
name|len
argument_list|,
name|FILE_TYPE
operator|.
name|DIRECTORY
operator|==
name|type
argument_list|,
name|replication
argument_list|,
name|blockSize
argument_list|,
name|mTime
argument_list|,
name|aTime
argument_list|,
name|permission
argument_list|,
name|owner
argument_list|,
name|group
argument_list|,
name|path
argument_list|)
return|;
block|}
block|}
end_function

begin_comment
comment|/**    * Convert the given JSON object into an AclStatus    * @param json Input JSON representing the ACLs    * @return Resulting AclStatus    */
end_comment

begin_function
DECL|method|createAclStatus (JSONObject json)
specifier|private
name|AclStatus
name|createAclStatus
parameter_list|(
name|JSONObject
name|json
parameter_list|)
block|{
name|AclStatus
operator|.
name|Builder
name|aclStatusBuilder
init|=
operator|new
name|AclStatus
operator|.
name|Builder
argument_list|()
operator|.
name|owner
argument_list|(
operator|(
name|String
operator|)
name|json
operator|.
name|get
argument_list|(
name|OWNER_JSON
argument_list|)
argument_list|)
operator|.
name|group
argument_list|(
operator|(
name|String
operator|)
name|json
operator|.
name|get
argument_list|(
name|GROUP_JSON
argument_list|)
argument_list|)
operator|.
name|stickyBit
argument_list|(
operator|(
name|Boolean
operator|)
name|json
operator|.
name|get
argument_list|(
name|ACL_STICKY_BIT_JSON
argument_list|)
argument_list|)
decl_stmt|;
name|JSONArray
name|entries
init|=
operator|(
name|JSONArray
operator|)
name|json
operator|.
name|get
argument_list|(
name|ACL_ENTRIES_JSON
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|e
range|:
name|entries
control|)
block|{
name|aclStatusBuilder
operator|.
name|addEntry
argument_list|(
name|AclEntry
operator|.
name|parseAclEntry
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|aclStatusBuilder
operator|.
name|build
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|getContentSummary (Path f)
specifier|public
name|ContentSummary
name|getContentSummary
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|OP_PARAM
argument_list|,
name|Operation
operator|.
name|GETCONTENTSUMMARY
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|HttpURLConnection
name|conn
init|=
name|getConnection
argument_list|(
name|Operation
operator|.
name|GETCONTENTSUMMARY
operator|.
name|getMethod
argument_list|()
argument_list|,
name|params
argument_list|,
name|f
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|HttpExceptionUtils
operator|.
name|validateResponse
argument_list|(
name|conn
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
call|(
name|JSONObject
call|)
argument_list|(
operator|(
name|JSONObject
operator|)
name|HttpFSUtils
operator|.
name|jsonParse
argument_list|(
name|conn
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
name|CONTENT_SUMMARY_JSON
argument_list|)
decl_stmt|;
name|ContentSummary
operator|.
name|Builder
name|builder
init|=
operator|new
name|ContentSummary
operator|.
name|Builder
argument_list|()
operator|.
name|length
argument_list|(
operator|(
name|Long
operator|)
name|json
operator|.
name|get
argument_list|(
name|CONTENT_SUMMARY_LENGTH_JSON
argument_list|)
argument_list|)
operator|.
name|fileCount
argument_list|(
operator|(
name|Long
operator|)
name|json
operator|.
name|get
argument_list|(
name|CONTENT_SUMMARY_FILE_COUNT_JSON
argument_list|)
argument_list|)
operator|.
name|directoryCount
argument_list|(
operator|(
name|Long
operator|)
name|json
operator|.
name|get
argument_list|(
name|CONTENT_SUMMARY_DIRECTORY_COUNT_JSON
argument_list|)
argument_list|)
decl_stmt|;
name|builder
operator|=
name|buildQuotaUsage
argument_list|(
name|builder
argument_list|,
name|json
argument_list|,
name|ContentSummary
operator|.
name|Builder
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|getQuotaUsage (Path f)
specifier|public
name|QuotaUsage
name|getQuotaUsage
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|OP_PARAM
argument_list|,
name|Operation
operator|.
name|GETQUOTAUSAGE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|HttpURLConnection
name|conn
init|=
name|getConnection
argument_list|(
name|Operation
operator|.
name|GETQUOTAUSAGE
operator|.
name|getMethod
argument_list|()
argument_list|,
name|params
argument_list|,
name|f
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|JSONObject
name|json
init|=
call|(
name|JSONObject
call|)
argument_list|(
operator|(
name|JSONObject
operator|)
name|HttpFSUtils
operator|.
name|jsonParse
argument_list|(
name|conn
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
name|QUOTA_USAGE_JSON
argument_list|)
decl_stmt|;
name|QuotaUsage
operator|.
name|Builder
name|builder
init|=
operator|new
name|QuotaUsage
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|builder
operator|=
name|buildQuotaUsage
argument_list|(
name|builder
argument_list|,
name|json
argument_list|,
name|QuotaUsage
operator|.
name|Builder
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
end_function

begin_comment
comment|/**    * Given a builder for QuotaUsage, parse the provided JSON object and    * construct the relevant fields. Return the updated builder.    */
end_comment

begin_function
DECL|method|buildQuotaUsage ( T builder, JSONObject json, Class<T> type)
specifier|private
specifier|static
parameter_list|<
name|T
extends|extends
name|QuotaUsage
operator|.
name|Builder
parameter_list|>
name|T
name|buildQuotaUsage
parameter_list|(
name|T
name|builder
parameter_list|,
name|JSONObject
name|json
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|long
name|quota
init|=
operator|(
name|Long
operator|)
name|json
operator|.
name|get
argument_list|(
name|QUOTA_USAGE_QUOTA_JSON
argument_list|)
decl_stmt|;
name|long
name|spaceConsumed
init|=
operator|(
name|Long
operator|)
name|json
operator|.
name|get
argument_list|(
name|QUOTA_USAGE_SPACE_CONSUMED_JSON
argument_list|)
decl_stmt|;
name|long
name|spaceQuota
init|=
operator|(
name|Long
operator|)
name|json
operator|.
name|get
argument_list|(
name|QUOTA_USAGE_SPACE_QUOTA_JSON
argument_list|)
decl_stmt|;
name|JSONObject
name|typeJson
init|=
operator|(
name|JSONObject
operator|)
name|json
operator|.
name|get
argument_list|(
name|QUOTA_USAGE_TYPE_QUOTA_JSON
argument_list|)
decl_stmt|;
name|builder
operator|=
name|type
operator|.
name|cast
argument_list|(
name|builder
operator|.
name|quota
argument_list|(
name|quota
argument_list|)
operator|.
name|spaceConsumed
argument_list|(
name|spaceConsumed
argument_list|)
operator|.
name|spaceQuota
argument_list|(
name|spaceQuota
argument_list|)
argument_list|)
expr_stmt|;
comment|// ContentSummary doesn't set this so check before using it
if|if
condition|(
name|json
operator|.
name|get
argument_list|(
name|QUOTA_USAGE_FILE_AND_DIRECTORY_COUNT_JSON
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|long
name|fileAndDirectoryCount
init|=
operator|(
name|Long
operator|)
name|json
operator|.
name|get
argument_list|(
name|QUOTA_USAGE_FILE_AND_DIRECTORY_COUNT_JSON
argument_list|)
decl_stmt|;
name|builder
operator|=
name|type
operator|.
name|cast
argument_list|(
name|builder
operator|.
name|fileAndDirectoryCount
argument_list|(
name|fileAndDirectoryCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|typeJson
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|StorageType
name|t
range|:
name|StorageType
operator|.
name|getTypesSupportingQuota
argument_list|()
control|)
block|{
name|JSONObject
name|typeQuota
init|=
operator|(
name|JSONObject
operator|)
name|typeJson
operator|.
name|get
argument_list|(
name|t
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|typeQuota
operator|!=
literal|null
condition|)
block|{
name|builder
operator|=
name|type
operator|.
name|cast
argument_list|(
name|builder
operator|.
name|typeQuota
argument_list|(
name|t
argument_list|,
operator|(
operator|(
name|Long
operator|)
name|typeQuota
operator|.
name|get
argument_list|(
name|QUOTA_USAGE_QUOTA_JSON
argument_list|)
operator|)
argument_list|)
operator|.
name|typeConsumed
argument_list|(
name|t
argument_list|,
operator|(
operator|(
name|Long
operator|)
name|typeQuota
operator|.
name|get
argument_list|(
name|QUOTA_USAGE_CONSUMED_JSON
argument_list|)
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|builder
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|getFileChecksum (Path f)
specifier|public
name|FileChecksum
name|getFileChecksum
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|OP_PARAM
argument_list|,
name|Operation
operator|.
name|GETFILECHECKSUM
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|HttpURLConnection
name|conn
init|=
name|getConnection
argument_list|(
name|Operation
operator|.
name|GETFILECHECKSUM
operator|.
name|getMethod
argument_list|()
argument_list|,
name|params
argument_list|,
name|f
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|HttpExceptionUtils
operator|.
name|validateResponse
argument_list|(
name|conn
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
specifier|final
name|JSONObject
name|json
init|=
call|(
name|JSONObject
call|)
argument_list|(
operator|(
name|JSONObject
operator|)
name|HttpFSUtils
operator|.
name|jsonParse
argument_list|(
name|conn
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
name|FILE_CHECKSUM_JSON
argument_list|)
decl_stmt|;
return|return
operator|new
name|FileChecksum
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getAlgorithmName
parameter_list|()
block|{
return|return
operator|(
name|String
operator|)
name|json
operator|.
name|get
argument_list|(
name|CHECKSUM_ALGORITHM_JSON
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getLength
parameter_list|()
block|{
return|return
operator|(
operator|(
name|Long
operator|)
name|json
operator|.
name|get
argument_list|(
name|CHECKSUM_LENGTH_JSON
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getBytes
parameter_list|()
block|{
return|return
name|StringUtils
operator|.
name|hexStringToByte
argument_list|(
operator|(
name|String
operator|)
name|json
operator|.
name|get
argument_list|(
name|CHECKSUM_BYTES_JSON
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|getDelegationToken (final String renewer)
specifier|public
name|Token
argument_list|<
name|?
argument_list|>
name|getDelegationToken
parameter_list|(
specifier|final
name|String
name|renewer
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Token
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Token
argument_list|<
name|?
argument_list|>
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|authURL
operator|.
name|getDelegationToken
argument_list|(
name|uri
operator|.
name|toURL
argument_list|()
argument_list|,
name|authToken
argument_list|,
name|renewer
argument_list|)
return|;
block|}
block|}
block|)
empty_stmt|;
block|}
end_function

begin_catch
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
if|if
condition|(
name|ex
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|ex
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
end_catch

begin_function
unit|}    public
DECL|method|renewDelegationToken (final Token<?> token)
name|long
name|renewDelegationToken
parameter_list|(
specifier|final
name|Token
argument_list|<
name|?
argument_list|>
name|token
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Long
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Long
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|authURL
operator|.
name|renewDelegationToken
argument_list|(
name|uri
operator|.
name|toURL
argument_list|()
argument_list|,
name|authToken
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
if|if
condition|(
name|ex
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|ex
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
end_function

begin_function
DECL|method|cancelDelegationToken (final Token<?> token)
specifier|public
name|void
name|cancelDelegationToken
parameter_list|(
specifier|final
name|Token
argument_list|<
name|?
argument_list|>
name|token
parameter_list|)
throws|throws
name|IOException
block|{
name|authURL
operator|.
name|cancelDelegationToken
argument_list|(
name|uri
operator|.
name|toURL
argument_list|()
argument_list|,
name|authToken
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|getRenewToken ()
specifier|public
name|Token
argument_list|<
name|?
argument_list|>
name|getRenewToken
parameter_list|()
block|{
return|return
literal|null
return|;
comment|//TODO : for renewer
block|}
end_function

begin_function
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|setDelegationToken (Token<T> token)
specifier|public
parameter_list|<
name|T
extends|extends
name|TokenIdentifier
parameter_list|>
name|void
name|setDelegationToken
parameter_list|(
name|Token
argument_list|<
name|T
argument_list|>
name|token
parameter_list|)
block|{
comment|//TODO : for renewer
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|setXAttr (Path f, String name, byte[] value, EnumSet<XAttrSetFlag> flag)
specifier|public
name|void
name|setXAttr
parameter_list|(
name|Path
name|f
parameter_list|,
name|String
name|name
parameter_list|,
name|byte
index|[]
name|value
parameter_list|,
name|EnumSet
argument_list|<
name|XAttrSetFlag
argument_list|>
name|flag
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|OP_PARAM
argument_list|,
name|Operation
operator|.
name|SETXATTR
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|XATTR_NAME_PARAM
argument_list|,
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|put
argument_list|(
name|XATTR_VALUE_PARAM
argument_list|,
name|XAttrCodec
operator|.
name|encodeValue
argument_list|(
name|value
argument_list|,
name|XAttrCodec
operator|.
name|HEX
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|params
operator|.
name|put
argument_list|(
name|XATTR_SET_FLAG_PARAM
argument_list|,
name|EnumSetParam
operator|.
name|toString
argument_list|(
name|flag
argument_list|)
argument_list|)
expr_stmt|;
name|HttpURLConnection
name|conn
init|=
name|getConnection
argument_list|(
name|Operation
operator|.
name|SETXATTR
operator|.
name|getMethod
argument_list|()
argument_list|,
name|params
argument_list|,
name|f
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|HttpExceptionUtils
operator|.
name|validateResponse
argument_list|(
name|conn
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|getXAttr (Path f, String name)
specifier|public
name|byte
index|[]
name|getXAttr
parameter_list|(
name|Path
name|f
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|OP_PARAM
argument_list|,
name|Operation
operator|.
name|GETXATTRS
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|XATTR_NAME_PARAM
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|HttpURLConnection
name|conn
init|=
name|getConnection
argument_list|(
name|Operation
operator|.
name|GETXATTRS
operator|.
name|getMethod
argument_list|()
argument_list|,
name|params
argument_list|,
name|f
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|HttpExceptionUtils
operator|.
name|validateResponse
argument_list|(
name|conn
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
operator|(
name|JSONObject
operator|)
name|HttpFSUtils
operator|.
name|jsonParse
argument_list|(
name|conn
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|xAttrs
init|=
name|createXAttrMap
argument_list|(
operator|(
name|JSONArray
operator|)
name|json
operator|.
name|get
argument_list|(
name|XATTRS_JSON
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|xAttrs
operator|!=
literal|null
condition|?
name|xAttrs
operator|.
name|get
argument_list|(
name|name
argument_list|)
else|:
literal|null
return|;
block|}
end_function

begin_comment
comment|/** Convert xAttrs json to xAttrs map */
end_comment

begin_function
DECL|method|createXAttrMap (JSONArray jsonArray)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|createXAttrMap
parameter_list|(
name|JSONArray
name|jsonArray
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|xAttrs
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|obj
range|:
name|jsonArray
control|)
block|{
name|JSONObject
name|jsonObj
init|=
operator|(
name|JSONObject
operator|)
name|obj
decl_stmt|;
specifier|final
name|String
name|name
init|=
operator|(
name|String
operator|)
name|jsonObj
operator|.
name|get
argument_list|(
name|XATTR_NAME_JSON
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|value
init|=
name|XAttrCodec
operator|.
name|decodeValue
argument_list|(
operator|(
name|String
operator|)
name|jsonObj
operator|.
name|get
argument_list|(
name|XATTR_VALUE_JSON
argument_list|)
argument_list|)
decl_stmt|;
name|xAttrs
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|xAttrs
return|;
block|}
end_function

begin_comment
comment|/** Convert xAttr names json to names list */
end_comment

begin_function
DECL|method|createXAttrNames (String xattrNamesStr)
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|createXAttrNames
parameter_list|(
name|String
name|xattrNamesStr
parameter_list|)
throws|throws
name|IOException
block|{
name|JSONParser
name|parser
init|=
operator|new
name|JSONParser
argument_list|()
decl_stmt|;
name|JSONArray
name|jsonArray
decl_stmt|;
try|try
block|{
name|jsonArray
operator|=
operator|(
name|JSONArray
operator|)
name|parser
operator|.
name|parse
argument_list|(
name|xattrNamesStr
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|jsonArray
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|name
range|:
name|jsonArray
control|)
block|{
name|names
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|names
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"JSON parser error, "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|getXAttrs (Path f)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|getXAttrs
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|OP_PARAM
argument_list|,
name|Operation
operator|.
name|GETXATTRS
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|HttpURLConnection
name|conn
init|=
name|getConnection
argument_list|(
name|Operation
operator|.
name|GETXATTRS
operator|.
name|getMethod
argument_list|()
argument_list|,
name|params
argument_list|,
name|f
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|HttpExceptionUtils
operator|.
name|validateResponse
argument_list|(
name|conn
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
operator|(
name|JSONObject
operator|)
name|HttpFSUtils
operator|.
name|jsonParse
argument_list|(
name|conn
argument_list|)
decl_stmt|;
return|return
name|createXAttrMap
argument_list|(
operator|(
name|JSONArray
operator|)
name|json
operator|.
name|get
argument_list|(
name|XATTRS_JSON
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|getXAttrs (Path f, List<String> names)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|getXAttrs
parameter_list|(
name|Path
name|f
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|names
operator|!=
literal|null
operator|&&
operator|!
name|names
operator|.
name|isEmpty
argument_list|()
argument_list|,
literal|"XAttr names cannot be null or empty."
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|OP_PARAM
argument_list|,
name|Operation
operator|.
name|GETXATTRS
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|multiValuedParams
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|multiValuedParams
operator|.
name|put
argument_list|(
name|XATTR_NAME_PARAM
argument_list|,
name|names
argument_list|)
expr_stmt|;
name|HttpURLConnection
name|conn
init|=
name|getConnection
argument_list|(
name|Operation
operator|.
name|GETXATTRS
operator|.
name|getMethod
argument_list|()
argument_list|,
name|params
argument_list|,
name|multiValuedParams
argument_list|,
name|f
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|HttpExceptionUtils
operator|.
name|validateResponse
argument_list|(
name|conn
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
operator|(
name|JSONObject
operator|)
name|HttpFSUtils
operator|.
name|jsonParse
argument_list|(
name|conn
argument_list|)
decl_stmt|;
return|return
name|createXAttrMap
argument_list|(
operator|(
name|JSONArray
operator|)
name|json
operator|.
name|get
argument_list|(
name|XATTRS_JSON
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|listXAttrs (Path f)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listXAttrs
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|OP_PARAM
argument_list|,
name|Operation
operator|.
name|LISTXATTRS
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|HttpURLConnection
name|conn
init|=
name|getConnection
argument_list|(
name|Operation
operator|.
name|LISTXATTRS
operator|.
name|getMethod
argument_list|()
argument_list|,
name|params
argument_list|,
name|f
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|HttpExceptionUtils
operator|.
name|validateResponse
argument_list|(
name|conn
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
operator|(
name|JSONObject
operator|)
name|HttpFSUtils
operator|.
name|jsonParse
argument_list|(
name|conn
argument_list|)
decl_stmt|;
return|return
name|createXAttrNames
argument_list|(
operator|(
name|String
operator|)
name|json
operator|.
name|get
argument_list|(
name|XATTRNAMES_JSON
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|removeXAttr (Path f, String name)
specifier|public
name|void
name|removeXAttr
parameter_list|(
name|Path
name|f
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|OP_PARAM
argument_list|,
name|Operation
operator|.
name|REMOVEXATTR
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|XATTR_NAME_PARAM
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|HttpURLConnection
name|conn
init|=
name|getConnection
argument_list|(
name|Operation
operator|.
name|REMOVEXATTR
operator|.
name|getMethod
argument_list|()
argument_list|,
name|params
argument_list|,
name|f
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|HttpExceptionUtils
operator|.
name|validateResponse
argument_list|(
name|conn
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|getAllStoragePolicies ()
specifier|public
name|Collection
argument_list|<
name|BlockStoragePolicy
argument_list|>
name|getAllStoragePolicies
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|OP_PARAM
argument_list|,
name|Operation
operator|.
name|GETALLSTORAGEPOLICY
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|HttpURLConnection
name|conn
init|=
name|getConnection
argument_list|(
name|Operation
operator|.
name|GETALLSTORAGEPOLICY
operator|.
name|getMethod
argument_list|()
argument_list|,
name|params
argument_list|,
operator|new
name|Path
argument_list|(
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|"/"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|HttpExceptionUtils
operator|.
name|validateResponse
argument_list|(
name|conn
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
operator|(
name|JSONObject
operator|)
name|HttpFSUtils
operator|.
name|jsonParse
argument_list|(
name|conn
argument_list|)
decl_stmt|;
return|return
name|createStoragePolicies
argument_list|(
operator|(
name|JSONObject
operator|)
name|json
operator|.
name|get
argument_list|(
name|STORAGE_POLICIES_JSON
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|createStoragePolicies (JSONObject map)
specifier|private
name|Collection
argument_list|<
name|BlockStoragePolicy
argument_list|>
name|createStoragePolicies
parameter_list|(
name|JSONObject
name|map
parameter_list|)
throws|throws
name|IOException
block|{
name|JSONArray
name|jsonArray
init|=
operator|(
name|JSONArray
operator|)
name|map
operator|.
name|get
argument_list|(
name|STORAGE_POLICY_JSON
argument_list|)
decl_stmt|;
name|BlockStoragePolicy
index|[]
name|policies
init|=
operator|new
name|BlockStoragePolicy
index|[
name|jsonArray
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jsonArray
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|policies
index|[
name|i
index|]
operator|=
name|createStoragePolicy
argument_list|(
operator|(
name|JSONObject
operator|)
name|jsonArray
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|policies
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|getStoragePolicy (Path src)
specifier|public
name|BlockStoragePolicy
name|getStoragePolicy
parameter_list|(
name|Path
name|src
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|OP_PARAM
argument_list|,
name|Operation
operator|.
name|GETSTORAGEPOLICY
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|HttpURLConnection
name|conn
init|=
name|getConnection
argument_list|(
name|Operation
operator|.
name|GETSTORAGEPOLICY
operator|.
name|getMethod
argument_list|()
argument_list|,
name|params
argument_list|,
name|src
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|HttpExceptionUtils
operator|.
name|validateResponse
argument_list|(
name|conn
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
operator|(
name|JSONObject
operator|)
name|HttpFSUtils
operator|.
name|jsonParse
argument_list|(
name|conn
argument_list|)
decl_stmt|;
return|return
name|createStoragePolicy
argument_list|(
operator|(
name|JSONObject
operator|)
name|json
operator|.
name|get
argument_list|(
name|STORAGE_POLICY_JSON
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|createStoragePolicy (JSONObject policyJson)
specifier|private
name|BlockStoragePolicy
name|createStoragePolicy
parameter_list|(
name|JSONObject
name|policyJson
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
name|id
init|=
operator|(
operator|(
name|Number
operator|)
name|policyJson
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
operator|)
operator|.
name|byteValue
argument_list|()
decl_stmt|;
name|String
name|name
init|=
operator|(
name|String
operator|)
name|policyJson
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|StorageType
index|[]
name|storageTypes
init|=
name|toStorageTypes
argument_list|(
operator|(
name|JSONArray
operator|)
name|policyJson
operator|.
name|get
argument_list|(
literal|"storageTypes"
argument_list|)
argument_list|)
decl_stmt|;
name|StorageType
index|[]
name|creationFallbacks
init|=
name|toStorageTypes
argument_list|(
operator|(
name|JSONArray
operator|)
name|policyJson
operator|.
name|get
argument_list|(
literal|"creationFallbacks"
argument_list|)
argument_list|)
decl_stmt|;
name|StorageType
index|[]
name|replicationFallbacks
init|=
name|toStorageTypes
argument_list|(
operator|(
name|JSONArray
operator|)
name|policyJson
operator|.
name|get
argument_list|(
literal|"replicationFallbacks"
argument_list|)
argument_list|)
decl_stmt|;
name|Boolean
name|copyOnCreateFile
init|=
operator|(
name|Boolean
operator|)
name|policyJson
operator|.
name|get
argument_list|(
literal|"copyOnCreateFile"
argument_list|)
decl_stmt|;
return|return
operator|new
name|BlockStoragePolicy
argument_list|(
name|id
argument_list|,
name|name
argument_list|,
name|storageTypes
argument_list|,
name|creationFallbacks
argument_list|,
name|replicationFallbacks
argument_list|,
name|copyOnCreateFile
operator|.
name|booleanValue
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|toStorageTypes (JSONArray array)
specifier|private
name|StorageType
index|[]
name|toStorageTypes
parameter_list|(
name|JSONArray
name|array
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|array
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|List
argument_list|<
name|StorageType
argument_list|>
name|storageTypes
init|=
operator|new
name|ArrayList
argument_list|<
name|StorageType
argument_list|>
argument_list|(
name|array
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|name
range|:
name|array
control|)
block|{
name|storageTypes
operator|.
name|add
argument_list|(
name|StorageType
operator|.
name|parseStorageType
argument_list|(
operator|(
name|String
operator|)
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|storageTypes
operator|.
name|toArray
argument_list|(
operator|new
name|StorageType
index|[
name|storageTypes
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|setStoragePolicy (Path src, String policyName)
specifier|public
name|void
name|setStoragePolicy
parameter_list|(
name|Path
name|src
parameter_list|,
name|String
name|policyName
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|OP_PARAM
argument_list|,
name|Operation
operator|.
name|SETSTORAGEPOLICY
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|POLICY_NAME_PARAM
argument_list|,
name|policyName
argument_list|)
expr_stmt|;
name|HttpURLConnection
name|conn
init|=
name|getConnection
argument_list|(
name|Operation
operator|.
name|SETSTORAGEPOLICY
operator|.
name|getMethod
argument_list|()
argument_list|,
name|params
argument_list|,
name|src
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|HttpExceptionUtils
operator|.
name|validateResponse
argument_list|(
name|conn
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|unsetStoragePolicy (Path src)
specifier|public
name|void
name|unsetStoragePolicy
parameter_list|(
name|Path
name|src
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|OP_PARAM
argument_list|,
name|Operation
operator|.
name|UNSETSTORAGEPOLICY
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|HttpURLConnection
name|conn
init|=
name|getConnection
argument_list|(
name|Operation
operator|.
name|UNSETSTORAGEPOLICY
operator|.
name|getMethod
argument_list|()
argument_list|,
name|params
argument_list|,
name|src
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|HttpExceptionUtils
operator|.
name|validateResponse
argument_list|(
name|conn
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|allowSnapshot (Path path)
specifier|public
name|void
name|allowSnapshot
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|OP_PARAM
argument_list|,
name|Operation
operator|.
name|ALLOWSNAPSHOT
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|HttpURLConnection
name|conn
init|=
name|getConnection
argument_list|(
name|Operation
operator|.
name|ALLOWSNAPSHOT
operator|.
name|getMethod
argument_list|()
argument_list|,
name|params
argument_list|,
name|path
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|HttpExceptionUtils
operator|.
name|validateResponse
argument_list|(
name|conn
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|disallowSnapshot (Path path)
specifier|public
name|void
name|disallowSnapshot
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|OP_PARAM
argument_list|,
name|Operation
operator|.
name|DISALLOWSNAPSHOT
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|HttpURLConnection
name|conn
init|=
name|getConnection
argument_list|(
name|Operation
operator|.
name|DISALLOWSNAPSHOT
operator|.
name|getMethod
argument_list|()
argument_list|,
name|params
argument_list|,
name|path
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|HttpExceptionUtils
operator|.
name|validateResponse
argument_list|(
name|conn
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|createSnapshot (Path path, String snapshotName)
specifier|public
specifier|final
name|Path
name|createSnapshot
parameter_list|(
name|Path
name|path
parameter_list|,
name|String
name|snapshotName
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|OP_PARAM
argument_list|,
name|Operation
operator|.
name|CREATESNAPSHOT
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|snapshotName
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|put
argument_list|(
name|SNAPSHOT_NAME_PARAM
argument_list|,
name|snapshotName
argument_list|)
expr_stmt|;
block|}
name|HttpURLConnection
name|conn
init|=
name|getConnection
argument_list|(
name|Operation
operator|.
name|CREATESNAPSHOT
operator|.
name|getMethod
argument_list|()
argument_list|,
name|params
argument_list|,
name|path
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|HttpExceptionUtils
operator|.
name|validateResponse
argument_list|(
name|conn
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
operator|(
name|JSONObject
operator|)
name|HttpFSUtils
operator|.
name|jsonParse
argument_list|(
name|conn
argument_list|)
decl_stmt|;
return|return
operator|new
name|Path
argument_list|(
operator|(
name|String
operator|)
name|json
operator|.
name|get
argument_list|(
name|SNAPSHOT_JSON
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|renameSnapshot (Path path, String snapshotOldName, String snapshotNewName)
specifier|public
name|void
name|renameSnapshot
parameter_list|(
name|Path
name|path
parameter_list|,
name|String
name|snapshotOldName
parameter_list|,
name|String
name|snapshotNewName
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|OP_PARAM
argument_list|,
name|Operation
operator|.
name|RENAMESNAPSHOT
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|SNAPSHOT_NAME_PARAM
argument_list|,
name|snapshotNewName
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|OLD_SNAPSHOT_NAME_PARAM
argument_list|,
name|snapshotOldName
argument_list|)
expr_stmt|;
name|HttpURLConnection
name|conn
init|=
name|getConnection
argument_list|(
name|Operation
operator|.
name|RENAMESNAPSHOT
operator|.
name|getMethod
argument_list|()
argument_list|,
name|params
argument_list|,
name|path
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|HttpExceptionUtils
operator|.
name|validateResponse
argument_list|(
name|conn
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|deleteSnapshot (Path path, String snapshotName)
specifier|public
name|void
name|deleteSnapshot
parameter_list|(
name|Path
name|path
parameter_list|,
name|String
name|snapshotName
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|OP_PARAM
argument_list|,
name|Operation
operator|.
name|DELETESNAPSHOT
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|SNAPSHOT_NAME_PARAM
argument_list|,
name|snapshotName
argument_list|)
expr_stmt|;
name|HttpURLConnection
name|conn
init|=
name|getConnection
argument_list|(
name|Operation
operator|.
name|DELETESNAPSHOT
operator|.
name|getMethod
argument_list|()
argument_list|,
name|params
argument_list|,
name|path
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|HttpExceptionUtils
operator|.
name|validateResponse
argument_list|(
name|conn
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|getSnapshotDiffReport (Path path, String snapshotOldName, String snapshotNewName)
specifier|public
name|SnapshotDiffReport
name|getSnapshotDiffReport
parameter_list|(
name|Path
name|path
parameter_list|,
name|String
name|snapshotOldName
parameter_list|,
name|String
name|snapshotNewName
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|OP_PARAM
argument_list|,
name|Operation
operator|.
name|GETSNAPSHOTDIFF
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|SNAPSHOT_NAME_PARAM
argument_list|,
name|snapshotNewName
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|OLD_SNAPSHOT_NAME_PARAM
argument_list|,
name|snapshotOldName
argument_list|)
expr_stmt|;
name|HttpURLConnection
name|conn
init|=
name|getConnection
argument_list|(
name|Operation
operator|.
name|GETSNAPSHOTDIFF
operator|.
name|getMethod
argument_list|()
argument_list|,
name|params
argument_list|,
name|path
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|HttpExceptionUtils
operator|.
name|validateResponse
argument_list|(
name|conn
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
operator|(
name|JSONObject
operator|)
name|HttpFSUtils
operator|.
name|jsonParse
argument_list|(
name|conn
argument_list|)
decl_stmt|;
return|return
name|JsonUtilClient
operator|.
name|toSnapshotDiffReport
argument_list|(
name|json
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|getSnapshottableDirectoryList ()
specifier|public
name|SnapshottableDirectoryStatus
index|[]
name|getSnapshottableDirectoryList
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|OP_PARAM
argument_list|,
name|Operation
operator|.
name|GETSNAPSHOTTABLEDIRECTORYLIST
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|HttpURLConnection
name|conn
init|=
name|getConnection
argument_list|(
name|Operation
operator|.
name|GETSNAPSHOTTABLEDIRECTORYLIST
operator|.
name|getMethod
argument_list|()
argument_list|,
name|params
argument_list|,
operator|new
name|Path
argument_list|(
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|"/"
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|HttpExceptionUtils
operator|.
name|validateResponse
argument_list|(
name|conn
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
operator|(
name|JSONObject
operator|)
name|HttpFSUtils
operator|.
name|jsonParse
argument_list|(
name|conn
argument_list|)
decl_stmt|;
return|return
name|JsonUtilClient
operator|.
name|toSnapshottableDirectoryList
argument_list|(
name|json
argument_list|)
return|;
block|}
end_function

unit|}
end_unit

