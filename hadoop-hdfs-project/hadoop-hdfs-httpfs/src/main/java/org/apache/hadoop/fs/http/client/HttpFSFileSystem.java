begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.http.client
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|http
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ContentSummary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileChecksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PositionedReadable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Seekable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|client
operator|.
name|AuthenticatedURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|client
operator|.
name|Authenticator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|simple
operator|.
name|JSONArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|simple
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|simple
operator|.
name|parser
operator|.
name|JSONParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|simple
operator|.
name|parser
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilterInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLEncoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|MessageFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * HttpFSServer implementation of the FileSystemAccess FileSystem.  *<p/>  * This implementation allows a user to access HDFS over HTTP via a HttpFSServer server.  */
end_comment

begin_class
DECL|class|HttpFSFileSystem
specifier|public
class|class
name|HttpFSFileSystem
extends|extends
name|FileSystem
block|{
DECL|field|SERVICE_NAME
specifier|public
specifier|static
specifier|final
name|String
name|SERVICE_NAME
init|=
literal|"/webhdfs"
decl_stmt|;
DECL|field|SERVICE_VERSION
specifier|public
specifier|static
specifier|final
name|String
name|SERVICE_VERSION
init|=
literal|"/v1"
decl_stmt|;
DECL|field|SERVICE_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|SERVICE_PREFIX
init|=
name|SERVICE_NAME
operator|+
name|SERVICE_VERSION
decl_stmt|;
DECL|field|OP_PARAM
specifier|public
specifier|static
specifier|final
name|String
name|OP_PARAM
init|=
literal|"op"
decl_stmt|;
DECL|field|DO_AS_PARAM
specifier|public
specifier|static
specifier|final
name|String
name|DO_AS_PARAM
init|=
literal|"doas"
decl_stmt|;
DECL|field|OVERWRITE_PARAM
specifier|public
specifier|static
specifier|final
name|String
name|OVERWRITE_PARAM
init|=
literal|"overwrite"
decl_stmt|;
DECL|field|REPLICATION_PARAM
specifier|public
specifier|static
specifier|final
name|String
name|REPLICATION_PARAM
init|=
literal|"replication"
decl_stmt|;
DECL|field|BLOCKSIZE_PARAM
specifier|public
specifier|static
specifier|final
name|String
name|BLOCKSIZE_PARAM
init|=
literal|"blocksize"
decl_stmt|;
DECL|field|PERMISSION_PARAM
specifier|public
specifier|static
specifier|final
name|String
name|PERMISSION_PARAM
init|=
literal|"permission"
decl_stmt|;
DECL|field|DESTINATION_PARAM
specifier|public
specifier|static
specifier|final
name|String
name|DESTINATION_PARAM
init|=
literal|"destination"
decl_stmt|;
DECL|field|RECURSIVE_PARAM
specifier|public
specifier|static
specifier|final
name|String
name|RECURSIVE_PARAM
init|=
literal|"recursive"
decl_stmt|;
DECL|field|OWNER_PARAM
specifier|public
specifier|static
specifier|final
name|String
name|OWNER_PARAM
init|=
literal|"owner"
decl_stmt|;
DECL|field|GROUP_PARAM
specifier|public
specifier|static
specifier|final
name|String
name|GROUP_PARAM
init|=
literal|"group"
decl_stmt|;
DECL|field|MODIFICATION_TIME_PARAM
specifier|public
specifier|static
specifier|final
name|String
name|MODIFICATION_TIME_PARAM
init|=
literal|"modificationtime"
decl_stmt|;
DECL|field|ACCESS_TIME_PARAM
specifier|public
specifier|static
specifier|final
name|String
name|ACCESS_TIME_PARAM
init|=
literal|"accesstime"
decl_stmt|;
DECL|field|RENEWER_PARAM
specifier|public
specifier|static
specifier|final
name|String
name|RENEWER_PARAM
init|=
literal|"renewer"
decl_stmt|;
DECL|field|DEFAULT_PERMISSION
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_PERMISSION
init|=
literal|"default"
decl_stmt|;
DECL|field|RENAME_JSON
specifier|public
specifier|static
specifier|final
name|String
name|RENAME_JSON
init|=
literal|"boolean"
decl_stmt|;
DECL|field|DELETE_JSON
specifier|public
specifier|static
specifier|final
name|String
name|DELETE_JSON
init|=
literal|"boolean"
decl_stmt|;
DECL|field|MKDIRS_JSON
specifier|public
specifier|static
specifier|final
name|String
name|MKDIRS_JSON
init|=
literal|"boolean"
decl_stmt|;
DECL|field|HOME_DIR_JSON
specifier|public
specifier|static
specifier|final
name|String
name|HOME_DIR_JSON
init|=
literal|"Path"
decl_stmt|;
DECL|field|SET_REPLICATION_JSON
specifier|public
specifier|static
specifier|final
name|String
name|SET_REPLICATION_JSON
init|=
literal|"boolean"
decl_stmt|;
DECL|field|UPLOAD_CONTENT_TYPE
specifier|public
specifier|static
specifier|final
name|String
name|UPLOAD_CONTENT_TYPE
init|=
literal|"application/octet-stream"
decl_stmt|;
DECL|enum|FILE_TYPE
specifier|public
specifier|static
enum|enum
name|FILE_TYPE
block|{
DECL|enumConstant|FILE
DECL|enumConstant|DIRECTORY
DECL|enumConstant|SYMLINK
name|FILE
block|,
name|DIRECTORY
block|,
name|SYMLINK
block|;
DECL|method|getType (FileStatus fileStatus)
specifier|public
specifier|static
name|FILE_TYPE
name|getType
parameter_list|(
name|FileStatus
name|fileStatus
parameter_list|)
block|{
if|if
condition|(
name|fileStatus
operator|.
name|isFile
argument_list|()
condition|)
block|{
return|return
name|FILE
return|;
block|}
if|if
condition|(
name|fileStatus
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
return|return
name|DIRECTORY
return|;
block|}
if|if
condition|(
name|fileStatus
operator|.
name|isSymlink
argument_list|()
condition|)
block|{
return|return
name|SYMLINK
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Could not determine filetype for: "
operator|+
name|fileStatus
operator|.
name|getPath
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|field|FILE_STATUSES_JSON
specifier|public
specifier|static
specifier|final
name|String
name|FILE_STATUSES_JSON
init|=
literal|"FileStatuses"
decl_stmt|;
DECL|field|FILE_STATUS_JSON
specifier|public
specifier|static
specifier|final
name|String
name|FILE_STATUS_JSON
init|=
literal|"FileStatus"
decl_stmt|;
DECL|field|PATH_SUFFIX_JSON
specifier|public
specifier|static
specifier|final
name|String
name|PATH_SUFFIX_JSON
init|=
literal|"pathSuffix"
decl_stmt|;
DECL|field|TYPE_JSON
specifier|public
specifier|static
specifier|final
name|String
name|TYPE_JSON
init|=
literal|"type"
decl_stmt|;
DECL|field|LENGTH_JSON
specifier|public
specifier|static
specifier|final
name|String
name|LENGTH_JSON
init|=
literal|"length"
decl_stmt|;
DECL|field|OWNER_JSON
specifier|public
specifier|static
specifier|final
name|String
name|OWNER_JSON
init|=
literal|"owner"
decl_stmt|;
DECL|field|GROUP_JSON
specifier|public
specifier|static
specifier|final
name|String
name|GROUP_JSON
init|=
literal|"group"
decl_stmt|;
DECL|field|PERMISSION_JSON
specifier|public
specifier|static
specifier|final
name|String
name|PERMISSION_JSON
init|=
literal|"permission"
decl_stmt|;
DECL|field|ACCESS_TIME_JSON
specifier|public
specifier|static
specifier|final
name|String
name|ACCESS_TIME_JSON
init|=
literal|"accessTime"
decl_stmt|;
DECL|field|MODIFICATION_TIME_JSON
specifier|public
specifier|static
specifier|final
name|String
name|MODIFICATION_TIME_JSON
init|=
literal|"modificationTime"
decl_stmt|;
DECL|field|BLOCK_SIZE_JSON
specifier|public
specifier|static
specifier|final
name|String
name|BLOCK_SIZE_JSON
init|=
literal|"blockSize"
decl_stmt|;
DECL|field|REPLICATION_JSON
specifier|public
specifier|static
specifier|final
name|String
name|REPLICATION_JSON
init|=
literal|"replication"
decl_stmt|;
DECL|field|FILE_CHECKSUM_JSON
specifier|public
specifier|static
specifier|final
name|String
name|FILE_CHECKSUM_JSON
init|=
literal|"FileChecksum"
decl_stmt|;
DECL|field|CHECKSUM_ALGORITHM_JSON
specifier|public
specifier|static
specifier|final
name|String
name|CHECKSUM_ALGORITHM_JSON
init|=
literal|"algorithm"
decl_stmt|;
DECL|field|CHECKSUM_BYTES_JSON
specifier|public
specifier|static
specifier|final
name|String
name|CHECKSUM_BYTES_JSON
init|=
literal|"bytes"
decl_stmt|;
DECL|field|CHECKSUM_LENGTH_JSON
specifier|public
specifier|static
specifier|final
name|String
name|CHECKSUM_LENGTH_JSON
init|=
literal|"length"
decl_stmt|;
DECL|field|CONTENT_SUMMARY_JSON
specifier|public
specifier|static
specifier|final
name|String
name|CONTENT_SUMMARY_JSON
init|=
literal|"ContentSummary"
decl_stmt|;
DECL|field|CONTENT_SUMMARY_DIRECTORY_COUNT_JSON
specifier|public
specifier|static
specifier|final
name|String
name|CONTENT_SUMMARY_DIRECTORY_COUNT_JSON
init|=
literal|"directoryCount"
decl_stmt|;
DECL|field|CONTENT_SUMMARY_FILE_COUNT_JSON
specifier|public
specifier|static
specifier|final
name|String
name|CONTENT_SUMMARY_FILE_COUNT_JSON
init|=
literal|"fileCount"
decl_stmt|;
DECL|field|CONTENT_SUMMARY_LENGTH_JSON
specifier|public
specifier|static
specifier|final
name|String
name|CONTENT_SUMMARY_LENGTH_JSON
init|=
literal|"length"
decl_stmt|;
DECL|field|CONTENT_SUMMARY_QUOTA_JSON
specifier|public
specifier|static
specifier|final
name|String
name|CONTENT_SUMMARY_QUOTA_JSON
init|=
literal|"quota"
decl_stmt|;
DECL|field|CONTENT_SUMMARY_SPACE_CONSUMED_JSON
specifier|public
specifier|static
specifier|final
name|String
name|CONTENT_SUMMARY_SPACE_CONSUMED_JSON
init|=
literal|"spaceConsumed"
decl_stmt|;
DECL|field|CONTENT_SUMMARY_SPACE_QUOTA_JSON
specifier|public
specifier|static
specifier|final
name|String
name|CONTENT_SUMMARY_SPACE_QUOTA_JSON
init|=
literal|"spaceQuota"
decl_stmt|;
DECL|field|DELEGATION_TOKEN_JSON
specifier|public
specifier|static
specifier|final
name|String
name|DELEGATION_TOKEN_JSON
init|=
literal|"Token"
decl_stmt|;
DECL|field|DELEGATION_TOKEN_URL_STRING_JSON
specifier|public
specifier|static
specifier|final
name|String
name|DELEGATION_TOKEN_URL_STRING_JSON
init|=
literal|"urlString"
decl_stmt|;
DECL|field|ERROR_JSON
specifier|public
specifier|static
specifier|final
name|String
name|ERROR_JSON
init|=
literal|"RemoteException"
decl_stmt|;
DECL|field|ERROR_EXCEPTION_JSON
specifier|public
specifier|static
specifier|final
name|String
name|ERROR_EXCEPTION_JSON
init|=
literal|"exception"
decl_stmt|;
DECL|field|ERROR_CLASSNAME_JSON
specifier|public
specifier|static
specifier|final
name|String
name|ERROR_CLASSNAME_JSON
init|=
literal|"javaClassName"
decl_stmt|;
DECL|field|ERROR_MESSAGE_JSON
specifier|public
specifier|static
specifier|final
name|String
name|ERROR_MESSAGE_JSON
init|=
literal|"message"
decl_stmt|;
DECL|field|HTTP_TEMPORARY_REDIRECT
specifier|public
specifier|static
specifier|final
name|int
name|HTTP_TEMPORARY_REDIRECT
init|=
literal|307
decl_stmt|;
comment|/**    * Get operations.    */
DECL|enum|GetOpValues
specifier|public
enum|enum
name|GetOpValues
block|{
DECL|enumConstant|OPEN
DECL|enumConstant|GETFILESTATUS
DECL|enumConstant|LISTSTATUS
DECL|enumConstant|GETHOMEDIR
DECL|enumConstant|GETCONTENTSUMMARY
DECL|enumConstant|GETFILECHECKSUM
name|OPEN
block|,
name|GETFILESTATUS
block|,
name|LISTSTATUS
block|,
name|GETHOMEDIR
block|,
name|GETCONTENTSUMMARY
block|,
name|GETFILECHECKSUM
block|,
DECL|enumConstant|GETDELEGATIONTOKEN
DECL|enumConstant|GETFILEBLOCKLOCATIONS
DECL|enumConstant|INSTRUMENTATION
name|GETDELEGATIONTOKEN
block|,
name|GETFILEBLOCKLOCATIONS
block|,
name|INSTRUMENTATION
block|}
comment|/**    * Post operations.    */
DECL|enum|PostOpValues
specifier|public
specifier|static
enum|enum
name|PostOpValues
block|{
DECL|enumConstant|APPEND
name|APPEND
block|}
comment|/**    * Put operations.    */
DECL|enum|PutOpValues
specifier|public
specifier|static
enum|enum
name|PutOpValues
block|{
DECL|enumConstant|CREATE
DECL|enumConstant|MKDIRS
DECL|enumConstant|RENAME
DECL|enumConstant|SETOWNER
DECL|enumConstant|SETPERMISSION
DECL|enumConstant|SETREPLICATION
DECL|enumConstant|SETTIMES
name|CREATE
block|,
name|MKDIRS
block|,
name|RENAME
block|,
name|SETOWNER
block|,
name|SETPERMISSION
block|,
name|SETREPLICATION
block|,
name|SETTIMES
block|,
DECL|enumConstant|RENEWDELEGATIONTOKEN
DECL|enumConstant|CANCELDELEGATIONTOKEN
name|RENEWDELEGATIONTOKEN
block|,
name|CANCELDELEGATIONTOKEN
block|}
comment|/**    * Delete operations.    */
DECL|enum|DeleteOpValues
specifier|public
specifier|static
enum|enum
name|DeleteOpValues
block|{
DECL|enumConstant|DELETE
name|DELETE
block|}
DECL|field|HTTP_GET
specifier|private
specifier|static
specifier|final
name|String
name|HTTP_GET
init|=
literal|"GET"
decl_stmt|;
DECL|field|HTTP_PUT
specifier|private
specifier|static
specifier|final
name|String
name|HTTP_PUT
init|=
literal|"PUT"
decl_stmt|;
DECL|field|HTTP_POST
specifier|private
specifier|static
specifier|final
name|String
name|HTTP_POST
init|=
literal|"POST"
decl_stmt|;
DECL|field|HTTP_DELETE
specifier|private
specifier|static
specifier|final
name|String
name|HTTP_DELETE
init|=
literal|"DELETE"
decl_stmt|;
DECL|field|authToken
specifier|private
name|AuthenticatedURL
operator|.
name|Token
name|authToken
init|=
operator|new
name|AuthenticatedURL
operator|.
name|Token
argument_list|()
decl_stmt|;
DECL|field|uri
specifier|private
name|URI
name|uri
decl_stmt|;
DECL|field|workingDir
specifier|private
name|Path
name|workingDir
decl_stmt|;
DECL|field|doAs
specifier|private
name|String
name|doAs
decl_stmt|;
comment|/**    * Convenience method that creates a<code>HttpURLConnection</code> for the    * HttpFSServer file system operations.    *<p/>    * This methods performs and injects any needed authentication credentials    * via the {@link #getConnection(URL, String)} method    *    * @param method the HTTP method.    * @param params the query string parameters.    * @param path the file path    * @param makeQualified if the path should be 'makeQualified'    *    * @return a<code>HttpURLConnection</code> for the HttpFSServer server,    *         authenticated and ready to use for the specified path and file system operation.    *    * @throws IOException thrown if an IO error occurrs.    */
DECL|method|getConnection (String method, Map<String, String> params, Path path, boolean makeQualified)
specifier|private
name|HttpURLConnection
name|getConnection
parameter_list|(
name|String
name|method
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|,
name|Path
name|path
parameter_list|,
name|boolean
name|makeQualified
parameter_list|)
throws|throws
name|IOException
block|{
name|params
operator|.
name|put
argument_list|(
name|DO_AS_PARAM
argument_list|,
name|doAs
argument_list|)
expr_stmt|;
if|if
condition|(
name|makeQualified
condition|)
block|{
name|path
operator|=
name|makeQualified
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
name|URI
name|uri
init|=
name|path
operator|.
name|toUri
argument_list|()
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|uri
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"://"
argument_list|)
operator|.
name|append
argument_list|(
name|uri
operator|.
name|getAuthority
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|SERVICE_PREFIX
argument_list|)
operator|.
name|append
argument_list|(
name|uri
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|separator
init|=
literal|"?"
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|params
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|separator
argument_list|)
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
operator|.
name|append
argument_list|(
name|URLEncoder
operator|.
name|encode
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
literal|"UTF8"
argument_list|)
argument_list|)
expr_stmt|;
name|separator
operator|=
literal|"&"
expr_stmt|;
block|}
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|getConnection
argument_list|(
name|url
argument_list|,
name|method
argument_list|)
return|;
block|}
comment|/**    * Convenience method that creates a<code>HttpURLConnection</code> for the specified URL.    *<p/>    * This methods performs and injects any needed authentication credentials.    *    * @param url url to connect to.    * @param method the HTTP method.    *    * @return a<code>HttpURLConnection</code> for the HttpFSServer server, authenticated and ready to use for    *         the specified path and file system operation.    *    * @throws IOException thrown if an IO error occurrs.    */
DECL|method|getConnection (URL url, String method)
specifier|private
name|HttpURLConnection
name|getConnection
parameter_list|(
name|URL
name|url
parameter_list|,
name|String
name|method
parameter_list|)
throws|throws
name|IOException
block|{
name|Class
argument_list|<
name|?
extends|extends
name|Authenticator
argument_list|>
name|klass
init|=
name|getConf
argument_list|()
operator|.
name|getClass
argument_list|(
literal|"httpfs.authenticator.class"
argument_list|,
name|HttpKerberosAuthenticator
operator|.
name|class
argument_list|,
name|Authenticator
operator|.
name|class
argument_list|)
decl_stmt|;
name|Authenticator
name|authenticator
init|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|klass
argument_list|,
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|HttpURLConnection
name|conn
init|=
operator|new
name|AuthenticatedURL
argument_list|(
name|authenticator
argument_list|)
operator|.
name|openConnection
argument_list|(
name|url
argument_list|,
name|authToken
argument_list|)
decl_stmt|;
name|conn
operator|.
name|setRequestMethod
argument_list|(
name|method
argument_list|)
expr_stmt|;
if|if
condition|(
name|method
operator|.
name|equals
argument_list|(
name|HTTP_POST
argument_list|)
operator|||
name|method
operator|.
name|equals
argument_list|(
name|HTTP_PUT
argument_list|)
condition|)
block|{
name|conn
operator|.
name|setDoOutput
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|conn
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
comment|/**    * Convenience method that JSON Parses the<code>InputStream</code> of a<code>HttpURLConnection</code>.    *    * @param conn the<code>HttpURLConnection</code>.    *    * @return the parsed JSON object.    *    * @throws IOException thrown if the<code>InputStream</code> could not be JSON parsed.    */
DECL|method|jsonParse (HttpURLConnection conn)
specifier|private
specifier|static
name|Object
name|jsonParse
parameter_list|(
name|HttpURLConnection
name|conn
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|JSONParser
name|parser
init|=
operator|new
name|JSONParser
argument_list|()
decl_stmt|;
return|return
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|conn
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"JSON parser error, "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
comment|/**    * Validates the status of an<code>HttpURLConnection</code> against an expected HTTP    * status code. If the current status code is not the expected one it throws an exception    * with a detail message using Server side error messages if available.    *    * @param conn the<code>HttpURLConnection</code>.    * @param expected the expected HTTP status code.    *    * @throws IOException thrown if the current status code does not match the expected one.    */
DECL|method|validateResponse (HttpURLConnection conn, int expected)
specifier|private
specifier|static
name|void
name|validateResponse
parameter_list|(
name|HttpURLConnection
name|conn
parameter_list|,
name|int
name|expected
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|status
init|=
name|conn
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|status
operator|!=
name|expected
condition|)
block|{
try|try
block|{
name|JSONObject
name|json
init|=
operator|(
name|JSONObject
operator|)
name|jsonParse
argument_list|(
name|conn
argument_list|)
decl_stmt|;
name|json
operator|=
operator|(
name|JSONObject
operator|)
name|json
operator|.
name|get
argument_list|(
name|ERROR_JSON
argument_list|)
expr_stmt|;
name|String
name|message
init|=
operator|(
name|String
operator|)
name|json
operator|.
name|get
argument_list|(
name|ERROR_MESSAGE_JSON
argument_list|)
decl_stmt|;
name|String
name|exception
init|=
operator|(
name|String
operator|)
name|json
operator|.
name|get
argument_list|(
name|ERROR_EXCEPTION_JSON
argument_list|)
decl_stmt|;
name|String
name|className
init|=
operator|(
name|String
operator|)
name|json
operator|.
name|get
argument_list|(
name|ERROR_CLASSNAME_JSON
argument_list|)
decl_stmt|;
try|try
block|{
name|ClassLoader
name|cl
init|=
name|HttpFSFileSystem
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
name|Class
name|klass
init|=
name|cl
operator|.
name|loadClass
argument_list|(
name|className
argument_list|)
decl_stmt|;
name|Constructor
name|constr
init|=
name|klass
operator|.
name|getConstructor
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
throw|throw
operator|(
name|IOException
operator|)
name|constr
operator|.
name|newInstance
argument_list|(
name|message
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
name|ex
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"{0} - {1}"
argument_list|,
name|exception
argument_list|,
name|message
argument_list|)
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|ex
operator|.
name|getCause
argument_list|()
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|ex
operator|.
name|getCause
argument_list|()
throw|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"HTTP status [{0}], {1}"
argument_list|,
name|status
argument_list|,
name|conn
operator|.
name|getResponseMessage
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Called after a new FileSystem instance is constructed.    *    * @param name a uri whose authority section names the host, port, etc. for this FileSystem    * @param conf the configuration    */
annotation|@
name|Override
DECL|method|initialize (URI name, Configuration conf)
specifier|public
name|void
name|initialize
parameter_list|(
name|URI
name|name
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|doAs
operator|=
name|ugi
operator|.
name|getUserName
argument_list|()
expr_stmt|;
name|super
operator|.
name|initialize
argument_list|(
name|name
argument_list|,
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
name|uri
operator|=
operator|new
name|URI
argument_list|(
name|name
operator|.
name|getScheme
argument_list|()
operator|+
literal|"://"
operator|+
name|name
operator|.
name|getHost
argument_list|()
operator|+
literal|":"
operator|+
name|name
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
comment|/**    * Returns a URI whose scheme and authority identify this FileSystem.    *    * @return the URI whose scheme and authority identify this FileSystem.    */
annotation|@
name|Override
DECL|method|getUri ()
specifier|public
name|URI
name|getUri
parameter_list|()
block|{
return|return
name|uri
return|;
block|}
comment|/**    * HttpFSServer subclass of the<code>FSDataInputStream</code>.    *<p/>    * This implementation does not support the    *<code>PositionReadable</code> and<code>Seekable</code> methods.    */
DECL|class|HttpFSDataInputStream
specifier|private
specifier|static
class|class
name|HttpFSDataInputStream
extends|extends
name|FilterInputStream
implements|implements
name|Seekable
implements|,
name|PositionedReadable
block|{
DECL|method|HttpFSDataInputStream (InputStream in, int bufferSize)
specifier|protected
name|HttpFSDataInputStream
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|int
name|bufferSize
parameter_list|)
block|{
name|super
argument_list|(
operator|new
name|BufferedInputStream
argument_list|(
name|in
argument_list|,
name|bufferSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|read (long position, byte[] buffer, int offset, int length)
specifier|public
name|int
name|read
parameter_list|(
name|long
name|position
parameter_list|,
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|readFully (long position, byte[] buffer, int offset, int length)
specifier|public
name|void
name|readFully
parameter_list|(
name|long
name|position
parameter_list|,
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|readFully (long position, byte[] buffer)
specifier|public
name|void
name|readFully
parameter_list|(
name|long
name|position
parameter_list|,
name|byte
index|[]
name|buffer
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|seek (long pos)
specifier|public
name|void
name|seek
parameter_list|(
name|long
name|pos
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getPos ()
specifier|public
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|seekToNewSource (long targetPos)
specifier|public
name|boolean
name|seekToNewSource
parameter_list|(
name|long
name|targetPos
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
comment|/**    * Opens an FSDataInputStream at the indicated Path.    *</p>    * IMPORTANT: the returned<code><FSDataInputStream/code> does not support the    *<code>PositionReadable</code> and<code>Seekable</code> methods.    *    * @param f the file name to open    * @param bufferSize the size of the buffer to be used.    */
annotation|@
name|Override
DECL|method|open (Path f, int bufferSize)
specifier|public
name|FSDataInputStream
name|open
parameter_list|(
name|Path
name|f
parameter_list|,
name|int
name|bufferSize
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|OP_PARAM
argument_list|,
name|GetOpValues
operator|.
name|OPEN
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|HttpURLConnection
name|conn
init|=
name|getConnection
argument_list|(
name|HTTP_GET
argument_list|,
name|params
argument_list|,
name|f
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|validateResponse
argument_list|(
name|conn
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
return|return
operator|new
name|FSDataInputStream
argument_list|(
operator|new
name|HttpFSDataInputStream
argument_list|(
name|conn
operator|.
name|getInputStream
argument_list|()
argument_list|,
name|bufferSize
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * HttpFSServer subclass of the<code>FSDataOutputStream</code>.    *<p/>    * This implementation closes the underlying HTTP connection validating the Http connection status    * at closing time.    */
DECL|class|HttpFSDataOutputStream
specifier|private
specifier|static
class|class
name|HttpFSDataOutputStream
extends|extends
name|FSDataOutputStream
block|{
DECL|field|conn
specifier|private
name|HttpURLConnection
name|conn
decl_stmt|;
DECL|field|closeStatus
specifier|private
name|int
name|closeStatus
decl_stmt|;
DECL|method|HttpFSDataOutputStream (HttpURLConnection conn, OutputStream out, int closeStatus, Statistics stats)
specifier|public
name|HttpFSDataOutputStream
parameter_list|(
name|HttpURLConnection
name|conn
parameter_list|,
name|OutputStream
name|out
parameter_list|,
name|int
name|closeStatus
parameter_list|,
name|Statistics
name|stats
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|out
argument_list|,
name|stats
argument_list|)
expr_stmt|;
name|this
operator|.
name|conn
operator|=
name|conn
expr_stmt|;
name|this
operator|.
name|closeStatus
operator|=
name|closeStatus
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|validateResponse
argument_list|(
name|conn
argument_list|,
name|closeStatus
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Converts a<code>FsPermission</code> to a Unix octal representation.    *    * @param p the permission.    *    * @return the Unix string symbolic reprentation.    */
DECL|method|permissionToString (FsPermission p)
specifier|public
specifier|static
name|String
name|permissionToString
parameter_list|(
name|FsPermission
name|p
parameter_list|)
block|{
return|return
operator|(
name|p
operator|==
literal|null
operator|)
condition|?
name|DEFAULT_PERMISSION
else|:
name|Integer
operator|.
name|toString
argument_list|(
name|p
operator|.
name|toShort
argument_list|()
argument_list|,
literal|8
argument_list|)
return|;
block|}
comment|/*    * Common handling for uploading data for create and append operations.    */
DECL|method|uploadData (String method, Path f, Map<String, String> params, int bufferSize, int expectedStatus)
specifier|private
name|FSDataOutputStream
name|uploadData
parameter_list|(
name|String
name|method
parameter_list|,
name|Path
name|f
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|int
name|expectedStatus
parameter_list|)
throws|throws
name|IOException
block|{
name|HttpURLConnection
name|conn
init|=
name|getConnection
argument_list|(
name|method
argument_list|,
name|params
argument_list|,
name|f
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|conn
operator|.
name|setInstanceFollowRedirects
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|boolean
name|exceptionAlreadyHandled
init|=
literal|false
decl_stmt|;
try|try
block|{
if|if
condition|(
name|conn
operator|.
name|getResponseCode
argument_list|()
operator|==
name|HTTP_TEMPORARY_REDIRECT
condition|)
block|{
name|exceptionAlreadyHandled
operator|=
literal|true
expr_stmt|;
name|String
name|location
init|=
name|conn
operator|.
name|getHeaderField
argument_list|(
literal|"Location"
argument_list|)
decl_stmt|;
if|if
condition|(
name|location
operator|!=
literal|null
condition|)
block|{
name|conn
operator|=
name|getConnection
argument_list|(
operator|new
name|URL
argument_list|(
name|location
argument_list|)
argument_list|,
name|method
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setRequestProperty
argument_list|(
literal|"Content-Type"
argument_list|,
name|UPLOAD_CONTENT_TYPE
argument_list|)
expr_stmt|;
try|try
block|{
name|OutputStream
name|os
init|=
operator|new
name|BufferedOutputStream
argument_list|(
name|conn
operator|.
name|getOutputStream
argument_list|()
argument_list|,
name|bufferSize
argument_list|)
decl_stmt|;
return|return
operator|new
name|HttpFSDataOutputStream
argument_list|(
name|conn
argument_list|,
name|os
argument_list|,
name|expectedStatus
argument_list|,
name|statistics
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|validateResponse
argument_list|(
name|conn
argument_list|,
name|expectedStatus
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
else|else
block|{
name|validateResponse
argument_list|(
name|conn
argument_list|,
name|HTTP_TEMPORARY_REDIRECT
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Missing HTTP 'Location' header for ["
operator|+
name|conn
operator|.
name|getURL
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"Expected HTTP status was [307], received [{0}]"
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|exceptionAlreadyHandled
condition|)
block|{
throw|throw
name|ex
throw|;
block|}
else|else
block|{
name|validateResponse
argument_list|(
name|conn
argument_list|,
name|HTTP_TEMPORARY_REDIRECT
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
block|}
comment|/**    * Opens an FSDataOutputStream at the indicated Path with write-progress    * reporting.    *<p/>    * IMPORTANT: The<code>Progressable</code> parameter is not used.    *    * @param f the file name to open.    * @param permission file permission.    * @param overwrite if a file with this name already exists, then if true,    * the file will be overwritten, and if false an error will be thrown.    * @param bufferSize the size of the buffer to be used.    * @param replication required block replication for the file.    * @param blockSize block size.    * @param progress progressable.    *    * @throws IOException    * @see #setPermission(Path, FsPermission)    */
annotation|@
name|Override
DECL|method|create (Path f, FsPermission permission, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)
specifier|public
name|FSDataOutputStream
name|create
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|permission
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|OP_PARAM
argument_list|,
name|PutOpValues
operator|.
name|CREATE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|OVERWRITE_PARAM
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|overwrite
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|REPLICATION_PARAM
argument_list|,
name|Short
operator|.
name|toString
argument_list|(
name|replication
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|BLOCKSIZE_PARAM
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|blockSize
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|PERMISSION_PARAM
argument_list|,
name|permissionToString
argument_list|(
name|permission
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|uploadData
argument_list|(
name|HTTP_PUT
argument_list|,
name|f
argument_list|,
name|params
argument_list|,
name|bufferSize
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_CREATED
argument_list|)
return|;
block|}
comment|/**    * Append to an existing file (optional operation).    *<p/>    * IMPORTANT: The<code>Progressable</code> parameter is not used.    *    * @param f the existing file to be appended.    * @param bufferSize the size of the buffer to be used.    * @param progress for reporting progress if it is not null.    *    * @throws IOException    */
annotation|@
name|Override
DECL|method|append (Path f, int bufferSize, Progressable progress)
specifier|public
name|FSDataOutputStream
name|append
parameter_list|(
name|Path
name|f
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|OP_PARAM
argument_list|,
name|PostOpValues
operator|.
name|APPEND
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|uploadData
argument_list|(
name|HTTP_POST
argument_list|,
name|f
argument_list|,
name|params
argument_list|,
name|bufferSize
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
return|;
block|}
comment|/**    * Renames Path src to Path dst.  Can take place on local fs    * or remote DFS.    */
annotation|@
name|Override
DECL|method|rename (Path src, Path dst)
specifier|public
name|boolean
name|rename
parameter_list|(
name|Path
name|src
parameter_list|,
name|Path
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|OP_PARAM
argument_list|,
name|PutOpValues
operator|.
name|RENAME
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|DESTINATION_PARAM
argument_list|,
name|dst
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|HttpURLConnection
name|conn
init|=
name|getConnection
argument_list|(
name|HTTP_PUT
argument_list|,
name|params
argument_list|,
name|src
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|validateResponse
argument_list|(
name|conn
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
operator|(
name|JSONObject
operator|)
name|jsonParse
argument_list|(
name|conn
argument_list|)
decl_stmt|;
return|return
operator|(
name|Boolean
operator|)
name|json
operator|.
name|get
argument_list|(
name|RENAME_JSON
argument_list|)
return|;
block|}
comment|/**    * Delete a file.    *    * @deprecated Use delete(Path, boolean) instead    */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"deprecation"
block|}
argument_list|)
annotation|@
name|Deprecated
annotation|@
name|Override
DECL|method|delete (Path f)
specifier|public
name|boolean
name|delete
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|delete
argument_list|(
name|f
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Delete a file.    *    * @param f the path to delete.    * @param recursive if path is a directory and set to    * true, the directory is deleted else throws an exception. In    * case of a file the recursive can be set to either true or false.    *    * @return true if delete is successful else false.    *    * @throws IOException    */
annotation|@
name|Override
DECL|method|delete (Path f, boolean recursive)
specifier|public
name|boolean
name|delete
parameter_list|(
name|Path
name|f
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|OP_PARAM
argument_list|,
name|DeleteOpValues
operator|.
name|DELETE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|RECURSIVE_PARAM
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|recursive
argument_list|)
argument_list|)
expr_stmt|;
name|HttpURLConnection
name|conn
init|=
name|getConnection
argument_list|(
name|HTTP_DELETE
argument_list|,
name|params
argument_list|,
name|f
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|validateResponse
argument_list|(
name|conn
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
operator|(
name|JSONObject
operator|)
name|jsonParse
argument_list|(
name|conn
argument_list|)
decl_stmt|;
return|return
operator|(
name|Boolean
operator|)
name|json
operator|.
name|get
argument_list|(
name|DELETE_JSON
argument_list|)
return|;
block|}
comment|/**    * List the statuses of the files/directories in the given path if the path is    * a directory.    *    * @param f given path    *    * @return the statuses of the files/directories in the given patch    *    * @throws IOException    */
annotation|@
name|Override
DECL|method|listStatus (Path f)
specifier|public
name|FileStatus
index|[]
name|listStatus
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|OP_PARAM
argument_list|,
name|GetOpValues
operator|.
name|LISTSTATUS
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|HttpURLConnection
name|conn
init|=
name|getConnection
argument_list|(
name|HTTP_GET
argument_list|,
name|params
argument_list|,
name|f
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|validateResponse
argument_list|(
name|conn
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
operator|(
name|JSONObject
operator|)
name|jsonParse
argument_list|(
name|conn
argument_list|)
decl_stmt|;
name|json
operator|=
operator|(
name|JSONObject
operator|)
name|json
operator|.
name|get
argument_list|(
name|FILE_STATUSES_JSON
argument_list|)
expr_stmt|;
name|JSONArray
name|jsonArray
init|=
operator|(
name|JSONArray
operator|)
name|json
operator|.
name|get
argument_list|(
name|FILE_STATUS_JSON
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|array
init|=
operator|new
name|FileStatus
index|[
name|jsonArray
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|f
operator|=
name|makeQualified
argument_list|(
name|f
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jsonArray
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|array
index|[
name|i
index|]
operator|=
name|createFileStatus
argument_list|(
name|f
argument_list|,
operator|(
name|JSONObject
operator|)
name|jsonArray
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|array
return|;
block|}
comment|/**    * Set the current working directory for the given file system. All relative    * paths will be resolved relative to it.    *    * @param newDir new directory.    */
annotation|@
name|Override
DECL|method|setWorkingDirectory (Path newDir)
specifier|public
name|void
name|setWorkingDirectory
parameter_list|(
name|Path
name|newDir
parameter_list|)
block|{
name|workingDir
operator|=
name|newDir
expr_stmt|;
block|}
comment|/**    * Get the current working directory for the given file system    *    * @return the directory pathname    */
annotation|@
name|Override
DECL|method|getWorkingDirectory ()
specifier|public
name|Path
name|getWorkingDirectory
parameter_list|()
block|{
if|if
condition|(
name|workingDir
operator|==
literal|null
condition|)
block|{
name|workingDir
operator|=
name|getHomeDirectory
argument_list|()
expr_stmt|;
block|}
return|return
name|workingDir
return|;
block|}
comment|/**    * Make the given file and all non-existent parents into    * directories. Has the semantics of Unix 'mkdir -p'.    * Existence of the directory hierarchy is not an error.    */
annotation|@
name|Override
DECL|method|mkdirs (Path f, FsPermission permission)
specifier|public
name|boolean
name|mkdirs
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|OP_PARAM
argument_list|,
name|PutOpValues
operator|.
name|MKDIRS
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|PERMISSION_PARAM
argument_list|,
name|permissionToString
argument_list|(
name|permission
argument_list|)
argument_list|)
expr_stmt|;
name|HttpURLConnection
name|conn
init|=
name|getConnection
argument_list|(
name|HTTP_PUT
argument_list|,
name|params
argument_list|,
name|f
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|validateResponse
argument_list|(
name|conn
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
operator|(
name|JSONObject
operator|)
name|jsonParse
argument_list|(
name|conn
argument_list|)
decl_stmt|;
return|return
operator|(
name|Boolean
operator|)
name|json
operator|.
name|get
argument_list|(
name|MKDIRS_JSON
argument_list|)
return|;
block|}
comment|/**    * Return a file status object that represents the path.    *    * @param f The path we want information from    *    * @return a FileStatus object    *    * @throws FileNotFoundException when the path does not exist;    * IOException see specific implementation    */
annotation|@
name|Override
DECL|method|getFileStatus (Path f)
specifier|public
name|FileStatus
name|getFileStatus
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|OP_PARAM
argument_list|,
name|GetOpValues
operator|.
name|GETFILESTATUS
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|HttpURLConnection
name|conn
init|=
name|getConnection
argument_list|(
name|HTTP_GET
argument_list|,
name|params
argument_list|,
name|f
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|validateResponse
argument_list|(
name|conn
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
operator|(
name|JSONObject
operator|)
name|jsonParse
argument_list|(
name|conn
argument_list|)
decl_stmt|;
name|json
operator|=
operator|(
name|JSONObject
operator|)
name|json
operator|.
name|get
argument_list|(
name|FILE_STATUS_JSON
argument_list|)
expr_stmt|;
name|f
operator|=
name|makeQualified
argument_list|(
name|f
argument_list|)
expr_stmt|;
return|return
name|createFileStatus
argument_list|(
name|f
argument_list|,
name|json
argument_list|)
return|;
block|}
comment|/**    * Return the current user's home directory in this filesystem.    * The default implementation returns "/user/$USER/".    */
annotation|@
name|Override
DECL|method|getHomeDirectory ()
specifier|public
name|Path
name|getHomeDirectory
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|OP_PARAM
argument_list|,
name|GetOpValues
operator|.
name|GETHOMEDIR
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|HttpURLConnection
name|conn
init|=
name|getConnection
argument_list|(
name|HTTP_GET
argument_list|,
name|params
argument_list|,
operator|new
name|Path
argument_list|(
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|"/"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|validateResponse
argument_list|(
name|conn
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
operator|(
name|JSONObject
operator|)
name|jsonParse
argument_list|(
name|conn
argument_list|)
decl_stmt|;
return|return
operator|new
name|Path
argument_list|(
operator|(
name|String
operator|)
name|json
operator|.
name|get
argument_list|(
name|HOME_DIR_JSON
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
comment|/**    * Set owner of a path (i.e. a file or a directory).    * The parameters username and groupname cannot both be null.    *    * @param p The path    * @param username If it is null, the original username remains unchanged.    * @param groupname If it is null, the original groupname remains unchanged.    */
annotation|@
name|Override
DECL|method|setOwner (Path p, String username, String groupname)
specifier|public
name|void
name|setOwner
parameter_list|(
name|Path
name|p
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|groupname
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|OP_PARAM
argument_list|,
name|PutOpValues
operator|.
name|SETOWNER
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|OWNER_PARAM
argument_list|,
name|username
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|GROUP_PARAM
argument_list|,
name|groupname
argument_list|)
expr_stmt|;
name|HttpURLConnection
name|conn
init|=
name|getConnection
argument_list|(
name|HTTP_PUT
argument_list|,
name|params
argument_list|,
name|p
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|validateResponse
argument_list|(
name|conn
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set permission of a path.    *    * @param p path.    * @param permission permission.    */
annotation|@
name|Override
DECL|method|setPermission (Path p, FsPermission permission)
specifier|public
name|void
name|setPermission
parameter_list|(
name|Path
name|p
parameter_list|,
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|OP_PARAM
argument_list|,
name|PutOpValues
operator|.
name|SETPERMISSION
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|PERMISSION_PARAM
argument_list|,
name|permissionToString
argument_list|(
name|permission
argument_list|)
argument_list|)
expr_stmt|;
name|HttpURLConnection
name|conn
init|=
name|getConnection
argument_list|(
name|HTTP_PUT
argument_list|,
name|params
argument_list|,
name|p
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|validateResponse
argument_list|(
name|conn
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set access time of a file    *    * @param p The path    * @param mtime Set the modification time of this file.    * The number of milliseconds since Jan 1, 1970.    * A value of -1 means that this call should not set modification time.    * @param atime Set the access time of this file.    * The number of milliseconds since Jan 1, 1970.    * A value of -1 means that this call should not set access time.    */
annotation|@
name|Override
DECL|method|setTimes (Path p, long mtime, long atime)
specifier|public
name|void
name|setTimes
parameter_list|(
name|Path
name|p
parameter_list|,
name|long
name|mtime
parameter_list|,
name|long
name|atime
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|OP_PARAM
argument_list|,
name|PutOpValues
operator|.
name|SETTIMES
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|MODIFICATION_TIME_PARAM
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|mtime
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|ACCESS_TIME_PARAM
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|atime
argument_list|)
argument_list|)
expr_stmt|;
name|HttpURLConnection
name|conn
init|=
name|getConnection
argument_list|(
name|HTTP_PUT
argument_list|,
name|params
argument_list|,
name|p
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|validateResponse
argument_list|(
name|conn
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set replication for an existing file.    *    * @param src file name    * @param replication new replication    *    * @return true if successful;    *         false if file does not exist or is a directory    *    * @throws IOException    */
annotation|@
name|Override
DECL|method|setReplication (Path src, short replication)
specifier|public
name|boolean
name|setReplication
parameter_list|(
name|Path
name|src
parameter_list|,
name|short
name|replication
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|OP_PARAM
argument_list|,
name|PutOpValues
operator|.
name|SETREPLICATION
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|REPLICATION_PARAM
argument_list|,
name|Short
operator|.
name|toString
argument_list|(
name|replication
argument_list|)
argument_list|)
expr_stmt|;
name|HttpURLConnection
name|conn
init|=
name|getConnection
argument_list|(
name|HTTP_PUT
argument_list|,
name|params
argument_list|,
name|src
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|validateResponse
argument_list|(
name|conn
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
operator|(
name|JSONObject
operator|)
name|jsonParse
argument_list|(
name|conn
argument_list|)
decl_stmt|;
return|return
operator|(
name|Boolean
operator|)
name|json
operator|.
name|get
argument_list|(
name|SET_REPLICATION_JSON
argument_list|)
return|;
block|}
comment|/**    * Creates a<code>FileStatus</code> object using a JSON file-status payload    * received from a HttpFSServer server.    *    * @param json a JSON file-status payload received from a HttpFSServer server    *    * @return the corresponding<code>FileStatus</code>    */
DECL|method|createFileStatus (Path parent, JSONObject json)
specifier|private
name|FileStatus
name|createFileStatus
parameter_list|(
name|Path
name|parent
parameter_list|,
name|JSONObject
name|json
parameter_list|)
block|{
name|String
name|pathSuffix
init|=
operator|(
name|String
operator|)
name|json
operator|.
name|get
argument_list|(
name|PATH_SUFFIX_JSON
argument_list|)
decl_stmt|;
name|Path
name|path
init|=
operator|(
name|pathSuffix
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|)
condition|?
name|parent
else|:
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
name|pathSuffix
argument_list|)
decl_stmt|;
name|FILE_TYPE
name|type
init|=
name|FILE_TYPE
operator|.
name|valueOf
argument_list|(
operator|(
name|String
operator|)
name|json
operator|.
name|get
argument_list|(
name|TYPE_JSON
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|len
init|=
operator|(
name|Long
operator|)
name|json
operator|.
name|get
argument_list|(
name|LENGTH_JSON
argument_list|)
decl_stmt|;
name|String
name|owner
init|=
operator|(
name|String
operator|)
name|json
operator|.
name|get
argument_list|(
name|OWNER_JSON
argument_list|)
decl_stmt|;
name|String
name|group
init|=
operator|(
name|String
operator|)
name|json
operator|.
name|get
argument_list|(
name|GROUP_JSON
argument_list|)
decl_stmt|;
name|FsPermission
name|permission
init|=
operator|new
name|FsPermission
argument_list|(
name|Short
operator|.
name|parseShort
argument_list|(
operator|(
name|String
operator|)
name|json
operator|.
name|get
argument_list|(
name|PERMISSION_JSON
argument_list|)
argument_list|,
literal|8
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|aTime
init|=
operator|(
name|Long
operator|)
name|json
operator|.
name|get
argument_list|(
name|ACCESS_TIME_JSON
argument_list|)
decl_stmt|;
name|long
name|mTime
init|=
operator|(
name|Long
operator|)
name|json
operator|.
name|get
argument_list|(
name|MODIFICATION_TIME_JSON
argument_list|)
decl_stmt|;
name|long
name|blockSize
init|=
operator|(
name|Long
operator|)
name|json
operator|.
name|get
argument_list|(
name|BLOCK_SIZE_JSON
argument_list|)
decl_stmt|;
name|short
name|replication
init|=
operator|(
operator|(
name|Long
operator|)
name|json
operator|.
name|get
argument_list|(
name|REPLICATION_JSON
argument_list|)
operator|)
operator|.
name|shortValue
argument_list|()
decl_stmt|;
name|FileStatus
name|fileStatus
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|FILE
case|:
case|case
name|DIRECTORY
case|:
name|fileStatus
operator|=
operator|new
name|FileStatus
argument_list|(
name|len
argument_list|,
operator|(
name|type
operator|==
name|FILE_TYPE
operator|.
name|DIRECTORY
operator|)
argument_list|,
name|replication
argument_list|,
name|blockSize
argument_list|,
name|mTime
argument_list|,
name|aTime
argument_list|,
name|permission
argument_list|,
name|owner
argument_list|,
name|group
argument_list|,
name|path
argument_list|)
expr_stmt|;
break|break;
case|case
name|SYMLINK
case|:
name|Path
name|symLink
init|=
literal|null
decl_stmt|;
name|fileStatus
operator|=
operator|new
name|FileStatus
argument_list|(
name|len
argument_list|,
literal|false
argument_list|,
name|replication
argument_list|,
name|blockSize
argument_list|,
name|mTime
argument_list|,
name|aTime
argument_list|,
name|permission
argument_list|,
name|owner
argument_list|,
name|group
argument_list|,
name|symLink
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
return|return
name|fileStatus
return|;
block|}
annotation|@
name|Override
DECL|method|getContentSummary (Path f)
specifier|public
name|ContentSummary
name|getContentSummary
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|OP_PARAM
argument_list|,
name|GetOpValues
operator|.
name|GETCONTENTSUMMARY
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|HttpURLConnection
name|conn
init|=
name|getConnection
argument_list|(
name|HTTP_GET
argument_list|,
name|params
argument_list|,
name|f
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|validateResponse
argument_list|(
name|conn
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
call|(
name|JSONObject
call|)
argument_list|(
operator|(
name|JSONObject
operator|)
name|jsonParse
argument_list|(
name|conn
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
name|CONTENT_SUMMARY_JSON
argument_list|)
decl_stmt|;
return|return
operator|new
name|ContentSummary
argument_list|(
operator|(
name|Long
operator|)
name|json
operator|.
name|get
argument_list|(
name|CONTENT_SUMMARY_LENGTH_JSON
argument_list|)
argument_list|,
operator|(
name|Long
operator|)
name|json
operator|.
name|get
argument_list|(
name|CONTENT_SUMMARY_FILE_COUNT_JSON
argument_list|)
argument_list|,
operator|(
name|Long
operator|)
name|json
operator|.
name|get
argument_list|(
name|CONTENT_SUMMARY_DIRECTORY_COUNT_JSON
argument_list|)
argument_list|,
operator|(
name|Long
operator|)
name|json
operator|.
name|get
argument_list|(
name|CONTENT_SUMMARY_QUOTA_JSON
argument_list|)
argument_list|,
operator|(
name|Long
operator|)
name|json
operator|.
name|get
argument_list|(
name|CONTENT_SUMMARY_SPACE_CONSUMED_JSON
argument_list|)
argument_list|,
operator|(
name|Long
operator|)
name|json
operator|.
name|get
argument_list|(
name|CONTENT_SUMMARY_SPACE_QUOTA_JSON
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getFileChecksum (Path f)
specifier|public
name|FileChecksum
name|getFileChecksum
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|OP_PARAM
argument_list|,
name|GetOpValues
operator|.
name|GETFILECHECKSUM
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|HttpURLConnection
name|conn
init|=
name|getConnection
argument_list|(
name|HTTP_GET
argument_list|,
name|params
argument_list|,
name|f
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|validateResponse
argument_list|(
name|conn
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
specifier|final
name|JSONObject
name|json
init|=
call|(
name|JSONObject
call|)
argument_list|(
operator|(
name|JSONObject
operator|)
name|jsonParse
argument_list|(
name|conn
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
name|FILE_CHECKSUM_JSON
argument_list|)
decl_stmt|;
return|return
operator|new
name|FileChecksum
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getAlgorithmName
parameter_list|()
block|{
return|return
operator|(
name|String
operator|)
name|json
operator|.
name|get
argument_list|(
name|CHECKSUM_ALGORITHM_JSON
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getLength
parameter_list|()
block|{
return|return
operator|(
operator|(
name|Long
operator|)
name|json
operator|.
name|get
argument_list|(
name|CHECKSUM_LENGTH_JSON
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getBytes
parameter_list|()
block|{
return|return
name|StringUtils
operator|.
name|hexStringToByte
argument_list|(
operator|(
name|String
operator|)
name|json
operator|.
name|get
argument_list|(
name|CHECKSUM_BYTES_JSON
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

