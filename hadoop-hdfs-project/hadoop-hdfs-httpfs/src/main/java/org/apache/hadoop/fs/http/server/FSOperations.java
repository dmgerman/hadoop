begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.http.server
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|http
operator|.
name|server
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ContentSummary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileChecksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|GlobFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|http
operator|.
name|client
operator|.
name|HttpFSFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|lib
operator|.
name|service
operator|.
name|FileSystemAccess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|simple
operator|.
name|JSONArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|simple
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * FileSystem operation executors used by {@link HttpFSServer}.  */
end_comment

begin_class
DECL|class|FSOperations
specifier|public
class|class
name|FSOperations
block|{
comment|/**    * Converts a Unix permission octal& symbolic representation    * (i.e. 655 or -rwxr--r--) into a FileSystemAccess permission.    *    * @param str Unix permission symbolic representation.    *    * @return the FileSystemAccess permission. If the given string was    *         'default', it returns<code>FsPermission.getDefault()</code>.    */
DECL|method|getPermission (String str)
specifier|private
specifier|static
name|FsPermission
name|getPermission
parameter_list|(
name|String
name|str
parameter_list|)
block|{
name|FsPermission
name|permission
decl_stmt|;
if|if
condition|(
name|str
operator|.
name|equals
argument_list|(
name|HttpFSFileSystem
operator|.
name|DEFAULT_PERMISSION
argument_list|)
condition|)
block|{
name|permission
operator|=
name|FsPermission
operator|.
name|getDefault
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|str
operator|.
name|length
argument_list|()
operator|==
literal|3
condition|)
block|{
name|permission
operator|=
operator|new
name|FsPermission
argument_list|(
name|Short
operator|.
name|parseShort
argument_list|(
name|str
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|permission
operator|=
name|FsPermission
operator|.
name|valueOf
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
return|return
name|permission
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"deprecation"
block|}
argument_list|)
DECL|method|fileStatusToJSONRaw (FileStatus status, boolean emptyPathSuffix)
specifier|private
specifier|static
name|Map
name|fileStatusToJSONRaw
parameter_list|(
name|FileStatus
name|status
parameter_list|,
name|boolean
name|emptyPathSuffix
parameter_list|)
block|{
name|Map
name|json
init|=
operator|new
name|LinkedHashMap
argument_list|()
decl_stmt|;
name|json
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|PATH_SUFFIX_JSON
argument_list|,
operator|(
name|emptyPathSuffix
operator|)
condition|?
literal|""
else|:
name|status
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|TYPE_JSON
argument_list|,
name|HttpFSFileSystem
operator|.
name|FILE_TYPE
operator|.
name|getType
argument_list|(
name|status
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|LENGTH_JSON
argument_list|,
name|status
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|OWNER_JSON
argument_list|,
name|status
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|GROUP_JSON
argument_list|,
name|status
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|PERMISSION_JSON
argument_list|,
name|HttpFSFileSystem
operator|.
name|permissionToString
argument_list|(
name|status
operator|.
name|getPermission
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|ACCESS_TIME_JSON
argument_list|,
name|status
operator|.
name|getAccessTime
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|MODIFICATION_TIME_JSON
argument_list|,
name|status
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|BLOCK_SIZE_JSON
argument_list|,
name|status
operator|.
name|getBlockSize
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|REPLICATION_JSON
argument_list|,
name|status
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|json
return|;
block|}
comment|/**    * Converts a FileSystemAccess<code>FileStatus</code> object into a JSON    * object.    *    * @param status FileSystemAccess file status.    *    * @return The JSON representation of the file status.    */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"deprecation"
block|}
argument_list|)
DECL|method|fileStatusToJSON (FileStatus status)
specifier|private
specifier|static
name|Map
name|fileStatusToJSON
parameter_list|(
name|FileStatus
name|status
parameter_list|)
block|{
name|Map
name|json
init|=
operator|new
name|LinkedHashMap
argument_list|()
decl_stmt|;
name|json
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|FILE_STATUS_JSON
argument_list|,
name|fileStatusToJSONRaw
argument_list|(
name|status
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|json
return|;
block|}
comment|/**    * Converts a<code>FileChecksum</code> object into a JSON array    * object.    *    * @param checksum file checksum.    *    * @return The JSON representation of the file checksum.    */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|}
argument_list|)
DECL|method|fileChecksumToJSON (FileChecksum checksum)
specifier|private
specifier|static
name|Map
name|fileChecksumToJSON
parameter_list|(
name|FileChecksum
name|checksum
parameter_list|)
block|{
name|Map
name|json
init|=
operator|new
name|LinkedHashMap
argument_list|()
decl_stmt|;
name|json
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|CHECKSUM_ALGORITHM_JSON
argument_list|,
name|checksum
operator|.
name|getAlgorithmName
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|CHECKSUM_BYTES_JSON
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
operator|.
name|byteToHexString
argument_list|(
name|checksum
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|CHECKSUM_LENGTH_JSON
argument_list|,
name|checksum
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|Map
name|response
init|=
operator|new
name|LinkedHashMap
argument_list|()
decl_stmt|;
name|response
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|FILE_CHECKSUM_JSON
argument_list|,
name|json
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
comment|/**    * Converts a<code>ContentSummary</code> object into a JSON array    * object.    *    * @param contentSummary the content summary    *    * @return The JSON representation of the content summary.    */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|}
argument_list|)
DECL|method|contentSummaryToJSON (ContentSummary contentSummary)
specifier|private
specifier|static
name|Map
name|contentSummaryToJSON
parameter_list|(
name|ContentSummary
name|contentSummary
parameter_list|)
block|{
name|Map
name|json
init|=
operator|new
name|LinkedHashMap
argument_list|()
decl_stmt|;
name|json
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|CONTENT_SUMMARY_DIRECTORY_COUNT_JSON
argument_list|,
name|contentSummary
operator|.
name|getDirectoryCount
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|CONTENT_SUMMARY_FILE_COUNT_JSON
argument_list|,
name|contentSummary
operator|.
name|getFileCount
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|CONTENT_SUMMARY_LENGTH_JSON
argument_list|,
name|contentSummary
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|CONTENT_SUMMARY_QUOTA_JSON
argument_list|,
name|contentSummary
operator|.
name|getQuota
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|CONTENT_SUMMARY_SPACE_CONSUMED_JSON
argument_list|,
name|contentSummary
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|CONTENT_SUMMARY_SPACE_QUOTA_JSON
argument_list|,
name|contentSummary
operator|.
name|getSpaceQuota
argument_list|()
argument_list|)
expr_stmt|;
name|Map
name|response
init|=
operator|new
name|LinkedHashMap
argument_list|()
decl_stmt|;
name|response
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|CONTENT_SUMMARY_JSON
argument_list|,
name|json
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
comment|/**    * Converts a FileSystemAccess<code>FileStatus</code> array into a JSON array    * object.    *    * @param status FileSystemAccess file status array.    *<code>SCHEME://HOST:PORT</code> in the file status.    *    * @return The JSON representation of the file status array.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|fileStatusToJSON (FileStatus[] status)
specifier|private
specifier|static
name|Map
name|fileStatusToJSON
parameter_list|(
name|FileStatus
index|[]
name|status
parameter_list|)
block|{
name|JSONArray
name|json
init|=
operator|new
name|JSONArray
argument_list|()
decl_stmt|;
if|if
condition|(
name|status
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|FileStatus
name|s
range|:
name|status
control|)
block|{
name|json
operator|.
name|add
argument_list|(
name|fileStatusToJSONRaw
argument_list|(
name|s
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Map
name|response
init|=
operator|new
name|LinkedHashMap
argument_list|()
decl_stmt|;
name|Map
name|temp
init|=
operator|new
name|LinkedHashMap
argument_list|()
decl_stmt|;
name|temp
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|FILE_STATUS_JSON
argument_list|,
name|json
argument_list|)
expr_stmt|;
name|response
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|FILE_STATUSES_JSON
argument_list|,
name|temp
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
comment|/**    * Converts an object into a Json Map with with one key-value entry.    *<p/>    * It assumes the given value is either a JSON primitive type or a    *<code>JsonAware</code> instance.    *    * @param name name for the key of the entry.    * @param value for the value of the entry.    *    * @return the JSON representation of the key-value pair.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|toJSON (String name, Object value)
specifier|private
specifier|static
name|JSONObject
name|toJSON
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|JSONObject
name|json
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
name|json
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|json
return|;
block|}
comment|/**    * Executor that performs an append FileSystemAccess files system operation.    */
DECL|class|FSAppend
specifier|public
specifier|static
class|class
name|FSAppend
implements|implements
name|FileSystemAccess
operator|.
name|FileSystemExecutor
argument_list|<
name|Void
argument_list|>
block|{
DECL|field|is
specifier|private
name|InputStream
name|is
decl_stmt|;
DECL|field|path
specifier|private
name|Path
name|path
decl_stmt|;
comment|/**      * Creates an Append executor.      *      * @param is input stream to append.      * @param path path of the file to append.      */
DECL|method|FSAppend (InputStream is, String path)
specifier|public
name|FSAppend
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|is
operator|=
name|is
expr_stmt|;
name|this
operator|.
name|path
operator|=
operator|new
name|Path
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
comment|/**      * Executes the filesystem operation.      *      * @param fs filesystem instance to use.      *      * @return void.      *      * @throws IOException thrown if an IO error occured.      */
annotation|@
name|Override
DECL|method|execute (FileSystem fs)
specifier|public
name|Void
name|execute
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|bufferSize
init|=
name|fs
operator|.
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
literal|"httpfs.buffer.size"
argument_list|,
literal|4096
argument_list|)
decl_stmt|;
name|OutputStream
name|os
init|=
name|fs
operator|.
name|append
argument_list|(
name|path
argument_list|,
name|bufferSize
argument_list|)
decl_stmt|;
name|IOUtils
operator|.
name|copyBytes
argument_list|(
name|is
argument_list|,
name|os
argument_list|,
name|bufferSize
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Executor that performs a content-summary FileSystemAccess files system operation.    */
DECL|class|FSContentSummary
specifier|public
specifier|static
class|class
name|FSContentSummary
implements|implements
name|FileSystemAccess
operator|.
name|FileSystemExecutor
argument_list|<
name|Map
argument_list|>
block|{
DECL|field|path
specifier|private
name|Path
name|path
decl_stmt|;
comment|/**      * Creates a content-summary executor.      *      * @param path the path to retrieve the content-summary.      */
DECL|method|FSContentSummary (String path)
specifier|public
name|FSContentSummary
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
operator|new
name|Path
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
comment|/**      * Executes the filesystem operation.      *      * @param fs filesystem instance to use.      *      * @return a Map object (JSON friendly) with the content-summary.      *      * @throws IOException thrown if an IO error occured.      */
annotation|@
name|Override
DECL|method|execute (FileSystem fs)
specifier|public
name|Map
name|execute
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|ContentSummary
name|contentSummary
init|=
name|fs
operator|.
name|getContentSummary
argument_list|(
name|path
argument_list|)
decl_stmt|;
return|return
name|contentSummaryToJSON
argument_list|(
name|contentSummary
argument_list|)
return|;
block|}
block|}
comment|/**    * Executor that performs a create FileSystemAccess files system operation.    */
DECL|class|FSCreate
specifier|public
specifier|static
class|class
name|FSCreate
implements|implements
name|FileSystemAccess
operator|.
name|FileSystemExecutor
argument_list|<
name|Void
argument_list|>
block|{
DECL|field|is
specifier|private
name|InputStream
name|is
decl_stmt|;
DECL|field|path
specifier|private
name|Path
name|path
decl_stmt|;
DECL|field|permission
specifier|private
name|String
name|permission
decl_stmt|;
DECL|field|override
specifier|private
name|boolean
name|override
decl_stmt|;
DECL|field|replication
specifier|private
name|short
name|replication
decl_stmt|;
DECL|field|blockSize
specifier|private
name|long
name|blockSize
decl_stmt|;
comment|/**      * Creates a Create executor.      *      * @param is input stream to for the file to create.      * @param path path of the file to create.      * @param perm permission for the file.      * @param override if the file should be overriden if it already exist.      * @param repl the replication factor for the file.      * @param blockSize the block size for the file.      */
DECL|method|FSCreate (InputStream is, String path, String perm, boolean override, short repl, long blockSize)
specifier|public
name|FSCreate
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|perm
parameter_list|,
name|boolean
name|override
parameter_list|,
name|short
name|repl
parameter_list|,
name|long
name|blockSize
parameter_list|)
block|{
name|this
operator|.
name|is
operator|=
name|is
expr_stmt|;
name|this
operator|.
name|path
operator|=
operator|new
name|Path
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|this
operator|.
name|permission
operator|=
name|perm
expr_stmt|;
name|this
operator|.
name|override
operator|=
name|override
expr_stmt|;
name|this
operator|.
name|replication
operator|=
name|repl
expr_stmt|;
name|this
operator|.
name|blockSize
operator|=
name|blockSize
expr_stmt|;
block|}
comment|/**      * Executes the filesystem operation.      *      * @param fs filesystem instance to use.      *      * @return The URI of the created file.      *      * @throws IOException thrown if an IO error occured.      */
annotation|@
name|Override
DECL|method|execute (FileSystem fs)
specifier|public
name|Void
name|execute
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|replication
operator|==
operator|-
literal|1
condition|)
block|{
name|replication
operator|=
name|fs
operator|.
name|getDefaultReplication
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|blockSize
operator|==
operator|-
literal|1
condition|)
block|{
name|blockSize
operator|=
name|fs
operator|.
name|getDefaultBlockSize
argument_list|()
expr_stmt|;
block|}
name|FsPermission
name|fsPermission
init|=
name|getPermission
argument_list|(
name|permission
argument_list|)
decl_stmt|;
name|int
name|bufferSize
init|=
name|fs
operator|.
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
literal|"httpfs.buffer.size"
argument_list|,
literal|4096
argument_list|)
decl_stmt|;
name|OutputStream
name|os
init|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|,
name|fsPermission
argument_list|,
name|override
argument_list|,
name|bufferSize
argument_list|,
name|replication
argument_list|,
name|blockSize
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|IOUtils
operator|.
name|copyBytes
argument_list|(
name|is
argument_list|,
name|os
argument_list|,
name|bufferSize
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Executor that performs a delete FileSystemAccess files system operation.    */
DECL|class|FSDelete
specifier|public
specifier|static
class|class
name|FSDelete
implements|implements
name|FileSystemAccess
operator|.
name|FileSystemExecutor
argument_list|<
name|JSONObject
argument_list|>
block|{
DECL|field|path
specifier|private
name|Path
name|path
decl_stmt|;
DECL|field|recursive
specifier|private
name|boolean
name|recursive
decl_stmt|;
comment|/**      * Creates a Delete executor.      *      * @param path path to delete.      * @param recursive if the delete should be recursive or not.      */
DECL|method|FSDelete (String path, boolean recursive)
specifier|public
name|FSDelete
parameter_list|(
name|String
name|path
parameter_list|,
name|boolean
name|recursive
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
operator|new
name|Path
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|this
operator|.
name|recursive
operator|=
name|recursive
expr_stmt|;
block|}
comment|/**      * Executes the filesystem operation.      *      * @param fs filesystem instance to use.      *      * @return<code>true</code> if the delete operation was successful,      *<code>false</code> otherwise.      *      * @throws IOException thrown if an IO error occured.      */
annotation|@
name|Override
DECL|method|execute (FileSystem fs)
specifier|public
name|JSONObject
name|execute
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|deleted
init|=
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
name|recursive
argument_list|)
decl_stmt|;
return|return
name|toJSON
argument_list|(
name|HttpFSFileSystem
operator|.
name|DELETE_JSON
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|deleted
argument_list|)
return|;
block|}
block|}
comment|/**    * Executor that performs a file-checksum FileSystemAccess files system operation.    */
DECL|class|FSFileChecksum
specifier|public
specifier|static
class|class
name|FSFileChecksum
implements|implements
name|FileSystemAccess
operator|.
name|FileSystemExecutor
argument_list|<
name|Map
argument_list|>
block|{
DECL|field|path
specifier|private
name|Path
name|path
decl_stmt|;
comment|/**      * Creates a file-checksum executor.      *      * @param path the path to retrieve the checksum.      */
DECL|method|FSFileChecksum (String path)
specifier|public
name|FSFileChecksum
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
operator|new
name|Path
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
comment|/**      * Executes the filesystem operation.      *      * @param fs filesystem instance to use.      *      * @return a Map object (JSON friendly) with the file checksum.      *      * @throws IOException thrown if an IO error occured.      */
annotation|@
name|Override
DECL|method|execute (FileSystem fs)
specifier|public
name|Map
name|execute
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|FileChecksum
name|checksum
init|=
name|fs
operator|.
name|getFileChecksum
argument_list|(
name|path
argument_list|)
decl_stmt|;
return|return
name|fileChecksumToJSON
argument_list|(
name|checksum
argument_list|)
return|;
block|}
block|}
comment|/**    * Executor that performs a file-status FileSystemAccess files system operation.    */
DECL|class|FSFileStatus
specifier|public
specifier|static
class|class
name|FSFileStatus
implements|implements
name|FileSystemAccess
operator|.
name|FileSystemExecutor
argument_list|<
name|Map
argument_list|>
block|{
DECL|field|path
specifier|private
name|Path
name|path
decl_stmt|;
comment|/**      * Creates a file-status executor.      *      * @param path the path to retrieve the status.      */
DECL|method|FSFileStatus (String path)
specifier|public
name|FSFileStatus
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
operator|new
name|Path
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
comment|/**      * Executes the filesystem operation.      *      * @param fs filesystem instance to use.      *      * @return a Map object (JSON friendly) with the file status.      *      * @throws IOException thrown if an IO error occured.      */
annotation|@
name|Override
DECL|method|execute (FileSystem fs)
specifier|public
name|Map
name|execute
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
name|status
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
return|return
name|fileStatusToJSON
argument_list|(
name|status
argument_list|)
return|;
block|}
block|}
comment|/**    * Executor that performs a home-dir FileSystemAccess files system operation.    */
DECL|class|FSHomeDir
specifier|public
specifier|static
class|class
name|FSHomeDir
implements|implements
name|FileSystemAccess
operator|.
name|FileSystemExecutor
argument_list|<
name|JSONObject
argument_list|>
block|{
comment|/**      * Executes the filesystem operation.      *      * @param fs filesystem instance to use.      *      * @return a JSON object with the user home directory.      *      * @throws IOException thrown if an IO error occured.      */
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|execute (FileSystem fs)
specifier|public
name|JSONObject
name|execute
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|homeDir
init|=
name|fs
operator|.
name|getHomeDirectory
argument_list|()
decl_stmt|;
name|JSONObject
name|json
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
name|json
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|HOME_DIR_JSON
argument_list|,
name|homeDir
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|json
return|;
block|}
block|}
comment|/**    * Executor that performs a list-status FileSystemAccess files system operation.    */
DECL|class|FSListStatus
specifier|public
specifier|static
class|class
name|FSListStatus
implements|implements
name|FileSystemAccess
operator|.
name|FileSystemExecutor
argument_list|<
name|Map
argument_list|>
implements|,
name|PathFilter
block|{
DECL|field|path
specifier|private
name|Path
name|path
decl_stmt|;
DECL|field|filter
specifier|private
name|PathFilter
name|filter
decl_stmt|;
comment|/**      * Creates a list-status executor.      *      * @param path the directory to retrieve the status of its contents.      * @param filter glob filter to use.      *      * @throws IOException thrown if the filter expression is incorrect.      */
DECL|method|FSListStatus (String path, String filter)
specifier|public
name|FSListStatus
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|filter
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|path
operator|=
operator|new
name|Path
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|this
operator|.
name|filter
operator|=
operator|(
name|filter
operator|==
literal|null
operator|)
condition|?
name|this
else|:
operator|new
name|GlobFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
block|}
comment|/**      * Executes the filesystem operation.      *      * @param fs filesystem instance to use.      *      * @return a Map with the file status of the directory      *         contents.      *      * @throws IOException thrown if an IO error occured.      */
annotation|@
name|Override
DECL|method|execute (FileSystem fs)
specifier|public
name|Map
name|execute
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
index|[]
name|status
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|path
argument_list|,
name|filter
argument_list|)
decl_stmt|;
return|return
name|fileStatusToJSON
argument_list|(
name|status
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|accept (Path path)
specifier|public
name|boolean
name|accept
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
comment|/**    * Executor that performs a mkdirs FileSystemAccess files system operation.    */
DECL|class|FSMkdirs
specifier|public
specifier|static
class|class
name|FSMkdirs
implements|implements
name|FileSystemAccess
operator|.
name|FileSystemExecutor
argument_list|<
name|JSONObject
argument_list|>
block|{
DECL|field|path
specifier|private
name|Path
name|path
decl_stmt|;
DECL|field|permission
specifier|private
name|String
name|permission
decl_stmt|;
comment|/**      * Creates a mkdirs executor.      *      * @param path directory path to create.      * @param permission permission to use.      */
DECL|method|FSMkdirs (String path, String permission)
specifier|public
name|FSMkdirs
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|permission
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
operator|new
name|Path
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|this
operator|.
name|permission
operator|=
name|permission
expr_stmt|;
block|}
comment|/**      * Executes the filesystem operation.      *      * @param fs filesystem instance to use.      *      * @return<code>true</code> if the mkdirs operation was successful,      *<code>false</code> otherwise.      *      * @throws IOException thrown if an IO error occured.      */
annotation|@
name|Override
DECL|method|execute (FileSystem fs)
specifier|public
name|JSONObject
name|execute
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|FsPermission
name|fsPermission
init|=
name|getPermission
argument_list|(
name|permission
argument_list|)
decl_stmt|;
name|boolean
name|mkdirs
init|=
name|fs
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|,
name|fsPermission
argument_list|)
decl_stmt|;
return|return
name|toJSON
argument_list|(
name|HttpFSFileSystem
operator|.
name|MKDIRS_JSON
argument_list|,
name|mkdirs
argument_list|)
return|;
block|}
block|}
comment|/**    * Executor that performs a open FileSystemAccess files system operation.    */
DECL|class|FSOpen
specifier|public
specifier|static
class|class
name|FSOpen
implements|implements
name|FileSystemAccess
operator|.
name|FileSystemExecutor
argument_list|<
name|InputStream
argument_list|>
block|{
DECL|field|path
specifier|private
name|Path
name|path
decl_stmt|;
comment|/**      * Creates a open executor.      *      * @param path file to open.      */
DECL|method|FSOpen (String path)
specifier|public
name|FSOpen
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
operator|new
name|Path
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
comment|/**      * Executes the filesystem operation.      *      * @param fs filesystem instance to use.      *      * @return The inputstream of the file.      *      * @throws IOException thrown if an IO error occured.      */
annotation|@
name|Override
DECL|method|execute (FileSystem fs)
specifier|public
name|InputStream
name|execute
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|bufferSize
init|=
name|HttpFSServerWebApp
operator|.
name|get
argument_list|()
operator|.
name|getConfig
argument_list|()
operator|.
name|getInt
argument_list|(
literal|"httpfs.buffer.size"
argument_list|,
literal|4096
argument_list|)
decl_stmt|;
return|return
name|fs
operator|.
name|open
argument_list|(
name|path
argument_list|,
name|bufferSize
argument_list|)
return|;
block|}
block|}
comment|/**    * Executor that performs a rename FileSystemAccess files system operation.    */
DECL|class|FSRename
specifier|public
specifier|static
class|class
name|FSRename
implements|implements
name|FileSystemAccess
operator|.
name|FileSystemExecutor
argument_list|<
name|JSONObject
argument_list|>
block|{
DECL|field|path
specifier|private
name|Path
name|path
decl_stmt|;
DECL|field|toPath
specifier|private
name|Path
name|toPath
decl_stmt|;
comment|/**      * Creates a rename executor.      *      * @param path path to rename.      * @param toPath new name.      */
DECL|method|FSRename (String path, String toPath)
specifier|public
name|FSRename
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|toPath
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
operator|new
name|Path
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|this
operator|.
name|toPath
operator|=
operator|new
name|Path
argument_list|(
name|toPath
argument_list|)
expr_stmt|;
block|}
comment|/**      * Executes the filesystem operation.      *      * @param fs filesystem instance to use.      *      * @return<code>true</code> if the rename operation was successful,      *<code>false</code> otherwise.      *      * @throws IOException thrown if an IO error occured.      */
annotation|@
name|Override
DECL|method|execute (FileSystem fs)
specifier|public
name|JSONObject
name|execute
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|renamed
init|=
name|fs
operator|.
name|rename
argument_list|(
name|path
argument_list|,
name|toPath
argument_list|)
decl_stmt|;
return|return
name|toJSON
argument_list|(
name|HttpFSFileSystem
operator|.
name|RENAME_JSON
argument_list|,
name|renamed
argument_list|)
return|;
block|}
block|}
comment|/**    * Executor that performs a set-owner FileSystemAccess files system operation.    */
DECL|class|FSSetOwner
specifier|public
specifier|static
class|class
name|FSSetOwner
implements|implements
name|FileSystemAccess
operator|.
name|FileSystemExecutor
argument_list|<
name|Void
argument_list|>
block|{
DECL|field|path
specifier|private
name|Path
name|path
decl_stmt|;
DECL|field|owner
specifier|private
name|String
name|owner
decl_stmt|;
DECL|field|group
specifier|private
name|String
name|group
decl_stmt|;
comment|/**      * Creates a set-owner executor.      *      * @param path the path to set the owner.      * @param owner owner to set.      * @param group group to set.      */
DECL|method|FSSetOwner (String path, String owner, String group)
specifier|public
name|FSSetOwner
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|owner
parameter_list|,
name|String
name|group
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
operator|new
name|Path
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|this
operator|.
name|owner
operator|=
name|owner
expr_stmt|;
name|this
operator|.
name|group
operator|=
name|group
expr_stmt|;
block|}
comment|/**      * Executes the filesystem operation.      *      * @param fs filesystem instance to use.      *      * @return void.      *      * @throws IOException thrown if an IO error occured.      */
annotation|@
name|Override
DECL|method|execute (FileSystem fs)
specifier|public
name|Void
name|execute
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|fs
operator|.
name|setOwner
argument_list|(
name|path
argument_list|,
name|owner
argument_list|,
name|group
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Executor that performs a set-permission FileSystemAccess files system operation.    */
DECL|class|FSSetPermission
specifier|public
specifier|static
class|class
name|FSSetPermission
implements|implements
name|FileSystemAccess
operator|.
name|FileSystemExecutor
argument_list|<
name|Void
argument_list|>
block|{
DECL|field|path
specifier|private
name|Path
name|path
decl_stmt|;
DECL|field|permission
specifier|private
name|String
name|permission
decl_stmt|;
comment|/**      * Creates a set-permission executor.      *      * @param path path to set the permission.      * @param permission permission to set.      */
DECL|method|FSSetPermission (String path, String permission)
specifier|public
name|FSSetPermission
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|permission
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
operator|new
name|Path
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|this
operator|.
name|permission
operator|=
name|permission
expr_stmt|;
block|}
comment|/**      * Executes the filesystem operation.      *      * @param fs filesystem instance to use.      *      * @return void.      *      * @throws IOException thrown if an IO error occured.      */
annotation|@
name|Override
DECL|method|execute (FileSystem fs)
specifier|public
name|Void
name|execute
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|FsPermission
name|fsPermission
init|=
name|getPermission
argument_list|(
name|permission
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|path
argument_list|,
name|fsPermission
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Executor that performs a set-replication FileSystemAccess files system operation.    */
DECL|class|FSSetReplication
specifier|public
specifier|static
class|class
name|FSSetReplication
implements|implements
name|FileSystemAccess
operator|.
name|FileSystemExecutor
argument_list|<
name|JSONObject
argument_list|>
block|{
DECL|field|path
specifier|private
name|Path
name|path
decl_stmt|;
DECL|field|replication
specifier|private
name|short
name|replication
decl_stmt|;
comment|/**      * Creates a set-replication executor.      *      * @param path path to set the replication factor.      * @param replication replication factor to set.      */
DECL|method|FSSetReplication (String path, short replication)
specifier|public
name|FSSetReplication
parameter_list|(
name|String
name|path
parameter_list|,
name|short
name|replication
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
operator|new
name|Path
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|this
operator|.
name|replication
operator|=
name|replication
expr_stmt|;
block|}
comment|/**      * Executes the filesystem operation.      *      * @param fs filesystem instance to use.      *      * @return<code>true</code> if the replication value was set,      *<code>false</code> otherwise.      *      * @throws IOException thrown if an IO error occured.      */
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|execute (FileSystem fs)
specifier|public
name|JSONObject
name|execute
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|ret
init|=
name|fs
operator|.
name|setReplication
argument_list|(
name|path
argument_list|,
name|replication
argument_list|)
decl_stmt|;
name|JSONObject
name|json
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
name|json
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|SET_REPLICATION_JSON
argument_list|,
name|ret
argument_list|)
expr_stmt|;
return|return
name|json
return|;
block|}
block|}
comment|/**    * Executor that performs a set-times FileSystemAccess files system operation.    */
DECL|class|FSSetTimes
specifier|public
specifier|static
class|class
name|FSSetTimes
implements|implements
name|FileSystemAccess
operator|.
name|FileSystemExecutor
argument_list|<
name|Void
argument_list|>
block|{
DECL|field|path
specifier|private
name|Path
name|path
decl_stmt|;
DECL|field|mTime
specifier|private
name|long
name|mTime
decl_stmt|;
DECL|field|aTime
specifier|private
name|long
name|aTime
decl_stmt|;
comment|/**      * Creates a set-times executor.      *      * @param path path to set the times.      * @param mTime modified time to set.      * @param aTime access time to set.      */
DECL|method|FSSetTimes (String path, long mTime, long aTime)
specifier|public
name|FSSetTimes
parameter_list|(
name|String
name|path
parameter_list|,
name|long
name|mTime
parameter_list|,
name|long
name|aTime
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
operator|new
name|Path
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|this
operator|.
name|mTime
operator|=
name|mTime
expr_stmt|;
name|this
operator|.
name|aTime
operator|=
name|aTime
expr_stmt|;
block|}
comment|/**      * Executes the filesystem operation.      *      * @param fs filesystem instance to use.      *      * @return void.      *      * @throws IOException thrown if an IO error occured.      */
annotation|@
name|Override
DECL|method|execute (FileSystem fs)
specifier|public
name|Void
name|execute
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|fs
operator|.
name|setTimes
argument_list|(
name|path
argument_list|,
name|mTime
argument_list|,
name|aTime
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

