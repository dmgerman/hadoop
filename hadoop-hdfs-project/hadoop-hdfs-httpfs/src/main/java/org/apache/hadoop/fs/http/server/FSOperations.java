begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.http.server
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|http
operator|.
name|server
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BlockStoragePolicySpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ContentSummary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileChecksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FilterFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|GlobFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|XAttrCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|XAttrSetFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|http
operator|.
name|client
operator|.
name|HttpFSFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|BlockStoragePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshotDiffReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshottableDirectoryStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|JsonUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|lib
operator|.
name|service
operator|.
name|FileSystemAccess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|simple
operator|.
name|JSONArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|simple
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsCreateModes
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|HTTPFS_BUFFER_SIZE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|HTTP_BUFFER_SIZE_DEFAULT
import|;
end_import

begin_comment
comment|/**  * FileSystem operation executors used by {@link HttpFSServer}.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|FSOperations
specifier|public
class|class
name|FSOperations
block|{
comment|/**    * @param fileStatus a FileStatus object    * @return JSON map suitable for wire transport    */
DECL|method|toJson (FileStatus fileStatus)
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|toJson
parameter_list|(
name|FileStatus
name|fileStatus
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|json
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|json
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|FILE_STATUS_JSON
argument_list|,
name|toJsonInner
argument_list|(
name|fileStatus
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|json
return|;
block|}
comment|/**    * @param fileStatuses list of FileStatus objects    * @param isFile is the fileStatuses from a file path    * @return JSON map suitable for wire transport    */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|}
argument_list|)
DECL|method|toJson (FileStatus[] fileStatuses, boolean isFile)
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|toJson
parameter_list|(
name|FileStatus
index|[]
name|fileStatuses
parameter_list|,
name|boolean
name|isFile
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|json
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|inner
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|JSONArray
name|statuses
init|=
operator|new
name|JSONArray
argument_list|()
decl_stmt|;
for|for
control|(
name|FileStatus
name|f
range|:
name|fileStatuses
control|)
block|{
name|statuses
operator|.
name|add
argument_list|(
name|toJsonInner
argument_list|(
name|f
argument_list|,
name|isFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|inner
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|FILE_STATUS_JSON
argument_list|,
name|statuses
argument_list|)
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|FILE_STATUSES_JSON
argument_list|,
name|inner
argument_list|)
expr_stmt|;
return|return
name|json
return|;
block|}
comment|/**    * Not meant to be called directly except by the other toJson functions.    */
DECL|method|toJsonInner (FileStatus fileStatus, boolean emptyPathSuffix)
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|toJsonInner
parameter_list|(
name|FileStatus
name|fileStatus
parameter_list|,
name|boolean
name|emptyPathSuffix
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|json
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|json
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|PATH_SUFFIX_JSON
argument_list|,
operator|(
name|emptyPathSuffix
operator|)
condition|?
literal|""
else|:
name|fileStatus
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|TYPE_JSON
argument_list|,
name|HttpFSFileSystem
operator|.
name|FILE_TYPE
operator|.
name|getType
argument_list|(
name|fileStatus
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|LENGTH_JSON
argument_list|,
name|fileStatus
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|OWNER_JSON
argument_list|,
name|fileStatus
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|GROUP_JSON
argument_list|,
name|fileStatus
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|PERMISSION_JSON
argument_list|,
name|HttpFSFileSystem
operator|.
name|permissionToString
argument_list|(
name|fileStatus
operator|.
name|getPermission
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|ACCESS_TIME_JSON
argument_list|,
name|fileStatus
operator|.
name|getAccessTime
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|MODIFICATION_TIME_JSON
argument_list|,
name|fileStatus
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|BLOCK_SIZE_JSON
argument_list|,
name|fileStatus
operator|.
name|getBlockSize
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|REPLICATION_JSON
argument_list|,
name|fileStatus
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|fileStatus
operator|.
name|getPermission
argument_list|()
operator|.
name|getAclBit
argument_list|()
condition|)
block|{
name|json
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|ACL_BIT_JSON
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fileStatus
operator|.
name|getPermission
argument_list|()
operator|.
name|getEncryptedBit
argument_list|()
condition|)
block|{
name|json
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|ENC_BIT_JSON
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fileStatus
operator|.
name|getPermission
argument_list|()
operator|.
name|getErasureCodedBit
argument_list|()
condition|)
block|{
name|json
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|EC_BIT_JSON
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fileStatus
operator|.
name|isSnapshotEnabled
argument_list|()
condition|)
block|{
name|json
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|SNAPSHOT_BIT_JSON
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|json
return|;
block|}
comment|/**    * Serializes a DirectoryEntries object into the JSON for a    * WebHDFS {@link org.apache.hadoop.hdfs.protocol.DirectoryListing}.    *<p>    * These two classes are slightly different, due to the impedance    * mismatches between the WebHDFS and FileSystem APIs.    * @param entries    * @param isFile is the entries from a file path    * @return json    */
DECL|method|toJson (FileSystem.DirectoryEntries entries, boolean isFile)
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|toJson
parameter_list|(
name|FileSystem
operator|.
name|DirectoryEntries
name|entries
parameter_list|,
name|boolean
name|isFile
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|json
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|inner
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|fileStatuses
init|=
name|toJson
argument_list|(
name|entries
operator|.
name|getEntries
argument_list|()
argument_list|,
name|isFile
argument_list|)
decl_stmt|;
name|inner
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|PARTIAL_LISTING_JSON
argument_list|,
name|fileStatuses
argument_list|)
expr_stmt|;
name|inner
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|REMAINING_ENTRIES_JSON
argument_list|,
name|entries
operator|.
name|hasMore
argument_list|()
condition|?
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|DIRECTORY_LISTING_JSON
argument_list|,
name|inner
argument_list|)
expr_stmt|;
return|return
name|json
return|;
block|}
comment|/** Converts an<code>AclStatus</code> object into a JSON object.    *    * @param aclStatus AclStatus object    *    * @return The JSON representation of the ACLs for the file    */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|}
argument_list|)
DECL|method|aclStatusToJSON (AclStatus aclStatus)
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|aclStatusToJSON
parameter_list|(
name|AclStatus
name|aclStatus
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|json
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|inner
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|JSONArray
name|entriesArray
init|=
operator|new
name|JSONArray
argument_list|()
decl_stmt|;
name|inner
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|OWNER_JSON
argument_list|,
name|aclStatus
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|inner
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|GROUP_JSON
argument_list|,
name|aclStatus
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
name|inner
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|ACL_STICKY_BIT_JSON
argument_list|,
name|aclStatus
operator|.
name|isStickyBit
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|AclEntry
name|e
range|:
name|aclStatus
operator|.
name|getEntries
argument_list|()
control|)
block|{
name|entriesArray
operator|.
name|add
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|inner
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|ACL_ENTRIES_JSON
argument_list|,
name|entriesArray
argument_list|)
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|ACL_STATUS_JSON
argument_list|,
name|inner
argument_list|)
expr_stmt|;
return|return
name|json
return|;
block|}
comment|/**    * Converts a<code>FileChecksum</code> object into a JSON array    * object.    *    * @param checksum file checksum.    *    * @return The JSON representation of the file checksum.    */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|}
argument_list|)
DECL|method|fileChecksumToJSON (FileChecksum checksum)
specifier|private
specifier|static
name|Map
name|fileChecksumToJSON
parameter_list|(
name|FileChecksum
name|checksum
parameter_list|)
block|{
name|Map
name|json
init|=
operator|new
name|LinkedHashMap
argument_list|()
decl_stmt|;
name|json
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|CHECKSUM_ALGORITHM_JSON
argument_list|,
name|checksum
operator|.
name|getAlgorithmName
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|CHECKSUM_BYTES_JSON
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
operator|.
name|byteToHexString
argument_list|(
name|checksum
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|CHECKSUM_LENGTH_JSON
argument_list|,
name|checksum
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|Map
name|response
init|=
operator|new
name|LinkedHashMap
argument_list|()
decl_stmt|;
name|response
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|FILE_CHECKSUM_JSON
argument_list|,
name|json
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
comment|/**    * Converts xAttrs to a JSON object.    *    * @param xAttrs file xAttrs.    * @param encoding format of xattr values.    *    * @return The JSON representation of the xAttrs.    * @throws IOException     */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
DECL|method|xAttrsToJSON (Map<String, byte[]> xAttrs, XAttrCodec encoding)
specifier|private
specifier|static
name|Map
name|xAttrsToJSON
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|xAttrs
parameter_list|,
name|XAttrCodec
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
name|jsonMap
init|=
operator|new
name|LinkedHashMap
argument_list|()
decl_stmt|;
name|JSONArray
name|jsonArray
init|=
operator|new
name|JSONArray
argument_list|()
decl_stmt|;
if|if
condition|(
name|xAttrs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|e
range|:
name|xAttrs
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Map
name|json
init|=
operator|new
name|LinkedHashMap
argument_list|()
decl_stmt|;
name|json
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|XATTR_NAME_JSON
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|json
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|XATTR_VALUE_JSON
argument_list|,
name|XAttrCodec
operator|.
name|encodeValue
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|,
name|encoding
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|jsonArray
operator|.
name|add
argument_list|(
name|json
argument_list|)
expr_stmt|;
block|}
block|}
name|jsonMap
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|XATTRS_JSON
argument_list|,
name|jsonArray
argument_list|)
expr_stmt|;
return|return
name|jsonMap
return|;
block|}
comment|/**    * Converts xAttr names to a JSON object.    *    * @param names file xAttr names.    *    * @return The JSON representation of the xAttr names.    * @throws IOException     */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
DECL|method|xAttrNamesToJSON (List<String> names)
specifier|private
specifier|static
name|Map
name|xAttrNamesToJSON
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
name|jsonMap
init|=
operator|new
name|LinkedHashMap
argument_list|()
decl_stmt|;
name|jsonMap
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|XATTRNAMES_JSON
argument_list|,
name|JSONArray
operator|.
name|toJSONString
argument_list|(
name|names
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|jsonMap
return|;
block|}
comment|/**    * Converts a<code>ContentSummary</code> object into a JSON array    * object.    *    * @param contentSummary the content summary    *    * @return The JSON representation of the content summary.    */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|}
argument_list|)
DECL|method|contentSummaryToJSON (ContentSummary contentSummary)
specifier|private
specifier|static
name|Map
name|contentSummaryToJSON
parameter_list|(
name|ContentSummary
name|contentSummary
parameter_list|)
block|{
name|Map
name|json
init|=
operator|new
name|LinkedHashMap
argument_list|()
decl_stmt|;
name|json
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|CONTENT_SUMMARY_DIRECTORY_COUNT_JSON
argument_list|,
name|contentSummary
operator|.
name|getDirectoryCount
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|CONTENT_SUMMARY_FILE_COUNT_JSON
argument_list|,
name|contentSummary
operator|.
name|getFileCount
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|CONTENT_SUMMARY_LENGTH_JSON
argument_list|,
name|contentSummary
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|CONTENT_SUMMARY_QUOTA_JSON
argument_list|,
name|contentSummary
operator|.
name|getQuota
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|CONTENT_SUMMARY_SPACE_CONSUMED_JSON
argument_list|,
name|contentSummary
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|CONTENT_SUMMARY_SPACE_QUOTA_JSON
argument_list|,
name|contentSummary
operator|.
name|getSpaceQuota
argument_list|()
argument_list|)
expr_stmt|;
name|Map
name|response
init|=
operator|new
name|LinkedHashMap
argument_list|()
decl_stmt|;
name|response
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|CONTENT_SUMMARY_JSON
argument_list|,
name|json
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
comment|/**    * Converts an object into a Json Map with with one key-value entry.    *<p/>    * It assumes the given value is either a JSON primitive type or a    *<code>JsonAware</code> instance.    *    * @param name name for the key of the entry.    * @param value for the value of the entry.    *    * @return the JSON representation of the key-value pair.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|toJSON (String name, Object value)
specifier|private
specifier|static
name|JSONObject
name|toJSON
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|JSONObject
name|json
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
name|json
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|json
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|}
argument_list|)
DECL|method|storagePolicyToJSON (BlockStoragePolicySpi policy)
specifier|private
specifier|static
name|JSONObject
name|storagePolicyToJSON
parameter_list|(
name|BlockStoragePolicySpi
name|policy
parameter_list|)
block|{
name|BlockStoragePolicy
name|p
init|=
operator|(
name|BlockStoragePolicy
operator|)
name|policy
decl_stmt|;
name|JSONObject
name|policyJson
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
name|policyJson
operator|.
name|put
argument_list|(
literal|"id"
argument_list|,
name|p
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|policyJson
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
name|p
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|policyJson
operator|.
name|put
argument_list|(
literal|"storageTypes"
argument_list|,
name|toJsonArray
argument_list|(
name|p
operator|.
name|getStorageTypes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|policyJson
operator|.
name|put
argument_list|(
literal|"creationFallbacks"
argument_list|,
name|toJsonArray
argument_list|(
name|p
operator|.
name|getCreationFallbacks
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|policyJson
operator|.
name|put
argument_list|(
literal|"replicationFallbacks"
argument_list|,
name|toJsonArray
argument_list|(
name|p
operator|.
name|getReplicationFallbacks
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|policyJson
operator|.
name|put
argument_list|(
literal|"copyOnCreateFile"
argument_list|,
name|p
operator|.
name|isCopyOnCreateFile
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|policyJson
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|toJsonArray (StorageType[] storageTypes)
specifier|private
specifier|static
name|JSONArray
name|toJsonArray
parameter_list|(
name|StorageType
index|[]
name|storageTypes
parameter_list|)
block|{
name|JSONArray
name|jsonArray
init|=
operator|new
name|JSONArray
argument_list|()
decl_stmt|;
for|for
control|(
name|StorageType
name|type
range|:
name|storageTypes
control|)
block|{
name|jsonArray
operator|.
name|add
argument_list|(
name|type
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|jsonArray
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|storagePoliciesToJSON ( Collection<? extends BlockStoragePolicySpi> storagePolicies)
specifier|private
specifier|static
name|JSONObject
name|storagePoliciesToJSON
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|BlockStoragePolicySpi
argument_list|>
name|storagePolicies
parameter_list|)
block|{
name|JSONObject
name|json
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
name|JSONArray
name|jsonArray
init|=
operator|new
name|JSONArray
argument_list|()
decl_stmt|;
name|JSONObject
name|policies
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|storagePolicies
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|BlockStoragePolicySpi
name|policy
range|:
name|storagePolicies
control|)
block|{
name|JSONObject
name|policyMap
init|=
name|storagePolicyToJSON
argument_list|(
name|policy
argument_list|)
decl_stmt|;
name|jsonArray
operator|.
name|add
argument_list|(
name|policyMap
argument_list|)
expr_stmt|;
block|}
block|}
name|policies
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|STORAGE_POLICY_JSON
argument_list|,
name|jsonArray
argument_list|)
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|STORAGE_POLICIES_JSON
argument_list|,
name|policies
argument_list|)
expr_stmt|;
return|return
name|json
return|;
block|}
comment|/**    * Executor that performs an append FileSystemAccess files system operation.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|FSAppend
specifier|public
specifier|static
class|class
name|FSAppend
implements|implements
name|FileSystemAccess
operator|.
name|FileSystemExecutor
argument_list|<
name|Void
argument_list|>
block|{
DECL|field|is
specifier|private
name|InputStream
name|is
decl_stmt|;
DECL|field|path
specifier|private
name|Path
name|path
decl_stmt|;
comment|/**      * Creates an Append executor.      *      * @param is input stream to append.      * @param path path of the file to append.      */
DECL|method|FSAppend (InputStream is, String path)
specifier|public
name|FSAppend
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|is
operator|=
name|is
expr_stmt|;
name|this
operator|.
name|path
operator|=
operator|new
name|Path
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
comment|/**      * Executes the filesystem operation.      *      * @param fs filesystem instance to use.      *      * @return void.      *      * @throws IOException thrown if an IO error occurred.      */
annotation|@
name|Override
DECL|method|execute (FileSystem fs)
specifier|public
name|Void
name|execute
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|bufferSize
init|=
name|fs
operator|.
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
literal|"httpfs.buffer.size"
argument_list|,
literal|4096
argument_list|)
decl_stmt|;
name|OutputStream
name|os
init|=
name|fs
operator|.
name|append
argument_list|(
name|path
argument_list|,
name|bufferSize
argument_list|)
decl_stmt|;
name|IOUtils
operator|.
name|copyBytes
argument_list|(
name|is
argument_list|,
name|os
argument_list|,
name|bufferSize
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Executor that performs a concat FileSystemAccess files system operation.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|FSConcat
specifier|public
specifier|static
class|class
name|FSConcat
implements|implements
name|FileSystemAccess
operator|.
name|FileSystemExecutor
argument_list|<
name|Void
argument_list|>
block|{
DECL|field|path
specifier|private
name|Path
name|path
decl_stmt|;
DECL|field|sources
specifier|private
name|Path
index|[]
name|sources
decl_stmt|;
comment|/**      * Creates a Concat executor.      *      * @param path target path to concat to.      * @param sources comma separated absolute paths to use as sources.      */
DECL|method|FSConcat (String path, String[] sources)
specifier|public
name|FSConcat
parameter_list|(
name|String
name|path
parameter_list|,
name|String
index|[]
name|sources
parameter_list|)
block|{
name|this
operator|.
name|sources
operator|=
operator|new
name|Path
index|[
name|sources
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sources
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|this
operator|.
name|sources
index|[
name|i
index|]
operator|=
operator|new
name|Path
argument_list|(
name|sources
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|path
operator|=
operator|new
name|Path
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
comment|/**      * Executes the filesystem operation.      *      * @param fs filesystem instance to use.      *      * @return void.      *      * @throws IOException thrown if an IO error occurred.      */
annotation|@
name|Override
DECL|method|execute (FileSystem fs)
specifier|public
name|Void
name|execute
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|fs
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|sources
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Executor that performs a truncate FileSystemAccess files system operation.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|FSTruncate
specifier|public
specifier|static
class|class
name|FSTruncate
implements|implements
name|FileSystemAccess
operator|.
name|FileSystemExecutor
argument_list|<
name|JSONObject
argument_list|>
block|{
DECL|field|path
specifier|private
name|Path
name|path
decl_stmt|;
DECL|field|newLength
specifier|private
name|long
name|newLength
decl_stmt|;
comment|/**      * Creates a Truncate executor.      *      * @param path target path to truncate to.      * @param newLength The size the file is to be truncated to.      */
DECL|method|FSTruncate (String path, long newLength)
specifier|public
name|FSTruncate
parameter_list|(
name|String
name|path
parameter_list|,
name|long
name|newLength
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
operator|new
name|Path
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|this
operator|.
name|newLength
operator|=
name|newLength
expr_stmt|;
block|}
comment|/**      * Executes the filesystem operation.      *      * @param fs filesystem instance to use.      *      * @return<code>true</code> if the file has been truncated to the desired,      *<code>false</code> if a background process of adjusting the       *         length of the last block has been started, and clients should       *         wait for it to complete before proceeding with further file       *         updates.      *      * @throws IOException thrown if an IO error occurred.      */
annotation|@
name|Override
DECL|method|execute (FileSystem fs)
specifier|public
name|JSONObject
name|execute
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|result
init|=
name|fs
operator|.
name|truncate
argument_list|(
name|path
argument_list|,
name|newLength
argument_list|)
decl_stmt|;
return|return
name|toJSON
argument_list|(
name|StringUtils
operator|.
name|toLowerCase
argument_list|(
name|HttpFSFileSystem
operator|.
name|TRUNCATE_JSON
argument_list|)
argument_list|,
name|result
argument_list|)
return|;
block|}
block|}
comment|/**    * Executor that performs a content-summary FileSystemAccess files system operation.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|FSContentSummary
specifier|public
specifier|static
class|class
name|FSContentSummary
implements|implements
name|FileSystemAccess
operator|.
name|FileSystemExecutor
argument_list|<
name|Map
argument_list|>
block|{
DECL|field|path
specifier|private
name|Path
name|path
decl_stmt|;
comment|/**      * Creates a content-summary executor.      *      * @param path the path to retrieve the content-summary.      */
DECL|method|FSContentSummary (String path)
specifier|public
name|FSContentSummary
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
operator|new
name|Path
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
comment|/**      * Executes the filesystem operation.      *      * @param fs filesystem instance to use.      *      * @return a Map object (JSON friendly) with the content-summary.      *      * @throws IOException thrown if an IO error occurred.      */
annotation|@
name|Override
DECL|method|execute (FileSystem fs)
specifier|public
name|Map
name|execute
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|ContentSummary
name|contentSummary
init|=
name|fs
operator|.
name|getContentSummary
argument_list|(
name|path
argument_list|)
decl_stmt|;
return|return
name|contentSummaryToJSON
argument_list|(
name|contentSummary
argument_list|)
return|;
block|}
block|}
comment|/**    * Executor that performs a create FileSystemAccess files system operation.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|FSCreate
specifier|public
specifier|static
class|class
name|FSCreate
implements|implements
name|FileSystemAccess
operator|.
name|FileSystemExecutor
argument_list|<
name|Void
argument_list|>
block|{
DECL|field|is
specifier|private
name|InputStream
name|is
decl_stmt|;
DECL|field|path
specifier|private
name|Path
name|path
decl_stmt|;
DECL|field|permission
specifier|private
name|short
name|permission
decl_stmt|;
DECL|field|unmaskedPermission
specifier|private
name|short
name|unmaskedPermission
decl_stmt|;
DECL|field|override
specifier|private
name|boolean
name|override
decl_stmt|;
DECL|field|replication
specifier|private
name|short
name|replication
decl_stmt|;
DECL|field|blockSize
specifier|private
name|long
name|blockSize
decl_stmt|;
comment|/**      * Creates a Create executor.      *      * @param is input stream to for the file to create.      * @param path path of the file to create.      * @param perm permission for the file.      * @param override if the file should be overriden if it already exist.      * @param repl the replication factor for the file.      * @param blockSize the block size for the file.      * @param unmaskedPerm unmasked permissions for the file      */
DECL|method|FSCreate (InputStream is, String path, short perm, boolean override, short repl, long blockSize, short unmaskedPerm)
specifier|public
name|FSCreate
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|String
name|path
parameter_list|,
name|short
name|perm
parameter_list|,
name|boolean
name|override
parameter_list|,
name|short
name|repl
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|short
name|unmaskedPerm
parameter_list|)
block|{
name|this
operator|.
name|is
operator|=
name|is
expr_stmt|;
name|this
operator|.
name|path
operator|=
operator|new
name|Path
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|this
operator|.
name|permission
operator|=
name|perm
expr_stmt|;
name|this
operator|.
name|unmaskedPermission
operator|=
name|unmaskedPerm
expr_stmt|;
name|this
operator|.
name|override
operator|=
name|override
expr_stmt|;
name|this
operator|.
name|replication
operator|=
name|repl
expr_stmt|;
name|this
operator|.
name|blockSize
operator|=
name|blockSize
expr_stmt|;
block|}
comment|/**      * Executes the filesystem operation.      *      * @param fs filesystem instance to use.      *      * @return The URI of the created file.      *      * @throws IOException thrown if an IO error occurred.      */
annotation|@
name|Override
DECL|method|execute (FileSystem fs)
specifier|public
name|Void
name|execute
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|replication
operator|==
operator|-
literal|1
condition|)
block|{
name|replication
operator|=
name|fs
operator|.
name|getDefaultReplication
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|blockSize
operator|==
operator|-
literal|1
condition|)
block|{
name|blockSize
operator|=
name|fs
operator|.
name|getDefaultBlockSize
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
name|FsPermission
name|fsPermission
init|=
operator|new
name|FsPermission
argument_list|(
name|permission
argument_list|)
decl_stmt|;
if|if
condition|(
name|unmaskedPermission
operator|!=
operator|-
literal|1
condition|)
block|{
name|fsPermission
operator|=
name|FsCreateModes
operator|.
name|create
argument_list|(
name|fsPermission
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|unmaskedPermission
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|bufferSize
init|=
name|fs
operator|.
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
name|HTTPFS_BUFFER_SIZE_KEY
argument_list|,
name|HTTP_BUFFER_SIZE_DEFAULT
argument_list|)
decl_stmt|;
name|OutputStream
name|os
init|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|,
name|fsPermission
argument_list|,
name|override
argument_list|,
name|bufferSize
argument_list|,
name|replication
argument_list|,
name|blockSize
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|IOUtils
operator|.
name|copyBytes
argument_list|(
name|is
argument_list|,
name|os
argument_list|,
name|bufferSize
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Executor that performs a delete FileSystemAccess files system operation.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|FSDelete
specifier|public
specifier|static
class|class
name|FSDelete
implements|implements
name|FileSystemAccess
operator|.
name|FileSystemExecutor
argument_list|<
name|JSONObject
argument_list|>
block|{
DECL|field|path
specifier|private
name|Path
name|path
decl_stmt|;
DECL|field|recursive
specifier|private
name|boolean
name|recursive
decl_stmt|;
comment|/**      * Creates a Delete executor.      *      * @param path path to delete.      * @param recursive if the delete should be recursive or not.      */
DECL|method|FSDelete (String path, boolean recursive)
specifier|public
name|FSDelete
parameter_list|(
name|String
name|path
parameter_list|,
name|boolean
name|recursive
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
operator|new
name|Path
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|this
operator|.
name|recursive
operator|=
name|recursive
expr_stmt|;
block|}
comment|/**      * Executes the filesystem operation.      *      * @param fs filesystem instance to use.      *      * @return<code>true</code> if the delete operation was successful,      *<code>false</code> otherwise.      *      * @throws IOException thrown if an IO error occurred.      */
annotation|@
name|Override
DECL|method|execute (FileSystem fs)
specifier|public
name|JSONObject
name|execute
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|deleted
init|=
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
name|recursive
argument_list|)
decl_stmt|;
return|return
name|toJSON
argument_list|(
name|StringUtils
operator|.
name|toLowerCase
argument_list|(
name|HttpFSFileSystem
operator|.
name|DELETE_JSON
argument_list|)
argument_list|,
name|deleted
argument_list|)
return|;
block|}
block|}
comment|/**    * Executor that performs a file-checksum FileSystemAccess files system operation.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|FSFileChecksum
specifier|public
specifier|static
class|class
name|FSFileChecksum
implements|implements
name|FileSystemAccess
operator|.
name|FileSystemExecutor
argument_list|<
name|Map
argument_list|>
block|{
DECL|field|path
specifier|private
name|Path
name|path
decl_stmt|;
comment|/**      * Creates a file-checksum executor.      *      * @param path the path to retrieve the checksum.      */
DECL|method|FSFileChecksum (String path)
specifier|public
name|FSFileChecksum
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
operator|new
name|Path
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
comment|/**      * Executes the filesystem operation.      *      * @param fs filesystem instance to use.      *      * @return a Map object (JSON friendly) with the file checksum.      *      * @throws IOException thrown if an IO error occurred.      */
annotation|@
name|Override
DECL|method|execute (FileSystem fs)
specifier|public
name|Map
name|execute
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|FileChecksum
name|checksum
init|=
name|fs
operator|.
name|getFileChecksum
argument_list|(
name|path
argument_list|)
decl_stmt|;
return|return
name|fileChecksumToJSON
argument_list|(
name|checksum
argument_list|)
return|;
block|}
block|}
comment|/**    * Executor that performs a file-status FileSystemAccess files system operation.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|FSFileStatus
specifier|public
specifier|static
class|class
name|FSFileStatus
implements|implements
name|FileSystemAccess
operator|.
name|FileSystemExecutor
argument_list|<
name|Map
argument_list|>
block|{
DECL|field|path
specifier|private
name|Path
name|path
decl_stmt|;
comment|/**      * Creates a file-status executor.      *      * @param path the path to retrieve the status.      */
DECL|method|FSFileStatus (String path)
specifier|public
name|FSFileStatus
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
operator|new
name|Path
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
comment|/**      * Executes the filesystem getFileStatus operation and returns the      * result in a JSONish Map.      *      * @param fs filesystem instance to use.      *      * @return a Map object (JSON friendly) with the file status.      *      * @throws IOException thrown if an IO error occurred.      */
annotation|@
name|Override
DECL|method|execute (FileSystem fs)
specifier|public
name|Map
name|execute
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
name|status
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
return|return
name|toJson
argument_list|(
name|status
argument_list|)
return|;
block|}
block|}
comment|/**    * Executor that performs a home-dir FileSystemAccess files system operation.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|FSHomeDir
specifier|public
specifier|static
class|class
name|FSHomeDir
implements|implements
name|FileSystemAccess
operator|.
name|FileSystemExecutor
argument_list|<
name|JSONObject
argument_list|>
block|{
comment|/**      * Executes the filesystem operation.      *      * @param fs filesystem instance to use.      *      * @return a JSON object with the user home directory.      *      * @throws IOException thrown if an IO error occurred.      */
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|execute (FileSystem fs)
specifier|public
name|JSONObject
name|execute
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|homeDir
init|=
name|fs
operator|.
name|getHomeDirectory
argument_list|()
decl_stmt|;
name|JSONObject
name|json
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
name|json
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|HOME_DIR_JSON
argument_list|,
name|homeDir
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|json
return|;
block|}
block|}
comment|/**    * Executor that performs a list-status FileSystemAccess files system operation.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|FSListStatus
specifier|public
specifier|static
class|class
name|FSListStatus
implements|implements
name|FileSystemAccess
operator|.
name|FileSystemExecutor
argument_list|<
name|Map
argument_list|>
implements|,
name|PathFilter
block|{
DECL|field|path
specifier|private
name|Path
name|path
decl_stmt|;
DECL|field|filter
specifier|private
name|PathFilter
name|filter
decl_stmt|;
comment|/**      * Creates a list-status executor.      *      * @param path the directory/file to retrieve the status of its contents.      * @param filter glob filter to use.      *      * @throws IOException thrown if the filter expression is incorrect.      */
DECL|method|FSListStatus (String path, String filter)
specifier|public
name|FSListStatus
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|filter
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|path
operator|=
operator|new
name|Path
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|this
operator|.
name|filter
operator|=
operator|(
name|filter
operator|==
literal|null
operator|)
condition|?
name|this
else|:
operator|new
name|GlobFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns data for a JSON Map containing the information for      * the set of files in 'path' that match 'filter'.      *      * @param fs filesystem instance to use.      *      * @return a Map with the file status of the directory      *         contents that match the filter      *      * @throws IOException thrown if an IO error occurred.      */
annotation|@
name|Override
DECL|method|execute (FileSystem fs)
specifier|public
name|Map
name|execute
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
index|[]
name|fileStatuses
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|path
argument_list|,
name|filter
argument_list|)
decl_stmt|;
return|return
name|toJson
argument_list|(
name|fileStatuses
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|isFile
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|accept (Path path)
specifier|public
name|boolean
name|accept
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
comment|/**    * Executor that performs a batched directory listing.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|FSListStatusBatch
specifier|public
specifier|static
class|class
name|FSListStatusBatch
implements|implements
name|FileSystemAccess
operator|.
name|FileSystemExecutor
argument_list|<
name|Map
argument_list|>
block|{
DECL|field|path
specifier|private
specifier|final
name|Path
name|path
decl_stmt|;
DECL|field|token
specifier|private
specifier|final
name|byte
index|[]
name|token
decl_stmt|;
DECL|method|FSListStatusBatch (String path, byte[] token)
specifier|public
name|FSListStatusBatch
parameter_list|(
name|String
name|path
parameter_list|,
name|byte
index|[]
name|token
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|path
operator|=
operator|new
name|Path
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|this
operator|.
name|token
operator|=
name|token
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
comment|/**      * Simple wrapper filesystem that exposes the protected batched      * listStatus API so we can use it.      */
DECL|class|WrappedFileSystem
specifier|private
specifier|static
class|class
name|WrappedFileSystem
extends|extends
name|FilterFileSystem
block|{
DECL|method|WrappedFileSystem (FileSystem f)
specifier|public
name|WrappedFileSystem
parameter_list|(
name|FileSystem
name|f
parameter_list|)
block|{
name|super
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|listStatusBatch (Path f, byte[] token)
specifier|public
name|DirectoryEntries
name|listStatusBatch
parameter_list|(
name|Path
name|f
parameter_list|,
name|byte
index|[]
name|token
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
return|return
name|super
operator|.
name|listStatusBatch
argument_list|(
name|f
argument_list|,
name|token
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|execute (FileSystem fs)
specifier|public
name|Map
name|execute
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|WrappedFileSystem
name|wrappedFS
init|=
operator|new
name|WrappedFileSystem
argument_list|(
name|fs
argument_list|)
decl_stmt|;
name|FileSystem
operator|.
name|DirectoryEntries
name|entries
init|=
name|wrappedFS
operator|.
name|listStatusBatch
argument_list|(
name|path
argument_list|,
name|token
argument_list|)
decl_stmt|;
return|return
name|toJson
argument_list|(
name|entries
argument_list|,
name|wrappedFS
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|isFile
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/**    * Executor that performs a mkdirs FileSystemAccess files system operation.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|FSMkdirs
specifier|public
specifier|static
class|class
name|FSMkdirs
implements|implements
name|FileSystemAccess
operator|.
name|FileSystemExecutor
argument_list|<
name|JSONObject
argument_list|>
block|{
DECL|field|path
specifier|private
name|Path
name|path
decl_stmt|;
DECL|field|permission
specifier|private
name|short
name|permission
decl_stmt|;
DECL|field|unmaskedPermission
specifier|private
name|short
name|unmaskedPermission
decl_stmt|;
comment|/**      * Creates a mkdirs executor.      *      * @param path directory path to create.      * @param permission permission to use.      * @param unmaskedPermission unmasked permissions for the directory      */
DECL|method|FSMkdirs (String path, short permission, short unmaskedPermission)
specifier|public
name|FSMkdirs
parameter_list|(
name|String
name|path
parameter_list|,
name|short
name|permission
parameter_list|,
name|short
name|unmaskedPermission
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
operator|new
name|Path
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|this
operator|.
name|permission
operator|=
name|permission
expr_stmt|;
name|this
operator|.
name|unmaskedPermission
operator|=
name|unmaskedPermission
expr_stmt|;
block|}
comment|/**      * Executes the filesystem operation.      *      * @param fs filesystem instance to use.      *      * @return<code>true</code> if the mkdirs operation was successful,      *<code>false</code> otherwise.      *      * @throws IOException thrown if an IO error occurred.      */
annotation|@
name|Override
DECL|method|execute (FileSystem fs)
specifier|public
name|JSONObject
name|execute
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|FsPermission
name|fsPermission
init|=
operator|new
name|FsPermission
argument_list|(
name|permission
argument_list|)
decl_stmt|;
if|if
condition|(
name|unmaskedPermission
operator|!=
operator|-
literal|1
condition|)
block|{
name|fsPermission
operator|=
name|FsCreateModes
operator|.
name|create
argument_list|(
name|fsPermission
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|unmaskedPermission
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|boolean
name|mkdirs
init|=
name|fs
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|,
name|fsPermission
argument_list|)
decl_stmt|;
return|return
name|toJSON
argument_list|(
name|HttpFSFileSystem
operator|.
name|MKDIRS_JSON
argument_list|,
name|mkdirs
argument_list|)
return|;
block|}
block|}
comment|/**    * Executor that performs a open FileSystemAccess files system operation.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|FSOpen
specifier|public
specifier|static
class|class
name|FSOpen
implements|implements
name|FileSystemAccess
operator|.
name|FileSystemExecutor
argument_list|<
name|InputStream
argument_list|>
block|{
DECL|field|path
specifier|private
name|Path
name|path
decl_stmt|;
comment|/**      * Creates a open executor.      *      * @param path file to open.      */
DECL|method|FSOpen (String path)
specifier|public
name|FSOpen
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
operator|new
name|Path
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
comment|/**      * Executes the filesystem operation.      *      * @param fs filesystem instance to use.      *      * @return The inputstream of the file.      *      * @throws IOException thrown if an IO error occurred.      */
annotation|@
name|Override
DECL|method|execute (FileSystem fs)
specifier|public
name|InputStream
name|execute
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|bufferSize
init|=
name|HttpFSServerWebApp
operator|.
name|get
argument_list|()
operator|.
name|getConfig
argument_list|()
operator|.
name|getInt
argument_list|(
name|HTTPFS_BUFFER_SIZE_KEY
argument_list|,
name|HTTP_BUFFER_SIZE_DEFAULT
argument_list|)
decl_stmt|;
return|return
name|fs
operator|.
name|open
argument_list|(
name|path
argument_list|,
name|bufferSize
argument_list|)
return|;
block|}
block|}
comment|/**    * Executor that performs a rename FileSystemAccess files system operation.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|FSRename
specifier|public
specifier|static
class|class
name|FSRename
implements|implements
name|FileSystemAccess
operator|.
name|FileSystemExecutor
argument_list|<
name|JSONObject
argument_list|>
block|{
DECL|field|path
specifier|private
name|Path
name|path
decl_stmt|;
DECL|field|toPath
specifier|private
name|Path
name|toPath
decl_stmt|;
comment|/**      * Creates a rename executor.      *      * @param path path to rename.      * @param toPath new name.      */
DECL|method|FSRename (String path, String toPath)
specifier|public
name|FSRename
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|toPath
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
operator|new
name|Path
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|this
operator|.
name|toPath
operator|=
operator|new
name|Path
argument_list|(
name|toPath
argument_list|)
expr_stmt|;
block|}
comment|/**      * Executes the filesystem operation.      *      * @param fs filesystem instance to use.      *      * @return<code>true</code> if the rename operation was successful,      *<code>false</code> otherwise.      *      * @throws IOException thrown if an IO error occurred.      */
annotation|@
name|Override
DECL|method|execute (FileSystem fs)
specifier|public
name|JSONObject
name|execute
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|renamed
init|=
name|fs
operator|.
name|rename
argument_list|(
name|path
argument_list|,
name|toPath
argument_list|)
decl_stmt|;
return|return
name|toJSON
argument_list|(
name|HttpFSFileSystem
operator|.
name|RENAME_JSON
argument_list|,
name|renamed
argument_list|)
return|;
block|}
block|}
comment|/**    * Executor that performs a set-owner FileSystemAccess files system operation.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|FSSetOwner
specifier|public
specifier|static
class|class
name|FSSetOwner
implements|implements
name|FileSystemAccess
operator|.
name|FileSystemExecutor
argument_list|<
name|Void
argument_list|>
block|{
DECL|field|path
specifier|private
name|Path
name|path
decl_stmt|;
DECL|field|owner
specifier|private
name|String
name|owner
decl_stmt|;
DECL|field|group
specifier|private
name|String
name|group
decl_stmt|;
comment|/**      * Creates a set-owner executor.      *      * @param path the path to set the owner.      * @param owner owner to set.      * @param group group to set.      */
DECL|method|FSSetOwner (String path, String owner, String group)
specifier|public
name|FSSetOwner
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|owner
parameter_list|,
name|String
name|group
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
operator|new
name|Path
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|this
operator|.
name|owner
operator|=
name|owner
expr_stmt|;
name|this
operator|.
name|group
operator|=
name|group
expr_stmt|;
block|}
comment|/**      * Executes the filesystem operation.      *      * @param fs filesystem instance to use.      *      * @return void.      *      * @throws IOException thrown if an IO error occurred.      */
annotation|@
name|Override
DECL|method|execute (FileSystem fs)
specifier|public
name|Void
name|execute
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|fs
operator|.
name|setOwner
argument_list|(
name|path
argument_list|,
name|owner
argument_list|,
name|group
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Executor that performs a set-permission FileSystemAccess files system operation.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|FSSetPermission
specifier|public
specifier|static
class|class
name|FSSetPermission
implements|implements
name|FileSystemAccess
operator|.
name|FileSystemExecutor
argument_list|<
name|Void
argument_list|>
block|{
DECL|field|path
specifier|private
name|Path
name|path
decl_stmt|;
DECL|field|permission
specifier|private
name|short
name|permission
decl_stmt|;
comment|/**      * Creates a set-permission executor.      *      * @param path path to set the permission.      * @param permission permission to set.      */
DECL|method|FSSetPermission (String path, short permission)
specifier|public
name|FSSetPermission
parameter_list|(
name|String
name|path
parameter_list|,
name|short
name|permission
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
operator|new
name|Path
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|this
operator|.
name|permission
operator|=
name|permission
expr_stmt|;
block|}
comment|/**      * Executes the filesystem operation.      *      * @param fs filesystem instance to use.      *      * @return void.      *      * @throws IOException thrown if an IO error occurred.      */
annotation|@
name|Override
DECL|method|execute (FileSystem fs)
specifier|public
name|Void
name|execute
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|FsPermission
name|fsPermission
init|=
operator|new
name|FsPermission
argument_list|(
name|permission
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|path
argument_list|,
name|fsPermission
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Executor that sets the acl for a file in a FileSystem    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|FSSetAcl
specifier|public
specifier|static
class|class
name|FSSetAcl
implements|implements
name|FileSystemAccess
operator|.
name|FileSystemExecutor
argument_list|<
name|Void
argument_list|>
block|{
DECL|field|path
specifier|private
name|Path
name|path
decl_stmt|;
DECL|field|aclEntries
specifier|private
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclEntries
decl_stmt|;
comment|/**      * Creates a set-acl executor.      *      * @param path path to set the acl.      * @param aclSpec acl to set.      */
DECL|method|FSSetAcl (String path, String aclSpec)
specifier|public
name|FSSetAcl
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|aclSpec
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
operator|new
name|Path
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|this
operator|.
name|aclEntries
operator|=
name|AclEntry
operator|.
name|parseAclSpec
argument_list|(
name|aclSpec
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Executes the filesystem operation.      *      * @param fs filesystem instance to use.      *      * @return void.      *      * @throws IOException thrown if an IO error occurred.      */
annotation|@
name|Override
DECL|method|execute (FileSystem fs)
specifier|public
name|Void
name|execute
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|fs
operator|.
name|setAcl
argument_list|(
name|path
argument_list|,
name|aclEntries
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Executor that removes all acls from a file in a FileSystem    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|FSRemoveAcl
specifier|public
specifier|static
class|class
name|FSRemoveAcl
implements|implements
name|FileSystemAccess
operator|.
name|FileSystemExecutor
argument_list|<
name|Void
argument_list|>
block|{
DECL|field|path
specifier|private
name|Path
name|path
decl_stmt|;
comment|/**      * Creates a remove-acl executor.      *      * @param path path from which to remove the acl.      */
DECL|method|FSRemoveAcl (String path)
specifier|public
name|FSRemoveAcl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
operator|new
name|Path
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
comment|/**      * Executes the filesystem operation.      *      * @param fs filesystem instance to use.      *      * @return void.      *      * @throws IOException thrown if an IO error occurred.      */
annotation|@
name|Override
DECL|method|execute (FileSystem fs)
specifier|public
name|Void
name|execute
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|fs
operator|.
name|removeAcl
argument_list|(
name|path
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Executor that modifies acl entries for a file in a FileSystem    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|FSModifyAclEntries
specifier|public
specifier|static
class|class
name|FSModifyAclEntries
implements|implements
name|FileSystemAccess
operator|.
name|FileSystemExecutor
argument_list|<
name|Void
argument_list|>
block|{
DECL|field|path
specifier|private
name|Path
name|path
decl_stmt|;
DECL|field|aclEntries
specifier|private
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclEntries
decl_stmt|;
comment|/**      * Creates a modify-acl executor.      *      * @param path path to set the acl.      * @param aclSpec acl to set.      */
DECL|method|FSModifyAclEntries (String path, String aclSpec)
specifier|public
name|FSModifyAclEntries
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|aclSpec
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
operator|new
name|Path
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|this
operator|.
name|aclEntries
operator|=
name|AclEntry
operator|.
name|parseAclSpec
argument_list|(
name|aclSpec
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Executes the filesystem operation.      *      * @param fs filesystem instance to use.      *      * @return void.      *      * @throws IOException thrown if an IO error occurred.      */
annotation|@
name|Override
DECL|method|execute (FileSystem fs)
specifier|public
name|Void
name|execute
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|fs
operator|.
name|modifyAclEntries
argument_list|(
name|path
argument_list|,
name|aclEntries
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Executor that removes acl entries from a file in a FileSystem    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|FSRemoveAclEntries
specifier|public
specifier|static
class|class
name|FSRemoveAclEntries
implements|implements
name|FileSystemAccess
operator|.
name|FileSystemExecutor
argument_list|<
name|Void
argument_list|>
block|{
DECL|field|path
specifier|private
name|Path
name|path
decl_stmt|;
DECL|field|aclEntries
specifier|private
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclEntries
decl_stmt|;
comment|/**      * Creates a remove acl entry executor.      *      * @param path path to set the acl.      * @param aclSpec acl parts to remove.      */
DECL|method|FSRemoveAclEntries (String path, String aclSpec)
specifier|public
name|FSRemoveAclEntries
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|aclSpec
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
operator|new
name|Path
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|this
operator|.
name|aclEntries
operator|=
name|AclEntry
operator|.
name|parseAclSpec
argument_list|(
name|aclSpec
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * Executes the filesystem operation.      *      * @param fs filesystem instance to use.      *      * @return void.      *      * @throws IOException thrown if an IO error occurred.      */
annotation|@
name|Override
DECL|method|execute (FileSystem fs)
specifier|public
name|Void
name|execute
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|fs
operator|.
name|removeAclEntries
argument_list|(
name|path
argument_list|,
name|aclEntries
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Executor that removes the default acl from a directory in a FileSystem    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|FSRemoveDefaultAcl
specifier|public
specifier|static
class|class
name|FSRemoveDefaultAcl
implements|implements
name|FileSystemAccess
operator|.
name|FileSystemExecutor
argument_list|<
name|Void
argument_list|>
block|{
DECL|field|path
specifier|private
name|Path
name|path
decl_stmt|;
comment|/**      * Creates an executor for removing the default acl.      *      * @param path path to set the acl.      */
DECL|method|FSRemoveDefaultAcl (String path)
specifier|public
name|FSRemoveDefaultAcl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
operator|new
name|Path
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
comment|/**      * Executes the filesystem operation.      *      * @param fs filesystem instance to use.      *      * @return void.      *      * @throws IOException thrown if an IO error occurred.      */
annotation|@
name|Override
DECL|method|execute (FileSystem fs)
specifier|public
name|Void
name|execute
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|fs
operator|.
name|removeDefaultAcl
argument_list|(
name|path
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Executor that performs getting trash root FileSystemAccess    * files system operation.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|FSTrashRoot
specifier|public
specifier|static
class|class
name|FSTrashRoot
implements|implements
name|FileSystemAccess
operator|.
name|FileSystemExecutor
argument_list|<
name|JSONObject
argument_list|>
block|{
DECL|field|path
specifier|private
name|Path
name|path
decl_stmt|;
DECL|method|FSTrashRoot (String path)
specifier|public
name|FSTrashRoot
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
operator|new
name|Path
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|execute (FileSystem fs)
specifier|public
name|JSONObject
name|execute
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|trashRoot
init|=
name|fs
operator|.
name|getTrashRoot
argument_list|(
name|this
operator|.
name|path
argument_list|)
decl_stmt|;
name|JSONObject
name|json
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
name|json
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|TRASH_DIR_JSON
argument_list|,
name|trashRoot
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|json
return|;
block|}
block|}
comment|/**    * Executor that gets the ACL information for a given file.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|FSAclStatus
specifier|public
specifier|static
class|class
name|FSAclStatus
implements|implements
name|FileSystemAccess
operator|.
name|FileSystemExecutor
argument_list|<
name|Map
argument_list|>
block|{
DECL|field|path
specifier|private
name|Path
name|path
decl_stmt|;
comment|/**      * Creates an executor for getting the ACLs for a file.      *      * @param path the path to retrieve the ACLs.      */
DECL|method|FSAclStatus (String path)
specifier|public
name|FSAclStatus
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
operator|new
name|Path
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
comment|/**      * Executes the filesystem operation.      *      * @param fs filesystem instance to use.      *      * @return a Map object (JSON friendly) with the file status.      *      * @throws IOException thrown if an IO error occurred.      */
annotation|@
name|Override
DECL|method|execute (FileSystem fs)
specifier|public
name|Map
name|execute
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|AclStatus
name|status
init|=
name|fs
operator|.
name|getAclStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
return|return
name|aclStatusToJSON
argument_list|(
name|status
argument_list|)
return|;
block|}
block|}
comment|/**    * Executor that performs a set-replication FileSystemAccess files system operation.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|FSSetReplication
specifier|public
specifier|static
class|class
name|FSSetReplication
implements|implements
name|FileSystemAccess
operator|.
name|FileSystemExecutor
argument_list|<
name|JSONObject
argument_list|>
block|{
DECL|field|path
specifier|private
name|Path
name|path
decl_stmt|;
DECL|field|replication
specifier|private
name|short
name|replication
decl_stmt|;
comment|/**      * Creates a set-replication executor.      *      * @param path path to set the replication factor.      * @param replication replication factor to set.      */
DECL|method|FSSetReplication (String path, short replication)
specifier|public
name|FSSetReplication
parameter_list|(
name|String
name|path
parameter_list|,
name|short
name|replication
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
operator|new
name|Path
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|this
operator|.
name|replication
operator|=
name|replication
expr_stmt|;
block|}
comment|/**      * Executes the filesystem operation.      *      * @param fs filesystem instance to use.      *      * @return<code>true</code> if the replication value was set,      *<code>false</code> otherwise.      *      * @throws IOException thrown if an IO error occurred.      */
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|execute (FileSystem fs)
specifier|public
name|JSONObject
name|execute
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|ret
init|=
name|fs
operator|.
name|setReplication
argument_list|(
name|path
argument_list|,
name|replication
argument_list|)
decl_stmt|;
name|JSONObject
name|json
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
name|json
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|SET_REPLICATION_JSON
argument_list|,
name|ret
argument_list|)
expr_stmt|;
return|return
name|json
return|;
block|}
block|}
comment|/**    * Executor that performs a set-times FileSystemAccess files system operation.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|FSSetTimes
specifier|public
specifier|static
class|class
name|FSSetTimes
implements|implements
name|FileSystemAccess
operator|.
name|FileSystemExecutor
argument_list|<
name|Void
argument_list|>
block|{
DECL|field|path
specifier|private
name|Path
name|path
decl_stmt|;
DECL|field|mTime
specifier|private
name|long
name|mTime
decl_stmt|;
DECL|field|aTime
specifier|private
name|long
name|aTime
decl_stmt|;
comment|/**      * Creates a set-times executor.      *      * @param path path to set the times.      * @param mTime modified time to set.      * @param aTime access time to set.      */
DECL|method|FSSetTimes (String path, long mTime, long aTime)
specifier|public
name|FSSetTimes
parameter_list|(
name|String
name|path
parameter_list|,
name|long
name|mTime
parameter_list|,
name|long
name|aTime
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
operator|new
name|Path
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|this
operator|.
name|mTime
operator|=
name|mTime
expr_stmt|;
name|this
operator|.
name|aTime
operator|=
name|aTime
expr_stmt|;
block|}
comment|/**      * Executes the filesystem operation.      *      * @param fs filesystem instance to use.      *      * @return void.      *      * @throws IOException thrown if an IO error occurred.      */
annotation|@
name|Override
DECL|method|execute (FileSystem fs)
specifier|public
name|Void
name|execute
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|fs
operator|.
name|setTimes
argument_list|(
name|path
argument_list|,
name|mTime
argument_list|,
name|aTime
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Executor that performs a setxattr FileSystemAccess files system operation.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|FSSetXAttr
specifier|public
specifier|static
class|class
name|FSSetXAttr
implements|implements
name|FileSystemAccess
operator|.
name|FileSystemExecutor
argument_list|<
name|Void
argument_list|>
block|{
DECL|field|path
specifier|private
name|Path
name|path
decl_stmt|;
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|value
specifier|private
name|byte
index|[]
name|value
decl_stmt|;
DECL|field|flag
specifier|private
name|EnumSet
argument_list|<
name|XAttrSetFlag
argument_list|>
name|flag
decl_stmt|;
DECL|method|FSSetXAttr (String path, String name, String encodedValue, EnumSet<XAttrSetFlag> flag)
specifier|public
name|FSSetXAttr
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|encodedValue
parameter_list|,
name|EnumSet
argument_list|<
name|XAttrSetFlag
argument_list|>
name|flag
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|path
operator|=
operator|new
name|Path
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|XAttrCodec
operator|.
name|decodeValue
argument_list|(
name|encodedValue
argument_list|)
expr_stmt|;
name|this
operator|.
name|flag
operator|=
name|flag
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|execute (FileSystem fs)
specifier|public
name|Void
name|execute
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|fs
operator|.
name|setXAttr
argument_list|(
name|path
argument_list|,
name|name
argument_list|,
name|value
argument_list|,
name|flag
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Executor that performs a removexattr FileSystemAccess files system     * operation.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|FSRemoveXAttr
specifier|public
specifier|static
class|class
name|FSRemoveXAttr
implements|implements
name|FileSystemAccess
operator|.
name|FileSystemExecutor
argument_list|<
name|Void
argument_list|>
block|{
DECL|field|path
specifier|private
name|Path
name|path
decl_stmt|;
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|method|FSRemoveXAttr (String path, String name)
specifier|public
name|FSRemoveXAttr
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
operator|new
name|Path
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|execute (FileSystem fs)
specifier|public
name|Void
name|execute
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|fs
operator|.
name|removeXAttr
argument_list|(
name|path
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Executor that performs listing xattrs FileSystemAccess files system     * operation.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|FSListXAttrs
specifier|public
specifier|static
class|class
name|FSListXAttrs
implements|implements
name|FileSystemAccess
operator|.
name|FileSystemExecutor
argument_list|<
name|Map
argument_list|>
block|{
DECL|field|path
specifier|private
name|Path
name|path
decl_stmt|;
comment|/**      * Creates listing xattrs executor.      *      * @param path the path to retrieve the xattrs.      */
DECL|method|FSListXAttrs (String path)
specifier|public
name|FSListXAttrs
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
operator|new
name|Path
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
comment|/**      * Executes the filesystem operation.      *      * @param fs filesystem instance to use.      *      * @return Map a map object (JSON friendly) with the xattr names.      *      * @throws IOException thrown if an IO error occurred.      */
annotation|@
name|Override
DECL|method|execute (FileSystem fs)
specifier|public
name|Map
name|execute
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|fs
operator|.
name|listXAttrs
argument_list|(
name|path
argument_list|)
decl_stmt|;
return|return
name|xAttrNamesToJSON
argument_list|(
name|names
argument_list|)
return|;
block|}
block|}
comment|/**    * Executor that performs getting xattrs FileSystemAccess files system     * operation.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|FSGetXAttrs
specifier|public
specifier|static
class|class
name|FSGetXAttrs
implements|implements
name|FileSystemAccess
operator|.
name|FileSystemExecutor
argument_list|<
name|Map
argument_list|>
block|{
DECL|field|path
specifier|private
name|Path
name|path
decl_stmt|;
DECL|field|names
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|names
decl_stmt|;
DECL|field|encoding
specifier|private
name|XAttrCodec
name|encoding
decl_stmt|;
comment|/**      * Creates getting xattrs executor.      *      * @param path the path to retrieve the xattrs.      */
DECL|method|FSGetXAttrs (String path, List<String> names, XAttrCodec encoding)
specifier|public
name|FSGetXAttrs
parameter_list|(
name|String
name|path
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|,
name|XAttrCodec
name|encoding
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
operator|new
name|Path
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|this
operator|.
name|names
operator|=
name|names
expr_stmt|;
name|this
operator|.
name|encoding
operator|=
name|encoding
expr_stmt|;
block|}
comment|/**      * Executes the filesystem operation.      *      * @param fs filesystem instance to use.      *      * @return Map a map object (JSON friendly) with the xattrs.      *      * @throws IOException thrown if an IO error occurred.      */
annotation|@
name|Override
DECL|method|execute (FileSystem fs)
specifier|public
name|Map
name|execute
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|xattrs
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|names
operator|!=
literal|null
operator|&&
operator|!
name|names
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|xattrs
operator|=
name|fs
operator|.
name|getXAttrs
argument_list|(
name|path
argument_list|,
name|names
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|xattrs
operator|=
name|fs
operator|.
name|getXAttrs
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
return|return
name|xAttrsToJSON
argument_list|(
name|xattrs
argument_list|,
name|encoding
argument_list|)
return|;
block|}
block|}
comment|/**    * Executor that performs a getAllStoragePolicies FileSystemAccess files    * system operation.    */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|}
argument_list|)
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|FSGetAllStoragePolicies
specifier|public
specifier|static
class|class
name|FSGetAllStoragePolicies
implements|implements
name|FileSystemAccess
operator|.
name|FileSystemExecutor
argument_list|<
name|JSONObject
argument_list|>
block|{
annotation|@
name|Override
DECL|method|execute (FileSystem fs)
specifier|public
name|JSONObject
name|execute
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|Collection
argument_list|<
name|?
extends|extends
name|BlockStoragePolicySpi
argument_list|>
name|storagePolicies
init|=
name|fs
operator|.
name|getAllStoragePolicies
argument_list|()
decl_stmt|;
return|return
name|storagePoliciesToJSON
argument_list|(
name|storagePolicies
argument_list|)
return|;
block|}
block|}
comment|/**    * Executor that performs a getStoragePolicy FileSystemAccess files system    * operation.    */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|}
argument_list|)
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|FSGetStoragePolicy
specifier|public
specifier|static
class|class
name|FSGetStoragePolicy
implements|implements
name|FileSystemAccess
operator|.
name|FileSystemExecutor
argument_list|<
name|JSONObject
argument_list|>
block|{
DECL|field|path
specifier|private
name|Path
name|path
decl_stmt|;
DECL|method|FSGetStoragePolicy (String path)
specifier|public
name|FSGetStoragePolicy
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
operator|new
name|Path
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|execute (FileSystem fs)
specifier|public
name|JSONObject
name|execute
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|BlockStoragePolicySpi
name|storagePolicy
init|=
name|fs
operator|.
name|getStoragePolicy
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|JSONObject
name|json
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
name|json
operator|.
name|put
argument_list|(
name|HttpFSFileSystem
operator|.
name|STORAGE_POLICY_JSON
argument_list|,
name|storagePolicyToJSON
argument_list|(
name|storagePolicy
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|json
return|;
block|}
block|}
comment|/**    * Executor that performs a setStoragePolicy FileSystemAccess files system    * operation.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|FSSetStoragePolicy
specifier|public
specifier|static
class|class
name|FSSetStoragePolicy
implements|implements
name|FileSystemAccess
operator|.
name|FileSystemExecutor
argument_list|<
name|Void
argument_list|>
block|{
DECL|field|path
specifier|private
name|Path
name|path
decl_stmt|;
DECL|field|policyName
specifier|private
name|String
name|policyName
decl_stmt|;
DECL|method|FSSetStoragePolicy (String path, String policyName)
specifier|public
name|FSSetStoragePolicy
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|policyName
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
operator|new
name|Path
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|this
operator|.
name|policyName
operator|=
name|policyName
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|execute (FileSystem fs)
specifier|public
name|Void
name|execute
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|fs
operator|.
name|setStoragePolicy
argument_list|(
name|path
argument_list|,
name|policyName
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Executor that performs a unsetStoragePolicy FileSystemAccess files system    * operation.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|FSUnsetStoragePolicy
specifier|public
specifier|static
class|class
name|FSUnsetStoragePolicy
implements|implements
name|FileSystemAccess
operator|.
name|FileSystemExecutor
argument_list|<
name|Void
argument_list|>
block|{
DECL|field|path
specifier|private
name|Path
name|path
decl_stmt|;
DECL|method|FSUnsetStoragePolicy (String path)
specifier|public
name|FSUnsetStoragePolicy
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
operator|new
name|Path
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|execute (FileSystem fs)
specifier|public
name|Void
name|execute
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|fs
operator|.
name|unsetStoragePolicy
argument_list|(
name|path
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**    *  Executor that performs an allowSnapshot operation.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|FSAllowSnapshot
specifier|public
specifier|static
class|class
name|FSAllowSnapshot
implements|implements
name|FileSystemAccess
operator|.
name|FileSystemExecutor
argument_list|<
name|Void
argument_list|>
block|{
DECL|field|path
specifier|private
name|Path
name|path
decl_stmt|;
comment|/**      * Creates a allowSnapshot executor.      * @param path directory path to allow snapshot.      */
DECL|method|FSAllowSnapshot (String path)
specifier|public
name|FSAllowSnapshot
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
operator|new
name|Path
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
comment|/**      * Executes the filesystem operation.      * @param fs filesystem instance to use.      * @throws IOException thrown if an IO error occurred.      */
annotation|@
name|Override
DECL|method|execute (FileSystem fs)
specifier|public
name|Void
name|execute
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|fs
operator|instanceof
name|DistributedFileSystem
condition|)
block|{
name|DistributedFileSystem
name|dfs
init|=
operator|(
name|DistributedFileSystem
operator|)
name|fs
decl_stmt|;
name|dfs
operator|.
name|allowSnapshot
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"allowSnapshot is not "
operator|+
literal|"supported for HttpFs on "
operator|+
name|fs
operator|.
name|getClass
argument_list|()
operator|+
literal|". Please check your fs.defaultFS configuration"
argument_list|)
throw|;
block|}
return|return
literal|null
return|;
block|}
block|}
comment|/**    *  Executor that performs an disallowSnapshot operation.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|FSDisallowSnapshot
specifier|public
specifier|static
class|class
name|FSDisallowSnapshot
implements|implements
name|FileSystemAccess
operator|.
name|FileSystemExecutor
argument_list|<
name|Void
argument_list|>
block|{
DECL|field|path
specifier|private
name|Path
name|path
decl_stmt|;
comment|/**      * Creates a disallowSnapshot executor.      * @param path directory path to allow snapshot.      */
DECL|method|FSDisallowSnapshot (String path)
specifier|public
name|FSDisallowSnapshot
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
operator|new
name|Path
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
comment|/**      * Executes the filesystem operation.      * @param fs filesystem instance to use.      * @throws IOException thrown if an IO error occurred.      */
annotation|@
name|Override
DECL|method|execute (FileSystem fs)
specifier|public
name|Void
name|execute
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|fs
operator|instanceof
name|DistributedFileSystem
condition|)
block|{
name|DistributedFileSystem
name|dfs
init|=
operator|(
name|DistributedFileSystem
operator|)
name|fs
decl_stmt|;
name|dfs
operator|.
name|disallowSnapshot
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"disallowSnapshot is not "
operator|+
literal|"supported for HttpFs on "
operator|+
name|fs
operator|.
name|getClass
argument_list|()
operator|+
literal|". Please check your fs.defaultFS configuration"
argument_list|)
throw|;
block|}
return|return
literal|null
return|;
block|}
block|}
comment|/**    *  Executor that performs a createSnapshot FileSystemAccess operation.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|FSCreateSnapshot
specifier|public
specifier|static
class|class
name|FSCreateSnapshot
implements|implements
name|FileSystemAccess
operator|.
name|FileSystemExecutor
argument_list|<
name|String
argument_list|>
block|{
DECL|field|path
specifier|private
name|Path
name|path
decl_stmt|;
DECL|field|snapshotName
specifier|private
name|String
name|snapshotName
decl_stmt|;
comment|/**      * Creates a createSnapshot executor.      * @param path directory path to be snapshotted.      * @param snapshotName the snapshot name.      */
DECL|method|FSCreateSnapshot (String path, String snapshotName)
specifier|public
name|FSCreateSnapshot
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|snapshotName
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
operator|new
name|Path
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|this
operator|.
name|snapshotName
operator|=
name|snapshotName
expr_stmt|;
block|}
comment|/**      * Executes the filesystem operation.      * @param fs filesystem instance to use.      * @return<code>Path</code> the complete path for newly created snapshot      * @throws IOException thrown if an IO error occurred.      */
annotation|@
name|Override
DECL|method|execute (FileSystem fs)
specifier|public
name|String
name|execute
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|snapshotPath
init|=
name|fs
operator|.
name|createSnapshot
argument_list|(
name|path
argument_list|,
name|snapshotName
argument_list|)
decl_stmt|;
name|JSONObject
name|json
init|=
name|toJSON
argument_list|(
name|HttpFSFileSystem
operator|.
name|HOME_DIR_JSON
argument_list|,
name|snapshotPath
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|json
operator|.
name|toJSONString
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\\\\"
argument_list|,
literal|""
argument_list|)
return|;
block|}
block|}
comment|/**    *  Executor that performs a deleteSnapshot FileSystemAccess operation.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|FSDeleteSnapshot
specifier|public
specifier|static
class|class
name|FSDeleteSnapshot
implements|implements
name|FileSystemAccess
operator|.
name|FileSystemExecutor
argument_list|<
name|Void
argument_list|>
block|{
DECL|field|path
specifier|private
name|Path
name|path
decl_stmt|;
DECL|field|snapshotName
specifier|private
name|String
name|snapshotName
decl_stmt|;
comment|/**      * Creates a deleteSnapshot executor.      * @param path path for the snapshot to be deleted.      * @param snapshotName snapshot name.      */
DECL|method|FSDeleteSnapshot (String path, String snapshotName)
specifier|public
name|FSDeleteSnapshot
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|snapshotName
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
operator|new
name|Path
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|this
operator|.
name|snapshotName
operator|=
name|snapshotName
expr_stmt|;
block|}
comment|/**      * Executes the filesystem operation.      * @param fs filesystem instance to use.      * @return void      * @throws IOException thrown if an IO error occurred.      */
annotation|@
name|Override
DECL|method|execute (FileSystem fs)
specifier|public
name|Void
name|execute
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|fs
operator|.
name|deleteSnapshot
argument_list|(
name|path
argument_list|,
name|snapshotName
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**    *  Executor that performs a renameSnapshot FileSystemAccess operation.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|FSRenameSnapshot
specifier|public
specifier|static
class|class
name|FSRenameSnapshot
implements|implements
name|FileSystemAccess
operator|.
name|FileSystemExecutor
argument_list|<
name|Void
argument_list|>
block|{
DECL|field|path
specifier|private
name|Path
name|path
decl_stmt|;
DECL|field|oldSnapshotName
specifier|private
name|String
name|oldSnapshotName
decl_stmt|;
DECL|field|snapshotName
specifier|private
name|String
name|snapshotName
decl_stmt|;
comment|/**      * Creates a renameSnapshot executor.      * @param path directory path of the snapshot to be renamed.      * @param oldSnapshotName current snapshot name.      * @param snapshotName new snapshot name to be set.      */
DECL|method|FSRenameSnapshot (String path, String oldSnapshotName, String snapshotName)
specifier|public
name|FSRenameSnapshot
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|oldSnapshotName
parameter_list|,
name|String
name|snapshotName
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
operator|new
name|Path
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|this
operator|.
name|oldSnapshotName
operator|=
name|oldSnapshotName
expr_stmt|;
name|this
operator|.
name|snapshotName
operator|=
name|snapshotName
expr_stmt|;
block|}
comment|/**      * Executes the filesystem operation.      * @param fs filesystem instance to use.      * @return void      * @throws IOException thrown if an IO error occurred.      */
annotation|@
name|Override
DECL|method|execute (FileSystem fs)
specifier|public
name|Void
name|execute
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|fs
operator|.
name|renameSnapshot
argument_list|(
name|path
argument_list|,
name|oldSnapshotName
argument_list|,
name|snapshotName
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**    *  Executor that performs a getSnapshotDiff operation.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|FSGetSnapshotDiff
specifier|public
specifier|static
class|class
name|FSGetSnapshotDiff
implements|implements
name|FileSystemAccess
operator|.
name|FileSystemExecutor
argument_list|<
name|String
argument_list|>
block|{
DECL|field|path
specifier|private
name|Path
name|path
decl_stmt|;
DECL|field|oldSnapshotName
specifier|private
name|String
name|oldSnapshotName
decl_stmt|;
DECL|field|snapshotName
specifier|private
name|String
name|snapshotName
decl_stmt|;
comment|/**      * Creates a getSnapshotDiff executor.      * @param path directory path of the snapshots to be examined.      * @param oldSnapshotName Older snapshot name.      * @param snapshotName Newer snapshot name.      */
DECL|method|FSGetSnapshotDiff (String path, String oldSnapshotName, String snapshotName)
specifier|public
name|FSGetSnapshotDiff
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|oldSnapshotName
parameter_list|,
name|String
name|snapshotName
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
operator|new
name|Path
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|this
operator|.
name|oldSnapshotName
operator|=
name|oldSnapshotName
expr_stmt|;
name|this
operator|.
name|snapshotName
operator|=
name|snapshotName
expr_stmt|;
block|}
comment|/**      * Executes the filesystem operation.      * @param fs filesystem instance to use.      * @return A serialized JSON string of snapshot diffs.      * @throws IOException thrown if an IO error occurred.      */
annotation|@
name|Override
DECL|method|execute (FileSystem fs)
specifier|public
name|String
name|execute
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|SnapshotDiffReport
name|sdr
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|fs
operator|instanceof
name|DistributedFileSystem
condition|)
block|{
name|DistributedFileSystem
name|dfs
init|=
operator|(
name|DistributedFileSystem
operator|)
name|fs
decl_stmt|;
name|sdr
operator|=
name|dfs
operator|.
name|getSnapshotDiffReport
argument_list|(
name|path
argument_list|,
name|oldSnapshotName
argument_list|,
name|snapshotName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"getSnapshotDiff is not "
operator|+
literal|"supported for HttpFs on "
operator|+
name|fs
operator|.
name|getClass
argument_list|()
operator|+
literal|". Please check your fs.defaultFS configuration"
argument_list|)
throw|;
block|}
if|if
condition|(
name|sdr
operator|!=
literal|null
condition|)
block|{
return|return
name|JsonUtil
operator|.
name|toJsonString
argument_list|(
name|sdr
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|""
return|;
block|}
block|}
block|}
comment|/**    *  Executor that performs a getSnapshottableDirListing operation.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|FSGetSnapshottableDirListing
specifier|public
specifier|static
class|class
name|FSGetSnapshottableDirListing
implements|implements
name|FileSystemAccess
operator|.
name|FileSystemExecutor
argument_list|<
name|String
argument_list|>
block|{
comment|/**      * Creates a getSnapshottableDirListing executor.      */
DECL|method|FSGetSnapshottableDirListing ()
specifier|public
name|FSGetSnapshottableDirListing
parameter_list|()
block|{     }
comment|/**      * Executes the filesystem operation.      * @param fs filesystem instance to use.      * @return A JSON string of all snapshottable directories.      * @throws IOException thrown if an IO error occurred.      */
annotation|@
name|Override
DECL|method|execute (FileSystem fs)
specifier|public
name|String
name|execute
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|SnapshottableDirectoryStatus
index|[]
name|sds
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|fs
operator|instanceof
name|DistributedFileSystem
condition|)
block|{
name|DistributedFileSystem
name|dfs
init|=
operator|(
name|DistributedFileSystem
operator|)
name|fs
decl_stmt|;
name|sds
operator|=
name|dfs
operator|.
name|getSnapshottableDirListing
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"getSnapshottableDirListing is "
operator|+
literal|"not supported for HttpFs on "
operator|+
name|fs
operator|.
name|getClass
argument_list|()
operator|+
literal|". Please check your fs.defaultFS configuration"
argument_list|)
throw|;
block|}
return|return
name|JsonUtil
operator|.
name|toJsonString
argument_list|(
name|sds
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

