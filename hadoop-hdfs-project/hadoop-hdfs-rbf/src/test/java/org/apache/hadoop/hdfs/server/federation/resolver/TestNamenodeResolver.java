begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.resolver
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|FederationTestUtils
operator|.
name|NAMENODES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|FederationTestUtils
operator|.
name|NAMESERVICES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|FederationTestUtils
operator|.
name|ROUTERS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|FederationTestUtils
operator|.
name|createNamenodeReport
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|FederationTestUtils
operator|.
name|verifyException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|FederationStateStoreTestUtils
operator|.
name|clearRecords
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|FederationStateStoreTestUtils
operator|.
name|getStateStoreConfiguration
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|FederationStateStoreTestUtils
operator|.
name|newStateStore
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|FederationStateStoreTestUtils
operator|.
name|waitStateStore
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceProtocol
operator|.
name|HAServiceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
operator|.
name|RBFConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|StateStoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|StateStoreUnavailableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|MembershipState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test the basic {@link ActiveNamenodeResolver} functionality.  */
end_comment

begin_class
DECL|class|TestNamenodeResolver
specifier|public
class|class
name|TestNamenodeResolver
block|{
DECL|field|stateStore
specifier|private
specifier|static
name|StateStoreService
name|stateStore
decl_stmt|;
DECL|field|namenodeResolver
specifier|private
specifier|static
name|ActiveNamenodeResolver
name|namenodeResolver
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|create ()
specifier|public
specifier|static
name|void
name|create
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|getStateStoreConfiguration
argument_list|()
decl_stmt|;
comment|// Reduce expirations to 5 seconds
name|conf
operator|.
name|setLong
argument_list|(
name|RBFConfigKeys
operator|.
name|FEDERATION_STORE_MEMBERSHIP_EXPIRATION_MS
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|stateStore
operator|=
name|newStateStore
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|stateStore
argument_list|)
expr_stmt|;
name|namenodeResolver
operator|=
operator|new
name|MembershipNamenodeResolver
argument_list|(
name|conf
argument_list|,
name|stateStore
argument_list|)
expr_stmt|;
name|namenodeResolver
operator|.
name|setRouterId
argument_list|(
name|ROUTERS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|destroy ()
specifier|public
specifier|static
name|void
name|destroy
parameter_list|()
throws|throws
name|Exception
block|{
name|stateStore
operator|.
name|stop
argument_list|()
expr_stmt|;
name|stateStore
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|// Wait for state store to connect
name|stateStore
operator|.
name|loadDriver
argument_list|()
expr_stmt|;
name|waitStateStore
argument_list|(
name|stateStore
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
comment|// Clear NN registrations
name|boolean
name|cleared
init|=
name|clearRecords
argument_list|(
name|stateStore
argument_list|,
name|MembershipState
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|cleared
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStateStoreDisconnected ()
specifier|public
name|void
name|testStateStoreDisconnected
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Add an entry to the store
name|NamenodeStatusReport
name|report
init|=
name|createNamenodeReport
argument_list|(
name|NAMESERVICES
index|[
literal|0
index|]
argument_list|,
name|NAMENODES
index|[
literal|0
index|]
argument_list|,
name|HAServiceState
operator|.
name|ACTIVE
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|namenodeResolver
operator|.
name|registerNamenode
argument_list|(
name|report
argument_list|)
argument_list|)
expr_stmt|;
comment|// Close the data store driver
name|stateStore
operator|.
name|closeDriver
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|stateStore
operator|.
name|isDriverReady
argument_list|()
argument_list|)
expr_stmt|;
comment|// Flush the caches
name|stateStore
operator|.
name|refreshCaches
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Verify commands fail due to no cached data and no state store
comment|// connectivity.
name|List
argument_list|<
name|?
extends|extends
name|FederationNamenodeContext
argument_list|>
name|nns
init|=
name|namenodeResolver
operator|.
name|getNamenodesForBlockPoolId
argument_list|(
name|NAMESERVICES
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|nns
argument_list|)
expr_stmt|;
name|verifyException
argument_list|(
name|namenodeResolver
argument_list|,
literal|"registerNamenode"
argument_list|,
name|StateStoreUnavailableException
operator|.
name|class
argument_list|,
operator|new
name|Class
index|[]
block|{
name|NamenodeStatusReport
operator|.
name|class
block|}
argument_list|,
operator|new
name|Object
index|[]
block|{
name|report
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify the first registration on the resolver.    *    * @param nsId Nameservice identifier.    * @param nnId Namenode identifier within the nemeservice.    * @param resultsCount Number of results expected.    * @param state Expected state for the first one.    * @throws IOException If we cannot get the namenodes.    */
DECL|method|verifyFirstRegistration (String nsId, String nnId, int resultsCount, FederationNamenodeServiceState state)
specifier|private
name|void
name|verifyFirstRegistration
parameter_list|(
name|String
name|nsId
parameter_list|,
name|String
name|nnId
parameter_list|,
name|int
name|resultsCount
parameter_list|,
name|FederationNamenodeServiceState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|?
extends|extends
name|FederationNamenodeContext
argument_list|>
name|namenodes
init|=
name|namenodeResolver
operator|.
name|getNamenodesForNameserviceId
argument_list|(
name|nsId
argument_list|)
decl_stmt|;
if|if
condition|(
name|resultsCount
operator|==
literal|0
condition|)
block|{
name|assertNull
argument_list|(
name|namenodes
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|resultsCount
argument_list|,
name|namenodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|namenodes
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|FederationNamenodeContext
name|namenode
init|=
name|namenodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|state
argument_list|,
name|namenode
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|nnId
argument_list|,
name|namenode
operator|.
name|getNamenodeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testRegistrationExpired ()
specifier|public
name|void
name|testRegistrationExpired
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
comment|// Populate the state store with a single NN element
comment|// 1) ns0:nn0 - Active
comment|// Wait for the entry to expire without heartbeating
comment|// Verify the NN entry is not accessible once expired.
name|NamenodeStatusReport
name|report
init|=
name|createNamenodeReport
argument_list|(
name|NAMESERVICES
index|[
literal|0
index|]
argument_list|,
name|NAMENODES
index|[
literal|0
index|]
argument_list|,
name|HAServiceState
operator|.
name|ACTIVE
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|namenodeResolver
operator|.
name|registerNamenode
argument_list|(
name|report
argument_list|)
argument_list|)
expr_stmt|;
comment|// Load cache
name|stateStore
operator|.
name|refreshCaches
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Verify
name|verifyFirstRegistration
argument_list|(
name|NAMESERVICES
index|[
literal|0
index|]
argument_list|,
name|NAMENODES
index|[
literal|0
index|]
argument_list|,
literal|1
argument_list|,
name|FederationNamenodeServiceState
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
comment|// Wait past expiration (set in conf to 5 seconds)
name|Thread
operator|.
name|sleep
argument_list|(
literal|6000
argument_list|)
expr_stmt|;
comment|// Reload cache
name|stateStore
operator|.
name|refreshCaches
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Verify entry is now expired and is no longer in the cache
name|verifyFirstRegistration
argument_list|(
name|NAMESERVICES
index|[
literal|0
index|]
argument_list|,
name|NAMENODES
index|[
literal|0
index|]
argument_list|,
literal|0
argument_list|,
name|FederationNamenodeServiceState
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
comment|// Heartbeat again, updates dateModified
name|assertTrue
argument_list|(
name|namenodeResolver
operator|.
name|registerNamenode
argument_list|(
name|report
argument_list|)
argument_list|)
expr_stmt|;
comment|// Reload cache
name|stateStore
operator|.
name|refreshCaches
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Verify updated entry is marked active again and accessible to RPC server
name|verifyFirstRegistration
argument_list|(
name|NAMESERVICES
index|[
literal|0
index|]
argument_list|,
name|NAMENODES
index|[
literal|0
index|]
argument_list|,
literal|1
argument_list|,
name|FederationNamenodeServiceState
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRegistrationNamenodeSelection ()
specifier|public
name|void
name|testRegistrationNamenodeSelection
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
comment|// 1) ns0:nn0 - Active
comment|// 2) ns0:nn1 - Standby (newest)
comment|// Verify the selected entry is the active entry
name|assertTrue
argument_list|(
name|namenodeResolver
operator|.
name|registerNamenode
argument_list|(
name|createNamenodeReport
argument_list|(
name|NAMESERVICES
index|[
literal|0
index|]
argument_list|,
name|NAMENODES
index|[
literal|0
index|]
argument_list|,
name|HAServiceState
operator|.
name|ACTIVE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|namenodeResolver
operator|.
name|registerNamenode
argument_list|(
name|createNamenodeReport
argument_list|(
name|NAMESERVICES
index|[
literal|0
index|]
argument_list|,
name|NAMENODES
index|[
literal|1
index|]
argument_list|,
name|HAServiceState
operator|.
name|STANDBY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|stateStore
operator|.
name|refreshCaches
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|verifyFirstRegistration
argument_list|(
name|NAMESERVICES
index|[
literal|0
index|]
argument_list|,
name|NAMENODES
index|[
literal|0
index|]
argument_list|,
literal|2
argument_list|,
name|FederationNamenodeServiceState
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
comment|// 1) ns0:nn0 - Expired (stale)
comment|// 2) ns0:nn1 - Standby (newest)
comment|// Verify the selected entry is the standby entry as the active entry is
comment|// stale
name|assertTrue
argument_list|(
name|namenodeResolver
operator|.
name|registerNamenode
argument_list|(
name|createNamenodeReport
argument_list|(
name|NAMESERVICES
index|[
literal|0
index|]
argument_list|,
name|NAMENODES
index|[
literal|0
index|]
argument_list|,
name|HAServiceState
operator|.
name|ACTIVE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Expire active registration
name|Thread
operator|.
name|sleep
argument_list|(
literal|6000
argument_list|)
expr_stmt|;
comment|// Refresh standby registration
name|assertTrue
argument_list|(
name|namenodeResolver
operator|.
name|registerNamenode
argument_list|(
name|createNamenodeReport
argument_list|(
name|NAMESERVICES
index|[
literal|0
index|]
argument_list|,
name|NAMENODES
index|[
literal|1
index|]
argument_list|,
name|HAServiceState
operator|.
name|STANDBY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify that standby is selected (active is now expired)
name|stateStore
operator|.
name|refreshCaches
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|verifyFirstRegistration
argument_list|(
name|NAMESERVICES
index|[
literal|0
index|]
argument_list|,
name|NAMENODES
index|[
literal|1
index|]
argument_list|,
literal|1
argument_list|,
name|FederationNamenodeServiceState
operator|.
name|STANDBY
argument_list|)
expr_stmt|;
comment|// 1) ns0:nn0 - Active
comment|// 2) ns0:nn1 - Unavailable (newest)
comment|// Verify the selected entry is the active entry
name|assertTrue
argument_list|(
name|namenodeResolver
operator|.
name|registerNamenode
argument_list|(
name|createNamenodeReport
argument_list|(
name|NAMESERVICES
index|[
literal|0
index|]
argument_list|,
name|NAMENODES
index|[
literal|0
index|]
argument_list|,
name|HAServiceState
operator|.
name|ACTIVE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|namenodeResolver
operator|.
name|registerNamenode
argument_list|(
name|createNamenodeReport
argument_list|(
name|NAMESERVICES
index|[
literal|0
index|]
argument_list|,
name|NAMENODES
index|[
literal|1
index|]
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|stateStore
operator|.
name|refreshCaches
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|verifyFirstRegistration
argument_list|(
name|NAMESERVICES
index|[
literal|0
index|]
argument_list|,
name|NAMENODES
index|[
literal|0
index|]
argument_list|,
literal|2
argument_list|,
name|FederationNamenodeServiceState
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
comment|// 1) ns0:nn0 - Unavailable (newest)
comment|// 2) ns0:nn1 - Standby
comment|// Verify the selected entry is the standby entry
name|assertTrue
argument_list|(
name|namenodeResolver
operator|.
name|registerNamenode
argument_list|(
name|createNamenodeReport
argument_list|(
name|NAMESERVICES
index|[
literal|0
index|]
argument_list|,
name|NAMENODES
index|[
literal|1
index|]
argument_list|,
name|HAServiceState
operator|.
name|STANDBY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|namenodeResolver
operator|.
name|registerNamenode
argument_list|(
name|createNamenodeReport
argument_list|(
name|NAMESERVICES
index|[
literal|0
index|]
argument_list|,
name|NAMENODES
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|stateStore
operator|.
name|refreshCaches
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|verifyFirstRegistration
argument_list|(
name|NAMESERVICES
index|[
literal|0
index|]
argument_list|,
name|NAMENODES
index|[
literal|1
index|]
argument_list|,
literal|2
argument_list|,
name|FederationNamenodeServiceState
operator|.
name|STANDBY
argument_list|)
expr_stmt|;
comment|// 1) ns0:nn0 - Active (oldest)
comment|// 2) ns0:nn1 - Standby
comment|// 3) ns0:nn2 - Active (newest)
comment|// Verify the selected entry is the newest active entry
name|assertTrue
argument_list|(
name|namenodeResolver
operator|.
name|registerNamenode
argument_list|(
name|createNamenodeReport
argument_list|(
name|NAMESERVICES
index|[
literal|0
index|]
argument_list|,
name|NAMENODES
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|namenodeResolver
operator|.
name|registerNamenode
argument_list|(
name|createNamenodeReport
argument_list|(
name|NAMESERVICES
index|[
literal|0
index|]
argument_list|,
name|NAMENODES
index|[
literal|1
index|]
argument_list|,
name|HAServiceState
operator|.
name|STANDBY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|namenodeResolver
operator|.
name|registerNamenode
argument_list|(
name|createNamenodeReport
argument_list|(
name|NAMESERVICES
index|[
literal|0
index|]
argument_list|,
name|NAMENODES
index|[
literal|2
index|]
argument_list|,
name|HAServiceState
operator|.
name|ACTIVE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|stateStore
operator|.
name|refreshCaches
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|verifyFirstRegistration
argument_list|(
name|NAMESERVICES
index|[
literal|0
index|]
argument_list|,
name|NAMENODES
index|[
literal|2
index|]
argument_list|,
literal|3
argument_list|,
name|FederationNamenodeServiceState
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
comment|// 1) ns0:nn0 - Standby (oldest)
comment|// 2) ns0:nn1 - Standby (newest)
comment|// 3) ns0:nn2 - Standby
comment|// Verify the selected entry is the newest standby entry
name|assertTrue
argument_list|(
name|namenodeResolver
operator|.
name|registerNamenode
argument_list|(
name|createNamenodeReport
argument_list|(
name|NAMESERVICES
index|[
literal|0
index|]
argument_list|,
name|NAMENODES
index|[
literal|0
index|]
argument_list|,
name|HAServiceState
operator|.
name|STANDBY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|namenodeResolver
operator|.
name|registerNamenode
argument_list|(
name|createNamenodeReport
argument_list|(
name|NAMESERVICES
index|[
literal|0
index|]
argument_list|,
name|NAMENODES
index|[
literal|2
index|]
argument_list|,
name|HAServiceState
operator|.
name|STANDBY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1500
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|namenodeResolver
operator|.
name|registerNamenode
argument_list|(
name|createNamenodeReport
argument_list|(
name|NAMESERVICES
index|[
literal|0
index|]
argument_list|,
name|NAMENODES
index|[
literal|1
index|]
argument_list|,
name|HAServiceState
operator|.
name|STANDBY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|stateStore
operator|.
name|refreshCaches
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|verifyFirstRegistration
argument_list|(
name|NAMESERVICES
index|[
literal|0
index|]
argument_list|,
name|NAMENODES
index|[
literal|1
index|]
argument_list|,
literal|3
argument_list|,
name|FederationNamenodeServiceState
operator|.
name|STANDBY
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

