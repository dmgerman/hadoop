begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.router
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|NameNodeProxies
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|MiniRouterDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|RouterConfigBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamenodeProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|FederationTestUtils
operator|.
name|createFile
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|FederationTestUtils
operator|.
name|verifyFileExists
import|;
end_import

begin_comment
comment|/**  * The the RPC interface of the {@link Router} implemented by  * {@link RouterRpcServer}.  * Tests covering the functionality of RouterRPCServer with  * single nameService.  */
end_comment

begin_class
DECL|class|TestRouterRpcSingleNS
specifier|public
class|class
name|TestRouterRpcSingleNS
block|{
comment|/**    * Federated HDFS cluster.    */
DECL|field|cluster
specifier|private
specifier|static
name|MiniRouterDFSCluster
name|cluster
decl_stmt|;
comment|/**    * Random Router for this federated cluster.    */
DECL|field|router
specifier|private
name|MiniRouterDFSCluster
operator|.
name|RouterContext
name|router
decl_stmt|;
comment|/**    * Random nameservice in the federated cluster.    */
DECL|field|ns
specifier|private
name|String
name|ns
decl_stmt|;
comment|/**    * First namenode in the nameservice.    */
DECL|field|namenode
specifier|private
name|MiniRouterDFSCluster
operator|.
name|NamenodeContext
name|namenode
decl_stmt|;
comment|/**    * Client interface to the Router.    */
DECL|field|routerProtocol
specifier|private
name|ClientProtocol
name|routerProtocol
decl_stmt|;
comment|/**    * Client interface to the Namenode.    */
DECL|field|nnProtocol
specifier|private
name|ClientProtocol
name|nnProtocol
decl_stmt|;
comment|/**    * NameNodeProtocol interface to the Router.    */
DECL|field|routerNamenodeProtocol
specifier|private
name|NamenodeProtocol
name|routerNamenodeProtocol
decl_stmt|;
comment|/**    * NameNodeProtocol interface to the Namenode.    */
DECL|field|nnNamenodeProtocol
specifier|private
name|NamenodeProtocol
name|nnNamenodeProtocol
decl_stmt|;
comment|/**    * Filesystem interface to the Router.    */
DECL|field|routerFS
specifier|private
name|FileSystem
name|routerFS
decl_stmt|;
comment|/**    * Filesystem interface to the Namenode.    */
DECL|field|nnFS
specifier|private
name|FileSystem
name|nnFS
decl_stmt|;
comment|/**    * File in the Router.    */
DECL|field|routerFile
specifier|private
name|String
name|routerFile
decl_stmt|;
comment|/**    * File in the Namenode.    */
DECL|field|nnFile
specifier|private
name|String
name|nnFile
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|globalSetUp ()
specifier|public
specifier|static
name|void
name|globalSetUp
parameter_list|()
throws|throws
name|Exception
block|{
name|cluster
operator|=
operator|new
name|MiniRouterDFSCluster
argument_list|(
literal|false
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|setNumDatanodesPerNameservice
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// Start NNs and DNs and wait until ready
name|cluster
operator|.
name|startCluster
argument_list|()
expr_stmt|;
comment|// Start routers with only an RPC service
name|Configuration
name|routerConf
init|=
operator|new
name|RouterConfigBuilder
argument_list|()
operator|.
name|metrics
argument_list|()
operator|.
name|rpc
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// We decrease the DN cache times to make the test faster
name|routerConf
operator|.
name|setTimeDuration
argument_list|(
name|RBFConfigKeys
operator|.
name|DN_REPORT_CACHE_EXPIRE
argument_list|,
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|addRouterOverrides
argument_list|(
name|routerConf
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|startRouters
argument_list|()
expr_stmt|;
comment|// Register and verify all NNs with all routers
name|cluster
operator|.
name|registerNamenodes
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitNamenodeRegistration
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|tearDown ()
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|testSetup ()
specifier|public
name|void
name|testSetup
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create mock locations
name|cluster
operator|.
name|installMockLocations
argument_list|()
expr_stmt|;
comment|// Delete all files via the NNs and verify
name|cluster
operator|.
name|deleteAllFiles
argument_list|()
expr_stmt|;
comment|// Create test fixtures on NN
name|cluster
operator|.
name|createTestDirectoriesNamenode
argument_list|()
expr_stmt|;
comment|// Wait to ensure NN has fully created its test directories
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
comment|// Random router for this test
name|MiniRouterDFSCluster
operator|.
name|RouterContext
name|rndRouter
init|=
name|cluster
operator|.
name|getRandomRouter
argument_list|()
decl_stmt|;
name|this
operator|.
name|setRouter
argument_list|(
name|rndRouter
argument_list|)
expr_stmt|;
comment|// Pick a namenode for this test
name|String
name|ns0
init|=
name|cluster
operator|.
name|getNameservices
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|this
operator|.
name|setNs
argument_list|(
name|ns0
argument_list|)
expr_stmt|;
name|this
operator|.
name|setNamenode
argument_list|(
name|cluster
operator|.
name|getNamenode
argument_list|(
name|ns0
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create a test file on the NN
name|Random
name|rnd
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|String
name|randomFile
init|=
literal|"testfile-"
operator|+
name|rnd
operator|.
name|nextInt
argument_list|()
decl_stmt|;
name|this
operator|.
name|nnFile
operator|=
name|cluster
operator|.
name|getNamenodeTestDirectoryForNS
argument_list|(
name|ns
argument_list|)
operator|+
literal|"/"
operator|+
name|randomFile
expr_stmt|;
name|this
operator|.
name|routerFile
operator|=
name|cluster
operator|.
name|getFederatedTestDirectoryForNS
argument_list|(
name|ns
argument_list|)
operator|+
literal|"/"
operator|+
name|randomFile
expr_stmt|;
name|createFile
argument_list|(
name|nnFS
argument_list|,
name|nnFile
argument_list|,
literal|32
argument_list|)
expr_stmt|;
name|verifyFileExists
argument_list|(
name|nnFS
argument_list|,
name|nnFile
argument_list|)
expr_stmt|;
block|}
DECL|method|setRouter (MiniRouterDFSCluster.RouterContext r)
specifier|protected
name|void
name|setRouter
parameter_list|(
name|MiniRouterDFSCluster
operator|.
name|RouterContext
name|r
parameter_list|)
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
name|this
operator|.
name|router
operator|=
name|r
expr_stmt|;
name|this
operator|.
name|routerProtocol
operator|=
name|r
operator|.
name|getClient
argument_list|()
operator|.
name|getNamenode
argument_list|()
expr_stmt|;
name|this
operator|.
name|routerFS
operator|=
name|r
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|this
operator|.
name|routerNamenodeProtocol
operator|=
name|NameNodeProxies
operator|.
name|createProxy
argument_list|(
name|router
operator|.
name|getConf
argument_list|()
argument_list|,
name|router
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getUri
argument_list|()
argument_list|,
name|NamenodeProtocol
operator|.
name|class
argument_list|)
operator|.
name|getProxy
argument_list|()
expr_stmt|;
block|}
DECL|method|setNs (String nameservice)
specifier|protected
name|void
name|setNs
parameter_list|(
name|String
name|nameservice
parameter_list|)
block|{
name|this
operator|.
name|ns
operator|=
name|nameservice
expr_stmt|;
block|}
DECL|method|setNamenode (MiniRouterDFSCluster.NamenodeContext nn)
specifier|protected
name|void
name|setNamenode
parameter_list|(
name|MiniRouterDFSCluster
operator|.
name|NamenodeContext
name|nn
parameter_list|)
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
name|this
operator|.
name|namenode
operator|=
name|nn
expr_stmt|;
name|this
operator|.
name|nnProtocol
operator|=
name|nn
operator|.
name|getClient
argument_list|()
operator|.
name|getNamenode
argument_list|()
expr_stmt|;
name|this
operator|.
name|nnFS
operator|=
name|nn
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
comment|// Namenode from the default namespace
name|String
name|ns0
init|=
name|cluster
operator|.
name|getNameservices
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|MiniRouterDFSCluster
operator|.
name|NamenodeContext
name|nn0
init|=
name|cluster
operator|.
name|getNamenode
argument_list|(
name|ns0
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|this
operator|.
name|nnNamenodeProtocol
operator|=
name|NameNodeProxies
operator|.
name|createProxy
argument_list|(
name|nn0
operator|.
name|getConf
argument_list|()
argument_list|,
name|nn0
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getUri
argument_list|()
argument_list|,
name|NamenodeProtocol
operator|.
name|class
argument_list|)
operator|.
name|getProxy
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetCurrentTXIDandRollEdits ()
specifier|public
name|void
name|testGetCurrentTXIDandRollEdits
parameter_list|()
throws|throws
name|IOException
block|{
name|Long
name|rollEdits
init|=
name|routerProtocol
operator|.
name|rollEdits
argument_list|()
decl_stmt|;
name|Long
name|currentTXID
init|=
name|routerProtocol
operator|.
name|getCurrentEditLogTxid
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|rollEdits
argument_list|,
name|currentTXID
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSaveNamespace ()
specifier|public
name|void
name|testSaveNamespace
parameter_list|()
throws|throws
name|IOException
block|{
name|cluster
operator|.
name|getCluster
argument_list|()
operator|.
name|getFileSystem
argument_list|()
operator|.
name|setSafeMode
argument_list|(
name|HdfsConstants
operator|.
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
argument_list|)
expr_stmt|;
name|Boolean
name|saveNamespace
init|=
name|routerProtocol
operator|.
name|saveNamespace
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|saveNamespace
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

