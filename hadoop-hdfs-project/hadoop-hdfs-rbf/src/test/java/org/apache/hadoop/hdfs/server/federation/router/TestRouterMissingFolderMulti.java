begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.router
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|FederationTestUtils
operator|.
name|createMountTableEntry
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|FederationTestUtils
operator|.
name|getFileSystem
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|MockNamenode
operator|.
name|registerSubclusters
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|FederationStateStoreTestUtils
operator|.
name|getStateStoreConfiguration
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ContentSummary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|MockNamenode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|RouterConfigBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|ActiveNamenodeResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|FileSubclusterResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|MembershipNamenodeResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|MultipleDestinationMountTableResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|order
operator|.
name|DestinationOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Test the behavior when listing a mount point mapped to multiple subclusters  * and one of the subclusters is missing it.  */
end_comment

begin_class
DECL|class|TestRouterMissingFolderMulti
specifier|public
class|class
name|TestRouterMissingFolderMulti
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestRouterMissingFolderMulti
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** Number of files to create for testing. */
DECL|field|NUM_FILES
specifier|private
specifier|static
specifier|final
name|int
name|NUM_FILES
init|=
literal|10
decl_stmt|;
comment|/** Namenodes for the test per name service id (subcluster). */
DECL|field|namenodes
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|MockNamenode
argument_list|>
name|namenodes
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/** Routers for the test. */
DECL|field|router
specifier|private
name|Router
name|router
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Start the Namenodes"
argument_list|)
expr_stmt|;
name|Configuration
name|nnConf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|nnConf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HANDLER_COUNT_KEY
argument_list|,
literal|10
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|String
name|nsId
range|:
name|asList
argument_list|(
literal|"ns0"
argument_list|,
literal|"ns1"
argument_list|)
control|)
block|{
name|MockNamenode
name|nn
init|=
operator|new
name|MockNamenode
argument_list|(
name|nsId
argument_list|,
name|nnConf
argument_list|)
decl_stmt|;
name|nn
operator|.
name|transitionToActive
argument_list|()
expr_stmt|;
name|nn
operator|.
name|addFileSystemMock
argument_list|()
expr_stmt|;
name|namenodes
operator|.
name|put
argument_list|(
name|nsId
argument_list|,
name|nn
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Start the Routers"
argument_list|)
expr_stmt|;
name|Configuration
name|routerConf
init|=
operator|new
name|RouterConfigBuilder
argument_list|()
operator|.
name|stateStore
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|rpc
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|routerConf
operator|.
name|set
argument_list|(
name|RBFConfigKeys
operator|.
name|DFS_ROUTER_RPC_ADDRESS_KEY
argument_list|,
literal|"0.0.0.0:0"
argument_list|)
expr_stmt|;
name|routerConf
operator|.
name|set
argument_list|(
name|RBFConfigKeys
operator|.
name|DFS_ROUTER_HTTP_ADDRESS_KEY
argument_list|,
literal|"0.0.0.0:0"
argument_list|)
expr_stmt|;
name|routerConf
operator|.
name|set
argument_list|(
name|RBFConfigKeys
operator|.
name|DFS_ROUTER_ADMIN_ADDRESS_KEY
argument_list|,
literal|"0.0.0.0:0"
argument_list|)
expr_stmt|;
name|Configuration
name|stateStoreConf
init|=
name|getStateStoreConfiguration
argument_list|()
decl_stmt|;
name|stateStoreConf
operator|.
name|setClass
argument_list|(
name|RBFConfigKeys
operator|.
name|FEDERATION_NAMENODE_RESOLVER_CLIENT_CLASS
argument_list|,
name|MembershipNamenodeResolver
operator|.
name|class
argument_list|,
name|ActiveNamenodeResolver
operator|.
name|class
argument_list|)
expr_stmt|;
name|stateStoreConf
operator|.
name|setClass
argument_list|(
name|RBFConfigKeys
operator|.
name|FEDERATION_FILE_RESOLVER_CLIENT_CLASS
argument_list|,
name|MultipleDestinationMountTableResolver
operator|.
name|class
argument_list|,
name|FileSubclusterResolver
operator|.
name|class
argument_list|)
expr_stmt|;
name|routerConf
operator|.
name|addResource
argument_list|(
name|stateStoreConf
argument_list|)
expr_stmt|;
name|routerConf
operator|.
name|setBoolean
argument_list|(
name|RBFConfigKeys
operator|.
name|DFS_ROUTER_ALLOW_PARTIAL_LIST
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|router
operator|=
operator|new
name|Router
argument_list|()
expr_stmt|;
name|router
operator|.
name|init
argument_list|(
name|routerConf
argument_list|)
expr_stmt|;
name|router
operator|.
name|start
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Registering the subclusters in the Routers"
argument_list|)
expr_stmt|;
name|registerSubclusters
argument_list|(
name|router
argument_list|,
name|namenodes
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|cleanup ()
specifier|public
name|void
name|cleanup
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping the cluster"
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|MockNamenode
name|nn
range|:
name|namenodes
operator|.
name|values
argument_list|()
control|)
block|{
name|nn
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|namenodes
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|router
operator|!=
literal|null
condition|)
block|{
name|router
operator|.
name|stop
argument_list|()
expr_stmt|;
name|router
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSuccess ()
specifier|public
name|void
name|testSuccess
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|getFileSystem
argument_list|(
name|router
argument_list|)
decl_stmt|;
name|String
name|mountPoint
init|=
literal|"/test-success"
decl_stmt|;
name|createMountTableEntry
argument_list|(
name|router
argument_list|,
name|mountPoint
argument_list|,
name|DestinationOrder
operator|.
name|HASH_ALL
argument_list|,
name|namenodes
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|folder
init|=
operator|new
name|Path
argument_list|(
name|mountPoint
argument_list|,
literal|"folder-all"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_FILES
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|folder
argument_list|,
literal|"file-"
operator|+
name|i
operator|+
literal|".txt"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|os
init|=
name|fs
operator|.
name|create
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|FileStatus
index|[]
name|files
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|folder
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|NUM_FILES
argument_list|,
name|files
operator|.
name|length
argument_list|)
expr_stmt|;
name|ContentSummary
name|contentSummary
init|=
name|fs
operator|.
name|getContentSummary
argument_list|(
name|folder
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|NUM_FILES
argument_list|,
name|contentSummary
operator|.
name|getFileCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFileNotFound ()
specifier|public
name|void
name|testFileNotFound
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|getFileSystem
argument_list|(
name|router
argument_list|)
decl_stmt|;
name|String
name|mountPoint
init|=
literal|"/test-non-existing"
decl_stmt|;
name|createMountTableEntry
argument_list|(
name|router
argument_list|,
name|mountPoint
argument_list|,
name|DestinationOrder
operator|.
name|HASH_ALL
argument_list|,
name|namenodes
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|mountPoint
argument_list|,
literal|"folder-all"
argument_list|)
decl_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|FileNotFoundException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|fs
operator|.
name|listStatus
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|FileNotFoundException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|fs
operator|.
name|getContentSummary
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOneMissing ()
specifier|public
name|void
name|testOneMissing
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|getFileSystem
argument_list|(
name|router
argument_list|)
decl_stmt|;
name|String
name|mountPoint
init|=
literal|"/test-one-missing"
decl_stmt|;
name|createMountTableEntry
argument_list|(
name|router
argument_list|,
name|mountPoint
argument_list|,
name|DestinationOrder
operator|.
name|HASH_ALL
argument_list|,
name|namenodes
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create the folders directly in only one of the Namenodes
name|MockNamenode
name|nn
init|=
name|namenodes
operator|.
name|get
argument_list|(
literal|"ns0"
argument_list|)
decl_stmt|;
name|int
name|nnRpcPort
init|=
name|nn
operator|.
name|getRPCPort
argument_list|()
decl_stmt|;
name|FileSystem
name|nnFs
init|=
name|getFileSystem
argument_list|(
name|nnRpcPort
argument_list|)
decl_stmt|;
name|Path
name|folder
init|=
operator|new
name|Path
argument_list|(
name|mountPoint
argument_list|,
literal|"folder-all"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_FILES
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|folder
argument_list|,
literal|"file-"
operator|+
name|i
operator|+
literal|".txt"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|os
init|=
name|nnFs
operator|.
name|create
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|FileStatus
index|[]
name|files
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|folder
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|NUM_FILES
argument_list|,
name|files
operator|.
name|length
argument_list|)
expr_stmt|;
name|ContentSummary
name|summary
init|=
name|fs
operator|.
name|getContentSummary
argument_list|(
name|folder
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|NUM_FILES
argument_list|,
name|summary
operator|.
name|getFileAndDirectoryCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

