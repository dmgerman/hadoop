begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.router
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|MiniRouterDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|RouterConfigBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ha
operator|.
name|ConfiguredFailoverProxyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|federation
operator|.
name|RouterAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AuthorizationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|ProxyUsers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * Test refreshSuperUserGroupsConfiguration on Routers.  * Notice that this test is intended to test  * {@link RouterAdminServer#refreshSuperUserGroupsConfiguration}  * which invoked by {@link RouterAdmin}  */
end_comment

begin_class
DECL|class|TestRouterRefreshSuperUserGroupsConfiguration
specifier|public
class|class
name|TestRouterRefreshSuperUserGroupsConfiguration
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestRouterRefreshSuperUserGroupsConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|cluster
specifier|private
name|MiniRouterDFSCluster
name|cluster
decl_stmt|;
DECL|field|ROUTER_NS
specifier|private
specifier|static
specifier|final
name|String
name|ROUTER_NS
init|=
literal|"rbfns"
decl_stmt|;
DECL|field|HDFS_SCHEMA
specifier|private
specifier|static
specifier|final
name|String
name|HDFS_SCHEMA
init|=
literal|"hdfs://"
decl_stmt|;
DECL|field|LOOPBACK_ADDRESS
specifier|private
specifier|static
specifier|final
name|String
name|LOOPBACK_ADDRESS
init|=
literal|"127.0.0.1"
decl_stmt|;
DECL|field|tempResource
specifier|private
name|String
name|tempResource
init|=
literal|null
decl_stmt|;
annotation|@
name|Before
DECL|method|setUpCluster ()
specifier|public
name|void
name|setUpCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|RouterConfigBuilder
argument_list|()
operator|.
name|rpc
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|cluster
operator|=
operator|new
name|MiniRouterDFSCluster
argument_list|(
literal|false
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|addRouterOverrides
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|startRouters
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|tempResource
operator|!=
literal|null
condition|)
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|tempResource
argument_list|)
decl_stmt|;
name|f
operator|.
name|delete
argument_list|()
expr_stmt|;
name|tempResource
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|initializeClientConfig ()
specifier|private
name|Configuration
name|initializeClientConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|Router
name|router
init|=
name|cluster
operator|.
name|getRouters
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRouter
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMESERVICES
argument_list|,
literal|"ns0,ns1,"
operator|+
name|ROUTER_NS
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HA_NAMENODES_KEY_PREFIX
operator|+
literal|"."
operator|+
name|ROUTER_NS
argument_list|,
literal|"r1"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|RBFConfigKeys
operator|.
name|DFS_ROUTER_ADMIN_ADDRESS_KEY
argument_list|,
name|LOOPBACK_ADDRESS
operator|+
literal|":"
operator|+
name|router
operator|.
name|getAdminServerAddress
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_RPC_ADDRESS_KEY
operator|+
literal|"."
operator|+
name|ROUTER_NS
operator|+
literal|".r1"
argument_list|,
name|LOOPBACK_ADDRESS
operator|+
literal|":"
operator|+
name|router
operator|.
name|getRpcServerAddress
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|Failover
operator|.
name|PROXY_PROVIDER_KEY_PREFIX
operator|+
literal|"."
operator|+
name|ROUTER_NS
argument_list|,
name|ConfiguredFailoverProxyProvider
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|FS_DEFAULT_NAME_KEY
argument_list|,
name|HDFS_SCHEMA
operator|+
name|ROUTER_NS
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"dfs.client.failover.random.order"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|FS_DEFAULT_NAME_KEY
argument_list|,
name|HDFS_SCHEMA
operator|+
name|ROUTER_NS
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
annotation|@
name|Test
DECL|method|testRefreshSuperUserGroupsConfiguration ()
specifier|public
name|void
name|testRefreshSuperUserGroupsConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|initializeClientConfig
argument_list|()
decl_stmt|;
name|testRefreshSuperUserGroupsConfigurationInternal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|testRefreshSuperUserGroupsConfigurationInternal ( Configuration conf)
specifier|private
name|void
name|testRefreshSuperUserGroupsConfigurationInternal
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|UserGroupInformation
name|ugi
init|=
name|mock
argument_list|(
name|UserGroupInformation
operator|.
name|class
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|impersonator
init|=
name|mock
argument_list|(
name|UserGroupInformation
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Setting for impersonator
name|when
argument_list|(
name|impersonator
operator|.
name|getShortUserName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"impersonator"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|impersonator
operator|.
name|getUserName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"impersonator"
argument_list|)
expr_stmt|;
comment|// Setting for victim
name|when
argument_list|(
name|ugi
operator|.
name|getRealUser
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|impersonator
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|ugi
operator|.
name|getUserName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"victim"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|ugi
operator|.
name|getGroups
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"groupVictim"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Exception should be thrown before applying config
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|AuthorizationException
operator|.
name|class
argument_list|,
literal|"User: impersonator is not allowed to impersonate victim"
argument_list|,
parameter_list|()
lambda|->
name|ProxyUsers
operator|.
name|authorize
argument_list|(
name|ugi
argument_list|,
name|LOOPBACK_ADDRESS
argument_list|)
argument_list|)
expr_stmt|;
comment|// refresh will look at configuration on the server side
comment|// add additional resource with the new value
comment|// so the server side will pick it up
name|String
name|tfile
init|=
literal|"testRouterRefreshSuperUserGroupsConfiguration_rsrc.xml"
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|keys
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"hadoop.proxyuser.impersonator.groups"
argument_list|,
literal|"hadoop.proxyuser.impersonator.hosts"
argument_list|)
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"groupVictim"
argument_list|,
name|LOOPBACK_ADDRESS
argument_list|)
argument_list|)
decl_stmt|;
name|tempResource
operator|=
name|addFileBasedConfigResource
argument_list|(
name|tfile
argument_list|,
name|keys
argument_list|,
name|values
argument_list|)
expr_stmt|;
name|Configuration
operator|.
name|addDefaultResource
argument_list|(
name|tfile
argument_list|)
expr_stmt|;
comment|// Mimic CLI Access
name|RouterAdmin
name|routerAdmin
init|=
operator|new
name|RouterAdmin
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|int
name|clientRes
init|=
name|routerAdmin
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-refreshSuperUserGroupsConfiguration"
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"CLI command was not successful"
argument_list|,
literal|0
argument_list|,
name|clientRes
argument_list|)
expr_stmt|;
name|ProxyUsers
operator|.
name|authorize
argument_list|(
name|ugi
argument_list|,
name|LOOPBACK_ADDRESS
argument_list|)
expr_stmt|;
block|}
DECL|method|addFileBasedConfigResource (String configFileName, ArrayList<String> keyArray, ArrayList<String> valueArray)
specifier|private
specifier|static
name|String
name|addFileBasedConfigResource
parameter_list|(
name|String
name|configFileName
parameter_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
name|keyArray
parameter_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
name|valueArray
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|keyArray
operator|.
name|size
argument_list|()
operator|!=
name|valueArray
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"keyArray and valueArray should be equal in size"
argument_list|)
throw|;
block|}
name|URL
name|url
init|=
operator|new
name|Configuration
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"hdfs-site.xml"
argument_list|)
decl_stmt|;
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
name|URLDecoder
operator|.
name|decode
argument_list|(
name|url
operator|.
name|getPath
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|String
name|tmp
init|=
name|dir
operator|.
name|toString
argument_list|()
operator|+
literal|"/"
operator|+
name|configFileName
decl_stmt|;
name|StringBuilder
name|configItems
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|configItems
operator|.
name|append
argument_list|(
literal|"<configuration>"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keyArray
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|configItems
operator|.
name|append
argument_list|(
literal|"<property>"
argument_list|)
operator|.
name|append
argument_list|(
literal|"<name>"
argument_list|)
operator|.
name|append
argument_list|(
name|keyArray
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"</name>"
argument_list|)
operator|.
name|append
argument_list|(
literal|"<value>"
argument_list|)
operator|.
name|append
argument_list|(
name|valueArray
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"</value>"
argument_list|)
operator|.
name|append
argument_list|(
literal|"</property>"
argument_list|)
expr_stmt|;
block|}
name|configItems
operator|.
name|append
argument_list|(
literal|"</configuration>"
argument_list|)
expr_stmt|;
name|PrintWriter
name|writer
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|tmp
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|println
argument_list|(
name|configItems
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|tmp
return|;
block|}
block|}
end_class

end_unit

