begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.resolver
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
operator|.
name|RBFConfigKeys
operator|.
name|FEDERATION_MOUNT_TABLE_CACHE_ENABLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
operator|.
name|RBFConfigKeys
operator|.
name|FEDERATION_MOUNT_TABLE_MAX_CACHE_SIZE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
operator|.
name|RBFConfigKeys
operator|.
name|DFS_ROUTER_DEFAULT_NAMESERVICE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
operator|.
name|Router
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|MountTableStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|MountTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Test the {@link MountTableStore} from the {@link Router}.  */
end_comment

begin_class
DECL|class|TestMountTableResolver
specifier|public
class|class
name|TestMountTableResolver
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestMountTableResolver
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|TEST_MAX_CACHE_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|TEST_MAX_CACHE_SIZE
init|=
literal|10
decl_stmt|;
DECL|field|mountTable
specifier|private
name|MountTableResolver
name|mountTable
decl_stmt|;
DECL|method|getMountTableEntry ( String subcluster, String path)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getMountTableEntry
parameter_list|(
name|String
name|subcluster
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ret
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|subcluster
argument_list|,
name|path
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
comment|/**    * Setup the mount table.    * / -> 1:/    * __tmp -> 2:/tmp    * __user -> 3:/user    * ____a -> 2:/user/test    * ______demo    * ________test    * __________a -> 1:/user/test    * __________b -> 3:/user/test    * ____b    * ______file1.txt -> 4:/user/file1.txt    * __usr    * ____bin -> 2:/bin    * __readonly -> 2:/tmp    * __multi -> 5:/dest1    *            6:/dest2    *    * @throws IOException If it cannot set the mount table.    */
DECL|method|setupMountTable ()
specifier|private
name|void
name|setupMountTable
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|FEDERATION_MOUNT_TABLE_MAX_CACHE_SIZE
argument_list|,
name|TEST_MAX_CACHE_SIZE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
name|DFS_ROUTER_DEFAULT_NAMESERVICE
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|mountTable
operator|=
operator|new
name|MountTableResolver
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Root mount point
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|getMountTableEntry
argument_list|(
literal|"1"
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
name|mountTable
operator|.
name|addEntry
argument_list|(
name|MountTable
operator|.
name|newInstance
argument_list|(
literal|"/"
argument_list|,
name|map
argument_list|)
argument_list|)
expr_stmt|;
comment|// /tmp
name|map
operator|=
name|getMountTableEntry
argument_list|(
literal|"2"
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
name|mountTable
operator|.
name|addEntry
argument_list|(
name|MountTable
operator|.
name|newInstance
argument_list|(
literal|"/tmp"
argument_list|,
name|map
argument_list|)
argument_list|)
expr_stmt|;
comment|// /user
name|map
operator|=
name|getMountTableEntry
argument_list|(
literal|"3"
argument_list|,
literal|"/user"
argument_list|)
expr_stmt|;
name|mountTable
operator|.
name|addEntry
argument_list|(
name|MountTable
operator|.
name|newInstance
argument_list|(
literal|"/user"
argument_list|,
name|map
argument_list|)
argument_list|)
expr_stmt|;
comment|// /usr/bin
name|map
operator|=
name|getMountTableEntry
argument_list|(
literal|"2"
argument_list|,
literal|"/bin"
argument_list|)
expr_stmt|;
name|mountTable
operator|.
name|addEntry
argument_list|(
name|MountTable
operator|.
name|newInstance
argument_list|(
literal|"/usr/bin"
argument_list|,
name|map
argument_list|)
argument_list|)
expr_stmt|;
comment|// /user/a
name|map
operator|=
name|getMountTableEntry
argument_list|(
literal|"2"
argument_list|,
literal|"/user/test"
argument_list|)
expr_stmt|;
name|mountTable
operator|.
name|addEntry
argument_list|(
name|MountTable
operator|.
name|newInstance
argument_list|(
literal|"/user/a"
argument_list|,
name|map
argument_list|)
argument_list|)
expr_stmt|;
comment|// /user/b/file1.txt
name|map
operator|=
name|getMountTableEntry
argument_list|(
literal|"4"
argument_list|,
literal|"/user/file1.txt"
argument_list|)
expr_stmt|;
name|mountTable
operator|.
name|addEntry
argument_list|(
name|MountTable
operator|.
name|newInstance
argument_list|(
literal|"/user/b/file1.txt"
argument_list|,
name|map
argument_list|)
argument_list|)
expr_stmt|;
comment|// /user/a/demo/test/a
name|map
operator|=
name|getMountTableEntry
argument_list|(
literal|"1"
argument_list|,
literal|"/user/test"
argument_list|)
expr_stmt|;
name|mountTable
operator|.
name|addEntry
argument_list|(
name|MountTable
operator|.
name|newInstance
argument_list|(
literal|"/user/a/demo/test/a"
argument_list|,
name|map
argument_list|)
argument_list|)
expr_stmt|;
comment|// /user/a/demo/test/b
name|map
operator|=
name|getMountTableEntry
argument_list|(
literal|"3"
argument_list|,
literal|"/user/test"
argument_list|)
expr_stmt|;
name|mountTable
operator|.
name|addEntry
argument_list|(
name|MountTable
operator|.
name|newInstance
argument_list|(
literal|"/user/a/demo/test/b"
argument_list|,
name|map
argument_list|)
argument_list|)
expr_stmt|;
comment|// /readonly
name|map
operator|=
name|getMountTableEntry
argument_list|(
literal|"2"
argument_list|,
literal|"/tmp"
argument_list|)
expr_stmt|;
name|MountTable
name|readOnlyEntry
init|=
name|MountTable
operator|.
name|newInstance
argument_list|(
literal|"/readonly"
argument_list|,
name|map
argument_list|)
decl_stmt|;
name|readOnlyEntry
operator|.
name|setReadOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|mountTable
operator|.
name|addEntry
argument_list|(
name|readOnlyEntry
argument_list|)
expr_stmt|;
comment|// /multi
name|map
operator|=
name|getMountTableEntry
argument_list|(
literal|"5"
argument_list|,
literal|"/dest1"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"6"
argument_list|,
literal|"/dest2"
argument_list|)
expr_stmt|;
name|MountTable
name|multiEntry
init|=
name|MountTable
operator|.
name|newInstance
argument_list|(
literal|"/multi"
argument_list|,
name|map
argument_list|)
decl_stmt|;
name|mountTable
operator|.
name|addEntry
argument_list|(
name|multiEntry
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|setupMountTable
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDestination ()
specifier|public
name|void
name|testDestination
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Check files
name|assertEquals
argument_list|(
literal|"1->/tesfile1.txt"
argument_list|,
name|mountTable
operator|.
name|getDestinationForPath
argument_list|(
literal|"/tesfile1.txt"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3->/user/testfile2.txt"
argument_list|,
name|mountTable
operator|.
name|getDestinationForPath
argument_list|(
literal|"/user/testfile2.txt"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2->/user/test/testfile3.txt"
argument_list|,
name|mountTable
operator|.
name|getDestinationForPath
argument_list|(
literal|"/user/a/testfile3.txt"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3->/user/b/testfile4.txt"
argument_list|,
name|mountTable
operator|.
name|getDestinationForPath
argument_list|(
literal|"/user/b/testfile4.txt"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1->/share/file5.txt"
argument_list|,
name|mountTable
operator|.
name|getDestinationForPath
argument_list|(
literal|"/share/file5.txt"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2->/bin/file7.txt"
argument_list|,
name|mountTable
operator|.
name|getDestinationForPath
argument_list|(
literal|"/usr/bin/file7.txt"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1->/usr/file8.txt"
argument_list|,
name|mountTable
operator|.
name|getDestinationForPath
argument_list|(
literal|"/usr/file8.txt"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2->/user/test/demo/file9.txt"
argument_list|,
name|mountTable
operator|.
name|getDestinationForPath
argument_list|(
literal|"/user/a/demo/file9.txt"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check folders
name|assertEquals
argument_list|(
literal|"3->/user/testfolder"
argument_list|,
name|mountTable
operator|.
name|getDestinationForPath
argument_list|(
literal|"/user/testfolder"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2->/user/test/b"
argument_list|,
name|mountTable
operator|.
name|getDestinationForPath
argument_list|(
literal|"/user/a/b"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3->/user/test/a"
argument_list|,
name|mountTable
operator|.
name|getDestinationForPath
argument_list|(
literal|"/user/test/a"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2->/tmp/tesfile1.txt"
argument_list|,
name|mountTable
operator|.
name|getDestinationForPath
argument_list|(
literal|"/readonly/tesfile1.txt"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefaultNameServiceEnable ()
specifier|public
name|void
name|testDefaultNameServiceEnable
parameter_list|()
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
name|mountTable
operator|.
name|isDefaultNSEnable
argument_list|()
argument_list|)
expr_stmt|;
name|mountTable
operator|.
name|setDefaultNameService
argument_list|(
literal|"3"
argument_list|)
expr_stmt|;
name|mountTable
operator|.
name|removeEntry
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3->/unknown"
argument_list|,
name|mountTable
operator|.
name|getDestinationForPath
argument_list|(
literal|"/unknown"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|getMountTableEntry
argument_list|(
literal|"4"
argument_list|,
literal|"/unknown"
argument_list|)
decl_stmt|;
name|mountTable
operator|.
name|addEntry
argument_list|(
name|MountTable
operator|.
name|newInstance
argument_list|(
literal|"/unknown"
argument_list|,
name|map
argument_list|)
argument_list|)
expr_stmt|;
name|mountTable
operator|.
name|setDefaultNSEnable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|mountTable
operator|.
name|isDefaultNSEnable
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"4->/unknown"
argument_list|,
name|mountTable
operator|.
name|getDestinationForPath
argument_list|(
literal|"/unknown"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|mountTable
operator|.
name|getDestinationForPath
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"The getDestinationForPath call should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"the default nameservice is disabled to read or write"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMuiltipleDestinations ()
specifier|public
name|void
name|testMuiltipleDestinations
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|mountTable
operator|.
name|getDestinationForPath
argument_list|(
literal|"/multi"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"The getDestinationForPath call should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"MountTableResolver should not resolve multiple destinations"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|compareLists (List<String> list1, String[] list2)
specifier|private
name|void
name|compareLists
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|list1
parameter_list|,
name|String
index|[]
name|list2
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|list1
operator|.
name|size
argument_list|()
argument_list|,
name|list2
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|item
range|:
name|list2
control|)
block|{
name|assertTrue
argument_list|(
name|list1
operator|.
name|contains
argument_list|(
name|item
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGetMountPoint ()
specifier|public
name|void
name|testGetMountPoint
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Check get the mount table entry for a path
name|MountTable
name|mtEntry
decl_stmt|;
name|mtEntry
operator|=
name|mountTable
operator|.
name|getMountPoint
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mtEntry
operator|.
name|getSourcePath
argument_list|()
operator|.
name|equals
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|mtEntry
operator|=
name|mountTable
operator|.
name|getMountPoint
argument_list|(
literal|"/user"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mtEntry
operator|.
name|getSourcePath
argument_list|()
operator|.
name|equals
argument_list|(
literal|"/user"
argument_list|)
argument_list|)
expr_stmt|;
name|mtEntry
operator|=
name|mountTable
operator|.
name|getMountPoint
argument_list|(
literal|"/user/a"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mtEntry
operator|.
name|getSourcePath
argument_list|()
operator|.
name|equals
argument_list|(
literal|"/user/a"
argument_list|)
argument_list|)
expr_stmt|;
name|mtEntry
operator|=
name|mountTable
operator|.
name|getMountPoint
argument_list|(
literal|"/user/a/"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mtEntry
operator|.
name|getSourcePath
argument_list|()
operator|.
name|equals
argument_list|(
literal|"/user/a"
argument_list|)
argument_list|)
expr_stmt|;
name|mtEntry
operator|=
name|mountTable
operator|.
name|getMountPoint
argument_list|(
literal|"/user/a/11"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mtEntry
operator|.
name|getSourcePath
argument_list|()
operator|.
name|equals
argument_list|(
literal|"/user/a"
argument_list|)
argument_list|)
expr_stmt|;
name|mtEntry
operator|=
name|mountTable
operator|.
name|getMountPoint
argument_list|(
literal|"/user/a1"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mtEntry
operator|.
name|getSourcePath
argument_list|()
operator|.
name|equals
argument_list|(
literal|"/user"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetMountPoints ()
specifier|public
name|void
name|testGetMountPoints
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Check getting all mount points (virtual and real) beneath a path
name|List
argument_list|<
name|String
argument_list|>
name|mounts
init|=
name|mountTable
operator|.
name|getMountPoints
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|mounts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|compareLists
argument_list|(
name|mounts
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"tmp"
block|,
literal|"user"
block|,
literal|"usr"
block|,
literal|"readonly"
block|,
literal|"multi"
block|}
argument_list|)
expr_stmt|;
name|mounts
operator|=
name|mountTable
operator|.
name|getMountPoints
argument_list|(
literal|"/user"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|mounts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|compareLists
argument_list|(
name|mounts
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|)
expr_stmt|;
name|mounts
operator|=
name|mountTable
operator|.
name|getMountPoints
argument_list|(
literal|"/user/a"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|mounts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|compareLists
argument_list|(
name|mounts
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"demo"
block|}
argument_list|)
expr_stmt|;
name|mounts
operator|=
name|mountTable
operator|.
name|getMountPoints
argument_list|(
literal|"/user/a/demo"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|mounts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|compareLists
argument_list|(
name|mounts
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"test"
block|}
argument_list|)
expr_stmt|;
name|mounts
operator|=
name|mountTable
operator|.
name|getMountPoints
argument_list|(
literal|"/user/a/demo/test"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|mounts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|compareLists
argument_list|(
name|mounts
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|)
expr_stmt|;
name|mounts
operator|=
name|mountTable
operator|.
name|getMountPoints
argument_list|(
literal|"/tmp"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|mounts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|mounts
operator|=
name|mountTable
operator|.
name|getMountPoints
argument_list|(
literal|"/t"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|mounts
argument_list|)
expr_stmt|;
name|mounts
operator|=
name|mountTable
operator|.
name|getMountPoints
argument_list|(
literal|"/unknownpath"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|mounts
argument_list|)
expr_stmt|;
name|mounts
operator|=
name|mountTable
operator|.
name|getMountPoints
argument_list|(
literal|"/multi"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|mounts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|compareRecords (List<MountTable> list1, String[] list2)
specifier|private
name|void
name|compareRecords
parameter_list|(
name|List
argument_list|<
name|MountTable
argument_list|>
name|list1
parameter_list|,
name|String
index|[]
name|list2
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|list1
operator|.
name|size
argument_list|()
argument_list|,
name|list2
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|item
range|:
name|list2
control|)
block|{
for|for
control|(
name|MountTable
name|record
range|:
name|list1
control|)
block|{
if|if
condition|(
name|record
operator|.
name|getSourcePath
argument_list|()
operator|.
name|equals
argument_list|(
name|item
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
block|}
name|fail
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetMounts ()
specifier|public
name|void
name|testGetMounts
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Check listing the mount table records at or beneath a path
name|List
argument_list|<
name|MountTable
argument_list|>
name|records
init|=
name|mountTable
operator|.
name|getMounts
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|records
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|compareRecords
argument_list|(
name|records
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"/"
block|,
literal|"/tmp"
block|,
literal|"/user"
block|,
literal|"/usr/bin"
block|,
literal|"user/a"
block|,
literal|"/user/a/demo/a"
block|,
literal|"/user/a/demo/b"
block|,
literal|"/user/b/file1.txt"
block|,
literal|"readonly"
block|,
literal|"multi"
block|}
argument_list|)
expr_stmt|;
name|records
operator|=
name|mountTable
operator|.
name|getMounts
argument_list|(
literal|"/user"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|records
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|compareRecords
argument_list|(
name|records
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"/user"
block|,
literal|"/user/a/demo/a"
block|,
literal|"/user/a/demo/b"
block|,
literal|"user/a"
block|,
literal|"/user/b/file1.txt"
block|}
argument_list|)
expr_stmt|;
name|records
operator|=
name|mountTable
operator|.
name|getMounts
argument_list|(
literal|"/user/a"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|records
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|compareRecords
argument_list|(
name|records
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"/user/a/demo/a"
block|,
literal|"/user/a/demo/b"
block|,
literal|"/user/a"
block|}
argument_list|)
expr_stmt|;
name|records
operator|=
name|mountTable
operator|.
name|getMounts
argument_list|(
literal|"/tmp"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|records
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|compareRecords
argument_list|(
name|records
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"/tmp"
block|}
argument_list|)
expr_stmt|;
name|records
operator|=
name|mountTable
operator|.
name|getMounts
argument_list|(
literal|"/readonly"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|records
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|compareRecords
argument_list|(
name|records
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"/readonly"
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|records
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isReadOnly
argument_list|()
argument_list|)
expr_stmt|;
name|records
operator|=
name|mountTable
operator|.
name|getMounts
argument_list|(
literal|"/multi"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|records
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|compareRecords
argument_list|(
name|records
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"/multi"
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemoveSubTree ()
specifier|public
name|void
name|testRemoveSubTree
parameter_list|()
throws|throws
name|UnsupportedOperationException
throws|,
name|IOException
block|{
comment|// 3 mount points are present /tmp, /user, /usr
name|compareLists
argument_list|(
name|mountTable
operator|.
name|getMountPoints
argument_list|(
literal|"/"
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"user"
block|,
literal|"usr"
block|,
literal|"tmp"
block|,
literal|"readonly"
block|,
literal|"multi"
block|}
argument_list|)
expr_stmt|;
comment|// /tmp currently points to namespace 2
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|mountTable
operator|.
name|getDestinationForPath
argument_list|(
literal|"/tmp/testfile.txt"
argument_list|)
operator|.
name|getDefaultLocation
argument_list|()
operator|.
name|getNameserviceId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Remove tmp
name|mountTable
operator|.
name|removeEntry
argument_list|(
literal|"/tmp"
argument_list|)
expr_stmt|;
comment|// Now 2 mount points are present /user, /usr
name|compareLists
argument_list|(
name|mountTable
operator|.
name|getMountPoints
argument_list|(
literal|"/"
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"user"
block|,
literal|"usr"
block|,
literal|"readonly"
block|,
literal|"multi"
block|}
argument_list|)
expr_stmt|;
comment|// /tmp no longer exists, uses default namespace for mapping /
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|mountTable
operator|.
name|getDestinationForPath
argument_list|(
literal|"/tmp/testfile.txt"
argument_list|)
operator|.
name|getDefaultLocation
argument_list|()
operator|.
name|getNameserviceId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemoveVirtualNode ()
specifier|public
name|void
name|testRemoveVirtualNode
parameter_list|()
throws|throws
name|UnsupportedOperationException
throws|,
name|IOException
block|{
comment|// 3 mount points are present /tmp, /user, /usr
name|compareLists
argument_list|(
name|mountTable
operator|.
name|getMountPoints
argument_list|(
literal|"/"
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"user"
block|,
literal|"usr"
block|,
literal|"tmp"
block|,
literal|"readonly"
block|,
literal|"multi"
block|}
argument_list|)
expr_stmt|;
comment|// /usr is virtual, uses namespace 1->/
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|mountTable
operator|.
name|getDestinationForPath
argument_list|(
literal|"/usr/testfile.txt"
argument_list|)
operator|.
name|getDefaultLocation
argument_list|()
operator|.
name|getNameserviceId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Attempt to remove /usr
name|mountTable
operator|.
name|removeEntry
argument_list|(
literal|"/usr"
argument_list|)
expr_stmt|;
comment|// Verify the remove failed
name|compareLists
argument_list|(
name|mountTable
operator|.
name|getMountPoints
argument_list|(
literal|"/"
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"user"
block|,
literal|"usr"
block|,
literal|"tmp"
block|,
literal|"readonly"
block|,
literal|"multi"
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemoveLeafNode ()
specifier|public
name|void
name|testRemoveLeafNode
parameter_list|()
throws|throws
name|UnsupportedOperationException
throws|,
name|IOException
block|{
comment|// /user/a/demo/test/a currently points to namespace 1
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|mountTable
operator|.
name|getDestinationForPath
argument_list|(
literal|"/user/a/demo/test/a"
argument_list|)
operator|.
name|getDefaultLocation
argument_list|()
operator|.
name|getNameserviceId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Remove /user/a/demo/test/a
name|mountTable
operator|.
name|removeEntry
argument_list|(
literal|"/user/a/demo/test/a"
argument_list|)
expr_stmt|;
comment|// Now /user/a/demo/test/a points to namespace 2 using the entry for /user/a
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|mountTable
operator|.
name|getDestinationForPath
argument_list|(
literal|"/user/a/demo/test/a"
argument_list|)
operator|.
name|getDefaultLocation
argument_list|()
operator|.
name|getNameserviceId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify the virtual node at /user/a/demo still exists and was not deleted
name|compareLists
argument_list|(
name|mountTable
operator|.
name|getMountPoints
argument_list|(
literal|"/user/a"
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"demo"
block|}
argument_list|)
expr_stmt|;
comment|// Verify the sibling node was unaffected and still points to ns 3
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|mountTable
operator|.
name|getDestinationForPath
argument_list|(
literal|"/user/a/demo/test/b"
argument_list|)
operator|.
name|getDefaultLocation
argument_list|()
operator|.
name|getNameserviceId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRefreshEntries ()
specifier|public
name|void
name|testRefreshEntries
parameter_list|()
throws|throws
name|UnsupportedOperationException
throws|,
name|IOException
block|{
comment|// Initial table loaded
name|testDestination
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|mountTable
operator|.
name|getMounts
argument_list|(
literal|"/"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Replace table with /1 and /2
name|List
argument_list|<
name|MountTable
argument_list|>
name|records
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map1
init|=
name|getMountTableEntry
argument_list|(
literal|"1"
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
name|records
operator|.
name|add
argument_list|(
name|MountTable
operator|.
name|newInstance
argument_list|(
literal|"/1"
argument_list|,
name|map1
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map2
init|=
name|getMountTableEntry
argument_list|(
literal|"2"
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
name|records
operator|.
name|add
argument_list|(
name|MountTable
operator|.
name|newInstance
argument_list|(
literal|"/2"
argument_list|,
name|map2
argument_list|)
argument_list|)
expr_stmt|;
name|mountTable
operator|.
name|refreshEntries
argument_list|(
name|records
argument_list|)
expr_stmt|;
comment|// Verify addition
name|PathLocation
name|destination1
init|=
name|mountTable
operator|.
name|getDestinationForPath
argument_list|(
literal|"/1"
argument_list|)
decl_stmt|;
name|RemoteLocation
name|defaultLoc1
init|=
name|destination1
operator|.
name|getDefaultLocation
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|defaultLoc1
operator|.
name|getNameserviceId
argument_list|()
argument_list|)
expr_stmt|;
name|PathLocation
name|destination2
init|=
name|mountTable
operator|.
name|getDestinationForPath
argument_list|(
literal|"/2"
argument_list|)
decl_stmt|;
name|RemoteLocation
name|defaultLoc2
init|=
name|destination2
operator|.
name|getDefaultLocation
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|defaultLoc2
operator|.
name|getNameserviceId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify existing entries were removed
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|mountTable
operator|.
name|getMounts
argument_list|(
literal|"/"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|assertionThrown
init|=
literal|false
decl_stmt|;
try|try
block|{
name|testDestination
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
comment|// The / entry was removed, so it triggers an exception
name|assertionThrown
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|assertionThrown
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMountTableScalability ()
specifier|public
name|void
name|testMountTableScalability
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|MountTable
argument_list|>
name|emptyList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|mountTable
operator|.
name|refreshEntries
argument_list|(
name|emptyList
argument_list|)
expr_stmt|;
comment|// Add 100,000 entries in flat list
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100000
condition|;
name|i
operator|++
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|getMountTableEntry
argument_list|(
literal|"1"
argument_list|,
literal|"/"
operator|+
name|i
argument_list|)
decl_stmt|;
name|MountTable
name|record
init|=
name|MountTable
operator|.
name|newInstance
argument_list|(
literal|"/"
operator|+
name|i
argument_list|,
name|map
argument_list|)
decl_stmt|;
name|mountTable
operator|.
name|addEntry
argument_list|(
name|record
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|%
literal|10000
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Adding flat mount record {}: {}"
argument_list|,
name|i
argument_list|,
name|record
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|100000
argument_list|,
name|mountTable
operator|.
name|getMountPoints
argument_list|(
literal|"/"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100000
argument_list|,
name|mountTable
operator|.
name|getMounts
argument_list|(
literal|"/"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add 1000 entries in deep list
name|mountTable
operator|.
name|refreshEntries
argument_list|(
name|emptyList
argument_list|)
expr_stmt|;
name|String
name|parent
init|=
literal|"/"
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|index
init|=
name|i
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|getMountTableEntry
argument_list|(
literal|"1"
argument_list|,
literal|"/"
operator|+
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|parent
operator|=
name|parent
operator|+
literal|"/"
expr_stmt|;
block|}
name|parent
operator|=
name|parent
operator|+
name|i
expr_stmt|;
name|MountTable
name|record
init|=
name|MountTable
operator|.
name|newInstance
argument_list|(
name|parent
argument_list|,
name|map
argument_list|)
decl_stmt|;
name|mountTable
operator|.
name|addEntry
argument_list|(
name|record
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|mountTable
operator|.
name|getMountPoints
argument_list|(
literal|"/"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000
argument_list|,
name|mountTable
operator|.
name|getMounts
argument_list|(
literal|"/"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add 100,000 entries in deep and wide tree
name|mountTable
operator|.
name|refreshEntries
argument_list|(
name|emptyList
argument_list|)
expr_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|parent
operator|=
literal|"/"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|numRootTrees
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100000
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|index
init|=
name|i
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|getMountTableEntry
argument_list|(
literal|"1"
argument_list|,
literal|"/"
operator|+
name|index
argument_list|)
decl_stmt|;
name|parent
operator|=
name|parent
operator|+
literal|"/"
operator|+
name|i
expr_stmt|;
if|if
condition|(
name|parent
operator|.
name|length
argument_list|()
operator|>
literal|2000
condition|)
block|{
comment|// Start new tree
name|parent
operator|=
literal|"/"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|()
argument_list|)
expr_stmt|;
name|numRootTrees
operator|++
expr_stmt|;
block|}
name|MountTable
name|record
init|=
name|MountTable
operator|.
name|newInstance
argument_list|(
name|parent
argument_list|,
name|map
argument_list|)
decl_stmt|;
name|mountTable
operator|.
name|addEntry
argument_list|(
name|record
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|numRootTrees
argument_list|,
name|mountTable
operator|.
name|getMountPoints
argument_list|(
literal|"/"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100000
argument_list|,
name|mountTable
operator|.
name|getMounts
argument_list|(
literal|"/"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUpdate ()
specifier|public
name|void
name|testUpdate
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Add entry to update later
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|getMountTableEntry
argument_list|(
literal|"1"
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
name|mountTable
operator|.
name|addEntry
argument_list|(
name|MountTable
operator|.
name|newInstance
argument_list|(
literal|"/testupdate"
argument_list|,
name|map
argument_list|)
argument_list|)
expr_stmt|;
name|MountTable
name|entry
init|=
name|mountTable
operator|.
name|getMountPoint
argument_list|(
literal|"/testupdate"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|dests
init|=
name|entry
operator|.
name|getDestinations
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|dests
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|RemoteLocation
name|dest
init|=
name|dests
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|dest
operator|.
name|getNameserviceId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Update entry
name|Collection
argument_list|<
name|MountTable
argument_list|>
name|entries
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|MountTable
operator|.
name|newInstance
argument_list|(
literal|"/testupdate"
argument_list|,
name|getMountTableEntry
argument_list|(
literal|"2"
argument_list|,
literal|"/"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|mountTable
operator|.
name|refreshEntries
argument_list|(
name|entries
argument_list|)
expr_stmt|;
name|MountTable
name|entry1
init|=
name|mountTable
operator|.
name|getMountPoint
argument_list|(
literal|"/testupdate"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|dests1
init|=
name|entry1
operator|.
name|getDestinations
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|dests1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|RemoteLocation
name|dest1
init|=
name|dests1
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|dest1
operator|.
name|getNameserviceId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Remove the entry to test updates and check
name|mountTable
operator|.
name|removeEntry
argument_list|(
literal|"/testupdate"
argument_list|)
expr_stmt|;
name|MountTable
name|entry2
init|=
name|mountTable
operator|.
name|getMountPoint
argument_list|(
literal|"/testupdate"
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|entry2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDisableLocalCache ()
specifier|public
name|void
name|testDisableLocalCache
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// Disable mount table cache
name|conf
operator|.
name|setBoolean
argument_list|(
name|FEDERATION_MOUNT_TABLE_CACHE_ENABLE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
name|DFS_ROUTER_DEFAULT_NAMESERVICE
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|MountTableResolver
name|tmpMountTable
init|=
operator|new
name|MountTableResolver
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Root mount point
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|getMountTableEntry
argument_list|(
literal|"1"
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
name|tmpMountTable
operator|.
name|addEntry
argument_list|(
name|MountTable
operator|.
name|newInstance
argument_list|(
literal|"/"
argument_list|,
name|map
argument_list|)
argument_list|)
expr_stmt|;
comment|// /tmp
name|map
operator|=
name|getMountTableEntry
argument_list|(
literal|"2"
argument_list|,
literal|"/tmp"
argument_list|)
expr_stmt|;
name|tmpMountTable
operator|.
name|addEntry
argument_list|(
name|MountTable
operator|.
name|newInstance
argument_list|(
literal|"/tmp"
argument_list|,
name|map
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check localCache is null
try|try
block|{
name|tmpMountTable
operator|.
name|getCacheSize
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"getCacheSize call should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"localCache is null"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Check resolve path without cache
name|assertEquals
argument_list|(
literal|"2->/tmp/tesfile1.txt"
argument_list|,
name|tmpMountTable
operator|.
name|getDestinationForPath
argument_list|(
literal|"/tmp/tesfile1.txt"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCacheCleaning ()
specifier|public
name|void
name|testCacheCleaning
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|String
name|filename
init|=
name|String
operator|.
name|format
argument_list|(
literal|"/user/a/file-%04d.txt"
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|mountTable
operator|.
name|getDestinationForPath
argument_list|(
name|filename
argument_list|)
expr_stmt|;
block|}
name|long
name|cacheSize
init|=
name|mountTable
operator|.
name|getCacheSize
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|cacheSize
operator|<=
name|TEST_MAX_CACHE_SIZE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLocationCache ()
specifier|public
name|void
name|testLocationCache
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|MountTable
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Add entry and test location cache
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map1
init|=
name|getMountTableEntry
argument_list|(
literal|"1"
argument_list|,
literal|"/testlocationcache"
argument_list|)
decl_stmt|;
name|MountTable
name|entry1
init|=
name|MountTable
operator|.
name|newInstance
argument_list|(
literal|"/testlocationcache"
argument_list|,
name|map1
argument_list|)
decl_stmt|;
name|entries
operator|.
name|add
argument_list|(
name|entry1
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map2
init|=
name|getMountTableEntry
argument_list|(
literal|"2"
argument_list|,
literal|"/anothertestlocationcache"
argument_list|)
decl_stmt|;
name|MountTable
name|entry2
init|=
name|MountTable
operator|.
name|newInstance
argument_list|(
literal|"/anothertestlocationcache"
argument_list|,
name|map2
argument_list|)
decl_stmt|;
name|entries
operator|.
name|add
argument_list|(
name|entry2
argument_list|)
expr_stmt|;
name|mountTable
operator|.
name|refreshEntries
argument_list|(
name|entries
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1->/testlocationcache"
argument_list|,
name|mountTable
operator|.
name|getDestinationForPath
argument_list|(
literal|"/testlocationcache"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2->/anothertestlocationcache"
argument_list|,
name|mountTable
operator|.
name|getDestinationForPath
argument_list|(
literal|"/anothertestlocationcache"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Remove the entry1
name|entries
operator|.
name|remove
argument_list|(
name|entry1
argument_list|)
expr_stmt|;
name|mountTable
operator|.
name|refreshEntries
argument_list|(
name|entries
argument_list|)
expr_stmt|;
comment|// Add the default location and test location cache
name|assertEquals
argument_list|(
literal|"0->/testlocationcache"
argument_list|,
name|mountTable
operator|.
name|getDestinationForPath
argument_list|(
literal|"/testlocationcache"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add the entry again but mount to another ns
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map3
init|=
name|getMountTableEntry
argument_list|(
literal|"3"
argument_list|,
literal|"/testlocationcache"
argument_list|)
decl_stmt|;
name|MountTable
name|entry3
init|=
name|MountTable
operator|.
name|newInstance
argument_list|(
literal|"/testlocationcache"
argument_list|,
name|map3
argument_list|)
decl_stmt|;
name|entries
operator|.
name|add
argument_list|(
name|entry3
argument_list|)
expr_stmt|;
name|mountTable
operator|.
name|refreshEntries
argument_list|(
name|entries
argument_list|)
expr_stmt|;
comment|// Ensure location cache update correctly
name|assertEquals
argument_list|(
literal|"3->/testlocationcache"
argument_list|,
name|mountTable
operator|.
name|getDestinationForPath
argument_list|(
literal|"/testlocationcache"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Cleanup before exit
name|mountTable
operator|.
name|removeEntry
argument_list|(
literal|"/testlocationcache"
argument_list|)
expr_stmt|;
name|mountTable
operator|.
name|removeEntry
argument_list|(
literal|"/anothertestlocationcache"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

