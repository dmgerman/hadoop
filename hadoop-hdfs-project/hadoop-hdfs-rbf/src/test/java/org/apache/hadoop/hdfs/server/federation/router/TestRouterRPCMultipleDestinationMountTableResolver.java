begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.router
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|MiniRouterDFSCluster
operator|.
name|RouterContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|RouterConfigBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|StateStoreDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|MountTableManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|MountTableResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|MultipleDestinationMountTableResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|order
operator|.
name|DestinationOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|AddMountTableEntryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|AddMountTableEntryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|RemoveMountTableEntryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|MountTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests router rpc with multiple destination mount table resolver.  */
end_comment

begin_class
DECL|class|TestRouterRPCMultipleDestinationMountTableResolver
specifier|public
class|class
name|TestRouterRPCMultipleDestinationMountTableResolver
block|{
DECL|field|cluster
specifier|private
specifier|static
name|StateStoreDFSCluster
name|cluster
decl_stmt|;
DECL|field|routerContext
specifier|private
specifier|static
name|RouterContext
name|routerContext
decl_stmt|;
DECL|field|resolver
specifier|private
specifier|static
name|MountTableResolver
name|resolver
decl_stmt|;
DECL|field|nnFs0
specifier|private
specifier|static
name|DistributedFileSystem
name|nnFs0
decl_stmt|;
DECL|field|nnFs1
specifier|private
specifier|static
name|DistributedFileSystem
name|nnFs1
decl_stmt|;
DECL|field|routerFs
specifier|private
specifier|static
name|DistributedFileSystem
name|routerFs
decl_stmt|;
DECL|field|rpcServer
specifier|private
specifier|static
name|RouterRpcServer
name|rpcServer
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setUp ()
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Build and start a federated cluster
name|cluster
operator|=
operator|new
name|StateStoreDFSCluster
argument_list|(
literal|false
argument_list|,
literal|2
argument_list|,
name|MultipleDestinationMountTableResolver
operator|.
name|class
argument_list|)
expr_stmt|;
name|Configuration
name|routerConf
init|=
operator|new
name|RouterConfigBuilder
argument_list|()
operator|.
name|stateStore
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|quota
argument_list|()
operator|.
name|rpc
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|Configuration
name|hdfsConf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|cluster
operator|.
name|addRouterOverrides
argument_list|(
name|routerConf
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|addNamenodeOverrides
argument_list|(
name|hdfsConf
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|startCluster
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|startRouters
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitClusterUp
argument_list|()
expr_stmt|;
name|routerContext
operator|=
name|cluster
operator|.
name|getRandomRouter
argument_list|()
expr_stmt|;
name|resolver
operator|=
operator|(
name|MountTableResolver
operator|)
name|routerContext
operator|.
name|getRouter
argument_list|()
operator|.
name|getSubclusterResolver
argument_list|()
expr_stmt|;
name|nnFs0
operator|=
operator|(
name|DistributedFileSystem
operator|)
name|cluster
operator|.
name|getNamenode
argument_list|(
name|cluster
operator|.
name|getNameservices
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|null
argument_list|)
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|nnFs1
operator|=
operator|(
name|DistributedFileSystem
operator|)
name|cluster
operator|.
name|getNamenode
argument_list|(
name|cluster
operator|.
name|getNameservices
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|null
argument_list|)
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|routerFs
operator|=
operator|(
name|DistributedFileSystem
operator|)
name|routerContext
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|rpcServer
operator|=
name|routerContext
operator|.
name|getRouter
argument_list|()
operator|.
name|getRpcServer
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|tearDown ()
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|stopRouter
argument_list|(
name|routerContext
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * SetUp the mount entry , directories and file to verify invocation.    * @param order The order that the mount entry needs to follow.    * @throws Exception On account of any exception encountered during setting up    *           the environment.    */
DECL|method|setupOrderMountPath (DestinationOrder order)
specifier|public
name|void
name|setupOrderMountPath
parameter_list|(
name|DestinationOrder
name|order
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|destMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|destMap
operator|.
name|put
argument_list|(
literal|"ns0"
argument_list|,
literal|"/tmp"
argument_list|)
expr_stmt|;
name|destMap
operator|.
name|put
argument_list|(
literal|"ns1"
argument_list|,
literal|"/tmp"
argument_list|)
expr_stmt|;
name|nnFs0
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/tmp"
argument_list|)
argument_list|)
expr_stmt|;
name|nnFs1
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/tmp"
argument_list|)
argument_list|)
expr_stmt|;
name|MountTable
name|addEntry
init|=
name|MountTable
operator|.
name|newInstance
argument_list|(
literal|"/mount"
argument_list|,
name|destMap
argument_list|)
decl_stmt|;
name|addEntry
operator|.
name|setDestOrder
argument_list|(
name|order
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|addMountTable
argument_list|(
name|addEntry
argument_list|)
argument_list|)
expr_stmt|;
name|routerFs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/mount/dir/dir"
argument_list|)
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|routerFs
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/mount/dir/file"
argument_list|)
argument_list|,
literal|100L
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|1024L
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|routerFs
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/mount/file"
argument_list|)
argument_list|,
literal|100L
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|1024L
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|resetTestEnvironment ()
specifier|public
name|void
name|resetTestEnvironment
parameter_list|()
throws|throws
name|IOException
block|{
name|RouterClient
name|client
init|=
name|routerContext
operator|.
name|getAdminClient
argument_list|()
decl_stmt|;
name|MountTableManager
name|mountTableManager
init|=
name|client
operator|.
name|getMountTableManager
argument_list|()
decl_stmt|;
name|RemoveMountTableEntryRequest
name|req2
init|=
name|RemoveMountTableEntryRequest
operator|.
name|newInstance
argument_list|(
literal|"/mount"
argument_list|)
decl_stmt|;
name|mountTableManager
operator|.
name|removeMountTableEntry
argument_list|(
name|req2
argument_list|)
expr_stmt|;
name|nnFs0
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/tmp"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|nnFs1
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/tmp"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInvocationSpaceOrder ()
specifier|public
name|void
name|testInvocationSpaceOrder
parameter_list|()
throws|throws
name|Exception
block|{
name|setupOrderMountPath
argument_list|(
name|DestinationOrder
operator|.
name|SPACE
argument_list|)
expr_stmt|;
name|boolean
name|isDirAll
init|=
name|rpcServer
operator|.
name|isPathAll
argument_list|(
literal|"/mount/dir"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|isDirAll
argument_list|)
expr_stmt|;
name|testInvocation
argument_list|(
name|isDirAll
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInvocationHashAllOrder ()
specifier|public
name|void
name|testInvocationHashAllOrder
parameter_list|()
throws|throws
name|Exception
block|{
name|setupOrderMountPath
argument_list|(
name|DestinationOrder
operator|.
name|HASH_ALL
argument_list|)
expr_stmt|;
name|boolean
name|isDirAll
init|=
name|rpcServer
operator|.
name|isPathAll
argument_list|(
literal|"/mount/dir"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|isDirAll
argument_list|)
expr_stmt|;
name|testInvocation
argument_list|(
name|isDirAll
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInvocationRandomOrder ()
specifier|public
name|void
name|testInvocationRandomOrder
parameter_list|()
throws|throws
name|Exception
block|{
name|setupOrderMountPath
argument_list|(
name|DestinationOrder
operator|.
name|RANDOM
argument_list|)
expr_stmt|;
name|boolean
name|isDirAll
init|=
name|rpcServer
operator|.
name|isPathAll
argument_list|(
literal|"/mount/dir"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|isDirAll
argument_list|)
expr_stmt|;
name|testInvocation
argument_list|(
name|isDirAll
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInvocationHashOrder ()
specifier|public
name|void
name|testInvocationHashOrder
parameter_list|()
throws|throws
name|Exception
block|{
name|setupOrderMountPath
argument_list|(
name|DestinationOrder
operator|.
name|HASH
argument_list|)
expr_stmt|;
name|boolean
name|isDirAll
init|=
name|rpcServer
operator|.
name|isPathAll
argument_list|(
literal|"/mount/dir"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|isDirAll
argument_list|)
expr_stmt|;
name|testInvocation
argument_list|(
name|isDirAll
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInvocationLocalOrder ()
specifier|public
name|void
name|testInvocationLocalOrder
parameter_list|()
throws|throws
name|Exception
block|{
name|setupOrderMountPath
argument_list|(
name|DestinationOrder
operator|.
name|LOCAL
argument_list|)
expr_stmt|;
name|boolean
name|isDirAll
init|=
name|rpcServer
operator|.
name|isPathAll
argument_list|(
literal|"/mount/dir"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|isDirAll
argument_list|)
expr_stmt|;
name|testInvocation
argument_list|(
name|isDirAll
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verifies the invocation of API's at directory level , file level and at    * mount level.    * @param dirAll if true assumes that the mount entry creates directory on all    *          locations.    * @throws IOException    */
DECL|method|testInvocation (boolean dirAll)
specifier|private
name|void
name|testInvocation
parameter_list|(
name|boolean
name|dirAll
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Verify invocation on nested directory and file.
name|Path
name|mountDir
init|=
operator|new
name|Path
argument_list|(
literal|"/mount/dir/dir"
argument_list|)
decl_stmt|;
name|Path
name|nameSpaceFile
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp/dir/file"
argument_list|)
decl_stmt|;
name|Path
name|mountFile
init|=
operator|new
name|Path
argument_list|(
literal|"/mount/dir/file"
argument_list|)
decl_stmt|;
name|Path
name|mountEntry
init|=
operator|new
name|Path
argument_list|(
literal|"/mount"
argument_list|)
decl_stmt|;
name|Path
name|mountDest
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp"
argument_list|)
decl_stmt|;
name|Path
name|nameSpaceDir
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp/dir/dir"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|name
init|=
literal|"user.a1"
decl_stmt|;
specifier|final
name|byte
index|[]
name|value
init|=
block|{
literal|0x31
block|,
literal|0x32
block|,
literal|0x33
block|}
decl_stmt|;
name|testDirectoryAndFileLevelInvocation
argument_list|(
name|dirAll
argument_list|,
name|mountDir
argument_list|,
name|nameSpaceFile
argument_list|,
name|mountFile
argument_list|,
name|nameSpaceDir
argument_list|,
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
comment|// Verify invocation on non nested directory and file.
name|mountDir
operator|=
operator|new
name|Path
argument_list|(
literal|"/mount/dir"
argument_list|)
expr_stmt|;
name|nameSpaceFile
operator|=
operator|new
name|Path
argument_list|(
literal|"/tmp/file"
argument_list|)
expr_stmt|;
name|mountFile
operator|=
operator|new
name|Path
argument_list|(
literal|"/mount/file"
argument_list|)
expr_stmt|;
name|nameSpaceDir
operator|=
operator|new
name|Path
argument_list|(
literal|"/tmp/dir"
argument_list|)
expr_stmt|;
name|testDirectoryAndFileLevelInvocation
argument_list|(
name|dirAll
argument_list|,
name|mountDir
argument_list|,
name|nameSpaceFile
argument_list|,
name|mountFile
argument_list|,
name|nameSpaceDir
argument_list|,
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
comment|// Check invocation directly for a mount point.
comment|// Verify owner and permissions.
name|routerFs
operator|.
name|setOwner
argument_list|(
name|mountEntry
argument_list|,
literal|"testuser"
argument_list|,
literal|"testgroup"
argument_list|)
expr_stmt|;
name|routerFs
operator|.
name|setPermission
argument_list|(
name|mountEntry
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|777
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testuser"
argument_list|,
name|routerFs
operator|.
name|getFileStatus
argument_list|(
name|mountEntry
argument_list|)
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testuser"
argument_list|,
name|nnFs0
operator|.
name|getFileStatus
argument_list|(
name|mountDest
argument_list|)
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testuser"
argument_list|,
name|nnFs1
operator|.
name|getFileStatus
argument_list|(
name|mountDest
argument_list|)
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|short
operator|)
literal|777
argument_list|,
name|routerFs
operator|.
name|getFileStatus
argument_list|(
name|mountEntry
argument_list|)
operator|.
name|getPermission
argument_list|()
operator|.
name|toShort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|short
operator|)
literal|777
argument_list|,
name|nnFs0
operator|.
name|getFileStatus
argument_list|(
name|mountDest
argument_list|)
operator|.
name|getPermission
argument_list|()
operator|.
name|toShort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|short
operator|)
literal|777
argument_list|,
name|nnFs1
operator|.
name|getFileStatus
argument_list|(
name|mountDest
argument_list|)
operator|.
name|getPermission
argument_list|()
operator|.
name|toShort
argument_list|()
argument_list|)
expr_stmt|;
comment|//Verify storage policy.
name|routerFs
operator|.
name|setStoragePolicy
argument_list|(
name|mountEntry
argument_list|,
literal|"COLD"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"COLD"
argument_list|,
name|routerFs
operator|.
name|getStoragePolicy
argument_list|(
name|mountEntry
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"COLD"
argument_list|,
name|nnFs0
operator|.
name|getStoragePolicy
argument_list|(
name|mountDest
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"COLD"
argument_list|,
name|nnFs1
operator|.
name|getStoragePolicy
argument_list|(
name|mountDest
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|routerFs
operator|.
name|unsetStoragePolicy
argument_list|(
name|mountEntry
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"HOT"
argument_list|,
name|routerFs
operator|.
name|getStoragePolicy
argument_list|(
name|mountDest
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"HOT"
argument_list|,
name|nnFs0
operator|.
name|getStoragePolicy
argument_list|(
name|mountDest
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"HOT"
argument_list|,
name|nnFs1
operator|.
name|getStoragePolicy
argument_list|(
name|mountDest
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|//Verify erasure coding policy.
name|routerFs
operator|.
name|setErasureCodingPolicy
argument_list|(
name|mountEntry
argument_list|,
literal|"RS-6-3-1024k"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"RS-6-3-1024k"
argument_list|,
name|routerFs
operator|.
name|getErasureCodingPolicy
argument_list|(
name|mountEntry
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"RS-6-3-1024k"
argument_list|,
name|nnFs0
operator|.
name|getErasureCodingPolicy
argument_list|(
name|mountDest
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"RS-6-3-1024k"
argument_list|,
name|nnFs1
operator|.
name|getErasureCodingPolicy
argument_list|(
name|mountDest
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|routerFs
operator|.
name|unsetErasureCodingPolicy
argument_list|(
name|mountEntry
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|routerFs
operator|.
name|getErasureCodingPolicy
argument_list|(
name|mountDest
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|nnFs0
operator|.
name|getErasureCodingPolicy
argument_list|(
name|mountDest
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|nnFs1
operator|.
name|getErasureCodingPolicy
argument_list|(
name|mountDest
argument_list|)
argument_list|)
expr_stmt|;
comment|//Verify xAttr.
name|routerFs
operator|.
name|setXAttr
argument_list|(
name|mountEntry
argument_list|,
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|value
argument_list|,
name|routerFs
operator|.
name|getXAttr
argument_list|(
name|mountEntry
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|value
argument_list|,
name|nnFs0
operator|.
name|getXAttr
argument_list|(
name|mountDest
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|value
argument_list|,
name|nnFs1
operator|.
name|getXAttr
argument_list|(
name|mountDest
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|routerFs
operator|.
name|removeXAttr
argument_list|(
name|mountEntry
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|routerFs
operator|.
name|getXAttrs
argument_list|(
name|mountEntry
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|nnFs0
operator|.
name|getXAttrs
argument_list|(
name|mountDest
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|nnFs1
operator|.
name|getXAttrs
argument_list|(
name|mountDest
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * SetUp to verify invocations on directories and file.    */
DECL|method|testDirectoryAndFileLevelInvocation (boolean dirAll, Path mountDir, Path nameSpaceFile, Path mountFile, Path nameSpaceDir, final String name, final byte[] value)
specifier|private
name|void
name|testDirectoryAndFileLevelInvocation
parameter_list|(
name|boolean
name|dirAll
parameter_list|,
name|Path
name|mountDir
parameter_list|,
name|Path
name|nameSpaceFile
parameter_list|,
name|Path
name|mountFile
parameter_list|,
name|Path
name|nameSpaceDir
parameter_list|,
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Check invocation for a directory.
name|routerFs
operator|.
name|setOwner
argument_list|(
name|mountDir
argument_list|,
literal|"testuser"
argument_list|,
literal|"testgroup"
argument_list|)
expr_stmt|;
name|routerFs
operator|.
name|setPermission
argument_list|(
name|mountDir
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|777
argument_list|)
argument_list|)
expr_stmt|;
name|routerFs
operator|.
name|setStoragePolicy
argument_list|(
name|mountDir
argument_list|,
literal|"COLD"
argument_list|)
expr_stmt|;
name|routerFs
operator|.
name|setErasureCodingPolicy
argument_list|(
name|mountDir
argument_list|,
literal|"RS-6-3-1024k"
argument_list|)
expr_stmt|;
name|routerFs
operator|.
name|setXAttr
argument_list|(
name|mountDir
argument_list|,
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
comment|// Verify the directory level invocations were checked in case of mounts not
comment|// creating directories in all subclusters.
name|boolean
name|checkedDir1
init|=
name|verifyDirectoryLevelInvocations
argument_list|(
name|dirAll
argument_list|,
name|nameSpaceDir
argument_list|,
name|nnFs0
argument_list|,
name|name
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|boolean
name|checkedDir2
init|=
name|verifyDirectoryLevelInvocations
argument_list|(
name|dirAll
argument_list|,
name|nameSpaceDir
argument_list|,
name|nnFs1
argument_list|,
name|name
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"The file didn't existed in either of the subclusters."
argument_list|,
name|checkedDir1
operator|||
name|checkedDir2
argument_list|)
expr_stmt|;
name|routerFs
operator|.
name|unsetStoragePolicy
argument_list|(
name|mountDir
argument_list|)
expr_stmt|;
name|routerFs
operator|.
name|removeXAttr
argument_list|(
name|mountDir
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|routerFs
operator|.
name|unsetErasureCodingPolicy
argument_list|(
name|mountDir
argument_list|)
expr_stmt|;
name|checkedDir1
operator|=
name|verifyDirectoryLevelUnsetInvocations
argument_list|(
name|dirAll
argument_list|,
name|nnFs0
argument_list|,
name|nameSpaceDir
argument_list|)
expr_stmt|;
name|checkedDir2
operator|=
name|verifyDirectoryLevelUnsetInvocations
argument_list|(
name|dirAll
argument_list|,
name|nnFs1
argument_list|,
name|nameSpaceDir
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"The file didn't existed in either of the subclusters."
argument_list|,
name|checkedDir1
operator|||
name|checkedDir2
argument_list|)
expr_stmt|;
comment|// Check invocation for a file.
name|routerFs
operator|.
name|setOwner
argument_list|(
name|mountFile
argument_list|,
literal|"testuser"
argument_list|,
literal|"testgroup"
argument_list|)
expr_stmt|;
name|routerFs
operator|.
name|setPermission
argument_list|(
name|mountFile
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|777
argument_list|)
argument_list|)
expr_stmt|;
name|routerFs
operator|.
name|setStoragePolicy
argument_list|(
name|mountFile
argument_list|,
literal|"COLD"
argument_list|)
expr_stmt|;
name|routerFs
operator|.
name|setReplication
argument_list|(
name|mountFile
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
expr_stmt|;
name|routerFs
operator|.
name|setXAttr
argument_list|(
name|mountFile
argument_list|,
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|verifyFileLevelInvocations
argument_list|(
name|nameSpaceFile
argument_list|,
name|nnFs0
argument_list|,
name|mountFile
argument_list|,
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|verifyFileLevelInvocations
argument_list|(
name|nameSpaceFile
argument_list|,
name|nnFs1
argument_list|,
name|mountFile
argument_list|,
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify invocations of API's unseting values at the directory level.    * @param dirAll true if the mount entry order creates directory in all    *          locations.    * @param nameSpaceDir path of the directory in the namespace.    * @param nnFs file system where the directory level invocation needs to be    *          tested.    * @throws IOException    */
DECL|method|verifyDirectoryLevelUnsetInvocations (boolean dirAll, DistributedFileSystem nnFs, Path nameSpaceDir)
specifier|private
name|boolean
name|verifyDirectoryLevelUnsetInvocations
parameter_list|(
name|boolean
name|dirAll
parameter_list|,
name|DistributedFileSystem
name|nnFs
parameter_list|,
name|Path
name|nameSpaceDir
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|checked
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|dirAll
operator|||
name|nnFs
operator|.
name|exists
argument_list|(
name|nameSpaceDir
argument_list|)
condition|)
block|{
name|checked
operator|=
literal|true
expr_stmt|;
name|assertEquals
argument_list|(
literal|"HOT"
argument_list|,
name|nnFs
operator|.
name|getStoragePolicy
argument_list|(
name|nameSpaceDir
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|nnFs
operator|.
name|getErasureCodingPolicy
argument_list|(
name|nameSpaceDir
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|nnFs
operator|.
name|getXAttrs
argument_list|(
name|nameSpaceDir
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|checked
return|;
block|}
comment|/**    * Verify file level invocations.    * @param nameSpaceFile path of the file in the namespace.    * @param nnFs the file system where the file invocation needs to checked.    * @param mountFile path of the file w.r.t. mount table.    * @param name name of Xattr.    * @param value value of Xattr.    * @throws IOException    */
DECL|method|verifyFileLevelInvocations (Path nameSpaceFile, DistributedFileSystem nnFs, Path mountFile, final String name, final byte[] value)
specifier|private
name|void
name|verifyFileLevelInvocations
parameter_list|(
name|Path
name|nameSpaceFile
parameter_list|,
name|DistributedFileSystem
name|nnFs
parameter_list|,
name|Path
name|mountFile
parameter_list|,
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|nnFs
operator|.
name|exists
argument_list|(
name|nameSpaceFile
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|"testuser"
argument_list|,
name|nnFs
operator|.
name|getFileStatus
argument_list|(
name|nameSpaceFile
argument_list|)
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|short
operator|)
literal|777
argument_list|,
name|nnFs
operator|.
name|getFileStatus
argument_list|(
name|nameSpaceFile
argument_list|)
operator|.
name|getPermission
argument_list|()
operator|.
name|toShort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"COLD"
argument_list|,
name|nnFs
operator|.
name|getStoragePolicy
argument_list|(
name|nameSpaceFile
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
name|nnFs
operator|.
name|getFileStatus
argument_list|(
name|nameSpaceFile
argument_list|)
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|value
argument_list|,
name|nnFs
operator|.
name|getXAttr
argument_list|(
name|nameSpaceFile
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|routerFs
operator|.
name|unsetStoragePolicy
argument_list|(
name|mountFile
argument_list|)
expr_stmt|;
name|routerFs
operator|.
name|removeXAttr
argument_list|(
name|mountFile
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|nnFs
operator|.
name|getXAttrs
argument_list|(
name|nameSpaceFile
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"HOT"
argument_list|,
name|nnFs
operator|.
name|getStoragePolicy
argument_list|(
name|nameSpaceFile
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Verify invocations at the directory level.    * @param dirAll true if the mount entry order creates directory in all    *          locations.    * @param nameSpaceDir path of the directory in the namespace.    * @param nnFs file system where the directory level invocation needs to be    *          tested.    * @param name name for the Xattr.    * @param value value for the Xattr.    * @return true, if directory existed and successful verification of    *         invocations.    * @throws IOException    */
DECL|method|verifyDirectoryLevelInvocations (boolean dirAll, Path nameSpaceDir, DistributedFileSystem nnFs, final String name, final byte[] value)
specifier|private
name|boolean
name|verifyDirectoryLevelInvocations
parameter_list|(
name|boolean
name|dirAll
parameter_list|,
name|Path
name|nameSpaceDir
parameter_list|,
name|DistributedFileSystem
name|nnFs
parameter_list|,
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|checked
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|dirAll
operator|||
name|nnFs
operator|.
name|exists
argument_list|(
name|nameSpaceDir
argument_list|)
condition|)
block|{
name|checked
operator|=
literal|true
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testuser"
argument_list|,
name|nnFs
operator|.
name|getFileStatus
argument_list|(
name|nameSpaceDir
argument_list|)
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"COLD"
argument_list|,
name|nnFs
operator|.
name|getStoragePolicy
argument_list|(
name|nameSpaceDir
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"RS-6-3-1024k"
argument_list|,
name|nnFs
operator|.
name|getErasureCodingPolicy
argument_list|(
name|nameSpaceDir
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|value
argument_list|,
name|nnFs
operator|.
name|getXAttr
argument_list|(
name|nameSpaceDir
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|short
operator|)
literal|777
argument_list|,
name|nnFs
operator|.
name|getFileStatus
argument_list|(
name|nameSpaceDir
argument_list|)
operator|.
name|getPermission
argument_list|()
operator|.
name|toShort
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|checked
return|;
block|}
comment|/**    * Add a mount table entry to the mount table through the admin API.    * @param entry Mount table entry to add.    * @return If it was successfully added.    * @throws IOException + * Problems adding entries.    */
DECL|method|addMountTable (final MountTable entry)
specifier|private
name|boolean
name|addMountTable
parameter_list|(
specifier|final
name|MountTable
name|entry
parameter_list|)
throws|throws
name|IOException
block|{
name|RouterClient
name|client
init|=
name|routerContext
operator|.
name|getAdminClient
argument_list|()
decl_stmt|;
name|MountTableManager
name|mountTableManager
init|=
name|client
operator|.
name|getMountTableManager
argument_list|()
decl_stmt|;
name|AddMountTableEntryRequest
name|addRequest
init|=
name|AddMountTableEntryRequest
operator|.
name|newInstance
argument_list|(
name|entry
argument_list|)
decl_stmt|;
name|AddMountTableEntryResponse
name|addResponse
init|=
name|mountTableManager
operator|.
name|addMountTableEntry
argument_list|(
name|addRequest
argument_list|)
decl_stmt|;
comment|// Reload the Router cache
name|resolver
operator|.
name|loadCache
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|addResponse
operator|.
name|getStatus
argument_list|()
return|;
block|}
block|}
end_class

end_unit

