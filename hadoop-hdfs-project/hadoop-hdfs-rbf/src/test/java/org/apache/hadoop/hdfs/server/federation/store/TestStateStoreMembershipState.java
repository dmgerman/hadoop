begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.store
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|FederationTestUtils
operator|.
name|NAMENODES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|FederationTestUtils
operator|.
name|NAMESERVICES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|FederationTestUtils
operator|.
name|ROUTERS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|FederationTestUtils
operator|.
name|verifyException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|FederationStateStoreTestUtils
operator|.
name|clearRecords
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|FederationStateStoreTestUtils
operator|.
name|createMockRegistrationForNamenode
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|FederationStateStoreTestUtils
operator|.
name|synchronizeRecords
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|FederationNamenodeServiceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
operator|.
name|RBFConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|GetNamenodeRegistrationsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|GetNamenodeRegistrationsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|NamenodeHeartbeatRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|NamenodeHeartbeatResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|UpdateNamenodeRegistrationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|MembershipState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test the basic {@link MembershipStore} membership functionality.  */
end_comment

begin_class
DECL|class|TestStateStoreMembershipState
specifier|public
class|class
name|TestStateStoreMembershipState
extends|extends
name|TestStateStoreBase
block|{
DECL|field|membershipStore
specifier|private
specifier|static
name|MembershipStore
name|membershipStore
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|create ()
specifier|public
specifier|static
name|void
name|create
parameter_list|()
block|{
comment|// Reduce expirations to 2 seconds
name|getConf
argument_list|()
operator|.
name|setLong
argument_list|(
name|RBFConfigKeys
operator|.
name|FEDERATION_STORE_MEMBERSHIP_EXPIRATION_MS
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Set deletion time to 2 seconds
name|getConf
argument_list|()
operator|.
name|setLong
argument_list|(
name|RBFConfigKeys
operator|.
name|FEDERATION_STORE_MEMBERSHIP_EXPIRATION_DELETION_MS
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|membershipStore
operator|=
name|getStateStore
argument_list|()
operator|.
name|getRegisteredRecordStore
argument_list|(
name|MembershipStore
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// Clear NN registrations
name|assertTrue
argument_list|(
name|clearRecords
argument_list|(
name|getStateStore
argument_list|()
argument_list|,
name|MembershipState
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNamenodeStateOverride ()
specifier|public
name|void
name|testNamenodeStateOverride
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Populate the state store
comment|// 1) ns0:nn0 - Standby
name|String
name|ns
init|=
literal|"ns0"
decl_stmt|;
name|String
name|nn
init|=
literal|"nn0"
decl_stmt|;
name|MembershipState
name|report
init|=
name|createRegistration
argument_list|(
name|ns
argument_list|,
name|nn
argument_list|,
name|ROUTERS
index|[
literal|1
index|]
argument_list|,
name|FederationNamenodeServiceState
operator|.
name|STANDBY
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|namenodeHeartbeat
argument_list|(
name|report
argument_list|)
argument_list|)
expr_stmt|;
comment|// Load data into cache and calculate quorum
name|assertTrue
argument_list|(
name|getStateStore
argument_list|()
operator|.
name|loadCache
argument_list|(
name|MembershipStore
operator|.
name|class
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|MembershipState
name|existingState
init|=
name|getNamenodeRegistration
argument_list|(
name|ns
argument_list|,
name|nn
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|FederationNamenodeServiceState
operator|.
name|STANDBY
argument_list|,
name|existingState
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// Override cache
name|UpdateNamenodeRegistrationRequest
name|request
init|=
name|UpdateNamenodeRegistrationRequest
operator|.
name|newInstance
argument_list|(
name|ns
argument_list|,
name|nn
argument_list|,
name|FederationNamenodeServiceState
operator|.
name|ACTIVE
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|membershipStore
operator|.
name|updateNamenodeRegistration
argument_list|(
name|request
argument_list|)
operator|.
name|getResult
argument_list|()
argument_list|)
expr_stmt|;
name|MembershipState
name|newState
init|=
name|getNamenodeRegistration
argument_list|(
name|ns
argument_list|,
name|nn
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|FederationNamenodeServiceState
operator|.
name|ACTIVE
argument_list|,
name|newState
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// Override cache
name|UpdateNamenodeRegistrationRequest
name|request1
init|=
name|UpdateNamenodeRegistrationRequest
operator|.
name|newInstance
argument_list|(
name|ns
argument_list|,
name|nn
argument_list|,
name|FederationNamenodeServiceState
operator|.
name|OBSERVER
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|membershipStore
operator|.
name|updateNamenodeRegistration
argument_list|(
name|request1
argument_list|)
operator|.
name|getResult
argument_list|()
argument_list|)
expr_stmt|;
name|MembershipState
name|newState1
init|=
name|getNamenodeRegistration
argument_list|(
name|ns
argument_list|,
name|nn
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|FederationNamenodeServiceState
operator|.
name|OBSERVER
argument_list|,
name|newState1
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStateStoreDisconnected ()
specifier|public
name|void
name|testStateStoreDisconnected
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Close the data store driver
name|getStateStore
argument_list|()
operator|.
name|closeDriver
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|getStateStore
argument_list|()
operator|.
name|isDriverReady
argument_list|()
argument_list|)
expr_stmt|;
name|NamenodeHeartbeatRequest
name|hbRequest
init|=
name|NamenodeHeartbeatRequest
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|hbRequest
operator|.
name|setNamenodeMembership
argument_list|(
name|createMockRegistrationForNamenode
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
name|FederationNamenodeServiceState
operator|.
name|UNAVAILABLE
argument_list|)
argument_list|)
expr_stmt|;
name|verifyException
argument_list|(
name|membershipStore
argument_list|,
literal|"namenodeHeartbeat"
argument_list|,
name|StateStoreUnavailableException
operator|.
name|class
argument_list|,
operator|new
name|Class
index|[]
block|{
name|NamenodeHeartbeatRequest
operator|.
name|class
block|}
argument_list|,
operator|new
name|Object
index|[]
block|{
name|hbRequest
block|}
argument_list|)
expr_stmt|;
comment|// Information from cache, no exception should be triggered for these
comment|// TODO - should cached info expire at some point?
name|GetNamenodeRegistrationsRequest
name|getRequest
init|=
name|GetNamenodeRegistrationsRequest
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|verifyException
argument_list|(
name|membershipStore
argument_list|,
literal|"getNamenodeRegistrations"
argument_list|,
literal|null
argument_list|,
operator|new
name|Class
index|[]
block|{
name|GetNamenodeRegistrationsRequest
operator|.
name|class
block|}
argument_list|,
operator|new
name|Object
index|[]
block|{
name|getRequest
block|}
argument_list|)
expr_stmt|;
name|verifyException
argument_list|(
name|membershipStore
argument_list|,
literal|"getExpiredNamenodeRegistrations"
argument_list|,
literal|null
argument_list|,
operator|new
name|Class
index|[]
block|{
name|GetNamenodeRegistrationsRequest
operator|.
name|class
block|}
argument_list|,
operator|new
name|Object
index|[]
block|{
name|getRequest
block|}
argument_list|)
expr_stmt|;
name|UpdateNamenodeRegistrationRequest
name|overrideRequest
init|=
name|UpdateNamenodeRegistrationRequest
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|verifyException
argument_list|(
name|membershipStore
argument_list|,
literal|"updateNamenodeRegistration"
argument_list|,
literal|null
argument_list|,
operator|new
name|Class
index|[]
block|{
name|UpdateNamenodeRegistrationRequest
operator|.
name|class
block|}
argument_list|,
operator|new
name|Object
index|[]
block|{
name|overrideRequest
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|registerAndLoadRegistrations ( List<MembershipState> registrationList)
specifier|private
name|void
name|registerAndLoadRegistrations
parameter_list|(
name|List
argument_list|<
name|MembershipState
argument_list|>
name|registrationList
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Populate
name|assertTrue
argument_list|(
name|synchronizeRecords
argument_list|(
name|getStateStore
argument_list|()
argument_list|,
name|registrationList
argument_list|,
name|MembershipState
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// Load into cache
name|assertTrue
argument_list|(
name|getStateStore
argument_list|()
operator|.
name|loadCache
argument_list|(
name|MembershipStore
operator|.
name|class
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createRegistration (String ns, String nn, String router, FederationNamenodeServiceState state)
specifier|private
name|MembershipState
name|createRegistration
parameter_list|(
name|String
name|ns
parameter_list|,
name|String
name|nn
parameter_list|,
name|String
name|router
parameter_list|,
name|FederationNamenodeServiceState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|MembershipState
name|record
init|=
name|MembershipState
operator|.
name|newInstance
argument_list|(
name|router
argument_list|,
name|ns
argument_list|,
name|nn
argument_list|,
literal|"testcluster"
argument_list|,
literal|"testblock-"
operator|+
name|ns
argument_list|,
literal|"testrpc-"
operator|+
name|ns
operator|+
name|nn
argument_list|,
literal|"testservice-"
operator|+
name|ns
operator|+
name|nn
argument_list|,
literal|"testlifeline-"
operator|+
name|ns
operator|+
name|nn
argument_list|,
literal|"testweb-"
operator|+
name|ns
operator|+
name|nn
argument_list|,
name|state
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|record
return|;
block|}
annotation|@
name|Test
DECL|method|testRegistrationMajorityQuorum ()
specifier|public
name|void
name|testRegistrationMajorityQuorum
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
comment|// Populate the state store with a set of non-matching elements
comment|// 1) ns0:nn0 - Standby (newest)
comment|// 2) ns0:nn0 - Active (oldest)
comment|// 3) ns0:nn0 - Active (2nd oldest)
comment|// 4) ns0:nn0 - Active (3nd oldest element, newest active element)
comment|// Verify the selected entry is the newest majority opinion (4)
name|String
name|ns
init|=
literal|"ns0"
decl_stmt|;
name|String
name|nn
init|=
literal|"nn0"
decl_stmt|;
comment|// Active - oldest
name|MembershipState
name|report
init|=
name|createRegistration
argument_list|(
name|ns
argument_list|,
name|nn
argument_list|,
name|ROUTERS
index|[
literal|1
index|]
argument_list|,
name|FederationNamenodeServiceState
operator|.
name|ACTIVE
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|namenodeHeartbeat
argument_list|(
name|report
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|// Active - 2nd oldest
name|report
operator|=
name|createRegistration
argument_list|(
name|ns
argument_list|,
name|nn
argument_list|,
name|ROUTERS
index|[
literal|2
index|]
argument_list|,
name|FederationNamenodeServiceState
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|namenodeHeartbeat
argument_list|(
name|report
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|// Active - 3rd oldest, newest active element
name|report
operator|=
name|createRegistration
argument_list|(
name|ns
argument_list|,
name|nn
argument_list|,
name|ROUTERS
index|[
literal|3
index|]
argument_list|,
name|FederationNamenodeServiceState
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|namenodeHeartbeat
argument_list|(
name|report
argument_list|)
argument_list|)
expr_stmt|;
comment|// standby - newest overall
name|report
operator|=
name|createRegistration
argument_list|(
name|ns
argument_list|,
name|nn
argument_list|,
name|ROUTERS
index|[
literal|0
index|]
argument_list|,
name|FederationNamenodeServiceState
operator|.
name|STANDBY
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|namenodeHeartbeat
argument_list|(
name|report
argument_list|)
argument_list|)
expr_stmt|;
comment|// Load and calculate quorum
name|assertTrue
argument_list|(
name|getStateStore
argument_list|()
operator|.
name|loadCache
argument_list|(
name|MembershipStore
operator|.
name|class
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify quorum entry
name|MembershipState
name|quorumEntry
init|=
name|getNamenodeRegistration
argument_list|(
name|report
operator|.
name|getNameserviceId
argument_list|()
argument_list|,
name|report
operator|.
name|getNamenodeId
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|quorumEntry
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|quorumEntry
operator|.
name|getRouterId
argument_list|()
argument_list|,
name|ROUTERS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRegistrationQuorumExcludesExpired ()
specifier|public
name|void
name|testRegistrationQuorumExcludesExpired
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
comment|// Populate the state store with some expired entries and verify the expired
comment|// entries are ignored.
comment|// 1) ns0:nn0 - Active
comment|// 2) ns0:nn0 - Expired
comment|// 3) ns0:nn0 - Expired
comment|// 4) ns0:nn0 - Expired
comment|// Verify the selected entry is the active entry
name|List
argument_list|<
name|MembershipState
argument_list|>
name|registrationList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|ns
init|=
literal|"ns0"
decl_stmt|;
name|String
name|nn
init|=
literal|"nn0"
decl_stmt|;
name|String
name|rpcAddress
init|=
literal|"testrpcaddress"
decl_stmt|;
name|String
name|serviceAddress
init|=
literal|"testserviceaddress"
decl_stmt|;
name|String
name|lifelineAddress
init|=
literal|"testlifelineaddress"
decl_stmt|;
name|String
name|blockPoolId
init|=
literal|"testblockpool"
decl_stmt|;
name|String
name|clusterId
init|=
literal|"testcluster"
decl_stmt|;
name|String
name|webAddress
init|=
literal|"testwebaddress"
decl_stmt|;
name|boolean
name|safemode
init|=
literal|false
decl_stmt|;
comment|// Active
name|MembershipState
name|record
init|=
name|MembershipState
operator|.
name|newInstance
argument_list|(
name|ROUTERS
index|[
literal|0
index|]
argument_list|,
name|ns
argument_list|,
name|nn
argument_list|,
name|clusterId
argument_list|,
name|blockPoolId
argument_list|,
name|rpcAddress
argument_list|,
name|serviceAddress
argument_list|,
name|lifelineAddress
argument_list|,
name|webAddress
argument_list|,
name|FederationNamenodeServiceState
operator|.
name|ACTIVE
argument_list|,
name|safemode
argument_list|)
decl_stmt|;
name|registrationList
operator|.
name|add
argument_list|(
name|record
argument_list|)
expr_stmt|;
comment|// Expired
name|record
operator|=
name|MembershipState
operator|.
name|newInstance
argument_list|(
name|ROUTERS
index|[
literal|1
index|]
argument_list|,
name|ns
argument_list|,
name|nn
argument_list|,
name|clusterId
argument_list|,
name|blockPoolId
argument_list|,
name|rpcAddress
argument_list|,
name|serviceAddress
argument_list|,
name|lifelineAddress
argument_list|,
name|webAddress
argument_list|,
name|FederationNamenodeServiceState
operator|.
name|EXPIRED
argument_list|,
name|safemode
argument_list|)
expr_stmt|;
name|registrationList
operator|.
name|add
argument_list|(
name|record
argument_list|)
expr_stmt|;
comment|// Expired
name|record
operator|=
name|MembershipState
operator|.
name|newInstance
argument_list|(
name|ROUTERS
index|[
literal|2
index|]
argument_list|,
name|ns
argument_list|,
name|nn
argument_list|,
name|clusterId
argument_list|,
name|blockPoolId
argument_list|,
name|rpcAddress
argument_list|,
name|serviceAddress
argument_list|,
name|lifelineAddress
argument_list|,
name|webAddress
argument_list|,
name|FederationNamenodeServiceState
operator|.
name|EXPIRED
argument_list|,
name|safemode
argument_list|)
expr_stmt|;
name|registrationList
operator|.
name|add
argument_list|(
name|record
argument_list|)
expr_stmt|;
comment|// Expired
name|record
operator|=
name|MembershipState
operator|.
name|newInstance
argument_list|(
name|ROUTERS
index|[
literal|3
index|]
argument_list|,
name|ns
argument_list|,
name|nn
argument_list|,
name|clusterId
argument_list|,
name|blockPoolId
argument_list|,
name|rpcAddress
argument_list|,
name|serviceAddress
argument_list|,
name|lifelineAddress
argument_list|,
name|webAddress
argument_list|,
name|FederationNamenodeServiceState
operator|.
name|EXPIRED
argument_list|,
name|safemode
argument_list|)
expr_stmt|;
name|registrationList
operator|.
name|add
argument_list|(
name|record
argument_list|)
expr_stmt|;
name|registerAndLoadRegistrations
argument_list|(
name|registrationList
argument_list|)
expr_stmt|;
comment|// Verify quorum entry chooses active membership
name|MembershipState
name|quorumEntry
init|=
name|getNamenodeRegistration
argument_list|(
name|record
operator|.
name|getNameserviceId
argument_list|()
argument_list|,
name|record
operator|.
name|getNamenodeId
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|quorumEntry
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROUTERS
index|[
literal|0
index|]
argument_list|,
name|quorumEntry
operator|.
name|getRouterId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRegistrationQuorumAllExpired ()
specifier|public
name|void
name|testRegistrationQuorumAllExpired
parameter_list|()
throws|throws
name|IOException
block|{
comment|// 1) ns0:nn0 - Expired (oldest)
comment|// 2) ns0:nn0 - Expired
comment|// 3) ns0:nn0 - Expired
comment|// 4) ns0:nn0 - Expired
comment|// Verify no entry is either selected or cached
name|List
argument_list|<
name|MembershipState
argument_list|>
name|registrationList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|ns
init|=
name|NAMESERVICES
index|[
literal|0
index|]
decl_stmt|;
name|String
name|nn
init|=
name|NAMENODES
index|[
literal|0
index|]
decl_stmt|;
name|String
name|rpcAddress
init|=
literal|"testrpcaddress"
decl_stmt|;
name|String
name|serviceAddress
init|=
literal|"testserviceaddress"
decl_stmt|;
name|String
name|lifelineAddress
init|=
literal|"testlifelineaddress"
decl_stmt|;
name|String
name|blockPoolId
init|=
literal|"testblockpool"
decl_stmt|;
name|String
name|clusterId
init|=
literal|"testcluster"
decl_stmt|;
name|String
name|webAddress
init|=
literal|"testwebaddress"
decl_stmt|;
name|boolean
name|safemode
init|=
literal|false
decl_stmt|;
name|long
name|startingTime
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
comment|// Expired
name|MembershipState
name|record
init|=
name|MembershipState
operator|.
name|newInstance
argument_list|(
name|ROUTERS
index|[
literal|0
index|]
argument_list|,
name|ns
argument_list|,
name|nn
argument_list|,
name|clusterId
argument_list|,
name|blockPoolId
argument_list|,
name|rpcAddress
argument_list|,
name|webAddress
argument_list|,
name|lifelineAddress
argument_list|,
name|webAddress
argument_list|,
name|FederationNamenodeServiceState
operator|.
name|EXPIRED
argument_list|,
name|safemode
argument_list|)
decl_stmt|;
name|record
operator|.
name|setDateModified
argument_list|(
name|startingTime
operator|-
literal|10000
argument_list|)
expr_stmt|;
name|registrationList
operator|.
name|add
argument_list|(
name|record
argument_list|)
expr_stmt|;
comment|// Expired
name|record
operator|=
name|MembershipState
operator|.
name|newInstance
argument_list|(
name|ROUTERS
index|[
literal|1
index|]
argument_list|,
name|ns
argument_list|,
name|nn
argument_list|,
name|clusterId
argument_list|,
name|blockPoolId
argument_list|,
name|rpcAddress
argument_list|,
name|serviceAddress
argument_list|,
name|lifelineAddress
argument_list|,
name|webAddress
argument_list|,
name|FederationNamenodeServiceState
operator|.
name|EXPIRED
argument_list|,
name|safemode
argument_list|)
expr_stmt|;
name|record
operator|.
name|setDateModified
argument_list|(
name|startingTime
argument_list|)
expr_stmt|;
name|registrationList
operator|.
name|add
argument_list|(
name|record
argument_list|)
expr_stmt|;
comment|// Expired
name|record
operator|=
name|MembershipState
operator|.
name|newInstance
argument_list|(
name|ROUTERS
index|[
literal|2
index|]
argument_list|,
name|ns
argument_list|,
name|nn
argument_list|,
name|clusterId
argument_list|,
name|blockPoolId
argument_list|,
name|rpcAddress
argument_list|,
name|serviceAddress
argument_list|,
name|lifelineAddress
argument_list|,
name|webAddress
argument_list|,
name|FederationNamenodeServiceState
operator|.
name|EXPIRED
argument_list|,
name|safemode
argument_list|)
expr_stmt|;
name|record
operator|.
name|setDateModified
argument_list|(
name|startingTime
argument_list|)
expr_stmt|;
name|registrationList
operator|.
name|add
argument_list|(
name|record
argument_list|)
expr_stmt|;
comment|// Expired
name|record
operator|=
name|MembershipState
operator|.
name|newInstance
argument_list|(
name|ROUTERS
index|[
literal|3
index|]
argument_list|,
name|ns
argument_list|,
name|nn
argument_list|,
name|clusterId
argument_list|,
name|blockPoolId
argument_list|,
name|rpcAddress
argument_list|,
name|serviceAddress
argument_list|,
name|lifelineAddress
argument_list|,
name|webAddress
argument_list|,
name|FederationNamenodeServiceState
operator|.
name|EXPIRED
argument_list|,
name|safemode
argument_list|)
expr_stmt|;
name|record
operator|.
name|setDateModified
argument_list|(
name|startingTime
argument_list|)
expr_stmt|;
name|registrationList
operator|.
name|add
argument_list|(
name|record
argument_list|)
expr_stmt|;
name|registerAndLoadRegistrations
argument_list|(
name|registrationList
argument_list|)
expr_stmt|;
comment|// Verify no entry is found for this nameservice
name|assertNull
argument_list|(
name|getNamenodeRegistration
argument_list|(
name|record
operator|.
name|getNameserviceId
argument_list|()
argument_list|,
name|record
operator|.
name|getNamenodeId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRegistrationNoQuorum ()
specifier|public
name|void
name|testRegistrationNoQuorum
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
comment|// Populate the state store with a set of non-matching elements
comment|// 1) ns0:nn0 - Standby (newest)
comment|// 2) ns0:nn0 - Standby (oldest)
comment|// 3) ns0:nn0 - Active (2nd oldest)
comment|// 4) ns0:nn0 - Active (3nd oldest element, newest active element)
comment|// Verify the selected entry is the newest entry (1)
name|MembershipState
name|report1
init|=
name|createRegistration
argument_list|(
name|NAMESERVICES
index|[
literal|0
index|]
argument_list|,
name|NAMENODES
index|[
literal|0
index|]
argument_list|,
name|ROUTERS
index|[
literal|1
index|]
argument_list|,
name|FederationNamenodeServiceState
operator|.
name|STANDBY
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|namenodeHeartbeat
argument_list|(
name|report1
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|MembershipState
name|report2
init|=
name|createRegistration
argument_list|(
name|NAMESERVICES
index|[
literal|0
index|]
argument_list|,
name|NAMENODES
index|[
literal|0
index|]
argument_list|,
name|ROUTERS
index|[
literal|2
index|]
argument_list|,
name|FederationNamenodeServiceState
operator|.
name|ACTIVE
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|namenodeHeartbeat
argument_list|(
name|report2
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|MembershipState
name|report3
init|=
name|createRegistration
argument_list|(
name|NAMESERVICES
index|[
literal|0
index|]
argument_list|,
name|NAMENODES
index|[
literal|0
index|]
argument_list|,
name|ROUTERS
index|[
literal|3
index|]
argument_list|,
name|FederationNamenodeServiceState
operator|.
name|ACTIVE
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|namenodeHeartbeat
argument_list|(
name|report3
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|MembershipState
name|report4
init|=
name|createRegistration
argument_list|(
name|NAMESERVICES
index|[
literal|0
index|]
argument_list|,
name|NAMENODES
index|[
literal|0
index|]
argument_list|,
name|ROUTERS
index|[
literal|0
index|]
argument_list|,
name|FederationNamenodeServiceState
operator|.
name|STANDBY
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|namenodeHeartbeat
argument_list|(
name|report4
argument_list|)
argument_list|)
expr_stmt|;
comment|// Load and calculate quorum
name|assertTrue
argument_list|(
name|getStateStore
argument_list|()
operator|.
name|loadCache
argument_list|(
name|MembershipStore
operator|.
name|class
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify quorum entry uses the newest data, even though it is standby
name|MembershipState
name|quorumEntry
init|=
name|getNamenodeRegistration
argument_list|(
name|report1
operator|.
name|getNameserviceId
argument_list|()
argument_list|,
name|report1
operator|.
name|getNamenodeId
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|quorumEntry
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROUTERS
index|[
literal|0
index|]
argument_list|,
name|quorumEntry
operator|.
name|getRouterId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|FederationNamenodeServiceState
operator|.
name|STANDBY
argument_list|,
name|quorumEntry
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRegistrationExpiredAndDeletion ()
specifier|public
name|void
name|testRegistrationExpiredAndDeletion
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
throws|,
name|TimeoutException
block|{
comment|// Populate the state store with a single NN element
comment|// 1) ns0:nn0 - Active
comment|// Wait for the entry to expire without heartbeating
comment|// Verify the NN entry is populated as EXPIRED internally in the state store
name|MembershipState
name|report
init|=
name|createRegistration
argument_list|(
name|NAMESERVICES
index|[
literal|0
index|]
argument_list|,
name|NAMENODES
index|[
literal|0
index|]
argument_list|,
name|ROUTERS
index|[
literal|0
index|]
argument_list|,
name|FederationNamenodeServiceState
operator|.
name|ACTIVE
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|namenodeHeartbeat
argument_list|(
name|report
argument_list|)
argument_list|)
expr_stmt|;
comment|// Load cache
name|assertTrue
argument_list|(
name|getStateStore
argument_list|()
operator|.
name|loadCache
argument_list|(
name|MembershipStore
operator|.
name|class
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify quorum and entry
name|MembershipState
name|quorumEntry
init|=
name|getNamenodeRegistration
argument_list|(
name|report
operator|.
name|getNameserviceId
argument_list|()
argument_list|,
name|report
operator|.
name|getNamenodeId
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|quorumEntry
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROUTERS
index|[
literal|0
index|]
argument_list|,
name|quorumEntry
operator|.
name|getRouterId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|FederationNamenodeServiceState
operator|.
name|ACTIVE
argument_list|,
name|quorumEntry
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|quorumEntry
operator|=
name|getExpiredNamenodeRegistration
argument_list|(
name|report
operator|.
name|getNameserviceId
argument_list|()
argument_list|,
name|report
operator|.
name|getNamenodeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|quorumEntry
argument_list|)
expr_stmt|;
comment|// Wait past expiration (set in conf to 2 seconds)
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|assertTrue
argument_list|(
name|getStateStore
argument_list|()
operator|.
name|loadCache
argument_list|(
name|MembershipStore
operator|.
name|class
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify entry is expired and is no longer in the cache
return|return
name|getNamenodeRegistration
argument_list|(
name|NAMESERVICES
index|[
literal|0
index|]
argument_list|,
name|NAMENODES
index|[
literal|0
index|]
argument_list|)
operator|==
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
argument_list|,
literal|100
argument_list|,
literal|3000
argument_list|)
expr_stmt|;
comment|// Verify entry is in expired membership records
name|quorumEntry
operator|=
name|getExpiredNamenodeRegistration
argument_list|(
name|NAMESERVICES
index|[
literal|0
index|]
argument_list|,
name|NAMENODES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|quorumEntry
argument_list|)
expr_stmt|;
comment|// Verify entry is now expired and can't be used by RPC service
name|quorumEntry
operator|=
name|getNamenodeRegistration
argument_list|(
name|report
operator|.
name|getNameserviceId
argument_list|()
argument_list|,
name|report
operator|.
name|getNamenodeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|quorumEntry
argument_list|)
expr_stmt|;
name|quorumEntry
operator|=
name|getExpiredNamenodeRegistration
argument_list|(
name|report
operator|.
name|getNameserviceId
argument_list|()
argument_list|,
name|report
operator|.
name|getNamenodeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|quorumEntry
argument_list|)
expr_stmt|;
comment|// Heartbeat again, updates dateModified
name|assertTrue
argument_list|(
name|namenodeHeartbeat
argument_list|(
name|report
argument_list|)
argument_list|)
expr_stmt|;
comment|// Reload cache
name|assertTrue
argument_list|(
name|getStateStore
argument_list|()
operator|.
name|loadCache
argument_list|(
name|MembershipStore
operator|.
name|class
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify updated entry marked as active and is accessible to RPC server
name|quorumEntry
operator|=
name|getNamenodeRegistration
argument_list|(
name|report
operator|.
name|getNameserviceId
argument_list|()
argument_list|,
name|report
operator|.
name|getNamenodeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|quorumEntry
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROUTERS
index|[
literal|0
index|]
argument_list|,
name|quorumEntry
operator|.
name|getRouterId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|FederationNamenodeServiceState
operator|.
name|ACTIVE
argument_list|,
name|quorumEntry
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|quorumEntry
operator|=
name|getExpiredNamenodeRegistration
argument_list|(
name|report
operator|.
name|getNameserviceId
argument_list|()
argument_list|,
name|report
operator|.
name|getNamenodeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|quorumEntry
argument_list|)
expr_stmt|;
comment|// Wait past expiration (set in conf to 2 seconds)
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|assertTrue
argument_list|(
name|getStateStore
argument_list|()
operator|.
name|loadCache
argument_list|(
name|MembershipStore
operator|.
name|class
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify entry is expired and is no longer in the cache
return|return
name|getNamenodeRegistration
argument_list|(
name|NAMESERVICES
index|[
literal|0
index|]
argument_list|,
name|NAMENODES
index|[
literal|0
index|]
argument_list|)
operator|==
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
argument_list|,
literal|100
argument_list|,
literal|3000
argument_list|)
expr_stmt|;
comment|// Verify entry is in expired membership records
name|quorumEntry
operator|=
name|getExpiredNamenodeRegistration
argument_list|(
name|NAMESERVICES
index|[
literal|0
index|]
argument_list|,
name|NAMENODES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|quorumEntry
argument_list|)
expr_stmt|;
comment|// Wait past deletion (set in conf to 2 seconds)
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|assertTrue
argument_list|(
name|getStateStore
argument_list|()
operator|.
name|loadCache
argument_list|(
name|MembershipStore
operator|.
name|class
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify entry is deleted from even the expired membership records
return|return
name|getExpiredNamenodeRegistration
argument_list|(
name|NAMESERVICES
index|[
literal|0
index|]
argument_list|,
name|NAMENODES
index|[
literal|0
index|]
argument_list|)
operator|==
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
argument_list|,
literal|100
argument_list|,
literal|3000
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get a single namenode membership record from the store.    *    * @param nsId The HDFS nameservice ID to search for    * @param nnId The HDFS namenode ID to search for    * @return The single NamenodeMembershipRecord that matches the query or null    *         if not found.    * @throws IOException if the query could not be executed.    */
DECL|method|getNamenodeRegistration ( final String nsId, final String nnId)
specifier|private
name|MembershipState
name|getNamenodeRegistration
parameter_list|(
specifier|final
name|String
name|nsId
parameter_list|,
specifier|final
name|String
name|nnId
parameter_list|)
throws|throws
name|IOException
block|{
name|MembershipState
name|partial
init|=
name|MembershipState
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|partial
operator|.
name|setNameserviceId
argument_list|(
name|nsId
argument_list|)
expr_stmt|;
name|partial
operator|.
name|setNamenodeId
argument_list|(
name|nnId
argument_list|)
expr_stmt|;
name|GetNamenodeRegistrationsRequest
name|request
init|=
name|GetNamenodeRegistrationsRequest
operator|.
name|newInstance
argument_list|(
name|partial
argument_list|)
decl_stmt|;
name|GetNamenodeRegistrationsResponse
name|response
init|=
name|membershipStore
operator|.
name|getNamenodeRegistrations
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|MembershipState
argument_list|>
name|results
init|=
name|response
operator|.
name|getNamenodeMemberships
argument_list|()
decl_stmt|;
if|if
condition|(
name|results
operator|!=
literal|null
operator|&&
name|results
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|MembershipState
name|record
init|=
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
return|return
name|record
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Get a single expired namenode membership record from the store.    *    * @param nsId The HDFS nameservice ID to search for    * @param nnId The HDFS namenode ID to search for    * @return The single expired NamenodeMembershipRecord that matches the query    *         or null if not found.    * @throws IOException if the query could not be executed.    */
DECL|method|getExpiredNamenodeRegistration ( final String nsId, final String nnId)
specifier|private
name|MembershipState
name|getExpiredNamenodeRegistration
parameter_list|(
specifier|final
name|String
name|nsId
parameter_list|,
specifier|final
name|String
name|nnId
parameter_list|)
throws|throws
name|IOException
block|{
name|MembershipState
name|partial
init|=
name|MembershipState
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|partial
operator|.
name|setNameserviceId
argument_list|(
name|nsId
argument_list|)
expr_stmt|;
name|partial
operator|.
name|setNamenodeId
argument_list|(
name|nnId
argument_list|)
expr_stmt|;
name|GetNamenodeRegistrationsRequest
name|request
init|=
name|GetNamenodeRegistrationsRequest
operator|.
name|newInstance
argument_list|(
name|partial
argument_list|)
decl_stmt|;
name|GetNamenodeRegistrationsResponse
name|response
init|=
name|membershipStore
operator|.
name|getExpiredNamenodeRegistrations
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|MembershipState
argument_list|>
name|results
init|=
name|response
operator|.
name|getNamenodeMemberships
argument_list|()
decl_stmt|;
if|if
condition|(
name|results
operator|!=
literal|null
operator|&&
name|results
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|MembershipState
name|record
init|=
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
return|return
name|record
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Register a namenode heartbeat with the state store.    *    * @param store FederationMembershipStateStore instance to retrieve the    *          membership data records.    * @param namenode A fully populated namenode membership record to be    *          committed to the data store.    * @return True if successful, false otherwise.    * @throws IOException if the state store query could not be performed.    */
DECL|method|namenodeHeartbeat (MembershipState namenode)
specifier|private
name|boolean
name|namenodeHeartbeat
parameter_list|(
name|MembershipState
name|namenode
parameter_list|)
throws|throws
name|IOException
block|{
name|NamenodeHeartbeatRequest
name|request
init|=
name|NamenodeHeartbeatRequest
operator|.
name|newInstance
argument_list|(
name|namenode
argument_list|)
decl_stmt|;
name|NamenodeHeartbeatResponse
name|response
init|=
name|membershipStore
operator|.
name|namenodeHeartbeat
argument_list|(
name|request
argument_list|)
decl_stmt|;
return|return
name|response
operator|.
name|getResult
argument_list|()
return|;
block|}
block|}
end_class

end_unit

