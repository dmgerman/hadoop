begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.router
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doAnswer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|MiniRouterDFSCluster
operator|.
name|NamenodeContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|MiniRouterDFSCluster
operator|.
name|RouterContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|RouterConfigBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|StateStoreDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|metrics
operator|.
name|FederationRPCMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|metrics
operator|.
name|NamenodeBeanMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|FederationNamenodeContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|MembershipNamenodeResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|NamenodeStatusReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSNamesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
operator|.
name|OperationCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ha
operator|.
name|HAContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|Whitebox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_comment
comment|/**  * Test retry behavior of the Router RPC Client.  */
end_comment

begin_class
DECL|class|TestRouterRPCClientRetries
specifier|public
class|class
name|TestRouterRPCClientRetries
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestRouterRPCClientRetries
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|cluster
specifier|private
specifier|static
name|StateStoreDFSCluster
name|cluster
decl_stmt|;
DECL|field|nnContext1
specifier|private
specifier|static
name|NamenodeContext
name|nnContext1
decl_stmt|;
DECL|field|routerContext
specifier|private
specifier|static
name|RouterContext
name|routerContext
decl_stmt|;
DECL|field|resolver
specifier|private
specifier|static
name|MembershipNamenodeResolver
name|resolver
decl_stmt|;
DECL|field|routerProtocol
specifier|private
specifier|static
name|ClientProtocol
name|routerProtocol
decl_stmt|;
annotation|@
name|Rule
DECL|field|testTimeout
specifier|public
specifier|final
name|Timeout
name|testTimeout
init|=
operator|new
name|Timeout
argument_list|(
literal|100000
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Build and start a federated cluster
name|cluster
operator|=
operator|new
name|StateStoreDFSCluster
argument_list|(
literal|false
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Configuration
name|routerConf
init|=
operator|new
name|RouterConfigBuilder
argument_list|()
operator|.
name|stateStore
argument_list|()
operator|.
name|metrics
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|rpc
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|routerConf
operator|.
name|setTimeDuration
argument_list|(
name|NamenodeBeanMetrics
operator|.
name|DN_REPORT_CACHE_EXPIRE
argument_list|,
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
comment|// reduce IPC client connection retry times and interval time
name|Configuration
name|clientConf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|clientConf
operator|.
name|setInt
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IPC_CLIENT_CONNECT_MAX_RETRIES_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|clientConf
operator|.
name|setInt
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IPC_CLIENT_CONNECT_RETRY_INTERVAL_KEY
argument_list|,
literal|100
argument_list|)
expr_stmt|;
comment|// Set the DNs to belong to only one subcluster
name|cluster
operator|.
name|setIndependentDNs
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|addRouterOverrides
argument_list|(
name|routerConf
argument_list|)
expr_stmt|;
comment|// override some settings for the client
name|cluster
operator|.
name|startCluster
argument_list|(
name|clientConf
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|startRouters
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitClusterUp
argument_list|()
expr_stmt|;
name|nnContext1
operator|=
name|cluster
operator|.
name|getNamenode
argument_list|(
name|cluster
operator|.
name|getNameservices
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|routerContext
operator|=
name|cluster
operator|.
name|getRandomRouter
argument_list|()
expr_stmt|;
name|resolver
operator|=
operator|(
name|MembershipNamenodeResolver
operator|)
name|routerContext
operator|.
name|getRouter
argument_list|()
operator|.
name|getNamenodeResolver
argument_list|()
expr_stmt|;
name|routerProtocol
operator|=
name|routerContext
operator|.
name|getClient
argument_list|()
operator|.
name|getNamenode
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|stopRouter
argument_list|(
name|routerContext
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testRetryWhenAllNameServiceDown ()
specifier|public
name|void
name|testRetryWhenAllNameServiceDown
parameter_list|()
throws|throws
name|Exception
block|{
comment|// shutdown the dfs cluster
name|MiniDFSCluster
name|dfsCluster
init|=
name|cluster
operator|.
name|getCluster
argument_list|()
decl_stmt|;
name|dfsCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// register an invalid namenode report
name|registerInvalidNameReport
argument_list|()
expr_stmt|;
comment|// Create a directory via the router
name|String
name|dirPath
init|=
literal|"/testRetryWhenClusterisDown"
decl_stmt|;
name|FsPermission
name|permission
init|=
operator|new
name|FsPermission
argument_list|(
literal|"705"
argument_list|)
decl_stmt|;
try|try
block|{
name|routerProtocol
operator|.
name|mkdirs
argument_list|(
name|dirPath
argument_list|,
name|permission
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown RemoteException error."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|e
parameter_list|)
block|{
name|String
name|ns0
init|=
name|cluster
operator|.
name|getNameservices
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"No namenode available under nameservice "
operator|+
name|ns0
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Verify the retry times, it should only retry one time.
name|FederationRPCMetrics
name|rpcMetrics
init|=
name|routerContext
operator|.
name|getRouter
argument_list|()
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getRPCMetrics
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rpcMetrics
operator|.
name|getProxyOpRetries
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRetryWhenOneNameServiceDown ()
specifier|public
name|void
name|testRetryWhenOneNameServiceDown
parameter_list|()
throws|throws
name|Exception
block|{
comment|// shutdown the dfs cluster
name|MiniDFSCluster
name|dfsCluster
init|=
name|cluster
operator|.
name|getCluster
argument_list|()
decl_stmt|;
name|dfsCluster
operator|.
name|shutdownNameNode
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// register an invalid namenode report
name|registerInvalidNameReport
argument_list|()
expr_stmt|;
name|DFSClient
name|client
init|=
name|nnContext1
operator|.
name|getClient
argument_list|()
decl_stmt|;
comment|// Renew lease for the DFS client, it will succeed.
name|routerProtocol
operator|.
name|renewLease
argument_list|(
name|client
operator|.
name|getClientName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify the retry times, it will retry one time for ns0.
name|FederationRPCMetrics
name|rpcMetrics
init|=
name|routerContext
operator|.
name|getRouter
argument_list|()
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getRPCMetrics
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rpcMetrics
operator|.
name|getProxyOpRetries
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Register an invalid namenode report.    * @throws IOException    */
DECL|method|registerInvalidNameReport ()
specifier|private
name|void
name|registerInvalidNameReport
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|ns0
init|=
name|cluster
operator|.
name|getNameservices
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|FederationNamenodeContext
argument_list|>
name|origin
init|=
name|resolver
operator|.
name|getNamenodesForNameserviceId
argument_list|(
name|ns0
argument_list|)
decl_stmt|;
name|FederationNamenodeContext
name|nnInfo
init|=
name|origin
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|NamenodeStatusReport
name|report
init|=
operator|new
name|NamenodeStatusReport
argument_list|(
name|ns0
argument_list|,
name|nnInfo
operator|.
name|getNamenodeId
argument_list|()
argument_list|,
name|nnInfo
operator|.
name|getRpcAddress
argument_list|()
argument_list|,
name|nnInfo
operator|.
name|getServiceAddress
argument_list|()
argument_list|,
name|nnInfo
operator|.
name|getLifelineAddress
argument_list|()
argument_list|,
name|nnInfo
operator|.
name|getWebAddress
argument_list|()
argument_list|)
decl_stmt|;
name|report
operator|.
name|setRegistrationValid
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|resolver
operator|.
name|registerNamenode
argument_list|(
name|report
argument_list|)
argument_list|)
expr_stmt|;
name|resolver
operator|.
name|loadCache
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNamenodeMetricsSlow ()
specifier|public
name|void
name|testNamenodeMetricsSlow
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Router
name|router
init|=
name|routerContext
operator|.
name|getRouter
argument_list|()
decl_stmt|;
specifier|final
name|NamenodeBeanMetrics
name|metrics
init|=
name|router
operator|.
name|getNamenodeMetrics
argument_list|()
decl_stmt|;
comment|// Initially, there are 4 DNs in total
specifier|final
name|String
name|jsonString0
init|=
name|metrics
operator|.
name|getLiveNodes
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|getNumDatanodes
argument_list|(
name|jsonString0
argument_list|)
argument_list|)
expr_stmt|;
comment|// The response should be cached
name|assertEquals
argument_list|(
name|jsonString0
argument_list|,
name|metrics
operator|.
name|getLiveNodes
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check that the cached value gets updated eventually
name|waitUpdateLiveNodes
argument_list|(
name|jsonString0
argument_list|,
name|metrics
argument_list|)
expr_stmt|;
specifier|final
name|String
name|jsonString2
init|=
name|metrics
operator|.
name|getLiveNodes
argument_list|()
decl_stmt|;
name|assertNotEquals
argument_list|(
name|jsonString0
argument_list|,
name|jsonString2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|getNumDatanodes
argument_list|(
name|jsonString2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Making subcluster0 slow to reply, should only get DNs from nn1
name|MiniDFSCluster
name|dfsCluster
init|=
name|cluster
operator|.
name|getCluster
argument_list|()
decl_stmt|;
name|NameNode
name|nn0
init|=
name|dfsCluster
operator|.
name|getNameNode
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|simulateNNSlow
argument_list|(
name|nn0
argument_list|)
expr_stmt|;
name|waitUpdateLiveNodes
argument_list|(
name|jsonString2
argument_list|,
name|metrics
argument_list|)
expr_stmt|;
specifier|final
name|String
name|jsonString3
init|=
name|metrics
operator|.
name|getLiveNodes
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|getNumDatanodes
argument_list|(
name|jsonString3
argument_list|)
argument_list|)
expr_stmt|;
comment|// Making subcluster1 slow to reply, shouldn't get any DNs
name|NameNode
name|nn1
init|=
name|dfsCluster
operator|.
name|getNameNode
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|simulateNNSlow
argument_list|(
name|nn1
argument_list|)
expr_stmt|;
name|waitUpdateLiveNodes
argument_list|(
name|jsonString3
argument_list|,
name|metrics
argument_list|)
expr_stmt|;
specifier|final
name|String
name|jsonString4
init|=
name|metrics
operator|.
name|getLiveNodes
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|getNumDatanodes
argument_list|(
name|jsonString4
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the number of nodes in a JSON string.    * @param jsonString JSON string containing nodes.    * @return Number of nodes.    * @throws JSONException If the JSON string is not properly formed.    */
DECL|method|getNumDatanodes (final String jsonString)
specifier|private
specifier|static
name|int
name|getNumDatanodes
parameter_list|(
specifier|final
name|String
name|jsonString
parameter_list|)
throws|throws
name|JSONException
block|{
name|JSONObject
name|jsonObject
init|=
operator|new
name|JSONObject
argument_list|(
name|jsonString
argument_list|)
decl_stmt|;
if|if
condition|(
name|jsonObject
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|jsonObject
operator|.
name|names
argument_list|()
operator|.
name|length
argument_list|()
return|;
block|}
comment|/**    * Wait until the cached live nodes value is updated.    * @param oldValue Old cached value.    * @param metrics Namenode metrics beans to get the live nodes from.    * @throws Exception If it cannot wait.    */
DECL|method|waitUpdateLiveNodes ( final String oldValue, final NamenodeBeanMetrics metrics)
specifier|private
specifier|static
name|void
name|waitUpdateLiveNodes
parameter_list|(
specifier|final
name|String
name|oldValue
parameter_list|,
specifier|final
name|NamenodeBeanMetrics
name|metrics
parameter_list|)
throws|throws
name|Exception
block|{
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
return|return
operator|!
name|oldValue
operator|.
name|equals
argument_list|(
name|metrics
operator|.
name|getLiveNodes
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|,
literal|500
argument_list|,
literal|5
operator|*
literal|1000
argument_list|)
expr_stmt|;
block|}
comment|/**    * Simulate that a Namenode is slow by adding a sleep to the check operation    * in the NN.    * @param nn Namenode to simulate slow.    * @throws Exception If we cannot add the sleep time.    */
DECL|method|simulateNNSlow (final NameNode nn)
specifier|private
specifier|static
name|void
name|simulateNNSlow
parameter_list|(
specifier|final
name|NameNode
name|nn
parameter_list|)
throws|throws
name|Exception
block|{
name|FSNamesystem
name|namesystem
init|=
name|nn
operator|.
name|getNamesystem
argument_list|()
decl_stmt|;
name|HAContext
name|haContext
init|=
name|namesystem
operator|.
name|getHAContext
argument_list|()
decl_stmt|;
name|HAContext
name|spyHAContext
init|=
name|spy
argument_list|(
name|haContext
argument_list|)
decl_stmt|;
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Simulating slow namenode {}"
argument_list|,
name|invocation
operator|.
name|getMock
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|3
operator|*
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Simulating a slow namenode aborted"
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|spyHAContext
argument_list|)
operator|.
name|checkOperation
argument_list|(
name|any
argument_list|(
name|OperationCategory
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Whitebox
operator|.
name|setInternalState
argument_list|(
name|namesystem
argument_list|,
literal|"haContext"
argument_list|,
name|spyHAContext
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

