begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.router
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|CuratorFramework
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|CuratorFrameworkFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|retry
operator|.
name|RetryNTimes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|test
operator|.
name|TestingServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|RouterConfigBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|RouterStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|StateStoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|driver
operator|.
name|StateStoreDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|driver
operator|.
name|impl
operator|.
name|StateStoreZooKeeperImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|GetRouterRegistrationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|GetRouterRegistrationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|RouterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|StateStoreVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|FederationStateStoreTestUtils
operator|.
name|waitStateStore
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Test cases for router heartbeat service.  */
end_comment

begin_class
DECL|class|TestRouterHeartbeatService
specifier|public
class|class
name|TestRouterHeartbeatService
block|{
DECL|field|router
specifier|private
name|Router
name|router
decl_stmt|;
DECL|field|routerId
specifier|private
specifier|final
name|String
name|routerId
init|=
literal|"router1"
decl_stmt|;
DECL|field|testingServer
specifier|private
name|TestingServer
name|testingServer
decl_stmt|;
DECL|field|curatorFramework
specifier|private
name|CuratorFramework
name|curatorFramework
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|router
operator|=
operator|new
name|Router
argument_list|()
expr_stmt|;
name|router
operator|.
name|setRouterId
argument_list|(
name|routerId
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|RBFConfigKeys
operator|.
name|DFS_ROUTER_CACHE_TIME_TO_LIVE_MS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Configuration
name|routerConfig
init|=
operator|new
name|RouterConfigBuilder
argument_list|(
name|conf
argument_list|)
operator|.
name|stateStore
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|routerConfig
operator|.
name|setLong
argument_list|(
name|RBFConfigKeys
operator|.
name|FEDERATION_STORE_CONNECTION_TEST_MS
argument_list|,
name|TimeUnit
operator|.
name|HOURS
operator|.
name|toMillis
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|routerConfig
operator|.
name|setClass
argument_list|(
name|RBFConfigKeys
operator|.
name|FEDERATION_STORE_DRIVER_CLASS
argument_list|,
name|StateStoreZooKeeperImpl
operator|.
name|class
argument_list|,
name|StateStoreDriver
operator|.
name|class
argument_list|)
expr_stmt|;
name|testingServer
operator|=
operator|new
name|TestingServer
argument_list|()
expr_stmt|;
name|String
name|connectStr
init|=
name|testingServer
operator|.
name|getConnectString
argument_list|()
decl_stmt|;
name|curatorFramework
operator|=
name|CuratorFrameworkFactory
operator|.
name|builder
argument_list|()
operator|.
name|connectString
argument_list|(
name|connectStr
argument_list|)
operator|.
name|retryPolicy
argument_list|(
operator|new
name|RetryNTimes
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|curatorFramework
operator|.
name|start
argument_list|()
expr_stmt|;
name|routerConfig
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|ZK_ADDRESS
argument_list|,
name|connectStr
argument_list|)
expr_stmt|;
name|router
operator|.
name|init
argument_list|(
name|routerConfig
argument_list|)
expr_stmt|;
name|router
operator|.
name|start
argument_list|()
expr_stmt|;
name|waitStateStore
argument_list|(
name|router
operator|.
name|getStateStore
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMicros
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStateStoreUnavailable ()
specifier|public
name|void
name|testStateStoreUnavailable
parameter_list|()
throws|throws
name|IOException
block|{
name|curatorFramework
operator|.
name|close
argument_list|()
expr_stmt|;
name|testingServer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|router
operator|.
name|getStateStore
argument_list|()
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// The driver is not ready
name|assertFalse
argument_list|(
name|router
operator|.
name|getStateStore
argument_list|()
operator|.
name|isDriverReady
argument_list|()
argument_list|)
expr_stmt|;
comment|// Do a heartbeat, and no exception thrown out
name|RouterHeartbeatService
name|heartbeatService
init|=
operator|new
name|RouterHeartbeatService
argument_list|(
name|router
argument_list|)
decl_stmt|;
name|heartbeatService
operator|.
name|updateStateStore
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStateStoreAvailable ()
specifier|public
name|void
name|testStateStoreAvailable
parameter_list|()
throws|throws
name|Exception
block|{
comment|// The driver is ready
name|StateStoreService
name|stateStore
init|=
name|router
operator|.
name|getStateStore
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|router
operator|.
name|getStateStore
argument_list|()
operator|.
name|isDriverReady
argument_list|()
argument_list|)
expr_stmt|;
name|RouterStore
name|routerStore
init|=
name|router
operator|.
name|getRouterStateManager
argument_list|()
decl_stmt|;
comment|// No record about this router
name|stateStore
operator|.
name|refreshCaches
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|GetRouterRegistrationRequest
name|request
init|=
name|GetRouterRegistrationRequest
operator|.
name|newInstance
argument_list|(
name|routerId
argument_list|)
decl_stmt|;
name|GetRouterRegistrationResponse
name|response
init|=
name|router
operator|.
name|getRouterStateManager
argument_list|()
operator|.
name|getRouterRegistration
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|RouterState
name|routerState
init|=
name|response
operator|.
name|getRouter
argument_list|()
decl_stmt|;
name|String
name|id
init|=
name|routerState
operator|.
name|getRouterId
argument_list|()
decl_stmt|;
name|StateStoreVersion
name|version
init|=
name|routerState
operator|.
name|getStateStoreVersion
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|version
argument_list|)
expr_stmt|;
comment|// Do a heartbeat
name|RouterHeartbeatService
name|heartbeatService
init|=
operator|new
name|RouterHeartbeatService
argument_list|(
name|router
argument_list|)
decl_stmt|;
name|heartbeatService
operator|.
name|updateStateStore
argument_list|()
expr_stmt|;
comment|// We should have a record
name|stateStore
operator|.
name|refreshCaches
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|request
operator|=
name|GetRouterRegistrationRequest
operator|.
name|newInstance
argument_list|(
name|routerId
argument_list|)
expr_stmt|;
name|response
operator|=
name|routerStore
operator|.
name|getRouterRegistration
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|routerState
operator|=
name|response
operator|.
name|getRouter
argument_list|()
expr_stmt|;
name|id
operator|=
name|routerState
operator|.
name|getRouterId
argument_list|()
expr_stmt|;
name|version
operator|=
name|routerState
operator|.
name|getStateStoreVersion
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|version
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|curatorFramework
operator|!=
literal|null
condition|)
block|{
name|curatorFramework
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|testingServer
operator|!=
literal|null
condition|)
block|{
name|testingServer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|router
operator|!=
literal|null
condition|)
block|{
name|router
operator|.
name|shutDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

