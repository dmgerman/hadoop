begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.router
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|FederationTestUtils
operator|.
name|simulateSlowNamenode
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
operator|.
name|monotonicNow
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|MiniRouterDFSCluster
operator|.
name|NamenodeContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|MiniRouterDFSCluster
operator|.
name|RouterContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|RouterConfigBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|StateStoreDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|metrics
operator|.
name|FederationMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|MembershipNamenodeResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|MountTableManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|MountTableResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|DisabledNameserviceStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|StateStoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|AddMountTableEntryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|DisableNameserviceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|MountTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test the behavior when disabling name services.  */
end_comment

begin_class
DECL|class|TestDisableNameservices
specifier|public
class|class
name|TestDisableNameservices
block|{
DECL|field|cluster
specifier|private
specifier|static
name|StateStoreDFSCluster
name|cluster
decl_stmt|;
DECL|field|routerContext
specifier|private
specifier|static
name|RouterContext
name|routerContext
decl_stmt|;
DECL|field|routerAdminClient
specifier|private
specifier|static
name|RouterClient
name|routerAdminClient
decl_stmt|;
DECL|field|routerProtocol
specifier|private
specifier|static
name|ClientProtocol
name|routerProtocol
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setUp ()
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Build and start a federated cluster
name|cluster
operator|=
operator|new
name|StateStoreDFSCluster
argument_list|(
literal|false
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Configuration
name|routerConf
init|=
operator|new
name|RouterConfigBuilder
argument_list|()
operator|.
name|stateStore
argument_list|()
operator|.
name|metrics
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|rpc
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// Reduce the number of RPC threads to saturate the Router easy
name|routerConf
operator|.
name|setInt
argument_list|(
name|RBFConfigKeys
operator|.
name|DFS_ROUTER_HANDLER_COUNT_KEY
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|routerConf
operator|.
name|setInt
argument_list|(
name|RBFConfigKeys
operator|.
name|DFS_ROUTER_CLIENT_THREADS_SIZE
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|// Set the DNs to belong to only one subcluster
name|cluster
operator|.
name|setIndependentDNs
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|addRouterOverrides
argument_list|(
name|routerConf
argument_list|)
expr_stmt|;
comment|// override some settings for the client
name|cluster
operator|.
name|startCluster
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|startRouters
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitClusterUp
argument_list|()
expr_stmt|;
name|routerContext
operator|=
name|cluster
operator|.
name|getRandomRouter
argument_list|()
expr_stmt|;
name|routerProtocol
operator|=
name|routerContext
operator|.
name|getClient
argument_list|()
operator|.
name|getNamenode
argument_list|()
expr_stmt|;
name|routerAdminClient
operator|=
name|routerContext
operator|.
name|getAdminClient
argument_list|()
expr_stmt|;
name|setupNamespace
argument_list|()
expr_stmt|;
comment|// Simulate one of the subclusters to be slow
name|MiniDFSCluster
name|dfsCluster
init|=
name|cluster
operator|.
name|getCluster
argument_list|()
decl_stmt|;
name|NameNode
name|nn0
init|=
name|dfsCluster
operator|.
name|getNameNode
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|simulateSlowNamenode
argument_list|(
name|nn0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|setupNamespace ()
specifier|private
specifier|static
name|void
name|setupNamespace
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Setup a mount table to map to the two namespaces
name|MountTableManager
name|mountTable
init|=
name|routerAdminClient
operator|.
name|getMountTableManager
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|destinations
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
name|destinations
operator|.
name|put
argument_list|(
literal|"ns0"
argument_list|,
literal|"/dirns0"
argument_list|)
expr_stmt|;
name|MountTable
name|newEntry
init|=
name|MountTable
operator|.
name|newInstance
argument_list|(
literal|"/dirns0"
argument_list|,
name|destinations
argument_list|)
decl_stmt|;
name|AddMountTableEntryRequest
name|request
init|=
name|AddMountTableEntryRequest
operator|.
name|newInstance
argument_list|(
name|newEntry
argument_list|)
decl_stmt|;
name|mountTable
operator|.
name|addMountTableEntry
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|destinations
operator|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
expr_stmt|;
name|destinations
operator|.
name|put
argument_list|(
literal|"ns1"
argument_list|,
literal|"/dirns1"
argument_list|)
expr_stmt|;
name|newEntry
operator|=
name|MountTable
operator|.
name|newInstance
argument_list|(
literal|"/dirns1"
argument_list|,
name|destinations
argument_list|)
expr_stmt|;
name|request
operator|=
name|AddMountTableEntryRequest
operator|.
name|newInstance
argument_list|(
name|newEntry
argument_list|)
expr_stmt|;
name|mountTable
operator|.
name|addMountTableEntry
argument_list|(
name|request
argument_list|)
expr_stmt|;
comment|// Refresh the cache in the Router
name|Router
name|router
init|=
name|routerContext
operator|.
name|getRouter
argument_list|()
decl_stmt|;
name|MountTableResolver
name|mountTableResolver
init|=
operator|(
name|MountTableResolver
operator|)
name|router
operator|.
name|getSubclusterResolver
argument_list|()
decl_stmt|;
name|mountTableResolver
operator|.
name|loadCache
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Add a folder to each namespace
name|NamenodeContext
name|nn0
init|=
name|cluster
operator|.
name|getNamenode
argument_list|(
literal|"ns0"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|nn0
operator|.
name|getFileSystem
argument_list|()
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/dirns0/0"
argument_list|)
argument_list|)
expr_stmt|;
name|NamenodeContext
name|nn1
init|=
name|cluster
operator|.
name|getNamenode
argument_list|(
literal|"ns1"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|nn1
operator|.
name|getFileSystem
argument_list|()
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/dirns1/1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|tearDown ()
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|stopRouter
argument_list|(
name|routerContext
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|After
DECL|method|cleanup ()
specifier|public
name|void
name|cleanup
parameter_list|()
throws|throws
name|IOException
block|{
name|Router
name|router
init|=
name|routerContext
operator|.
name|getRouter
argument_list|()
decl_stmt|;
name|StateStoreService
name|stateStore
init|=
name|router
operator|.
name|getStateStore
argument_list|()
decl_stmt|;
name|DisabledNameserviceStore
name|store
init|=
name|stateStore
operator|.
name|getRegisteredRecordStore
argument_list|(
name|DisabledNameserviceStore
operator|.
name|class
argument_list|)
decl_stmt|;
name|store
operator|.
name|loadCache
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|disabled
init|=
name|store
operator|.
name|getDisabledNameservices
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|nsId
range|:
name|disabled
control|)
block|{
name|store
operator|.
name|enableNameservice
argument_list|(
name|nsId
argument_list|)
expr_stmt|;
block|}
name|store
operator|.
name|loadCache
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWithoutDisabling ()
specifier|public
name|void
name|testWithoutDisabling
parameter_list|()
throws|throws
name|IOException
block|{
comment|// ns0 is slow and renewLease should take a long time
name|long
name|t0
init|=
name|monotonicNow
argument_list|()
decl_stmt|;
name|routerProtocol
operator|.
name|renewLease
argument_list|(
literal|"client0"
argument_list|)
expr_stmt|;
name|long
name|t
init|=
name|monotonicNow
argument_list|()
operator|-
name|t0
decl_stmt|;
name|assertTrue
argument_list|(
literal|"It took too little: "
operator|+
name|t
operator|+
literal|"ms"
argument_list|,
name|t
operator|>
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Return the results from all subclusters even if slow
name|FileSystem
name|routerFs
init|=
name|routerContext
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|FileStatus
index|[]
name|filesStatus
init|=
name|routerFs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|filesStatus
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"dirns0"
argument_list|,
name|filesStatus
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"dirns1"
argument_list|,
name|filesStatus
index|[
literal|1
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDisabling ()
specifier|public
name|void
name|testDisabling
parameter_list|()
throws|throws
name|Exception
block|{
name|disableNameservice
argument_list|(
literal|"ns0"
argument_list|)
expr_stmt|;
comment|// renewLease should be fast as we are skipping ns0
name|long
name|t0
init|=
name|monotonicNow
argument_list|()
decl_stmt|;
name|routerProtocol
operator|.
name|renewLease
argument_list|(
literal|"client0"
argument_list|)
expr_stmt|;
name|long
name|t
init|=
name|monotonicNow
argument_list|()
operator|-
name|t0
decl_stmt|;
name|assertTrue
argument_list|(
literal|"It took too long: "
operator|+
name|t
operator|+
literal|"ms"
argument_list|,
name|t
operator|<
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// We should not report anything from ns0
name|FileSystem
name|routerFs
init|=
name|routerContext
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|FileStatus
index|[]
name|filesStatus
init|=
literal|null
decl_stmt|;
try|try
block|{
name|routerFs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"The listStatus call should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"No remote locations available"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
name|filesStatus
operator|=
name|routerFs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/dirns1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|filesStatus
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|filesStatus
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMetrics ()
specifier|public
name|void
name|testMetrics
parameter_list|()
throws|throws
name|Exception
block|{
name|disableNameservice
argument_list|(
literal|"ns0"
argument_list|)
expr_stmt|;
name|int
name|numActive
init|=
literal|0
decl_stmt|;
name|int
name|numDisabled
init|=
literal|0
decl_stmt|;
name|Router
name|router
init|=
name|routerContext
operator|.
name|getRouter
argument_list|()
decl_stmt|;
name|FederationMetrics
name|metrics
init|=
name|router
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
name|String
name|jsonString
init|=
name|metrics
operator|.
name|getNameservices
argument_list|()
decl_stmt|;
name|JSONObject
name|jsonObject
init|=
operator|new
name|JSONObject
argument_list|(
name|jsonString
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|?
argument_list|>
name|keys
init|=
name|jsonObject
operator|.
name|keys
argument_list|()
decl_stmt|;
while|while
condition|(
name|keys
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|keys
operator|.
name|next
argument_list|()
decl_stmt|;
name|JSONObject
name|json
init|=
name|jsonObject
operator|.
name|getJSONObject
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|String
name|nsId
init|=
name|json
operator|.
name|getString
argument_list|(
literal|"nameserviceId"
argument_list|)
decl_stmt|;
name|String
name|state
init|=
name|json
operator|.
name|getString
argument_list|(
literal|"state"
argument_list|)
decl_stmt|;
if|if
condition|(
name|nsId
operator|.
name|equals
argument_list|(
literal|"ns0"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|"DISABLED"
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|numDisabled
operator|++
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|"ACTIVE"
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|numActive
operator|++
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|numActive
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|numDisabled
argument_list|)
expr_stmt|;
block|}
DECL|method|disableNameservice (final String nsId)
specifier|private
specifier|static
name|void
name|disableNameservice
parameter_list|(
specifier|final
name|String
name|nsId
parameter_list|)
throws|throws
name|IOException
block|{
name|NameserviceManager
name|nsManager
init|=
name|routerAdminClient
operator|.
name|getNameserviceManager
argument_list|()
decl_stmt|;
name|DisableNameserviceRequest
name|req
init|=
name|DisableNameserviceRequest
operator|.
name|newInstance
argument_list|(
name|nsId
argument_list|)
decl_stmt|;
name|nsManager
operator|.
name|disableNameservice
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|Router
name|router
init|=
name|routerContext
operator|.
name|getRouter
argument_list|()
decl_stmt|;
name|StateStoreService
name|stateStore
init|=
name|router
operator|.
name|getStateStore
argument_list|()
decl_stmt|;
name|DisabledNameserviceStore
name|store
init|=
name|stateStore
operator|.
name|getRegisteredRecordStore
argument_list|(
name|DisabledNameserviceStore
operator|.
name|class
argument_list|)
decl_stmt|;
name|store
operator|.
name|loadCache
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|MembershipNamenodeResolver
name|resolver
init|=
operator|(
name|MembershipNamenodeResolver
operator|)
name|router
operator|.
name|getNamenodeResolver
argument_list|()
decl_stmt|;
name|resolver
operator|.
name|loadCache
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

