begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.store.driver
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|driver
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|metrics
operator|.
name|StateStoreMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|FederationNamenodeServiceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
operator|.
name|RouterServiceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|FederationStateStoreTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|StateStoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|BaseRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|MembershipState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|MountTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|QueryResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|RouterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|StateStoreVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Base tests for the driver. The particular implementations will use this to  * test their functionality.  */
end_comment

begin_class
DECL|class|TestStateStoreDriverBase
specifier|public
class|class
name|TestStateStoreDriverBase
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestStateStoreDriverBase
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|stateStore
specifier|private
specifier|static
name|StateStoreService
name|stateStore
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|Configuration
name|conf
decl_stmt|;
DECL|field|RANDOM
specifier|private
specifier|static
specifier|final
name|Random
name|RANDOM
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
comment|/**    * Get the State Store driver.    * @return State Store driver.    */
DECL|method|getStateStoreDriver ()
specifier|protected
name|StateStoreDriver
name|getStateStoreDriver
parameter_list|()
block|{
return|return
name|stateStore
operator|.
name|getDriver
argument_list|()
return|;
block|}
annotation|@
name|After
DECL|method|cleanMetrics ()
specifier|public
name|void
name|cleanMetrics
parameter_list|()
block|{
if|if
condition|(
name|stateStore
operator|!=
literal|null
condition|)
block|{
name|StateStoreMetrics
name|metrics
init|=
name|stateStore
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
name|metrics
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|AfterClass
DECL|method|tearDownCluster ()
specifier|public
specifier|static
name|void
name|tearDownCluster
parameter_list|()
block|{
if|if
condition|(
name|stateStore
operator|!=
literal|null
condition|)
block|{
name|stateStore
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Get a new State Store using this configuration.    *    * @param config Configuration for the State Store.    * @throws Exception If we cannot get the State Store.    */
DECL|method|getStateStore (Configuration config)
specifier|public
specifier|static
name|void
name|getStateStore
parameter_list|(
name|Configuration
name|config
parameter_list|)
throws|throws
name|Exception
block|{
name|conf
operator|=
name|config
expr_stmt|;
name|stateStore
operator|=
name|FederationStateStoreTestUtils
operator|.
name|newStateStore
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|generateRandomString ()
specifier|private
name|String
name|generateRandomString
parameter_list|()
block|{
name|String
name|randomString
init|=
literal|"randomString-"
operator|+
name|RANDOM
operator|.
name|nextInt
argument_list|()
decl_stmt|;
return|return
name|randomString
return|;
block|}
DECL|method|generateRandomLong ()
specifier|private
name|long
name|generateRandomLong
parameter_list|()
block|{
return|return
name|RANDOM
operator|.
name|nextLong
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
DECL|method|generateRandomEnum (Class<T> enumClass)
specifier|private
parameter_list|<
name|T
extends|extends
name|Enum
parameter_list|>
name|T
name|generateRandomEnum
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|enumClass
parameter_list|)
block|{
name|int
name|x
init|=
name|RANDOM
operator|.
name|nextInt
argument_list|(
name|enumClass
operator|.
name|getEnumConstants
argument_list|()
operator|.
name|length
argument_list|)
decl_stmt|;
name|T
name|data
init|=
name|enumClass
operator|.
name|getEnumConstants
argument_list|()
index|[
name|x
index|]
decl_stmt|;
return|return
name|data
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|generateFakeRecord (Class<T> recordClass)
specifier|private
parameter_list|<
name|T
extends|extends
name|BaseRecord
parameter_list|>
name|T
name|generateFakeRecord
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|recordClass
parameter_list|)
throws|throws
name|IllegalArgumentException
throws|,
name|IllegalAccessException
throws|,
name|IOException
block|{
if|if
condition|(
name|recordClass
operator|==
name|MembershipState
operator|.
name|class
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|MembershipState
operator|.
name|newInstance
argument_list|(
name|generateRandomString
argument_list|()
argument_list|,
name|generateRandomString
argument_list|()
argument_list|,
name|generateRandomString
argument_list|()
argument_list|,
name|generateRandomString
argument_list|()
argument_list|,
name|generateRandomString
argument_list|()
argument_list|,
name|generateRandomString
argument_list|()
argument_list|,
name|generateRandomString
argument_list|()
argument_list|,
name|generateRandomString
argument_list|()
argument_list|,
name|generateRandomString
argument_list|()
argument_list|,
name|generateRandomEnum
argument_list|(
name|FederationNamenodeServiceState
operator|.
name|class
argument_list|)
argument_list|,
literal|false
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|recordClass
operator|==
name|MountTable
operator|.
name|class
condition|)
block|{
name|String
name|src
init|=
literal|"/"
operator|+
name|generateRandomString
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|destMap
init|=
name|Collections
operator|.
name|singletonMap
argument_list|(
name|generateRandomString
argument_list|()
argument_list|,
literal|"/"
operator|+
name|generateRandomString
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|(
name|T
operator|)
name|MountTable
operator|.
name|newInstance
argument_list|(
name|src
argument_list|,
name|destMap
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|recordClass
operator|==
name|RouterState
operator|.
name|class
condition|)
block|{
name|RouterState
name|routerState
init|=
name|RouterState
operator|.
name|newInstance
argument_list|(
name|generateRandomString
argument_list|()
argument_list|,
name|generateRandomLong
argument_list|()
argument_list|,
name|generateRandomEnum
argument_list|(
name|RouterServiceState
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|StateStoreVersion
name|version
init|=
name|generateFakeRecord
argument_list|(
name|StateStoreVersion
operator|.
name|class
argument_list|)
decl_stmt|;
name|routerState
operator|.
name|setStateStoreVersion
argument_list|(
name|version
argument_list|)
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|routerState
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Validate if a record is the same.    *    * @param original Original record.    * @param committed Committed record.    * @param assertEquals Assert if the records are equal or just return.    * @return If the record is successfully validated.    */
DECL|method|validateRecord ( BaseRecord original, BaseRecord committed, boolean assertEquals)
specifier|private
name|boolean
name|validateRecord
parameter_list|(
name|BaseRecord
name|original
parameter_list|,
name|BaseRecord
name|committed
parameter_list|,
name|boolean
name|assertEquals
parameter_list|)
block|{
name|boolean
name|ret
init|=
literal|true
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|fields
init|=
name|getFields
argument_list|(
name|original
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|fields
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"dateModified"
argument_list|)
operator|||
name|key
operator|.
name|equals
argument_list|(
literal|"dateCreated"
argument_list|)
operator|||
name|key
operator|.
name|equals
argument_list|(
literal|"proto"
argument_list|)
condition|)
block|{
comment|// Fields are updated/set on commit and fetch and may not match
comment|// the fields that are initialized in a non-committed object.
continue|continue;
block|}
name|Object
name|data1
init|=
name|getField
argument_list|(
name|original
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|Object
name|data2
init|=
name|getField
argument_list|(
name|committed
argument_list|,
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|assertEquals
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Field "
operator|+
name|key
operator|+
literal|" does not match"
argument_list|,
name|data1
argument_list|,
name|data2
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|data1
operator|.
name|equals
argument_list|(
name|data2
argument_list|)
condition|)
block|{
name|ret
operator|=
literal|false
expr_stmt|;
block|}
block|}
name|long
name|now
init|=
name|stateStore
operator|.
name|getDriver
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|committed
operator|.
name|getDateCreated
argument_list|()
operator|<=
name|now
operator|&&
name|committed
operator|.
name|getDateCreated
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|committed
operator|.
name|getDateModified
argument_list|()
operator|>=
name|committed
operator|.
name|getDateCreated
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
DECL|method|removeAll (StateStoreDriver driver)
specifier|public
specifier|static
name|void
name|removeAll
parameter_list|(
name|StateStoreDriver
name|driver
parameter_list|)
throws|throws
name|IOException
block|{
name|driver
operator|.
name|removeAll
argument_list|(
name|MembershipState
operator|.
name|class
argument_list|)
expr_stmt|;
name|driver
operator|.
name|removeAll
argument_list|(
name|MountTable
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|testInsert ( StateStoreDriver driver, Class<T> recordClass)
specifier|public
parameter_list|<
name|T
extends|extends
name|BaseRecord
parameter_list|>
name|void
name|testInsert
parameter_list|(
name|StateStoreDriver
name|driver
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|recordClass
parameter_list|)
throws|throws
name|IllegalArgumentException
throws|,
name|IllegalAccessException
throws|,
name|IOException
block|{
name|assertTrue
argument_list|(
name|driver
operator|.
name|removeAll
argument_list|(
name|recordClass
argument_list|)
argument_list|)
expr_stmt|;
name|QueryResult
argument_list|<
name|T
argument_list|>
name|queryResult0
init|=
name|driver
operator|.
name|get
argument_list|(
name|recordClass
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|T
argument_list|>
name|records0
init|=
name|queryResult0
operator|.
name|getRecords
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|records0
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// Insert single
name|BaseRecord
name|record
init|=
name|generateFakeRecord
argument_list|(
name|recordClass
argument_list|)
decl_stmt|;
name|driver
operator|.
name|put
argument_list|(
name|record
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Verify
name|QueryResult
argument_list|<
name|T
argument_list|>
name|queryResult1
init|=
name|driver
operator|.
name|get
argument_list|(
name|recordClass
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|T
argument_list|>
name|records1
init|=
name|queryResult1
operator|.
name|getRecords
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|records1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|T
name|record0
init|=
name|records1
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|validateRecord
argument_list|(
name|record
argument_list|,
name|record0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Insert multiple
name|List
argument_list|<
name|T
argument_list|>
name|insertList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|T
name|newRecord
init|=
name|generateFakeRecord
argument_list|(
name|recordClass
argument_list|)
decl_stmt|;
name|insertList
operator|.
name|add
argument_list|(
name|newRecord
argument_list|)
expr_stmt|;
block|}
name|driver
operator|.
name|putAll
argument_list|(
name|insertList
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Verify
name|QueryResult
argument_list|<
name|T
argument_list|>
name|queryResult2
init|=
name|driver
operator|.
name|get
argument_list|(
name|recordClass
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|T
argument_list|>
name|records2
init|=
name|queryResult2
operator|.
name|getRecords
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|records2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testFetchErrors (StateStoreDriver driver, Class<T> clazz)
specifier|public
parameter_list|<
name|T
extends|extends
name|BaseRecord
parameter_list|>
name|void
name|testFetchErrors
parameter_list|(
name|StateStoreDriver
name|driver
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
throws|throws
name|IllegalAccessException
throws|,
name|IOException
block|{
comment|// Fetch empty list
name|driver
operator|.
name|removeAll
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|QueryResult
argument_list|<
name|T
argument_list|>
name|result0
init|=
name|driver
operator|.
name|get
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|result0
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|T
argument_list|>
name|records0
init|=
name|result0
operator|.
name|getRecords
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|records0
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Insert single
name|BaseRecord
name|record
init|=
name|generateFakeRecord
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|driver
operator|.
name|put
argument_list|(
name|record
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify
name|QueryResult
argument_list|<
name|T
argument_list|>
name|result1
init|=
name|driver
operator|.
name|get
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|T
argument_list|>
name|records1
init|=
name|result1
operator|.
name|getRecords
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|records1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|validateRecord
argument_list|(
name|record
argument_list|,
name|records1
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Test fetch single object with a bad query
specifier|final
name|T
name|fakeRecord
init|=
name|generateFakeRecord
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
specifier|final
name|Query
argument_list|<
name|T
argument_list|>
name|query
init|=
operator|new
name|Query
argument_list|<
name|T
argument_list|>
argument_list|(
name|fakeRecord
argument_list|)
decl_stmt|;
name|T
name|getRecord
init|=
name|driver
operator|.
name|get
argument_list|(
name|clazz
argument_list|,
name|query
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|getRecord
argument_list|)
expr_stmt|;
comment|// Test fetch multiple objects does not exist returns empty list
name|assertEquals
argument_list|(
name|driver
operator|.
name|getMultiple
argument_list|(
name|clazz
argument_list|,
name|query
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|testPut ( StateStoreDriver driver, Class<T> clazz)
specifier|public
parameter_list|<
name|T
extends|extends
name|BaseRecord
parameter_list|>
name|void
name|testPut
parameter_list|(
name|StateStoreDriver
name|driver
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
throws|throws
name|IllegalArgumentException
throws|,
name|ReflectiveOperationException
throws|,
name|IOException
throws|,
name|SecurityException
block|{
name|driver
operator|.
name|removeAll
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|QueryResult
argument_list|<
name|T
argument_list|>
name|records
init|=
name|driver
operator|.
name|get
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|records
operator|.
name|getRecords
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// Insert multiple
name|List
argument_list|<
name|T
argument_list|>
name|insertList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|T
name|newRecord
init|=
name|generateFakeRecord
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
name|insertList
operator|.
name|add
argument_list|(
name|newRecord
argument_list|)
expr_stmt|;
block|}
comment|// Verify
name|assertTrue
argument_list|(
name|driver
operator|.
name|putAll
argument_list|(
name|insertList
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|records
operator|=
name|driver
operator|.
name|get
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|records
operator|.
name|getRecords
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// Generate a new record with the same PK fields as an existing record
name|BaseRecord
name|updatedRecord
init|=
name|generateFakeRecord
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
name|BaseRecord
name|existingRecord
init|=
name|records
operator|.
name|getRecords
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|primaryKeys
init|=
name|existingRecord
operator|.
name|getPrimaryKeys
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|primaryKeys
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|fieldType
init|=
name|getFieldType
argument_list|(
name|existingRecord
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|Object
name|field
init|=
name|fromString
argument_list|(
name|value
argument_list|,
name|fieldType
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|setField
argument_list|(
name|updatedRecord
argument_list|,
name|key
argument_list|,
name|field
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Attempt an update of an existing entry, but it is not allowed.
name|assertFalse
argument_list|(
name|driver
operator|.
name|put
argument_list|(
name|updatedRecord
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify no update occurred, all original records are unchanged
name|QueryResult
argument_list|<
name|T
argument_list|>
name|newRecords
init|=
name|driver
operator|.
name|get
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|newRecords
operator|.
name|getRecords
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"A single entry was improperly updated in the store"
argument_list|,
literal|10
argument_list|,
name|countMatchingEntries
argument_list|(
name|records
operator|.
name|getRecords
argument_list|()
argument_list|,
name|newRecords
operator|.
name|getRecords
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Update the entry (allowing updates)
name|assertTrue
argument_list|(
name|driver
operator|.
name|put
argument_list|(
name|updatedRecord
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify that one entry no longer matches the original set
name|newRecords
operator|=
name|driver
operator|.
name|get
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|newRecords
operator|.
name|getRecords
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Record of type "
operator|+
name|clazz
operator|+
literal|" not updated in the store"
argument_list|,
literal|9
argument_list|,
name|countMatchingEntries
argument_list|(
name|records
operator|.
name|getRecords
argument_list|()
argument_list|,
name|newRecords
operator|.
name|getRecords
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|countMatchingEntries ( Collection<? extends BaseRecord> committedList, Collection<? extends BaseRecord> matchList)
specifier|private
name|int
name|countMatchingEntries
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|BaseRecord
argument_list|>
name|committedList
parameter_list|,
name|Collection
argument_list|<
name|?
extends|extends
name|BaseRecord
argument_list|>
name|matchList
parameter_list|)
block|{
name|int
name|matchingCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|BaseRecord
name|committed
range|:
name|committedList
control|)
block|{
for|for
control|(
name|BaseRecord
name|match
range|:
name|matchList
control|)
block|{
try|try
block|{
if|if
condition|(
name|match
operator|.
name|getPrimaryKey
argument_list|()
operator|.
name|equals
argument_list|(
name|committed
operator|.
name|getPrimaryKey
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|validateRecord
argument_list|(
name|match
argument_list|,
name|committed
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|matchingCount
operator|++
expr_stmt|;
block|}
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{         }
block|}
block|}
return|return
name|matchingCount
return|;
block|}
DECL|method|testRemove ( StateStoreDriver driver, Class<T> clazz)
specifier|public
parameter_list|<
name|T
extends|extends
name|BaseRecord
parameter_list|>
name|void
name|testRemove
parameter_list|(
name|StateStoreDriver
name|driver
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
throws|throws
name|IllegalArgumentException
throws|,
name|IllegalAccessException
throws|,
name|IOException
block|{
comment|// Remove all
name|assertTrue
argument_list|(
name|driver
operator|.
name|removeAll
argument_list|(
name|clazz
argument_list|)
argument_list|)
expr_stmt|;
name|QueryResult
argument_list|<
name|T
argument_list|>
name|records
init|=
name|driver
operator|.
name|get
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|records
operator|.
name|getRecords
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// Insert multiple
name|List
argument_list|<
name|T
argument_list|>
name|insertList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|T
name|newRecord
init|=
name|generateFakeRecord
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
name|insertList
operator|.
name|add
argument_list|(
name|newRecord
argument_list|)
expr_stmt|;
block|}
comment|// Verify
name|assertTrue
argument_list|(
name|driver
operator|.
name|putAll
argument_list|(
name|insertList
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|records
operator|=
name|driver
operator|.
name|get
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|records
operator|.
name|getRecords
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// Remove Single
name|assertTrue
argument_list|(
name|driver
operator|.
name|remove
argument_list|(
name|records
operator|.
name|getRecords
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify
name|records
operator|=
name|driver
operator|.
name|get
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|records
operator|.
name|getRecords
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|9
argument_list|)
expr_stmt|;
comment|// Remove with filter
specifier|final
name|T
name|firstRecord
init|=
name|records
operator|.
name|getRecords
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|Query
argument_list|<
name|T
argument_list|>
name|query0
init|=
operator|new
name|Query
argument_list|<
name|T
argument_list|>
argument_list|(
name|firstRecord
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|driver
operator|.
name|remove
argument_list|(
name|clazz
argument_list|,
name|query0
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
specifier|final
name|T
name|secondRecord
init|=
name|records
operator|.
name|getRecords
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|Query
argument_list|<
name|T
argument_list|>
name|query1
init|=
operator|new
name|Query
argument_list|<
name|T
argument_list|>
argument_list|(
name|secondRecord
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|driver
operator|.
name|remove
argument_list|(
name|clazz
argument_list|,
name|query1
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// Verify
name|records
operator|=
name|driver
operator|.
name|get
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|records
operator|.
name|getRecords
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
comment|// Remove all
name|assertTrue
argument_list|(
name|driver
operator|.
name|removeAll
argument_list|(
name|clazz
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify
name|records
operator|=
name|driver
operator|.
name|get
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|records
operator|.
name|getRecords
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testInsert (StateStoreDriver driver)
specifier|public
name|void
name|testInsert
parameter_list|(
name|StateStoreDriver
name|driver
parameter_list|)
throws|throws
name|IllegalArgumentException
throws|,
name|IllegalAccessException
throws|,
name|IOException
block|{
name|testInsert
argument_list|(
name|driver
argument_list|,
name|MembershipState
operator|.
name|class
argument_list|)
expr_stmt|;
name|testInsert
argument_list|(
name|driver
argument_list|,
name|MountTable
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|testPut (StateStoreDriver driver)
specifier|public
name|void
name|testPut
parameter_list|(
name|StateStoreDriver
name|driver
parameter_list|)
throws|throws
name|IllegalArgumentException
throws|,
name|ReflectiveOperationException
throws|,
name|IOException
throws|,
name|SecurityException
block|{
name|testPut
argument_list|(
name|driver
argument_list|,
name|MembershipState
operator|.
name|class
argument_list|)
expr_stmt|;
name|testPut
argument_list|(
name|driver
argument_list|,
name|MountTable
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|testRemove (StateStoreDriver driver)
specifier|public
name|void
name|testRemove
parameter_list|(
name|StateStoreDriver
name|driver
parameter_list|)
throws|throws
name|IllegalArgumentException
throws|,
name|IllegalAccessException
throws|,
name|IOException
block|{
name|testRemove
argument_list|(
name|driver
argument_list|,
name|MembershipState
operator|.
name|class
argument_list|)
expr_stmt|;
name|testRemove
argument_list|(
name|driver
argument_list|,
name|MountTable
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|testFetchErrors (StateStoreDriver driver)
specifier|public
name|void
name|testFetchErrors
parameter_list|(
name|StateStoreDriver
name|driver
parameter_list|)
throws|throws
name|IllegalArgumentException
throws|,
name|IllegalAccessException
throws|,
name|IOException
block|{
name|testFetchErrors
argument_list|(
name|driver
argument_list|,
name|MembershipState
operator|.
name|class
argument_list|)
expr_stmt|;
name|testFetchErrors
argument_list|(
name|driver
argument_list|,
name|MountTable
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|testMetrics (StateStoreDriver driver)
specifier|public
name|void
name|testMetrics
parameter_list|(
name|StateStoreDriver
name|driver
parameter_list|)
throws|throws
name|IOException
throws|,
name|IllegalArgumentException
throws|,
name|IllegalAccessException
block|{
name|MountTable
name|insertRecord
init|=
name|this
operator|.
name|generateFakeRecord
argument_list|(
name|MountTable
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Put single
name|StateStoreMetrics
name|metrics
init|=
name|stateStore
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|metrics
operator|.
name|getWriteOps
argument_list|()
argument_list|)
expr_stmt|;
name|driver
operator|.
name|put
argument_list|(
name|insertRecord
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|metrics
operator|.
name|getWriteOps
argument_list|()
argument_list|)
expr_stmt|;
comment|// Put multiple
name|metrics
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|metrics
operator|.
name|getWriteOps
argument_list|()
argument_list|)
expr_stmt|;
name|driver
operator|.
name|put
argument_list|(
name|insertRecord
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|metrics
operator|.
name|getWriteOps
argument_list|()
argument_list|)
expr_stmt|;
comment|// Get Single
name|metrics
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|metrics
operator|.
name|getReadOps
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|String
name|querySourcePath
init|=
name|insertRecord
operator|.
name|getSourcePath
argument_list|()
decl_stmt|;
name|MountTable
name|partial
init|=
name|MountTable
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|partial
operator|.
name|setSourcePath
argument_list|(
name|querySourcePath
argument_list|)
expr_stmt|;
specifier|final
name|Query
argument_list|<
name|MountTable
argument_list|>
name|query
init|=
operator|new
name|Query
argument_list|<>
argument_list|(
name|partial
argument_list|)
decl_stmt|;
name|driver
operator|.
name|get
argument_list|(
name|MountTable
operator|.
name|class
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|metrics
operator|.
name|getReadOps
argument_list|()
argument_list|)
expr_stmt|;
comment|// GetAll
name|metrics
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|metrics
operator|.
name|getReadOps
argument_list|()
argument_list|)
expr_stmt|;
name|driver
operator|.
name|get
argument_list|(
name|MountTable
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|metrics
operator|.
name|getReadOps
argument_list|()
argument_list|)
expr_stmt|;
comment|// GetMultiple
name|metrics
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|metrics
operator|.
name|getReadOps
argument_list|()
argument_list|)
expr_stmt|;
name|driver
operator|.
name|getMultiple
argument_list|(
name|MountTable
operator|.
name|class
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|metrics
operator|.
name|getReadOps
argument_list|()
argument_list|)
expr_stmt|;
comment|// Insert fails
name|metrics
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|metrics
operator|.
name|getFailureOps
argument_list|()
argument_list|)
expr_stmt|;
name|driver
operator|.
name|put
argument_list|(
name|insertRecord
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|metrics
operator|.
name|getFailureOps
argument_list|()
argument_list|)
expr_stmt|;
comment|// Remove single
name|metrics
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|metrics
operator|.
name|getRemoveOps
argument_list|()
argument_list|)
expr_stmt|;
name|driver
operator|.
name|remove
argument_list|(
name|insertRecord
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|metrics
operator|.
name|getRemoveOps
argument_list|()
argument_list|)
expr_stmt|;
comment|// Remove multiple
name|metrics
operator|.
name|reset
argument_list|()
expr_stmt|;
name|driver
operator|.
name|put
argument_list|(
name|insertRecord
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|metrics
operator|.
name|getRemoveOps
argument_list|()
argument_list|)
expr_stmt|;
name|driver
operator|.
name|remove
argument_list|(
name|MountTable
operator|.
name|class
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|metrics
operator|.
name|getRemoveOps
argument_list|()
argument_list|)
expr_stmt|;
comment|// Remove all
name|metrics
operator|.
name|reset
argument_list|()
expr_stmt|;
name|driver
operator|.
name|put
argument_list|(
name|insertRecord
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|metrics
operator|.
name|getRemoveOps
argument_list|()
argument_list|)
expr_stmt|;
name|driver
operator|.
name|removeAll
argument_list|(
name|MountTable
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|metrics
operator|.
name|getRemoveOps
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sets the value of a field on the object.    *    * @param fieldName The string name of the field.    * @param data The data to pass to the field's setter.    *    * @return True if successful, fails if failed.    */
DECL|method|setField ( BaseRecord record, String fieldName, Object data)
specifier|private
specifier|static
name|boolean
name|setField
parameter_list|(
name|BaseRecord
name|record
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|Object
name|data
parameter_list|)
block|{
name|Method
name|m
init|=
name|locateSetter
argument_list|(
name|record
argument_list|,
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|m
operator|.
name|invoke
argument_list|(
name|record
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot set field "
operator|+
name|fieldName
operator|+
literal|" on object "
operator|+
name|record
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" to data "
operator|+
name|data
operator|+
literal|" of type "
operator|+
name|data
operator|.
name|getClass
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Finds the appropriate setter for a field name.    *    * @param fieldName The legacy name of the field.    * @return The matching setter or null if not found.    */
DECL|method|locateSetter (BaseRecord record, String fieldName)
specifier|private
specifier|static
name|Method
name|locateSetter
parameter_list|(
name|BaseRecord
name|record
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
for|for
control|(
name|Method
name|m
range|:
name|record
operator|.
name|getClass
argument_list|()
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|m
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"set"
operator|+
name|fieldName
argument_list|)
condition|)
block|{
return|return
name|m
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Returns all serializable fields in the object.    *    * @return Map with the fields.    */
DECL|method|getFields (BaseRecord record)
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|getFields
parameter_list|(
name|BaseRecord
name|record
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|getters
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Method
name|m
range|:
name|record
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|m
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"get"
argument_list|)
condition|)
block|{
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|type
init|=
name|m
operator|.
name|getReturnType
argument_list|()
decl_stmt|;
name|char
index|[]
name|c
init|=
name|m
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
literal|3
argument_list|)
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|c
index|[
literal|0
index|]
operator|=
name|Character
operator|.
name|toLowerCase
argument_list|(
name|c
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|String
name|key
init|=
operator|new
name|String
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|getters
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot execute getter "
operator|+
name|m
operator|.
name|getName
argument_list|()
operator|+
literal|" on object "
operator|+
name|record
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|getters
return|;
block|}
comment|/**    * Get the type of a field.    *    * @param fieldName    * @return Field type    */
DECL|method|getFieldType (BaseRecord record, String fieldName)
specifier|private
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
name|getFieldType
parameter_list|(
name|BaseRecord
name|record
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|Method
name|m
init|=
name|locateGetter
argument_list|(
name|record
argument_list|,
name|fieldName
argument_list|)
decl_stmt|;
return|return
name|m
operator|.
name|getReturnType
argument_list|()
return|;
block|}
comment|/**    * Fetches the value for a field name.    *    * @param fieldName the legacy name of the field.    * @return The field data or null if not found.    */
DECL|method|getField (BaseRecord record, String fieldName)
specifier|private
specifier|static
name|Object
name|getField
parameter_list|(
name|BaseRecord
name|record
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|Object
name|result
init|=
literal|null
decl_stmt|;
name|Method
name|m
init|=
name|locateGetter
argument_list|(
name|record
argument_list|,
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|result
operator|=
name|m
operator|.
name|invoke
argument_list|(
name|record
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot get field "
operator|+
name|fieldName
operator|+
literal|" on object "
operator|+
name|record
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**    * Finds the appropriate getter for a field name.    *    * @param fieldName The legacy name of the field.    * @return The matching getter or null if not found.    */
DECL|method|locateGetter (BaseRecord record, String fieldName)
specifier|private
specifier|static
name|Method
name|locateGetter
parameter_list|(
name|BaseRecord
name|record
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
for|for
control|(
name|Method
name|m
range|:
name|record
operator|.
name|getClass
argument_list|()
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|m
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"get"
operator|+
name|fieldName
argument_list|)
condition|)
block|{
return|return
name|m
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Expands a data object from the store into an record object. Default store    * data type is a String. Override if additional serialization is required.    *    * @param data Object containing the serialized data. Only string is    *          supported.    * @param clazz Target object class to hold the deserialized data.    * @return An instance of the target data object initialized with the    *         deserialized data.    */
annotation|@
name|Deprecated
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
DECL|method|fromString (String data, Class<T> clazz)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|fromString
parameter_list|(
name|String
name|data
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
if|if
condition|(
name|data
operator|.
name|equals
argument_list|(
literal|"null"
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|clazz
operator|==
name|String
operator|.
name|class
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|data
return|;
block|}
elseif|else
if|if
condition|(
name|clazz
operator|==
name|Long
operator|.
name|class
operator|||
name|clazz
operator|==
name|long
operator|.
name|class
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|Long
operator|.
name|valueOf
argument_list|(
name|data
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|clazz
operator|==
name|Integer
operator|.
name|class
operator|||
name|clazz
operator|==
name|int
operator|.
name|class
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|Integer
operator|.
name|valueOf
argument_list|(
name|data
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|clazz
operator|==
name|Double
operator|.
name|class
operator|||
name|clazz
operator|==
name|double
operator|.
name|class
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|Double
operator|.
name|valueOf
argument_list|(
name|data
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|clazz
operator|==
name|Float
operator|.
name|class
operator|||
name|clazz
operator|==
name|float
operator|.
name|class
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|Float
operator|.
name|valueOf
argument_list|(
name|data
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|clazz
operator|==
name|Boolean
operator|.
name|class
operator|||
name|clazz
operator|==
name|boolean
operator|.
name|class
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|Boolean
operator|.
name|valueOf
argument_list|(
name|data
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|clazz
operator|.
name|isEnum
argument_list|()
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|Enum
operator|.
name|valueOf
argument_list|(
operator|(
name|Class
argument_list|<
name|Enum
argument_list|>
operator|)
name|clazz
argument_list|,
name|data
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

