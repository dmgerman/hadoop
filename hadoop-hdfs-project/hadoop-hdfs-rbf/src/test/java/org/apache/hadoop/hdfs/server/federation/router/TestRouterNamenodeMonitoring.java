begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.router
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_HA_NAMENODE_ID_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMESERVICE_ID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
operator|.
name|RBFConfigKeys
operator|.
name|DFS_ROUTER_MONITOR_NAMENODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|RouterConfigBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|RouterDFSCluster
operator|.
name|NamenodeContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|RouterDFSCluster
operator|.
name|RouterContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|StateStoreDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|FederationNamenodeContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|MembershipNamenodeResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test namenodes monitor behavior in the Router.  */
end_comment

begin_class
DECL|class|TestRouterNamenodeMonitoring
specifier|public
class|class
name|TestRouterNamenodeMonitoring
block|{
DECL|field|cluster
specifier|private
specifier|static
name|StateStoreDFSCluster
name|cluster
decl_stmt|;
DECL|field|routerContext
specifier|private
specifier|static
name|RouterContext
name|routerContext
decl_stmt|;
DECL|field|resolver
specifier|private
specifier|static
name|MembershipNamenodeResolver
name|resolver
decl_stmt|;
DECL|field|ns0
specifier|private
name|String
name|ns0
decl_stmt|;
DECL|field|ns1
specifier|private
name|String
name|ns1
decl_stmt|;
DECL|field|initializedTime
specifier|private
name|long
name|initializedTime
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Build and start a federated cluster with HA enabled
name|cluster
operator|=
operator|new
name|StateStoreDFSCluster
argument_list|(
literal|true
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Enable heartbeat service and local heartbeat
name|Configuration
name|routerConf
init|=
operator|new
name|RouterConfigBuilder
argument_list|()
operator|.
name|stateStore
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|rpc
argument_list|()
operator|.
name|enableLocalHeartbeat
argument_list|(
literal|true
argument_list|)
operator|.
name|heartbeat
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// Specify local node (ns0.nn1) to monitor
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|ns0
operator|=
name|cluster
operator|.
name|getNameservices
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|NamenodeContext
name|context
init|=
name|cluster
operator|.
name|getNamenodes
argument_list|(
name|ns0
argument_list|)
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|routerConf
operator|.
name|set
argument_list|(
name|DFS_NAMESERVICE_ID
argument_list|,
name|ns0
argument_list|)
expr_stmt|;
name|routerConf
operator|.
name|set
argument_list|(
name|DFS_HA_NAMENODE_ID_KEY
argument_list|,
name|context
operator|.
name|getNamenodeId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Specify namenodes (ns1.nn0,ns1.nn1) to monitor
name|sb
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
name|ns1
operator|=
name|cluster
operator|.
name|getNameservices
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|NamenodeContext
name|ctx
range|:
name|cluster
operator|.
name|getNamenodes
argument_list|(
name|ns1
argument_list|)
control|)
block|{
name|String
name|suffix
init|=
name|ctx
operator|.
name|getConfSuffix
argument_list|()
decl_stmt|;
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|suffix
argument_list|)
expr_stmt|;
block|}
comment|// override with the namenodes: ns1.nn0,ns1.nn1
name|routerConf
operator|.
name|set
argument_list|(
name|DFS_ROUTER_MONITOR_NAMENODE
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|addRouterOverrides
argument_list|(
name|routerConf
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|startCluster
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|startRouters
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitClusterUp
argument_list|()
expr_stmt|;
name|routerContext
operator|=
name|cluster
operator|.
name|getRandomRouter
argument_list|()
expr_stmt|;
name|resolver
operator|=
operator|(
name|MembershipNamenodeResolver
operator|)
name|routerContext
operator|.
name|getRouter
argument_list|()
operator|.
name|getNamenodeResolver
argument_list|()
expr_stmt|;
name|initializedTime
operator|=
name|Time
operator|.
name|now
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|stopRouter
argument_list|(
name|routerContext
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testNamenodeMonitoring ()
specifier|public
name|void
name|testNamenodeMonitoring
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Set nn0 to active for all nameservices
for|for
control|(
name|String
name|ns
range|:
name|cluster
operator|.
name|getNameservices
argument_list|()
control|)
block|{
name|cluster
operator|.
name|switchToActive
argument_list|(
name|ns
argument_list|,
literal|"nn0"
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|switchToStandby
argument_list|(
name|ns
argument_list|,
literal|"nn1"
argument_list|)
expr_stmt|;
block|}
name|Collection
argument_list|<
name|NamenodeHeartbeatService
argument_list|>
name|heartbeatServices
init|=
name|routerContext
operator|.
name|getRouter
argument_list|()
operator|.
name|getNamenodeHearbeatServices
argument_list|()
decl_stmt|;
comment|// manually trigger the heartbeat
for|for
control|(
name|NamenodeHeartbeatService
name|service
range|:
name|heartbeatServices
control|)
block|{
name|service
operator|.
name|periodicInvoke
argument_list|()
expr_stmt|;
block|}
name|resolver
operator|.
name|loadCache
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|FederationNamenodeContext
argument_list|>
name|namespaceInfo0
init|=
name|resolver
operator|.
name|getNamenodesForNameserviceId
argument_list|(
name|ns0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|FederationNamenodeContext
argument_list|>
name|namespaceInfo1
init|=
name|resolver
operator|.
name|getNamenodesForNameserviceId
argument_list|(
name|ns1
argument_list|)
decl_stmt|;
comment|// The modified date won't be updated in ns0.nn0 since it isn't
comment|// monitored by the Router.
name|assertEquals
argument_list|(
literal|"nn0"
argument_list|,
name|namespaceInfo0
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getNamenodeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|namespaceInfo0
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getDateModified
argument_list|()
operator|<
name|initializedTime
argument_list|)
expr_stmt|;
comment|// other namnodes should be updated as expected
name|assertEquals
argument_list|(
literal|"nn1"
argument_list|,
name|namespaceInfo0
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getNamenodeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|namespaceInfo0
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDateModified
argument_list|()
operator|>
name|initializedTime
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"nn0"
argument_list|,
name|namespaceInfo1
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getNamenodeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|namespaceInfo1
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDateModified
argument_list|()
operator|>
name|initializedTime
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"nn1"
argument_list|,
name|namespaceInfo1
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getNamenodeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|namespaceInfo1
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getDateModified
argument_list|()
operator|>
name|initializedTime
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

