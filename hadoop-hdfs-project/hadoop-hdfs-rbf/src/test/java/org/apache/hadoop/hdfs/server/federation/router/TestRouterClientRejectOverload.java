begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.router
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|FederationTestUtils
operator|.
name|simulateSlowNamenode
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|FederationTestUtils
operator|.
name|simulateThrowExceptionRouterRpcServer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|FederationTestUtils
operator|.
name|transitionClusterNSToStandby
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|FederationTestUtils
operator|.
name|transitionClusterNSToActive
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
operator|.
name|assertExceptionContains
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|MiniRouterDFSCluster
operator|.
name|RouterContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|RouterConfigBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|StateStoreDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|metrics
operator|.
name|FederationRPCMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|StandbyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Test the Router overload control which rejects requests when the RPC client  * is overloaded. This feature is managed by  * {@link RBFConfigKeys#DFS_ROUTER_CLIENT_REJECT_OVERLOAD}.  */
end_comment

begin_class
DECL|class|TestRouterClientRejectOverload
specifier|public
class|class
name|TestRouterClientRejectOverload
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestRouterClientRejectOverload
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|cluster
specifier|private
name|StateStoreDFSCluster
name|cluster
decl_stmt|;
annotation|@
name|After
DECL|method|cleanup ()
specifier|public
name|void
name|cleanup
parameter_list|()
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Rule
DECL|field|exceptionRule
specifier|public
name|ExpectedException
name|exceptionRule
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
DECL|method|setupCluster (boolean overloadControl, boolean ha)
specifier|private
name|void
name|setupCluster
parameter_list|(
name|boolean
name|overloadControl
parameter_list|,
name|boolean
name|ha
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Build and start a federated cluster
name|cluster
operator|=
operator|new
name|StateStoreDFSCluster
argument_list|(
name|ha
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Configuration
name|routerConf
init|=
operator|new
name|RouterConfigBuilder
argument_list|()
operator|.
name|stateStore
argument_list|()
operator|.
name|metrics
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|rpc
argument_list|()
operator|.
name|heartbeat
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// Reduce the number of RPC clients threads to overload the Router easy
name|routerConf
operator|.
name|setInt
argument_list|(
name|RBFConfigKeys
operator|.
name|DFS_ROUTER_CLIENT_THREADS_SIZE
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|// Overload control
name|routerConf
operator|.
name|setBoolean
argument_list|(
name|RBFConfigKeys
operator|.
name|DFS_ROUTER_CLIENT_REJECT_OVERLOAD
argument_list|,
name|overloadControl
argument_list|)
expr_stmt|;
comment|// No need for datanodes as we use renewLease() for testing
name|cluster
operator|.
name|setNumDatanodesPerNameservice
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|addRouterOverrides
argument_list|(
name|routerConf
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|startCluster
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|startRouters
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitClusterUp
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWithoutOverloadControl ()
specifier|public
name|void
name|testWithoutOverloadControl
parameter_list|()
throws|throws
name|Exception
block|{
name|setupCluster
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Nobody should get overloaded
name|testOverloaded
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Set subcluster 0 as slow
name|MiniDFSCluster
name|dfsCluster
init|=
name|cluster
operator|.
name|getCluster
argument_list|()
decl_stmt|;
name|NameNode
name|nn0
init|=
name|dfsCluster
operator|.
name|getNameNode
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|simulateSlowNamenode
argument_list|(
name|nn0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Nobody should get overloaded, but it will be really slow
name|testOverloaded
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// No rejected requests expected
for|for
control|(
name|RouterContext
name|router
range|:
name|cluster
operator|.
name|getRouters
argument_list|()
control|)
block|{
name|FederationRPCMetrics
name|rpcMetrics
init|=
name|router
operator|.
name|getRouter
argument_list|()
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getRPCMetrics
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rpcMetrics
operator|.
name|getProxyOpFailureClientOverloaded
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testOverloadControl ()
specifier|public
name|void
name|testOverloadControl
parameter_list|()
throws|throws
name|Exception
block|{
name|setupCluster
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RouterContext
argument_list|>
name|routers
init|=
name|cluster
operator|.
name|getRouters
argument_list|()
decl_stmt|;
name|FederationRPCMetrics
name|rpcMetrics0
init|=
name|routers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRouter
argument_list|()
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getRPCMetrics
argument_list|()
decl_stmt|;
name|FederationRPCMetrics
name|rpcMetrics1
init|=
name|routers
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getRouter
argument_list|()
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getRPCMetrics
argument_list|()
decl_stmt|;
comment|// Nobody should get overloaded
name|testOverloaded
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rpcMetrics0
operator|.
name|getProxyOpFailureClientOverloaded
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rpcMetrics1
operator|.
name|getProxyOpFailureClientOverloaded
argument_list|()
argument_list|)
expr_stmt|;
comment|// Set subcluster 0 as slow
name|MiniDFSCluster
name|dfsCluster
init|=
name|cluster
operator|.
name|getCluster
argument_list|()
decl_stmt|;
name|NameNode
name|nn0
init|=
name|dfsCluster
operator|.
name|getNameNode
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|simulateSlowNamenode
argument_list|(
name|nn0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// The subcluster should be overloaded now and reject 4-5 requests
name|testOverloaded
argument_list|(
literal|4
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rpcMetrics0
operator|.
name|getProxyOpFailureClientOverloaded
argument_list|()
operator|+
name|rpcMetrics1
operator|.
name|getProxyOpFailureClientOverloaded
argument_list|()
operator|>=
literal|4
argument_list|)
expr_stmt|;
comment|// Client using HA with 2 Routers
comment|// A single Router gets overloaded, but 2 will handle it
name|Configuration
name|clientConf
init|=
name|cluster
operator|.
name|getRouterClientConf
argument_list|()
decl_stmt|;
comment|// Each Router should get a similar number of ops (>=8) out of 2*10
name|long
name|iniProxyOps0
init|=
name|rpcMetrics0
operator|.
name|getProxyOps
argument_list|()
decl_stmt|;
name|long
name|iniProxyOps1
init|=
name|rpcMetrics1
operator|.
name|getProxyOps
argument_list|()
decl_stmt|;
name|testOverloaded
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|new
name|URI
argument_list|(
literal|"hdfs://fed/"
argument_list|)
argument_list|,
name|clientConf
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|long
name|proxyOps0
init|=
name|rpcMetrics0
operator|.
name|getProxyOps
argument_list|()
operator|-
name|iniProxyOps0
decl_stmt|;
name|long
name|proxyOps1
init|=
name|rpcMetrics1
operator|.
name|getProxyOps
argument_list|()
operator|-
name|iniProxyOps1
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
literal|10
argument_list|,
name|proxyOps0
operator|+
name|proxyOps1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|proxyOps0
operator|+
literal|" operations: not distributed"
argument_list|,
name|proxyOps0
operator|>=
literal|8
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|proxyOps1
operator|+
literal|" operations: not distributed"
argument_list|,
name|proxyOps1
operator|>=
literal|8
argument_list|)
expr_stmt|;
block|}
DECL|method|testOverloaded (int expOverload)
specifier|private
name|void
name|testOverloaded
parameter_list|(
name|int
name|expOverload
parameter_list|)
throws|throws
name|Exception
block|{
name|testOverloaded
argument_list|(
name|expOverload
argument_list|,
name|expOverload
argument_list|)
expr_stmt|;
block|}
DECL|method|testOverloaded (int expOverloadMin, int expOverloadMax)
specifier|private
name|void
name|testOverloaded
parameter_list|(
name|int
name|expOverloadMin
parameter_list|,
name|int
name|expOverloadMax
parameter_list|)
throws|throws
name|Exception
block|{
name|RouterContext
name|routerContext
init|=
name|cluster
operator|.
name|getRandomRouter
argument_list|()
decl_stmt|;
name|URI
name|address
init|=
name|routerContext
operator|.
name|getFileSystemURI
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|testOverloaded
argument_list|(
name|expOverloadMin
argument_list|,
name|expOverloadMax
argument_list|,
name|address
argument_list|,
name|conf
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test if the Router gets overloaded by submitting requests in parallel.    * We check how many requests got rejected at the end.    * @param expOverloadMin Min number of requests expected as overloaded.    * @param expOverloadMax Max number of requests expected as overloaded.    * @param address Destination address.    * @param conf Configuration of the client.    * @param numOps Number of operations to submit.    * @throws Exception If it cannot perform the test.    */
DECL|method|testOverloaded (int expOverloadMin, int expOverloadMax, final URI address, final Configuration conf, final int numOps)
specifier|private
name|void
name|testOverloaded
parameter_list|(
name|int
name|expOverloadMin
parameter_list|,
name|int
name|expOverloadMax
parameter_list|,
specifier|final
name|URI
name|address
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|int
name|numOps
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Submit renewLease() ops which go to all subclusters
specifier|final
name|AtomicInteger
name|overloadException
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|ExecutorService
name|exec
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|numOps
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Future
argument_list|<
name|?
argument_list|>
argument_list|>
name|futures
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOps
condition|;
name|i
operator|++
control|)
block|{
comment|// Stagger the operations a little (50ms)
specifier|final
name|int
name|sleepTime
init|=
name|i
operator|*
literal|50
decl_stmt|;
name|Future
argument_list|<
name|?
argument_list|>
name|future
init|=
name|exec
operator|.
name|submit
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|DFSClient
name|routerClient
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
name|routerClient
operator|=
operator|new
name|DFSClient
argument_list|(
name|address
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|String
name|clientName
init|=
name|routerClient
operator|.
name|getClientName
argument_list|()
decl_stmt|;
name|ClientProtocol
name|routerProto
init|=
name|routerClient
operator|.
name|getNamenode
argument_list|()
decl_stmt|;
name|routerProto
operator|.
name|renewLease
argument_list|(
name|clientName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|re
parameter_list|)
block|{
name|IOException
name|ioe
init|=
name|re
operator|.
name|unwrapRemoteException
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Wrong exception: "
operator|+
name|ioe
argument_list|,
name|ioe
operator|instanceof
name|StandbyException
argument_list|)
expr_stmt|;
name|assertExceptionContains
argument_list|(
literal|"is overloaded"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
name|overloadException
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Unexpected exception: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Cannot sleep: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|routerClient
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|routerClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot close the client"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|futures
operator|.
name|add
argument_list|(
name|future
argument_list|)
expr_stmt|;
block|}
comment|// Wait until all the requests are done
while|while
condition|(
operator|!
name|futures
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|futures
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|exec
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|int
name|num
init|=
name|overloadException
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|expOverloadMin
operator|==
name|expOverloadMax
condition|)
block|{
name|assertEquals
argument_list|(
name|expOverloadMin
argument_list|,
name|num
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
literal|"Expected>="
operator|+
name|expOverloadMin
operator|+
literal|" but was "
operator|+
name|num
argument_list|,
name|num
operator|>=
name|expOverloadMin
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected<="
operator|+
name|expOverloadMax
operator|+
literal|" but was "
operator|+
name|num
argument_list|,
name|num
operator|<=
name|expOverloadMax
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testConnectionNullException ()
specifier|public
name|void
name|testConnectionNullException
parameter_list|()
throws|throws
name|Exception
block|{
name|setupCluster
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Choose 1st router
name|RouterContext
name|routerContext
init|=
name|cluster
operator|.
name|getRouters
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Router
name|router
init|=
name|routerContext
operator|.
name|getRouter
argument_list|()
decl_stmt|;
comment|// This router will throw ConnectionNullException
name|simulateThrowExceptionRouterRpcServer
argument_list|(
name|router
operator|.
name|getRpcServer
argument_list|()
argument_list|)
expr_stmt|;
comment|// Set dfs.client.failover.random.order false, to pick 1st router at first
name|Configuration
name|conf
init|=
name|cluster
operator|.
name|getRouterClientConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"dfs.client.failover.random.order"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Client to access Router Cluster
name|DFSClient
name|routerClient
init|=
operator|new
name|DFSClient
argument_list|(
operator|new
name|URI
argument_list|(
literal|"hdfs://fed"
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// Get router0 metrics
name|FederationRPCMetrics
name|rpcMetrics0
init|=
name|cluster
operator|.
name|getRouters
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRouter
argument_list|()
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getRPCMetrics
argument_list|()
decl_stmt|;
comment|// Get router1 metrics
name|FederationRPCMetrics
name|rpcMetrics1
init|=
name|cluster
operator|.
name|getRouters
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getRouter
argument_list|()
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getRPCMetrics
argument_list|()
decl_stmt|;
comment|// Original failures
name|long
name|originalRouter0Failures
init|=
name|rpcMetrics0
operator|.
name|getProxyOpFailureCommunicate
argument_list|()
decl_stmt|;
name|long
name|originalRouter1Failures
init|=
name|rpcMetrics1
operator|.
name|getProxyOpFailureCommunicate
argument_list|()
decl_stmt|;
comment|// RPC call must be successful
name|routerClient
operator|.
name|getFileInfo
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
comment|// Router 0 failures will increase
name|assertEquals
argument_list|(
name|originalRouter0Failures
operator|+
literal|1
argument_list|,
name|rpcMetrics0
operator|.
name|getProxyOpFailureCommunicate
argument_list|()
argument_list|)
expr_stmt|;
comment|// Router 1 failures will not change
name|assertEquals
argument_list|(
name|originalRouter1Failures
argument_list|,
name|rpcMetrics1
operator|.
name|getProxyOpFailureCommunicate
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * When failover occurs, no namenodes are available within a short time.    * Client will success after some retries.    */
annotation|@
name|Test
DECL|method|testNoNamenodesAvailable ()
specifier|public
name|void
name|testNoNamenodesAvailable
parameter_list|()
throws|throws
name|Exception
block|{
name|setupCluster
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|transitionClusterNSToStandby
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|cluster
operator|.
name|getRouterClientConf
argument_list|()
decl_stmt|;
comment|// Set dfs.client.failover.random.order false, to pick 1st router at first
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"dfs.client.failover.random.order"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Retries is 3 (see FailoverOnNetworkExceptionRetry#shouldRetry, will fail
comment|// when reties> max.attempts), so total access is 4.
name|conf
operator|.
name|setInt
argument_list|(
literal|"dfs.client.retry.max.attempts"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|DFSClient
name|routerClient
init|=
operator|new
name|DFSClient
argument_list|(
operator|new
name|URI
argument_list|(
literal|"hdfs://fed"
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// Get router0 metrics
name|FederationRPCMetrics
name|rpcMetrics0
init|=
name|cluster
operator|.
name|getRouters
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRouter
argument_list|()
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getRPCMetrics
argument_list|()
decl_stmt|;
comment|// Get router1 metrics
name|FederationRPCMetrics
name|rpcMetrics1
init|=
name|cluster
operator|.
name|getRouters
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getRouter
argument_list|()
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getRPCMetrics
argument_list|()
decl_stmt|;
comment|// Original failures
name|long
name|originalRouter0Failures
init|=
name|rpcMetrics0
operator|.
name|getProxyOpNoNamenodes
argument_list|()
decl_stmt|;
name|long
name|originalRouter1Failures
init|=
name|rpcMetrics1
operator|.
name|getProxyOpNoNamenodes
argument_list|()
decl_stmt|;
comment|// GetFileInfo will throw Exception
name|String
name|exceptionMessage
init|=
literal|"org.apache.hadoop.hdfs.server.federation."
operator|+
literal|"router.NoNamenodesAvailableException: No namenodes available "
operator|+
literal|"under nameservice ns0"
decl_stmt|;
name|exceptionRule
operator|.
name|expect
argument_list|(
name|RemoteException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exceptionRule
operator|.
name|expectMessage
argument_list|(
name|exceptionMessage
argument_list|)
expr_stmt|;
name|routerClient
operator|.
name|getFileInfo
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
comment|// Router 0 failures will increase
name|assertEquals
argument_list|(
name|originalRouter0Failures
operator|+
literal|4
argument_list|,
name|rpcMetrics0
operator|.
name|getProxyOpNoNamenodes
argument_list|()
argument_list|)
expr_stmt|;
comment|// Router 1 failures do not change
name|assertEquals
argument_list|(
name|originalRouter1Failures
argument_list|,
name|rpcMetrics1
operator|.
name|getProxyOpNoNamenodes
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make name services available
name|transitionClusterNSToActive
argument_list|(
name|cluster
argument_list|,
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|RouterContext
name|routerContext
range|:
name|cluster
operator|.
name|getRouters
argument_list|()
control|)
block|{
comment|// Manually trigger the heartbeat
name|Collection
argument_list|<
name|NamenodeHeartbeatService
argument_list|>
name|heartbeatServices
init|=
name|routerContext
operator|.
name|getRouter
argument_list|()
operator|.
name|getNamenodeHeartbeatServices
argument_list|()
decl_stmt|;
for|for
control|(
name|NamenodeHeartbeatService
name|service
range|:
name|heartbeatServices
control|)
block|{
name|service
operator|.
name|periodicInvoke
argument_list|()
expr_stmt|;
block|}
comment|// Update service cache
name|routerContext
operator|.
name|getRouter
argument_list|()
operator|.
name|getStateStore
argument_list|()
operator|.
name|refreshCaches
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|originalRouter0Failures
operator|=
name|rpcMetrics0
operator|.
name|getProxyOpNoNamenodes
argument_list|()
expr_stmt|;
comment|// RPC call must be successful
name|routerClient
operator|.
name|getFileInfo
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
comment|// Router 0 failures do not change
name|assertEquals
argument_list|(
name|originalRouter0Failures
argument_list|,
name|rpcMetrics0
operator|.
name|getProxyOpNoNamenodes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

