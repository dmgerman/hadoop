begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.resolver.order
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|order
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doAnswer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|FederationNamenodeServiceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|MultipleDestinationMountTableResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|PathLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|RemoteLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
operator|.
name|Router
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|MembershipStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|StateStoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|GetNamenodeRegistrationsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|GetNamenodeRegistrationsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|MembershipState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|MountTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_comment
comment|/**  * Test the {@link LocalResolver}.  */
end_comment

begin_class
DECL|class|TestLocalResolver
specifier|public
class|class
name|TestLocalResolver
block|{
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testLocalResolver ()
specifier|public
name|void
name|testLocalResolver
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Mock the subcluster mapping
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Router
name|router
init|=
name|mock
argument_list|(
name|Router
operator|.
name|class
argument_list|)
decl_stmt|;
name|StateStoreService
name|stateStore
init|=
name|mock
argument_list|(
name|StateStoreService
operator|.
name|class
argument_list|)
decl_stmt|;
name|MembershipStore
name|membership
init|=
name|mock
argument_list|(
name|MembershipStore
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|router
operator|.
name|getStateStore
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|stateStore
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|stateStore
operator|.
name|getRegisteredRecordStore
argument_list|(
name|any
argument_list|(
name|Class
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|membership
argument_list|)
expr_stmt|;
name|GetNamenodeRegistrationsResponse
name|response
init|=
name|GetNamenodeRegistrationsResponse
operator|.
name|newInstance
argument_list|()
decl_stmt|;
comment|// Set the mapping for each client
name|List
argument_list|<
name|MembershipState
argument_list|>
name|records
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|records
operator|.
name|add
argument_list|(
name|newMembershipState
argument_list|(
literal|"client0"
argument_list|,
literal|"subcluster0"
argument_list|)
argument_list|)
expr_stmt|;
name|records
operator|.
name|add
argument_list|(
name|newMembershipState
argument_list|(
literal|"client1"
argument_list|,
literal|"subcluster1"
argument_list|)
argument_list|)
expr_stmt|;
name|records
operator|.
name|add
argument_list|(
name|newMembershipState
argument_list|(
literal|"client2"
argument_list|,
literal|"subcluster2"
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|setNamenodeMemberships
argument_list|(
name|records
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|membership
operator|.
name|getNamenodeRegistrations
argument_list|(
name|any
argument_list|(
name|GetNamenodeRegistrationsRequest
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|response
argument_list|)
expr_stmt|;
comment|// Mock the client resolution: it will be anything in sb
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"clientX"
argument_list|)
decl_stmt|;
name|LocalResolver
name|localResolver
init|=
operator|new
name|LocalResolver
argument_list|(
name|conf
argument_list|,
name|router
argument_list|)
decl_stmt|;
name|LocalResolver
name|spyLocalResolver
init|=
name|spy
argument_list|(
name|localResolver
argument_list|)
decl_stmt|;
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|spyLocalResolver
argument_list|)
operator|.
name|getClientAddr
argument_list|()
expr_stmt|;
comment|// Add the mocks to the resolver
name|MultipleDestinationMountTableResolver
name|resolver
init|=
operator|new
name|MultipleDestinationMountTableResolver
argument_list|(
name|conf
argument_list|,
name|router
argument_list|)
decl_stmt|;
name|resolver
operator|.
name|addResolver
argument_list|(
name|DestinationOrder
operator|.
name|LOCAL
argument_list|,
name|spyLocalResolver
argument_list|)
expr_stmt|;
comment|// We point /local to subclusters 0, 1, 2 with the local order
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mapLocal
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|mapLocal
operator|.
name|put
argument_list|(
literal|"subcluster0"
argument_list|,
literal|"/local"
argument_list|)
expr_stmt|;
name|mapLocal
operator|.
name|put
argument_list|(
literal|"subcluster1"
argument_list|,
literal|"/local"
argument_list|)
expr_stmt|;
name|mapLocal
operator|.
name|put
argument_list|(
literal|"subcluster2"
argument_list|,
literal|"/local"
argument_list|)
expr_stmt|;
name|MountTable
name|localEntry
init|=
name|MountTable
operator|.
name|newInstance
argument_list|(
literal|"/local"
argument_list|,
name|mapLocal
argument_list|)
decl_stmt|;
name|localEntry
operator|.
name|setDestOrder
argument_list|(
name|DestinationOrder
operator|.
name|LOCAL
argument_list|)
expr_stmt|;
name|resolver
operator|.
name|addEntry
argument_list|(
name|localEntry
argument_list|)
expr_stmt|;
comment|// Test first with the default destination
name|PathLocation
name|dest
init|=
name|resolver
operator|.
name|getDestinationForPath
argument_list|(
literal|"/local/file0.txt"
argument_list|)
decl_stmt|;
name|assertDestination
argument_list|(
literal|"subcluster0"
argument_list|,
name|dest
argument_list|)
expr_stmt|;
comment|// We change the client location and verify
name|setClient
argument_list|(
name|sb
argument_list|,
literal|"client2"
argument_list|)
expr_stmt|;
name|dest
operator|=
name|resolver
operator|.
name|getDestinationForPath
argument_list|(
literal|"/local/file0.txt"
argument_list|)
expr_stmt|;
name|assertDestination
argument_list|(
literal|"subcluster2"
argument_list|,
name|dest
argument_list|)
expr_stmt|;
name|setClient
argument_list|(
name|sb
argument_list|,
literal|"client1"
argument_list|)
expr_stmt|;
name|dest
operator|=
name|resolver
operator|.
name|getDestinationForPath
argument_list|(
literal|"/local/file0.txt"
argument_list|)
expr_stmt|;
name|assertDestination
argument_list|(
literal|"subcluster1"
argument_list|,
name|dest
argument_list|)
expr_stmt|;
name|setClient
argument_list|(
name|sb
argument_list|,
literal|"client0"
argument_list|)
expr_stmt|;
name|dest
operator|=
name|resolver
operator|.
name|getDestinationForPath
argument_list|(
literal|"/local/file0.txt"
argument_list|)
expr_stmt|;
name|assertDestination
argument_list|(
literal|"subcluster0"
argument_list|,
name|dest
argument_list|)
expr_stmt|;
block|}
DECL|method|assertDestination (String expectedNsId, PathLocation loc)
specifier|private
name|void
name|assertDestination
parameter_list|(
name|String
name|expectedNsId
parameter_list|,
name|PathLocation
name|loc
parameter_list|)
block|{
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|dests
init|=
name|loc
operator|.
name|getDestinations
argument_list|()
decl_stmt|;
name|RemoteLocation
name|dest
init|=
name|dests
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedNsId
argument_list|,
name|dest
operator|.
name|getNameserviceId
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|newMembershipState (String addr, String nsId)
specifier|private
name|MembershipState
name|newMembershipState
parameter_list|(
name|String
name|addr
parameter_list|,
name|String
name|nsId
parameter_list|)
block|{
return|return
name|MembershipState
operator|.
name|newInstance
argument_list|(
literal|"routerId"
argument_list|,
name|nsId
argument_list|,
literal|"nn0"
argument_list|,
literal|"cluster0"
argument_list|,
literal|"blockPool0"
argument_list|,
name|addr
operator|+
literal|":8001"
argument_list|,
name|addr
operator|+
literal|":8002"
argument_list|,
name|addr
operator|+
literal|":8003"
argument_list|,
name|addr
operator|+
literal|":8004"
argument_list|,
name|FederationNamenodeServiceState
operator|.
name|ACTIVE
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Set the address of the client issuing the request. We use a StringBuilder    * to modify the value in place for the mock.    * @param sb StringBuilder to set the client string.    * @param client Address of the client.    */
DECL|method|setClient (StringBuilder sb, String client)
specifier|private
specifier|static
name|void
name|setClient
parameter_list|(
name|StringBuilder
name|sb
parameter_list|,
name|String
name|client
parameter_list|)
block|{
name|sb
operator|.
name|replace
argument_list|(
literal|0
argument_list|,
name|sb
operator|.
name|length
argument_list|()
argument_list|,
name|client
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

