begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.router
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|RouterConfigBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|federation
operator|.
name|RouterAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RefreshHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RefreshRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RefreshResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Before all tests, a router is spun up.  * Before each test, mock refresh handlers are created and registered.  * After each test, the mock handlers are unregistered.  * After all tests, the router is spun down.  */
end_comment

begin_class
DECL|class|TestRouterAdminGenericRefresh
specifier|public
class|class
name|TestRouterAdminGenericRefresh
block|{
DECL|field|router
specifier|private
specifier|static
name|Router
name|router
decl_stmt|;
DECL|field|admin
specifier|private
specifier|static
name|RouterAdmin
name|admin
decl_stmt|;
DECL|field|firstHandler
specifier|private
specifier|static
name|RefreshHandler
name|firstHandler
decl_stmt|;
DECL|field|secondHandler
specifier|private
specifier|static
name|RefreshHandler
name|secondHandler
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setUpBeforeClass ()
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Build and start a router with admin + RPC
name|router
operator|=
operator|new
name|Router
argument_list|()
expr_stmt|;
name|Configuration
name|config
init|=
operator|new
name|RouterConfigBuilder
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|rpc
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|router
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|router
operator|.
name|start
argument_list|()
expr_stmt|;
name|admin
operator|=
operator|new
name|RouterAdmin
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|tearDownBeforeClass ()
specifier|public
specifier|static
name|void
name|tearDownBeforeClass
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|router
operator|!=
literal|null
condition|)
block|{
name|router
operator|.
name|stop
argument_list|()
expr_stmt|;
name|router
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Register Handlers, first one just sends an ok response
name|firstHandler
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|RefreshHandler
operator|.
name|class
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|firstHandler
operator|.
name|handleRefresh
argument_list|(
name|Mockito
operator|.
name|anyString
argument_list|()
argument_list|,
name|Mockito
operator|.
name|any
argument_list|(
name|String
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|RefreshResponse
operator|.
name|successResponse
argument_list|()
argument_list|)
expr_stmt|;
name|RefreshRegistry
operator|.
name|defaultRegistry
argument_list|()
operator|.
name|register
argument_list|(
literal|"firstHandler"
argument_list|,
name|firstHandler
argument_list|)
expr_stmt|;
comment|// Second handler has conditional response for testing args
name|secondHandler
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|RefreshHandler
operator|.
name|class
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|secondHandler
operator|.
name|handleRefresh
argument_list|(
literal|"secondHandler"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"one"
block|,
literal|"two"
block|}
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|RefreshResponse
argument_list|(
literal|3
argument_list|,
literal|"three"
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|secondHandler
operator|.
name|handleRefresh
argument_list|(
literal|"secondHandler"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"one"
block|}
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|RefreshResponse
argument_list|(
literal|2
argument_list|,
literal|"two"
argument_list|)
argument_list|)
expr_stmt|;
name|RefreshRegistry
operator|.
name|defaultRegistry
argument_list|()
operator|.
name|register
argument_list|(
literal|"secondHandler"
argument_list|,
name|secondHandler
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|RefreshRegistry
operator|.
name|defaultRegistry
argument_list|()
operator|.
name|unregisterAll
argument_list|(
literal|"firstHandler"
argument_list|)
expr_stmt|;
name|RefreshRegistry
operator|.
name|defaultRegistry
argument_list|()
operator|.
name|unregisterAll
argument_list|(
literal|"secondHandler"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInvalidCommand ()
specifier|public
name|void
name|testInvalidCommand
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-refreshRouterArgs"
block|,
literal|"nn"
block|}
decl_stmt|;
name|int
name|exitCode
init|=
name|admin
operator|.
name|run
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"RouterAdmin should fail due to bad args"
argument_list|,
operator|-
literal|1
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInvalidIdentifier ()
specifier|public
name|void
name|testInvalidIdentifier
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|argv
init|=
operator|new
name|String
index|[]
block|{
literal|"-refreshRouterArgs"
block|,
literal|"localhost:"
operator|+
name|router
operator|.
name|getAdminServerAddress
argument_list|()
operator|.
name|getPort
argument_list|()
block|,
literal|"unregisteredIdentity"
block|}
decl_stmt|;
name|int
name|exitCode
init|=
name|admin
operator|.
name|run
argument_list|(
name|argv
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"RouterAdmin should fail due to no handler registered"
argument_list|,
operator|-
literal|1
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testValidIdentifier ()
specifier|public
name|void
name|testValidIdentifier
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-refreshRouterArgs"
block|,
literal|"localhost:"
operator|+
name|router
operator|.
name|getAdminServerAddress
argument_list|()
operator|.
name|getPort
argument_list|()
block|,
literal|"firstHandler"
block|}
decl_stmt|;
name|int
name|exitCode
init|=
name|admin
operator|.
name|run
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"RouterAdmin should succeed"
argument_list|,
literal|0
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|firstHandler
argument_list|)
operator|.
name|handleRefresh
argument_list|(
literal|"firstHandler"
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
expr_stmt|;
comment|// Second handler was never called
name|Mockito
operator|.
name|verify
argument_list|(
name|secondHandler
argument_list|,
name|Mockito
operator|.
name|never
argument_list|()
argument_list|)
operator|.
name|handleRefresh
argument_list|(
name|Mockito
operator|.
name|anyString
argument_list|()
argument_list|,
name|Mockito
operator|.
name|any
argument_list|(
name|String
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testVariableArgs ()
specifier|public
name|void
name|testVariableArgs
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-refreshRouterArgs"
block|,
literal|"localhost:"
operator|+
name|router
operator|.
name|getAdminServerAddress
argument_list|()
operator|.
name|getPort
argument_list|()
block|,
literal|"secondHandler"
block|,
literal|"one"
block|}
decl_stmt|;
name|int
name|exitCode
init|=
name|admin
operator|.
name|run
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"RouterAdmin should return 2"
argument_list|,
literal|2
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|exitCode
operator|=
name|admin
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-refreshRouterArgs"
block|,
literal|"localhost:"
operator|+
name|router
operator|.
name|getAdminServerAddress
argument_list|()
operator|.
name|getPort
argument_list|()
block|,
literal|"secondHandler"
block|,
literal|"one"
block|,
literal|"two"
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"RouterAdmin should now return 3"
argument_list|,
literal|3
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|secondHandler
argument_list|)
operator|.
name|handleRefresh
argument_list|(
literal|"secondHandler"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"one"
block|}
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|secondHandler
argument_list|)
operator|.
name|handleRefresh
argument_list|(
literal|"secondHandler"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"one"
block|,
literal|"two"
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUnregistration ()
specifier|public
name|void
name|testUnregistration
parameter_list|()
throws|throws
name|Exception
block|{
name|RefreshRegistry
operator|.
name|defaultRegistry
argument_list|()
operator|.
name|unregisterAll
argument_list|(
literal|"firstHandler"
argument_list|)
expr_stmt|;
comment|// And now this should fail
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-refreshRouterArgs"
block|,
literal|"localhost:"
operator|+
name|router
operator|.
name|getAdminServerAddress
argument_list|()
operator|.
name|getPort
argument_list|()
block|,
literal|"firstHandler"
block|}
decl_stmt|;
name|int
name|exitCode
init|=
name|admin
operator|.
name|run
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"RouterAdmin should return -1"
argument_list|,
operator|-
literal|1
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUnregistrationReturnValue ()
specifier|public
name|void
name|testUnregistrationReturnValue
parameter_list|()
block|{
name|RefreshHandler
name|mockHandler
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|RefreshHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|RefreshRegistry
operator|.
name|defaultRegistry
argument_list|()
operator|.
name|register
argument_list|(
literal|"test"
argument_list|,
name|mockHandler
argument_list|)
expr_stmt|;
name|boolean
name|ret
init|=
name|RefreshRegistry
operator|.
name|defaultRegistry
argument_list|()
operator|.
name|unregister
argument_list|(
literal|"test"
argument_list|,
name|mockHandler
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultipleRegistration ()
specifier|public
name|void
name|testMultipleRegistration
parameter_list|()
throws|throws
name|Exception
block|{
name|RefreshRegistry
operator|.
name|defaultRegistry
argument_list|()
operator|.
name|register
argument_list|(
literal|"sharedId"
argument_list|,
name|firstHandler
argument_list|)
expr_stmt|;
name|RefreshRegistry
operator|.
name|defaultRegistry
argument_list|()
operator|.
name|register
argument_list|(
literal|"sharedId"
argument_list|,
name|secondHandler
argument_list|)
expr_stmt|;
comment|// this should trigger both
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-refreshRouterArgs"
block|,
literal|"localhost:"
operator|+
name|router
operator|.
name|getAdminServerAddress
argument_list|()
operator|.
name|getPort
argument_list|()
block|,
literal|"sharedId"
block|,
literal|"one"
block|}
decl_stmt|;
name|int
name|exitCode
init|=
name|admin
operator|.
name|run
argument_list|(
name|args
argument_list|)
decl_stmt|;
comment|// -1 because one of the responses is unregistered
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
comment|// verify we called both
name|Mockito
operator|.
name|verify
argument_list|(
name|firstHandler
argument_list|)
operator|.
name|handleRefresh
argument_list|(
literal|"sharedId"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"one"
block|}
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|secondHandler
argument_list|)
operator|.
name|handleRefresh
argument_list|(
literal|"sharedId"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"one"
block|}
argument_list|)
expr_stmt|;
name|RefreshRegistry
operator|.
name|defaultRegistry
argument_list|()
operator|.
name|unregisterAll
argument_list|(
literal|"sharedId"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultipleReturnCodeMerging ()
specifier|public
name|void
name|testMultipleReturnCodeMerging
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Two handlers which return two non-zero values
name|RefreshHandler
name|handlerOne
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|RefreshHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|handlerOne
operator|.
name|handleRefresh
argument_list|(
name|Mockito
operator|.
name|anyString
argument_list|()
argument_list|,
name|Mockito
operator|.
name|any
argument_list|(
name|String
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|RefreshResponse
argument_list|(
literal|23
argument_list|,
literal|"Twenty Three"
argument_list|)
argument_list|)
expr_stmt|;
name|RefreshHandler
name|handlerTwo
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|RefreshHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|handlerTwo
operator|.
name|handleRefresh
argument_list|(
name|Mockito
operator|.
name|anyString
argument_list|()
argument_list|,
name|Mockito
operator|.
name|any
argument_list|(
name|String
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|RefreshResponse
argument_list|(
literal|10
argument_list|,
literal|"Ten"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Then registered to the same ID
name|RefreshRegistry
operator|.
name|defaultRegistry
argument_list|()
operator|.
name|register
argument_list|(
literal|"shared"
argument_list|,
name|handlerOne
argument_list|)
expr_stmt|;
name|RefreshRegistry
operator|.
name|defaultRegistry
argument_list|()
operator|.
name|register
argument_list|(
literal|"shared"
argument_list|,
name|handlerTwo
argument_list|)
expr_stmt|;
comment|// We refresh both
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-refreshRouterArgs"
block|,
literal|"localhost:"
operator|+
name|router
operator|.
name|getAdminServerAddress
argument_list|()
operator|.
name|getPort
argument_list|()
block|,
literal|"shared"
block|}
decl_stmt|;
name|int
name|exitCode
init|=
name|admin
operator|.
name|run
argument_list|(
name|args
argument_list|)
decl_stmt|;
comment|// We get -1 because of our logic for melding non-zero return codes
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
comment|// Verify we called both
name|Mockito
operator|.
name|verify
argument_list|(
name|handlerOne
argument_list|)
operator|.
name|handleRefresh
argument_list|(
literal|"shared"
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|handlerTwo
argument_list|)
operator|.
name|handleRefresh
argument_list|(
literal|"shared"
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
expr_stmt|;
name|RefreshRegistry
operator|.
name|defaultRegistry
argument_list|()
operator|.
name|unregisterAll
argument_list|(
literal|"shared"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExceptionResultsInNormalError ()
specifier|public
name|void
name|testExceptionResultsInNormalError
parameter_list|()
throws|throws
name|Exception
block|{
comment|// In this test, we ensure that all handlers are called
comment|// even if we throw an exception in one
name|RefreshHandler
name|exceptionalHandler
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|RefreshHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|exceptionalHandler
operator|.
name|handleRefresh
argument_list|(
name|Mockito
operator|.
name|anyString
argument_list|()
argument_list|,
name|Mockito
operator|.
name|any
argument_list|(
name|String
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|RuntimeException
argument_list|(
literal|"Exceptional Handler Throws Exception"
argument_list|)
argument_list|)
expr_stmt|;
name|RefreshHandler
name|otherExceptionalHandler
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|RefreshHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|otherExceptionalHandler
operator|.
name|handleRefresh
argument_list|(
name|Mockito
operator|.
name|anyString
argument_list|()
argument_list|,
name|Mockito
operator|.
name|any
argument_list|(
name|String
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|RuntimeException
argument_list|(
literal|"More Exceptions"
argument_list|)
argument_list|)
expr_stmt|;
name|RefreshRegistry
operator|.
name|defaultRegistry
argument_list|()
operator|.
name|register
argument_list|(
literal|"exceptional"
argument_list|,
name|exceptionalHandler
argument_list|)
expr_stmt|;
name|RefreshRegistry
operator|.
name|defaultRegistry
argument_list|()
operator|.
name|register
argument_list|(
literal|"exceptional"
argument_list|,
name|otherExceptionalHandler
argument_list|)
expr_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-refreshRouterArgs"
block|,
literal|"localhost:"
operator|+
name|router
operator|.
name|getAdminServerAddress
argument_list|()
operator|.
name|getPort
argument_list|()
block|,
literal|"exceptional"
block|}
decl_stmt|;
name|int
name|exitCode
init|=
name|admin
operator|.
name|run
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
comment|// Exceptions result in a -1
name|Mockito
operator|.
name|verify
argument_list|(
name|exceptionalHandler
argument_list|)
operator|.
name|handleRefresh
argument_list|(
literal|"exceptional"
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|otherExceptionalHandler
argument_list|)
operator|.
name|handleRefresh
argument_list|(
literal|"exceptional"
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
expr_stmt|;
name|RefreshRegistry
operator|.
name|defaultRegistry
argument_list|()
operator|.
name|unregisterAll
argument_list|(
literal|"exceptional"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

