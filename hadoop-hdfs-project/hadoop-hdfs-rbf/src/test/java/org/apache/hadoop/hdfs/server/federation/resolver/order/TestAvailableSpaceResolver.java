begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.resolver.order
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|order
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|order
operator|.
name|AvailableSpaceResolver
operator|.
name|BALANCER_PREFERENCE_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|order
operator|.
name|AvailableSpaceResolver
operator|.
name|BALANCER_PREFERENCE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|MultipleDestinationMountTableResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|PathLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|order
operator|.
name|AvailableSpaceResolver
operator|.
name|SubclusterAvailableSpace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|order
operator|.
name|AvailableSpaceResolver
operator|.
name|SubclusterSpaceComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
operator|.
name|Router
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|MembershipStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|StateStoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|GetNamenodeRegistrationsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|GetNamenodeRegistrationsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|MembershipState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|MembershipStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|MountTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|MembershipStatsPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test the {@link AvailableSpaceResolver}.  */
end_comment

begin_class
DECL|class|TestAvailableSpaceResolver
specifier|public
class|class
name|TestAvailableSpaceResolver
block|{
DECL|field|SUBCLUSTER_NUM
specifier|private
specifier|static
specifier|final
name|int
name|SUBCLUSTER_NUM
init|=
literal|10
decl_stmt|;
annotation|@
name|Test
DECL|method|testResolverWithNoPreference ()
specifier|public
name|void
name|testResolverWithNoPreference
parameter_list|()
throws|throws
name|IOException
block|{
name|MultipleDestinationMountTableResolver
name|mountTableResolver
init|=
name|mockAvailableSpaceResolver
argument_list|(
literal|1.0f
argument_list|)
decl_stmt|;
comment|// Since we don't have any preference, it will
comment|// always chose the maximum-available-space subcluster.
name|PathLocation
name|loc
init|=
name|mountTableResolver
operator|.
name|getDestinationForPath
argument_list|(
literal|"/space"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"subcluster9"
argument_list|,
name|loc
operator|.
name|getDestinations
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getNameserviceId
argument_list|()
argument_list|)
expr_stmt|;
name|loc
operator|=
name|mountTableResolver
operator|.
name|getDestinationForPath
argument_list|(
literal|"/space/subdir"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"subcluster9"
argument_list|,
name|loc
operator|.
name|getDestinations
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getNameserviceId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testResolverWithDefaultPreference ()
specifier|public
name|void
name|testResolverWithDefaultPreference
parameter_list|()
throws|throws
name|IOException
block|{
name|MultipleDestinationMountTableResolver
name|mountTableResolver
init|=
name|mockAvailableSpaceResolver
argument_list|(
name|BALANCER_PREFERENCE_DEFAULT
argument_list|)
decl_stmt|;
name|int
name|retries
init|=
literal|10
decl_stmt|;
name|int
name|retryTimes
init|=
literal|0
decl_stmt|;
comment|// There is chance we won't always chose the
comment|// maximum-available-space subcluster.
for|for
control|(
name|retryTimes
operator|=
literal|0
init|;
name|retryTimes
operator|<
name|retries
condition|;
name|retryTimes
operator|++
control|)
block|{
name|PathLocation
name|loc
init|=
name|mountTableResolver
operator|.
name|getDestinationForPath
argument_list|(
literal|"/space"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
literal|"subcluster9"
operator|.
name|equals
argument_list|(
name|loc
operator|.
name|getDestinations
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getNameserviceId
argument_list|()
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
name|assertNotEquals
argument_list|(
name|retries
argument_list|,
name|retryTimes
argument_list|)
expr_stmt|;
block|}
comment|/**    * Mock the available space based resolver.    *    * @param balancerPreference The balancer preference for the resolver.    * @throws IOException    * @return MultipleDestinationMountTableResolver instance.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|mockAvailableSpaceResolver ( float balancerPreference)
specifier|private
name|MultipleDestinationMountTableResolver
name|mockAvailableSpaceResolver
parameter_list|(
name|float
name|balancerPreference
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|BALANCER_PREFERENCE_KEY
argument_list|,
name|balancerPreference
argument_list|)
expr_stmt|;
name|Router
name|router
init|=
name|mock
argument_list|(
name|Router
operator|.
name|class
argument_list|)
decl_stmt|;
name|StateStoreService
name|stateStore
init|=
name|mock
argument_list|(
name|StateStoreService
operator|.
name|class
argument_list|)
decl_stmt|;
name|MembershipStore
name|membership
init|=
name|mock
argument_list|(
name|MembershipStore
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|router
operator|.
name|getStateStore
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|stateStore
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|stateStore
operator|.
name|getRegisteredRecordStore
argument_list|(
name|any
argument_list|(
name|Class
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|membership
argument_list|)
expr_stmt|;
name|GetNamenodeRegistrationsResponse
name|response
init|=
name|GetNamenodeRegistrationsResponse
operator|.
name|newInstance
argument_list|()
decl_stmt|;
comment|// Set the mapping for each client
name|List
argument_list|<
name|MembershipState
argument_list|>
name|records
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|SUBCLUSTER_NUM
condition|;
name|i
operator|++
control|)
block|{
name|records
operator|.
name|add
argument_list|(
name|newMembershipState
argument_list|(
literal|"subcluster"
operator|+
name|i
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|setNamenodeMemberships
argument_list|(
name|records
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|membership
operator|.
name|getNamenodeRegistrations
argument_list|(
name|any
argument_list|(
name|GetNamenodeRegistrationsRequest
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|response
argument_list|)
expr_stmt|;
comment|// construct available space resolver
name|AvailableSpaceResolver
name|resolver
init|=
operator|new
name|AvailableSpaceResolver
argument_list|(
name|conf
argument_list|,
name|router
argument_list|)
decl_stmt|;
name|MultipleDestinationMountTableResolver
name|mountTableResolver
init|=
operator|new
name|MultipleDestinationMountTableResolver
argument_list|(
name|conf
argument_list|,
name|router
argument_list|)
decl_stmt|;
name|mountTableResolver
operator|.
name|addResolver
argument_list|(
name|DestinationOrder
operator|.
name|SPACE
argument_list|,
name|resolver
argument_list|)
expr_stmt|;
comment|// We point /space to subclusters [0,..9] with the SPACE order
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|destinations
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|SUBCLUSTER_NUM
condition|;
name|i
operator|++
control|)
block|{
name|destinations
operator|.
name|put
argument_list|(
literal|"subcluster"
operator|+
name|i
argument_list|,
literal|"/space"
argument_list|)
expr_stmt|;
block|}
name|MountTable
name|spaceEntry
init|=
name|MountTable
operator|.
name|newInstance
argument_list|(
literal|"/space"
argument_list|,
name|destinations
argument_list|)
decl_stmt|;
name|spaceEntry
operator|.
name|setDestOrder
argument_list|(
name|DestinationOrder
operator|.
name|SPACE
argument_list|)
expr_stmt|;
name|mountTableResolver
operator|.
name|addEntry
argument_list|(
name|spaceEntry
argument_list|)
expr_stmt|;
return|return
name|mountTableResolver
return|;
block|}
DECL|method|newMembershipState (String nameservice, long availableSpace)
specifier|public
specifier|static
name|MembershipState
name|newMembershipState
parameter_list|(
name|String
name|nameservice
parameter_list|,
name|long
name|availableSpace
parameter_list|)
block|{
name|MembershipState
name|record
init|=
name|MembershipState
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|record
operator|.
name|setNameserviceId
argument_list|(
name|nameservice
argument_list|)
expr_stmt|;
name|MembershipStats
name|stats
init|=
operator|new
name|MembershipStatsPBImpl
argument_list|()
decl_stmt|;
name|stats
operator|.
name|setAvailableSpace
argument_list|(
name|availableSpace
argument_list|)
expr_stmt|;
name|record
operator|.
name|setStats
argument_list|(
name|stats
argument_list|)
expr_stmt|;
return|return
name|record
return|;
block|}
annotation|@
name|Test
DECL|method|testSubclusterSpaceComparator ()
specifier|public
name|void
name|testSubclusterSpaceComparator
parameter_list|()
block|{
name|verifyRank
argument_list|(
literal|0.0f
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyRank
argument_list|(
literal|1.0f
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyRank
argument_list|(
literal|0.5f
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyRank
argument_list|(
name|BALANCER_PREFERENCE_DEFAULT
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// test for illegal cases
try|try
block|{
name|verifyRank
argument_list|(
literal|2.0f
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Subcluster comparison should be failed."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"The balancer preference value should be in the range 0.0 - 1.0"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|verifyRank
argument_list|(
operator|-
literal|1.0f
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Subcluster comparison should be failed."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"The balancer preference value should be in the range 0.0 - 1.0"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Verify result rank with {@link SubclusterSpaceComparator}.    * @param balancerPreference The balancer preference used    *        in {@link SubclusterSpaceComparator}.    * @param shouldOrdered The result rank should be ordered.    * @param isDesc If the rank result is in a descending order.    */
DECL|method|verifyRank (float balancerPreference, boolean shouldOrdered, boolean isDesc)
specifier|private
name|void
name|verifyRank
parameter_list|(
name|float
name|balancerPreference
parameter_list|,
name|boolean
name|shouldOrdered
parameter_list|,
name|boolean
name|isDesc
parameter_list|)
block|{
name|List
argument_list|<
name|SubclusterAvailableSpace
argument_list|>
name|subclusters
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|SUBCLUSTER_NUM
condition|;
name|i
operator|++
control|)
block|{
name|subclusters
operator|.
name|add
argument_list|(
operator|new
name|SubclusterAvailableSpace
argument_list|(
literal|"subcluster"
operator|+
name|i
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// shuffle the cluster list if we expect rank to be ordered
if|if
condition|(
name|shouldOrdered
condition|)
block|{
name|Collections
operator|.
name|shuffle
argument_list|(
name|subclusters
argument_list|)
expr_stmt|;
block|}
name|SubclusterSpaceComparator
name|comparator
init|=
operator|new
name|SubclusterSpaceComparator
argument_list|(
name|balancerPreference
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|subclusters
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
name|int
name|i
init|=
name|SUBCLUSTER_NUM
operator|-
literal|1
decl_stmt|;
for|for
control|(
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|SubclusterAvailableSpace
name|cluster
init|=
name|subclusters
operator|.
name|get
argument_list|(
name|SUBCLUSTER_NUM
operator|-
literal|1
operator|-
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|shouldOrdered
condition|)
block|{
if|if
condition|(
name|isDesc
condition|)
block|{
name|assertEquals
argument_list|(
literal|"subcluster"
operator|+
name|i
argument_list|,
name|cluster
operator|.
name|getNameserviceId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
argument_list|,
name|cluster
operator|.
name|getAvailableSpace
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|"subcluster"
operator|+
operator|(
name|SUBCLUSTER_NUM
operator|-
literal|1
operator|-
name|i
operator|)
argument_list|,
name|cluster
operator|.
name|getNameserviceId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SUBCLUSTER_NUM
operator|-
literal|1
operator|-
name|i
argument_list|,
name|cluster
operator|.
name|getAvailableSpace
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// If catch one cluster is not in ordered, that's expected behavior.
if|if
condition|(
operator|!
name|cluster
operator|.
name|getNameserviceId
argument_list|()
operator|.
name|equals
argument_list|(
literal|"subcluster"
operator|+
name|i
argument_list|)
operator|&&
name|cluster
operator|.
name|getAvailableSpace
argument_list|()
operator|!=
name|i
condition|)
block|{
break|break;
block|}
block|}
block|}
comment|// The var i won't reach to 0 since cluster list won't be completely
comment|// ordered.
if|if
condition|(
operator|!
name|shouldOrdered
condition|)
block|{
name|assertNotEquals
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|subclusters
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

