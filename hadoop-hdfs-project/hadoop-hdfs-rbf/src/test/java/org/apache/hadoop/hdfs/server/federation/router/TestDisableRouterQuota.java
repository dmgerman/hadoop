begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.router
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|RouterConfigBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Test the behavior when disabling the Router quota.  */
end_comment

begin_class
DECL|class|TestDisableRouterQuota
specifier|public
class|class
name|TestDisableRouterQuota
block|{
DECL|field|router
specifier|private
specifier|static
name|Router
name|router
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setUp ()
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Build and start a router
name|router
operator|=
operator|new
name|Router
argument_list|()
expr_stmt|;
name|Configuration
name|routerConf
init|=
operator|new
name|RouterConfigBuilder
argument_list|()
operator|.
name|quota
argument_list|(
literal|false
argument_list|)
comment|//set false to verify the quota disabled in Router
operator|.
name|rpc
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|routerConf
operator|.
name|set
argument_list|(
name|RBFConfigKeys
operator|.
name|DFS_ROUTER_RPC_ADDRESS_KEY
argument_list|,
literal|"0.0.0.0:0"
argument_list|)
expr_stmt|;
name|router
operator|.
name|init
argument_list|(
name|routerConf
argument_list|)
expr_stmt|;
name|router
operator|.
name|setRouterId
argument_list|(
literal|"TestRouterId"
argument_list|)
expr_stmt|;
name|router
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|tearDown ()
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|router
operator|!=
literal|null
condition|)
block|{
name|router
operator|.
name|stop
argument_list|()
expr_stmt|;
name|router
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Before
DECL|method|checkDisableQuota ()
specifier|public
name|void
name|checkDisableQuota
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|router
operator|.
name|isQuotaEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetQuota ()
specifier|public
name|void
name|testSetQuota
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|nsQuota
init|=
literal|1024
decl_stmt|;
name|long
name|ssQuota
init|=
literal|1024
decl_stmt|;
try|try
block|{
name|Quota
name|quotaModule
init|=
name|router
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getQuotaModule
argument_list|()
decl_stmt|;
name|quotaModule
operator|.
name|setQuota
argument_list|(
literal|"/test"
argument_list|,
name|nsQuota
argument_list|,
name|ssQuota
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"The setQuota call should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"The quota system is disabled in Router."
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGetQuotaUsage ()
specifier|public
name|void
name|testGetQuotaUsage
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|Quota
name|quotaModule
init|=
name|router
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getQuotaModule
argument_list|()
decl_stmt|;
name|quotaModule
operator|.
name|getQuotaUsage
argument_list|(
literal|"/test"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"The getQuotaUsage call should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"The quota system is disabled in Router."
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGetGlobalQuota ()
specifier|public
name|void
name|testGetGlobalQuota
parameter_list|()
throws|throws
name|Exception
block|{
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
literal|"The quota system is disabled in Router."
argument_list|,
literal|"The getGlobalQuota call should fail."
argument_list|,
parameter_list|()
lambda|->
block|{
name|Quota
name|quotaModule
init|=
name|router
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getQuotaModule
argument_list|()
decl_stmt|;
name|quotaModule
operator|.
name|getGlobalQuota
argument_list|(
literal|"/test"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

