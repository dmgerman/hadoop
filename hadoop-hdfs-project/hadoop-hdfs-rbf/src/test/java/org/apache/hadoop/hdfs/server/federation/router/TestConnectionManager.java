begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.router
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamenodeProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ArrayBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_comment
comment|/**  * Test functionalities of {@link ConnectionManager}, which manages a pool  * of connections to NameNodes.  */
end_comment

begin_class
DECL|class|TestConnectionManager
specifier|public
class|class
name|TestConnectionManager
block|{
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|connManager
specifier|private
name|ConnectionManager
name|connManager
decl_stmt|;
DECL|field|TEST_GROUP
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|TEST_GROUP
init|=
operator|new
name|String
index|[]
block|{
literal|"TEST_GROUP"
block|}
decl_stmt|;
DECL|field|TEST_USER1
specifier|private
specifier|static
specifier|final
name|UserGroupInformation
name|TEST_USER1
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"user1"
argument_list|,
name|TEST_GROUP
argument_list|)
decl_stmt|;
DECL|field|TEST_USER2
specifier|private
specifier|static
specifier|final
name|UserGroupInformation
name|TEST_USER2
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"user2"
argument_list|,
name|TEST_GROUP
argument_list|)
decl_stmt|;
DECL|field|TEST_USER3
specifier|private
specifier|static
specifier|final
name|UserGroupInformation
name|TEST_USER3
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"user3"
argument_list|,
name|TEST_GROUP
argument_list|)
decl_stmt|;
DECL|field|TEST_NN_ADDRESS
specifier|private
specifier|static
specifier|final
name|String
name|TEST_NN_ADDRESS
init|=
literal|"nn1:8080"
decl_stmt|;
DECL|field|UNRESOLVED_TEST_NN_ADDRESS
specifier|private
specifier|static
specifier|final
name|String
name|UNRESOLVED_TEST_NN_ADDRESS
init|=
literal|"unknownhost:8080"
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|connManager
operator|=
operator|new
name|ConnectionManager
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|NetUtils
operator|.
name|addStaticResolution
argument_list|(
literal|"nn1"
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
name|NetUtils
operator|.
name|createSocketAddrForHost
argument_list|(
literal|"nn1"
argument_list|,
literal|8080
argument_list|)
expr_stmt|;
name|connManager
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Rule
DECL|field|exceptionRule
specifier|public
name|ExpectedException
name|exceptionRule
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
annotation|@
name|After
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
if|if
condition|(
name|connManager
operator|!=
literal|null
condition|)
block|{
name|connManager
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCleanup ()
specifier|public
name|void
name|testCleanup
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|ConnectionPoolId
argument_list|,
name|ConnectionPool
argument_list|>
name|poolMap
init|=
name|connManager
operator|.
name|getPools
argument_list|()
decl_stmt|;
name|ConnectionPool
name|pool1
init|=
operator|new
name|ConnectionPool
argument_list|(
name|conf
argument_list|,
name|TEST_NN_ADDRESS
argument_list|,
name|TEST_USER1
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|,
literal|0.5f
argument_list|,
name|ClientProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|addConnectionsToPool
argument_list|(
name|pool1
argument_list|,
literal|9
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|poolMap
operator|.
name|put
argument_list|(
operator|new
name|ConnectionPoolId
argument_list|(
name|TEST_USER1
argument_list|,
name|TEST_NN_ADDRESS
argument_list|,
name|ClientProtocol
operator|.
name|class
argument_list|)
argument_list|,
name|pool1
argument_list|)
expr_stmt|;
name|ConnectionPool
name|pool2
init|=
operator|new
name|ConnectionPool
argument_list|(
name|conf
argument_list|,
name|TEST_NN_ADDRESS
argument_list|,
name|TEST_USER2
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|,
literal|0.5f
argument_list|,
name|ClientProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|addConnectionsToPool
argument_list|(
name|pool2
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|poolMap
operator|.
name|put
argument_list|(
operator|new
name|ConnectionPoolId
argument_list|(
name|TEST_USER2
argument_list|,
name|TEST_NN_ADDRESS
argument_list|,
name|ClientProtocol
operator|.
name|class
argument_list|)
argument_list|,
name|pool2
argument_list|)
expr_stmt|;
name|checkPoolConnections
argument_list|(
name|TEST_USER1
argument_list|,
literal|9
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|checkPoolConnections
argument_list|(
name|TEST_USER2
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// Clean up first pool, one connection should be removed, and second pool
comment|// should remain the same.
name|connManager
operator|.
name|cleanup
argument_list|(
name|pool1
argument_list|)
expr_stmt|;
name|checkPoolConnections
argument_list|(
name|TEST_USER1
argument_list|,
literal|8
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|checkPoolConnections
argument_list|(
name|TEST_USER2
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// Clean up the first pool again, it should have no effect since it reached
comment|// the MIN_ACTIVE_RATIO.
name|connManager
operator|.
name|cleanup
argument_list|(
name|pool1
argument_list|)
expr_stmt|;
name|checkPoolConnections
argument_list|(
name|TEST_USER1
argument_list|,
literal|8
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|checkPoolConnections
argument_list|(
name|TEST_USER2
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// Make sure the number of connections doesn't go below minSize
name|ConnectionPool
name|pool3
init|=
operator|new
name|ConnectionPool
argument_list|(
name|conf
argument_list|,
name|TEST_NN_ADDRESS
argument_list|,
name|TEST_USER3
argument_list|,
literal|2
argument_list|,
literal|10
argument_list|,
literal|0.5f
argument_list|,
name|ClientProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|addConnectionsToPool
argument_list|(
name|pool3
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|poolMap
operator|.
name|put
argument_list|(
operator|new
name|ConnectionPoolId
argument_list|(
name|TEST_USER3
argument_list|,
name|TEST_NN_ADDRESS
argument_list|,
name|ClientProtocol
operator|.
name|class
argument_list|)
argument_list|,
name|pool3
argument_list|)
expr_stmt|;
name|checkPoolConnections
argument_list|(
name|TEST_USER3
argument_list|,
literal|10
argument_list|,
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|connManager
operator|.
name|cleanup
argument_list|(
name|pool3
argument_list|)
expr_stmt|;
block|}
name|checkPoolConnections
argument_list|(
name|TEST_USER3
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// With active connections added to pool, make sure it honors the
comment|// MIN_ACTIVE_RATIO again
name|addConnectionsToPool
argument_list|(
name|pool3
argument_list|,
literal|8
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|checkPoolConnections
argument_list|(
name|TEST_USER3
argument_list|,
literal|10
argument_list|,
literal|2
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|connManager
operator|.
name|cleanup
argument_list|(
name|pool3
argument_list|)
expr_stmt|;
block|}
name|checkPoolConnections
argument_list|(
name|TEST_USER3
argument_list|,
literal|4
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConnectionCreatorWithException ()
specifier|public
name|void
name|testConnectionCreatorWithException
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create a bad connection pool pointing to unresolvable namenode address.
name|ConnectionPool
name|badPool
init|=
operator|new
name|ConnectionPool
argument_list|(
name|conf
argument_list|,
name|UNRESOLVED_TEST_NN_ADDRESS
argument_list|,
name|TEST_USER1
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|,
literal|0.5f
argument_list|,
name|ClientProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|BlockingQueue
argument_list|<
name|ConnectionPool
argument_list|>
name|queue
init|=
operator|new
name|ArrayBlockingQueue
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|queue
operator|.
name|add
argument_list|(
name|badPool
argument_list|)
expr_stmt|;
name|ConnectionManager
operator|.
name|ConnectionCreator
name|connectionCreator
init|=
operator|new
name|ConnectionManager
operator|.
name|ConnectionCreator
argument_list|(
name|queue
argument_list|)
decl_stmt|;
name|connectionCreator
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connectionCreator
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Wait to make sure async thread is scheduled and picks
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
name|queue
operator|.
name|isEmpty
argument_list|()
argument_list|,
literal|50
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
comment|// At this point connection creation task should be definitely picked up.
name|assertTrue
argument_list|(
name|queue
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// At this point connection thread should still be alive.
name|assertTrue
argument_list|(
name|connectionCreator
operator|.
name|isAlive
argument_list|()
argument_list|)
expr_stmt|;
comment|// Stop the thread as test is successful at this point
name|connectionCreator
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetConnectionWithException ()
specifier|public
name|void
name|testGetConnectionWithException
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|exceptionCause
init|=
literal|"java.net.UnknownHostException: unknownhost"
decl_stmt|;
name|exceptionRule
operator|.
name|expect
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exceptionRule
operator|.
name|expectMessage
argument_list|(
name|exceptionCause
argument_list|)
expr_stmt|;
comment|// Create a bad connection pool pointing to unresolvable namenode address.
name|ConnectionPool
name|badPool
init|=
operator|new
name|ConnectionPool
argument_list|(
name|conf
argument_list|,
name|UNRESOLVED_TEST_NN_ADDRESS
argument_list|,
name|TEST_USER1
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|,
literal|0.5f
argument_list|,
name|ClientProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetConnection ()
specifier|public
name|void
name|testGetConnection
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|ConnectionPoolId
argument_list|,
name|ConnectionPool
argument_list|>
name|poolMap
init|=
name|connManager
operator|.
name|getPools
argument_list|()
decl_stmt|;
specifier|final
name|int
name|totalConns
init|=
literal|10
decl_stmt|;
name|int
name|activeConns
init|=
literal|5
decl_stmt|;
name|ConnectionPool
name|pool
init|=
operator|new
name|ConnectionPool
argument_list|(
name|conf
argument_list|,
name|TEST_NN_ADDRESS
argument_list|,
name|TEST_USER1
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|,
literal|0.5f
argument_list|,
name|ClientProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|addConnectionsToPool
argument_list|(
name|pool
argument_list|,
name|totalConns
argument_list|,
name|activeConns
argument_list|)
expr_stmt|;
name|poolMap
operator|.
name|put
argument_list|(
operator|new
name|ConnectionPoolId
argument_list|(
name|TEST_USER1
argument_list|,
name|TEST_NN_ADDRESS
argument_list|,
name|ClientProtocol
operator|.
name|class
argument_list|)
argument_list|,
name|pool
argument_list|)
expr_stmt|;
comment|// All remaining connections should be usable
specifier|final
name|int
name|remainingSlots
init|=
name|totalConns
operator|-
name|activeConns
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|remainingSlots
condition|;
name|i
operator|++
control|)
block|{
name|ConnectionContext
name|cc
init|=
name|pool
operator|.
name|getConnection
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|cc
operator|.
name|isUsable
argument_list|()
argument_list|)
expr_stmt|;
name|cc
operator|.
name|getClient
argument_list|()
expr_stmt|;
name|activeConns
operator|++
expr_stmt|;
block|}
name|checkPoolConnections
argument_list|(
name|TEST_USER1
argument_list|,
name|totalConns
argument_list|,
name|activeConns
argument_list|)
expr_stmt|;
comment|// Ask for more and this returns an active connection
name|ConnectionContext
name|cc
init|=
name|pool
operator|.
name|getConnection
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|cc
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testValidClientIndex ()
specifier|public
name|void
name|testValidClientIndex
parameter_list|()
throws|throws
name|Exception
block|{
name|ConnectionPool
name|pool
init|=
operator|new
name|ConnectionPool
argument_list|(
name|conf
argument_list|,
name|TEST_NN_ADDRESS
argument_list|,
name|TEST_USER1
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|0.5f
argument_list|,
name|ClientProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
operator|-
literal|3
init|;
name|i
operator|<=
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|pool
operator|.
name|getClientIndex
argument_list|()
operator|.
name|set
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|ConnectionContext
name|conn
init|=
name|pool
operator|.
name|getConnection
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|conn
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|conn
operator|.
name|isUsable
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|getGetConnectionNamenodeProtocol ()
specifier|public
name|void
name|getGetConnectionNamenodeProtocol
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|ConnectionPoolId
argument_list|,
name|ConnectionPool
argument_list|>
name|poolMap
init|=
name|connManager
operator|.
name|getPools
argument_list|()
decl_stmt|;
specifier|final
name|int
name|totalConns
init|=
literal|10
decl_stmt|;
name|int
name|activeConns
init|=
literal|5
decl_stmt|;
name|ConnectionPool
name|pool
init|=
operator|new
name|ConnectionPool
argument_list|(
name|conf
argument_list|,
name|TEST_NN_ADDRESS
argument_list|,
name|TEST_USER1
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|,
literal|0.5f
argument_list|,
name|NamenodeProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|addConnectionsToPool
argument_list|(
name|pool
argument_list|,
name|totalConns
argument_list|,
name|activeConns
argument_list|)
expr_stmt|;
name|poolMap
operator|.
name|put
argument_list|(
operator|new
name|ConnectionPoolId
argument_list|(
name|TEST_USER1
argument_list|,
name|TEST_NN_ADDRESS
argument_list|,
name|NamenodeProtocol
operator|.
name|class
argument_list|)
argument_list|,
name|pool
argument_list|)
expr_stmt|;
comment|// All remaining connections should be usable
specifier|final
name|int
name|remainingSlots
init|=
name|totalConns
operator|-
name|activeConns
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|remainingSlots
condition|;
name|i
operator|++
control|)
block|{
name|ConnectionContext
name|cc
init|=
name|pool
operator|.
name|getConnection
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|cc
operator|.
name|isUsable
argument_list|()
argument_list|)
expr_stmt|;
name|cc
operator|.
name|getClient
argument_list|()
expr_stmt|;
name|activeConns
operator|++
expr_stmt|;
block|}
name|checkPoolConnections
argument_list|(
name|TEST_USER1
argument_list|,
name|totalConns
argument_list|,
name|activeConns
argument_list|)
expr_stmt|;
comment|// Ask for more and this returns an active connection
name|ConnectionContext
name|cc
init|=
name|pool
operator|.
name|getConnection
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|cc
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|addConnectionsToPool (ConnectionPool pool, int numTotalConn, int numActiveConn)
specifier|private
name|void
name|addConnectionsToPool
parameter_list|(
name|ConnectionPool
name|pool
parameter_list|,
name|int
name|numTotalConn
parameter_list|,
name|int
name|numActiveConn
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numTotalConn
condition|;
name|i
operator|++
control|)
block|{
name|ConnectionContext
name|cc
init|=
name|pool
operator|.
name|newConnection
argument_list|()
decl_stmt|;
name|pool
operator|.
name|addConnection
argument_list|(
name|cc
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|numActiveConn
condition|)
block|{
name|cc
operator|.
name|getClient
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|checkPoolConnections (UserGroupInformation ugi, int numOfConns, int numOfActiveConns)
specifier|private
name|void
name|checkPoolConnections
parameter_list|(
name|UserGroupInformation
name|ugi
parameter_list|,
name|int
name|numOfConns
parameter_list|,
name|int
name|numOfActiveConns
parameter_list|)
block|{
name|boolean
name|connPoolFoundForUser
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ConnectionPoolId
argument_list|,
name|ConnectionPool
argument_list|>
name|e
range|:
name|connManager
operator|.
name|getPools
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|getUgi
argument_list|()
operator|==
name|ugi
condition|)
block|{
name|assertEquals
argument_list|(
name|numOfConns
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|getNumConnections
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numOfActiveConns
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|getNumActiveConnections
argument_list|()
argument_list|)
expr_stmt|;
name|connPoolFoundForUser
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|connPoolFoundForUser
condition|)
block|{
name|fail
argument_list|(
literal|"Connection pool not found for user "
operator|+
name|ugi
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testConfigureConnectionActiveRatio ()
specifier|public
name|void
name|testConfigureConnectionActiveRatio
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|totalConns
init|=
literal|10
decl_stmt|;
name|int
name|activeConns
init|=
literal|7
decl_stmt|;
name|Configuration
name|tmpConf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// Set dfs.federation.router.connection.min-active-ratio 0.8f
name|tmpConf
operator|.
name|setFloat
argument_list|(
name|RBFConfigKeys
operator|.
name|DFS_ROUTER_NAMENODE_CONNECTION_MIN_ACTIVE_RATIO
argument_list|,
literal|0.8f
argument_list|)
expr_stmt|;
name|ConnectionManager
name|tmpConnManager
init|=
operator|new
name|ConnectionManager
argument_list|(
name|tmpConf
argument_list|)
decl_stmt|;
name|tmpConnManager
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Create one new connection pool
name|tmpConnManager
operator|.
name|getConnection
argument_list|(
name|TEST_USER1
argument_list|,
name|TEST_NN_ADDRESS
argument_list|,
name|NamenodeProtocol
operator|.
name|class
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|ConnectionPoolId
argument_list|,
name|ConnectionPool
argument_list|>
name|poolMap
init|=
name|tmpConnManager
operator|.
name|getPools
argument_list|()
decl_stmt|;
name|ConnectionPoolId
name|connectionPoolId
init|=
operator|new
name|ConnectionPoolId
argument_list|(
name|TEST_USER1
argument_list|,
name|TEST_NN_ADDRESS
argument_list|,
name|NamenodeProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|ConnectionPool
name|pool
init|=
name|poolMap
operator|.
name|get
argument_list|(
name|connectionPoolId
argument_list|)
decl_stmt|;
comment|// Test min active ratio is 0.8f
name|assertEquals
argument_list|(
literal|0.8f
argument_list|,
name|pool
operator|.
name|getMinActiveRatio
argument_list|()
argument_list|,
literal|0.001f
argument_list|)
expr_stmt|;
name|pool
operator|.
name|getConnection
argument_list|()
operator|.
name|getClient
argument_list|()
expr_stmt|;
comment|// Test there is one active connection in pool
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pool
operator|.
name|getNumActiveConnections
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add other 6 active/9 total connections to pool
name|addConnectionsToPool
argument_list|(
name|pool
argument_list|,
name|totalConns
operator|-
literal|1
argument_list|,
name|activeConns
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// There are 7 active connections.
comment|// The active number is less than totalConns(10) * minActiveRatio(0.8f).
comment|// We can cleanup the pool
name|tmpConnManager
operator|.
name|cleanup
argument_list|(
name|pool
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|totalConns
operator|-
literal|1
argument_list|,
name|pool
operator|.
name|getNumConnections
argument_list|()
argument_list|)
expr_stmt|;
name|tmpConnManager
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUnsupportedProtoExceptionMsg ()
specifier|public
name|void
name|testUnsupportedProtoExceptionMsg
parameter_list|()
throws|throws
name|Exception
block|{
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|,
literal|"Unsupported protocol for connection to NameNode: "
operator|+
name|TestConnectionManager
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
parameter_list|()
lambda|->
name|ConnectionPool
operator|.
name|newConnection
argument_list|(
name|conf
argument_list|,
name|TEST_NN_ADDRESS
argument_list|,
name|TEST_USER1
argument_list|,
name|TestConnectionManager
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

