begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.store
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|FederationTestUtils
operator|.
name|NAMESERVICES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|FederationTestUtils
operator|.
name|verifyException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|FederationStateStoreTestUtils
operator|.
name|clearRecords
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|FederationStateStoreTestUtils
operator|.
name|createMockMountTable
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|FederationStateStoreTestUtils
operator|.
name|synchronizeRecords
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|AddMountTableEntryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|AddMountTableEntryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|GetMountTableEntriesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|GetMountTableEntriesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|RemoveMountTableEntryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|UpdateMountTableEntryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|UpdateMountTableEntryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|MountTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|QueryResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test the basic {@link StateStoreService}  * {@link MountTableStore} functionality.  */
end_comment

begin_class
DECL|class|TestStateStoreMountTable
specifier|public
class|class
name|TestStateStoreMountTable
extends|extends
name|TestStateStoreBase
block|{
DECL|field|nameservices
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|nameservices
decl_stmt|;
DECL|field|mountStore
specifier|private
specifier|static
name|MountTableStore
name|mountStore
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|create ()
specifier|public
specifier|static
name|void
name|create
parameter_list|()
throws|throws
name|IOException
block|{
name|nameservices
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|nameservices
operator|.
name|add
argument_list|(
name|NAMESERVICES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|nameservices
operator|.
name|add
argument_list|(
name|NAMESERVICES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|mountStore
operator|=
name|getStateStore
argument_list|()
operator|.
name|getRegisteredRecordStore
argument_list|(
name|MountTableStore
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// Clear Mount table registrations
name|assertTrue
argument_list|(
name|clearRecords
argument_list|(
name|getStateStore
argument_list|()
argument_list|,
name|MountTable
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStateStoreDisconnected ()
specifier|public
name|void
name|testStateStoreDisconnected
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Close the data store driver
name|getStateStore
argument_list|()
operator|.
name|closeDriver
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|getStateStore
argument_list|()
operator|.
name|isDriverReady
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test APIs that access the store to check they throw the correct exception
name|MountTable
name|entry
init|=
name|MountTable
operator|.
name|newInstance
argument_list|(
literal|"/mnt"
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"ns0"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
decl_stmt|;
name|AddMountTableEntryRequest
name|addRequest
init|=
name|AddMountTableEntryRequest
operator|.
name|newInstance
argument_list|(
name|entry
argument_list|)
decl_stmt|;
name|verifyException
argument_list|(
name|mountStore
argument_list|,
literal|"addMountTableEntry"
argument_list|,
name|StateStoreUnavailableException
operator|.
name|class
argument_list|,
operator|new
name|Class
index|[]
block|{
name|AddMountTableEntryRequest
operator|.
name|class
block|}
argument_list|,
operator|new
name|Object
index|[]
block|{
name|addRequest
block|}
argument_list|)
expr_stmt|;
name|UpdateMountTableEntryRequest
name|updateRequest
init|=
name|UpdateMountTableEntryRequest
operator|.
name|newInstance
argument_list|(
name|entry
argument_list|)
decl_stmt|;
name|verifyException
argument_list|(
name|mountStore
argument_list|,
literal|"updateMountTableEntry"
argument_list|,
name|StateStoreUnavailableException
operator|.
name|class
argument_list|,
operator|new
name|Class
index|[]
block|{
name|UpdateMountTableEntryRequest
operator|.
name|class
block|}
argument_list|,
operator|new
name|Object
index|[]
block|{
name|updateRequest
block|}
argument_list|)
expr_stmt|;
name|RemoveMountTableEntryRequest
name|removeRequest
init|=
name|RemoveMountTableEntryRequest
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|verifyException
argument_list|(
name|mountStore
argument_list|,
literal|"removeMountTableEntry"
argument_list|,
name|StateStoreUnavailableException
operator|.
name|class
argument_list|,
operator|new
name|Class
index|[]
block|{
name|RemoveMountTableEntryRequest
operator|.
name|class
block|}
argument_list|,
operator|new
name|Object
index|[]
block|{
name|removeRequest
block|}
argument_list|)
expr_stmt|;
name|GetMountTableEntriesRequest
name|getRequest
init|=
name|GetMountTableEntriesRequest
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|mountStore
operator|.
name|loadCache
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|verifyException
argument_list|(
name|mountStore
argument_list|,
literal|"getMountTableEntries"
argument_list|,
name|StateStoreUnavailableException
operator|.
name|class
argument_list|,
operator|new
name|Class
index|[]
block|{
name|GetMountTableEntriesRequest
operator|.
name|class
block|}
argument_list|,
operator|new
name|Object
index|[]
block|{
name|getRequest
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSynchronizeMountTable ()
specifier|public
name|void
name|testSynchronizeMountTable
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Synchronize and get mount table entries
name|List
argument_list|<
name|MountTable
argument_list|>
name|entries
init|=
name|createMockMountTable
argument_list|(
name|nameservices
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|synchronizeRecords
argument_list|(
name|getStateStore
argument_list|()
argument_list|,
name|entries
argument_list|,
name|MountTable
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|MountTable
name|e
range|:
name|entries
control|)
block|{
name|mountStore
operator|.
name|loadCache
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|MountTable
name|entry
init|=
name|getMountTableEntry
argument_list|(
name|e
operator|.
name|getSourcePath
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|e
operator|.
name|getDefaultLocation
argument_list|()
operator|.
name|getDest
argument_list|()
argument_list|,
name|entry
operator|.
name|getDefaultLocation
argument_list|()
operator|.
name|getDest
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testAddMountTableEntry ()
specifier|public
name|void
name|testAddMountTableEntry
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Add 1
name|List
argument_list|<
name|MountTable
argument_list|>
name|entries
init|=
name|createMockMountTable
argument_list|(
name|nameservices
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|MountTable
argument_list|>
name|entries1
init|=
name|getMountTableEntries
argument_list|(
literal|"/"
argument_list|)
operator|.
name|getRecords
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|entries1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|MountTable
name|entry0
init|=
name|entries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|AddMountTableEntryRequest
name|request
init|=
name|AddMountTableEntryRequest
operator|.
name|newInstance
argument_list|(
name|entry0
argument_list|)
decl_stmt|;
name|AddMountTableEntryResponse
name|response
init|=
name|mountStore
operator|.
name|addMountTableEntry
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|mountStore
operator|.
name|loadCache
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MountTable
argument_list|>
name|entries2
init|=
name|getMountTableEntries
argument_list|(
literal|"/"
argument_list|)
operator|.
name|getRecords
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|entries2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemoveMountTableEntry ()
specifier|public
name|void
name|testRemoveMountTableEntry
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Add many
name|List
argument_list|<
name|MountTable
argument_list|>
name|entries
init|=
name|createMockMountTable
argument_list|(
name|nameservices
argument_list|)
decl_stmt|;
name|synchronizeRecords
argument_list|(
name|getStateStore
argument_list|()
argument_list|,
name|entries
argument_list|,
name|MountTable
operator|.
name|class
argument_list|)
expr_stmt|;
name|mountStore
operator|.
name|loadCache
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MountTable
argument_list|>
name|entries1
init|=
name|getMountTableEntries
argument_list|(
literal|"/"
argument_list|)
operator|.
name|getRecords
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|entries
operator|.
name|size
argument_list|()
argument_list|,
name|entries1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Remove 1
name|RemoveMountTableEntryRequest
name|request
init|=
name|RemoveMountTableEntryRequest
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|request
operator|.
name|setSrcPath
argument_list|(
name|entries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSourcePath
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mountStore
operator|.
name|removeMountTableEntry
argument_list|(
name|request
argument_list|)
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify remove
name|mountStore
operator|.
name|loadCache
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MountTable
argument_list|>
name|entries2
init|=
name|getMountTableEntries
argument_list|(
literal|"/"
argument_list|)
operator|.
name|getRecords
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|entries
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|,
name|entries2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUpdateMountTableEntry ()
specifier|public
name|void
name|testUpdateMountTableEntry
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Add 1
name|List
argument_list|<
name|MountTable
argument_list|>
name|entries
init|=
name|createMockMountTable
argument_list|(
name|nameservices
argument_list|)
decl_stmt|;
name|MountTable
name|entry0
init|=
name|entries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|srcPath
init|=
name|entry0
operator|.
name|getSourcePath
argument_list|()
decl_stmt|;
name|String
name|nsId
init|=
name|entry0
operator|.
name|getDefaultLocation
argument_list|()
operator|.
name|getNameserviceId
argument_list|()
decl_stmt|;
name|AddMountTableEntryRequest
name|request
init|=
name|AddMountTableEntryRequest
operator|.
name|newInstance
argument_list|(
name|entry0
argument_list|)
decl_stmt|;
name|AddMountTableEntryResponse
name|response
init|=
name|mountStore
operator|.
name|addMountTableEntry
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify
name|mountStore
operator|.
name|loadCache
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|MountTable
name|matchingEntry0
init|=
name|getMountTableEntry
argument_list|(
name|srcPath
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|matchingEntry0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|nsId
argument_list|,
name|matchingEntry0
operator|.
name|getDefaultLocation
argument_list|()
operator|.
name|getNameserviceId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Edit destination nameservice for source path
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|destMap
init|=
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"testnameservice"
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
name|MountTable
name|replacement
init|=
name|MountTable
operator|.
name|newInstance
argument_list|(
name|srcPath
argument_list|,
name|destMap
argument_list|)
decl_stmt|;
name|UpdateMountTableEntryRequest
name|updateRequest
init|=
name|UpdateMountTableEntryRequest
operator|.
name|newInstance
argument_list|(
name|replacement
argument_list|)
decl_stmt|;
name|UpdateMountTableEntryResponse
name|updateResponse
init|=
name|mountStore
operator|.
name|updateMountTableEntry
argument_list|(
name|updateRequest
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|updateResponse
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify
name|mountStore
operator|.
name|loadCache
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|MountTable
name|matchingEntry1
init|=
name|getMountTableEntry
argument_list|(
name|srcPath
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|matchingEntry1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testnameservice"
argument_list|,
name|matchingEntry1
operator|.
name|getDefaultLocation
argument_list|()
operator|.
name|getNameserviceId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Gets an existing mount table record in the state store.    *    * @param mount The mount point of the record to remove.    * @return The matching record if found, null if it is not found.    * @throws IOException If the state store could not be accessed.    */
DECL|method|getMountTableEntry (String mount)
specifier|private
name|MountTable
name|getMountTableEntry
parameter_list|(
name|String
name|mount
parameter_list|)
throws|throws
name|IOException
block|{
name|GetMountTableEntriesRequest
name|request
init|=
name|GetMountTableEntriesRequest
operator|.
name|newInstance
argument_list|(
name|mount
argument_list|)
decl_stmt|;
name|GetMountTableEntriesResponse
name|response
init|=
name|mountStore
operator|.
name|getMountTableEntries
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|MountTable
argument_list|>
name|results
init|=
name|response
operator|.
name|getEntries
argument_list|()
decl_stmt|;
if|if
condition|(
name|results
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// First result is sorted to have the shortest mount string length
return|return
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Fetch all mount table records beneath a root path.    *    * @param store FederationMountTableStore instance to commit the data.    * @param mount The root search path, enter "/" to return all mount table    *          records.    *    * @return A list of all mount table records found below the root mount.    *    * @throws IOException If the state store could not be accessed.    */
DECL|method|getMountTableEntries (String mount)
specifier|private
name|QueryResult
argument_list|<
name|MountTable
argument_list|>
name|getMountTableEntries
parameter_list|(
name|String
name|mount
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|mount
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Please specify a root search path"
argument_list|)
throw|;
block|}
name|GetMountTableEntriesRequest
name|request
init|=
name|GetMountTableEntriesRequest
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|request
operator|.
name|setSrcPath
argument_list|(
name|mount
argument_list|)
expr_stmt|;
name|GetMountTableEntriesResponse
name|response
init|=
name|mountStore
operator|.
name|getMountTableEntries
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|MountTable
argument_list|>
name|records
init|=
name|response
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|long
name|timestamp
init|=
name|response
operator|.
name|getTimestamp
argument_list|()
decl_stmt|;
return|return
operator|new
name|QueryResult
argument_list|<
name|MountTable
argument_list|>
argument_list|(
name|records
argument_list|,
name|timestamp
argument_list|)
return|;
block|}
block|}
end_class

end_unit

