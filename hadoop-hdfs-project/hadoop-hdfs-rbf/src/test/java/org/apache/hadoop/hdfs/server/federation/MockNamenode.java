begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptySet
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_ADMIN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyLong
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyShort
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ConnectException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentSkipListMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ContentSummary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FsServerDefaults
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceProtocol
operator|.
name|HAServiceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|proto
operator|.
name|HAServiceProtocolProtos
operator|.
name|HAServiceProtocolService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|protocolPB
operator|.
name|HAServiceProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|protocolPB
operator|.
name|HAServiceProtocolServerSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DirectoryListing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ClientNamenodeProtocolProtos
operator|.
name|ClientNamenodeProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DatanodeProtocolProtos
operator|.
name|DatanodeProtocolService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|NamenodeProtocolProtos
operator|.
name|NamenodeProtocolService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|ClientNamenodeProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|ClientNamenodeProtocolServerSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|DatanodeProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|DatanodeProtocolServerSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|NamenodeProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|NamenodeProtocolServerSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|BlockTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|MembershipNamenodeResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|NamenodeStatusReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
operator|.
name|Router
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|LeaseExpiredException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NotReplicatedYetException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|SafeModeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamenodeProtocols
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamespaceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|http
operator|.
name|HttpServer2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtobufRpcEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|StandbyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DataChecksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DataChecksum
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|BlockingService
import|;
end_import

begin_comment
comment|/**  * Mock for the network interfaces (e.g., RPC and HTTP) of a Namenode. This is  * used by the Routers in a mock cluster.  */
end_comment

begin_class
DECL|class|MockNamenode
specifier|public
class|class
name|MockNamenode
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MockNamenode
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** Mock implementation of the Namenode. */
DECL|field|mockNn
specifier|private
specifier|final
name|NamenodeProtocols
name|mockNn
decl_stmt|;
comment|/** Name service identifier (subcluster). */
DECL|field|nsId
specifier|private
name|String
name|nsId
decl_stmt|;
comment|/** HA state of the Namenode. */
DECL|field|haState
specifier|private
name|HAServiceState
name|haState
init|=
name|HAServiceState
operator|.
name|STANDBY
decl_stmt|;
comment|/** RPC server of the Namenode that redirects calls to the mock. */
DECL|field|rpcServer
specifier|private
name|Server
name|rpcServer
decl_stmt|;
comment|/** HTTP server of the Namenode that redirects calls to the mock. */
DECL|field|httpServer
specifier|private
name|HttpServer2
name|httpServer
decl_stmt|;
DECL|method|MockNamenode (final String nsIdentifier)
specifier|public
name|MockNamenode
parameter_list|(
specifier|final
name|String
name|nsIdentifier
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|nsIdentifier
argument_list|,
operator|new
name|HdfsConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|MockNamenode (final String nsIdentifier, final Configuration conf)
specifier|public
name|MockNamenode
parameter_list|(
specifier|final
name|String
name|nsIdentifier
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|nsId
operator|=
name|nsIdentifier
expr_stmt|;
name|this
operator|.
name|mockNn
operator|=
name|mock
argument_list|(
name|NamenodeProtocols
operator|.
name|class
argument_list|)
expr_stmt|;
name|setupMock
argument_list|()
expr_stmt|;
name|setupRPCServer
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|setupHTTPServer
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Setup the mock of the Namenode. It offers the basic functionality for    * Routers to get the status.    * @throws IOException If the mock cannot be setup.    */
DECL|method|setupMock ()
specifier|protected
name|void
name|setupMock
parameter_list|()
throws|throws
name|IOException
block|{
name|NamespaceInfo
name|nsInfo
init|=
operator|new
name|NamespaceInfo
argument_list|(
literal|1
argument_list|,
name|this
operator|.
name|nsId
argument_list|,
name|this
operator|.
name|nsId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockNn
operator|.
name|versionRequest
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|nsInfo
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockNn
operator|.
name|getServiceStatus
argument_list|()
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|HAServiceStatus
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|HAServiceStatus
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|HAServiceStatus
name|haStatus
init|=
operator|new
name|HAServiceStatus
argument_list|(
name|getHAServiceState
argument_list|()
argument_list|)
decl_stmt|;
name|haStatus
operator|.
name|setNotReadyToBecomeActive
argument_list|(
literal|""
argument_list|)
expr_stmt|;
return|return
name|haStatus
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Setup the RPC server of the Namenode that redirects calls to the mock.    * @param conf Configuration of the server.    * @throws IOException If the RPC server cannot be setup.    */
DECL|method|setupRPCServer (final Configuration conf)
specifier|private
name|void
name|setupRPCServer
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|RPC
operator|.
name|setProtocolEngine
argument_list|(
name|conf
argument_list|,
name|ClientNamenodeProtocolPB
operator|.
name|class
argument_list|,
name|ProtobufRpcEngine
operator|.
name|class
argument_list|)
expr_stmt|;
name|ClientNamenodeProtocolServerSideTranslatorPB
name|clientNNProtoXlator
init|=
operator|new
name|ClientNamenodeProtocolServerSideTranslatorPB
argument_list|(
name|mockNn
argument_list|)
decl_stmt|;
name|BlockingService
name|clientNNPbService
init|=
name|ClientNamenodeProtocol
operator|.
name|newReflectiveBlockingService
argument_list|(
name|clientNNProtoXlator
argument_list|)
decl_stmt|;
name|int
name|numHandlers
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HANDLER_COUNT_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HANDLER_COUNT_DEFAULT
argument_list|)
decl_stmt|;
name|rpcServer
operator|=
operator|new
name|RPC
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|setProtocol
argument_list|(
name|ClientNamenodeProtocolPB
operator|.
name|class
argument_list|)
operator|.
name|setInstance
argument_list|(
name|clientNNPbService
argument_list|)
operator|.
name|setBindAddress
argument_list|(
literal|"0.0.0.0"
argument_list|)
operator|.
name|setPort
argument_list|(
literal|0
argument_list|)
operator|.
name|setNumHandlers
argument_list|(
name|numHandlers
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|NamenodeProtocolServerSideTranslatorPB
name|nnProtoXlator
init|=
operator|new
name|NamenodeProtocolServerSideTranslatorPB
argument_list|(
name|mockNn
argument_list|)
decl_stmt|;
name|BlockingService
name|nnProtoPbService
init|=
name|NamenodeProtocolService
operator|.
name|newReflectiveBlockingService
argument_list|(
name|nnProtoXlator
argument_list|)
decl_stmt|;
name|DFSUtil
operator|.
name|addPBProtocol
argument_list|(
name|conf
argument_list|,
name|NamenodeProtocolPB
operator|.
name|class
argument_list|,
name|nnProtoPbService
argument_list|,
name|rpcServer
argument_list|)
expr_stmt|;
name|DatanodeProtocolServerSideTranslatorPB
name|dnProtoPbXlator
init|=
operator|new
name|DatanodeProtocolServerSideTranslatorPB
argument_list|(
name|mockNn
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|BlockingService
name|dnProtoPbService
init|=
name|DatanodeProtocolService
operator|.
name|newReflectiveBlockingService
argument_list|(
name|dnProtoPbXlator
argument_list|)
decl_stmt|;
name|DFSUtil
operator|.
name|addPBProtocol
argument_list|(
name|conf
argument_list|,
name|DatanodeProtocolPB
operator|.
name|class
argument_list|,
name|dnProtoPbService
argument_list|,
name|rpcServer
argument_list|)
expr_stmt|;
name|HAServiceProtocolServerSideTranslatorPB
name|haServiceProtoXlator
init|=
operator|new
name|HAServiceProtocolServerSideTranslatorPB
argument_list|(
name|mockNn
argument_list|)
decl_stmt|;
name|BlockingService
name|haProtoPbService
init|=
name|HAServiceProtocolService
operator|.
name|newReflectiveBlockingService
argument_list|(
name|haServiceProtoXlator
argument_list|)
decl_stmt|;
name|DFSUtil
operator|.
name|addPBProtocol
argument_list|(
name|conf
argument_list|,
name|HAServiceProtocolPB
operator|.
name|class
argument_list|,
name|haProtoPbService
argument_list|,
name|rpcServer
argument_list|)
expr_stmt|;
name|this
operator|.
name|rpcServer
operator|.
name|addTerseExceptions
argument_list|(
name|RemoteException
operator|.
name|class
argument_list|,
name|SafeModeException
operator|.
name|class
argument_list|,
name|FileNotFoundException
operator|.
name|class
argument_list|,
name|FileAlreadyExistsException
operator|.
name|class
argument_list|,
name|AccessControlException
operator|.
name|class
argument_list|,
name|LeaseExpiredException
operator|.
name|class
argument_list|,
name|NotReplicatedYetException
operator|.
name|class
argument_list|,
name|IOException
operator|.
name|class
argument_list|,
name|ConnectException
operator|.
name|class
argument_list|,
name|StandbyException
operator|.
name|class
argument_list|)
expr_stmt|;
name|rpcServer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|/**    * Setup the HTTP server of the Namenode that redirects calls to the mock.    * @param conf Configuration of the server.    * @throws IOException If the HTTP server cannot be setup.    */
DECL|method|setupHTTPServer (Configuration conf)
specifier|private
name|void
name|setupHTTPServer
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|HttpServer2
operator|.
name|Builder
name|builder
init|=
operator|new
name|HttpServer2
operator|.
name|Builder
argument_list|()
operator|.
name|setName
argument_list|(
literal|"hdfs"
argument_list|)
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
operator|.
name|setACL
argument_list|(
operator|new
name|AccessControlList
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|DFS_ADMIN
argument_list|,
literal|" "
argument_list|)
argument_list|)
argument_list|)
operator|.
name|addEndpoint
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"http://0.0.0.0:0"
argument_list|)
argument_list|)
decl_stmt|;
name|httpServer
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|httpServer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|/**    * Get the RPC port for the Mock Namenode.    * @return RPC port.    */
DECL|method|getRPCPort ()
specifier|public
name|int
name|getRPCPort
parameter_list|()
block|{
return|return
name|rpcServer
operator|.
name|getListenerAddress
argument_list|()
operator|.
name|getPort
argument_list|()
return|;
block|}
comment|/**    * Get the HTTP port for the Mock Namenode.    * @return HTTP port.    */
DECL|method|getHTTPPort ()
specifier|public
name|int
name|getHTTPPort
parameter_list|()
block|{
return|return
name|httpServer
operator|.
name|getConnectorAddress
argument_list|(
literal|0
argument_list|)
operator|.
name|getPort
argument_list|()
return|;
block|}
comment|/**    * Get the Mock core. This is used to extend the mock.    * @return Mock Namenode protocol to be extended.    */
DECL|method|getMock ()
specifier|public
name|NamenodeProtocols
name|getMock
parameter_list|()
block|{
return|return
name|mockNn
return|;
block|}
comment|/**    * Get the name service id (subcluster) of the Mock Namenode.    * @return Name service identifier.    */
DECL|method|getNameserviceId ()
specifier|public
name|String
name|getNameserviceId
parameter_list|()
block|{
return|return
name|nsId
return|;
block|}
comment|/**    * Get the HA state of the Mock Namenode.    * @return HA state (ACTIVE or STANDBY).    */
DECL|method|getHAServiceState ()
specifier|public
name|HAServiceState
name|getHAServiceState
parameter_list|()
block|{
return|return
name|haState
return|;
block|}
comment|/**    * Show the Mock Namenode as Active.    */
DECL|method|transitionToActive ()
specifier|public
name|void
name|transitionToActive
parameter_list|()
block|{
name|this
operator|.
name|haState
operator|=
name|HAServiceState
operator|.
name|ACTIVE
expr_stmt|;
block|}
comment|/**    * Show the Mock Namenode as Standby.    */
DECL|method|transitionToStandby ()
specifier|public
name|void
name|transitionToStandby
parameter_list|()
block|{
name|this
operator|.
name|haState
operator|=
name|HAServiceState
operator|.
name|STANDBY
expr_stmt|;
block|}
comment|/**    * Stop the Mock Namenode. It stops all the servers.    * @throws Exception If it cannot stop the Namenode.    */
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|rpcServer
operator|!=
literal|null
condition|)
block|{
name|rpcServer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|rpcServer
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|httpServer
operator|!=
literal|null
condition|)
block|{
name|httpServer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|httpServer
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * Add the mock for the FileSystem calls in ClientProtocol.    * @throws IOException If it cannot be setup.    */
DECL|method|addFileSystemMock ()
specifier|public
name|void
name|addFileSystemMock
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|SortedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fs
init|=
operator|new
name|ConcurrentSkipListMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|DirectoryListing
name|l
init|=
name|mockNn
operator|.
name|getListing
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|l
argument_list|)
operator|.
name|thenAnswer
argument_list|(
name|invocation
lambda|->
block|{
name|String
name|src
init|=
name|getSrc
argument_list|(
name|invocation
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"{} getListing({})"
argument_list|,
name|nsId
argument_list|,
name|src
argument_list|)
expr_stmt|;
if|if
condition|(
name|fs
operator|.
name|get
argument_list|(
name|src
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"File does not exist "
operator|+
name|src
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|src
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|src
operator|+=
literal|"/"
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|files
init|=
name|fs
operator|.
name|subMap
argument_list|(
name|src
argument_list|,
name|src
operator|+
name|Character
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HdfsFileStatus
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|file
range|:
name|files
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|file
operator|.
name|substring
argument_list|(
name|src
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
operator|<
literal|0
condition|)
block|{
name|HdfsFileStatus
name|fileStatus
init|=
name|getMockHdfsFileStatus
argument_list|(
name|file
argument_list|,
name|fs
operator|.
name|get
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|fileStatus
argument_list|)
expr_stmt|;
block|}
block|}
name|HdfsFileStatus
index|[]
name|array
init|=
name|list
operator|.
name|toArray
argument_list|(
operator|new
name|HdfsFileStatus
index|[
name|list
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
return|return
operator|new
name|DirectoryListing
argument_list|(
name|array
argument_list|,
literal|0
argument_list|)
return|;
block|}
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockNn
operator|.
name|getFileInfo
argument_list|(
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
name|invocation
lambda|->
block|{
name|String
name|src
init|=
name|getSrc
argument_list|(
name|invocation
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"{} getFileInfo({})"
argument_list|,
name|nsId
argument_list|,
name|src
argument_list|)
expr_stmt|;
return|return
name|getMockHdfsFileStatus
argument_list|(
name|src
argument_list|,
name|fs
operator|.
name|get
argument_list|(
name|src
argument_list|)
argument_list|)
return|;
block|}
argument_list|)
expr_stmt|;
name|HdfsFileStatus
name|c
init|=
name|mockNn
operator|.
name|create
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|,
name|anyString
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|,
name|anyShort
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|c
argument_list|)
operator|.
name|thenAnswer
argument_list|(
name|invocation
lambda|->
block|{
name|String
name|src
init|=
name|getSrc
argument_list|(
name|invocation
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"{} create({})"
argument_list|,
name|nsId
argument_list|,
name|src
argument_list|)
expr_stmt|;
name|boolean
name|createParent
init|=
operator|(
name|boolean
operator|)
name|invocation
operator|.
name|getArgument
argument_list|(
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
name|createParent
condition|)
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|src
argument_list|)
operator|.
name|getParent
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|path
operator|.
name|isRoot
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"{} create parent {}"
argument_list|,
name|nsId
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|fs
operator|.
name|put
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|,
literal|"DIRECTORY"
argument_list|)
expr_stmt|;
name|path
operator|=
name|path
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
block|}
name|fs
operator|.
name|put
argument_list|(
name|src
argument_list|,
literal|"FILE"
argument_list|)
expr_stmt|;
return|return
name|getMockHdfsFileStatus
argument_list|(
name|src
argument_list|,
literal|"FILE"
argument_list|)
return|;
block|}
argument_list|)
expr_stmt|;
name|LocatedBlocks
name|b
init|=
name|mockNn
operator|.
name|getBlockLocations
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|b
argument_list|)
operator|.
name|thenAnswer
argument_list|(
name|invocation
lambda|->
block|{
name|String
name|src
init|=
name|getSrc
argument_list|(
name|invocation
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"{} getBlockLocations({})"
argument_list|,
name|nsId
argument_list|,
name|src
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|containsKey
argument_list|(
name|src
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"{} cannot find {} for getBlockLocations"
argument_list|,
name|nsId
argument_list|,
name|src
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"File does not exist "
operator|+
name|src
argument_list|)
throw|;
block|}
return|return
name|mock
argument_list|(
name|LocatedBlocks
operator|.
name|class
argument_list|)
return|;
block|}
argument_list|)
expr_stmt|;
name|boolean
name|f
init|=
name|mockNn
operator|.
name|complete
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyString
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|f
argument_list|)
operator|.
name|thenAnswer
argument_list|(
name|invocation
lambda|->
block|{
name|String
name|src
init|=
name|getSrc
argument_list|(
name|invocation
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|containsKey
argument_list|(
name|src
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"{} cannot find {} for complete"
argument_list|,
name|nsId
argument_list|,
name|src
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"File does not exist "
operator|+
name|src
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
argument_list|)
expr_stmt|;
name|LocatedBlock
name|a
init|=
name|mockNn
operator|.
name|addBlock
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyString
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|a
argument_list|)
operator|.
name|thenAnswer
argument_list|(
name|invocation
lambda|->
block|{
name|String
name|src
init|=
name|getSrc
argument_list|(
name|invocation
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|containsKey
argument_list|(
name|src
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"{} cannot find {} for addBlock"
argument_list|,
name|nsId
argument_list|,
name|src
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"File does not exist "
operator|+
name|src
argument_list|)
throw|;
block|}
return|return
name|getMockLocatedBlock
argument_list|(
name|nsId
argument_list|)
return|;
block|}
argument_list|)
expr_stmt|;
name|boolean
name|m
init|=
name|mockNn
operator|.
name|mkdirs
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|m
argument_list|)
operator|.
name|thenAnswer
argument_list|(
name|invocation
lambda|->
block|{
name|String
name|src
init|=
name|getSrc
argument_list|(
name|invocation
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"{} mkdirs({})"
argument_list|,
name|nsId
argument_list|,
name|src
argument_list|)
expr_stmt|;
name|boolean
name|createParent
init|=
operator|(
name|boolean
operator|)
name|invocation
operator|.
name|getArgument
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|createParent
condition|)
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|src
argument_list|)
operator|.
name|getParent
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|path
operator|.
name|isRoot
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"{} mkdir parent {}"
argument_list|,
name|nsId
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|fs
operator|.
name|put
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|,
literal|"DIRECTORY"
argument_list|)
expr_stmt|;
name|path
operator|=
name|path
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
block|}
name|fs
operator|.
name|put
argument_list|(
name|src
argument_list|,
literal|"DIRECTORY"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockNn
operator|.
name|getServerDefaults
argument_list|()
argument_list|)
operator|.
name|thenAnswer
argument_list|(
name|invocation
lambda|->
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"{} getServerDefaults"
argument_list|,
name|nsId
argument_list|)
expr_stmt|;
name|FsServerDefaults
name|defaults
init|=
name|mock
argument_list|(
name|FsServerDefaults
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|defaults
operator|.
name|getChecksumType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Type
operator|.
name|valueOf
argument_list|(
name|DataChecksum
operator|.
name|CHECKSUM_CRC32
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|defaults
operator|.
name|getKeyProviderUri
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|nsId
argument_list|)
expr_stmt|;
return|return
name|defaults
return|;
block|}
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockNn
operator|.
name|getContentSummary
argument_list|(
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
name|invocation
lambda|->
block|{
name|String
name|src
init|=
name|getSrc
argument_list|(
name|invocation
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"{} getContentSummary({})"
argument_list|,
name|nsId
argument_list|,
name|src
argument_list|)
expr_stmt|;
if|if
condition|(
name|fs
operator|.
name|get
argument_list|(
name|src
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"File does not exist "
operator|+
name|src
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|src
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|src
operator|+=
literal|"/"
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|files
init|=
name|fs
operator|.
name|subMap
argument_list|(
name|src
argument_list|,
name|src
operator|+
name|Character
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|int
name|numFiles
init|=
literal|0
decl_stmt|;
name|int
name|numDirs
init|=
literal|0
decl_stmt|;
name|int
name|length
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|files
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|file
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|substring
argument_list|(
name|src
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
operator|<
literal|0
condition|)
block|{
name|String
name|type
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"DIRECTORY"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|numDirs
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"FILE"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|numFiles
operator|++
expr_stmt|;
name|length
operator|+=
literal|100
expr_stmt|;
block|}
block|}
block|}
return|return
operator|new
name|ContentSummary
operator|.
name|Builder
argument_list|()
operator|.
name|fileCount
argument_list|(
name|numFiles
argument_list|)
operator|.
name|directoryCount
argument_list|(
name|numDirs
argument_list|)
operator|.
name|length
argument_list|(
name|length
argument_list|)
operator|.
name|erasureCodingPolicy
argument_list|(
literal|""
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|getSrc (InvocationOnMock invocation)
specifier|private
specifier|static
name|String
name|getSrc
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
block|{
return|return
operator|(
name|String
operator|)
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|0
index|]
return|;
block|}
comment|/**    * Get a mock HDFS file status.    * @param filename Name of the file.    * @param type Type of the file (FILE, DIRECTORY, or null).    * @return HDFS file status    */
DECL|method|getMockHdfsFileStatus ( final String filename, final String type)
specifier|private
specifier|static
name|HdfsFileStatus
name|getMockHdfsFileStatus
parameter_list|(
specifier|final
name|String
name|filename
parameter_list|,
specifier|final
name|String
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|HdfsFileStatus
name|fileStatus
init|=
name|mock
argument_list|(
name|HdfsFileStatus
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|fileStatus
operator|.
name|getLocalNameInBytes
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|filename
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|fileStatus
operator|.
name|getPermission
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mock
argument_list|(
name|FsPermission
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|fileStatus
operator|.
name|getOwner
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"owner"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|fileStatus
operator|.
name|getGroup
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"group"
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"FILE"
argument_list|)
condition|)
block|{
name|when
argument_list|(
name|fileStatus
operator|.
name|getLen
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|100L
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|fileStatus
operator|.
name|getReplication
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|fileStatus
operator|.
name|getBlockSize
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|DFS_BLOCK_SIZE_DEFAULT
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"DIRECTORY"
argument_list|)
condition|)
block|{
name|when
argument_list|(
name|fileStatus
operator|.
name|isDir
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|fileStatus
operator|.
name|isDirectory
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|fileStatus
return|;
block|}
comment|/**    * Get a mock located block pointing to one of the subclusters. It is    * allocated in a fake Datanode.    * @param nsId Name service identifier (subcluster).    * @return Mock located block.    */
DECL|method|getMockLocatedBlock (final String nsId)
specifier|private
specifier|static
name|LocatedBlock
name|getMockLocatedBlock
parameter_list|(
specifier|final
name|String
name|nsId
parameter_list|)
block|{
name|LocatedBlock
name|lb
init|=
name|mock
argument_list|(
name|LocatedBlock
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|lb
operator|.
name|getCachedLocations
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|DatanodeInfo
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|DatanodeID
name|nodeId
init|=
operator|new
name|DatanodeID
argument_list|(
literal|"localhost"
argument_list|,
literal|"localhost"
argument_list|,
literal|"dn0"
argument_list|,
literal|1111
argument_list|,
literal|1112
argument_list|,
literal|1113
argument_list|,
literal|1114
argument_list|)
decl_stmt|;
name|DatanodeInfo
name|dnInfo
init|=
operator|new
name|DatanodeDescriptor
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|lb
operator|.
name|getLocations
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|DatanodeInfo
index|[]
block|{
name|dnInfo
block|}
argument_list|)
expr_stmt|;
name|ExtendedBlock
name|eb
init|=
name|mock
argument_list|(
name|ExtendedBlock
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|eb
operator|.
name|getBlockPoolId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|nsId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|lb
operator|.
name|getBlock
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|eb
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|tok
init|=
name|mock
argument_list|(
name|Token
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|tok
operator|.
name|getIdentifier
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|nsId
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|tok
operator|.
name|getPassword
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|nsId
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|tok
operator|.
name|getKind
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Text
argument_list|(
name|nsId
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|tok
operator|.
name|getService
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Text
argument_list|(
name|nsId
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|lb
operator|.
name|getBlockToken
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|tok
argument_list|)
expr_stmt|;
return|return
name|lb
return|;
block|}
comment|/**    * Register a set of NameNodes in a Router.    * @param router Router to register to.    * @param namenodes Set of NameNodes.    * @throws IOException If it cannot register them.    */
DECL|method|registerSubclusters (Router router, Collection<MockNamenode> namenodes)
specifier|public
specifier|static
name|void
name|registerSubclusters
parameter_list|(
name|Router
name|router
parameter_list|,
name|Collection
argument_list|<
name|MockNamenode
argument_list|>
name|namenodes
parameter_list|)
throws|throws
name|IOException
block|{
name|registerSubclusters
argument_list|(
name|singletonList
argument_list|(
name|router
argument_list|)
argument_list|,
name|namenodes
argument_list|,
name|emptySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Register a set of NameNodes in a set of Routers.    * @param routers Set of Routers.    * @param namenodes Set of NameNodes.    * @param unavailableSubclusters Set of unavailable subclusters.    * @throws IOException If it cannot register them.    */
DECL|method|registerSubclusters (List<Router> routers, Collection<MockNamenode> namenodes, Set<String> unavailableSubclusters)
specifier|public
specifier|static
name|void
name|registerSubclusters
parameter_list|(
name|List
argument_list|<
name|Router
argument_list|>
name|routers
parameter_list|,
name|Collection
argument_list|<
name|MockNamenode
argument_list|>
name|namenodes
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|unavailableSubclusters
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
specifier|final
name|Router
name|router
range|:
name|routers
control|)
block|{
name|MembershipNamenodeResolver
name|resolver
init|=
operator|(
name|MembershipNamenodeResolver
operator|)
name|router
operator|.
name|getNamenodeResolver
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|MockNamenode
name|nn
range|:
name|namenodes
control|)
block|{
name|String
name|nsId
init|=
name|nn
operator|.
name|getNameserviceId
argument_list|()
decl_stmt|;
name|String
name|rpcAddress
init|=
literal|"localhost:"
operator|+
name|nn
operator|.
name|getRPCPort
argument_list|()
decl_stmt|;
name|String
name|httpAddress
init|=
literal|"localhost:"
operator|+
name|nn
operator|.
name|getHTTPPort
argument_list|()
decl_stmt|;
name|String
name|scheme
init|=
literal|"http"
decl_stmt|;
name|NamenodeStatusReport
name|report
init|=
operator|new
name|NamenodeStatusReport
argument_list|(
name|nsId
argument_list|,
literal|null
argument_list|,
name|rpcAddress
argument_list|,
name|rpcAddress
argument_list|,
name|rpcAddress
argument_list|,
name|scheme
argument_list|,
name|httpAddress
argument_list|)
decl_stmt|;
if|if
condition|(
name|unavailableSubclusters
operator|.
name|contains
argument_list|(
name|nsId
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Register {} as UNAVAILABLE"
argument_list|,
name|nsId
argument_list|)
expr_stmt|;
name|report
operator|.
name|setRegistrationValid
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Register {} as ACTIVE"
argument_list|,
name|nsId
argument_list|)
expr_stmt|;
name|report
operator|.
name|setRegistrationValid
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|report
operator|.
name|setNamespaceInfo
argument_list|(
operator|new
name|NamespaceInfo
argument_list|(
literal|0
argument_list|,
name|nsId
argument_list|,
name|nsId
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|resolver
operator|.
name|registerNamenode
argument_list|(
name|report
argument_list|)
expr_stmt|;
block|}
name|resolver
operator|.
name|loadCache
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

