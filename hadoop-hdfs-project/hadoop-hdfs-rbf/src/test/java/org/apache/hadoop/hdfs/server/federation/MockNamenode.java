begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_ADMIN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceProtocol
operator|.
name|HAServiceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|proto
operator|.
name|HAServiceProtocolProtos
operator|.
name|HAServiceProtocolService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|protocolPB
operator|.
name|HAServiceProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|protocolPB
operator|.
name|HAServiceProtocolServerSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ClientNamenodeProtocolProtos
operator|.
name|ClientNamenodeProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DatanodeProtocolProtos
operator|.
name|DatanodeProtocolService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|NamenodeProtocolProtos
operator|.
name|NamenodeProtocolService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|ClientNamenodeProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|ClientNamenodeProtocolServerSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|DatanodeProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|DatanodeProtocolServerSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|NamenodeProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|NamenodeProtocolServerSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamenodeProtocols
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamespaceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|http
operator|.
name|HttpServer2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtobufRpcEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|BlockingService
import|;
end_import

begin_comment
comment|/**  * Mock for the network interfaces (e.g., RPC and HTTP) of a Namenode. This is  * used by the Routers in a mock cluster.  */
end_comment

begin_class
DECL|class|MockNamenode
specifier|public
class|class
name|MockNamenode
block|{
comment|/** Mock implementation of the Namenode. */
DECL|field|mockNn
specifier|private
specifier|final
name|NamenodeProtocols
name|mockNn
decl_stmt|;
comment|/** HA state of the Namenode. */
DECL|field|haState
specifier|private
name|HAServiceState
name|haState
init|=
name|HAServiceState
operator|.
name|STANDBY
decl_stmt|;
comment|/** RPC server of the Namenode that redirects calls to the mock. */
DECL|field|rpcServer
specifier|private
name|Server
name|rpcServer
decl_stmt|;
comment|/** HTTP server of the Namenode that redirects calls to the mock. */
DECL|field|httpServer
specifier|private
name|HttpServer2
name|httpServer
decl_stmt|;
DECL|method|MockNamenode ()
specifier|public
name|MockNamenode
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|this
operator|.
name|mockNn
operator|=
name|mock
argument_list|(
name|NamenodeProtocols
operator|.
name|class
argument_list|)
expr_stmt|;
name|setupMock
argument_list|()
expr_stmt|;
name|setupRPCServer
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|setupHTTPServer
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Setup the mock of the Namenode. It offers the basic functionality for    * Routers to get the status.    * @throws IOException If the mock cannot be setup.    */
DECL|method|setupMock ()
specifier|protected
name|void
name|setupMock
parameter_list|()
throws|throws
name|IOException
block|{
name|NamespaceInfo
name|nsInfo
init|=
operator|new
name|NamespaceInfo
argument_list|(
literal|1
argument_list|,
literal|"clusterId"
argument_list|,
literal|"bpId"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockNn
operator|.
name|versionRequest
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|nsInfo
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockNn
operator|.
name|getServiceStatus
argument_list|()
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|HAServiceStatus
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|HAServiceStatus
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|HAServiceStatus
name|haStatus
init|=
operator|new
name|HAServiceStatus
argument_list|(
name|getHAServiceState
argument_list|()
argument_list|)
decl_stmt|;
name|haStatus
operator|.
name|setNotReadyToBecomeActive
argument_list|(
literal|""
argument_list|)
expr_stmt|;
return|return
name|haStatus
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Setup the RPC server of the Namenode that redirects calls to the mock.    * @param conf Configuration of the server.    * @throws IOException If the RPC server cannot be setup.    */
DECL|method|setupRPCServer (final Configuration conf)
specifier|private
name|void
name|setupRPCServer
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|RPC
operator|.
name|setProtocolEngine
argument_list|(
name|conf
argument_list|,
name|ClientNamenodeProtocolPB
operator|.
name|class
argument_list|,
name|ProtobufRpcEngine
operator|.
name|class
argument_list|)
expr_stmt|;
name|ClientNamenodeProtocolServerSideTranslatorPB
name|clientNNProtoXlator
init|=
operator|new
name|ClientNamenodeProtocolServerSideTranslatorPB
argument_list|(
name|mockNn
argument_list|)
decl_stmt|;
name|BlockingService
name|clientNNPbService
init|=
name|ClientNamenodeProtocol
operator|.
name|newReflectiveBlockingService
argument_list|(
name|clientNNProtoXlator
argument_list|)
decl_stmt|;
name|rpcServer
operator|=
operator|new
name|RPC
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|setProtocol
argument_list|(
name|ClientNamenodeProtocolPB
operator|.
name|class
argument_list|)
operator|.
name|setInstance
argument_list|(
name|clientNNPbService
argument_list|)
operator|.
name|setBindAddress
argument_list|(
literal|"0.0.0.0"
argument_list|)
operator|.
name|setPort
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|NamenodeProtocolServerSideTranslatorPB
name|nnProtoXlator
init|=
operator|new
name|NamenodeProtocolServerSideTranslatorPB
argument_list|(
name|mockNn
argument_list|)
decl_stmt|;
name|BlockingService
name|nnProtoPbService
init|=
name|NamenodeProtocolService
operator|.
name|newReflectiveBlockingService
argument_list|(
name|nnProtoXlator
argument_list|)
decl_stmt|;
name|DFSUtil
operator|.
name|addPBProtocol
argument_list|(
name|conf
argument_list|,
name|NamenodeProtocolPB
operator|.
name|class
argument_list|,
name|nnProtoPbService
argument_list|,
name|rpcServer
argument_list|)
expr_stmt|;
name|DatanodeProtocolServerSideTranslatorPB
name|dnProtoPbXlator
init|=
operator|new
name|DatanodeProtocolServerSideTranslatorPB
argument_list|(
name|mockNn
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|BlockingService
name|dnProtoPbService
init|=
name|DatanodeProtocolService
operator|.
name|newReflectiveBlockingService
argument_list|(
name|dnProtoPbXlator
argument_list|)
decl_stmt|;
name|DFSUtil
operator|.
name|addPBProtocol
argument_list|(
name|conf
argument_list|,
name|DatanodeProtocolPB
operator|.
name|class
argument_list|,
name|dnProtoPbService
argument_list|,
name|rpcServer
argument_list|)
expr_stmt|;
name|HAServiceProtocolServerSideTranslatorPB
name|haServiceProtoXlator
init|=
operator|new
name|HAServiceProtocolServerSideTranslatorPB
argument_list|(
name|mockNn
argument_list|)
decl_stmt|;
name|BlockingService
name|haProtoPbService
init|=
name|HAServiceProtocolService
operator|.
name|newReflectiveBlockingService
argument_list|(
name|haServiceProtoXlator
argument_list|)
decl_stmt|;
name|DFSUtil
operator|.
name|addPBProtocol
argument_list|(
name|conf
argument_list|,
name|HAServiceProtocolPB
operator|.
name|class
argument_list|,
name|haProtoPbService
argument_list|,
name|rpcServer
argument_list|)
expr_stmt|;
name|rpcServer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|/**    * Setup the HTTP server of the Namenode that redirects calls to the mock.    * @param conf Configuration of the server.    * @throws IOException If the HTTP server cannot be setup.    */
DECL|method|setupHTTPServer (Configuration conf)
specifier|private
name|void
name|setupHTTPServer
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|HttpServer2
operator|.
name|Builder
name|builder
init|=
operator|new
name|HttpServer2
operator|.
name|Builder
argument_list|()
operator|.
name|setName
argument_list|(
literal|"hdfs"
argument_list|)
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
operator|.
name|setACL
argument_list|(
operator|new
name|AccessControlList
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|DFS_ADMIN
argument_list|,
literal|" "
argument_list|)
argument_list|)
argument_list|)
operator|.
name|addEndpoint
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"http://0.0.0.0:0"
argument_list|)
argument_list|)
decl_stmt|;
name|httpServer
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|httpServer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|/**    * Get the RPC port for the Mock Namenode.    * @return RPC port.    */
DECL|method|getRPCPort ()
specifier|public
name|int
name|getRPCPort
parameter_list|()
block|{
return|return
name|rpcServer
operator|.
name|getListenerAddress
argument_list|()
operator|.
name|getPort
argument_list|()
return|;
block|}
comment|/**    * Get the HTTP port for the Mock Namenode.    * @return HTTP port.    */
DECL|method|getHTTPPort ()
specifier|public
name|int
name|getHTTPPort
parameter_list|()
block|{
return|return
name|httpServer
operator|.
name|getConnectorAddress
argument_list|(
literal|0
argument_list|)
operator|.
name|getPort
argument_list|()
return|;
block|}
comment|/**    * Get the Mock core. This is used to extend the mock.    * @return Mock Namenode protocol to be extended.    */
DECL|method|getMock ()
specifier|public
name|NamenodeProtocols
name|getMock
parameter_list|()
block|{
return|return
name|mockNn
return|;
block|}
comment|/**    * Get the HA state of the Mock Namenode.    * @return HA state (ACTIVE or STANDBY).    */
DECL|method|getHAServiceState ()
specifier|public
name|HAServiceState
name|getHAServiceState
parameter_list|()
block|{
return|return
name|haState
return|;
block|}
comment|/**    * Show the Mock Namenode as Active.    */
DECL|method|transitionToActive ()
specifier|public
name|void
name|transitionToActive
parameter_list|()
block|{
name|this
operator|.
name|haState
operator|=
name|HAServiceState
operator|.
name|ACTIVE
expr_stmt|;
block|}
comment|/**    * Show the Mock Namenode as Standby.    */
DECL|method|transitionToStandby ()
specifier|public
name|void
name|transitionToStandby
parameter_list|()
block|{
name|this
operator|.
name|haState
operator|=
name|HAServiceState
operator|.
name|STANDBY
expr_stmt|;
block|}
comment|/**    * Stop the Mock Namenode. It stops all the servers.    * @throws Exception If it cannot stop the Namenode.    */
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|rpcServer
operator|!=
literal|null
condition|)
block|{
name|rpcServer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|httpServer
operator|!=
literal|null
condition|)
block|{
name|httpServer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

