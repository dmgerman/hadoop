begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|FederationStateStoreTestUtils
operator|.
name|createMockRegistrationForNamenode
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|FederationStateStoreTestUtils
operator|.
name|getStateStoreConfiguration
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|FederationStateStoreTestUtils
operator|.
name|synchronizeRecords
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|ActiveNamenodeResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|FederationNamenodeServiceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|FileSubclusterResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|MembershipNamenodeResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|MountTableResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
operator|.
name|RBFConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|StateStoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|MembershipState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|MountTable
import|;
end_import

begin_comment
comment|/**  * Test utility to mimic a federated HDFS cluster with a router and a state  * store.  */
end_comment

begin_class
DECL|class|StateStoreDFSCluster
specifier|public
class|class
name|StateStoreDFSCluster
extends|extends
name|MiniRouterDFSCluster
block|{
DECL|field|DEFAULT_FILE_RESOLVER
specifier|private
specifier|static
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|DEFAULT_FILE_RESOLVER
init|=
name|MountTableResolver
operator|.
name|class
decl_stmt|;
DECL|field|DEFAULT_NAMENODE_RESOLVER
specifier|private
specifier|static
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|DEFAULT_NAMENODE_RESOLVER
init|=
name|MembershipNamenodeResolver
operator|.
name|class
decl_stmt|;
DECL|method|StateStoreDFSCluster (boolean ha, int numNameservices, int numNamenodes, long heartbeatInterval, long cacheFlushInterval)
specifier|public
name|StateStoreDFSCluster
parameter_list|(
name|boolean
name|ha
parameter_list|,
name|int
name|numNameservices
parameter_list|,
name|int
name|numNamenodes
parameter_list|,
name|long
name|heartbeatInterval
parameter_list|,
name|long
name|cacheFlushInterval
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|this
argument_list|(
name|ha
argument_list|,
name|numNameservices
argument_list|,
name|numNamenodes
argument_list|,
name|heartbeatInterval
argument_list|,
name|cacheFlushInterval
argument_list|,
name|DEFAULT_FILE_RESOLVER
argument_list|)
expr_stmt|;
block|}
DECL|method|StateStoreDFSCluster (boolean ha, int numNameservices, int numNamenodes, long heartbeatInterval, long cacheFlushInterval, Class<?> fileResolver)
specifier|public
name|StateStoreDFSCluster
parameter_list|(
name|boolean
name|ha
parameter_list|,
name|int
name|numNameservices
parameter_list|,
name|int
name|numNamenodes
parameter_list|,
name|long
name|heartbeatInterval
parameter_list|,
name|long
name|cacheFlushInterval
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|fileResolver
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|super
argument_list|(
name|ha
argument_list|,
name|numNameservices
argument_list|,
name|numNamenodes
argument_list|,
name|heartbeatInterval
argument_list|,
name|cacheFlushInterval
argument_list|)
expr_stmt|;
comment|// Attach state store and resolvers to router
name|Configuration
name|stateStoreConfig
init|=
name|getStateStoreConfiguration
argument_list|()
decl_stmt|;
comment|// Use state store backed resolvers
name|stateStoreConfig
operator|.
name|setClass
argument_list|(
name|RBFConfigKeys
operator|.
name|FEDERATION_NAMENODE_RESOLVER_CLIENT_CLASS
argument_list|,
name|DEFAULT_NAMENODE_RESOLVER
argument_list|,
name|ActiveNamenodeResolver
operator|.
name|class
argument_list|)
expr_stmt|;
name|stateStoreConfig
operator|.
name|setClass
argument_list|(
name|RBFConfigKeys
operator|.
name|FEDERATION_FILE_RESOLVER_CLIENT_CLASS
argument_list|,
name|fileResolver
argument_list|,
name|FileSubclusterResolver
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|addRouterOverrides
argument_list|(
name|stateStoreConfig
argument_list|)
expr_stmt|;
block|}
DECL|method|StateStoreDFSCluster (boolean ha, int numNameservices, Class<?> fileResolver)
specifier|public
name|StateStoreDFSCluster
parameter_list|(
name|boolean
name|ha
parameter_list|,
name|int
name|numNameservices
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|fileResolver
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|this
argument_list|(
name|ha
argument_list|,
name|numNameservices
argument_list|,
literal|2
argument_list|,
name|DEFAULT_HEARTBEAT_INTERVAL_MS
argument_list|,
name|DEFAULT_CACHE_INTERVAL_MS
argument_list|,
name|fileResolver
argument_list|)
expr_stmt|;
block|}
DECL|method|StateStoreDFSCluster (boolean ha, int numNameservices)
specifier|public
name|StateStoreDFSCluster
parameter_list|(
name|boolean
name|ha
parameter_list|,
name|int
name|numNameservices
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|this
argument_list|(
name|ha
argument_list|,
name|numNameservices
argument_list|,
literal|2
argument_list|,
name|DEFAULT_HEARTBEAT_INTERVAL_MS
argument_list|,
name|DEFAULT_CACHE_INTERVAL_MS
argument_list|)
expr_stmt|;
block|}
DECL|method|StateStoreDFSCluster (boolean ha, int numNameservices, int numNamnodes)
specifier|public
name|StateStoreDFSCluster
parameter_list|(
name|boolean
name|ha
parameter_list|,
name|int
name|numNameservices
parameter_list|,
name|int
name|numNamnodes
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|this
argument_list|(
name|ha
argument_list|,
name|numNameservices
argument_list|,
name|numNamnodes
argument_list|,
name|DEFAULT_HEARTBEAT_INTERVAL_MS
argument_list|,
name|DEFAULT_CACHE_INTERVAL_MS
argument_list|)
expr_stmt|;
block|}
comment|/////////////////////////////////////////////////////////////////////////////
comment|// State Store Test Fixtures
comment|/////////////////////////////////////////////////////////////////////////////
comment|/**    * Adds test fixtures for NN registation for each NN nameservice -> NS    * namenode -> NN rpcAddress -> 0.0.0.0:0 webAddress -> 0.0.0.0:0 state ->    * STANDBY safeMode -> false blockPool -> test.    *    * @param stateStore State Store.    * @throws IOException If it cannot register.    */
DECL|method|createTestRegistration (StateStoreService stateStore)
specifier|public
name|void
name|createTestRegistration
parameter_list|(
name|StateStoreService
name|stateStore
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|MembershipState
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<
name|MembershipState
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|NamenodeContext
name|nn
range|:
name|this
operator|.
name|getNamenodes
argument_list|()
control|)
block|{
name|MembershipState
name|entry
init|=
name|createMockRegistrationForNamenode
argument_list|(
name|nn
operator|.
name|getNameserviceId
argument_list|()
argument_list|,
name|nn
operator|.
name|getNamenodeId
argument_list|()
argument_list|,
name|FederationNamenodeServiceState
operator|.
name|STANDBY
argument_list|)
decl_stmt|;
name|entries
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
name|synchronizeRecords
argument_list|(
name|stateStore
argument_list|,
name|entries
argument_list|,
name|MembershipState
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|createTestMountTable (StateStoreService stateStore)
specifier|public
name|void
name|createTestMountTable
parameter_list|(
name|StateStoreService
name|stateStore
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|MountTable
argument_list|>
name|mounts
init|=
name|generateMockMountTable
argument_list|()
decl_stmt|;
name|synchronizeRecords
argument_list|(
name|stateStore
argument_list|,
name|mounts
argument_list|,
name|MountTable
operator|.
name|class
argument_list|)
expr_stmt|;
name|stateStore
operator|.
name|refreshCaches
argument_list|()
expr_stmt|;
block|}
DECL|method|generateMockMountTable ()
specifier|public
name|List
argument_list|<
name|MountTable
argument_list|>
name|generateMockMountTable
parameter_list|()
throws|throws
name|IOException
block|{
comment|// create table entries
name|List
argument_list|<
name|MountTable
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|ns
range|:
name|this
operator|.
name|getNameservices
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|destMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|destMap
operator|.
name|put
argument_list|(
name|ns
argument_list|,
name|getNamenodePathForNS
argument_list|(
name|ns
argument_list|)
argument_list|)
expr_stmt|;
comment|// Direct path
name|String
name|fedPath
init|=
name|getFederatedPathForNS
argument_list|(
name|ns
argument_list|)
decl_stmt|;
name|MountTable
name|entry
init|=
name|MountTable
operator|.
name|newInstance
argument_list|(
name|fedPath
argument_list|,
name|destMap
argument_list|)
decl_stmt|;
name|entries
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
comment|// Root path goes to nameservice 1
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|destMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|ns0
init|=
name|this
operator|.
name|getNameservices
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|destMap
operator|.
name|put
argument_list|(
name|ns0
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
name|MountTable
name|entry
init|=
name|MountTable
operator|.
name|newInstance
argument_list|(
literal|"/"
argument_list|,
name|destMap
argument_list|)
decl_stmt|;
name|entries
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
return|return
name|entries
return|;
block|}
block|}
end_class

end_unit

