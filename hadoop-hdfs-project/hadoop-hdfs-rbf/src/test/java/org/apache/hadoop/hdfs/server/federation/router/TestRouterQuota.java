begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.router
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|QuotaUsage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DSQuotaExceededException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|NSQuotaExceededException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|MiniRouterDFSCluster
operator|.
name|NamenodeContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|MiniRouterDFSCluster
operator|.
name|RouterContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|RouterConfigBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|StateStoreDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|MountTableManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|MountTableResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|AddMountTableEntryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|AddMountTableEntryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|GetMountTableEntriesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|GetMountTableEntriesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|RemoveMountTableEntryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|RemoveMountTableEntryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|UpdateMountTableEntryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|MountTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_comment
comment|/**  * Tests quota behaviors in Router-based Federation.  */
end_comment

begin_class
DECL|class|TestRouterQuota
specifier|public
class|class
name|TestRouterQuota
block|{
DECL|field|cluster
specifier|private
specifier|static
name|StateStoreDFSCluster
name|cluster
decl_stmt|;
DECL|field|nnContext1
specifier|private
specifier|static
name|NamenodeContext
name|nnContext1
decl_stmt|;
DECL|field|nnContext2
specifier|private
specifier|static
name|NamenodeContext
name|nnContext2
decl_stmt|;
DECL|field|routerContext
specifier|private
specifier|static
name|RouterContext
name|routerContext
decl_stmt|;
DECL|field|resolver
specifier|private
specifier|static
name|MountTableResolver
name|resolver
decl_stmt|;
DECL|field|BLOCK_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|BLOCK_SIZE
init|=
literal|512
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Build and start a federated cluster
name|cluster
operator|=
operator|new
name|StateStoreDFSCluster
argument_list|(
literal|false
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Configuration
name|routerConf
init|=
operator|new
name|RouterConfigBuilder
argument_list|()
operator|.
name|stateStore
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|quota
argument_list|()
operator|.
name|rpc
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|routerConf
operator|.
name|set
argument_list|(
name|RBFConfigKeys
operator|.
name|DFS_ROUTER_QUOTA_CACHE_UPATE_INTERVAL
argument_list|,
literal|"2s"
argument_list|)
expr_stmt|;
comment|// override some hdfs settings that used in testing space quota
name|Configuration
name|hdfsConf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|hdfsConf
operator|.
name|setInt
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|hdfsConf
operator|.
name|setInt
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|DFS_REPLICATION_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|addRouterOverrides
argument_list|(
name|routerConf
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|addNamenodeOverrides
argument_list|(
name|hdfsConf
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|startCluster
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|startRouters
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitClusterUp
argument_list|()
expr_stmt|;
name|nnContext1
operator|=
name|cluster
operator|.
name|getNamenode
argument_list|(
name|cluster
operator|.
name|getNameservices
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|nnContext2
operator|=
name|cluster
operator|.
name|getNamenode
argument_list|(
name|cluster
operator|.
name|getNameservices
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|routerContext
operator|=
name|cluster
operator|.
name|getRandomRouter
argument_list|()
expr_stmt|;
name|Router
name|router
init|=
name|routerContext
operator|.
name|getRouter
argument_list|()
decl_stmt|;
name|resolver
operator|=
operator|(
name|MountTableResolver
operator|)
name|router
operator|.
name|getSubclusterResolver
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|stopRouter
argument_list|(
name|routerContext
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testNamespaceQuotaExceed ()
specifier|public
name|void
name|testNamespaceQuotaExceed
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|nsQuota
init|=
literal|3
decl_stmt|;
specifier|final
name|FileSystem
name|nnFs1
init|=
name|nnContext1
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|FileSystem
name|nnFs2
init|=
name|nnContext2
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// Add two mount tables:
comment|// /nsquota --> ns0---testdir1
comment|// /nsquota/subdir --> ns1---testdir2
name|nnFs1
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/testdir1"
argument_list|)
argument_list|)
expr_stmt|;
name|nnFs2
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/testdir2"
argument_list|)
argument_list|)
expr_stmt|;
name|MountTable
name|mountTable1
init|=
name|MountTable
operator|.
name|newInstance
argument_list|(
literal|"/nsquota"
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"ns0"
argument_list|,
literal|"/testdir1"
argument_list|)
argument_list|)
decl_stmt|;
name|mountTable1
operator|.
name|setQuota
argument_list|(
operator|new
name|RouterQuotaUsage
operator|.
name|Builder
argument_list|()
operator|.
name|quota
argument_list|(
name|nsQuota
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|addMountTable
argument_list|(
name|mountTable1
argument_list|)
expr_stmt|;
name|MountTable
name|mountTable2
init|=
name|MountTable
operator|.
name|newInstance
argument_list|(
literal|"/nsquota/subdir"
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"ns1"
argument_list|,
literal|"/testdir2"
argument_list|)
argument_list|)
decl_stmt|;
name|mountTable2
operator|.
name|setQuota
argument_list|(
operator|new
name|RouterQuotaUsage
operator|.
name|Builder
argument_list|()
operator|.
name|quota
argument_list|(
name|nsQuota
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|addMountTable
argument_list|(
name|mountTable2
argument_list|)
expr_stmt|;
specifier|final
name|FileSystem
name|routerFs
init|=
name|routerContext
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
name|boolean
name|isNsQuotaViolated
init|=
literal|false
decl_stmt|;
try|try
block|{
comment|// create new directory to trigger NSQuotaExceededException
name|routerFs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/nsquota/"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|routerFs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/nsquota/subdir/"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NSQuotaExceededException
name|e
parameter_list|)
block|{
name|isNsQuotaViolated
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ignored
parameter_list|)
block|{         }
return|return
name|isNsQuotaViolated
return|;
block|}
block|}
argument_list|,
literal|5000
argument_list|,
literal|60000
argument_list|)
expr_stmt|;
comment|// mkdir in real FileSystem should be okay
name|nnFs1
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/testdir1/"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|nnFs2
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/testdir2/"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// delete/rename call should be still okay
name|routerFs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/nsquota"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|routerFs
operator|.
name|rename
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/nsquota/subdir"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/nsquota/subdir"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStorageSpaceQuotaaExceed ()
specifier|public
name|void
name|testStorageSpaceQuotaaExceed
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|ssQuota
init|=
literal|3071
decl_stmt|;
specifier|final
name|FileSystem
name|nnFs1
init|=
name|nnContext1
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|FileSystem
name|nnFs2
init|=
name|nnContext2
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// Add two mount tables:
comment|// /ssquota --> ns0---testdir3
comment|// /ssquota/subdir --> ns1---testdir4
name|nnFs1
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/testdir3"
argument_list|)
argument_list|)
expr_stmt|;
name|nnFs2
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/testdir4"
argument_list|)
argument_list|)
expr_stmt|;
name|MountTable
name|mountTable1
init|=
name|MountTable
operator|.
name|newInstance
argument_list|(
literal|"/ssquota"
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"ns0"
argument_list|,
literal|"/testdir3"
argument_list|)
argument_list|)
decl_stmt|;
name|mountTable1
operator|.
name|setQuota
argument_list|(
operator|new
name|RouterQuotaUsage
operator|.
name|Builder
argument_list|()
operator|.
name|spaceQuota
argument_list|(
name|ssQuota
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|addMountTable
argument_list|(
name|mountTable1
argument_list|)
expr_stmt|;
name|MountTable
name|mountTable2
init|=
name|MountTable
operator|.
name|newInstance
argument_list|(
literal|"/ssquota/subdir"
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"ns1"
argument_list|,
literal|"/testdir4"
argument_list|)
argument_list|)
decl_stmt|;
name|mountTable2
operator|.
name|setQuota
argument_list|(
operator|new
name|RouterQuotaUsage
operator|.
name|Builder
argument_list|()
operator|.
name|spaceQuota
argument_list|(
name|ssQuota
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|addMountTable
argument_list|(
name|mountTable2
argument_list|)
expr_stmt|;
name|DFSClient
name|routerClient
init|=
name|routerContext
operator|.
name|getClient
argument_list|()
decl_stmt|;
name|routerClient
operator|.
name|create
argument_list|(
literal|"/ssquota/file"
argument_list|,
literal|true
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|routerClient
operator|.
name|create
argument_list|(
literal|"/ssquota/subdir/file"
argument_list|,
literal|true
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
name|boolean
name|isDsQuotaViolated
init|=
literal|false
decl_stmt|;
try|try
block|{
comment|// append data to trigger NSQuotaExceededException
name|appendData
argument_list|(
literal|"/ssquota/file"
argument_list|,
name|routerClient
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|appendData
argument_list|(
literal|"/ssquota/subdir/file"
argument_list|,
name|routerClient
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DSQuotaExceededException
name|e
parameter_list|)
block|{
name|isDsQuotaViolated
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ignored
parameter_list|)
block|{         }
return|return
name|isDsQuotaViolated
return|;
block|}
block|}
argument_list|,
literal|5000
argument_list|,
literal|60000
argument_list|)
expr_stmt|;
comment|// append data to destination path in real FileSystem should be okay
name|appendData
argument_list|(
literal|"/testdir3/file"
argument_list|,
name|nnContext1
operator|.
name|getClient
argument_list|()
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|appendData
argument_list|(
literal|"/testdir4/file"
argument_list|,
name|nnContext2
operator|.
name|getClient
argument_list|()
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add a mount table entry to the mount table through the admin API.    * @param entry Mount table entry to add.    * @return If it was successfully added.    * @throws IOException Problems adding entries.    */
DECL|method|addMountTable (final MountTable entry)
specifier|private
name|boolean
name|addMountTable
parameter_list|(
specifier|final
name|MountTable
name|entry
parameter_list|)
throws|throws
name|IOException
block|{
name|RouterClient
name|client
init|=
name|routerContext
operator|.
name|getAdminClient
argument_list|()
decl_stmt|;
name|MountTableManager
name|mountTableManager
init|=
name|client
operator|.
name|getMountTableManager
argument_list|()
decl_stmt|;
name|AddMountTableEntryRequest
name|addRequest
init|=
name|AddMountTableEntryRequest
operator|.
name|newInstance
argument_list|(
name|entry
argument_list|)
decl_stmt|;
name|AddMountTableEntryResponse
name|addResponse
init|=
name|mountTableManager
operator|.
name|addMountTableEntry
argument_list|(
name|addRequest
argument_list|)
decl_stmt|;
comment|// Reload the Router cache
name|resolver
operator|.
name|loadCache
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|addResponse
operator|.
name|getStatus
argument_list|()
return|;
block|}
comment|/**    * Append data in specified file.    * @param path Path of file.    * @param client DFS Client.    * @param dataLen The length of write data.    * @throws IOException    */
DECL|method|appendData (String path, DFSClient client, int dataLen)
specifier|private
name|void
name|appendData
parameter_list|(
name|String
name|path
parameter_list|,
name|DFSClient
name|client
parameter_list|,
name|int
name|dataLen
parameter_list|)
throws|throws
name|IOException
block|{
name|EnumSet
argument_list|<
name|CreateFlag
argument_list|>
name|createFlag
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateFlag
operator|.
name|APPEND
argument_list|)
decl_stmt|;
name|HdfsDataOutputStream
name|stream
init|=
name|client
operator|.
name|append
argument_list|(
name|path
argument_list|,
literal|1024
argument_list|,
name|createFlag
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|dataLen
index|]
decl_stmt|;
name|stream
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetQuota ()
specifier|public
name|void
name|testSetQuota
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|nsQuota
init|=
literal|5
decl_stmt|;
name|long
name|ssQuota
init|=
literal|100
decl_stmt|;
specifier|final
name|FileSystem
name|nnFs1
init|=
name|nnContext1
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|FileSystem
name|nnFs2
init|=
name|nnContext2
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// Add two mount tables:
comment|// /setquota --> ns0---testdir5
comment|// /setquota/subdir --> ns1---testdir6
name|nnFs1
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/testdir5"
argument_list|)
argument_list|)
expr_stmt|;
name|nnFs2
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/testdir6"
argument_list|)
argument_list|)
expr_stmt|;
name|MountTable
name|mountTable1
init|=
name|MountTable
operator|.
name|newInstance
argument_list|(
literal|"/setquota"
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"ns0"
argument_list|,
literal|"/testdir5"
argument_list|)
argument_list|)
decl_stmt|;
name|mountTable1
operator|.
name|setQuota
argument_list|(
operator|new
name|RouterQuotaUsage
operator|.
name|Builder
argument_list|()
operator|.
name|quota
argument_list|(
name|nsQuota
argument_list|)
operator|.
name|spaceQuota
argument_list|(
name|ssQuota
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|addMountTable
argument_list|(
name|mountTable1
argument_list|)
expr_stmt|;
comment|// don't set quota for subpath of mount table
name|MountTable
name|mountTable2
init|=
name|MountTable
operator|.
name|newInstance
argument_list|(
literal|"/setquota/subdir"
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"ns1"
argument_list|,
literal|"/testdir6"
argument_list|)
argument_list|)
decl_stmt|;
name|addMountTable
argument_list|(
name|mountTable2
argument_list|)
expr_stmt|;
name|RouterQuotaUpdateService
name|updateService
init|=
name|routerContext
operator|.
name|getRouter
argument_list|()
operator|.
name|getQuotaCacheUpdateService
argument_list|()
decl_stmt|;
comment|// ensure setQuota RPC call was invoked
name|updateService
operator|.
name|periodicInvoke
argument_list|()
expr_stmt|;
name|ClientProtocol
name|client1
init|=
name|nnContext1
operator|.
name|getClient
argument_list|()
operator|.
name|getNamenode
argument_list|()
decl_stmt|;
name|ClientProtocol
name|client2
init|=
name|nnContext2
operator|.
name|getClient
argument_list|()
operator|.
name|getNamenode
argument_list|()
decl_stmt|;
specifier|final
name|QuotaUsage
name|quota1
init|=
name|client1
operator|.
name|getQuotaUsage
argument_list|(
literal|"/testdir5"
argument_list|)
decl_stmt|;
specifier|final
name|QuotaUsage
name|quota2
init|=
name|client2
operator|.
name|getQuotaUsage
argument_list|(
literal|"/testdir6"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|nsQuota
argument_list|,
name|quota1
operator|.
name|getQuota
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ssQuota
argument_list|,
name|quota1
operator|.
name|getSpaceQuota
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|nsQuota
argument_list|,
name|quota2
operator|.
name|getQuota
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ssQuota
argument_list|,
name|quota2
operator|.
name|getSpaceQuota
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetQuota ()
specifier|public
name|void
name|testGetQuota
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|nsQuota
init|=
literal|10
decl_stmt|;
name|long
name|ssQuota
init|=
literal|100
decl_stmt|;
specifier|final
name|FileSystem
name|nnFs1
init|=
name|nnContext1
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|FileSystem
name|nnFs2
init|=
name|nnContext2
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// Add two mount tables:
comment|// /getquota --> ns0---/testdir7
comment|// /getquota/subdir1 --> ns0---/testdir7/subdir
comment|// /getquota/subdir2 --> ns1---/testdir8
name|nnFs1
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/testdir7"
argument_list|)
argument_list|)
expr_stmt|;
name|nnFs1
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/testdir7/subdir"
argument_list|)
argument_list|)
expr_stmt|;
name|nnFs2
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/testdir8"
argument_list|)
argument_list|)
expr_stmt|;
name|MountTable
name|mountTable1
init|=
name|MountTable
operator|.
name|newInstance
argument_list|(
literal|"/getquota"
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"ns0"
argument_list|,
literal|"/testdir7"
argument_list|)
argument_list|)
decl_stmt|;
name|mountTable1
operator|.
name|setQuota
argument_list|(
operator|new
name|RouterQuotaUsage
operator|.
name|Builder
argument_list|()
operator|.
name|quota
argument_list|(
name|nsQuota
argument_list|)
operator|.
name|spaceQuota
argument_list|(
name|ssQuota
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|addMountTable
argument_list|(
name|mountTable1
argument_list|)
expr_stmt|;
name|MountTable
name|mountTable2
init|=
name|MountTable
operator|.
name|newInstance
argument_list|(
literal|"/getquota/subdir1"
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"ns0"
argument_list|,
literal|"/testdir7/subdir"
argument_list|)
argument_list|)
decl_stmt|;
name|addMountTable
argument_list|(
name|mountTable2
argument_list|)
expr_stmt|;
name|MountTable
name|mountTable3
init|=
name|MountTable
operator|.
name|newInstance
argument_list|(
literal|"/getquota/subdir2"
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"ns1"
argument_list|,
literal|"/testdir8"
argument_list|)
argument_list|)
decl_stmt|;
name|addMountTable
argument_list|(
name|mountTable3
argument_list|)
expr_stmt|;
comment|// use router client to create new files
name|DFSClient
name|routerClient
init|=
name|routerContext
operator|.
name|getClient
argument_list|()
decl_stmt|;
name|routerClient
operator|.
name|create
argument_list|(
literal|"/getquota/file"
argument_list|,
literal|true
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|routerClient
operator|.
name|create
argument_list|(
literal|"/getquota/subdir1/file"
argument_list|,
literal|true
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|routerClient
operator|.
name|create
argument_list|(
literal|"/getquota/subdir2/file"
argument_list|,
literal|true
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|ClientProtocol
name|clientProtocol
init|=
name|routerContext
operator|.
name|getClient
argument_list|()
operator|.
name|getNamenode
argument_list|()
decl_stmt|;
name|RouterQuotaUpdateService
name|updateService
init|=
name|routerContext
operator|.
name|getRouter
argument_list|()
operator|.
name|getQuotaCacheUpdateService
argument_list|()
decl_stmt|;
name|updateService
operator|.
name|periodicInvoke
argument_list|()
expr_stmt|;
specifier|final
name|QuotaUsage
name|quota
init|=
name|clientProtocol
operator|.
name|getQuotaUsage
argument_list|(
literal|"/getquota"
argument_list|)
decl_stmt|;
comment|// the quota should be aggregated
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|quota
operator|.
name|getFileAndDirectoryCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStaleQuotaRemoving ()
specifier|public
name|void
name|testStaleQuotaRemoving
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|nsQuota
init|=
literal|20
decl_stmt|;
name|long
name|ssQuota
init|=
literal|200
decl_stmt|;
name|String
name|stalePath
init|=
literal|"/stalequota"
decl_stmt|;
specifier|final
name|FileSystem
name|nnFs1
init|=
name|nnContext1
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// Add one mount tables:
comment|// /stalequota --> ns0---/testdir9
name|nnFs1
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/testdir9"
argument_list|)
argument_list|)
expr_stmt|;
name|MountTable
name|mountTable
init|=
name|MountTable
operator|.
name|newInstance
argument_list|(
name|stalePath
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"ns0"
argument_list|,
literal|"/testdir9"
argument_list|)
argument_list|)
decl_stmt|;
name|mountTable
operator|.
name|setQuota
argument_list|(
operator|new
name|RouterQuotaUsage
operator|.
name|Builder
argument_list|()
operator|.
name|quota
argument_list|(
name|nsQuota
argument_list|)
operator|.
name|spaceQuota
argument_list|(
name|ssQuota
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|addMountTable
argument_list|(
name|mountTable
argument_list|)
expr_stmt|;
comment|// Call periodicInvoke to ensure quota for stalePath was
comment|// loaded into quota manager.
name|RouterQuotaUpdateService
name|updateService
init|=
name|routerContext
operator|.
name|getRouter
argument_list|()
operator|.
name|getQuotaCacheUpdateService
argument_list|()
decl_stmt|;
name|updateService
operator|.
name|periodicInvoke
argument_list|()
expr_stmt|;
comment|// use quota manager to get its quota usage and do verification
name|RouterQuotaManager
name|quotaManager
init|=
name|routerContext
operator|.
name|getRouter
argument_list|()
operator|.
name|getQuotaManager
argument_list|()
decl_stmt|;
name|RouterQuotaUsage
name|quota
init|=
name|quotaManager
operator|.
name|getQuotaUsage
argument_list|(
name|stalePath
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|nsQuota
argument_list|,
name|quota
operator|.
name|getQuota
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ssQuota
argument_list|,
name|quota
operator|.
name|getSpaceQuota
argument_list|()
argument_list|)
expr_stmt|;
comment|// remove stale path entry
name|removeMountTable
argument_list|(
name|stalePath
argument_list|)
expr_stmt|;
name|updateService
operator|.
name|periodicInvoke
argument_list|()
expr_stmt|;
comment|// the stale entry should be removed and we will get null
name|quota
operator|=
name|quotaManager
operator|.
name|getQuotaUsage
argument_list|(
name|stalePath
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|quota
argument_list|)
expr_stmt|;
block|}
comment|/**    * Remove a mount table entry to the mount table through the admin API.    * @param entry Mount table entry to remove.    * @return If it was successfully removed.    * @throws IOException Problems removing entries.    */
DECL|method|removeMountTable (String path)
specifier|private
name|boolean
name|removeMountTable
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|RouterClient
name|client
init|=
name|routerContext
operator|.
name|getAdminClient
argument_list|()
decl_stmt|;
name|MountTableManager
name|mountTableManager
init|=
name|client
operator|.
name|getMountTableManager
argument_list|()
decl_stmt|;
name|RemoveMountTableEntryRequest
name|removeRequest
init|=
name|RemoveMountTableEntryRequest
operator|.
name|newInstance
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|RemoveMountTableEntryResponse
name|removeResponse
init|=
name|mountTableManager
operator|.
name|removeMountTableEntry
argument_list|(
name|removeRequest
argument_list|)
decl_stmt|;
comment|// Reload the Router cache
name|resolver
operator|.
name|loadCache
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|removeResponse
operator|.
name|getStatus
argument_list|()
return|;
block|}
annotation|@
name|Test
DECL|method|testQuotaUpdating ()
specifier|public
name|void
name|testQuotaUpdating
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|nsQuota
init|=
literal|30
decl_stmt|;
name|long
name|ssQuota
init|=
literal|1024
decl_stmt|;
name|String
name|path
init|=
literal|"/updatequota"
decl_stmt|;
specifier|final
name|FileSystem
name|nnFs1
init|=
name|nnContext1
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// Add one mount table:
comment|// /updatequota --> ns0---/testdir10
name|nnFs1
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/testdir10"
argument_list|)
argument_list|)
expr_stmt|;
name|MountTable
name|mountTable
init|=
name|MountTable
operator|.
name|newInstance
argument_list|(
name|path
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"ns0"
argument_list|,
literal|"/testdir10"
argument_list|)
argument_list|)
decl_stmt|;
name|mountTable
operator|.
name|setQuota
argument_list|(
operator|new
name|RouterQuotaUsage
operator|.
name|Builder
argument_list|()
operator|.
name|quota
argument_list|(
name|nsQuota
argument_list|)
operator|.
name|spaceQuota
argument_list|(
name|ssQuota
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|addMountTable
argument_list|(
name|mountTable
argument_list|)
expr_stmt|;
comment|// Call periodicInvoke to ensure quota  updated in quota manager
comment|// and state store.
name|RouterQuotaUpdateService
name|updateService
init|=
name|routerContext
operator|.
name|getRouter
argument_list|()
operator|.
name|getQuotaCacheUpdateService
argument_list|()
decl_stmt|;
name|updateService
operator|.
name|periodicInvoke
argument_list|()
expr_stmt|;
comment|// verify initial quota value
name|MountTable
name|updatedMountTable
init|=
name|getMountTable
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|RouterQuotaUsage
name|quota
init|=
name|updatedMountTable
operator|.
name|getQuota
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|nsQuota
argument_list|,
name|quota
operator|.
name|getQuota
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ssQuota
argument_list|,
name|quota
operator|.
name|getSpaceQuota
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|quota
operator|.
name|getFileAndDirectoryCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|quota
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|)
expr_stmt|;
comment|// mkdir and write a new file
specifier|final
name|FileSystem
name|routerFs
init|=
name|routerContext
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|routerFs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|path
operator|+
literal|"/"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|DFSClient
name|routerClient
init|=
name|routerContext
operator|.
name|getClient
argument_list|()
decl_stmt|;
name|routerClient
operator|.
name|create
argument_list|(
name|path
operator|+
literal|"/file"
argument_list|,
literal|true
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|appendData
argument_list|(
name|path
operator|+
literal|"/file"
argument_list|,
name|routerClient
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|updateService
operator|.
name|periodicInvoke
argument_list|()
expr_stmt|;
name|updatedMountTable
operator|=
name|getMountTable
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|quota
operator|=
name|updatedMountTable
operator|.
name|getQuota
argument_list|()
expr_stmt|;
comment|// verify if quota has been updated in state store
name|assertEquals
argument_list|(
name|nsQuota
argument_list|,
name|quota
operator|.
name|getQuota
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ssQuota
argument_list|,
name|quota
operator|.
name|getSpaceQuota
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|quota
operator|.
name|getFileAndDirectoryCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BLOCK_SIZE
argument_list|,
name|quota
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the mount table entries of specified path through the admin API.    * @param path Mount table entry to get.    * @return If it was successfully got.    * @throws IOException Problems getting entries.    */
DECL|method|getMountTable (String path)
specifier|private
name|MountTable
name|getMountTable
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Reload the Router cache
name|resolver
operator|.
name|loadCache
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|RouterClient
name|client
init|=
name|routerContext
operator|.
name|getAdminClient
argument_list|()
decl_stmt|;
name|MountTableManager
name|mountTableManager
init|=
name|client
operator|.
name|getMountTableManager
argument_list|()
decl_stmt|;
name|GetMountTableEntriesRequest
name|getRequest
init|=
name|GetMountTableEntriesRequest
operator|.
name|newInstance
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|GetMountTableEntriesResponse
name|response
init|=
name|mountTableManager
operator|.
name|getMountTableEntries
argument_list|(
name|getRequest
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|MountTable
argument_list|>
name|results
init|=
name|response
operator|.
name|getEntries
argument_list|()
decl_stmt|;
return|return
operator|!
name|results
operator|.
name|isEmpty
argument_list|()
condition|?
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
else|:
literal|null
return|;
block|}
annotation|@
name|Test
DECL|method|testQuotaSynchronization ()
specifier|public
name|void
name|testQuotaSynchronization
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|updateNsQuota
init|=
literal|3
decl_stmt|;
name|long
name|updateSsQuota
init|=
literal|4
decl_stmt|;
name|FileSystem
name|nnFs
init|=
name|nnContext1
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|nnFs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/testsync"
argument_list|)
argument_list|)
expr_stmt|;
name|MountTable
name|mountTable
init|=
name|MountTable
operator|.
name|newInstance
argument_list|(
literal|"/quotaSync"
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"ns0"
argument_list|,
literal|"/testsync"
argument_list|)
argument_list|,
name|Time
operator|.
name|now
argument_list|()
argument_list|,
name|Time
operator|.
name|now
argument_list|()
argument_list|)
decl_stmt|;
name|mountTable
operator|.
name|setQuota
argument_list|(
operator|new
name|RouterQuotaUsage
operator|.
name|Builder
argument_list|()
operator|.
name|quota
argument_list|(
literal|1
argument_list|)
operator|.
name|spaceQuota
argument_list|(
literal|2
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add new mount table
name|addMountTable
argument_list|(
name|mountTable
argument_list|)
expr_stmt|;
comment|// ensure the quota is not set as updated value
name|QuotaUsage
name|realQuota
init|=
name|nnContext1
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getQuotaUsage
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/testsync"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotEquals
argument_list|(
name|updateNsQuota
argument_list|,
name|realQuota
operator|.
name|getQuota
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|updateSsQuota
argument_list|,
name|realQuota
operator|.
name|getSpaceQuota
argument_list|()
argument_list|)
expr_stmt|;
comment|// Call periodicInvoke to ensure quota  updated in quota manager
comment|// and state store.
name|RouterQuotaUpdateService
name|updateService
init|=
name|routerContext
operator|.
name|getRouter
argument_list|()
operator|.
name|getQuotaCacheUpdateService
argument_list|()
decl_stmt|;
name|updateService
operator|.
name|periodicInvoke
argument_list|()
expr_stmt|;
name|mountTable
operator|.
name|setQuota
argument_list|(
operator|new
name|RouterQuotaUsage
operator|.
name|Builder
argument_list|()
operator|.
name|quota
argument_list|(
name|updateNsQuota
argument_list|)
operator|.
name|spaceQuota
argument_list|(
name|updateSsQuota
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|UpdateMountTableEntryRequest
name|updateRequest
init|=
name|UpdateMountTableEntryRequest
operator|.
name|newInstance
argument_list|(
name|mountTable
argument_list|)
decl_stmt|;
name|RouterClient
name|client
init|=
name|routerContext
operator|.
name|getAdminClient
argument_list|()
decl_stmt|;
name|MountTableManager
name|mountTableManager
init|=
name|client
operator|.
name|getMountTableManager
argument_list|()
decl_stmt|;
name|mountTableManager
operator|.
name|updateMountTableEntry
argument_list|(
name|updateRequest
argument_list|)
expr_stmt|;
comment|// verify if the quota is updated in real path
name|realQuota
operator|=
name|nnContext1
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getQuotaUsage
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/testsync"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|updateNsQuota
argument_list|,
name|realQuota
operator|.
name|getQuota
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|updateSsQuota
argument_list|,
name|realQuota
operator|.
name|getSpaceQuota
argument_list|()
argument_list|)
expr_stmt|;
comment|// Clear the quota
name|mountTable
operator|.
name|setQuota
argument_list|(
operator|new
name|RouterQuotaUsage
operator|.
name|Builder
argument_list|()
operator|.
name|quota
argument_list|(
name|HdfsConstants
operator|.
name|QUOTA_RESET
argument_list|)
operator|.
name|spaceQuota
argument_list|(
name|HdfsConstants
operator|.
name|QUOTA_RESET
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|updateRequest
operator|=
name|UpdateMountTableEntryRequest
operator|.
name|newInstance
argument_list|(
name|mountTable
argument_list|)
expr_stmt|;
name|client
operator|=
name|routerContext
operator|.
name|getAdminClient
argument_list|()
expr_stmt|;
name|mountTableManager
operator|=
name|client
operator|.
name|getMountTableManager
argument_list|()
expr_stmt|;
name|mountTableManager
operator|.
name|updateMountTableEntry
argument_list|(
name|updateRequest
argument_list|)
expr_stmt|;
comment|// verify if the quota is updated in real path
name|realQuota
operator|=
name|nnContext1
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getQuotaUsage
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/testsync"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HdfsConstants
operator|.
name|QUOTA_RESET
argument_list|,
name|realQuota
operator|.
name|getQuota
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HdfsConstants
operator|.
name|QUOTA_RESET
argument_list|,
name|realQuota
operator|.
name|getSpaceQuota
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQuotaRefreshAfterQuotaExceed ()
specifier|public
name|void
name|testQuotaRefreshAfterQuotaExceed
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|nsQuota
init|=
literal|3
decl_stmt|;
name|long
name|ssQuota
init|=
literal|100
decl_stmt|;
specifier|final
name|FileSystem
name|nnFs1
init|=
name|nnContext1
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|FileSystem
name|nnFs2
init|=
name|nnContext2
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// Add two mount tables:
comment|// /setquota1 --> ns0---testdir11
comment|// /setquota2 --> ns1---testdir12
name|nnFs1
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/testdir11"
argument_list|)
argument_list|)
expr_stmt|;
name|nnFs2
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/testdir12"
argument_list|)
argument_list|)
expr_stmt|;
name|MountTable
name|mountTable1
init|=
name|MountTable
operator|.
name|newInstance
argument_list|(
literal|"/setquota1"
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"ns0"
argument_list|,
literal|"/testdir11"
argument_list|)
argument_list|)
decl_stmt|;
name|mountTable1
operator|.
name|setQuota
argument_list|(
operator|new
name|RouterQuotaUsage
operator|.
name|Builder
argument_list|()
operator|.
name|quota
argument_list|(
name|nsQuota
argument_list|)
operator|.
name|spaceQuota
argument_list|(
name|ssQuota
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|addMountTable
argument_list|(
name|mountTable1
argument_list|)
expr_stmt|;
name|MountTable
name|mountTable2
init|=
name|MountTable
operator|.
name|newInstance
argument_list|(
literal|"/setquota2"
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"ns1"
argument_list|,
literal|"/testdir12"
argument_list|)
argument_list|)
decl_stmt|;
name|mountTable2
operator|.
name|setQuota
argument_list|(
operator|new
name|RouterQuotaUsage
operator|.
name|Builder
argument_list|()
operator|.
name|quota
argument_list|(
name|nsQuota
argument_list|)
operator|.
name|spaceQuota
argument_list|(
name|ssQuota
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|addMountTable
argument_list|(
name|mountTable2
argument_list|)
expr_stmt|;
specifier|final
name|FileSystem
name|routerFs
init|=
name|routerContext
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// Create directory to make directory count equals to nsQuota
name|routerFs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/setquota1/"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|routerFs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/setquota1/"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// create one more directory to exceed the nsQuota
name|routerFs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/setquota1/"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|RouterQuotaUpdateService
name|updateService
init|=
name|routerContext
operator|.
name|getRouter
argument_list|()
operator|.
name|getQuotaCacheUpdateService
argument_list|()
decl_stmt|;
comment|// Call RouterQuotaUpdateService#periodicInvoke to update quota cache
name|updateService
operator|.
name|periodicInvoke
argument_list|()
expr_stmt|;
comment|// Reload the Router cache
name|resolver
operator|.
name|loadCache
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|RouterQuotaManager
name|quotaManager
init|=
name|routerContext
operator|.
name|getRouter
argument_list|()
operator|.
name|getQuotaManager
argument_list|()
decl_stmt|;
name|ClientProtocol
name|client1
init|=
name|nnContext1
operator|.
name|getClient
argument_list|()
operator|.
name|getNamenode
argument_list|()
decl_stmt|;
name|ClientProtocol
name|client2
init|=
name|nnContext2
operator|.
name|getClient
argument_list|()
operator|.
name|getNamenode
argument_list|()
decl_stmt|;
name|QuotaUsage
name|quota1
init|=
name|client1
operator|.
name|getQuotaUsage
argument_list|(
literal|"/testdir11"
argument_list|)
decl_stmt|;
name|QuotaUsage
name|quota2
init|=
name|client2
operator|.
name|getQuotaUsage
argument_list|(
literal|"/testdir12"
argument_list|)
decl_stmt|;
name|QuotaUsage
name|cacheQuota1
init|=
name|quotaManager
operator|.
name|getQuotaUsage
argument_list|(
literal|"/setquota1"
argument_list|)
decl_stmt|;
name|QuotaUsage
name|cacheQuota2
init|=
name|quotaManager
operator|.
name|getQuotaUsage
argument_list|(
literal|"/setquota2"
argument_list|)
decl_stmt|;
comment|// Verify quota usage
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|quota1
operator|.
name|getFileAndDirectoryCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|cacheQuota1
operator|.
name|getFileAndDirectoryCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|quota2
operator|.
name|getFileAndDirectoryCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cacheQuota2
operator|.
name|getFileAndDirectoryCount
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
comment|// create new directory to trigger NSQuotaExceededException
name|routerFs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/testdir11/"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Mkdir should be failed under dir /testdir11."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NSQuotaExceededException
name|ignored
parameter_list|)
block|{     }
comment|// Create directory under the other mount point
name|routerFs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/setquota2/"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|routerFs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/setquota2/"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Call RouterQuotaUpdateService#periodicInvoke to update quota cache
name|updateService
operator|.
name|periodicInvoke
argument_list|()
expr_stmt|;
name|quota1
operator|=
name|client1
operator|.
name|getQuotaUsage
argument_list|(
literal|"/testdir11"
argument_list|)
expr_stmt|;
name|cacheQuota1
operator|=
name|quotaManager
operator|.
name|getQuotaUsage
argument_list|(
literal|"/setquota1"
argument_list|)
expr_stmt|;
name|quota2
operator|=
name|client2
operator|.
name|getQuotaUsage
argument_list|(
literal|"/testdir12"
argument_list|)
expr_stmt|;
name|cacheQuota2
operator|=
name|quotaManager
operator|.
name|getQuotaUsage
argument_list|(
literal|"/setquota2"
argument_list|)
expr_stmt|;
comment|// Verify whether quota usage cache is update by periodicInvoke().
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|quota1
operator|.
name|getFileAndDirectoryCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|cacheQuota1
operator|.
name|getFileAndDirectoryCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|quota2
operator|.
name|getFileAndDirectoryCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|cacheQuota2
operator|.
name|getFileAndDirectoryCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify whether mount table and quota usage cache is updated properly.    * {@link RouterQuotaUpdateService#periodicInvoke()} should be able to update    * the cache and the mount table even if the destination directory for some    * mount entry is not present in the filesystem.    */
annotation|@
name|Test
DECL|method|testQuotaRefreshWhenDestinationNotPresent ()
specifier|public
name|void
name|testQuotaRefreshWhenDestinationNotPresent
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|nsQuota
init|=
literal|5
decl_stmt|;
name|long
name|ssQuota
init|=
literal|3
operator|*
name|BLOCK_SIZE
decl_stmt|;
specifier|final
name|FileSystem
name|nnFs
init|=
name|nnContext1
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// Add three mount tables:
comment|// /setdir1 --> ns0---testdir13
comment|// /setdir2 --> ns0---testdir14
comment|// Create destination directory
name|nnFs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/testdir13"
argument_list|)
argument_list|)
expr_stmt|;
name|nnFs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/testdir14"
argument_list|)
argument_list|)
expr_stmt|;
name|MountTable
name|mountTable
init|=
name|MountTable
operator|.
name|newInstance
argument_list|(
literal|"/setdir1"
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"ns0"
argument_list|,
literal|"/testdir13"
argument_list|)
argument_list|)
decl_stmt|;
name|mountTable
operator|.
name|setQuota
argument_list|(
operator|new
name|RouterQuotaUsage
operator|.
name|Builder
argument_list|()
operator|.
name|quota
argument_list|(
name|nsQuota
argument_list|)
operator|.
name|spaceQuota
argument_list|(
name|ssQuota
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|addMountTable
argument_list|(
name|mountTable
argument_list|)
expr_stmt|;
name|mountTable
operator|=
name|MountTable
operator|.
name|newInstance
argument_list|(
literal|"/setdir2"
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"ns0"
argument_list|,
literal|"/testdir14"
argument_list|)
argument_list|)
expr_stmt|;
name|mountTable
operator|.
name|setQuota
argument_list|(
operator|new
name|RouterQuotaUsage
operator|.
name|Builder
argument_list|()
operator|.
name|quota
argument_list|(
name|nsQuota
argument_list|)
operator|.
name|spaceQuota
argument_list|(
name|ssQuota
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|addMountTable
argument_list|(
name|mountTable
argument_list|)
expr_stmt|;
specifier|final
name|DFSClient
name|routerClient
init|=
name|routerContext
operator|.
name|getClient
argument_list|()
decl_stmt|;
comment|// Create file
name|routerClient
operator|.
name|create
argument_list|(
literal|"/setdir1/file1"
argument_list|,
literal|true
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|routerClient
operator|.
name|create
argument_list|(
literal|"/setdir2/file2"
argument_list|,
literal|true
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// append data to the file
name|appendData
argument_list|(
literal|"/setdir1/file1"
argument_list|,
name|routerClient
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|appendData
argument_list|(
literal|"/setdir2/file2"
argument_list|,
name|routerClient
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|RouterQuotaUpdateService
name|updateService
init|=
name|routerContext
operator|.
name|getRouter
argument_list|()
operator|.
name|getQuotaCacheUpdateService
argument_list|()
decl_stmt|;
comment|// Update quota cache
name|updateService
operator|.
name|periodicInvoke
argument_list|()
expr_stmt|;
comment|// Reload the Router cache
name|resolver
operator|.
name|loadCache
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ClientProtocol
name|client1
init|=
name|nnContext1
operator|.
name|getClient
argument_list|()
operator|.
name|getNamenode
argument_list|()
decl_stmt|;
name|RouterQuotaManager
name|quotaManager
init|=
name|routerContext
operator|.
name|getRouter
argument_list|()
operator|.
name|getQuotaManager
argument_list|()
decl_stmt|;
name|QuotaUsage
name|quota1
init|=
name|client1
operator|.
name|getQuotaUsage
argument_list|(
literal|"/testdir13"
argument_list|)
decl_stmt|;
name|QuotaUsage
name|quota2
init|=
name|client1
operator|.
name|getQuotaUsage
argument_list|(
literal|"/testdir14"
argument_list|)
decl_stmt|;
name|QuotaUsage
name|cacheQuota1
init|=
name|quotaManager
operator|.
name|getQuotaUsage
argument_list|(
literal|"/setdir1"
argument_list|)
decl_stmt|;
name|QuotaUsage
name|cacheQuota2
init|=
name|quotaManager
operator|.
name|getQuotaUsage
argument_list|(
literal|"/setdir2"
argument_list|)
decl_stmt|;
comment|// Get quota details in mount table
name|MountTable
name|updatedMountTable
init|=
name|getMountTable
argument_list|(
literal|"/setdir1"
argument_list|)
decl_stmt|;
name|RouterQuotaUsage
name|mountQuota1
init|=
name|updatedMountTable
operator|.
name|getQuota
argument_list|()
decl_stmt|;
name|updatedMountTable
operator|=
name|getMountTable
argument_list|(
literal|"/setdir2"
argument_list|)
expr_stmt|;
name|RouterQuotaUsage
name|mountQuota2
init|=
name|updatedMountTable
operator|.
name|getQuota
argument_list|()
decl_stmt|;
comment|// Verify quota usage
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|quota1
operator|.
name|getFileAndDirectoryCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cacheQuota1
operator|.
name|getFileAndDirectoryCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|mountQuota1
operator|.
name|getFileAndDirectoryCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|quota2
operator|.
name|getFileAndDirectoryCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cacheQuota2
operator|.
name|getFileAndDirectoryCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|mountQuota2
operator|.
name|getFileAndDirectoryCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BLOCK_SIZE
argument_list|,
name|quota1
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BLOCK_SIZE
argument_list|,
name|cacheQuota1
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BLOCK_SIZE
argument_list|,
name|mountQuota1
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BLOCK_SIZE
argument_list|,
name|quota2
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BLOCK_SIZE
argument_list|,
name|cacheQuota2
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BLOCK_SIZE
argument_list|,
name|mountQuota2
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|)
expr_stmt|;
name|FileSystem
name|routerFs
init|=
name|routerContext
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// Remove destination directory for the mount entry
name|routerFs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/setdir1"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Create file
name|routerClient
operator|.
name|create
argument_list|(
literal|"/setdir2/file3"
argument_list|,
literal|true
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// append data to the file
name|appendData
argument_list|(
literal|"/setdir2/file3"
argument_list|,
name|routerClient
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|int
name|updatedSpace
init|=
name|BLOCK_SIZE
operator|+
name|BLOCK_SIZE
decl_stmt|;
comment|// Update quota cache
name|updateService
operator|.
name|periodicInvoke
argument_list|()
expr_stmt|;
name|quota2
operator|=
name|client1
operator|.
name|getQuotaUsage
argument_list|(
literal|"/testdir14"
argument_list|)
expr_stmt|;
name|cacheQuota1
operator|=
name|quotaManager
operator|.
name|getQuotaUsage
argument_list|(
literal|"/setdir1"
argument_list|)
expr_stmt|;
name|cacheQuota2
operator|=
name|quotaManager
operator|.
name|getQuotaUsage
argument_list|(
literal|"/setdir2"
argument_list|)
expr_stmt|;
comment|// Get quota details in mount table
name|updatedMountTable
operator|=
name|getMountTable
argument_list|(
literal|"/setdir1"
argument_list|)
expr_stmt|;
name|mountQuota1
operator|=
name|updatedMountTable
operator|.
name|getQuota
argument_list|()
expr_stmt|;
name|updatedMountTable
operator|=
name|getMountTable
argument_list|(
literal|"/setdir2"
argument_list|)
expr_stmt|;
name|mountQuota2
operator|=
name|updatedMountTable
operator|.
name|getQuota
argument_list|()
expr_stmt|;
comment|// If destination is not present the quota usage should be reset to 0
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cacheQuota1
operator|.
name|getFileAndDirectoryCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|mountQuota1
operator|.
name|getFileAndDirectoryCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cacheQuota1
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|mountQuota1
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify current quota usage for other mount entries
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|quota2
operator|.
name|getFileAndDirectoryCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|cacheQuota2
operator|.
name|getFileAndDirectoryCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|mountQuota2
operator|.
name|getFileAndDirectoryCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|updatedSpace
argument_list|,
name|quota2
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|updatedSpace
argument_list|,
name|cacheQuota2
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|updatedSpace
argument_list|,
name|mountQuota2
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

