begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.resolver
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMESERVICE_ID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_NAMESERVICES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
operator|.
name|RBFConfigKeys
operator|.
name|DFS_ROUTER_DEFAULT_NAMESERVICE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  * Test {@link MountTableResolver} initialization.  */
end_comment

begin_class
DECL|class|TestInitializeMountTableResolver
specifier|public
class|class
name|TestInitializeMountTableResolver
block|{
annotation|@
name|Test
DECL|method|testDefaultNameserviceIsMissing ()
specifier|public
name|void
name|testDefaultNameserviceIsMissing
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|MountTableResolver
name|mountTable
init|=
operator|new
name|MountTableResolver
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|mountTable
operator|.
name|getDefaultNamespace
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefaultNameserviceWithEmptyString ()
specifier|public
name|void
name|testDefaultNameserviceWithEmptyString
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_ROUTER_DEFAULT_NAMESERVICE
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|MountTableResolver
name|mountTable
init|=
operator|new
name|MountTableResolver
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|mountTable
operator|.
name|getDefaultNamespace
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRouterDefaultNameservice ()
specifier|public
name|void
name|testRouterDefaultNameservice
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_ROUTER_DEFAULT_NAMESERVICE
argument_list|,
literal|"router_ns"
argument_list|)
expr_stmt|;
comment|// this is priority
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMESERVICE_ID
argument_list|,
literal|"ns_id"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMESERVICES
argument_list|,
literal|"nss"
argument_list|)
expr_stmt|;
name|MountTableResolver
name|mountTable
init|=
operator|new
name|MountTableResolver
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"router_ns"
argument_list|,
name|mountTable
operator|.
name|getDefaultNamespace
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNameserviceID ()
specifier|public
name|void
name|testNameserviceID
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMESERVICE_ID
argument_list|,
literal|"ns_id"
argument_list|)
expr_stmt|;
comment|// this is priority
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMESERVICES
argument_list|,
literal|"nss"
argument_list|)
expr_stmt|;
name|MountTableResolver
name|mountTable
init|=
operator|new
name|MountTableResolver
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"ns_id"
argument_list|,
name|mountTable
operator|.
name|getDefaultNamespace
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSingleNameservices ()
specifier|public
name|void
name|testSingleNameservices
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMESERVICES
argument_list|,
literal|"ns1"
argument_list|)
expr_stmt|;
name|MountTableResolver
name|mountTable
init|=
operator|new
name|MountTableResolver
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"ns1"
argument_list|,
name|mountTable
operator|.
name|getDefaultNamespace
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultipleNameservices ()
specifier|public
name|void
name|testMultipleNameservices
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMESERVICES
argument_list|,
literal|"ns1,ns2"
argument_list|)
expr_stmt|;
name|MountTableResolver
name|mountTable
init|=
operator|new
name|MountTableResolver
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"ns1"
argument_list|,
name|mountTable
operator|.
name|getDefaultNamespace
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

