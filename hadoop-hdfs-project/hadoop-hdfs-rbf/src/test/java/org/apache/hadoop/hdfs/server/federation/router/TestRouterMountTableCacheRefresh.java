begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.router
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|test
operator|.
name|TestingServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|FederationTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|MiniRouterDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|MiniRouterDFSCluster
operator|.
name|RouterContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|RouterConfigBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|FileSubclusterResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|MountTableManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|RouterStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|AddMountTableEntryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|AddMountTableEntryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|GetMountTableEntriesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|RefreshMountTableEntriesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|RefreshMountTableEntriesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|RemoveMountTableEntryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|RemoveMountTableEntryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|UpdateMountTableEntryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|UpdateMountTableEntryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|MountTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|Service
operator|.
name|STATE
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * This test class verifies that mount table cache is updated on all the routers  * when MountTableRefreshService is enabled and there is a change in mount table  * entries.  */
end_comment

begin_class
DECL|class|TestRouterMountTableCacheRefresh
specifier|public
class|class
name|TestRouterMountTableCacheRefresh
block|{
DECL|field|curatorTestingServer
specifier|private
specifier|static
name|TestingServer
name|curatorTestingServer
decl_stmt|;
DECL|field|cluster
specifier|private
specifier|static
name|MiniRouterDFSCluster
name|cluster
decl_stmt|;
DECL|field|routerContext
specifier|private
specifier|static
name|RouterContext
name|routerContext
decl_stmt|;
DECL|field|mountTableManager
specifier|private
specifier|static
name|MountTableManager
name|mountTableManager
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setUp ()
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|curatorTestingServer
operator|=
operator|new
name|TestingServer
argument_list|()
expr_stmt|;
name|curatorTestingServer
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|String
name|connectString
init|=
name|curatorTestingServer
operator|.
name|getConnectString
argument_list|()
decl_stmt|;
name|int
name|numNameservices
init|=
literal|2
decl_stmt|;
name|cluster
operator|=
operator|new
name|MiniRouterDFSCluster
argument_list|(
literal|false
argument_list|,
name|numNameservices
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|RouterConfigBuilder
argument_list|()
operator|.
name|refreshCache
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|rpc
argument_list|()
operator|.
name|heartbeat
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|RBFConfigKeys
operator|.
name|FEDERATION_FILE_RESOLVER_CLIENT_CLASS
argument_list|,
name|RBFConfigKeys
operator|.
name|FEDERATION_FILE_RESOLVER_CLIENT_CLASS_DEFAULT
argument_list|,
name|FileSubclusterResolver
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|ZK_ADDRESS
argument_list|,
name|connectString
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|RBFConfigKeys
operator|.
name|DFS_ROUTER_STORE_ENABLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|addRouterOverrides
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|startCluster
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|startRouters
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitClusterUp
argument_list|()
expr_stmt|;
name|routerContext
operator|=
name|cluster
operator|.
name|getRandomRouter
argument_list|()
expr_stmt|;
name|RouterStore
name|routerStateManager
init|=
name|routerContext
operator|.
name|getRouter
argument_list|()
operator|.
name|getRouterStateManager
argument_list|()
decl_stmt|;
name|mountTableManager
operator|=
name|routerContext
operator|.
name|getAdminClient
argument_list|()
operator|.
name|getMountTableManager
argument_list|()
expr_stmt|;
comment|// wait for one minute for all the routers to get registered
name|FederationTestUtils
operator|.
name|waitRouterRegistered
argument_list|(
name|routerStateManager
argument_list|,
name|numNameservices
argument_list|,
literal|60000
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|destory ()
specifier|public
specifier|static
name|void
name|destory
parameter_list|()
block|{
try|try
block|{
name|curatorTestingServer
operator|.
name|close
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// do nothing
block|}
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
name|clearEntries
argument_list|()
expr_stmt|;
block|}
DECL|method|clearEntries ()
specifier|private
name|void
name|clearEntries
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|MountTable
argument_list|>
name|result
init|=
name|getMountTableEntries
argument_list|()
decl_stmt|;
for|for
control|(
name|MountTable
name|mountTable
range|:
name|result
control|)
block|{
name|RemoveMountTableEntryResponse
name|removeMountTableEntry
init|=
name|mountTableManager
operator|.
name|removeMountTableEntry
argument_list|(
name|RemoveMountTableEntryRequest
operator|.
name|newInstance
argument_list|(
name|mountTable
operator|.
name|getSourcePath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|removeMountTableEntry
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * addMountTableEntry API should internally update the cache on all the    * routers.    */
annotation|@
name|Test
DECL|method|testMountTableEntriesCacheUpdatedAfterAddAPICall ()
specifier|public
name|void
name|testMountTableEntriesCacheUpdatedAfterAddAPICall
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Existing mount table size
name|int
name|existingEntriesCount
init|=
name|getNumMountTableEntries
argument_list|()
decl_stmt|;
name|String
name|srcPath
init|=
literal|"/addPath"
decl_stmt|;
name|MountTable
name|newEntry
init|=
name|MountTable
operator|.
name|newInstance
argument_list|(
name|srcPath
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"ns0"
argument_list|,
literal|"/addPathDest"
argument_list|)
argument_list|,
name|Time
operator|.
name|now
argument_list|()
argument_list|,
name|Time
operator|.
name|now
argument_list|()
argument_list|)
decl_stmt|;
name|addMountTableEntry
argument_list|(
name|mountTableManager
argument_list|,
name|newEntry
argument_list|)
expr_stmt|;
comment|// When Add entry is done, all the routers must have updated its mount table
comment|// entry
name|List
argument_list|<
name|RouterContext
argument_list|>
name|routers
init|=
name|getRouters
argument_list|()
decl_stmt|;
for|for
control|(
name|RouterContext
name|rc
range|:
name|routers
control|)
block|{
name|List
argument_list|<
name|MountTable
argument_list|>
name|result
init|=
name|getMountTableEntries
argument_list|(
name|rc
operator|.
name|getAdminClient
argument_list|()
operator|.
name|getMountTableManager
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
operator|+
name|existingEntriesCount
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|MountTable
name|mountTableResult
init|=
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|srcPath
argument_list|,
name|mountTableResult
operator|.
name|getSourcePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * removeMountTableEntry API should internally update the cache on all the    * routers.    */
annotation|@
name|Test
DECL|method|testMountTableEntriesCacheUpdatedAfterRemoveAPICall ()
specifier|public
name|void
name|testMountTableEntriesCacheUpdatedAfterRemoveAPICall
parameter_list|()
throws|throws
name|IOException
block|{
comment|// add
name|String
name|srcPath
init|=
literal|"/removePathSrc"
decl_stmt|;
name|MountTable
name|newEntry
init|=
name|MountTable
operator|.
name|newInstance
argument_list|(
name|srcPath
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"ns0"
argument_list|,
literal|"/removePathDest"
argument_list|)
argument_list|,
name|Time
operator|.
name|now
argument_list|()
argument_list|,
name|Time
operator|.
name|now
argument_list|()
argument_list|)
decl_stmt|;
name|addMountTableEntry
argument_list|(
name|mountTableManager
argument_list|,
name|newEntry
argument_list|)
expr_stmt|;
name|int
name|addCount
init|=
name|getNumMountTableEntries
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|addCount
argument_list|)
expr_stmt|;
comment|// remove
name|RemoveMountTableEntryResponse
name|removeMountTableEntry
init|=
name|mountTableManager
operator|.
name|removeMountTableEntry
argument_list|(
name|RemoveMountTableEntryRequest
operator|.
name|newInstance
argument_list|(
name|srcPath
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|removeMountTableEntry
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|removeCount
init|=
name|getNumMountTableEntries
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|addCount
operator|-
literal|1
argument_list|,
name|removeCount
argument_list|)
expr_stmt|;
block|}
comment|/**    * updateMountTableEntry API should internally update the cache on all the    * routers.    */
annotation|@
name|Test
DECL|method|testMountTableEntriesCacheUpdatedAfterUpdateAPICall ()
specifier|public
name|void
name|testMountTableEntriesCacheUpdatedAfterUpdateAPICall
parameter_list|()
throws|throws
name|IOException
block|{
comment|// add
name|String
name|srcPath
init|=
literal|"/updatePathSrc"
decl_stmt|;
name|MountTable
name|newEntry
init|=
name|MountTable
operator|.
name|newInstance
argument_list|(
name|srcPath
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"ns0"
argument_list|,
literal|"/updatePathDest"
argument_list|)
argument_list|,
name|Time
operator|.
name|now
argument_list|()
argument_list|,
name|Time
operator|.
name|now
argument_list|()
argument_list|)
decl_stmt|;
name|addMountTableEntry
argument_list|(
name|mountTableManager
argument_list|,
name|newEntry
argument_list|)
expr_stmt|;
name|int
name|addCount
init|=
name|getNumMountTableEntries
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|addCount
argument_list|)
expr_stmt|;
comment|// update
name|String
name|key
init|=
literal|"ns1"
decl_stmt|;
name|String
name|value
init|=
literal|"/updatePathDest2"
decl_stmt|;
name|MountTable
name|upateEntry
init|=
name|MountTable
operator|.
name|newInstance
argument_list|(
name|srcPath
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
argument_list|,
name|Time
operator|.
name|now
argument_list|()
argument_list|,
name|Time
operator|.
name|now
argument_list|()
argument_list|)
decl_stmt|;
name|UpdateMountTableEntryResponse
name|updateMountTableEntry
init|=
name|mountTableManager
operator|.
name|updateMountTableEntry
argument_list|(
name|UpdateMountTableEntryRequest
operator|.
name|newInstance
argument_list|(
name|upateEntry
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|updateMountTableEntry
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|MountTable
name|updatedMountTable
init|=
name|getMountTableEntry
argument_list|(
name|srcPath
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Updated mount table entrty cannot be null"
argument_list|,
name|updatedMountTable
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|updatedMountTable
operator|.
name|getDestinations
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|key
argument_list|,
name|updatedMountTable
operator|.
name|getDestinations
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getNameserviceId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
name|updatedMountTable
operator|.
name|getDestinations
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDest
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * After caching RouterClient if router goes down, refresh should be    * successful on other available router. The router which is not running    * should be ignored.    */
annotation|@
name|Test
DECL|method|testCachedRouterClientBehaviourAfterRouterStoped ()
specifier|public
name|void
name|testCachedRouterClientBehaviourAfterRouterStoped
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|srcPath
init|=
literal|"/addPathClientCache"
decl_stmt|;
name|MountTable
name|newEntry
init|=
name|MountTable
operator|.
name|newInstance
argument_list|(
name|srcPath
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"ns0"
argument_list|,
literal|"/addPathClientCacheDest"
argument_list|)
argument_list|,
name|Time
operator|.
name|now
argument_list|()
argument_list|,
name|Time
operator|.
name|now
argument_list|()
argument_list|)
decl_stmt|;
name|addMountTableEntry
argument_list|(
name|mountTableManager
argument_list|,
name|newEntry
argument_list|)
expr_stmt|;
comment|// When Add entry is done, all the routers must have updated its mount table
comment|// entry
name|List
argument_list|<
name|RouterContext
argument_list|>
name|routers
init|=
name|getRouters
argument_list|()
decl_stmt|;
for|for
control|(
name|RouterContext
name|rc
range|:
name|routers
control|)
block|{
name|List
argument_list|<
name|MountTable
argument_list|>
name|result
init|=
name|getMountTableEntries
argument_list|(
name|rc
operator|.
name|getAdminClient
argument_list|()
operator|.
name|getMountTableManager
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|MountTable
name|mountTableResult
init|=
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|srcPath
argument_list|,
name|mountTableResult
operator|.
name|getSourcePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Lets stop one router
for|for
control|(
name|RouterContext
name|rc
range|:
name|routers
control|)
block|{
name|InetSocketAddress
name|adminServerAddress
init|=
name|rc
operator|.
name|getRouter
argument_list|()
operator|.
name|getAdminServerAddress
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|routerContext
operator|.
name|getRouter
argument_list|()
operator|.
name|getAdminServerAddress
argument_list|()
operator|.
name|equals
argument_list|(
name|adminServerAddress
argument_list|)
condition|)
block|{
name|cluster
operator|.
name|stopRouter
argument_list|(
name|rc
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|srcPath
operator|=
literal|"/addPathClientCache2"
expr_stmt|;
name|newEntry
operator|=
name|MountTable
operator|.
name|newInstance
argument_list|(
name|srcPath
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"ns0"
argument_list|,
literal|"/addPathClientCacheDest2"
argument_list|)
argument_list|,
name|Time
operator|.
name|now
argument_list|()
argument_list|,
name|Time
operator|.
name|now
argument_list|()
argument_list|)
expr_stmt|;
name|addMountTableEntry
argument_list|(
name|mountTableManager
argument_list|,
name|newEntry
argument_list|)
expr_stmt|;
for|for
control|(
name|RouterContext
name|rc
range|:
name|getRouters
argument_list|()
control|)
block|{
name|List
argument_list|<
name|MountTable
argument_list|>
name|result
init|=
name|getMountTableEntries
argument_list|(
name|rc
operator|.
name|getAdminClient
argument_list|()
operator|.
name|getMountTableManager
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getRouters ()
specifier|private
name|List
argument_list|<
name|RouterContext
argument_list|>
name|getRouters
parameter_list|()
block|{
name|List
argument_list|<
name|RouterContext
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RouterContext
name|rc
range|:
name|cluster
operator|.
name|getRouters
argument_list|()
control|)
block|{
if|if
condition|(
name|rc
operator|.
name|getRouter
argument_list|()
operator|.
name|getServiceState
argument_list|()
operator|==
name|STATE
operator|.
name|STARTED
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|rc
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Test
DECL|method|testRefreshMountTableEntriesAPI ()
specifier|public
name|void
name|testRefreshMountTableEntriesAPI
parameter_list|()
throws|throws
name|IOException
block|{
name|RefreshMountTableEntriesRequest
name|request
init|=
name|RefreshMountTableEntriesRequest
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|RefreshMountTableEntriesResponse
name|refreshMountTableEntriesRes
init|=
name|mountTableManager
operator|.
name|refreshMountTableEntries
argument_list|(
name|request
argument_list|)
decl_stmt|;
comment|// refresh should be successful
name|assertTrue
argument_list|(
name|refreshMountTableEntriesRes
operator|.
name|getResult
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify cache update timeouts when any of the router takes more time than    * the configured timeout period.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testMountTableEntriesCacheUpdateTimeout ()
specifier|public
name|void
name|testMountTableEntriesCacheUpdateTimeout
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Resources will be closed when router is closed
annotation|@
name|SuppressWarnings
argument_list|(
literal|"resource"
argument_list|)
name|MountTableRefresherService
name|mountTableRefresherService
init|=
operator|new
name|MountTableRefresherService
argument_list|(
name|routerContext
operator|.
name|getRouter
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|MountTableRefresherThread
name|getLocalRefresher
parameter_list|(
name|String
name|adminAddress
parameter_list|)
block|{
return|return
operator|new
name|MountTableRefresherThread
argument_list|(
literal|null
argument_list|,
name|adminAddress
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
comment|// Sleep 1 minute
name|Thread
operator|.
name|sleep
argument_list|(
literal|60000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// Do nothing
block|}
block|}
block|}
return|;
block|}
block|}
decl_stmt|;
name|Configuration
name|config
init|=
name|routerContext
operator|.
name|getRouter
argument_list|()
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|config
operator|.
name|setTimeDuration
argument_list|(
name|RBFConfigKeys
operator|.
name|MOUNT_TABLE_CACHE_UPDATE_TIMEOUT
argument_list|,
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|mountTableRefresherService
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
comment|// One router is not responding for 1 minute, still refresh should
comment|// finished in 5 second as cache update timeout is set 5 second.
name|mountTableRefresherService
operator|.
name|refresh
argument_list|()
expr_stmt|;
comment|// Test case timeout is assert for this test case.
block|}
comment|/**    * Verify Cached RouterClient connections are removed from cache and closed    * when their max live time is elapsed.    */
annotation|@
name|Test
DECL|method|testRouterClientConnectionExpiration ()
specifier|public
name|void
name|testRouterClientConnectionExpiration
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|AtomicInteger
name|createCounter
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|final
name|AtomicInteger
name|removeCounter
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
comment|// Resources will be closed when router is closed
annotation|@
name|SuppressWarnings
argument_list|(
literal|"resource"
argument_list|)
name|MountTableRefresherService
name|mountTableRefresherService
init|=
operator|new
name|MountTableRefresherService
argument_list|(
name|routerContext
operator|.
name|getRouter
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|closeRouterClient
parameter_list|(
name|RouterClient
name|client
parameter_list|)
block|{
name|super
operator|.
name|closeRouterClient
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|removeCounter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|RouterClient
name|createRouterClient
parameter_list|(
name|InetSocketAddress
name|routerSocket
parameter_list|,
name|Configuration
name|config
parameter_list|)
throws|throws
name|IOException
block|{
name|createCounter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|createRouterClient
argument_list|(
name|routerSocket
argument_list|,
name|config
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|int
name|clientCacheTime
init|=
literal|2000
decl_stmt|;
name|Configuration
name|config
init|=
name|routerContext
operator|.
name|getRouter
argument_list|()
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|config
operator|.
name|setTimeDuration
argument_list|(
name|RBFConfigKeys
operator|.
name|MOUNT_TABLE_CACHE_UPDATE_CLIENT_MAX_TIME
argument_list|,
name|clientCacheTime
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|mountTableRefresherService
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
comment|// Do refresh to created RouterClient
name|mountTableRefresherService
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|assertNotEquals
argument_list|(
literal|"No RouterClient is created."
argument_list|,
literal|0
argument_list|,
name|createCounter
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|/*      * Wait for clients to expire. Lets wait triple the cache eviction period.      * After cache eviction period all created client must be removed and      * closed.      */
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
name|createCounter
operator|.
name|get
argument_list|()
operator|==
name|removeCounter
operator|.
name|get
argument_list|()
argument_list|,
literal|100
argument_list|,
literal|3
operator|*
name|clientCacheTime
argument_list|)
expr_stmt|;
block|}
DECL|method|getNumMountTableEntries ()
specifier|private
name|int
name|getNumMountTableEntries
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|MountTable
argument_list|>
name|records
init|=
name|getMountTableEntries
argument_list|()
decl_stmt|;
name|int
name|oldEntriesCount
init|=
name|records
operator|.
name|size
argument_list|()
decl_stmt|;
return|return
name|oldEntriesCount
return|;
block|}
DECL|method|getMountTableEntry (String srcPath)
specifier|private
name|MountTable
name|getMountTableEntry
parameter_list|(
name|String
name|srcPath
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|MountTable
argument_list|>
name|mountTableEntries
init|=
name|getMountTableEntries
argument_list|()
decl_stmt|;
for|for
control|(
name|MountTable
name|mountTable
range|:
name|mountTableEntries
control|)
block|{
name|String
name|sourcePath
init|=
name|mountTable
operator|.
name|getSourcePath
argument_list|()
decl_stmt|;
if|if
condition|(
name|srcPath
operator|.
name|equals
argument_list|(
name|sourcePath
argument_list|)
condition|)
block|{
return|return
name|mountTable
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|addMountTableEntry (MountTableManager mountTableMgr, MountTable newEntry)
specifier|private
name|void
name|addMountTableEntry
parameter_list|(
name|MountTableManager
name|mountTableMgr
parameter_list|,
name|MountTable
name|newEntry
parameter_list|)
throws|throws
name|IOException
block|{
name|AddMountTableEntryRequest
name|addRequest
init|=
name|AddMountTableEntryRequest
operator|.
name|newInstance
argument_list|(
name|newEntry
argument_list|)
decl_stmt|;
name|AddMountTableEntryResponse
name|addResponse
init|=
name|mountTableMgr
operator|.
name|addMountTableEntry
argument_list|(
name|addRequest
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|addResponse
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getMountTableEntries ()
specifier|private
name|List
argument_list|<
name|MountTable
argument_list|>
name|getMountTableEntries
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getMountTableEntries
argument_list|(
name|mountTableManager
argument_list|)
return|;
block|}
DECL|method|getMountTableEntries ( MountTableManager mountTableManagerParam)
specifier|private
name|List
argument_list|<
name|MountTable
argument_list|>
name|getMountTableEntries
parameter_list|(
name|MountTableManager
name|mountTableManagerParam
parameter_list|)
throws|throws
name|IOException
block|{
name|GetMountTableEntriesRequest
name|request
init|=
name|GetMountTableEntriesRequest
operator|.
name|newInstance
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
return|return
name|mountTableManagerParam
operator|.
name|getMountTableEntries
argument_list|(
name|request
argument_list|)
operator|.
name|getEntries
argument_list|()
return|;
block|}
block|}
end_class

end_unit

