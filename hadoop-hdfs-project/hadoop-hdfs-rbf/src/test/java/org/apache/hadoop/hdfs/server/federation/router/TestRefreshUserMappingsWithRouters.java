begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.router
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|MiniRouterDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|RouterConfigBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ha
operator|.
name|ConfiguredFailoverProxyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|DFSAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|GroupMappingServiceProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Groups
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AuthorizationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|DefaultImpersonationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|ProxyUsers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * Tests RefreshUserMappingsProtocol With Routers.  */
end_comment

begin_class
DECL|class|TestRefreshUserMappingsWithRouters
specifier|public
class|class
name|TestRefreshUserMappingsWithRouters
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestRefreshUserMappingsWithRouters
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|cluster
specifier|private
name|MiniRouterDFSCluster
name|cluster
decl_stmt|;
DECL|field|router
specifier|private
name|Router
name|router
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|GROUP_REFRESH_TIMEOUT_SEC
specifier|private
specifier|static
specifier|final
name|long
name|GROUP_REFRESH_TIMEOUT_SEC
init|=
literal|1L
decl_stmt|;
DECL|field|ROUTER_NS
specifier|private
specifier|static
specifier|final
name|String
name|ROUTER_NS
init|=
literal|"rbfns"
decl_stmt|;
DECL|field|HDFS_SCHEMA
specifier|private
specifier|static
specifier|final
name|String
name|HDFS_SCHEMA
init|=
literal|"hdfs://"
decl_stmt|;
DECL|field|LOOPBACK_ADDRESS
specifier|private
specifier|static
specifier|final
name|String
name|LOOPBACK_ADDRESS
init|=
literal|"127.0.0.1"
decl_stmt|;
DECL|field|HDFS_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|HDFS_PREFIX
init|=
name|HDFS_SCHEMA
operator|+
name|LOOPBACK_ADDRESS
decl_stmt|;
DECL|field|tempResource
specifier|private
name|String
name|tempResource
init|=
literal|null
decl_stmt|;
comment|/**    * Mock class to get group mapping for fake users.    */
DECL|class|MockUnixGroupsMapping
specifier|public
specifier|static
class|class
name|MockUnixGroupsMapping
implements|implements
name|GroupMappingServiceProvider
block|{
DECL|field|i
specifier|private
specifier|static
name|int
name|i
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
DECL|method|getGroups (String user)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getGroups
parameter_list|(
name|String
name|user
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Getting groups in MockUnixGroupsMapping"
argument_list|)
expr_stmt|;
name|String
name|g1
init|=
name|user
operator|+
operator|(
literal|10
operator|*
name|i
operator|+
literal|1
operator|)
decl_stmt|;
name|String
name|g2
init|=
name|user
operator|+
operator|(
literal|10
operator|*
name|i
operator|+
literal|2
operator|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|l
operator|.
name|add
argument_list|(
name|g1
argument_list|)
expr_stmt|;
name|l
operator|.
name|add
argument_list|(
name|g2
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
return|return
name|l
return|;
block|}
annotation|@
name|Override
DECL|method|cacheGroupsRefresh ()
specifier|public
name|void
name|cacheGroupsRefresh
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Refreshing groups in MockUnixGroupsMapping"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|cacheGroupsAdd (List<String> groups)
specifier|public
name|void
name|cacheGroupsAdd
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|groups
parameter_list|)
throws|throws
name|IOException
block|{     }
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
literal|"hadoop.security.group.mapping"
argument_list|,
name|TestRefreshUserMappingsWithRouters
operator|.
name|MockUnixGroupsMapping
operator|.
name|class
argument_list|,
name|GroupMappingServiceProvider
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
literal|"hadoop.security.groups.cache.secs"
argument_list|,
name|GROUP_REFRESH_TIMEOUT_SEC
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|RouterConfigBuilder
argument_list|(
name|conf
argument_list|)
operator|.
name|rpc
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|Groups
operator|.
name|getUserToGroupsMappingService
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Setup a single router, and return this router's rpc address    * as fs.defaultFS for {@link DFSAdmin}.    * @return router's rpc address    * @throws Exception    */
DECL|method|setUpSingleRouterAndReturnDefaultFs ()
specifier|private
name|String
name|setUpSingleRouterAndReturnDefaultFs
parameter_list|()
block|{
name|router
operator|=
operator|new
name|Router
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|RBFConfigKeys
operator|.
name|DFS_ROUTER_RPC_ADDRESS_KEY
argument_list|,
name|LOOPBACK_ADDRESS
operator|+
literal|":"
operator|+
name|NetUtils
operator|.
name|getFreeSocketPort
argument_list|()
argument_list|)
expr_stmt|;
name|router
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|router
operator|.
name|start
argument_list|()
expr_stmt|;
name|String
name|defaultFs
init|=
name|HDFS_PREFIX
operator|+
literal|":"
operator|+
name|router
operator|.
name|getRpcServerAddress
argument_list|()
operator|.
name|getPort
argument_list|()
decl_stmt|;
return|return
name|defaultFs
return|;
block|}
comment|/**    * Setup a multi-routers mini dfs cluster with two nameservices    * and four routers.    * For dfsadmin clients to use the federated namespace, we need to create a    * new namespace that points to the routers.    * For example, a cluster with 2 namespaces ns0, ns1, can add a new one to    * hdfs-site.xml called {@link #ROUTER_NS}, which points to four of the    * routers. With this setting dfsadmin client can interact with routers    * as a regular namespace and reconginze multi-routers.    * @return fs.defaultFS for multi-routers    * @throws Exception    */
DECL|method|setUpMultiRoutersAndReturnDefaultFs ()
specifier|private
name|String
name|setUpMultiRoutersAndReturnDefaultFs
parameter_list|()
throws|throws
name|Exception
block|{
comment|//setup a miniroutercluster with 2 nameservices, 4 routers.
name|cluster
operator|=
operator|new
name|MiniRouterDFSCluster
argument_list|(
literal|true
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|addRouterOverrides
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|startRouters
argument_list|()
expr_stmt|;
comment|//construct client conf.
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_INTERNAL_NAMESERVICES_KEY
argument_list|,
literal|"ns0,ns1"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMESERVICES
argument_list|,
literal|"ns0,ns1,"
operator|+
name|ROUTER_NS
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|Failover
operator|.
name|PROXY_PROVIDER_KEY_PREFIX
operator|+
literal|"."
operator|+
name|ROUTER_NS
argument_list|,
name|ConfiguredFailoverProxyProvider
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|FS_DEFAULT_NAME_KEY
argument_list|,
name|HDFS_SCHEMA
operator|+
name|ROUTER_NS
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HA_NAMENODES_KEY_PREFIX
operator|+
literal|"."
operator|+
name|ROUTER_NS
argument_list|,
literal|"r1,r2"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MiniRouterDFSCluster
operator|.
name|RouterContext
argument_list|>
name|routers
init|=
name|cluster
operator|.
name|getRouters
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|routers
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|MiniRouterDFSCluster
operator|.
name|RouterContext
name|context
init|=
name|routers
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_RPC_ADDRESS_KEY
operator|+
literal|"."
operator|+
name|ROUTER_NS
operator|+
literal|".r"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|,
name|LOOPBACK_ADDRESS
operator|+
literal|":"
operator|+
name|context
operator|.
name|getRouter
argument_list|()
operator|.
name|getRpcServerAddress
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|HDFS_SCHEMA
operator|+
name|ROUTER_NS
return|;
block|}
annotation|@
name|Test
DECL|method|testRefreshSuperUserGroupsConfigurationWithSingleRouter ()
specifier|public
name|void
name|testRefreshSuperUserGroupsConfigurationWithSingleRouter
parameter_list|()
throws|throws
name|Exception
block|{
name|testRefreshSuperUserGroupsConfigurationInternal
argument_list|(
name|setUpSingleRouterAndReturnDefaultFs
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRefreshSuperUserGroupsConfigurationWithMultiRouters ()
specifier|public
name|void
name|testRefreshSuperUserGroupsConfigurationWithMultiRouters
parameter_list|()
throws|throws
name|Exception
block|{
name|testRefreshSuperUserGroupsConfigurationInternal
argument_list|(
name|setUpMultiRoutersAndReturnDefaultFs
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGroupMappingRefreshWithSingleRouter ()
specifier|public
name|void
name|testGroupMappingRefreshWithSingleRouter
parameter_list|()
throws|throws
name|Exception
block|{
name|testGroupMappingRefreshInternal
argument_list|(
name|setUpSingleRouterAndReturnDefaultFs
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGroupMappingRefreshWithMultiRouters ()
specifier|public
name|void
name|testGroupMappingRefreshWithMultiRouters
parameter_list|()
throws|throws
name|Exception
block|{
name|testGroupMappingRefreshInternal
argument_list|(
name|setUpMultiRoutersAndReturnDefaultFs
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test refreshSuperUserGroupsConfiguration action.    */
DECL|method|testRefreshSuperUserGroupsConfigurationInternal ( String defaultFs)
specifier|private
name|void
name|testRefreshSuperUserGroupsConfigurationInternal
parameter_list|(
name|String
name|defaultFs
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|String
name|superUser
init|=
literal|"super_user"
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|groupNames1
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|groupNames1
operator|.
name|add
argument_list|(
literal|"gr1"
argument_list|)
expr_stmt|;
name|groupNames1
operator|.
name|add
argument_list|(
literal|"gr2"
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|groupNames2
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|groupNames2
operator|.
name|add
argument_list|(
literal|"gr3"
argument_list|)
expr_stmt|;
name|groupNames2
operator|.
name|add
argument_list|(
literal|"gr4"
argument_list|)
expr_stmt|;
comment|//keys in conf
name|String
name|userKeyGroups
init|=
name|DefaultImpersonationProvider
operator|.
name|getTestProvider
argument_list|()
operator|.
name|getProxySuperuserGroupConfKey
argument_list|(
name|superUser
argument_list|)
decl_stmt|;
name|String
name|userKeyHosts
init|=
name|DefaultImpersonationProvider
operator|.
name|getTestProvider
argument_list|()
operator|.
name|getProxySuperuserIpConfKey
argument_list|(
name|superUser
argument_list|)
decl_stmt|;
comment|// superuser can proxy for this group
name|conf
operator|.
name|set
argument_list|(
name|userKeyGroups
argument_list|,
literal|"gr3,gr4,gr5"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|userKeyHosts
argument_list|,
name|LOOPBACK_ADDRESS
argument_list|)
expr_stmt|;
name|ProxyUsers
operator|.
name|refreshSuperUserGroupsConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|ugi1
init|=
name|mock
argument_list|(
name|UserGroupInformation
operator|.
name|class
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|ugi2
init|=
name|mock
argument_list|(
name|UserGroupInformation
operator|.
name|class
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|suUgi
init|=
name|mock
argument_list|(
name|UserGroupInformation
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|ugi1
operator|.
name|getRealUser
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|suUgi
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|ugi2
operator|.
name|getRealUser
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|suUgi
argument_list|)
expr_stmt|;
comment|// mock  super user
name|when
argument_list|(
name|suUgi
operator|.
name|getShortUserName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|superUser
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|suUgi
operator|.
name|getUserName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|superUser
operator|+
literal|"L"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|ugi1
operator|.
name|getShortUserName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"user1"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|ugi2
operator|.
name|getShortUserName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"user2"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|ugi1
operator|.
name|getUserName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"userL1"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|ugi2
operator|.
name|getUserName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"userL2"
argument_list|)
expr_stmt|;
comment|// set groups for users
name|when
argument_list|(
name|ugi1
operator|.
name|getGroups
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|groupNames1
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|ugi2
operator|.
name|getGroups
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|groupNames2
argument_list|)
expr_stmt|;
comment|// check before refresh
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|AuthorizationException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|ProxyUsers
operator|.
name|authorize
argument_list|(
name|ugi1
argument_list|,
name|LOOPBACK_ADDRESS
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|ProxyUsers
operator|.
name|authorize
argument_list|(
name|ugi2
argument_list|,
name|LOOPBACK_ADDRESS
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"auth for {} succeeded"
argument_list|,
name|ugi2
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
comment|// expected
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"first auth for "
operator|+
name|ugi2
operator|.
name|getShortUserName
argument_list|()
operator|+
literal|" should've succeeded: "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// refresh will look at configuration on the server side
comment|// add additional resource with the new value
comment|// so the server side will pick it up
name|String
name|rsrc
init|=
literal|"testGroupMappingRefresh_rsrc.xml"
decl_stmt|;
name|tempResource
operator|=
name|addNewConfigResource
argument_list|(
name|rsrc
argument_list|,
name|userKeyGroups
argument_list|,
literal|"gr2"
argument_list|,
name|userKeyHosts
argument_list|,
name|LOOPBACK_ADDRESS
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|FS_DEFAULT_NAME_KEY
argument_list|,
name|defaultFs
argument_list|)
expr_stmt|;
name|DFSAdmin
name|admin
init|=
operator|new
name|DFSAdmin
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-refreshSuperUserGroupsConfiguration"
block|}
decl_stmt|;
name|admin
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|AuthorizationException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|ProxyUsers
operator|.
name|authorize
argument_list|(
name|ugi2
argument_list|,
name|LOOPBACK_ADDRESS
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|ProxyUsers
operator|.
name|authorize
argument_list|(
name|ugi1
argument_list|,
name|LOOPBACK_ADDRESS
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"auth for {} succeeded"
argument_list|,
name|ugi1
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
comment|// expected
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"second auth for "
operator|+
name|ugi1
operator|.
name|getShortUserName
argument_list|()
operator|+
literal|" should've succeeded: "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test refreshUserToGroupsMappings action.    */
DECL|method|testGroupMappingRefreshInternal (String defaultFs)
specifier|private
name|void
name|testGroupMappingRefreshInternal
parameter_list|(
name|String
name|defaultFs
parameter_list|)
throws|throws
name|Exception
block|{
name|Groups
name|groups
init|=
name|Groups
operator|.
name|getUserToGroupsMappingService
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
name|user
init|=
literal|"test_user123"
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"First attempt:"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|g1
init|=
name|groups
operator|.
name|getGroups
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Group 1 :{}"
argument_list|,
name|g1
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Second attempt, should be the same:"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|g2
init|=
name|groups
operator|.
name|getGroups
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Group 2 :{}"
argument_list|,
name|g2
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|g2
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"Should be same group "
argument_list|,
name|g1
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|g2
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// set fs.defaultFS point to router(s).
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|FS_DEFAULT_NAME_KEY
argument_list|,
name|defaultFs
argument_list|)
expr_stmt|;
comment|// Test refresh command
name|DFSAdmin
name|admin
init|=
operator|new
name|DFSAdmin
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-refreshUserToGroupsMappings"
block|}
decl_stmt|;
name|admin
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Third attempt(after refresh command), should be different:"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|g3
init|=
name|groups
operator|.
name|getGroups
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Group 3:{}"
argument_list|,
name|g3
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|g3
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertNotEquals
argument_list|(
literal|"Should be different group: "
operator|+
name|g1
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|+
literal|" and "
operator|+
name|g3
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|g1
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|g3
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Test timeout
name|LOG
operator|.
name|info
argument_list|(
literal|"Fourth attempt(after timeout), should be different:"
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
block|{
name|List
argument_list|<
name|String
argument_list|>
name|g4
decl_stmt|;
try|try
block|{
name|g4
operator|=
name|groups
operator|.
name|getGroups
argument_list|(
name|user
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failed to get groups for user:{}"
argument_list|,
name|user
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Group 4 : {}"
argument_list|,
name|g4
argument_list|)
expr_stmt|;
comment|// if g4 is the same as g3, wait and retry
return|return
operator|!
name|g3
operator|.
name|equals
argument_list|(
name|g4
argument_list|)
return|;
block|}
argument_list|,
literal|50
argument_list|,
name|Math
operator|.
name|toIntExact
argument_list|(
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
name|GROUP_REFRESH_TIMEOUT_SEC
operator|*
literal|30
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|addNewConfigResource (String rsrcName, String keyGroup, String groups, String keyHosts, String hosts)
specifier|public
specifier|static
name|String
name|addNewConfigResource
parameter_list|(
name|String
name|rsrcName
parameter_list|,
name|String
name|keyGroup
parameter_list|,
name|String
name|groups
parameter_list|,
name|String
name|keyHosts
parameter_list|,
name|String
name|hosts
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|UnsupportedEncodingException
block|{
comment|// location for temp resource should be in CLASSPATH
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|URL
name|url
init|=
name|conf
operator|.
name|getResource
argument_list|(
literal|"hdfs-site.xml"
argument_list|)
decl_stmt|;
name|String
name|urlPath
init|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|url
operator|.
name|getPath
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|urlPath
argument_list|)
decl_stmt|;
name|Path
name|dir
init|=
name|p
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|String
name|tmp
init|=
name|dir
operator|.
name|toString
argument_list|()
operator|+
literal|"/"
operator|+
name|rsrcName
decl_stmt|;
name|StringBuilder
name|newResource
init|=
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
literal|"<configuration>"
argument_list|)
operator|.
name|append
argument_list|(
literal|"<property>"
argument_list|)
operator|.
name|append
argument_list|(
literal|"<name>"
argument_list|)
operator|.
name|append
argument_list|(
name|keyGroup
argument_list|)
operator|.
name|append
argument_list|(
literal|"</name>"
argument_list|)
operator|.
name|append
argument_list|(
literal|"<value>"
argument_list|)
operator|.
name|append
argument_list|(
name|groups
argument_list|)
operator|.
name|append
argument_list|(
literal|"</value>"
argument_list|)
operator|.
name|append
argument_list|(
literal|"</property>"
argument_list|)
operator|.
name|append
argument_list|(
literal|"<property>"
argument_list|)
operator|.
name|append
argument_list|(
literal|"<name>"
argument_list|)
operator|.
name|append
argument_list|(
name|keyHosts
argument_list|)
operator|.
name|append
argument_list|(
literal|"</name>"
argument_list|)
operator|.
name|append
argument_list|(
literal|"<value>"
argument_list|)
operator|.
name|append
argument_list|(
name|hosts
argument_list|)
operator|.
name|append
argument_list|(
literal|"</value>"
argument_list|)
operator|.
name|append
argument_list|(
literal|"</property>"
argument_list|)
operator|.
name|append
argument_list|(
literal|"</configuration>"
argument_list|)
decl_stmt|;
name|PrintWriter
name|writer
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|tmp
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|println
argument_list|(
name|newResource
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|Configuration
operator|.
name|addDefaultResource
argument_list|(
name|rsrcName
argument_list|)
expr_stmt|;
return|return
name|tmp
return|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
if|if
condition|(
name|router
operator|!=
literal|null
condition|)
block|{
name|router
operator|.
name|shutDown
argument_list|()
expr_stmt|;
name|router
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|tempResource
operator|!=
literal|null
condition|)
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|tempResource
argument_list|)
decl_stmt|;
name|f
operator|.
name|delete
argument_list|()
expr_stmt|;
name|tempResource
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

