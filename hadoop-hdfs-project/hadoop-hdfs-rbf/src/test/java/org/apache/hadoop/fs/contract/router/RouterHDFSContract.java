begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.contract.router
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|router
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|FederationTestUtils
operator|.
name|NAMENODES
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|AbstractFSContractTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|hdfs
operator|.
name|HDFSContract
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|MiniRouterDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_comment
comment|/**  * The contract of Router-based Federated HDFS.  */
end_comment

begin_class
DECL|class|RouterHDFSContract
specifier|public
class|class
name|RouterHDFSContract
extends|extends
name|HDFSContract
block|{
DECL|field|BLOCK_SIZE
specifier|public
specifier|static
specifier|final
name|int
name|BLOCK_SIZE
init|=
name|AbstractFSContractTestBase
operator|.
name|TEST_FILE_LEN
decl_stmt|;
DECL|field|cluster
specifier|private
specifier|static
name|MiniRouterDFSCluster
name|cluster
decl_stmt|;
DECL|method|RouterHDFSContract (Configuration conf)
specifier|public
name|RouterHDFSContract
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|createCluster ()
specifier|public
specifier|static
name|void
name|createCluster
parameter_list|()
throws|throws
name|IOException
block|{
name|createCluster
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|createCluster (Configuration conf)
specifier|public
specifier|static
name|void
name|createCluster
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniRouterDFSCluster
argument_list|(
literal|true
argument_list|,
literal|2
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// Start NNs and DNs and wait until ready
name|cluster
operator|.
name|startCluster
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|addRouterOverrides
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Start routers with only an RPC service
name|cluster
operator|.
name|startRouters
argument_list|()
expr_stmt|;
comment|// Register and verify all NNs with all routers
name|cluster
operator|.
name|registerNamenodes
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitNamenodeRegistration
argument_list|()
expr_stmt|;
comment|// Setup the mount table
name|cluster
operator|.
name|installMockLocations
argument_list|()
expr_stmt|;
comment|// Making one Namenodes active per nameservice
if|if
condition|(
name|cluster
operator|.
name|isHighAvailability
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|ns
range|:
name|cluster
operator|.
name|getNameservices
argument_list|()
control|)
block|{
name|cluster
operator|.
name|switchToActive
argument_list|(
name|ns
argument_list|,
name|NAMENODES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|switchToStandby
argument_list|(
name|ns
argument_list|,
name|NAMENODES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|cluster
operator|.
name|waitActiveNamespaces
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|destroyCluster
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot start federated cluster"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|destroyCluster ()
specifier|public
specifier|static
name|void
name|destroyCluster
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|getCluster ()
specifier|public
specifier|static
name|MiniDFSCluster
name|getCluster
parameter_list|()
block|{
return|return
name|cluster
operator|.
name|getCluster
argument_list|()
return|;
block|}
DECL|method|getRouterCluster ()
specifier|public
specifier|static
name|MiniRouterDFSCluster
name|getRouterCluster
parameter_list|()
block|{
return|return
name|cluster
return|;
block|}
DECL|method|getFileSystem ()
specifier|public
specifier|static
name|FileSystem
name|getFileSystem
parameter_list|()
throws|throws
name|IOException
block|{
comment|//assumes cluster is not null
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"cluster not created"
argument_list|,
name|cluster
argument_list|)
expr_stmt|;
return|return
name|cluster
operator|.
name|getRandomRouter
argument_list|()
operator|.
name|getFileSystem
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getTestFileSystem ()
specifier|public
name|FileSystem
name|getTestFileSystem
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getFileSystem
argument_list|()
return|;
block|}
block|}
end_class

end_unit

