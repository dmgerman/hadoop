begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.router
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|FederationStateStoreTestUtils
operator|.
name|synchronizeRecords
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|RouterConfigBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|MiniRouterDFSCluster
operator|.
name|RouterContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|StateStoreDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|MountTableManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|RemoteLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|order
operator|.
name|DestinationOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|StateStoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|impl
operator|.
name|MountTableStoreImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|AddMountTableEntryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|AddMountTableEntryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|GetMountTableEntriesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|GetMountTableEntriesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|RemoveMountTableEntryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|RemoveMountTableEntryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|UpdateMountTableEntryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|MountTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * The administrator interface of the {@link Router} implemented by  * {@link RouterAdminServer}.  */
end_comment

begin_class
DECL|class|TestRouterAdmin
specifier|public
class|class
name|TestRouterAdmin
block|{
DECL|field|cluster
specifier|private
specifier|static
name|StateStoreDFSCluster
name|cluster
decl_stmt|;
DECL|field|routerContext
specifier|private
specifier|static
name|RouterContext
name|routerContext
decl_stmt|;
DECL|field|RPC_BEAN
specifier|public
specifier|static
specifier|final
name|String
name|RPC_BEAN
init|=
literal|"Hadoop:service=Router,name=FederationRPC"
decl_stmt|;
DECL|field|mockMountTable
specifier|private
specifier|static
name|List
argument_list|<
name|MountTable
argument_list|>
name|mockMountTable
decl_stmt|;
DECL|field|stateStore
specifier|private
specifier|static
name|StateStoreService
name|stateStore
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|globalSetUp ()
specifier|public
specifier|static
name|void
name|globalSetUp
parameter_list|()
throws|throws
name|Exception
block|{
name|cluster
operator|=
operator|new
name|StateStoreDFSCluster
argument_list|(
literal|false
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Build and start a router with State Store + admin + RPC
name|Configuration
name|conf
init|=
operator|new
name|RouterConfigBuilder
argument_list|()
operator|.
name|stateStore
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|rpc
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|addRouterOverrides
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|startRouters
argument_list|()
expr_stmt|;
name|routerContext
operator|=
name|cluster
operator|.
name|getRandomRouter
argument_list|()
expr_stmt|;
name|mockMountTable
operator|=
name|cluster
operator|.
name|generateMockMountTable
argument_list|()
expr_stmt|;
name|Router
name|router
init|=
name|routerContext
operator|.
name|getRouter
argument_list|()
decl_stmt|;
name|stateStore
operator|=
name|router
operator|.
name|getStateStore
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|tearDown ()
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
block|{
name|cluster
operator|.
name|stopRouter
argument_list|(
name|routerContext
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|testSetup ()
specifier|public
name|void
name|testSetup
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|synchronizeRecords
argument_list|(
name|stateStore
argument_list|,
name|mockMountTable
argument_list|,
name|MountTable
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddMountTable ()
specifier|public
name|void
name|testAddMountTable
parameter_list|()
throws|throws
name|IOException
block|{
name|MountTable
name|newEntry
init|=
name|MountTable
operator|.
name|newInstance
argument_list|(
literal|"/testpath"
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"ns0"
argument_list|,
literal|"/testdir"
argument_list|)
argument_list|,
name|Time
operator|.
name|now
argument_list|()
argument_list|,
name|Time
operator|.
name|now
argument_list|()
argument_list|)
decl_stmt|;
name|RouterClient
name|client
init|=
name|routerContext
operator|.
name|getAdminClient
argument_list|()
decl_stmt|;
name|MountTableManager
name|mountTable
init|=
name|client
operator|.
name|getMountTableManager
argument_list|()
decl_stmt|;
comment|// Existing mount table size
name|List
argument_list|<
name|MountTable
argument_list|>
name|records
init|=
name|getMountTableEntries
argument_list|(
name|mountTable
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|records
operator|.
name|size
argument_list|()
argument_list|,
name|mockMountTable
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add
name|AddMountTableEntryRequest
name|addRequest
init|=
name|AddMountTableEntryRequest
operator|.
name|newInstance
argument_list|(
name|newEntry
argument_list|)
decl_stmt|;
name|AddMountTableEntryResponse
name|addResponse
init|=
name|mountTable
operator|.
name|addMountTableEntry
argument_list|(
name|addRequest
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|addResponse
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// New mount table size
name|List
argument_list|<
name|MountTable
argument_list|>
name|records2
init|=
name|getMountTableEntries
argument_list|(
name|mountTable
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|records2
operator|.
name|size
argument_list|()
argument_list|,
name|mockMountTable
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddDuplicateMountTable ()
specifier|public
name|void
name|testAddDuplicateMountTable
parameter_list|()
throws|throws
name|IOException
block|{
name|MountTable
name|newEntry
init|=
name|MountTable
operator|.
name|newInstance
argument_list|(
literal|"/testpath"
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"ns0"
argument_list|,
literal|"/testdir"
argument_list|)
argument_list|,
name|Time
operator|.
name|now
argument_list|()
argument_list|,
name|Time
operator|.
name|now
argument_list|()
argument_list|)
decl_stmt|;
name|RouterClient
name|client
init|=
name|routerContext
operator|.
name|getAdminClient
argument_list|()
decl_stmt|;
name|MountTableManager
name|mountTable
init|=
name|client
operator|.
name|getMountTableManager
argument_list|()
decl_stmt|;
comment|// Existing mount table size
name|List
argument_list|<
name|MountTable
argument_list|>
name|entries1
init|=
name|getMountTableEntries
argument_list|(
name|mountTable
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|entries1
operator|.
name|size
argument_list|()
argument_list|,
name|mockMountTable
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add
name|AddMountTableEntryRequest
name|addRequest
init|=
name|AddMountTableEntryRequest
operator|.
name|newInstance
argument_list|(
name|newEntry
argument_list|)
decl_stmt|;
name|AddMountTableEntryResponse
name|addResponse
init|=
name|mountTable
operator|.
name|addMountTableEntry
argument_list|(
name|addRequest
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|addResponse
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// New mount table size
name|List
argument_list|<
name|MountTable
argument_list|>
name|entries2
init|=
name|getMountTableEntries
argument_list|(
name|mountTable
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|entries2
operator|.
name|size
argument_list|()
argument_list|,
name|mockMountTable
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
comment|// Add again, should fail
name|AddMountTableEntryResponse
name|addResponse2
init|=
name|mountTable
operator|.
name|addMountTableEntry
argument_list|(
name|addRequest
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|addResponse2
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddReadOnlyMountTable ()
specifier|public
name|void
name|testAddReadOnlyMountTable
parameter_list|()
throws|throws
name|IOException
block|{
name|MountTable
name|newEntry
init|=
name|MountTable
operator|.
name|newInstance
argument_list|(
literal|"/readonly"
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"ns0"
argument_list|,
literal|"/testdir"
argument_list|)
argument_list|,
name|Time
operator|.
name|now
argument_list|()
argument_list|,
name|Time
operator|.
name|now
argument_list|()
argument_list|)
decl_stmt|;
name|newEntry
operator|.
name|setReadOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|RouterClient
name|client
init|=
name|routerContext
operator|.
name|getAdminClient
argument_list|()
decl_stmt|;
name|MountTableManager
name|mountTable
init|=
name|client
operator|.
name|getMountTableManager
argument_list|()
decl_stmt|;
comment|// Existing mount table size
name|List
argument_list|<
name|MountTable
argument_list|>
name|records
init|=
name|getMountTableEntries
argument_list|(
name|mountTable
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|records
operator|.
name|size
argument_list|()
argument_list|,
name|mockMountTable
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add
name|AddMountTableEntryRequest
name|addRequest
init|=
name|AddMountTableEntryRequest
operator|.
name|newInstance
argument_list|(
name|newEntry
argument_list|)
decl_stmt|;
name|AddMountTableEntryResponse
name|addResponse
init|=
name|mountTable
operator|.
name|addMountTableEntry
argument_list|(
name|addRequest
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|addResponse
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// New mount table size
name|List
argument_list|<
name|MountTable
argument_list|>
name|records2
init|=
name|getMountTableEntries
argument_list|(
name|mountTable
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|records2
operator|.
name|size
argument_list|()
argument_list|,
name|mockMountTable
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
comment|// Check that we have the read only entry
name|MountTable
name|record
init|=
name|getMountTableEntry
argument_list|(
literal|"/readonly"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/readonly"
argument_list|,
name|record
operator|.
name|getSourcePath
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|record
operator|.
name|isReadOnly
argument_list|()
argument_list|)
expr_stmt|;
comment|// Removing the new entry
name|RemoveMountTableEntryRequest
name|removeRequest
init|=
name|RemoveMountTableEntryRequest
operator|.
name|newInstance
argument_list|(
literal|"/readonly"
argument_list|)
decl_stmt|;
name|RemoveMountTableEntryResponse
name|removeResponse
init|=
name|mountTable
operator|.
name|removeMountTableEntry
argument_list|(
name|removeRequest
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|removeResponse
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddOrderMountTable ()
specifier|public
name|void
name|testAddOrderMountTable
parameter_list|()
throws|throws
name|IOException
block|{
name|testAddOrderMountTable
argument_list|(
name|DestinationOrder
operator|.
name|HASH
argument_list|)
expr_stmt|;
name|testAddOrderMountTable
argument_list|(
name|DestinationOrder
operator|.
name|LOCAL
argument_list|)
expr_stmt|;
name|testAddOrderMountTable
argument_list|(
name|DestinationOrder
operator|.
name|RANDOM
argument_list|)
expr_stmt|;
name|testAddOrderMountTable
argument_list|(
name|DestinationOrder
operator|.
name|HASH_ALL
argument_list|)
expr_stmt|;
block|}
DECL|method|testAddOrderMountTable (final DestinationOrder order)
specifier|private
name|void
name|testAddOrderMountTable
parameter_list|(
specifier|final
name|DestinationOrder
name|order
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|mnt
init|=
literal|"/"
operator|+
name|order
decl_stmt|;
name|MountTable
name|newEntry
init|=
name|MountTable
operator|.
name|newInstance
argument_list|(
name|mnt
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"ns0"
argument_list|,
literal|"/testdir"
argument_list|)
argument_list|,
name|Time
operator|.
name|now
argument_list|()
argument_list|,
name|Time
operator|.
name|now
argument_list|()
argument_list|)
decl_stmt|;
name|newEntry
operator|.
name|setDestOrder
argument_list|(
name|order
argument_list|)
expr_stmt|;
name|RouterClient
name|client
init|=
name|routerContext
operator|.
name|getAdminClient
argument_list|()
decl_stmt|;
name|MountTableManager
name|mountTable
init|=
name|client
operator|.
name|getMountTableManager
argument_list|()
decl_stmt|;
comment|// Add
name|AddMountTableEntryRequest
name|addRequest
decl_stmt|;
name|AddMountTableEntryResponse
name|addResponse
decl_stmt|;
name|addRequest
operator|=
name|AddMountTableEntryRequest
operator|.
name|newInstance
argument_list|(
name|newEntry
argument_list|)
expr_stmt|;
name|addResponse
operator|=
name|mountTable
operator|.
name|addMountTableEntry
argument_list|(
name|addRequest
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|addResponse
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check that we have the read only entry
name|MountTable
name|record
init|=
name|getMountTableEntry
argument_list|(
name|mnt
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|mnt
argument_list|,
name|record
operator|.
name|getSourcePath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|order
argument_list|,
name|record
operator|.
name|getDestOrder
argument_list|()
argument_list|)
expr_stmt|;
comment|// Removing the new entry
name|RemoveMountTableEntryRequest
name|removeRequest
init|=
name|RemoveMountTableEntryRequest
operator|.
name|newInstance
argument_list|(
name|mnt
argument_list|)
decl_stmt|;
name|RemoveMountTableEntryResponse
name|removeResponse
init|=
name|mountTable
operator|.
name|removeMountTableEntry
argument_list|(
name|removeRequest
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|removeResponse
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemoveMountTable ()
specifier|public
name|void
name|testRemoveMountTable
parameter_list|()
throws|throws
name|IOException
block|{
name|RouterClient
name|client
init|=
name|routerContext
operator|.
name|getAdminClient
argument_list|()
decl_stmt|;
name|MountTableManager
name|mountTable
init|=
name|client
operator|.
name|getMountTableManager
argument_list|()
decl_stmt|;
comment|// Existing mount table size
name|List
argument_list|<
name|MountTable
argument_list|>
name|entries1
init|=
name|getMountTableEntries
argument_list|(
name|mountTable
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|entries1
operator|.
name|size
argument_list|()
argument_list|,
name|mockMountTable
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Remove an entry
name|RemoveMountTableEntryRequest
name|removeRequest
init|=
name|RemoveMountTableEntryRequest
operator|.
name|newInstance
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|mountTable
operator|.
name|removeMountTableEntry
argument_list|(
name|removeRequest
argument_list|)
expr_stmt|;
comment|// New mount table size
name|List
argument_list|<
name|MountTable
argument_list|>
name|entries2
init|=
name|getMountTableEntries
argument_list|(
name|mountTable
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|entries2
operator|.
name|size
argument_list|()
argument_list|,
name|mockMountTable
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEditMountTable ()
specifier|public
name|void
name|testEditMountTable
parameter_list|()
throws|throws
name|IOException
block|{
name|RouterClient
name|client
init|=
name|routerContext
operator|.
name|getAdminClient
argument_list|()
decl_stmt|;
name|MountTableManager
name|mountTable
init|=
name|client
operator|.
name|getMountTableManager
argument_list|()
decl_stmt|;
comment|// Verify starting condition
name|MountTable
name|entry
init|=
name|getMountTableEntry
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|RemoteLocation
argument_list|(
literal|"ns0"
argument_list|,
literal|"/"
argument_list|)
argument_list|)
argument_list|,
name|entry
operator|.
name|getDestinations
argument_list|()
argument_list|)
expr_stmt|;
comment|// Edit the entry for /
name|MountTable
name|updatedEntry
init|=
name|MountTable
operator|.
name|newInstance
argument_list|(
literal|"/"
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"ns1"
argument_list|,
literal|"/"
argument_list|)
argument_list|,
name|Time
operator|.
name|now
argument_list|()
argument_list|,
name|Time
operator|.
name|now
argument_list|()
argument_list|)
decl_stmt|;
name|UpdateMountTableEntryRequest
name|updateRequest
init|=
name|UpdateMountTableEntryRequest
operator|.
name|newInstance
argument_list|(
name|updatedEntry
argument_list|)
decl_stmt|;
name|mountTable
operator|.
name|updateMountTableEntry
argument_list|(
name|updateRequest
argument_list|)
expr_stmt|;
comment|// Verify edited condition
name|entry
operator|=
name|getMountTableEntry
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|RemoteLocation
argument_list|(
literal|"ns1"
argument_list|,
literal|"/"
argument_list|)
argument_list|)
argument_list|,
name|entry
operator|.
name|getDestinations
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetMountTable ()
specifier|public
name|void
name|testGetMountTable
parameter_list|()
throws|throws
name|IOException
block|{
name|RouterClient
name|client
init|=
name|routerContext
operator|.
name|getAdminClient
argument_list|()
decl_stmt|;
name|MountTableManager
name|mountTable
init|=
name|client
operator|.
name|getMountTableManager
argument_list|()
decl_stmt|;
comment|// Verify size of table
name|List
argument_list|<
name|MountTable
argument_list|>
name|entries
init|=
name|getMountTableEntries
argument_list|(
name|mountTable
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|mockMountTable
operator|.
name|size
argument_list|()
argument_list|,
name|entries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify all entries are present
name|int
name|matches
init|=
literal|0
decl_stmt|;
for|for
control|(
name|MountTable
name|e
range|:
name|entries
control|)
block|{
for|for
control|(
name|MountTable
name|entry
range|:
name|mockMountTable
control|)
block|{
name|assertEquals
argument_list|(
name|e
operator|.
name|getDestinations
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|e
operator|.
name|getDateCreated
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|e
operator|.
name|getDateModified
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|entry
operator|.
name|getSourcePath
argument_list|()
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getSourcePath
argument_list|()
argument_list|)
condition|)
block|{
name|matches
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
name|matches
argument_list|,
name|mockMountTable
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetSingleMountTableEntry ()
specifier|public
name|void
name|testGetSingleMountTableEntry
parameter_list|()
throws|throws
name|IOException
block|{
name|MountTable
name|entry
init|=
name|getMountTableEntry
argument_list|(
literal|"/ns0"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|entry
operator|.
name|getSourcePath
argument_list|()
argument_list|,
literal|"/ns0"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Gets an existing mount table record in the state store.    *    * @param mount The mount point of the record to remove.    * @return The matching record if found, null if it is not found.    * @throws IOException If the state store could not be accessed.    */
DECL|method|getMountTableEntry (final String mount)
specifier|private
name|MountTable
name|getMountTableEntry
parameter_list|(
specifier|final
name|String
name|mount
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Refresh the cache
name|stateStore
operator|.
name|loadCache
argument_list|(
name|MountTableStoreImpl
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|GetMountTableEntriesRequest
name|request
init|=
name|GetMountTableEntriesRequest
operator|.
name|newInstance
argument_list|(
name|mount
argument_list|)
decl_stmt|;
name|RouterClient
name|client
init|=
name|routerContext
operator|.
name|getAdminClient
argument_list|()
decl_stmt|;
name|MountTableManager
name|mountTable
init|=
name|client
operator|.
name|getMountTableManager
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MountTable
argument_list|>
name|results
init|=
name|getMountTableEntries
argument_list|(
name|mountTable
argument_list|,
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|results
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// First result is sorted to have the shortest mount string length
return|return
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|getMountTableEntries (MountTableManager mountTable)
specifier|private
name|List
argument_list|<
name|MountTable
argument_list|>
name|getMountTableEntries
parameter_list|(
name|MountTableManager
name|mountTable
parameter_list|)
throws|throws
name|IOException
block|{
name|GetMountTableEntriesRequest
name|request
init|=
name|GetMountTableEntriesRequest
operator|.
name|newInstance
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
return|return
name|getMountTableEntries
argument_list|(
name|mountTable
argument_list|,
name|request
argument_list|)
return|;
block|}
DECL|method|getMountTableEntries (MountTableManager mountTable, GetMountTableEntriesRequest request)
specifier|private
name|List
argument_list|<
name|MountTable
argument_list|>
name|getMountTableEntries
parameter_list|(
name|MountTableManager
name|mountTable
parameter_list|,
name|GetMountTableEntriesRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
name|stateStore
operator|.
name|loadCache
argument_list|(
name|MountTableStoreImpl
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|GetMountTableEntriesResponse
name|response
init|=
name|mountTable
operator|.
name|getMountTableEntries
argument_list|(
name|request
argument_list|)
decl_stmt|;
return|return
name|response
operator|.
name|getEntries
argument_list|()
return|;
block|}
block|}
end_class

end_unit

