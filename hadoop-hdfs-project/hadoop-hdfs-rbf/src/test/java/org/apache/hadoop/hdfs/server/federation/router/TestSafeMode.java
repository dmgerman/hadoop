begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.router
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|FederationTestUtils
operator|.
name|NAMENODES
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|SafeModeAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|MiniRouterDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|MiniRouterDFSCluster
operator|.
name|RouterContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test the SafeMode.  */
end_comment

begin_class
DECL|class|TestSafeMode
specifier|public
class|class
name|TestSafeMode
block|{
comment|/** Federated HDFS cluster. */
DECL|field|cluster
specifier|private
name|MiniRouterDFSCluster
name|cluster
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|cluster
operator|=
operator|new
name|MiniRouterDFSCluster
argument_list|(
literal|true
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Start NNs and DNs and wait until ready
name|cluster
operator|.
name|startCluster
argument_list|()
expr_stmt|;
comment|// Start routers with only an RPC service
name|cluster
operator|.
name|startRouters
argument_list|()
expr_stmt|;
comment|// Register and verify all NNs with all routers
name|cluster
operator|.
name|registerNamenodes
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitNamenodeRegistration
argument_list|()
expr_stmt|;
comment|// Setup the mount table
name|cluster
operator|.
name|installMockLocations
argument_list|()
expr_stmt|;
comment|// Making one Namenodes active per nameservice
if|if
condition|(
name|cluster
operator|.
name|isHighAvailability
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|ns
range|:
name|cluster
operator|.
name|getNameservices
argument_list|()
control|)
block|{
name|cluster
operator|.
name|switchToActive
argument_list|(
name|ns
argument_list|,
name|NAMENODES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|switchToStandby
argument_list|(
name|ns
argument_list|,
name|NAMENODES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|cluster
operator|.
name|waitActiveNamespaces
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testProxySetSafemode ()
specifier|public
name|void
name|testProxySetSafemode
parameter_list|()
throws|throws
name|Exception
block|{
name|RouterContext
name|routerContext
init|=
name|cluster
operator|.
name|getRandomRouter
argument_list|()
decl_stmt|;
name|ClientProtocol
name|routerProtocol
init|=
name|routerContext
operator|.
name|getClient
argument_list|()
operator|.
name|getNamenode
argument_list|()
decl_stmt|;
name|routerProtocol
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_GET
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|routerProtocol
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_GET
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

