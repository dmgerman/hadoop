begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.store
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|FederationStateStoreTestUtils
operator|.
name|clearRecords
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|DisabledNameservice
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test the basic {@link StateStoreService}  * {@link DisabledNameserviceStore} functionality.  */
end_comment

begin_class
DECL|class|TestStateStoreDisabledNameservice
specifier|public
class|class
name|TestStateStoreDisabledNameservice
extends|extends
name|TestStateStoreBase
block|{
DECL|field|disabledStore
specifier|private
specifier|static
name|DisabledNameserviceStore
name|disabledStore
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|disabledStore
operator|=
name|getStateStore
argument_list|()
operator|.
name|getRegisteredRecordStore
argument_list|(
name|DisabledNameserviceStore
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// Clear disabled nameservice registrations
name|assertTrue
argument_list|(
name|clearRecords
argument_list|(
name|getStateStore
argument_list|()
argument_list|,
name|DisabledNameservice
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDisableNameservice ()
specifier|public
name|void
name|testDisableNameservice
parameter_list|()
throws|throws
name|IOException
block|{
comment|// no nameservices disabled firstly
name|Set
argument_list|<
name|String
argument_list|>
name|disabledNameservices
init|=
name|disabledStore
operator|.
name|getDisabledNameservices
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|disabledNameservices
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// disable two nameservices
name|disabledStore
operator|.
name|disableNameservice
argument_list|(
literal|"ns0"
argument_list|)
expr_stmt|;
name|disabledStore
operator|.
name|disableNameservice
argument_list|(
literal|"ns1"
argument_list|)
expr_stmt|;
name|disabledStore
operator|.
name|loadCache
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// verify if the nameservices are disabled
name|disabledNameservices
operator|=
name|disabledStore
operator|.
name|getDisabledNameservices
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|disabledNameservices
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|disabledNameservices
operator|.
name|contains
argument_list|(
literal|"ns0"
argument_list|)
operator|&&
name|disabledNameservices
operator|.
name|contains
argument_list|(
literal|"ns1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// enable one nameservice
name|disabledStore
operator|.
name|enableNameservice
argument_list|(
literal|"ns0"
argument_list|)
expr_stmt|;
name|disabledStore
operator|.
name|loadCache
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// verify the disabled nameservice again
name|disabledNameservices
operator|=
name|disabledStore
operator|.
name|getDisabledNameservices
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|disabledNameservices
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|disabledNameservices
operator|.
name|contains
argument_list|(
literal|"ns1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

