begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.router
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CacheFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BatchedRemoteIterator
operator|.
name|BatchedEntries
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CacheDirectiveEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CacheDirectiveInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CachePoolEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CachePoolInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|ActiveNamenodeResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|FederationNamespaceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|RemoteLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_comment
comment|/**  * Module that implements all the RPC calls in  * {@link org.apache.hadoop.hdfs.protocol.ClientProtocol} related to Cache Admin  * in the {@link RouterRpcServer}.  */
end_comment

begin_class
DECL|class|RouterCacheAdmin
specifier|public
class|class
name|RouterCacheAdmin
block|{
comment|/** RPC server to receive client calls. */
DECL|field|rpcServer
specifier|private
specifier|final
name|RouterRpcServer
name|rpcServer
decl_stmt|;
comment|/** RPC clients to connect to the Namenodes. */
DECL|field|rpcClient
specifier|private
specifier|final
name|RouterRpcClient
name|rpcClient
decl_stmt|;
comment|/** Interface to identify the active NN for a nameservice or blockpool ID. */
DECL|field|namenodeResolver
specifier|private
specifier|final
name|ActiveNamenodeResolver
name|namenodeResolver
decl_stmt|;
DECL|method|RouterCacheAdmin (RouterRpcServer server)
specifier|public
name|RouterCacheAdmin
parameter_list|(
name|RouterRpcServer
name|server
parameter_list|)
block|{
name|this
operator|.
name|rpcServer
operator|=
name|server
expr_stmt|;
name|this
operator|.
name|rpcClient
operator|=
name|this
operator|.
name|rpcServer
operator|.
name|getRPCClient
argument_list|()
expr_stmt|;
name|this
operator|.
name|namenodeResolver
operator|=
name|this
operator|.
name|rpcClient
operator|.
name|getNamenodeResolver
argument_list|()
expr_stmt|;
block|}
DECL|method|addCacheDirective (CacheDirectiveInfo path, EnumSet<CacheFlag> flags)
specifier|public
name|long
name|addCacheDirective
parameter_list|(
name|CacheDirectiveInfo
name|path
parameter_list|,
name|EnumSet
argument_list|<
name|CacheFlag
argument_list|>
name|flags
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|WRITE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|locations
init|=
name|rpcServer
operator|.
name|getLocationsForPath
argument_list|(
name|path
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"addCacheDirective"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|CacheDirectiveInfo
operator|.
name|class
operator|,
name|EnumSet
operator|.
name|class
block|}
operator|,
operator|new
name|RemoteParam
argument_list|(
name|getRemoteMap
argument_list|(
name|path
argument_list|,
name|locations
argument_list|)
argument_list|)
operator|,
name|flags
block|)
function|;
name|Map
argument_list|<
name|RemoteLocation
argument_list|,
name|Long
argument_list|>
name|response
init|=
name|rpcClient
operator|.
name|invokeConcurrent
argument_list|(
name|locations
argument_list|,
name|method
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|long
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|response
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
return|;
block|}
end_class

begin_function
DECL|method|modifyCacheDirective (CacheDirectiveInfo directive, EnumSet<CacheFlag> flags)
specifier|public
name|void
name|modifyCacheDirective
parameter_list|(
name|CacheDirectiveInfo
name|directive
parameter_list|,
name|EnumSet
argument_list|<
name|CacheFlag
argument_list|>
name|flags
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|WRITE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Path
name|p
init|=
name|directive
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
specifier|final
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|locations
init|=
name|rpcServer
operator|.
name|getLocationsForPath
argument_list|(
name|directive
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"modifyCacheDirective"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|CacheDirectiveInfo
operator|.
name|class
operator|,
name|EnumSet
operator|.
name|class
block|}
operator|,
operator|new
name|RemoteParam
argument_list|(
name|getRemoteMap
argument_list|(
name|directive
argument_list|,
name|locations
argument_list|)
argument_list|)
operator|,
name|flags
block|)
empty_stmt|;
name|rpcClient
operator|.
name|invokeConcurrent
argument_list|(
name|locations
argument_list|,
name|method
argument_list|)
expr_stmt|;
return|return;
block|}
end_function

begin_decl_stmt
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"modifyCacheDirective"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|CacheDirectiveInfo
operator|.
name|class
operator|,
name|EnumSet
operator|.
name|class
block|}
end_decl_stmt

begin_operator
operator|,
end_operator

begin_expr_stmt
name|directive
operator|,
name|flags
end_expr_stmt

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|Set
argument_list|<
name|FederationNamespaceInfo
argument_list|>
name|nss
init|=
name|namenodeResolver
operator|.
name|getNamespaces
argument_list|()
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|rpcClient
operator|.
name|invokeConcurrent
argument_list|(
name|nss
argument_list|,
name|method
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}    public
DECL|method|removeCacheDirective (long id)
name|void
name|removeCacheDirective
parameter_list|(
name|long
name|id
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|WRITE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"removeCacheDirective"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|long
operator|.
name|class
block|}
operator|,
name|id
block|)
function|;
end_function

begin_decl_stmt
name|Set
argument_list|<
name|FederationNamespaceInfo
argument_list|>
name|nss
init|=
name|namenodeResolver
operator|.
name|getNamespaces
argument_list|()
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|rpcClient
operator|.
name|invokeConcurrent
argument_list|(
name|nss
argument_list|,
name|method
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}    public
DECL|method|listCacheDirectives (long prevId, CacheDirectiveInfo filter)
name|BatchedEntries
argument_list|<
name|CacheDirectiveEntry
argument_list|>
name|listCacheDirectives
parameter_list|(
name|long
name|prevId
parameter_list|,
name|CacheDirectiveInfo
name|filter
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|READ
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|filter
operator|.
name|getPath
argument_list|()
operator|!=
literal|null
condition|)
block|{
specifier|final
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|locations
init|=
name|rpcServer
operator|.
name|getLocationsForPath
argument_list|(
name|filter
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"listCacheDirectives"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|long
operator|.
name|class
operator|,
name|CacheDirectiveInfo
operator|.
name|class
block|}
operator|,
name|prevId
operator|,
operator|new
name|RemoteParam
argument_list|(
name|getRemoteMap
argument_list|(
name|filter
argument_list|,
name|locations
argument_list|)
argument_list|)
block|)
empty_stmt|;
name|Map
argument_list|<
name|RemoteLocation
argument_list|,
name|BatchedEntries
argument_list|>
name|response
init|=
name|rpcClient
operator|.
name|invokeConcurrent
argument_list|(
name|locations
argument_list|,
name|method
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|BatchedEntries
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|response
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
return|;
block|}
end_function

begin_decl_stmt
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"listCacheDirectives"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|long
operator|.
name|class
operator|,
name|CacheDirectiveInfo
operator|.
name|class
block|}
end_decl_stmt

begin_operator
operator|,
end_operator

begin_expr_stmt
name|prevId
operator|,
name|filter
end_expr_stmt

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|Set
argument_list|<
name|FederationNamespaceInfo
argument_list|>
name|nss
init|=
name|namenodeResolver
operator|.
name|getNamespaces
argument_list|()
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|Map
argument_list|<
name|FederationNamespaceInfo
argument_list|,
name|BatchedEntries
argument_list|>
name|results
init|=
name|rpcClient
operator|.
name|invokeConcurrent
argument_list|(
name|nss
argument_list|,
name|method
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|BatchedEntries
operator|.
name|class
argument_list|)
decl_stmt|;
end_decl_stmt

begin_return
return|return
name|results
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
return|;
end_return

begin_function
unit|}    public
DECL|method|addCachePool (CachePoolInfo info)
name|void
name|addCachePool
parameter_list|(
name|CachePoolInfo
name|info
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|WRITE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"addCachePool"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|CachePoolInfo
operator|.
name|class
block|}
operator|,
name|info
block|)
function|;
end_function

begin_decl_stmt
name|Set
argument_list|<
name|FederationNamespaceInfo
argument_list|>
name|nss
init|=
name|namenodeResolver
operator|.
name|getNamespaces
argument_list|()
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|rpcClient
operator|.
name|invokeConcurrent
argument_list|(
name|nss
argument_list|,
name|method
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}    public
DECL|method|modifyCachePool (CachePoolInfo info)
name|void
name|modifyCachePool
parameter_list|(
name|CachePoolInfo
name|info
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|WRITE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"modifyCachePool"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|CachePoolInfo
operator|.
name|class
block|}
operator|,
name|info
block|)
function|;
end_function

begin_decl_stmt
name|Set
argument_list|<
name|FederationNamespaceInfo
argument_list|>
name|nss
init|=
name|namenodeResolver
operator|.
name|getNamespaces
argument_list|()
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|rpcClient
operator|.
name|invokeConcurrent
argument_list|(
name|nss
argument_list|,
name|method
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}    public
DECL|method|removeCachePool (String cachePoolName)
name|void
name|removeCachePool
parameter_list|(
name|String
name|cachePoolName
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|WRITE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"removeCachePool"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
block|}
operator|,
name|cachePoolName
block|)
function|;
end_function

begin_decl_stmt
name|Set
argument_list|<
name|FederationNamespaceInfo
argument_list|>
name|nss
init|=
name|namenodeResolver
operator|.
name|getNamespaces
argument_list|()
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|rpcClient
operator|.
name|invokeConcurrent
argument_list|(
name|nss
argument_list|,
name|method
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}    public
DECL|method|listCachePools (String prevKey)
name|BatchedEntries
argument_list|<
name|CachePoolEntry
argument_list|>
name|listCachePools
parameter_list|(
name|String
name|prevKey
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|READ
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"listCachePools"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
block|}
operator|,
name|prevKey
block|)
function|;
end_function

begin_decl_stmt
name|Set
argument_list|<
name|FederationNamespaceInfo
argument_list|>
name|nss
init|=
name|namenodeResolver
operator|.
name|getNamespaces
argument_list|()
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|Map
argument_list|<
name|FederationNamespaceInfo
argument_list|,
name|BatchedEntries
argument_list|>
name|results
init|=
name|rpcClient
operator|.
name|invokeConcurrent
argument_list|(
name|nss
argument_list|,
name|method
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|BatchedEntries
operator|.
name|class
argument_list|)
decl_stmt|;
end_decl_stmt

begin_return
return|return
name|results
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
return|;
end_return

begin_comment
unit|}
comment|/**    * Returns a map with the CacheDirectiveInfo mapped to each location.    * @param path CacheDirectiveInfo to be mapped to the locations.    * @param locations the locations to map.    * @return map with CacheDirectiveInfo mapped to the locations.    */
end_comment

begin_function
DECL|method|getRemoteMap ( CacheDirectiveInfo path, final List<RemoteLocation> locations)
unit|private
name|Map
argument_list|<
name|RemoteLocation
argument_list|,
name|CacheDirectiveInfo
argument_list|>
name|getRemoteMap
parameter_list|(
name|CacheDirectiveInfo
name|path
parameter_list|,
specifier|final
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|locations
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|RemoteLocation
argument_list|,
name|CacheDirectiveInfo
argument_list|>
name|dstMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|RemoteLocation
argument_list|>
name|iterator
init|=
name|locations
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|dstMap
operator|.
name|put
argument_list|(
name|iterator
operator|.
name|next
argument_list|()
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
return|return
name|dstMap
return|;
block|}
end_function

unit|}
end_unit

