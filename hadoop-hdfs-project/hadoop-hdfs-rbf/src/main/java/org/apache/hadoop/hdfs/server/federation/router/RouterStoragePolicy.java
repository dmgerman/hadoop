begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.router
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|BlockStoragePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|RemoteLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Module that implements all the RPC calls in  * {@link org.apache.hadoop.hdfs.protocol.ClientProtocol} related to  * Storage Policy in the {@link RouterRpcServer}.  */
end_comment

begin_class
DECL|class|RouterStoragePolicy
specifier|public
class|class
name|RouterStoragePolicy
block|{
comment|/** RPC server to receive client calls. */
DECL|field|rpcServer
specifier|private
specifier|final
name|RouterRpcServer
name|rpcServer
decl_stmt|;
comment|/** RPC clients to connect to the Namenodes. */
DECL|field|rpcClient
specifier|private
specifier|final
name|RouterRpcClient
name|rpcClient
decl_stmt|;
DECL|method|RouterStoragePolicy (RouterRpcServer server)
specifier|public
name|RouterStoragePolicy
parameter_list|(
name|RouterRpcServer
name|server
parameter_list|)
block|{
name|this
operator|.
name|rpcServer
operator|=
name|server
expr_stmt|;
name|this
operator|.
name|rpcClient
operator|=
name|this
operator|.
name|rpcServer
operator|.
name|getRPCClient
argument_list|()
expr_stmt|;
block|}
DECL|method|setStoragePolicy (String src, String policyName)
specifier|public
name|void
name|setStoragePolicy
parameter_list|(
name|String
name|src
parameter_list|,
name|String
name|policyName
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|locations
init|=
name|rpcServer
operator|.
name|getLocationsForPath
argument_list|(
name|src
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"setStoragePolicy"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
operator|,
name|String
operator|.
name|class
block|}
operator|,
operator|new
name|RemoteParam
argument_list|()
operator|,
name|policyName
block|)
function|;
if|if
condition|(
name|rpcServer
operator|.
name|isInvokeConcurrent
argument_list|(
name|src
argument_list|)
condition|)
block|{
name|rpcClient
operator|.
name|invokeConcurrent
argument_list|(
name|locations
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rpcClient
operator|.
name|invokeSequential
argument_list|(
name|locations
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_function
DECL|method|getStoragePolicies ()
specifier|public
name|BlockStoragePolicy
index|[]
name|getStoragePolicies
parameter_list|()
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"getStoragePolicies"
argument_list|)
decl_stmt|;
return|return
name|rpcServer
operator|.
name|invokeAtAvailableNs
argument_list|(
name|method
argument_list|,
name|BlockStoragePolicy
index|[]
operator|.
expr|class
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|unsetStoragePolicy (String src)
specifier|public
name|void
name|unsetStoragePolicy
parameter_list|(
name|String
name|src
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|WRITE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|locations
init|=
name|rpcServer
operator|.
name|getLocationsForPath
argument_list|(
name|src
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"unsetStoragePolicy"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
block|}
operator|,
operator|new
name|RemoteParam
argument_list|()
block|)
function|;
end_function

begin_if
if|if
condition|(
name|rpcServer
operator|.
name|isInvokeConcurrent
argument_list|(
name|src
argument_list|)
condition|)
block|{
name|rpcClient
operator|.
name|invokeConcurrent
argument_list|(
name|locations
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rpcClient
operator|.
name|invokeSequential
argument_list|(
name|locations
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
end_if

begin_function
unit|}    public
DECL|method|getStoragePolicy (String path)
name|BlockStoragePolicy
name|getStoragePolicy
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|READ
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|locations
init|=
name|rpcServer
operator|.
name|getLocationsForPath
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"getStoragePolicy"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
block|}
operator|,
operator|new
name|RemoteParam
argument_list|()
block|)
function|;
end_function

begin_return
return|return
operator|(
name|BlockStoragePolicy
operator|)
name|rpcClient
operator|.
name|invokeSequential
argument_list|(
name|locations
argument_list|,
name|method
argument_list|)
return|;
end_return

begin_function
unit|}    public
DECL|method|satisfyStoragePolicy (String path)
name|void
name|satisfyStoragePolicy
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|READ
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|locations
init|=
name|rpcServer
operator|.
name|getLocationsForPath
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"satisfyStoragePolicy"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
block|}
operator|,
operator|new
name|RemoteParam
argument_list|()
block|)
function|;
end_function

begin_expr_stmt
name|rpcClient
operator|.
name|invokeSequential
argument_list|(
name|locations
argument_list|,
name|method
argument_list|)
expr_stmt|;
end_expr_stmt

unit|} }
end_unit

