begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.store
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|metrics
operator|.
name|StateStoreMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|driver
operator|.
name|StateStoreDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|BaseRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|QueryResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Record store that takes care of caching the records in memory.  *  * @param<R> Record to store by this interface.  */
end_comment

begin_class
DECL|class|CachedRecordStore
specifier|public
specifier|abstract
class|class
name|CachedRecordStore
parameter_list|<
name|R
extends|extends
name|BaseRecord
parameter_list|>
extends|extends
name|RecordStore
argument_list|<
name|R
argument_list|>
implements|implements
name|StateStoreCache
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CachedRecordStore
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** Prevent loading the cache more than once every 500 ms. */
DECL|field|MIN_UPDATE_MS
specifier|private
specifier|static
specifier|final
name|long
name|MIN_UPDATE_MS
init|=
literal|500
decl_stmt|;
comment|/** Cached entries. */
DECL|field|records
specifier|private
name|List
argument_list|<
name|R
argument_list|>
name|records
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|/** Time stamp of the cached entries. */
DECL|field|timestamp
specifier|private
name|long
name|timestamp
init|=
operator|-
literal|1
decl_stmt|;
comment|/** If the cache is initialized. */
DECL|field|initialized
specifier|private
name|boolean
name|initialized
init|=
literal|false
decl_stmt|;
comment|/** Last time the cache was updated. */
DECL|field|lastUpdate
specifier|private
name|long
name|lastUpdate
init|=
operator|-
literal|1
decl_stmt|;
comment|/** Lock to access the memory cache. */
DECL|field|readWriteLock
specifier|private
specifier|final
name|ReadWriteLock
name|readWriteLock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
DECL|field|readLock
specifier|private
specifier|final
name|Lock
name|readLock
init|=
name|readWriteLock
operator|.
name|readLock
argument_list|()
decl_stmt|;
DECL|field|writeLock
specifier|private
specifier|final
name|Lock
name|writeLock
init|=
name|readWriteLock
operator|.
name|writeLock
argument_list|()
decl_stmt|;
comment|/** If it should override the expired values when loading the cache. */
DECL|field|override
specifier|private
name|boolean
name|override
init|=
literal|false
decl_stmt|;
comment|/**    * Create a new cached record store.    *    * @param clazz Class of the record to store.    * @param driver State Store driver.    */
DECL|method|CachedRecordStore (Class<R> clazz, StateStoreDriver driver)
specifier|protected
name|CachedRecordStore
parameter_list|(
name|Class
argument_list|<
name|R
argument_list|>
name|clazz
parameter_list|,
name|StateStoreDriver
name|driver
parameter_list|)
block|{
name|this
argument_list|(
name|clazz
argument_list|,
name|driver
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a new cached record store.    *    * @param clazz Class of the record to store.    * @param driver State Store driver.    * @param over If the entries should be override if they expire    */
DECL|method|CachedRecordStore ( Class<R> clazz, StateStoreDriver driver, boolean over)
specifier|protected
name|CachedRecordStore
parameter_list|(
name|Class
argument_list|<
name|R
argument_list|>
name|clazz
parameter_list|,
name|StateStoreDriver
name|driver
parameter_list|,
name|boolean
name|over
parameter_list|)
block|{
name|super
argument_list|(
name|clazz
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|this
operator|.
name|override
operator|=
name|over
expr_stmt|;
block|}
comment|/**    * Check that the cache of the State Store information is available.    *    * @throws StateStoreUnavailableException If the cache is not initialized.    */
DECL|method|checkCacheAvailable ()
specifier|private
name|void
name|checkCacheAvailable
parameter_list|()
throws|throws
name|StateStoreUnavailableException
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|initialized
condition|)
block|{
throw|throw
operator|new
name|StateStoreUnavailableException
argument_list|(
literal|"Cached State Store not initialized, "
operator|+
name|getRecordClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" records not valid"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|loadCache (boolean force)
specifier|public
name|boolean
name|loadCache
parameter_list|(
name|boolean
name|force
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Prevent loading the cache too frequently
if|if
condition|(
name|force
operator|||
name|isUpdateTime
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|R
argument_list|>
name|newRecords
init|=
literal|null
decl_stmt|;
name|long
name|t
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|QueryResult
argument_list|<
name|R
argument_list|>
name|result
init|=
name|getDriver
argument_list|()
operator|.
name|get
argument_list|(
name|getRecordClass
argument_list|()
argument_list|)
decl_stmt|;
name|newRecords
operator|=
name|result
operator|.
name|getRecords
argument_list|()
expr_stmt|;
name|t
operator|=
name|result
operator|.
name|getTimestamp
argument_list|()
expr_stmt|;
comment|// If we have any expired record, update the State Store
if|if
condition|(
name|this
operator|.
name|override
condition|)
block|{
name|overrideExpiredRecords
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot get \"{}\" records from the State Store"
argument_list|,
name|getRecordClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|initialized
operator|=
literal|false
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// Update cache atomically
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|records
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|records
operator|.
name|addAll
argument_list|(
name|newRecords
argument_list|)
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|t
expr_stmt|;
name|this
operator|.
name|initialized
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|// Update the metrics for the cache State Store size
name|StateStoreMetrics
name|metrics
init|=
name|getDriver
argument_list|()
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
if|if
condition|(
name|metrics
operator|!=
literal|null
condition|)
block|{
name|String
name|recordName
init|=
name|getRecordClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
name|metrics
operator|.
name|setCacheSize
argument_list|(
name|recordName
argument_list|,
name|this
operator|.
name|records
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|lastUpdate
operator|=
name|Time
operator|.
name|monotonicNow
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Check if it's time to update the cache. Update it it was never updated.    *    * @return If it's time to update this cache.    */
DECL|method|isUpdateTime ()
specifier|private
name|boolean
name|isUpdateTime
parameter_list|()
block|{
return|return
name|Time
operator|.
name|monotonicNow
argument_list|()
operator|-
name|lastUpdate
operator|>
name|MIN_UPDATE_MS
return|;
block|}
comment|/**    * Updates the state store with any record overrides we detected, such as an    * expired state.    *    * @param query RecordQueryResult containing the data to be inspected.    * @throws IOException If the values cannot be updated.    */
DECL|method|overrideExpiredRecords (QueryResult<R> query)
specifier|public
name|void
name|overrideExpiredRecords
parameter_list|(
name|QueryResult
argument_list|<
name|R
argument_list|>
name|query
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|R
argument_list|>
name|commitRecords
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|R
argument_list|>
name|newRecords
init|=
name|query
operator|.
name|getRecords
argument_list|()
decl_stmt|;
name|long
name|currentDriverTime
init|=
name|query
operator|.
name|getTimestamp
argument_list|()
decl_stmt|;
if|if
condition|(
name|newRecords
operator|==
literal|null
operator|||
name|currentDriverTime
operator|<=
literal|0
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot check overrides for record"
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|R
name|record
range|:
name|newRecords
control|)
block|{
if|if
condition|(
name|record
operator|.
name|checkExpired
argument_list|(
name|currentDriverTime
argument_list|)
condition|)
block|{
name|String
name|recordName
init|=
name|StateStoreUtils
operator|.
name|getRecordName
argument_list|(
name|record
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Override State Store record {}: {}"
argument_list|,
name|recordName
argument_list|,
name|record
argument_list|)
expr_stmt|;
name|commitRecords
operator|.
name|add
argument_list|(
name|record
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|commitRecords
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|getDriver
argument_list|()
operator|.
name|putAll
argument_list|(
name|commitRecords
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Updates the state store with any record overrides we detected, such as an    * expired state.    *    * @param record Record record to be updated.    * @throws IOException If the values cannot be updated.    */
DECL|method|overrideExpiredRecord (R record)
specifier|public
name|void
name|overrideExpiredRecord
parameter_list|(
name|R
name|record
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|R
argument_list|>
name|newRecords
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|record
argument_list|)
decl_stmt|;
name|long
name|time
init|=
name|getDriver
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|QueryResult
argument_list|<
name|R
argument_list|>
name|query
init|=
operator|new
name|QueryResult
argument_list|<>
argument_list|(
name|newRecords
argument_list|,
name|time
argument_list|)
decl_stmt|;
name|overrideExpiredRecords
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get all the cached records.    *    * @return Copy of the cached records.    * @throws StateStoreUnavailableException If the State store is not available.    */
DECL|method|getCachedRecords ()
specifier|public
name|List
argument_list|<
name|R
argument_list|>
name|getCachedRecords
parameter_list|()
throws|throws
name|StateStoreUnavailableException
block|{
name|checkCacheAvailable
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|R
argument_list|>
name|ret
init|=
operator|new
name|LinkedList
argument_list|<
name|R
argument_list|>
argument_list|()
decl_stmt|;
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|ret
operator|.
name|addAll
argument_list|(
name|this
operator|.
name|records
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
comment|/**    * Get all the cached records and the time stamp of the cache.    *    * @return Copy of the cached records and the time stamp.    * @throws StateStoreUnavailableException If the State store is not available.    */
DECL|method|getCachedRecordsAndTimeStamp ()
specifier|protected
name|QueryResult
argument_list|<
name|R
argument_list|>
name|getCachedRecordsAndTimeStamp
parameter_list|()
throws|throws
name|StateStoreUnavailableException
block|{
name|checkCacheAvailable
argument_list|()
expr_stmt|;
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
operator|new
name|QueryResult
argument_list|<
name|R
argument_list|>
argument_list|(
name|this
operator|.
name|records
argument_list|,
name|this
operator|.
name|timestamp
argument_list|)
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

