begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.router
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CacheDirectiveInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Determines the remote client protocol method and the parameter list for a  * specific location.  */
end_comment

begin_class
DECL|class|RemoteMethod
specifier|public
class|class
name|RemoteMethod
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RemoteMethod
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** List of parameters: static and dynamic values, matchings types. */
DECL|field|params
specifier|private
specifier|final
name|Object
index|[]
name|params
decl_stmt|;
comment|/** List of method parameters types, matches parameters. */
DECL|field|types
specifier|private
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|types
decl_stmt|;
comment|/** Class of the protocol for the method. */
DECL|field|protocol
specifier|private
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|protocol
decl_stmt|;
comment|/** String name of the ClientProtocol method. */
DECL|field|methodName
specifier|private
specifier|final
name|String
name|methodName
decl_stmt|;
comment|/**    * Create a remote method generator for the ClientProtocol with no parameters.    *    * @param method The string name of the protocol method.    */
DECL|method|RemoteMethod (String method)
specifier|public
name|RemoteMethod
parameter_list|(
name|String
name|method
parameter_list|)
block|{
name|this
argument_list|(
name|ClientProtocol
operator|.
name|class
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a method with no parameters.    *    * @param proto Protocol of the method.    * @param method The string name of the ClientProtocol method.    */
DECL|method|RemoteMethod (Class<?> proto, String method)
specifier|public
name|RemoteMethod
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|proto
parameter_list|,
name|String
name|method
parameter_list|)
block|{
name|this
operator|.
name|params
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|types
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|methodName
operator|=
name|method
expr_stmt|;
name|this
operator|.
name|protocol
operator|=
name|proto
expr_stmt|;
block|}
comment|/**    * Create a remote method generator for the ClientProtocol.    *    * @param method The string name of the ClientProtocol method.    * @param pTypes A list of types to use to locate the specific method.    * @param pParams A list of parameters for the method. The order of the    *          parameter list must match the order and number of the types.    *          Parameters are grouped into 2 categories:    *<ul>    *<li>Static parameters that are immutable across locations.    *<li>Dynamic parameters that are determined for each location by a    *          RemoteParam object. To specify a dynamic parameter, pass an    *          instance of RemoteParam in place of the parameter value.    *</ul>    * @throws IOException If the types and parameter lists are not valid.    */
DECL|method|RemoteMethod (String method, Class<?>[] pTypes, Object... pParams)
specifier|public
name|RemoteMethod
parameter_list|(
name|String
name|method
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|pTypes
parameter_list|,
name|Object
modifier|...
name|pParams
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|ClientProtocol
operator|.
name|class
argument_list|,
name|method
argument_list|,
name|pTypes
argument_list|,
name|pParams
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a remote method generator.    *    * @param proto Protocol of the method.    * @param method The string name of the ClientProtocol method.    * @param pTypes A list of types to use to locate the specific method.    * @param pParams A list of parameters for the method. The order of the    *          parameter list must match the order and number of the types.    *          Parameters are grouped into 2 categories:    *<ul>    *<li>Static parameters that are immutable across locations.    *<li>Dynamic parameters that are determined for each location by a    *          RemoteParam object. To specify a dynamic parameter, pass an    *          instance of RemoteParam in place of the parameter value.    *</ul>    * @throws IOException If the types and parameter lists are not valid.    */
DECL|method|RemoteMethod (Class<?> proto, String method, Class<?>[] pTypes, Object... pParams)
specifier|public
name|RemoteMethod
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|proto
parameter_list|,
name|String
name|method
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|pTypes
parameter_list|,
name|Object
modifier|...
name|pParams
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|pParams
operator|.
name|length
operator|!=
name|pTypes
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid parameters for method "
operator|+
name|method
argument_list|)
throw|;
block|}
name|this
operator|.
name|protocol
operator|=
name|proto
expr_stmt|;
name|this
operator|.
name|params
operator|=
name|pParams
expr_stmt|;
name|this
operator|.
name|types
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|pTypes
argument_list|,
name|pTypes
operator|.
name|length
argument_list|)
expr_stmt|;
name|this
operator|.
name|methodName
operator|=
name|method
expr_stmt|;
block|}
comment|/**    * Get the interface/protocol for this method. For example, ClientProtocol or    * NamenodeProtocol.    *    * @return Protocol for this method.    */
DECL|method|getProtocol ()
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getProtocol
parameter_list|()
block|{
return|return
name|this
operator|.
name|protocol
return|;
block|}
comment|/**    * Get the represented java method.    *    * @return Method    * @throws IOException If the method cannot be found.    */
DECL|method|getMethod ()
specifier|public
name|Method
name|getMethod
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
if|if
condition|(
name|types
operator|!=
literal|null
condition|)
block|{
return|return
name|protocol
operator|.
name|getDeclaredMethod
argument_list|(
name|methodName
argument_list|,
name|types
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|protocol
operator|.
name|getDeclaredMethod
argument_list|(
name|methodName
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
comment|// Re-throw as an IOException
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot get method {} with types {} from {}"
argument_list|,
name|methodName
argument_list|,
name|Arrays
operator|.
name|toString
argument_list|(
name|types
argument_list|)
argument_list|,
name|protocol
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot access method {} with types {} from {}"
argument_list|,
name|methodName
argument_list|,
name|Arrays
operator|.
name|toString
argument_list|(
name|types
argument_list|)
argument_list|,
name|protocol
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Get the calling types for this method.    *    * @return An array of calling types.    */
DECL|method|getTypes ()
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|getTypes
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|copyOf
argument_list|(
name|this
operator|.
name|types
argument_list|,
name|this
operator|.
name|types
operator|.
name|length
argument_list|)
return|;
block|}
comment|/**    * Generate a list of parameters for this specific location using no context.    *    * @return A list of parameters for the method customized for the location.    */
DECL|method|getParams ()
specifier|public
name|Object
index|[]
name|getParams
parameter_list|()
block|{
return|return
name|this
operator|.
name|getParams
argument_list|(
literal|null
argument_list|)
return|;
block|}
comment|/**    * Get the name of the method.    *    * @return Name of the method.    */
DECL|method|getMethodName ()
specifier|public
name|String
name|getMethodName
parameter_list|()
block|{
return|return
name|this
operator|.
name|methodName
return|;
block|}
comment|/**    * Generate a list of parameters for this specific location. Parameters are    * grouped into 2 categories:    *<ul>    *<li>Static parameters that are immutable across locations.    *<li>Dynamic parameters that are determined for each location by a    * RemoteParam object.    *</ul>    *    * @param context The context identifying the location.    * @return A list of parameters for the method customized for the location.    */
DECL|method|getParams (RemoteLocationContext context)
specifier|public
name|Object
index|[]
name|getParams
parameter_list|(
name|RemoteLocationContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|params
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|Object
index|[]
block|{}
return|;
block|}
name|Object
index|[]
name|objList
init|=
operator|new
name|Object
index|[
name|this
operator|.
name|params
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|this
operator|.
name|params
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|currentObj
init|=
name|this
operator|.
name|params
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|currentObj
operator|instanceof
name|RemoteParam
condition|)
block|{
name|RemoteParam
name|paramGetter
init|=
operator|(
name|RemoteParam
operator|)
name|currentObj
decl_stmt|;
comment|// Map the parameter using the context
if|if
condition|(
name|this
operator|.
name|types
index|[
name|i
index|]
operator|==
name|CacheDirectiveInfo
operator|.
name|class
condition|)
block|{
name|CacheDirectiveInfo
name|path
init|=
operator|(
name|CacheDirectiveInfo
operator|)
name|paramGetter
operator|.
name|getParameterForContext
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|objList
index|[
name|i
index|]
operator|=
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|(
name|path
argument_list|)
operator|.
name|setPath
argument_list|(
operator|new
name|Path
argument_list|(
name|context
operator|.
name|getDest
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|objList
index|[
name|i
index|]
operator|=
name|paramGetter
operator|.
name|getParameterForContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|objList
index|[
name|i
index|]
operator|=
name|currentObj
expr_stmt|;
block|}
block|}
return|return
name|objList
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|this
operator|.
name|protocol
operator|.
name|getSimpleName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"#"
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|methodName
argument_list|)
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
operator|.
name|append
argument_list|(
name|Arrays
operator|.
name|deepToString
argument_list|(
name|this
operator|.
name|params
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

