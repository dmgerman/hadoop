begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.store.records
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|driver
operator|.
name|StateStoreSerializer
import|;
end_import

begin_comment
comment|/**  * Data record indicating a specific name service ID has been disabled and  * is no longer valid. Allows quick disabling of name services.  */
end_comment

begin_class
DECL|class|DisabledNameservice
specifier|public
specifier|abstract
class|class
name|DisabledNameservice
extends|extends
name|BaseRecord
block|{
DECL|method|DisabledNameservice ()
specifier|public
name|DisabledNameservice
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
DECL|method|newInstance ()
specifier|public
specifier|static
name|DisabledNameservice
name|newInstance
parameter_list|()
throws|throws
name|IOException
block|{
name|DisabledNameservice
name|record
init|=
name|StateStoreSerializer
operator|.
name|newRecord
argument_list|(
name|DisabledNameservice
operator|.
name|class
argument_list|)
decl_stmt|;
name|record
operator|.
name|init
argument_list|()
expr_stmt|;
return|return
name|record
return|;
block|}
DECL|method|newInstance (String nsId)
specifier|public
specifier|static
name|DisabledNameservice
name|newInstance
parameter_list|(
name|String
name|nsId
parameter_list|)
throws|throws
name|IOException
block|{
name|DisabledNameservice
name|record
init|=
name|newInstance
argument_list|()
decl_stmt|;
name|record
operator|.
name|setNameserviceId
argument_list|(
name|nsId
argument_list|)
expr_stmt|;
return|return
name|record
return|;
block|}
comment|/**    * Get the identifier of the name service to disable.    *    * @return Identifier of the name service to disable.    */
DECL|method|getNameserviceId ()
specifier|public
specifier|abstract
name|String
name|getNameserviceId
parameter_list|()
function_decl|;
comment|/**    * Set the identifier of the name service to disable.    *    * @param nameServiceId Identifier of the name service to disable.    */
DECL|method|setNameserviceId (String nameServiceId)
specifier|public
specifier|abstract
name|void
name|setNameserviceId
parameter_list|(
name|String
name|nameServiceId
parameter_list|)
function_decl|;
annotation|@
name|Override
DECL|method|getPrimaryKeys ()
specifier|public
name|SortedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getPrimaryKeys
parameter_list|()
block|{
name|SortedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|keyMap
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
name|keyMap
operator|.
name|put
argument_list|(
literal|"nameServiceId"
argument_list|,
name|this
operator|.
name|getNameserviceId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|keyMap
return|;
block|}
annotation|@
name|Override
DECL|method|hasOtherFields ()
specifier|public
name|boolean
name|hasOtherFields
parameter_list|()
block|{
comment|// We don't have fields other than the primary keys
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getExpirationMs ()
specifier|public
name|long
name|getExpirationMs
parameter_list|()
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
end_class

end_unit

