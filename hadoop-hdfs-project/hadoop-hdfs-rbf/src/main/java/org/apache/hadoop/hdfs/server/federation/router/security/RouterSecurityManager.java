begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.router.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
operator|.
name|security
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|DelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
operator|.
name|FederationUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
operator|.
name|RouterRpcServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
operator|.
name|Router
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
operator|.
name|AuthenticationMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|SecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|AbstractDelegationTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_comment
comment|/**  * Manager to hold underlying delegation token secret manager implementations.  */
end_comment

begin_class
DECL|class|RouterSecurityManager
specifier|public
class|class
name|RouterSecurityManager
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RouterSecurityManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|AbstractDelegationTokenSecretManager
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
DECL|field|dtSecretManager
name|dtSecretManager
init|=
literal|null
decl_stmt|;
DECL|method|RouterSecurityManager (Configuration conf)
specifier|public
name|RouterSecurityManager
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|AuthenticationMethod
name|authMethodConfigured
init|=
name|SecurityUtil
operator|.
name|getAuthenticationMethod
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|AuthenticationMethod
name|authMethodToInit
init|=
name|AuthenticationMethod
operator|.
name|KERBEROS
decl_stmt|;
if|if
condition|(
name|authMethodConfigured
operator|.
name|equals
argument_list|(
name|authMethodToInit
argument_list|)
condition|)
block|{
name|this
operator|.
name|dtSecretManager
operator|=
name|FederationUtil
operator|.
name|newSecretManager
argument_list|(
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|dtSecretManager
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to create SecretManager"
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|RouterSecurityManager (AbstractDelegationTokenSecretManager <DelegationTokenIdentifier> dtSecretManager)
specifier|public
name|RouterSecurityManager
parameter_list|(
name|AbstractDelegationTokenSecretManager
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|dtSecretManager
parameter_list|)
block|{
name|this
operator|.
name|dtSecretManager
operator|=
name|dtSecretManager
expr_stmt|;
block|}
specifier|public
name|AbstractDelegationTokenSecretManager
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
DECL|method|getSecretManager ()
name|getSecretManager
parameter_list|()
block|{
return|return
name|this
operator|.
name|dtSecretManager
return|;
block|}
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping security manager"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|dtSecretManager
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|dtSecretManager
operator|.
name|stopThreads
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getRemoteUser ()
specifier|private
specifier|static
name|UserGroupInformation
name|getRemoteUser
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|RouterRpcServer
operator|.
name|getRemoteUser
argument_list|()
return|;
block|}
comment|/**    * Returns authentication method used to establish the connection.    * @return AuthenticationMethod used to establish connection.    * @throws IOException    */
specifier|private
name|UserGroupInformation
operator|.
name|AuthenticationMethod
DECL|method|getConnectionAuthenticationMethod ()
name|getConnectionAuthenticationMethod
parameter_list|()
throws|throws
name|IOException
block|{
name|UserGroupInformation
name|ugi
init|=
name|getRemoteUser
argument_list|()
decl_stmt|;
name|UserGroupInformation
operator|.
name|AuthenticationMethod
name|authMethod
init|=
name|ugi
operator|.
name|getAuthenticationMethod
argument_list|()
decl_stmt|;
if|if
condition|(
name|authMethod
operator|==
name|UserGroupInformation
operator|.
name|AuthenticationMethod
operator|.
name|PROXY
condition|)
block|{
name|authMethod
operator|=
name|ugi
operator|.
name|getRealUser
argument_list|()
operator|.
name|getAuthenticationMethod
argument_list|()
expr_stmt|;
block|}
return|return
name|authMethod
return|;
block|}
comment|/**    *    * @return true if delegation token operation is allowed    */
DECL|method|isAllowedDelegationTokenOp ()
specifier|private
name|boolean
name|isAllowedDelegationTokenOp
parameter_list|()
throws|throws
name|IOException
block|{
name|AuthenticationMethod
name|authMethod
init|=
name|getConnectionAuthenticationMethod
argument_list|()
decl_stmt|;
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
operator|&&
operator|(
name|authMethod
operator|!=
name|AuthenticationMethod
operator|.
name|KERBEROS
operator|)
operator|&&
operator|(
name|authMethod
operator|!=
name|AuthenticationMethod
operator|.
name|KERBEROS_SSL
operator|)
operator|&&
operator|(
name|authMethod
operator|!=
name|AuthenticationMethod
operator|.
name|CERTIFICATE
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * @param renewer Renewer information    * @return delegation token    * @throws IOException on error    */
DECL|method|getDelegationToken (Text renewer)
specifier|public
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|getDelegationToken
parameter_list|(
name|Text
name|renewer
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Generate delegation token with renewer "
operator|+
name|renewer
argument_list|)
expr_stmt|;
specifier|final
name|String
name|operationName
init|=
literal|"getDelegationToken"
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|String
name|tokenId
init|=
literal|""
decl_stmt|;
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|isAllowedDelegationTokenOp
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Delegation Token can be issued only "
operator|+
literal|"with kerberos or web authentication"
argument_list|)
throw|;
block|}
if|if
condition|(
name|dtSecretManager
operator|==
literal|null
operator|||
operator|!
name|dtSecretManager
operator|.
name|isRunning
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"trying to get DT with no secret manager running"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|UserGroupInformation
name|ugi
init|=
name|getRemoteUser
argument_list|()
decl_stmt|;
name|String
name|user
init|=
name|ugi
operator|.
name|getUserName
argument_list|()
decl_stmt|;
name|Text
name|owner
init|=
operator|new
name|Text
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Text
name|realUser
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ugi
operator|.
name|getRealUser
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|realUser
operator|=
operator|new
name|Text
argument_list|(
name|ugi
operator|.
name|getRealUser
argument_list|()
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|DelegationTokenIdentifier
name|dtId
init|=
operator|new
name|DelegationTokenIdentifier
argument_list|(
name|owner
argument_list|,
name|renewer
argument_list|,
name|realUser
argument_list|)
decl_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
argument_list|(
name|dtId
argument_list|,
name|dtSecretManager
argument_list|)
expr_stmt|;
name|tokenId
operator|=
name|dtId
operator|.
name|toStringStable
argument_list|()
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|logAuditEvent
argument_list|(
name|success
argument_list|,
name|operationName
argument_list|,
name|tokenId
argument_list|)
expr_stmt|;
block|}
return|return
name|token
return|;
block|}
comment|/**    * @param token token to renew    * @return new expiryTime of the token    * @throws SecretManager.InvalidToken if {@code token} is invalid    * @throws IOException on errors    */
DECL|method|renewDelegationToken (Token<DelegationTokenIdentifier> token)
specifier|public
name|long
name|renewDelegationToken
parameter_list|(
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token
parameter_list|)
throws|throws
name|SecretManager
operator|.
name|InvalidToken
throws|,
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Renew delegation token"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|operationName
init|=
literal|"renewDelegationToken"
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|String
name|tokenId
init|=
literal|""
decl_stmt|;
name|long
name|expiryTime
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|isAllowedDelegationTokenOp
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Delegation Token can be renewed only "
operator|+
literal|"with kerberos or web authentication"
argument_list|)
throw|;
block|}
name|String
name|renewer
init|=
name|getRemoteUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
decl_stmt|;
name|expiryTime
operator|=
name|dtSecretManager
operator|.
name|renewToken
argument_list|(
name|token
argument_list|,
name|renewer
argument_list|)
expr_stmt|;
specifier|final
name|DelegationTokenIdentifier
name|id
init|=
name|DFSUtil
operator|.
name|decodeDelegationToken
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|tokenId
operator|=
name|id
operator|.
name|toStringStable
argument_list|()
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|ace
parameter_list|)
block|{
specifier|final
name|DelegationTokenIdentifier
name|id
init|=
name|DFSUtil
operator|.
name|decodeDelegationToken
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|tokenId
operator|=
name|id
operator|.
name|toStringStable
argument_list|()
expr_stmt|;
throw|throw
name|ace
throw|;
block|}
finally|finally
block|{
name|logAuditEvent
argument_list|(
name|success
argument_list|,
name|operationName
argument_list|,
name|tokenId
argument_list|)
expr_stmt|;
block|}
return|return
name|expiryTime
return|;
block|}
comment|/**    * @param token token to cancel    * @throws IOException on error    */
DECL|method|cancelDelegationToken (Token<DelegationTokenIdentifier> token)
specifier|public
name|void
name|cancelDelegationToken
parameter_list|(
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cancel delegation token"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|operationName
init|=
literal|"cancelDelegationToken"
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|String
name|tokenId
init|=
literal|""
decl_stmt|;
try|try
block|{
name|String
name|canceller
init|=
name|getRemoteUser
argument_list|()
operator|.
name|getUserName
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Cancel request by "
operator|+
name|canceller
argument_list|)
expr_stmt|;
name|DelegationTokenIdentifier
name|id
init|=
name|dtSecretManager
operator|.
name|cancelToken
argument_list|(
name|token
argument_list|,
name|canceller
argument_list|)
decl_stmt|;
name|tokenId
operator|=
name|id
operator|.
name|toStringStable
argument_list|()
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|ace
parameter_list|)
block|{
specifier|final
name|DelegationTokenIdentifier
name|id
init|=
name|DFSUtil
operator|.
name|decodeDelegationToken
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|tokenId
operator|=
name|id
operator|.
name|toStringStable
argument_list|()
expr_stmt|;
throw|throw
name|ace
throw|;
block|}
finally|finally
block|{
name|logAuditEvent
argument_list|(
name|success
argument_list|,
name|operationName
argument_list|,
name|tokenId
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * A utility method for creating credentials.    * Used by web hdfs to return url encoded token.    */
DECL|method|createCredentials ( final Router router, final UserGroupInformation ugi, final String renewer)
specifier|public
specifier|static
name|Credentials
name|createCredentials
parameter_list|(
specifier|final
name|Router
name|router
parameter_list|,
specifier|final
name|UserGroupInformation
name|ugi
parameter_list|,
specifier|final
name|String
name|renewer
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token
init|=
name|router
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getDelegationToken
argument_list|(
operator|new
name|Text
argument_list|(
name|renewer
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|token
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|InetSocketAddress
name|addr
init|=
name|router
operator|.
name|getRpcServerAddress
argument_list|()
decl_stmt|;
name|SecurityUtil
operator|.
name|setTokenService
argument_list|(
name|token
argument_list|,
name|addr
argument_list|)
expr_stmt|;
specifier|final
name|Credentials
name|c
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|c
operator|.
name|addToken
argument_list|(
operator|new
name|Text
argument_list|(
name|ugi
operator|.
name|getShortUserName
argument_list|()
argument_list|)
argument_list|,
name|token
argument_list|)
expr_stmt|;
return|return
name|c
return|;
block|}
comment|/**    * Delegation token verification.    * Used by web hdfs to verify url encoded token.    */
DECL|method|verifyToken (DelegationTokenIdentifier identifier, byte[] password)
specifier|public
name|void
name|verifyToken
parameter_list|(
name|DelegationTokenIdentifier
name|identifier
parameter_list|,
name|byte
index|[]
name|password
parameter_list|)
throws|throws
name|SecretManager
operator|.
name|InvalidToken
block|{
name|this
operator|.
name|dtSecretManager
operator|.
name|verifyToken
argument_list|(
name|identifier
argument_list|,
name|password
argument_list|)
expr_stmt|;
block|}
comment|/**    * Log status of delegation token related operation.    * Extend in future to use audit logger instead of local logging.    */
DECL|method|logAuditEvent (boolean succeeded, String cmd, String tokenId)
name|void
name|logAuditEvent
parameter_list|(
name|boolean
name|succeeded
parameter_list|,
name|String
name|cmd
parameter_list|,
name|String
name|tokenId
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Operation:"
operator|+
name|cmd
operator|+
literal|" Status:"
operator|+
name|succeeded
operator|+
literal|" TokenId:"
operator|+
name|tokenId
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

