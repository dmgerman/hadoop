begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.resolver
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|order
operator|.
name|DestinationOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A map of the properties and target destinations (name space + path) for  * a path in the global/federated name space.  * This data is generated from the @see MountTable records.  */
end_comment

begin_class
DECL|class|PathLocation
specifier|public
class|class
name|PathLocation
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PathLocation
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** Source path in global namespace. */
DECL|field|sourcePath
specifier|private
specifier|final
name|String
name|sourcePath
decl_stmt|;
comment|/** Remote paths in the target name spaces. */
DECL|field|destinations
specifier|private
specifier|final
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|destinations
decl_stmt|;
comment|/** Order for the destinations. */
DECL|field|destOrder
specifier|private
specifier|final
name|DestinationOrder
name|destOrder
decl_stmt|;
comment|/**    * Create a new PathLocation.    *    * @param source Source path in the global name space.    * @param dest Destinations of the mount table entry.    * @param order Order of the locations.    */
DECL|method|PathLocation ( String source, List<RemoteLocation> dest, DestinationOrder order)
specifier|public
name|PathLocation
parameter_list|(
name|String
name|source
parameter_list|,
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|dest
parameter_list|,
name|DestinationOrder
name|order
parameter_list|)
block|{
name|this
operator|.
name|sourcePath
operator|=
name|source
expr_stmt|;
name|this
operator|.
name|destinations
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|dest
argument_list|)
expr_stmt|;
name|this
operator|.
name|destOrder
operator|=
name|order
expr_stmt|;
block|}
comment|/**    * Create a new PathLocation with default HASH order.    *    * @param source Source path in the global name space.    * @param dest Destinations of the mount table entry.    */
DECL|method|PathLocation (String source, List<RemoteLocation> dest)
specifier|public
name|PathLocation
parameter_list|(
name|String
name|source
parameter_list|,
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|dest
parameter_list|)
block|{
name|this
argument_list|(
name|source
argument_list|,
name|dest
argument_list|,
name|DestinationOrder
operator|.
name|HASH
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a path location from another path.    *    * @param other Other path location to copy from.    */
DECL|method|PathLocation (final PathLocation other)
specifier|public
name|PathLocation
parameter_list|(
specifier|final
name|PathLocation
name|other
parameter_list|)
block|{
name|this
operator|.
name|sourcePath
operator|=
name|other
operator|.
name|sourcePath
expr_stmt|;
name|this
operator|.
name|destinations
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|other
operator|.
name|destinations
argument_list|)
expr_stmt|;
name|this
operator|.
name|destOrder
operator|=
name|other
operator|.
name|destOrder
expr_stmt|;
block|}
comment|/**    * Create a path location from another path with the destinations sorted.    *    * @param other Other path location to copy from.    * @param firstNsId Identifier of the namespace to place first.    */
DECL|method|PathLocation (PathLocation other, String firstNsId)
specifier|public
name|PathLocation
parameter_list|(
name|PathLocation
name|other
parameter_list|,
name|String
name|firstNsId
parameter_list|)
block|{
name|this
operator|.
name|sourcePath
operator|=
name|other
operator|.
name|sourcePath
expr_stmt|;
name|this
operator|.
name|destOrder
operator|=
name|other
operator|.
name|destOrder
expr_stmt|;
name|this
operator|.
name|destinations
operator|=
name|orderedNamespaces
argument_list|(
name|other
operator|.
name|destinations
argument_list|,
name|firstNsId
argument_list|)
expr_stmt|;
block|}
comment|/**    * Prioritize a location/destination by its name space/nameserviceId.    * This destination might be used by other threads, so the source is not    * modifiable.    *    * @param original List of destinations to order.    * @param nsId The name space/nameserviceID to prioritize.    * @return Prioritized list of detinations that cannot be modified.    */
DECL|method|orderedNamespaces ( final List<RemoteLocation> original, final String nsId)
specifier|private
specifier|static
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|orderedNamespaces
parameter_list|(
specifier|final
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|original
parameter_list|,
specifier|final
name|String
name|nsId
parameter_list|)
block|{
if|if
condition|(
name|original
operator|.
name|size
argument_list|()
operator|<=
literal|1
condition|)
block|{
return|return
name|original
return|;
block|}
name|LinkedList
argument_list|<
name|RemoteLocation
argument_list|>
name|newDestinations
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|RemoteLocation
name|dest
range|:
name|original
control|)
block|{
if|if
condition|(
name|dest
operator|.
name|getNameserviceId
argument_list|()
operator|.
name|equals
argument_list|(
name|nsId
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
name|newDestinations
operator|.
name|addFirst
argument_list|(
name|dest
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newDestinations
operator|.
name|add
argument_list|(
name|dest
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cannot find location with namespace {} in {}"
argument_list|,
name|nsId
argument_list|,
name|original
argument_list|)
expr_stmt|;
block|}
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|newDestinations
argument_list|)
return|;
block|}
comment|/**    * Get the source path in the global namespace for this path location.    *    * @return The path in the global namespace.    */
DECL|method|getSourcePath ()
specifier|public
name|String
name|getSourcePath
parameter_list|()
block|{
return|return
name|this
operator|.
name|sourcePath
return|;
block|}
comment|/**    * Get the subclusters defined for the destinations.    *    * @return Set containing the subclusters.    */
DECL|method|getNamespaces ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getNamespaces
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|namespaces
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|locations
init|=
name|this
operator|.
name|getDestinations
argument_list|()
decl_stmt|;
for|for
control|(
name|RemoteLocation
name|location
range|:
name|locations
control|)
block|{
name|String
name|nsId
init|=
name|location
operator|.
name|getNameserviceId
argument_list|()
decl_stmt|;
name|namespaces
operator|.
name|add
argument_list|(
name|nsId
argument_list|)
expr_stmt|;
block|}
return|return
name|namespaces
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|RemoteLocation
name|destination
range|:
name|this
operator|.
name|destinations
control|)
block|{
name|String
name|nsId
init|=
name|destination
operator|.
name|getNameserviceId
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|destination
operator|.
name|getDest
argument_list|()
decl_stmt|;
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|nsId
operator|+
literal|"->"
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|destinations
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" ["
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|destOrder
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Check if this location supports multiple clusters/paths.    *    * @return If it has multiple destinations.    */
DECL|method|hasMultipleDestinations ()
specifier|public
name|boolean
name|hasMultipleDestinations
parameter_list|()
block|{
return|return
name|this
operator|.
name|destinations
operator|.
name|size
argument_list|()
operator|>
literal|1
return|;
block|}
comment|/**    * Get the list of locations found in the mount table.    * The first result is the highest priority path.    *    * @return List of remote locations.    */
DECL|method|getDestinations ()
specifier|public
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|getDestinations
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|this
operator|.
name|destinations
argument_list|)
return|;
block|}
comment|/**    * Get the order for the destinations.    *    * @return Order for the destinations.    */
DECL|method|getDestinationOrder ()
specifier|public
name|DestinationOrder
name|getDestinationOrder
parameter_list|()
block|{
return|return
name|this
operator|.
name|destOrder
return|;
block|}
comment|/**    * Get the default or highest priority location.    *    * @return The default location.    */
DECL|method|getDefaultLocation ()
specifier|public
name|RemoteLocation
name|getDefaultLocation
parameter_list|()
block|{
if|if
condition|(
name|destinations
operator|.
name|isEmpty
argument_list|()
operator|||
name|destinations
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDest
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Unsupported path "
operator|+
name|sourcePath
operator|+
literal|" please check mount table"
argument_list|)
throw|;
block|}
return|return
name|destinations
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
block|}
end_class

end_unit

