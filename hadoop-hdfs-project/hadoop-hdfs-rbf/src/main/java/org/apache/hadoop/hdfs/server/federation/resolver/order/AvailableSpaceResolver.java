begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.resolver.order
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|order
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|PathLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|order
operator|.
name|AvailableSpaceResolver
operator|.
name|SubclusterAvailableSpace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
operator|.
name|RBFConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
operator|.
name|Router
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|MembershipStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|GetNamenodeRegistrationsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|GetNamenodeRegistrationsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|MembershipState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * Order the destinations based on available space. This resolver uses a  * higher probability (instead of "always") to choose the cluster with higher  * available space.  */
end_comment

begin_class
DECL|class|AvailableSpaceResolver
specifier|public
class|class
name|AvailableSpaceResolver
extends|extends
name|RouterResolver
argument_list|<
name|String
argument_list|,
name|SubclusterAvailableSpace
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AvailableSpaceResolver
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** Increases chance of files on subcluster with more available space. */
DECL|field|BALANCER_PREFERENCE_KEY
specifier|public
specifier|static
specifier|final
name|String
name|BALANCER_PREFERENCE_KEY
init|=
name|RBFConfigKeys
operator|.
name|FEDERATION_ROUTER_PREFIX
operator|+
literal|"available-space-resolver.balanced-space-preference-fraction"
decl_stmt|;
DECL|field|BALANCER_PREFERENCE_DEFAULT
specifier|public
specifier|static
specifier|final
name|float
name|BALANCER_PREFERENCE_DEFAULT
init|=
literal|0.6f
decl_stmt|;
comment|/** Random instance used in the subcluster comparison. */
DECL|field|RAND
specifier|private
specifier|static
specifier|final
name|Random
name|RAND
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
comment|/** Customized comparator for SubclusterAvailableSpace. */
DECL|field|comparator
specifier|private
name|SubclusterSpaceComparator
name|comparator
decl_stmt|;
DECL|method|AvailableSpaceResolver (final Configuration conf, final Router routerService)
specifier|public
name|AvailableSpaceResolver
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|Router
name|routerService
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|routerService
argument_list|)
expr_stmt|;
name|float
name|balancedPreference
init|=
name|conf
operator|.
name|getFloat
argument_list|(
name|BALANCER_PREFERENCE_KEY
argument_list|,
name|BALANCER_PREFERENCE_DEFAULT
argument_list|)
decl_stmt|;
if|if
condition|(
name|balancedPreference
operator|<
literal|0.5
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"The balancer preference value is less than 0.5. That means more"
operator|+
literal|" files will be allocated in cluster with lower available space."
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|comparator
operator|=
operator|new
name|SubclusterSpaceComparator
argument_list|(
name|balancedPreference
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the mapping from NamespaceId to subcluster space info. It gets this    * mapping from the subclusters through expensive calls (e.g., RPC) and uses    * caching to avoid too many calls. The cache might be updated asynchronously    * to reduce latency.    *    * @return NamespaceId to {@link SubclusterAvailableSpace}.    */
annotation|@
name|Override
DECL|method|getSubclusterInfo ( MembershipStore membershipStore)
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|SubclusterAvailableSpace
argument_list|>
name|getSubclusterInfo
parameter_list|(
name|MembershipStore
name|membershipStore
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|SubclusterAvailableSpace
argument_list|>
name|mapping
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
comment|// Get the Namenode's available space info from the subclusters
comment|// from the Membership store.
name|GetNamenodeRegistrationsRequest
name|request
init|=
name|GetNamenodeRegistrationsRequest
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|GetNamenodeRegistrationsResponse
name|response
init|=
name|membershipStore
operator|.
name|getNamenodeRegistrations
argument_list|(
name|request
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|MembershipState
argument_list|>
name|nns
init|=
name|response
operator|.
name|getNamenodeMemberships
argument_list|()
decl_stmt|;
for|for
control|(
name|MembershipState
name|nn
range|:
name|nns
control|)
block|{
try|try
block|{
name|String
name|nsId
init|=
name|nn
operator|.
name|getNameserviceId
argument_list|()
decl_stmt|;
name|long
name|availableSpace
init|=
name|nn
operator|.
name|getStats
argument_list|()
operator|.
name|getAvailableSpace
argument_list|()
decl_stmt|;
name|mapping
operator|.
name|put
argument_list|(
name|nsId
argument_list|,
operator|new
name|SubclusterAvailableSpace
argument_list|(
name|nsId
argument_list|,
name|availableSpace
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot get stats info for {}: {}."
argument_list|,
name|nn
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot get Namenodes from the State Store."
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
return|return
name|mapping
return|;
block|}
annotation|@
name|Override
DECL|method|chooseFirstNamespace (String path, PathLocation loc)
specifier|protected
name|String
name|chooseFirstNamespace
parameter_list|(
name|String
name|path
parameter_list|,
name|PathLocation
name|loc
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|SubclusterAvailableSpace
argument_list|>
name|subclusterInfo
init|=
name|getSubclusterMapping
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|SubclusterAvailableSpace
argument_list|>
name|subclusterList
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|(
name|subclusterInfo
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|subclusterList
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
return|return
name|subclusterList
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|?
name|subclusterList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getNameserviceId
argument_list|()
else|:
literal|null
return|;
block|}
comment|/**    * Inner class that stores cluster available space info.    */
DECL|class|SubclusterAvailableSpace
specifier|static
class|class
name|SubclusterAvailableSpace
block|{
DECL|field|nsId
specifier|private
specifier|final
name|String
name|nsId
decl_stmt|;
DECL|field|availableSpace
specifier|private
specifier|final
name|long
name|availableSpace
decl_stmt|;
DECL|method|SubclusterAvailableSpace (String nsId, long availableSpace)
name|SubclusterAvailableSpace
parameter_list|(
name|String
name|nsId
parameter_list|,
name|long
name|availableSpace
parameter_list|)
block|{
name|this
operator|.
name|nsId
operator|=
name|nsId
expr_stmt|;
name|this
operator|.
name|availableSpace
operator|=
name|availableSpace
expr_stmt|;
block|}
DECL|method|getNameserviceId ()
specifier|public
name|String
name|getNameserviceId
parameter_list|()
block|{
return|return
name|this
operator|.
name|nsId
return|;
block|}
DECL|method|getAvailableSpace ()
specifier|public
name|long
name|getAvailableSpace
parameter_list|()
block|{
return|return
name|this
operator|.
name|availableSpace
return|;
block|}
block|}
comment|/**    * Customized comparator for SubclusterAvailableSpace. If more available    * space the one cluster has, the higher priority it will have. But this    * is not absolute, there is a balanced preference to make this use a higher    * probability (instead of "always") to compare by this way.    */
DECL|class|SubclusterSpaceComparator
specifier|static
specifier|final
class|class
name|SubclusterSpaceComparator
implements|implements
name|Comparator
argument_list|<
name|SubclusterAvailableSpace
argument_list|>
implements|,
name|Serializable
block|{
DECL|field|balancedPreference
specifier|private
name|int
name|balancedPreference
decl_stmt|;
DECL|method|SubclusterSpaceComparator (float balancedPreference)
name|SubclusterSpaceComparator
parameter_list|(
name|float
name|balancedPreference
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|balancedPreference
operator|<=
literal|1
operator|&&
name|balancedPreference
operator|>=
literal|0
argument_list|,
literal|"The balancer preference value should be in the range 0.0 - 1.0"
argument_list|)
expr_stmt|;
name|this
operator|.
name|balancedPreference
operator|=
call|(
name|int
call|)
argument_list|(
literal|100
operator|*
name|balancedPreference
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compare (SubclusterAvailableSpace cluster1, SubclusterAvailableSpace cluster2)
specifier|public
name|int
name|compare
parameter_list|(
name|SubclusterAvailableSpace
name|cluster1
parameter_list|,
name|SubclusterAvailableSpace
name|cluster2
parameter_list|)
block|{
name|int
name|ret
init|=
name|cluster1
operator|.
name|getAvailableSpace
argument_list|()
operator|>
name|cluster2
operator|.
name|getAvailableSpace
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|1
decl_stmt|;
if|if
condition|(
name|ret
operator|<
literal|0
condition|)
block|{
return|return
operator|(
name|RAND
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|<
name|balancedPreference
operator|)
condition|?
operator|-
literal|1
else|:
literal|1
return|;
block|}
else|else
block|{
return|return
operator|(
name|RAND
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|<
name|balancedPreference
operator|)
condition|?
literal|1
else|:
operator|-
literal|1
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

