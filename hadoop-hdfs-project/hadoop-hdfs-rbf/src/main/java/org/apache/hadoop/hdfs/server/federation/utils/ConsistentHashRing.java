begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.utils
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|MD5Hash
import|;
end_import

begin_comment
comment|/**  * Consistent hash ring to distribute items across nodes (locations). If we add  * or remove nodes, it minimizes the item migration.  */
end_comment

begin_class
DECL|class|ConsistentHashRing
specifier|public
class|class
name|ConsistentHashRing
block|{
DECL|field|SEPERATOR
specifier|private
specifier|static
specifier|final
name|String
name|SEPERATOR
init|=
literal|"/"
decl_stmt|;
DECL|field|VIRTUAL_NODE_FORMAT
specifier|private
specifier|static
specifier|final
name|String
name|VIRTUAL_NODE_FORMAT
init|=
literal|"%s"
operator|+
name|SEPERATOR
operator|+
literal|"%d"
decl_stmt|;
comment|/** Hash ring. */
DECL|field|ring
specifier|private
name|SortedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ring
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|/** Entry -> num virtual nodes on ring. */
DECL|field|entryToVirtualNodes
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|entryToVirtualNodes
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
comment|/** Synchronization. */
DECL|field|readWriteLock
specifier|private
specifier|final
name|ReadWriteLock
name|readWriteLock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
DECL|field|readLock
specifier|private
specifier|final
name|Lock
name|readLock
init|=
name|readWriteLock
operator|.
name|readLock
argument_list|()
decl_stmt|;
DECL|field|writeLock
specifier|private
specifier|final
name|Lock
name|writeLock
init|=
name|readWriteLock
operator|.
name|writeLock
argument_list|()
decl_stmt|;
DECL|method|ConsistentHashRing (Set<String> locations)
specifier|public
name|ConsistentHashRing
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|locations
parameter_list|)
block|{
for|for
control|(
name|String
name|location
range|:
name|locations
control|)
block|{
name|addLocation
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Add entry to consistent hash ring.    *    * @param location Node to add to the ring.    */
DECL|method|addLocation (String location)
specifier|public
name|void
name|addLocation
parameter_list|(
name|String
name|location
parameter_list|)
block|{
name|addLocation
argument_list|(
name|location
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add entry to consistent hash ring.    *    * @param location Node to add to the ring.    * @param numVirtualNodes Number of virtual nodes to add.    */
DECL|method|addLocation (String location, int numVirtualNodes)
specifier|public
name|void
name|addLocation
parameter_list|(
name|String
name|location
parameter_list|,
name|int
name|numVirtualNodes
parameter_list|)
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|entryToVirtualNodes
operator|.
name|put
argument_list|(
name|location
argument_list|,
name|numVirtualNodes
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numVirtualNodes
condition|;
name|i
operator|++
control|)
block|{
name|String
name|key
init|=
name|String
operator|.
name|format
argument_list|(
name|VIRTUAL_NODE_FORMAT
argument_list|,
name|location
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|String
name|hash
init|=
name|getHash
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|ring
operator|.
name|put
argument_list|(
name|hash
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Remove specified entry from hash ring.    *    * @param location Node to remove from the ring.    */
DECL|method|removeLocation (String location)
specifier|public
name|void
name|removeLocation
parameter_list|(
name|String
name|location
parameter_list|)
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|Integer
name|numVirtualNodes
init|=
name|entryToVirtualNodes
operator|.
name|remove
argument_list|(
name|location
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numVirtualNodes
condition|;
name|i
operator|++
control|)
block|{
name|String
name|key
init|=
name|String
operator|.
name|format
argument_list|(
name|VIRTUAL_NODE_FORMAT
argument_list|,
name|location
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|String
name|hash
init|=
name|getHash
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|ring
operator|.
name|remove
argument_list|(
name|hash
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Return location (owner) of specified item. Owner is the next    * entry on the hash ring (with a hash value> hash value of item).    * @param item Item to look for.    * @return The location of the item.    */
DECL|method|getLocation (String item)
specifier|public
name|String
name|getLocation
parameter_list|(
name|String
name|item
parameter_list|)
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|ring
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|hash
init|=
name|getHash
argument_list|(
name|item
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ring
operator|.
name|containsKey
argument_list|(
name|hash
argument_list|)
condition|)
block|{
name|SortedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tailMap
init|=
name|ring
operator|.
name|tailMap
argument_list|(
name|hash
argument_list|)
decl_stmt|;
name|hash
operator|=
name|tailMap
operator|.
name|isEmpty
argument_list|()
condition|?
name|ring
operator|.
name|firstKey
argument_list|()
else|:
name|tailMap
operator|.
name|firstKey
argument_list|()
expr_stmt|;
block|}
name|String
name|virtualNode
init|=
name|ring
operator|.
name|get
argument_list|(
name|hash
argument_list|)
decl_stmt|;
name|int
name|index
init|=
name|virtualNode
operator|.
name|lastIndexOf
argument_list|(
name|SEPERATOR
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
block|{
return|return
name|virtualNode
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|virtualNode
return|;
block|}
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getHash (String key)
specifier|public
name|String
name|getHash
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|MD5Hash
operator|.
name|digest
argument_list|(
name|key
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Get the locations in the ring.    * @return Set of locations in the ring.    */
DECL|method|getLocations ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getLocations
parameter_list|()
block|{
return|return
name|entryToVirtualNodes
operator|.
name|keySet
argument_list|()
return|;
block|}
block|}
end_class

end_unit

