begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.router
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshotDiffReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshotDiffReportListing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshottableDirectoryStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|ActiveNamenodeResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|FederationNamespaceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|RemoteLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
operator|.
name|OperationCategory
import|;
end_import

begin_comment
comment|/**  * Module that implements all the RPC calls related to snapshots in  * {@link ClientProtocol} in the {@link RouterRpcServer}.  */
end_comment

begin_class
DECL|class|RouterSnapshot
specifier|public
class|class
name|RouterSnapshot
block|{
comment|/** RPC server to receive client calls. */
DECL|field|rpcServer
specifier|private
specifier|final
name|RouterRpcServer
name|rpcServer
decl_stmt|;
comment|/** RPC clients to connect to the Namenodes. */
DECL|field|rpcClient
specifier|private
specifier|final
name|RouterRpcClient
name|rpcClient
decl_stmt|;
comment|/** Find generic locations. */
DECL|field|namenodeResolver
specifier|private
specifier|final
name|ActiveNamenodeResolver
name|namenodeResolver
decl_stmt|;
DECL|method|RouterSnapshot (RouterRpcServer server)
specifier|public
name|RouterSnapshot
parameter_list|(
name|RouterRpcServer
name|server
parameter_list|)
block|{
name|this
operator|.
name|rpcServer
operator|=
name|server
expr_stmt|;
name|this
operator|.
name|rpcClient
operator|=
name|this
operator|.
name|rpcServer
operator|.
name|getRPCClient
argument_list|()
expr_stmt|;
name|this
operator|.
name|namenodeResolver
operator|=
name|rpcServer
operator|.
name|getNamenodeResolver
argument_list|()
expr_stmt|;
block|}
DECL|method|allowSnapshot (String snapshotRoot)
specifier|public
name|void
name|allowSnapshot
parameter_list|(
name|String
name|snapshotRoot
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|locations
init|=
name|rpcServer
operator|.
name|getLocationsForPath
argument_list|(
name|snapshotRoot
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"allowSnapshot"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
block|}
operator|,
operator|new
name|RemoteParam
argument_list|()
block|)
function|;
if|if
condition|(
name|rpcServer
operator|.
name|isInvokeConcurrent
argument_list|(
name|snapshotRoot
argument_list|)
condition|)
block|{
name|rpcClient
operator|.
name|invokeConcurrent
argument_list|(
name|locations
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rpcClient
operator|.
name|invokeSequential
argument_list|(
name|locations
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_function
DECL|method|disallowSnapshot (String snapshotRoot)
specifier|public
name|void
name|disallowSnapshot
parameter_list|(
name|String
name|snapshotRoot
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|locations
init|=
name|rpcServer
operator|.
name|getLocationsForPath
argument_list|(
name|snapshotRoot
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"disallowSnapshot"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
block|}
operator|,
operator|new
name|RemoteParam
argument_list|()
block|)
function|;
end_function

begin_if
if|if
condition|(
name|rpcServer
operator|.
name|isInvokeConcurrent
argument_list|(
name|snapshotRoot
argument_list|)
condition|)
block|{
name|rpcClient
operator|.
name|invokeConcurrent
argument_list|(
name|locations
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rpcClient
operator|.
name|invokeSequential
argument_list|(
name|locations
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
end_if

begin_function
unit|}    public
DECL|method|createSnapshot (String snapshotRoot, String snapshotName)
name|String
name|createSnapshot
parameter_list|(
name|String
name|snapshotRoot
parameter_list|,
name|String
name|snapshotName
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|locations
init|=
name|rpcServer
operator|.
name|getLocationsForPath
argument_list|(
name|snapshotRoot
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"createSnapshot"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
operator|,
name|String
operator|.
name|class
block|}
operator|,
operator|new
name|RemoteParam
argument_list|()
operator|,
name|snapshotName
block|)
function|;
end_function

begin_decl_stmt
name|String
name|result
init|=
literal|null
decl_stmt|;
end_decl_stmt

begin_if
if|if
condition|(
name|rpcServer
operator|.
name|isInvokeConcurrent
argument_list|(
name|snapshotRoot
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|RemoteLocation
argument_list|,
name|String
argument_list|>
name|results
init|=
name|rpcClient
operator|.
name|invokeConcurrent
argument_list|(
name|locations
argument_list|,
name|method
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Entry
argument_list|<
name|RemoteLocation
argument_list|,
name|String
argument_list|>
name|firstelement
init|=
name|results
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|RemoteLocation
name|loc
init|=
name|firstelement
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|result
operator|=
name|firstelement
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|result
operator|=
name|result
operator|.
name|replaceFirst
argument_list|(
name|loc
operator|.
name|getDest
argument_list|()
argument_list|,
name|loc
operator|.
name|getSrc
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|rpcClient
operator|.
name|invokeSequential
argument_list|(
name|locations
argument_list|,
name|method
argument_list|,
name|String
operator|.
name|class
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|RemoteLocation
name|loc
init|=
name|locations
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|result
operator|=
name|result
operator|.
name|replaceFirst
argument_list|(
name|loc
operator|.
name|getDest
argument_list|()
argument_list|,
name|loc
operator|.
name|getSrc
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_if

begin_return
return|return
name|result
return|;
end_return

begin_function
unit|}    public
DECL|method|deleteSnapshot (String snapshotRoot, String snapshotName)
name|void
name|deleteSnapshot
parameter_list|(
name|String
name|snapshotRoot
parameter_list|,
name|String
name|snapshotName
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|locations
init|=
name|rpcServer
operator|.
name|getLocationsForPath
argument_list|(
name|snapshotRoot
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"deleteSnapshot"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
operator|,
name|String
operator|.
name|class
block|}
operator|,
operator|new
name|RemoteParam
argument_list|()
operator|,
name|snapshotName
block|)
function|;
end_function

begin_if
if|if
condition|(
name|rpcServer
operator|.
name|isInvokeConcurrent
argument_list|(
name|snapshotRoot
argument_list|)
condition|)
block|{
name|rpcClient
operator|.
name|invokeConcurrent
argument_list|(
name|locations
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rpcClient
operator|.
name|invokeSequential
argument_list|(
name|locations
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
end_if

begin_function
unit|}    public
DECL|method|renameSnapshot (String snapshotRoot, String oldSnapshotName, String newSnapshot)
name|void
name|renameSnapshot
parameter_list|(
name|String
name|snapshotRoot
parameter_list|,
name|String
name|oldSnapshotName
parameter_list|,
name|String
name|newSnapshot
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|locations
init|=
name|rpcServer
operator|.
name|getLocationsForPath
argument_list|(
name|snapshotRoot
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"renameSnapshot"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
operator|,
name|String
operator|.
name|class
operator|,
name|String
operator|.
name|class
block|}
operator|,
operator|new
name|RemoteParam
argument_list|()
operator|,
name|oldSnapshotName
operator|,
name|newSnapshot
block|)
function|;
end_function

begin_if
if|if
condition|(
name|rpcServer
operator|.
name|isInvokeConcurrent
argument_list|(
name|snapshotRoot
argument_list|)
condition|)
block|{
name|rpcClient
operator|.
name|invokeConcurrent
argument_list|(
name|locations
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rpcClient
operator|.
name|invokeSequential
argument_list|(
name|locations
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
end_if

begin_function
unit|}    public
DECL|method|getSnapshottableDirListing ()
name|SnapshottableDirectoryStatus
index|[]
name|getSnapshottableDirListing
parameter_list|()
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"getSnapshottableDirListing"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|FederationNamespaceInfo
argument_list|>
name|nss
init|=
name|namenodeResolver
operator|.
name|getNamespaces
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|FederationNamespaceInfo
argument_list|,
name|SnapshottableDirectoryStatus
index|[]
argument_list|>
name|ret
init|=
name|rpcClient
operator|.
name|invokeConcurrent
argument_list|(
name|nss
argument_list|,
name|method
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|SnapshottableDirectoryStatus
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
return|return
name|RouterRpcServer
operator|.
name|merge
argument_list|(
name|ret
argument_list|,
name|SnapshottableDirectoryStatus
operator|.
name|class
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|getSnapshotDiffReport (String snapshotRoot, String earlierSnapshotName, String laterSnapshotName)
specifier|public
name|SnapshotDiffReport
name|getSnapshotDiffReport
parameter_list|(
name|String
name|snapshotRoot
parameter_list|,
name|String
name|earlierSnapshotName
parameter_list|,
name|String
name|laterSnapshotName
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|locations
init|=
name|rpcServer
operator|.
name|getLocationsForPath
argument_list|(
name|snapshotRoot
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|RemoteMethod
name|remoteMethod
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"getSnapshotDiffReport"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
operator|,
name|String
operator|.
name|class
operator|,
name|String
operator|.
name|class
block|}
operator|,
operator|new
name|RemoteParam
argument_list|()
operator|,
name|earlierSnapshotName
operator|,
name|laterSnapshotName
block|)
function|;
end_function

begin_if
if|if
condition|(
name|rpcServer
operator|.
name|isInvokeConcurrent
argument_list|(
name|snapshotRoot
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|RemoteLocation
argument_list|,
name|SnapshotDiffReport
argument_list|>
name|ret
init|=
name|rpcClient
operator|.
name|invokeConcurrent
argument_list|(
name|locations
argument_list|,
name|remoteMethod
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|SnapshotDiffReport
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|ret
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|rpcClient
operator|.
name|invokeSequential
argument_list|(
name|locations
argument_list|,
name|remoteMethod
argument_list|,
name|SnapshotDiffReport
operator|.
name|class
argument_list|,
literal|null
argument_list|)
return|;
block|}
end_if

begin_function
unit|}    public
DECL|method|getSnapshotDiffReportListing ( String snapshotRoot, String earlierSnapshotName, String laterSnapshotName, byte[] startPath, int index)
name|SnapshotDiffReportListing
name|getSnapshotDiffReportListing
parameter_list|(
name|String
name|snapshotRoot
parameter_list|,
name|String
name|earlierSnapshotName
parameter_list|,
name|String
name|laterSnapshotName
parameter_list|,
name|byte
index|[]
name|startPath
parameter_list|,
name|int
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|locations
init|=
name|rpcServer
operator|.
name|getLocationsForPath
argument_list|(
name|snapshotRoot
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|params
init|=
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
operator|,
name|String
operator|.
name|class
operator|,
name|String
operator|.
name|class
operator|,
name|byte
index|[]
operator|.
name|class
operator|,
name|int
operator|.
name|class
block|}
empty_stmt|;
name|RemoteMethod
name|remoteMethod
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"getSnapshotDiffReportListing"
argument_list|,
name|params
argument_list|,
operator|new
name|RemoteParam
argument_list|()
argument_list|,
name|earlierSnapshotName
argument_list|,
name|laterSnapshotName
argument_list|,
name|startPath
argument_list|,
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|rpcServer
operator|.
name|isInvokeConcurrent
argument_list|(
name|snapshotRoot
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|RemoteLocation
argument_list|,
name|SnapshotDiffReportListing
argument_list|>
name|ret
init|=
name|rpcClient
operator|.
name|invokeConcurrent
argument_list|(
name|locations
argument_list|,
name|remoteMethod
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|SnapshotDiffReportListing
operator|.
name|class
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|SnapshotDiffReportListing
argument_list|>
name|listings
init|=
name|ret
operator|.
name|values
argument_list|()
decl_stmt|;
name|SnapshotDiffReportListing
name|listing0
init|=
name|listings
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
return|return
name|listing0
return|;
block|}
else|else
block|{
return|return
name|rpcClient
operator|.
name|invokeSequential
argument_list|(
name|locations
argument_list|,
name|remoteMethod
argument_list|,
name|SnapshotDiffReportListing
operator|.
name|class
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
end_function

unit|}
end_unit

