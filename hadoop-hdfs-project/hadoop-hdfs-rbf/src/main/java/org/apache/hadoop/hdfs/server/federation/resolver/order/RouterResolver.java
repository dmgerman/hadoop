begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.resolver.order
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|order
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
operator|.
name|monotonicNow
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|PathLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
operator|.
name|RBFConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
operator|.
name|Router
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
operator|.
name|RouterRpcServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|MembershipStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|StateStoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * The order resolver that depends upon the Router service.  *  * @param<K> The key type of subcluster mapping info queried from Router.  * @param<V> The value type of subcluster mapping info queried from Router.  */
end_comment

begin_class
DECL|class|RouterResolver
specifier|public
specifier|abstract
class|class
name|RouterResolver
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
implements|implements
name|OrderedResolver
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RouterResolver
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** Configuration key to set the minimum time to update subcluster info. */
DECL|field|MIN_UPDATE_PERIOD_KEY
specifier|public
specifier|static
specifier|final
name|String
name|MIN_UPDATE_PERIOD_KEY
init|=
name|RBFConfigKeys
operator|.
name|FEDERATION_ROUTER_PREFIX
operator|+
literal|"router-resolver.update-period"
decl_stmt|;
comment|/** 10 seconds by default. */
DECL|field|MIN_UPDATE_PERIOD_DEFAULT
specifier|private
specifier|static
specifier|final
name|long
name|MIN_UPDATE_PERIOD_DEFAULT
init|=
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|10
argument_list|)
decl_stmt|;
comment|/** Router service. */
DECL|field|router
specifier|private
specifier|final
name|Router
name|router
decl_stmt|;
comment|/** Minimum update time. */
DECL|field|minUpdateTime
specifier|private
specifier|final
name|long
name|minUpdateTime
decl_stmt|;
comment|/** K -> T template mapping. */
DECL|field|subclusterMapping
specifier|private
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|subclusterMapping
init|=
literal|null
decl_stmt|;
comment|/** Last time the subcluster mapping was updated. */
DECL|field|lastUpdated
specifier|private
name|long
name|lastUpdated
decl_stmt|;
DECL|method|RouterResolver (final Configuration conf, final Router routerService)
specifier|public
name|RouterResolver
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|Router
name|routerService
parameter_list|)
block|{
name|this
operator|.
name|minUpdateTime
operator|=
name|conf
operator|.
name|getTimeDuration
argument_list|(
name|MIN_UPDATE_PERIOD_KEY
argument_list|,
name|MIN_UPDATE_PERIOD_DEFAULT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|this
operator|.
name|router
operator|=
name|routerService
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getFirstNamespace (String path, PathLocation loc)
specifier|public
name|String
name|getFirstNamespace
parameter_list|(
name|String
name|path
parameter_list|,
name|PathLocation
name|loc
parameter_list|)
block|{
name|updateSubclusterMapping
argument_list|()
expr_stmt|;
return|return
name|chooseFirstNamespace
argument_list|(
name|path
argument_list|,
name|loc
argument_list|)
return|;
block|}
comment|/**    * The implementation for getting desired subcluster mapping info.    *    * @param membershipStore Membership store the resolver queried from.    * @return The map of desired type info.    */
DECL|method|getSubclusterInfo ( MembershipStore membershipStore)
specifier|protected
specifier|abstract
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|getSubclusterInfo
parameter_list|(
name|MembershipStore
name|membershipStore
parameter_list|)
function_decl|;
comment|/**    * Choose the first namespace from queried subcluster mapping info.    *    * @param path Path to check.    * @param loc Federated location with multiple destinations.    * @return First namespace out of the locations.    */
DECL|method|chooseFirstNamespace (String path, PathLocation loc)
specifier|protected
specifier|abstract
name|String
name|chooseFirstNamespace
parameter_list|(
name|String
name|path
parameter_list|,
name|PathLocation
name|loc
parameter_list|)
function_decl|;
comment|/**    * Update<NamespaceId, Subcluster Info> mapping info periodically.    */
DECL|method|updateSubclusterMapping ()
specifier|private
specifier|synchronized
name|void
name|updateSubclusterMapping
parameter_list|()
block|{
if|if
condition|(
name|subclusterMapping
operator|==
literal|null
operator|||
operator|(
name|monotonicNow
argument_list|()
operator|-
name|lastUpdated
operator|)
operator|>
name|minUpdateTime
condition|)
block|{
comment|// Fetch the mapping asynchronously
name|Thread
name|updater
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
specifier|final
name|MembershipStore
name|membershipStore
init|=
name|getMembershipStore
argument_list|()
decl_stmt|;
if|if
condition|(
name|membershipStore
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot access the Membership store."
argument_list|)
expr_stmt|;
return|return;
block|}
name|subclusterMapping
operator|=
name|getSubclusterInfo
argument_list|(
name|membershipStore
argument_list|)
expr_stmt|;
name|lastUpdated
operator|=
name|monotonicNow
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|updater
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Wait until initialized
if|if
condition|(
name|subclusterMapping
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Wait to get the mapping for the first time"
argument_list|)
expr_stmt|;
name|updater
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot wait for the updater to finish"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Get the Router RPC server.    *    * @return Router RPC server. Null if not possible.    */
DECL|method|getRpcServer ()
specifier|protected
name|RouterRpcServer
name|getRpcServer
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|router
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|router
operator|.
name|getRpcServer
argument_list|()
return|;
block|}
comment|/**    * Get the Membership store.    *    * @return Membership store.    */
DECL|method|getMembershipStore ()
specifier|protected
name|MembershipStore
name|getMembershipStore
parameter_list|()
block|{
name|StateStoreService
name|stateStore
init|=
name|router
operator|.
name|getStateStore
argument_list|()
decl_stmt|;
if|if
condition|(
name|stateStore
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|stateStore
operator|.
name|getRegisteredRecordStore
argument_list|(
name|MembershipStore
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**    * Get subcluster mapping info.    *    * @return The map of subcluster info.    */
DECL|method|getSubclusterMapping ()
specifier|protected
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|getSubclusterMapping
parameter_list|()
block|{
return|return
name|this
operator|.
name|subclusterMapping
return|;
block|}
block|}
end_class

end_unit

