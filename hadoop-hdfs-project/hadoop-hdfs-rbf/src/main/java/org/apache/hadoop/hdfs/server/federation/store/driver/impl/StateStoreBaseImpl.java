begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.store.driver.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|driver
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|StateStoreUtils
operator|.
name|filterMultiple
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|StateStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|driver
operator|.
name|StateStoreDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|BaseRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|QueryResult
import|;
end_import

begin_comment
comment|/**  * Base implementation of a State Store driver. It contains default  * implementations for the optional functions. These implementations use an  * uncached read/write all algorithm for all changes. In most cases it is  * recommended to override the optional functions.  *<p>  * Drivers may optionally override additional routines for performance  * optimization, such as custom get/put/remove queries, depending on the  * capabilities of the data store.  */
end_comment

begin_class
DECL|class|StateStoreBaseImpl
specifier|public
specifier|abstract
class|class
name|StateStoreBaseImpl
extends|extends
name|StateStoreDriver
block|{
annotation|@
name|Override
DECL|method|get ( Class<T> clazz, Query<T> query)
specifier|public
parameter_list|<
name|T
extends|extends
name|BaseRecord
parameter_list|>
name|T
name|get
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|,
name|Query
argument_list|<
name|T
argument_list|>
name|query
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|T
argument_list|>
name|records
init|=
name|getMultiple
argument_list|(
name|clazz
argument_list|,
name|query
argument_list|)
decl_stmt|;
if|if
condition|(
name|records
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Found more than one object in collection"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|records
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|records
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getMultiple ( Class<T> clazz, Query<T> query)
specifier|public
parameter_list|<
name|T
extends|extends
name|BaseRecord
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|getMultiple
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|,
name|Query
argument_list|<
name|T
argument_list|>
name|query
parameter_list|)
throws|throws
name|IOException
block|{
name|QueryResult
argument_list|<
name|T
argument_list|>
name|result
init|=
name|get
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|T
argument_list|>
name|records
init|=
name|result
operator|.
name|getRecords
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|T
argument_list|>
name|ret
init|=
name|filterMultiple
argument_list|(
name|query
argument_list|,
name|records
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot fetch records from the store"
argument_list|)
throw|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
DECL|method|put ( T record, boolean allowUpdate, boolean errorIfExists)
specifier|public
parameter_list|<
name|T
extends|extends
name|BaseRecord
parameter_list|>
name|boolean
name|put
parameter_list|(
name|T
name|record
parameter_list|,
name|boolean
name|allowUpdate
parameter_list|,
name|boolean
name|errorIfExists
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|T
argument_list|>
name|singletonList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|singletonList
operator|.
name|add
argument_list|(
name|record
argument_list|)
expr_stmt|;
return|return
name|putAll
argument_list|(
name|singletonList
argument_list|,
name|allowUpdate
argument_list|,
name|errorIfExists
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|remove (T record)
specifier|public
parameter_list|<
name|T
extends|extends
name|BaseRecord
parameter_list|>
name|boolean
name|remove
parameter_list|(
name|T
name|record
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Query
argument_list|<
name|T
argument_list|>
name|query
init|=
operator|new
name|Query
argument_list|<
name|T
argument_list|>
argument_list|(
name|record
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|BaseRecord
argument_list|>
name|clazz
init|=
name|record
operator|.
name|getClass
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Class
argument_list|<
name|T
argument_list|>
name|recordClass
init|=
operator|(
name|Class
argument_list|<
name|T
argument_list|>
operator|)
name|StateStoreUtils
operator|.
name|getRecordClass
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
return|return
name|remove
argument_list|(
name|recordClass
argument_list|,
name|query
argument_list|)
operator|==
literal|1
return|;
block|}
block|}
end_class

end_unit

