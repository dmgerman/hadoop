begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.store.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
operator|.
name|RouterAdminServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
operator|.
name|RouterPermissionChecker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|MountTableStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|driver
operator|.
name|StateStoreDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|AddMountTableEntryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|AddMountTableEntryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|GetMountTableEntriesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|GetMountTableEntriesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|RefreshMountTableEntriesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|RefreshMountTableEntriesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|RemoveMountTableEntryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|RemoveMountTableEntryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|UpdateMountTableEntryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|UpdateMountTableEntryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|MountTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_comment
comment|/**  * Implementation of the {@link MountTableStore} state store API.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|MountTableStoreImpl
specifier|public
class|class
name|MountTableStoreImpl
extends|extends
name|MountTableStore
block|{
DECL|method|MountTableStoreImpl (StateStoreDriver driver)
specifier|public
name|MountTableStoreImpl
parameter_list|(
name|StateStoreDriver
name|driver
parameter_list|)
block|{
name|super
argument_list|(
name|driver
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|addMountTableEntry ( AddMountTableEntryRequest request)
specifier|public
name|AddMountTableEntryResponse
name|addMountTableEntry
parameter_list|(
name|AddMountTableEntryRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
name|MountTable
name|mountTable
init|=
name|request
operator|.
name|getEntry
argument_list|()
decl_stmt|;
if|if
condition|(
name|mountTable
operator|!=
literal|null
condition|)
block|{
name|RouterPermissionChecker
name|pc
init|=
name|RouterAdminServer
operator|.
name|getPermissionChecker
argument_list|()
decl_stmt|;
if|if
condition|(
name|pc
operator|!=
literal|null
condition|)
block|{
name|pc
operator|.
name|checkPermission
argument_list|(
name|mountTable
argument_list|,
name|FsAction
operator|.
name|WRITE
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|status
init|=
name|getDriver
argument_list|()
operator|.
name|put
argument_list|(
name|mountTable
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|AddMountTableEntryResponse
name|response
init|=
name|AddMountTableEntryResponse
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|response
operator|.
name|setStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|updateCacheAllRouters
argument_list|()
expr_stmt|;
return|return
name|response
return|;
block|}
annotation|@
name|Override
DECL|method|updateMountTableEntry ( UpdateMountTableEntryRequest request)
specifier|public
name|UpdateMountTableEntryResponse
name|updateMountTableEntry
parameter_list|(
name|UpdateMountTableEntryRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
name|MountTable
name|mountTable
init|=
name|request
operator|.
name|getEntry
argument_list|()
decl_stmt|;
if|if
condition|(
name|mountTable
operator|!=
literal|null
condition|)
block|{
name|RouterPermissionChecker
name|pc
init|=
name|RouterAdminServer
operator|.
name|getPermissionChecker
argument_list|()
decl_stmt|;
if|if
condition|(
name|pc
operator|!=
literal|null
condition|)
block|{
name|pc
operator|.
name|checkPermission
argument_list|(
name|mountTable
argument_list|,
name|FsAction
operator|.
name|WRITE
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|status
init|=
name|getDriver
argument_list|()
operator|.
name|put
argument_list|(
name|mountTable
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|UpdateMountTableEntryResponse
name|response
init|=
name|UpdateMountTableEntryResponse
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|response
operator|.
name|setStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|updateCacheAllRouters
argument_list|()
expr_stmt|;
return|return
name|response
return|;
block|}
annotation|@
name|Override
DECL|method|removeMountTableEntry ( RemoveMountTableEntryRequest request)
specifier|public
name|RemoveMountTableEntryResponse
name|removeMountTableEntry
parameter_list|(
name|RemoveMountTableEntryRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|srcPath
init|=
name|request
operator|.
name|getSrcPath
argument_list|()
decl_stmt|;
specifier|final
name|MountTable
name|partial
init|=
name|MountTable
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|partial
operator|.
name|setSourcePath
argument_list|(
name|srcPath
argument_list|)
expr_stmt|;
specifier|final
name|Query
argument_list|<
name|MountTable
argument_list|>
name|query
init|=
operator|new
name|Query
argument_list|<>
argument_list|(
name|partial
argument_list|)
decl_stmt|;
specifier|final
name|MountTable
name|deleteEntry
init|=
name|getDriver
argument_list|()
operator|.
name|get
argument_list|(
name|getRecordClass
argument_list|()
argument_list|,
name|query
argument_list|)
decl_stmt|;
name|boolean
name|status
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|deleteEntry
operator|!=
literal|null
condition|)
block|{
name|RouterPermissionChecker
name|pc
init|=
name|RouterAdminServer
operator|.
name|getPermissionChecker
argument_list|()
decl_stmt|;
if|if
condition|(
name|pc
operator|!=
literal|null
condition|)
block|{
name|pc
operator|.
name|checkPermission
argument_list|(
name|deleteEntry
argument_list|,
name|FsAction
operator|.
name|WRITE
argument_list|)
expr_stmt|;
block|}
name|status
operator|=
name|getDriver
argument_list|()
operator|.
name|remove
argument_list|(
name|deleteEntry
argument_list|)
expr_stmt|;
block|}
name|RemoveMountTableEntryResponse
name|response
init|=
name|RemoveMountTableEntryResponse
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|response
operator|.
name|setStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|updateCacheAllRouters
argument_list|()
expr_stmt|;
return|return
name|response
return|;
block|}
annotation|@
name|Override
DECL|method|getMountTableEntries ( GetMountTableEntriesRequest request)
specifier|public
name|GetMountTableEntriesResponse
name|getMountTableEntries
parameter_list|(
name|GetMountTableEntriesRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
name|RouterPermissionChecker
name|pc
init|=
name|RouterAdminServer
operator|.
name|getPermissionChecker
argument_list|()
decl_stmt|;
comment|// Get all values from the cache
name|List
argument_list|<
name|MountTable
argument_list|>
name|records
init|=
name|getCachedRecords
argument_list|()
decl_stmt|;
comment|// Sort and filter
name|Collections
operator|.
name|sort
argument_list|(
name|records
argument_list|,
name|MountTable
operator|.
name|SOURCE_COMPARATOR
argument_list|)
expr_stmt|;
name|String
name|reqSrcPath
init|=
name|request
operator|.
name|getSrcPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|reqSrcPath
operator|!=
literal|null
operator|&&
operator|!
name|reqSrcPath
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Return only entries beneath this path
name|Iterator
argument_list|<
name|MountTable
argument_list|>
name|it
init|=
name|records
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|MountTable
name|record
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|srcPath
init|=
name|record
operator|.
name|getSourcePath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|srcPath
operator|.
name|startsWith
argument_list|(
name|reqSrcPath
argument_list|)
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pc
operator|!=
literal|null
condition|)
block|{
comment|// do the READ permission check
try|try
block|{
name|pc
operator|.
name|checkPermission
argument_list|(
name|record
argument_list|,
name|FsAction
operator|.
name|READ
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|ignored
parameter_list|)
block|{
comment|// Remove this mount table entry if it cannot
comment|// be accessed by current user.
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
name|GetMountTableEntriesResponse
name|response
init|=
name|GetMountTableEntriesResponse
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|response
operator|.
name|setEntries
argument_list|(
name|records
argument_list|)
expr_stmt|;
name|response
operator|.
name|setTimestamp
argument_list|(
name|Time
operator|.
name|now
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
annotation|@
name|Override
DECL|method|refreshMountTableEntries ( RefreshMountTableEntriesRequest request)
specifier|public
name|RefreshMountTableEntriesResponse
name|refreshMountTableEntries
parameter_list|(
name|RefreshMountTableEntriesRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Because this refresh is done through admin API, it should always be force
comment|// refresh.
name|boolean
name|result
init|=
name|loadCache
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|RefreshMountTableEntriesResponse
name|response
init|=
name|RefreshMountTableEntriesResponse
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|response
operator|.
name|setResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
block|}
end_class

end_unit

