begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.router
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
operator|.
name|RouterRpcServer
operator|.
name|merge
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|AddErasureCodingPolicyResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ECBlockGroupStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ErasureCodingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ErasureCodingPolicyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|ActiveNamenodeResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|FederationNamespaceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|RemoteLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
operator|.
name|OperationCategory
import|;
end_import

begin_comment
comment|/**  * Module that implements all the RPC calls in  * {@link org.apache.hadoop.hdfs.protocol.ClientProtocol} related to  * Erasure Coding in the {@link RouterRpcServer}.  */
end_comment

begin_class
DECL|class|ErasureCoding
specifier|public
class|class
name|ErasureCoding
block|{
comment|/** RPC server to receive client calls. */
DECL|field|rpcServer
specifier|private
specifier|final
name|RouterRpcServer
name|rpcServer
decl_stmt|;
comment|/** RPC clients to connect to the Namenodes. */
DECL|field|rpcClient
specifier|private
specifier|final
name|RouterRpcClient
name|rpcClient
decl_stmt|;
comment|/** Interface to identify the active NN for a nameservice or blockpool ID. */
DECL|field|namenodeResolver
specifier|private
specifier|final
name|ActiveNamenodeResolver
name|namenodeResolver
decl_stmt|;
DECL|method|ErasureCoding (RouterRpcServer server)
specifier|public
name|ErasureCoding
parameter_list|(
name|RouterRpcServer
name|server
parameter_list|)
block|{
name|this
operator|.
name|rpcServer
operator|=
name|server
expr_stmt|;
name|this
operator|.
name|rpcClient
operator|=
name|this
operator|.
name|rpcServer
operator|.
name|getRPCClient
argument_list|()
expr_stmt|;
name|this
operator|.
name|namenodeResolver
operator|=
name|this
operator|.
name|rpcClient
operator|.
name|getNamenodeResolver
argument_list|()
expr_stmt|;
block|}
DECL|method|getErasureCodingPolicies ()
specifier|public
name|ErasureCodingPolicyInfo
index|[]
name|getErasureCodingPolicies
parameter_list|()
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"getErasureCodingPolicies"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|FederationNamespaceInfo
argument_list|>
name|nss
init|=
name|namenodeResolver
operator|.
name|getNamespaces
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|FederationNamespaceInfo
argument_list|,
name|ErasureCodingPolicyInfo
index|[]
argument_list|>
name|ret
init|=
name|rpcClient
operator|.
name|invokeConcurrent
argument_list|(
name|nss
argument_list|,
name|method
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ErasureCodingPolicyInfo
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
return|return
name|merge
argument_list|(
name|ret
argument_list|,
name|ErasureCodingPolicyInfo
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|getErasureCodingCodecs ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getErasureCodingCodecs
parameter_list|()
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"getErasureCodingCodecs"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|FederationNamespaceInfo
argument_list|>
name|nss
init|=
name|namenodeResolver
operator|.
name|getNamespaces
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|Map
argument_list|<
name|FederationNamespaceInfo
argument_list|,
name|Map
argument_list|>
name|retCodecs
init|=
name|rpcClient
operator|.
name|invokeConcurrent
argument_list|(
name|nss
argument_list|,
name|method
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|Map
operator|.
name|class
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ret
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Object
name|obj
init|=
name|retCodecs
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|FederationNamespaceInfo
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|results
init|=
operator|(
name|Map
argument_list|<
name|FederationNamespaceInfo
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
operator|)
name|obj
decl_stmt|;
name|Collection
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|allCodecs
init|=
name|results
operator|.
name|values
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|codecs
range|:
name|allCodecs
control|)
block|{
name|ret
operator|.
name|putAll
argument_list|(
name|codecs
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
DECL|method|addErasureCodingPolicies ( ErasureCodingPolicy[] policies)
specifier|public
name|AddErasureCodingPolicyResponse
index|[]
name|addErasureCodingPolicies
parameter_list|(
name|ErasureCodingPolicy
index|[]
name|policies
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"addErasureCodingPolicies"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|ErasureCodingPolicy
index|[]
operator|.
expr|class
block|}
operator|,
operator|new
name|Object
index|[]
block|{
name|policies
block|}
block|)
function|;
name|Set
argument_list|<
name|FederationNamespaceInfo
argument_list|>
name|nss
init|=
name|namenodeResolver
operator|.
name|getNamespaces
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|FederationNamespaceInfo
argument_list|,
name|AddErasureCodingPolicyResponse
index|[]
argument_list|>
name|ret
init|=
name|rpcClient
operator|.
name|invokeConcurrent
argument_list|(
name|nss
argument_list|,
name|method
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|AddErasureCodingPolicyResponse
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
return|return
name|merge
argument_list|(
name|ret
argument_list|,
name|AddErasureCodingPolicyResponse
operator|.
name|class
argument_list|)
return|;
block|}
end_class

begin_function
DECL|method|removeErasureCodingPolicy (String ecPolicyName)
specifier|public
name|void
name|removeErasureCodingPolicy
parameter_list|(
name|String
name|ecPolicyName
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"removeErasureCodingPolicy"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
block|}
operator|,
name|ecPolicyName
block|)
function|;
end_function

begin_decl_stmt
name|Set
argument_list|<
name|FederationNamespaceInfo
argument_list|>
name|nss
init|=
name|namenodeResolver
operator|.
name|getNamespaces
argument_list|()
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|rpcClient
operator|.
name|invokeConcurrent
argument_list|(
name|nss
argument_list|,
name|method
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}    public
DECL|method|disableErasureCodingPolicy (String ecPolicyName)
name|void
name|disableErasureCodingPolicy
parameter_list|(
name|String
name|ecPolicyName
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"disableErasureCodingPolicy"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
block|}
operator|,
name|ecPolicyName
block|)
function|;
end_function

begin_decl_stmt
name|Set
argument_list|<
name|FederationNamespaceInfo
argument_list|>
name|nss
init|=
name|namenodeResolver
operator|.
name|getNamespaces
argument_list|()
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|rpcClient
operator|.
name|invokeConcurrent
argument_list|(
name|nss
argument_list|,
name|method
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}    public
DECL|method|enableErasureCodingPolicy (String ecPolicyName)
name|void
name|enableErasureCodingPolicy
parameter_list|(
name|String
name|ecPolicyName
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"enableErasureCodingPolicy"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
block|}
operator|,
name|ecPolicyName
block|)
function|;
end_function

begin_decl_stmt
name|Set
argument_list|<
name|FederationNamespaceInfo
argument_list|>
name|nss
init|=
name|namenodeResolver
operator|.
name|getNamespaces
argument_list|()
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|rpcClient
operator|.
name|invokeConcurrent
argument_list|(
name|nss
argument_list|,
name|method
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}    public
DECL|method|getErasureCodingPolicy (String src)
name|ErasureCodingPolicy
name|getErasureCodingPolicy
parameter_list|(
name|String
name|src
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|locations
init|=
name|rpcServer
operator|.
name|getLocationsForPath
argument_list|(
name|src
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|RemoteMethod
name|remoteMethod
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"getErasureCodingPolicy"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
block|}
operator|,
operator|new
name|RemoteParam
argument_list|()
block|)
function|;
end_function

begin_decl_stmt
name|ErasureCodingPolicy
name|ret
init|=
name|rpcClient
operator|.
name|invokeSequential
argument_list|(
name|locations
argument_list|,
name|remoteMethod
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
end_decl_stmt

begin_return
return|return
name|ret
return|;
end_return

begin_function
unit|}    public
DECL|method|setErasureCodingPolicy (String src, String ecPolicyName)
name|void
name|setErasureCodingPolicy
parameter_list|(
name|String
name|src
parameter_list|,
name|String
name|ecPolicyName
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|locations
init|=
name|rpcServer
operator|.
name|getLocationsForPath
argument_list|(
name|src
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|RemoteMethod
name|remoteMethod
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"setErasureCodingPolicy"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
operator|,
name|String
operator|.
name|class
block|}
operator|,
operator|new
name|RemoteParam
argument_list|()
operator|,
name|ecPolicyName
block|)
function|;
end_function

begin_expr_stmt
name|rpcClient
operator|.
name|invokeSequential
argument_list|(
name|locations
argument_list|,
name|remoteMethod
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}    public
DECL|method|unsetErasureCodingPolicy (String src)
name|void
name|unsetErasureCodingPolicy
parameter_list|(
name|String
name|src
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|locations
init|=
name|rpcServer
operator|.
name|getLocationsForPath
argument_list|(
name|src
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|RemoteMethod
name|remoteMethod
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"unsetErasureCodingPolicy"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
block|}
operator|,
operator|new
name|RemoteParam
argument_list|()
block|)
function|;
end_function

begin_expr_stmt
name|rpcClient
operator|.
name|invokeSequential
argument_list|(
name|locations
argument_list|,
name|remoteMethod
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}    public
DECL|method|getECBlockGroupStats ()
name|ECBlockGroupStats
name|getECBlockGroupStats
parameter_list|()
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"getECBlockGroupStats"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|FederationNamespaceInfo
argument_list|>
name|nss
init|=
name|namenodeResolver
operator|.
name|getNamespaces
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|FederationNamespaceInfo
argument_list|,
name|ECBlockGroupStats
argument_list|>
name|allStats
init|=
name|rpcClient
operator|.
name|invokeConcurrent
argument_list|(
name|nss
argument_list|,
name|method
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ECBlockGroupStats
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Merge the stats from all the namespaces
name|long
name|lowRedundancyBlockGroups
init|=
literal|0
decl_stmt|;
name|long
name|corruptBlockGroups
init|=
literal|0
decl_stmt|;
name|long
name|missingBlockGroups
init|=
literal|0
decl_stmt|;
name|long
name|bytesInFutureBlockGroups
init|=
literal|0
decl_stmt|;
name|long
name|pendingDeletionBlocks
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ECBlockGroupStats
name|stats
range|:
name|allStats
operator|.
name|values
argument_list|()
control|)
block|{
name|lowRedundancyBlockGroups
operator|+=
name|stats
operator|.
name|getLowRedundancyBlockGroups
argument_list|()
expr_stmt|;
name|corruptBlockGroups
operator|+=
name|stats
operator|.
name|getCorruptBlockGroups
argument_list|()
expr_stmt|;
name|missingBlockGroups
operator|+=
name|stats
operator|.
name|getMissingBlockGroups
argument_list|()
expr_stmt|;
name|bytesInFutureBlockGroups
operator|+=
name|stats
operator|.
name|getBytesInFutureBlockGroups
argument_list|()
expr_stmt|;
name|pendingDeletionBlocks
operator|+=
name|stats
operator|.
name|getPendingDeletionBlocks
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|ECBlockGroupStats
argument_list|(
name|lowRedundancyBlockGroups
argument_list|,
name|corruptBlockGroups
argument_list|,
name|missingBlockGroups
argument_list|,
name|bytesInFutureBlockGroups
argument_list|,
name|pendingDeletionBlocks
argument_list|)
return|;
block|}
end_function

unit|}
end_unit

