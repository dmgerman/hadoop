begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.router
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|QuotaUsage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|RemoteLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
operator|.
name|OperationCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ArrayListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListMultimap
import|;
end_import

begin_comment
comment|/**  * Module that implements the quota relevant RPC calls  * {@link ClientProtocol#setQuota(String, long, long, StorageType)}  * and  * {@link ClientProtocol#getQuotaUsage(String)}  * in the {@link RouterRpcServer}.  */
end_comment

begin_class
DECL|class|Quota
specifier|public
class|class
name|Quota
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Quota
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** RPC server to receive client calls. */
DECL|field|rpcServer
specifier|private
specifier|final
name|RouterRpcServer
name|rpcServer
decl_stmt|;
comment|/** RPC clients to connect to the Namenodes. */
DECL|field|rpcClient
specifier|private
specifier|final
name|RouterRpcClient
name|rpcClient
decl_stmt|;
comment|/** Router used in RouterRpcServer. */
DECL|field|router
specifier|private
specifier|final
name|Router
name|router
decl_stmt|;
DECL|method|Quota (Router router, RouterRpcServer server)
specifier|public
name|Quota
parameter_list|(
name|Router
name|router
parameter_list|,
name|RouterRpcServer
name|server
parameter_list|)
block|{
name|this
operator|.
name|router
operator|=
name|router
expr_stmt|;
name|this
operator|.
name|rpcServer
operator|=
name|server
expr_stmt|;
name|this
operator|.
name|rpcClient
operator|=
name|server
operator|.
name|getRPCClient
argument_list|()
expr_stmt|;
block|}
comment|/**    * Set quota for the federation path.    * @param path Federation path.    * @param namespaceQuota Name space quota.    * @param storagespaceQuota Storage space quota.    * @param type StorageType that the space quota is intended to be set on.    * @throws IOException If the quota system is disabled.    */
DECL|method|setQuota (String path, long namespaceQuota, long storagespaceQuota, StorageType type)
specifier|public
name|void
name|setQuota
parameter_list|(
name|String
name|path
parameter_list|,
name|long
name|namespaceQuota
parameter_list|,
name|long
name|storagespaceQuota
parameter_list|,
name|StorageType
name|type
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|router
operator|.
name|isQuotaEnabled
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The quota system is disabled in Router."
argument_list|)
throw|;
block|}
comment|// Set quota for current path and its children mount table path.
specifier|final
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|locations
init|=
name|getQuotaRemoteLocations
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
for|for
control|(
name|RemoteLocation
name|loc
range|:
name|locations
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Set quota for path: nsId: {}, dest: {}."
argument_list|,
name|loc
operator|.
name|getNameserviceId
argument_list|()
argument_list|,
name|loc
operator|.
name|getDest
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"setQuota"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
operator|,
name|long
operator|.
name|class
operator|,
name|long
operator|.
name|class
operator|,
name|StorageType
operator|.
name|class
block|}
operator|,
operator|new
name|RemoteParam
argument_list|()
operator|,
name|namespaceQuota
operator|,
name|storagespaceQuota
operator|,
name|type
block|)
function|;
name|rpcClient
operator|.
name|invokeConcurrent
argument_list|(
name|locations
argument_list|,
name|method
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_class

begin_comment
comment|/**    * Get quota usage for the federation path.    * @param path Federation path.    * @return Aggregated quota.    * @throws IOException If the quota system is disabled.    */
end_comment

begin_function
DECL|method|getQuotaUsage (String path)
specifier|public
name|QuotaUsage
name|getQuotaUsage
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|router
operator|.
name|isQuotaEnabled
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The quota system is disabled in Router."
argument_list|)
throw|;
block|}
specifier|final
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|quotaLocs
init|=
name|getValidQuotaLocations
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"getQuotaUsage"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
block|}
operator|,
operator|new
name|RemoteParam
argument_list|()
block|)
function|;
end_function

begin_decl_stmt
name|Map
argument_list|<
name|RemoteLocation
argument_list|,
name|QuotaUsage
argument_list|>
name|results
init|=
name|rpcClient
operator|.
name|invokeConcurrent
argument_list|(
name|quotaLocs
argument_list|,
name|method
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|QuotaUsage
operator|.
name|class
argument_list|)
decl_stmt|;
end_decl_stmt

begin_return
return|return
name|aggregateQuota
argument_list|(
name|results
argument_list|)
return|;
end_return

begin_comment
unit|}
comment|/**    * Get valid quota remote locations used in {@link #getQuotaUsage(String)}.    * Differentiate the method {@link #getQuotaRemoteLocations(String)}, this    * method will do some additional filtering.    * @param path Federation path.    * @return List of valid quota remote locations.    * @throws IOException    */
end_comment

begin_function
DECL|method|getValidQuotaLocations (String path)
unit|private
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|getValidQuotaLocations
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|locations
init|=
name|getQuotaRemoteLocations
argument_list|(
name|path
argument_list|)
decl_stmt|;
comment|// NameService -> Locations
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|RemoteLocation
argument_list|>
name|validLocations
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
for|for
control|(
name|RemoteLocation
name|loc
range|:
name|locations
control|)
block|{
specifier|final
name|String
name|nsId
init|=
name|loc
operator|.
name|getNameserviceId
argument_list|()
decl_stmt|;
specifier|final
name|Collection
argument_list|<
name|RemoteLocation
argument_list|>
name|dests
init|=
name|validLocations
operator|.
name|get
argument_list|(
name|nsId
argument_list|)
decl_stmt|;
comment|// Ensure the paths in the same nameservice is different.
comment|// Do not include parent-child paths.
name|boolean
name|isChildPath
init|=
literal|false
decl_stmt|;
for|for
control|(
name|RemoteLocation
name|d
range|:
name|dests
control|)
block|{
if|if
condition|(
name|FederationUtil
operator|.
name|isParentEntry
argument_list|(
name|loc
operator|.
name|getDest
argument_list|()
argument_list|,
name|d
operator|.
name|getDest
argument_list|()
argument_list|)
condition|)
block|{
name|isChildPath
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|isChildPath
condition|)
block|{
name|validLocations
operator|.
name|put
argument_list|(
name|nsId
argument_list|,
name|loc
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|validLocations
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Aggregate quota that queried from sub-clusters.    * @param results Quota query result.    * @return Aggregated Quota.    */
end_comment

begin_function
DECL|method|aggregateQuota (Map<RemoteLocation, QuotaUsage> results)
specifier|private
name|QuotaUsage
name|aggregateQuota
parameter_list|(
name|Map
argument_list|<
name|RemoteLocation
argument_list|,
name|QuotaUsage
argument_list|>
name|results
parameter_list|)
block|{
name|long
name|nsCount
init|=
literal|0
decl_stmt|;
name|long
name|ssCount
init|=
literal|0
decl_stmt|;
name|long
name|nsQuota
init|=
name|HdfsConstants
operator|.
name|QUOTA_RESET
decl_stmt|;
name|long
name|ssQuota
init|=
name|HdfsConstants
operator|.
name|QUOTA_RESET
decl_stmt|;
name|boolean
name|hasQuotaUnset
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|RemoteLocation
argument_list|,
name|QuotaUsage
argument_list|>
name|entry
range|:
name|results
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|RemoteLocation
name|loc
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|QuotaUsage
name|usage
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|usage
operator|!=
literal|null
condition|)
block|{
comment|// If quota is not set in real FileSystem, the usage
comment|// value will return -1.
if|if
condition|(
name|usage
operator|.
name|getQuota
argument_list|()
operator|==
operator|-
literal|1
operator|&&
name|usage
operator|.
name|getSpaceQuota
argument_list|()
operator|==
operator|-
literal|1
condition|)
block|{
name|hasQuotaUnset
operator|=
literal|true
expr_stmt|;
block|}
name|nsQuota
operator|=
name|usage
operator|.
name|getQuota
argument_list|()
expr_stmt|;
name|ssQuota
operator|=
name|usage
operator|.
name|getSpaceQuota
argument_list|()
expr_stmt|;
name|nsCount
operator|+=
name|usage
operator|.
name|getFileAndDirectoryCount
argument_list|()
expr_stmt|;
name|ssCount
operator|+=
name|usage
operator|.
name|getSpaceConsumed
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Get quota usage for path: nsId: {}, dest: {},"
operator|+
literal|" nsCount: {}, ssCount: {}."
argument_list|,
name|loc
operator|.
name|getNameserviceId
argument_list|()
argument_list|,
name|loc
operator|.
name|getDest
argument_list|()
argument_list|,
name|usage
operator|.
name|getFileAndDirectoryCount
argument_list|()
argument_list|,
name|usage
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|QuotaUsage
operator|.
name|Builder
name|builder
init|=
operator|new
name|QuotaUsage
operator|.
name|Builder
argument_list|()
operator|.
name|fileAndDirectoryCount
argument_list|(
name|nsCount
argument_list|)
operator|.
name|spaceConsumed
argument_list|(
name|ssCount
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasQuotaUnset
condition|)
block|{
name|builder
operator|.
name|quota
argument_list|(
name|HdfsConstants
operator|.
name|QUOTA_RESET
argument_list|)
operator|.
name|spaceQuota
argument_list|(
name|HdfsConstants
operator|.
name|QUOTA_RESET
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|quota
argument_list|(
name|nsQuota
argument_list|)
operator|.
name|spaceQuota
argument_list|(
name|ssQuota
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
end_function

begin_comment
comment|/**    * Get all quota remote locations across subclusters under given    * federation path.    * @param path Federation path.    * @return List of quota remote locations.    * @throws IOException    */
end_comment

begin_function
DECL|method|getQuotaRemoteLocations (String path)
specifier|private
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|getQuotaRemoteLocations
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|locations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|RouterQuotaManager
name|manager
init|=
name|this
operator|.
name|router
operator|.
name|getQuotaManager
argument_list|()
decl_stmt|;
if|if
condition|(
name|manager
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|childrenPaths
init|=
name|manager
operator|.
name|getPaths
argument_list|(
name|path
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|childPath
range|:
name|childrenPaths
control|)
block|{
name|locations
operator|.
name|addAll
argument_list|(
name|rpcServer
operator|.
name|getLocationsForPath
argument_list|(
name|childPath
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|locations
operator|.
name|size
argument_list|()
operator|>=
literal|1
condition|)
block|{
return|return
name|locations
return|;
block|}
else|else
block|{
name|locations
operator|.
name|addAll
argument_list|(
name|rpcServer
operator|.
name|getLocationsForPath
argument_list|(
name|path
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|locations
return|;
block|}
block|}
end_function

unit|}
end_unit

