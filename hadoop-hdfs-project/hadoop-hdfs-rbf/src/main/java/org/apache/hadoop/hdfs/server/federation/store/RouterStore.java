begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.store
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|driver
operator|.
name|StateStoreDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|GetRouterRegistrationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|GetRouterRegistrationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|GetRouterRegistrationsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|GetRouterRegistrationsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|RouterHeartbeatRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|RouterHeartbeatResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|RouterState
import|;
end_import

begin_comment
comment|/**  * Management API for  * {@link org.apache.hadoop.hdfs.server.federation.store.records.RouterState  *  RouterState} records in the state store. Accesses the data store via the  * {@link org.apache.hadoop.hdfs.server.federation.store.driver.  * StateStoreDriver StateStoreDriver} interface. No data is cached.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|RouterStore
specifier|public
specifier|abstract
class|class
name|RouterStore
extends|extends
name|CachedRecordStore
argument_list|<
name|RouterState
argument_list|>
block|{
DECL|method|RouterStore (StateStoreDriver driver)
specifier|public
name|RouterStore
parameter_list|(
name|StateStoreDriver
name|driver
parameter_list|)
block|{
name|super
argument_list|(
name|RouterState
operator|.
name|class
argument_list|,
name|driver
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Fetches the current router state object.    *    * @param request Fully populated request object.    * @return The matching router record or null if none exists.    * @throws IOException Throws exception if unable to query the data store or    *           if more than one matching record is found.    */
DECL|method|getRouterRegistration ( GetRouterRegistrationRequest request)
specifier|public
specifier|abstract
name|GetRouterRegistrationResponse
name|getRouterRegistration
parameter_list|(
name|GetRouterRegistrationRequest
name|request
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Fetches all router status objects.    *    * @param request Fully populated request object.    * @return List of Router records present in the data store.    * @throws IOException Throws exception if unable to query the data store    */
DECL|method|getRouterRegistrations ( GetRouterRegistrationsRequest request)
specifier|public
specifier|abstract
name|GetRouterRegistrationsResponse
name|getRouterRegistrations
parameter_list|(
name|GetRouterRegistrationsRequest
name|request
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Update the state of this router in the State Store.    *    * @param request Fully populated request object.    * @return True if the update was successfully recorded, false otherwise.    * @throws IOException Throws exception if unable to query the data store    */
DECL|method|routerHeartbeat ( RouterHeartbeatRequest request)
specifier|public
specifier|abstract
name|RouterHeartbeatResponse
name|routerHeartbeat
parameter_list|(
name|RouterHeartbeatRequest
name|request
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
end_class

end_unit

