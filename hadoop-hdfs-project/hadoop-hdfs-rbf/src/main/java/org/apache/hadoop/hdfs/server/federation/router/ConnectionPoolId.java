begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.router
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|builder
operator|.
name|HashCodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_comment
comment|/**  * Identifier for a connection for a user to a namenode.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|ConnectionPoolId
specifier|public
class|class
name|ConnectionPoolId
implements|implements
name|Comparable
argument_list|<
name|ConnectionPoolId
argument_list|>
block|{
comment|/** Namenode identifier. */
DECL|field|nnId
specifier|private
specifier|final
name|String
name|nnId
decl_stmt|;
comment|/** Information about the user. */
DECL|field|ugi
specifier|private
specifier|final
name|UserGroupInformation
name|ugi
decl_stmt|;
comment|/**    * New connection pool identifier.    *    * @param ugi Information of the user issuing the request.    * @param nnId Namenode address with port.    */
DECL|method|ConnectionPoolId (final UserGroupInformation ugi, final String nnId)
specifier|public
name|ConnectionPoolId
parameter_list|(
specifier|final
name|UserGroupInformation
name|ugi
parameter_list|,
specifier|final
name|String
name|nnId
parameter_list|)
block|{
name|this
operator|.
name|nnId
operator|=
name|nnId
expr_stmt|;
name|this
operator|.
name|ugi
operator|=
name|ugi
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|hash
init|=
operator|new
name|HashCodeBuilder
argument_list|(
literal|17
argument_list|,
literal|31
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|nnId
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|ugi
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|getTokenIds
argument_list|()
argument_list|)
operator|.
name|toHashCode
argument_list|()
decl_stmt|;
return|return
name|hash
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|ConnectionPoolId
condition|)
block|{
name|ConnectionPoolId
name|other
init|=
operator|(
name|ConnectionPoolId
operator|)
name|o
decl_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|nnId
operator|.
name|equals
argument_list|(
name|other
operator|.
name|nnId
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|this
operator|.
name|ugi
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|ugi
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
name|thisTokens
init|=
name|this
operator|.
name|getTokenIds
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|otherTokens
init|=
name|other
operator|.
name|getTokenIds
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
name|thisTokens
operator|.
name|equals
argument_list|(
name|otherTokens
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|this
operator|.
name|ugi
operator|+
literal|" "
operator|+
name|this
operator|.
name|getTokenIds
argument_list|()
operator|+
literal|"->"
operator|+
name|this
operator|.
name|nnId
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo (ConnectionPoolId other)
specifier|public
name|int
name|compareTo
parameter_list|(
name|ConnectionPoolId
name|other
parameter_list|)
block|{
name|int
name|ret
init|=
name|this
operator|.
name|nnId
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|nnId
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|==
literal|0
condition|)
block|{
name|ret
operator|=
name|this
operator|.
name|ugi
operator|.
name|toString
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|ugi
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ret
operator|==
literal|0
condition|)
block|{
name|String
name|thisTokens
init|=
name|this
operator|.
name|getTokenIds
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|otherTokens
init|=
name|other
operator|.
name|getTokenIds
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|ret
operator|=
name|thisTokens
operator|.
name|compareTo
argument_list|(
name|otherTokens
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getUgi ()
name|UserGroupInformation
name|getUgi
parameter_list|()
block|{
return|return
name|this
operator|.
name|ugi
return|;
block|}
comment|/**    * Get the token identifiers for this connection.    * @return List with the token identifiers.    */
DECL|method|getTokenIds ()
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getTokenIds
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|tokenIds
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
argument_list|>
name|tokens
init|=
name|this
operator|.
name|ugi
operator|.
name|getTokens
argument_list|()
decl_stmt|;
for|for
control|(
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|token
range|:
name|tokens
control|)
block|{
name|byte
index|[]
name|tokenIdBytes
init|=
name|token
operator|.
name|getIdentifier
argument_list|()
decl_stmt|;
name|String
name|tokenId
init|=
name|Arrays
operator|.
name|toString
argument_list|(
name|tokenIdBytes
argument_list|)
decl_stmt|;
name|tokenIds
operator|.
name|add
argument_list|(
name|tokenId
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|tokenIds
argument_list|)
expr_stmt|;
return|return
name|tokenIds
return|;
block|}
block|}
end_class

end_unit

