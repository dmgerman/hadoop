begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.router
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|SocketFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|NameNodeProxiesClient
operator|.
name|ProxyAndInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|ClientNamenodeProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|ClientNamenodeProtocolTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|NamenodeProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|NamenodeProtocolTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamenodeProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtobufRpcEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|RefreshUserMappingsProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SaslRpcServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|protocolPB
operator|.
name|RefreshUserMappingsProtocolClientSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|protocolPB
operator|.
name|RefreshUserMappingsProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|GetUserMappingsProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|protocolPB
operator|.
name|GetUserMappingsProtocolClientSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|protocolPB
operator|.
name|GetUserMappingsProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|ajax
operator|.
name|JSON
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Maintains a pool of connections for each User (including tokens) + NN. The  * RPC client maintains a single socket, to achieve throughput similar to a NN,  * each request is multiplexed across multiple sockets/connections from a  * pool.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|ConnectionPool
specifier|public
class|class
name|ConnectionPool
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ConnectionPool
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** Configuration settings for the connection pool. */
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
comment|/** Identifier for this connection pool. */
DECL|field|connectionPoolId
specifier|private
specifier|final
name|ConnectionPoolId
name|connectionPoolId
decl_stmt|;
comment|/** Namenode this pool connects to. */
DECL|field|namenodeAddress
specifier|private
specifier|final
name|String
name|namenodeAddress
decl_stmt|;
comment|/** User for this connections. */
DECL|field|ugi
specifier|private
specifier|final
name|UserGroupInformation
name|ugi
decl_stmt|;
comment|/** Class of the protocol. */
DECL|field|protocol
specifier|private
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|protocol
decl_stmt|;
comment|/** Pool of connections. We mimic a COW array. */
DECL|field|connections
specifier|private
specifier|volatile
name|List
argument_list|<
name|ConnectionContext
argument_list|>
name|connections
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|/** Connection index for round-robin. */
DECL|field|clientIndex
specifier|private
specifier|final
name|AtomicInteger
name|clientIndex
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|/** Min number of connections per user. */
DECL|field|minSize
specifier|private
specifier|final
name|int
name|minSize
decl_stmt|;
comment|/** Max number of connections per user. */
DECL|field|maxSize
specifier|private
specifier|final
name|int
name|maxSize
decl_stmt|;
comment|/** Min ratio of active connections per user. */
DECL|field|minActiveRatio
specifier|private
specifier|final
name|float
name|minActiveRatio
decl_stmt|;
comment|/** The last time a connection was active. */
DECL|field|lastActiveTime
specifier|private
specifier|volatile
name|long
name|lastActiveTime
init|=
literal|0
decl_stmt|;
comment|/** Map for the protocols and their protobuf implementations. */
DECL|field|PROTO_MAP
specifier|private
specifier|final
specifier|static
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|ProtoImpl
argument_list|>
name|PROTO_MAP
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
static|static
block|{
name|PROTO_MAP
operator|.
name|put
argument_list|(
name|ClientProtocol
operator|.
name|class
argument_list|,
operator|new
name|ProtoImpl
argument_list|(
name|ClientNamenodeProtocolPB
operator|.
name|class
argument_list|,
name|ClientNamenodeProtocolTranslatorPB
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|PROTO_MAP
operator|.
name|put
argument_list|(
name|NamenodeProtocol
operator|.
name|class
argument_list|,
operator|new
name|ProtoImpl
argument_list|(
name|NamenodeProtocolPB
operator|.
name|class
argument_list|,
name|NamenodeProtocolTranslatorPB
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|PROTO_MAP
operator|.
name|put
argument_list|(
name|RefreshUserMappingsProtocol
operator|.
name|class
argument_list|,
operator|new
name|ProtoImpl
argument_list|(
name|RefreshUserMappingsProtocolPB
operator|.
name|class
argument_list|,
name|RefreshUserMappingsProtocolClientSideTranslatorPB
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|PROTO_MAP
operator|.
name|put
argument_list|(
name|GetUserMappingsProtocol
operator|.
name|class
argument_list|,
operator|new
name|ProtoImpl
argument_list|(
name|GetUserMappingsProtocolPB
operator|.
name|class
argument_list|,
name|GetUserMappingsProtocolClientSideTranslatorPB
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Class to store the protocol implementation. */
DECL|class|ProtoImpl
specifier|private
specifier|static
class|class
name|ProtoImpl
block|{
DECL|field|protoPb
specifier|private
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|protoPb
decl_stmt|;
DECL|field|protoClientPb
specifier|private
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|protoClientPb
decl_stmt|;
DECL|method|ProtoImpl (Class<?> pPb, Class<?> pClientPb)
name|ProtoImpl
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|pPb
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|pClientPb
parameter_list|)
block|{
name|this
operator|.
name|protoPb
operator|=
name|pPb
expr_stmt|;
name|this
operator|.
name|protoClientPb
operator|=
name|pClientPb
expr_stmt|;
block|}
block|}
DECL|method|ConnectionPool (Configuration config, String address, UserGroupInformation user, int minPoolSize, int maxPoolSize, float minActiveRatio, Class<?> proto)
specifier|protected
name|ConnectionPool
parameter_list|(
name|Configuration
name|config
parameter_list|,
name|String
name|address
parameter_list|,
name|UserGroupInformation
name|user
parameter_list|,
name|int
name|minPoolSize
parameter_list|,
name|int
name|maxPoolSize
parameter_list|,
name|float
name|minActiveRatio
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|proto
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|conf
operator|=
name|config
expr_stmt|;
comment|// Connection pool target
name|this
operator|.
name|ugi
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|namenodeAddress
operator|=
name|address
expr_stmt|;
name|this
operator|.
name|protocol
operator|=
name|proto
expr_stmt|;
name|this
operator|.
name|connectionPoolId
operator|=
operator|new
name|ConnectionPoolId
argument_list|(
name|this
operator|.
name|ugi
argument_list|,
name|this
operator|.
name|namenodeAddress
argument_list|,
name|this
operator|.
name|protocol
argument_list|)
expr_stmt|;
comment|// Set configuration parameters for the pool
name|this
operator|.
name|minSize
operator|=
name|minPoolSize
expr_stmt|;
name|this
operator|.
name|maxSize
operator|=
name|maxPoolSize
expr_stmt|;
name|this
operator|.
name|minActiveRatio
operator|=
name|minActiveRatio
expr_stmt|;
comment|// Add minimum connections to the pool
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|this
operator|.
name|minSize
condition|;
name|i
operator|++
control|)
block|{
name|ConnectionContext
name|newConnection
init|=
name|newConnection
argument_list|()
decl_stmt|;
name|this
operator|.
name|connections
operator|.
name|add
argument_list|(
name|newConnection
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Created connection pool \"{}\" with {} connections"
argument_list|,
name|this
operator|.
name|connectionPoolId
argument_list|,
name|this
operator|.
name|minSize
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the maximum number of connections allowed in this pool.    *    * @return Maximum number of connections.    */
DECL|method|getMaxSize ()
specifier|protected
name|int
name|getMaxSize
parameter_list|()
block|{
return|return
name|this
operator|.
name|maxSize
return|;
block|}
comment|/**    * Get the minimum number of connections in this pool.    *    * @return Minimum number of connections.    */
DECL|method|getMinSize ()
specifier|protected
name|int
name|getMinSize
parameter_list|()
block|{
return|return
name|this
operator|.
name|minSize
return|;
block|}
comment|/**    * Get the minimum ratio of active connections in this pool.    *    * @return Minimum ratio of active connections.    */
DECL|method|getMinActiveRatio ()
specifier|protected
name|float
name|getMinActiveRatio
parameter_list|()
block|{
return|return
name|this
operator|.
name|minActiveRatio
return|;
block|}
comment|/**    * Get the connection pool identifier.    *    * @return Connection pool identifier.    */
DECL|method|getConnectionPoolId ()
specifier|protected
name|ConnectionPoolId
name|getConnectionPoolId
parameter_list|()
block|{
return|return
name|this
operator|.
name|connectionPoolId
return|;
block|}
comment|/**    * Get the clientIndex used to calculate index for lookup.    * @return Client index.    */
annotation|@
name|VisibleForTesting
DECL|method|getClientIndex ()
specifier|public
name|AtomicInteger
name|getClientIndex
parameter_list|()
block|{
return|return
name|this
operator|.
name|clientIndex
return|;
block|}
comment|/**    * Return the next connection round-robin.    *    * @return Connection context.    */
DECL|method|getConnection ()
specifier|protected
name|ConnectionContext
name|getConnection
parameter_list|()
block|{
name|this
operator|.
name|lastActiveTime
operator|=
name|Time
operator|.
name|now
argument_list|()
expr_stmt|;
comment|// Get a connection from the pool following round-robin
name|ConnectionContext
name|conn
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|ConnectionContext
argument_list|>
name|tmpConnections
init|=
name|this
operator|.
name|connections
decl_stmt|;
name|int
name|size
init|=
name|tmpConnections
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// Inc and mask off sign bit, lookup index should be non-negative int
name|int
name|threadIndex
init|=
name|this
operator|.
name|clientIndex
operator|.
name|getAndIncrement
argument_list|()
operator|&
literal|0x7FFFFFFF
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|int
name|index
init|=
operator|(
name|threadIndex
operator|+
name|i
operator|)
operator|%
name|size
decl_stmt|;
name|conn
operator|=
name|tmpConnections
operator|.
name|get
argument_list|(
name|index
argument_list|)
expr_stmt|;
if|if
condition|(
name|conn
operator|!=
literal|null
operator|&&
name|conn
operator|.
name|isUsable
argument_list|()
condition|)
block|{
return|return
name|conn
return|;
block|}
block|}
comment|// We return a connection even if it's active
return|return
name|conn
return|;
block|}
comment|/**    * Add a connection to the current pool. It uses a Copy-On-Write approach.    *    * @param conn New connection to add to the pool.    */
DECL|method|addConnection (ConnectionContext conn)
specifier|public
specifier|synchronized
name|void
name|addConnection
parameter_list|(
name|ConnectionContext
name|conn
parameter_list|)
block|{
name|List
argument_list|<
name|ConnectionContext
argument_list|>
name|tmpConnections
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|this
operator|.
name|connections
argument_list|)
decl_stmt|;
name|tmpConnections
operator|.
name|add
argument_list|(
name|conn
argument_list|)
expr_stmt|;
name|this
operator|.
name|connections
operator|=
name|tmpConnections
expr_stmt|;
name|this
operator|.
name|lastActiveTime
operator|=
name|Time
operator|.
name|now
argument_list|()
expr_stmt|;
block|}
comment|/**    * Remove connections from the current pool.    *    * @param num Number of connections to remove.    * @return Removed connections.    */
DECL|method|removeConnections (int num)
specifier|public
specifier|synchronized
name|List
argument_list|<
name|ConnectionContext
argument_list|>
name|removeConnections
parameter_list|(
name|int
name|num
parameter_list|)
block|{
name|List
argument_list|<
name|ConnectionContext
argument_list|>
name|removed
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Remove and close the last connection
name|List
argument_list|<
name|ConnectionContext
argument_list|>
name|tmpConnections
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|this
operator|.
name|connections
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ConnectionContext
name|conn
init|=
name|this
operator|.
name|connections
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|<
name|this
operator|.
name|minSize
operator|||
name|i
operator|<
name|this
operator|.
name|connections
operator|.
name|size
argument_list|()
operator|-
name|num
condition|)
block|{
name|tmpConnections
operator|.
name|add
argument_list|(
name|conn
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|removed
operator|.
name|add
argument_list|(
name|conn
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|connections
operator|=
name|tmpConnections
expr_stmt|;
return|return
name|removed
return|;
block|}
comment|/**    * Close the connection pool.    */
DECL|method|close ()
specifier|protected
specifier|synchronized
name|void
name|close
parameter_list|()
block|{
name|long
name|timeSinceLastActive
init|=
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toSeconds
argument_list|(
name|Time
operator|.
name|now
argument_list|()
operator|-
name|getLastActiveTime
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Shutting down connection pool \"{}\" used {} seconds ago"
argument_list|,
name|this
operator|.
name|connectionPoolId
argument_list|,
name|timeSinceLastActive
argument_list|)
expr_stmt|;
for|for
control|(
name|ConnectionContext
name|connection
range|:
name|this
operator|.
name|connections
control|)
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|connections
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**    * Number of connections in the pool.    *    * @return Number of connections.    */
DECL|method|getNumConnections ()
specifier|protected
name|int
name|getNumConnections
parameter_list|()
block|{
return|return
name|this
operator|.
name|connections
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**    * Number of active connections in the pool.    *    * @return Number of active connections.    */
DECL|method|getNumActiveConnections ()
specifier|protected
name|int
name|getNumActiveConnections
parameter_list|()
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|ConnectionContext
argument_list|>
name|tmpConnections
init|=
name|this
operator|.
name|connections
decl_stmt|;
for|for
control|(
name|ConnectionContext
name|conn
range|:
name|tmpConnections
control|)
block|{
if|if
condition|(
name|conn
operator|.
name|isActive
argument_list|()
condition|)
block|{
name|ret
operator|++
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
comment|/**    * Get the last time the connection pool was used.    *    * @return Last time the connection pool was used.    */
DECL|method|getLastActiveTime ()
specifier|protected
name|long
name|getLastActiveTime
parameter_list|()
block|{
return|return
name|this
operator|.
name|lastActiveTime
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|this
operator|.
name|connectionPoolId
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * JSON representation of the connection pool.    *    * @return String representation of the JSON.    */
DECL|method|getJSON ()
specifier|public
name|String
name|getJSON
parameter_list|()
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|info
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|info
operator|.
name|put
argument_list|(
literal|"active"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|getNumActiveConnections
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|put
argument_list|(
literal|"total"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|getNumConnections
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|ConnectionContext
argument_list|>
name|tmpConnections
init|=
name|this
operator|.
name|connections
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tmpConnections
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ConnectionContext
name|connection
init|=
name|tmpConnections
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|info
operator|.
name|put
argument_list|(
name|i
operator|+
literal|" active"
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|connection
operator|.
name|isActive
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|put
argument_list|(
name|i
operator|+
literal|" closed"
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|connection
operator|.
name|isClosed
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|JSON
operator|.
name|toString
argument_list|(
name|info
argument_list|)
return|;
block|}
comment|/**    * Create a new proxy wrapper for a client NN connection.    * @return Proxy for the target ClientProtocol that contains the user's    *         security context.    * @throws IOException If it cannot get a new connection.    */
DECL|method|newConnection ()
specifier|public
name|ConnectionContext
name|newConnection
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|newConnection
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|this
operator|.
name|namenodeAddress
argument_list|,
name|this
operator|.
name|ugi
argument_list|,
name|this
operator|.
name|protocol
argument_list|)
return|;
block|}
comment|/**    * Creates a proxy wrapper for a client NN connection. Each proxy contains    * context for a single user/security context. To maximize throughput it is    * recommended to use multiple connection per user+server, allowing multiple    * writes and reads to be dispatched in parallel.    * @param<T>    *    * @param conf Configuration for the connection.    * @param nnAddress Address of server supporting the ClientProtocol.    * @param ugi User context.    * @param proto Interface of the protocol.    * @return proto for the target ClientProtocol that contains the user's    *         security context.    * @throws IOException If it cannot be created.    */
DECL|method|newConnection (Configuration conf, String nnAddress, UserGroupInformation ugi, Class<T> proto)
specifier|protected
specifier|static
parameter_list|<
name|T
parameter_list|>
name|ConnectionContext
name|newConnection
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|nnAddress
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|proto
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|PROTO_MAP
operator|.
name|containsKey
argument_list|(
name|proto
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
literal|"Unsupported protocol for connection to NameNode: "
operator|+
operator|(
operator|(
name|proto
operator|!=
literal|null
operator|)
condition|?
name|proto
operator|.
name|getName
argument_list|()
else|:
literal|"null"
operator|)
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|ProtoImpl
name|classes
init|=
name|PROTO_MAP
operator|.
name|get
argument_list|(
name|proto
argument_list|)
decl_stmt|;
name|RPC
operator|.
name|setProtocolEngine
argument_list|(
name|conf
argument_list|,
name|classes
operator|.
name|protoPb
argument_list|,
name|ProtobufRpcEngine
operator|.
name|class
argument_list|)
expr_stmt|;
specifier|final
name|RetryPolicy
name|defaultPolicy
init|=
name|RetryUtils
operator|.
name|getDefaultRetryPolicy
argument_list|(
name|conf
argument_list|,
name|HdfsClientConfigKeys
operator|.
name|Retry
operator|.
name|POLICY_ENABLED_KEY
argument_list|,
name|HdfsClientConfigKeys
operator|.
name|Retry
operator|.
name|POLICY_ENABLED_DEFAULT
argument_list|,
name|HdfsClientConfigKeys
operator|.
name|Retry
operator|.
name|POLICY_SPEC_KEY
argument_list|,
name|HdfsClientConfigKeys
operator|.
name|Retry
operator|.
name|POLICY_SPEC_DEFAULT
argument_list|,
name|HdfsConstants
operator|.
name|SAFEMODE_EXCEPTION_CLASS_NAME
argument_list|)
decl_stmt|;
name|SocketFactory
name|factory
init|=
name|SocketFactory
operator|.
name|getDefault
argument_list|()
decl_stmt|;
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
name|SaslRpcServer
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
name|InetSocketAddress
name|socket
init|=
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|nnAddress
argument_list|)
decl_stmt|;
specifier|final
name|long
name|version
init|=
name|RPC
operator|.
name|getProtocolVersion
argument_list|(
name|classes
operator|.
name|protoPb
argument_list|)
decl_stmt|;
name|Object
name|proxy
init|=
name|RPC
operator|.
name|getProtocolProxy
argument_list|(
name|classes
operator|.
name|protoPb
argument_list|,
name|version
argument_list|,
name|socket
argument_list|,
name|ugi
argument_list|,
name|conf
argument_list|,
name|factory
argument_list|,
name|RPC
operator|.
name|getRpcTimeout
argument_list|(
name|conf
argument_list|)
argument_list|,
name|defaultPolicy
argument_list|,
literal|null
argument_list|)
operator|.
name|getProxy
argument_list|()
decl_stmt|;
name|T
name|client
init|=
name|newProtoClient
argument_list|(
name|proto
argument_list|,
name|classes
argument_list|,
name|proxy
argument_list|)
decl_stmt|;
name|Text
name|dtService
init|=
name|SecurityUtil
operator|.
name|buildTokenService
argument_list|(
name|socket
argument_list|)
decl_stmt|;
name|ProxyAndInfo
argument_list|<
name|T
argument_list|>
name|clientProxy
init|=
operator|new
name|ProxyAndInfo
argument_list|<
name|T
argument_list|>
argument_list|(
name|client
argument_list|,
name|dtService
argument_list|,
name|socket
argument_list|)
decl_stmt|;
name|ConnectionContext
name|connection
init|=
operator|new
name|ConnectionContext
argument_list|(
name|clientProxy
argument_list|)
decl_stmt|;
return|return
name|connection
return|;
block|}
DECL|method|newProtoClient (Class<T> proto, ProtoImpl classes, Object proxy)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|newProtoClient
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|proto
parameter_list|,
name|ProtoImpl
name|classes
parameter_list|,
name|Object
name|proxy
parameter_list|)
block|{
try|try
block|{
name|Constructor
argument_list|<
name|?
argument_list|>
name|constructor
init|=
name|classes
operator|.
name|protoClientPb
operator|.
name|getConstructor
argument_list|(
name|classes
operator|.
name|protoPb
argument_list|)
decl_stmt|;
name|Object
name|o
init|=
name|constructor
operator|.
name|newInstance
argument_list|(
operator|new
name|Object
index|[]
block|{
name|proxy
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|isAssignableFrom
argument_list|(
name|o
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|T
name|client
init|=
operator|(
name|T
operator|)
name|o
decl_stmt|;
return|return
name|client
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

