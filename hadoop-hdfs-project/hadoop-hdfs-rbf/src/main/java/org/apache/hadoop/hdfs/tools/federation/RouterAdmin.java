begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.tools.federation
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|federation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|MountTableManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|RemoteLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|order
operator|.
name|DestinationOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
operator|.
name|NameserviceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
operator|.
name|RBFConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
operator|.
name|RouterClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
operator|.
name|RouterQuotaUsage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
operator|.
name|RouterStateManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|AddMountTableEntryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|AddMountTableEntryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|DisableNameserviceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|DisableNameserviceResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|EnableNameserviceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|EnableNameserviceResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|EnterSafeModeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|EnterSafeModeResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|GetDisabledNameservicesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|GetDisabledNameservicesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|GetDestinationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|GetDestinationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|GetMountTableEntriesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|GetMountTableEntriesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|GetSafeModeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|GetSafeModeResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|LeaveSafeModeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|LeaveSafeModeResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|RefreshMountTableEntriesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|RefreshMountTableEntriesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|RemoveMountTableEntryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|RemoveMountTableEntryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|UpdateMountTableEntryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|UpdateMountTableEntryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|MountTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtobufRpcEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RefreshResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|protocolPB
operator|.
name|GenericRefreshProtocolClientSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|protocolPB
operator|.
name|GenericRefreshProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This class provides some Federation administrative access shell commands.  */
end_comment

begin_class
annotation|@
name|Private
DECL|class|RouterAdmin
specifier|public
class|class
name|RouterAdmin
extends|extends
name|Configured
implements|implements
name|Tool
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RouterAdmin
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|client
specifier|private
name|RouterClient
name|client
decl_stmt|;
comment|/** Pre-compiled regular expressions to detect duplicated slashes. */
DECL|field|SLASHES
specifier|private
specifier|static
specifier|final
name|Pattern
name|SLASHES
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"/+"
argument_list|)
decl_stmt|;
DECL|method|main (String[] argv)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|argv
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|RouterAdmin
name|admin
init|=
operator|new
name|RouterAdmin
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|int
name|res
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|admin
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
DECL|method|RouterAdmin (Configuration conf)
specifier|public
name|RouterAdmin
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Print the usage message.    */
DECL|method|printUsage ()
specifier|public
name|void
name|printUsage
parameter_list|()
block|{
name|String
name|usage
init|=
name|getUsage
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|usage
argument_list|)
expr_stmt|;
block|}
DECL|method|printUsage (String cmd)
specifier|private
name|void
name|printUsage
parameter_list|(
name|String
name|cmd
parameter_list|)
block|{
name|String
name|usage
init|=
name|getUsage
argument_list|(
name|cmd
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|usage
argument_list|)
expr_stmt|;
block|}
DECL|method|getUsage (String cmd)
specifier|private
name|String
name|getUsage
parameter_list|(
name|String
name|cmd
parameter_list|)
block|{
if|if
condition|(
name|cmd
operator|==
literal|null
condition|)
block|{
name|String
index|[]
name|commands
init|=
block|{
literal|"-add"
block|,
literal|"-update"
block|,
literal|"-rm"
block|,
literal|"-ls"
block|,
literal|"-getDestination"
block|,
literal|"-setQuota"
block|,
literal|"-clrQuota"
block|,
literal|"-safemode"
block|,
literal|"-nameservice"
block|,
literal|"-getDisabledNameservices"
block|,
literal|"-refresh"
block|,
literal|"-refreshRouterArgs"
block|}
decl_stmt|;
name|StringBuilder
name|usage
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|usage
operator|.
name|append
argument_list|(
literal|"Usage: hdfs dfsrouteradmin :\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|commands
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|usage
operator|.
name|append
argument_list|(
name|getUsage
argument_list|(
name|commands
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|+
literal|1
operator|<
name|commands
operator|.
name|length
condition|)
block|{
name|usage
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|usage
operator|.
name|toString
argument_list|()
return|;
block|}
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"-add"
argument_list|)
condition|)
block|{
return|return
literal|"\t[-add<source><nameservice1, nameservice2, ...><destination> "
operator|+
literal|"[-readonly] [-faulttolerant] "
operator|+
literal|"[-order HASH|LOCAL|RANDOM|HASH_ALL|SPACE] "
operator|+
literal|"-owner<owner> -group<group> -mode<mode>]"
return|;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"-update"
argument_list|)
condition|)
block|{
return|return
literal|"\t[-update<source>"
operator|+
literal|" [<nameservice1, nameservice2, ...><destination>] "
operator|+
literal|"[-readonly true|false] [-faulttolerant true|false] "
operator|+
literal|"[-order HASH|LOCAL|RANDOM|HASH_ALL|SPACE] "
operator|+
literal|"-owner<owner> -group<group> -mode<mode>]"
return|;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"-rm"
argument_list|)
condition|)
block|{
return|return
literal|"\t[-rm<source>]"
return|;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"-ls"
argument_list|)
condition|)
block|{
return|return
literal|"\t[-ls<path>]"
return|;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"-getDestination"
argument_list|)
condition|)
block|{
return|return
literal|"\t[-getDestination<path>]"
return|;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"-setQuota"
argument_list|)
condition|)
block|{
return|return
literal|"\t[-setQuota<path> -nsQuota<nsQuota> -ssQuota "
operator|+
literal|"<quota in bytes or quota size string>]"
return|;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"-clrQuota"
argument_list|)
condition|)
block|{
return|return
literal|"\t[-clrQuota<path>]"
return|;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"-safemode"
argument_list|)
condition|)
block|{
return|return
literal|"\t[-safemode enter | leave | get]"
return|;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"-nameservice"
argument_list|)
condition|)
block|{
return|return
literal|"\t[-nameservice enable | disable<nameservice>]"
return|;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"-getDisabledNameservices"
argument_list|)
condition|)
block|{
return|return
literal|"\t[-getDisabledNameservices]"
return|;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"-refresh"
argument_list|)
condition|)
block|{
return|return
literal|"\t[-refresh]"
return|;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"-refreshRouterArgs"
argument_list|)
condition|)
block|{
return|return
literal|"\t[-refreshRouterArgs<host:ipc_port><key> [arg1..argn]]"
return|;
block|}
return|return
name|getUsage
argument_list|(
literal|null
argument_list|)
return|;
block|}
comment|/**    * Usage: validates the maximum number of arguments for a command.    * @param arg List of of command line parameters.    */
DECL|method|validateMax (String[] arg)
specifier|private
name|void
name|validateMax
parameter_list|(
name|String
index|[]
name|arg
parameter_list|)
block|{
if|if
condition|(
name|arg
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"-ls"
argument_list|)
condition|)
block|{
if|if
condition|(
name|arg
operator|.
name|length
operator|>
literal|2
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Too many arguments, Max=1 argument allowed"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|arg
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"-getDestination"
argument_list|)
condition|)
block|{
if|if
condition|(
name|arg
operator|.
name|length
operator|>
literal|2
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Too many arguments, Max=1 argument allowed only"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|arg
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"-safemode"
argument_list|)
condition|)
block|{
if|if
condition|(
name|arg
operator|.
name|length
operator|>
literal|2
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Too many arguments, Max=1 argument allowed only"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|arg
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"-nameservice"
argument_list|)
condition|)
block|{
if|if
condition|(
name|arg
operator|.
name|length
operator|>
literal|3
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Too many arguments, Max=2 arguments allowed"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|arg
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"-getDisabledNameservices"
argument_list|)
condition|)
block|{
if|if
condition|(
name|arg
operator|.
name|length
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No arguments allowed"
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Usage: validates the minimum number of arguments for a command.    * @param argv List of of command line parameters.    * @return true if number of arguments are valid for the command else false.    */
DECL|method|validateMin (String[] argv)
specifier|private
name|boolean
name|validateMin
parameter_list|(
name|String
index|[]
name|argv
parameter_list|)
block|{
name|String
name|cmd
init|=
name|argv
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
literal|"-add"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|argv
operator|.
name|length
operator|<
literal|4
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"-update"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|argv
operator|.
name|length
operator|<
literal|4
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"-rm"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|argv
operator|.
name|length
operator|<
literal|2
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"-getDestination"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|argv
operator|.
name|length
operator|<
literal|2
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"-setQuota"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|argv
operator|.
name|length
operator|<
literal|4
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"-clrQuota"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|argv
operator|.
name|length
operator|<
literal|2
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"-safemode"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|argv
operator|.
name|length
operator|<
literal|2
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"-nameservice"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|argv
operator|.
name|length
operator|<
literal|3
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"-refreshRouterArgs"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|argv
operator|.
name|length
operator|<
literal|2
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|run (String[] argv)
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|argv
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|argv
operator|.
name|length
operator|<
literal|1
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Not enough parameters specified"
argument_list|)
expr_stmt|;
name|printUsage
argument_list|()
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|int
name|exitCode
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|String
name|cmd
init|=
name|argv
index|[
name|i
operator|++
index|]
decl_stmt|;
comment|// Verify that we have enough command line parameters
if|if
condition|(
operator|!
name|validateMin
argument_list|(
name|argv
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Not enough parameters specificed for cmd "
operator|+
name|cmd
argument_list|)
expr_stmt|;
name|printUsage
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
name|String
name|address
init|=
literal|null
decl_stmt|;
comment|// Initialize RouterClient
try|try
block|{
name|address
operator|=
name|getConf
argument_list|()
operator|.
name|getTrimmed
argument_list|(
name|RBFConfigKeys
operator|.
name|DFS_ROUTER_ADMIN_ADDRESS_KEY
argument_list|,
name|RBFConfigKeys
operator|.
name|DFS_ROUTER_ADMIN_ADDRESS_DEFAULT
argument_list|)
expr_stmt|;
name|InetSocketAddress
name|routerSocket
init|=
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|address
argument_list|)
decl_stmt|;
name|client
operator|=
operator|new
name|RouterClient
argument_list|(
name|routerSocket
argument_list|,
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RPC
operator|.
name|VersionMismatch
name|v
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Version mismatch between client and server... command aborted"
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Bad connection to Router... command aborted"
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
name|Exception
name|debugException
init|=
literal|null
decl_stmt|;
name|exitCode
operator|=
literal|0
expr_stmt|;
try|try
block|{
name|validateMax
argument_list|(
name|argv
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"-add"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|addMount
argument_list|(
name|argv
argument_list|,
name|i
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Successfully added mount point "
operator|+
name|argv
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|exitCode
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"-update"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|updateMount
argument_list|(
name|argv
argument_list|,
name|i
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Successfully updated mount point "
operator|+
name|argv
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"WARN: Changing order/destinations may lead to inconsistencies"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|exitCode
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"-rm"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
while|while
condition|(
name|i
operator|<
name|argv
operator|.
name|length
condition|)
block|{
try|try
block|{
if|if
condition|(
name|removeMount
argument_list|(
name|argv
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Successfully removed mount point "
operator|+
name|argv
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exitCode
operator|=
operator|-
literal|1
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|": "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|i
operator|++
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"-ls"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|argv
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|listMounts
argument_list|(
name|argv
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|listMounts
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"-getDestination"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|getDestination
argument_list|(
name|argv
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-setQuota"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|setQuota
argument_list|(
name|argv
argument_list|,
name|i
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Successfully set quota for mount point "
operator|+
name|argv
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"-clrQuota"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
while|while
condition|(
name|i
operator|<
name|argv
operator|.
name|length
condition|)
block|{
if|if
condition|(
name|clrQuota
argument_list|(
name|argv
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Successfully clear quota for mount point "
operator|+
name|argv
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
literal|"-safemode"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|manageSafeMode
argument_list|(
name|argv
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-nameservice"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|String
name|subcmd
init|=
name|argv
index|[
name|i
index|]
decl_stmt|;
name|String
name|nsId
init|=
name|argv
index|[
name|i
operator|+
literal|1
index|]
decl_stmt|;
name|manageNameservice
argument_list|(
name|subcmd
argument_list|,
name|nsId
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-getDisabledNameservices"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|getDisabledNameservices
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-refresh"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|refresh
argument_list|(
name|address
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-refreshRouterArgs"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|exitCode
operator|=
name|genericRefresh
argument_list|(
name|argv
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown Command: "
operator|+
name|cmd
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|arge
parameter_list|)
block|{
name|debugException
operator|=
name|arge
expr_stmt|;
name|exitCode
operator|=
operator|-
literal|1
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|": "
operator|+
name|arge
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
name|printUsage
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|e
parameter_list|)
block|{
comment|// This is a error returned by the server.
comment|// Print out the first line of the error message, ignore the stack trace.
name|exitCode
operator|=
operator|-
literal|1
expr_stmt|;
name|debugException
operator|=
name|e
expr_stmt|;
try|try
block|{
name|String
index|[]
name|content
decl_stmt|;
name|content
operator|=
name|e
operator|.
name|getLocalizedMessage
argument_list|()
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|": "
operator|+
name|content
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|": "
operator|+
name|ex
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|debugException
operator|=
name|ex
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|exitCode
operator|=
operator|-
literal|1
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|": "
operator|+
name|ioe
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
name|printUsage
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exitCode
operator|=
operator|-
literal|1
expr_stmt|;
name|debugException
operator|=
name|e
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|": "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|debugException
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Exception encountered"
argument_list|,
name|debugException
argument_list|)
expr_stmt|;
block|}
return|return
name|exitCode
return|;
block|}
DECL|method|refresh (String address)
specifier|private
name|void
name|refresh
parameter_list|(
name|String
name|address
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|refreshRouterCache
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Successfully updated mount table cache on router "
operator|+
name|address
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Refresh mount table cache on connected router.    *    * @return true if cache refreshed successfully    * @throws IOException    */
DECL|method|refreshRouterCache ()
specifier|private
name|boolean
name|refreshRouterCache
parameter_list|()
throws|throws
name|IOException
block|{
name|RefreshMountTableEntriesResponse
name|response
init|=
name|client
operator|.
name|getMountTableManager
argument_list|()
operator|.
name|refreshMountTableEntries
argument_list|(
name|RefreshMountTableEntriesRequest
operator|.
name|newInstance
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|response
operator|.
name|getResult
argument_list|()
return|;
block|}
comment|/**    * Add a mount table entry or update if it exists.    *    * @param parameters Parameters for the mount point.    * @param i Index in the parameters.    * @return If it was successful.    * @throws IOException If it cannot add the mount point.    */
DECL|method|addMount (String[] parameters, int i)
specifier|public
name|boolean
name|addMount
parameter_list|(
name|String
index|[]
name|parameters
parameter_list|,
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Mandatory parameters
name|String
name|mount
init|=
name|parameters
index|[
name|i
operator|++
index|]
decl_stmt|;
name|String
index|[]
name|nss
init|=
name|parameters
index|[
name|i
operator|++
index|]
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|String
name|dest
init|=
name|parameters
index|[
name|i
operator|++
index|]
decl_stmt|;
comment|// Optional parameters
name|boolean
name|readOnly
init|=
literal|false
decl_stmt|;
name|boolean
name|faultTolerant
init|=
literal|false
decl_stmt|;
name|String
name|owner
init|=
literal|null
decl_stmt|;
name|String
name|group
init|=
literal|null
decl_stmt|;
name|FsPermission
name|mode
init|=
literal|null
decl_stmt|;
name|DestinationOrder
name|order
init|=
name|DestinationOrder
operator|.
name|HASH
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|parameters
operator|.
name|length
condition|)
block|{
if|if
condition|(
name|parameters
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-readonly"
argument_list|)
condition|)
block|{
name|readOnly
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parameters
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-faulttolerant"
argument_list|)
condition|)
block|{
name|faultTolerant
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parameters
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-order"
argument_list|)
condition|)
block|{
name|i
operator|++
expr_stmt|;
try|try
block|{
name|order
operator|=
name|DestinationOrder
operator|.
name|valueOf
argument_list|(
name|parameters
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Cannot parse order: "
operator|+
name|parameters
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|parameters
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-owner"
argument_list|)
condition|)
block|{
name|i
operator|++
expr_stmt|;
name|owner
operator|=
name|parameters
index|[
name|i
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parameters
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-group"
argument_list|)
condition|)
block|{
name|i
operator|++
expr_stmt|;
name|group
operator|=
name|parameters
index|[
name|i
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parameters
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-mode"
argument_list|)
condition|)
block|{
name|i
operator|++
expr_stmt|;
name|short
name|modeValue
init|=
name|Short
operator|.
name|parseShort
argument_list|(
name|parameters
index|[
name|i
index|]
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|mode
operator|=
operator|new
name|FsPermission
argument_list|(
name|modeValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|printUsage
argument_list|(
literal|"-add"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|i
operator|++
expr_stmt|;
block|}
return|return
name|addMount
argument_list|(
name|mount
argument_list|,
name|nss
argument_list|,
name|dest
argument_list|,
name|readOnly
argument_list|,
name|faultTolerant
argument_list|,
name|order
argument_list|,
operator|new
name|ACLEntity
argument_list|(
name|owner
argument_list|,
name|group
argument_list|,
name|mode
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Add a mount table entry or update if it exists.    *    * @param mount Mount point.    * @param nss Namespaces where this is mounted to.    * @param dest Destination path.    * @param readonly If the mount point is read only.    * @param order Order of the destination locations.    * @param aclInfo the ACL info for mount point.    * @return If the mount point was added.    * @throws IOException Error adding the mount point.    */
DECL|method|addMount (String mount, String[] nss, String dest, boolean readonly, boolean faultTolerant, DestinationOrder order, ACLEntity aclInfo)
specifier|public
name|boolean
name|addMount
parameter_list|(
name|String
name|mount
parameter_list|,
name|String
index|[]
name|nss
parameter_list|,
name|String
name|dest
parameter_list|,
name|boolean
name|readonly
parameter_list|,
name|boolean
name|faultTolerant
parameter_list|,
name|DestinationOrder
name|order
parameter_list|,
name|ACLEntity
name|aclInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|mount
operator|=
name|normalizeFileSystemPath
argument_list|(
name|mount
argument_list|)
expr_stmt|;
comment|// Get the existing entry
name|MountTableManager
name|mountTable
init|=
name|client
operator|.
name|getMountTableManager
argument_list|()
decl_stmt|;
name|MountTable
name|existingEntry
init|=
name|getMountEntry
argument_list|(
name|mount
argument_list|,
name|mountTable
argument_list|)
decl_stmt|;
if|if
condition|(
name|existingEntry
operator|==
literal|null
condition|)
block|{
comment|// Create and add the entry if it doesn't exist
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|destMap
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|ns
range|:
name|nss
control|)
block|{
name|destMap
operator|.
name|put
argument_list|(
name|ns
argument_list|,
name|dest
argument_list|)
expr_stmt|;
block|}
name|MountTable
name|newEntry
init|=
name|MountTable
operator|.
name|newInstance
argument_list|(
name|mount
argument_list|,
name|destMap
argument_list|)
decl_stmt|;
if|if
condition|(
name|readonly
condition|)
block|{
name|newEntry
operator|.
name|setReadOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|faultTolerant
condition|)
block|{
name|newEntry
operator|.
name|setFaultTolerant
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|order
operator|!=
literal|null
condition|)
block|{
name|newEntry
operator|.
name|setDestOrder
argument_list|(
name|order
argument_list|)
expr_stmt|;
block|}
comment|// Set ACL info for mount table entry
if|if
condition|(
name|aclInfo
operator|.
name|getOwner
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|newEntry
operator|.
name|setOwnerName
argument_list|(
name|aclInfo
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|aclInfo
operator|.
name|getGroup
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|newEntry
operator|.
name|setGroupName
argument_list|(
name|aclInfo
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|aclInfo
operator|.
name|getMode
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|newEntry
operator|.
name|setMode
argument_list|(
name|aclInfo
operator|.
name|getMode
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|newEntry
operator|.
name|validate
argument_list|()
expr_stmt|;
name|AddMountTableEntryRequest
name|request
init|=
name|AddMountTableEntryRequest
operator|.
name|newInstance
argument_list|(
name|newEntry
argument_list|)
decl_stmt|;
name|AddMountTableEntryResponse
name|addResponse
init|=
name|mountTable
operator|.
name|addMountTableEntry
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|boolean
name|added
init|=
name|addResponse
operator|.
name|getStatus
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|added
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Cannot add mount point "
operator|+
name|mount
argument_list|)
expr_stmt|;
block|}
return|return
name|added
return|;
block|}
else|else
block|{
comment|// Update the existing entry if it exists
for|for
control|(
name|String
name|nsId
range|:
name|nss
control|)
block|{
if|if
condition|(
operator|!
name|existingEntry
operator|.
name|addDestination
argument_list|(
name|nsId
argument_list|,
name|dest
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Cannot add destination at "
operator|+
name|nsId
operator|+
literal|" "
operator|+
name|dest
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|readonly
condition|)
block|{
name|existingEntry
operator|.
name|setReadOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|faultTolerant
condition|)
block|{
name|existingEntry
operator|.
name|setFaultTolerant
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|order
operator|!=
literal|null
condition|)
block|{
name|existingEntry
operator|.
name|setDestOrder
argument_list|(
name|order
argument_list|)
expr_stmt|;
block|}
comment|// Update ACL info of mount table entry
if|if
condition|(
name|aclInfo
operator|.
name|getOwner
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|existingEntry
operator|.
name|setOwnerName
argument_list|(
name|aclInfo
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|aclInfo
operator|.
name|getGroup
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|existingEntry
operator|.
name|setGroupName
argument_list|(
name|aclInfo
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|aclInfo
operator|.
name|getMode
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|existingEntry
operator|.
name|setMode
argument_list|(
name|aclInfo
operator|.
name|getMode
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|existingEntry
operator|.
name|validate
argument_list|()
expr_stmt|;
name|UpdateMountTableEntryRequest
name|updateRequest
init|=
name|UpdateMountTableEntryRequest
operator|.
name|newInstance
argument_list|(
name|existingEntry
argument_list|)
decl_stmt|;
name|UpdateMountTableEntryResponse
name|updateResponse
init|=
name|mountTable
operator|.
name|updateMountTableEntry
argument_list|(
name|updateRequest
argument_list|)
decl_stmt|;
name|boolean
name|updated
init|=
name|updateResponse
operator|.
name|getStatus
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|updated
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Cannot update mount point "
operator|+
name|mount
argument_list|)
expr_stmt|;
block|}
return|return
name|updated
return|;
block|}
block|}
comment|/**    * Update a mount table entry.    *    * @param parameters Parameters for the mount point.    * @param i Index in the parameters.    * @return If it updated the mount point successfully.    * @throws IOException If there is an error.    */
DECL|method|updateMount (String[] parameters, int i)
specifier|public
name|boolean
name|updateMount
parameter_list|(
name|String
index|[]
name|parameters
parameter_list|,
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|mount
init|=
name|parameters
index|[
name|i
operator|++
index|]
decl_stmt|;
name|mount
operator|=
name|normalizeFileSystemPath
argument_list|(
name|mount
argument_list|)
expr_stmt|;
name|MountTableManager
name|mountTable
init|=
name|client
operator|.
name|getMountTableManager
argument_list|()
decl_stmt|;
name|MountTable
name|existingEntry
init|=
name|getMountEntry
argument_list|(
name|mount
argument_list|,
name|mountTable
argument_list|)
decl_stmt|;
if|if
condition|(
name|existingEntry
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|mount
operator|+
literal|" doesn't exist."
argument_list|)
throw|;
block|}
comment|// Check if the destination needs to be updated.
if|if
condition|(
operator|!
name|parameters
index|[
name|i
index|]
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|String
index|[]
name|nss
init|=
name|parameters
index|[
name|i
operator|++
index|]
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|String
name|dest
init|=
name|parameters
index|[
name|i
operator|++
index|]
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|destMap
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|ns
range|:
name|nss
control|)
block|{
name|destMap
operator|.
name|put
argument_list|(
name|ns
argument_list|,
name|dest
argument_list|)
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|locations
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|destMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|nsId
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|normalizeFileSystemPath
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|RemoteLocation
name|location
init|=
operator|new
name|RemoteLocation
argument_list|(
name|nsId
argument_list|,
name|path
argument_list|,
name|mount
argument_list|)
decl_stmt|;
name|locations
operator|.
name|add
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
name|existingEntry
operator|.
name|setDestinations
argument_list|(
name|locations
argument_list|)
expr_stmt|;
block|}
try|try
block|{
while|while
condition|(
name|i
operator|<
name|parameters
operator|.
name|length
condition|)
block|{
switch|switch
condition|(
name|parameters
index|[
name|i
index|]
condition|)
block|{
case|case
literal|"-readonly"
case|:
name|i
operator|++
expr_stmt|;
name|existingEntry
operator|.
name|setReadOnly
argument_list|(
name|getBooleanValue
argument_list|(
name|parameters
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"-faulttolerant"
case|:
name|i
operator|++
expr_stmt|;
name|existingEntry
operator|.
name|setFaultTolerant
argument_list|(
name|getBooleanValue
argument_list|(
name|parameters
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"-order"
case|:
name|i
operator|++
expr_stmt|;
try|try
block|{
name|existingEntry
operator|.
name|setDestOrder
argument_list|(
name|DestinationOrder
operator|.
name|valueOf
argument_list|(
name|parameters
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Cannot parse order: "
operator|+
name|parameters
index|[
name|i
index|]
argument_list|)
throw|;
block|}
case|case
literal|"-owner"
case|:
name|i
operator|++
expr_stmt|;
name|existingEntry
operator|.
name|setOwnerName
argument_list|(
name|parameters
index|[
name|i
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"-group"
case|:
name|i
operator|++
expr_stmt|;
name|existingEntry
operator|.
name|setGroupName
argument_list|(
name|parameters
index|[
name|i
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"-mode"
case|:
name|i
operator|++
expr_stmt|;
name|short
name|modeValue
init|=
name|Short
operator|.
name|parseShort
argument_list|(
name|parameters
index|[
name|i
index|]
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|existingEntry
operator|.
name|setMode
argument_list|(
operator|new
name|FsPermission
argument_list|(
name|modeValue
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
name|printUsage
argument_list|(
literal|"-update"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|i
operator|++
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
throw|throw
name|iae
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Unable to parse arguments: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|ArrayIndexOutOfBoundsException
condition|)
block|{
name|msg
operator|=
literal|"Unable to parse arguments: no value provided for "
operator|+
name|parameters
index|[
name|i
operator|-
literal|1
index|]
expr_stmt|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|UpdateMountTableEntryRequest
name|updateRequest
init|=
name|UpdateMountTableEntryRequest
operator|.
name|newInstance
argument_list|(
name|existingEntry
argument_list|)
decl_stmt|;
name|UpdateMountTableEntryResponse
name|updateResponse
init|=
name|mountTable
operator|.
name|updateMountTableEntry
argument_list|(
name|updateRequest
argument_list|)
decl_stmt|;
name|boolean
name|updated
init|=
name|updateResponse
operator|.
name|getStatus
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|updated
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Cannot update mount point "
operator|+
name|mount
argument_list|)
expr_stmt|;
block|}
return|return
name|updated
return|;
block|}
comment|/**    * Parse string to boolean.    * @param value the string to be parsed.    * @return parsed boolean value.    * @throws Exception if other than true|false is provided.    */
DECL|method|getBooleanValue (String value)
specifier|private
name|boolean
name|getBooleanValue
parameter_list|(
name|String
name|value
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|value
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"true"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"false"
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid argument: "
operator|+
name|value
operator|+
literal|". Please specify either true or false."
argument_list|)
throw|;
block|}
comment|/**    * Gets the mount table entry.    * @param mount name of the mount entry.    * @param mountTable the mount table.    * @return corresponding mount entry.    * @throws IOException in case of failure to retrieve mount entry.    */
DECL|method|getMountEntry (String mount, MountTableManager mountTable)
specifier|private
name|MountTable
name|getMountEntry
parameter_list|(
name|String
name|mount
parameter_list|,
name|MountTableManager
name|mountTable
parameter_list|)
throws|throws
name|IOException
block|{
name|GetMountTableEntriesRequest
name|getRequest
init|=
name|GetMountTableEntriesRequest
operator|.
name|newInstance
argument_list|(
name|mount
argument_list|)
decl_stmt|;
name|GetMountTableEntriesResponse
name|getResponse
init|=
name|mountTable
operator|.
name|getMountTableEntries
argument_list|(
name|getRequest
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|MountTable
argument_list|>
name|results
init|=
name|getResponse
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|MountTable
name|existingEntry
init|=
literal|null
decl_stmt|;
for|for
control|(
name|MountTable
name|result
range|:
name|results
control|)
block|{
if|if
condition|(
name|mount
operator|.
name|equals
argument_list|(
name|result
operator|.
name|getSourcePath
argument_list|()
argument_list|)
condition|)
block|{
name|existingEntry
operator|=
name|result
expr_stmt|;
block|}
block|}
return|return
name|existingEntry
return|;
block|}
comment|/**    * Remove mount point.    *    * @param path Path to remove.    * @return If the mount point was removed successfully.    * @throws IOException If it cannot be removed.    */
DECL|method|removeMount (String path)
specifier|public
name|boolean
name|removeMount
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|path
operator|=
name|normalizeFileSystemPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|MountTableManager
name|mountTable
init|=
name|client
operator|.
name|getMountTableManager
argument_list|()
decl_stmt|;
name|RemoveMountTableEntryRequest
name|request
init|=
name|RemoveMountTableEntryRequest
operator|.
name|newInstance
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|RemoveMountTableEntryResponse
name|response
init|=
name|mountTable
operator|.
name|removeMountTableEntry
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|boolean
name|removed
init|=
name|response
operator|.
name|getStatus
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|removed
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Cannot remove mount point "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
return|return
name|removed
return|;
block|}
comment|/**    * List mount points.    *    * @param path Path to list.    * @throws IOException If it cannot be listed.    */
DECL|method|listMounts (String path)
specifier|public
name|void
name|listMounts
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|path
operator|=
name|normalizeFileSystemPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|MountTableManager
name|mountTable
init|=
name|client
operator|.
name|getMountTableManager
argument_list|()
decl_stmt|;
name|GetMountTableEntriesRequest
name|request
init|=
name|GetMountTableEntriesRequest
operator|.
name|newInstance
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|GetMountTableEntriesResponse
name|response
init|=
name|mountTable
operator|.
name|getMountTableEntries
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|MountTable
argument_list|>
name|entries
init|=
name|response
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|printMounts
argument_list|(
name|entries
argument_list|)
expr_stmt|;
block|}
DECL|method|printMounts (List<MountTable> entries)
specifier|private
specifier|static
name|void
name|printMounts
parameter_list|(
name|List
argument_list|<
name|MountTable
argument_list|>
name|entries
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Mount Table Entries:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%-25s %-25s %-25s %-25s %-25s %-25s"
argument_list|,
literal|"Source"
argument_list|,
literal|"Destinations"
argument_list|,
literal|"Owner"
argument_list|,
literal|"Group"
argument_list|,
literal|"Mode"
argument_list|,
literal|"Quota/Usage"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|MountTable
name|entry
range|:
name|entries
control|)
block|{
name|StringBuilder
name|destBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|RemoteLocation
name|location
range|:
name|entry
operator|.
name|getDestinations
argument_list|()
control|)
block|{
if|if
condition|(
name|destBuilder
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|destBuilder
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|destBuilder
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s->%s"
argument_list|,
name|location
operator|.
name|getNameserviceId
argument_list|()
argument_list|,
name|location
operator|.
name|getDest
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%-25s %-25s"
argument_list|,
name|entry
operator|.
name|getSourcePath
argument_list|()
argument_list|,
name|destBuilder
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|" %-25s %-25s %-25s"
argument_list|,
name|entry
operator|.
name|getOwnerName
argument_list|()
argument_list|,
name|entry
operator|.
name|getGroupName
argument_list|()
argument_list|,
name|entry
operator|.
name|getMode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|" %-25s"
argument_list|,
name|entry
operator|.
name|getQuota
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getDestination (String path)
specifier|private
name|void
name|getDestination
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|path
operator|=
name|normalizeFileSystemPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|MountTableManager
name|mountTable
init|=
name|client
operator|.
name|getMountTableManager
argument_list|()
decl_stmt|;
name|GetDestinationRequest
name|request
init|=
name|GetDestinationRequest
operator|.
name|newInstance
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|GetDestinationResponse
name|response
init|=
name|mountTable
operator|.
name|getDestination
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Destination: "
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|response
operator|.
name|getDestinations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set quota for a mount table entry.    *    * @param parameters Parameters of the quota.    * @param i Index in the parameters.    */
DECL|method|setQuota (String[] parameters, int i)
specifier|private
name|boolean
name|setQuota
parameter_list|(
name|String
index|[]
name|parameters
parameter_list|,
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|nsQuota
init|=
name|HdfsConstants
operator|.
name|QUOTA_DONT_SET
decl_stmt|;
name|long
name|ssQuota
init|=
name|HdfsConstants
operator|.
name|QUOTA_DONT_SET
decl_stmt|;
name|String
name|mount
init|=
name|parameters
index|[
name|i
operator|++
index|]
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|parameters
operator|.
name|length
condition|)
block|{
if|if
condition|(
name|parameters
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-nsQuota"
argument_list|)
condition|)
block|{
name|i
operator|++
expr_stmt|;
try|try
block|{
name|nsQuota
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|parameters
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot parse nsQuota: "
operator|+
name|parameters
index|[
name|i
index|]
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|parameters
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-ssQuota"
argument_list|)
condition|)
block|{
name|i
operator|++
expr_stmt|;
try|try
block|{
name|ssQuota
operator|=
name|StringUtils
operator|.
name|TraditionalBinaryPrefix
operator|.
name|string2long
argument_list|(
name|parameters
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot parse ssQuota: "
operator|+
name|parameters
index|[
name|i
index|]
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid argument : "
operator|+
name|parameters
index|[
name|i
index|]
argument_list|)
throw|;
block|}
name|i
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|nsQuota
operator|<=
literal|0
operator|||
name|ssQuota
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Input quota value should be a positive number."
argument_list|)
throw|;
block|}
if|if
condition|(
name|nsQuota
operator|==
name|HdfsConstants
operator|.
name|QUOTA_DONT_SET
operator|&&
name|ssQuota
operator|==
name|HdfsConstants
operator|.
name|QUOTA_DONT_SET
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Must specify at least one of -nsQuota and -ssQuota."
argument_list|)
throw|;
block|}
return|return
name|updateQuota
argument_list|(
name|mount
argument_list|,
name|nsQuota
argument_list|,
name|ssQuota
argument_list|)
return|;
block|}
comment|/**    * Clear quota of the mount point.    *    * @param mount Mount table to clear    * @return If the quota was cleared.    * @throws IOException Error clearing the mount point.    */
DECL|method|clrQuota (String mount)
specifier|private
name|boolean
name|clrQuota
parameter_list|(
name|String
name|mount
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|updateQuota
argument_list|(
name|mount
argument_list|,
name|HdfsConstants
operator|.
name|QUOTA_RESET
argument_list|,
name|HdfsConstants
operator|.
name|QUOTA_RESET
argument_list|)
return|;
block|}
comment|/**    * Update quota of specified mount table.    *    * @param mount Specified mount table to update.    * @param nsQuota Namespace quota.    * @param ssQuota Storage space quota.    * @return If the quota was updated.    * @throws IOException Error updating quota.    */
DECL|method|updateQuota (String mount, long nsQuota, long ssQuota)
specifier|private
name|boolean
name|updateQuota
parameter_list|(
name|String
name|mount
parameter_list|,
name|long
name|nsQuota
parameter_list|,
name|long
name|ssQuota
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Get existing entry
name|MountTableManager
name|mountTable
init|=
name|client
operator|.
name|getMountTableManager
argument_list|()
decl_stmt|;
name|GetMountTableEntriesRequest
name|getRequest
init|=
name|GetMountTableEntriesRequest
operator|.
name|newInstance
argument_list|(
name|mount
argument_list|)
decl_stmt|;
name|GetMountTableEntriesResponse
name|getResponse
init|=
name|mountTable
operator|.
name|getMountTableEntries
argument_list|(
name|getRequest
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|MountTable
argument_list|>
name|results
init|=
name|getResponse
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|MountTable
name|existingEntry
init|=
literal|null
decl_stmt|;
for|for
control|(
name|MountTable
name|result
range|:
name|results
control|)
block|{
if|if
condition|(
name|mount
operator|.
name|equals
argument_list|(
name|result
operator|.
name|getSourcePath
argument_list|()
argument_list|)
condition|)
block|{
name|existingEntry
operator|=
name|result
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|existingEntry
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|mount
operator|+
literal|" doesn't exist in mount table."
argument_list|)
throw|;
block|}
else|else
block|{
name|long
name|nsCount
init|=
name|existingEntry
operator|.
name|getQuota
argument_list|()
operator|.
name|getFileAndDirectoryCount
argument_list|()
decl_stmt|;
name|long
name|ssCount
init|=
name|existingEntry
operator|.
name|getQuota
argument_list|()
operator|.
name|getSpaceConsumed
argument_list|()
decl_stmt|;
comment|// If nsQuota and ssQuota were unset, clear nsQuota and ssQuota.
if|if
condition|(
name|nsQuota
operator|==
name|HdfsConstants
operator|.
name|QUOTA_RESET
operator|&&
name|ssQuota
operator|==
name|HdfsConstants
operator|.
name|QUOTA_RESET
condition|)
block|{
name|nsCount
operator|=
name|RouterQuotaUsage
operator|.
name|QUOTA_USAGE_COUNT_DEFAULT
expr_stmt|;
name|ssCount
operator|=
name|RouterQuotaUsage
operator|.
name|QUOTA_USAGE_COUNT_DEFAULT
expr_stmt|;
block|}
else|else
block|{
comment|// If nsQuota or ssQuota was unset, use the value in mount table.
if|if
condition|(
name|nsQuota
operator|==
name|HdfsConstants
operator|.
name|QUOTA_DONT_SET
condition|)
block|{
name|nsQuota
operator|=
name|existingEntry
operator|.
name|getQuota
argument_list|()
operator|.
name|getQuota
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|ssQuota
operator|==
name|HdfsConstants
operator|.
name|QUOTA_DONT_SET
condition|)
block|{
name|ssQuota
operator|=
name|existingEntry
operator|.
name|getQuota
argument_list|()
operator|.
name|getSpaceQuota
argument_list|()
expr_stmt|;
block|}
block|}
name|RouterQuotaUsage
name|updatedQuota
init|=
operator|new
name|RouterQuotaUsage
operator|.
name|Builder
argument_list|()
operator|.
name|fileAndDirectoryCount
argument_list|(
name|nsCount
argument_list|)
operator|.
name|quota
argument_list|(
name|nsQuota
argument_list|)
operator|.
name|spaceConsumed
argument_list|(
name|ssCount
argument_list|)
operator|.
name|spaceQuota
argument_list|(
name|ssQuota
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|existingEntry
operator|.
name|setQuota
argument_list|(
name|updatedQuota
argument_list|)
expr_stmt|;
block|}
name|UpdateMountTableEntryRequest
name|updateRequest
init|=
name|UpdateMountTableEntryRequest
operator|.
name|newInstance
argument_list|(
name|existingEntry
argument_list|)
decl_stmt|;
name|UpdateMountTableEntryResponse
name|updateResponse
init|=
name|mountTable
operator|.
name|updateMountTableEntry
argument_list|(
name|updateRequest
argument_list|)
decl_stmt|;
return|return
name|updateResponse
operator|.
name|getStatus
argument_list|()
return|;
block|}
comment|/**    * Manager the safe mode state.    * @param cmd Input command, enter or leave safe mode.    * @throws IOException    */
DECL|method|manageSafeMode (String cmd)
specifier|private
name|void
name|manageSafeMode
parameter_list|(
name|String
name|cmd
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"enter"
argument_list|)
condition|)
block|{
if|if
condition|(
name|enterSafeMode
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Successfully enter safe mode."
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"leave"
argument_list|)
condition|)
block|{
if|if
condition|(
name|leaveSafeMode
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Successfully leave safe mode."
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"get"
argument_list|)
condition|)
block|{
name|boolean
name|result
init|=
name|getSafeMode
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Safe Mode: "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid argument: "
operator|+
name|cmd
argument_list|)
throw|;
block|}
block|}
comment|/**    * Request the Router entering safemode state.    * @return Return true if entering safemode successfully.    * @throws IOException    */
DECL|method|enterSafeMode ()
specifier|private
name|boolean
name|enterSafeMode
parameter_list|()
throws|throws
name|IOException
block|{
name|RouterStateManager
name|stateManager
init|=
name|client
operator|.
name|getRouterStateManager
argument_list|()
decl_stmt|;
name|EnterSafeModeResponse
name|response
init|=
name|stateManager
operator|.
name|enterSafeMode
argument_list|(
name|EnterSafeModeRequest
operator|.
name|newInstance
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|response
operator|.
name|getStatus
argument_list|()
return|;
block|}
comment|/**    * Request the Router leaving safemode state.    * @return Return true if leaving safemode successfully.    * @throws IOException    */
DECL|method|leaveSafeMode ()
specifier|private
name|boolean
name|leaveSafeMode
parameter_list|()
throws|throws
name|IOException
block|{
name|RouterStateManager
name|stateManager
init|=
name|client
operator|.
name|getRouterStateManager
argument_list|()
decl_stmt|;
name|LeaveSafeModeResponse
name|response
init|=
name|stateManager
operator|.
name|leaveSafeMode
argument_list|(
name|LeaveSafeModeRequest
operator|.
name|newInstance
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|response
operator|.
name|getStatus
argument_list|()
return|;
block|}
comment|/**    * Verify if current Router state is safe mode state.    * @return True if the Router is in safe mode.    * @throws IOException    */
DECL|method|getSafeMode ()
specifier|private
name|boolean
name|getSafeMode
parameter_list|()
throws|throws
name|IOException
block|{
name|RouterStateManager
name|stateManager
init|=
name|client
operator|.
name|getRouterStateManager
argument_list|()
decl_stmt|;
name|GetSafeModeResponse
name|response
init|=
name|stateManager
operator|.
name|getSafeMode
argument_list|(
name|GetSafeModeRequest
operator|.
name|newInstance
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|response
operator|.
name|isInSafeMode
argument_list|()
return|;
block|}
comment|/**    * Manage the name service: enabling/disabling.    * @param cmd Input command, disable or enable.    * @throws IOException    */
DECL|method|manageNameservice (String cmd, String nsId)
specifier|private
name|void
name|manageNameservice
parameter_list|(
name|String
name|cmd
parameter_list|,
name|String
name|nsId
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"enable"
argument_list|)
condition|)
block|{
if|if
condition|(
name|enableNameservice
argument_list|(
name|nsId
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Successfully enabled nameservice "
operator|+
name|nsId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Cannot enable "
operator|+
name|nsId
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"disable"
argument_list|)
condition|)
block|{
if|if
condition|(
name|disableNameservice
argument_list|(
name|nsId
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Successfully disabled nameservice "
operator|+
name|nsId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Cannot disable "
operator|+
name|nsId
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown command: "
operator|+
name|cmd
argument_list|)
throw|;
block|}
block|}
DECL|method|disableNameservice (String nsId)
specifier|private
name|boolean
name|disableNameservice
parameter_list|(
name|String
name|nsId
parameter_list|)
throws|throws
name|IOException
block|{
name|NameserviceManager
name|nameserviceManager
init|=
name|client
operator|.
name|getNameserviceManager
argument_list|()
decl_stmt|;
name|DisableNameserviceResponse
name|response
init|=
name|nameserviceManager
operator|.
name|disableNameservice
argument_list|(
name|DisableNameserviceRequest
operator|.
name|newInstance
argument_list|(
name|nsId
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|response
operator|.
name|getStatus
argument_list|()
return|;
block|}
DECL|method|enableNameservice (String nsId)
specifier|private
name|boolean
name|enableNameservice
parameter_list|(
name|String
name|nsId
parameter_list|)
throws|throws
name|IOException
block|{
name|NameserviceManager
name|nameserviceManager
init|=
name|client
operator|.
name|getNameserviceManager
argument_list|()
decl_stmt|;
name|EnableNameserviceResponse
name|response
init|=
name|nameserviceManager
operator|.
name|enableNameservice
argument_list|(
name|EnableNameserviceRequest
operator|.
name|newInstance
argument_list|(
name|nsId
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|response
operator|.
name|getStatus
argument_list|()
return|;
block|}
DECL|method|getDisabledNameservices ()
specifier|private
name|void
name|getDisabledNameservices
parameter_list|()
throws|throws
name|IOException
block|{
name|NameserviceManager
name|nameserviceManager
init|=
name|client
operator|.
name|getNameserviceManager
argument_list|()
decl_stmt|;
name|GetDisabledNameservicesRequest
name|request
init|=
name|GetDisabledNameservicesRequest
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|GetDisabledNameservicesResponse
name|response
init|=
name|nameserviceManager
operator|.
name|getDisabledNameservices
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"List of disabled nameservices:"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|nsId
range|:
name|response
operator|.
name|getNameservices
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|nsId
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|genericRefresh (String[] argv, int i)
specifier|public
name|int
name|genericRefresh
parameter_list|(
name|String
index|[]
name|argv
parameter_list|,
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|hostport
init|=
name|argv
index|[
name|i
operator|++
index|]
decl_stmt|;
name|String
name|identifier
init|=
name|argv
index|[
name|i
operator|++
index|]
decl_stmt|;
name|String
index|[]
name|args
init|=
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|argv
argument_list|,
name|i
argument_list|,
name|argv
operator|.
name|length
argument_list|)
decl_stmt|;
comment|// Get the current configuration
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
comment|// for security authorization
comment|// server principal for this call
comment|// should be NN's one.
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_SERVICE_USER_NAME_KEY
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_KERBEROS_PRINCIPAL_KEY
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create the client
name|Class
argument_list|<
name|?
argument_list|>
name|xface
init|=
name|GenericRefreshProtocolPB
operator|.
name|class
decl_stmt|;
name|InetSocketAddress
name|address
init|=
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|hostport
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|RPC
operator|.
name|setProtocolEngine
argument_list|(
name|conf
argument_list|,
name|xface
argument_list|,
name|ProtobufRpcEngine
operator|.
name|class
argument_list|)
expr_stmt|;
name|GenericRefreshProtocolPB
name|proxy
init|=
operator|(
name|GenericRefreshProtocolPB
operator|)
name|RPC
operator|.
name|getProxy
argument_list|(
name|xface
argument_list|,
name|RPC
operator|.
name|getProtocolVersion
argument_list|(
name|xface
argument_list|)
argument_list|,
name|address
argument_list|,
name|ugi
argument_list|,
name|conf
argument_list|,
name|NetUtils
operator|.
name|getDefaultSocketFactory
argument_list|(
name|conf
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|RefreshResponse
argument_list|>
name|responses
init|=
literal|null
decl_stmt|;
try|try
init|(
name|GenericRefreshProtocolClientSideTranslatorPB
name|xlator
init|=
operator|new
name|GenericRefreshProtocolClientSideTranslatorPB
argument_list|(
name|proxy
argument_list|)
init|)
block|{
comment|// Refresh
name|responses
operator|=
name|xlator
operator|.
name|refresh
argument_list|(
name|identifier
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|int
name|returnCode
init|=
literal|0
decl_stmt|;
comment|// Print refresh responses
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Refresh Responses:\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|RefreshResponse
name|response
range|:
name|responses
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|response
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|returnCode
operator|==
literal|0
operator|&&
name|response
operator|.
name|getReturnCode
argument_list|()
operator|!=
literal|0
condition|)
block|{
comment|// This is the first non-zero return code, so we should return this
name|returnCode
operator|=
name|response
operator|.
name|getReturnCode
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|returnCode
operator|!=
literal|0
operator|&&
name|response
operator|.
name|getReturnCode
argument_list|()
operator|!=
literal|0
condition|)
block|{
comment|// Then now we have multiple non-zero return codes,
comment|// so we merge them into -1
name|returnCode
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
return|return
name|returnCode
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|responses
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Failed to get response.\n"
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
block|}
block|}
comment|/**    * Normalize a path for that filesystem.    *    * @param str Path to normalize. The path doesn't have scheme or authority.    * @return Normalized path.    */
DECL|method|normalizeFileSystemPath (final String str)
specifier|public
specifier|static
name|String
name|normalizeFileSystemPath
parameter_list|(
specifier|final
name|String
name|str
parameter_list|)
block|{
name|String
name|path
init|=
name|SLASHES
operator|.
name|matcher
argument_list|(
name|str
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|length
argument_list|()
operator|>
literal|1
operator|&&
name|path
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|path
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|path
return|;
block|}
comment|/**    * Inner class that stores ACL info of mount table.    */
DECL|class|ACLEntity
specifier|static
class|class
name|ACLEntity
block|{
DECL|field|owner
specifier|private
specifier|final
name|String
name|owner
decl_stmt|;
DECL|field|group
specifier|private
specifier|final
name|String
name|group
decl_stmt|;
DECL|field|mode
specifier|private
specifier|final
name|FsPermission
name|mode
decl_stmt|;
DECL|method|ACLEntity (String owner, String group, FsPermission mode)
name|ACLEntity
parameter_list|(
name|String
name|owner
parameter_list|,
name|String
name|group
parameter_list|,
name|FsPermission
name|mode
parameter_list|)
block|{
name|this
operator|.
name|owner
operator|=
name|owner
expr_stmt|;
name|this
operator|.
name|group
operator|=
name|group
expr_stmt|;
name|this
operator|.
name|mode
operator|=
name|mode
expr_stmt|;
block|}
DECL|method|getOwner ()
specifier|public
name|String
name|getOwner
parameter_list|()
block|{
return|return
name|owner
return|;
block|}
DECL|method|getGroup ()
specifier|public
name|String
name|getGroup
parameter_list|()
block|{
return|return
name|group
return|;
block|}
DECL|method|getMode ()
specifier|public
name|FsPermission
name|getMode
parameter_list|()
block|{
return|return
name|mode
return|;
block|}
block|}
block|}
end_class

end_unit

