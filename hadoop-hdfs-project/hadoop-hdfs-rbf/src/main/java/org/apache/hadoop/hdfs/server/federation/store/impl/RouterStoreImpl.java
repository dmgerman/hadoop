begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.store.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|RouterStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|driver
operator|.
name|StateStoreDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|GetRouterRegistrationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|GetRouterRegistrationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|GetRouterRegistrationsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|GetRouterRegistrationsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|RouterHeartbeatRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|RouterHeartbeatResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|QueryResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|RouterState
import|;
end_import

begin_comment
comment|/**  * Implementation of the {@link RouterStore} state store API.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|RouterStoreImpl
specifier|public
class|class
name|RouterStoreImpl
extends|extends
name|RouterStore
block|{
DECL|method|RouterStoreImpl (StateStoreDriver driver)
specifier|public
name|RouterStoreImpl
parameter_list|(
name|StateStoreDriver
name|driver
parameter_list|)
block|{
name|super
argument_list|(
name|driver
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getRouterRegistration ( GetRouterRegistrationRequest request)
specifier|public
name|GetRouterRegistrationResponse
name|getRouterRegistration
parameter_list|(
name|GetRouterRegistrationRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|RouterState
name|partial
init|=
name|RouterState
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|partial
operator|.
name|setAddress
argument_list|(
name|request
operator|.
name|getRouterId
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Query
argument_list|<
name|RouterState
argument_list|>
name|query
init|=
operator|new
name|Query
argument_list|<
name|RouterState
argument_list|>
argument_list|(
name|partial
argument_list|)
decl_stmt|;
name|RouterState
name|record
init|=
name|getDriver
argument_list|()
operator|.
name|get
argument_list|(
name|getRecordClass
argument_list|()
argument_list|,
name|query
argument_list|)
decl_stmt|;
if|if
condition|(
name|record
operator|!=
literal|null
condition|)
block|{
name|overrideExpiredRecord
argument_list|(
name|record
argument_list|)
expr_stmt|;
block|}
name|GetRouterRegistrationResponse
name|response
init|=
name|GetRouterRegistrationResponse
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|response
operator|.
name|setRouter
argument_list|(
name|record
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
annotation|@
name|Override
DECL|method|getRouterRegistrations ( GetRouterRegistrationsRequest request)
specifier|public
name|GetRouterRegistrationsResponse
name|getRouterRegistrations
parameter_list|(
name|GetRouterRegistrationsRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Get all values from the cache
name|QueryResult
argument_list|<
name|RouterState
argument_list|>
name|recordsAndTimeStamp
init|=
name|getCachedRecordsAndTimeStamp
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RouterState
argument_list|>
name|records
init|=
name|recordsAndTimeStamp
operator|.
name|getRecords
argument_list|()
decl_stmt|;
name|long
name|timestamp
init|=
name|recordsAndTimeStamp
operator|.
name|getTimestamp
argument_list|()
decl_stmt|;
comment|// Generate response
name|GetRouterRegistrationsResponse
name|response
init|=
name|GetRouterRegistrationsResponse
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|response
operator|.
name|setRouters
argument_list|(
name|records
argument_list|)
expr_stmt|;
name|response
operator|.
name|setTimestamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
annotation|@
name|Override
DECL|method|routerHeartbeat (RouterHeartbeatRequest request)
specifier|public
name|RouterHeartbeatResponse
name|routerHeartbeat
parameter_list|(
name|RouterHeartbeatRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
name|RouterState
name|record
init|=
name|request
operator|.
name|getRouter
argument_list|()
decl_stmt|;
name|boolean
name|status
init|=
name|getDriver
argument_list|()
operator|.
name|put
argument_list|(
name|record
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|RouterHeartbeatResponse
name|response
init|=
name|RouterHeartbeatResponse
operator|.
name|newInstance
argument_list|(
name|status
argument_list|)
decl_stmt|;
return|return
name|response
return|;
block|}
block|}
end_class

end_unit

