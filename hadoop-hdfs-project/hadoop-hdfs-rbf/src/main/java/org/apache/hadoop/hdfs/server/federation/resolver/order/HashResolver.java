begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.resolver.order
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|order
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|PathLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|utils
operator|.
name|ConsistentHashRing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * Order the destinations based on consistent hashing.  */
end_comment

begin_class
DECL|class|HashResolver
specifier|public
class|class
name|HashResolver
implements|implements
name|OrderedResolver
block|{
DECL|field|LOG
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HashResolver
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** Namespace set hash -> Locator. */
DECL|field|hashResolverMap
specifier|private
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|ConsistentHashRing
argument_list|>
name|hashResolverMap
decl_stmt|;
comment|/** Patterns for temporary files. */
DECL|field|HEX_PATTERN
specifier|private
specifier|static
specifier|final
name|String
name|HEX_PATTERN
init|=
literal|"\\p{XDigit}"
decl_stmt|;
DECL|field|UUID_PATTERN
specifier|private
specifier|static
specifier|final
name|String
name|UUID_PATTERN
init|=
name|HEX_PATTERN
operator|+
literal|"{8}-"
operator|+
name|HEX_PATTERN
operator|+
literal|"{4}-"
operator|+
name|HEX_PATTERN
operator|+
literal|"{4}-"
operator|+
name|HEX_PATTERN
operator|+
literal|"{4}-"
operator|+
name|HEX_PATTERN
operator|+
literal|"{12}"
decl_stmt|;
DECL|field|ATTEMPT_PATTERN
specifier|private
specifier|static
specifier|final
name|String
name|ATTEMPT_PATTERN
init|=
literal|"attempt_\\d+_\\d{4}_._\\d{6}_\\d{2}"
decl_stmt|;
DECL|field|TEMP_FILE_PATTERNS
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|TEMP_FILE_PATTERNS
init|=
block|{
literal|"(.+)\\.COPYING$"
block|,
literal|"(.+)\\._COPYING_.*$"
block|,
literal|"(.+)\\.tmp$"
block|,
literal|"_temp/(.+)$"
block|,
literal|"_temporary/(.+)\\."
operator|+
name|UUID_PATTERN
operator|+
literal|"$"
block|,
literal|"(.*)_temporary/\\d/_temporary/"
operator|+
name|ATTEMPT_PATTERN
operator|+
literal|"/(.+)$"
block|}
decl_stmt|;
comment|/** Pattern for temporary files (or of the individual patterns). */
DECL|field|TEMP_FILE_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|TEMP_FILE_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|StringUtils
operator|.
name|join
argument_list|(
literal|"|"
argument_list|,
name|TEMP_FILE_PATTERNS
argument_list|)
argument_list|)
decl_stmt|;
DECL|method|HashResolver ()
specifier|public
name|HashResolver
parameter_list|()
block|{
name|this
operator|.
name|hashResolverMap
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
comment|/**    * Use the result from consistent hashing locator to prioritize the locations    * for a path.    *    * @param path Path to check.    * @param loc Federated location with multiple destinations.    * @return First namespace based on hash.    */
annotation|@
name|Override
DECL|method|getFirstNamespace (final String path, final PathLocation loc)
specifier|public
name|String
name|getFirstNamespace
parameter_list|(
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|PathLocation
name|loc
parameter_list|)
block|{
name|String
name|finalPath
init|=
name|extractTempFileName
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|namespaces
init|=
name|loc
operator|.
name|getNamespaces
argument_list|()
decl_stmt|;
name|ConsistentHashRing
name|locator
init|=
name|getHashResolver
argument_list|(
name|namespaces
argument_list|)
decl_stmt|;
name|String
name|hashedSubcluster
init|=
name|locator
operator|.
name|getLocation
argument_list|(
name|finalPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|hashedSubcluster
operator|==
literal|null
condition|)
block|{
name|String
name|srcPath
init|=
name|loc
operator|.
name|getSourcePath
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot find subcluster for {} ({} -> {})"
argument_list|,
name|srcPath
argument_list|,
name|path
argument_list|,
name|finalPath
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Namespace for {} ({}) is {}"
argument_list|,
name|path
argument_list|,
name|finalPath
argument_list|,
name|hashedSubcluster
argument_list|)
expr_stmt|;
return|return
name|hashedSubcluster
return|;
block|}
comment|/**    * Get the cached (if available) or generate a new hash resolver for this    * particular set of unique namespace identifiers.    *    * @param namespaces A set of unique namespace identifiers.    * @return A hash resolver configured to consistently resolve paths to    *         namespaces using the provided set of namespace identifiers.    */
DECL|method|getHashResolver (final Set<String> namespaces)
specifier|private
name|ConsistentHashRing
name|getHashResolver
parameter_list|(
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|namespaces
parameter_list|)
block|{
specifier|final
name|int
name|hash
init|=
name|namespaces
operator|.
name|hashCode
argument_list|()
decl_stmt|;
return|return
name|this
operator|.
name|hashResolverMap
operator|.
name|computeIfAbsent
argument_list|(
name|hash
argument_list|,
name|k
lambda|->
operator|new
name|ConsistentHashRing
argument_list|(
name|namespaces
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Some files use a temporary naming pattern. Extract the final name from the    * temporary name. For example, files *._COPYING_ will be renamed, so we    * remove that chunk.    *    * @param input Input string.    * @return Final file name.    */
annotation|@
name|VisibleForTesting
DECL|method|extractTempFileName (final String input)
specifier|public
specifier|static
name|String
name|extractTempFileName
parameter_list|(
specifier|final
name|String
name|input
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|Matcher
name|matcher
init|=
name|TEMP_FILE_PATTERN
operator|.
name|matcher
argument_list|(
name|input
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|matcher
operator|.
name|groupCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|match
init|=
name|matcher
operator|.
name|group
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|match
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|match
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|ret
init|=
name|sb
operator|.
name|toString
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Extracted {} from {}"
argument_list|,
name|ret
argument_list|,
name|input
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
return|return
name|input
return|;
block|}
block|}
end_class

end_unit

