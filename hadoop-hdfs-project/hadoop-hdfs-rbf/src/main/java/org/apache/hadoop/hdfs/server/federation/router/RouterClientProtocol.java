begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.router
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
operator|.
name|FederationUtil
operator|.
name|updateMountPointStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|CryptoProtocolVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BatchedRemoteIterator
operator|.
name|BatchedEntries
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CacheFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ContentSummary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FsServerDefaults
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|QuotaUsage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|XAttr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|XAttrSetFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|AddBlockFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|inotify
operator|.
name|EventBatchList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|AddErasureCodingPolicyResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|BlockStoragePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CacheDirectiveEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CacheDirectiveInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CachePoolEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CachePoolInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CorruptFileBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DirectoryListing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ECBlockGroupStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|EncryptionZone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ErasureCodingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ErasureCodingPolicyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsLocatedFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LastBlockWithStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|OpenFileEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|OpenFilesIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ReplicatedBlockStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|RollingUpgradeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshotDiffReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshotDiffReportListing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshottableDirectoryStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|UnresolvedPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ZoneReencryptionStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|DataEncryptionKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|DelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|ActiveNamenodeResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|FederationNamespaceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|FileSubclusterResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|MountTableResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|RemoteLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
operator|.
name|security
operator|.
name|RouterSecurityManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|MountTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeStorageReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|EnumSetWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|ConnectTimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ConnectException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * Module that implements all the RPC calls in {@link ClientProtocol} in the  * {@link RouterRpcServer}.  */
end_comment

begin_class
DECL|class|RouterClientProtocol
specifier|public
class|class
name|RouterClientProtocol
implements|implements
name|ClientProtocol
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RouterClientProtocol
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|rpcServer
specifier|private
specifier|final
name|RouterRpcServer
name|rpcServer
decl_stmt|;
DECL|field|rpcClient
specifier|private
specifier|final
name|RouterRpcClient
name|rpcClient
decl_stmt|;
DECL|field|subclusterResolver
specifier|private
specifier|final
name|FileSubclusterResolver
name|subclusterResolver
decl_stmt|;
DECL|field|namenodeResolver
specifier|private
specifier|final
name|ActiveNamenodeResolver
name|namenodeResolver
decl_stmt|;
comment|/** If it requires response from all subclusters. */
DECL|field|allowPartialList
specifier|private
specifier|final
name|boolean
name|allowPartialList
decl_stmt|;
comment|/** Time out when getting the mount statistics. */
DECL|field|mountStatusTimeOut
specifier|private
name|long
name|mountStatusTimeOut
decl_stmt|;
comment|/** Identifier for the super user. */
DECL|field|superUser
specifier|private
name|String
name|superUser
decl_stmt|;
comment|/** Identifier for the super group. */
DECL|field|superGroup
specifier|private
specifier|final
name|String
name|superGroup
decl_stmt|;
comment|/** Erasure coding calls. */
DECL|field|erasureCoding
specifier|private
specifier|final
name|ErasureCoding
name|erasureCoding
decl_stmt|;
comment|/** Cache Admin calls. */
DECL|field|routerCacheAdmin
specifier|private
specifier|final
name|RouterCacheAdmin
name|routerCacheAdmin
decl_stmt|;
comment|/** StoragePolicy calls. **/
DECL|field|storagePolicy
specifier|private
specifier|final
name|RouterStoragePolicy
name|storagePolicy
decl_stmt|;
comment|/** Snapshot calls. */
DECL|field|snapshotProto
specifier|private
specifier|final
name|RouterSnapshot
name|snapshotProto
decl_stmt|;
comment|/** Router security manager to handle token operations. */
DECL|field|securityManager
specifier|private
name|RouterSecurityManager
name|securityManager
init|=
literal|null
decl_stmt|;
DECL|method|RouterClientProtocol (Configuration conf, RouterRpcServer rpcServer)
name|RouterClientProtocol
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|RouterRpcServer
name|rpcServer
parameter_list|)
block|{
name|this
operator|.
name|rpcServer
operator|=
name|rpcServer
expr_stmt|;
name|this
operator|.
name|rpcClient
operator|=
name|rpcServer
operator|.
name|getRPCClient
argument_list|()
expr_stmt|;
name|this
operator|.
name|subclusterResolver
operator|=
name|rpcServer
operator|.
name|getSubclusterResolver
argument_list|()
expr_stmt|;
name|this
operator|.
name|namenodeResolver
operator|=
name|rpcServer
operator|.
name|getNamenodeResolver
argument_list|()
expr_stmt|;
name|this
operator|.
name|allowPartialList
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|RBFConfigKeys
operator|.
name|DFS_ROUTER_ALLOW_PARTIAL_LIST
argument_list|,
name|RBFConfigKeys
operator|.
name|DFS_ROUTER_ALLOW_PARTIAL_LIST_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|mountStatusTimeOut
operator|=
name|conf
operator|.
name|getTimeDuration
argument_list|(
name|RBFConfigKeys
operator|.
name|DFS_ROUTER_CLIENT_MOUNT_TIME_OUT
argument_list|,
name|RBFConfigKeys
operator|.
name|DFS_ROUTER_CLIENT_MOUNT_TIME_OUT_DEFAULT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
comment|// User and group for reporting
try|try
block|{
name|this
operator|.
name|superUser
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to get user name. Fall back to system property "
operator|+
literal|"user.name"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|this
operator|.
name|superUser
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|superGroup
operator|=
name|conf
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_PERMISSIONS_SUPERUSERGROUP_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_PERMISSIONS_SUPERUSERGROUP_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|erasureCoding
operator|=
operator|new
name|ErasureCoding
argument_list|(
name|rpcServer
argument_list|)
expr_stmt|;
name|this
operator|.
name|storagePolicy
operator|=
operator|new
name|RouterStoragePolicy
argument_list|(
name|rpcServer
argument_list|)
expr_stmt|;
name|this
operator|.
name|snapshotProto
operator|=
operator|new
name|RouterSnapshot
argument_list|(
name|rpcServer
argument_list|)
expr_stmt|;
name|this
operator|.
name|routerCacheAdmin
operator|=
operator|new
name|RouterCacheAdmin
argument_list|(
name|rpcServer
argument_list|)
expr_stmt|;
name|this
operator|.
name|securityManager
operator|=
name|rpcServer
operator|.
name|getRouterSecurityManager
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getDelegationToken (Text renewer)
specifier|public
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|getDelegationToken
parameter_list|(
name|Text
name|renewer
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|WRITE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|securityManager
operator|.
name|getDelegationToken
argument_list|(
name|renewer
argument_list|)
return|;
block|}
comment|/**    * The the delegation token from each name service.    *    * @param renewer The token renewer.    * @return Name service to Token.    * @throws IOException If it cannot get the delegation token.    */
specifier|public
name|Map
argument_list|<
name|FederationNamespaceInfo
argument_list|,
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
argument_list|>
DECL|method|getDelegationTokens (Text renewer)
name|getDelegationTokens
parameter_list|(
name|Text
name|renewer
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|WRITE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|renewDelegationToken (Token<DelegationTokenIdentifier> token)
specifier|public
name|long
name|renewDelegationToken
parameter_list|(
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|WRITE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|securityManager
operator|.
name|renewDelegationToken
argument_list|(
name|token
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|cancelDelegationToken (Token<DelegationTokenIdentifier> token)
specifier|public
name|void
name|cancelDelegationToken
parameter_list|(
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|WRITE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|securityManager
operator|.
name|cancelDelegationToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
return|return;
block|}
annotation|@
name|Override
DECL|method|getBlockLocations (String src, final long offset, final long length)
specifier|public
name|LocatedBlocks
name|getBlockLocations
parameter_list|(
name|String
name|src
parameter_list|,
specifier|final
name|long
name|offset
parameter_list|,
specifier|final
name|long
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|locations
init|=
name|rpcServer
operator|.
name|getLocationsForPath
argument_list|(
name|src
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|RemoteMethod
name|remoteMethod
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"getBlockLocations"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
operator|,
name|long
operator|.
name|class
operator|,
name|long
operator|.
name|class
block|}
operator|,
operator|new
name|RemoteParam
argument_list|()
operator|,
name|offset
operator|,
name|length
block|)
function|;
return|return
name|rpcClient
operator|.
name|invokeSequential
argument_list|(
name|locations
argument_list|,
name|remoteMethod
argument_list|,
name|LocatedBlocks
operator|.
name|class
argument_list|,
literal|null
argument_list|)
return|;
block|}
end_class

begin_function
annotation|@
name|Override
DECL|method|getServerDefaults ()
specifier|public
name|FsServerDefaults
name|getServerDefaults
parameter_list|()
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"getServerDefaults"
argument_list|)
decl_stmt|;
return|return
name|rpcServer
operator|.
name|invokeAtAvailableNs
argument_list|(
name|method
argument_list|,
name|FsServerDefaults
operator|.
name|class
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|create (String src, FsPermission masked, String clientName, EnumSetWritable<CreateFlag> flag, boolean createParent, short replication, long blockSize, CryptoProtocolVersion[] supportedVersions, String ecPolicyName, String storagePolicy)
specifier|public
name|HdfsFileStatus
name|create
parameter_list|(
name|String
name|src
parameter_list|,
name|FsPermission
name|masked
parameter_list|,
name|String
name|clientName
parameter_list|,
name|EnumSetWritable
argument_list|<
name|CreateFlag
argument_list|>
name|flag
parameter_list|,
name|boolean
name|createParent
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|CryptoProtocolVersion
index|[]
name|supportedVersions
parameter_list|,
name|String
name|ecPolicyName
parameter_list|,
name|String
name|storagePolicy
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
if|if
condition|(
name|createParent
operator|&&
name|rpcServer
operator|.
name|isPathAll
argument_list|(
name|src
argument_list|)
condition|)
block|{
name|int
name|index
init|=
name|src
operator|.
name|lastIndexOf
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
decl_stmt|;
name|String
name|parent
init|=
name|src
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating {} requires creating parent {}"
argument_list|,
name|src
argument_list|,
name|parent
argument_list|)
expr_stmt|;
name|FsPermission
name|parentPermissions
init|=
name|getParentPermission
argument_list|(
name|masked
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
name|mkdirs
argument_list|(
name|parent
argument_list|,
name|parentPermissions
argument_list|,
name|createParent
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
block|{
comment|// This shouldn't happen as mkdirs returns true or exception
name|LOG
operator|.
name|error
argument_list|(
literal|"Couldn't create parents for {}"
argument_list|,
name|src
argument_list|)
expr_stmt|;
block|}
block|}
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"create"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
operator|,
name|FsPermission
operator|.
name|class
operator|,
name|String
operator|.
name|class
operator|,
name|EnumSetWritable
operator|.
name|class
operator|,
name|boolean
operator|.
name|class
operator|,
name|short
operator|.
name|class
operator|,
name|long
operator|.
name|class
operator|,
name|CryptoProtocolVersion
index|[]
operator|.
expr|class
operator|,
name|String
operator|.
name|class
operator|,
name|String
operator|.
name|class
block|}
operator|,
operator|new
name|RemoteParam
argument_list|()
operator|,
name|masked
operator|,
name|clientName
operator|,
name|flag
operator|,
name|createParent
operator|,
name|replication
operator|,
name|blockSize
operator|,
name|supportedVersions
operator|,
name|ecPolicyName
operator|,
name|storagePolicy
block|)
function|;
end_function

begin_decl_stmt
specifier|final
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|locations
init|=
name|rpcServer
operator|.
name|getLocationsForPath
argument_list|(
name|src
argument_list|,
literal|true
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|RemoteLocation
name|createLocation
init|=
literal|null
decl_stmt|;
end_decl_stmt

begin_try
try|try
block|{
name|createLocation
operator|=
name|rpcServer
operator|.
name|getCreateLocation
argument_list|(
name|src
argument_list|)
expr_stmt|;
return|return
operator|(
name|HdfsFileStatus
operator|)
name|rpcClient
operator|.
name|invokeSingle
argument_list|(
name|createLocation
argument_list|,
name|method
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|newLocations
init|=
name|checkFaultTolerantRetry
argument_list|(
name|method
argument_list|,
name|src
argument_list|,
name|ioe
argument_list|,
name|createLocation
argument_list|,
name|locations
argument_list|)
decl_stmt|;
return|return
name|rpcClient
operator|.
name|invokeSequential
argument_list|(
name|newLocations
argument_list|,
name|method
argument_list|,
name|HdfsFileStatus
operator|.
name|class
argument_list|,
literal|null
argument_list|)
return|;
block|}
end_try

begin_comment
unit|}
comment|/**    * Check if an exception is caused by an unavailable subcluster or not. It    * also checks the causes.    * @param ioe IOException to check.    * @return If caused by an unavailable subcluster. False if the should not be    *         retried (e.g., NSQuotaExceededException).    */
end_comment

begin_function
DECL|method|isUnavailableSubclusterException ( final IOException ioe)
unit|private
specifier|static
name|boolean
name|isUnavailableSubclusterException
parameter_list|(
specifier|final
name|IOException
name|ioe
parameter_list|)
block|{
if|if
condition|(
name|ioe
operator|instanceof
name|ConnectException
operator|||
name|ioe
operator|instanceof
name|ConnectTimeoutException
operator|||
name|ioe
operator|instanceof
name|NoNamenodesAvailableException
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|ioe
operator|.
name|getCause
argument_list|()
operator|instanceof
name|IOException
condition|)
block|{
name|IOException
name|cause
init|=
operator|(
name|IOException
operator|)
name|ioe
operator|.
name|getCause
argument_list|()
decl_stmt|;
return|return
name|isUnavailableSubclusterException
argument_list|(
name|cause
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
end_function

begin_comment
comment|/**    * Check if a remote method can be retried in other subclusters when it    * failed in the original destination. This method returns the list of    * locations to retry in. This is used by fault tolerant mount points.    * @param method Method that failed and might be retried.    * @param src Path where the method was invoked.    * @param e Exception that was triggered.    * @param excludeLoc Location that failed and should be excluded.    * @param locations All the locations to retry.    * @return The locations where we should retry (excluding the failed ones).    * @throws IOException If this path is not fault tolerant or the exception    *                     should not be retried (e.g., NSQuotaExceededException).    */
end_comment

begin_function
DECL|method|checkFaultTolerantRetry ( final RemoteMethod method, final String src, final IOException ioe, final RemoteLocation excludeLoc, final List<RemoteLocation> locations)
specifier|private
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|checkFaultTolerantRetry
parameter_list|(
specifier|final
name|RemoteMethod
name|method
parameter_list|,
specifier|final
name|String
name|src
parameter_list|,
specifier|final
name|IOException
name|ioe
parameter_list|,
specifier|final
name|RemoteLocation
name|excludeLoc
parameter_list|,
specifier|final
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|locations
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|isUnavailableSubclusterException
argument_list|(
name|ioe
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"{} exception cannot be retried"
argument_list|,
name|ioe
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
if|if
condition|(
operator|!
name|rpcServer
operator|.
name|isPathFaultTolerant
argument_list|(
name|src
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"{} does not allow retrying a failed subcluster"
argument_list|,
name|src
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
specifier|final
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|newLocations
decl_stmt|;
if|if
condition|(
name|excludeLoc
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot invoke {} for {}: {}"
argument_list|,
name|method
argument_list|,
name|src
argument_list|,
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|newLocations
operator|=
name|locations
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot invoke {} for {} in {}: {}"
argument_list|,
name|method
argument_list|,
name|src
argument_list|,
name|excludeLoc
argument_list|,
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|newLocations
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
specifier|final
name|RemoteLocation
name|loc
range|:
name|locations
control|)
block|{
if|if
condition|(
operator|!
name|loc
operator|.
name|equals
argument_list|(
name|excludeLoc
argument_list|)
condition|)
block|{
name|newLocations
operator|.
name|add
argument_list|(
name|loc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"{} allows retrying failed subclusters in {}"
argument_list|,
name|src
argument_list|,
name|newLocations
argument_list|)
expr_stmt|;
return|return
name|newLocations
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|append (String src, final String clientName, final EnumSetWritable<CreateFlag> flag)
specifier|public
name|LastBlockWithStatus
name|append
parameter_list|(
name|String
name|src
parameter_list|,
specifier|final
name|String
name|clientName
parameter_list|,
specifier|final
name|EnumSetWritable
argument_list|<
name|CreateFlag
argument_list|>
name|flag
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|locations
init|=
name|rpcServer
operator|.
name|getLocationsForPath
argument_list|(
name|src
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"append"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
operator|,
name|String
operator|.
name|class
operator|,
name|EnumSetWritable
operator|.
name|class
block|}
operator|,
operator|new
name|RemoteParam
argument_list|()
operator|,
name|clientName
operator|,
name|flag
block|)
function|;
end_function

begin_return
return|return
name|rpcClient
operator|.
name|invokeSequential
argument_list|(
name|locations
argument_list|,
name|method
argument_list|,
name|LastBlockWithStatus
operator|.
name|class
argument_list|,
literal|null
argument_list|)
return|;
end_return

begin_function
unit|}    @
name|Override
DECL|method|recoverLease (String src, String clientName)
specifier|public
name|boolean
name|recoverLease
parameter_list|(
name|String
name|src
parameter_list|,
name|String
name|clientName
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|locations
init|=
name|rpcServer
operator|.
name|getLocationsForPath
argument_list|(
name|src
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"recoverLease"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
operator|,
name|String
operator|.
name|class
block|}
operator|,
operator|new
name|RemoteParam
argument_list|()
operator|,
name|clientName
block|)
function|;
end_function

begin_decl_stmt
name|Object
name|result
init|=
name|rpcClient
operator|.
name|invokeSequential
argument_list|(
name|locations
argument_list|,
name|method
argument_list|,
name|Boolean
operator|.
name|class
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
decl_stmt|;
end_decl_stmt

begin_return
return|return
operator|(
name|boolean
operator|)
name|result
return|;
end_return

begin_function
unit|}    @
name|Override
DECL|method|setReplication (String src, short replication)
specifier|public
name|boolean
name|setReplication
parameter_list|(
name|String
name|src
parameter_list|,
name|short
name|replication
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|locations
init|=
name|rpcServer
operator|.
name|getLocationsForPath
argument_list|(
name|src
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"setReplication"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
operator|,
name|short
operator|.
name|class
block|}
operator|,
operator|new
name|RemoteParam
argument_list|()
operator|,
name|replication
block|)
function|;
end_function

begin_if
if|if
condition|(
name|rpcServer
operator|.
name|isInvokeConcurrent
argument_list|(
name|src
argument_list|)
condition|)
block|{
return|return
operator|!
name|rpcClient
operator|.
name|invokeConcurrent
argument_list|(
name|locations
argument_list|,
name|method
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
operator|.
name|containsValue
argument_list|(
literal|false
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|rpcClient
operator|.
name|invokeSequential
argument_list|(
name|locations
argument_list|,
name|method
argument_list|,
name|Boolean
operator|.
name|class
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
return|;
block|}
end_if

begin_function
unit|}    @
name|Override
DECL|method|setStoragePolicy (String src, String policyName)
specifier|public
name|void
name|setStoragePolicy
parameter_list|(
name|String
name|src
parameter_list|,
name|String
name|policyName
parameter_list|)
throws|throws
name|IOException
block|{
name|storagePolicy
operator|.
name|setStoragePolicy
argument_list|(
name|src
argument_list|,
name|policyName
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|getStoragePolicies ()
specifier|public
name|BlockStoragePolicy
index|[]
name|getStoragePolicies
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|storagePolicy
operator|.
name|getStoragePolicies
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|setPermission (String src, FsPermission permissions)
specifier|public
name|void
name|setPermission
parameter_list|(
name|String
name|src
parameter_list|,
name|FsPermission
name|permissions
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|locations
init|=
name|rpcServer
operator|.
name|getLocationsForPath
argument_list|(
name|src
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"setPermission"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
operator|,
name|FsPermission
operator|.
name|class
block|}
operator|,
operator|new
name|RemoteParam
argument_list|()
operator|,
name|permissions
block|)
function|;
end_function

begin_if
if|if
condition|(
name|rpcServer
operator|.
name|isInvokeConcurrent
argument_list|(
name|src
argument_list|)
condition|)
block|{
name|rpcClient
operator|.
name|invokeConcurrent
argument_list|(
name|locations
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rpcClient
operator|.
name|invokeSequential
argument_list|(
name|locations
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
end_if

begin_function
unit|}    @
name|Override
DECL|method|setOwner (String src, String username, String groupname)
specifier|public
name|void
name|setOwner
parameter_list|(
name|String
name|src
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|groupname
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|locations
init|=
name|rpcServer
operator|.
name|getLocationsForPath
argument_list|(
name|src
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"setOwner"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
operator|,
name|String
operator|.
name|class
operator|,
name|String
operator|.
name|class
block|}
operator|,
operator|new
name|RemoteParam
argument_list|()
operator|,
name|username
operator|,
name|groupname
block|)
function|;
end_function

begin_if
if|if
condition|(
name|rpcServer
operator|.
name|isInvokeConcurrent
argument_list|(
name|src
argument_list|)
condition|)
block|{
name|rpcClient
operator|.
name|invokeConcurrent
argument_list|(
name|locations
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rpcClient
operator|.
name|invokeSequential
argument_list|(
name|locations
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
end_if

begin_comment
unit|}
comment|/**    * Excluded and favored nodes are not verified and will be ignored by    * placement policy if they are not in the same nameservice as the file.    */
end_comment

begin_function
unit|@
name|Override
DECL|method|addBlock (String src, String clientName, ExtendedBlock previous, DatanodeInfo[] excludedNodes, long fileId, String[] favoredNodes, EnumSet<AddBlockFlag> addBlockFlags)
specifier|public
name|LocatedBlock
name|addBlock
parameter_list|(
name|String
name|src
parameter_list|,
name|String
name|clientName
parameter_list|,
name|ExtendedBlock
name|previous
parameter_list|,
name|DatanodeInfo
index|[]
name|excludedNodes
parameter_list|,
name|long
name|fileId
parameter_list|,
name|String
index|[]
name|favoredNodes
parameter_list|,
name|EnumSet
argument_list|<
name|AddBlockFlag
argument_list|>
name|addBlockFlags
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|locations
init|=
name|rpcServer
operator|.
name|getLocationsForPath
argument_list|(
name|src
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"addBlock"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
operator|,
name|String
operator|.
name|class
operator|,
name|ExtendedBlock
operator|.
name|class
operator|,
name|DatanodeInfo
index|[]
operator|.
expr|class
operator|,
name|long
operator|.
name|class
operator|,
name|String
index|[]
operator|.
expr|class
operator|,
name|EnumSet
operator|.
name|class
block|}
operator|,
operator|new
name|RemoteParam
argument_list|()
operator|,
name|clientName
operator|,
name|previous
operator|,
name|excludedNodes
operator|,
name|fileId
operator|,
name|favoredNodes
operator|,
name|addBlockFlags
block|)
function|;
end_function

begin_comment
comment|// TODO verify the excludedNodes and favoredNodes are acceptable to this NN
end_comment

begin_return
return|return
name|rpcClient
operator|.
name|invokeSequential
argument_list|(
name|locations
argument_list|,
name|method
argument_list|,
name|LocatedBlock
operator|.
name|class
argument_list|,
literal|null
argument_list|)
return|;
end_return

begin_comment
unit|}
comment|/**    * Excluded nodes are not verified and will be ignored by placement if they    * are not in the same nameservice as the file.    */
end_comment

begin_function
unit|@
name|Override
DECL|method|getAdditionalDatanode (final String src, final long fileId, final ExtendedBlock blk, final DatanodeInfo[] existings, final String[] existingStorageIDs, final DatanodeInfo[] excludes, final int numAdditionalNodes, final String clientName)
specifier|public
name|LocatedBlock
name|getAdditionalDatanode
parameter_list|(
specifier|final
name|String
name|src
parameter_list|,
specifier|final
name|long
name|fileId
parameter_list|,
specifier|final
name|ExtendedBlock
name|blk
parameter_list|,
specifier|final
name|DatanodeInfo
index|[]
name|existings
parameter_list|,
specifier|final
name|String
index|[]
name|existingStorageIDs
parameter_list|,
specifier|final
name|DatanodeInfo
index|[]
name|excludes
parameter_list|,
specifier|final
name|int
name|numAdditionalNodes
parameter_list|,
specifier|final
name|String
name|clientName
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|locations
init|=
name|rpcServer
operator|.
name|getLocationsForPath
argument_list|(
name|src
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"getAdditionalDatanode"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
operator|,
name|long
operator|.
name|class
operator|,
name|ExtendedBlock
operator|.
name|class
operator|,
name|DatanodeInfo
index|[]
operator|.
expr|class
operator|,
name|String
index|[]
operator|.
expr|class
operator|,
name|DatanodeInfo
index|[]
operator|.
expr|class
operator|,
name|int
operator|.
name|class
operator|,
name|String
operator|.
name|class
block|}
operator|,
operator|new
name|RemoteParam
argument_list|()
operator|,
name|fileId
operator|,
name|blk
operator|,
name|existings
operator|,
name|existingStorageIDs
operator|,
name|excludes
operator|,
name|numAdditionalNodes
operator|,
name|clientName
block|)
function|;
end_function

begin_return
return|return
name|rpcClient
operator|.
name|invokeSequential
argument_list|(
name|locations
argument_list|,
name|method
argument_list|,
name|LocatedBlock
operator|.
name|class
argument_list|,
literal|null
argument_list|)
return|;
end_return

begin_function
unit|}    @
name|Override
DECL|method|abandonBlock (ExtendedBlock b, long fileId, String src, String holder)
specifier|public
name|void
name|abandonBlock
parameter_list|(
name|ExtendedBlock
name|b
parameter_list|,
name|long
name|fileId
parameter_list|,
name|String
name|src
parameter_list|,
name|String
name|holder
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"abandonBlock"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|ExtendedBlock
operator|.
name|class
operator|,
name|long
operator|.
name|class
operator|,
name|String
operator|.
name|class
operator|,
name|String
operator|.
name|class
block|}
operator|,
name|b
operator|,
name|fileId
operator|,
operator|new
name|RemoteParam
argument_list|()
operator|,
name|holder
block|)
function|;
end_function

begin_expr_stmt
name|rpcClient
operator|.
name|invokeSingle
argument_list|(
name|b
argument_list|,
name|method
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}    @
name|Override
DECL|method|complete (String src, String clientName, ExtendedBlock last, long fileId)
specifier|public
name|boolean
name|complete
parameter_list|(
name|String
name|src
parameter_list|,
name|String
name|clientName
parameter_list|,
name|ExtendedBlock
name|last
parameter_list|,
name|long
name|fileId
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|locations
init|=
name|rpcServer
operator|.
name|getLocationsForPath
argument_list|(
name|src
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"complete"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
operator|,
name|String
operator|.
name|class
operator|,
name|ExtendedBlock
operator|.
name|class
operator|,
name|long
operator|.
name|class
block|}
operator|,
operator|new
name|RemoteParam
argument_list|()
operator|,
name|clientName
operator|,
name|last
operator|,
name|fileId
block|)
function|;
end_function

begin_comment
comment|// Complete can return true/false, so don't expect a result
end_comment

begin_return
return|return
name|rpcClient
operator|.
name|invokeSequential
argument_list|(
name|locations
argument_list|,
name|method
argument_list|,
name|Boolean
operator|.
name|class
argument_list|,
literal|null
argument_list|)
return|;
end_return

begin_function
unit|}    @
name|Override
DECL|method|updateBlockForPipeline ( ExtendedBlock block, String clientName)
specifier|public
name|LocatedBlock
name|updateBlockForPipeline
parameter_list|(
name|ExtendedBlock
name|block
parameter_list|,
name|String
name|clientName
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"updateBlockForPipeline"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|ExtendedBlock
operator|.
name|class
operator|,
name|String
operator|.
name|class
block|}
operator|,
name|block
operator|,
name|clientName
block|)
function|;
end_function

begin_return
return|return
operator|(
name|LocatedBlock
operator|)
name|rpcClient
operator|.
name|invokeSingle
argument_list|(
name|block
argument_list|,
name|method
argument_list|)
return|;
end_return

begin_comment
unit|}
comment|/**    * Datanode are not verified to be in the same nameservice as the old block.    * TODO This may require validation.    */
end_comment

begin_function
unit|@
name|Override
DECL|method|updatePipeline (String clientName, ExtendedBlock oldBlock, ExtendedBlock newBlock, DatanodeID[] newNodes, String[] newStorageIDs)
specifier|public
name|void
name|updatePipeline
parameter_list|(
name|String
name|clientName
parameter_list|,
name|ExtendedBlock
name|oldBlock
parameter_list|,
name|ExtendedBlock
name|newBlock
parameter_list|,
name|DatanodeID
index|[]
name|newNodes
parameter_list|,
name|String
index|[]
name|newStorageIDs
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"updatePipeline"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
operator|,
name|ExtendedBlock
operator|.
name|class
operator|,
name|ExtendedBlock
operator|.
name|class
operator|,
name|DatanodeID
index|[]
operator|.
expr|class
operator|,
name|String
index|[]
operator|.
expr|class
block|}
operator|,
name|clientName
operator|,
name|oldBlock
operator|,
name|newBlock
operator|,
name|newNodes
operator|,
name|newStorageIDs
block|)
function|;
end_function

begin_expr_stmt
name|rpcClient
operator|.
name|invokeSingle
argument_list|(
name|oldBlock
argument_list|,
name|method
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}    @
name|Override
DECL|method|getPreferredBlockSize (String src)
specifier|public
name|long
name|getPreferredBlockSize
parameter_list|(
name|String
name|src
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|locations
init|=
name|rpcServer
operator|.
name|getLocationsForPath
argument_list|(
name|src
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"getPreferredBlockSize"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
block|}
operator|,
operator|new
name|RemoteParam
argument_list|()
block|)
function|;
end_function

begin_return
return|return
name|rpcClient
operator|.
name|invokeSequential
argument_list|(
name|locations
argument_list|,
name|method
argument_list|,
name|Long
operator|.
name|class
argument_list|,
literal|null
argument_list|)
return|;
end_return

begin_function
unit|}    @
name|Deprecated
annotation|@
name|Override
DECL|method|rename (final String src, final String dst)
specifier|public
name|boolean
name|rename
parameter_list|(
specifier|final
name|String
name|src
parameter_list|,
specifier|final
name|String
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|srcLocations
init|=
name|rpcServer
operator|.
name|getLocationsForPath
argument_list|(
name|src
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// srcLocations may be trimmed by getRenameDestinations()
specifier|final
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|locs
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|(
name|srcLocations
argument_list|)
decl_stmt|;
name|RemoteParam
name|dstParam
init|=
name|getRenameDestinations
argument_list|(
name|locs
argument_list|,
name|dst
argument_list|)
decl_stmt|;
if|if
condition|(
name|locs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Rename of "
operator|+
name|src
operator|+
literal|" to "
operator|+
name|dst
operator|+
literal|" is not allowed,"
operator|+
literal|" no eligible destination in the same namespace was found."
argument_list|)
throw|;
block|}
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"rename"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
operator|,
name|String
operator|.
name|class
block|}
operator|,
operator|new
name|RemoteParam
argument_list|()
operator|,
name|dstParam
block|)
function|;
end_function

begin_if
if|if
condition|(
name|isMultiDestDirectory
argument_list|(
name|src
argument_list|)
condition|)
block|{
return|return
name|rpcClient
operator|.
name|invokeAll
argument_list|(
name|locs
argument_list|,
name|method
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|rpcClient
operator|.
name|invokeSequential
argument_list|(
name|locs
argument_list|,
name|method
argument_list|,
name|Boolean
operator|.
name|class
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
return|;
block|}
end_if

begin_function
unit|}    @
name|Override
DECL|method|rename2 (final String src, final String dst, final Options.Rename... options)
specifier|public
name|void
name|rename2
parameter_list|(
specifier|final
name|String
name|src
parameter_list|,
specifier|final
name|String
name|dst
parameter_list|,
specifier|final
name|Options
operator|.
name|Rename
modifier|...
name|options
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|srcLocations
init|=
name|rpcServer
operator|.
name|getLocationsForPath
argument_list|(
name|src
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// srcLocations may be trimmed by getRenameDestinations()
specifier|final
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|locs
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|(
name|srcLocations
argument_list|)
decl_stmt|;
name|RemoteParam
name|dstParam
init|=
name|getRenameDestinations
argument_list|(
name|locs
argument_list|,
name|dst
argument_list|)
decl_stmt|;
if|if
condition|(
name|locs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Rename of "
operator|+
name|src
operator|+
literal|" to "
operator|+
name|dst
operator|+
literal|" is not allowed,"
operator|+
literal|" no eligible destination in the same namespace was found."
argument_list|)
throw|;
block|}
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"rename2"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
operator|,
name|String
operator|.
name|class
operator|,
name|options
operator|.
name|getClass
argument_list|()
block|}
operator|,
operator|new
name|RemoteParam
argument_list|()
operator|,
name|dstParam
operator|,
name|options
block|)
function|;
end_function

begin_if
if|if
condition|(
name|isMultiDestDirectory
argument_list|(
name|src
argument_list|)
condition|)
block|{
name|rpcClient
operator|.
name|invokeConcurrent
argument_list|(
name|locs
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rpcClient
operator|.
name|invokeSequential
argument_list|(
name|locs
argument_list|,
name|method
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
end_if

begin_function
unit|}    @
name|Override
DECL|method|concat (String trg, String[] src)
specifier|public
name|void
name|concat
parameter_list|(
name|String
name|trg
parameter_list|,
name|String
index|[]
name|src
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
comment|// See if the src and target files are all in the same namespace
name|LocatedBlocks
name|targetBlocks
init|=
name|getBlockLocations
argument_list|(
name|trg
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|targetBlocks
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot locate blocks for target file - "
operator|+
name|trg
argument_list|)
throw|;
block|}
name|LocatedBlock
name|lastLocatedBlock
init|=
name|targetBlocks
operator|.
name|getLastLocatedBlock
argument_list|()
decl_stmt|;
name|String
name|targetBlockPoolId
init|=
name|lastLocatedBlock
operator|.
name|getBlock
argument_list|()
operator|.
name|getBlockPoolId
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|source
range|:
name|src
control|)
block|{
name|LocatedBlocks
name|sourceBlocks
init|=
name|getBlockLocations
argument_list|(
name|source
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|sourceBlocks
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot located blocks for source file "
operator|+
name|source
argument_list|)
throw|;
block|}
name|String
name|sourceBlockPoolId
init|=
name|sourceBlocks
operator|.
name|getLastLocatedBlock
argument_list|()
operator|.
name|getBlock
argument_list|()
operator|.
name|getBlockPoolId
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|sourceBlockPoolId
operator|.
name|equals
argument_list|(
name|targetBlockPoolId
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot concatenate source file "
operator|+
name|source
operator|+
literal|" because it is located in a different namespace"
operator|+
literal|" with block pool id "
operator|+
name|sourceBlockPoolId
operator|+
literal|" from the target file with block pool id "
operator|+
name|targetBlockPoolId
argument_list|)
throw|;
block|}
block|}
comment|// Find locations in the matching namespace.
specifier|final
name|RemoteLocation
name|targetDestination
init|=
name|rpcServer
operator|.
name|getLocationForPath
argument_list|(
name|trg
argument_list|,
literal|true
argument_list|,
name|targetBlockPoolId
argument_list|)
decl_stmt|;
name|String
index|[]
name|sourceDestinations
init|=
operator|new
name|String
index|[
name|src
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|src
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|sourceFile
init|=
name|src
index|[
name|i
index|]
decl_stmt|;
name|RemoteLocation
name|location
init|=
name|rpcServer
operator|.
name|getLocationForPath
argument_list|(
name|sourceFile
argument_list|,
literal|true
argument_list|,
name|targetBlockPoolId
argument_list|)
decl_stmt|;
name|sourceDestinations
index|[
name|i
index|]
operator|=
name|location
operator|.
name|getDest
argument_list|()
expr_stmt|;
block|}
comment|// Invoke
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"concat"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
operator|,
name|String
index|[]
operator|.
expr|class
block|}
operator|,
name|targetDestination
operator|.
name|getDest
argument_list|()
operator|,
name|sourceDestinations
block|)
function|;
end_function

begin_expr_stmt
name|rpcClient
operator|.
name|invokeSingle
argument_list|(
name|targetDestination
argument_list|,
name|method
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}    @
name|Override
DECL|method|truncate (String src, long newLength, String clientName)
specifier|public
name|boolean
name|truncate
parameter_list|(
name|String
name|src
parameter_list|,
name|long
name|newLength
parameter_list|,
name|String
name|clientName
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|locations
init|=
name|rpcServer
operator|.
name|getLocationsForPath
argument_list|(
name|src
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"truncate"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
operator|,
name|long
operator|.
name|class
operator|,
name|String
operator|.
name|class
block|}
operator|,
operator|new
name|RemoteParam
argument_list|()
operator|,
name|newLength
operator|,
name|clientName
block|)
function|;
end_function

begin_return
return|return
name|rpcClient
operator|.
name|invokeSequential
argument_list|(
name|locations
argument_list|,
name|method
argument_list|,
name|Boolean
operator|.
name|class
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
return|;
end_return

begin_function
unit|}    @
name|Override
DECL|method|delete (String src, boolean recursive)
specifier|public
name|boolean
name|delete
parameter_list|(
name|String
name|src
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|locations
init|=
name|rpcServer
operator|.
name|getLocationsForPath
argument_list|(
name|src
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"delete"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
operator|,
name|boolean
operator|.
name|class
block|}
operator|,
operator|new
name|RemoteParam
argument_list|()
operator|,
name|recursive
block|)
function|;
end_function

begin_if
if|if
condition|(
name|rpcServer
operator|.
name|isPathAll
argument_list|(
name|src
argument_list|)
condition|)
block|{
return|return
name|rpcClient
operator|.
name|invokeAll
argument_list|(
name|locations
argument_list|,
name|method
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|rpcClient
operator|.
name|invokeSequential
argument_list|(
name|locations
argument_list|,
name|method
argument_list|,
name|Boolean
operator|.
name|class
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
return|;
block|}
end_if

begin_function
unit|}    @
name|Override
DECL|method|mkdirs (String src, FsPermission masked, boolean createParent)
specifier|public
name|boolean
name|mkdirs
parameter_list|(
name|String
name|src
parameter_list|,
name|FsPermission
name|masked
parameter_list|,
name|boolean
name|createParent
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|locations
init|=
name|rpcServer
operator|.
name|getLocationsForPath
argument_list|(
name|src
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"mkdirs"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
operator|,
name|FsPermission
operator|.
name|class
operator|,
name|boolean
operator|.
name|class
block|}
operator|,
operator|new
name|RemoteParam
argument_list|()
operator|,
name|masked
operator|,
name|createParent
block|)
function|;
end_function

begin_comment
comment|// Create in all locations
end_comment

begin_if
if|if
condition|(
name|rpcServer
operator|.
name|isPathAll
argument_list|(
name|src
argument_list|)
condition|)
block|{
return|return
name|rpcClient
operator|.
name|invokeAll
argument_list|(
name|locations
argument_list|,
name|method
argument_list|)
return|;
block|}
end_if

begin_if
if|if
condition|(
name|locations
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
comment|// Check if this directory already exists
try|try
block|{
name|HdfsFileStatus
name|fileStatus
init|=
name|getFileInfo
argument_list|(
name|src
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileStatus
operator|!=
literal|null
condition|)
block|{
comment|// When existing, the NN doesn't return an exception; return true
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// Can't query if this file exists or not.
name|LOG
operator|.
name|error
argument_list|(
literal|"Error getting file info for {} while proxying mkdirs: {}"
argument_list|,
name|src
argument_list|,
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_if

begin_decl_stmt
specifier|final
name|RemoteLocation
name|firstLocation
init|=
name|locations
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
end_decl_stmt

begin_try
try|try
block|{
return|return
operator|(
name|boolean
operator|)
name|rpcClient
operator|.
name|invokeSingle
argument_list|(
name|firstLocation
argument_list|,
name|method
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|newLocations
init|=
name|checkFaultTolerantRetry
argument_list|(
name|method
argument_list|,
name|src
argument_list|,
name|ioe
argument_list|,
name|firstLocation
argument_list|,
name|locations
argument_list|)
decl_stmt|;
return|return
name|rpcClient
operator|.
name|invokeSequential
argument_list|(
name|newLocations
argument_list|,
name|method
argument_list|,
name|Boolean
operator|.
name|class
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
return|;
block|}
end_try

begin_function
unit|}    @
name|Override
DECL|method|renewLease (String clientName)
specifier|public
name|void
name|renewLease
parameter_list|(
name|String
name|clientName
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"renewLease"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
block|}
operator|,
name|clientName
block|)
function|;
end_function

begin_decl_stmt
name|Set
argument_list|<
name|FederationNamespaceInfo
argument_list|>
name|nss
init|=
name|namenodeResolver
operator|.
name|getNamespaces
argument_list|()
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|rpcClient
operator|.
name|invokeConcurrent
argument_list|(
name|nss
argument_list|,
name|method
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}    @
name|Override
DECL|method|getListing (String src, byte[] startAfter, boolean needLocation)
specifier|public
name|DirectoryListing
name|getListing
parameter_list|(
name|String
name|src
parameter_list|,
name|byte
index|[]
name|startAfter
parameter_list|,
name|boolean
name|needLocation
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
comment|// Locate the dir and fetch the listing
specifier|final
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|locations
init|=
name|rpcServer
operator|.
name|getLocationsForPath
argument_list|(
name|src
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"getListing"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
operator|,
name|startAfter
operator|.
name|getClass
argument_list|()
operator|,
name|boolean
operator|.
name|class
block|}
operator|,
operator|new
name|RemoteParam
argument_list|()
operator|,
name|startAfter
operator|,
name|needLocation
block|)
function|;
end_function

begin_decl_stmt
specifier|final
name|List
argument_list|<
name|RemoteResult
argument_list|<
name|RemoteLocation
argument_list|,
name|DirectoryListing
argument_list|>
argument_list|>
name|listings
init|=
name|rpcClient
operator|.
name|invokeConcurrent
argument_list|(
name|locations
argument_list|,
name|method
argument_list|,
literal|false
argument_list|,
operator|-
literal|1
argument_list|,
name|DirectoryListing
operator|.
name|class
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|Map
argument_list|<
name|String
argument_list|,
name|HdfsFileStatus
argument_list|>
name|nnListing
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|totalRemainingEntries
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|remainingEntries
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|boolean
name|namenodeListingExists
init|=
literal|false
decl_stmt|;
end_decl_stmt

begin_if
if|if
condition|(
name|listings
operator|!=
literal|null
condition|)
block|{
comment|// Check the subcluster listing with the smallest name
name|String
name|lastName
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RemoteResult
argument_list|<
name|RemoteLocation
argument_list|,
name|DirectoryListing
argument_list|>
name|result
range|:
name|listings
control|)
block|{
if|if
condition|(
name|result
operator|.
name|hasException
argument_list|()
condition|)
block|{
name|IOException
name|ioe
init|=
name|result
operator|.
name|getException
argument_list|()
decl_stmt|;
if|if
condition|(
name|ioe
operator|instanceof
name|FileNotFoundException
condition|)
block|{
name|RemoteLocation
name|location
init|=
name|result
operator|.
name|getLocation
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cannot get listing from {}"
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|allowPartialList
condition|)
block|{
throw|throw
name|ioe
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|result
operator|.
name|getResult
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|DirectoryListing
name|listing
init|=
name|result
operator|.
name|getResult
argument_list|()
decl_stmt|;
name|totalRemainingEntries
operator|+=
name|listing
operator|.
name|getRemainingEntries
argument_list|()
expr_stmt|;
name|HdfsFileStatus
index|[]
name|partialListing
init|=
name|listing
operator|.
name|getPartialListing
argument_list|()
decl_stmt|;
name|int
name|length
init|=
name|partialListing
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|length
operator|>
literal|0
condition|)
block|{
name|HdfsFileStatus
name|lastLocalEntry
init|=
name|partialListing
index|[
name|length
operator|-
literal|1
index|]
decl_stmt|;
name|String
name|lastLocalName
init|=
name|lastLocalEntry
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
if|if
condition|(
name|lastName
operator|==
literal|null
operator|||
name|lastName
operator|.
name|compareTo
argument_list|(
name|lastLocalName
argument_list|)
operator|>
literal|0
condition|)
block|{
name|lastName
operator|=
name|lastLocalName
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// Add existing entries
for|for
control|(
name|RemoteResult
argument_list|<
name|RemoteLocation
argument_list|,
name|DirectoryListing
argument_list|>
name|result
range|:
name|listings
control|)
block|{
name|DirectoryListing
name|listing
init|=
name|result
operator|.
name|getResult
argument_list|()
decl_stmt|;
if|if
condition|(
name|listing
operator|!=
literal|null
condition|)
block|{
name|namenodeListingExists
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|HdfsFileStatus
name|file
range|:
name|listing
operator|.
name|getPartialListing
argument_list|()
control|)
block|{
name|String
name|filename
init|=
name|file
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
if|if
condition|(
name|totalRemainingEntries
operator|>
literal|0
operator|&&
name|filename
operator|.
name|compareTo
argument_list|(
name|lastName
argument_list|)
operator|>
literal|0
condition|)
block|{
comment|// Discarding entries further than the lastName
name|remainingEntries
operator|++
expr_stmt|;
block|}
else|else
block|{
name|nnListing
operator|.
name|put
argument_list|(
name|filename
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
block|}
name|remainingEntries
operator|+=
name|listing
operator|.
name|getRemainingEntries
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_if

begin_comment
comment|// Add mount points at this level in the tree
end_comment

begin_decl_stmt
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|children
init|=
name|subclusterResolver
operator|.
name|getMountPoints
argument_list|(
name|src
argument_list|)
decl_stmt|;
end_decl_stmt

begin_if
if|if
condition|(
name|children
operator|!=
literal|null
condition|)
block|{
comment|// Get the dates for each mount point
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|dates
init|=
name|getMountPointDates
argument_list|(
name|src
argument_list|)
decl_stmt|;
comment|// Create virtual folder with the mount name
for|for
control|(
name|String
name|child
range|:
name|children
control|)
block|{
name|long
name|date
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|dates
operator|!=
literal|null
operator|&&
name|dates
operator|.
name|containsKey
argument_list|(
name|child
argument_list|)
condition|)
block|{
name|date
operator|=
name|dates
operator|.
name|get
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
name|HdfsFileStatus
name|dirStatus
init|=
name|getMountPointStatus
argument_list|(
name|child
argument_list|,
literal|0
argument_list|,
name|date
argument_list|)
decl_stmt|;
comment|// This may overwrite existing listing entries with the mount point
comment|// TODO don't add if already there?
name|nnListing
operator|.
name|put
argument_list|(
name|child
argument_list|,
name|dirStatus
argument_list|)
expr_stmt|;
block|}
block|}
end_if

begin_if
if|if
condition|(
operator|!
name|namenodeListingExists
operator|&&
name|nnListing
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// NN returns a null object if the directory cannot be found and has no
comment|// listing. If we didn't retrieve any NN listing data, and there are no
comment|// mount points here, return null.
return|return
literal|null
return|;
block|}
end_if

begin_comment
comment|// Generate combined listing
end_comment

begin_decl_stmt
name|HdfsFileStatus
index|[]
name|combinedData
init|=
operator|new
name|HdfsFileStatus
index|[
name|nnListing
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|combinedData
operator|=
name|nnListing
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
name|combinedData
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
operator|new
name|DirectoryListing
argument_list|(
name|combinedData
argument_list|,
name|remainingEntries
argument_list|)
return|;
end_return

begin_function
unit|}    @
name|Override
DECL|method|getFileInfo (String src)
specifier|public
name|HdfsFileStatus
name|getFileInfo
parameter_list|(
name|String
name|src
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|locations
init|=
name|rpcServer
operator|.
name|getLocationsForPath
argument_list|(
name|src
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"getFileInfo"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
block|}
operator|,
operator|new
name|RemoteParam
argument_list|()
block|)
function|;
end_function

begin_decl_stmt
name|HdfsFileStatus
name|ret
init|=
literal|null
decl_stmt|;
end_decl_stmt

begin_comment
comment|// If it's a directory, we check in all locations
end_comment

begin_if
if|if
condition|(
name|rpcServer
operator|.
name|isPathAll
argument_list|(
name|src
argument_list|)
condition|)
block|{
name|ret
operator|=
name|getFileInfoAll
argument_list|(
name|locations
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Check for file information sequentially
name|ret
operator|=
name|rpcClient
operator|.
name|invokeSequential
argument_list|(
name|locations
argument_list|,
name|method
argument_list|,
name|HdfsFileStatus
operator|.
name|class
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
end_if

begin_comment
comment|// If there is no real path, check mount points
end_comment

begin_if
if|if
condition|(
name|ret
operator|==
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|children
init|=
name|subclusterResolver
operator|.
name|getMountPoints
argument_list|(
name|src
argument_list|)
decl_stmt|;
if|if
condition|(
name|children
operator|!=
literal|null
operator|&&
operator|!
name|children
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|dates
init|=
name|getMountPointDates
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|long
name|date
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|dates
operator|!=
literal|null
operator|&&
name|dates
operator|.
name|containsKey
argument_list|(
name|src
argument_list|)
condition|)
block|{
name|date
operator|=
name|dates
operator|.
name|get
argument_list|(
name|src
argument_list|)
expr_stmt|;
block|}
name|ret
operator|=
name|getMountPointStatus
argument_list|(
name|src
argument_list|,
name|children
operator|.
name|size
argument_list|()
argument_list|,
name|date
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|children
operator|!=
literal|null
condition|)
block|{
comment|// The src is a mount point, but there are no files or directories
name|ret
operator|=
name|getMountPointStatus
argument_list|(
name|src
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_if

begin_return
return|return
name|ret
return|;
end_return

begin_function
unit|}    @
name|Override
DECL|method|isFileClosed (String src)
specifier|public
name|boolean
name|isFileClosed
parameter_list|(
name|String
name|src
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|locations
init|=
name|rpcServer
operator|.
name|getLocationsForPath
argument_list|(
name|src
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"isFileClosed"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
block|}
operator|,
operator|new
name|RemoteParam
argument_list|()
block|)
function|;
end_function

begin_return
return|return
name|rpcClient
operator|.
name|invokeSequential
argument_list|(
name|locations
argument_list|,
name|method
argument_list|,
name|Boolean
operator|.
name|class
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
return|;
end_return

begin_function
unit|}    @
name|Override
DECL|method|getFileLinkInfo (String src)
specifier|public
name|HdfsFileStatus
name|getFileLinkInfo
parameter_list|(
name|String
name|src
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|locations
init|=
name|rpcServer
operator|.
name|getLocationsForPath
argument_list|(
name|src
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"getFileLinkInfo"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
block|}
operator|,
operator|new
name|RemoteParam
argument_list|()
block|)
function|;
end_function

begin_return
return|return
name|rpcClient
operator|.
name|invokeSequential
argument_list|(
name|locations
argument_list|,
name|method
argument_list|,
name|HdfsFileStatus
operator|.
name|class
argument_list|,
literal|null
argument_list|)
return|;
end_return

begin_function
unit|}    @
name|Override
DECL|method|getLocatedFileInfo (String src, boolean needBlockToken)
specifier|public
name|HdfsLocatedFileStatus
name|getLocatedFileInfo
parameter_list|(
name|String
name|src
parameter_list|,
name|boolean
name|needBlockToken
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|locations
init|=
name|rpcServer
operator|.
name|getLocationsForPath
argument_list|(
name|src
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"getLocatedFileInfo"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
operator|,
name|boolean
operator|.
name|class
block|}
operator|,
operator|new
name|RemoteParam
argument_list|()
operator|,
name|needBlockToken
block|)
function|;
end_function

begin_return
return|return
operator|(
name|HdfsLocatedFileStatus
operator|)
name|rpcClient
operator|.
name|invokeSequential
argument_list|(
name|locations
argument_list|,
name|method
argument_list|,
name|HdfsFileStatus
operator|.
name|class
argument_list|,
literal|null
argument_list|)
return|;
end_return

begin_function
unit|}    @
name|Override
DECL|method|getStats ()
specifier|public
name|long
index|[]
name|getStats
parameter_list|()
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|UNCHECKED
argument_list|)
expr_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"getStats"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|FederationNamespaceInfo
argument_list|>
name|nss
init|=
name|namenodeResolver
operator|.
name|getNamespaces
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|FederationNamespaceInfo
argument_list|,
name|long
index|[]
argument_list|>
name|results
init|=
name|rpcClient
operator|.
name|invokeConcurrent
argument_list|(
name|nss
argument_list|,
name|method
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|long
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
name|long
index|[]
name|combinedData
init|=
operator|new
name|long
index|[
name|STATS_ARRAY_LENGTH
index|]
decl_stmt|;
for|for
control|(
name|long
index|[]
name|data
range|:
name|results
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|combinedData
operator|.
name|length
operator|&&
name|i
operator|<
name|data
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|data
index|[
name|i
index|]
operator|>=
literal|0
condition|)
block|{
name|combinedData
index|[
name|i
index|]
operator|+=
name|data
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
block|}
return|return
name|combinedData
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|getDatanodeReport (HdfsConstants.DatanodeReportType type)
specifier|public
name|DatanodeInfo
index|[]
name|getDatanodeReport
parameter_list|(
name|HdfsConstants
operator|.
name|DatanodeReportType
name|type
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|UNCHECKED
argument_list|)
expr_stmt|;
return|return
name|rpcServer
operator|.
name|getDatanodeReport
argument_list|(
name|type
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|getDatanodeStorageReport ( HdfsConstants.DatanodeReportType type)
specifier|public
name|DatanodeStorageReport
index|[]
name|getDatanodeStorageReport
parameter_list|(
name|HdfsConstants
operator|.
name|DatanodeReportType
name|type
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|UNCHECKED
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|DatanodeStorageReport
index|[]
argument_list|>
name|dnSubcluster
init|=
name|rpcServer
operator|.
name|getDatanodeStorageReportMap
argument_list|(
name|type
argument_list|)
decl_stmt|;
comment|// Avoid repeating machines in multiple subclusters
name|Map
argument_list|<
name|String
argument_list|,
name|DatanodeStorageReport
argument_list|>
name|datanodesMap
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|DatanodeStorageReport
index|[]
name|dns
range|:
name|dnSubcluster
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|DatanodeStorageReport
name|dn
range|:
name|dns
control|)
block|{
name|DatanodeInfo
name|dnInfo
init|=
name|dn
operator|.
name|getDatanodeInfo
argument_list|()
decl_stmt|;
name|String
name|nodeId
init|=
name|dnInfo
operator|.
name|getXferAddr
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|datanodesMap
operator|.
name|containsKey
argument_list|(
name|nodeId
argument_list|)
condition|)
block|{
name|datanodesMap
operator|.
name|put
argument_list|(
name|nodeId
argument_list|,
name|dn
argument_list|)
expr_stmt|;
block|}
comment|// TODO merge somehow, right now it just takes the first one
block|}
block|}
name|Collection
argument_list|<
name|DatanodeStorageReport
argument_list|>
name|datanodes
init|=
name|datanodesMap
operator|.
name|values
argument_list|()
decl_stmt|;
name|DatanodeStorageReport
index|[]
name|combinedData
init|=
operator|new
name|DatanodeStorageReport
index|[
name|datanodes
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|combinedData
operator|=
name|datanodes
operator|.
name|toArray
argument_list|(
name|combinedData
argument_list|)
expr_stmt|;
return|return
name|combinedData
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|setSafeMode (HdfsConstants.SafeModeAction action, boolean isChecked)
specifier|public
name|boolean
name|setSafeMode
parameter_list|(
name|HdfsConstants
operator|.
name|SafeModeAction
name|action
parameter_list|,
name|boolean
name|isChecked
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
comment|// Set safe mode in all the name spaces
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"setSafeMode"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|HdfsConstants
operator|.
name|SafeModeAction
operator|.
name|class
operator|,
name|boolean
operator|.
name|class
block|}
operator|,
name|action
operator|,
name|isChecked
block|)
function|;
end_function

begin_decl_stmt
name|Set
argument_list|<
name|FederationNamespaceInfo
argument_list|>
name|nss
init|=
name|namenodeResolver
operator|.
name|getNamespaces
argument_list|()
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|Map
argument_list|<
name|FederationNamespaceInfo
argument_list|,
name|Boolean
argument_list|>
name|results
init|=
name|rpcClient
operator|.
name|invokeConcurrent
argument_list|(
name|nss
argument_list|,
name|method
argument_list|,
literal|true
argument_list|,
operator|!
name|isChecked
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|// We only report true if all the name space are in safe mode
end_comment

begin_decl_stmt
name|int
name|numSafemode
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_for
for|for
control|(
name|boolean
name|safemode
range|:
name|results
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|safemode
condition|)
block|{
name|numSafemode
operator|++
expr_stmt|;
block|}
block|}
end_for

begin_return
return|return
name|numSafemode
operator|==
name|results
operator|.
name|size
argument_list|()
return|;
end_return

begin_function
unit|}    @
name|Override
DECL|method|restoreFailedStorage (String arg)
specifier|public
name|boolean
name|restoreFailedStorage
parameter_list|(
name|String
name|arg
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|UNCHECKED
argument_list|)
expr_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"restoreFailedStorage"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
block|}
operator|,
name|arg
block|)
function|;
end_function

begin_decl_stmt
specifier|final
name|Set
argument_list|<
name|FederationNamespaceInfo
argument_list|>
name|nss
init|=
name|namenodeResolver
operator|.
name|getNamespaces
argument_list|()
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|Map
argument_list|<
name|FederationNamespaceInfo
argument_list|,
name|Boolean
argument_list|>
name|ret
init|=
name|rpcClient
operator|.
name|invokeConcurrent
argument_list|(
name|nss
argument_list|,
name|method
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|boolean
name|success
init|=
literal|true
decl_stmt|;
end_decl_stmt

begin_for
for|for
control|(
name|boolean
name|s
range|:
name|ret
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|s
condition|)
block|{
name|success
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
end_for

begin_return
return|return
name|success
return|;
end_return

begin_function
unit|}    @
name|Override
DECL|method|saveNamespace (long timeWindow, long txGap)
specifier|public
name|boolean
name|saveNamespace
parameter_list|(
name|long
name|timeWindow
parameter_list|,
name|long
name|txGap
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|UNCHECKED
argument_list|)
expr_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"saveNamespace"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|long
operator|.
name|class
operator|,
name|long
operator|.
name|class
block|}
operator|,
name|timeWindow
operator|,
name|txGap
block|)
function|;
end_function

begin_decl_stmt
specifier|final
name|Set
argument_list|<
name|FederationNamespaceInfo
argument_list|>
name|nss
init|=
name|namenodeResolver
operator|.
name|getNamespaces
argument_list|()
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|Map
argument_list|<
name|FederationNamespaceInfo
argument_list|,
name|Boolean
argument_list|>
name|ret
init|=
name|rpcClient
operator|.
name|invokeConcurrent
argument_list|(
name|nss
argument_list|,
name|method
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|boolean
operator|.
name|class
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|boolean
name|success
init|=
literal|true
decl_stmt|;
end_decl_stmt

begin_for
for|for
control|(
name|boolean
name|s
range|:
name|ret
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|s
condition|)
block|{
name|success
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
end_for

begin_return
return|return
name|success
return|;
end_return

begin_function
unit|}    @
name|Override
DECL|method|rollEdits ()
specifier|public
name|long
name|rollEdits
parameter_list|()
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"rollEdits"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{}
block|)
function|;
end_function

begin_decl_stmt
specifier|final
name|Set
argument_list|<
name|FederationNamespaceInfo
argument_list|>
name|nss
init|=
name|namenodeResolver
operator|.
name|getNamespaces
argument_list|()
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|Map
argument_list|<
name|FederationNamespaceInfo
argument_list|,
name|Long
argument_list|>
name|ret
init|=
name|rpcClient
operator|.
name|invokeConcurrent
argument_list|(
name|nss
argument_list|,
name|method
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|long
operator|.
name|class
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|// Return the maximum txid
end_comment

begin_decl_stmt
name|long
name|txid
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_for
for|for
control|(
name|long
name|t
range|:
name|ret
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|t
operator|>
name|txid
condition|)
block|{
name|txid
operator|=
name|t
expr_stmt|;
block|}
block|}
end_for

begin_return
return|return
name|txid
return|;
end_return

begin_function
unit|}    @
name|Override
DECL|method|refreshNodes ()
specifier|public
name|void
name|refreshNodes
parameter_list|()
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|UNCHECKED
argument_list|)
expr_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"refreshNodes"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{}
block|)
function|;
end_function

begin_decl_stmt
specifier|final
name|Set
argument_list|<
name|FederationNamespaceInfo
argument_list|>
name|nss
init|=
name|namenodeResolver
operator|.
name|getNamespaces
argument_list|()
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|rpcClient
operator|.
name|invokeConcurrent
argument_list|(
name|nss
argument_list|,
name|method
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}    @
name|Override
DECL|method|finalizeUpgrade ()
specifier|public
name|void
name|finalizeUpgrade
parameter_list|()
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|UNCHECKED
argument_list|)
expr_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"finalizeUpgrade"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{}
block|)
function|;
end_function

begin_decl_stmt
specifier|final
name|Set
argument_list|<
name|FederationNamespaceInfo
argument_list|>
name|nss
init|=
name|namenodeResolver
operator|.
name|getNamespaces
argument_list|()
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|rpcClient
operator|.
name|invokeConcurrent
argument_list|(
name|nss
argument_list|,
name|method
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}    @
name|Override
DECL|method|upgradeStatus ()
specifier|public
name|boolean
name|upgradeStatus
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|methodName
init|=
name|RouterRpcServer
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Operation \""
operator|+
name|methodName
operator|+
literal|"\" is not supported"
argument_list|)
throw|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|rollingUpgrade (HdfsConstants.RollingUpgradeAction action)
specifier|public
name|RollingUpgradeInfo
name|rollingUpgrade
parameter_list|(
name|HdfsConstants
operator|.
name|RollingUpgradeAction
name|action
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"rollingUpgrade"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|HdfsConstants
operator|.
name|RollingUpgradeAction
operator|.
name|class
block|}
operator|,
name|action
block|)
function|;
end_function

begin_decl_stmt
specifier|final
name|Set
argument_list|<
name|FederationNamespaceInfo
argument_list|>
name|nss
init|=
name|namenodeResolver
operator|.
name|getNamespaces
argument_list|()
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|Map
argument_list|<
name|FederationNamespaceInfo
argument_list|,
name|RollingUpgradeInfo
argument_list|>
name|ret
init|=
name|rpcClient
operator|.
name|invokeConcurrent
argument_list|(
name|nss
argument_list|,
name|method
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|RollingUpgradeInfo
operator|.
name|class
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|// Return the first rolling upgrade info
end_comment

begin_decl_stmt
name|RollingUpgradeInfo
name|info
init|=
literal|null
decl_stmt|;
end_decl_stmt

begin_for
for|for
control|(
name|RollingUpgradeInfo
name|infoNs
range|:
name|ret
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|info
operator|==
literal|null
operator|&&
name|infoNs
operator|!=
literal|null
condition|)
block|{
name|info
operator|=
name|infoNs
expr_stmt|;
block|}
block|}
end_for

begin_return
return|return
name|info
return|;
end_return

begin_function
unit|}    @
name|Override
DECL|method|metaSave (String filename)
specifier|public
name|void
name|metaSave
parameter_list|(
name|String
name|filename
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|UNCHECKED
argument_list|)
expr_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"metaSave"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
block|}
operator|,
name|filename
block|)
function|;
end_function

begin_decl_stmt
specifier|final
name|Set
argument_list|<
name|FederationNamespaceInfo
argument_list|>
name|nss
init|=
name|namenodeResolver
operator|.
name|getNamespaces
argument_list|()
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|rpcClient
operator|.
name|invokeConcurrent
argument_list|(
name|nss
argument_list|,
name|method
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}    @
name|Override
DECL|method|listCorruptFileBlocks (String path, String cookie)
specifier|public
name|CorruptFileBlocks
name|listCorruptFileBlocks
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|cookie
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|locations
init|=
name|rpcServer
operator|.
name|getLocationsForPath
argument_list|(
name|path
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"listCorruptFileBlocks"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
operator|,
name|String
operator|.
name|class
block|}
operator|,
operator|new
name|RemoteParam
argument_list|()
operator|,
name|cookie
block|)
function|;
end_function

begin_return
return|return
name|rpcClient
operator|.
name|invokeSequential
argument_list|(
name|locations
argument_list|,
name|method
argument_list|,
name|CorruptFileBlocks
operator|.
name|class
argument_list|,
literal|null
argument_list|)
return|;
end_return

begin_function
unit|}    @
name|Override
DECL|method|setBalancerBandwidth (long bandwidth)
specifier|public
name|void
name|setBalancerBandwidth
parameter_list|(
name|long
name|bandwidth
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|UNCHECKED
argument_list|)
expr_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"setBalancerBandwidth"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|Long
operator|.
name|class
block|}
operator|,
name|bandwidth
block|)
function|;
end_function

begin_decl_stmt
specifier|final
name|Set
argument_list|<
name|FederationNamespaceInfo
argument_list|>
name|nss
init|=
name|namenodeResolver
operator|.
name|getNamespaces
argument_list|()
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|rpcClient
operator|.
name|invokeConcurrent
argument_list|(
name|nss
argument_list|,
name|method
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}    @
name|Override
DECL|method|getContentSummary (String path)
specifier|public
name|ContentSummary
name|getContentSummary
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
comment|// Get the summaries from regular files
specifier|final
name|Collection
argument_list|<
name|ContentSummary
argument_list|>
name|summaries
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|locations
init|=
name|rpcServer
operator|.
name|getLocationsForPath
argument_list|(
name|path
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"getContentSummary"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
block|}
operator|,
operator|new
name|RemoteParam
argument_list|()
block|)
function|;
end_function

begin_decl_stmt
specifier|final
name|List
argument_list|<
name|RemoteResult
argument_list|<
name|RemoteLocation
argument_list|,
name|ContentSummary
argument_list|>
argument_list|>
name|results
init|=
name|rpcClient
operator|.
name|invokeConcurrent
argument_list|(
name|locations
argument_list|,
name|method
argument_list|,
literal|false
argument_list|,
operator|-
literal|1
argument_list|,
name|ContentSummary
operator|.
name|class
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|FileNotFoundException
name|notFoundException
init|=
literal|null
decl_stmt|;
end_decl_stmt

begin_for
for|for
control|(
name|RemoteResult
argument_list|<
name|RemoteLocation
argument_list|,
name|ContentSummary
argument_list|>
name|result
range|:
name|results
control|)
block|{
if|if
condition|(
name|result
operator|.
name|hasException
argument_list|()
condition|)
block|{
name|IOException
name|ioe
init|=
name|result
operator|.
name|getException
argument_list|()
decl_stmt|;
if|if
condition|(
name|ioe
operator|instanceof
name|FileNotFoundException
condition|)
block|{
name|notFoundException
operator|=
operator|(
name|FileNotFoundException
operator|)
name|ioe
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|allowPartialList
condition|)
block|{
throw|throw
name|ioe
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|result
operator|.
name|getResult
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|summaries
operator|.
name|add
argument_list|(
name|result
operator|.
name|getResult
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_for

begin_comment
comment|// Add mount points at this level in the tree
end_comment

begin_decl_stmt
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|children
init|=
name|subclusterResolver
operator|.
name|getMountPoints
argument_list|(
name|path
argument_list|)
decl_stmt|;
end_decl_stmt

begin_if
if|if
condition|(
name|children
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|child
range|:
name|children
control|)
block|{
name|Path
name|childPath
init|=
operator|new
name|Path
argument_list|(
name|path
argument_list|,
name|child
argument_list|)
decl_stmt|;
try|try
block|{
name|ContentSummary
name|mountSummary
init|=
name|getContentSummary
argument_list|(
name|childPath
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|mountSummary
operator|!=
literal|null
condition|)
block|{
name|summaries
operator|.
name|add
argument_list|(
name|mountSummary
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot get content summary for mount {}: {}"
argument_list|,
name|childPath
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_if

begin_comment
comment|// Throw original exception if no original nor mount points
end_comment

begin_if
if|if
condition|(
name|summaries
operator|.
name|isEmpty
argument_list|()
operator|&&
name|notFoundException
operator|!=
literal|null
condition|)
block|{
throw|throw
name|notFoundException
throw|;
block|}
end_if

begin_return
return|return
name|aggregateContentSummary
argument_list|(
name|summaries
argument_list|)
return|;
end_return

begin_function
unit|}    @
name|Override
DECL|method|fsync (String src, long fileId, String clientName, long lastBlockLength)
specifier|public
name|void
name|fsync
parameter_list|(
name|String
name|src
parameter_list|,
name|long
name|fileId
parameter_list|,
name|String
name|clientName
parameter_list|,
name|long
name|lastBlockLength
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|locations
init|=
name|rpcServer
operator|.
name|getLocationsForPath
argument_list|(
name|src
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"fsync"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
operator|,
name|long
operator|.
name|class
operator|,
name|String
operator|.
name|class
operator|,
name|long
operator|.
name|class
block|}
operator|,
operator|new
name|RemoteParam
argument_list|()
operator|,
name|fileId
operator|,
name|clientName
operator|,
name|lastBlockLength
block|)
function|;
end_function

begin_expr_stmt
name|rpcClient
operator|.
name|invokeSequential
argument_list|(
name|locations
argument_list|,
name|method
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}    @
name|Override
DECL|method|setTimes (String src, long mtime, long atime)
specifier|public
name|void
name|setTimes
parameter_list|(
name|String
name|src
parameter_list|,
name|long
name|mtime
parameter_list|,
name|long
name|atime
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|locations
init|=
name|rpcServer
operator|.
name|getLocationsForPath
argument_list|(
name|src
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"setTimes"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
operator|,
name|long
operator|.
name|class
operator|,
name|long
operator|.
name|class
block|}
operator|,
operator|new
name|RemoteParam
argument_list|()
operator|,
name|mtime
operator|,
name|atime
block|)
function|;
end_function

begin_expr_stmt
name|rpcClient
operator|.
name|invokeSequential
argument_list|(
name|locations
argument_list|,
name|method
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}    @
name|Override
DECL|method|createSymlink (String target, String link, FsPermission dirPerms, boolean createParent)
specifier|public
name|void
name|createSymlink
parameter_list|(
name|String
name|target
parameter_list|,
name|String
name|link
parameter_list|,
name|FsPermission
name|dirPerms
parameter_list|,
name|boolean
name|createParent
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
comment|// TODO Verify that the link location is in the same NS as the targets
specifier|final
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|targetLocations
init|=
name|rpcServer
operator|.
name|getLocationsForPath
argument_list|(
name|target
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|linkLocations
init|=
name|rpcServer
operator|.
name|getLocationsForPath
argument_list|(
name|link
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|RemoteLocation
name|linkLocation
init|=
name|linkLocations
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"createSymlink"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
operator|,
name|String
operator|.
name|class
operator|,
name|FsPermission
operator|.
name|class
operator|,
name|boolean
operator|.
name|class
block|}
operator|,
operator|new
name|RemoteParam
argument_list|()
operator|,
name|linkLocation
operator|.
name|getDest
argument_list|()
operator|,
name|dirPerms
operator|,
name|createParent
block|)
function|;
end_function

begin_expr_stmt
name|rpcClient
operator|.
name|invokeSequential
argument_list|(
name|targetLocations
argument_list|,
name|method
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}    @
name|Override
DECL|method|getLinkTarget (String path)
specifier|public
name|String
name|getLinkTarget
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|locations
init|=
name|rpcServer
operator|.
name|getLocationsForPath
argument_list|(
name|path
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"getLinkTarget"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
block|}
operator|,
operator|new
name|RemoteParam
argument_list|()
block|)
function|;
end_function

begin_return
return|return
name|rpcClient
operator|.
name|invokeSequential
argument_list|(
name|locations
argument_list|,
name|method
argument_list|,
name|String
operator|.
name|class
argument_list|,
literal|null
argument_list|)
return|;
end_return

begin_function
unit|}    @
name|Override
DECL|method|allowSnapshot (String snapshotRoot)
specifier|public
name|void
name|allowSnapshot
parameter_list|(
name|String
name|snapshotRoot
parameter_list|)
throws|throws
name|IOException
block|{
name|snapshotProto
operator|.
name|allowSnapshot
argument_list|(
name|snapshotRoot
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|disallowSnapshot (String snapshot)
specifier|public
name|void
name|disallowSnapshot
parameter_list|(
name|String
name|snapshot
parameter_list|)
throws|throws
name|IOException
block|{
name|snapshotProto
operator|.
name|disallowSnapshot
argument_list|(
name|snapshot
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|renameSnapshot (String snapshotRoot, String snapshotOldName, String snapshotNewName)
specifier|public
name|void
name|renameSnapshot
parameter_list|(
name|String
name|snapshotRoot
parameter_list|,
name|String
name|snapshotOldName
parameter_list|,
name|String
name|snapshotNewName
parameter_list|)
throws|throws
name|IOException
block|{
name|snapshotProto
operator|.
name|renameSnapshot
argument_list|(
name|snapshotRoot
argument_list|,
name|snapshotOldName
argument_list|,
name|snapshotNewName
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|getSnapshottableDirListing ()
specifier|public
name|SnapshottableDirectoryStatus
index|[]
name|getSnapshottableDirListing
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|snapshotProto
operator|.
name|getSnapshottableDirListing
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|getSnapshotDiffReport (String snapshotRoot, String earlierSnapshotName, String laterSnapshotName)
specifier|public
name|SnapshotDiffReport
name|getSnapshotDiffReport
parameter_list|(
name|String
name|snapshotRoot
parameter_list|,
name|String
name|earlierSnapshotName
parameter_list|,
name|String
name|laterSnapshotName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|snapshotProto
operator|.
name|getSnapshotDiffReport
argument_list|(
name|snapshotRoot
argument_list|,
name|earlierSnapshotName
argument_list|,
name|laterSnapshotName
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|getSnapshotDiffReportListing ( String snapshotRoot, String earlierSnapshotName, String laterSnapshotName, byte[] startPath, int index)
specifier|public
name|SnapshotDiffReportListing
name|getSnapshotDiffReportListing
parameter_list|(
name|String
name|snapshotRoot
parameter_list|,
name|String
name|earlierSnapshotName
parameter_list|,
name|String
name|laterSnapshotName
parameter_list|,
name|byte
index|[]
name|startPath
parameter_list|,
name|int
name|index
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|snapshotProto
operator|.
name|getSnapshotDiffReportListing
argument_list|(
name|snapshotRoot
argument_list|,
name|earlierSnapshotName
argument_list|,
name|laterSnapshotName
argument_list|,
name|startPath
argument_list|,
name|index
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|addCacheDirective (CacheDirectiveInfo path, EnumSet<CacheFlag> flags)
specifier|public
name|long
name|addCacheDirective
parameter_list|(
name|CacheDirectiveInfo
name|path
parameter_list|,
name|EnumSet
argument_list|<
name|CacheFlag
argument_list|>
name|flags
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|routerCacheAdmin
operator|.
name|addCacheDirective
argument_list|(
name|path
argument_list|,
name|flags
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|modifyCacheDirective (CacheDirectiveInfo directive, EnumSet<CacheFlag> flags)
specifier|public
name|void
name|modifyCacheDirective
parameter_list|(
name|CacheDirectiveInfo
name|directive
parameter_list|,
name|EnumSet
argument_list|<
name|CacheFlag
argument_list|>
name|flags
parameter_list|)
throws|throws
name|IOException
block|{
name|routerCacheAdmin
operator|.
name|modifyCacheDirective
argument_list|(
name|directive
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|removeCacheDirective (long id)
specifier|public
name|void
name|removeCacheDirective
parameter_list|(
name|long
name|id
parameter_list|)
throws|throws
name|IOException
block|{
name|routerCacheAdmin
operator|.
name|removeCacheDirective
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|listCacheDirectives (long prevId, CacheDirectiveInfo filter)
specifier|public
name|BatchedEntries
argument_list|<
name|CacheDirectiveEntry
argument_list|>
name|listCacheDirectives
parameter_list|(
name|long
name|prevId
parameter_list|,
name|CacheDirectiveInfo
name|filter
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|routerCacheAdmin
operator|.
name|listCacheDirectives
argument_list|(
name|prevId
argument_list|,
name|filter
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|addCachePool (CachePoolInfo info)
specifier|public
name|void
name|addCachePool
parameter_list|(
name|CachePoolInfo
name|info
parameter_list|)
throws|throws
name|IOException
block|{
name|routerCacheAdmin
operator|.
name|addCachePool
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|modifyCachePool (CachePoolInfo info)
specifier|public
name|void
name|modifyCachePool
parameter_list|(
name|CachePoolInfo
name|info
parameter_list|)
throws|throws
name|IOException
block|{
name|routerCacheAdmin
operator|.
name|modifyCachePool
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|removeCachePool (String cachePoolName)
specifier|public
name|void
name|removeCachePool
parameter_list|(
name|String
name|cachePoolName
parameter_list|)
throws|throws
name|IOException
block|{
name|routerCacheAdmin
operator|.
name|removeCachePool
argument_list|(
name|cachePoolName
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|listCachePools (String prevKey)
specifier|public
name|BatchedEntries
argument_list|<
name|CachePoolEntry
argument_list|>
name|listCachePools
parameter_list|(
name|String
name|prevKey
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|routerCacheAdmin
operator|.
name|listCachePools
argument_list|(
name|prevKey
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|modifyAclEntries (String src, List<AclEntry> aclSpec)
specifier|public
name|void
name|modifyAclEntries
parameter_list|(
name|String
name|src
parameter_list|,
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
comment|// TODO handle virtual directories
specifier|final
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|locations
init|=
name|rpcServer
operator|.
name|getLocationsForPath
argument_list|(
name|src
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"modifyAclEntries"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
operator|,
name|List
operator|.
name|class
block|}
operator|,
operator|new
name|RemoteParam
argument_list|()
operator|,
name|aclSpec
block|)
function|;
end_function

begin_if
if|if
condition|(
name|rpcServer
operator|.
name|isInvokeConcurrent
argument_list|(
name|src
argument_list|)
condition|)
block|{
name|rpcClient
operator|.
name|invokeConcurrent
argument_list|(
name|locations
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rpcClient
operator|.
name|invokeSequential
argument_list|(
name|locations
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
end_if

begin_function
unit|}    @
name|Override
DECL|method|removeAclEntries (String src, List<AclEntry> aclSpec)
specifier|public
name|void
name|removeAclEntries
parameter_list|(
name|String
name|src
parameter_list|,
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
comment|// TODO handle virtual directories
specifier|final
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|locations
init|=
name|rpcServer
operator|.
name|getLocationsForPath
argument_list|(
name|src
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"removeAclEntries"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
operator|,
name|List
operator|.
name|class
block|}
operator|,
operator|new
name|RemoteParam
argument_list|()
operator|,
name|aclSpec
block|)
function|;
end_function

begin_if
if|if
condition|(
name|rpcServer
operator|.
name|isInvokeConcurrent
argument_list|(
name|src
argument_list|)
condition|)
block|{
name|rpcClient
operator|.
name|invokeConcurrent
argument_list|(
name|locations
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rpcClient
operator|.
name|invokeSequential
argument_list|(
name|locations
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
end_if

begin_function
unit|}    @
name|Override
DECL|method|removeDefaultAcl (String src)
specifier|public
name|void
name|removeDefaultAcl
parameter_list|(
name|String
name|src
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
comment|// TODO handle virtual directories
specifier|final
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|locations
init|=
name|rpcServer
operator|.
name|getLocationsForPath
argument_list|(
name|src
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"removeDefaultAcl"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
block|}
operator|,
operator|new
name|RemoteParam
argument_list|()
block|)
function|;
end_function

begin_if
if|if
condition|(
name|rpcServer
operator|.
name|isInvokeConcurrent
argument_list|(
name|src
argument_list|)
condition|)
block|{
name|rpcClient
operator|.
name|invokeConcurrent
argument_list|(
name|locations
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rpcClient
operator|.
name|invokeSequential
argument_list|(
name|locations
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
end_if

begin_function
unit|}    @
name|Override
DECL|method|removeAcl (String src)
specifier|public
name|void
name|removeAcl
parameter_list|(
name|String
name|src
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
comment|// TODO handle virtual directories
specifier|final
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|locations
init|=
name|rpcServer
operator|.
name|getLocationsForPath
argument_list|(
name|src
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"removeAcl"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
block|}
operator|,
operator|new
name|RemoteParam
argument_list|()
block|)
function|;
end_function

begin_if
if|if
condition|(
name|rpcServer
operator|.
name|isInvokeConcurrent
argument_list|(
name|src
argument_list|)
condition|)
block|{
name|rpcClient
operator|.
name|invokeConcurrent
argument_list|(
name|locations
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rpcClient
operator|.
name|invokeSequential
argument_list|(
name|locations
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
end_if

begin_function
unit|}    @
name|Override
DECL|method|setAcl (String src, List<AclEntry> aclSpec)
specifier|public
name|void
name|setAcl
parameter_list|(
name|String
name|src
parameter_list|,
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
comment|// TODO handle virtual directories
specifier|final
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|locations
init|=
name|rpcServer
operator|.
name|getLocationsForPath
argument_list|(
name|src
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"setAcl"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
operator|,
name|List
operator|.
name|class
block|}
operator|,
operator|new
name|RemoteParam
argument_list|()
operator|,
name|aclSpec
block|)
function|;
end_function

begin_if
if|if
condition|(
name|rpcServer
operator|.
name|isInvokeConcurrent
argument_list|(
name|src
argument_list|)
condition|)
block|{
name|rpcClient
operator|.
name|invokeConcurrent
argument_list|(
name|locations
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rpcClient
operator|.
name|invokeSequential
argument_list|(
name|locations
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
end_if

begin_function
unit|}    @
name|Override
DECL|method|getAclStatus (String src)
specifier|public
name|AclStatus
name|getAclStatus
parameter_list|(
name|String
name|src
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
comment|// TODO handle virtual directories
specifier|final
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|locations
init|=
name|rpcServer
operator|.
name|getLocationsForPath
argument_list|(
name|src
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"getAclStatus"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
block|}
operator|,
operator|new
name|RemoteParam
argument_list|()
block|)
function|;
end_function

begin_return
return|return
name|rpcClient
operator|.
name|invokeSequential
argument_list|(
name|locations
argument_list|,
name|method
argument_list|,
name|AclStatus
operator|.
name|class
argument_list|,
literal|null
argument_list|)
return|;
end_return

begin_function
unit|}    @
name|Override
DECL|method|createEncryptionZone (String src, String keyName)
specifier|public
name|void
name|createEncryptionZone
parameter_list|(
name|String
name|src
parameter_list|,
name|String
name|keyName
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
comment|// TODO handle virtual directories
specifier|final
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|locations
init|=
name|rpcServer
operator|.
name|getLocationsForPath
argument_list|(
name|src
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"createEncryptionZone"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
operator|,
name|String
operator|.
name|class
block|}
operator|,
operator|new
name|RemoteParam
argument_list|()
operator|,
name|keyName
block|)
function|;
end_function

begin_expr_stmt
name|rpcClient
operator|.
name|invokeSequential
argument_list|(
name|locations
argument_list|,
name|method
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}    @
name|Override
DECL|method|getEZForPath (String src)
specifier|public
name|EncryptionZone
name|getEZForPath
parameter_list|(
name|String
name|src
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
comment|// TODO handle virtual directories
specifier|final
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|locations
init|=
name|rpcServer
operator|.
name|getLocationsForPath
argument_list|(
name|src
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"getEZForPath"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
block|}
operator|,
operator|new
name|RemoteParam
argument_list|()
block|)
function|;
end_function

begin_return
return|return
name|rpcClient
operator|.
name|invokeSequential
argument_list|(
name|locations
argument_list|,
name|method
argument_list|,
name|EncryptionZone
operator|.
name|class
argument_list|,
literal|null
argument_list|)
return|;
end_return

begin_function
unit|}    @
name|Override
DECL|method|listEncryptionZones (long prevId)
specifier|public
name|BatchedEntries
argument_list|<
name|EncryptionZone
argument_list|>
name|listEncryptionZones
parameter_list|(
name|long
name|prevId
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|READ
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|reencryptEncryptionZone (String zone, HdfsConstants.ReencryptAction action)
specifier|public
name|void
name|reencryptEncryptionZone
parameter_list|(
name|String
name|zone
parameter_list|,
name|HdfsConstants
operator|.
name|ReencryptAction
name|action
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|WRITE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|listReencryptionStatus ( long prevId)
specifier|public
name|BatchedEntries
argument_list|<
name|ZoneReencryptionStatus
argument_list|>
name|listReencryptionStatus
parameter_list|(
name|long
name|prevId
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|READ
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|setXAttr (String src, XAttr xAttr, EnumSet<XAttrSetFlag> flag)
specifier|public
name|void
name|setXAttr
parameter_list|(
name|String
name|src
parameter_list|,
name|XAttr
name|xAttr
parameter_list|,
name|EnumSet
argument_list|<
name|XAttrSetFlag
argument_list|>
name|flag
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
comment|// TODO handle virtual directories
specifier|final
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|locations
init|=
name|rpcServer
operator|.
name|getLocationsForPath
argument_list|(
name|src
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"setXAttr"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
operator|,
name|XAttr
operator|.
name|class
operator|,
name|EnumSet
operator|.
name|class
block|}
operator|,
operator|new
name|RemoteParam
argument_list|()
operator|,
name|xAttr
operator|,
name|flag
block|)
function|;
end_function

begin_if
if|if
condition|(
name|rpcServer
operator|.
name|isInvokeConcurrent
argument_list|(
name|src
argument_list|)
condition|)
block|{
name|rpcClient
operator|.
name|invokeConcurrent
argument_list|(
name|locations
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rpcClient
operator|.
name|invokeSequential
argument_list|(
name|locations
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
end_if

begin_expr_stmt
unit|}    @
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
expr|@
name|Override
DECL|method|getXAttrs (String src, List<XAttr> xAttrs)
specifier|public
name|List
argument_list|<
name|XAttr
argument_list|>
name|getXAttrs
argument_list|(
name|String
name|src
argument_list|,
name|List
argument_list|<
name|XAttr
argument_list|>
name|xAttrs
argument_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|// TODO handle virtual directories
end_comment

begin_decl_stmt
specifier|final
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|locations
init|=
name|rpcServer
operator|.
name|getLocationsForPath
argument_list|(
name|src
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"getXAttrs"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
operator|,
name|List
operator|.
name|class
block|}
end_decl_stmt

begin_operator
operator|,
end_operator

begin_expr_stmt
operator|new
name|RemoteParam
argument_list|()
operator|,
name|xAttrs
end_expr_stmt

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_return
return|return
operator|(
name|List
argument_list|<
name|XAttr
argument_list|>
operator|)
name|rpcClient
operator|.
name|invokeSequential
argument_list|(
name|locations
argument_list|,
name|method
argument_list|,
name|List
operator|.
name|class
argument_list|,
literal|null
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}    @
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
expr|@
name|Override
DECL|method|listXAttrs (String src)
specifier|public
name|List
argument_list|<
name|XAttr
argument_list|>
name|listXAttrs
argument_list|(
name|String
name|src
argument_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|// TODO handle virtual directories
end_comment

begin_decl_stmt
specifier|final
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|locations
init|=
name|rpcServer
operator|.
name|getLocationsForPath
argument_list|(
name|src
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"listXAttrs"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
block|}
end_decl_stmt

begin_operator
operator|,
end_operator

begin_expr_stmt
operator|new
name|RemoteParam
argument_list|()
end_expr_stmt

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_return
return|return
operator|(
name|List
argument_list|<
name|XAttr
argument_list|>
operator|)
name|rpcClient
operator|.
name|invokeSequential
argument_list|(
name|locations
argument_list|,
name|method
argument_list|,
name|List
operator|.
name|class
argument_list|,
literal|null
argument_list|)
return|;
end_return

begin_function
unit|}    @
name|Override
DECL|method|removeXAttr (String src, XAttr xAttr)
specifier|public
name|void
name|removeXAttr
parameter_list|(
name|String
name|src
parameter_list|,
name|XAttr
name|xAttr
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
comment|// TODO handle virtual directories
specifier|final
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|locations
init|=
name|rpcServer
operator|.
name|getLocationsForPath
argument_list|(
name|src
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"removeXAttr"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
operator|,
name|XAttr
operator|.
name|class
block|}
operator|,
operator|new
name|RemoteParam
argument_list|()
operator|,
name|xAttr
block|)
function|;
end_function

begin_if
if|if
condition|(
name|rpcServer
operator|.
name|isInvokeConcurrent
argument_list|(
name|src
argument_list|)
condition|)
block|{
name|rpcClient
operator|.
name|invokeConcurrent
argument_list|(
name|locations
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rpcClient
operator|.
name|invokeSequential
argument_list|(
name|locations
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
end_if

begin_function
unit|}    @
name|Override
DECL|method|checkAccess (String path, FsAction mode)
specifier|public
name|void
name|checkAccess
parameter_list|(
name|String
name|path
parameter_list|,
name|FsAction
name|mode
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
comment|// TODO handle virtual directories
specifier|final
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|locations
init|=
name|rpcServer
operator|.
name|getLocationsForPath
argument_list|(
name|path
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"checkAccess"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
operator|,
name|FsAction
operator|.
name|class
block|}
operator|,
operator|new
name|RemoteParam
argument_list|()
operator|,
name|mode
block|)
function|;
end_function

begin_expr_stmt
name|rpcClient
operator|.
name|invokeSequential
argument_list|(
name|locations
argument_list|,
name|method
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}    @
name|Override
DECL|method|getCurrentEditLogTxid ()
specifier|public
name|long
name|getCurrentEditLogTxid
parameter_list|()
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"getCurrentEditLogTxid"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{}
block|)
function|;
end_function

begin_decl_stmt
specifier|final
name|Set
argument_list|<
name|FederationNamespaceInfo
argument_list|>
name|nss
init|=
name|namenodeResolver
operator|.
name|getNamespaces
argument_list|()
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|Map
argument_list|<
name|FederationNamespaceInfo
argument_list|,
name|Long
argument_list|>
name|ret
init|=
name|rpcClient
operator|.
name|invokeConcurrent
argument_list|(
name|nss
argument_list|,
name|method
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|long
operator|.
name|class
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|// Return the maximum txid
end_comment

begin_decl_stmt
name|long
name|txid
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_for
for|for
control|(
name|long
name|t
range|:
name|ret
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|t
operator|>
name|txid
condition|)
block|{
name|txid
operator|=
name|t
expr_stmt|;
block|}
block|}
end_for

begin_return
return|return
name|txid
return|;
end_return

begin_function
unit|}    @
name|Override
DECL|method|getEditsFromTxid (long txid)
specifier|public
name|EventBatchList
name|getEditsFromTxid
parameter_list|(
name|long
name|txid
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|READ
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|getDataEncryptionKey ()
specifier|public
name|DataEncryptionKey
name|getDataEncryptionKey
parameter_list|()
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|READ
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|createSnapshot (String snapshotRoot, String snapshotName)
specifier|public
name|String
name|createSnapshot
parameter_list|(
name|String
name|snapshotRoot
parameter_list|,
name|String
name|snapshotName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|snapshotProto
operator|.
name|createSnapshot
argument_list|(
name|snapshotRoot
argument_list|,
name|snapshotName
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|deleteSnapshot (String snapshotRoot, String snapshotName)
specifier|public
name|void
name|deleteSnapshot
parameter_list|(
name|String
name|snapshotRoot
parameter_list|,
name|String
name|snapshotName
parameter_list|)
throws|throws
name|IOException
block|{
name|snapshotProto
operator|.
name|deleteSnapshot
argument_list|(
name|snapshotRoot
argument_list|,
name|snapshotName
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|setQuota (String path, long namespaceQuota, long storagespaceQuota, StorageType type)
specifier|public
name|void
name|setQuota
parameter_list|(
name|String
name|path
parameter_list|,
name|long
name|namespaceQuota
parameter_list|,
name|long
name|storagespaceQuota
parameter_list|,
name|StorageType
name|type
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|getQuotaModule
argument_list|()
operator|.
name|setQuota
argument_list|(
name|path
argument_list|,
name|namespaceQuota
argument_list|,
name|storagespaceQuota
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|getQuotaUsage (String path)
specifier|public
name|QuotaUsage
name|getQuotaUsage
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|rpcServer
operator|.
name|getQuotaModule
argument_list|()
operator|.
name|getQuotaUsage
argument_list|(
name|path
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|reportBadBlocks (LocatedBlock[] blocks)
specifier|public
name|void
name|reportBadBlocks
parameter_list|(
name|LocatedBlock
index|[]
name|blocks
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
comment|// Block pool id -> blocks
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|LocatedBlock
argument_list|>
argument_list|>
name|blockLocations
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|LocatedBlock
name|block
range|:
name|blocks
control|)
block|{
name|String
name|bpId
init|=
name|block
operator|.
name|getBlock
argument_list|()
operator|.
name|getBlockPoolId
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|bpBlocks
init|=
name|blockLocations
operator|.
name|get
argument_list|(
name|bpId
argument_list|)
decl_stmt|;
if|if
condition|(
name|bpBlocks
operator|==
literal|null
condition|)
block|{
name|bpBlocks
operator|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
expr_stmt|;
name|blockLocations
operator|.
name|put
argument_list|(
name|bpId
argument_list|,
name|bpBlocks
argument_list|)
expr_stmt|;
block|}
name|bpBlocks
operator|.
name|add
argument_list|(
name|block
argument_list|)
expr_stmt|;
block|}
comment|// Invoke each block pool
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|LocatedBlock
argument_list|>
argument_list|>
name|entry
range|:
name|blockLocations
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|bpId
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|bpBlocks
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|LocatedBlock
index|[]
name|bpBlocksArray
init|=
name|bpBlocks
operator|.
name|toArray
argument_list|(
operator|new
name|LocatedBlock
index|[
name|bpBlocks
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"reportBadBlocks"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|LocatedBlock
index|[]
operator|.
expr|class
block|}
operator|,
operator|new
name|Object
index|[]
block|{
name|bpBlocksArray
block|}
block|)
empty_stmt|;
name|rpcClient
operator|.
name|invokeSingleBlockPool
argument_list|(
name|bpId
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
unit|}    @
name|Override
DECL|method|unsetStoragePolicy (String src)
specifier|public
name|void
name|unsetStoragePolicy
parameter_list|(
name|String
name|src
parameter_list|)
throws|throws
name|IOException
block|{
name|storagePolicy
operator|.
name|unsetStoragePolicy
argument_list|(
name|src
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|getStoragePolicy (String path)
specifier|public
name|BlockStoragePolicy
name|getStoragePolicy
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|storagePolicy
operator|.
name|getStoragePolicy
argument_list|(
name|path
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|getErasureCodingPolicies ()
specifier|public
name|ErasureCodingPolicyInfo
index|[]
name|getErasureCodingPolicies
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|erasureCoding
operator|.
name|getErasureCodingPolicies
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|getErasureCodingCodecs ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getErasureCodingCodecs
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|erasureCoding
operator|.
name|getErasureCodingCodecs
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|addErasureCodingPolicies ( ErasureCodingPolicy[] policies)
specifier|public
name|AddErasureCodingPolicyResponse
index|[]
name|addErasureCodingPolicies
parameter_list|(
name|ErasureCodingPolicy
index|[]
name|policies
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|erasureCoding
operator|.
name|addErasureCodingPolicies
argument_list|(
name|policies
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|removeErasureCodingPolicy (String ecPolicyName)
specifier|public
name|void
name|removeErasureCodingPolicy
parameter_list|(
name|String
name|ecPolicyName
parameter_list|)
throws|throws
name|IOException
block|{
name|erasureCoding
operator|.
name|removeErasureCodingPolicy
argument_list|(
name|ecPolicyName
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|disableErasureCodingPolicy (String ecPolicyName)
specifier|public
name|void
name|disableErasureCodingPolicy
parameter_list|(
name|String
name|ecPolicyName
parameter_list|)
throws|throws
name|IOException
block|{
name|erasureCoding
operator|.
name|disableErasureCodingPolicy
argument_list|(
name|ecPolicyName
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|enableErasureCodingPolicy (String ecPolicyName)
specifier|public
name|void
name|enableErasureCodingPolicy
parameter_list|(
name|String
name|ecPolicyName
parameter_list|)
throws|throws
name|IOException
block|{
name|erasureCoding
operator|.
name|enableErasureCodingPolicy
argument_list|(
name|ecPolicyName
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|getErasureCodingPolicy (String src)
specifier|public
name|ErasureCodingPolicy
name|getErasureCodingPolicy
parameter_list|(
name|String
name|src
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|erasureCoding
operator|.
name|getErasureCodingPolicy
argument_list|(
name|src
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|setErasureCodingPolicy (String src, String ecPolicyName)
specifier|public
name|void
name|setErasureCodingPolicy
parameter_list|(
name|String
name|src
parameter_list|,
name|String
name|ecPolicyName
parameter_list|)
throws|throws
name|IOException
block|{
name|erasureCoding
operator|.
name|setErasureCodingPolicy
argument_list|(
name|src
argument_list|,
name|ecPolicyName
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|unsetErasureCodingPolicy (String src)
specifier|public
name|void
name|unsetErasureCodingPolicy
parameter_list|(
name|String
name|src
parameter_list|)
throws|throws
name|IOException
block|{
name|erasureCoding
operator|.
name|unsetErasureCodingPolicy
argument_list|(
name|src
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|getECBlockGroupStats ()
specifier|public
name|ECBlockGroupStats
name|getECBlockGroupStats
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|erasureCoding
operator|.
name|getECBlockGroupStats
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|getReplicatedBlockStats ()
specifier|public
name|ReplicatedBlockStats
name|getReplicatedBlockStats
parameter_list|()
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|READ
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
end_function

begin_function
annotation|@
name|Deprecated
annotation|@
name|Override
DECL|method|listOpenFiles (long prevId)
specifier|public
name|BatchedEntries
argument_list|<
name|OpenFileEntry
argument_list|>
name|listOpenFiles
parameter_list|(
name|long
name|prevId
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|listOpenFiles
argument_list|(
name|prevId
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|OpenFilesIterator
operator|.
name|OpenFilesType
operator|.
name|ALL_OPEN_FILES
argument_list|)
argument_list|,
name|OpenFilesIterator
operator|.
name|FILTER_PATH_DEFAULT
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|listOpenFiles (long prevId, EnumSet<OpenFilesIterator.OpenFilesType> openFilesTypes, String path)
specifier|public
name|BatchedEntries
argument_list|<
name|OpenFileEntry
argument_list|>
name|listOpenFiles
parameter_list|(
name|long
name|prevId
parameter_list|,
name|EnumSet
argument_list|<
name|OpenFilesIterator
operator|.
name|OpenFilesType
argument_list|>
name|openFilesTypes
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|READ
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|msync ()
specifier|public
name|void
name|msync
parameter_list|()
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|READ
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|satisfyStoragePolicy (String path)
specifier|public
name|void
name|satisfyStoragePolicy
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|storagePolicy
operator|.
name|satisfyStoragePolicy
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|getHAServiceState ()
specifier|public
name|HAServiceProtocol
operator|.
name|HAServiceState
name|getHAServiceState
parameter_list|()
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|READ
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
end_function

begin_comment
comment|/**    * Determines combinations of eligible src/dst locations for a rename. A    * rename cannot change the namespace. Renames are only allowed if there is an    * eligible dst location in the same namespace as the source.    *    * @param srcLocations List of all potential source destinations where the    *          path may be located. On return this list is trimmed to include    *          only the paths that have corresponding destinations in the same    *          namespace.    * @param dst The destination path    * @return A map of all eligible source namespaces and their corresponding    *         replacement value.    * @throws IOException If the dst paths could not be determined.    */
end_comment

begin_function
DECL|method|getRenameDestinations ( final List<RemoteLocation> srcLocations, final String dst)
specifier|private
name|RemoteParam
name|getRenameDestinations
parameter_list|(
specifier|final
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|srcLocations
parameter_list|,
specifier|final
name|String
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|dstLocations
init|=
name|rpcServer
operator|.
name|getLocationsForPath
argument_list|(
name|dst
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|RemoteLocation
argument_list|,
name|String
argument_list|>
name|dstMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|RemoteLocation
argument_list|>
name|iterator
init|=
name|srcLocations
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|RemoteLocation
name|srcLocation
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|RemoteLocation
name|eligibleDst
init|=
name|getFirstMatchingLocation
argument_list|(
name|srcLocation
argument_list|,
name|dstLocations
argument_list|)
decl_stmt|;
if|if
condition|(
name|eligibleDst
operator|!=
literal|null
condition|)
block|{
comment|// Use this dst for this source location
name|dstMap
operator|.
name|put
argument_list|(
name|srcLocation
argument_list|,
name|eligibleDst
operator|.
name|getDest
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// This src destination is not valid, remove from the source list
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
return|return
operator|new
name|RemoteParam
argument_list|(
name|dstMap
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Get first matching location.    *    * @param location Location we are looking for.    * @param locations List of locations.    * @return The first matchin location in the list.    */
end_comment

begin_function
DECL|method|getFirstMatchingLocation (RemoteLocation location, List<RemoteLocation> locations)
specifier|private
name|RemoteLocation
name|getFirstMatchingLocation
parameter_list|(
name|RemoteLocation
name|location
parameter_list|,
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|locations
parameter_list|)
block|{
for|for
control|(
name|RemoteLocation
name|loc
range|:
name|locations
control|)
block|{
if|if
condition|(
name|loc
operator|.
name|getNameserviceId
argument_list|()
operator|.
name|equals
argument_list|(
name|location
operator|.
name|getNameserviceId
argument_list|()
argument_list|)
condition|)
block|{
comment|// Return first matching location
return|return
name|loc
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
end_function

begin_comment
comment|/**    * Aggregate content summaries for each subcluster.    *    * @param summaries Collection of individual summaries.    * @return Aggregated content summary.    */
end_comment

begin_function
DECL|method|aggregateContentSummary ( Collection<ContentSummary> summaries)
specifier|private
name|ContentSummary
name|aggregateContentSummary
parameter_list|(
name|Collection
argument_list|<
name|ContentSummary
argument_list|>
name|summaries
parameter_list|)
block|{
if|if
condition|(
name|summaries
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|summaries
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
return|;
block|}
name|long
name|length
init|=
literal|0
decl_stmt|;
name|long
name|fileCount
init|=
literal|0
decl_stmt|;
name|long
name|directoryCount
init|=
literal|0
decl_stmt|;
name|long
name|quota
init|=
literal|0
decl_stmt|;
name|long
name|spaceConsumed
init|=
literal|0
decl_stmt|;
name|long
name|spaceQuota
init|=
literal|0
decl_stmt|;
name|String
name|ecPolicy
init|=
literal|""
decl_stmt|;
for|for
control|(
name|ContentSummary
name|summary
range|:
name|summaries
control|)
block|{
name|length
operator|+=
name|summary
operator|.
name|getLength
argument_list|()
expr_stmt|;
name|fileCount
operator|+=
name|summary
operator|.
name|getFileCount
argument_list|()
expr_stmt|;
name|directoryCount
operator|+=
name|summary
operator|.
name|getDirectoryCount
argument_list|()
expr_stmt|;
name|quota
operator|+=
name|summary
operator|.
name|getQuota
argument_list|()
expr_stmt|;
name|spaceConsumed
operator|+=
name|summary
operator|.
name|getSpaceConsumed
argument_list|()
expr_stmt|;
name|spaceQuota
operator|+=
name|summary
operator|.
name|getSpaceQuota
argument_list|()
expr_stmt|;
comment|// We return from the first response as we assume that the EC policy
comment|// of each sub-cluster is same.
if|if
condition|(
name|ecPolicy
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ecPolicy
operator|=
name|summary
operator|.
name|getErasureCodingPolicy
argument_list|()
expr_stmt|;
block|}
block|}
name|ContentSummary
name|ret
init|=
operator|new
name|ContentSummary
operator|.
name|Builder
argument_list|()
operator|.
name|length
argument_list|(
name|length
argument_list|)
operator|.
name|fileCount
argument_list|(
name|fileCount
argument_list|)
operator|.
name|directoryCount
argument_list|(
name|directoryCount
argument_list|)
operator|.
name|quota
argument_list|(
name|quota
argument_list|)
operator|.
name|spaceConsumed
argument_list|(
name|spaceConsumed
argument_list|)
operator|.
name|spaceQuota
argument_list|(
name|spaceQuota
argument_list|)
operator|.
name|erasureCodingPolicy
argument_list|(
name|ecPolicy
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|ret
return|;
block|}
end_function

begin_comment
comment|/**    * Get the file info from all the locations.    *    * @param locations Locations to check.    * @param method The file information method to run.    * @return The first file info if it's a file, the directory if it's    *         everywhere.    * @throws IOException If all the locations throw an exception.    */
end_comment

begin_function
DECL|method|getFileInfoAll (final List<RemoteLocation> locations, final RemoteMethod method)
specifier|private
name|HdfsFileStatus
name|getFileInfoAll
parameter_list|(
specifier|final
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|locations
parameter_list|,
specifier|final
name|RemoteMethod
name|method
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getFileInfoAll
argument_list|(
name|locations
argument_list|,
name|method
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Get the file info from all the locations.    *    * @param locations Locations to check.    * @param method The file information method to run.    * @param timeOutMs Time out for the operation in milliseconds.    * @return The first file info if it's a file, the directory if it's    *         everywhere.    * @throws IOException If all the locations throw an exception.    */
end_comment

begin_function
DECL|method|getFileInfoAll (final List<RemoteLocation> locations, final RemoteMethod method, long timeOutMs)
specifier|private
name|HdfsFileStatus
name|getFileInfoAll
parameter_list|(
specifier|final
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|locations
parameter_list|,
specifier|final
name|RemoteMethod
name|method
parameter_list|,
name|long
name|timeOutMs
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Get the file info from everybody
name|Map
argument_list|<
name|RemoteLocation
argument_list|,
name|HdfsFileStatus
argument_list|>
name|results
init|=
name|rpcClient
operator|.
name|invokeConcurrent
argument_list|(
name|locations
argument_list|,
name|method
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|timeOutMs
argument_list|,
name|HdfsFileStatus
operator|.
name|class
argument_list|)
decl_stmt|;
name|int
name|children
init|=
literal|0
decl_stmt|;
comment|// We return the first file
name|HdfsFileStatus
name|dirStatus
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RemoteLocation
name|loc
range|:
name|locations
control|)
block|{
name|HdfsFileStatus
name|fileStatus
init|=
name|results
operator|.
name|get
argument_list|(
name|loc
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileStatus
operator|!=
literal|null
condition|)
block|{
name|children
operator|+=
name|fileStatus
operator|.
name|getChildrenNum
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|fileStatus
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
return|return
name|fileStatus
return|;
block|}
elseif|else
if|if
condition|(
name|dirStatus
operator|==
literal|null
condition|)
block|{
name|dirStatus
operator|=
name|fileStatus
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|dirStatus
operator|!=
literal|null
condition|)
block|{
return|return
name|updateMountPointStatus
argument_list|(
name|dirStatus
argument_list|,
name|children
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
end_function

begin_comment
comment|/**    * Get the permissions for the parent of a child with given permissions.    * Add implicit u+wx permission for parent. This is based on    * @{FSDirMkdirOp#addImplicitUwx}.    * @param mask The permission mask of the child.    * @return The permission mask of the parent.    */
end_comment

begin_function
DECL|method|getParentPermission (final FsPermission mask)
specifier|private
specifier|static
name|FsPermission
name|getParentPermission
parameter_list|(
specifier|final
name|FsPermission
name|mask
parameter_list|)
block|{
name|FsPermission
name|ret
init|=
operator|new
name|FsPermission
argument_list|(
name|mask
operator|.
name|getUserAction
argument_list|()
operator|.
name|or
argument_list|(
name|FsAction
operator|.
name|WRITE_EXECUTE
argument_list|)
argument_list|,
name|mask
operator|.
name|getGroupAction
argument_list|()
argument_list|,
name|mask
operator|.
name|getOtherAction
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|ret
return|;
block|}
end_function

begin_comment
comment|/**    * Create a new file status for a mount point.    *    * @param name Name of the mount point.    * @param childrenNum Number of children.    * @param date Map with the dates.    * @return New HDFS file status representing a mount point.    */
end_comment

begin_function
DECL|method|getMountPointStatus ( String name, int childrenNum, long date)
specifier|private
name|HdfsFileStatus
name|getMountPointStatus
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|childrenNum
parameter_list|,
name|long
name|date
parameter_list|)
block|{
name|long
name|modTime
init|=
name|date
decl_stmt|;
name|long
name|accessTime
init|=
name|date
decl_stmt|;
name|FsPermission
name|permission
init|=
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
decl_stmt|;
name|String
name|owner
init|=
name|this
operator|.
name|superUser
decl_stmt|;
name|String
name|group
init|=
name|this
operator|.
name|superGroup
decl_stmt|;
if|if
condition|(
name|subclusterResolver
operator|instanceof
name|MountTableResolver
condition|)
block|{
try|try
block|{
name|String
name|mName
init|=
name|name
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|?
name|name
else|:
literal|"/"
operator|+
name|name
decl_stmt|;
name|MountTableResolver
name|mountTable
init|=
operator|(
name|MountTableResolver
operator|)
name|subclusterResolver
decl_stmt|;
name|MountTable
name|entry
init|=
name|mountTable
operator|.
name|getMountPoint
argument_list|(
name|mName
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"getFileInfo"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
block|}
operator|,
operator|new
name|RemoteParam
argument_list|()
block|)
empty_stmt|;
name|HdfsFileStatus
name|fInfo
init|=
name|getFileInfoAll
argument_list|(
name|entry
operator|.
name|getDestinations
argument_list|()
argument_list|,
name|method
argument_list|,
name|mountStatusTimeOut
argument_list|)
decl_stmt|;
if|if
condition|(
name|fInfo
operator|!=
literal|null
condition|)
block|{
name|permission
operator|=
name|fInfo
operator|.
name|getPermission
argument_list|()
expr_stmt|;
name|owner
operator|=
name|fInfo
operator|.
name|getOwner
argument_list|()
expr_stmt|;
name|group
operator|=
name|fInfo
operator|.
name|getGroup
argument_list|()
expr_stmt|;
name|childrenNum
operator|=
name|fInfo
operator|.
name|getChildrenNum
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|permission
operator|=
name|entry
operator|.
name|getMode
argument_list|()
expr_stmt|;
name|owner
operator|=
name|entry
operator|.
name|getOwnerName
argument_list|()
expr_stmt|;
name|group
operator|=
name|entry
operator|.
name|getGroupName
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot get mount point: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_else
else|else
block|{
try|try
block|{
name|UserGroupInformation
name|ugi
init|=
name|RouterRpcServer
operator|.
name|getRemoteUser
argument_list|()
decl_stmt|;
name|owner
operator|=
name|ugi
operator|.
name|getUserName
argument_list|()
expr_stmt|;
name|group
operator|=
name|ugi
operator|.
name|getPrimaryGroupName
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot get remote user: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_else

begin_decl_stmt
name|long
name|inodeId
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_return
return|return
operator|new
name|HdfsFileStatus
operator|.
name|Builder
argument_list|()
operator|.
name|isdir
argument_list|(
literal|true
argument_list|)
operator|.
name|mtime
argument_list|(
name|modTime
argument_list|)
operator|.
name|atime
argument_list|(
name|accessTime
argument_list|)
operator|.
name|perm
argument_list|(
name|permission
argument_list|)
operator|.
name|owner
argument_list|(
name|owner
argument_list|)
operator|.
name|group
argument_list|(
name|group
argument_list|)
operator|.
name|symlink
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
operator|.
name|path
argument_list|(
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
name|name
argument_list|)
argument_list|)
operator|.
name|fileId
argument_list|(
name|inodeId
argument_list|)
operator|.
name|children
argument_list|(
name|childrenNum
argument_list|)
operator|.
name|build
argument_list|()
return|;
end_return

begin_comment
unit|}
comment|/**    * Get the modification dates for mount points.    *    * @param path Name of the path to start checking dates from.    * @return Map with the modification dates for all sub-entries.    */
end_comment

begin_function
DECL|method|getMountPointDates (String path)
unit|private
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|getMountPointDates
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|ret
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|subclusterResolver
operator|instanceof
name|MountTableResolver
condition|)
block|{
try|try
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|children
init|=
name|subclusterResolver
operator|.
name|getMountPoints
argument_list|(
name|path
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|child
range|:
name|children
control|)
block|{
name|Long
name|modTime
init|=
name|getModifiedTime
argument_list|(
name|ret
argument_list|,
name|path
argument_list|,
name|child
argument_list|)
decl_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|child
argument_list|,
name|modTime
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot get mount point"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
end_function

begin_comment
comment|/**    * Get modified time for child. If the child is present in mount table it    * will return the modified time. If the child is not present but subdirs of    * this child are present then it will return latest modified subdir's time    * as modified time of the requested child.    *    * @param ret contains children and modified times.    * @param path Name of the path to start checking dates from.    * @param child child of the requested path.    * @return modified time.    */
end_comment

begin_function
DECL|method|getModifiedTime (Map<String, Long> ret, String path, String child)
specifier|private
name|long
name|getModifiedTime
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|ret
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|child
parameter_list|)
block|{
name|MountTableResolver
name|mountTable
init|=
operator|(
name|MountTableResolver
operator|)
name|subclusterResolver
decl_stmt|;
name|String
name|srcPath
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|equals
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
condition|)
block|{
name|srcPath
operator|=
name|Path
operator|.
name|SEPARATOR
operator|+
name|child
expr_stmt|;
block|}
else|else
block|{
name|srcPath
operator|=
name|path
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|child
expr_stmt|;
block|}
name|Long
name|modTime
init|=
literal|0L
decl_stmt|;
try|try
block|{
comment|// Get mount table entry for the srcPath
name|MountTable
name|entry
init|=
name|mountTable
operator|.
name|getMountPoint
argument_list|(
name|srcPath
argument_list|)
decl_stmt|;
comment|// if srcPath is not in mount table but its subdirs are in mount
comment|// table we will display latest modified subdir date/time.
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
name|List
argument_list|<
name|MountTable
argument_list|>
name|entries
init|=
name|mountTable
operator|.
name|getMounts
argument_list|(
name|srcPath
argument_list|)
decl_stmt|;
for|for
control|(
name|MountTable
name|eachEntry
range|:
name|entries
control|)
block|{
comment|// Get the latest date
if|if
condition|(
name|ret
operator|.
name|get
argument_list|(
name|child
argument_list|)
operator|==
literal|null
operator|||
name|ret
operator|.
name|get
argument_list|(
name|child
argument_list|)
operator|<
name|eachEntry
operator|.
name|getDateModified
argument_list|()
condition|)
block|{
name|modTime
operator|=
name|eachEntry
operator|.
name|getDateModified
argument_list|()
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|modTime
operator|=
name|entry
operator|.
name|getDateModified
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot get mount point"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|modTime
return|;
block|}
end_function

begin_comment
comment|/**    * Checks if the path is a directory and is supposed to be present in all    * subclusters.    * @param src the source path    * @return true if the path is directory and is supposed to be present in all    *         subclusters else false in all other scenarios.    * @throws IOException if unable to get the file status.    */
end_comment

begin_function
annotation|@
name|VisibleForTesting
DECL|method|isMultiDestDirectory (String src)
name|boolean
name|isMultiDestDirectory
parameter_list|(
name|String
name|src
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
if|if
condition|(
name|rpcServer
operator|.
name|isPathAll
argument_list|(
name|src
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|locations
decl_stmt|;
name|locations
operator|=
name|rpcServer
operator|.
name|getLocationsForPath
argument_list|(
name|src
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
literal|"getFileInfo"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
block|}
operator|,
operator|new
name|RemoteParam
argument_list|()
block|)
empty_stmt|;
name|HdfsFileStatus
name|fileStatus
init|=
name|rpcClient
operator|.
name|invokeSequential
argument_list|(
name|locations
argument_list|,
name|method
argument_list|,
name|HdfsFileStatus
operator|.
name|class
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileStatus
operator|!=
literal|null
condition|)
block|{
return|return
name|fileStatus
operator|.
name|isDirectory
argument_list|()
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"The destination {} doesn't exist."
argument_list|,
name|src
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_catch
catch|catch
parameter_list|(
name|UnresolvedPathException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"The destination {} is a symlink."
argument_list|,
name|src
argument_list|)
expr_stmt|;
block|}
end_catch

begin_return
return|return
literal|false
return|;
end_return

unit|} }
end_unit

