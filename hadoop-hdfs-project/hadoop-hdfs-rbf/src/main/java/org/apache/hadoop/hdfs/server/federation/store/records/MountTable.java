begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.store.records
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|builder
operator|.
name|HashCodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|RemoteLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|order
operator|.
name|DestinationOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
operator|.
name|RouterPermissionChecker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
operator|.
name|RouterQuotaUsage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|driver
operator|.
name|StateStoreSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_comment
comment|/**  * Data schema for  * {@link org.apache.hadoop.hdfs.server.federation.store.  * MountTableStore FederationMountTableStore} data stored in the  * {@link org.apache.hadoop.hdfs.server.federation.store.  * StateStoreService FederationStateStoreService}. Supports string  * serialization.  */
end_comment

begin_class
DECL|class|MountTable
specifier|public
specifier|abstract
class|class
name|MountTable
extends|extends
name|BaseRecord
block|{
DECL|field|ERROR_MSG_NO_SOURCE_PATH
specifier|public
specifier|static
specifier|final
name|String
name|ERROR_MSG_NO_SOURCE_PATH
init|=
literal|"Invalid entry, no source path specified "
decl_stmt|;
DECL|field|ERROR_MSG_MUST_START_WITH_BACK_SLASH
specifier|public
specifier|static
specifier|final
name|String
name|ERROR_MSG_MUST_START_WITH_BACK_SLASH
init|=
literal|"Invalid entry, all mount points must start with / "
decl_stmt|;
DECL|field|ERROR_MSG_NO_DEST_PATH_SPECIFIED
specifier|public
specifier|static
specifier|final
name|String
name|ERROR_MSG_NO_DEST_PATH_SPECIFIED
init|=
literal|"Invalid entry, no destination paths specified "
decl_stmt|;
DECL|field|ERROR_MSG_INVAILD_DEST_NS
specifier|public
specifier|static
specifier|final
name|String
name|ERROR_MSG_INVAILD_DEST_NS
init|=
literal|"Invalid entry, invalid destination nameservice "
decl_stmt|;
DECL|field|ERROR_MSG_INVAILD_DEST_PATH
specifier|public
specifier|static
specifier|final
name|String
name|ERROR_MSG_INVAILD_DEST_PATH
init|=
literal|"Invalid entry, invalid destination path "
decl_stmt|;
DECL|field|ERROR_MSG_ALL_DEST_MUST_START_WITH_BACK_SLASH
specifier|public
specifier|static
specifier|final
name|String
name|ERROR_MSG_ALL_DEST_MUST_START_WITH_BACK_SLASH
init|=
literal|"Invalid entry, all destination must start with / "
decl_stmt|;
comment|/** Comparator for paths which considers the /. */
DECL|field|PATH_COMPARATOR
specifier|public
specifier|static
specifier|final
name|Comparator
argument_list|<
name|String
argument_list|>
name|PATH_COMPARATOR
init|=
operator|new
name|Comparator
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|String
name|o1
parameter_list|,
name|String
name|o2
parameter_list|)
block|{
name|String
name|s1
init|=
name|o1
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
literal|' '
argument_list|)
decl_stmt|;
name|String
name|s2
init|=
name|o2
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
literal|' '
argument_list|)
decl_stmt|;
return|return
name|s1
operator|.
name|compareTo
argument_list|(
name|s2
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|/** Comparator based on the mount table source. */
DECL|field|SOURCE_COMPARATOR
specifier|public
specifier|static
specifier|final
name|Comparator
argument_list|<
name|MountTable
argument_list|>
name|SOURCE_COMPARATOR
init|=
operator|new
name|Comparator
argument_list|<
name|MountTable
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|MountTable
name|m1
parameter_list|,
name|MountTable
name|m2
parameter_list|)
block|{
name|String
name|src1
init|=
name|m1
operator|.
name|getSourcePath
argument_list|()
decl_stmt|;
name|String
name|src2
init|=
name|m2
operator|.
name|getSourcePath
argument_list|()
decl_stmt|;
return|return
name|PATH_COMPARATOR
operator|.
name|compare
argument_list|(
name|src1
argument_list|,
name|src2
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|/**    * Default constructor for a mount table entry.    */
DECL|method|MountTable ()
specifier|public
name|MountTable
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
DECL|method|newInstance ()
specifier|public
specifier|static
name|MountTable
name|newInstance
parameter_list|()
block|{
name|MountTable
name|record
init|=
name|StateStoreSerializer
operator|.
name|newRecord
argument_list|(
name|MountTable
operator|.
name|class
argument_list|)
decl_stmt|;
name|record
operator|.
name|init
argument_list|()
expr_stmt|;
return|return
name|record
return|;
block|}
comment|/**    * Constructor for a mount table entry with a single destinations.    *    * @param src Source path in the mount entry.    * @param destinations Nameservice destination of the mount point.    * @param dateCreated Created date.    * @param dateModified Modified date.    * @throws IOException    */
DECL|method|newInstance (final String src, final Map<String, String> destinations, long dateCreated, long dateModified)
specifier|public
specifier|static
name|MountTable
name|newInstance
parameter_list|(
specifier|final
name|String
name|src
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|destinations
parameter_list|,
name|long
name|dateCreated
parameter_list|,
name|long
name|dateModified
parameter_list|)
throws|throws
name|IOException
block|{
name|MountTable
name|record
init|=
name|newInstance
argument_list|(
name|src
argument_list|,
name|destinations
argument_list|)
decl_stmt|;
name|record
operator|.
name|setDateCreated
argument_list|(
name|dateCreated
argument_list|)
expr_stmt|;
name|record
operator|.
name|setDateModified
argument_list|(
name|dateModified
argument_list|)
expr_stmt|;
return|return
name|record
return|;
block|}
comment|/**    * Constructor for a mount table entry with multiple destinations.    *    * @param src Source path in the mount entry.    * @param destinations Nameservice destinations of the mount point.    * @throws IOException    */
DECL|method|newInstance (final String src, final Map<String, String> destinations)
specifier|public
specifier|static
name|MountTable
name|newInstance
parameter_list|(
specifier|final
name|String
name|src
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|destinations
parameter_list|)
throws|throws
name|IOException
block|{
name|MountTable
name|record
init|=
name|newInstance
argument_list|()
decl_stmt|;
comment|// Normalize the mount path
name|record
operator|.
name|setSourcePath
argument_list|(
name|normalizeFileSystemPath
argument_list|(
name|src
argument_list|)
argument_list|)
expr_stmt|;
comment|// Build a list of remote locations
specifier|final
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|locations
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|destinations
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|nsId
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|normalizeFileSystemPath
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|RemoteLocation
name|location
init|=
operator|new
name|RemoteLocation
argument_list|(
name|nsId
argument_list|,
name|path
argument_list|,
name|src
argument_list|)
decl_stmt|;
name|locations
operator|.
name|add
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
comment|// Set the serialized dest string
name|record
operator|.
name|setDestinations
argument_list|(
name|locations
argument_list|)
expr_stmt|;
comment|// Set permission fields
name|UserGroupInformation
name|ugi
init|=
name|NameNode
operator|.
name|getRemoteUser
argument_list|()
decl_stmt|;
name|record
operator|.
name|setOwnerName
argument_list|(
name|ugi
operator|.
name|getShortUserName
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|group
init|=
name|ugi
operator|.
name|getGroups
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
name|ugi
operator|.
name|getShortUserName
argument_list|()
else|:
name|ugi
operator|.
name|getPrimaryGroupName
argument_list|()
decl_stmt|;
name|record
operator|.
name|setGroupName
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|record
operator|.
name|setMode
argument_list|(
operator|new
name|FsPermission
argument_list|(
name|RouterPermissionChecker
operator|.
name|MOUNT_TABLE_PERMISSION_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
comment|// Set quota for mount table
name|RouterQuotaUsage
name|quota
init|=
operator|new
name|RouterQuotaUsage
operator|.
name|Builder
argument_list|()
operator|.
name|fileAndDirectoryCount
argument_list|(
name|RouterQuotaUsage
operator|.
name|QUOTA_USAGE_COUNT_DEFAULT
argument_list|)
operator|.
name|quota
argument_list|(
name|HdfsConstants
operator|.
name|QUOTA_RESET
argument_list|)
operator|.
name|spaceConsumed
argument_list|(
name|RouterQuotaUsage
operator|.
name|QUOTA_USAGE_COUNT_DEFAULT
argument_list|)
operator|.
name|spaceQuota
argument_list|(
name|HdfsConstants
operator|.
name|QUOTA_RESET
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|record
operator|.
name|setQuota
argument_list|(
name|quota
argument_list|)
expr_stmt|;
comment|// Validate
name|record
operator|.
name|validate
argument_list|()
expr_stmt|;
return|return
name|record
return|;
block|}
comment|/**    * Get source path in the federated namespace.    *    * @return Source path in the federated namespace.    */
DECL|method|getSourcePath ()
specifier|public
specifier|abstract
name|String
name|getSourcePath
parameter_list|()
function_decl|;
comment|/**    * Set source path in the federated namespace.    *    * @param path Source path in the federated namespace.    */
DECL|method|setSourcePath (String path)
specifier|public
specifier|abstract
name|void
name|setSourcePath
parameter_list|(
name|String
name|path
parameter_list|)
function_decl|;
comment|/**    * Get a list of destinations (namespace + path) present for this entry.    *    * @return List of RemoteLocation destinations. Null if no destinations.    */
DECL|method|getDestinations ()
specifier|public
specifier|abstract
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|getDestinations
parameter_list|()
function_decl|;
comment|/**    * Set the destination paths.    *    * @param paths Destination paths.    */
DECL|method|setDestinations (List<RemoteLocation> dests)
specifier|public
specifier|abstract
name|void
name|setDestinations
parameter_list|(
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|dests
parameter_list|)
function_decl|;
comment|/**    * Add a new destination to this mount table entry.    */
DECL|method|addDestination (String nsId, String path)
specifier|public
specifier|abstract
name|boolean
name|addDestination
parameter_list|(
name|String
name|nsId
parameter_list|,
name|String
name|path
parameter_list|)
function_decl|;
comment|/**    * Check if the entry is read only.    *    * @return If the entry is read only.    */
DECL|method|isReadOnly ()
specifier|public
specifier|abstract
name|boolean
name|isReadOnly
parameter_list|()
function_decl|;
comment|/**    * Set an entry to be read only.    *    * @param ro If the entry is read only.    */
DECL|method|setReadOnly (boolean ro)
specifier|public
specifier|abstract
name|void
name|setReadOnly
parameter_list|(
name|boolean
name|ro
parameter_list|)
function_decl|;
comment|/**    * Get the order of the destinations for this mount table entry.    *    * @return Order of the destinations.    */
DECL|method|getDestOrder ()
specifier|public
specifier|abstract
name|DestinationOrder
name|getDestOrder
parameter_list|()
function_decl|;
comment|/**    * Set the order of the destinations for this mount table entry.    *    * @param order Order of the destinations.    */
DECL|method|setDestOrder (DestinationOrder order)
specifier|public
specifier|abstract
name|void
name|setDestOrder
parameter_list|(
name|DestinationOrder
name|order
parameter_list|)
function_decl|;
comment|/**    * Get owner name of this mount table entry.    *    * @return Owner name    */
DECL|method|getOwnerName ()
specifier|public
specifier|abstract
name|String
name|getOwnerName
parameter_list|()
function_decl|;
comment|/**    * Set owner name of this mount table entry.    *    * @param owner Owner name for mount table entry    */
DECL|method|setOwnerName (String owner)
specifier|public
specifier|abstract
name|void
name|setOwnerName
parameter_list|(
name|String
name|owner
parameter_list|)
function_decl|;
comment|/**    * Get group name of this mount table entry.    *    * @return Group name    */
DECL|method|getGroupName ()
specifier|public
specifier|abstract
name|String
name|getGroupName
parameter_list|()
function_decl|;
comment|/**    * Set group name of this mount table entry.    *    * @param group Group name for mount table entry    */
DECL|method|setGroupName (String group)
specifier|public
specifier|abstract
name|void
name|setGroupName
parameter_list|(
name|String
name|group
parameter_list|)
function_decl|;
comment|/**    * Get permission of this mount table entry.    *    * @return FsPermission permission mode    */
DECL|method|getMode ()
specifier|public
specifier|abstract
name|FsPermission
name|getMode
parameter_list|()
function_decl|;
comment|/**    * Set permission for this mount table entry.    *    * @param mode Permission for mount table entry    */
DECL|method|setMode (FsPermission mode)
specifier|public
specifier|abstract
name|void
name|setMode
parameter_list|(
name|FsPermission
name|mode
parameter_list|)
function_decl|;
comment|/**    * Get quota of this mount table entry.    *    * @return RouterQuotaUsage quota usage    */
DECL|method|getQuota ()
specifier|public
specifier|abstract
name|RouterQuotaUsage
name|getQuota
parameter_list|()
function_decl|;
comment|/**    * Set quota for this mount table entry.    *    * @param quota QuotaUsage for mount table entry    */
DECL|method|setQuota (RouterQuotaUsage quota)
specifier|public
specifier|abstract
name|void
name|setQuota
parameter_list|(
name|RouterQuotaUsage
name|quota
parameter_list|)
function_decl|;
comment|/**    * Get the default location.    * @return The default location.    */
DECL|method|getDefaultLocation ()
specifier|public
name|RemoteLocation
name|getDefaultLocation
parameter_list|()
block|{
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|dests
init|=
name|this
operator|.
name|getDestinations
argument_list|()
decl_stmt|;
if|if
condition|(
name|dests
operator|==
literal|null
operator|||
name|dests
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|dests
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|like (final BaseRecord o)
specifier|public
name|boolean
name|like
parameter_list|(
specifier|final
name|BaseRecord
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|MountTable
condition|)
block|{
name|MountTable
name|other
init|=
operator|(
name|MountTable
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|getSourcePath
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|getSourcePath
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getSourcePath
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|getDestinations
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|getDestinations
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getDestinations
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|getSourcePath
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"->"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|destinations
init|=
name|this
operator|.
name|getDestinations
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|destinations
argument_list|)
expr_stmt|;
if|if
condition|(
name|destinations
operator|!=
literal|null
operator|&&
name|destinations
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"["
operator|+
name|this
operator|.
name|getDestOrder
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|isReadOnly
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"[RO]"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|getOwnerName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"[owner:"
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|getOwnerName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|getGroupName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"[group:"
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|getGroupName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|getMode
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"[mode:"
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|getMode
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|getQuota
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"[quota:"
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|getQuota
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getPrimaryKeys ()
specifier|public
name|SortedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getPrimaryKeys
parameter_list|()
block|{
name|SortedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"sourcePath"
argument_list|,
name|this
operator|.
name|getSourcePath
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|map
return|;
block|}
annotation|@
name|Override
DECL|method|validate ()
specifier|public
name|void
name|validate
parameter_list|()
block|{
name|super
operator|.
name|validate
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|getSourcePath
argument_list|()
operator|==
literal|null
operator|||
name|this
operator|.
name|getSourcePath
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|ERROR_MSG_NO_SOURCE_PATH
operator|+
name|this
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|this
operator|.
name|getSourcePath
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|ERROR_MSG_MUST_START_WITH_BACK_SLASH
operator|+
name|this
argument_list|)
throw|;
block|}
if|if
condition|(
name|this
operator|.
name|getDestinations
argument_list|()
operator|==
literal|null
operator|||
name|this
operator|.
name|getDestinations
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|ERROR_MSG_NO_DEST_PATH_SPECIFIED
operator|+
name|this
argument_list|)
throw|;
block|}
for|for
control|(
name|RemoteLocation
name|loc
range|:
name|getDestinations
argument_list|()
control|)
block|{
name|String
name|nsId
init|=
name|loc
operator|.
name|getNameserviceId
argument_list|()
decl_stmt|;
if|if
condition|(
name|nsId
operator|==
literal|null
operator|||
name|nsId
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|ERROR_MSG_INVAILD_DEST_NS
operator|+
name|this
argument_list|)
throw|;
block|}
if|if
condition|(
name|loc
operator|.
name|getDest
argument_list|()
operator|==
literal|null
operator|||
name|loc
operator|.
name|getDest
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|ERROR_MSG_INVAILD_DEST_PATH
operator|+
name|this
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|loc
operator|.
name|getDest
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|ERROR_MSG_ALL_DEST_MUST_START_WITH_BACK_SLASH
operator|+
name|this
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|getExpirationMs ()
specifier|public
name|long
name|getExpirationMs
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|new
name|HashCodeBuilder
argument_list|(
literal|17
argument_list|,
literal|31
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|getSourcePath
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|getDestinations
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|isReadOnly
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|getDestOrder
argument_list|()
argument_list|)
operator|.
name|toHashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|MountTable
condition|)
block|{
name|MountTable
name|other
init|=
operator|(
name|MountTable
operator|)
name|obj
decl_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|getSourcePath
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getSourcePath
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|this
operator|.
name|getDestinations
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getDestinations
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isReadOnly
argument_list|()
operator|!=
name|other
operator|.
name|isReadOnly
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|this
operator|.
name|getDestOrder
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getDestOrder
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Check if a mount table spans all locations.    * @return If the mount table spreads across all locations.    */
DECL|method|isAll ()
specifier|public
name|boolean
name|isAll
parameter_list|()
block|{
name|DestinationOrder
name|order
init|=
name|getDestOrder
argument_list|()
decl_stmt|;
return|return
name|order
operator|==
name|DestinationOrder
operator|.
name|HASH_ALL
operator|||
name|order
operator|==
name|DestinationOrder
operator|.
name|RANDOM
operator|||
name|order
operator|==
name|DestinationOrder
operator|.
name|SPACE
return|;
block|}
comment|/**    * Normalize a path for that filesystem.    *    * @param path Path to normalize.    * @return Normalized path.    */
DECL|method|normalizeFileSystemPath (final String path)
specifier|private
specifier|static
name|String
name|normalizeFileSystemPath
parameter_list|(
specifier|final
name|String
name|path
parameter_list|)
block|{
name|Path
name|normalizedPath
init|=
operator|new
name|Path
argument_list|(
name|path
argument_list|)
decl_stmt|;
return|return
name|normalizedPath
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

