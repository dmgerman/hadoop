begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.router
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|builder
operator|.
name|HashCodeBuilder
import|;
end_import

begin_comment
comment|/**  * Base class for objects that are unique to a namespace.  */
end_comment

begin_class
DECL|class|RemoteLocationContext
specifier|public
specifier|abstract
class|class
name|RemoteLocationContext
implements|implements
name|Comparable
argument_list|<
name|RemoteLocationContext
argument_list|>
block|{
comment|/**    * Returns an identifier for a unique namespace.    *    * @return Namespace identifier.    */
DECL|method|getNameserviceId ()
specifier|public
specifier|abstract
name|String
name|getNameserviceId
parameter_list|()
function_decl|;
comment|/**    * Destination in this location. For example the path in a remote namespace.    *    * @return Destination in this location.    */
DECL|method|getDest ()
specifier|public
specifier|abstract
name|String
name|getDest
parameter_list|()
function_decl|;
comment|/**    * Original source location.    *    * @return Source path.    */
DECL|method|getSrc ()
specifier|public
specifier|abstract
name|String
name|getSrc
parameter_list|()
function_decl|;
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|new
name|HashCodeBuilder
argument_list|(
literal|17
argument_list|,
literal|31
argument_list|)
operator|.
name|append
argument_list|(
name|getNameserviceId
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|getDest
argument_list|()
argument_list|)
operator|.
name|toHashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|RemoteLocationContext
condition|)
block|{
name|RemoteLocationContext
name|other
init|=
operator|(
name|RemoteLocationContext
operator|)
name|obj
decl_stmt|;
return|return
name|this
operator|.
name|getNameserviceId
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getNameserviceId
argument_list|()
argument_list|)
operator|&&
name|this
operator|.
name|getDest
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getDest
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo (RemoteLocationContext info)
specifier|public
name|int
name|compareTo
parameter_list|(
name|RemoteLocationContext
name|info
parameter_list|)
block|{
name|int
name|ret
init|=
name|this
operator|.
name|getNameserviceId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|info
operator|.
name|getNameserviceId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|==
literal|0
condition|)
block|{
name|ret
operator|=
name|this
operator|.
name|getDest
argument_list|()
operator|.
name|compareTo
argument_list|(
name|info
operator|.
name|getDest
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
block|}
end_class

end_unit

