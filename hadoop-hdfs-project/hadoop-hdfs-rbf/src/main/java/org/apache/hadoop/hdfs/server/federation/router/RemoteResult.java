begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.router
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Result from a remote location.  * It includes the exception if there was any error.  * @param<T> Type of the remote location.  * @param<R> Type of the result.  */
end_comment

begin_class
DECL|class|RemoteResult
specifier|public
class|class
name|RemoteResult
parameter_list|<
name|T
extends|extends
name|RemoteLocationContext
parameter_list|,
name|R
parameter_list|>
block|{
comment|/** The remote location. */
DECL|field|loc
specifier|private
specifier|final
name|T
name|loc
decl_stmt|;
comment|/** The result from the remote location. */
DECL|field|result
specifier|private
specifier|final
name|R
name|result
decl_stmt|;
comment|/** If the result is set; used for void types. */
DECL|field|resultSet
specifier|private
specifier|final
name|boolean
name|resultSet
decl_stmt|;
comment|/** The exception if we couldn't get the result. */
DECL|field|ioe
specifier|private
specifier|final
name|IOException
name|ioe
decl_stmt|;
DECL|method|RemoteResult (T location, R r)
specifier|public
name|RemoteResult
parameter_list|(
name|T
name|location
parameter_list|,
name|R
name|r
parameter_list|)
block|{
name|this
operator|.
name|loc
operator|=
name|location
expr_stmt|;
name|this
operator|.
name|result
operator|=
name|r
expr_stmt|;
name|this
operator|.
name|resultSet
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|ioe
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|RemoteResult (T location, IOException e)
specifier|public
name|RemoteResult
parameter_list|(
name|T
name|location
parameter_list|,
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|loc
operator|=
name|location
expr_stmt|;
name|this
operator|.
name|result
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|resultSet
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|ioe
operator|=
name|e
expr_stmt|;
block|}
DECL|method|getLocation ()
specifier|public
name|T
name|getLocation
parameter_list|()
block|{
return|return
name|loc
return|;
block|}
DECL|method|hasResult ()
specifier|public
name|boolean
name|hasResult
parameter_list|()
block|{
return|return
name|resultSet
return|;
block|}
DECL|method|getResult ()
specifier|public
name|R
name|getResult
parameter_list|()
block|{
return|return
name|result
return|;
block|}
DECL|method|hasException ()
specifier|public
name|boolean
name|hasException
parameter_list|()
block|{
return|return
name|getException
argument_list|()
operator|!=
literal|null
return|;
block|}
DECL|method|getException ()
specifier|public
name|IOException
name|getException
parameter_list|()
block|{
return|return
name|ioe
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
literal|"loc="
argument_list|)
operator|.
name|append
argument_list|(
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasResult
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" result="
argument_list|)
operator|.
name|append
argument_list|(
name|getResult
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasException
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" exception="
argument_list|)
operator|.
name|append
argument_list|(
name|getException
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

