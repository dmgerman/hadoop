begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.resolver
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|order
operator|.
name|AvailableSpaceResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|order
operator|.
name|DestinationOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|order
operator|.
name|HashFirstResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|order
operator|.
name|HashResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|order
operator|.
name|LocalResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|order
operator|.
name|OrderedResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|order
operator|.
name|RandomResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
operator|.
name|Router
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * Mount table resolver that supports multiple locations for each mount entry.  * The returned location contains prioritized remote paths from highest priority  * to the lowest priority. Multiple locations for a mount point are optional.  * When multiple locations are specified, both will be checked for the presence  * of a file and the nameservice for a new file/dir is chosen based on the  * results of a consistent hashing algorithm.  *<p>  * Does the Mount table entry for this path have multiple destinations?  *<ul>  *<li>No: Return the location  *<li>Yes: Return all locations, prioritizing the best guess from the  * consistent hashing algorithm.  *</ul>  *<p>  * It has multiple options to order the locations: HASH (default), LOCAL,  * RANDOM, and HASH_ALL.  *<p>  * The consistent hashing result is dependent on the number and combination of  * nameservices that are registered for particular mount point. The order of  * nameservices/locations in the mount table is not prioritized. Each consistent  * hash calculation considers only the set of unique nameservices present for  * the mount table location.  */
end_comment

begin_class
DECL|class|MultipleDestinationMountTableResolver
specifier|public
class|class
name|MultipleDestinationMountTableResolver
extends|extends
name|MountTableResolver
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MultipleDestinationMountTableResolver
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** Resolvers that use a particular order for multiple destinations. */
DECL|field|orderedResolvers
specifier|private
name|EnumMap
argument_list|<
name|DestinationOrder
argument_list|,
name|OrderedResolver
argument_list|>
name|orderedResolvers
init|=
operator|new
name|EnumMap
argument_list|<>
argument_list|(
name|DestinationOrder
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|MultipleDestinationMountTableResolver ( Configuration conf, Router router)
specifier|public
name|MultipleDestinationMountTableResolver
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Router
name|router
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|router
argument_list|)
expr_stmt|;
comment|// Initialize the ordered resolvers
name|addResolver
argument_list|(
name|DestinationOrder
operator|.
name|HASH
argument_list|,
operator|new
name|HashFirstResolver
argument_list|()
argument_list|)
expr_stmt|;
name|addResolver
argument_list|(
name|DestinationOrder
operator|.
name|LOCAL
argument_list|,
operator|new
name|LocalResolver
argument_list|(
name|conf
argument_list|,
name|router
argument_list|)
argument_list|)
expr_stmt|;
name|addResolver
argument_list|(
name|DestinationOrder
operator|.
name|RANDOM
argument_list|,
operator|new
name|RandomResolver
argument_list|()
argument_list|)
expr_stmt|;
name|addResolver
argument_list|(
name|DestinationOrder
operator|.
name|HASH_ALL
argument_list|,
operator|new
name|HashResolver
argument_list|()
argument_list|)
expr_stmt|;
name|addResolver
argument_list|(
name|DestinationOrder
operator|.
name|SPACE
argument_list|,
operator|new
name|AvailableSpaceResolver
argument_list|(
name|conf
argument_list|,
name|router
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getDestinationForPath (String path)
specifier|public
name|PathLocation
name|getDestinationForPath
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|PathLocation
name|mountTableResult
init|=
name|super
operator|.
name|getDestinationForPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|mountTableResult
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"The {} cannot find a location for {}"
argument_list|,
name|super
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mountTableResult
operator|.
name|hasMultipleDestinations
argument_list|()
condition|)
block|{
name|DestinationOrder
name|order
init|=
name|mountTableResult
operator|.
name|getDestinationOrder
argument_list|()
decl_stmt|;
name|OrderedResolver
name|orderedResolver
init|=
name|orderedResolvers
operator|.
name|get
argument_list|(
name|order
argument_list|)
decl_stmt|;
if|if
condition|(
name|orderedResolver
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot find resolver for order {}"
argument_list|,
name|order
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|firstNamespace
init|=
name|orderedResolver
operator|.
name|getFirstNamespace
argument_list|(
name|path
argument_list|,
name|mountTableResult
argument_list|)
decl_stmt|;
comment|// Change the order of the name spaces according to the policy
if|if
condition|(
name|firstNamespace
operator|!=
literal|null
condition|)
block|{
comment|// This is the entity in the tree, we need to create our own copy
name|mountTableResult
operator|=
operator|new
name|PathLocation
argument_list|(
name|mountTableResult
argument_list|,
name|firstNamespace
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Ordered locations following {} are {}"
argument_list|,
name|order
argument_list|,
name|mountTableResult
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot get main namespace for path {} with order {}"
argument_list|,
name|path
argument_list|,
name|order
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|mountTableResult
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|addResolver (DestinationOrder order, OrderedResolver resolver)
specifier|public
name|void
name|addResolver
parameter_list|(
name|DestinationOrder
name|order
parameter_list|,
name|OrderedResolver
name|resolver
parameter_list|)
block|{
name|orderedResolvers
operator|.
name|put
argument_list|(
name|order
argument_list|,
name|resolver
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

