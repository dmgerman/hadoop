begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.router
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|CachedRecordStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|MembershipStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|MountTableStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|RecordStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|RouterStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|StateStoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|RouterHeartbeatRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|RouterHeartbeatResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|BaseRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|RouterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|StateStoreVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Service to periodically update the Router current state in the State Store.  */
end_comment

begin_class
DECL|class|RouterHeartbeatService
specifier|public
class|class
name|RouterHeartbeatService
extends|extends
name|PeriodicService
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RouterHeartbeatService
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** Router we are hearbeating. */
DECL|field|router
specifier|private
specifier|final
name|Router
name|router
decl_stmt|;
comment|/**    * Create a new Router heartbeat service.    *    * @param router Router to heartbeat.    */
DECL|method|RouterHeartbeatService (Router router)
specifier|public
name|RouterHeartbeatService
parameter_list|(
name|Router
name|router
parameter_list|)
block|{
name|super
argument_list|(
name|RouterHeartbeatService
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|router
operator|=
name|router
expr_stmt|;
block|}
comment|/**    * Trigger the update of the Router state asynchronously.    */
DECL|method|updateStateAsync ()
specifier|protected
name|void
name|updateStateAsync
parameter_list|()
block|{
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|updateStateStore
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|,
literal|"Router Heartbeat Async"
argument_list|)
decl_stmt|;
name|thread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|/**    * Update the state of the Router in the State Store.    */
annotation|@
name|VisibleForTesting
DECL|method|updateStateStore ()
specifier|synchronized
name|void
name|updateStateStore
parameter_list|()
block|{
name|String
name|routerId
init|=
name|router
operator|.
name|getRouterId
argument_list|()
decl_stmt|;
if|if
condition|(
name|routerId
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot heartbeat for router: unknown router id"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|isStoreAvailable
argument_list|()
condition|)
block|{
name|RouterStore
name|routerStore
init|=
name|router
operator|.
name|getRouterStateManager
argument_list|()
decl_stmt|;
try|try
block|{
name|RouterState
name|record
init|=
name|RouterState
operator|.
name|newInstance
argument_list|(
name|routerId
argument_list|,
name|router
operator|.
name|getStartTime
argument_list|()
argument_list|,
name|router
operator|.
name|getRouterState
argument_list|()
argument_list|)
decl_stmt|;
name|StateStoreVersion
name|stateStoreVersion
init|=
name|StateStoreVersion
operator|.
name|newInstance
argument_list|(
name|getStateStoreVersion
argument_list|(
name|MembershipStore
operator|.
name|class
argument_list|)
argument_list|,
name|getStateStoreVersion
argument_list|(
name|MountTableStore
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|record
operator|.
name|setStateStoreVersion
argument_list|(
name|stateStoreVersion
argument_list|)
expr_stmt|;
name|RouterHeartbeatRequest
name|request
init|=
name|RouterHeartbeatRequest
operator|.
name|newInstance
argument_list|(
name|record
argument_list|)
decl_stmt|;
name|RouterHeartbeatResponse
name|response
init|=
name|routerStore
operator|.
name|routerHeartbeat
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|response
operator|.
name|getStatus
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot heartbeat router {}"
argument_list|,
name|routerId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Router heartbeat for router {}"
argument_list|,
name|routerId
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot heartbeat router {}"
argument_list|,
name|routerId
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot heartbeat router {}: State Store unavailable"
argument_list|,
name|routerId
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get the version of the data in the State Store.    *    * @param clazz Class in the State Store.    * @return Version of the data.    */
specifier|private
parameter_list|<
name|R
extends|extends
name|BaseRecord
parameter_list|,
name|S
extends|extends
name|RecordStore
argument_list|<
name|R
argument_list|>
parameter_list|>
DECL|method|getStateStoreVersion (final Class<S> clazz)
name|long
name|getStateStoreVersion
parameter_list|(
specifier|final
name|Class
argument_list|<
name|S
argument_list|>
name|clazz
parameter_list|)
block|{
name|long
name|version
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|StateStoreService
name|stateStore
init|=
name|router
operator|.
name|getStateStore
argument_list|()
decl_stmt|;
name|S
name|recordStore
init|=
name|stateStore
operator|.
name|getRegisteredRecordStore
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|recordStore
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|recordStore
operator|instanceof
name|CachedRecordStore
condition|)
block|{
name|CachedRecordStore
argument_list|<
name|R
argument_list|>
name|cachedRecordStore
init|=
operator|(
name|CachedRecordStore
argument_list|<
name|R
argument_list|>
operator|)
name|recordStore
decl_stmt|;
name|List
argument_list|<
name|R
argument_list|>
name|records
init|=
name|cachedRecordStore
operator|.
name|getCachedRecords
argument_list|()
decl_stmt|;
for|for
control|(
name|BaseRecord
name|record
range|:
name|records
control|)
block|{
if|if
condition|(
name|record
operator|.
name|getDateModified
argument_list|()
operator|>
name|version
condition|)
block|{
name|version
operator|=
name|record
operator|.
name|getDateModified
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot get version for {}"
argument_list|,
name|clazz
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|version
return|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|long
name|interval
init|=
name|conf
operator|.
name|getTimeDuration
argument_list|(
name|RBFConfigKeys
operator|.
name|DFS_ROUTER_HEARTBEAT_STATE_INTERVAL_MS
argument_list|,
name|RBFConfigKeys
operator|.
name|DFS_ROUTER_HEARTBEAT_STATE_INTERVAL_MS_DEFAULT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|this
operator|.
name|setIntervalMs
argument_list|(
name|interval
argument_list|)
expr_stmt|;
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|periodicInvoke ()
specifier|public
name|void
name|periodicInvoke
parameter_list|()
block|{
name|updateStateStore
argument_list|()
expr_stmt|;
block|}
DECL|method|isStoreAvailable ()
specifier|private
name|boolean
name|isStoreAvailable
parameter_list|()
block|{
if|if
condition|(
name|router
operator|.
name|getRouterStateManager
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|router
operator|.
name|getStateStore
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|router
operator|.
name|getStateStore
argument_list|()
operator|.
name|isDriverReady
argument_list|()
return|;
block|}
block|}
end_class

end_unit

