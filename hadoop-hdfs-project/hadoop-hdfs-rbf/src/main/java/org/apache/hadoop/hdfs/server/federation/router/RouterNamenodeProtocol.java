begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.router
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|DatanodeReportType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|ExportedBlockKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|FileSubclusterResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|CheckpointSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
operator|.
name|OperationCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|BlocksWithLocations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeStorageReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamenodeCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamenodeProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamenodeRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamespaceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|RemoteEditLogManifest
import|;
end_import

begin_comment
comment|/**  * Module that implements all the RPC calls in {@link NamenodeProtocol} in the  * {@link RouterRpcServer}.  */
end_comment

begin_class
DECL|class|RouterNamenodeProtocol
specifier|public
class|class
name|RouterNamenodeProtocol
implements|implements
name|NamenodeProtocol
block|{
comment|/** RPC server to receive client calls. */
DECL|field|rpcServer
specifier|private
specifier|final
name|RouterRpcServer
name|rpcServer
decl_stmt|;
comment|/** RPC clients to connect to the Namenodes. */
DECL|field|rpcClient
specifier|private
specifier|final
name|RouterRpcClient
name|rpcClient
decl_stmt|;
comment|/** Interface to map global name space to HDFS subcluster name spaces. */
DECL|field|subclusterResolver
specifier|private
specifier|final
name|FileSubclusterResolver
name|subclusterResolver
decl_stmt|;
DECL|method|RouterNamenodeProtocol (RouterRpcServer server)
specifier|public
name|RouterNamenodeProtocol
parameter_list|(
name|RouterRpcServer
name|server
parameter_list|)
block|{
name|this
operator|.
name|rpcServer
operator|=
name|server
expr_stmt|;
name|this
operator|.
name|rpcClient
operator|=
name|this
operator|.
name|rpcServer
operator|.
name|getRPCClient
argument_list|()
expr_stmt|;
name|this
operator|.
name|subclusterResolver
operator|=
name|this
operator|.
name|rpcServer
operator|.
name|getSubclusterResolver
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getBlocks (DatanodeInfo datanode, long size, long minBlockSize)
specifier|public
name|BlocksWithLocations
name|getBlocks
parameter_list|(
name|DatanodeInfo
name|datanode
parameter_list|,
name|long
name|size
parameter_list|,
name|long
name|minBlockSize
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
comment|// Get the namespace where the datanode is located
name|Map
argument_list|<
name|String
argument_list|,
name|DatanodeStorageReport
index|[]
argument_list|>
name|map
init|=
name|rpcServer
operator|.
name|getDatanodeStorageReportMap
argument_list|(
name|DatanodeReportType
operator|.
name|ALL
argument_list|)
decl_stmt|;
name|String
name|nsId
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|DatanodeStorageReport
index|[]
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|DatanodeStorageReport
index|[]
name|dns
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|DatanodeStorageReport
name|dn
range|:
name|dns
control|)
block|{
name|DatanodeInfo
name|dnInfo
init|=
name|dn
operator|.
name|getDatanodeInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|dnInfo
operator|.
name|getDatanodeUuid
argument_list|()
operator|.
name|equals
argument_list|(
name|datanode
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
condition|)
block|{
name|nsId
operator|=
name|entry
operator|.
name|getKey
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
comment|// Break the loop if already found
if|if
condition|(
name|nsId
operator|!=
literal|null
condition|)
block|{
break|break;
block|}
block|}
comment|// Forward to the proper namenode
if|if
condition|(
name|nsId
operator|!=
literal|null
condition|)
block|{
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
name|NamenodeProtocol
operator|.
name|class
argument_list|,
literal|"getBlocks"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|DatanodeInfo
operator|.
name|class
operator|,
name|long
operator|.
name|class
operator|,
name|long
operator|.
name|class
block|}
operator|,
name|datanode
operator|,
name|size
operator|,
name|minBlockSize
block|)
empty_stmt|;
return|return
name|rpcClient
operator|.
name|invokeSingle
argument_list|(
name|nsId
argument_list|,
name|method
argument_list|,
name|BlocksWithLocations
operator|.
name|class
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
end_class

begin_function
annotation|@
name|Override
DECL|method|getBlockKeys ()
specifier|public
name|ExportedBlockKeys
name|getBlockKeys
parameter_list|()
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
comment|// We return the information from the default name space
name|String
name|defaultNsId
init|=
name|subclusterResolver
operator|.
name|getDefaultNamespace
argument_list|()
decl_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
name|NamenodeProtocol
operator|.
name|class
argument_list|,
literal|"getBlockKeys"
argument_list|)
decl_stmt|;
return|return
name|rpcClient
operator|.
name|invokeSingle
argument_list|(
name|defaultNsId
argument_list|,
name|method
argument_list|,
name|ExportedBlockKeys
operator|.
name|class
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|getTransactionID ()
specifier|public
name|long
name|getTransactionID
parameter_list|()
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
comment|// We return the information from the default name space
name|String
name|defaultNsId
init|=
name|subclusterResolver
operator|.
name|getDefaultNamespace
argument_list|()
decl_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
name|NamenodeProtocol
operator|.
name|class
argument_list|,
literal|"getTransactionID"
argument_list|)
decl_stmt|;
return|return
name|rpcClient
operator|.
name|invokeSingle
argument_list|(
name|defaultNsId
argument_list|,
name|method
argument_list|,
name|long
operator|.
name|class
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|getMostRecentCheckpointTxId ()
specifier|public
name|long
name|getMostRecentCheckpointTxId
parameter_list|()
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
comment|// We return the information from the default name space
name|String
name|defaultNsId
init|=
name|subclusterResolver
operator|.
name|getDefaultNamespace
argument_list|()
decl_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
name|NamenodeProtocol
operator|.
name|class
argument_list|,
literal|"getMostRecentCheckpointTxId"
argument_list|)
decl_stmt|;
return|return
name|rpcClient
operator|.
name|invokeSingle
argument_list|(
name|defaultNsId
argument_list|,
name|method
argument_list|,
name|long
operator|.
name|class
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|rollEditLog ()
specifier|public
name|CheckpointSignature
name|rollEditLog
parameter_list|()
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|versionRequest ()
specifier|public
name|NamespaceInfo
name|versionRequest
parameter_list|()
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
comment|// We return the information from the default name space
name|String
name|defaultNsId
init|=
name|subclusterResolver
operator|.
name|getDefaultNamespace
argument_list|()
decl_stmt|;
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
name|NamenodeProtocol
operator|.
name|class
argument_list|,
literal|"versionRequest"
argument_list|)
decl_stmt|;
return|return
name|rpcClient
operator|.
name|invokeSingle
argument_list|(
name|defaultNsId
argument_list|,
name|method
argument_list|,
name|NamespaceInfo
operator|.
name|class
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|errorReport (NamenodeRegistration registration, int errorCode, String msg)
specifier|public
name|void
name|errorReport
parameter_list|(
name|NamenodeRegistration
name|registration
parameter_list|,
name|int
name|errorCode
parameter_list|,
name|String
name|msg
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|UNCHECKED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|registerSubordinateNamenode ( NamenodeRegistration registration)
specifier|public
name|NamenodeRegistration
name|registerSubordinateNamenode
parameter_list|(
name|NamenodeRegistration
name|registration
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|startCheckpoint (NamenodeRegistration registration)
specifier|public
name|NamenodeCommand
name|startCheckpoint
parameter_list|(
name|NamenodeRegistration
name|registration
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|endCheckpoint (NamenodeRegistration registration, CheckpointSignature sig)
specifier|public
name|void
name|endCheckpoint
parameter_list|(
name|NamenodeRegistration
name|registration
parameter_list|,
name|CheckpointSignature
name|sig
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|getEditLogManifest (long sinceTxId)
specifier|public
name|RemoteEditLogManifest
name|getEditLogManifest
parameter_list|(
name|long
name|sinceTxId
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|isUpgradeFinalized ()
specifier|public
name|boolean
name|isUpgradeFinalized
parameter_list|()
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|isRollingUpgrade ()
specifier|public
name|boolean
name|isRollingUpgrade
parameter_list|()
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|getNextSPSPath ()
specifier|public
name|Long
name|getNextSPSPath
parameter_list|()
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// not supported
return|return
literal|null
return|;
block|}
end_function

unit|}
end_unit

