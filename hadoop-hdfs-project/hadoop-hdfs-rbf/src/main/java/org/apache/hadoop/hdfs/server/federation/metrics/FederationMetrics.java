begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.metrics
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|metrics
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
operator|.
name|now
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|ToIntFunction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|ToLongFunction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|NotCompliantMBeanException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|StandardMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|DatanodeReportType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|ActiveNamenodeResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|FederationNamenodeContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|FederationNamespaceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|RemoteLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
operator|.
name|RBFConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
operator|.
name|Router
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
operator|.
name|RouterRpcServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|MembershipStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|MountTableStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|RouterStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|StateStoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|GetMountTableEntriesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|GetMountTableEntriesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|GetNamenodeRegistrationsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|GetNamenodeRegistrationsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|GetNamespaceInfoRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|GetNamespaceInfoResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|GetRouterRegistrationsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|GetRouterRegistrationsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|BaseRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|MembershipState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|MembershipStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|MountTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|RouterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|StateStoreVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|util
operator|.
name|MBeans
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|VersionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|ajax
operator|.
name|JSON
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * Implementation of the Router metrics collector.  */
end_comment

begin_class
DECL|class|FederationMetrics
specifier|public
class|class
name|FederationMetrics
implements|implements
name|FederationMBean
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FederationMetrics
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** Format for a date. */
DECL|field|DATE_FORMAT
specifier|private
specifier|static
specifier|final
name|String
name|DATE_FORMAT
init|=
literal|"yyyy/MM/dd HH:mm:ss"
decl_stmt|;
comment|/** Prevent holding the page from load too long. */
DECL|field|timeOut
specifier|private
specifier|final
name|long
name|timeOut
decl_stmt|;
comment|/** Router interface. */
DECL|field|router
specifier|private
specifier|final
name|Router
name|router
decl_stmt|;
comment|/** FederationState JMX bean. */
DECL|field|beanName
specifier|private
name|ObjectName
name|beanName
decl_stmt|;
comment|/** Resolve the namenode for each namespace. */
DECL|field|namenodeResolver
specifier|private
specifier|final
name|ActiveNamenodeResolver
name|namenodeResolver
decl_stmt|;
comment|/** State store. */
DECL|field|stateStore
specifier|private
specifier|final
name|StateStoreService
name|stateStore
decl_stmt|;
comment|/** Membership state store. */
DECL|field|membershipStore
specifier|private
name|MembershipStore
name|membershipStore
decl_stmt|;
comment|/** Mount table store. */
DECL|field|mountTableStore
specifier|private
name|MountTableStore
name|mountTableStore
decl_stmt|;
comment|/** Router state store. */
DECL|field|routerStore
specifier|private
name|RouterStore
name|routerStore
decl_stmt|;
DECL|method|FederationMetrics (Router router)
specifier|public
name|FederationMetrics
parameter_list|(
name|Router
name|router
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|router
operator|=
name|router
expr_stmt|;
try|try
block|{
name|StandardMBean
name|bean
init|=
operator|new
name|StandardMBean
argument_list|(
name|this
argument_list|,
name|FederationMBean
operator|.
name|class
argument_list|)
decl_stmt|;
name|this
operator|.
name|beanName
operator|=
name|MBeans
operator|.
name|register
argument_list|(
literal|"Router"
argument_list|,
literal|"FederationState"
argument_list|,
name|bean
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Registered Router MBean: {}"
argument_list|,
name|this
operator|.
name|beanName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NotCompliantMBeanException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Bad Router MBean setup"
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// Resolve namenode for each nameservice
name|this
operator|.
name|namenodeResolver
operator|=
name|this
operator|.
name|router
operator|.
name|getNamenodeResolver
argument_list|()
expr_stmt|;
comment|// State store interfaces
name|this
operator|.
name|stateStore
operator|=
name|this
operator|.
name|router
operator|.
name|getStateStore
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|stateStore
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"State store not available"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|membershipStore
operator|=
name|stateStore
operator|.
name|getRegisteredRecordStore
argument_list|(
name|MembershipStore
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|mountTableStore
operator|=
name|stateStore
operator|.
name|getRegisteredRecordStore
argument_list|(
name|MountTableStore
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|routerStore
operator|=
name|stateStore
operator|.
name|getRegisteredRecordStore
argument_list|(
name|RouterStore
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|// Initialize the cache for the DN reports
name|Configuration
name|conf
init|=
name|router
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|this
operator|.
name|timeOut
operator|=
name|conf
operator|.
name|getTimeDuration
argument_list|(
name|RBFConfigKeys
operator|.
name|DN_REPORT_TIME_OUT
argument_list|,
name|RBFConfigKeys
operator|.
name|DN_REPORT_TIME_OUT_MS_DEFAULT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
comment|/**    * Unregister the JMX beans.    */
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|beanName
operator|!=
literal|null
condition|)
block|{
name|MBeans
operator|.
name|unregister
argument_list|(
name|beanName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getNamenodes ()
specifier|public
name|String
name|getNamenodes
parameter_list|()
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|info
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
comment|// Get the values from the store
name|GetNamenodeRegistrationsRequest
name|request
init|=
name|GetNamenodeRegistrationsRequest
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|GetNamenodeRegistrationsResponse
name|response
init|=
name|membershipStore
operator|.
name|getNamenodeRegistrations
argument_list|(
name|request
argument_list|)
decl_stmt|;
comment|// Order the namenodes
specifier|final
name|List
argument_list|<
name|MembershipState
argument_list|>
name|namenodes
init|=
name|response
operator|.
name|getNamenodeMemberships
argument_list|()
decl_stmt|;
if|if
condition|(
name|namenodes
operator|==
literal|null
operator|||
name|namenodes
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|JSON
operator|.
name|toString
argument_list|(
name|info
argument_list|)
return|;
block|}
name|List
argument_list|<
name|MembershipState
argument_list|>
name|namenodesOrder
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|namenodes
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|namenodesOrder
argument_list|,
name|MembershipState
operator|.
name|NAME_COMPARATOR
argument_list|)
expr_stmt|;
comment|// Dump namenodes information into JSON
for|for
control|(
name|MembershipState
name|namenode
range|:
name|namenodesOrder
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|innerInfo
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|getJson
argument_list|(
name|namenode
argument_list|)
decl_stmt|;
name|innerInfo
operator|.
name|putAll
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|long
name|dateModified
init|=
name|namenode
operator|.
name|getDateModified
argument_list|()
decl_stmt|;
name|long
name|lastHeartbeat
init|=
name|getSecondsSince
argument_list|(
name|dateModified
argument_list|)
decl_stmt|;
name|innerInfo
operator|.
name|put
argument_list|(
literal|"lastHeartbeat"
argument_list|,
name|lastHeartbeat
argument_list|)
expr_stmt|;
name|MembershipStats
name|stats
init|=
name|namenode
operator|.
name|getStats
argument_list|()
decl_stmt|;
name|long
name|used
init|=
name|stats
operator|.
name|getTotalSpace
argument_list|()
operator|-
name|stats
operator|.
name|getAvailableSpace
argument_list|()
decl_stmt|;
name|innerInfo
operator|.
name|put
argument_list|(
literal|"used"
argument_list|,
name|used
argument_list|)
expr_stmt|;
name|info
operator|.
name|put
argument_list|(
name|namenode
operator|.
name|getNamenodeKey
argument_list|()
argument_list|,
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|innerInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Enable to fetch json representation of namenodes {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|"{}"
return|;
block|}
return|return
name|JSON
operator|.
name|toString
argument_list|(
name|info
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getNameservices ()
specifier|public
name|String
name|getNameservices
parameter_list|()
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|info
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|List
argument_list|<
name|MembershipState
argument_list|>
name|namenodes
init|=
name|getActiveNamenodeRegistrations
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MembershipState
argument_list|>
name|namenodesOrder
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|namenodes
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|namenodesOrder
argument_list|,
name|MembershipState
operator|.
name|NAME_COMPARATOR
argument_list|)
expr_stmt|;
comment|// Dump namenodes information into JSON
for|for
control|(
name|MembershipState
name|namenode
range|:
name|namenodesOrder
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|innerInfo
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|getJson
argument_list|(
name|namenode
argument_list|)
decl_stmt|;
name|innerInfo
operator|.
name|putAll
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|long
name|dateModified
init|=
name|namenode
operator|.
name|getDateModified
argument_list|()
decl_stmt|;
name|long
name|lastHeartbeat
init|=
name|getSecondsSince
argument_list|(
name|dateModified
argument_list|)
decl_stmt|;
name|innerInfo
operator|.
name|put
argument_list|(
literal|"lastHeartbeat"
argument_list|,
name|lastHeartbeat
argument_list|)
expr_stmt|;
name|MembershipStats
name|stats
init|=
name|namenode
operator|.
name|getStats
argument_list|()
decl_stmt|;
name|long
name|used
init|=
name|stats
operator|.
name|getTotalSpace
argument_list|()
operator|-
name|stats
operator|.
name|getAvailableSpace
argument_list|()
decl_stmt|;
name|innerInfo
operator|.
name|put
argument_list|(
literal|"used"
argument_list|,
name|used
argument_list|)
expr_stmt|;
name|info
operator|.
name|put
argument_list|(
name|namenode
operator|.
name|getNamenodeKey
argument_list|()
argument_list|,
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|innerInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot retrieve nameservices for JMX: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|"{}"
return|;
block|}
return|return
name|JSON
operator|.
name|toString
argument_list|(
name|info
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getMountTable ()
specifier|public
name|String
name|getMountTable
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|info
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
comment|// Get all the mount points in order
name|GetMountTableEntriesRequest
name|request
init|=
name|GetMountTableEntriesRequest
operator|.
name|newInstance
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|GetMountTableEntriesResponse
name|response
init|=
name|mountTableStore
operator|.
name|getMountTableEntries
argument_list|(
name|request
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|MountTable
argument_list|>
name|mounts
init|=
name|response
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MountTable
argument_list|>
name|orderedMounts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|mounts
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|orderedMounts
argument_list|,
name|MountTable
operator|.
name|SOURCE_COMPARATOR
argument_list|)
expr_stmt|;
comment|// Dump mount table entries information into JSON
for|for
control|(
name|MountTable
name|entry
range|:
name|orderedMounts
control|)
block|{
comment|// Sumarize destinations
name|Set
argument_list|<
name|String
argument_list|>
name|nameservices
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|paths
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RemoteLocation
name|location
range|:
name|entry
operator|.
name|getDestinations
argument_list|()
control|)
block|{
name|nameservices
operator|.
name|add
argument_list|(
name|location
operator|.
name|getNameserviceId
argument_list|()
argument_list|)
expr_stmt|;
name|paths
operator|.
name|add
argument_list|(
name|location
operator|.
name|getDest
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|getJson
argument_list|(
name|entry
argument_list|)
decl_stmt|;
comment|// We add some values with a cleaner format
name|map
operator|.
name|put
argument_list|(
literal|"dateCreated"
argument_list|,
name|getDateString
argument_list|(
name|entry
operator|.
name|getDateCreated
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"dateModified"
argument_list|,
name|getDateString
argument_list|(
name|entry
operator|.
name|getDateModified
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|innerInfo
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|innerInfo
operator|.
name|putAll
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|innerInfo
operator|.
name|put
argument_list|(
literal|"nameserviceId"
argument_list|,
name|StringUtils
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|nameservices
argument_list|)
argument_list|)
expr_stmt|;
name|innerInfo
operator|.
name|put
argument_list|(
literal|"path"
argument_list|,
name|StringUtils
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|paths
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|nameservices
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|innerInfo
operator|.
name|put
argument_list|(
literal|"order"
argument_list|,
name|entry
operator|.
name|getDestOrder
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|innerInfo
operator|.
name|put
argument_list|(
literal|"order"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
name|innerInfo
operator|.
name|put
argument_list|(
literal|"readonly"
argument_list|,
name|entry
operator|.
name|isReadOnly
argument_list|()
argument_list|)
expr_stmt|;
name|innerInfo
operator|.
name|put
argument_list|(
literal|"faulttolerant"
argument_list|,
name|entry
operator|.
name|isFaultTolerant
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|add
argument_list|(
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|innerInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot generate JSON of mount table from store: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|"[]"
return|;
block|}
return|return
name|JSON
operator|.
name|toString
argument_list|(
name|info
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getRouters ()
specifier|public
name|String
name|getRouters
parameter_list|()
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|info
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
comment|// Get all the routers in order
name|GetRouterRegistrationsRequest
name|request
init|=
name|GetRouterRegistrationsRequest
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|GetRouterRegistrationsResponse
name|response
init|=
name|routerStore
operator|.
name|getRouterRegistrations
argument_list|(
name|request
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RouterState
argument_list|>
name|routers
init|=
name|response
operator|.
name|getRouters
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RouterState
argument_list|>
name|routersOrder
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|routers
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|routersOrder
argument_list|)
expr_stmt|;
comment|// Dump router information into JSON
for|for
control|(
name|RouterState
name|record
range|:
name|routersOrder
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|innerInfo
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|getJson
argument_list|(
name|record
argument_list|)
decl_stmt|;
name|innerInfo
operator|.
name|putAll
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|long
name|dateModified
init|=
name|record
operator|.
name|getDateModified
argument_list|()
decl_stmt|;
name|long
name|lastHeartbeat
init|=
name|getSecondsSince
argument_list|(
name|dateModified
argument_list|)
decl_stmt|;
name|innerInfo
operator|.
name|put
argument_list|(
literal|"lastHeartbeat"
argument_list|,
name|lastHeartbeat
argument_list|)
expr_stmt|;
name|StateStoreVersion
name|stateStoreVersion
init|=
name|record
operator|.
name|getStateStoreVersion
argument_list|()
decl_stmt|;
if|if
condition|(
name|stateStoreVersion
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot get State Store versions"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setStateStoreVersions
argument_list|(
name|innerInfo
argument_list|,
name|stateStoreVersion
argument_list|)
expr_stmt|;
block|}
name|info
operator|.
name|put
argument_list|(
name|record
operator|.
name|getPrimaryKey
argument_list|()
argument_list|,
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|innerInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot get Routers JSON from the State Store"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|"{}"
return|;
block|}
return|return
name|JSON
operator|.
name|toString
argument_list|(
name|info
argument_list|)
return|;
block|}
comment|/**    * Populate the map with the State Store versions.    *    * @param innerInfo Map with the information.    * @param version State Store versions.    */
DECL|method|setStateStoreVersions ( Map<String, Object> map, StateStoreVersion version)
specifier|private
specifier|static
name|void
name|setStateStoreVersions
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
parameter_list|,
name|StateStoreVersion
name|version
parameter_list|)
block|{
name|long
name|membershipVersion
init|=
name|version
operator|.
name|getMembershipVersion
argument_list|()
decl_stmt|;
name|String
name|lastMembershipUpdate
init|=
name|getDateString
argument_list|(
name|membershipVersion
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"lastMembershipUpdate"
argument_list|,
name|lastMembershipUpdate
argument_list|)
expr_stmt|;
name|long
name|mountTableVersion
init|=
name|version
operator|.
name|getMountTableVersion
argument_list|()
decl_stmt|;
name|String
name|lastMountTableDate
init|=
name|getDateString
argument_list|(
name|mountTableVersion
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"lastMountTableUpdate"
argument_list|,
name|lastMountTableDate
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getTotalCapacity ()
specifier|public
name|long
name|getTotalCapacity
parameter_list|()
block|{
return|return
name|getNameserviceAggregatedLong
argument_list|(
name|MembershipStats
operator|::
name|getTotalSpace
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getRemainingCapacity ()
specifier|public
name|long
name|getRemainingCapacity
parameter_list|()
block|{
return|return
name|getNameserviceAggregatedLong
argument_list|(
name|MembershipStats
operator|::
name|getAvailableSpace
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getProvidedSpace ()
specifier|public
name|long
name|getProvidedSpace
parameter_list|()
block|{
return|return
name|getNameserviceAggregatedLong
argument_list|(
name|MembershipStats
operator|::
name|getProvidedSpace
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getUsedCapacity ()
specifier|public
name|long
name|getUsedCapacity
parameter_list|()
block|{
return|return
name|getTotalCapacity
argument_list|()
operator|-
name|getRemainingCapacity
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getNumNameservices ()
specifier|public
name|int
name|getNumNameservices
parameter_list|()
block|{
try|try
block|{
name|Set
argument_list|<
name|FederationNamespaceInfo
argument_list|>
name|nss
init|=
name|namenodeResolver
operator|.
name|getNamespaces
argument_list|()
decl_stmt|;
return|return
name|nss
operator|.
name|size
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot fetch number of expired registrations from the store: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getNumNamenodes ()
specifier|public
name|int
name|getNumNamenodes
parameter_list|()
block|{
try|try
block|{
name|GetNamenodeRegistrationsRequest
name|request
init|=
name|GetNamenodeRegistrationsRequest
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|GetNamenodeRegistrationsResponse
name|response
init|=
name|membershipStore
operator|.
name|getNamenodeRegistrations
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|MembershipState
argument_list|>
name|memberships
init|=
name|response
operator|.
name|getNamenodeMemberships
argument_list|()
decl_stmt|;
return|return
name|memberships
operator|.
name|size
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot retrieve numNamenodes for JMX: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getNumExpiredNamenodes ()
specifier|public
name|int
name|getNumExpiredNamenodes
parameter_list|()
block|{
try|try
block|{
name|GetNamenodeRegistrationsRequest
name|request
init|=
name|GetNamenodeRegistrationsRequest
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|GetNamenodeRegistrationsResponse
name|response
init|=
name|membershipStore
operator|.
name|getExpiredNamenodeRegistrations
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|MembershipState
argument_list|>
name|expiredMemberships
init|=
name|response
operator|.
name|getNamenodeMemberships
argument_list|()
decl_stmt|;
return|return
name|expiredMemberships
operator|.
name|size
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot retrieve numExpiredNamenodes for JMX: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getNumLiveNodes ()
specifier|public
name|int
name|getNumLiveNodes
parameter_list|()
block|{
return|return
name|getNameserviceAggregatedInt
argument_list|(
name|MembershipStats
operator|::
name|getNumOfActiveDatanodes
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getNumDeadNodes ()
specifier|public
name|int
name|getNumDeadNodes
parameter_list|()
block|{
return|return
name|getNameserviceAggregatedInt
argument_list|(
name|MembershipStats
operator|::
name|getNumOfDeadDatanodes
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getNumStaleNodes ()
specifier|public
name|int
name|getNumStaleNodes
parameter_list|()
block|{
return|return
name|getNameserviceAggregatedInt
argument_list|(
name|MembershipStats
operator|::
name|getNumOfStaleDatanodes
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getNumDecommissioningNodes ()
specifier|public
name|int
name|getNumDecommissioningNodes
parameter_list|()
block|{
return|return
name|getNameserviceAggregatedInt
argument_list|(
name|MembershipStats
operator|::
name|getNumOfDecommissioningDatanodes
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getNumDecomLiveNodes ()
specifier|public
name|int
name|getNumDecomLiveNodes
parameter_list|()
block|{
return|return
name|getNameserviceAggregatedInt
argument_list|(
name|MembershipStats
operator|::
name|getNumOfDecomActiveDatanodes
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getNumDecomDeadNodes ()
specifier|public
name|int
name|getNumDecomDeadNodes
parameter_list|()
block|{
return|return
name|getNameserviceAggregatedInt
argument_list|(
name|MembershipStats
operator|::
name|getNumOfDecomDeadDatanodes
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getNumInMaintenanceLiveDataNodes ()
specifier|public
name|int
name|getNumInMaintenanceLiveDataNodes
parameter_list|()
block|{
return|return
name|getNameserviceAggregatedInt
argument_list|(
name|MembershipStats
operator|::
name|getNumOfInMaintenanceLiveDataNodes
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getNumInMaintenanceDeadDataNodes ()
specifier|public
name|int
name|getNumInMaintenanceDeadDataNodes
parameter_list|()
block|{
return|return
name|getNameserviceAggregatedInt
argument_list|(
name|MembershipStats
operator|::
name|getNumOfInMaintenanceDeadDataNodes
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getNumEnteringMaintenanceDataNodes ()
specifier|public
name|int
name|getNumEnteringMaintenanceDataNodes
parameter_list|()
block|{
return|return
name|getNameserviceAggregatedInt
argument_list|(
name|MembershipStats
operator|::
name|getNumOfEnteringMaintenanceDataNodes
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|// NameNodeMXBean
DECL|method|getNodeUsage ()
specifier|public
name|String
name|getNodeUsage
parameter_list|()
block|{
name|float
name|median
init|=
literal|0
decl_stmt|;
name|float
name|max
init|=
literal|0
decl_stmt|;
name|float
name|min
init|=
literal|0
decl_stmt|;
name|float
name|dev
init|=
literal|0
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|info
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|RouterRpcServer
name|rpcServer
init|=
name|this
operator|.
name|router
operator|.
name|getRpcServer
argument_list|()
decl_stmt|;
name|DatanodeInfo
index|[]
name|live
init|=
name|rpcServer
operator|.
name|getDatanodeReport
argument_list|(
name|DatanodeReportType
operator|.
name|LIVE
argument_list|,
literal|false
argument_list|,
name|timeOut
argument_list|)
decl_stmt|;
if|if
condition|(
name|live
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|float
name|totalDfsUsed
init|=
literal|0
decl_stmt|;
name|float
index|[]
name|usages
init|=
operator|new
name|float
index|[
name|live
operator|.
name|length
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|DatanodeInfo
name|dn
range|:
name|live
control|)
block|{
name|usages
index|[
name|i
operator|++
index|]
operator|=
name|dn
operator|.
name|getDfsUsedPercent
argument_list|()
expr_stmt|;
name|totalDfsUsed
operator|+=
name|dn
operator|.
name|getDfsUsedPercent
argument_list|()
expr_stmt|;
block|}
name|totalDfsUsed
operator|/=
name|live
operator|.
name|length
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|usages
argument_list|)
expr_stmt|;
name|median
operator|=
name|usages
index|[
name|usages
operator|.
name|length
operator|/
literal|2
index|]
expr_stmt|;
name|max
operator|=
name|usages
index|[
name|usages
operator|.
name|length
operator|-
literal|1
index|]
expr_stmt|;
name|min
operator|=
name|usages
index|[
literal|0
index|]
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|usages
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|dev
operator|+=
operator|(
name|usages
index|[
name|i
index|]
operator|-
name|totalDfsUsed
operator|)
operator|*
operator|(
name|usages
index|[
name|i
index|]
operator|-
name|totalDfsUsed
operator|)
expr_stmt|;
block|}
name|dev
operator|=
operator|(
name|float
operator|)
name|Math
operator|.
name|sqrt
argument_list|(
name|dev
operator|/
name|usages
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot get the live nodes: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|innerInfo
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|innerInfo
operator|.
name|put
argument_list|(
literal|"min"
argument_list|,
name|StringUtils
operator|.
name|format
argument_list|(
literal|"%.2f%%"
argument_list|,
name|min
argument_list|)
argument_list|)
expr_stmt|;
name|innerInfo
operator|.
name|put
argument_list|(
literal|"median"
argument_list|,
name|StringUtils
operator|.
name|format
argument_list|(
literal|"%.2f%%"
argument_list|,
name|median
argument_list|)
argument_list|)
expr_stmt|;
name|innerInfo
operator|.
name|put
argument_list|(
literal|"max"
argument_list|,
name|StringUtils
operator|.
name|format
argument_list|(
literal|"%.2f%%"
argument_list|,
name|max
argument_list|)
argument_list|)
expr_stmt|;
name|innerInfo
operator|.
name|put
argument_list|(
literal|"stdDev"
argument_list|,
name|StringUtils
operator|.
name|format
argument_list|(
literal|"%.2f%%"
argument_list|,
name|dev
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|put
argument_list|(
literal|"nodeUsage"
argument_list|,
name|innerInfo
argument_list|)
expr_stmt|;
return|return
name|JSON
operator|.
name|toString
argument_list|(
name|info
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getNumBlocks ()
specifier|public
name|long
name|getNumBlocks
parameter_list|()
block|{
return|return
name|getNameserviceAggregatedLong
argument_list|(
name|MembershipStats
operator|::
name|getNumOfBlocks
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getNumOfMissingBlocks ()
specifier|public
name|long
name|getNumOfMissingBlocks
parameter_list|()
block|{
return|return
name|getNameserviceAggregatedLong
argument_list|(
name|MembershipStats
operator|::
name|getNumOfBlocksMissing
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getNumOfBlocksPendingReplication ()
specifier|public
name|long
name|getNumOfBlocksPendingReplication
parameter_list|()
block|{
return|return
name|getNameserviceAggregatedLong
argument_list|(
name|MembershipStats
operator|::
name|getNumOfBlocksPendingReplication
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getNumOfBlocksUnderReplicated ()
specifier|public
name|long
name|getNumOfBlocksUnderReplicated
parameter_list|()
block|{
return|return
name|getNameserviceAggregatedLong
argument_list|(
name|MembershipStats
operator|::
name|getNumOfBlocksUnderReplicated
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getNumOfBlocksPendingDeletion ()
specifier|public
name|long
name|getNumOfBlocksPendingDeletion
parameter_list|()
block|{
return|return
name|getNameserviceAggregatedLong
argument_list|(
name|MembershipStats
operator|::
name|getNumOfBlocksPendingDeletion
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getNumFiles ()
specifier|public
name|long
name|getNumFiles
parameter_list|()
block|{
return|return
name|getNameserviceAggregatedLong
argument_list|(
name|MembershipStats
operator|::
name|getNumOfFiles
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getRouterStarted ()
specifier|public
name|String
name|getRouterStarted
parameter_list|()
block|{
name|long
name|startTime
init|=
name|this
operator|.
name|router
operator|.
name|getStartTime
argument_list|()
decl_stmt|;
return|return
operator|new
name|Date
argument_list|(
name|startTime
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getVersion ()
specifier|public
name|String
name|getVersion
parameter_list|()
block|{
return|return
name|VersionInfo
operator|.
name|getVersion
argument_list|()
operator|+
literal|", r"
operator|+
name|VersionInfo
operator|.
name|getRevision
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getCompiledDate ()
specifier|public
name|String
name|getCompiledDate
parameter_list|()
block|{
return|return
name|VersionInfo
operator|.
name|getDate
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getCompileInfo ()
specifier|public
name|String
name|getCompileInfo
parameter_list|()
block|{
return|return
name|VersionInfo
operator|.
name|getDate
argument_list|()
operator|+
literal|" by "
operator|+
name|VersionInfo
operator|.
name|getUser
argument_list|()
operator|+
literal|" from "
operator|+
name|VersionInfo
operator|.
name|getBranch
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getHostAndPort ()
specifier|public
name|String
name|getHostAndPort
parameter_list|()
block|{
name|InetSocketAddress
name|address
init|=
name|this
operator|.
name|router
operator|.
name|getHttpServerAddress
argument_list|()
decl_stmt|;
if|if
condition|(
name|address
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|String
name|hostname
init|=
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getHostName
argument_list|()
decl_stmt|;
name|int
name|port
init|=
name|address
operator|.
name|getPort
argument_list|()
decl_stmt|;
return|return
name|hostname
operator|+
literal|":"
operator|+
name|port
return|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|ignored
parameter_list|)
block|{ }
block|}
return|return
literal|"Unknown"
return|;
block|}
annotation|@
name|Override
DECL|method|getRouterId ()
specifier|public
name|String
name|getRouterId
parameter_list|()
block|{
return|return
name|this
operator|.
name|router
operator|.
name|getRouterId
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getClusterId ()
specifier|public
name|String
name|getClusterId
parameter_list|()
block|{
try|try
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|clusterIds
init|=
name|getNamespaceInfo
argument_list|(
name|FederationNamespaceInfo
operator|::
name|getClusterId
argument_list|)
decl_stmt|;
return|return
name|clusterIds
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot fetch cluster ID metrics: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|""
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getBlockPoolId ()
specifier|public
name|String
name|getBlockPoolId
parameter_list|()
block|{
try|try
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|blockpoolIds
init|=
name|getNamespaceInfo
argument_list|(
name|FederationNamespaceInfo
operator|::
name|getBlockPoolId
argument_list|)
decl_stmt|;
return|return
name|blockpoolIds
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot fetch block pool ID metrics: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|""
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getRouterStatus ()
specifier|public
name|String
name|getRouterStatus
parameter_list|()
block|{
return|return
name|this
operator|.
name|router
operator|.
name|getRouterState
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Build a set of unique values found in all namespaces.    *    * @param f Method reference of the appropriate FederationNamespaceInfo    *          getter function    * @return Set of unique string values found in all discovered namespaces.    * @throws IOException if the query could not be executed.    */
DECL|method|getNamespaceInfo ( Function<FederationNamespaceInfo, String> f)
specifier|private
name|Collection
argument_list|<
name|String
argument_list|>
name|getNamespaceInfo
parameter_list|(
name|Function
argument_list|<
name|FederationNamespaceInfo
argument_list|,
name|String
argument_list|>
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|GetNamespaceInfoRequest
name|request
init|=
name|GetNamespaceInfoRequest
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|GetNamespaceInfoResponse
name|response
init|=
name|membershipStore
operator|.
name|getNamespaceInfo
argument_list|(
name|request
argument_list|)
decl_stmt|;
return|return
name|response
operator|.
name|getNamespaceInfo
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|f
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Get the aggregated value for a method for all nameservices.    * @param f Method reference    * @return Aggregated integer.    */
DECL|method|getNameserviceAggregatedInt (ToIntFunction<MembershipStats> f)
specifier|private
name|int
name|getNameserviceAggregatedInt
parameter_list|(
name|ToIntFunction
argument_list|<
name|MembershipStats
argument_list|>
name|f
parameter_list|)
block|{
try|try
block|{
return|return
name|getActiveNamenodeRegistrations
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|MembershipState
operator|::
name|getStats
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|summingInt
argument_list|(
name|f
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to extract metrics: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
comment|/**    * Get the aggregated value for a method for all nameservices.    * @param f Method reference    * @return Aggregated long.    */
DECL|method|getNameserviceAggregatedLong (ToLongFunction<MembershipStats> f)
specifier|private
name|long
name|getNameserviceAggregatedLong
parameter_list|(
name|ToLongFunction
argument_list|<
name|MembershipStats
argument_list|>
name|f
parameter_list|)
block|{
try|try
block|{
return|return
name|getActiveNamenodeRegistrations
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|MembershipState
operator|::
name|getStats
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|summingLong
argument_list|(
name|f
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to extract metrics: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
comment|/**    * Fetches the most active namenode memberships for all known nameservices.    * The fetched membership may not or may not be active. Excludes expired    * memberships.    * @throws IOException if the query could not be performed.    * @return List of the most active NNs from each known nameservice.    */
DECL|method|getActiveNamenodeRegistrations ()
specifier|private
name|List
argument_list|<
name|MembershipState
argument_list|>
name|getActiveNamenodeRegistrations
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|MembershipState
argument_list|>
name|resultList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|GetNamespaceInfoRequest
name|request
init|=
name|GetNamespaceInfoRequest
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|GetNamespaceInfoResponse
name|response
init|=
name|membershipStore
operator|.
name|getNamespaceInfo
argument_list|(
name|request
argument_list|)
decl_stmt|;
for|for
control|(
name|FederationNamespaceInfo
name|nsInfo
range|:
name|response
operator|.
name|getNamespaceInfo
argument_list|()
control|)
block|{
comment|// Fetch the most recent namenode registration
name|String
name|nsId
init|=
name|nsInfo
operator|.
name|getNameserviceId
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|FederationNamenodeContext
argument_list|>
name|nns
init|=
name|namenodeResolver
operator|.
name|getNamenodesForNameserviceId
argument_list|(
name|nsId
argument_list|)
decl_stmt|;
if|if
condition|(
name|nns
operator|!=
literal|null
condition|)
block|{
name|FederationNamenodeContext
name|nn
init|=
name|nns
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|nn
operator|instanceof
name|MembershipState
condition|)
block|{
name|resultList
operator|.
name|add
argument_list|(
operator|(
name|MembershipState
operator|)
name|nn
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|resultList
return|;
block|}
comment|/**    * Get time as a date string.    * @param time Seconds since 1970.    * @return String representing the date.    */
annotation|@
name|VisibleForTesting
DECL|method|getDateString (long time)
specifier|static
name|String
name|getDateString
parameter_list|(
name|long
name|time
parameter_list|)
block|{
if|if
condition|(
name|time
operator|<=
literal|0
condition|)
block|{
return|return
literal|"-"
return|;
block|}
name|Date
name|date
init|=
operator|new
name|Date
argument_list|(
name|time
argument_list|)
decl_stmt|;
name|SimpleDateFormat
name|sdf
init|=
operator|new
name|SimpleDateFormat
argument_list|(
name|DATE_FORMAT
argument_list|)
decl_stmt|;
return|return
name|sdf
operator|.
name|format
argument_list|(
name|date
argument_list|)
return|;
block|}
comment|/**    * Get the number of seconds passed since a date.    *    * @param timeMs to use as a reference.    * @return Seconds since the date.    */
DECL|method|getSecondsSince (long timeMs)
specifier|private
specifier|static
name|long
name|getSecondsSince
parameter_list|(
name|long
name|timeMs
parameter_list|)
block|{
if|if
condition|(
name|timeMs
operator|<
literal|0
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
operator|(
name|now
argument_list|()
operator|-
name|timeMs
operator|)
operator|/
literal|1000
return|;
block|}
comment|/**    * Get JSON for this record.    *    * @return Map representing the data for the JSON representation.    */
DECL|method|getJson (BaseRecord record)
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getJson
parameter_list|(
name|BaseRecord
name|record
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|json
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|fields
init|=
name|getFields
argument_list|(
name|record
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|fieldName
range|:
name|fields
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|fieldName
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"proto"
argument_list|)
condition|)
block|{
try|try
block|{
name|Object
name|value
init|=
name|getField
argument_list|(
name|record
argument_list|,
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|BaseRecord
condition|)
block|{
name|BaseRecord
name|recordField
init|=
operator|(
name|BaseRecord
operator|)
name|value
decl_stmt|;
name|json
operator|.
name|putAll
argument_list|(
name|getJson
argument_list|(
name|recordField
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|json
operator|.
name|put
argument_list|(
name|fieldName
argument_list|,
name|value
operator|==
literal|null
condition|?
name|JSONObject
operator|.
name|NULL
else|:
name|value
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot serialize field "
operator|+
name|fieldName
operator|+
literal|" into JSON"
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|json
return|;
block|}
comment|/**    * Returns all serializable fields in the object.    *    * @return Map with the fields.    */
DECL|method|getFields (BaseRecord record)
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|getFields
parameter_list|(
name|BaseRecord
name|record
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|getters
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Method
name|m
range|:
name|record
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|m
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"get"
argument_list|)
condition|)
block|{
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|type
init|=
name|m
operator|.
name|getReturnType
argument_list|()
decl_stmt|;
name|char
index|[]
name|c
init|=
name|m
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
literal|3
argument_list|)
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|c
index|[
literal|0
index|]
operator|=
name|Character
operator|.
name|toLowerCase
argument_list|(
name|c
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|String
name|key
init|=
operator|new
name|String
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|getters
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot execute getter {} on {}"
argument_list|,
name|m
operator|.
name|getName
argument_list|()
argument_list|,
name|record
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|getters
return|;
block|}
comment|/**    * Fetches the value for a field name.    *    * @param fieldName the legacy name of the field.    * @return The field data or null if not found.    */
DECL|method|getField (BaseRecord record, String fieldName)
specifier|private
specifier|static
name|Object
name|getField
parameter_list|(
name|BaseRecord
name|record
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|Object
name|result
init|=
literal|null
decl_stmt|;
name|Method
name|m
init|=
name|locateGetter
argument_list|(
name|record
argument_list|,
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|result
operator|=
name|m
operator|.
name|invoke
argument_list|(
name|record
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot get field {} on {}"
argument_list|,
name|fieldName
argument_list|,
name|record
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**    * Finds the appropriate getter for a field name.    *    * @param fieldName The legacy name of the field.    * @return The matching getter or null if not found.    */
DECL|method|locateGetter (BaseRecord record, String fieldName)
specifier|private
specifier|static
name|Method
name|locateGetter
parameter_list|(
name|BaseRecord
name|record
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
for|for
control|(
name|Method
name|m
range|:
name|record
operator|.
name|getClass
argument_list|()
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|m
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"get"
operator|+
name|fieldName
argument_list|)
condition|)
block|{
return|return
name|m
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

