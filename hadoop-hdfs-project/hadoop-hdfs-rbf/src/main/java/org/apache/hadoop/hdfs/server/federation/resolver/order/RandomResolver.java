begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.resolver.order
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|order
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadLocalRandom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|CollectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|PathLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_comment
comment|/**  * Order the destinations randomly.  */
end_comment

begin_class
DECL|class|RandomResolver
specifier|public
class|class
name|RandomResolver
implements|implements
name|OrderedResolver
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RandomResolver
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Get a random name space from the path.    *    * @param path Path ignored by this policy.    * @param loc Federated location with multiple destinations.    * @return Random name space.    */
DECL|method|getFirstNamespace (final String path, final PathLocation loc)
specifier|public
name|String
name|getFirstNamespace
parameter_list|(
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|PathLocation
name|loc
parameter_list|)
block|{
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|namespaces
init|=
operator|(
name|loc
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|loc
operator|.
name|getNamespaces
argument_list|()
decl_stmt|;
if|if
condition|(
name|CollectionUtils
operator|.
name|isEmpty
argument_list|(
name|namespaces
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot get namespaces for {}"
argument_list|,
name|loc
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|final
name|int
name|index
init|=
name|ThreadLocalRandom
operator|.
name|current
argument_list|()
operator|.
name|nextInt
argument_list|(
name|namespaces
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|Iterables
operator|.
name|get
argument_list|(
name|namespaces
argument_list|,
name|index
argument_list|)
return|;
block|}
block|}
end_class

end_unit

