begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.router
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
operator|.
name|RouterRpcServer
operator|.
name|merge
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|ActiveNamenodeResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|FederationNamespaceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
operator|.
name|OperationCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Groups
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|RefreshUserMappingsProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|ProxyUsers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|GetUserMappingsProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Module that implements all the RPC calls in  * {@link RefreshUserMappingsProtocol} {@link GetUserMappingsProtocol} in the  * {@link RouterRpcServer}.  */
end_comment

begin_class
DECL|class|RouterUserProtocol
specifier|public
class|class
name|RouterUserProtocol
implements|implements
name|RefreshUserMappingsProtocol
implements|,
name|GetUserMappingsProtocol
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RouterUserProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** RPC server to receive client calls. */
DECL|field|rpcServer
specifier|private
specifier|final
name|RouterRpcServer
name|rpcServer
decl_stmt|;
comment|/** RPC clients to connect to the Namenodes. */
DECL|field|rpcClient
specifier|private
specifier|final
name|RouterRpcClient
name|rpcClient
decl_stmt|;
DECL|field|namenodeResolver
specifier|private
specifier|final
name|ActiveNamenodeResolver
name|namenodeResolver
decl_stmt|;
DECL|method|RouterUserProtocol (RouterRpcServer server)
specifier|public
name|RouterUserProtocol
parameter_list|(
name|RouterRpcServer
name|server
parameter_list|)
block|{
name|this
operator|.
name|rpcServer
operator|=
name|server
expr_stmt|;
name|this
operator|.
name|rpcClient
operator|=
name|this
operator|.
name|rpcServer
operator|.
name|getRPCClient
argument_list|()
expr_stmt|;
name|this
operator|.
name|namenodeResolver
operator|=
name|this
operator|.
name|rpcServer
operator|.
name|getNamenodeResolver
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|refreshUserToGroupsMappings ()
specifier|public
name|void
name|refreshUserToGroupsMappings
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Refresh user groups mapping in Router."
argument_list|)
expr_stmt|;
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|UNCHECKED
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|FederationNamespaceInfo
argument_list|>
name|nss
init|=
name|namenodeResolver
operator|.
name|getNamespaces
argument_list|()
decl_stmt|;
if|if
condition|(
name|nss
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Groups
operator|.
name|getUserToGroupsMappingService
argument_list|()
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
name|RefreshUserMappingsProtocol
operator|.
name|class
argument_list|,
literal|"refreshUserToGroupsMappings"
argument_list|)
decl_stmt|;
name|rpcClient
operator|.
name|invokeConcurrent
argument_list|(
name|nss
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|refreshSuperUserGroupsConfiguration ()
specifier|public
name|void
name|refreshSuperUserGroupsConfiguration
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Refresh superuser groups configuration in Router."
argument_list|)
expr_stmt|;
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|UNCHECKED
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|FederationNamespaceInfo
argument_list|>
name|nss
init|=
name|namenodeResolver
operator|.
name|getNamespaces
argument_list|()
decl_stmt|;
if|if
condition|(
name|nss
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ProxyUsers
operator|.
name|refreshSuperUserGroupsConfiguration
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
name|RefreshUserMappingsProtocol
operator|.
name|class
argument_list|,
literal|"refreshSuperUserGroupsConfiguration"
argument_list|)
decl_stmt|;
name|rpcClient
operator|.
name|invokeConcurrent
argument_list|(
name|nss
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getGroupsForUser (String user)
specifier|public
name|String
index|[]
name|getGroupsForUser
parameter_list|(
name|String
name|user
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Getting groups for user {}"
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|rpcServer
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|UNCHECKED
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|FederationNamespaceInfo
argument_list|>
name|nss
init|=
name|namenodeResolver
operator|.
name|getNamespaces
argument_list|()
decl_stmt|;
if|if
condition|(
name|nss
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|user
argument_list|)
operator|.
name|getGroupNames
argument_list|()
return|;
block|}
else|else
block|{
name|RemoteMethod
name|method
init|=
operator|new
name|RemoteMethod
argument_list|(
name|GetUserMappingsProtocol
operator|.
name|class
argument_list|,
literal|"getGroupsForUser"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
block|}
operator|,
name|user
block|)
empty_stmt|;
name|Map
argument_list|<
name|FederationNamespaceInfo
argument_list|,
name|String
index|[]
argument_list|>
name|results
init|=
name|rpcClient
operator|.
name|invokeConcurrent
argument_list|(
name|nss
argument_list|,
name|method
argument_list|,
name|String
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
return|return
name|merge
argument_list|(
name|results
argument_list|,
name|String
operator|.
name|class
argument_list|)
return|;
block|}
block|}
end_class

unit|}
end_unit

