begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.router
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
operator|.
name|getTrimmedStringCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|DatanodeReportType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|JspHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|ActiveNamenodeResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|FederationNamenodeContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|RemoteLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|web
operator|.
name|resources
operator|.
name|NamenodeWebHdfsMethods
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|spi
operator|.
name|container
operator|.
name|ResourceFilters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|JsonUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|ParamFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|URLConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|WebHdfsFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|AccessTimeParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|AclPermissionParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|BlockSizeParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|BufferSizeParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|ConcatSourcesParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|CreateFlagParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|CreateParentParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|DelegationParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|DestinationParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|DoAsParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|ECPolicyParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|ExcludeDatanodesParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|FsActionParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|GetOpParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|GroupParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|HttpOpParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|LengthParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|ModificationTimeParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|NewLengthParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|NoRedirectParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|OffsetParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|OldSnapshotNameParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|OverwriteParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|OwnerParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|Param
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|PermissionParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|PostOpParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|PutOpParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|RenameOptionSetParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|RenewerParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|ReplicationParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|SnapshotNameParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|StartAfterParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|StoragePolicyParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|TokenArgumentParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|TokenKindParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|TokenServiceParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|UnmaskedPermissionParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|UriFsPathParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|UserParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|XAttrEncodingParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|XAttrNameParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|XAttrSetFlagParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|XAttrValueParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ExternalCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RetriableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_comment
comment|/**  * WebHDFS Router implementation. This is an extension of  * {@link NamenodeWebHdfsMethods}, and tries to reuse as much as possible.  */
end_comment

begin_class
annotation|@
name|Path
argument_list|(
literal|""
argument_list|)
annotation|@
name|ResourceFilters
argument_list|(
name|ParamFilter
operator|.
name|class
argument_list|)
DECL|class|RouterWebHdfsMethods
specifier|public
class|class
name|RouterWebHdfsMethods
extends|extends
name|NamenodeWebHdfsMethods
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RouterWebHdfsMethods
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|REMOTE_ADDRESS
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|String
argument_list|>
name|REMOTE_ADDRESS
init|=
operator|new
name|ThreadLocal
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|request
specifier|private
annotation|@
name|Context
name|HttpServletRequest
name|request
decl_stmt|;
DECL|field|method
specifier|private
name|String
name|method
decl_stmt|;
DECL|field|query
specifier|private
name|String
name|query
decl_stmt|;
DECL|field|reqPath
specifier|private
name|String
name|reqPath
decl_stmt|;
DECL|method|RouterWebHdfsMethods (@ontext HttpServletRequest request)
specifier|public
name|RouterWebHdfsMethods
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|super
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|this
operator|.
name|method
operator|=
name|request
operator|.
name|getMethod
argument_list|()
expr_stmt|;
name|this
operator|.
name|query
operator|=
name|request
operator|.
name|getQueryString
argument_list|()
expr_stmt|;
name|this
operator|.
name|reqPath
operator|=
name|request
operator|.
name|getServletPath
argument_list|()
expr_stmt|;
name|REMOTE_ADDRESS
operator|.
name|set
argument_list|(
name|JspHelper
operator|.
name|getRemoteAddr
argument_list|(
name|request
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|init (final UserGroupInformation ugi, final DelegationParam delegation, final UserParam username, final DoAsParam doAsUser, final UriFsPathParam path, final HttpOpParam<?> op, final Param<?, ?>... parameters)
specifier|protected
name|void
name|init
parameter_list|(
specifier|final
name|UserGroupInformation
name|ugi
parameter_list|,
specifier|final
name|DelegationParam
name|delegation
parameter_list|,
specifier|final
name|UserParam
name|username
parameter_list|,
specifier|final
name|DoAsParam
name|doAsUser
parameter_list|,
specifier|final
name|UriFsPathParam
name|path
parameter_list|,
specifier|final
name|HttpOpParam
argument_list|<
name|?
argument_list|>
name|op
parameter_list|,
specifier|final
name|Param
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
modifier|...
name|parameters
parameter_list|)
block|{
name|super
operator|.
name|init
argument_list|(
name|ugi
argument_list|,
name|delegation
argument_list|,
name|username
argument_list|,
name|doAsUser
argument_list|,
name|path
argument_list|,
name|op
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
name|REMOTE_ADDRESS
operator|.
name|set
argument_list|(
name|JspHelper
operator|.
name|getRemoteAddr
argument_list|(
name|request
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getRpcClientProtocol ()
specifier|protected
name|ClientProtocol
name|getRpcClientProtocol
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Router
name|router
init|=
name|getRouter
argument_list|()
decl_stmt|;
specifier|final
name|RouterRpcServer
name|routerRpcServer
init|=
name|router
operator|.
name|getRpcServer
argument_list|()
decl_stmt|;
if|if
condition|(
name|routerRpcServer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RetriableException
argument_list|(
literal|"Router is in startup mode"
argument_list|)
throw|;
block|}
return|return
name|routerRpcServer
return|;
block|}
DECL|method|reset ()
specifier|private
name|void
name|reset
parameter_list|()
block|{
name|REMOTE_ADDRESS
operator|.
name|set
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getRemoteAddr ()
specifier|protected
name|String
name|getRemoteAddr
parameter_list|()
block|{
return|return
name|REMOTE_ADDRESS
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|queueExternalCall (ExternalCall call)
specifier|protected
name|void
name|queueExternalCall
parameter_list|(
name|ExternalCall
name|call
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|getRouter
argument_list|()
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getServer
argument_list|()
operator|.
name|queueCall
argument_list|(
name|call
argument_list|)
expr_stmt|;
block|}
DECL|method|getRouter ()
specifier|private
name|Router
name|getRouter
parameter_list|()
block|{
return|return
operator|(
name|Router
operator|)
name|getContext
argument_list|()
operator|.
name|getAttribute
argument_list|(
literal|"name.node"
argument_list|)
return|;
block|}
DECL|method|getRPCServer (final Router router)
specifier|private
specifier|static
name|RouterRpcServer
name|getRPCServer
parameter_list|(
specifier|final
name|Router
name|router
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|RouterRpcServer
name|routerRpcServer
init|=
name|router
operator|.
name|getRpcServer
argument_list|()
decl_stmt|;
if|if
condition|(
name|routerRpcServer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RetriableException
argument_list|(
literal|"Router is in startup mode"
argument_list|)
throw|;
block|}
return|return
name|routerRpcServer
return|;
block|}
annotation|@
name|Override
DECL|method|put ( final UserGroupInformation ugi, final DelegationParam delegation, final UserParam username, final DoAsParam doAsUser, final String fullpath, final PutOpParam op, final DestinationParam destination, final OwnerParam owner, final GroupParam group, final PermissionParam permission, final UnmaskedPermissionParam unmaskedPermission, final OverwriteParam overwrite, final BufferSizeParam bufferSize, final ReplicationParam replication, final BlockSizeParam blockSize, final ModificationTimeParam modificationTime, final AccessTimeParam accessTime, final RenameOptionSetParam renameOptions, final CreateParentParam createParent, final TokenArgumentParam delegationTokenArgument, final AclPermissionParam aclPermission, final XAttrNameParam xattrName, final XAttrValueParam xattrValue, final XAttrSetFlagParam xattrSetFlag, final SnapshotNameParam snapshotName, final OldSnapshotNameParam oldSnapshotName, final ExcludeDatanodesParam exclDatanodes, final CreateFlagParam createFlagParam, final NoRedirectParam noredirectParam, final StoragePolicyParam policyName, final ECPolicyParam ecpolicy )
specifier|protected
name|Response
name|put
parameter_list|(
specifier|final
name|UserGroupInformation
name|ugi
parameter_list|,
specifier|final
name|DelegationParam
name|delegation
parameter_list|,
specifier|final
name|UserParam
name|username
parameter_list|,
specifier|final
name|DoAsParam
name|doAsUser
parameter_list|,
specifier|final
name|String
name|fullpath
parameter_list|,
specifier|final
name|PutOpParam
name|op
parameter_list|,
specifier|final
name|DestinationParam
name|destination
parameter_list|,
specifier|final
name|OwnerParam
name|owner
parameter_list|,
specifier|final
name|GroupParam
name|group
parameter_list|,
specifier|final
name|PermissionParam
name|permission
parameter_list|,
specifier|final
name|UnmaskedPermissionParam
name|unmaskedPermission
parameter_list|,
specifier|final
name|OverwriteParam
name|overwrite
parameter_list|,
specifier|final
name|BufferSizeParam
name|bufferSize
parameter_list|,
specifier|final
name|ReplicationParam
name|replication
parameter_list|,
specifier|final
name|BlockSizeParam
name|blockSize
parameter_list|,
specifier|final
name|ModificationTimeParam
name|modificationTime
parameter_list|,
specifier|final
name|AccessTimeParam
name|accessTime
parameter_list|,
specifier|final
name|RenameOptionSetParam
name|renameOptions
parameter_list|,
specifier|final
name|CreateParentParam
name|createParent
parameter_list|,
specifier|final
name|TokenArgumentParam
name|delegationTokenArgument
parameter_list|,
specifier|final
name|AclPermissionParam
name|aclPermission
parameter_list|,
specifier|final
name|XAttrNameParam
name|xattrName
parameter_list|,
specifier|final
name|XAttrValueParam
name|xattrValue
parameter_list|,
specifier|final
name|XAttrSetFlagParam
name|xattrSetFlag
parameter_list|,
specifier|final
name|SnapshotNameParam
name|snapshotName
parameter_list|,
specifier|final
name|OldSnapshotNameParam
name|oldSnapshotName
parameter_list|,
specifier|final
name|ExcludeDatanodesParam
name|exclDatanodes
parameter_list|,
specifier|final
name|CreateFlagParam
name|createFlagParam
parameter_list|,
specifier|final
name|NoRedirectParam
name|noredirectParam
parameter_list|,
specifier|final
name|StoragePolicyParam
name|policyName
parameter_list|,
specifier|final
name|ECPolicyParam
name|ecpolicy
parameter_list|)
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
switch|switch
condition|(
name|op
operator|.
name|getValue
argument_list|()
condition|)
block|{
case|case
name|CREATE
case|:
block|{
specifier|final
name|Router
name|router
init|=
name|getRouter
argument_list|()
decl_stmt|;
specifier|final
name|URI
name|uri
init|=
name|redirectURI
argument_list|(
name|router
argument_list|,
name|fullpath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|noredirectParam
operator|.
name|getValue
argument_list|()
condition|)
block|{
return|return
name|Response
operator|.
name|temporaryRedirect
argument_list|(
name|uri
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_OCTET_STREAM
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
specifier|final
name|String
name|js
init|=
name|JsonUtil
operator|.
name|toJsonString
argument_list|(
literal|"Location"
argument_list|,
name|uri
argument_list|)
decl_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
name|js
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
case|case
name|MKDIRS
case|:
case|case
name|CREATESYMLINK
case|:
case|case
name|RENAME
case|:
case|case
name|SETREPLICATION
case|:
case|case
name|SETOWNER
case|:
case|case
name|SETPERMISSION
case|:
case|case
name|SETTIMES
case|:
case|case
name|RENEWDELEGATIONTOKEN
case|:
case|case
name|CANCELDELEGATIONTOKEN
case|:
case|case
name|MODIFYACLENTRIES
case|:
case|case
name|REMOVEACLENTRIES
case|:
case|case
name|REMOVEDEFAULTACL
case|:
case|case
name|REMOVEACL
case|:
case|case
name|SETACL
case|:
case|case
name|SETXATTR
case|:
case|case
name|REMOVEXATTR
case|:
case|case
name|ALLOWSNAPSHOT
case|:
case|case
name|CREATESNAPSHOT
case|:
case|case
name|RENAMESNAPSHOT
case|:
case|case
name|DISALLOWSNAPSHOT
case|:
case|case
name|SETSTORAGEPOLICY
case|:
case|case
name|ENABLEECPOLICY
case|:
case|case
name|DISABLEECPOLICY
case|:
case|case
name|SATISFYSTORAGEPOLICY
case|:
block|{
comment|// Whitelist operations that can handled by NamenodeWebHdfsMethods
return|return
name|super
operator|.
name|put
argument_list|(
name|ugi
argument_list|,
name|delegation
argument_list|,
name|username
argument_list|,
name|doAsUser
argument_list|,
name|fullpath
argument_list|,
name|op
argument_list|,
name|destination
argument_list|,
name|owner
argument_list|,
name|group
argument_list|,
name|permission
argument_list|,
name|unmaskedPermission
argument_list|,
name|overwrite
argument_list|,
name|bufferSize
argument_list|,
name|replication
argument_list|,
name|blockSize
argument_list|,
name|modificationTime
argument_list|,
name|accessTime
argument_list|,
name|renameOptions
argument_list|,
name|createParent
argument_list|,
name|delegationTokenArgument
argument_list|,
name|aclPermission
argument_list|,
name|xattrName
argument_list|,
name|xattrValue
argument_list|,
name|xattrSetFlag
argument_list|,
name|snapshotName
argument_list|,
name|oldSnapshotName
argument_list|,
name|exclDatanodes
argument_list|,
name|createFlagParam
argument_list|,
name|noredirectParam
argument_list|,
name|policyName
argument_list|,
name|ecpolicy
argument_list|)
return|;
block|}
default|default:
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|op
operator|+
literal|" is not supported"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|post ( final UserGroupInformation ugi, final DelegationParam delegation, final UserParam username, final DoAsParam doAsUser, final String fullpath, final PostOpParam op, final ConcatSourcesParam concatSrcs, final BufferSizeParam bufferSize, final ExcludeDatanodesParam excludeDatanodes, final NewLengthParam newLength, final NoRedirectParam noRedirectParam )
specifier|protected
name|Response
name|post
parameter_list|(
specifier|final
name|UserGroupInformation
name|ugi
parameter_list|,
specifier|final
name|DelegationParam
name|delegation
parameter_list|,
specifier|final
name|UserParam
name|username
parameter_list|,
specifier|final
name|DoAsParam
name|doAsUser
parameter_list|,
specifier|final
name|String
name|fullpath
parameter_list|,
specifier|final
name|PostOpParam
name|op
parameter_list|,
specifier|final
name|ConcatSourcesParam
name|concatSrcs
parameter_list|,
specifier|final
name|BufferSizeParam
name|bufferSize
parameter_list|,
specifier|final
name|ExcludeDatanodesParam
name|excludeDatanodes
parameter_list|,
specifier|final
name|NewLengthParam
name|newLength
parameter_list|,
specifier|final
name|NoRedirectParam
name|noRedirectParam
parameter_list|)
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
switch|switch
condition|(
name|op
operator|.
name|getValue
argument_list|()
condition|)
block|{
case|case
name|APPEND
case|:
block|{
specifier|final
name|Router
name|router
init|=
name|getRouter
argument_list|()
decl_stmt|;
specifier|final
name|URI
name|uri
init|=
name|redirectURI
argument_list|(
name|router
argument_list|,
name|ugi
argument_list|,
name|delegation
argument_list|,
name|username
argument_list|,
name|doAsUser
argument_list|,
name|fullpath
argument_list|,
name|op
operator|.
name|getValue
argument_list|()
argument_list|,
operator|-
literal|1L
argument_list|,
name|excludeDatanodes
operator|.
name|getValue
argument_list|()
argument_list|,
name|bufferSize
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|noRedirectParam
operator|.
name|getValue
argument_list|()
condition|)
block|{
return|return
name|Response
operator|.
name|temporaryRedirect
argument_list|(
name|uri
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_OCTET_STREAM
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
specifier|final
name|String
name|js
init|=
name|JsonUtil
operator|.
name|toJsonString
argument_list|(
literal|"Location"
argument_list|,
name|uri
argument_list|)
decl_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
name|js
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
case|case
name|CONCAT
case|:
case|case
name|TRUNCATE
case|:
case|case
name|UNSETSTORAGEPOLICY
case|:
block|{
return|return
name|super
operator|.
name|post
argument_list|(
name|ugi
argument_list|,
name|delegation
argument_list|,
name|username
argument_list|,
name|doAsUser
argument_list|,
name|fullpath
argument_list|,
name|op
argument_list|,
name|concatSrcs
argument_list|,
name|bufferSize
argument_list|,
name|excludeDatanodes
argument_list|,
name|newLength
argument_list|,
name|noRedirectParam
argument_list|)
return|;
block|}
default|default:
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|op
operator|+
literal|" is not supported"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|get ( final UserGroupInformation ugi, final DelegationParam delegation, final UserParam username, final DoAsParam doAsUser, final String fullpath, final GetOpParam op, final OffsetParam offset, final LengthParam length, final RenewerParam renewer, final BufferSizeParam bufferSize, final List<XAttrNameParam> xattrNames, final XAttrEncodingParam xattrEncoding, final ExcludeDatanodesParam excludeDatanodes, final FsActionParam fsAction, final SnapshotNameParam snapshotName, final OldSnapshotNameParam oldSnapshotName, final TokenKindParam tokenKind, final TokenServiceParam tokenService, final NoRedirectParam noredirectParam, final StartAfterParam startAfter )
specifier|protected
name|Response
name|get
parameter_list|(
specifier|final
name|UserGroupInformation
name|ugi
parameter_list|,
specifier|final
name|DelegationParam
name|delegation
parameter_list|,
specifier|final
name|UserParam
name|username
parameter_list|,
specifier|final
name|DoAsParam
name|doAsUser
parameter_list|,
specifier|final
name|String
name|fullpath
parameter_list|,
specifier|final
name|GetOpParam
name|op
parameter_list|,
specifier|final
name|OffsetParam
name|offset
parameter_list|,
specifier|final
name|LengthParam
name|length
parameter_list|,
specifier|final
name|RenewerParam
name|renewer
parameter_list|,
specifier|final
name|BufferSizeParam
name|bufferSize
parameter_list|,
specifier|final
name|List
argument_list|<
name|XAttrNameParam
argument_list|>
name|xattrNames
parameter_list|,
specifier|final
name|XAttrEncodingParam
name|xattrEncoding
parameter_list|,
specifier|final
name|ExcludeDatanodesParam
name|excludeDatanodes
parameter_list|,
specifier|final
name|FsActionParam
name|fsAction
parameter_list|,
specifier|final
name|SnapshotNameParam
name|snapshotName
parameter_list|,
specifier|final
name|OldSnapshotNameParam
name|oldSnapshotName
parameter_list|,
specifier|final
name|TokenKindParam
name|tokenKind
parameter_list|,
specifier|final
name|TokenServiceParam
name|tokenService
parameter_list|,
specifier|final
name|NoRedirectParam
name|noredirectParam
parameter_list|,
specifier|final
name|StartAfterParam
name|startAfter
parameter_list|)
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
try|try
block|{
specifier|final
name|Router
name|router
init|=
name|getRouter
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|op
operator|.
name|getValue
argument_list|()
condition|)
block|{
case|case
name|OPEN
case|:
block|{
specifier|final
name|URI
name|uri
init|=
name|redirectURI
argument_list|(
name|router
argument_list|,
name|ugi
argument_list|,
name|delegation
argument_list|,
name|username
argument_list|,
name|doAsUser
argument_list|,
name|fullpath
argument_list|,
name|op
operator|.
name|getValue
argument_list|()
argument_list|,
name|offset
operator|.
name|getValue
argument_list|()
argument_list|,
name|excludeDatanodes
operator|.
name|getValue
argument_list|()
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
name|bufferSize
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|noredirectParam
operator|.
name|getValue
argument_list|()
condition|)
block|{
return|return
name|Response
operator|.
name|temporaryRedirect
argument_list|(
name|uri
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_OCTET_STREAM
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
specifier|final
name|String
name|js
init|=
name|JsonUtil
operator|.
name|toJsonString
argument_list|(
literal|"Location"
argument_list|,
name|uri
argument_list|)
decl_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
name|js
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
case|case
name|GETFILECHECKSUM
case|:
block|{
specifier|final
name|URI
name|uri
init|=
name|redirectURI
argument_list|(
name|router
argument_list|,
name|ugi
argument_list|,
name|delegation
argument_list|,
name|username
argument_list|,
name|doAsUser
argument_list|,
name|fullpath
argument_list|,
name|op
operator|.
name|getValue
argument_list|()
argument_list|,
operator|-
literal|1L
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|noredirectParam
operator|.
name|getValue
argument_list|()
condition|)
block|{
return|return
name|Response
operator|.
name|temporaryRedirect
argument_list|(
name|uri
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_OCTET_STREAM
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
specifier|final
name|String
name|js
init|=
name|JsonUtil
operator|.
name|toJsonString
argument_list|(
literal|"Location"
argument_list|,
name|uri
argument_list|)
decl_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
name|js
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
case|case
name|GET_BLOCK_LOCATIONS
case|:
case|case
name|GETFILESTATUS
case|:
case|case
name|LISTSTATUS
case|:
case|case
name|GETCONTENTSUMMARY
case|:
case|case
name|GETHOMEDIRECTORY
case|:
case|case
name|GETACLSTATUS
case|:
case|case
name|GETXATTRS
case|:
case|case
name|LISTXATTRS
case|:
case|case
name|CHECKACCESS
case|:
block|{
return|return
name|super
operator|.
name|get
argument_list|(
name|ugi
argument_list|,
name|delegation
argument_list|,
name|username
argument_list|,
name|doAsUser
argument_list|,
name|fullpath
argument_list|,
name|op
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
name|renewer
argument_list|,
name|bufferSize
argument_list|,
name|xattrNames
argument_list|,
name|xattrEncoding
argument_list|,
name|excludeDatanodes
argument_list|,
name|fsAction
argument_list|,
name|snapshotName
argument_list|,
name|oldSnapshotName
argument_list|,
name|tokenKind
argument_list|,
name|tokenService
argument_list|,
name|noredirectParam
argument_list|,
name|startAfter
argument_list|)
return|;
block|}
default|default:
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|op
operator|+
literal|" is not supported"
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Get the redirect URI from the Namenode responsible for a path.    * @param router Router to check.    * @param path Path to get location for.    * @return URI returned by the Namenode.    * @throws IOException If it cannot get the redirect URI.    */
DECL|method|redirectURI (final Router router, final String path)
specifier|private
name|URI
name|redirectURI
parameter_list|(
specifier|final
name|Router
name|router
parameter_list|,
specifier|final
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Forward the request to the proper Namenode
specifier|final
name|HttpURLConnection
name|conn
init|=
name|forwardRequest
argument_list|(
name|router
argument_list|,
name|path
argument_list|)
decl_stmt|;
try|try
block|{
name|conn
operator|.
name|setInstanceFollowRedirects
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setDoOutput
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|conn
operator|.
name|connect
argument_list|()
expr_stmt|;
comment|// Read the reply from the Namenode
name|int
name|responseCode
init|=
name|conn
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|responseCode
operator|!=
name|HttpServletResponse
operator|.
name|SC_TEMPORARY_REDIRECT
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"We expected a redirection from the Namenode, not {}"
argument_list|,
name|responseCode
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// Extract the redirect location and return it
name|String
name|redirectLocation
init|=
name|conn
operator|.
name|getHeaderField
argument_list|(
literal|"Location"
argument_list|)
decl_stmt|;
try|try
block|{
comment|// We modify the namenode location and the path
name|redirectLocation
operator|=
name|redirectLocation
operator|.
name|replaceAll
argument_list|(
literal|"(?<=[?&;])namenoderpcaddress=.*?(?=[&;])"
argument_list|,
literal|"namenoderpcaddress="
operator|+
name|router
operator|.
name|getRouterId
argument_list|()
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"(?<=[/])webhdfs/v1/.*?(?=[?])"
argument_list|,
literal|"webhdfs/v1"
operator|+
name|path
argument_list|)
expr_stmt|;
return|return
operator|new
name|URI
argument_list|(
name|redirectLocation
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot parse redirect location {}"
argument_list|,
name|redirectLocation
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|conn
operator|!=
literal|null
condition|)
block|{
name|conn
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Forwards a request to a subcluster.    * @param router Router to check.    * @param path Path in HDFS.    * @return Reply from the subcluster.    * @throws IOException    */
DECL|method|forwardRequest ( final Router router, final String path)
specifier|private
name|HttpURLConnection
name|forwardRequest
parameter_list|(
specifier|final
name|Router
name|router
parameter_list|,
specifier|final
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|(
name|Configuration
operator|)
name|getContext
argument_list|()
operator|.
name|getAttribute
argument_list|(
name|JspHelper
operator|.
name|CURRENT_CONF
argument_list|)
decl_stmt|;
name|URLConnectionFactory
name|connectionFactory
init|=
name|URLConnectionFactory
operator|.
name|newDefaultURLConnectionFactory
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Find the namespace responsible for a path
specifier|final
name|RouterRpcServer
name|rpcServer
init|=
name|getRPCServer
argument_list|(
name|router
argument_list|)
decl_stmt|;
name|RemoteLocation
name|createLoc
init|=
name|rpcServer
operator|.
name|getCreateLocation
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|String
name|nsId
init|=
name|createLoc
operator|.
name|getNameserviceId
argument_list|()
decl_stmt|;
name|String
name|dest
init|=
name|createLoc
operator|.
name|getDest
argument_list|()
decl_stmt|;
name|ActiveNamenodeResolver
name|nnResolver
init|=
name|router
operator|.
name|getNamenodeResolver
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|FederationNamenodeContext
argument_list|>
name|namenodes
init|=
name|nnResolver
operator|.
name|getNamenodesForNameserviceId
argument_list|(
name|nsId
argument_list|)
decl_stmt|;
comment|// Go over the namenodes responsible for that namespace
for|for
control|(
name|FederationNamenodeContext
name|namenode
range|:
name|namenodes
control|)
block|{
try|try
block|{
comment|// Generate the request for the namenode
name|String
name|nnWebAddress
init|=
name|namenode
operator|.
name|getWebAddress
argument_list|()
decl_stmt|;
name|String
index|[]
name|nnWebAddressSplit
init|=
name|nnWebAddress
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|String
name|host
init|=
name|nnWebAddressSplit
index|[
literal|0
index|]
decl_stmt|;
name|int
name|port
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|nnWebAddressSplit
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
comment|// Avoid double-encoding here
name|query
operator|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|query
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
name|getScheme
argument_list|()
argument_list|,
literal|null
argument_list|,
name|host
argument_list|,
name|port
argument_list|,
name|reqPath
operator|+
name|dest
argument_list|,
name|query
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|URL
name|url
init|=
name|uri
operator|.
name|toURL
argument_list|()
decl_stmt|;
comment|// Send a request to the proper Namenode
specifier|final
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|connectionFactory
operator|.
name|openConnection
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|conn
operator|.
name|setRequestMethod
argument_list|(
name|method
argument_list|)
expr_stmt|;
name|connectionFactory
operator|.
name|destroy
argument_list|()
expr_stmt|;
return|return
name|conn
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot redirect request to {}"
argument_list|,
name|namenode
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|connectionFactory
operator|.
name|destroy
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|/**    * Get a URI to redirect an operation to.    * @param router Router to check.    * @param ugi User group information.    * @param delegation Delegation token.    * @param username User name.    * @param doAsUser Do as user.    * @param path Path to check.    * @param op Operation to perform.    * @param openOffset Offset for opening a file.    * @param excludeDatanodes Blocks to excluded.    * @param parameters Other parameters.    * @return Redirection URI.    * @throws URISyntaxException If it cannot parse the URI.    * @throws IOException If it cannot create the URI.    */
DECL|method|redirectURI (final Router router, final UserGroupInformation ugi, final DelegationParam delegation, final UserParam username, final DoAsParam doAsUser, final String path, final HttpOpParam.Op op, final long openOffset, final String excludeDatanodes, final Param<?, ?>... parameters)
specifier|private
name|URI
name|redirectURI
parameter_list|(
specifier|final
name|Router
name|router
parameter_list|,
specifier|final
name|UserGroupInformation
name|ugi
parameter_list|,
specifier|final
name|DelegationParam
name|delegation
parameter_list|,
specifier|final
name|UserParam
name|username
parameter_list|,
specifier|final
name|DoAsParam
name|doAsUser
parameter_list|,
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
parameter_list|,
specifier|final
name|long
name|openOffset
parameter_list|,
specifier|final
name|String
name|excludeDatanodes
parameter_list|,
specifier|final
name|Param
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
modifier|...
name|parameters
parameter_list|)
throws|throws
name|URISyntaxException
throws|,
name|IOException
block|{
specifier|final
name|DatanodeInfo
name|dn
init|=
name|chooseDatanode
argument_list|(
name|router
argument_list|,
name|path
argument_list|,
name|op
argument_list|,
name|openOffset
argument_list|,
name|excludeDatanodes
argument_list|)
decl_stmt|;
if|if
condition|(
name|dn
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to find datanode, suggest to check cluster"
operator|+
literal|" health. excludeDatanodes="
operator|+
name|excludeDatanodes
argument_list|)
throw|;
block|}
specifier|final
name|String
name|delegationQuery
decl_stmt|;
if|if
condition|(
operator|!
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
comment|// security disabled
name|delegationQuery
operator|=
name|Param
operator|.
name|toSortedString
argument_list|(
literal|"&"
argument_list|,
name|doAsUser
argument_list|,
name|username
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|delegation
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// client has provided a token
name|delegationQuery
operator|=
literal|"&"
operator|+
name|delegation
expr_stmt|;
block|}
else|else
block|{
comment|// generate a token
specifier|final
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|t
init|=
name|generateDelegationToken
argument_list|(
name|router
argument_list|,
name|ugi
argument_list|,
name|request
operator|.
name|getUserPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|delegationQuery
operator|=
literal|"&delegation="
operator|+
name|t
operator|.
name|encodeToUrlString
argument_list|()
expr_stmt|;
block|}
specifier|final
name|String
name|redirectQuery
init|=
name|op
operator|.
name|toQueryString
argument_list|()
operator|+
name|delegationQuery
operator|+
literal|"&namenoderpcaddress="
operator|+
name|router
operator|.
name|getRouterId
argument_list|()
operator|+
name|Param
operator|.
name|toSortedString
argument_list|(
literal|"&"
argument_list|,
name|parameters
argument_list|)
decl_stmt|;
specifier|final
name|String
name|uripath
init|=
name|WebHdfsFileSystem
operator|.
name|PATH_PREFIX
operator|+
name|path
decl_stmt|;
name|int
name|port
init|=
literal|"http"
operator|.
name|equals
argument_list|(
name|getScheme
argument_list|()
argument_list|)
condition|?
name|dn
operator|.
name|getInfoPort
argument_list|()
else|:
name|dn
operator|.
name|getInfoSecurePort
argument_list|()
decl_stmt|;
specifier|final
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
name|getScheme
argument_list|()
argument_list|,
literal|null
argument_list|,
name|dn
operator|.
name|getHostName
argument_list|()
argument_list|,
name|port
argument_list|,
name|uripath
argument_list|,
name|redirectQuery
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"redirectURI={}"
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
return|return
name|uri
return|;
block|}
DECL|method|chooseDatanode (final Router router, final String path, final HttpOpParam.Op op, final long openOffset, final String excludeDatanodes)
specifier|private
name|DatanodeInfo
name|chooseDatanode
parameter_list|(
specifier|final
name|Router
name|router
parameter_list|,
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
parameter_list|,
specifier|final
name|long
name|openOffset
parameter_list|,
specifier|final
name|String
name|excludeDatanodes
parameter_list|)
throws|throws
name|IOException
block|{
comment|// We need to get the DNs as a privileged user
specifier|final
name|RouterRpcServer
name|rpcServer
init|=
name|getRPCServer
argument_list|(
name|router
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|loginUser
init|=
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
decl_stmt|;
name|DatanodeInfo
index|[]
name|dns
init|=
name|loginUser
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|DatanodeInfo
index|[]
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DatanodeInfo
index|[]
name|run
parameter_list|()
block|{
try|try
block|{
return|return
name|rpcServer
operator|.
name|getDatanodeReport
argument_list|(
name|DatanodeReportType
operator|.
name|LIVE
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot get the datanodes from the RPC server"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|HashSet
argument_list|<
name|Node
argument_list|>
name|excludes
init|=
operator|new
name|HashSet
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|excludeDatanodes
operator|!=
literal|null
condition|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|collection
init|=
name|getTrimmedStringCollection
argument_list|(
name|excludeDatanodes
argument_list|)
decl_stmt|;
for|for
control|(
name|DatanodeInfo
name|dn
range|:
name|dns
control|)
block|{
if|if
condition|(
name|collection
operator|.
name|contains
argument_list|(
name|dn
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|excludes
operator|.
name|add
argument_list|(
name|dn
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|op
operator|==
name|GetOpParam
operator|.
name|Op
operator|.
name|OPEN
operator|||
name|op
operator|==
name|PostOpParam
operator|.
name|Op
operator|.
name|APPEND
operator|||
name|op
operator|==
name|GetOpParam
operator|.
name|Op
operator|.
name|GETFILECHECKSUM
condition|)
block|{
comment|// Choose a datanode containing a replica
specifier|final
name|ClientProtocol
name|cp
init|=
name|getRpcClientProtocol
argument_list|()
decl_stmt|;
specifier|final
name|HdfsFileStatus
name|status
init|=
name|cp
operator|.
name|getFileInfo
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"File "
operator|+
name|path
operator|+
literal|" not found."
argument_list|)
throw|;
block|}
specifier|final
name|long
name|len
init|=
name|status
operator|.
name|getLen
argument_list|()
decl_stmt|;
if|if
condition|(
name|op
operator|==
name|GetOpParam
operator|.
name|Op
operator|.
name|OPEN
condition|)
block|{
if|if
condition|(
name|openOffset
operator|<
literal|0L
operator|||
operator|(
name|openOffset
operator|>=
name|len
operator|&&
name|len
operator|>
literal|0
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Offset="
operator|+
name|openOffset
operator|+
literal|" out of the range [0, "
operator|+
name|len
operator|+
literal|"); "
operator|+
name|op
operator|+
literal|", path="
operator|+
name|path
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|len
operator|>
literal|0
condition|)
block|{
specifier|final
name|long
name|offset
init|=
name|op
operator|==
name|GetOpParam
operator|.
name|Op
operator|.
name|OPEN
condition|?
name|openOffset
else|:
name|len
operator|-
literal|1
decl_stmt|;
specifier|final
name|LocatedBlocks
name|locations
init|=
name|cp
operator|.
name|getBlockLocations
argument_list|(
name|path
argument_list|,
name|offset
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|int
name|count
init|=
name|locations
operator|.
name|locatedBlockCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
operator|>
literal|0
condition|)
block|{
name|LocatedBlock
name|location0
init|=
name|locations
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
return|return
name|bestNode
argument_list|(
name|location0
operator|.
name|getLocations
argument_list|()
argument_list|,
name|excludes
argument_list|)
return|;
block|}
block|}
block|}
return|return
name|getRandomDatanode
argument_list|(
name|dns
argument_list|,
name|excludes
argument_list|)
return|;
block|}
comment|/**    * Get a random Datanode from a subcluster.    * @param dns Nodes to be chosen from.    * @param excludes Nodes to be excluded from.    * @return Random datanode from a particular subluster.    */
DECL|method|getRandomDatanode ( final DatanodeInfo[] dns, final HashSet<Node> excludes)
specifier|private
specifier|static
name|DatanodeInfo
name|getRandomDatanode
parameter_list|(
specifier|final
name|DatanodeInfo
index|[]
name|dns
parameter_list|,
specifier|final
name|HashSet
argument_list|<
name|Node
argument_list|>
name|excludes
parameter_list|)
block|{
name|DatanodeInfo
name|dn
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|dns
operator|==
literal|null
condition|)
block|{
return|return
name|dn
return|;
block|}
name|int
name|numDNs
init|=
name|dns
operator|.
name|length
decl_stmt|;
name|int
name|availableNodes
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|excludes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|availableNodes
operator|=
name|numDNs
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|DatanodeInfo
name|di
range|:
name|dns
control|)
block|{
if|if
condition|(
operator|!
name|excludes
operator|.
name|contains
argument_list|(
name|di
argument_list|)
condition|)
block|{
name|availableNodes
operator|++
expr_stmt|;
block|}
block|}
block|}
comment|// Return a random one from the list
if|if
condition|(
name|availableNodes
operator|>
literal|0
condition|)
block|{
while|while
condition|(
name|dn
operator|==
literal|null
operator|||
name|excludes
operator|.
name|contains
argument_list|(
name|dn
argument_list|)
condition|)
block|{
name|Random
name|rnd
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|int
name|idx
init|=
name|rnd
operator|.
name|nextInt
argument_list|(
name|numDNs
argument_list|)
decl_stmt|;
name|dn
operator|=
name|dns
index|[
name|idx
index|]
expr_stmt|;
block|}
block|}
return|return
name|dn
return|;
block|}
comment|/**    * Generate the delegation tokens for this request.    * @param router Router.    * @param ugi User group information.    * @param renewer Who is asking for the renewal.    * @return The delegation tokens.    * @throws IOException If it cannot create the tokens.    */
DECL|method|generateDelegationToken ( final Router router, final UserGroupInformation ugi, final String renewer)
specifier|private
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|generateDelegationToken
parameter_list|(
specifier|final
name|Router
name|router
parameter_list|,
specifier|final
name|UserGroupInformation
name|ugi
parameter_list|,
specifier|final
name|String
name|renewer
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"TODO Generate token for ugi="
operator|+
name|ugi
operator|+
literal|" request="
operator|+
name|request
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

