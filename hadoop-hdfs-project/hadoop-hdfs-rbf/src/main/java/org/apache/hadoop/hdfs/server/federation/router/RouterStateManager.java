begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.router
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|EnterSafeModeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|EnterSafeModeResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|GetSafeModeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|GetSafeModeResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|LeaveSafeModeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|LeaveSafeModeResponse
import|;
end_import

begin_comment
comment|/**  * Interface of managing the Router state.  */
end_comment

begin_interface
DECL|interface|RouterStateManager
specifier|public
interface|interface
name|RouterStateManager
block|{
comment|/**    * Enter safe mode and change Router state to RouterServiceState#SAFEMODE.    * @param request Request to enter safe mode.    * @return Response to enter safe mode.    * @throws IOException If it cannot perform the operation.    */
DECL|method|enterSafeMode (EnterSafeModeRequest request)
name|EnterSafeModeResponse
name|enterSafeMode
parameter_list|(
name|EnterSafeModeRequest
name|request
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Leave safe mode and change Router state to RouterServiceState#RUNNING.    * @param request Request to leave safe mode.    * @return Response to leave safe mode.    * @throws IOException If it cannot perform the operation.    */
DECL|method|leaveSafeMode (LeaveSafeModeRequest request)
name|LeaveSafeModeResponse
name|leaveSafeMode
parameter_list|(
name|LeaveSafeModeRequest
name|request
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Verify if current Router state is safe mode.    * @param request Request to get the safe mode state.    * @return Response to get the safe mode state.    * @throws IOException If it cannot perform the operation.    */
DECL|method|getSafeMode (GetSafeModeRequest request)
name|GetSafeModeResponse
name|getSafeMode
parameter_list|(
name|GetSafeModeRequest
name|request
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
end_interface

end_unit

