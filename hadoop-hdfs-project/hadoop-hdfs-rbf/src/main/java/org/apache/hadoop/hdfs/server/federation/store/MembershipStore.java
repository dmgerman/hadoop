begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.store
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|driver
operator|.
name|StateStoreDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|GetNamenodeRegistrationsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|GetNamenodeRegistrationsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|GetNamespaceInfoRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|GetNamespaceInfoResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|NamenodeHeartbeatRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|NamenodeHeartbeatResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|UpdateNamenodeRegistrationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|UpdateNamenodeRegistrationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|MembershipState
import|;
end_import

begin_comment
comment|/**  * Management API for NameNode registrations stored in  * {@link org.apache.hadoop.hdfs.server.federation.store.records.MembershipState  * MembershipState} records. The {@link org.apache.hadoop.hdfs.server.  * federation.router.RouterHeartbeatService RouterHeartbeatService} periodically  * polls each NN to update the NameNode metadata(addresses, operational) and HA  * state(active, standby). Each NameNode may be polled by multiple  * {@link org.apache.hadoop.hdfs.server.federation.router.Router Router}  * instances.  *<p>  * Once fetched from the  * {@link org.apache.hadoop.hdfs.server.federation.store.driver.StateStoreDriver  * StateStoreDriver}, NameNode registrations are cached until the next query.  * The fetched registration data is aggregated using a quorum to determine the  * best/most accurate state for each NameNode. The cache is periodically updated  * by the @{link StateStoreCacheUpdateService}.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|MembershipStore
specifier|public
specifier|abstract
class|class
name|MembershipStore
extends|extends
name|CachedRecordStore
argument_list|<
name|MembershipState
argument_list|>
block|{
DECL|method|MembershipStore (StateStoreDriver driver)
specifier|protected
name|MembershipStore
parameter_list|(
name|StateStoreDriver
name|driver
parameter_list|)
block|{
name|super
argument_list|(
name|MembershipState
operator|.
name|class
argument_list|,
name|driver
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Inserts or updates a namenode membership entry into the table.    *    * @param request Fully populated NamenodeHeartbeatRequest request.    * @return True if successful, false otherwise.    * @throws StateStoreUnavailableException Throws exception if the data store    *           is not initialized.    * @throws IOException if the data store could not be queried or the query is    *           invalid.    */
DECL|method|namenodeHeartbeat ( NamenodeHeartbeatRequest request)
specifier|public
specifier|abstract
name|NamenodeHeartbeatResponse
name|namenodeHeartbeat
parameter_list|(
name|NamenodeHeartbeatRequest
name|request
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Queries for a single cached registration entry matching the given    * parameters. Possible keys are the names of data structure elements Possible    * values are matching SQL "LIKE" targets.    *    * @param request Fully populated GetNamenodeRegistrationsRequest request.    * @return Single matching FederationMembershipStateEntry or null if not found    *         or more than one entry matches.    * @throws StateStoreUnavailableException Throws exception if the data store    *           is not initialized.    * @throws IOException if the data store could not be queried or the query is    *           invalid.    */
DECL|method|getNamenodeRegistrations ( GetNamenodeRegistrationsRequest request)
specifier|public
specifier|abstract
name|GetNamenodeRegistrationsResponse
name|getNamenodeRegistrations
parameter_list|(
name|GetNamenodeRegistrationsRequest
name|request
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Get the expired registrations from the registration cache.    *    * @return Expired registrations or zero-length list if none are found.    * @throws StateStoreUnavailableException Throws exception if the data store    *           is not initialized.    * @throws IOException if the data store could not be queried or the query is    *           invalid.    */
specifier|public
specifier|abstract
name|GetNamenodeRegistrationsResponse
DECL|method|getExpiredNamenodeRegistrations (GetNamenodeRegistrationsRequest request)
name|getExpiredNamenodeRegistrations
parameter_list|(
name|GetNamenodeRegistrationsRequest
name|request
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Retrieves a list of registered nameservices and their associated info.    *    * @param request    * @return Collection of information for each registered nameservice.    * @throws IOException if the data store could not be queried or the query is    *           invalid.    */
DECL|method|getNamespaceInfo ( GetNamespaceInfoRequest request)
specifier|public
specifier|abstract
name|GetNamespaceInfoResponse
name|getNamespaceInfo
parameter_list|(
name|GetNamespaceInfoRequest
name|request
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Overrides a cached namenode state with an updated state.    *    * @param request Fully populated OverrideNamenodeRegistrationRequest request.    * @return OverrideNamenodeRegistrationResponse    * @throws StateStoreUnavailableException if the data store is not    *           initialized.    * @throws IOException if the data store could not be queried or the query is    *           invalid.    */
DECL|method|updateNamenodeRegistration ( UpdateNamenodeRegistrationRequest request)
specifier|public
specifier|abstract
name|UpdateNamenodeRegistrationResponse
name|updateNamenodeRegistration
parameter_list|(
name|UpdateNamenodeRegistrationRequest
name|request
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
end_class

end_unit

