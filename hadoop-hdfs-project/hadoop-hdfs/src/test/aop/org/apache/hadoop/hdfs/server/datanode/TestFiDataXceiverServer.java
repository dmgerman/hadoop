begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ServerSocket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_comment
comment|/**  * This is a test for DataXceiverServer when DataXceiver thread spawning is  * failed due to OutOfMemoryError. Expected behavior is that DataXceiverServer  * should not be exited. It should retry again after 30 seconds  */
end_comment

begin_class
DECL|class|TestFiDataXceiverServer
specifier|public
class|class
name|TestFiDataXceiverServer
block|{
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testOutOfMemoryErrorInDataXceiverServerRun ()
specifier|public
name|void
name|testOutOfMemoryErrorInDataXceiverServerRun
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ServerSocket
name|sock
init|=
operator|new
name|ServerSocket
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Socket
name|accept
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|Socket
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|InetAddress
name|getInetAddress
parameter_list|()
block|{
return|return
name|super
operator|.
name|getLocalAddress
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|SocketAddress
name|getRemoteSocketAddress
parameter_list|()
block|{
return|return
operator|new
name|InetSocketAddress
argument_list|(
literal|8080
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|SocketAddress
name|getLocalSocketAddress
parameter_list|()
block|{
return|return
operator|new
name|InetSocketAddress
argument_list|(
literal|0
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|InputStream
name|getInputStream
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
block|}
return|;
block|}
block|}
decl_stmt|;
name|Thread
name|thread
init|=
literal|null
decl_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"fi.enabledOOM"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|DataNode
name|dn
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|DataNode
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
name|conf
argument_list|)
operator|.
name|when
argument_list|(
name|dn
argument_list|)
operator|.
name|getConf
argument_list|()
expr_stmt|;
name|dn
operator|.
name|shouldRun
operator|=
literal|true
expr_stmt|;
name|DataXceiverServer
name|server
init|=
operator|new
name|DataXceiverServer
argument_list|(
name|sock
argument_list|,
name|conf
argument_list|,
name|dn
argument_list|)
decl_stmt|;
name|thread
operator|=
operator|new
name|Thread
argument_list|(
name|server
argument_list|)
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Not running the thread"
argument_list|,
name|thread
operator|.
name|isAlive
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"fi.enabledOOM"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|dn
operator|.
name|shouldRun
operator|=
literal|false
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|thread
condition|)
name|thread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|sock
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

