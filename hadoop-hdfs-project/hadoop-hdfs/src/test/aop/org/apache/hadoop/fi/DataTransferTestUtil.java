begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fi
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fi
operator|.
name|FiTestUtil
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fi
operator|.
name|FiTestUtil
operator|.
name|ActionContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fi
operator|.
name|FiTestUtil
operator|.
name|ConstraintSatisfactionAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fi
operator|.
name|FiTestUtil
operator|.
name|CountdownConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fi
operator|.
name|FiTestUtil
operator|.
name|MarkerConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DiskChecker
operator|.
name|DiskOutOfSpaceException
import|;
end_import

begin_comment
comment|/**  * Utilities for DataTransferProtocol related tests,  * e.g. TestFiDataTransferProtocol.  */
end_comment

begin_class
DECL|class|DataTransferTestUtil
specifier|public
class|class
name|DataTransferTestUtil
block|{
DECL|field|thepipelinetest
specifier|protected
specifier|static
name|PipelineTest
name|thepipelinetest
decl_stmt|;
comment|/** initialize pipeline test */
DECL|method|initTest ()
specifier|public
specifier|static
name|PipelineTest
name|initTest
parameter_list|()
block|{
return|return
name|thepipelinetest
operator|=
operator|new
name|DataTransferTest
argument_list|()
return|;
block|}
comment|/** get the pipeline test object */
DECL|method|getPipelineTest ()
specifier|public
specifier|static
name|PipelineTest
name|getPipelineTest
parameter_list|()
block|{
return|return
name|thepipelinetest
return|;
block|}
comment|/** get the pipeline test object cast to DataTransferTest */
DECL|method|getDataTransferTest ()
specifier|public
specifier|static
name|DataTransferTest
name|getDataTransferTest
parameter_list|()
block|{
return|return
operator|(
name|DataTransferTest
operator|)
name|getPipelineTest
argument_list|()
return|;
block|}
comment|/**    * The DataTransferTest class includes a pipeline    * and some actions.    */
DECL|class|DataTransferTest
specifier|public
specifier|static
class|class
name|DataTransferTest
implements|implements
name|PipelineTest
block|{
DECL|field|pipelines
specifier|private
specifier|final
name|List
argument_list|<
name|Pipeline
argument_list|>
name|pipelines
init|=
operator|new
name|ArrayList
argument_list|<
name|Pipeline
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|isSuccess
specifier|private
specifier|volatile
name|boolean
name|isSuccess
init|=
literal|false
decl_stmt|;
comment|/** Simulate action for the receiverOpWriteBlock pointcut */
DECL|field|fiReceiverOpWriteBlock
specifier|public
specifier|final
name|ActionContainer
argument_list|<
name|DatanodeID
argument_list|,
name|IOException
argument_list|>
name|fiReceiverOpWriteBlock
init|=
operator|new
name|ActionContainer
argument_list|<
name|DatanodeID
argument_list|,
name|IOException
argument_list|>
argument_list|()
decl_stmt|;
comment|/** Simulate action for the callReceivePacket pointcut */
DECL|field|fiCallReceivePacket
specifier|public
specifier|final
name|ActionContainer
argument_list|<
name|DatanodeID
argument_list|,
name|IOException
argument_list|>
name|fiCallReceivePacket
init|=
operator|new
name|ActionContainer
argument_list|<
name|DatanodeID
argument_list|,
name|IOException
argument_list|>
argument_list|()
decl_stmt|;
comment|/** Simulate action for the callWritePacketToDisk pointcut */
DECL|field|fiCallWritePacketToDisk
specifier|public
specifier|final
name|ActionContainer
argument_list|<
name|DatanodeID
argument_list|,
name|IOException
argument_list|>
name|fiCallWritePacketToDisk
init|=
operator|new
name|ActionContainer
argument_list|<
name|DatanodeID
argument_list|,
name|IOException
argument_list|>
argument_list|()
decl_stmt|;
comment|/** Simulate action for the statusRead pointcut */
DECL|field|fiStatusRead
specifier|public
specifier|final
name|ActionContainer
argument_list|<
name|DatanodeID
argument_list|,
name|IOException
argument_list|>
name|fiStatusRead
init|=
operator|new
name|ActionContainer
argument_list|<
name|DatanodeID
argument_list|,
name|IOException
argument_list|>
argument_list|()
decl_stmt|;
comment|/** Simulate action for the afterDownstreamStatusRead pointcut */
DECL|field|fiAfterDownstreamStatusRead
specifier|public
specifier|final
name|ActionContainer
argument_list|<
name|DatanodeID
argument_list|,
name|IOException
argument_list|>
name|fiAfterDownstreamStatusRead
init|=
operator|new
name|ActionContainer
argument_list|<
name|DatanodeID
argument_list|,
name|IOException
argument_list|>
argument_list|()
decl_stmt|;
comment|/** Simulate action for the pipelineAck pointcut */
DECL|field|fiPipelineAck
specifier|public
specifier|final
name|ActionContainer
argument_list|<
name|DatanodeID
argument_list|,
name|IOException
argument_list|>
name|fiPipelineAck
init|=
operator|new
name|ActionContainer
argument_list|<
name|DatanodeID
argument_list|,
name|IOException
argument_list|>
argument_list|()
decl_stmt|;
comment|/** Simulate action for the pipelineClose pointcut */
DECL|field|fiPipelineClose
specifier|public
specifier|final
name|ActionContainer
argument_list|<
name|DatanodeID
argument_list|,
name|IOException
argument_list|>
name|fiPipelineClose
init|=
operator|new
name|ActionContainer
argument_list|<
name|DatanodeID
argument_list|,
name|IOException
argument_list|>
argument_list|()
decl_stmt|;
comment|/** Simulate action for the blockFileClose pointcut */
DECL|field|fiBlockFileClose
specifier|public
specifier|final
name|ActionContainer
argument_list|<
name|DatanodeID
argument_list|,
name|IOException
argument_list|>
name|fiBlockFileClose
init|=
operator|new
name|ActionContainer
argument_list|<
name|DatanodeID
argument_list|,
name|IOException
argument_list|>
argument_list|()
decl_stmt|;
comment|/** Verification action for the pipelineInitNonAppend pointcut */
DECL|field|fiPipelineInitErrorNonAppend
specifier|public
specifier|final
name|ActionContainer
argument_list|<
name|Integer
argument_list|,
name|RuntimeException
argument_list|>
name|fiPipelineInitErrorNonAppend
init|=
operator|new
name|ActionContainer
argument_list|<
name|Integer
argument_list|,
name|RuntimeException
argument_list|>
argument_list|()
decl_stmt|;
comment|/** Verification action for the pipelineErrorAfterInit pointcut */
DECL|field|fiPipelineErrorAfterInit
specifier|public
specifier|final
name|ActionContainer
argument_list|<
name|Integer
argument_list|,
name|RuntimeException
argument_list|>
name|fiPipelineErrorAfterInit
init|=
operator|new
name|ActionContainer
argument_list|<
name|Integer
argument_list|,
name|RuntimeException
argument_list|>
argument_list|()
decl_stmt|;
comment|/** Get test status */
DECL|method|isSuccess ()
specifier|public
name|boolean
name|isSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|isSuccess
return|;
block|}
comment|/** Set test status */
DECL|method|markSuccess ()
specifier|public
name|void
name|markSuccess
parameter_list|()
block|{
name|this
operator|.
name|isSuccess
operator|=
literal|true
expr_stmt|;
block|}
comment|/** Initialize the pipeline. */
annotation|@
name|Override
DECL|method|initPipeline (LocatedBlock lb)
specifier|public
specifier|synchronized
name|Pipeline
name|initPipeline
parameter_list|(
name|LocatedBlock
name|lb
parameter_list|)
block|{
specifier|final
name|Pipeline
name|pl
init|=
operator|new
name|Pipeline
argument_list|(
name|lb
argument_list|)
decl_stmt|;
if|if
condition|(
name|pipelines
operator|.
name|contains
argument_list|(
name|pl
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"thepipeline != null"
argument_list|)
throw|;
block|}
name|pipelines
operator|.
name|add
argument_list|(
name|pl
argument_list|)
expr_stmt|;
return|return
name|pl
return|;
block|}
comment|/** Return the pipeline for the datanode. */
annotation|@
name|Override
DECL|method|getPipelineForDatanode (DatanodeID id)
specifier|public
specifier|synchronized
name|Pipeline
name|getPipelineForDatanode
parameter_list|(
name|DatanodeID
name|id
parameter_list|)
block|{
for|for
control|(
name|Pipeline
name|p
range|:
name|pipelines
control|)
block|{
if|if
condition|(
name|p
operator|.
name|contains
argument_list|(
name|id
argument_list|)
condition|)
block|{
return|return
name|p
return|;
block|}
block|}
name|FiTestUtil
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"FI: pipeline not found; id="
operator|+
name|id
operator|+
literal|", pipelines="
operator|+
name|pipelines
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|/**      * Is the test not yet success      * and the last pipeline contains the given datanode?      */
DECL|method|isNotSuccessAndLastPipelineContains ( int index, DatanodeID id)
specifier|private
specifier|synchronized
name|boolean
name|isNotSuccessAndLastPipelineContains
parameter_list|(
name|int
name|index
parameter_list|,
name|DatanodeID
name|id
parameter_list|)
block|{
if|if
condition|(
name|isSuccess
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|int
name|n
init|=
name|pipelines
operator|.
name|size
argument_list|()
decl_stmt|;
return|return
name|n
operator|==
literal|0
condition|?
literal|false
else|:
name|pipelines
operator|.
name|get
argument_list|(
name|n
operator|-
literal|1
argument_list|)
operator|.
name|contains
argument_list|(
name|index
argument_list|,
name|id
argument_list|)
return|;
block|}
block|}
comment|/** Action for DataNode */
DECL|class|DataNodeAction
specifier|public
specifier|static
specifier|abstract
class|class
name|DataNodeAction
implements|implements
name|Action
argument_list|<
name|DatanodeID
argument_list|,
name|IOException
argument_list|>
block|{
comment|/** The name of the test */
DECL|field|currentTest
specifier|final
name|String
name|currentTest
decl_stmt|;
comment|/** The index of the datanode */
DECL|field|index
specifier|final
name|int
name|index
decl_stmt|;
comment|/**      * @param currentTest The name of the test      * @param index The index of the datanode      */
DECL|method|DataNodeAction (String currentTest, int index)
specifier|protected
name|DataNodeAction
parameter_list|(
name|String
name|currentTest
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|this
operator|.
name|currentTest
operator|=
name|currentTest
expr_stmt|;
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|":"
operator|+
name|currentTest
operator|+
literal|", index="
operator|+
name|index
return|;
block|}
comment|/** return a String with this object and the datanodeID. */
DECL|method|toString (DatanodeID datanodeID)
name|String
name|toString
parameter_list|(
name|DatanodeID
name|datanodeID
parameter_list|)
block|{
return|return
literal|"FI: "
operator|+
name|this
operator|+
literal|", datanode="
operator|+
name|datanodeID
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
comment|/** An action to set a marker if the DatanodeID is matched. */
DECL|class|DatanodeMarkingAction
specifier|public
specifier|static
class|class
name|DatanodeMarkingAction
extends|extends
name|DataNodeAction
block|{
DECL|field|marker
specifier|private
specifier|final
name|MarkerConstraint
name|marker
decl_stmt|;
comment|/** Construct an object. */
DECL|method|DatanodeMarkingAction (String currentTest, int index, MarkerConstraint marker)
specifier|public
name|DatanodeMarkingAction
parameter_list|(
name|String
name|currentTest
parameter_list|,
name|int
name|index
parameter_list|,
name|MarkerConstraint
name|marker
parameter_list|)
block|{
name|super
argument_list|(
name|currentTest
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|this
operator|.
name|marker
operator|=
name|marker
expr_stmt|;
block|}
comment|/** Set the marker if the DatanodeID is matched. */
annotation|@
name|Override
DECL|method|run (DatanodeID datanodeid)
specifier|public
name|void
name|run
parameter_list|(
name|DatanodeID
name|datanodeid
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|DataTransferTest
name|test
init|=
name|getDataTransferTest
argument_list|()
decl_stmt|;
if|if
condition|(
name|test
operator|.
name|isNotSuccessAndLastPipelineContains
argument_list|(
name|index
argument_list|,
name|datanodeid
argument_list|)
condition|)
block|{
name|marker
operator|.
name|mark
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** {@inheritDoc} */
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|super
operator|.
name|toString
argument_list|()
operator|+
literal|", "
operator|+
name|marker
return|;
block|}
block|}
comment|/** Throws OutOfMemoryError. */
DECL|class|OomAction
specifier|public
specifier|static
class|class
name|OomAction
extends|extends
name|DataNodeAction
block|{
comment|/** Create an action for datanode i in the pipeline. */
DECL|method|OomAction (String currentTest, int i)
specifier|public
name|OomAction
parameter_list|(
name|String
name|currentTest
parameter_list|,
name|int
name|i
parameter_list|)
block|{
name|super
argument_list|(
name|currentTest
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run (DatanodeID id)
specifier|public
name|void
name|run
parameter_list|(
name|DatanodeID
name|id
parameter_list|)
block|{
specifier|final
name|DataTransferTest
name|test
init|=
name|getDataTransferTest
argument_list|()
decl_stmt|;
if|if
condition|(
name|test
operator|.
name|isNotSuccessAndLastPipelineContains
argument_list|(
name|index
argument_list|,
name|id
argument_list|)
condition|)
block|{
specifier|final
name|String
name|s
init|=
name|toString
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|FiTestUtil
operator|.
name|LOG
operator|.
name|info
argument_list|(
name|s
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|OutOfMemoryError
argument_list|(
name|s
argument_list|)
throw|;
block|}
block|}
block|}
comment|/** Throws OutOfMemoryError if the count is zero. */
DECL|class|CountdownOomAction
specifier|public
specifier|static
class|class
name|CountdownOomAction
extends|extends
name|OomAction
block|{
DECL|field|countdown
specifier|private
specifier|final
name|CountdownConstraint
name|countdown
decl_stmt|;
comment|/** Create an action for datanode i in the pipeline with count down. */
DECL|method|CountdownOomAction (String currentTest, int i, int count)
specifier|public
name|CountdownOomAction
parameter_list|(
name|String
name|currentTest
parameter_list|,
name|int
name|i
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|super
argument_list|(
name|currentTest
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|countdown
operator|=
operator|new
name|CountdownConstraint
argument_list|(
name|count
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run (DatanodeID id)
specifier|public
name|void
name|run
parameter_list|(
name|DatanodeID
name|id
parameter_list|)
block|{
specifier|final
name|DataTransferTest
name|test
init|=
name|getDataTransferTest
argument_list|()
decl_stmt|;
if|if
condition|(
name|test
operator|.
name|isNotSuccessAndLastPipelineContains
argument_list|(
name|index
argument_list|,
name|id
argument_list|)
operator|&&
name|countdown
operator|.
name|isSatisfied
argument_list|()
condition|)
block|{
specifier|final
name|String
name|s
init|=
name|toString
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|FiTestUtil
operator|.
name|LOG
operator|.
name|info
argument_list|(
name|s
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|OutOfMemoryError
argument_list|(
name|s
argument_list|)
throw|;
block|}
block|}
block|}
comment|/** Throws DiskOutOfSpaceException. */
DECL|class|DoosAction
specifier|public
specifier|static
class|class
name|DoosAction
extends|extends
name|DataNodeAction
block|{
comment|/** Create an action for datanode i in the pipeline. */
DECL|method|DoosAction (String currentTest, int i)
specifier|public
name|DoosAction
parameter_list|(
name|String
name|currentTest
parameter_list|,
name|int
name|i
parameter_list|)
block|{
name|super
argument_list|(
name|currentTest
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run (DatanodeID id)
specifier|public
name|void
name|run
parameter_list|(
name|DatanodeID
name|id
parameter_list|)
throws|throws
name|DiskOutOfSpaceException
block|{
specifier|final
name|DataTransferTest
name|test
init|=
name|getDataTransferTest
argument_list|()
decl_stmt|;
if|if
condition|(
name|test
operator|.
name|isNotSuccessAndLastPipelineContains
argument_list|(
name|index
argument_list|,
name|id
argument_list|)
condition|)
block|{
specifier|final
name|String
name|s
init|=
name|toString
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|FiTestUtil
operator|.
name|LOG
operator|.
name|info
argument_list|(
name|s
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DiskOutOfSpaceException
argument_list|(
name|s
argument_list|)
throw|;
block|}
block|}
block|}
comment|/** Throws an IOException. */
DECL|class|IoeAction
specifier|public
specifier|static
class|class
name|IoeAction
extends|extends
name|DataNodeAction
block|{
DECL|field|error
specifier|private
specifier|final
name|String
name|error
decl_stmt|;
comment|/** Create an action for datanode i in the pipeline. */
DECL|method|IoeAction (String currentTest, int i, String error)
specifier|public
name|IoeAction
parameter_list|(
name|String
name|currentTest
parameter_list|,
name|int
name|i
parameter_list|,
name|String
name|error
parameter_list|)
block|{
name|super
argument_list|(
name|currentTest
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|this
operator|.
name|error
operator|=
name|error
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run (DatanodeID id)
specifier|public
name|void
name|run
parameter_list|(
name|DatanodeID
name|id
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|DataTransferTest
name|test
init|=
name|getDataTransferTest
argument_list|()
decl_stmt|;
if|if
condition|(
name|test
operator|.
name|isNotSuccessAndLastPipelineContains
argument_list|(
name|index
argument_list|,
name|id
argument_list|)
condition|)
block|{
specifier|final
name|String
name|s
init|=
name|toString
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|FiTestUtil
operator|.
name|LOG
operator|.
name|info
argument_list|(
name|s
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|s
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|error
operator|+
literal|" "
operator|+
name|super
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|/** Throws DiskOutOfSpaceException if the count is zero. */
DECL|class|CountdownDoosAction
specifier|public
specifier|static
class|class
name|CountdownDoosAction
extends|extends
name|DoosAction
block|{
DECL|field|countdown
specifier|private
specifier|final
name|CountdownConstraint
name|countdown
decl_stmt|;
comment|/** Create an action for datanode i in the pipeline with count down. */
DECL|method|CountdownDoosAction (String currentTest, int i, int count)
specifier|public
name|CountdownDoosAction
parameter_list|(
name|String
name|currentTest
parameter_list|,
name|int
name|i
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|super
argument_list|(
name|currentTest
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|countdown
operator|=
operator|new
name|CountdownConstraint
argument_list|(
name|count
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run (DatanodeID id)
specifier|public
name|void
name|run
parameter_list|(
name|DatanodeID
name|id
parameter_list|)
throws|throws
name|DiskOutOfSpaceException
block|{
specifier|final
name|DataTransferTest
name|test
init|=
name|getDataTransferTest
argument_list|()
decl_stmt|;
if|if
condition|(
name|test
operator|.
name|isNotSuccessAndLastPipelineContains
argument_list|(
name|index
argument_list|,
name|id
argument_list|)
operator|&&
name|countdown
operator|.
name|isSatisfied
argument_list|()
condition|)
block|{
specifier|final
name|String
name|s
init|=
name|toString
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|FiTestUtil
operator|.
name|LOG
operator|.
name|info
argument_list|(
name|s
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DiskOutOfSpaceException
argument_list|(
name|s
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Sleep some period of time so that it slows down the datanode    * or sleep forever so that datanode becomes not responding.    */
DECL|class|SleepAction
specifier|public
specifier|static
class|class
name|SleepAction
extends|extends
name|DataNodeAction
block|{
comment|/** In milliseconds;      * must have (0<= minDuration< maxDuration) or (maxDuration<= 0).      */
DECL|field|minDuration
specifier|final
name|long
name|minDuration
decl_stmt|;
comment|/** In milliseconds; maxDuration<= 0 means sleeping forever.*/
DECL|field|maxDuration
specifier|final
name|long
name|maxDuration
decl_stmt|;
comment|/**      * Create an action for datanode i in the pipeline.      * @param duration In milliseconds, duration<= 0 means sleeping forever.      */
DECL|method|SleepAction (String currentTest, int i, long duration)
specifier|public
name|SleepAction
parameter_list|(
name|String
name|currentTest
parameter_list|,
name|int
name|i
parameter_list|,
name|long
name|duration
parameter_list|)
block|{
name|this
argument_list|(
name|currentTest
argument_list|,
name|i
argument_list|,
name|duration
argument_list|,
name|duration
operator|<=
literal|0
condition|?
name|duration
else|:
name|duration
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create an action for datanode i in the pipeline.      * @param minDuration minimum sleep time      * @param maxDuration maximum sleep time      */
DECL|method|SleepAction (String currentTest, int i, long minDuration, long maxDuration)
specifier|public
name|SleepAction
parameter_list|(
name|String
name|currentTest
parameter_list|,
name|int
name|i
parameter_list|,
name|long
name|minDuration
parameter_list|,
name|long
name|maxDuration
parameter_list|)
block|{
name|super
argument_list|(
name|currentTest
argument_list|,
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|maxDuration
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|minDuration
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"minDuration = "
operator|+
name|minDuration
operator|+
literal|"< 0 but maxDuration = "
operator|+
name|maxDuration
operator|+
literal|"> 0"
argument_list|)
throw|;
block|}
if|if
condition|(
name|minDuration
operator|>=
name|maxDuration
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|minDuration
operator|+
literal|" = minDuration>= maxDuration = "
operator|+
name|maxDuration
argument_list|)
throw|;
block|}
block|}
name|this
operator|.
name|minDuration
operator|=
name|minDuration
expr_stmt|;
name|this
operator|.
name|maxDuration
operator|=
name|maxDuration
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run (DatanodeID id)
specifier|public
name|void
name|run
parameter_list|(
name|DatanodeID
name|id
parameter_list|)
block|{
specifier|final
name|DataTransferTest
name|test
init|=
name|getDataTransferTest
argument_list|()
decl_stmt|;
if|if
condition|(
name|test
operator|.
name|isNotSuccessAndLastPipelineContains
argument_list|(
name|index
argument_list|,
name|id
argument_list|)
condition|)
block|{
name|FiTestUtil
operator|.
name|LOG
operator|.
name|info
argument_list|(
name|toString
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|maxDuration
operator|<=
literal|0
condition|)
block|{
for|for
control|(
init|;
name|FiTestUtil
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
condition|;
control|)
empty_stmt|;
comment|//sleep forever until interrupt
block|}
else|else
block|{
name|FiTestUtil
operator|.
name|sleep
argument_list|(
name|minDuration
argument_list|,
name|maxDuration
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|super
operator|.
name|toString
argument_list|()
operator|+
literal|", duration="
operator|+
operator|(
name|maxDuration
operator|<=
literal|0
condition|?
literal|"infinity"
else|:
literal|"["
operator|+
name|minDuration
operator|+
literal|", "
operator|+
name|maxDuration
operator|+
literal|")"
operator|)
return|;
block|}
block|}
comment|/**    * When the count is zero,    * sleep some period of time so that it slows down the datanode    * or sleep forever so that datanode becomes not responding.    */
DECL|class|CountdownSleepAction
specifier|public
specifier|static
class|class
name|CountdownSleepAction
extends|extends
name|SleepAction
block|{
DECL|field|countdown
specifier|private
specifier|final
name|CountdownConstraint
name|countdown
decl_stmt|;
comment|/**      * Create an action for datanode i in the pipeline.      * @param duration In milliseconds, duration<= 0 means sleeping forever.      */
DECL|method|CountdownSleepAction (String currentTest, int i, long duration, int count)
specifier|public
name|CountdownSleepAction
parameter_list|(
name|String
name|currentTest
parameter_list|,
name|int
name|i
parameter_list|,
name|long
name|duration
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|this
argument_list|(
name|currentTest
argument_list|,
name|i
argument_list|,
name|duration
argument_list|,
name|duration
operator|+
literal|1
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
comment|/** Create an action for datanode i in the pipeline with count down. */
DECL|method|CountdownSleepAction (String currentTest, int i, long minDuration, long maxDuration, int count)
specifier|public
name|CountdownSleepAction
parameter_list|(
name|String
name|currentTest
parameter_list|,
name|int
name|i
parameter_list|,
name|long
name|minDuration
parameter_list|,
name|long
name|maxDuration
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|super
argument_list|(
name|currentTest
argument_list|,
name|i
argument_list|,
name|minDuration
argument_list|,
name|maxDuration
argument_list|)
expr_stmt|;
name|countdown
operator|=
operator|new
name|CountdownConstraint
argument_list|(
name|count
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run (DatanodeID id)
specifier|public
name|void
name|run
parameter_list|(
name|DatanodeID
name|id
parameter_list|)
block|{
specifier|final
name|DataTransferTest
name|test
init|=
name|getDataTransferTest
argument_list|()
decl_stmt|;
if|if
condition|(
name|test
operator|.
name|isNotSuccessAndLastPipelineContains
argument_list|(
name|index
argument_list|,
name|id
argument_list|)
operator|&&
name|countdown
operator|.
name|isSatisfied
argument_list|()
condition|)
block|{
specifier|final
name|String
name|s
init|=
name|toString
argument_list|(
name|id
argument_list|)
operator|+
literal|", duration = ["
operator|+
name|minDuration
operator|+
literal|","
operator|+
name|maxDuration
operator|+
literal|")"
decl_stmt|;
name|FiTestUtil
operator|.
name|LOG
operator|.
name|info
argument_list|(
name|s
argument_list|)
expr_stmt|;
if|if
condition|(
name|maxDuration
operator|<=
literal|1
condition|)
block|{
for|for
control|(
init|;
name|FiTestUtil
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
condition|;
control|)
empty_stmt|;
comment|//sleep forever until interrupt
block|}
else|else
block|{
name|FiTestUtil
operator|.
name|sleep
argument_list|(
name|minDuration
argument_list|,
name|maxDuration
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/** Action for pipeline error verification */
DECL|class|VerificationAction
specifier|public
specifier|static
class|class
name|VerificationAction
implements|implements
name|Action
argument_list|<
name|Integer
argument_list|,
name|RuntimeException
argument_list|>
block|{
comment|/** The name of the test */
DECL|field|currentTest
specifier|final
name|String
name|currentTest
decl_stmt|;
comment|/** The error index of the datanode */
DECL|field|errorIndex
specifier|final
name|int
name|errorIndex
decl_stmt|;
comment|/**      * Create a verification action for errors at datanode i in the pipeline.      *       * @param currentTest The name of the test      * @param i The error index of the datanode      */
DECL|method|VerificationAction (String currentTest, int i)
specifier|public
name|VerificationAction
parameter_list|(
name|String
name|currentTest
parameter_list|,
name|int
name|i
parameter_list|)
block|{
name|this
operator|.
name|currentTest
operator|=
name|currentTest
expr_stmt|;
name|this
operator|.
name|errorIndex
operator|=
name|i
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|currentTest
operator|+
literal|", errorIndex="
operator|+
name|errorIndex
return|;
block|}
annotation|@
name|Override
DECL|method|run (Integer i)
specifier|public
name|void
name|run
parameter_list|(
name|Integer
name|i
parameter_list|)
block|{
if|if
condition|(
name|i
operator|==
name|errorIndex
condition|)
block|{
name|FiTestUtil
operator|.
name|LOG
operator|.
name|info
argument_list|(
name|this
operator|+
literal|", successfully verified."
argument_list|)
expr_stmt|;
name|getDataTransferTest
argument_list|()
operator|.
name|markSuccess
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    *  Create a OomAction with a CountdownConstraint    *  so that it throws OutOfMemoryError if the count is zero.    */
specifier|public
specifier|static
name|ConstraintSatisfactionAction
argument_list|<
name|DatanodeID
argument_list|,
name|IOException
argument_list|>
DECL|method|createCountdownOomAction ( String currentTest, int i, int count)
name|createCountdownOomAction
parameter_list|(
name|String
name|currentTest
parameter_list|,
name|int
name|i
parameter_list|,
name|int
name|count
parameter_list|)
block|{
return|return
operator|new
name|ConstraintSatisfactionAction
argument_list|<
name|DatanodeID
argument_list|,
name|IOException
argument_list|>
argument_list|(
operator|new
name|OomAction
argument_list|(
name|currentTest
argument_list|,
name|i
argument_list|)
argument_list|,
operator|new
name|CountdownConstraint
argument_list|(
name|count
argument_list|)
argument_list|)
return|;
block|}
comment|/**    *  Create a DoosAction with a CountdownConstraint    *  so that it throws DiskOutOfSpaceException if the count is zero.    */
specifier|public
specifier|static
name|ConstraintSatisfactionAction
argument_list|<
name|DatanodeID
argument_list|,
name|IOException
argument_list|>
DECL|method|createCountdownDoosAction ( String currentTest, int i, int count)
name|createCountdownDoosAction
parameter_list|(
name|String
name|currentTest
parameter_list|,
name|int
name|i
parameter_list|,
name|int
name|count
parameter_list|)
block|{
return|return
operator|new
name|ConstraintSatisfactionAction
argument_list|<
name|DatanodeID
argument_list|,
name|IOException
argument_list|>
argument_list|(
operator|new
name|DoosAction
argument_list|(
name|currentTest
argument_list|,
name|i
argument_list|)
argument_list|,
operator|new
name|CountdownConstraint
argument_list|(
name|count
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Create a SleepAction with a CountdownConstraint    * for datanode i in the pipeline.    * When the count is zero,    * sleep some period of time so that it slows down the datanode    * or sleep forever so the that datanode becomes not responding.    */
DECL|method|createCountdownSleepAction ( String currentTest, int i, long minDuration, long maxDuration, int count)
specifier|public
specifier|static
name|ConstraintSatisfactionAction
argument_list|<
name|DatanodeID
argument_list|,
name|IOException
argument_list|>
name|createCountdownSleepAction
parameter_list|(
name|String
name|currentTest
parameter_list|,
name|int
name|i
parameter_list|,
name|long
name|minDuration
parameter_list|,
name|long
name|maxDuration
parameter_list|,
name|int
name|count
parameter_list|)
block|{
return|return
operator|new
name|ConstraintSatisfactionAction
argument_list|<
name|DatanodeID
argument_list|,
name|IOException
argument_list|>
argument_list|(
operator|new
name|SleepAction
argument_list|(
name|currentTest
argument_list|,
name|i
argument_list|,
name|minDuration
argument_list|,
name|maxDuration
argument_list|)
argument_list|,
operator|new
name|CountdownConstraint
argument_list|(
name|count
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Same as    * createCountdownSleepAction(currentTest, i, duration, duration+1, count).    */
DECL|method|createCountdownSleepAction ( String currentTest, int i, long duration, int count)
specifier|public
specifier|static
name|ConstraintSatisfactionAction
argument_list|<
name|DatanodeID
argument_list|,
name|IOException
argument_list|>
name|createCountdownSleepAction
parameter_list|(
name|String
name|currentTest
parameter_list|,
name|int
name|i
parameter_list|,
name|long
name|duration
parameter_list|,
name|int
name|count
parameter_list|)
block|{
return|return
name|createCountdownSleepAction
argument_list|(
name|currentTest
argument_list|,
name|i
argument_list|,
name|duration
argument_list|,
name|duration
operator|+
literal|1
argument_list|,
name|count
argument_list|)
return|;
block|}
block|}
end_class

end_unit

