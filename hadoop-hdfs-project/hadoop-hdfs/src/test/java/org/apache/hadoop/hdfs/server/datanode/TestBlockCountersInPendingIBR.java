begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|timeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|BlockReportOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|DatanodeProtocolClientSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|FsDatasetSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|ReceivedDeletedBlockInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|StorageReceivedDeletedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|ReceivedDeletedBlockInfo
operator|.
name|BlockStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsRecordBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MetricsAsserts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_comment
comment|/**  * Test counters for number of blocks in pending IBR.  */
end_comment

begin_class
DECL|class|TestBlockCountersInPendingIBR
specifier|public
class|class
name|TestBlockCountersInPendingIBR
block|{
annotation|@
name|Test
DECL|method|testBlockCounters ()
specifier|public
name|void
name|testBlockCounters
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
comment|/*      * Set a really long value for dfs.blockreport.intervalMsec and      * dfs.heartbeat.interval, so that incremental block reports and heartbeats      * won't be sent during this test unless they're triggered manually.      */
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCKREPORT_INTERVAL_MSEC_KEY
argument_list|,
literal|10800000L
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|,
literal|1080L
argument_list|)
expr_stmt|;
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|DatanodeProtocolClientSideTranslatorPB
name|spy
init|=
name|InternalDataNodeTestUtils
operator|.
name|spyOnBposToNN
argument_list|(
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|cluster
operator|.
name|getNameNode
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|DataNode
name|datanode
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|/* We should get 0 incremental block report. */
name|Mockito
operator|.
name|verify
argument_list|(
name|spy
argument_list|,
name|timeout
argument_list|(
literal|60000
argument_list|)
operator|.
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|blockReceivedAndDeleted
argument_list|(
name|any
argument_list|(
name|DatanodeRegistration
operator|.
name|class
argument_list|)
argument_list|,
name|anyString
argument_list|()
argument_list|,
name|any
argument_list|(
name|StorageReceivedDeletedBlocks
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
comment|/*      * Create fake blocks notification on the DataNode. This will be sent with      * the next incremental block report.      */
specifier|final
name|BPServiceActor
name|actor
init|=
name|datanode
operator|.
name|getAllBpOs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBPServiceActors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|FsDatasetSpi
argument_list|<
name|?
argument_list|>
name|dataset
init|=
name|datanode
operator|.
name|getFSDataset
argument_list|()
decl_stmt|;
specifier|final
name|DatanodeStorage
name|storage
decl_stmt|;
try|try
init|(
name|FsDatasetSpi
operator|.
name|FsVolumeReferences
name|volumes
init|=
name|dataset
operator|.
name|getFsVolumeReferences
argument_list|()
init|)
block|{
name|storage
operator|=
name|dataset
operator|.
name|getStorage
argument_list|(
name|volumes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStorageID
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ReceivedDeletedBlockInfo
name|rdbi
init|=
literal|null
decl_stmt|;
comment|/* block at status of RECEIVING_BLOCK */
name|rdbi
operator|=
operator|new
name|ReceivedDeletedBlockInfo
argument_list|(
operator|new
name|Block
argument_list|(
literal|5678
argument_list|,
literal|512
argument_list|,
literal|1000
argument_list|)
argument_list|,
name|BlockStatus
operator|.
name|RECEIVING_BLOCK
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|actor
operator|.
name|getIbrManager
argument_list|()
operator|.
name|addRDBI
argument_list|(
name|rdbi
argument_list|,
name|storage
argument_list|)
expr_stmt|;
comment|/* block at status of RECEIVED_BLOCK */
name|rdbi
operator|=
operator|new
name|ReceivedDeletedBlockInfo
argument_list|(
operator|new
name|Block
argument_list|(
literal|5679
argument_list|,
literal|512
argument_list|,
literal|1000
argument_list|)
argument_list|,
name|BlockStatus
operator|.
name|RECEIVED_BLOCK
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|actor
operator|.
name|getIbrManager
argument_list|()
operator|.
name|addRDBI
argument_list|(
name|rdbi
argument_list|,
name|storage
argument_list|)
expr_stmt|;
comment|/* block at status of DELETED_BLOCK */
name|rdbi
operator|=
operator|new
name|ReceivedDeletedBlockInfo
argument_list|(
operator|new
name|Block
argument_list|(
literal|5680
argument_list|,
literal|512
argument_list|,
literal|1000
argument_list|)
argument_list|,
name|BlockStatus
operator|.
name|DELETED_BLOCK
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|actor
operator|.
name|getIbrManager
argument_list|()
operator|.
name|addRDBI
argument_list|(
name|rdbi
argument_list|,
name|storage
argument_list|)
expr_stmt|;
comment|/* verify counters before sending IBR */
name|verifyBlockCounters
argument_list|(
name|datanode
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|/* Manually trigger a block report. */
name|datanode
operator|.
name|triggerBlockReport
argument_list|(
operator|new
name|BlockReportOptions
operator|.
name|Factory
argument_list|()
operator|.
name|setIncremental
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|/*      * triggerBlockReport returns before the block report is actually sent. Wait      * for it to be sent here.      */
name|Mockito
operator|.
name|verify
argument_list|(
name|spy
argument_list|,
name|timeout
argument_list|(
literal|60000
argument_list|)
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|blockReceivedAndDeleted
argument_list|(
name|any
argument_list|(
name|DatanodeRegistration
operator|.
name|class
argument_list|)
argument_list|,
name|anyString
argument_list|()
argument_list|,
name|any
argument_list|(
name|StorageReceivedDeletedBlocks
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
comment|/* verify counters after sending IBR */
name|verifyBlockCounters
argument_list|(
name|datanode
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
DECL|method|verifyBlockCounters (final DataNode datanode, final long blocksInPendingIBR, final long blocksReceivingInPendingIBR, final long blocksReceivedInPendingIBR, final long blocksDeletedInPendingIBR)
specifier|private
name|void
name|verifyBlockCounters
parameter_list|(
specifier|final
name|DataNode
name|datanode
parameter_list|,
specifier|final
name|long
name|blocksInPendingIBR
parameter_list|,
specifier|final
name|long
name|blocksReceivingInPendingIBR
parameter_list|,
specifier|final
name|long
name|blocksReceivedInPendingIBR
parameter_list|,
specifier|final
name|long
name|blocksDeletedInPendingIBR
parameter_list|)
block|{
specifier|final
name|MetricsRecordBuilder
name|m
init|=
name|MetricsAsserts
operator|.
name|getMetrics
argument_list|(
name|datanode
operator|.
name|getMetrics
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|MetricsAsserts
operator|.
name|assertGauge
argument_list|(
literal|"BlocksInPendingIBR"
argument_list|,
name|blocksInPendingIBR
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|MetricsAsserts
operator|.
name|assertGauge
argument_list|(
literal|"BlocksReceivingInPendingIBR"
argument_list|,
name|blocksReceivingInPendingIBR
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|MetricsAsserts
operator|.
name|assertGauge
argument_list|(
literal|"BlocksReceivedInPendingIBR"
argument_list|,
name|blocksReceivedInPendingIBR
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|MetricsAsserts
operator|.
name|assertGauge
argument_list|(
literal|"BlocksDeletedInPendingIBR"
argument_list|,
name|blocksDeletedInPendingIBR
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

