begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSNNTopology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|DatanodeReportType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocolPB
operator|.
name|StorageContainerLocationProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocolPB
operator|.
name|StorageContainerLocationProtocolClientSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|storage
operator|.
name|StorageContainerManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|client
operator|.
name|OzoneClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|exceptions
operator|.
name|OzoneException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_comment
comment|/**  * MiniOzoneCluster creates a complete in-process Ozone cluster suitable for  * running tests.  The cluster consists of a StorageContainerManager and  * multiple DataNodes.  This class subclasses {@link MiniDFSCluster} for  * convenient reuse of logic for starting DataNodes.  Unlike MiniDFSCluster, it  * does not start a NameNode, because Ozone does not require a NameNode.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|MiniOzoneCluster
specifier|public
class|class
name|MiniOzoneCluster
extends|extends
name|MiniDFSCluster
implements|implements
name|Closeable
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MiniOzoneCluster
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|USER_AUTH
specifier|private
specifier|static
specifier|final
name|String
name|USER_AUTH
init|=
literal|"hdfs"
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|OzoneConfiguration
name|conf
decl_stmt|;
DECL|field|scm
specifier|private
specifier|final
name|StorageContainerManager
name|scm
decl_stmt|;
comment|/**    * Creates a new MiniOzoneCluster.    *    * @param builder cluster builder    * @param scm StorageContainerManager, already running    * @throws IOException if there is an I/O error    */
DECL|method|MiniOzoneCluster (Builder builder, StorageContainerManager scm)
specifier|private
name|MiniOzoneCluster
parameter_list|(
name|Builder
name|builder
parameter_list|,
name|StorageContainerManager
name|scm
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|builder
operator|.
name|conf
expr_stmt|;
name|this
operator|.
name|scm
operator|=
name|scm
expr_stmt|;
block|}
comment|/**    * Builder for configuring the MiniOzoneCluster to run.    */
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
operator|.
name|Builder
block|{
DECL|field|conf
specifier|private
specifier|final
name|OzoneConfiguration
name|conf
decl_stmt|;
DECL|field|ozoneHandlerType
specifier|private
name|Optional
argument_list|<
name|String
argument_list|>
name|ozoneHandlerType
init|=
name|Optional
operator|.
name|absent
argument_list|()
decl_stmt|;
comment|/**      * Creates a new Builder.      *      * @param conf configuration      */
DECL|method|Builder (OzoneConfiguration conf)
specifier|public
name|Builder
parameter_list|(
name|OzoneConfiguration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|nnTopology
argument_list|(
operator|new
name|MiniDFSNNTopology
argument_list|()
argument_list|)
expr_stmt|;
comment|// No NameNode required
block|}
annotation|@
name|Override
DECL|method|numDataNodes (int val)
specifier|public
name|Builder
name|numDataNodes
parameter_list|(
name|int
name|val
parameter_list|)
block|{
name|super
operator|.
name|numDataNodes
argument_list|(
name|val
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setHandlerType (String handler)
specifier|public
name|Builder
name|setHandlerType
parameter_list|(
name|String
name|handler
parameter_list|)
block|{
name|ozoneHandlerType
operator|=
name|Optional
operator|.
name|of
argument_list|(
name|handler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|build ()
specifier|public
name|MiniOzoneCluster
name|build
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|ozoneHandlerType
operator|.
name|isPresent
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The Ozone handler type must be specified."
argument_list|)
throw|;
block|}
name|conf
operator|.
name|setBoolean
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_TRACE_ENABLED_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_HANDLER_TYPE_KEY
argument_list|,
name|ozoneHandlerType
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_SCM_CLIENT_ADDRESS_KEY
argument_list|,
literal|"127.0.0.1:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_SCM_DATANODE_ADDRESS_KEY
argument_list|,
literal|"127.0.0.1:0"
argument_list|)
expr_stmt|;
name|StorageContainerManager
name|scm
init|=
operator|new
name|StorageContainerManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|scm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MiniOzoneCluster
name|cluster
init|=
operator|new
name|MiniOzoneCluster
argument_list|(
name|this
argument_list|,
name|scm
argument_list|)
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitOzoneReady
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// A workaround to propagate MiniOzoneCluster failures without
comment|// changing the method signature (which would require cascading
comment|// changes to hundreds of unrelated HDFS tests).
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to start MiniOzoneCluster"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|cluster
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|super
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Shutting down the Mini Ozone Cluster"
argument_list|)
expr_stmt|;
if|if
condition|(
name|scm
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Shutting down the StorageContainerManager"
argument_list|)
expr_stmt|;
name|scm
operator|.
name|stop
argument_list|()
expr_stmt|;
name|scm
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
comment|/**    * Creates an {@link OzoneClient} connected to this cluster's REST service.    * Callers take ownership of the client and must close it when done.    *    * @return OzoneClient connected to this cluster's REST service    * @throws OzoneException if Ozone encounters an error creating the client    */
DECL|method|createOzoneClient ()
specifier|public
name|OzoneClient
name|createOzoneClient
parameter_list|()
throws|throws
name|OzoneException
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
operator|!
name|getDataNodes
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
literal|"Cannot create OzoneClient if the cluster has no DataNodes."
argument_list|)
expr_stmt|;
comment|// An Ozone request may originate at any DataNode, so pick one at random.
name|int
name|dnIndex
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|getDataNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|uri
init|=
name|String
operator|.
name|format
argument_list|(
literal|"http://127.0.0.1:%d"
argument_list|,
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
name|dnIndex
argument_list|)
operator|.
name|getInfoPort
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating Ozone client to DataNode {} with URI {} and user {}"
argument_list|,
name|dnIndex
argument_list|,
name|uri
argument_list|,
name|USER_AUTH
argument_list|)
expr_stmt|;
try|try
block|{
return|return
operator|new
name|OzoneClient
argument_list|(
name|uri
argument_list|,
name|USER_AUTH
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
comment|// We control the REST service URI, so it should never be invalid.
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unexpected URISyntaxException"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Creates an RPC proxy connected to this cluster's StorageContainerManager    * for accessing container location information.  Callers take ownership of    * the proxy and must close it when done.    *    * @return RPC proxy for accessing container location information    * @throws IOException if there is an I/O error    */
specifier|public
name|StorageContainerLocationProtocolClientSideTranslatorPB
DECL|method|createStorageContainerLocationClient ()
name|createStorageContainerLocationClient
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|version
init|=
name|RPC
operator|.
name|getProtocolVersion
argument_list|(
name|StorageContainerLocationProtocolPB
operator|.
name|class
argument_list|)
decl_stmt|;
name|InetSocketAddress
name|address
init|=
name|scm
operator|.
name|getClientRpcAddress
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating StorageContainerLocationProtocol RPC client with address {}"
argument_list|,
name|address
argument_list|)
expr_stmt|;
return|return
operator|new
name|StorageContainerLocationProtocolClientSideTranslatorPB
argument_list|(
name|RPC
operator|.
name|getProxy
argument_list|(
name|StorageContainerLocationProtocolPB
operator|.
name|class
argument_list|,
name|version
argument_list|,
name|address
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
argument_list|,
name|conf
argument_list|,
name|NetUtils
operator|.
name|getDefaultSocketFactory
argument_list|(
name|conf
argument_list|)
argument_list|,
name|Client
operator|.
name|getTimeout
argument_list|(
name|conf
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Waits for the Ozone cluster to be ready for processing requests.    */
DECL|method|waitOzoneReady ()
specifier|public
name|void
name|waitOzoneReady
parameter_list|()
throws|throws
name|TimeoutException
throws|,
name|InterruptedException
block|{
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
specifier|final
name|DatanodeInfo
index|[]
name|reports
init|=
name|scm
operator|.
name|getDatanodeReport
argument_list|(
name|DatanodeReportType
operator|.
name|LIVE
argument_list|)
decl_stmt|;
if|if
condition|(
name|reports
operator|.
name|length
operator|>=
name|numDataNodes
condition|)
block|{
return|return
literal|true
return|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for cluster to be ready. Got {} of {} DN reports."
argument_list|,
name|reports
operator|.
name|length
argument_list|,
name|numDataNodes
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
argument_list|,
literal|100
argument_list|,
literal|45000
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

