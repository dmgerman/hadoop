begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_comment
comment|/**  * Helper methods useful for writing ACL tests.  */
end_comment

begin_class
DECL|class|AclTestHelpers
specifier|public
specifier|final
class|class
name|AclTestHelpers
block|{
comment|/**    * Create a new AclEntry with scope, type and permission (no name).    *    * @param scope AclEntryScope scope of the ACL entry    * @param type AclEntryType ACL entry type    * @param permission FsAction set of permissions in the ACL entry    * @return AclEntry new AclEntry    */
DECL|method|aclEntry (AclEntryScope scope, AclEntryType type, FsAction permission)
specifier|public
specifier|static
name|AclEntry
name|aclEntry
parameter_list|(
name|AclEntryScope
name|scope
parameter_list|,
name|AclEntryType
name|type
parameter_list|,
name|FsAction
name|permission
parameter_list|)
block|{
return|return
operator|new
name|AclEntry
operator|.
name|Builder
argument_list|()
operator|.
name|setScope
argument_list|(
name|scope
argument_list|)
operator|.
name|setType
argument_list|(
name|type
argument_list|)
operator|.
name|setPermission
argument_list|(
name|permission
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Create a new AclEntry with scope, type, name and permission.    *    * @param scope AclEntryScope scope of the ACL entry    * @param type AclEntryType ACL entry type    * @param name String optional ACL entry name    * @param permission FsAction set of permissions in the ACL entry    * @return AclEntry new AclEntry    */
DECL|method|aclEntry (AclEntryScope scope, AclEntryType type, String name, FsAction permission)
specifier|public
specifier|static
name|AclEntry
name|aclEntry
parameter_list|(
name|AclEntryScope
name|scope
parameter_list|,
name|AclEntryType
name|type
parameter_list|,
name|String
name|name
parameter_list|,
name|FsAction
name|permission
parameter_list|)
block|{
return|return
operator|new
name|AclEntry
operator|.
name|Builder
argument_list|()
operator|.
name|setScope
argument_list|(
name|scope
argument_list|)
operator|.
name|setType
argument_list|(
name|type
argument_list|)
operator|.
name|setName
argument_list|(
name|name
argument_list|)
operator|.
name|setPermission
argument_list|(
name|permission
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Create a new AclEntry with scope, type and name (no permission).    *    * @param scope AclEntryScope scope of the ACL entry    * @param type AclEntryType ACL entry type    * @param name String optional ACL entry name    * @return AclEntry new AclEntry    */
DECL|method|aclEntry (AclEntryScope scope, AclEntryType type, String name)
specifier|public
specifier|static
name|AclEntry
name|aclEntry
parameter_list|(
name|AclEntryScope
name|scope
parameter_list|,
name|AclEntryType
name|type
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|AclEntry
operator|.
name|Builder
argument_list|()
operator|.
name|setScope
argument_list|(
name|scope
argument_list|)
operator|.
name|setType
argument_list|(
name|type
argument_list|)
operator|.
name|setName
argument_list|(
name|name
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Create a new AclEntry with scope and type (no name or permission).    *    * @param scope AclEntryScope scope of the ACL entry    * @param type AclEntryType ACL entry type    * @return AclEntry new AclEntry    */
DECL|method|aclEntry (AclEntryScope scope, AclEntryType type)
specifier|public
specifier|static
name|AclEntry
name|aclEntry
parameter_list|(
name|AclEntryScope
name|scope
parameter_list|,
name|AclEntryType
name|type
parameter_list|)
block|{
return|return
operator|new
name|AclEntry
operator|.
name|Builder
argument_list|()
operator|.
name|setScope
argument_list|(
name|scope
argument_list|)
operator|.
name|setType
argument_list|(
name|type
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Asserts that permission is denied to the given fs/user for the given file.    *    * @param fs FileSystem to check    * @param user UserGroupInformation owner of fs    * @param pathToCheck Path file to check    * @throws Exception if there is an unexpected error    */
DECL|method|assertFilePermissionDenied (FileSystem fs, UserGroupInformation user, Path pathToCheck)
specifier|public
specifier|static
name|void
name|assertFilePermissionDenied
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|UserGroupInformation
name|user
parameter_list|,
name|Path
name|pathToCheck
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|DFSTestUtil
operator|.
name|readFileBuffer
argument_list|(
name|fs
argument_list|,
name|pathToCheck
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected AccessControlException for user "
operator|+
name|user
operator|+
literal|", path = "
operator|+
name|pathToCheck
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
comment|/**    * Asserts that permission is granted to the given fs/user for the given file.    *    * @param fs FileSystem to check    * @param user UserGroupInformation owner of fs    * @param pathToCheck Path file to check    * @throws Exception if there is an unexpected error    */
DECL|method|assertFilePermissionGranted (FileSystem fs, UserGroupInformation user, Path pathToCheck)
specifier|public
specifier|static
name|void
name|assertFilePermissionGranted
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|UserGroupInformation
name|user
parameter_list|,
name|Path
name|pathToCheck
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|DFSTestUtil
operator|.
name|readFileBuffer
argument_list|(
name|fs
argument_list|,
name|pathToCheck
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"expected permission granted for user "
operator|+
name|user
operator|+
literal|", path = "
operator|+
name|pathToCheck
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Asserts the value of the FsPermission bits on the inode of a specific path.    *    * @param fs FileSystem to use for check    * @param pathToCheck Path inode to check    * @param perm short expected permission bits    * @throws IOException thrown if there is an I/O error    */
DECL|method|assertPermission (FileSystem fs, Path pathToCheck, short perm)
specifier|public
specifier|static
name|void
name|assertPermission
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|pathToCheck
parameter_list|,
name|short
name|perm
parameter_list|)
throws|throws
name|IOException
block|{
name|short
name|filteredPerm
init|=
call|(
name|short
call|)
argument_list|(
name|perm
operator|&
literal|01777
argument_list|)
decl_stmt|;
name|FsPermission
name|fsPermission
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|pathToCheck
argument_list|)
operator|.
name|getPermission
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|filteredPerm
argument_list|,
name|fsPermission
operator|.
name|toShort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
operator|(
name|perm
operator|&
operator|(
literal|1
operator|<<
literal|12
operator|)
operator|)
operator|!=
literal|0
operator|)
argument_list|,
name|fsPermission
operator|.
name|getAclBit
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

