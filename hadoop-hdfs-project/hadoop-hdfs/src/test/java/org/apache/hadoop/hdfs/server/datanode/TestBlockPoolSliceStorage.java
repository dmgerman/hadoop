begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|Storage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|Is
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_comment
comment|/**  * Test that BlockPoolSliceStorage can correctly generate trash and  * restore directories for a given block file path. */
end_comment

begin_class
DECL|class|TestBlockPoolSliceStorage
specifier|public
class|class
name|TestBlockPoolSliceStorage
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestBlockPoolSliceStorage
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|rand
specifier|final
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|field|storage
name|BlockPoolSliceStorage
name|storage
decl_stmt|;
comment|/**    * BlockPoolSliceStorage with a dummy storage directory. The directory    * need not exist. We need to extend BlockPoolSliceStorage so we can    * call {@link Storage#addStorageDir}.    */
DECL|class|StubBlockPoolSliceStorage
specifier|private
specifier|static
class|class
name|StubBlockPoolSliceStorage
extends|extends
name|BlockPoolSliceStorage
block|{
DECL|method|StubBlockPoolSliceStorage (int namespaceID, String bpID, long cTime, String clusterId)
name|StubBlockPoolSliceStorage
parameter_list|(
name|int
name|namespaceID
parameter_list|,
name|String
name|bpID
parameter_list|,
name|long
name|cTime
parameter_list|,
name|String
name|clusterId
parameter_list|)
block|{
name|super
argument_list|(
name|namespaceID
argument_list|,
name|bpID
argument_list|,
name|cTime
argument_list|,
name|clusterId
argument_list|)
expr_stmt|;
name|addStorageDir
argument_list|(
operator|new
name|StorageDirectory
argument_list|(
operator|new
name|File
argument_list|(
literal|"/tmp/dontcare/"
operator|+
name|bpID
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|storageDirs
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|makeRandomIpAddress ()
specifier|private
name|String
name|makeRandomIpAddress
parameter_list|()
block|{
return|return
name|rand
operator|.
name|nextInt
argument_list|(
literal|256
argument_list|)
operator|+
literal|"."
operator|+
name|rand
operator|.
name|nextInt
argument_list|(
literal|256
argument_list|)
operator|+
literal|"."
operator|+
name|rand
operator|.
name|nextInt
argument_list|(
literal|256
argument_list|)
operator|+
literal|"."
operator|+
name|rand
operator|.
name|nextInt
argument_list|(
literal|256
argument_list|)
return|;
block|}
DECL|method|makeRandomBlockpoolId ()
specifier|private
name|String
name|makeRandomBlockpoolId
parameter_list|()
block|{
return|return
literal|"BP-"
operator|+
name|rand
operator|.
name|nextInt
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
operator|+
literal|"-"
operator|+
name|makeRandomIpAddress
argument_list|()
operator|+
literal|"-"
operator|+
name|rand
operator|.
name|nextInt
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
return|;
block|}
DECL|method|makeBlockPoolStorage ()
specifier|private
name|BlockPoolSliceStorage
name|makeBlockPoolStorage
parameter_list|()
block|{
return|return
operator|new
name|StubBlockPoolSliceStorage
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|,
name|makeRandomBlockpoolId
argument_list|()
argument_list|,
name|rand
operator|.
name|nextInt
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
DECL|method|makeRandomBlockFileSubdir (int nestingLevel)
specifier|private
name|String
name|makeRandomBlockFileSubdir
parameter_list|(
name|int
name|nestingLevel
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nestingLevel
condition|;
operator|++
name|i
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"subdir"
operator|+
name|rand
operator|.
name|nextInt
argument_list|(
literal|64
argument_list|)
operator|+
literal|"/"
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Test conversion from a block file path to its target trash    * directory.    */
DECL|method|getTrashDirectoryForBlockFile (String fileName, int nestingLevel)
specifier|public
name|void
name|getTrashDirectoryForBlockFile
parameter_list|(
name|String
name|fileName
parameter_list|,
name|int
name|nestingLevel
parameter_list|)
block|{
specifier|final
name|String
name|blockFileSubdir
init|=
name|makeRandomBlockFileSubdir
argument_list|(
name|nestingLevel
argument_list|)
decl_stmt|;
specifier|final
name|String
name|blockFileName
init|=
name|fileName
decl_stmt|;
name|String
name|testFilePath
init|=
name|storage
operator|.
name|getSingularStorageDir
argument_list|()
operator|.
name|getRoot
argument_list|()
operator|+
literal|"/"
operator|+
name|Storage
operator|.
name|STORAGE_DIR_CURRENT
operator|+
name|blockFileSubdir
operator|+
name|blockFileName
decl_stmt|;
name|String
name|expectedTrashPath
init|=
name|storage
operator|.
name|getSingularStorageDir
argument_list|()
operator|.
name|getRoot
argument_list|()
operator|+
literal|"/"
operator|+
name|BlockPoolSliceStorage
operator|.
name|TRASH_ROOT_DIR
operator|+
name|blockFileSubdir
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|blockFileSubdir
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Got subdir "
operator|+
name|blockFileSubdir
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Generated file path "
operator|+
name|testFilePath
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|storage
operator|.
name|getTrashDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|testFilePath
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
name|expectedTrashPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*    * Test conversion from a block file in a trash directory to its    * target directory for restore.   */
DECL|method|getRestoreDirectoryForBlockFile (String fileName, int nestingLevel)
specifier|public
name|void
name|getRestoreDirectoryForBlockFile
parameter_list|(
name|String
name|fileName
parameter_list|,
name|int
name|nestingLevel
parameter_list|)
block|{
name|BlockPoolSliceStorage
name|storage
init|=
name|makeBlockPoolStorage
argument_list|()
decl_stmt|;
specifier|final
name|String
name|blockFileSubdir
init|=
name|makeRandomBlockFileSubdir
argument_list|(
name|nestingLevel
argument_list|)
decl_stmt|;
specifier|final
name|String
name|blockFileName
init|=
name|fileName
decl_stmt|;
name|String
name|deletedFilePath
init|=
name|storage
operator|.
name|getSingularStorageDir
argument_list|()
operator|.
name|getRoot
argument_list|()
operator|+
literal|"/"
operator|+
name|BlockPoolSliceStorage
operator|.
name|TRASH_ROOT_DIR
operator|+
name|blockFileSubdir
operator|+
name|blockFileName
decl_stmt|;
name|String
name|expectedRestorePath
init|=
name|storage
operator|.
name|getSingularStorageDir
argument_list|()
operator|.
name|getRoot
argument_list|()
operator|+
literal|"/"
operator|+
name|Storage
operator|.
name|STORAGE_DIR_CURRENT
operator|+
name|blockFileSubdir
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|blockFileSubdir
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Generated deleted file path "
operator|+
name|deletedFilePath
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|storage
operator|.
name|getRestoreDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|deletedFilePath
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
name|expectedRestorePath
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testGetTrashAndRestoreDirectories ()
specifier|public
name|void
name|testGetTrashAndRestoreDirectories
parameter_list|()
block|{
name|storage
operator|=
name|makeBlockPoolStorage
argument_list|()
expr_stmt|;
comment|// Test a few different nesting levels since block files
comment|// could be nested such as subdir1/subdir5/blk_...
comment|// Make sure all nesting levels are handled correctly.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
operator|++
name|i
control|)
block|{
name|getTrashDirectoryForBlockFile
argument_list|(
literal|"blk_myblockfile"
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|getTrashDirectoryForBlockFile
argument_list|(
literal|"blk_myblockfile.meta"
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|getRestoreDirectoryForBlockFile
argument_list|(
literal|"blk_myblockfile"
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|getRestoreDirectoryForBlockFile
argument_list|(
literal|"blk_myblockfile.meta"
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

