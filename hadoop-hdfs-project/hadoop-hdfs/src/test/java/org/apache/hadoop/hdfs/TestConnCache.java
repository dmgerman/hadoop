begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|impl
operator|.
name|BlockReaderTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * This class tests the client connection caching in a single node  * mini-cluster.  */
end_comment

begin_class
DECL|class|TestConnCache
specifier|public
class|class
name|TestConnCache
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestConnCache
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|BLOCK_SIZE
specifier|static
specifier|final
name|int
name|BLOCK_SIZE
init|=
literal|4096
decl_stmt|;
DECL|field|FILE_SIZE
specifier|static
specifier|final
name|int
name|FILE_SIZE
init|=
literal|3
operator|*
name|BLOCK_SIZE
decl_stmt|;
comment|/**    * (Optionally) seek to position, read and verify data.    *    * Seek to specified position if pos is non-negative.    */
DECL|method|pread (DFSInputStream in, long pos, byte[] buffer, int offset, int length, byte[] authenticData)
specifier|private
name|void
name|pread
parameter_list|(
name|DFSInputStream
name|in
parameter_list|,
name|long
name|pos
parameter_list|,
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|,
name|byte
index|[]
name|authenticData
parameter_list|)
throws|throws
name|IOException
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Test buffer too small"
argument_list|,
name|buffer
operator|.
name|length
operator|>=
name|offset
operator|+
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|pos
operator|>=
literal|0
condition|)
name|in
operator|.
name|seek
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Reading from file of size "
operator|+
name|in
operator|.
name|getFileLength
argument_list|()
operator|+
literal|" at offset "
operator|+
name|in
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|length
operator|>
literal|0
condition|)
block|{
name|int
name|cnt
init|=
name|in
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Error in read"
argument_list|,
name|cnt
operator|>
literal|0
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|cnt
expr_stmt|;
name|length
operator|-=
name|cnt
expr_stmt|;
block|}
comment|// Verify
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|byte
name|actual
init|=
name|buffer
index|[
name|i
index|]
decl_stmt|;
name|byte
name|expect
init|=
name|authenticData
index|[
operator|(
name|int
operator|)
name|pos
operator|+
name|i
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Read data mismatch at file offset "
operator|+
operator|(
name|pos
operator|+
name|i
operator|)
operator|+
literal|". Expects "
operator|+
name|expect
operator|+
literal|"; got "
operator|+
name|actual
argument_list|,
name|actual
argument_list|,
name|expect
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Read a file served entirely from one DN. Seek around and read from    * different offsets. And verify that they all use the same socket.    * @throws Exception     */
annotation|@
name|Test
DECL|method|testReadFromOneDN ()
specifier|public
name|void
name|testReadFromOneDN
parameter_list|()
throws|throws
name|Exception
block|{
name|HdfsConfiguration
name|configuration
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
comment|// One of the goals of this test is to verify that we don't open more
comment|// than one socket.  So use a different client context, so that we
comment|// get our own socket cache, rather than sharing with the other test
comment|// instances.  Also use a really long socket timeout so that nothing
comment|// gets closed before we get around to checking the cache size at the end.
specifier|final
name|String
name|contextName
init|=
literal|"testReadFromOneDNContext"
decl_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|DFS_CLIENT_CONTEXT
argument_list|,
name|contextName
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setLong
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|DFS_CLIENT_SOCKET_TIMEOUT_KEY
argument_list|,
literal|100000000L
argument_list|)
expr_stmt|;
name|BlockReaderTestUtil
name|util
init|=
operator|new
name|BlockReaderTestUtil
argument_list|(
literal|1
argument_list|,
name|configuration
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|testFile
init|=
operator|new
name|Path
argument_list|(
literal|"/testConnCache.dat"
argument_list|)
decl_stmt|;
name|byte
name|authenticData
index|[]
init|=
name|util
operator|.
name|writeFile
argument_list|(
name|testFile
argument_list|,
name|FILE_SIZE
operator|/
literal|1024
argument_list|)
decl_stmt|;
name|DFSClient
name|client
init|=
operator|new
name|DFSClient
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
name|util
operator|.
name|getCluster
argument_list|()
operator|.
name|getNameNodePort
argument_list|()
argument_list|)
argument_list|,
name|util
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|DFSInputStream
name|in
init|=
name|client
operator|.
name|open
argument_list|(
name|testFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"opened "
operator|+
name|testFile
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|dataBuf
init|=
operator|new
name|byte
index|[
name|BLOCK_SIZE
index|]
decl_stmt|;
comment|// Initial read
name|pread
argument_list|(
name|in
argument_list|,
literal|0
argument_list|,
name|dataBuf
argument_list|,
literal|0
argument_list|,
name|dataBuf
operator|.
name|length
argument_list|,
name|authenticData
argument_list|)
expr_stmt|;
comment|// Read again and verify that the socket is the same
name|pread
argument_list|(
name|in
argument_list|,
name|FILE_SIZE
operator|-
name|dataBuf
operator|.
name|length
argument_list|,
name|dataBuf
argument_list|,
literal|0
argument_list|,
name|dataBuf
operator|.
name|length
argument_list|,
name|authenticData
argument_list|)
expr_stmt|;
name|pread
argument_list|(
name|in
argument_list|,
literal|1024
argument_list|,
name|dataBuf
argument_list|,
literal|0
argument_list|,
name|dataBuf
operator|.
name|length
argument_list|,
name|authenticData
argument_list|)
expr_stmt|;
comment|// No seek; just read
name|pread
argument_list|(
name|in
argument_list|,
operator|-
literal|1
argument_list|,
name|dataBuf
argument_list|,
literal|0
argument_list|,
name|dataBuf
operator|.
name|length
argument_list|,
name|authenticData
argument_list|)
expr_stmt|;
name|pread
argument_list|(
name|in
argument_list|,
literal|64
argument_list|,
name|dataBuf
argument_list|,
literal|0
argument_list|,
name|dataBuf
operator|.
name|length
operator|/
literal|2
argument_list|,
name|authenticData
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ClientContext
operator|.
name|getFromConf
argument_list|(
name|configuration
argument_list|)
operator|.
name|getPeerCache
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

