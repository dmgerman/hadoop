begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode.web.webhdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|web
operator|.
name|webhdfs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
operator|.
name|AuthenticationMethod
operator|.
name|KERBEROS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|QueryStringDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|DelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|DelegationTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSNamesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|WebHdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|WebHdfsFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|WebHdfsTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|DelegationParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|LengthParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|NamenodeAddressParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|OffsetParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|Param
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|UserParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_class
DECL|class|TestDataNodeUGIProvider
specifier|public
class|class
name|TestDataNodeUGIProvider
block|{
DECL|field|uri
specifier|private
specifier|final
name|URI
name|uri
init|=
name|URI
operator|.
name|create
argument_list|(
name|WebHdfsConstants
operator|.
name|WEBHDFS_SCHEME
operator|+
literal|"://"
operator|+
literal|"127.0.0.1:0"
argument_list|)
decl_stmt|;
DECL|field|PATH
specifier|private
specifier|final
name|String
name|PATH
init|=
literal|"/foo"
decl_stmt|;
DECL|field|OFFSET
specifier|private
specifier|final
name|int
name|OFFSET
init|=
literal|42
decl_stmt|;
DECL|field|LENGTH
specifier|private
specifier|final
name|int
name|LENGTH
init|=
literal|512
decl_stmt|;
DECL|field|EXPIRE_AFTER_ACCESS
specifier|private
specifier|final
specifier|static
name|int
name|EXPIRE_AFTER_ACCESS
init|=
literal|5
operator|*
literal|1000
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|conf
operator|=
name|WebHdfsTestUtil
operator|.
name|createConf
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_WEBHDFS_UGI_EXPIRE_AFTER_ACCESS_KEY
argument_list|,
name|EXPIRE_AFTER_ACCESS
argument_list|)
expr_stmt|;
name|DataNodeUGIProvider
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUGICacheSecure ()
specifier|public
name|void
name|testUGICacheSecure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// fake turning on security so api thinks it should use tokens
name|SecurityUtil
operator|.
name|setAuthenticationMethod
argument_list|(
name|KERBEROS
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"test-user"
argument_list|)
decl_stmt|;
name|ugi
operator|.
name|setAuthenticationMethod
argument_list|(
name|KERBEROS
argument_list|)
expr_stmt|;
name|ugi
operator|=
name|UserGroupInformation
operator|.
name|createProxyUser
argument_list|(
literal|"test-proxy-user"
argument_list|,
name|ugi
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setLoginUser
argument_list|(
name|ugi
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
argument_list|>
name|tokens
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|getWebHdfsFileSystem
argument_list|(
name|ugi
argument_list|,
name|conf
argument_list|,
name|tokens
argument_list|)
expr_stmt|;
name|String
name|uri1
init|=
name|WebHdfsFileSystem
operator|.
name|PATH_PREFIX
operator|+
name|PATH
operator|+
literal|"?op=OPEN"
operator|+
name|Param
operator|.
name|toSortedString
argument_list|(
literal|"&"
argument_list|,
operator|new
name|NamenodeAddressParam
argument_list|(
literal|"127.0.0.1:1010"
argument_list|)
argument_list|,
operator|new
name|OffsetParam
argument_list|(
operator|(
name|long
operator|)
name|OFFSET
argument_list|)
argument_list|,
operator|new
name|LengthParam
argument_list|(
operator|(
name|long
operator|)
name|LENGTH
argument_list|)
argument_list|,
operator|new
name|DelegationParam
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|encodeToUrlString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|uri2
init|=
name|WebHdfsFileSystem
operator|.
name|PATH_PREFIX
operator|+
name|PATH
operator|+
literal|"?op=OPEN"
operator|+
name|Param
operator|.
name|toSortedString
argument_list|(
literal|"&"
argument_list|,
operator|new
name|NamenodeAddressParam
argument_list|(
literal|"127.0.0.1:1010"
argument_list|)
argument_list|,
operator|new
name|OffsetParam
argument_list|(
operator|(
name|long
operator|)
name|OFFSET
argument_list|)
argument_list|,
operator|new
name|LengthParam
argument_list|(
operator|(
name|long
operator|)
name|LENGTH
argument_list|)
argument_list|,
operator|new
name|DelegationParam
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|encodeToUrlString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|DataNodeUGIProvider
name|ugiProvider1
init|=
operator|new
name|DataNodeUGIProvider
argument_list|(
operator|new
name|ParameterParser
argument_list|(
operator|new
name|QueryStringDecoder
argument_list|(
name|URI
operator|.
name|create
argument_list|(
name|uri1
argument_list|)
argument_list|)
argument_list|,
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|ugi11
init|=
name|ugiProvider1
operator|.
name|ugi
argument_list|()
decl_stmt|;
name|UserGroupInformation
name|ugi12
init|=
name|ugiProvider1
operator|.
name|ugi
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"With UGI cache, two UGIs returned by the same token should be same"
argument_list|,
name|ugi11
argument_list|,
name|ugi12
argument_list|)
expr_stmt|;
name|DataNodeUGIProvider
name|ugiProvider2
init|=
operator|new
name|DataNodeUGIProvider
argument_list|(
operator|new
name|ParameterParser
argument_list|(
operator|new
name|QueryStringDecoder
argument_list|(
name|URI
operator|.
name|create
argument_list|(
name|uri2
argument_list|)
argument_list|)
argument_list|,
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|url21
init|=
name|ugiProvider2
operator|.
name|ugi
argument_list|()
decl_stmt|;
name|UserGroupInformation
name|url22
init|=
name|ugiProvider2
operator|.
name|ugi
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"With UGI cache, two UGIs returned by the same token should be same"
argument_list|,
name|url21
argument_list|,
name|url22
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotEquals
argument_list|(
literal|"With UGI cache, two UGIs for the different token should not be same"
argument_list|,
name|ugi11
argument_list|,
name|url22
argument_list|)
expr_stmt|;
name|awaitCacheEmptyDueToExpiration
argument_list|()
expr_stmt|;
name|ugi12
operator|=
name|ugiProvider1
operator|.
name|ugi
argument_list|()
expr_stmt|;
name|url22
operator|=
name|ugiProvider2
operator|.
name|ugi
argument_list|()
expr_stmt|;
name|String
name|msg
init|=
literal|"With cache eviction, two UGIs returned"
operator|+
literal|" by the same token should not be same"
decl_stmt|;
name|Assert
operator|.
name|assertNotEquals
argument_list|(
name|msg
argument_list|,
name|ugi11
argument_list|,
name|ugi12
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotEquals
argument_list|(
name|msg
argument_list|,
name|url21
argument_list|,
name|url22
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotEquals
argument_list|(
literal|"With UGI cache, two UGIs for the different token should not be same"
argument_list|,
name|ugi11
argument_list|,
name|url22
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUGICacheInSecure ()
specifier|public
name|void
name|testUGICacheInSecure
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|uri1
init|=
name|WebHdfsFileSystem
operator|.
name|PATH_PREFIX
operator|+
name|PATH
operator|+
literal|"?op=OPEN"
operator|+
name|Param
operator|.
name|toSortedString
argument_list|(
literal|"&"
argument_list|,
operator|new
name|OffsetParam
argument_list|(
operator|(
name|long
operator|)
name|OFFSET
argument_list|)
argument_list|,
operator|new
name|LengthParam
argument_list|(
operator|(
name|long
operator|)
name|LENGTH
argument_list|)
argument_list|,
operator|new
name|UserParam
argument_list|(
literal|"root"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|uri2
init|=
name|WebHdfsFileSystem
operator|.
name|PATH_PREFIX
operator|+
name|PATH
operator|+
literal|"?op=OPEN"
operator|+
name|Param
operator|.
name|toSortedString
argument_list|(
literal|"&"
argument_list|,
operator|new
name|OffsetParam
argument_list|(
operator|(
name|long
operator|)
name|OFFSET
argument_list|)
argument_list|,
operator|new
name|LengthParam
argument_list|(
operator|(
name|long
operator|)
name|LENGTH
argument_list|)
argument_list|,
operator|new
name|UserParam
argument_list|(
literal|"hdfs"
argument_list|)
argument_list|)
decl_stmt|;
name|DataNodeUGIProvider
name|ugiProvider1
init|=
operator|new
name|DataNodeUGIProvider
argument_list|(
operator|new
name|ParameterParser
argument_list|(
operator|new
name|QueryStringDecoder
argument_list|(
name|URI
operator|.
name|create
argument_list|(
name|uri1
argument_list|)
argument_list|)
argument_list|,
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|ugi11
init|=
name|ugiProvider1
operator|.
name|ugi
argument_list|()
decl_stmt|;
name|UserGroupInformation
name|ugi12
init|=
name|ugiProvider1
operator|.
name|ugi
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"With UGI cache, two UGIs for the same user should be same"
argument_list|,
name|ugi11
argument_list|,
name|ugi12
argument_list|)
expr_stmt|;
name|DataNodeUGIProvider
name|ugiProvider2
init|=
operator|new
name|DataNodeUGIProvider
argument_list|(
operator|new
name|ParameterParser
argument_list|(
operator|new
name|QueryStringDecoder
argument_list|(
name|URI
operator|.
name|create
argument_list|(
name|uri2
argument_list|)
argument_list|)
argument_list|,
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|url21
init|=
name|ugiProvider2
operator|.
name|ugi
argument_list|()
decl_stmt|;
name|UserGroupInformation
name|url22
init|=
name|ugiProvider2
operator|.
name|ugi
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"With UGI cache, two UGIs for the same user should be same"
argument_list|,
name|url21
argument_list|,
name|url22
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotEquals
argument_list|(
literal|"With UGI cache, two UGIs for the different user should not be same"
argument_list|,
name|ugi11
argument_list|,
name|url22
argument_list|)
expr_stmt|;
name|awaitCacheEmptyDueToExpiration
argument_list|()
expr_stmt|;
name|ugi12
operator|=
name|ugiProvider1
operator|.
name|ugi
argument_list|()
expr_stmt|;
name|url22
operator|=
name|ugiProvider2
operator|.
name|ugi
argument_list|()
expr_stmt|;
name|String
name|msg
init|=
literal|"With cache eviction, two UGIs returned by"
operator|+
literal|" the same user should not be same"
decl_stmt|;
name|Assert
operator|.
name|assertNotEquals
argument_list|(
name|msg
argument_list|,
name|ugi11
argument_list|,
name|ugi12
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotEquals
argument_list|(
name|msg
argument_list|,
name|url21
argument_list|,
name|url22
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotEquals
argument_list|(
literal|"With UGI cache, two UGIs for the different user should not be same"
argument_list|,
name|ugi11
argument_list|,
name|url22
argument_list|)
expr_stmt|;
block|}
comment|/**    * Wait for expiration of entries from the UGI cache.  We need to be careful    * not to touch the entries in the cache while we're waiting for expiration.    * If we did, then that would reset the clock on expiration for those entries.    * Instead, we trigger internal clean-up of the cache and check for size 0.    *    * @throws Exception if there is any error    */
DECL|method|awaitCacheEmptyDueToExpiration ()
specifier|private
name|void
name|awaitCacheEmptyDueToExpiration
parameter_list|()
throws|throws
name|Exception
block|{
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
name|DataNodeUGIProvider
operator|.
name|ugiCache
operator|.
name|cleanUp
argument_list|()
expr_stmt|;
return|return
name|DataNodeUGIProvider
operator|.
name|ugiCache
operator|.
name|size
argument_list|()
operator|==
literal|0
return|;
block|}
block|}
argument_list|,
name|EXPIRE_AFTER_ACCESS
argument_list|,
literal|10
operator|*
name|EXPIRE_AFTER_ACCESS
argument_list|)
expr_stmt|;
block|}
DECL|method|getWebHdfsFileSystem (UserGroupInformation ugi, Configuration conf, List<Token<DelegationTokenIdentifier>> tokens)
specifier|private
name|WebHdfsFileSystem
name|getWebHdfsFileSystem
parameter_list|(
name|UserGroupInformation
name|ugi
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|List
argument_list|<
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
argument_list|>
name|tokens
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
name|DelegationTokenIdentifier
name|dtId
init|=
operator|new
name|DelegationTokenIdentifier
argument_list|(
operator|new
name|Text
argument_list|(
name|ugi
operator|.
name|getUserName
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|FSNamesystem
name|namesystem
init|=
name|mock
argument_list|(
name|FSNamesystem
operator|.
name|class
argument_list|)
decl_stmt|;
name|DelegationTokenSecretManager
name|dtSecretManager
init|=
operator|new
name|DelegationTokenSecretManager
argument_list|(
literal|86400000
argument_list|,
literal|86400000
argument_list|,
literal|86400000
argument_list|,
literal|86400000
argument_list|,
name|namesystem
argument_list|)
decl_stmt|;
name|dtSecretManager
operator|.
name|startThreads
argument_list|()
expr_stmt|;
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token1
init|=
operator|new
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
argument_list|(
name|dtId
argument_list|,
name|dtSecretManager
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token2
init|=
operator|new
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
argument_list|(
name|dtId
argument_list|,
name|dtSecretManager
argument_list|)
decl_stmt|;
name|SecurityUtil
operator|.
name|setTokenService
argument_list|(
name|token1
argument_list|,
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|uri
operator|.
name|getAuthority
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|SecurityUtil
operator|.
name|setTokenService
argument_list|(
name|token2
argument_list|,
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|uri
operator|.
name|getAuthority
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|token1
operator|.
name|setKind
argument_list|(
name|WebHdfsConstants
operator|.
name|WEBHDFS_TOKEN_KIND
argument_list|)
expr_stmt|;
name|token2
operator|.
name|setKind
argument_list|(
name|WebHdfsConstants
operator|.
name|WEBHDFS_TOKEN_KIND
argument_list|)
expr_stmt|;
name|tokens
operator|.
name|add
argument_list|(
name|token1
argument_list|)
expr_stmt|;
name|tokens
operator|.
name|add
argument_list|(
name|token2
argument_list|)
expr_stmt|;
name|ugi
operator|.
name|addToken
argument_list|(
name|token1
argument_list|)
expr_stmt|;
name|ugi
operator|.
name|addToken
argument_list|(
name|token2
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|WebHdfsFileSystem
operator|)
name|FileSystem
operator|.
name|get
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
return|;
block|}
block|}
end_class

end_unit

