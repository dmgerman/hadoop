begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|Is
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|IsNot
operator|.
name|not
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|http
operator|.
name|HttpConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|ssl
operator|.
name|KeyStoreTestUtil
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_comment
comment|/**  * This test checks that the NameNode respects the following keys:  *  *  - DFS_NAMENODE_RPC_BIND_HOST_KEY  *  - DFS_NAMENODE_SERVICE_RPC_BIND_HOST_KEY  *  - DFS_NAMENODE_HTTP_BIND_HOST_KEY  *  - DFS_NAMENODE_HTTPS_BIND_HOST_KEY   */
end_comment

begin_class
DECL|class|TestNameNodeRespectsBindHostKeys
specifier|public
class|class
name|TestNameNodeRespectsBindHostKeys
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestNameNodeRespectsBindHostKeys
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|WILDCARD_ADDRESS
specifier|private
specifier|static
specifier|final
name|String
name|WILDCARD_ADDRESS
init|=
literal|"0.0.0.0"
decl_stmt|;
DECL|field|LOCALHOST_SERVER_ADDRESS
specifier|private
specifier|static
specifier|final
name|String
name|LOCALHOST_SERVER_ADDRESS
init|=
literal|"127.0.0.1:0"
decl_stmt|;
DECL|method|getRpcServerAddress (MiniDFSCluster cluster)
specifier|private
specifier|static
name|String
name|getRpcServerAddress
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|)
block|{
name|NameNodeRpcServer
name|rpcServer
init|=
operator|(
name|NameNodeRpcServer
operator|)
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
decl_stmt|;
return|return
name|rpcServer
operator|.
name|getClientRpcServer
argument_list|()
operator|.
name|getListenerAddress
argument_list|()
operator|.
name|getAddress
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getServiceRpcServerAddress (MiniDFSCluster cluster)
specifier|private
specifier|static
name|String
name|getServiceRpcServerAddress
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|)
block|{
name|NameNodeRpcServer
name|rpcServer
init|=
operator|(
name|NameNodeRpcServer
operator|)
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
decl_stmt|;
return|return
name|rpcServer
operator|.
name|getServiceRpcServer
argument_list|()
operator|.
name|getListenerAddress
argument_list|()
operator|.
name|getAddress
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testRpcBindHostKey ()
specifier|public
name|void
name|testRpcBindHostKey
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Testing without "
operator|+
name|DFS_NAMENODE_RPC_BIND_HOST_KEY
argument_list|)
expr_stmt|;
comment|// NN should not bind the wildcard address by default.
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|String
name|address
init|=
name|getRpcServerAddress
argument_list|(
name|cluster
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
literal|"Bind address not expected to be wildcard by default."
argument_list|,
name|address
argument_list|,
name|not
argument_list|(
literal|"/"
operator|+
name|WILDCARD_ADDRESS
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Testing with "
operator|+
name|DFS_NAMENODE_RPC_BIND_HOST_KEY
argument_list|)
expr_stmt|;
comment|// Tell NN to bind the wildcard address.
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMENODE_RPC_BIND_HOST_KEY
argument_list|,
name|WILDCARD_ADDRESS
argument_list|)
expr_stmt|;
comment|// Verify that NN binds wildcard address now.
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|String
name|address
init|=
name|getRpcServerAddress
argument_list|(
name|cluster
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
literal|"Bind address "
operator|+
name|address
operator|+
literal|" is not wildcard."
argument_list|,
name|address
argument_list|,
name|is
argument_list|(
literal|"/"
operator|+
name|WILDCARD_ADDRESS
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testServiceRpcBindHostKey ()
specifier|public
name|void
name|testServiceRpcBindHostKey
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Testing without "
operator|+
name|DFS_NAMENODE_SERVICE_RPC_BIND_HOST_KEY
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY
argument_list|,
name|LOCALHOST_SERVER_ADDRESS
argument_list|)
expr_stmt|;
comment|// NN should not bind the wildcard address by default.
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|String
name|address
init|=
name|getServiceRpcServerAddress
argument_list|(
name|cluster
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
literal|"Bind address not expected to be wildcard by default."
argument_list|,
name|address
argument_list|,
name|not
argument_list|(
literal|"/"
operator|+
name|WILDCARD_ADDRESS
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Testing with "
operator|+
name|DFS_NAMENODE_SERVICE_RPC_BIND_HOST_KEY
argument_list|)
expr_stmt|;
comment|// Tell NN to bind the wildcard address.
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMENODE_SERVICE_RPC_BIND_HOST_KEY
argument_list|,
name|WILDCARD_ADDRESS
argument_list|)
expr_stmt|;
comment|// Verify that NN binds wildcard address now.
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|String
name|address
init|=
name|getServiceRpcServerAddress
argument_list|(
name|cluster
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
literal|"Bind address "
operator|+
name|address
operator|+
literal|" is not wildcard."
argument_list|,
name|address
argument_list|,
name|is
argument_list|(
literal|"/"
operator|+
name|WILDCARD_ADDRESS
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testHttpBindHostKey ()
specifier|public
name|void
name|testHttpBindHostKey
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Testing without "
operator|+
name|DFS_NAMENODE_HTTP_BIND_HOST_KEY
argument_list|)
expr_stmt|;
comment|// NN should not bind the wildcard address by default.
try|try
block|{
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMENODE_HTTP_ADDRESS_KEY
argument_list|,
name|LOCALHOST_SERVER_ADDRESS
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|String
name|address
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getHttpAddress
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
literal|"HTTP Bind address not expected to be wildcard by default."
argument_list|,
name|address
operator|.
name|startsWith
argument_list|(
name|WILDCARD_ADDRESS
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Testing with "
operator|+
name|DFS_NAMENODE_HTTP_BIND_HOST_KEY
argument_list|)
expr_stmt|;
comment|// Tell NN to bind the wildcard address.
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMENODE_HTTP_BIND_HOST_KEY
argument_list|,
name|WILDCARD_ADDRESS
argument_list|)
expr_stmt|;
comment|// Verify that NN binds wildcard address now.
try|try
block|{
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMENODE_HTTP_ADDRESS_KEY
argument_list|,
name|LOCALHOST_SERVER_ADDRESS
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|String
name|address
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getHttpAddress
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"HTTP Bind address "
operator|+
name|address
operator|+
literal|" is not wildcard."
argument_list|,
name|address
operator|.
name|startsWith
argument_list|(
name|WILDCARD_ADDRESS
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|field|BASEDIR
specifier|private
specifier|static
specifier|final
name|String
name|BASEDIR
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.dir"
argument_list|,
literal|"target/test-dir"
argument_list|)
operator|+
literal|"/"
operator|+
name|TestNameNodeRespectsBindHostKeys
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
DECL|method|setupSsl ()
specifier|private
specifier|static
name|void
name|setupSsl
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HTTP_POLICY_KEY
argument_list|,
name|HttpConfig
operator|.
name|Policy
operator|.
name|HTTPS_ONLY
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMENODE_HTTPS_ADDRESS_KEY
argument_list|,
literal|"localhost:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_HTTPS_ADDRESS_KEY
argument_list|,
literal|"localhost:0"
argument_list|)
expr_stmt|;
name|File
name|base
init|=
operator|new
name|File
argument_list|(
name|BASEDIR
argument_list|)
decl_stmt|;
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|base
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|base
operator|.
name|mkdirs
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|String
name|keystoresDir
init|=
operator|new
name|File
argument_list|(
name|BASEDIR
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
specifier|final
name|String
name|sslConfDir
init|=
name|KeyStoreTestUtil
operator|.
name|getClasspathDir
argument_list|(
name|TestNameNodeRespectsBindHostKeys
operator|.
name|class
argument_list|)
decl_stmt|;
name|KeyStoreTestUtil
operator|.
name|setupSSLConfig
argument_list|(
name|keystoresDir
argument_list|,
name|sslConfDir
argument_list|,
name|conf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * HTTPS test is different since we need to setup SSL configuration.    * NN also binds the wildcard address for HTTPS port by default so we must    * pick a different host/port combination.    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testHttpsBindHostKey ()
specifier|public
name|void
name|testHttpsBindHostKey
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Testing behavior without "
operator|+
name|DFS_NAMENODE_HTTPS_BIND_HOST_KEY
argument_list|)
expr_stmt|;
name|setupSsl
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_HTTP_POLICY_KEY
argument_list|,
name|HttpConfig
operator|.
name|Policy
operator|.
name|HTTPS_ONLY
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
comment|// NN should not bind the wildcard address by default.
try|try
block|{
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMENODE_HTTPS_ADDRESS_KEY
argument_list|,
name|LOCALHOST_SERVER_ADDRESS
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|String
name|address
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getHttpsAddress
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
literal|"HTTP Bind address not expected to be wildcard by default."
argument_list|,
name|address
operator|.
name|startsWith
argument_list|(
name|WILDCARD_ADDRESS
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Testing behavior with "
operator|+
name|DFS_NAMENODE_HTTPS_BIND_HOST_KEY
argument_list|)
expr_stmt|;
comment|// Tell NN to bind the wildcard address.
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMENODE_HTTPS_BIND_HOST_KEY
argument_list|,
name|WILDCARD_ADDRESS
argument_list|)
expr_stmt|;
comment|// Verify that NN binds wildcard address now.
try|try
block|{
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMENODE_HTTPS_ADDRESS_KEY
argument_list|,
name|LOCALHOST_SERVER_ADDRESS
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|String
name|address
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getHttpsAddress
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"HTTP Bind address "
operator|+
name|address
operator|+
literal|" is not wildcard."
argument_list|,
name|address
operator|.
name|startsWith
argument_list|(
name|WILDCARD_ADDRESS
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

