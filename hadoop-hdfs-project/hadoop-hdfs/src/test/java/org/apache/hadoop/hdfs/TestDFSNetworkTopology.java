begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeStorageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * This class tests the correctness of storage type info stored in  * DFSNetworkTopology.  */
end_comment

begin_class
DECL|class|TestDFSNetworkTopology
specifier|public
class|class
name|TestDFSNetworkTopology
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestDFSNetworkTopology
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|CLUSTER
specifier|private
specifier|final
specifier|static
name|DFSNetworkTopology
name|CLUSTER
init|=
name|DFSNetworkTopology
operator|.
name|getInstance
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|dataNodes
specifier|private
name|DatanodeDescriptor
index|[]
name|dataNodes
decl_stmt|;
annotation|@
name|Rule
DECL|field|testTimeout
specifier|public
name|Timeout
name|testTimeout
init|=
operator|new
name|Timeout
argument_list|(
literal|30000
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|setupDatanodes ()
specifier|public
name|void
name|setupDatanodes
parameter_list|()
block|{
specifier|final
name|String
index|[]
name|racks
init|=
block|{
literal|"/l1/d1/r1"
block|,
literal|"/l1/d1/r1"
block|,
literal|"/l1/d1/r2"
block|,
literal|"/l1/d1/r2"
block|,
literal|"/l1/d1/r2"
block|,
literal|"/l1/d2/r3"
block|,
literal|"/l1/d2/r3"
block|,
literal|"/l1/d2/r3"
block|,
literal|"/l2/d3/r1"
block|,
literal|"/l2/d3/r2"
block|,
literal|"/l2/d3/r3"
block|,
literal|"/l2/d3/r4"
block|,
literal|"/l2/d3/r5"
block|,
literal|"/l2/d4/r1"
block|,
literal|"/l2/d4/r1"
block|,
literal|"/l2/d4/r1"
block|,
literal|"/l2/d4/r1"
block|,
literal|"/l2/d4/r1"
block|,
literal|"/l2/d4/r1"
block|,
literal|"/l2/d4/r1"
block|}
decl_stmt|;
specifier|final
name|String
index|[]
name|hosts
init|=
block|{
literal|"host1"
block|,
literal|"host2"
block|,
literal|"host3"
block|,
literal|"host4"
block|,
literal|"host5"
block|,
literal|"host6"
block|,
literal|"host7"
block|,
literal|"host8"
block|,
literal|"host9"
block|,
literal|"host10"
block|,
literal|"host11"
block|,
literal|"host12"
block|,
literal|"host13"
block|,
literal|"host14"
block|,
literal|"host15"
block|,
literal|"host16"
block|,
literal|"host17"
block|,
literal|"host18"
block|,
literal|"host19"
block|,
literal|"host20"
block|}
decl_stmt|;
specifier|final
name|StorageType
index|[]
name|types
init|=
block|{
name|StorageType
operator|.
name|ARCHIVE
block|,
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|,
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|RAM_DISK
block|,
name|StorageType
operator|.
name|SSD
block|,
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|RAM_DISK
block|,
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|,
name|StorageType
operator|.
name|ARCHIVE
block|,
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|RAM_DISK
block|,
name|StorageType
operator|.
name|RAM_DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|,
name|StorageType
operator|.
name|ARCHIVE
block|,
name|StorageType
operator|.
name|SSD
block|}
decl_stmt|;
specifier|final
name|DatanodeStorageInfo
index|[]
name|storages
init|=
name|DFSTestUtil
operator|.
name|createDatanodeStorageInfos
argument_list|(
literal|20
argument_list|,
name|racks
argument_list|,
name|hosts
argument_list|,
name|types
argument_list|)
decl_stmt|;
name|dataNodes
operator|=
name|DFSTestUtil
operator|.
name|toDatanodeDescriptor
argument_list|(
name|storages
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dataNodes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|CLUSTER
operator|.
name|add
argument_list|(
name|dataNodes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|dataNodes
index|[
literal|9
index|]
operator|.
name|setDecommissioned
argument_list|()
expr_stmt|;
name|dataNodes
index|[
literal|10
index|]
operator|.
name|setDecommissioned
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test getting the storage type info of subtree.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testGetStorageTypeInfo ()
specifier|public
name|void
name|testGetStorageTypeInfo
parameter_list|()
throws|throws
name|Exception
block|{
comment|// checking level = 2 nodes
name|DFSTopologyNodeImpl
name|d1
init|=
operator|(
name|DFSTopologyNodeImpl
operator|)
name|CLUSTER
operator|.
name|getNode
argument_list|(
literal|"/l1/d1"
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|EnumMap
argument_list|<
name|StorageType
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|d1info
init|=
name|d1
operator|.
name|getChildrenStorageInfo
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|d1info
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|d1info
operator|.
name|get
argument_list|(
literal|"r1"
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|&&
name|d1info
operator|.
name|get
argument_list|(
literal|"r2"
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|d1info
operator|.
name|get
argument_list|(
literal|"r1"
argument_list|)
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|d1info
operator|.
name|get
argument_list|(
literal|"r1"
argument_list|)
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
name|int
operator|)
name|d1info
operator|.
name|get
argument_list|(
literal|"r2"
argument_list|)
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|d1info
operator|.
name|get
argument_list|(
literal|"r2"
argument_list|)
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
argument_list|)
expr_stmt|;
name|DFSTopologyNodeImpl
name|d2
init|=
operator|(
name|DFSTopologyNodeImpl
operator|)
name|CLUSTER
operator|.
name|getNode
argument_list|(
literal|"/l1/d2"
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|EnumMap
argument_list|<
name|StorageType
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|d2info
init|=
name|d2
operator|.
name|getChildrenStorageInfo
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|d2info
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|d2info
operator|.
name|get
argument_list|(
literal|"r3"
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|d2info
operator|.
name|get
argument_list|(
literal|"r3"
argument_list|)
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|d2info
operator|.
name|get
argument_list|(
literal|"r3"
argument_list|)
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|RAM_DISK
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|d2info
operator|.
name|get
argument_list|(
literal|"r3"
argument_list|)
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|SSD
argument_list|)
argument_list|)
expr_stmt|;
name|DFSTopologyNodeImpl
name|d3
init|=
operator|(
name|DFSTopologyNodeImpl
operator|)
name|CLUSTER
operator|.
name|getNode
argument_list|(
literal|"/l2/d3"
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|EnumMap
argument_list|<
name|StorageType
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|d3info
init|=
name|d3
operator|.
name|getChildrenStorageInfo
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|d3info
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|d3info
operator|.
name|get
argument_list|(
literal|"r1"
argument_list|)
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|d3info
operator|.
name|get
argument_list|(
literal|"r2"
argument_list|)
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|RAM_DISK
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|d3info
operator|.
name|get
argument_list|(
literal|"r3"
argument_list|)
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|d3info
operator|.
name|get
argument_list|(
literal|"r4"
argument_list|)
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|d3info
operator|.
name|get
argument_list|(
literal|"r5"
argument_list|)
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
argument_list|)
expr_stmt|;
name|DFSTopologyNodeImpl
name|d4
init|=
operator|(
name|DFSTopologyNodeImpl
operator|)
name|CLUSTER
operator|.
name|getNode
argument_list|(
literal|"/l2/d4"
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|EnumMap
argument_list|<
name|StorageType
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|d4info
init|=
name|d4
operator|.
name|getChildrenStorageInfo
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|d4info
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
name|int
operator|)
name|d4info
operator|.
name|get
argument_list|(
literal|"r1"
argument_list|)
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
name|int
operator|)
name|d4info
operator|.
name|get
argument_list|(
literal|"r1"
argument_list|)
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|RAM_DISK
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
name|int
operator|)
name|d4info
operator|.
name|get
argument_list|(
literal|"r1"
argument_list|)
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|d4info
operator|.
name|get
argument_list|(
literal|"r1"
argument_list|)
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|SSD
argument_list|)
argument_list|)
expr_stmt|;
name|DFSTopologyNodeImpl
name|l1
init|=
operator|(
name|DFSTopologyNodeImpl
operator|)
name|CLUSTER
operator|.
name|getNode
argument_list|(
literal|"/l1"
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|EnumMap
argument_list|<
name|StorageType
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|l1info
init|=
name|l1
operator|.
name|getChildrenStorageInfo
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|l1info
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l1info
operator|.
name|get
argument_list|(
literal|"d1"
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|&&
name|l1info
operator|.
name|get
argument_list|(
literal|"d2"
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
name|int
operator|)
name|l1info
operator|.
name|get
argument_list|(
literal|"d1"
argument_list|)
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
operator|(
name|int
operator|)
name|l1info
operator|.
name|get
argument_list|(
literal|"d1"
argument_list|)
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|l1info
operator|.
name|get
argument_list|(
literal|"d2"
argument_list|)
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|l1info
operator|.
name|get
argument_list|(
literal|"d2"
argument_list|)
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|RAM_DISK
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|l1info
operator|.
name|get
argument_list|(
literal|"d2"
argument_list|)
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|SSD
argument_list|)
argument_list|)
expr_stmt|;
comment|// checking level = 1 nodes
name|DFSTopologyNodeImpl
name|l2
init|=
operator|(
name|DFSTopologyNodeImpl
operator|)
name|CLUSTER
operator|.
name|getNode
argument_list|(
literal|"/l2"
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|EnumMap
argument_list|<
name|StorageType
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|l2info
init|=
name|l2
operator|.
name|getChildrenStorageInfo
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|l2info
operator|.
name|get
argument_list|(
literal|"d3"
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|3
operator|&&
name|l2info
operator|.
name|get
argument_list|(
literal|"d4"
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|l2info
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
name|int
operator|)
name|l2info
operator|.
name|get
argument_list|(
literal|"d3"
argument_list|)
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
name|int
operator|)
name|l2info
operator|.
name|get
argument_list|(
literal|"d3"
argument_list|)
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|l2info
operator|.
name|get
argument_list|(
literal|"d3"
argument_list|)
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|RAM_DISK
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
name|int
operator|)
name|l2info
operator|.
name|get
argument_list|(
literal|"d4"
argument_list|)
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
name|int
operator|)
name|l2info
operator|.
name|get
argument_list|(
literal|"d4"
argument_list|)
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
name|int
operator|)
name|l2info
operator|.
name|get
argument_list|(
literal|"d4"
argument_list|)
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|RAM_DISK
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|l2info
operator|.
name|get
argument_list|(
literal|"d4"
argument_list|)
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|SSD
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the correctness of storage type info when nodes are added and removed.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testAddAndRemoveTopology ()
specifier|public
name|void
name|testAddAndRemoveTopology
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|newRack
init|=
block|{
literal|"/l1/d1/r1"
block|,
literal|"/l1/d1/r3"
block|,
literal|"/l1/d3/r3"
block|,
literal|"/l1/d3/r3"
block|}
decl_stmt|;
name|String
index|[]
name|newHost
init|=
block|{
literal|"nhost1"
block|,
literal|"nhost2"
block|,
literal|"nhost3"
block|,
literal|"nhost4"
block|}
decl_stmt|;
name|String
index|[]
name|newips
init|=
block|{
literal|"30.30.30.30"
block|,
literal|"31.31.31.31"
block|,
literal|"32.32.32.32"
block|,
literal|"33.33.33.33"
block|}
decl_stmt|;
name|StorageType
index|[]
name|newTypes
init|=
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|SSD
block|,
name|StorageType
operator|.
name|SSD
block|,
name|StorageType
operator|.
name|SSD
block|}
decl_stmt|;
name|DatanodeDescriptor
index|[]
name|newDD
init|=
operator|new
name|DatanodeDescriptor
index|[
literal|4
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|DatanodeStorageInfo
name|dsi
init|=
name|DFSTestUtil
operator|.
name|createDatanodeStorageInfo
argument_list|(
literal|"s"
operator|+
name|newHost
index|[
name|i
index|]
argument_list|,
name|newips
index|[
name|i
index|]
argument_list|,
name|newRack
index|[
name|i
index|]
argument_list|,
name|newHost
index|[
name|i
index|]
argument_list|,
name|newTypes
index|[
name|i
index|]
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|newDD
index|[
name|i
index|]
operator|=
name|dsi
operator|.
name|getDatanodeDescriptor
argument_list|()
expr_stmt|;
name|CLUSTER
operator|.
name|add
argument_list|(
name|newDD
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|DFSTopologyNodeImpl
name|d1
init|=
operator|(
name|DFSTopologyNodeImpl
operator|)
name|CLUSTER
operator|.
name|getNode
argument_list|(
literal|"/l1/d1"
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|EnumMap
argument_list|<
name|StorageType
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|d1info
init|=
name|d1
operator|.
name|getChildrenStorageInfo
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|d1info
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|d1info
operator|.
name|get
argument_list|(
literal|"r1"
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|&&
name|d1info
operator|.
name|get
argument_list|(
literal|"r2"
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|&&
name|d1info
operator|.
name|get
argument_list|(
literal|"r3"
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
name|int
operator|)
name|d1info
operator|.
name|get
argument_list|(
literal|"r1"
argument_list|)
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|d1info
operator|.
name|get
argument_list|(
literal|"r1"
argument_list|)
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
name|int
operator|)
name|d1info
operator|.
name|get
argument_list|(
literal|"r2"
argument_list|)
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|d1info
operator|.
name|get
argument_list|(
literal|"r2"
argument_list|)
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|d1info
operator|.
name|get
argument_list|(
literal|"r3"
argument_list|)
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|SSD
argument_list|)
argument_list|)
expr_stmt|;
name|DFSTopologyNodeImpl
name|d3
init|=
operator|(
name|DFSTopologyNodeImpl
operator|)
name|CLUSTER
operator|.
name|getNode
argument_list|(
literal|"/l1/d3"
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|EnumMap
argument_list|<
name|StorageType
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|d3info
init|=
name|d3
operator|.
name|getChildrenStorageInfo
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|d3info
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|d3info
operator|.
name|get
argument_list|(
literal|"r3"
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
name|int
operator|)
name|d3info
operator|.
name|get
argument_list|(
literal|"r3"
argument_list|)
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|SSD
argument_list|)
argument_list|)
expr_stmt|;
name|DFSTopologyNodeImpl
name|l1
init|=
operator|(
name|DFSTopologyNodeImpl
operator|)
name|CLUSTER
operator|.
name|getNode
argument_list|(
literal|"/l1"
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|EnumMap
argument_list|<
name|StorageType
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|l1info
init|=
name|l1
operator|.
name|getChildrenStorageInfo
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|l1info
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l1info
operator|.
name|get
argument_list|(
literal|"d1"
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|3
operator|&&
name|l1info
operator|.
name|get
argument_list|(
literal|"d2"
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|3
operator|&&
name|l1info
operator|.
name|get
argument_list|(
literal|"d3"
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
operator|(
name|int
operator|)
name|l1info
operator|.
name|get
argument_list|(
literal|"d1"
argument_list|)
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
name|int
operator|)
name|l1info
operator|.
name|get
argument_list|(
literal|"d1"
argument_list|)
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|l1info
operator|.
name|get
argument_list|(
literal|"d1"
argument_list|)
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|SSD
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|l1info
operator|.
name|get
argument_list|(
literal|"d2"
argument_list|)
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|SSD
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|l1info
operator|.
name|get
argument_list|(
literal|"d2"
argument_list|)
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|RAM_DISK
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|l1info
operator|.
name|get
argument_list|(
literal|"d2"
argument_list|)
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
name|int
operator|)
name|l1info
operator|.
name|get
argument_list|(
literal|"d3"
argument_list|)
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|SSD
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|CLUSTER
operator|.
name|remove
argument_list|(
name|newDD
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|// /d1/r3 should've been out, /d1/r1 should've been resumed
name|DFSTopologyNodeImpl
name|nd1
init|=
operator|(
name|DFSTopologyNodeImpl
operator|)
name|CLUSTER
operator|.
name|getNode
argument_list|(
literal|"/l1/d1"
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|EnumMap
argument_list|<
name|StorageType
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|nd1info
init|=
name|nd1
operator|.
name|getChildrenStorageInfo
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|nd1info
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nd1info
operator|.
name|get
argument_list|(
literal|"r1"
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|&&
name|nd1info
operator|.
name|get
argument_list|(
literal|"r2"
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|nd1info
operator|.
name|get
argument_list|(
literal|"r1"
argument_list|)
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|nd1info
operator|.
name|get
argument_list|(
literal|"r1"
argument_list|)
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
name|int
operator|)
name|nd1info
operator|.
name|get
argument_list|(
literal|"r2"
argument_list|)
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|nd1info
operator|.
name|get
argument_list|(
literal|"r2"
argument_list|)
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
argument_list|)
expr_stmt|;
comment|// /l1/d3 should've been out, and /l1/d1 should've been resumed
name|DFSTopologyNodeImpl
name|nl1
init|=
operator|(
name|DFSTopologyNodeImpl
operator|)
name|CLUSTER
operator|.
name|getNode
argument_list|(
literal|"/l1"
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|EnumMap
argument_list|<
name|StorageType
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|nl1info
init|=
name|nl1
operator|.
name|getChildrenStorageInfo
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|nl1info
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l1info
operator|.
name|get
argument_list|(
literal|"d1"
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|&&
name|l1info
operator|.
name|get
argument_list|(
literal|"d2"
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
name|int
operator|)
name|nl1info
operator|.
name|get
argument_list|(
literal|"d1"
argument_list|)
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
operator|(
name|int
operator|)
name|nl1info
operator|.
name|get
argument_list|(
literal|"d1"
argument_list|)
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|l1info
operator|.
name|get
argument_list|(
literal|"d2"
argument_list|)
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|l1info
operator|.
name|get
argument_list|(
literal|"d2"
argument_list|)
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|RAM_DISK
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|l1info
operator|.
name|get
argument_list|(
literal|"d2"
argument_list|)
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|SSD
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|CLUSTER
operator|.
name|getNode
argument_list|(
literal|"/l1/d3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

