begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.ksm
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|ksm
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ksm
operator|.
name|helpers
operator|.
name|KsmBucketInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|ksm
operator|.
name|exceptions
operator|.
name|KSMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|ksm
operator|.
name|exceptions
operator|.
name|KSMException
operator|.
name|ResultCodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|runners
operator|.
name|MockitoJUnitRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|any
import|;
end_import

begin_comment
comment|/**  * Tests BucketManagerImpl, mocks MetadataManager for testing.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|MockitoJUnitRunner
operator|.
name|class
argument_list|)
DECL|class|TestBucketManagerImpl
specifier|public
class|class
name|TestBucketManagerImpl
block|{
annotation|@
name|Rule
DECL|field|thrown
specifier|public
name|ExpectedException
name|thrown
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
DECL|method|getMetadataManagerMock (String... volumesToCreate)
specifier|private
name|MetadataManager
name|getMetadataManagerMock
parameter_list|(
name|String
modifier|...
name|volumesToCreate
parameter_list|)
throws|throws
name|IOException
block|{
name|MetadataManager
name|metadataManager
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|MetadataManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|metadataDB
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|ReadWriteLock
name|lock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|metadataManager
operator|.
name|writeLock
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|lock
operator|.
name|writeLock
argument_list|()
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|metadataManager
operator|.
name|readLock
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|lock
operator|.
name|readLock
argument_list|()
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|metadataManager
operator|.
name|getVolumeKey
argument_list|(
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
lambda|->
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
name|OzoneConsts
operator|.
name|KSM_VOLUME_PREFIX
operator|+
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|metadataManager
operator|.
name|getBucketKey
argument_list|(
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
lambda|->
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
name|OzoneConsts
operator|.
name|KSM_VOLUME_PREFIX
operator|+
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|0
index|]
operator|+
name|OzoneConsts
operator|.
name|KSM_BUCKET_PREFIX
operator|+
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|metadataDB
operator|.
name|put
argument_list|(
name|DFSUtil
operator|.
name|bytes2String
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|,
operator|(
name|byte
index|[]
operator|)
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|metadataManager
argument_list|)
operator|.
name|put
argument_list|(
name|any
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|metadataManager
operator|.
name|get
argument_list|(
name|any
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
lambda|->
name|metadataDB
operator|.
name|get
argument_list|(
name|DFSUtil
operator|.
name|bytes2String
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|volumeName
range|:
name|volumesToCreate
control|)
block|{
name|byte
index|[]
name|dummyVolumeInfo
init|=
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
name|volumeName
argument_list|)
decl_stmt|;
name|metadataDB
operator|.
name|put
argument_list|(
name|OzoneConsts
operator|.
name|KSM_VOLUME_PREFIX
operator|+
name|volumeName
argument_list|,
name|dummyVolumeInfo
argument_list|)
expr_stmt|;
block|}
return|return
name|metadataManager
return|;
block|}
annotation|@
name|Test
DECL|method|testCreateBucketWithoutVolume ()
specifier|public
name|void
name|testCreateBucketWithoutVolume
parameter_list|()
throws|throws
name|IOException
block|{
name|thrown
operator|.
name|expectMessage
argument_list|(
literal|"Volume doesn't exist"
argument_list|)
expr_stmt|;
name|MetadataManager
name|metaMgr
init|=
name|getMetadataManagerMock
argument_list|()
decl_stmt|;
try|try
block|{
name|BucketManager
name|bucketManager
init|=
operator|new
name|BucketManagerImpl
argument_list|(
name|metaMgr
argument_list|)
decl_stmt|;
name|KsmBucketInfo
name|bucketInfo
init|=
name|KsmBucketInfo
operator|.
name|newBuilder
argument_list|()
operator|.
name|setVolumeName
argument_list|(
literal|"sampleVol"
argument_list|)
operator|.
name|setBucketName
argument_list|(
literal|"bucketOne"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|bucketManager
operator|.
name|createBucket
argument_list|(
name|bucketInfo
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KSMException
name|ksmEx
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ResultCodes
operator|.
name|FAILED_VOLUME_NOT_FOUND
argument_list|,
name|ksmEx
operator|.
name|getResult
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ksmEx
throw|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCreateBucket ()
specifier|public
name|void
name|testCreateBucket
parameter_list|()
throws|throws
name|IOException
block|{
name|MetadataManager
name|metaMgr
init|=
name|getMetadataManagerMock
argument_list|(
literal|"sampleVol"
argument_list|)
decl_stmt|;
name|BucketManager
name|bucketManager
init|=
operator|new
name|BucketManagerImpl
argument_list|(
name|metaMgr
argument_list|)
decl_stmt|;
name|KsmBucketInfo
name|bucketInfo
init|=
name|KsmBucketInfo
operator|.
name|newBuilder
argument_list|()
operator|.
name|setVolumeName
argument_list|(
literal|"sampleVol"
argument_list|)
operator|.
name|setBucketName
argument_list|(
literal|"bucketOne"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|bucketManager
operator|.
name|createBucket
argument_list|(
name|bucketInfo
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|bucketManager
operator|.
name|getBucketInfo
argument_list|(
literal|"sampleVol"
argument_list|,
literal|"bucketOne"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateAlreadyExistingBucket ()
specifier|public
name|void
name|testCreateAlreadyExistingBucket
parameter_list|()
throws|throws
name|IOException
block|{
name|thrown
operator|.
name|expectMessage
argument_list|(
literal|"Bucket already exist"
argument_list|)
expr_stmt|;
name|MetadataManager
name|metaMgr
init|=
name|getMetadataManagerMock
argument_list|(
literal|"sampleVol"
argument_list|)
decl_stmt|;
try|try
block|{
name|BucketManager
name|bucketManager
init|=
operator|new
name|BucketManagerImpl
argument_list|(
name|metaMgr
argument_list|)
decl_stmt|;
name|KsmBucketInfo
name|bucketInfo
init|=
name|KsmBucketInfo
operator|.
name|newBuilder
argument_list|()
operator|.
name|setVolumeName
argument_list|(
literal|"sampleVol"
argument_list|)
operator|.
name|setBucketName
argument_list|(
literal|"bucketOne"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|bucketManager
operator|.
name|createBucket
argument_list|(
name|bucketInfo
argument_list|)
expr_stmt|;
name|bucketManager
operator|.
name|createBucket
argument_list|(
name|bucketInfo
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KSMException
name|ksmEx
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ResultCodes
operator|.
name|FAILED_BUCKET_ALREADY_EXISTS
argument_list|,
name|ksmEx
operator|.
name|getResult
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ksmEx
throw|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGetBucketInfoForInvalidBucket ()
specifier|public
name|void
name|testGetBucketInfoForInvalidBucket
parameter_list|()
throws|throws
name|IOException
block|{
name|thrown
operator|.
name|expectMessage
argument_list|(
literal|"Bucket not found"
argument_list|)
expr_stmt|;
try|try
block|{
name|MetadataManager
name|metaMgr
init|=
name|getMetadataManagerMock
argument_list|(
literal|"sampleVol"
argument_list|)
decl_stmt|;
name|BucketManager
name|bucketManager
init|=
operator|new
name|BucketManagerImpl
argument_list|(
name|metaMgr
argument_list|)
decl_stmt|;
name|bucketManager
operator|.
name|getBucketInfo
argument_list|(
literal|"sampleVol"
argument_list|,
literal|"bucketOne"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KSMException
name|ksmEx
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ResultCodes
operator|.
name|FAILED_BUCKET_NOT_FOUND
argument_list|,
name|ksmEx
operator|.
name|getResult
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ksmEx
throw|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGetBucketInfo ()
specifier|public
name|void
name|testGetBucketInfo
parameter_list|()
throws|throws
name|IOException
block|{
name|MetadataManager
name|metaMgr
init|=
name|getMetadataManagerMock
argument_list|(
literal|"sampleVol"
argument_list|)
decl_stmt|;
name|BucketManager
name|bucketManager
init|=
operator|new
name|BucketManagerImpl
argument_list|(
name|metaMgr
argument_list|)
decl_stmt|;
name|KsmBucketInfo
name|bucketInfo
init|=
name|KsmBucketInfo
operator|.
name|newBuilder
argument_list|()
operator|.
name|setVolumeName
argument_list|(
literal|"sampleVol"
argument_list|)
operator|.
name|setBucketName
argument_list|(
literal|"bucketOne"
argument_list|)
operator|.
name|setStorageType
argument_list|(
name|HdfsProtos
operator|.
name|StorageTypeProto
operator|.
name|DISK
argument_list|)
operator|.
name|setIsVersionEnabled
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|bucketManager
operator|.
name|createBucket
argument_list|(
name|bucketInfo
argument_list|)
expr_stmt|;
name|KsmBucketInfo
name|result
init|=
name|bucketManager
operator|.
name|getBucketInfo
argument_list|(
literal|"sampleVol"
argument_list|,
literal|"bucketOne"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"sampleVol"
argument_list|,
name|result
operator|.
name|getVolumeName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"bucketOne"
argument_list|,
name|result
operator|.
name|getBucketName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HdfsProtos
operator|.
name|StorageTypeProto
operator|.
name|DISK
argument_list|,
name|result
operator|.
name|getStorageType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|result
operator|.
name|getIsVersionEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

