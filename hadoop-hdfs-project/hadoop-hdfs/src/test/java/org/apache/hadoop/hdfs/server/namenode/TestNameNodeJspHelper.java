begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|startupprogress
operator|.
name|Phase
operator|.
name|LOADING_EDITS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|startupprogress
operator|.
name|Phase
operator|.
name|LOADING_FSIMAGE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|startupprogress
operator|.
name|Phase
operator|.
name|SAFEMODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|startupprogress
operator|.
name|Phase
operator|.
name|SAVING_CHECKPOINT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|atLeastOnce
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doAnswer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|jsp
operator|.
name|JspWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|JspHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|startupprogress
operator|.
name|StartupProgress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamenodeProtocols
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|UserParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|VersionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentCaptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|znerd
operator|.
name|xmlenc
operator|.
name|XMLOutputter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_class
DECL|class|TestNameNodeJspHelper
specifier|public
class|class
name|TestNameNodeJspHelper
block|{
DECL|field|DATA_NODES_AMOUNT
specifier|private
specifier|static
specifier|final
name|int
name|DATA_NODES_AMOUNT
init|=
literal|2
decl_stmt|;
DECL|field|cluster
specifier|private
specifier|static
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|Configuration
name|conf
decl_stmt|;
DECL|field|NAMENODE_ATTRIBUTE_KEY
specifier|private
specifier|static
specifier|final
name|String
name|NAMENODE_ATTRIBUTE_KEY
init|=
literal|"name.node"
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setUp ()
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|DATA_NODES_AMOUNT
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitClusterUp
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|tearDown ()
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDelegationToken ()
specifier|public
name|void
name|testDelegationToken
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|NamenodeProtocols
name|nn
init|=
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
decl_stmt|;
name|HttpServletRequest
name|request
init|=
name|mock
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"auser"
argument_list|)
decl_stmt|;
name|String
name|tokenString
init|=
name|NamenodeJspHelper
operator|.
name|getDelegationToken
argument_list|(
name|nn
argument_list|,
name|request
argument_list|,
name|conf
argument_list|,
name|ugi
argument_list|)
decl_stmt|;
comment|// tokenString returned must be null because security is disabled
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|tokenString
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSecurityModeText ()
specifier|public
name|void
name|testSecurityModeText
parameter_list|()
block|{
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|String
name|securityOnOff
init|=
name|NamenodeJspHelper
operator|.
name|getSecurityModeText
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"security mode doesn't match. Should be ON"
argument_list|,
name|securityOnOff
operator|.
name|contains
argument_list|(
literal|"ON"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Security is enabled
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"simple"
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|securityOnOff
operator|=
name|NamenodeJspHelper
operator|.
name|getSecurityModeText
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"security mode doesn't match. Should be OFF"
argument_list|,
name|securityOnOff
operator|.
name|contains
argument_list|(
literal|"OFF"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGenerateStartupProgress ()
specifier|public
name|void
name|testGenerateStartupProgress
parameter_list|()
throws|throws
name|Exception
block|{
name|cluster
operator|.
name|waitClusterUp
argument_list|()
expr_stmt|;
name|NamenodeJspHelper
operator|.
name|HealthJsp
name|jsp
init|=
operator|new
name|NamenodeJspHelper
operator|.
name|HealthJsp
argument_list|()
decl_stmt|;
name|StartupProgress
name|prog
init|=
name|NameNode
operator|.
name|getStartupProgress
argument_list|()
decl_stmt|;
name|JspWriter
name|out
init|=
name|mock
argument_list|(
name|JspWriter
operator|.
name|class
argument_list|)
decl_stmt|;
name|jsp
operator|.
name|generateStartupProgress
argument_list|(
name|out
argument_list|,
name|prog
argument_list|)
expr_stmt|;
name|ArgumentCaptor
argument_list|<
name|String
argument_list|>
name|captor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|out
argument_list|,
name|atLeastOnce
argument_list|()
argument_list|)
operator|.
name|println
argument_list|(
name|captor
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|contents
init|=
name|captor
operator|.
name|getAllValues
argument_list|()
decl_stmt|;
comment|// Verify 100% overall completion and all phases mentioned in output.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containsMatch
argument_list|(
name|contents
argument_list|,
literal|"Elapsed Time\\:"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containsMatch
argument_list|(
name|contents
argument_list|,
literal|"Percent Complete\\:.*?100\\.00%"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containsMatch
argument_list|(
name|contents
argument_list|,
name|LOADING_FSIMAGE
operator|.
name|getDescription
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containsMatch
argument_list|(
name|contents
argument_list|,
name|LOADING_EDITS
operator|.
name|getDescription
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containsMatch
argument_list|(
name|contents
argument_list|,
name|SAVING_CHECKPOINT
operator|.
name|getDescription
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containsMatch
argument_list|(
name|contents
argument_list|,
name|SAFEMODE
operator|.
name|getDescription
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetRollingUpgradeText ()
specifier|public
name|void
name|testGetRollingUpgradeText
parameter_list|()
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|NamenodeJspHelper
operator|.
name|getRollingUpgradeText
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests for non-null, non-empty NameNode label.    */
annotation|@
name|Test
DECL|method|testGetNameNodeLabel ()
specifier|public
name|void
name|testGetNameNodeLabel
parameter_list|()
block|{
name|String
name|nameNodeLabel
init|=
name|NamenodeJspHelper
operator|.
name|getNameNodeLabel
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|nameNodeLabel
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|nameNodeLabel
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests for non-null, non-empty NameNode label when called before    * initialization of the NameNode RPC server.    */
annotation|@
name|Test
DECL|method|testGetNameNodeLabelNullRpcServer ()
specifier|public
name|void
name|testGetNameNodeLabelNullRpcServer
parameter_list|()
block|{
name|NameNode
name|nn
init|=
name|mock
argument_list|(
name|NameNode
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|nn
operator|.
name|getRpcServer
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|String
name|nameNodeLabel
init|=
name|NamenodeJspHelper
operator|.
name|getNameNodeLabel
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|nameNodeLabel
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|nameNodeLabel
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests that passing a null FSNamesystem to generateSnapshotReport does not    * throw NullPointerException.    */
annotation|@
name|Test
DECL|method|testGenerateSnapshotReportNullNamesystem ()
specifier|public
name|void
name|testGenerateSnapshotReportNullNamesystem
parameter_list|()
throws|throws
name|Exception
block|{
name|NamenodeJspHelper
operator|.
name|generateSnapshotReport
argument_list|(
name|mock
argument_list|(
name|JspWriter
operator|.
name|class
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests that redirectToRandomDataNode does not throw NullPointerException if    * it finds a null FSNamesystem.    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IOException
operator|.
name|class
argument_list|)
DECL|method|testRedirectToRandomDataNodeNullNamesystem ()
specifier|public
name|void
name|testRedirectToRandomDataNodeNullNamesystem
parameter_list|()
throws|throws
name|Exception
block|{
name|NameNode
name|nn
init|=
name|mock
argument_list|(
name|NameNode
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|nn
operator|.
name|getNamesystem
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|ServletContext
name|context
init|=
name|mock
argument_list|(
name|ServletContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getAttribute
argument_list|(
literal|"name.node"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|nn
argument_list|)
expr_stmt|;
name|NamenodeJspHelper
operator|.
name|redirectToRandomDataNode
argument_list|(
name|context
argument_list|,
name|mock
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
argument_list|,
name|mock
argument_list|(
name|HttpServletResponse
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests that XMLBlockInfo does not throw NullPointerException if it finds a    * null FSNamesystem.    */
annotation|@
name|Test
DECL|method|testXMLBlockInfoNullNamesystem ()
specifier|public
name|void
name|testXMLBlockInfoNullNamesystem
parameter_list|()
throws|throws
name|IOException
block|{
name|XMLOutputter
name|doc
init|=
operator|new
name|XMLOutputter
argument_list|(
name|mock
argument_list|(
name|JspWriter
operator|.
name|class
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
operator|new
name|NamenodeJspHelper
operator|.
name|XMLBlockInfo
argument_list|(
literal|null
argument_list|,
literal|1L
argument_list|)
operator|.
name|toXML
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests that XMLCorruptBlockInfo does not throw NullPointerException if it    * finds a null FSNamesystem.    */
annotation|@
name|Test
DECL|method|testXMLCorruptBlockInfoNullNamesystem ()
specifier|public
name|void
name|testXMLCorruptBlockInfoNullNamesystem
parameter_list|()
throws|throws
name|IOException
block|{
name|XMLOutputter
name|doc
init|=
operator|new
name|XMLOutputter
argument_list|(
name|mock
argument_list|(
name|JspWriter
operator|.
name|class
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
operator|new
name|NamenodeJspHelper
operator|.
name|XMLCorruptBlockInfo
argument_list|(
literal|null
argument_list|,
name|mock
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|,
literal|10
argument_list|,
literal|1L
argument_list|)
operator|.
name|toXML
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
comment|/**    * Checks if the list contains any string that partially matches the regex.    *    * @param list List<String> containing strings to check    * @param regex String regex to check    * @return boolean true if some string in list partially matches regex    */
DECL|method|containsMatch (List<String> list, String regex)
specifier|private
specifier|static
name|boolean
name|containsMatch
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|list
parameter_list|,
name|String
name|regex
parameter_list|)
block|{
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|regex
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|str
range|:
name|list
control|)
block|{
if|if
condition|(
name|pattern
operator|.
name|matcher
argument_list|(
name|str
argument_list|)
operator|.
name|find
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|15000
argument_list|)
DECL|method|testGetRandomDatanode ()
specifier|public
name|void
name|testGetRandomDatanode
parameter_list|()
block|{
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|ImmutableSet
operator|.
name|of
argument_list|()
decl_stmt|;
name|NameNode
name|nameNode
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
decl_stmt|;
name|ImmutableSet
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
name|builder
init|=
name|ImmutableSet
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|DataNode
name|dataNode
range|:
name|cluster
operator|.
name|getDataNodes
argument_list|()
control|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|dataNode
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|set
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|DatanodeDescriptor
name|dnDescriptor
init|=
name|NamenodeJspHelper
operator|.
name|getRandomDatanode
argument_list|(
name|nameNode
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"testGetRandomDatanode error"
argument_list|,
name|set
operator|.
name|contains
argument_list|(
name|dnDescriptor
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|15000
argument_list|)
DECL|method|testNamenodeJspHelperRedirectToRandomDataNode ()
specifier|public
name|void
name|testNamenodeJspHelperRedirectToRandomDataNode
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|String
name|urlPart
init|=
literal|"browseDirectory.jsp?namenodeInfoPort="
decl_stmt|;
name|ServletContext
name|context
init|=
name|mock
argument_list|(
name|ServletContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|HttpServletRequest
name|request
init|=
name|mock
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|HttpServletResponse
name|resp
init|=
name|mock
argument_list|(
name|HttpServletResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|request
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"http"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
name|UserParam
operator|.
name|NAME
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"localuser"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getAttribute
argument_list|(
name|NAMENODE_ATTRIBUTE_KEY
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getAttribute
argument_list|(
name|JspHelper
operator|.
name|CURRENT_CONF
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ArgumentCaptor
argument_list|<
name|String
argument_list|>
name|captor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|resp
argument_list|)
operator|.
name|sendRedirect
argument_list|(
name|captor
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|NamenodeJspHelper
operator|.
name|redirectToRandomDataNode
argument_list|(
name|context
argument_list|,
name|request
argument_list|,
name|resp
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|captor
operator|.
name|getValue
argument_list|()
operator|.
name|contains
argument_list|(
name|urlPart
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|enum|DataNodeStatus
specifier|private
enum|enum
name|DataNodeStatus
block|{
DECL|enumConstant|LIVE
name|LIVE
argument_list|(
literal|"[Live Datanodes(| +):(| +)]\\d"
argument_list|)
block|,
DECL|enumConstant|DEAD
name|DEAD
argument_list|(
literal|"[Dead Datanodes(| +):(| +)]\\d"
argument_list|)
block|;
DECL|field|pattern
specifier|private
name|Pattern
name|pattern
decl_stmt|;
DECL|method|getPattern ()
specifier|public
name|Pattern
name|getPattern
parameter_list|()
block|{
return|return
name|pattern
return|;
block|}
DECL|method|DataNodeStatus (String line)
name|DataNodeStatus
parameter_list|(
name|String
name|line
parameter_list|)
block|{
name|this
operator|.
name|pattern
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkDeadLiveNodes (NameNode nameNode, int deadCount, int lifeCount)
specifier|private
name|void
name|checkDeadLiveNodes
parameter_list|(
name|NameNode
name|nameNode
parameter_list|,
name|int
name|deadCount
parameter_list|,
name|int
name|lifeCount
parameter_list|)
block|{
name|FSNamesystem
name|ns
init|=
name|nameNode
operator|.
name|getNamesystem
argument_list|()
decl_stmt|;
name|DatanodeManager
name|dm
init|=
name|ns
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|live
init|=
operator|new
name|ArrayList
argument_list|<
name|DatanodeDescriptor
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|dead
init|=
operator|new
name|ArrayList
argument_list|<
name|DatanodeDescriptor
argument_list|>
argument_list|()
decl_stmt|;
name|dm
operator|.
name|fetchDatanodes
argument_list|(
name|live
argument_list|,
name|dead
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"checkDeadLiveNodes error !!!"
argument_list|,
operator|(
name|live
operator|.
name|size
argument_list|()
operator|==
name|lifeCount
operator|)
operator|&&
name|dead
operator|.
name|size
argument_list|()
operator|==
name|deadCount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|15000
argument_list|)
DECL|method|testNodeListJspGenerateNodesList ()
specifier|public
name|void
name|testNodeListJspGenerateNodesList
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|output
decl_stmt|;
name|NameNode
name|nameNode
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
decl_stmt|;
name|ServletContext
name|context
init|=
name|mock
argument_list|(
name|ServletContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getAttribute
argument_list|(
literal|"name.node"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|nameNode
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getAttribute
argument_list|(
name|NameNodeHttpServer
operator|.
name|NAMENODE_ADDRESS_ATTRIBUTE_KEY
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getHttpAddress
argument_list|()
argument_list|)
expr_stmt|;
name|checkDeadLiveNodes
argument_list|(
name|nameNode
argument_list|,
literal|0
argument_list|,
name|DATA_NODES_AMOUNT
argument_list|)
expr_stmt|;
name|output
operator|=
name|getOutputFromGeneratedNodesList
argument_list|(
name|context
argument_list|,
name|DataNodeStatus
operator|.
name|LIVE
argument_list|)
expr_stmt|;
name|assertCounts
argument_list|(
name|DataNodeStatus
operator|.
name|LIVE
argument_list|,
name|output
argument_list|,
name|DATA_NODES_AMOUNT
argument_list|)
expr_stmt|;
name|output
operator|=
name|getOutputFromGeneratedNodesList
argument_list|(
name|context
argument_list|,
name|DataNodeStatus
operator|.
name|DEAD
argument_list|)
expr_stmt|;
name|assertCounts
argument_list|(
name|DataNodeStatus
operator|.
name|DEAD
argument_list|,
name|output
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|assertCounts (DataNodeStatus dataNodeStatus, String output, int expectedCount)
specifier|private
name|void
name|assertCounts
parameter_list|(
name|DataNodeStatus
name|dataNodeStatus
parameter_list|,
name|String
name|output
parameter_list|,
name|int
name|expectedCount
parameter_list|)
block|{
name|Matcher
name|matcher
init|=
name|DataNodeStatus
operator|.
name|LIVE
operator|.
name|getPattern
argument_list|()
operator|.
name|matcher
argument_list|(
name|output
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|String
name|digitLine
init|=
name|output
operator|.
name|substring
argument_list|(
name|matcher
operator|.
name|start
argument_list|()
argument_list|,
name|matcher
operator|.
name|end
argument_list|()
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"assertCounts error. actual != expected"
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|digitLine
argument_list|)
operator|==
name|expectedCount
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"assertCount matcher error"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getOutputFromGeneratedNodesList (ServletContext context, DataNodeStatus dnStatus)
specifier|private
name|String
name|getOutputFromGeneratedNodesList
parameter_list|(
name|ServletContext
name|context
parameter_list|,
name|DataNodeStatus
name|dnStatus
parameter_list|)
throws|throws
name|IOException
block|{
name|JspWriter
name|out
init|=
name|mock
argument_list|(
name|JspWriter
operator|.
name|class
argument_list|)
decl_stmt|;
name|ArgumentCaptor
argument_list|<
name|String
argument_list|>
name|captor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|NamenodeJspHelper
operator|.
name|NodeListJsp
name|nodelistjsp
init|=
operator|new
name|NamenodeJspHelper
operator|.
name|NodeListJsp
argument_list|()
decl_stmt|;
specifier|final
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|answer
parameter_list|(
name|InvocationOnMock
name|invok
parameter_list|)
block|{
name|Object
index|[]
name|args
init|=
name|invok
operator|.
name|getArguments
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
operator|(
name|String
operator|)
name|args
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|out
argument_list|)
operator|.
name|print
argument_list|(
name|captor
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|HttpServletRequest
name|request
init|=
name|mock
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|request
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"http"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"whatNodes"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|dnStatus
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|nodelistjsp
operator|.
name|generateNodesList
argument_list|(
name|context
argument_list|,
name|out
argument_list|,
name|request
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|15000
argument_list|)
DECL|method|testGetInodeLimitText ()
specifier|public
name|void
name|testGetInodeLimitText
parameter_list|()
block|{
name|NameNode
name|nameNode
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
decl_stmt|;
name|FSNamesystem
name|fsn
init|=
name|nameNode
operator|.
name|getNamesystem
argument_list|()
decl_stmt|;
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|patterns
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"files and directories"
argument_list|,
literal|"Heap Memory used"
argument_list|,
literal|"Non Heap Memory used"
argument_list|)
decl_stmt|;
name|String
name|line
init|=
name|NamenodeJspHelper
operator|.
name|getInodeLimitText
argument_list|(
name|fsn
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|pattern
range|:
name|patterns
control|)
block|{
name|assertTrue
argument_list|(
literal|"testInodeLimitText error "
operator|+
name|pattern
argument_list|,
name|line
operator|.
name|contains
argument_list|(
name|pattern
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|15000
argument_list|)
DECL|method|testGetVersionTable ()
specifier|public
name|void
name|testGetVersionTable
parameter_list|()
block|{
name|NameNode
name|nameNode
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
decl_stmt|;
name|FSNamesystem
name|fsn
init|=
name|nameNode
operator|.
name|getNamesystem
argument_list|()
decl_stmt|;
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|patterns
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|VersionInfo
operator|.
name|getVersion
argument_list|()
argument_list|,
name|VersionInfo
operator|.
name|getRevision
argument_list|()
argument_list|,
name|VersionInfo
operator|.
name|getUser
argument_list|()
argument_list|,
name|VersionInfo
operator|.
name|getBranch
argument_list|()
argument_list|,
name|fsn
operator|.
name|getClusterId
argument_list|()
argument_list|,
name|fsn
operator|.
name|getBlockPoolId
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|line
init|=
name|NamenodeJspHelper
operator|.
name|getVersionTable
argument_list|(
name|fsn
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|pattern
range|:
name|patterns
control|)
block|{
name|assertTrue
argument_list|(
literal|"testGetVersionTable error "
operator|+
name|pattern
argument_list|,
name|line
operator|.
name|contains
argument_list|(
name|pattern
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

