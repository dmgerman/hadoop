begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.metrics
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|metrics
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|top
operator|.
name|TopConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|top
operator|.
name|metrics
operator|.
name|TopMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsRecordBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|Interns
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|top
operator|.
name|metrics
operator|.
name|TopMetrics
operator|.
name|TOPMETRICS_METRICS_SOURCE_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MetricsAsserts
operator|.
name|getMetrics
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_comment
comment|/**  * Test for MetricsSource part of the {@link TopMetrics} impl.  */
end_comment

begin_class
DECL|class|TestTopMetrics
specifier|public
class|class
name|TestTopMetrics
block|{
annotation|@
name|Test
DECL|method|testPresence ()
specifier|public
name|void
name|testPresence
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|TopConf
name|topConf
init|=
operator|new
name|TopConf
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|TopMetrics
name|topMetrics
init|=
operator|new
name|TopMetrics
argument_list|(
name|conf
argument_list|,
name|topConf
operator|.
name|nntopReportingPeriodsMs
argument_list|)
decl_stmt|;
comment|// Dummy command
name|topMetrics
operator|.
name|report
argument_list|(
literal|"test"
argument_list|,
literal|"listStatus"
argument_list|)
expr_stmt|;
name|topMetrics
operator|.
name|report
argument_list|(
literal|"test"
argument_list|,
literal|"listStatus"
argument_list|)
expr_stmt|;
name|topMetrics
operator|.
name|report
argument_list|(
literal|"test"
argument_list|,
literal|"listStatus"
argument_list|)
expr_stmt|;
name|MetricsRecordBuilder
name|rb
init|=
name|getMetrics
argument_list|(
name|topMetrics
argument_list|)
decl_stmt|;
name|MetricsCollector
name|mc
init|=
name|rb
operator|.
name|parent
argument_list|()
decl_stmt|;
name|verify
argument_list|(
name|mc
argument_list|)
operator|.
name|addRecord
argument_list|(
name|TOPMETRICS_METRICS_SOURCE_NAME
operator|+
literal|".windowMs=60000"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mc
argument_list|)
operator|.
name|addRecord
argument_list|(
name|TOPMETRICS_METRICS_SOURCE_NAME
operator|+
literal|".windowMs=300000"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mc
argument_list|)
operator|.
name|addRecord
argument_list|(
name|TOPMETRICS_METRICS_SOURCE_NAME
operator|+
literal|".windowMs=1500000"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|rb
argument_list|,
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|addCounter
argument_list|(
name|Interns
operator|.
name|info
argument_list|(
literal|"op=listStatus.TotalCount"
argument_list|,
literal|"Total operation count"
argument_list|)
argument_list|,
literal|3L
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|rb
argument_list|,
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|addCounter
argument_list|(
name|Interns
operator|.
name|info
argument_list|(
literal|"op=*.TotalCount"
argument_list|,
literal|"Total operation count"
argument_list|)
argument_list|,
literal|3L
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|rb
argument_list|,
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|addCounter
argument_list|(
name|Interns
operator|.
name|info
argument_list|(
literal|"op=listStatus."
operator|+
literal|"user=test.count"
argument_list|,
literal|"Total operations performed by user"
argument_list|)
argument_list|,
literal|3L
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

