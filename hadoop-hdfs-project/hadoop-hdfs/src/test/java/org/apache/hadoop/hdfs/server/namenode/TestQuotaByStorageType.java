begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ContentSummary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DSQuotaExceededException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|QuotaByStorageTypeExceededException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|SnapshotTestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|allOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_class
DECL|class|TestQuotaByStorageType
specifier|public
class|class
name|TestQuotaByStorageType
block|{
DECL|field|BLOCKSIZE
specifier|private
specifier|static
specifier|final
name|int
name|BLOCKSIZE
init|=
literal|1024
decl_stmt|;
DECL|field|REPLICATION
specifier|private
specifier|static
specifier|final
name|short
name|REPLICATION
init|=
literal|3
decl_stmt|;
DECL|field|seed
specifier|private
specifier|static
specifier|final
name|long
name|seed
init|=
literal|0L
decl_stmt|;
DECL|field|dir
specifier|private
specifier|static
specifier|final
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/TestQuotaByStorageType"
argument_list|)
decl_stmt|;
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|fsdir
specifier|private
name|FSDirectory
name|fsdir
decl_stmt|;
DECL|field|dfs
specifier|private
name|DistributedFileSystem
name|dfs
decl_stmt|;
DECL|field|fsn
specifier|private
name|FSNamesystem
name|fsn
decl_stmt|;
DECL|field|LOG
specifier|protected
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestQuotaByStorageType
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|BLOCKSIZE
argument_list|)
expr_stmt|;
comment|// Setup a 3-node cluster and configure
comment|// each node with 1 SSD and 1 DISK without capacity limitation
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|REPLICATION
argument_list|)
operator|.
name|storageTypes
argument_list|(
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|SSD
block|,
name|StorageType
operator|.
name|DEFAULT
block|}
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|refreshClusterState
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|// Cluster state must be refreshed after each start/restart in the test
DECL|method|refreshClusterState ()
specifier|private
name|void
name|refreshClusterState
parameter_list|()
throws|throws
name|IOException
block|{
name|fsdir
operator|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getFSDirectory
argument_list|()
expr_stmt|;
name|dfs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|fsn
operator|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testQuotaByStorageTypeWithFileCreateOneSSD ()
specifier|public
name|void
name|testQuotaByStorageTypeWithFileCreateOneSSD
parameter_list|()
throws|throws
name|Exception
block|{
name|testQuotaByStorageTypeWithFileCreateCase
argument_list|(
name|HdfsConstants
operator|.
name|ONESSD_STORAGE_POLICY_NAME
argument_list|,
name|StorageType
operator|.
name|SSD
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testQuotaByStorageTypeWithFileCreateAllSSD ()
specifier|public
name|void
name|testQuotaByStorageTypeWithFileCreateAllSSD
parameter_list|()
throws|throws
name|Exception
block|{
name|testQuotaByStorageTypeWithFileCreateCase
argument_list|(
name|HdfsConstants
operator|.
name|ALLSSD_STORAGE_POLICY_NAME
argument_list|,
name|StorageType
operator|.
name|SSD
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
expr_stmt|;
block|}
DECL|method|testQuotaByStorageTypeWithFileCreateCase ( String storagePolicy, StorageType storageType, short replication)
name|void
name|testQuotaByStorageTypeWithFileCreateCase
parameter_list|(
name|String
name|storagePolicy
parameter_list|,
name|StorageType
name|storageType
parameter_list|,
name|short
name|replication
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|Path
name|createdFile1
init|=
operator|new
name|Path
argument_list|(
name|foo
argument_list|,
literal|"created_file1.data"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|foo
argument_list|)
expr_stmt|;
comment|// set storage policy on directory "foo" to storagePolicy
name|dfs
operator|.
name|setStoragePolicy
argument_list|(
name|foo
argument_list|,
name|storagePolicy
argument_list|)
expr_stmt|;
comment|// set quota by storage type on directory "foo"
name|dfs
operator|.
name|setQuotaByStorageType
argument_list|(
name|foo
argument_list|,
name|storageType
argument_list|,
name|BLOCKSIZE
operator|*
literal|10
argument_list|)
expr_stmt|;
name|INode
name|fnode
init|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|foo
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fnode
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fnode
operator|.
name|isQuotaSet
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create file of size 2 * BLOCKSIZE under directory "foo"
name|long
name|file1Len
init|=
name|BLOCKSIZE
operator|*
literal|2
operator|+
name|BLOCKSIZE
operator|/
literal|2
decl_stmt|;
name|int
name|bufLen
init|=
name|BLOCKSIZE
operator|/
literal|16
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|createdFile1
argument_list|,
name|bufLen
argument_list|,
name|file1Len
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
comment|// Verify space consumed and remaining quota
name|long
name|storageTypeConsumed
init|=
name|fnode
operator|.
name|asDirectory
argument_list|()
operator|.
name|getDirectoryWithQuotaFeature
argument_list|()
operator|.
name|getSpaceConsumed
argument_list|()
operator|.
name|getTypeSpaces
argument_list|()
operator|.
name|get
argument_list|(
name|storageType
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|file1Len
operator|*
name|replication
argument_list|,
name|storageTypeConsumed
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testQuotaByStorageTypeWithFileCreateAppend ()
specifier|public
name|void
name|testQuotaByStorageTypeWithFileCreateAppend
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|Path
name|createdFile1
init|=
operator|new
name|Path
argument_list|(
name|foo
argument_list|,
literal|"created_file1.data"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|foo
argument_list|)
expr_stmt|;
comment|// set storage policy on directory "foo" to ONESSD
name|dfs
operator|.
name|setStoragePolicy
argument_list|(
name|foo
argument_list|,
name|HdfsConstants
operator|.
name|ONESSD_STORAGE_POLICY_NAME
argument_list|)
expr_stmt|;
comment|// set quota by storage type on directory "foo"
name|dfs
operator|.
name|setQuotaByStorageType
argument_list|(
name|foo
argument_list|,
name|StorageType
operator|.
name|SSD
argument_list|,
name|BLOCKSIZE
operator|*
literal|4
argument_list|)
expr_stmt|;
name|INode
name|fnode
init|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|foo
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fnode
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fnode
operator|.
name|isQuotaSet
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create file of size 2 * BLOCKSIZE under directory "foo"
name|long
name|file1Len
init|=
name|BLOCKSIZE
operator|*
literal|2
decl_stmt|;
name|int
name|bufLen
init|=
name|BLOCKSIZE
operator|/
literal|16
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|createdFile1
argument_list|,
name|bufLen
argument_list|,
name|file1Len
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
comment|// Verify space consumed and remaining quota
name|long
name|ssdConsumed
init|=
name|fnode
operator|.
name|asDirectory
argument_list|()
operator|.
name|getDirectoryWithQuotaFeature
argument_list|()
operator|.
name|getSpaceConsumed
argument_list|()
operator|.
name|getTypeSpaces
argument_list|()
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|SSD
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|file1Len
argument_list|,
name|ssdConsumed
argument_list|)
expr_stmt|;
comment|// append several blocks
name|int
name|appendLen
init|=
name|BLOCKSIZE
operator|*
literal|2
decl_stmt|;
name|DFSTestUtil
operator|.
name|appendFile
argument_list|(
name|dfs
argument_list|,
name|createdFile1
argument_list|,
name|appendLen
argument_list|)
expr_stmt|;
name|file1Len
operator|+=
name|appendLen
expr_stmt|;
name|ssdConsumed
operator|=
name|fnode
operator|.
name|asDirectory
argument_list|()
operator|.
name|getDirectoryWithQuotaFeature
argument_list|()
operator|.
name|getSpaceConsumed
argument_list|()
operator|.
name|getTypeSpaces
argument_list|()
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|SSD
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|file1Len
argument_list|,
name|ssdConsumed
argument_list|)
expr_stmt|;
name|ContentSummary
name|cs
init|=
name|dfs
operator|.
name|getContentSummary
argument_list|(
name|foo
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|cs
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|,
name|file1Len
operator|*
name|REPLICATION
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|cs
operator|.
name|getTypeConsumed
argument_list|(
name|StorageType
operator|.
name|SSD
argument_list|)
argument_list|,
name|file1Len
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|cs
operator|.
name|getTypeConsumed
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|)
argument_list|,
name|file1Len
operator|*
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testQuotaByStorageTypeWithFileCreateDelete ()
specifier|public
name|void
name|testQuotaByStorageTypeWithFileCreateDelete
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|Path
name|createdFile1
init|=
operator|new
name|Path
argument_list|(
name|foo
argument_list|,
literal|"created_file1.data"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|foo
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|setStoragePolicy
argument_list|(
name|foo
argument_list|,
name|HdfsConstants
operator|.
name|ONESSD_STORAGE_POLICY_NAME
argument_list|)
expr_stmt|;
comment|// set quota by storage type on directory "foo"
name|dfs
operator|.
name|setQuotaByStorageType
argument_list|(
name|foo
argument_list|,
name|StorageType
operator|.
name|SSD
argument_list|,
name|BLOCKSIZE
operator|*
literal|10
argument_list|)
expr_stmt|;
name|INode
name|fnode
init|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|foo
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fnode
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fnode
operator|.
name|isQuotaSet
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create file of size 2.5 * BLOCKSIZE under directory "foo"
name|long
name|file1Len
init|=
name|BLOCKSIZE
operator|*
literal|2
operator|+
name|BLOCKSIZE
operator|/
literal|2
decl_stmt|;
name|int
name|bufLen
init|=
name|BLOCKSIZE
operator|/
literal|16
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|createdFile1
argument_list|,
name|bufLen
argument_list|,
name|file1Len
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
comment|// Verify space consumed and remaining quota
name|long
name|storageTypeConsumed
init|=
name|fnode
operator|.
name|asDirectory
argument_list|()
operator|.
name|getDirectoryWithQuotaFeature
argument_list|()
operator|.
name|getSpaceConsumed
argument_list|()
operator|.
name|getTypeSpaces
argument_list|()
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|SSD
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|file1Len
argument_list|,
name|storageTypeConsumed
argument_list|)
expr_stmt|;
comment|// Delete file and verify the consumed space of the storage type is updated
name|dfs
operator|.
name|delete
argument_list|(
name|createdFile1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|storageTypeConsumed
operator|=
name|fnode
operator|.
name|asDirectory
argument_list|()
operator|.
name|getDirectoryWithQuotaFeature
argument_list|()
operator|.
name|getSpaceConsumed
argument_list|()
operator|.
name|getTypeSpaces
argument_list|()
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|SSD
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|storageTypeConsumed
argument_list|)
expr_stmt|;
name|QuotaCounts
name|counts
init|=
name|fnode
operator|.
name|computeQuotaUsage
argument_list|(
name|fsn
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getStoragePolicySuite
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|fnode
operator|.
name|dumpTreeRecursively
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|,
name|counts
operator|.
name|getTypeSpaces
argument_list|()
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|SSD
argument_list|)
argument_list|)
expr_stmt|;
name|ContentSummary
name|cs
init|=
name|dfs
operator|.
name|getContentSummary
argument_list|(
name|foo
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|cs
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|cs
operator|.
name|getTypeConsumed
argument_list|(
name|StorageType
operator|.
name|SSD
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|cs
operator|.
name|getTypeConsumed
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testQuotaByStorageTypeWithFileCreateRename ()
specifier|public
name|void
name|testQuotaByStorageTypeWithFileCreateRename
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|foo
argument_list|)
expr_stmt|;
name|Path
name|createdFile1foo
init|=
operator|new
name|Path
argument_list|(
name|foo
argument_list|,
literal|"created_file1.data"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|bar
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|bar
argument_list|)
expr_stmt|;
name|Path
name|createdFile1bar
init|=
operator|new
name|Path
argument_list|(
name|bar
argument_list|,
literal|"created_file1.data"
argument_list|)
decl_stmt|;
comment|// set storage policy on directory "foo" and "bar" to ONESSD
name|dfs
operator|.
name|setStoragePolicy
argument_list|(
name|foo
argument_list|,
name|HdfsConstants
operator|.
name|ONESSD_STORAGE_POLICY_NAME
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|setStoragePolicy
argument_list|(
name|bar
argument_list|,
name|HdfsConstants
operator|.
name|ONESSD_STORAGE_POLICY_NAME
argument_list|)
expr_stmt|;
comment|// set quota by storage type on directory "foo"
name|dfs
operator|.
name|setQuotaByStorageType
argument_list|(
name|foo
argument_list|,
name|StorageType
operator|.
name|SSD
argument_list|,
name|BLOCKSIZE
operator|*
literal|4
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|setQuotaByStorageType
argument_list|(
name|bar
argument_list|,
name|StorageType
operator|.
name|SSD
argument_list|,
name|BLOCKSIZE
operator|*
literal|2
argument_list|)
expr_stmt|;
name|INode
name|fnode
init|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|foo
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fnode
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fnode
operator|.
name|isQuotaSet
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create file of size 3 * BLOCKSIZE under directory "foo"
name|long
name|file1Len
init|=
name|BLOCKSIZE
operator|*
literal|3
decl_stmt|;
name|int
name|bufLen
init|=
name|BLOCKSIZE
operator|/
literal|16
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|createdFile1foo
argument_list|,
name|bufLen
argument_list|,
name|file1Len
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
comment|// Verify space consumed and remaining quota
name|long
name|ssdConsumed
init|=
name|fnode
operator|.
name|asDirectory
argument_list|()
operator|.
name|getDirectoryWithQuotaFeature
argument_list|()
operator|.
name|getSpaceConsumed
argument_list|()
operator|.
name|getTypeSpaces
argument_list|()
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|SSD
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|file1Len
argument_list|,
name|ssdConsumed
argument_list|)
expr_stmt|;
comment|// move file from foo to bar
try|try
block|{
name|dfs
operator|.
name|rename
argument_list|(
name|createdFile1foo
argument_list|,
name|createdFile1bar
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have failed with QuotaByStorageTypeExceededException "
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got expected exception "
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
name|ContentSummary
name|cs
init|=
name|dfs
operator|.
name|getContentSummary
argument_list|(
name|foo
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|cs
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|,
name|file1Len
operator|*
name|REPLICATION
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|cs
operator|.
name|getTypeConsumed
argument_list|(
name|StorageType
operator|.
name|SSD
argument_list|)
argument_list|,
name|file1Len
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|cs
operator|.
name|getTypeConsumed
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|)
argument_list|,
name|file1Len
operator|*
literal|2
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test if the quota can be correctly updated for create file even    * QuotaByStorageTypeExceededException is thrown    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testQuotaByStorageTypeExceptionWithFileCreate ()
specifier|public
name|void
name|testQuotaByStorageTypeExceptionWithFileCreate
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|Path
name|createdFile1
init|=
operator|new
name|Path
argument_list|(
name|foo
argument_list|,
literal|"created_file1.data"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|foo
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|setStoragePolicy
argument_list|(
name|foo
argument_list|,
name|HdfsConstants
operator|.
name|ONESSD_STORAGE_POLICY_NAME
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|setQuotaByStorageType
argument_list|(
name|foo
argument_list|,
name|StorageType
operator|.
name|SSD
argument_list|,
name|BLOCKSIZE
operator|*
literal|4
argument_list|)
expr_stmt|;
name|INode
name|fnode
init|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|foo
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fnode
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fnode
operator|.
name|isQuotaSet
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create the 1st file of size 2 * BLOCKSIZE under directory "foo" and expect no exception
name|long
name|file1Len
init|=
name|BLOCKSIZE
operator|*
literal|2
decl_stmt|;
name|int
name|bufLen
init|=
name|BLOCKSIZE
operator|/
literal|16
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|createdFile1
argument_list|,
name|bufLen
argument_list|,
name|file1Len
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|long
name|currentSSDConsumed
init|=
name|fnode
operator|.
name|asDirectory
argument_list|()
operator|.
name|getDirectoryWithQuotaFeature
argument_list|()
operator|.
name|getSpaceConsumed
argument_list|()
operator|.
name|getTypeSpaces
argument_list|()
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|SSD
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|file1Len
argument_list|,
name|currentSSDConsumed
argument_list|)
expr_stmt|;
comment|// Create the 2nd file of size 1.5 * BLOCKSIZE under directory "foo" and expect no exception
name|Path
name|createdFile2
init|=
operator|new
name|Path
argument_list|(
name|foo
argument_list|,
literal|"created_file2.data"
argument_list|)
decl_stmt|;
name|long
name|file2Len
init|=
name|BLOCKSIZE
operator|+
name|BLOCKSIZE
operator|/
literal|2
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|createdFile2
argument_list|,
name|bufLen
argument_list|,
name|file2Len
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|currentSSDConsumed
operator|=
name|fnode
operator|.
name|asDirectory
argument_list|()
operator|.
name|getDirectoryWithQuotaFeature
argument_list|()
operator|.
name|getSpaceConsumed
argument_list|()
operator|.
name|getTypeSpaces
argument_list|()
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|SSD
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|file1Len
operator|+
name|file2Len
argument_list|,
name|currentSSDConsumed
argument_list|)
expr_stmt|;
comment|// Create the 3rd file of size BLOCKSIZE under directory "foo" and expect quota exceeded exception
name|Path
name|createdFile3
init|=
operator|new
name|Path
argument_list|(
name|foo
argument_list|,
literal|"created_file3.data"
argument_list|)
decl_stmt|;
name|long
name|file3Len
init|=
name|BLOCKSIZE
decl_stmt|;
try|try
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|createdFile3
argument_list|,
name|bufLen
argument_list|,
name|file3Len
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have failed with QuotaByStorageTypeExceededException "
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got expected exception "
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|currentSSDConsumed
operator|=
name|fnode
operator|.
name|asDirectory
argument_list|()
operator|.
name|getDirectoryWithQuotaFeature
argument_list|()
operator|.
name|getSpaceConsumed
argument_list|()
operator|.
name|getTypeSpaces
argument_list|()
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|SSD
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|file1Len
operator|+
name|file2Len
argument_list|,
name|currentSSDConsumed
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testQuotaByStorageTypeParentOffChildOff ()
specifier|public
name|void
name|testQuotaByStorageTypeParentOffChildOff
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|parent
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"parent"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|child
init|=
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"child"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|setStoragePolicy
argument_list|(
name|parent
argument_list|,
name|HdfsConstants
operator|.
name|ONESSD_STORAGE_POLICY_NAME
argument_list|)
expr_stmt|;
comment|// Create file of size 2.5 * BLOCKSIZE under child directory.
comment|// Since both parent and child directory do not have SSD quota set,
comment|// expect succeed without exception
name|Path
name|createdFile1
init|=
operator|new
name|Path
argument_list|(
name|child
argument_list|,
literal|"created_file1.data"
argument_list|)
decl_stmt|;
name|long
name|file1Len
init|=
name|BLOCKSIZE
operator|*
literal|2
operator|+
name|BLOCKSIZE
operator|/
literal|2
decl_stmt|;
name|int
name|bufLen
init|=
name|BLOCKSIZE
operator|/
literal|16
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|createdFile1
argument_list|,
name|bufLen
argument_list|,
name|file1Len
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
comment|// Verify SSD usage at the root level as both parent/child don't have DirectoryWithQuotaFeature
name|INode
name|fnode
init|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|long
name|ssdConsumed
init|=
name|fnode
operator|.
name|asDirectory
argument_list|()
operator|.
name|getDirectoryWithQuotaFeature
argument_list|()
operator|.
name|getSpaceConsumed
argument_list|()
operator|.
name|getTypeSpaces
argument_list|()
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|SSD
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|file1Len
argument_list|,
name|ssdConsumed
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testQuotaByStorageTypeParentOffChildOn ()
specifier|public
name|void
name|testQuotaByStorageTypeParentOffChildOn
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|parent
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"parent"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|child
init|=
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"child"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|setStoragePolicy
argument_list|(
name|parent
argument_list|,
name|HdfsConstants
operator|.
name|ONESSD_STORAGE_POLICY_NAME
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|setQuotaByStorageType
argument_list|(
name|child
argument_list|,
name|StorageType
operator|.
name|SSD
argument_list|,
literal|2
operator|*
name|BLOCKSIZE
argument_list|)
expr_stmt|;
comment|// Create file of size 2.5 * BLOCKSIZE under child directory
comment|// Since child directory have SSD quota of 2 * BLOCKSIZE,
comment|// expect an exception when creating files under child directory.
name|Path
name|createdFile1
init|=
operator|new
name|Path
argument_list|(
name|child
argument_list|,
literal|"created_file1.data"
argument_list|)
decl_stmt|;
name|long
name|file1Len
init|=
name|BLOCKSIZE
operator|*
literal|2
operator|+
name|BLOCKSIZE
operator|/
literal|2
decl_stmt|;
name|int
name|bufLen
init|=
name|BLOCKSIZE
operator|/
literal|16
decl_stmt|;
try|try
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|createdFile1
argument_list|,
name|bufLen
argument_list|,
name|file1Len
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have failed with QuotaByStorageTypeExceededException "
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got expected exception "
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testQuotaByStorageTypeParentOnChildOff ()
specifier|public
name|void
name|testQuotaByStorageTypeParentOnChildOff
parameter_list|()
throws|throws
name|Exception
block|{
name|short
name|replication
init|=
literal|1
decl_stmt|;
specifier|final
name|Path
name|parent
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"parent"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|child
init|=
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"child"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|setStoragePolicy
argument_list|(
name|parent
argument_list|,
name|HdfsConstants
operator|.
name|ONESSD_STORAGE_POLICY_NAME
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|setQuotaByStorageType
argument_list|(
name|parent
argument_list|,
name|StorageType
operator|.
name|SSD
argument_list|,
literal|3
operator|*
name|BLOCKSIZE
argument_list|)
expr_stmt|;
comment|// Create file of size 2.5 * BLOCKSIZE under child directory
comment|// Verify parent Quota applies
name|Path
name|createdFile1
init|=
operator|new
name|Path
argument_list|(
name|child
argument_list|,
literal|"created_file1.data"
argument_list|)
decl_stmt|;
name|long
name|file1Len
init|=
name|BLOCKSIZE
operator|*
literal|2
operator|+
name|BLOCKSIZE
operator|/
literal|2
decl_stmt|;
name|int
name|bufLen
init|=
name|BLOCKSIZE
operator|/
literal|16
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|createdFile1
argument_list|,
name|bufLen
argument_list|,
name|file1Len
argument_list|,
name|BLOCKSIZE
argument_list|,
name|replication
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|INode
name|fnode
init|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|parent
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fnode
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fnode
operator|.
name|isQuotaSet
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|currentSSDConsumed
init|=
name|fnode
operator|.
name|asDirectory
argument_list|()
operator|.
name|getDirectoryWithQuotaFeature
argument_list|()
operator|.
name|getSpaceConsumed
argument_list|()
operator|.
name|getTypeSpaces
argument_list|()
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|SSD
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|file1Len
argument_list|,
name|currentSSDConsumed
argument_list|)
expr_stmt|;
comment|// Create the 2nd file of size BLOCKSIZE under child directory and expect quota exceeded exception
name|Path
name|createdFile2
init|=
operator|new
name|Path
argument_list|(
name|child
argument_list|,
literal|"created_file2.data"
argument_list|)
decl_stmt|;
name|long
name|file2Len
init|=
name|BLOCKSIZE
decl_stmt|;
try|try
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|createdFile2
argument_list|,
name|bufLen
argument_list|,
name|file2Len
argument_list|,
name|BLOCKSIZE
argument_list|,
name|replication
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have failed with QuotaByStorageTypeExceededException "
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got expected exception "
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|currentSSDConsumed
operator|=
name|fnode
operator|.
name|asDirectory
argument_list|()
operator|.
name|getDirectoryWithQuotaFeature
argument_list|()
operator|.
name|getSpaceConsumed
argument_list|()
operator|.
name|getTypeSpaces
argument_list|()
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|SSD
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|file1Len
argument_list|,
name|currentSSDConsumed
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testQuotaByStorageTypeParentOnChildOn ()
specifier|public
name|void
name|testQuotaByStorageTypeParentOnChildOn
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|parent
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"parent"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|child
init|=
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"child"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|setStoragePolicy
argument_list|(
name|parent
argument_list|,
name|HdfsConstants
operator|.
name|ONESSD_STORAGE_POLICY_NAME
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|setQuotaByStorageType
argument_list|(
name|parent
argument_list|,
name|StorageType
operator|.
name|SSD
argument_list|,
literal|2
operator|*
name|BLOCKSIZE
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|setQuotaByStorageType
argument_list|(
name|child
argument_list|,
name|StorageType
operator|.
name|SSD
argument_list|,
literal|3
operator|*
name|BLOCKSIZE
argument_list|)
expr_stmt|;
comment|// Create file of size 2.5 * BLOCKSIZE under child directory
comment|// Verify parent Quota applies
name|Path
name|createdFile1
init|=
operator|new
name|Path
argument_list|(
name|child
argument_list|,
literal|"created_file1.data"
argument_list|)
decl_stmt|;
name|long
name|file1Len
init|=
name|BLOCKSIZE
operator|*
literal|2
operator|+
name|BLOCKSIZE
operator|/
literal|2
decl_stmt|;
name|int
name|bufLen
init|=
name|BLOCKSIZE
operator|/
literal|16
decl_stmt|;
try|try
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|createdFile1
argument_list|,
name|bufLen
argument_list|,
name|file1Len
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have failed with QuotaByStorageTypeExceededException "
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got expected exception "
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Both traditional space quota and the storage type quota for SSD are set and    * not exceeded.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testQuotaByStorageTypeWithTraditionalQuota ()
specifier|public
name|void
name|testQuotaByStorageTypeWithTraditionalQuota
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|foo
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|setStoragePolicy
argument_list|(
name|foo
argument_list|,
name|HdfsConstants
operator|.
name|ONESSD_STORAGE_POLICY_NAME
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|setQuotaByStorageType
argument_list|(
name|foo
argument_list|,
name|StorageType
operator|.
name|SSD
argument_list|,
name|BLOCKSIZE
operator|*
literal|10
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|setQuota
argument_list|(
name|foo
argument_list|,
name|Long
operator|.
name|MAX_VALUE
operator|-
literal|1
argument_list|,
name|REPLICATION
operator|*
name|BLOCKSIZE
operator|*
literal|10
argument_list|)
expr_stmt|;
name|INode
name|fnode
init|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|foo
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fnode
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fnode
operator|.
name|isQuotaSet
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|createdFile
init|=
operator|new
name|Path
argument_list|(
name|foo
argument_list|,
literal|"created_file.data"
argument_list|)
decl_stmt|;
name|long
name|fileLen
init|=
name|BLOCKSIZE
operator|*
literal|2
operator|+
name|BLOCKSIZE
operator|/
literal|2
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|createdFile
argument_list|,
name|BLOCKSIZE
operator|/
literal|16
argument_list|,
name|fileLen
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|QuotaCounts
name|cnt
init|=
name|fnode
operator|.
name|asDirectory
argument_list|()
operator|.
name|getDirectoryWithQuotaFeature
argument_list|()
operator|.
name|getSpaceConsumed
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cnt
operator|.
name|getNameSpace
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fileLen
operator|*
name|REPLICATION
argument_list|,
name|cnt
operator|.
name|getStorageSpace
argument_list|()
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|delete
argument_list|(
name|createdFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QuotaCounts
name|cntAfterDelete
init|=
name|fnode
operator|.
name|asDirectory
argument_list|()
operator|.
name|getDirectoryWithQuotaFeature
argument_list|()
operator|.
name|getSpaceConsumed
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cntAfterDelete
operator|.
name|getNameSpace
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cntAfterDelete
operator|.
name|getStorageSpace
argument_list|()
argument_list|)
expr_stmt|;
comment|// Validate the computeQuotaUsage()
name|QuotaCounts
name|counts
init|=
name|fnode
operator|.
name|computeQuotaUsage
argument_list|(
name|fsn
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getStoragePolicySuite
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|fnode
operator|.
name|dumpTreeRecursively
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|,
name|counts
operator|.
name|getNameSpace
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fnode
operator|.
name|dumpTreeRecursively
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|,
name|counts
operator|.
name|getStorageSpace
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Both traditional space quota and the storage type quota for SSD are set and    * exceeded. expect DSQuotaExceededException is thrown as we check traditional    * space quota first and then storage type quota.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testQuotaByStorageTypeAndTraditionalQuotaException1 ()
specifier|public
name|void
name|testQuotaByStorageTypeAndTraditionalQuotaException1
parameter_list|()
throws|throws
name|Exception
block|{
name|testQuotaByStorageTypeOrTraditionalQuotaExceededCase
argument_list|(
literal|4
operator|*
name|REPLICATION
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
name|REPLICATION
argument_list|)
expr_stmt|;
block|}
comment|/**    * Both traditional space quota and the storage type quota for SSD are set and    * SSD quota is exceeded but traditional space quota is not exceeded.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testQuotaByStorageTypeAndTraditionalQuotaException2 ()
specifier|public
name|void
name|testQuotaByStorageTypeAndTraditionalQuotaException2
parameter_list|()
throws|throws
name|Exception
block|{
name|testQuotaByStorageTypeOrTraditionalQuotaExceededCase
argument_list|(
literal|5
operator|*
name|REPLICATION
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
name|REPLICATION
argument_list|)
expr_stmt|;
block|}
comment|/**    * Both traditional space quota and the storage type quota for SSD are set and    * traditional space quota is exceeded but SSD quota is not exceeded.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testQuotaByStorageTypeAndTraditionalQuotaException3 ()
specifier|public
name|void
name|testQuotaByStorageTypeAndTraditionalQuotaException3
parameter_list|()
throws|throws
name|Exception
block|{
name|testQuotaByStorageTypeOrTraditionalQuotaExceededCase
argument_list|(
literal|4
operator|*
name|REPLICATION
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|,
name|REPLICATION
argument_list|)
expr_stmt|;
block|}
DECL|method|testQuotaByStorageTypeOrTraditionalQuotaExceededCase ( long storageSpaceQuotaInBlocks, long ssdQuotaInBlocks, long testFileLenInBlocks, short replication)
specifier|private
name|void
name|testQuotaByStorageTypeOrTraditionalQuotaExceededCase
parameter_list|(
name|long
name|storageSpaceQuotaInBlocks
parameter_list|,
name|long
name|ssdQuotaInBlocks
parameter_list|,
name|long
name|testFileLenInBlocks
parameter_list|,
name|short
name|replication
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|String
name|METHOD_NAME
init|=
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|testDir
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|METHOD_NAME
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|testDir
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|setStoragePolicy
argument_list|(
name|testDir
argument_list|,
name|HdfsConstants
operator|.
name|ONESSD_STORAGE_POLICY_NAME
argument_list|)
expr_stmt|;
specifier|final
name|long
name|ssdQuota
init|=
name|BLOCKSIZE
operator|*
name|ssdQuotaInBlocks
decl_stmt|;
specifier|final
name|long
name|storageSpaceQuota
init|=
name|BLOCKSIZE
operator|*
name|storageSpaceQuotaInBlocks
decl_stmt|;
name|dfs
operator|.
name|setQuota
argument_list|(
name|testDir
argument_list|,
name|Long
operator|.
name|MAX_VALUE
operator|-
literal|1
argument_list|,
name|storageSpaceQuota
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|setQuotaByStorageType
argument_list|(
name|testDir
argument_list|,
name|StorageType
operator|.
name|SSD
argument_list|,
name|ssdQuota
argument_list|)
expr_stmt|;
name|INode
name|testDirNode
init|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|testDir
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|testDirNode
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testDirNode
operator|.
name|isQuotaSet
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|createdFile
init|=
operator|new
name|Path
argument_list|(
name|testDir
argument_list|,
literal|"created_file.data"
argument_list|)
decl_stmt|;
name|long
name|fileLen
init|=
name|testFileLenInBlocks
operator|*
name|BLOCKSIZE
decl_stmt|;
try|try
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|createdFile
argument_list|,
name|BLOCKSIZE
operator|/
literal|16
argument_list|,
name|fileLen
argument_list|,
name|BLOCKSIZE
argument_list|,
name|replication
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have failed with DSQuotaExceededException or "
operator|+
literal|"QuotaByStorageTypeExceededException "
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got expected exception "
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|long
name|currentSSDConsumed
init|=
name|testDirNode
operator|.
name|asDirectory
argument_list|()
operator|.
name|getDirectoryWithQuotaFeature
argument_list|()
operator|.
name|getSpaceConsumed
argument_list|()
operator|.
name|getTypeSpaces
argument_list|()
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|SSD
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|ssdQuota
argument_list|,
name|storageSpaceQuota
operator|/
name|replication
argument_list|)
argument_list|,
name|currentSSDConsumed
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testQuotaByStorageTypeWithSnapshot ()
specifier|public
name|void
name|testQuotaByStorageTypeWithSnapshot
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|sub1
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"Sub1"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|sub1
argument_list|)
expr_stmt|;
comment|// Setup ONE_SSD policy and SSD quota of 4 * BLOCKSIZE on sub1
name|dfs
operator|.
name|setStoragePolicy
argument_list|(
name|sub1
argument_list|,
name|HdfsConstants
operator|.
name|ONESSD_STORAGE_POLICY_NAME
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|setQuotaByStorageType
argument_list|(
name|sub1
argument_list|,
name|StorageType
operator|.
name|SSD
argument_list|,
literal|4
operator|*
name|BLOCKSIZE
argument_list|)
expr_stmt|;
name|INode
name|sub1Node
init|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|sub1
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|sub1Node
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sub1Node
operator|.
name|isQuotaSet
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create file1 of size 2 * BLOCKSIZE under sub1
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
name|sub1
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
name|long
name|file1Len
init|=
literal|2
operator|*
name|BLOCKSIZE
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|file1
argument_list|,
name|file1Len
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
comment|// Create snapshot on sub1 named s1
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|dfs
argument_list|,
name|sub1
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
comment|// Verify sub1 SSD usage is unchanged after creating snapshot s1
name|long
name|ssdConsumed
init|=
name|sub1Node
operator|.
name|asDirectory
argument_list|()
operator|.
name|getDirectoryWithQuotaFeature
argument_list|()
operator|.
name|getSpaceConsumed
argument_list|()
operator|.
name|getTypeSpaces
argument_list|()
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|SSD
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|file1Len
argument_list|,
name|ssdConsumed
argument_list|)
expr_stmt|;
comment|// Delete file1
name|dfs
operator|.
name|delete
argument_list|(
name|file1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Verify sub1 SSD usage is unchanged due to the existence of snapshot s1
name|ssdConsumed
operator|=
name|sub1Node
operator|.
name|asDirectory
argument_list|()
operator|.
name|getDirectoryWithQuotaFeature
argument_list|()
operator|.
name|getSpaceConsumed
argument_list|()
operator|.
name|getTypeSpaces
argument_list|()
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|SSD
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|file1Len
argument_list|,
name|ssdConsumed
argument_list|)
expr_stmt|;
name|QuotaCounts
name|counts1
init|=
name|sub1Node
operator|.
name|computeQuotaUsage
argument_list|(
name|fsn
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getStoragePolicySuite
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|sub1Node
operator|.
name|dumpTreeRecursively
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|file1Len
argument_list|,
name|counts1
operator|.
name|getTypeSpaces
argument_list|()
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|SSD
argument_list|)
argument_list|)
expr_stmt|;
name|ContentSummary
name|cs1
init|=
name|dfs
operator|.
name|getContentSummary
argument_list|(
name|sub1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|cs1
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|,
name|file1Len
operator|*
name|REPLICATION
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|cs1
operator|.
name|getTypeConsumed
argument_list|(
name|StorageType
operator|.
name|SSD
argument_list|)
argument_list|,
name|file1Len
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|cs1
operator|.
name|getTypeConsumed
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|)
argument_list|,
name|file1Len
operator|*
literal|2
argument_list|)
expr_stmt|;
comment|// Delete the snapshot s1
name|dfs
operator|.
name|deleteSnapshot
argument_list|(
name|sub1
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
comment|// Verify sub1 SSD usage is fully reclaimed and changed to 0
name|ssdConsumed
operator|=
name|sub1Node
operator|.
name|asDirectory
argument_list|()
operator|.
name|getDirectoryWithQuotaFeature
argument_list|()
operator|.
name|getSpaceConsumed
argument_list|()
operator|.
name|getTypeSpaces
argument_list|()
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|SSD
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ssdConsumed
argument_list|)
expr_stmt|;
name|QuotaCounts
name|counts2
init|=
name|sub1Node
operator|.
name|computeQuotaUsage
argument_list|(
name|fsn
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getStoragePolicySuite
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|sub1Node
operator|.
name|dumpTreeRecursively
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|,
name|counts2
operator|.
name|getTypeSpaces
argument_list|()
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|SSD
argument_list|)
argument_list|)
expr_stmt|;
name|ContentSummary
name|cs2
init|=
name|dfs
operator|.
name|getContentSummary
argument_list|(
name|sub1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|cs2
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|cs2
operator|.
name|getTypeConsumed
argument_list|(
name|StorageType
operator|.
name|SSD
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|cs2
operator|.
name|getTypeConsumed
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testQuotaByStorageTypeWithFileCreateTruncate ()
specifier|public
name|void
name|testQuotaByStorageTypeWithFileCreateTruncate
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|Path
name|createdFile1
init|=
operator|new
name|Path
argument_list|(
name|foo
argument_list|,
literal|"created_file1.data"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|foo
argument_list|)
expr_stmt|;
comment|// set storage policy on directory "foo" to ONESSD
name|dfs
operator|.
name|setStoragePolicy
argument_list|(
name|foo
argument_list|,
name|HdfsConstants
operator|.
name|ONESSD_STORAGE_POLICY_NAME
argument_list|)
expr_stmt|;
comment|// set quota by storage type on directory "foo"
name|dfs
operator|.
name|setQuotaByStorageType
argument_list|(
name|foo
argument_list|,
name|StorageType
operator|.
name|SSD
argument_list|,
name|BLOCKSIZE
operator|*
literal|4
argument_list|)
expr_stmt|;
name|INode
name|fnode
init|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|foo
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fnode
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fnode
operator|.
name|isQuotaSet
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create file of size 2 * BLOCKSIZE under directory "foo"
name|long
name|file1Len
init|=
name|BLOCKSIZE
operator|*
literal|2
decl_stmt|;
name|int
name|bufLen
init|=
name|BLOCKSIZE
operator|/
literal|16
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|createdFile1
argument_list|,
name|bufLen
argument_list|,
name|file1Len
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
comment|// Verify SSD consumed before truncate
name|long
name|ssdConsumed
init|=
name|fnode
operator|.
name|asDirectory
argument_list|()
operator|.
name|getDirectoryWithQuotaFeature
argument_list|()
operator|.
name|getSpaceConsumed
argument_list|()
operator|.
name|getTypeSpaces
argument_list|()
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|SSD
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|file1Len
argument_list|,
name|ssdConsumed
argument_list|)
expr_stmt|;
comment|// Truncate file to 1 * BLOCKSIZE
name|int
name|newFile1Len
init|=
name|BLOCKSIZE
decl_stmt|;
name|dfs
operator|.
name|truncate
argument_list|(
name|createdFile1
argument_list|,
name|newFile1Len
argument_list|)
expr_stmt|;
comment|// Verify SSD consumed after truncate
name|ssdConsumed
operator|=
name|fnode
operator|.
name|asDirectory
argument_list|()
operator|.
name|getDirectoryWithQuotaFeature
argument_list|()
operator|.
name|getSpaceConsumed
argument_list|()
operator|.
name|getTypeSpaces
argument_list|()
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|SSD
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newFile1Len
argument_list|,
name|ssdConsumed
argument_list|)
expr_stmt|;
name|ContentSummary
name|cs
init|=
name|dfs
operator|.
name|getContentSummary
argument_list|(
name|foo
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|cs
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|,
name|newFile1Len
operator|*
name|REPLICATION
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|cs
operator|.
name|getTypeConsumed
argument_list|(
name|StorageType
operator|.
name|SSD
argument_list|)
argument_list|,
name|newFile1Len
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|cs
operator|.
name|getTypeConsumed
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|)
argument_list|,
name|newFile1Len
operator|*
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQuotaByStorageTypePersistenceInEditLog ()
specifier|public
name|void
name|testQuotaByStorageTypePersistenceInEditLog
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|METHOD_NAME
init|=
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|testDir
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|METHOD_NAME
argument_list|)
decl_stmt|;
name|Path
name|createdFile1
init|=
operator|new
name|Path
argument_list|(
name|testDir
argument_list|,
literal|"created_file1.data"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|testDir
argument_list|)
expr_stmt|;
comment|// set storage policy on testDir to ONESSD
name|dfs
operator|.
name|setStoragePolicy
argument_list|(
name|testDir
argument_list|,
name|HdfsConstants
operator|.
name|ONESSD_STORAGE_POLICY_NAME
argument_list|)
expr_stmt|;
comment|// set quota by storage type on testDir
specifier|final
name|long
name|SSD_QUOTA
init|=
name|BLOCKSIZE
operator|*
literal|4
decl_stmt|;
name|dfs
operator|.
name|setQuotaByStorageType
argument_list|(
name|testDir
argument_list|,
name|StorageType
operator|.
name|SSD
argument_list|,
name|SSD_QUOTA
argument_list|)
expr_stmt|;
name|INode
name|testDirNode
init|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|testDir
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|testDirNode
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testDirNode
operator|.
name|isQuotaSet
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create file of size 2 * BLOCKSIZE under testDir
name|long
name|file1Len
init|=
name|BLOCKSIZE
operator|*
literal|2
decl_stmt|;
name|int
name|bufLen
init|=
name|BLOCKSIZE
operator|/
literal|16
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|createdFile1
argument_list|,
name|bufLen
argument_list|,
name|file1Len
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
comment|// Verify SSD consumed before namenode restart
name|long
name|ssdConsumed
init|=
name|testDirNode
operator|.
name|asDirectory
argument_list|()
operator|.
name|getDirectoryWithQuotaFeature
argument_list|()
operator|.
name|getSpaceConsumed
argument_list|()
operator|.
name|getTypeSpaces
argument_list|()
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|SSD
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|file1Len
argument_list|,
name|ssdConsumed
argument_list|)
expr_stmt|;
comment|// Restart namenode to make sure the editlog is correct
name|cluster
operator|.
name|restartNameNode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|refreshClusterState
argument_list|()
expr_stmt|;
name|INode
name|testDirNodeAfterNNRestart
init|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|testDir
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|// Verify quota is still set
name|assertTrue
argument_list|(
name|testDirNode
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testDirNode
operator|.
name|isQuotaSet
argument_list|()
argument_list|)
expr_stmt|;
name|QuotaCounts
name|qc
init|=
name|testDirNodeAfterNNRestart
operator|.
name|getQuotaCounts
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|SSD_QUOTA
argument_list|,
name|qc
operator|.
name|getTypeSpace
argument_list|(
name|StorageType
operator|.
name|SSD
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|StorageType
name|t
range|:
name|StorageType
operator|.
name|getTypesSupportingQuota
argument_list|()
control|)
block|{
if|if
condition|(
name|t
operator|!=
name|StorageType
operator|.
name|SSD
condition|)
block|{
name|assertEquals
argument_list|(
name|HdfsConstants
operator|.
name|QUOTA_RESET
argument_list|,
name|qc
operator|.
name|getTypeSpace
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|long
name|ssdConsumedAfterNNRestart
init|=
name|testDirNodeAfterNNRestart
operator|.
name|asDirectory
argument_list|()
operator|.
name|getDirectoryWithQuotaFeature
argument_list|()
operator|.
name|getSpaceConsumed
argument_list|()
operator|.
name|getTypeSpaces
argument_list|()
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|SSD
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|file1Len
argument_list|,
name|ssdConsumedAfterNNRestart
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQuotaByStorageTypePersistenceInFsImage ()
specifier|public
name|void
name|testQuotaByStorageTypePersistenceInFsImage
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|METHOD_NAME
init|=
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|testDir
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|METHOD_NAME
argument_list|)
decl_stmt|;
name|Path
name|createdFile1
init|=
operator|new
name|Path
argument_list|(
name|testDir
argument_list|,
literal|"created_file1.data"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|testDir
argument_list|)
expr_stmt|;
comment|// set storage policy on testDir to ONESSD
name|dfs
operator|.
name|setStoragePolicy
argument_list|(
name|testDir
argument_list|,
name|HdfsConstants
operator|.
name|ONESSD_STORAGE_POLICY_NAME
argument_list|)
expr_stmt|;
comment|// set quota by storage type on testDir
specifier|final
name|long
name|SSD_QUOTA
init|=
name|BLOCKSIZE
operator|*
literal|4
decl_stmt|;
name|dfs
operator|.
name|setQuotaByStorageType
argument_list|(
name|testDir
argument_list|,
name|StorageType
operator|.
name|SSD
argument_list|,
name|SSD_QUOTA
argument_list|)
expr_stmt|;
name|INode
name|testDirNode
init|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|testDir
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|testDirNode
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testDirNode
operator|.
name|isQuotaSet
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create file of size 2 * BLOCKSIZE under testDir
name|long
name|file1Len
init|=
name|BLOCKSIZE
operator|*
literal|2
decl_stmt|;
name|int
name|bufLen
init|=
name|BLOCKSIZE
operator|/
literal|16
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|createdFile1
argument_list|,
name|bufLen
argument_list|,
name|file1Len
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
comment|// Verify SSD consumed before namenode restart
name|long
name|ssdConsumed
init|=
name|testDirNode
operator|.
name|asDirectory
argument_list|()
operator|.
name|getDirectoryWithQuotaFeature
argument_list|()
operator|.
name|getSpaceConsumed
argument_list|()
operator|.
name|getTypeSpaces
argument_list|()
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|SSD
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|file1Len
argument_list|,
name|ssdConsumed
argument_list|)
expr_stmt|;
comment|// Restart the namenode with checkpoint to make sure fsImage is correct
name|dfs
operator|.
name|setSafeMode
argument_list|(
name|HdfsConstants
operator|.
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|saveNamespace
argument_list|()
expr_stmt|;
name|dfs
operator|.
name|setSafeMode
argument_list|(
name|HdfsConstants
operator|.
name|SafeModeAction
operator|.
name|SAFEMODE_LEAVE
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|restartNameNode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|refreshClusterState
argument_list|()
expr_stmt|;
name|INode
name|testDirNodeAfterNNRestart
init|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|testDir
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|testDirNode
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testDirNode
operator|.
name|isQuotaSet
argument_list|()
argument_list|)
expr_stmt|;
name|QuotaCounts
name|qc
init|=
name|testDirNodeAfterNNRestart
operator|.
name|getQuotaCounts
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|SSD_QUOTA
argument_list|,
name|qc
operator|.
name|getTypeSpace
argument_list|(
name|StorageType
operator|.
name|SSD
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|StorageType
name|t
range|:
name|StorageType
operator|.
name|getTypesSupportingQuota
argument_list|()
control|)
block|{
if|if
condition|(
name|t
operator|!=
name|StorageType
operator|.
name|SSD
condition|)
block|{
name|assertEquals
argument_list|(
name|HdfsConstants
operator|.
name|QUOTA_RESET
argument_list|,
name|qc
operator|.
name|getTypeSpace
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|long
name|ssdConsumedAfterNNRestart
init|=
name|testDirNodeAfterNNRestart
operator|.
name|asDirectory
argument_list|()
operator|.
name|getDirectoryWithQuotaFeature
argument_list|()
operator|.
name|getSpaceConsumed
argument_list|()
operator|.
name|getTypeSpaces
argument_list|()
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|SSD
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|file1Len
argument_list|,
name|ssdConsumedAfterNNRestart
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testContentSummaryWithoutQuotaByStorageType ()
specifier|public
name|void
name|testContentSummaryWithoutQuotaByStorageType
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|Path
name|createdFile1
init|=
operator|new
name|Path
argument_list|(
name|foo
argument_list|,
literal|"created_file1.data"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|foo
argument_list|)
expr_stmt|;
comment|// set storage policy on directory "foo" to ONESSD
name|dfs
operator|.
name|setStoragePolicy
argument_list|(
name|foo
argument_list|,
name|HdfsConstants
operator|.
name|ONESSD_STORAGE_POLICY_NAME
argument_list|)
expr_stmt|;
name|INode
name|fnode
init|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|foo
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fnode
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|fnode
operator|.
name|isQuotaSet
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create file of size 2 * BLOCKSIZE under directory "foo"
name|long
name|file1Len
init|=
name|BLOCKSIZE
operator|*
literal|2
decl_stmt|;
name|int
name|bufLen
init|=
name|BLOCKSIZE
operator|/
literal|16
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|createdFile1
argument_list|,
name|bufLen
argument_list|,
name|file1Len
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
comment|// Verify getContentSummary without any quota set
name|ContentSummary
name|cs
init|=
name|dfs
operator|.
name|getContentSummary
argument_list|(
name|foo
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|cs
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|,
name|file1Len
operator|*
name|REPLICATION
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|cs
operator|.
name|getTypeConsumed
argument_list|(
name|StorageType
operator|.
name|SSD
argument_list|)
argument_list|,
name|file1Len
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|cs
operator|.
name|getTypeConsumed
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|)
argument_list|,
name|file1Len
operator|*
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testContentSummaryWithoutStoragePolicy ()
specifier|public
name|void
name|testContentSummaryWithoutStoragePolicy
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|Path
name|createdFile1
init|=
operator|new
name|Path
argument_list|(
name|foo
argument_list|,
literal|"created_file1.data"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|foo
argument_list|)
expr_stmt|;
name|INode
name|fnode
init|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|foo
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fnode
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|fnode
operator|.
name|isQuotaSet
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create file of size 2 * BLOCKSIZE under directory "foo"
name|long
name|file1Len
init|=
name|BLOCKSIZE
operator|*
literal|2
decl_stmt|;
name|int
name|bufLen
init|=
name|BLOCKSIZE
operator|/
literal|16
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|createdFile1
argument_list|,
name|bufLen
argument_list|,
name|file1Len
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
comment|// Verify getContentSummary without any quota set
comment|// Expect no type quota and usage information available
name|ContentSummary
name|cs
init|=
name|dfs
operator|.
name|getContentSummary
argument_list|(
name|foo
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|cs
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|,
name|file1Len
operator|*
name|REPLICATION
argument_list|)
expr_stmt|;
for|for
control|(
name|StorageType
name|t
range|:
name|StorageType
operator|.
name|values
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|cs
operator|.
name|getTypeConsumed
argument_list|(
name|t
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|cs
operator|.
name|getTypeQuota
argument_list|(
name|t
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Tests space quota for storage policy = WARM.    */
annotation|@
name|Test
DECL|method|testStorageSpaceQuotaWithWarmPolicy ()
specifier|public
name|void
name|testStorageSpaceQuotaWithWarmPolicy
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|testDir
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|dfs
operator|.
name|mkdirs
argument_list|(
name|testDir
argument_list|)
argument_list|)
expr_stmt|;
comment|/* set policy to HOT */
name|dfs
operator|.
name|setStoragePolicy
argument_list|(
name|testDir
argument_list|,
name|HdfsConstants
operator|.
name|HOT_STORAGE_POLICY_NAME
argument_list|)
expr_stmt|;
comment|/* init space quota */
specifier|final
name|long
name|storageSpaceQuota
init|=
name|BLOCKSIZE
operator|*
literal|6
decl_stmt|;
specifier|final
name|long
name|storageTypeSpaceQuota
init|=
name|BLOCKSIZE
operator|*
literal|1
decl_stmt|;
comment|/* set space quota */
name|dfs
operator|.
name|setQuota
argument_list|(
name|testDir
argument_list|,
name|HdfsConstants
operator|.
name|QUOTA_DONT_SET
argument_list|,
name|storageSpaceQuota
argument_list|)
expr_stmt|;
comment|/* init vars */
name|Path
name|createdFile
decl_stmt|;
specifier|final
name|long
name|fileLen
init|=
name|BLOCKSIZE
decl_stmt|;
comment|/**      * create one file with 3 replicas, REPLICATION * BLOCKSIZE go to DISK due      * to HOT policy      */
name|createdFile
operator|=
operator|new
name|Path
argument_list|(
name|testDir
argument_list|,
literal|"file1.data"
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|createdFile
argument_list|,
name|BLOCKSIZE
operator|/
literal|16
argument_list|,
name|fileLen
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dfs
operator|.
name|exists
argument_list|(
name|createdFile
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dfs
operator|.
name|isFile
argument_list|(
name|createdFile
argument_list|)
argument_list|)
expr_stmt|;
comment|/* set space quota for DISK */
name|dfs
operator|.
name|setQuotaByStorageType
argument_list|(
name|testDir
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
name|storageTypeSpaceQuota
argument_list|)
expr_stmt|;
comment|/* set policy to WARM */
name|dfs
operator|.
name|setStoragePolicy
argument_list|(
name|testDir
argument_list|,
name|HdfsConstants
operator|.
name|WARM_STORAGE_POLICY_NAME
argument_list|)
expr_stmt|;
comment|/* create another file with 3 replicas */
try|try
block|{
name|createdFile
operator|=
operator|new
name|Path
argument_list|(
name|testDir
argument_list|,
literal|"file2.data"
argument_list|)
expr_stmt|;
comment|/**        * This will fail since quota on DISK is 1 block but space consumed on        * DISK is already 3 blocks due to the first file creation.        */
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|createdFile
argument_list|,
name|BLOCKSIZE
operator|/
literal|16
argument_list|,
name|fileLen
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should fail on QuotaByStorageTypeExceededException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|QuotaByStorageTypeExceededException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got expected exception "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
name|allOf
argument_list|(
name|containsString
argument_list|(
literal|"Quota by storage type"
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"DISK on path"
argument_list|)
argument_list|,
name|containsString
argument_list|(
name|testDir
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Tests if changing replication factor results in copying file as quota    * doesn't exceed.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testStorageSpaceQuotaWithRepFactor ()
specifier|public
name|void
name|testStorageSpaceQuotaWithRepFactor
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|testDir
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|dfs
operator|.
name|mkdirs
argument_list|(
name|testDir
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|long
name|storageSpaceQuota
init|=
name|BLOCKSIZE
operator|*
literal|2
decl_stmt|;
comment|/* set policy to HOT */
name|dfs
operator|.
name|setStoragePolicy
argument_list|(
name|testDir
argument_list|,
name|HdfsConstants
operator|.
name|HOT_STORAGE_POLICY_NAME
argument_list|)
expr_stmt|;
comment|/* set space quota */
name|dfs
operator|.
name|setQuota
argument_list|(
name|testDir
argument_list|,
name|HdfsConstants
operator|.
name|QUOTA_DONT_SET
argument_list|,
name|storageSpaceQuota
argument_list|)
expr_stmt|;
comment|/* init vars */
name|Path
name|createdFile
init|=
literal|null
decl_stmt|;
specifier|final
name|long
name|fileLen
init|=
name|BLOCKSIZE
decl_stmt|;
try|try
block|{
comment|/* create one file with 3 replicas */
name|createdFile
operator|=
operator|new
name|Path
argument_list|(
name|testDir
argument_list|,
literal|"file1.data"
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|createdFile
argument_list|,
name|BLOCKSIZE
operator|/
literal|16
argument_list|,
name|fileLen
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should fail on DSQuotaExceededException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DSQuotaExceededException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got expected exception "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
name|allOf
argument_list|(
name|containsString
argument_list|(
literal|"DiskSpace quota"
argument_list|)
argument_list|,
name|containsString
argument_list|(
name|testDir
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/* try creating file again with 2 replicas */
name|createdFile
operator|=
operator|new
name|Path
argument_list|(
name|testDir
argument_list|,
literal|"file2.data"
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|createdFile
argument_list|,
name|BLOCKSIZE
operator|/
literal|16
argument_list|,
name|fileLen
argument_list|,
name|BLOCKSIZE
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dfs
operator|.
name|exists
argument_list|(
name|createdFile
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dfs
operator|.
name|isFile
argument_list|(
name|createdFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests if clearing quota per heterogeneous storage doesn't result in    * clearing quota for another storage.    *    * @throws IOException    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testStorageSpaceQuotaPerQuotaClear ()
specifier|public
name|void
name|testStorageSpaceQuotaPerQuotaClear
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|testDir
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|dfs
operator|.
name|mkdirs
argument_list|(
name|testDir
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|long
name|diskSpaceQuota
init|=
name|BLOCKSIZE
operator|*
literal|1
decl_stmt|;
specifier|final
name|long
name|ssdSpaceQuota
init|=
name|BLOCKSIZE
operator|*
literal|2
decl_stmt|;
comment|/* set space quota */
name|dfs
operator|.
name|setQuotaByStorageType
argument_list|(
name|testDir
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
name|diskSpaceQuota
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|setQuotaByStorageType
argument_list|(
name|testDir
argument_list|,
name|StorageType
operator|.
name|SSD
argument_list|,
name|ssdSpaceQuota
argument_list|)
expr_stmt|;
specifier|final
name|INode
name|testDirNode
init|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|testDir
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|testDirNode
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testDirNode
operator|.
name|isQuotaSet
argument_list|()
argument_list|)
expr_stmt|;
comment|/* verify space quota by storage type */
name|assertEquals
argument_list|(
name|diskSpaceQuota
argument_list|,
name|testDirNode
operator|.
name|asDirectory
argument_list|()
operator|.
name|getDirectoryWithQuotaFeature
argument_list|()
operator|.
name|getQuota
argument_list|()
operator|.
name|getTypeSpace
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ssdSpaceQuota
argument_list|,
name|testDirNode
operator|.
name|asDirectory
argument_list|()
operator|.
name|getDirectoryWithQuotaFeature
argument_list|()
operator|.
name|getQuota
argument_list|()
operator|.
name|getTypeSpace
argument_list|(
name|StorageType
operator|.
name|SSD
argument_list|)
argument_list|)
expr_stmt|;
comment|/* clear DISK space quota */
name|dfs
operator|.
name|setQuotaByStorageType
argument_list|(
name|testDir
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
name|HdfsConstants
operator|.
name|QUOTA_RESET
argument_list|)
expr_stmt|;
comment|/* verify space quota by storage type after clearing DISK's */
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|testDirNode
operator|.
name|asDirectory
argument_list|()
operator|.
name|getDirectoryWithQuotaFeature
argument_list|()
operator|.
name|getQuota
argument_list|()
operator|.
name|getTypeSpace
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ssdSpaceQuota
argument_list|,
name|testDirNode
operator|.
name|asDirectory
argument_list|()
operator|.
name|getDirectoryWithQuotaFeature
argument_list|()
operator|.
name|getQuota
argument_list|()
operator|.
name|getTypeSpace
argument_list|(
name|StorageType
operator|.
name|SSD
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

