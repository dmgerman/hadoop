begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.common
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|StorageContainerDatanodeProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|VersionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|SCMHeartbeatResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|SCMCommandResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|ReportState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|SCMNodeReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|ContainerBlocksDeletionACKProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|ContainerBlocksDeletionACKResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|scm
operator|.
name|VersionInfo
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_comment
comment|/**  * SCM RPC mock class.  */
end_comment

begin_class
DECL|class|ScmTestMock
specifier|public
class|class
name|ScmTestMock
implements|implements
name|StorageContainerDatanodeProtocol
block|{
DECL|field|rpcResponseDelay
specifier|private
name|int
name|rpcResponseDelay
decl_stmt|;
DECL|field|heartbeatCount
specifier|private
name|AtomicInteger
name|heartbeatCount
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|rpcCount
specifier|private
name|AtomicInteger
name|rpcCount
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|reportState
specifier|private
name|ReportState
name|reportState
decl_stmt|;
DECL|field|containerReportsCount
specifier|private
name|AtomicInteger
name|containerReportsCount
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|closedContainerCount
specifier|private
name|AtomicInteger
name|closedContainerCount
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|/**    * Returns the number of heartbeats made to this class.    *    * @return int    */
DECL|method|getHeartbeatCount ()
specifier|public
name|int
name|getHeartbeatCount
parameter_list|()
block|{
return|return
name|heartbeatCount
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**    * Returns the number of RPC calls made to this mock class instance.    *    * @return - Number of RPC calls serviced by this class.    */
DECL|method|getRpcCount ()
specifier|public
name|int
name|getRpcCount
parameter_list|()
block|{
return|return
name|rpcCount
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**    * Gets the RPC response delay.    *    * @return delay in milliseconds.    */
DECL|method|getRpcResponseDelay ()
specifier|public
name|int
name|getRpcResponseDelay
parameter_list|()
block|{
return|return
name|rpcResponseDelay
return|;
block|}
comment|/**    * Sets the RPC response delay.    *    * @param rpcResponseDelay - delay in milliseconds.    */
DECL|method|setRpcResponseDelay (int rpcResponseDelay)
specifier|public
name|void
name|setRpcResponseDelay
parameter_list|(
name|int
name|rpcResponseDelay
parameter_list|)
block|{
name|this
operator|.
name|rpcResponseDelay
operator|=
name|rpcResponseDelay
expr_stmt|;
block|}
comment|/**    * Returns the number of container reports server has seen.    * @return int    */
DECL|method|getContainerReportsCount ()
specifier|public
name|int
name|getContainerReportsCount
parameter_list|()
block|{
return|return
name|containerReportsCount
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**    * Returns the number of closed containers that have been reported so far.    * @return - count of closed containers.    */
DECL|method|getClosedContainerCount ()
specifier|public
name|int
name|getClosedContainerCount
parameter_list|()
block|{
return|return
name|closedContainerCount
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**    * Returns SCM version.    *    * @return Version info.    */
annotation|@
name|Override
specifier|public
name|StorageContainerDatanodeProtocolProtos
operator|.
name|SCMVersionResponseProto
DECL|method|getVersion (StorageContainerDatanodeProtocolProtos .SCMVersionRequestProto unused)
name|getVersion
parameter_list|(
name|StorageContainerDatanodeProtocolProtos
operator|.
name|SCMVersionRequestProto
name|unused
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|sleepIfNeeded
argument_list|()
expr_stmt|;
name|VersionInfo
name|versionInfo
init|=
name|VersionInfo
operator|.
name|getLatestVersion
argument_list|()
decl_stmt|;
return|return
name|VersionResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setVersion
argument_list|(
name|versionInfo
operator|.
name|getVersion
argument_list|()
argument_list|)
operator|.
name|addValue
argument_list|(
name|VersionInfo
operator|.
name|DESCRIPTION_KEY
argument_list|,
name|versionInfo
operator|.
name|getDescription
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|getProtobufMessage
argument_list|()
return|;
block|}
DECL|method|sleepIfNeeded ()
specifier|private
name|void
name|sleepIfNeeded
parameter_list|()
block|{
if|if
condition|(
name|getRpcResponseDelay
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|getRpcResponseDelay
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
comment|// Just ignore this exception.
block|}
block|}
block|}
comment|/**    * Used by data node to send a Heartbeat.    *    * @param datanodeID - Datanode ID.    * @param nodeReport - node report.    * @return - SCMHeartbeatResponseProto    * @throws IOException    */
annotation|@
name|Override
specifier|public
name|StorageContainerDatanodeProtocolProtos
operator|.
name|SCMHeartbeatResponseProto
DECL|method|sendHeartbeat (DatanodeID datanodeID, SCMNodeReport nodeReport, ReportState reportState)
name|sendHeartbeat
parameter_list|(
name|DatanodeID
name|datanodeID
parameter_list|,
name|SCMNodeReport
name|nodeReport
parameter_list|,
name|ReportState
name|reportState
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|heartbeatCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|this
operator|.
name|reportState
operator|=
name|reportState
expr_stmt|;
name|sleepIfNeeded
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|SCMCommandResponseProto
argument_list|>
name|cmdResponses
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
return|return
name|SCMHeartbeatResponseProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|addAllCommands
argument_list|(
name|cmdResponses
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Register Datanode.    *    * @param datanodeID - DatanodID.    * @param scmAddresses - List of SCMs this datanode is configured to    * communicate.    * @return SCM Command.    */
annotation|@
name|Override
specifier|public
name|StorageContainerDatanodeProtocolProtos
DECL|method|register (DatanodeID datanodeID, String[] scmAddresses)
operator|.
name|SCMRegisteredCmdResponseProto
name|register
parameter_list|(
name|DatanodeID
name|datanodeID
parameter_list|,
name|String
index|[]
name|scmAddresses
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|sleepIfNeeded
argument_list|()
expr_stmt|;
return|return
name|StorageContainerDatanodeProtocolProtos
operator|.
name|SCMRegisteredCmdResponseProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setClusterID
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|setDatanodeUUID
argument_list|(
name|datanodeID
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
operator|.
name|setErrorCode
argument_list|(
name|StorageContainerDatanodeProtocolProtos
operator|.
name|SCMRegisteredCmdResponseProto
operator|.
name|ErrorCode
operator|.
name|success
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Send a container report.    *    * @param reports -- Container report    * @return HeartbeatResponse.nullcommand.    * @throws IOException    */
annotation|@
name|Override
specifier|public
name|SCMHeartbeatResponseProto
DECL|method|sendContainerReport (StorageContainerDatanodeProtocolProtos .ContainerReportsProto reports)
name|sendContainerReport
parameter_list|(
name|StorageContainerDatanodeProtocolProtos
operator|.
name|ContainerReportsProto
name|reports
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|reports
argument_list|)
expr_stmt|;
name|containerReportsCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|closedContainerCount
operator|.
name|addAndGet
argument_list|(
name|reports
operator|.
name|getReportsCount
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SCMCommandResponseProto
argument_list|>
name|cmdResponses
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
return|return
name|SCMHeartbeatResponseProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|addAllCommands
argument_list|(
name|cmdResponses
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|sendContainerBlocksDeletionACK ( ContainerBlocksDeletionACKProto request)
specifier|public
name|ContainerBlocksDeletionACKResponseProto
name|sendContainerBlocksDeletionACK
parameter_list|(
name|ContainerBlocksDeletionACKProto
name|request
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|ContainerBlocksDeletionACKResponseProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|getDefaultInstanceForType
argument_list|()
return|;
block|}
DECL|method|getReportState ()
specifier|public
name|ReportState
name|getReportState
parameter_list|()
block|{
return|return
name|this
operator|.
name|reportState
return|;
block|}
block|}
end_class

end_unit

