begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|StartupOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSEditLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSEditLogOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSEditLogOpCodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSImageTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NNStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|Holder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Unit test to make sure that Append properly logs the right  * things to the edit log, such that files aren't lost or truncated  * on restart.  */
end_comment

begin_class
DECL|class|TestFileAppendRestart
specifier|public
class|class
name|TestFileAppendRestart
block|{
DECL|field|BLOCK_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|BLOCK_SIZE
init|=
literal|4096
decl_stmt|;
DECL|field|HADOOP_23_BROKEN_APPEND_TGZ
specifier|private
specifier|static
specifier|final
name|String
name|HADOOP_23_BROKEN_APPEND_TGZ
init|=
literal|"image-with-buggy-append.tgz"
decl_stmt|;
DECL|method|writeAndAppend (FileSystem fs, Path p, int lengthForCreate, int lengthForAppend)
specifier|private
name|void
name|writeAndAppend
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|p
parameter_list|,
name|int
name|lengthForCreate
parameter_list|,
name|int
name|lengthForAppend
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Creating a file with 4096 blockSize to write multiple blocks
name|FSDataOutputStream
name|stream
init|=
name|fs
operator|.
name|create
argument_list|(
name|p
argument_list|,
literal|true
argument_list|,
name|BLOCK_SIZE
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
name|BLOCK_SIZE
argument_list|)
decl_stmt|;
try|try
block|{
name|AppendTestUtil
operator|.
name|write
argument_list|(
name|stream
argument_list|,
literal|0
argument_list|,
name|lengthForCreate
argument_list|)
expr_stmt|;
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
name|stream
operator|=
name|fs
operator|.
name|append
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|AppendTestUtil
operator|.
name|write
argument_list|(
name|stream
argument_list|,
name|lengthForCreate
argument_list|,
name|lengthForAppend
argument_list|)
expr_stmt|;
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
name|int
name|totalLength
init|=
name|lengthForCreate
operator|+
name|lengthForAppend
decl_stmt|;
name|assertEquals
argument_list|(
name|totalLength
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Regression test for HDFS-2991. Creates and appends to files    * where blocks start/end on block boundaries.    */
annotation|@
name|Test
DECL|method|testAppendRestart ()
specifier|public
name|void
name|testAppendRestart
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
comment|// Turn off persistent IPC, so that the DFSClient can survive NN restart
name|conf
operator|.
name|setInt
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|IPC_CLIENT_CONNECTION_MAXIDLETIME_KEY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
name|FSDataOutputStream
name|stream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|File
name|editLog
init|=
operator|new
name|File
argument_list|(
name|FSImageTestUtil
operator|.
name|getNameNodeCurrentDirs
argument_list|(
name|cluster
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|NNStorage
operator|.
name|getInProgressEditsFileName
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|EnumMap
argument_list|<
name|FSEditLogOpCodes
argument_list|,
name|Holder
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|counts
decl_stmt|;
name|Path
name|p1
init|=
operator|new
name|Path
argument_list|(
literal|"/block-boundaries"
argument_list|)
decl_stmt|;
name|writeAndAppend
argument_list|(
name|fs
argument_list|,
name|p1
argument_list|,
name|BLOCK_SIZE
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|counts
operator|=
name|FSImageTestUtil
operator|.
name|countEditLogOpTypes
argument_list|(
name|editLog
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
name|int
operator|)
name|counts
operator|.
name|get
argument_list|(
name|FSEditLogOpCodes
operator|.
name|OP_ADD
argument_list|)
operator|.
name|held
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
name|int
operator|)
name|counts
operator|.
name|get
argument_list|(
name|FSEditLogOpCodes
operator|.
name|OP_CLOSE
argument_list|)
operator|.
name|held
argument_list|)
expr_stmt|;
name|Path
name|p2
init|=
operator|new
name|Path
argument_list|(
literal|"/not-block-boundaries"
argument_list|)
decl_stmt|;
name|writeAndAppend
argument_list|(
name|fs
argument_list|,
name|p2
argument_list|,
name|BLOCK_SIZE
operator|/
literal|2
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|counts
operator|=
name|FSImageTestUtil
operator|.
name|countEditLogOpTypes
argument_list|(
name|editLog
argument_list|)
expr_stmt|;
comment|// We get *3* OP_ADDS from this test rather than two. The first
comment|// OP_ADD comes from re-opening the file to establish the lease,
comment|// the second comes from the updatePipeline call when the block
comment|// itself has its generation stamp incremented
name|assertEquals
argument_list|(
literal|5
argument_list|,
operator|(
name|int
operator|)
name|counts
operator|.
name|get
argument_list|(
name|FSEditLogOpCodes
operator|.
name|OP_ADD
argument_list|)
operator|.
name|held
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
operator|(
name|int
operator|)
name|counts
operator|.
name|get
argument_list|(
name|FSEditLogOpCodes
operator|.
name|OP_CLOSE
argument_list|)
operator|.
name|held
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|restartNameNode
argument_list|()
expr_stmt|;
name|AppendTestUtil
operator|.
name|check
argument_list|(
name|fs
argument_list|,
name|p1
argument_list|,
literal|2
operator|*
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|AppendTestUtil
operator|.
name|check
argument_list|(
name|fs
argument_list|,
name|p2
argument_list|,
literal|3
operator|*
name|BLOCK_SIZE
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|stream
argument_list|)
expr_stmt|;
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Earlier versions of HDFS had a bug (HDFS-2991) which caused    * append(), when called exactly at a block boundary,    * to not log an OP_ADD. This ensures that we can read from    * such buggy versions correctly, by loading an image created    * using a namesystem image created with 0.23.1-rc2 exhibiting    * the issue.    */
annotation|@
name|Test
DECL|method|testLoadLogsFromBuggyEarlierVersions ()
specifier|public
name|void
name|testLoadLogsFromBuggyEarlierVersions
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|String
name|tarFile
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.cache.data"
argument_list|,
literal|"build/test/cache"
argument_list|)
operator|+
literal|"/"
operator|+
name|HADOOP_23_BROKEN_APPEND_TGZ
decl_stmt|;
name|String
name|testDir
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"build/test/data"
argument_list|)
decl_stmt|;
name|File
name|dfsDir
init|=
operator|new
name|File
argument_list|(
name|testDir
argument_list|,
literal|"image-with-buggy-append"
argument_list|)
decl_stmt|;
if|if
condition|(
name|dfsDir
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|dfsDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not delete dfs directory '"
operator|+
name|dfsDir
operator|+
literal|"'"
argument_list|)
throw|;
block|}
name|FileUtil
operator|.
name|unTar
argument_list|(
operator|new
name|File
argument_list|(
name|tarFile
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|testDir
argument_list|)
argument_list|)
expr_stmt|;
name|File
name|nameDir
init|=
operator|new
name|File
argument_list|(
name|dfsDir
argument_list|,
literal|"name"
argument_list|)
decl_stmt|;
name|GenericTestUtils
operator|.
name|assertExists
argument_list|(
name|nameDir
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_NAME_DIR_KEY
argument_list|,
name|nameDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|format
argument_list|(
literal|false
argument_list|)
operator|.
name|manageDataDfsDirs
argument_list|(
literal|false
argument_list|)
operator|.
name|manageNameDfsDirs
argument_list|(
literal|false
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|waitSafeMode
argument_list|(
literal|false
argument_list|)
operator|.
name|startupOption
argument_list|(
name|StartupOption
operator|.
name|UPGRADE
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|testPath
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp/io_data/test_io_0"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
literal|1024
operator|*
literal|1024
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|testPath
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

