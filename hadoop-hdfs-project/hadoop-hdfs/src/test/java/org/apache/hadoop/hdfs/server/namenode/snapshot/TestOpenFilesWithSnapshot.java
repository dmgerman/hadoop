begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.snapshot
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileChecksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsDataOutputStream
operator|.
name|SyncFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNodeAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamenodeProtocols
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestOpenFilesWithSnapshot
specifier|public
class|class
name|TestOpenFilesWithSnapshot
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestOpenFilesWithSnapshot
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
DECL|field|cluster
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
DECL|field|fs
name|DistributedFileSystem
name|fs
init|=
literal|null
decl_stmt|;
DECL|field|SEED
specifier|private
specifier|static
specifier|final
name|long
name|SEED
init|=
literal|0
decl_stmt|;
DECL|field|REPLICATION
specifier|private
specifier|static
specifier|final
name|short
name|REPLICATION
init|=
literal|3
decl_stmt|;
DECL|field|BLOCKSIZE
specifier|private
specifier|static
specifier|final
name|long
name|BLOCKSIZE
init|=
literal|1024
decl_stmt|;
DECL|field|BUFFERLEN
specifier|private
specifier|static
specifier|final
name|long
name|BUFFERLEN
init|=
name|BLOCKSIZE
operator|/
literal|2
decl_stmt|;
DECL|field|FILELEN
specifier|private
specifier|static
specifier|final
name|long
name|FILELEN
init|=
name|BLOCKSIZE
operator|*
literal|2
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_SNAPSHOT_CAPTURE_OPENFILES
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|3
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"dfs.blocksize"
argument_list|,
literal|"1048576"
argument_list|)
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|fs
operator|!=
literal|null
condition|)
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testUCFileDeleteWithSnapShot ()
specifier|public
name|void
name|testUCFileDeleteWithSnapShot
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
name|doWriteAndAbort
argument_list|(
name|fs
argument_list|,
name|path
argument_list|)
expr_stmt|;
comment|// delete files separately
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test/test/test2"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test/test/test3"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|restartNameNode
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParentDirWithUCFileDeleteWithSnapShot ()
specifier|public
name|void
name|testParentDirWithUCFileDeleteWithSnapShot
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
name|doWriteAndAbort
argument_list|(
name|fs
argument_list|,
name|path
argument_list|)
expr_stmt|;
comment|// delete parent directory
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test/test"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|restartNameNode
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWithCheckpoint ()
specifier|public
name|void
name|testWithCheckpoint
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
name|doWriteAndAbort
argument_list|(
name|fs
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test/test"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|restartNameNode
argument_list|()
expr_stmt|;
comment|// read snapshot file after restart
name|String
name|test2snapshotPath
init|=
name|Snapshot
operator|.
name|getSnapshotPath
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|,
literal|"s1/test/test2"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|readFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|test2snapshotPath
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|test3snapshotPath
init|=
name|Snapshot
operator|.
name|getSnapshotPath
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|,
literal|"s1/test/test3"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|readFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|test3snapshotPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFilesDeletionWithCheckpoint ()
specifier|public
name|void
name|testFilesDeletionWithCheckpoint
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
name|doWriteAndAbort
argument_list|(
name|fs
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test/test/test2"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test/test/test3"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|restartNameNode
argument_list|()
expr_stmt|;
comment|// read snapshot file after restart
name|String
name|test2snapshotPath
init|=
name|Snapshot
operator|.
name|getSnapshotPath
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|,
literal|"s1/test/test2"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|readFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|test2snapshotPath
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|test3snapshotPath
init|=
name|Snapshot
operator|.
name|getSnapshotPath
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|,
literal|"s1/test/test3"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|readFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|test3snapshotPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|doWriteAndAbort (DistributedFileSystem fs, Path path)
specifier|private
name|void
name|doWriteAndAbort
parameter_list|(
name|DistributedFileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|fs
operator|.
name|allowSnapshot
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/test/test1"
argument_list|)
argument_list|,
literal|100
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|100024L
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/test/test2"
argument_list|)
argument_list|,
literal|100
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|100024L
argument_list|)
expr_stmt|;
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
literal|"/test/test/test2"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|file
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|long
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|count
operator|<
literal|1048576
condition|)
block|{
name|out
operator|.
name|writeBytes
argument_list|(
literal|"hell"
argument_list|)
expr_stmt|;
name|count
operator|+=
literal|4
expr_stmt|;
block|}
block|}
operator|(
operator|(
name|DFSOutputStream
operator|)
name|out
operator|.
name|getWrappedStream
argument_list|()
operator|)
operator|.
name|hsync
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|SyncFlag
operator|.
name|UPDATE_LENGTH
argument_list|)
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|abortStream
argument_list|(
operator|(
name|DFSOutputStream
operator|)
name|out
operator|.
name|getWrappedStream
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|file2
init|=
operator|new
name|Path
argument_list|(
literal|"/test/test/test3"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|out2
init|=
name|fs
operator|.
name|create
argument_list|(
name|file2
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|long
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|count
operator|<
literal|1048576
condition|)
block|{
name|out2
operator|.
name|writeBytes
argument_list|(
literal|"hell"
argument_list|)
expr_stmt|;
name|count
operator|+=
literal|4
expr_stmt|;
block|}
block|}
operator|(
operator|(
name|DFSOutputStream
operator|)
name|out2
operator|.
name|getWrappedStream
argument_list|()
operator|)
operator|.
name|hsync
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|SyncFlag
operator|.
name|UPDATE_LENGTH
argument_list|)
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|abortStream
argument_list|(
operator|(
name|DFSOutputStream
operator|)
name|out2
operator|.
name|getWrappedStream
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|createSnapshot
argument_list|(
name|path
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOpenFilesWithMultipleSnapshots ()
specifier|public
name|void
name|testOpenFilesWithMultipleSnapshots
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestMultipleSnapshots
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOpenFilesWithMultipleSnapshotsWithoutCheckpoint ()
specifier|public
name|void
name|testOpenFilesWithMultipleSnapshotsWithoutCheckpoint
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestMultipleSnapshots
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestMultipleSnapshots (boolean saveNamespace)
specifier|private
name|void
name|doTestMultipleSnapshots
parameter_list|(
name|boolean
name|saveNamespace
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
name|doWriteAndAbort
argument_list|(
name|fs
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|fs
operator|.
name|createSnapshot
argument_list|(
name|path
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test/test"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|deleteSnapshot
argument_list|(
name|path
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|triggerBlockReports
argument_list|()
expr_stmt|;
if|if
condition|(
name|saveNamespace
condition|)
block|{
name|NameNode
name|nameNode
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
decl_stmt|;
name|NameNodeAdapter
operator|.
name|enterSafeMode
argument_list|(
name|nameNode
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|NameNodeAdapter
operator|.
name|saveNamespace
argument_list|(
name|nameNode
argument_list|)
expr_stmt|;
name|NameNodeAdapter
operator|.
name|leaveSafeMode
argument_list|(
name|nameNode
argument_list|)
expr_stmt|;
block|}
name|cluster
operator|.
name|restartNameNode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOpenFilesWithRename ()
specifier|public
name|void
name|testOpenFilesWithRename
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
name|doWriteAndAbort
argument_list|(
name|fs
argument_list|,
name|path
argument_list|)
expr_stmt|;
comment|// check for zero sized blocks
name|Path
name|fileWithEmptyBlock
init|=
operator|new
name|Path
argument_list|(
literal|"/test/test/test4"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|create
argument_list|(
name|fileWithEmptyBlock
argument_list|)
expr_stmt|;
name|NamenodeProtocols
name|nameNodeRpc
init|=
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
decl_stmt|;
name|String
name|clientName
init|=
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|getClientName
argument_list|()
decl_stmt|;
comment|// create one empty block
name|nameNodeRpc
operator|.
name|addBlock
argument_list|(
name|fileWithEmptyBlock
operator|.
name|toString
argument_list|()
argument_list|,
name|clientName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|HdfsConstants
operator|.
name|GRANDFATHER_INODE_ID
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fs
operator|.
name|createSnapshot
argument_list|(
name|path
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
name|fs
operator|.
name|rename
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test/test"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/test/test-renamed"
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test/test-renamed"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|restartNameNode
argument_list|()
expr_stmt|;
block|}
DECL|method|createFile (final Path filePath)
specifier|private
name|void
name|createFile
parameter_list|(
specifier|final
name|Path
name|filePath
parameter_list|)
throws|throws
name|IOException
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|filePath
argument_list|,
operator|(
name|int
operator|)
name|BUFFERLEN
argument_list|,
name|FILELEN
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
block|}
DECL|method|writeToStream (final FSDataOutputStream outputStream, byte[] buf)
specifier|private
name|int
name|writeToStream
parameter_list|(
specifier|final
name|FSDataOutputStream
name|outputStream
parameter_list|,
name|byte
index|[]
name|buf
parameter_list|)
throws|throws
name|IOException
block|{
name|outputStream
operator|.
name|write
argument_list|(
name|buf
argument_list|)
expr_stmt|;
operator|(
operator|(
name|HdfsDataOutputStream
operator|)
name|outputStream
operator|)
operator|.
name|hsync
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|SyncFlag
operator|.
name|UPDATE_LENGTH
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|length
return|;
block|}
comment|/**    * Test open files under snapshot directories are getting captured    * in snapshots as a truly immutable copy. Verify open files outside    * of snapshot directory not getting affected.    *    * \- level_0_A    *   \- level_1_C    *     +- appA.log         (open file, not under snap root)    *     \- level_2_E        (Snapshottable Dir)    *       \- level_3_G    *         +- flume.log    (open file, under snap root)    * \- level_0_B    *   +- appB.log         (open file, not under snap root)    *   \- level_2_D        (Snapshottable Dir)    *     +- hbase.log      (open file, under snap root)    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testPointInTimeSnapshotCopiesForOpenFiles ()
specifier|public
name|void
name|testPointInTimeSnapshotCopiesForOpenFiles
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_SNAPSHOT_CAPTURE_OPENFILES
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Construct the directory tree
specifier|final
name|Path
name|level0A
init|=
operator|new
name|Path
argument_list|(
literal|"/level_0_A"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|level0B
init|=
operator|new
name|Path
argument_list|(
literal|"/level_0_B"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|level1C
init|=
operator|new
name|Path
argument_list|(
name|level0A
argument_list|,
literal|"level_1_C"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|level1D
init|=
operator|new
name|Path
argument_list|(
name|level0B
argument_list|,
literal|"level_1_D"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|level2E
init|=
operator|new
name|Path
argument_list|(
name|level1C
argument_list|,
literal|"level_2_E"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|level3G
init|=
operator|new
name|Path
argument_list|(
name|level2E
argument_list|,
literal|"level_3_G"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Path
argument_list|>
name|dirPaths
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|level0A
argument_list|,
name|level0B
argument_list|,
name|level1C
argument_list|,
name|level1D
argument_list|,
name|level2E
argument_list|,
name|level3G
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Path
name|dirPath
range|:
name|dirPaths
control|)
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
name|dirPath
argument_list|)
expr_stmt|;
block|}
comment|// String constants
specifier|final
name|Path
name|flumeSnapRootDir
init|=
name|level2E
decl_stmt|;
specifier|final
name|Path
name|hbaseSnapRootDir
init|=
name|level1D
decl_stmt|;
specifier|final
name|String
name|flumeFileName
init|=
literal|"flume.log"
decl_stmt|;
specifier|final
name|String
name|hbaseFileName
init|=
literal|"hbase.log"
decl_stmt|;
specifier|final
name|String
name|appAFileName
init|=
literal|"appA.log"
decl_stmt|;
specifier|final
name|String
name|appBFileName
init|=
literal|"appB.log"
decl_stmt|;
specifier|final
name|String
name|flumeSnap1Name
init|=
literal|"flume_snap_s1"
decl_stmt|;
specifier|final
name|String
name|flumeSnap2Name
init|=
literal|"flume_snap_s2"
decl_stmt|;
specifier|final
name|String
name|flumeSnap3Name
init|=
literal|"flume_snap_s3"
decl_stmt|;
specifier|final
name|String
name|hbaseSnap1Name
init|=
literal|"hbase_snap_s1"
decl_stmt|;
specifier|final
name|String
name|hbaseSnap2Name
init|=
literal|"hbase_snap_s2"
decl_stmt|;
specifier|final
name|String
name|hbaseSnap3Name
init|=
literal|"hbase_snap_s3"
decl_stmt|;
specifier|final
name|String
name|flumeRelPathFromSnapDir
init|=
literal|"level_3_G/"
operator|+
name|flumeFileName
decl_stmt|;
comment|// Create files and open a stream
specifier|final
name|Path
name|flumeFile
init|=
operator|new
name|Path
argument_list|(
name|level3G
argument_list|,
name|flumeFileName
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|flumeFile
argument_list|)
expr_stmt|;
name|FSDataOutputStream
name|flumeOutputStream
init|=
name|fs
operator|.
name|append
argument_list|(
name|flumeFile
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|hbaseFile
init|=
operator|new
name|Path
argument_list|(
name|level1D
argument_list|,
name|hbaseFileName
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|hbaseFile
argument_list|)
expr_stmt|;
name|FSDataOutputStream
name|hbaseOutputStream
init|=
name|fs
operator|.
name|append
argument_list|(
name|hbaseFile
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|appAFile
init|=
operator|new
name|Path
argument_list|(
name|level1C
argument_list|,
name|appAFileName
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|appAFile
argument_list|)
expr_stmt|;
name|FSDataOutputStream
name|appAOutputStream
init|=
name|fs
operator|.
name|append
argument_list|(
name|appAFile
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|appBFile
init|=
operator|new
name|Path
argument_list|(
name|level0B
argument_list|,
name|appBFileName
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|appBFile
argument_list|)
expr_stmt|;
name|FSDataOutputStream
name|appBOutputStream
init|=
name|fs
operator|.
name|append
argument_list|(
name|appBFile
argument_list|)
decl_stmt|;
specifier|final
name|long
name|appAFileInitialLength
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|appAFile
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
specifier|final
name|long
name|appBFileInitialLength
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|appBFile
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
comment|// Create Snapshot S1
specifier|final
name|Path
name|flumeS1Dir
init|=
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|fs
argument_list|,
name|flumeSnapRootDir
argument_list|,
name|flumeSnap1Name
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|flumeS1Path
init|=
operator|new
name|Path
argument_list|(
name|flumeS1Dir
argument_list|,
name|flumeRelPathFromSnapDir
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|hbaseS1Dir
init|=
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|fs
argument_list|,
name|hbaseSnapRootDir
argument_list|,
name|hbaseSnap1Name
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|hbaseS1Path
init|=
operator|new
name|Path
argument_list|(
name|hbaseS1Dir
argument_list|,
name|hbaseFileName
argument_list|)
decl_stmt|;
specifier|final
name|long
name|flumeFileLengthAfterS1
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|flumeFile
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
specifier|final
name|long
name|hbaseFileLengthAfterS1
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|hbaseFile
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
comment|// Verify if Snap S1 file lengths are same as the the live ones
name|Assert
operator|.
name|assertEquals
argument_list|(
name|flumeFileLengthAfterS1
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|flumeS1Path
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|hbaseFileLengthAfterS1
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|hbaseS1Path
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appAFileInitialLength
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|appAFile
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appBFileInitialLength
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|appBFile
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|flumeFileWrittenDataLength
init|=
name|flumeFileLengthAfterS1
decl_stmt|;
name|long
name|hbaseFileWrittenDataLength
init|=
name|hbaseFileLengthAfterS1
decl_stmt|;
name|long
name|appAFileWrittenDataLength
init|=
name|appAFileInitialLength
decl_stmt|;
name|int
name|newWriteLength
init|=
call|(
name|int
call|)
argument_list|(
name|BLOCKSIZE
operator|*
literal|1.5
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|newWriteLength
index|]
decl_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|random
operator|.
name|nextBytes
argument_list|(
name|buf
argument_list|)
expr_stmt|;
comment|// Write more data to flume and hbase files only
name|flumeFileWrittenDataLength
operator|+=
name|writeToStream
argument_list|(
name|flumeOutputStream
argument_list|,
name|buf
argument_list|)
expr_stmt|;
name|hbaseFileWrittenDataLength
operator|+=
name|writeToStream
argument_list|(
name|hbaseOutputStream
argument_list|,
name|buf
argument_list|)
expr_stmt|;
comment|// Create Snapshot S2
specifier|final
name|Path
name|flumeS2Dir
init|=
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|fs
argument_list|,
name|flumeSnapRootDir
argument_list|,
name|flumeSnap2Name
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|flumeS2Path
init|=
operator|new
name|Path
argument_list|(
name|flumeS2Dir
argument_list|,
name|flumeRelPathFromSnapDir
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|hbaseS2Dir
init|=
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|fs
argument_list|,
name|hbaseSnapRootDir
argument_list|,
name|hbaseSnap2Name
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|hbaseS2Path
init|=
operator|new
name|Path
argument_list|(
name|hbaseS2Dir
argument_list|,
name|hbaseFileName
argument_list|)
decl_stmt|;
comment|// Verify live files lengths are same as all data written till now
specifier|final
name|long
name|flumeFileLengthAfterS2
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|flumeFile
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
specifier|final
name|long
name|hbaseFileLengthAfterS2
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|hbaseFile
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|flumeFileWrittenDataLength
argument_list|,
name|flumeFileLengthAfterS2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|hbaseFileWrittenDataLength
argument_list|,
name|hbaseFileLengthAfterS2
argument_list|)
expr_stmt|;
comment|// Verify if Snap S2 file lengths are same as the live ones
name|Assert
operator|.
name|assertEquals
argument_list|(
name|flumeFileLengthAfterS2
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|flumeS2Path
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|hbaseFileLengthAfterS2
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|hbaseS2Path
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appAFileInitialLength
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|appAFile
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appBFileInitialLength
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|appBFile
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
comment|// Write more data to appA file only
name|newWriteLength
operator|=
call|(
name|int
call|)
argument_list|(
name|BLOCKSIZE
operator|*
literal|2.5
argument_list|)
expr_stmt|;
name|buf
operator|=
operator|new
name|byte
index|[
name|newWriteLength
index|]
expr_stmt|;
name|random
operator|.
name|nextBytes
argument_list|(
name|buf
argument_list|)
expr_stmt|;
name|appAFileWrittenDataLength
operator|+=
name|writeToStream
argument_list|(
name|appAOutputStream
argument_list|,
name|buf
argument_list|)
expr_stmt|;
comment|// Verify other open files are not affected in their snapshots
name|Assert
operator|.
name|assertEquals
argument_list|(
name|flumeFileLengthAfterS2
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|flumeS2Path
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appAFileWrittenDataLength
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|appAFile
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
comment|// Write more data to flume file only
name|newWriteLength
operator|=
call|(
name|int
call|)
argument_list|(
name|BLOCKSIZE
operator|*
literal|2.5
argument_list|)
expr_stmt|;
name|buf
operator|=
operator|new
name|byte
index|[
name|newWriteLength
index|]
expr_stmt|;
name|random
operator|.
name|nextBytes
argument_list|(
name|buf
argument_list|)
expr_stmt|;
name|flumeFileWrittenDataLength
operator|+=
name|writeToStream
argument_list|(
name|flumeOutputStream
argument_list|,
name|buf
argument_list|)
expr_stmt|;
comment|// Create Snapshot S3
specifier|final
name|Path
name|flumeS3Dir
init|=
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|fs
argument_list|,
name|flumeSnapRootDir
argument_list|,
name|flumeSnap3Name
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|flumeS3Path
init|=
operator|new
name|Path
argument_list|(
name|flumeS3Dir
argument_list|,
name|flumeRelPathFromSnapDir
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|hbaseS3Dir
init|=
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|fs
argument_list|,
name|hbaseSnapRootDir
argument_list|,
name|hbaseSnap3Name
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|hbaseS3Path
init|=
operator|new
name|Path
argument_list|(
name|hbaseS3Dir
argument_list|,
name|hbaseFileName
argument_list|)
decl_stmt|;
comment|// Verify live files lengths are same as all data written till now
specifier|final
name|long
name|flumeFileLengthAfterS3
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|flumeFile
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
specifier|final
name|long
name|hbaseFileLengthAfterS3
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|hbaseFile
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|flumeFileWrittenDataLength
argument_list|,
name|flumeFileLengthAfterS3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|hbaseFileWrittenDataLength
argument_list|,
name|hbaseFileLengthAfterS3
argument_list|)
expr_stmt|;
comment|// Verify if Snap S3 file lengths are same as the live ones
name|Assert
operator|.
name|assertEquals
argument_list|(
name|flumeFileLengthAfterS3
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|flumeS3Path
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|hbaseFileLengthAfterS3
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|hbaseS3Path
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appAFileWrittenDataLength
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|appAFile
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appBFileInitialLength
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|appBFile
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify old flume snapshots have point-in-time / frozen file lengths
comment|// even after the live file have moved forward.
name|Assert
operator|.
name|assertEquals
argument_list|(
name|flumeFileLengthAfterS1
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|flumeS1Path
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|flumeFileLengthAfterS2
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|flumeS2Path
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|flumeFileLengthAfterS3
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|flumeS3Path
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify old hbase snapshots have point-in-time / frozen file lengths
comment|// even after the live files have moved forward.
name|Assert
operator|.
name|assertEquals
argument_list|(
name|hbaseFileLengthAfterS1
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|hbaseS1Path
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|hbaseFileLengthAfterS2
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|hbaseS2Path
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|hbaseFileLengthAfterS3
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|hbaseS3Path
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|flumeOutputStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|hbaseOutputStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|appAOutputStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|appBOutputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test snapshot capturing open files and verify the same    * across NameNode restarts.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testSnapshotsForOpenFilesWithNNRestart ()
specifier|public
name|void
name|testSnapshotsForOpenFilesWithNNRestart
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Construct the directory tree
specifier|final
name|Path
name|level0A
init|=
operator|new
name|Path
argument_list|(
literal|"/level_0_A"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|flumeSnapRootDir
init|=
name|level0A
decl_stmt|;
specifier|final
name|String
name|flumeFileName
init|=
literal|"flume.log"
decl_stmt|;
specifier|final
name|String
name|flumeSnap1Name
init|=
literal|"flume_snap_1"
decl_stmt|;
specifier|final
name|String
name|flumeSnap2Name
init|=
literal|"flume_snap_2"
decl_stmt|;
comment|// Create files and open a stream
specifier|final
name|Path
name|flumeFile
init|=
operator|new
name|Path
argument_list|(
name|level0A
argument_list|,
name|flumeFileName
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|flumeFile
argument_list|)
expr_stmt|;
name|FSDataOutputStream
name|flumeOutputStream
init|=
name|fs
operator|.
name|append
argument_list|(
name|flumeFile
argument_list|)
decl_stmt|;
comment|// Create Snapshot S1
specifier|final
name|Path
name|flumeS1Dir
init|=
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|fs
argument_list|,
name|flumeSnapRootDir
argument_list|,
name|flumeSnap1Name
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|flumeS1Path
init|=
operator|new
name|Path
argument_list|(
name|flumeS1Dir
argument_list|,
name|flumeFileName
argument_list|)
decl_stmt|;
specifier|final
name|long
name|flumeFileLengthAfterS1
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|flumeFile
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
comment|// Verify if Snap S1 file length is same as the the live one
name|Assert
operator|.
name|assertEquals
argument_list|(
name|flumeFileLengthAfterS1
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|flumeS1Path
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|flumeFileWrittenDataLength
init|=
name|flumeFileLengthAfterS1
decl_stmt|;
name|int
name|newWriteLength
init|=
call|(
name|int
call|)
argument_list|(
name|BLOCKSIZE
operator|*
literal|1.5
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|newWriteLength
index|]
decl_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|random
operator|.
name|nextBytes
argument_list|(
name|buf
argument_list|)
expr_stmt|;
comment|// Write more data to flume file
name|flumeFileWrittenDataLength
operator|+=
name|writeToStream
argument_list|(
name|flumeOutputStream
argument_list|,
name|buf
argument_list|)
expr_stmt|;
comment|// Create Snapshot S2
specifier|final
name|Path
name|flumeS2Dir
init|=
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|fs
argument_list|,
name|flumeSnapRootDir
argument_list|,
name|flumeSnap2Name
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|flumeS2Path
init|=
operator|new
name|Path
argument_list|(
name|flumeS2Dir
argument_list|,
name|flumeFileName
argument_list|)
decl_stmt|;
comment|// Verify live files length is same as all data written till now
specifier|final
name|long
name|flumeFileLengthAfterS2
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|flumeFile
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|flumeFileWrittenDataLength
argument_list|,
name|flumeFileLengthAfterS2
argument_list|)
expr_stmt|;
comment|// Verify if Snap S2 file length is same as the live one
name|Assert
operator|.
name|assertEquals
argument_list|(
name|flumeFileLengthAfterS2
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|flumeS2Path
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
comment|// Write more data to flume file
name|flumeFileWrittenDataLength
operator|+=
name|writeToStream
argument_list|(
name|flumeOutputStream
argument_list|,
name|buf
argument_list|)
expr_stmt|;
comment|// Verify old flume snapshots have point-in-time / frozen file lengths
comment|// even after the live file have moved forward.
name|Assert
operator|.
name|assertEquals
argument_list|(
name|flumeFileLengthAfterS1
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|flumeS1Path
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|flumeFileLengthAfterS2
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|flumeS2Path
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
comment|// Restart the NameNode
name|restartNameNode
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
comment|// Verify live file length hasn't changed after NN restart
name|Assert
operator|.
name|assertEquals
argument_list|(
name|flumeFileWrittenDataLength
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|flumeFile
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify old flume snapshots have point-in-time / frozen file lengths
comment|// after NN restart and live file moved forward.
name|Assert
operator|.
name|assertEquals
argument_list|(
name|flumeFileLengthAfterS1
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|flumeS1Path
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|flumeFileLengthAfterS2
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|flumeS2Path
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|flumeOutputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test snapshot capturing open files when an open file with active lease    * is deleted by the client.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testSnapshotsForOpenFilesAndDeletion ()
specifier|public
name|void
name|testSnapshotsForOpenFilesAndDeletion
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Construct the directory tree
specifier|final
name|Path
name|snapRootDir
init|=
operator|new
name|Path
argument_list|(
literal|"/level_0_A"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|flumeFileName
init|=
literal|"flume.log"
decl_stmt|;
specifier|final
name|String
name|hbaseFileName
init|=
literal|"hbase.log"
decl_stmt|;
specifier|final
name|String
name|snap1Name
init|=
literal|"snap_1"
decl_stmt|;
specifier|final
name|String
name|snap2Name
init|=
literal|"snap_2"
decl_stmt|;
specifier|final
name|String
name|snap3Name
init|=
literal|"snap_3"
decl_stmt|;
comment|// Create files and open streams
specifier|final
name|Path
name|flumeFile
init|=
operator|new
name|Path
argument_list|(
name|snapRootDir
argument_list|,
name|flumeFileName
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|flumeFile
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|hbaseFile
init|=
operator|new
name|Path
argument_list|(
name|snapRootDir
argument_list|,
name|hbaseFileName
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|hbaseFile
argument_list|)
expr_stmt|;
name|FSDataOutputStream
name|flumeOutputStream
init|=
name|fs
operator|.
name|append
argument_list|(
name|flumeFile
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|hbaseOutputStream
init|=
name|fs
operator|.
name|append
argument_list|(
name|hbaseFile
argument_list|)
decl_stmt|;
comment|// Create Snapshot S1
specifier|final
name|Path
name|snap1Dir
init|=
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|fs
argument_list|,
name|snapRootDir
argument_list|,
name|snap1Name
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|flumeS1Path
init|=
operator|new
name|Path
argument_list|(
name|snap1Dir
argument_list|,
name|flumeFileName
argument_list|)
decl_stmt|;
specifier|final
name|long
name|flumeFileLengthAfterS1
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|flumeFile
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|hbaseS1Path
init|=
operator|new
name|Path
argument_list|(
name|snap1Dir
argument_list|,
name|hbaseFileName
argument_list|)
decl_stmt|;
specifier|final
name|long
name|hbaseFileLengthAfterS1
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|hbaseFile
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
comment|// Verify if Snap S1 file length is same as the the current versions
name|Assert
operator|.
name|assertEquals
argument_list|(
name|flumeFileLengthAfterS1
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|flumeS1Path
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|hbaseFileLengthAfterS1
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|hbaseS1Path
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|flumeFileWrittenDataLength
init|=
name|flumeFileLengthAfterS1
decl_stmt|;
name|long
name|hbaseFileWrittenDataLength
init|=
name|hbaseFileLengthAfterS1
decl_stmt|;
name|int
name|newWriteLength
init|=
call|(
name|int
call|)
argument_list|(
name|BLOCKSIZE
operator|*
literal|1.5
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|newWriteLength
index|]
decl_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|random
operator|.
name|nextBytes
argument_list|(
name|buf
argument_list|)
expr_stmt|;
comment|// Write more data to files
name|flumeFileWrittenDataLength
operator|+=
name|writeToStream
argument_list|(
name|flumeOutputStream
argument_list|,
name|buf
argument_list|)
expr_stmt|;
name|hbaseFileWrittenDataLength
operator|+=
name|writeToStream
argument_list|(
name|hbaseOutputStream
argument_list|,
name|buf
argument_list|)
expr_stmt|;
comment|// Create Snapshot S2
specifier|final
name|Path
name|snap2Dir
init|=
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|fs
argument_list|,
name|snapRootDir
argument_list|,
name|snap2Name
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|flumeS2Path
init|=
operator|new
name|Path
argument_list|(
name|snap2Dir
argument_list|,
name|flumeFileName
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|hbaseS2Path
init|=
operator|new
name|Path
argument_list|(
name|snap2Dir
argument_list|,
name|hbaseFileName
argument_list|)
decl_stmt|;
comment|// Verify current files length are same as all data written till now
specifier|final
name|long
name|flumeFileLengthAfterS2
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|flumeFile
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|flumeFileWrittenDataLength
argument_list|,
name|flumeFileLengthAfterS2
argument_list|)
expr_stmt|;
specifier|final
name|long
name|hbaseFileLengthAfterS2
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|hbaseFile
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|hbaseFileWrittenDataLength
argument_list|,
name|hbaseFileLengthAfterS2
argument_list|)
expr_stmt|;
comment|// Verify if Snap S2 file length is same as the current versions
name|Assert
operator|.
name|assertEquals
argument_list|(
name|flumeFileLengthAfterS2
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|flumeS2Path
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|hbaseFileLengthAfterS2
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|hbaseS2Path
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
comment|// Write more data to open files
name|writeToStream
argument_list|(
name|flumeOutputStream
argument_list|,
name|buf
argument_list|)
expr_stmt|;
name|hbaseFileWrittenDataLength
operator|+=
name|writeToStream
argument_list|(
name|hbaseOutputStream
argument_list|,
name|buf
argument_list|)
expr_stmt|;
comment|// Verify old snapshots have point-in-time/frozen file
comment|// lengths even after the current versions have moved forward.
name|Assert
operator|.
name|assertEquals
argument_list|(
name|flumeFileLengthAfterS1
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|flumeS1Path
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|flumeFileLengthAfterS2
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|flumeS2Path
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|hbaseFileLengthAfterS1
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|hbaseS1Path
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|hbaseFileLengthAfterS2
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|hbaseS2Path
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
comment|// Delete flume current file. Snapshots should
comment|// still have references to flume file.
name|boolean
name|flumeFileDeleted
init|=
name|fs
operator|.
name|delete
argument_list|(
name|flumeFile
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|flumeFileDeleted
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|flumeFile
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|flumeS1Path
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|flumeS2Path
argument_list|)
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|fs
argument_list|,
name|snapRootDir
argument_list|,
literal|"tmp_snap"
argument_list|)
expr_stmt|;
name|fs
operator|.
name|deleteSnapshot
argument_list|(
name|snapRootDir
argument_list|,
literal|"tmp_snap"
argument_list|)
expr_stmt|;
comment|// Delete snap_2. snap_1 still has reference to
comment|// the flume file.
name|fs
operator|.
name|deleteSnapshot
argument_list|(
name|snapRootDir
argument_list|,
name|snap2Name
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|flumeS2Path
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|flumeS1Path
argument_list|)
argument_list|)
expr_stmt|;
comment|// Delete snap_1. Now all traces of flume file
comment|// is gone.
name|fs
operator|.
name|deleteSnapshot
argument_list|(
name|snapRootDir
argument_list|,
name|snap1Name
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|flumeS2Path
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|flumeS1Path
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create Snapshot S3
specifier|final
name|Path
name|snap3Dir
init|=
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|fs
argument_list|,
name|snapRootDir
argument_list|,
name|snap3Name
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|hbaseS3Path
init|=
operator|new
name|Path
argument_list|(
name|snap3Dir
argument_list|,
name|hbaseFileName
argument_list|)
decl_stmt|;
comment|// Verify live files length is same as all data written till now
specifier|final
name|long
name|hbaseFileLengthAfterS3
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|hbaseFile
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|hbaseFileWrittenDataLength
argument_list|,
name|hbaseFileLengthAfterS3
argument_list|)
expr_stmt|;
comment|// Write more data to open files
name|hbaseFileWrittenDataLength
operator|+=
name|writeToStream
argument_list|(
name|hbaseOutputStream
argument_list|,
name|buf
argument_list|)
expr_stmt|;
comment|// Verify old snapshots have point-in-time/frozen file
comment|// lengths even after the flume open file is deleted and
comment|// the hbase live file has moved forward.
name|Assert
operator|.
name|assertEquals
argument_list|(
name|hbaseFileLengthAfterS3
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|hbaseS3Path
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|hbaseFileWrittenDataLength
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|hbaseFile
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|hbaseOutputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test client writing to open files are not interrupted when snapshots    * that captured open files get deleted.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|240000
argument_list|)
DECL|method|testOpenFileWritingAcrossSnapDeletion ()
specifier|public
name|void
name|testOpenFileWritingAcrossSnapDeletion
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|snapRootDir
init|=
operator|new
name|Path
argument_list|(
literal|"/level_0_A"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|flumeFileName
init|=
literal|"flume.log"
decl_stmt|;
specifier|final
name|String
name|hbaseFileName
init|=
literal|"hbase.log"
decl_stmt|;
specifier|final
name|String
name|snap1Name
init|=
literal|"snap_1"
decl_stmt|;
specifier|final
name|String
name|snap2Name
init|=
literal|"snap_2"
decl_stmt|;
specifier|final
name|String
name|snap3Name
init|=
literal|"snap_3"
decl_stmt|;
comment|// Create files and open streams
specifier|final
name|Path
name|flumeFile
init|=
operator|new
name|Path
argument_list|(
name|snapRootDir
argument_list|,
name|flumeFileName
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|flumeOut
init|=
name|fs
operator|.
name|create
argument_list|(
name|flumeFile
argument_list|,
literal|false
argument_list|,
literal|8000
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|1048576
argument_list|)
decl_stmt|;
name|flumeOut
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|Path
name|hbaseFile
init|=
operator|new
name|Path
argument_list|(
name|snapRootDir
argument_list|,
name|hbaseFileName
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|hbaseOut
init|=
name|fs
operator|.
name|create
argument_list|(
name|hbaseFile
argument_list|,
literal|false
argument_list|,
literal|8000
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|1048576
argument_list|)
decl_stmt|;
name|hbaseOut
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|AtomicBoolean
name|writerError
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|startLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|deleteLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|FSDataOutputStream
name|flumeOutputStream
init|=
name|fs
operator|.
name|append
argument_list|(
name|flumeFile
argument_list|,
literal|8000
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|hbaseOutputStream
init|=
name|fs
operator|.
name|append
argument_list|(
name|hbaseFile
argument_list|,
literal|8000
argument_list|)
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
call|(
name|int
call|)
argument_list|(
literal|1024
operator|*
literal|0.2
argument_list|)
index|]
decl_stmt|;
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
name|Time
operator|.
name|now
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|200000
condition|;
name|i
operator|++
control|)
block|{
name|r
operator|.
name|nextBytes
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|flumeOutputStream
operator|.
name|write
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
if|if
condition|(
name|hbaseOutputStream
operator|!=
literal|null
condition|)
block|{
name|hbaseOutputStream
operator|.
name|write
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|==
literal|50000
condition|)
block|{
name|startLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|==
literal|100000
condition|)
block|{
name|deleteLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|==
literal|150000
condition|)
block|{
name|hbaseOutputStream
operator|.
name|hsync
argument_list|()
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|hbaseFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|hbaseOutputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// since the file is deleted before the open stream close,
comment|// it might throw FileNotFoundException. Ignore the
comment|// expected exception.
block|}
name|hbaseOutputStream
operator|=
literal|null
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|%
literal|5000
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Write pos: "
operator|+
name|flumeOutputStream
operator|.
name|getPos
argument_list|()
operator|+
literal|", size: "
operator|+
name|fs
operator|.
name|getFileStatus
argument_list|(
name|flumeFile
argument_list|)
operator|.
name|getLen
argument_list|()
operator|+
literal|", loop: "
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Writer error: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|writerError
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
name|startLatch
operator|.
name|await
argument_list|()
expr_stmt|;
specifier|final
name|Path
name|snap1Dir
init|=
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|fs
argument_list|,
name|snapRootDir
argument_list|,
name|snap1Name
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|flumeS1Path
init|=
operator|new
name|Path
argument_list|(
name|snap1Dir
argument_list|,
name|flumeFileName
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Snap1 file status: "
operator|+
name|fs
operator|.
name|getFileStatus
argument_list|(
name|flumeS1Path
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Current file status: "
operator|+
name|fs
operator|.
name|getFileStatus
argument_list|(
name|flumeFile
argument_list|)
argument_list|)
expr_stmt|;
name|deleteLatch
operator|.
name|await
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Snap1 file status: "
operator|+
name|fs
operator|.
name|getFileStatus
argument_list|(
name|flumeS1Path
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Current file status: "
operator|+
name|fs
operator|.
name|getFileStatus
argument_list|(
name|flumeFile
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify deletion of snapshot which had the under construction file
comment|// captured is not truncating the under construction file and the thread
comment|// writing to the same file not crashing on newer block allocations.
name|LOG
operator|.
name|info
argument_list|(
literal|"Deleting "
operator|+
name|snap1Name
argument_list|)
expr_stmt|;
name|fs
operator|.
name|deleteSnapshot
argument_list|(
name|snapRootDir
argument_list|,
name|snap1Name
argument_list|)
expr_stmt|;
comment|// Verify creation and deletion of snapshot newer than the oldest
comment|// snapshot is not crashing the thread writing to under construction file.
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|fs
argument_list|,
name|snapRootDir
argument_list|,
name|snap2Name
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|fs
argument_list|,
name|snapRootDir
argument_list|,
name|snap3Name
argument_list|)
expr_stmt|;
name|fs
operator|.
name|deleteSnapshot
argument_list|(
name|snapRootDir
argument_list|,
name|snap3Name
argument_list|)
expr_stmt|;
name|fs
operator|.
name|deleteSnapshot
argument_list|(
name|snapRootDir
argument_list|,
name|snap2Name
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|fs
argument_list|,
name|snapRootDir
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Client encountered writing error!"
argument_list|,
name|writerError
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|restartNameNode
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
block|}
comment|/**    * Verify snapshots with open files captured are safe even when the    * 'current' version of the file is truncated and appended later.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testOpenFilesSnapChecksumWithTrunkAndAppend ()
specifier|public
name|void
name|testOpenFilesSnapChecksumWithTrunkAndAppend
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_SNAPSHOT_CAPTURE_OPENFILES
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Construct the directory tree
specifier|final
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/A/B/C"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
expr_stmt|;
comment|// String constants
specifier|final
name|Path
name|hbaseSnapRootDir
init|=
name|dir
decl_stmt|;
specifier|final
name|String
name|hbaseFileName
init|=
literal|"hbase.wal"
decl_stmt|;
specifier|final
name|String
name|hbaseSnap1Name
init|=
literal|"hbase_snap_s1"
decl_stmt|;
specifier|final
name|String
name|hbaseSnap2Name
init|=
literal|"hbase_snap_s2"
decl_stmt|;
specifier|final
name|String
name|hbaseSnap3Name
init|=
literal|"hbase_snap_s3"
decl_stmt|;
specifier|final
name|String
name|hbaseSnap4Name
init|=
literal|"hbase_snap_s4"
decl_stmt|;
comment|// Create files and open a stream
specifier|final
name|Path
name|hbaseFile
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|hbaseFileName
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|hbaseFile
argument_list|)
expr_stmt|;
specifier|final
name|FileChecksum
name|hbaseWALFileCksum0
init|=
name|fs
operator|.
name|getFileChecksum
argument_list|(
name|hbaseFile
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|hbaseOutputStream
init|=
name|fs
operator|.
name|append
argument_list|(
name|hbaseFile
argument_list|)
decl_stmt|;
comment|// Create Snapshot S1
specifier|final
name|Path
name|hbaseS1Dir
init|=
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|fs
argument_list|,
name|hbaseSnapRootDir
argument_list|,
name|hbaseSnap1Name
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|hbaseS1Path
init|=
operator|new
name|Path
argument_list|(
name|hbaseS1Dir
argument_list|,
name|hbaseFileName
argument_list|)
decl_stmt|;
specifier|final
name|FileChecksum
name|hbaseFileCksumS1
init|=
name|fs
operator|.
name|getFileChecksum
argument_list|(
name|hbaseS1Path
argument_list|)
decl_stmt|;
comment|// Verify if Snap S1 checksum is same as the current version one
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Live and snap1 file checksum doesn't match!"
argument_list|,
name|hbaseWALFileCksum0
argument_list|,
name|fs
operator|.
name|getFileChecksum
argument_list|(
name|hbaseS1Path
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|newWriteLength
init|=
call|(
name|int
call|)
argument_list|(
name|BLOCKSIZE
operator|*
literal|1.5
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|newWriteLength
index|]
decl_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|random
operator|.
name|nextBytes
argument_list|(
name|buf
argument_list|)
expr_stmt|;
name|writeToStream
argument_list|(
name|hbaseOutputStream
argument_list|,
name|buf
argument_list|)
expr_stmt|;
comment|// Create Snapshot S2
specifier|final
name|Path
name|hbaseS2Dir
init|=
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|fs
argument_list|,
name|hbaseSnapRootDir
argument_list|,
name|hbaseSnap2Name
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|hbaseS2Path
init|=
operator|new
name|Path
argument_list|(
name|hbaseS2Dir
argument_list|,
name|hbaseFileName
argument_list|)
decl_stmt|;
specifier|final
name|FileChecksum
name|hbaseFileCksumS2
init|=
name|fs
operator|.
name|getFileChecksum
argument_list|(
name|hbaseS2Path
argument_list|)
decl_stmt|;
comment|// Verify if the s1 checksum is still the same
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Snap file checksum has changed!"
argument_list|,
name|hbaseFileCksumS1
argument_list|,
name|fs
operator|.
name|getFileChecksum
argument_list|(
name|hbaseS1Path
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify if the s2 checksum is different from the s1 checksum
name|Assert
operator|.
name|assertNotEquals
argument_list|(
literal|"Snap1 and snap2 file checksum should differ!"
argument_list|,
name|hbaseFileCksumS1
argument_list|,
name|hbaseFileCksumS2
argument_list|)
expr_stmt|;
name|newWriteLength
operator|=
call|(
name|int
call|)
argument_list|(
name|BLOCKSIZE
operator|*
literal|2.5
argument_list|)
expr_stmt|;
name|buf
operator|=
operator|new
name|byte
index|[
name|newWriteLength
index|]
expr_stmt|;
name|random
operator|.
name|nextBytes
argument_list|(
name|buf
argument_list|)
expr_stmt|;
name|writeToStream
argument_list|(
name|hbaseOutputStream
argument_list|,
name|buf
argument_list|)
expr_stmt|;
comment|// Create Snapshot S3
specifier|final
name|Path
name|hbaseS3Dir
init|=
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|fs
argument_list|,
name|hbaseSnapRootDir
argument_list|,
name|hbaseSnap3Name
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|hbaseS3Path
init|=
operator|new
name|Path
argument_list|(
name|hbaseS3Dir
argument_list|,
name|hbaseFileName
argument_list|)
decl_stmt|;
name|FileChecksum
name|hbaseFileCksumS3
init|=
name|fs
operator|.
name|getFileChecksum
argument_list|(
name|hbaseS3Path
argument_list|)
decl_stmt|;
comment|// Record the checksum for the before truncate current file
name|hbaseOutputStream
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|FileChecksum
name|hbaseFileCksumBeforeTruncate
init|=
name|fs
operator|.
name|getFileChecksum
argument_list|(
name|hbaseFile
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Snap3 and before truncate file checksum should match!"
argument_list|,
name|hbaseFileCksumBeforeTruncate
argument_list|,
name|hbaseFileCksumS3
argument_list|)
expr_stmt|;
comment|// Truncate the current file and record the after truncate checksum
name|long
name|currentFileLen
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|hbaseFile
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|boolean
name|fileTruncated
init|=
name|fs
operator|.
name|truncate
argument_list|(
name|hbaseFile
argument_list|,
name|currentFileLen
operator|/
literal|2
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"File truncation failed!"
argument_list|,
name|fileTruncated
argument_list|)
expr_stmt|;
specifier|final
name|FileChecksum
name|hbaseFileCksumAfterTruncate
init|=
name|fs
operator|.
name|getFileChecksum
argument_list|(
name|hbaseFile
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotEquals
argument_list|(
literal|"Snap3 and after truncate checksum shouldn't match!"
argument_list|,
name|hbaseFileCksumS3
argument_list|,
name|hbaseFileCksumAfterTruncate
argument_list|)
expr_stmt|;
comment|// Append more data to the current file
name|hbaseOutputStream
operator|=
name|fs
operator|.
name|append
argument_list|(
name|hbaseFile
argument_list|)
expr_stmt|;
name|newWriteLength
operator|=
call|(
name|int
call|)
argument_list|(
name|BLOCKSIZE
operator|*
literal|5.5
argument_list|)
expr_stmt|;
name|buf
operator|=
operator|new
name|byte
index|[
name|newWriteLength
index|]
expr_stmt|;
name|random
operator|.
name|nextBytes
argument_list|(
name|buf
argument_list|)
expr_stmt|;
name|writeToStream
argument_list|(
name|hbaseOutputStream
argument_list|,
name|buf
argument_list|)
expr_stmt|;
comment|// Create Snapshot S4
specifier|final
name|Path
name|hbaseS4Dir
init|=
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|fs
argument_list|,
name|hbaseSnapRootDir
argument_list|,
name|hbaseSnap4Name
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|hbaseS4Path
init|=
operator|new
name|Path
argument_list|(
name|hbaseS4Dir
argument_list|,
name|hbaseFileName
argument_list|)
decl_stmt|;
specifier|final
name|FileChecksum
name|hbaseFileCksumS4
init|=
name|fs
operator|.
name|getFileChecksum
argument_list|(
name|hbaseS4Path
argument_list|)
decl_stmt|;
comment|// Record the checksum for the current file after append
name|hbaseOutputStream
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|FileChecksum
name|hbaseFileCksumAfterAppend
init|=
name|fs
operator|.
name|getFileChecksum
argument_list|(
name|hbaseFile
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Snap4 and after append file checksum should match!"
argument_list|,
name|hbaseFileCksumAfterAppend
argument_list|,
name|hbaseFileCksumS4
argument_list|)
expr_stmt|;
comment|// Recompute checksum for S3 path and verify it has not changed
name|hbaseFileCksumS3
operator|=
name|fs
operator|.
name|getFileChecksum
argument_list|(
name|hbaseS3Path
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Snap3 and before truncate file checksum should match!"
argument_list|,
name|hbaseFileCksumBeforeTruncate
argument_list|,
name|hbaseFileCksumS3
argument_list|)
expr_stmt|;
block|}
DECL|method|createSnapshot (Path snapRootDir, String snapName, String fileName)
specifier|private
name|Path
name|createSnapshot
parameter_list|(
name|Path
name|snapRootDir
parameter_list|,
name|String
name|snapName
parameter_list|,
name|String
name|fileName
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|snap1Dir
init|=
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|fs
argument_list|,
name|snapRootDir
argument_list|,
name|snapName
argument_list|)
decl_stmt|;
return|return
operator|new
name|Path
argument_list|(
name|snap1Dir
argument_list|,
name|fileName
argument_list|)
return|;
block|}
DECL|method|verifyFileSize (long fileSize, Path... filePaths)
specifier|private
name|void
name|verifyFileSize
parameter_list|(
name|long
name|fileSize
parameter_list|,
name|Path
modifier|...
name|filePaths
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|Path
name|filePath
range|:
name|filePaths
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|fileSize
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|filePath
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Verify open files captured in the snapshots across config disable    * and enable.    */
annotation|@
name|Test
DECL|method|testOpenFilesWithMixedConfig ()
specifier|public
name|void
name|testOpenFilesWithMixedConfig
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|snapRootDir
init|=
operator|new
name|Path
argument_list|(
literal|"/level_0_A"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|flumeFileName
init|=
literal|"flume.log"
decl_stmt|;
specifier|final
name|String
name|snap1Name
init|=
literal|"s1"
decl_stmt|;
specifier|final
name|String
name|snap2Name
init|=
literal|"s2"
decl_stmt|;
specifier|final
name|String
name|snap3Name
init|=
literal|"s3"
decl_stmt|;
specifier|final
name|String
name|snap4Name
init|=
literal|"s4"
decl_stmt|;
specifier|final
name|String
name|snap5Name
init|=
literal|"s5"
decl_stmt|;
comment|// Create files and open streams
specifier|final
name|Path
name|flumeFile
init|=
operator|new
name|Path
argument_list|(
name|snapRootDir
argument_list|,
name|flumeFileName
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|flumeFile
argument_list|)
expr_stmt|;
name|FSDataOutputStream
name|flumeOutputStream
init|=
name|fs
operator|.
name|append
argument_list|(
name|flumeFile
argument_list|)
decl_stmt|;
comment|// 1. Disable capture open files
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getSnapshotManager
argument_list|()
operator|.
name|setCaptureOpenFiles
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Create Snapshot S1
specifier|final
name|Path
name|flumeS1Path
init|=
name|createSnapshot
argument_list|(
name|snapRootDir
argument_list|,
name|snap1Name
argument_list|,
name|flumeFileName
argument_list|)
decl_stmt|;
comment|// Verify if Snap S1 file length is same as the the current versions
name|verifyFileSize
argument_list|(
name|FILELEN
argument_list|,
name|flumeS1Path
argument_list|)
expr_stmt|;
comment|// Write more data to files
name|long
name|flumeFileWrittenDataLength
init|=
name|FILELEN
decl_stmt|;
name|int
name|newWriteLength
init|=
call|(
name|int
call|)
argument_list|(
name|BLOCKSIZE
operator|*
literal|1.5
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|newWriteLength
index|]
decl_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|random
operator|.
name|nextBytes
argument_list|(
name|buf
argument_list|)
expr_stmt|;
name|flumeFileWrittenDataLength
operator|+=
name|writeToStream
argument_list|(
name|flumeOutputStream
argument_list|,
name|buf
argument_list|)
expr_stmt|;
comment|// Create Snapshot S2
specifier|final
name|Path
name|flumeS2Path
init|=
name|createSnapshot
argument_list|(
name|snapRootDir
argument_list|,
name|snap2Name
argument_list|,
name|flumeFileName
argument_list|)
decl_stmt|;
comment|// Since capture open files was disabled, all snapshots paths
comment|// and the current version should have same file lengths.
name|verifyFileSize
argument_list|(
name|flumeFileWrittenDataLength
argument_list|,
name|flumeFile
argument_list|,
name|flumeS2Path
argument_list|,
name|flumeS1Path
argument_list|)
expr_stmt|;
comment|// 2. Enable capture open files
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getSnapshotManager
argument_list|()
operator|.
name|setCaptureOpenFiles
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Write more data to files
name|flumeFileWrittenDataLength
operator|+=
name|writeToStream
argument_list|(
name|flumeOutputStream
argument_list|,
name|buf
argument_list|)
expr_stmt|;
name|long
name|flumeFileLengthAfterS3
init|=
name|flumeFileWrittenDataLength
decl_stmt|;
comment|// Create Snapshot S3
specifier|final
name|Path
name|flumeS3Path
init|=
name|createSnapshot
argument_list|(
name|snapRootDir
argument_list|,
name|snap3Name
argument_list|,
name|flumeFileName
argument_list|)
decl_stmt|;
comment|// Since open files captured in the previous snapshots were with config
comment|// disabled, their file lengths are now same as the current version.
comment|// With the config turned on, any new data written to the open files
comment|// will no more reflect in the current version or old snapshot paths.
name|verifyFileSize
argument_list|(
name|flumeFileWrittenDataLength
argument_list|,
name|flumeFile
argument_list|,
name|flumeS3Path
argument_list|,
name|flumeS2Path
argument_list|,
name|flumeS1Path
argument_list|)
expr_stmt|;
comment|// Write more data to files
name|flumeFileWrittenDataLength
operator|+=
name|writeToStream
argument_list|(
name|flumeOutputStream
argument_list|,
name|buf
argument_list|)
expr_stmt|;
comment|// Create Snapshot S4
specifier|final
name|Path
name|flumeS4Path
init|=
name|createSnapshot
argument_list|(
name|snapRootDir
argument_list|,
name|snap4Name
argument_list|,
name|flumeFileName
argument_list|)
decl_stmt|;
comment|// Verify S4 has the latest data
name|verifyFileSize
argument_list|(
name|flumeFileWrittenDataLength
argument_list|,
name|flumeFile
argument_list|,
name|flumeS4Path
argument_list|)
expr_stmt|;
comment|// But, open files captured as of Snapshot S3 and before should
comment|// have their old file lengths intact.
name|verifyFileSize
argument_list|(
name|flumeFileLengthAfterS3
argument_list|,
name|flumeS3Path
argument_list|,
name|flumeS2Path
argument_list|,
name|flumeS1Path
argument_list|)
expr_stmt|;
name|long
name|flumeFileLengthAfterS4
init|=
name|flumeFileWrittenDataLength
decl_stmt|;
comment|// 3. Disable capture open files
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getSnapshotManager
argument_list|()
operator|.
name|setCaptureOpenFiles
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Create Snapshot S5
specifier|final
name|Path
name|flumeS5Path
init|=
name|createSnapshot
argument_list|(
name|snapRootDir
argument_list|,
name|snap5Name
argument_list|,
name|flumeFileName
argument_list|)
decl_stmt|;
name|flumeFileWrittenDataLength
operator|+=
name|writeToStream
argument_list|(
name|flumeOutputStream
argument_list|,
name|buf
argument_list|)
expr_stmt|;
comment|// Since capture open files was disabled, any snapshots taken after the
comment|// config change and the current version should have same file lengths
comment|// for the open files.
name|verifyFileSize
argument_list|(
name|flumeFileWrittenDataLength
argument_list|,
name|flumeFile
argument_list|,
name|flumeS5Path
argument_list|)
expr_stmt|;
comment|// But, the old snapshots taken before the config disable should
comment|// continue to be consistent.
name|verifyFileSize
argument_list|(
name|flumeFileLengthAfterS4
argument_list|,
name|flumeS4Path
argument_list|)
expr_stmt|;
block|}
DECL|method|restartNameNode ()
specifier|private
name|void
name|restartNameNode
parameter_list|()
throws|throws
name|Exception
block|{
name|cluster
operator|.
name|triggerBlockReports
argument_list|()
expr_stmt|;
name|NameNode
name|nameNode
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
decl_stmt|;
name|NameNodeAdapter
operator|.
name|enterSafeMode
argument_list|(
name|nameNode
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|NameNodeAdapter
operator|.
name|saveNamespace
argument_list|(
name|nameNode
argument_list|)
expr_stmt|;
name|NameNodeAdapter
operator|.
name|leaveSafeMode
argument_list|(
name|nameNode
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|restartNameNode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

