begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|PermissionStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSDirectory
operator|.
name|DirOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_ACCESSTIME_PRECISION_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
operator|.
name|now
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|anyLong
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doAnswer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|never
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
DECL|class|TestGetBlockLocations
specifier|public
class|class
name|TestGetBlockLocations
block|{
DECL|field|FILE_NAME
specifier|private
specifier|static
specifier|final
name|String
name|FILE_NAME
init|=
literal|"foo"
decl_stmt|;
DECL|field|FILE_PATH
specifier|private
specifier|static
specifier|final
name|String
name|FILE_PATH
init|=
literal|"/"
operator|+
name|FILE_NAME
decl_stmt|;
DECL|field|MOCK_INODE_ID
specifier|private
specifier|static
specifier|final
name|long
name|MOCK_INODE_ID
init|=
literal|16386
decl_stmt|;
DECL|field|RESERVED_PATH
specifier|private
specifier|static
specifier|final
name|String
name|RESERVED_PATH
init|=
literal|"/.reserved/.inodes/"
operator|+
name|MOCK_INODE_ID
decl_stmt|;
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testResolveReservedPath ()
specifier|public
name|void
name|testResolveReservedPath
parameter_list|()
throws|throws
name|IOException
block|{
name|FSNamesystem
name|fsn
init|=
name|setupFileSystem
argument_list|()
decl_stmt|;
name|FSEditLog
name|editlog
init|=
name|fsn
operator|.
name|getEditLog
argument_list|()
decl_stmt|;
name|fsn
operator|.
name|getBlockLocations
argument_list|(
literal|"dummy"
argument_list|,
name|RESERVED_PATH
argument_list|,
literal|0
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|editlog
argument_list|)
operator|.
name|logTimes
argument_list|(
name|eq
argument_list|(
name|FILE_PATH
argument_list|)
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|)
expr_stmt|;
name|fsn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testGetBlockLocationsRacingWithDelete ()
specifier|public
name|void
name|testGetBlockLocationsRacingWithDelete
parameter_list|()
throws|throws
name|IOException
block|{
name|FSNamesystem
name|fsn
init|=
name|spy
argument_list|(
name|setupFileSystem
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|FSDirectory
name|fsd
init|=
name|fsn
operator|.
name|getFSDirectory
argument_list|()
decl_stmt|;
name|FSEditLog
name|editlog
init|=
name|fsn
operator|.
name|getEditLog
argument_list|()
decl_stmt|;
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|INodesInPath
name|iip
init|=
name|fsd
operator|.
name|getINodesInPath
argument_list|(
name|FILE_PATH
argument_list|,
name|DirOp
operator|.
name|READ
argument_list|)
decl_stmt|;
name|FSDirDeleteOp
operator|.
name|delete
argument_list|(
name|fsd
argument_list|,
name|iip
argument_list|,
operator|new
name|INode
operator|.
name|BlocksMapUpdateInfo
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|INode
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
argument_list|,
name|now
argument_list|()
argument_list|)
expr_stmt|;
name|invocation
operator|.
name|callRealMethod
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|fsn
argument_list|)
operator|.
name|writeLock
argument_list|()
expr_stmt|;
name|fsn
operator|.
name|getBlockLocations
argument_list|(
literal|"dummy"
argument_list|,
name|RESERVED_PATH
argument_list|,
literal|0
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|editlog
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|logTimes
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|)
expr_stmt|;
name|fsn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testGetBlockLocationsRacingWithRename ()
specifier|public
name|void
name|testGetBlockLocationsRacingWithRename
parameter_list|()
throws|throws
name|IOException
block|{
name|FSNamesystem
name|fsn
init|=
name|spy
argument_list|(
name|setupFileSystem
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|FSDirectory
name|fsd
init|=
name|fsn
operator|.
name|getFSDirectory
argument_list|()
decl_stmt|;
name|FSEditLog
name|editlog
init|=
name|fsn
operator|.
name|getEditLog
argument_list|()
decl_stmt|;
specifier|final
name|String
name|DST_PATH
init|=
literal|"/bar"
decl_stmt|;
specifier|final
name|boolean
index|[]
name|renamed
init|=
operator|new
name|boolean
index|[
literal|1
index|]
decl_stmt|;
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|invocation
operator|.
name|callRealMethod
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|renamed
index|[
literal|0
index|]
condition|)
block|{
name|FSDirRenameOp
operator|.
name|renameTo
argument_list|(
name|fsd
argument_list|,
name|fsd
operator|.
name|getPermissionChecker
argument_list|()
argument_list|,
name|FILE_PATH
argument_list|,
name|DST_PATH
argument_list|,
operator|new
name|INode
operator|.
name|BlocksMapUpdateInfo
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|renamed
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|fsn
argument_list|)
operator|.
name|writeLock
argument_list|()
expr_stmt|;
name|fsn
operator|.
name|getBlockLocations
argument_list|(
literal|"dummy"
argument_list|,
name|RESERVED_PATH
argument_list|,
literal|0
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|editlog
argument_list|)
operator|.
name|logTimes
argument_list|(
name|eq
argument_list|(
name|DST_PATH
argument_list|)
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|)
expr_stmt|;
name|fsn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|setupFileSystem ()
specifier|private
specifier|static
name|FSNamesystem
name|setupFileSystem
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFS_NAMENODE_ACCESSTIME_PRECISION_KEY
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|FSEditLog
name|editlog
init|=
name|mock
argument_list|(
name|FSEditLog
operator|.
name|class
argument_list|)
decl_stmt|;
name|FSImage
name|image
init|=
name|mock
argument_list|(
name|FSImage
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|image
operator|.
name|getEditLog
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|editlog
argument_list|)
expr_stmt|;
specifier|final
name|FSNamesystem
name|fsn
init|=
operator|new
name|FSNamesystem
argument_list|(
name|conf
argument_list|,
name|image
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|FSDirectory
name|fsd
init|=
name|fsn
operator|.
name|getFSDirectory
argument_list|()
decl_stmt|;
name|INodesInPath
name|iip
init|=
name|fsd
operator|.
name|getINodesInPath
argument_list|(
literal|"/"
argument_list|,
name|DirOp
operator|.
name|READ
argument_list|)
decl_stmt|;
name|PermissionStatus
name|perm
init|=
operator|new
name|PermissionStatus
argument_list|(
literal|"hdfs"
argument_list|,
literal|"supergroup"
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0x1ff
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|INodeFile
name|file
init|=
operator|new
name|INodeFile
argument_list|(
name|MOCK_INODE_ID
argument_list|,
name|FILE_NAME
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|,
name|perm
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
operator|new
name|BlockInfo
index|[]
block|{}
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
name|DFS_BLOCK_SIZE_DEFAULT
argument_list|)
decl_stmt|;
name|fsn
operator|.
name|getFSDirectory
argument_list|()
operator|.
name|addINode
argument_list|(
name|iip
argument_list|,
name|file
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|fsn
return|;
block|}
block|}
end_class

end_unit

