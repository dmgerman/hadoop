begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode.fsdataset.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|impl
operator|.
name|Log4JLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|Is
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|FsDatasetSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|FsVolumeReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Daemon
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_comment
comment|/**  * Ensure that the DN reserves disk space equivalent to a full block for  * replica being written (RBW).  */
end_comment

begin_class
DECL|class|TestRbwSpaceReservation
specifier|public
class|class
name|TestRbwSpaceReservation
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestRbwSpaceReservation
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|DU_REFRESH_INTERVAL_MSEC
specifier|private
specifier|static
specifier|final
name|int
name|DU_REFRESH_INTERVAL_MSEC
init|=
literal|500
decl_stmt|;
DECL|field|STORAGES_PER_DATANODE
specifier|private
specifier|static
specifier|final
name|int
name|STORAGES_PER_DATANODE
init|=
literal|1
decl_stmt|;
DECL|field|BLOCK_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|BLOCK_SIZE
init|=
literal|1024
operator|*
literal|1024
decl_stmt|;
DECL|field|SMALL_BLOCK_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|SMALL_BLOCK_SIZE
init|=
literal|1024
decl_stmt|;
DECL|field|cluster
specifier|protected
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|fs
specifier|private
name|DistributedFileSystem
name|fs
init|=
literal|null
decl_stmt|;
DECL|field|client
specifier|private
name|DFSClient
name|client
init|=
literal|null
decl_stmt|;
DECL|field|singletonVolumeRef
name|FsVolumeReference
name|singletonVolumeRef
init|=
literal|null
decl_stmt|;
DECL|field|singletonVolume
name|FsVolumeImpl
name|singletonVolume
init|=
literal|null
decl_stmt|;
DECL|field|rand
specifier|private
specifier|static
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|method|initConfig (int blockSize)
specifier|private
name|void
name|initConfig
parameter_list|(
name|int
name|blockSize
parameter_list|)
block|{
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
comment|// Refresh disk usage information frequently.
name|conf
operator|.
name|setInt
argument_list|(
name|FS_DU_INTERVAL_KEY
argument_list|,
name|DU_REFRESH_INTERVAL_MSEC
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
comment|// Disable the scanner
name|conf
operator|.
name|setInt
argument_list|(
name|DFS_DATANODE_SCAN_PERIOD_HOURS_KEY
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
static|static
block|{
operator|(
operator|(
name|Log4JLogger
operator|)
name|FsDatasetImpl
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Log4JLogger
operator|)
name|DataNode
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
comment|/**    *    * @param blockSize    * @param perVolumeCapacity limit the capacity of each volume to the given    *                          value. If negative, then don't limit.    * @throws IOException    */
DECL|method|startCluster (int blockSize, int numDatanodes, long perVolumeCapacity)
specifier|private
name|void
name|startCluster
parameter_list|(
name|int
name|blockSize
parameter_list|,
name|int
name|numDatanodes
parameter_list|,
name|long
name|perVolumeCapacity
parameter_list|)
throws|throws
name|IOException
block|{
name|initConfig
argument_list|(
name|blockSize
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|storagesPerDatanode
argument_list|(
name|STORAGES_PER_DATANODE
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDatanodes
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|client
operator|=
name|fs
operator|.
name|getClient
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
if|if
condition|(
name|perVolumeCapacity
operator|>=
literal|0
condition|)
block|{
try|try
init|(
name|FsDatasetSpi
operator|.
name|FsVolumeReferences
name|volumes
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFSDataset
argument_list|()
operator|.
name|getFsVolumeReferences
argument_list|()
init|)
block|{
name|singletonVolumeRef
operator|=
name|volumes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|obtainReference
argument_list|()
expr_stmt|;
block|}
name|singletonVolume
operator|=
operator|(
operator|(
name|FsVolumeImpl
operator|)
name|singletonVolumeRef
operator|.
name|getVolume
argument_list|()
operator|)
expr_stmt|;
name|singletonVolume
operator|.
name|setCapacityForTesting
argument_list|(
name|perVolumeCapacity
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|After
DECL|method|shutdownCluster ()
specifier|public
name|void
name|shutdownCluster
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|singletonVolumeRef
operator|!=
literal|null
condition|)
block|{
name|singletonVolumeRef
operator|.
name|close
argument_list|()
expr_stmt|;
name|singletonVolumeRef
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
name|client
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|fs
operator|!=
literal|null
condition|)
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|createFileAndTestSpaceReservation ( final String fileNamePrefix, final int fileBlockSize)
specifier|private
name|void
name|createFileAndTestSpaceReservation
parameter_list|(
specifier|final
name|String
name|fileNamePrefix
parameter_list|,
specifier|final
name|int
name|fileBlockSize
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|// Enough for 1 block + meta files + some delta.
specifier|final
name|long
name|configuredCapacity
init|=
name|fileBlockSize
operator|*
literal|2
operator|-
literal|1
decl_stmt|;
name|startCluster
argument_list|(
name|BLOCK_SIZE
argument_list|,
literal|1
argument_list|,
name|configuredCapacity
argument_list|)
expr_stmt|;
name|FSDataOutputStream
name|out
init|=
literal|null
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|fileNamePrefix
operator|+
literal|".dat"
argument_list|)
decl_stmt|;
try|try
block|{
name|out
operator|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|,
literal|false
argument_list|,
literal|4096
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
name|fileBlockSize
argument_list|)
expr_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|rand
operator|.
name|nextInt
argument_list|(
name|fileBlockSize
operator|/
literal|4
argument_list|)
index|]
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|out
operator|.
name|hsync
argument_list|()
expr_stmt|;
name|int
name|bytesWritten
init|=
name|buffer
operator|.
name|length
decl_stmt|;
comment|// Check that space was reserved for a full block minus the bytesWritten.
name|assertThat
argument_list|(
name|singletonVolume
operator|.
name|getReservedForRbw
argument_list|()
argument_list|,
name|is
argument_list|(
operator|(
name|long
operator|)
name|fileBlockSize
operator|-
name|bytesWritten
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|=
literal|null
expr_stmt|;
comment|// Check that the reserved space has been released since we closed the
comment|// file.
name|assertThat
argument_list|(
name|singletonVolume
operator|.
name|getReservedForRbw
argument_list|()
argument_list|,
name|is
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
comment|// Reopen the file for appends and write 1 more byte.
name|out
operator|=
name|fs
operator|.
name|append
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|out
operator|.
name|hsync
argument_list|()
expr_stmt|;
name|bytesWritten
operator|+=
name|buffer
operator|.
name|length
expr_stmt|;
comment|// Check that space was again reserved for a full block minus the
comment|// bytesWritten so far.
name|assertThat
argument_list|(
name|singletonVolume
operator|.
name|getReservedForRbw
argument_list|()
argument_list|,
name|is
argument_list|(
operator|(
name|long
operator|)
name|fileBlockSize
operator|-
name|bytesWritten
argument_list|)
argument_list|)
expr_stmt|;
comment|// Write once again and again verify the available space. This ensures
comment|// that the reserved space is progressively adjusted to account for bytes
comment|// written to disk.
name|out
operator|.
name|write
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|out
operator|.
name|hsync
argument_list|()
expr_stmt|;
name|bytesWritten
operator|+=
name|buffer
operator|.
name|length
expr_stmt|;
name|assertThat
argument_list|(
name|singletonVolume
operator|.
name|getReservedForRbw
argument_list|()
argument_list|,
name|is
argument_list|(
operator|(
name|long
operator|)
name|fileBlockSize
operator|-
name|bytesWritten
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testWithDefaultBlockSize ()
specifier|public
name|void
name|testWithDefaultBlockSize
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|createFileAndTestSpaceReservation
argument_list|(
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testWithNonDefaultBlockSize ()
specifier|public
name|void
name|testWithNonDefaultBlockSize
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|// Same test as previous one, but with a non-default block size.
name|createFileAndTestSpaceReservation
argument_list|(
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
argument_list|,
name|BLOCK_SIZE
operator|*
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Rule
DECL|field|thrown
specifier|public
name|ExpectedException
name|thrown
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testWithLimitedSpace ()
specifier|public
name|void
name|testWithLimitedSpace
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Cluster with just enough space for a full block + meta.
name|startCluster
argument_list|(
name|BLOCK_SIZE
argument_list|,
literal|1
argument_list|,
literal|2
operator|*
name|BLOCK_SIZE
operator|-
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|String
name|methodName
init|=
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|methodName
operator|+
literal|".01.dat"
argument_list|)
decl_stmt|;
name|Path
name|file2
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|methodName
operator|+
literal|".02.dat"
argument_list|)
decl_stmt|;
comment|// Create two files.
name|FSDataOutputStream
name|os1
init|=
literal|null
decl_stmt|,
name|os2
init|=
literal|null
decl_stmt|;
try|try
block|{
name|os1
operator|=
name|fs
operator|.
name|create
argument_list|(
name|file1
argument_list|)
expr_stmt|;
name|os2
operator|=
name|fs
operator|.
name|create
argument_list|(
name|file2
argument_list|)
expr_stmt|;
comment|// Write one byte to the first file.
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
literal|1
index|]
decl_stmt|;
name|os1
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|os1
operator|.
name|hsync
argument_list|()
expr_stmt|;
comment|// Try to write one byte to the second file.
comment|// The block allocation must fail.
name|thrown
operator|.
name|expect
argument_list|(
name|RemoteException
operator|.
name|class
argument_list|)
expr_stmt|;
name|os2
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|os2
operator|.
name|hsync
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|os1
operator|!=
literal|null
condition|)
block|{
name|os1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// os2.close() will fail as no block was allocated.
block|}
block|}
comment|/**    * Ensure that reserved space is released when the client goes away    * unexpectedly.    *    * The verification is done for each replica in the write pipeline.    *    * @throws IOException    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testSpaceReleasedOnUnexpectedEof ()
specifier|public
name|void
name|testSpaceReleasedOnUnexpectedEof
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|TimeoutException
block|{
specifier|final
name|short
name|replication
init|=
literal|3
decl_stmt|;
name|startCluster
argument_list|(
name|BLOCK_SIZE
argument_list|,
name|replication
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|String
name|methodName
init|=
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|methodName
operator|+
literal|".01.dat"
argument_list|)
decl_stmt|;
comment|// Write 1 byte to the file and kill the writer.
name|FSDataOutputStream
name|os
init|=
name|fs
operator|.
name|create
argument_list|(
name|file
argument_list|,
name|replication
argument_list|)
decl_stmt|;
name|os
operator|.
name|write
argument_list|(
operator|new
name|byte
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|os
operator|.
name|hsync
argument_list|()
expr_stmt|;
name|DFSTestUtil
operator|.
name|abortStream
argument_list|(
operator|(
name|DFSOutputStream
operator|)
name|os
operator|.
name|getWrappedStream
argument_list|()
argument_list|)
expr_stmt|;
comment|// Ensure all space reserved for the replica was released on each
comment|// DataNode.
for|for
control|(
name|DataNode
name|dn
range|:
name|cluster
operator|.
name|getDataNodes
argument_list|()
control|)
block|{
try|try
init|(
name|FsDatasetSpi
operator|.
name|FsVolumeReferences
name|volumes
init|=
name|dn
operator|.
name|getFSDataset
argument_list|()
operator|.
name|getFsVolumeReferences
argument_list|()
init|)
block|{
specifier|final
name|FsVolumeImpl
name|volume
init|=
operator|(
name|FsVolumeImpl
operator|)
name|volumes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
return|return
operator|(
name|volume
operator|.
name|getReservedForRbw
argument_list|()
operator|==
literal|0
operator|)
return|;
block|}
block|}
argument_list|,
literal|500
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
comment|// Wait until the test times out.
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testRBWFileCreationError ()
specifier|public
name|void
name|testRBWFileCreationError
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|short
name|replication
init|=
literal|1
decl_stmt|;
name|startCluster
argument_list|(
name|BLOCK_SIZE
argument_list|,
name|replication
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|FsVolumeImpl
name|fsVolumeImpl
init|=
operator|(
name|FsVolumeImpl
operator|)
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFSDataset
argument_list|()
operator|.
name|getFsVolumeReferences
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|String
name|methodName
init|=
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|methodName
operator|+
literal|".01.dat"
argument_list|)
decl_stmt|;
comment|// Mock BlockPoolSlice so that RBW file creation gives IOExcception
name|BlockPoolSlice
name|blockPoolSlice
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|BlockPoolSlice
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|blockPoolSlice
operator|.
name|createRbwFile
argument_list|(
operator|(
name|Block
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"Synthetic IO Exception Throgh MOCK"
argument_list|)
argument_list|)
expr_stmt|;
name|Field
name|field
init|=
name|FsVolumeImpl
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"bpSlices"
argument_list|)
decl_stmt|;
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|BlockPoolSlice
argument_list|>
name|bpSlices
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|BlockPoolSlice
argument_list|>
operator|)
name|field
operator|.
name|get
argument_list|(
name|fsVolumeImpl
argument_list|)
decl_stmt|;
name|bpSlices
operator|.
name|put
argument_list|(
name|fsVolumeImpl
operator|.
name|getBlockPoolList
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|blockPoolSlice
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Write 1 byte to the file
name|FSDataOutputStream
name|os
init|=
name|fs
operator|.
name|create
argument_list|(
name|file
argument_list|,
name|replication
argument_list|)
decl_stmt|;
name|os
operator|.
name|write
argument_list|(
operator|new
name|byte
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|os
operator|.
name|hsync
argument_list|()
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expecting IOException file creation failure"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Exception can be ignored (expected)
block|}
comment|// Ensure RBW space reserved is released
name|assertTrue
argument_list|(
literal|"Expected ZERO but got "
operator|+
name|fsVolumeImpl
operator|.
name|getReservedForRbw
argument_list|()
argument_list|,
name|fsVolumeImpl
operator|.
name|getReservedForRbw
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testRBWInJMXBean ()
specifier|public
name|void
name|testRBWInJMXBean
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|short
name|replication
init|=
literal|1
decl_stmt|;
name|startCluster
argument_list|(
name|BLOCK_SIZE
argument_list|,
name|replication
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|String
name|methodName
init|=
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|methodName
operator|+
literal|".01.dat"
argument_list|)
decl_stmt|;
try|try
init|(
name|FSDataOutputStream
name|os
init|=
name|fs
operator|.
name|create
argument_list|(
name|file
argument_list|,
name|replication
argument_list|)
init|)
block|{
comment|// Write 1 byte to the file
name|os
operator|.
name|write
argument_list|(
operator|new
name|byte
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|os
operator|.
name|hsync
argument_list|()
expr_stmt|;
specifier|final
name|MBeanServer
name|mbs
init|=
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
decl_stmt|;
specifier|final
name|ObjectName
name|mxbeanName
init|=
operator|new
name|ObjectName
argument_list|(
literal|"Hadoop:service=DataNode,name=DataNodeInfo"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|volumeInfo
init|=
operator|(
name|String
operator|)
name|mbs
operator|.
name|getAttribute
argument_list|(
name|mxbeanName
argument_list|,
literal|"VolumeInfo"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|volumeInfo
operator|.
name|contains
argument_list|(
literal|"reservedSpaceForRBW"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Stress test to ensure we are not leaking reserved space.    * @throws IOException    * @throws InterruptedException    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|600000
argument_list|)
DECL|method|stressTest ()
specifier|public
name|void
name|stressTest
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|int
name|numWriters
init|=
literal|5
decl_stmt|;
name|startCluster
argument_list|(
name|SMALL_BLOCK_SIZE
argument_list|,
literal|1
argument_list|,
name|SMALL_BLOCK_SIZE
operator|*
name|numWriters
operator|*
literal|10
argument_list|)
expr_stmt|;
name|Writer
index|[]
name|writers
init|=
operator|new
name|Writer
index|[
name|numWriters
index|]
decl_stmt|;
comment|// Start a few writers and let them run for a while.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numWriters
condition|;
operator|++
name|i
control|)
block|{
name|writers
index|[
name|i
index|]
operator|=
operator|new
name|Writer
argument_list|(
name|client
argument_list|,
name|SMALL_BLOCK_SIZE
argument_list|)
expr_stmt|;
name|writers
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|60000
argument_list|)
expr_stmt|;
comment|// Stop the writers.
for|for
control|(
name|Writer
name|w
range|:
name|writers
control|)
block|{
name|w
operator|.
name|stopWriter
argument_list|()
expr_stmt|;
block|}
name|int
name|filesCreated
init|=
literal|0
decl_stmt|;
name|int
name|numFailures
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Writer
name|w
range|:
name|writers
control|)
block|{
name|w
operator|.
name|join
argument_list|()
expr_stmt|;
name|filesCreated
operator|+=
name|w
operator|.
name|getFilesCreated
argument_list|()
expr_stmt|;
name|numFailures
operator|+=
name|w
operator|.
name|getNumFailures
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Stress test created "
operator|+
name|filesCreated
operator|+
literal|" files and hit "
operator|+
name|numFailures
operator|+
literal|" failures"
argument_list|)
expr_stmt|;
comment|// Check no space was leaked.
name|assertThat
argument_list|(
name|singletonVolume
operator|.
name|getReservedForRbw
argument_list|()
argument_list|,
name|is
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|Writer
specifier|private
specifier|static
class|class
name|Writer
extends|extends
name|Daemon
block|{
DECL|field|keepRunning
specifier|private
specifier|volatile
name|boolean
name|keepRunning
decl_stmt|;
DECL|field|localClient
specifier|private
specifier|final
name|DFSClient
name|localClient
decl_stmt|;
DECL|field|filesCreated
specifier|private
name|int
name|filesCreated
init|=
literal|0
decl_stmt|;
DECL|field|numFailures
specifier|private
name|int
name|numFailures
init|=
literal|0
decl_stmt|;
DECL|field|data
name|byte
index|[]
name|data
decl_stmt|;
DECL|method|Writer (DFSClient client, int blockSize)
name|Writer
parameter_list|(
name|DFSClient
name|client
parameter_list|,
name|int
name|blockSize
parameter_list|)
throws|throws
name|IOException
block|{
name|localClient
operator|=
name|client
expr_stmt|;
name|keepRunning
operator|=
literal|true
expr_stmt|;
name|filesCreated
operator|=
literal|0
expr_stmt|;
name|numFailures
operator|=
literal|0
expr_stmt|;
comment|// At least some of the files should span a block boundary.
name|data
operator|=
operator|new
name|byte
index|[
name|blockSize
operator|*
literal|2
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|/**        * Create a file, write up to 3 blocks of data and close the file.        * Do this in a loop until we are told to stop.        */
while|while
condition|(
name|keepRunning
condition|)
block|{
name|OutputStream
name|os
init|=
literal|null
decl_stmt|;
try|try
block|{
name|String
name|filename
init|=
literal|"/file-"
operator|+
name|rand
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|os
operator|=
name|localClient
operator|.
name|create
argument_list|(
name|filename
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|rand
operator|.
name|nextInt
argument_list|(
name|data
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|os
argument_list|)
expr_stmt|;
name|os
operator|=
literal|null
expr_stmt|;
name|localClient
operator|.
name|delete
argument_list|(
name|filename
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|50
argument_list|)
expr_stmt|;
comment|// Sleep for a bit to avoid killing the system.
operator|++
name|filesCreated
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// Just ignore the exception and keep going.
operator|++
name|numFailures
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
return|return;
block|}
finally|finally
block|{
if|if
condition|(
name|os
operator|!=
literal|null
condition|)
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|stopWriter ()
specifier|public
name|void
name|stopWriter
parameter_list|()
block|{
name|keepRunning
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|getFilesCreated ()
specifier|public
name|int
name|getFilesCreated
parameter_list|()
block|{
return|return
name|filesCreated
return|;
block|}
DECL|method|getNumFailures ()
specifier|public
name|int
name|getNumFailures
parameter_list|()
block|{
return|return
name|numFailures
return|;
block|}
block|}
block|}
end_class

end_unit

