begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.client.rpc
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|rpc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|RandomStringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|MiniOzoneClassicCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|MiniOzoneCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneAcl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|BucketArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|ObjectStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneBucket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneClientFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneQuota
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneVolume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|ReplicationFactor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|ReplicationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|VolumeArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|io
operator|.
name|OzoneInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|io
operator|.
name|OzoneOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|ksm
operator|.
name|KeySpaceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|ksm
operator|.
name|helpers
operator|.
name|KsmKeyArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|ksm
operator|.
name|helpers
operator|.
name|KsmKeyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|ksm
operator|.
name|helpers
operator|.
name|KsmKeyLocationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|rest
operator|.
name|OzoneException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|Pipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|protocolPB
operator|.
name|StorageContainerLocationProtocolClientSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_comment
comment|/**  * This class is to test all the public facing APIs of Ozone Client.  */
end_comment

begin_class
DECL|class|TestOzoneRpcClient
specifier|public
class|class
name|TestOzoneRpcClient
block|{
annotation|@
name|Rule
DECL|field|thrown
specifier|public
name|ExpectedException
name|thrown
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
DECL|field|cluster
specifier|private
specifier|static
name|MiniOzoneClassicCluster
name|cluster
init|=
literal|null
decl_stmt|;
DECL|field|ozClient
specifier|private
specifier|static
name|OzoneClient
name|ozClient
init|=
literal|null
decl_stmt|;
DECL|field|store
specifier|private
specifier|static
name|ObjectStore
name|store
init|=
literal|null
decl_stmt|;
DECL|field|keySpaceManager
specifier|private
specifier|static
name|KeySpaceManager
name|keySpaceManager
decl_stmt|;
specifier|private
specifier|static
name|StorageContainerLocationProtocolClientSideTranslatorPB
DECL|field|storageContainerLocationClient
name|storageContainerLocationClient
decl_stmt|;
comment|/**    * Create a MiniOzoneCluster for testing.    *<p>    * Ozone is made active by setting OZONE_ENABLED = true and    * OZONE_HANDLER_TYPE_KEY = "distributed"    *    * @throws IOException    */
annotation|@
name|BeforeClass
DECL|method|init ()
specifier|public
specifier|static
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
name|OzoneConfiguration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_HANDLER_TYPE_KEY
argument_list|,
name|OzoneConsts
operator|.
name|OZONE_HANDLER_DISTRIBUTED
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniOzoneClassicCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|setHandlerType
argument_list|(
name|OzoneConsts
operator|.
name|OZONE_HANDLER_DISTRIBUTED
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"ozone.client.protocol"
argument_list|,
literal|"org.apache.hadoop.ozone.client.rpc.RpcClient"
argument_list|)
expr_stmt|;
name|OzoneClientFactory
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ozClient
operator|=
name|OzoneClientFactory
operator|.
name|getClient
argument_list|()
expr_stmt|;
name|store
operator|=
name|ozClient
operator|.
name|getObjectStore
argument_list|()
expr_stmt|;
name|storageContainerLocationClient
operator|=
name|cluster
operator|.
name|createStorageContainerLocationClient
argument_list|()
expr_stmt|;
name|keySpaceManager
operator|=
name|cluster
operator|.
name|getKeySpaceManager
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateVolume ()
specifier|public
name|void
name|testCreateVolume
parameter_list|()
throws|throws
name|IOException
throws|,
name|OzoneException
block|{
name|String
name|volumeName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|store
operator|.
name|createVolume
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|OzoneVolume
name|volume
init|=
name|store
operator|.
name|getVolume
argument_list|(
name|volumeName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|volumeName
argument_list|,
name|volume
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateVolumeWithOwner ()
specifier|public
name|void
name|testCreateVolumeWithOwner
parameter_list|()
throws|throws
name|IOException
throws|,
name|OzoneException
block|{
name|String
name|volumeName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|VolumeArgs
operator|.
name|Builder
name|argsBuilder
init|=
name|VolumeArgs
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|argsBuilder
operator|.
name|setOwner
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|store
operator|.
name|createVolume
argument_list|(
name|volumeName
argument_list|,
name|argsBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|OzoneVolume
name|volume
init|=
name|store
operator|.
name|getVolume
argument_list|(
name|volumeName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|volumeName
argument_list|,
name|volume
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|volume
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateVolumeWithQuota ()
specifier|public
name|void
name|testCreateVolumeWithQuota
parameter_list|()
throws|throws
name|IOException
throws|,
name|OzoneException
block|{
name|String
name|volumeName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|VolumeArgs
operator|.
name|Builder
name|argsBuilder
init|=
name|VolumeArgs
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|argsBuilder
operator|.
name|setOwner
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuota
argument_list|(
literal|"1000000000 BYTES"
argument_list|)
expr_stmt|;
name|store
operator|.
name|createVolume
argument_list|(
name|volumeName
argument_list|,
name|argsBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|OzoneVolume
name|volume
init|=
name|store
operator|.
name|getVolume
argument_list|(
name|volumeName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|volumeName
argument_list|,
name|volume
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|volume
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1000000000L
argument_list|,
name|volume
operator|.
name|getQuota
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInvalidVolumeCreation ()
specifier|public
name|void
name|testInvalidVolumeCreation
parameter_list|()
throws|throws
name|IOException
block|{
name|thrown
operator|.
name|expectMessage
argument_list|(
literal|"Bucket or Volume name has an unsupported"
operator|+
literal|" character : #"
argument_list|)
expr_stmt|;
name|String
name|volumeName
init|=
literal|"invalid#name"
decl_stmt|;
name|store
operator|.
name|createVolume
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testVolumeAlreadyExist ()
specifier|public
name|void
name|testVolumeAlreadyExist
parameter_list|()
throws|throws
name|IOException
throws|,
name|OzoneException
block|{
name|String
name|volumeName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|store
operator|.
name|createVolume
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
try|try
block|{
name|store
operator|.
name|createVolume
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Volume creation failed, error:VOLUME_ALREADY_EXISTS"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSetVolumeOwner ()
specifier|public
name|void
name|testSetVolumeOwner
parameter_list|()
throws|throws
name|IOException
throws|,
name|OzoneException
block|{
name|String
name|volumeName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|store
operator|.
name|createVolume
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|store
operator|.
name|getVolume
argument_list|(
name|volumeName
argument_list|)
operator|.
name|setOwner
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|OzoneVolume
name|volume
init|=
name|store
operator|.
name|getVolume
argument_list|(
name|volumeName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|volume
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetVolumeQuota ()
specifier|public
name|void
name|testSetVolumeQuota
parameter_list|()
throws|throws
name|IOException
throws|,
name|OzoneException
block|{
name|String
name|volumeName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|store
operator|.
name|createVolume
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|store
operator|.
name|getVolume
argument_list|(
name|volumeName
argument_list|)
operator|.
name|setQuota
argument_list|(
name|OzoneQuota
operator|.
name|parseQuota
argument_list|(
literal|"100000000 BYTES"
argument_list|)
argument_list|)
expr_stmt|;
name|OzoneVolume
name|volume
init|=
name|store
operator|.
name|getVolume
argument_list|(
name|volumeName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|100000000L
argument_list|,
name|volume
operator|.
name|getQuota
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeleteVolume ()
specifier|public
name|void
name|testDeleteVolume
parameter_list|()
throws|throws
name|IOException
throws|,
name|OzoneException
block|{
name|thrown
operator|.
name|expectMessage
argument_list|(
literal|"Info Volume failed, error"
argument_list|)
expr_stmt|;
name|String
name|volumeName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|store
operator|.
name|createVolume
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|OzoneVolume
name|volume
init|=
name|store
operator|.
name|getVolume
argument_list|(
name|volumeName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|volume
argument_list|)
expr_stmt|;
name|store
operator|.
name|deleteVolume
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|store
operator|.
name|getVolume
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateBucket ()
specifier|public
name|void
name|testCreateBucket
parameter_list|()
throws|throws
name|IOException
throws|,
name|OzoneException
block|{
name|long
name|currentTime
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
name|String
name|volumeName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|bucketName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|store
operator|.
name|createVolume
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|OzoneVolume
name|volume
init|=
name|store
operator|.
name|getVolume
argument_list|(
name|volumeName
argument_list|)
decl_stmt|;
name|volume
operator|.
name|createBucket
argument_list|(
name|bucketName
argument_list|)
expr_stmt|;
name|OzoneBucket
name|bucket
init|=
name|volume
operator|.
name|getBucket
argument_list|(
name|bucketName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|bucketName
argument_list|,
name|bucket
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|bucket
operator|.
name|getCreationTime
argument_list|()
operator|>=
name|currentTime
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|volume
operator|.
name|getCreationTime
argument_list|()
operator|>=
name|currentTime
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateBucketWithVersioning ()
specifier|public
name|void
name|testCreateBucketWithVersioning
parameter_list|()
throws|throws
name|IOException
throws|,
name|OzoneException
block|{
name|String
name|volumeName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|bucketName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|store
operator|.
name|createVolume
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|OzoneVolume
name|volume
init|=
name|store
operator|.
name|getVolume
argument_list|(
name|volumeName
argument_list|)
decl_stmt|;
name|BucketArgs
operator|.
name|Builder
name|builder
init|=
name|BucketArgs
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setVersioning
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|volume
operator|.
name|createBucket
argument_list|(
name|bucketName
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|OzoneBucket
name|bucket
init|=
name|volume
operator|.
name|getBucket
argument_list|(
name|bucketName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|bucketName
argument_list|,
name|bucket
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bucket
operator|.
name|getVersioning
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateBucketWithStorageType ()
specifier|public
name|void
name|testCreateBucketWithStorageType
parameter_list|()
throws|throws
name|IOException
throws|,
name|OzoneException
block|{
name|String
name|volumeName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|bucketName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|store
operator|.
name|createVolume
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|OzoneVolume
name|volume
init|=
name|store
operator|.
name|getVolume
argument_list|(
name|volumeName
argument_list|)
decl_stmt|;
name|BucketArgs
operator|.
name|Builder
name|builder
init|=
name|BucketArgs
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setStorageType
argument_list|(
name|StorageType
operator|.
name|SSD
argument_list|)
expr_stmt|;
name|volume
operator|.
name|createBucket
argument_list|(
name|bucketName
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|OzoneBucket
name|bucket
init|=
name|volume
operator|.
name|getBucket
argument_list|(
name|bucketName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|bucketName
argument_list|,
name|bucket
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|StorageType
operator|.
name|SSD
argument_list|,
name|bucket
operator|.
name|getStorageType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateBucketWithAcls ()
specifier|public
name|void
name|testCreateBucketWithAcls
parameter_list|()
throws|throws
name|IOException
throws|,
name|OzoneException
block|{
name|String
name|volumeName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|bucketName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|OzoneAcl
name|userAcl
init|=
operator|new
name|OzoneAcl
argument_list|(
name|OzoneAcl
operator|.
name|OzoneACLType
operator|.
name|USER
argument_list|,
literal|"test"
argument_list|,
name|OzoneAcl
operator|.
name|OzoneACLRights
operator|.
name|READ_WRITE
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|OzoneAcl
argument_list|>
name|acls
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|acls
operator|.
name|add
argument_list|(
name|userAcl
argument_list|)
expr_stmt|;
name|store
operator|.
name|createVolume
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|OzoneVolume
name|volume
init|=
name|store
operator|.
name|getVolume
argument_list|(
name|volumeName
argument_list|)
decl_stmt|;
name|BucketArgs
operator|.
name|Builder
name|builder
init|=
name|BucketArgs
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setAcls
argument_list|(
name|acls
argument_list|)
expr_stmt|;
name|volume
operator|.
name|createBucket
argument_list|(
name|bucketName
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|OzoneBucket
name|bucket
init|=
name|volume
operator|.
name|getBucket
argument_list|(
name|bucketName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|bucketName
argument_list|,
name|bucket
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|bucket
operator|.
name|getAcls
argument_list|()
operator|.
name|contains
argument_list|(
name|userAcl
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateBucketWithAllArgument ()
specifier|public
name|void
name|testCreateBucketWithAllArgument
parameter_list|()
throws|throws
name|IOException
throws|,
name|OzoneException
block|{
name|String
name|volumeName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|bucketName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|OzoneAcl
name|userAcl
init|=
operator|new
name|OzoneAcl
argument_list|(
name|OzoneAcl
operator|.
name|OzoneACLType
operator|.
name|USER
argument_list|,
literal|"test"
argument_list|,
name|OzoneAcl
operator|.
name|OzoneACLRights
operator|.
name|READ_WRITE
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|OzoneAcl
argument_list|>
name|acls
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|acls
operator|.
name|add
argument_list|(
name|userAcl
argument_list|)
expr_stmt|;
name|store
operator|.
name|createVolume
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|OzoneVolume
name|volume
init|=
name|store
operator|.
name|getVolume
argument_list|(
name|volumeName
argument_list|)
decl_stmt|;
name|BucketArgs
operator|.
name|Builder
name|builder
init|=
name|BucketArgs
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setVersioning
argument_list|(
literal|true
argument_list|)
operator|.
name|setStorageType
argument_list|(
name|StorageType
operator|.
name|SSD
argument_list|)
operator|.
name|setAcls
argument_list|(
name|acls
argument_list|)
expr_stmt|;
name|volume
operator|.
name|createBucket
argument_list|(
name|bucketName
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|OzoneBucket
name|bucket
init|=
name|volume
operator|.
name|getBucket
argument_list|(
name|bucketName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|bucketName
argument_list|,
name|bucket
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bucket
operator|.
name|getVersioning
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|StorageType
operator|.
name|SSD
argument_list|,
name|bucket
operator|.
name|getStorageType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|bucket
operator|.
name|getAcls
argument_list|()
operator|.
name|contains
argument_list|(
name|userAcl
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInvalidBucketCreation ()
specifier|public
name|void
name|testInvalidBucketCreation
parameter_list|()
throws|throws
name|IOException
block|{
name|thrown
operator|.
name|expectMessage
argument_list|(
literal|"Bucket or Volume name has an unsupported"
operator|+
literal|" character : #"
argument_list|)
expr_stmt|;
name|String
name|volumeName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|bucketName
init|=
literal|"invalid#bucket"
decl_stmt|;
name|store
operator|.
name|createVolume
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|OzoneVolume
name|volume
init|=
name|store
operator|.
name|getVolume
argument_list|(
name|volumeName
argument_list|)
decl_stmt|;
name|volume
operator|.
name|createBucket
argument_list|(
name|bucketName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddBucketAcl ()
specifier|public
name|void
name|testAddBucketAcl
parameter_list|()
throws|throws
name|IOException
throws|,
name|OzoneException
block|{
name|String
name|volumeName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|bucketName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|store
operator|.
name|createVolume
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|OzoneVolume
name|volume
init|=
name|store
operator|.
name|getVolume
argument_list|(
name|volumeName
argument_list|)
decl_stmt|;
name|volume
operator|.
name|createBucket
argument_list|(
name|bucketName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|OzoneAcl
argument_list|>
name|acls
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|acls
operator|.
name|add
argument_list|(
operator|new
name|OzoneAcl
argument_list|(
name|OzoneAcl
operator|.
name|OzoneACLType
operator|.
name|USER
argument_list|,
literal|"test"
argument_list|,
name|OzoneAcl
operator|.
name|OzoneACLRights
operator|.
name|READ_WRITE
argument_list|)
argument_list|)
expr_stmt|;
name|OzoneBucket
name|bucket
init|=
name|volume
operator|.
name|getBucket
argument_list|(
name|bucketName
argument_list|)
decl_stmt|;
name|bucket
operator|.
name|addAcls
argument_list|(
name|acls
argument_list|)
expr_stmt|;
name|OzoneBucket
name|newBucket
init|=
name|volume
operator|.
name|getBucket
argument_list|(
name|bucketName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|bucketName
argument_list|,
name|newBucket
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|bucket
operator|.
name|getAcls
argument_list|()
operator|.
name|contains
argument_list|(
name|acls
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemoveBucketAcl ()
specifier|public
name|void
name|testRemoveBucketAcl
parameter_list|()
throws|throws
name|IOException
throws|,
name|OzoneException
block|{
name|String
name|volumeName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|bucketName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|OzoneAcl
name|userAcl
init|=
operator|new
name|OzoneAcl
argument_list|(
name|OzoneAcl
operator|.
name|OzoneACLType
operator|.
name|USER
argument_list|,
literal|"test"
argument_list|,
name|OzoneAcl
operator|.
name|OzoneACLRights
operator|.
name|READ_WRITE
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|OzoneAcl
argument_list|>
name|acls
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|acls
operator|.
name|add
argument_list|(
name|userAcl
argument_list|)
expr_stmt|;
name|store
operator|.
name|createVolume
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|OzoneVolume
name|volume
init|=
name|store
operator|.
name|getVolume
argument_list|(
name|volumeName
argument_list|)
decl_stmt|;
name|BucketArgs
operator|.
name|Builder
name|builder
init|=
name|BucketArgs
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setAcls
argument_list|(
name|acls
argument_list|)
expr_stmt|;
name|volume
operator|.
name|createBucket
argument_list|(
name|bucketName
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|OzoneBucket
name|bucket
init|=
name|volume
operator|.
name|getBucket
argument_list|(
name|bucketName
argument_list|)
decl_stmt|;
name|bucket
operator|.
name|removeAcls
argument_list|(
name|acls
argument_list|)
expr_stmt|;
name|OzoneBucket
name|newBucket
init|=
name|volume
operator|.
name|getBucket
argument_list|(
name|bucketName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|bucketName
argument_list|,
name|newBucket
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|!
name|bucket
operator|.
name|getAcls
argument_list|()
operator|.
name|contains
argument_list|(
name|acls
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetBucketVersioning ()
specifier|public
name|void
name|testSetBucketVersioning
parameter_list|()
throws|throws
name|IOException
throws|,
name|OzoneException
block|{
name|String
name|volumeName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|bucketName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|store
operator|.
name|createVolume
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|OzoneVolume
name|volume
init|=
name|store
operator|.
name|getVolume
argument_list|(
name|volumeName
argument_list|)
decl_stmt|;
name|volume
operator|.
name|createBucket
argument_list|(
name|bucketName
argument_list|)
expr_stmt|;
name|OzoneBucket
name|bucket
init|=
name|volume
operator|.
name|getBucket
argument_list|(
name|bucketName
argument_list|)
decl_stmt|;
name|bucket
operator|.
name|setVersioning
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|OzoneBucket
name|newBucket
init|=
name|volume
operator|.
name|getBucket
argument_list|(
name|bucketName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|bucketName
argument_list|,
name|newBucket
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|newBucket
operator|.
name|getVersioning
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetBucketStorageType ()
specifier|public
name|void
name|testSetBucketStorageType
parameter_list|()
throws|throws
name|IOException
throws|,
name|OzoneException
block|{
name|String
name|volumeName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|bucketName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|store
operator|.
name|createVolume
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|OzoneVolume
name|volume
init|=
name|store
operator|.
name|getVolume
argument_list|(
name|volumeName
argument_list|)
decl_stmt|;
name|volume
operator|.
name|createBucket
argument_list|(
name|bucketName
argument_list|)
expr_stmt|;
name|OzoneBucket
name|bucket
init|=
name|volume
operator|.
name|getBucket
argument_list|(
name|bucketName
argument_list|)
decl_stmt|;
name|bucket
operator|.
name|setStorageType
argument_list|(
name|StorageType
operator|.
name|SSD
argument_list|)
expr_stmt|;
name|OzoneBucket
name|newBucket
init|=
name|volume
operator|.
name|getBucket
argument_list|(
name|bucketName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|bucketName
argument_list|,
name|newBucket
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|StorageType
operator|.
name|SSD
argument_list|,
name|newBucket
operator|.
name|getStorageType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeleteBucket ()
specifier|public
name|void
name|testDeleteBucket
parameter_list|()
throws|throws
name|IOException
throws|,
name|OzoneException
block|{
name|thrown
operator|.
name|expectMessage
argument_list|(
literal|"Info Bucket failed, error"
argument_list|)
expr_stmt|;
name|String
name|volumeName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|bucketName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|store
operator|.
name|createVolume
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|OzoneVolume
name|volume
init|=
name|store
operator|.
name|getVolume
argument_list|(
name|volumeName
argument_list|)
decl_stmt|;
name|volume
operator|.
name|createBucket
argument_list|(
name|bucketName
argument_list|)
expr_stmt|;
name|OzoneBucket
name|bucket
init|=
name|volume
operator|.
name|getBucket
argument_list|(
name|bucketName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|bucket
argument_list|)
expr_stmt|;
name|volume
operator|.
name|deleteBucket
argument_list|(
name|bucketName
argument_list|)
expr_stmt|;
name|volume
operator|.
name|getBucket
argument_list|(
name|bucketName
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyRatisReplication (String volumeName, String bucketName, String keyName, ReplicationType type, ReplicationFactor factor)
specifier|private
name|boolean
name|verifyRatisReplication
parameter_list|(
name|String
name|volumeName
parameter_list|,
name|String
name|bucketName
parameter_list|,
name|String
name|keyName
parameter_list|,
name|ReplicationType
name|type
parameter_list|,
name|ReplicationFactor
name|factor
parameter_list|)
throws|throws
name|IOException
block|{
name|KsmKeyArgs
name|keyArgs
init|=
operator|new
name|KsmKeyArgs
operator|.
name|Builder
argument_list|()
operator|.
name|setVolumeName
argument_list|(
name|volumeName
argument_list|)
operator|.
name|setBucketName
argument_list|(
name|bucketName
argument_list|)
operator|.
name|setKeyName
argument_list|(
name|keyName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|OzoneProtos
operator|.
name|ReplicationType
name|replicationType
init|=
name|OzoneProtos
operator|.
name|ReplicationType
operator|.
name|valueOf
argument_list|(
name|type
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|OzoneProtos
operator|.
name|ReplicationFactor
name|replicationFactor
init|=
name|OzoneProtos
operator|.
name|ReplicationFactor
operator|.
name|valueOf
argument_list|(
name|factor
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|KsmKeyInfo
name|keyInfo
init|=
name|keySpaceManager
operator|.
name|lookupKey
argument_list|(
name|keyArgs
argument_list|)
decl_stmt|;
for|for
control|(
name|KsmKeyLocationInfo
name|info
range|:
name|keyInfo
operator|.
name|getKeyLocationList
argument_list|()
control|)
block|{
name|Pipeline
name|pipeline
init|=
name|storageContainerLocationClient
operator|.
name|getContainer
argument_list|(
name|info
operator|.
name|getContainerName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|pipeline
operator|.
name|getFactor
argument_list|()
operator|!=
name|replicationFactor
operator|)
operator|||
operator|(
name|pipeline
operator|.
name|getType
argument_list|()
operator|!=
name|replicationType
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Test
DECL|method|testPutKey ()
specifier|public
name|void
name|testPutKey
parameter_list|()
throws|throws
name|IOException
throws|,
name|OzoneException
block|{
name|String
name|volumeName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|bucketName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|long
name|currentTime
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
name|String
name|value
init|=
literal|"sample value"
decl_stmt|;
name|store
operator|.
name|createVolume
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|OzoneVolume
name|volume
init|=
name|store
operator|.
name|getVolume
argument_list|(
name|volumeName
argument_list|)
decl_stmt|;
name|volume
operator|.
name|createBucket
argument_list|(
name|bucketName
argument_list|)
expr_stmt|;
name|OzoneBucket
name|bucket
init|=
name|volume
operator|.
name|getBucket
argument_list|(
name|bucketName
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|String
name|keyName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|OzoneOutputStream
name|out
init|=
name|bucket
operator|.
name|createKey
argument_list|(
name|keyName
argument_list|,
name|value
operator|.
name|getBytes
argument_list|()
operator|.
name|length
argument_list|,
name|ReplicationType
operator|.
name|STAND_ALONE
argument_list|,
name|ReplicationFactor
operator|.
name|ONE
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|value
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|OzoneKey
name|key
init|=
name|bucket
operator|.
name|getKey
argument_list|(
name|keyName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|keyName
argument_list|,
name|key
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|OzoneInputStream
name|is
init|=
name|bucket
operator|.
name|readKey
argument_list|(
name|keyName
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fileContent
init|=
operator|new
name|byte
index|[
name|value
operator|.
name|getBytes
argument_list|()
operator|.
name|length
index|]
decl_stmt|;
name|is
operator|.
name|read
argument_list|(
name|fileContent
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|verifyRatisReplication
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|keyName
argument_list|,
name|ReplicationType
operator|.
name|STAND_ALONE
argument_list|,
name|ReplicationFactor
operator|.
name|ONE
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|value
argument_list|,
operator|new
name|String
argument_list|(
name|fileContent
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|key
operator|.
name|getCreationTime
argument_list|()
operator|>=
name|currentTime
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|key
operator|.
name|getModificationTime
argument_list|()
operator|>=
name|currentTime
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testPutKeyRatisOneNode ()
specifier|public
name|void
name|testPutKeyRatisOneNode
parameter_list|()
throws|throws
name|IOException
throws|,
name|OzoneException
block|{
name|String
name|volumeName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|bucketName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|long
name|currentTime
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
name|String
name|value
init|=
literal|"sample value"
decl_stmt|;
name|store
operator|.
name|createVolume
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|OzoneVolume
name|volume
init|=
name|store
operator|.
name|getVolume
argument_list|(
name|volumeName
argument_list|)
decl_stmt|;
name|volume
operator|.
name|createBucket
argument_list|(
name|bucketName
argument_list|)
expr_stmt|;
name|OzoneBucket
name|bucket
init|=
name|volume
operator|.
name|getBucket
argument_list|(
name|bucketName
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|String
name|keyName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|OzoneOutputStream
name|out
init|=
name|bucket
operator|.
name|createKey
argument_list|(
name|keyName
argument_list|,
name|value
operator|.
name|getBytes
argument_list|()
operator|.
name|length
argument_list|,
name|ReplicationType
operator|.
name|RATIS
argument_list|,
name|ReplicationFactor
operator|.
name|ONE
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|value
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|OzoneKey
name|key
init|=
name|bucket
operator|.
name|getKey
argument_list|(
name|keyName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|keyName
argument_list|,
name|key
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|OzoneInputStream
name|is
init|=
name|bucket
operator|.
name|readKey
argument_list|(
name|keyName
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fileContent
init|=
operator|new
name|byte
index|[
name|value
operator|.
name|getBytes
argument_list|()
operator|.
name|length
index|]
decl_stmt|;
name|is
operator|.
name|read
argument_list|(
name|fileContent
argument_list|)
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|verifyRatisReplication
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|keyName
argument_list|,
name|ReplicationType
operator|.
name|RATIS
argument_list|,
name|ReplicationFactor
operator|.
name|ONE
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|value
argument_list|,
operator|new
name|String
argument_list|(
name|fileContent
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|key
operator|.
name|getCreationTime
argument_list|()
operator|>=
name|currentTime
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|key
operator|.
name|getModificationTime
argument_list|()
operator|>=
name|currentTime
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testPutKeyRatisThreeNodes ()
specifier|public
name|void
name|testPutKeyRatisThreeNodes
parameter_list|()
throws|throws
name|IOException
throws|,
name|OzoneException
block|{
name|String
name|volumeName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|bucketName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|long
name|currentTime
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
name|String
name|value
init|=
literal|"sample value"
decl_stmt|;
name|store
operator|.
name|createVolume
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|OzoneVolume
name|volume
init|=
name|store
operator|.
name|getVolume
argument_list|(
name|volumeName
argument_list|)
decl_stmt|;
name|volume
operator|.
name|createBucket
argument_list|(
name|bucketName
argument_list|)
expr_stmt|;
name|OzoneBucket
name|bucket
init|=
name|volume
operator|.
name|getBucket
argument_list|(
name|bucketName
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|String
name|keyName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|OzoneOutputStream
name|out
init|=
name|bucket
operator|.
name|createKey
argument_list|(
name|keyName
argument_list|,
name|value
operator|.
name|getBytes
argument_list|()
operator|.
name|length
argument_list|,
name|ReplicationType
operator|.
name|RATIS
argument_list|,
name|ReplicationFactor
operator|.
name|THREE
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|value
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|OzoneKey
name|key
init|=
name|bucket
operator|.
name|getKey
argument_list|(
name|keyName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|keyName
argument_list|,
name|key
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|OzoneInputStream
name|is
init|=
name|bucket
operator|.
name|readKey
argument_list|(
name|keyName
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fileContent
init|=
operator|new
name|byte
index|[
name|value
operator|.
name|getBytes
argument_list|()
operator|.
name|length
index|]
decl_stmt|;
name|is
operator|.
name|read
argument_list|(
name|fileContent
argument_list|)
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|verifyRatisReplication
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|keyName
argument_list|,
name|ReplicationType
operator|.
name|RATIS
argument_list|,
name|ReplicationFactor
operator|.
name|THREE
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|value
argument_list|,
operator|new
name|String
argument_list|(
name|fileContent
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|key
operator|.
name|getCreationTime
argument_list|()
operator|>=
name|currentTime
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|key
operator|.
name|getModificationTime
argument_list|()
operator|>=
name|currentTime
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDeleteKey ()
specifier|public
name|void
name|testDeleteKey
parameter_list|()
throws|throws
name|IOException
throws|,
name|OzoneException
block|{
name|thrown
operator|.
name|expectMessage
argument_list|(
literal|"Lookup key failed, error"
argument_list|)
expr_stmt|;
name|String
name|volumeName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|bucketName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|keyName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|value
init|=
literal|"sample value"
decl_stmt|;
name|store
operator|.
name|createVolume
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|OzoneVolume
name|volume
init|=
name|store
operator|.
name|getVolume
argument_list|(
name|volumeName
argument_list|)
decl_stmt|;
name|volume
operator|.
name|createBucket
argument_list|(
name|bucketName
argument_list|)
expr_stmt|;
name|OzoneBucket
name|bucket
init|=
name|volume
operator|.
name|getBucket
argument_list|(
name|bucketName
argument_list|)
decl_stmt|;
name|OzoneOutputStream
name|out
init|=
name|bucket
operator|.
name|createKey
argument_list|(
name|keyName
argument_list|,
name|value
operator|.
name|getBytes
argument_list|()
operator|.
name|length
argument_list|,
name|ReplicationType
operator|.
name|STAND_ALONE
argument_list|,
name|ReplicationFactor
operator|.
name|ONE
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|value
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|OzoneKey
name|key
init|=
name|bucket
operator|.
name|getKey
argument_list|(
name|keyName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|keyName
argument_list|,
name|key
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|bucket
operator|.
name|deleteKey
argument_list|(
name|keyName
argument_list|)
expr_stmt|;
name|bucket
operator|.
name|getKey
argument_list|(
name|keyName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testListVolume ()
specifier|public
name|void
name|testListVolume
parameter_list|()
throws|throws
name|IOException
throws|,
name|OzoneException
block|{
name|String
name|volBase
init|=
literal|"vol-"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|3
argument_list|)
decl_stmt|;
comment|//Create 10 volume vol-<random>-a-0-<random> to vol-<random>-a-9-<random>
name|String
name|volBaseNameA
init|=
name|volBase
operator|+
literal|"-a-"
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|store
operator|.
name|createVolume
argument_list|(
name|volBaseNameA
operator|+
name|i
operator|+
literal|"-"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//Create 10 volume vol-<random>-b-0-<random> to vol-<random>-b-9-<random>
name|String
name|volBaseNameB
init|=
name|volBase
operator|+
literal|"-b-"
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|store
operator|.
name|createVolume
argument_list|(
name|volBaseNameB
operator|+
name|i
operator|+
literal|"-"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Iterator
argument_list|<
name|OzoneVolume
argument_list|>
name|volIterator
init|=
name|store
operator|.
name|listVolumes
argument_list|(
name|volBase
argument_list|)
decl_stmt|;
name|int
name|totalVolumeCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|volIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|volIterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|totalVolumeCount
operator|++
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|totalVolumeCount
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|OzoneVolume
argument_list|>
name|volAIterator
init|=
name|store
operator|.
name|listVolumes
argument_list|(
name|volBaseNameA
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|volAIterator
operator|.
name|next
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|volBaseNameA
operator|+
name|i
operator|+
literal|"-"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertFalse
argument_list|(
name|volAIterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|OzoneVolume
argument_list|>
name|volBIterator
init|=
name|store
operator|.
name|listVolumes
argument_list|(
name|volBaseNameB
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|volBIterator
operator|.
name|next
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|volBaseNameB
operator|+
name|i
operator|+
literal|"-"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertFalse
argument_list|(
name|volBIterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|OzoneVolume
argument_list|>
name|iter
init|=
name|store
operator|.
name|listVolumes
argument_list|(
name|volBaseNameA
operator|+
literal|"1-"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|iter
operator|.
name|next
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|volBaseNameA
operator|+
literal|"1-"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|iter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testListBucket ()
specifier|public
name|void
name|testListBucket
parameter_list|()
throws|throws
name|IOException
throws|,
name|OzoneException
block|{
name|String
name|volumeA
init|=
literal|"vol-a-"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|volumeB
init|=
literal|"vol-b-"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|store
operator|.
name|createVolume
argument_list|(
name|volumeA
argument_list|)
expr_stmt|;
name|store
operator|.
name|createVolume
argument_list|(
name|volumeB
argument_list|)
expr_stmt|;
name|OzoneVolume
name|volA
init|=
name|store
operator|.
name|getVolume
argument_list|(
name|volumeA
argument_list|)
decl_stmt|;
name|OzoneVolume
name|volB
init|=
name|store
operator|.
name|getVolume
argument_list|(
name|volumeB
argument_list|)
decl_stmt|;
comment|//Create 10 buckets in  vol-a-<random> and 10 in vol-b-<random>
name|String
name|bucketBaseNameA
init|=
literal|"bucket-a-"
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|volA
operator|.
name|createBucket
argument_list|(
name|bucketBaseNameA
operator|+
name|i
operator|+
literal|"-"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|volB
operator|.
name|createBucket
argument_list|(
name|bucketBaseNameA
operator|+
name|i
operator|+
literal|"-"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//Create 10 buckets in vol-a-<random> and 10 in vol-b-<random>
name|String
name|bucketBaseNameB
init|=
literal|"bucket-b-"
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|volA
operator|.
name|createBucket
argument_list|(
name|bucketBaseNameB
operator|+
name|i
operator|+
literal|"-"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|volB
operator|.
name|createBucket
argument_list|(
name|bucketBaseNameB
operator|+
name|i
operator|+
literal|"-"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Iterator
argument_list|<
name|OzoneBucket
argument_list|>
name|volABucketIter
init|=
name|volA
operator|.
name|listBuckets
argument_list|(
literal|"bucket-"
argument_list|)
decl_stmt|;
name|int
name|volABucketCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|volABucketIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|volABucketIter
operator|.
name|next
argument_list|()
expr_stmt|;
name|volABucketCount
operator|++
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|volABucketCount
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|OzoneBucket
argument_list|>
name|volBBucketIter
init|=
name|volA
operator|.
name|listBuckets
argument_list|(
literal|"bucket-"
argument_list|)
decl_stmt|;
name|int
name|volBBucketCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|volBBucketIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|volBBucketIter
operator|.
name|next
argument_list|()
expr_stmt|;
name|volBBucketCount
operator|++
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|volBBucketCount
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|OzoneBucket
argument_list|>
name|volABucketAIter
init|=
name|volA
operator|.
name|listBuckets
argument_list|(
literal|"bucket-a-"
argument_list|)
decl_stmt|;
name|int
name|volABucketACount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|volABucketAIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|volABucketAIter
operator|.
name|next
argument_list|()
expr_stmt|;
name|volABucketACount
operator|++
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|volABucketACount
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|OzoneBucket
argument_list|>
name|volBBucketBIter
init|=
name|volA
operator|.
name|listBuckets
argument_list|(
literal|"bucket-b-"
argument_list|)
decl_stmt|;
name|int
name|volBBucketBCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|volBBucketBIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|volBBucketBIter
operator|.
name|next
argument_list|()
expr_stmt|;
name|volBBucketBCount
operator|++
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|volBBucketBCount
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|OzoneBucket
argument_list|>
name|volABucketBIter
init|=
name|volA
operator|.
name|listBuckets
argument_list|(
literal|"bucket-b-"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|volABucketBIter
operator|.
name|next
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|bucketBaseNameB
operator|+
name|i
operator|+
literal|"-"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertFalse
argument_list|(
name|volABucketBIter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|OzoneBucket
argument_list|>
name|volBBucketAIter
init|=
name|volB
operator|.
name|listBuckets
argument_list|(
literal|"bucket-a-"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|volBBucketAIter
operator|.
name|next
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|bucketBaseNameA
operator|+
name|i
operator|+
literal|"-"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertFalse
argument_list|(
name|volBBucketAIter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testListBucketsOnEmptyVolume ()
specifier|public
name|void
name|testListBucketsOnEmptyVolume
parameter_list|()
throws|throws
name|IOException
throws|,
name|OzoneException
block|{
name|String
name|volume
init|=
literal|"vol-"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|store
operator|.
name|createVolume
argument_list|(
name|volume
argument_list|)
expr_stmt|;
name|OzoneVolume
name|vol
init|=
name|store
operator|.
name|getVolume
argument_list|(
name|volume
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|OzoneBucket
argument_list|>
name|buckets
init|=
name|vol
operator|.
name|listBuckets
argument_list|(
literal|""
argument_list|)
decl_stmt|;
while|while
condition|(
name|buckets
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testListKey ()
specifier|public
name|void
name|testListKey
parameter_list|()
throws|throws
name|IOException
throws|,
name|OzoneException
block|{
name|String
name|volumeA
init|=
literal|"vol-a-"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|volumeB
init|=
literal|"vol-b-"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|bucketA
init|=
literal|"buc-a-"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|bucketB
init|=
literal|"buc-b-"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|store
operator|.
name|createVolume
argument_list|(
name|volumeA
argument_list|)
expr_stmt|;
name|store
operator|.
name|createVolume
argument_list|(
name|volumeB
argument_list|)
expr_stmt|;
name|OzoneVolume
name|volA
init|=
name|store
operator|.
name|getVolume
argument_list|(
name|volumeA
argument_list|)
decl_stmt|;
name|OzoneVolume
name|volB
init|=
name|store
operator|.
name|getVolume
argument_list|(
name|volumeB
argument_list|)
decl_stmt|;
name|volA
operator|.
name|createBucket
argument_list|(
name|bucketA
argument_list|)
expr_stmt|;
name|volA
operator|.
name|createBucket
argument_list|(
name|bucketB
argument_list|)
expr_stmt|;
name|volB
operator|.
name|createBucket
argument_list|(
name|bucketA
argument_list|)
expr_stmt|;
name|volB
operator|.
name|createBucket
argument_list|(
name|bucketB
argument_list|)
expr_stmt|;
name|OzoneBucket
name|volAbucketA
init|=
name|volA
operator|.
name|getBucket
argument_list|(
name|bucketA
argument_list|)
decl_stmt|;
name|OzoneBucket
name|volAbucketB
init|=
name|volA
operator|.
name|getBucket
argument_list|(
name|bucketB
argument_list|)
decl_stmt|;
name|OzoneBucket
name|volBbucketA
init|=
name|volB
operator|.
name|getBucket
argument_list|(
name|bucketA
argument_list|)
decl_stmt|;
name|OzoneBucket
name|volBbucketB
init|=
name|volB
operator|.
name|getBucket
argument_list|(
name|bucketB
argument_list|)
decl_stmt|;
comment|/*     Create 10 keys in  vol-a-<random>/buc-a-<random>,     vol-a-<random>/buc-b-<random>, vol-b-<random>/buc-a-<random> and     vol-b-<random>/buc-b-<random>      */
name|String
name|keyBaseA
init|=
literal|"key-a-"
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|value
init|=
name|RandomStringUtils
operator|.
name|randomAscii
argument_list|(
literal|10240
argument_list|)
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|OzoneOutputStream
name|one
init|=
name|volAbucketA
operator|.
name|createKey
argument_list|(
name|keyBaseA
operator|+
name|i
operator|+
literal|"-"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
argument_list|,
name|value
operator|.
name|length
argument_list|,
name|ReplicationType
operator|.
name|STAND_ALONE
argument_list|,
name|ReplicationFactor
operator|.
name|ONE
argument_list|)
decl_stmt|;
name|one
operator|.
name|write
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|one
operator|.
name|close
argument_list|()
expr_stmt|;
name|OzoneOutputStream
name|two
init|=
name|volAbucketB
operator|.
name|createKey
argument_list|(
name|keyBaseA
operator|+
name|i
operator|+
literal|"-"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
argument_list|,
name|value
operator|.
name|length
argument_list|,
name|ReplicationType
operator|.
name|STAND_ALONE
argument_list|,
name|ReplicationFactor
operator|.
name|ONE
argument_list|)
decl_stmt|;
name|two
operator|.
name|write
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|two
operator|.
name|close
argument_list|()
expr_stmt|;
name|OzoneOutputStream
name|three
init|=
name|volBbucketA
operator|.
name|createKey
argument_list|(
name|keyBaseA
operator|+
name|i
operator|+
literal|"-"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
argument_list|,
name|value
operator|.
name|length
argument_list|,
name|ReplicationType
operator|.
name|STAND_ALONE
argument_list|,
name|ReplicationFactor
operator|.
name|ONE
argument_list|)
decl_stmt|;
name|three
operator|.
name|write
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|three
operator|.
name|close
argument_list|()
expr_stmt|;
name|OzoneOutputStream
name|four
init|=
name|volBbucketB
operator|.
name|createKey
argument_list|(
name|keyBaseA
operator|+
name|i
operator|+
literal|"-"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
argument_list|,
name|value
operator|.
name|length
argument_list|,
name|ReplicationType
operator|.
name|STAND_ALONE
argument_list|,
name|ReplicationFactor
operator|.
name|ONE
argument_list|)
decl_stmt|;
name|four
operator|.
name|write
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|four
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/*     Create 10 keys in  vol-a-<random>/buc-a-<random>,     vol-a-<random>/buc-b-<random>, vol-b-<random>/buc-a-<random> and     vol-b-<random>/buc-b-<random>      */
name|String
name|keyBaseB
init|=
literal|"key-b-"
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|value
init|=
name|RandomStringUtils
operator|.
name|randomAscii
argument_list|(
literal|10240
argument_list|)
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|OzoneOutputStream
name|one
init|=
name|volAbucketA
operator|.
name|createKey
argument_list|(
name|keyBaseB
operator|+
name|i
operator|+
literal|"-"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
argument_list|,
name|value
operator|.
name|length
argument_list|,
name|ReplicationType
operator|.
name|STAND_ALONE
argument_list|,
name|ReplicationFactor
operator|.
name|ONE
argument_list|)
decl_stmt|;
name|one
operator|.
name|write
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|one
operator|.
name|close
argument_list|()
expr_stmt|;
name|OzoneOutputStream
name|two
init|=
name|volAbucketB
operator|.
name|createKey
argument_list|(
name|keyBaseB
operator|+
name|i
operator|+
literal|"-"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
argument_list|,
name|value
operator|.
name|length
argument_list|,
name|ReplicationType
operator|.
name|STAND_ALONE
argument_list|,
name|ReplicationFactor
operator|.
name|ONE
argument_list|)
decl_stmt|;
name|two
operator|.
name|write
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|two
operator|.
name|close
argument_list|()
expr_stmt|;
name|OzoneOutputStream
name|three
init|=
name|volBbucketA
operator|.
name|createKey
argument_list|(
name|keyBaseB
operator|+
name|i
operator|+
literal|"-"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
argument_list|,
name|value
operator|.
name|length
argument_list|,
name|ReplicationType
operator|.
name|STAND_ALONE
argument_list|,
name|ReplicationFactor
operator|.
name|ONE
argument_list|)
decl_stmt|;
name|three
operator|.
name|write
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|three
operator|.
name|close
argument_list|()
expr_stmt|;
name|OzoneOutputStream
name|four
init|=
name|volBbucketB
operator|.
name|createKey
argument_list|(
name|keyBaseB
operator|+
name|i
operator|+
literal|"-"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
argument_list|,
name|value
operator|.
name|length
argument_list|,
name|ReplicationType
operator|.
name|STAND_ALONE
argument_list|,
name|ReplicationFactor
operator|.
name|ONE
argument_list|)
decl_stmt|;
name|four
operator|.
name|write
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|four
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|Iterator
argument_list|<
name|OzoneKey
argument_list|>
name|volABucketAIter
init|=
name|volAbucketA
operator|.
name|listKeys
argument_list|(
literal|"key-"
argument_list|)
decl_stmt|;
name|int
name|volABucketAKeyCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|volABucketAIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|volABucketAIter
operator|.
name|next
argument_list|()
expr_stmt|;
name|volABucketAKeyCount
operator|++
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|volABucketAKeyCount
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|OzoneKey
argument_list|>
name|volABucketBIter
init|=
name|volAbucketB
operator|.
name|listKeys
argument_list|(
literal|"key-"
argument_list|)
decl_stmt|;
name|int
name|volABucketBKeyCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|volABucketBIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|volABucketBIter
operator|.
name|next
argument_list|()
expr_stmt|;
name|volABucketBKeyCount
operator|++
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|volABucketBKeyCount
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|OzoneKey
argument_list|>
name|volBBucketAIter
init|=
name|volBbucketA
operator|.
name|listKeys
argument_list|(
literal|"key-"
argument_list|)
decl_stmt|;
name|int
name|volBBucketAKeyCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|volBBucketAIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|volBBucketAIter
operator|.
name|next
argument_list|()
expr_stmt|;
name|volBBucketAKeyCount
operator|++
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|volBBucketAKeyCount
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|OzoneKey
argument_list|>
name|volBBucketBIter
init|=
name|volBbucketB
operator|.
name|listKeys
argument_list|(
literal|"key-"
argument_list|)
decl_stmt|;
name|int
name|volBBucketBKeyCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|volBBucketBIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|volBBucketBIter
operator|.
name|next
argument_list|()
expr_stmt|;
name|volBBucketBKeyCount
operator|++
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|volBBucketBKeyCount
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|OzoneKey
argument_list|>
name|volABucketAKeyAIter
init|=
name|volAbucketA
operator|.
name|listKeys
argument_list|(
literal|"key-a-"
argument_list|)
decl_stmt|;
name|int
name|volABucketAKeyACount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|volABucketAKeyAIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|volABucketAKeyAIter
operator|.
name|next
argument_list|()
expr_stmt|;
name|volABucketAKeyACount
operator|++
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|volABucketAKeyACount
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|OzoneKey
argument_list|>
name|volABucketAKeyBIter
init|=
name|volAbucketA
operator|.
name|listKeys
argument_list|(
literal|"key-b-"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|volABucketAKeyBIter
operator|.
name|next
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"key-b-"
operator|+
name|i
operator|+
literal|"-"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertFalse
argument_list|(
name|volABucketBIter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testListKeyOnEmptyBucket ()
specifier|public
name|void
name|testListKeyOnEmptyBucket
parameter_list|()
throws|throws
name|IOException
throws|,
name|OzoneException
block|{
name|String
name|volume
init|=
literal|"vol-"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|bucket
init|=
literal|"buc-"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|store
operator|.
name|createVolume
argument_list|(
name|volume
argument_list|)
expr_stmt|;
name|OzoneVolume
name|vol
init|=
name|store
operator|.
name|getVolume
argument_list|(
name|volume
argument_list|)
decl_stmt|;
name|vol
operator|.
name|createBucket
argument_list|(
name|bucket
argument_list|)
expr_stmt|;
name|OzoneBucket
name|buc
init|=
name|vol
operator|.
name|getBucket
argument_list|(
name|bucket
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|OzoneKey
argument_list|>
name|keys
init|=
name|buc
operator|.
name|listKeys
argument_list|(
literal|""
argument_list|)
decl_stmt|;
while|while
condition|(
name|keys
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Close OzoneClient and shutdown MiniOzoneCluster.    */
annotation|@
name|AfterClass
DECL|method|shutdown ()
specifier|public
specifier|static
name|void
name|shutdown
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|ozClient
operator|!=
literal|null
condition|)
block|{
name|ozClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|storageContainerLocationClient
operator|!=
literal|null
condition|)
block|{
name|storageContainerLocationClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

