begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.scm.container.ContainerStates
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|scm
operator|.
name|container
operator|.
name|ContainerStates
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|ContainerTestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ContainerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|Pipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneProtos
operator|.
name|LifeCycleState
operator|.
name|CLOSED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneProtos
operator|.
name|LifeCycleState
operator|.
name|OPEN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneProtos
operator|.
name|ReplicationFactor
operator|.
name|ONE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneProtos
operator|.
name|ReplicationType
operator|.
name|STAND_ALONE
import|;
end_import

begin_class
DECL|class|TestContainerStateMap
specifier|public
class|class
name|TestContainerStateMap
block|{
annotation|@
name|Test
DECL|method|testLifeCyleStates ()
specifier|public
name|void
name|testLifeCyleStates
parameter_list|()
throws|throws
name|IOException
block|{
name|ContainerStateMap
name|stateMap
init|=
operator|new
name|ContainerStateMap
argument_list|()
decl_stmt|;
name|int
name|currentCount
init|=
literal|1
decl_stmt|;
name|Pipeline
name|pipeline
init|=
name|ContainerTestHelper
operator|.
name|createSingleNodePipeline
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|1
init|;
name|x
operator|<
literal|1001
condition|;
name|x
operator|++
control|)
block|{
name|ContainerInfo
name|containerInfo
init|=
operator|new
name|ContainerInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setContainerName
argument_list|(
name|pipeline
operator|.
name|getContainerName
argument_list|()
argument_list|)
operator|.
name|setState
argument_list|(
name|OzoneProtos
operator|.
name|LifeCycleState
operator|.
name|OPEN
argument_list|)
operator|.
name|setPipeline
argument_list|(
name|pipeline
argument_list|)
operator|.
name|setAllocatedBytes
argument_list|(
literal|0
argument_list|)
operator|.
name|setUsedBytes
argument_list|(
literal|0
argument_list|)
operator|.
name|setNumberOfKeys
argument_list|(
literal|0
argument_list|)
operator|.
name|setStateEnterTime
argument_list|(
name|Time
operator|.
name|monotonicNow
argument_list|()
argument_list|)
operator|.
name|setOwner
argument_list|(
literal|"OZONE"
argument_list|)
operator|.
name|setContainerID
argument_list|(
name|x
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|stateMap
operator|.
name|addContainer
argument_list|(
name|containerInfo
argument_list|)
expr_stmt|;
name|currentCount
operator|++
expr_stmt|;
block|}
name|SortedSet
argument_list|<
name|ContainerID
argument_list|>
name|openSet
init|=
name|stateMap
operator|.
name|getMatchingContainerIDs
argument_list|(
name|OPEN
argument_list|,
literal|"OZONE"
argument_list|,
name|ONE
argument_list|,
name|STAND_ALONE
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1000
argument_list|,
name|openSet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|nextMax
init|=
name|currentCount
operator|+
literal|1000
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
name|currentCount
init|;
name|y
operator|<
name|nextMax
condition|;
name|y
operator|++
control|)
block|{
name|ContainerInfo
name|containerInfo
init|=
operator|new
name|ContainerInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setContainerName
argument_list|(
name|pipeline
operator|.
name|getContainerName
argument_list|()
argument_list|)
operator|.
name|setState
argument_list|(
name|OzoneProtos
operator|.
name|LifeCycleState
operator|.
name|CLOSED
argument_list|)
operator|.
name|setPipeline
argument_list|(
name|pipeline
argument_list|)
operator|.
name|setAllocatedBytes
argument_list|(
literal|0
argument_list|)
operator|.
name|setUsedBytes
argument_list|(
literal|0
argument_list|)
operator|.
name|setNumberOfKeys
argument_list|(
literal|0
argument_list|)
operator|.
name|setStateEnterTime
argument_list|(
name|Time
operator|.
name|monotonicNow
argument_list|()
argument_list|)
operator|.
name|setOwner
argument_list|(
literal|"OZONE"
argument_list|)
operator|.
name|setContainerID
argument_list|(
name|y
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|stateMap
operator|.
name|addContainer
argument_list|(
name|containerInfo
argument_list|)
expr_stmt|;
name|currentCount
operator|++
expr_stmt|;
block|}
name|openSet
operator|=
name|stateMap
operator|.
name|getMatchingContainerIDs
argument_list|(
name|OPEN
argument_list|,
literal|"OZONE"
argument_list|,
name|ONE
argument_list|,
name|STAND_ALONE
argument_list|)
expr_stmt|;
name|SortedSet
argument_list|<
name|ContainerID
argument_list|>
name|closeSet
init|=
name|stateMap
operator|.
name|getMatchingContainerIDs
argument_list|(
name|CLOSED
argument_list|,
literal|"OZONE"
argument_list|,
name|ONE
argument_list|,
name|STAND_ALONE
argument_list|)
decl_stmt|;
comment|// Assert that open is still 1000 and we added 1000 more closed containers.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1000
argument_list|,
name|openSet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1000
argument_list|,
name|closeSet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|SortedSet
argument_list|<
name|ContainerID
argument_list|>
name|ownerSet
init|=
name|stateMap
operator|.
name|getContainerIDsByOwner
argument_list|(
literal|"OZONE"
argument_list|)
decl_stmt|;
comment|// Ozone owns 1000 open and 1000 closed containers.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2000
argument_list|,
name|ownerSet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetMatchingContainers ()
specifier|public
name|void
name|testGetMatchingContainers
parameter_list|()
throws|throws
name|IOException
block|{
name|ContainerStateMap
name|stateMap
init|=
operator|new
name|ContainerStateMap
argument_list|()
decl_stmt|;
name|Pipeline
name|pipeline
init|=
name|ContainerTestHelper
operator|.
name|createSingleNodePipeline
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|currentCount
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|1
init|;
name|x
operator|<
literal|1001
condition|;
name|x
operator|++
control|)
block|{
name|ContainerInfo
name|containerInfo
init|=
operator|new
name|ContainerInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setContainerName
argument_list|(
name|pipeline
operator|.
name|getContainerName
argument_list|()
argument_list|)
operator|.
name|setState
argument_list|(
name|OzoneProtos
operator|.
name|LifeCycleState
operator|.
name|OPEN
argument_list|)
operator|.
name|setPipeline
argument_list|(
name|pipeline
argument_list|)
operator|.
name|setAllocatedBytes
argument_list|(
literal|0
argument_list|)
operator|.
name|setUsedBytes
argument_list|(
literal|0
argument_list|)
operator|.
name|setNumberOfKeys
argument_list|(
literal|0
argument_list|)
operator|.
name|setStateEnterTime
argument_list|(
name|Time
operator|.
name|monotonicNow
argument_list|()
argument_list|)
operator|.
name|setOwner
argument_list|(
literal|"OZONE"
argument_list|)
operator|.
name|setContainerID
argument_list|(
name|x
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|stateMap
operator|.
name|addContainer
argument_list|(
name|containerInfo
argument_list|)
expr_stmt|;
name|currentCount
operator|++
expr_stmt|;
block|}
name|SortedSet
argument_list|<
name|ContainerID
argument_list|>
name|openSet
init|=
name|stateMap
operator|.
name|getMatchingContainerIDs
argument_list|(
name|OPEN
argument_list|,
literal|"OZONE"
argument_list|,
name|ONE
argument_list|,
name|STAND_ALONE
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1000
argument_list|,
name|openSet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|nextMax
init|=
name|currentCount
operator|+
literal|200
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
name|currentCount
init|;
name|y
operator|<
name|nextMax
condition|;
name|y
operator|++
control|)
block|{
name|ContainerInfo
name|containerInfo
init|=
operator|new
name|ContainerInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setContainerName
argument_list|(
name|pipeline
operator|.
name|getContainerName
argument_list|()
argument_list|)
operator|.
name|setState
argument_list|(
name|OzoneProtos
operator|.
name|LifeCycleState
operator|.
name|CLOSED
argument_list|)
operator|.
name|setPipeline
argument_list|(
name|pipeline
argument_list|)
operator|.
name|setAllocatedBytes
argument_list|(
literal|0
argument_list|)
operator|.
name|setUsedBytes
argument_list|(
literal|0
argument_list|)
operator|.
name|setNumberOfKeys
argument_list|(
literal|0
argument_list|)
operator|.
name|setStateEnterTime
argument_list|(
name|Time
operator|.
name|monotonicNow
argument_list|()
argument_list|)
operator|.
name|setOwner
argument_list|(
literal|"OZONE"
argument_list|)
operator|.
name|setContainerID
argument_list|(
name|y
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|stateMap
operator|.
name|addContainer
argument_list|(
name|containerInfo
argument_list|)
expr_stmt|;
name|currentCount
operator|++
expr_stmt|;
block|}
name|nextMax
operator|=
name|currentCount
operator|+
literal|30000
expr_stmt|;
for|for
control|(
name|int
name|z
init|=
name|currentCount
init|;
name|z
operator|<
name|nextMax
condition|;
name|z
operator|++
control|)
block|{
name|ContainerInfo
name|containerInfo
init|=
operator|new
name|ContainerInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setContainerName
argument_list|(
name|pipeline
operator|.
name|getContainerName
argument_list|()
argument_list|)
operator|.
name|setState
argument_list|(
name|OzoneProtos
operator|.
name|LifeCycleState
operator|.
name|OPEN
argument_list|)
operator|.
name|setPipeline
argument_list|(
name|pipeline
argument_list|)
operator|.
name|setAllocatedBytes
argument_list|(
literal|0
argument_list|)
operator|.
name|setUsedBytes
argument_list|(
literal|0
argument_list|)
operator|.
name|setNumberOfKeys
argument_list|(
literal|0
argument_list|)
operator|.
name|setStateEnterTime
argument_list|(
name|Time
operator|.
name|monotonicNow
argument_list|()
argument_list|)
operator|.
name|setOwner
argument_list|(
literal|"OZONE"
argument_list|)
operator|.
name|setContainerID
argument_list|(
name|z
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|stateMap
operator|.
name|addContainer
argument_list|(
name|containerInfo
argument_list|)
expr_stmt|;
name|currentCount
operator|++
expr_stmt|;
block|}
comment|// At this point, if we get all Open Containers that belong to Ozone,
comment|// with one replica and standalone replica strategy -- we should get
comment|// 1000 + 30000.
name|openSet
operator|=
name|stateMap
operator|.
name|getMatchingContainerIDs
argument_list|(
name|OPEN
argument_list|,
literal|"OZONE"
argument_list|,
name|ONE
argument_list|,
name|STAND_ALONE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1000
operator|+
literal|30000
argument_list|,
name|openSet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// There is no such owner, so should be a set of zero size.
name|SortedSet
argument_list|<
name|ContainerID
argument_list|>
name|zeroSet
init|=
name|stateMap
operator|.
name|getMatchingContainerIDs
argument_list|(
name|OPEN
argument_list|,
literal|"BILBO"
argument_list|,
name|ONE
argument_list|,
name|STAND_ALONE
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|zeroSet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|nextId
init|=
name|currentCount
operator|++
decl_stmt|;
name|ContainerInfo
name|containerInfo
init|=
operator|new
name|ContainerInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setContainerName
argument_list|(
name|pipeline
operator|.
name|getContainerName
argument_list|()
argument_list|)
operator|.
name|setState
argument_list|(
name|OzoneProtos
operator|.
name|LifeCycleState
operator|.
name|OPEN
argument_list|)
operator|.
name|setPipeline
argument_list|(
name|pipeline
argument_list|)
operator|.
name|setAllocatedBytes
argument_list|(
literal|0
argument_list|)
operator|.
name|setUsedBytes
argument_list|(
literal|0
argument_list|)
operator|.
name|setNumberOfKeys
argument_list|(
literal|0
argument_list|)
operator|.
name|setStateEnterTime
argument_list|(
name|Time
operator|.
name|monotonicNow
argument_list|()
argument_list|)
operator|.
name|setOwner
argument_list|(
literal|"BILBO"
argument_list|)
operator|.
name|setContainerID
argument_list|(
name|nextId
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|stateMap
operator|.
name|addContainer
argument_list|(
name|containerInfo
argument_list|)
expr_stmt|;
name|zeroSet
operator|=
name|stateMap
operator|.
name|getMatchingContainerIDs
argument_list|(
name|OPEN
argument_list|,
literal|"BILBO"
argument_list|,
name|ONE
argument_list|,
name|STAND_ALONE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|zeroSet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Assert that the container we got back is the nextID itself.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|zeroSet
operator|.
name|contains
argument_list|(
operator|new
name|ContainerID
argument_list|(
name|nextId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUpdateState ()
specifier|public
name|void
name|testUpdateState
parameter_list|()
throws|throws
name|IOException
block|{
name|ContainerStateMap
name|stateMap
init|=
operator|new
name|ContainerStateMap
argument_list|()
decl_stmt|;
name|Pipeline
name|pipeline
init|=
name|ContainerTestHelper
operator|.
name|createSingleNodePipeline
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|ContainerInfo
name|containerInfo
init|=
literal|null
decl_stmt|;
name|int
name|currentCount
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|1
init|;
name|x
operator|<
literal|1001
condition|;
name|x
operator|++
control|)
block|{
name|containerInfo
operator|=
operator|new
name|ContainerInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setContainerName
argument_list|(
name|pipeline
operator|.
name|getContainerName
argument_list|()
argument_list|)
operator|.
name|setState
argument_list|(
name|OzoneProtos
operator|.
name|LifeCycleState
operator|.
name|OPEN
argument_list|)
operator|.
name|setPipeline
argument_list|(
name|pipeline
argument_list|)
operator|.
name|setAllocatedBytes
argument_list|(
literal|0
argument_list|)
operator|.
name|setUsedBytes
argument_list|(
literal|0
argument_list|)
operator|.
name|setNumberOfKeys
argument_list|(
literal|0
argument_list|)
operator|.
name|setStateEnterTime
argument_list|(
name|Time
operator|.
name|monotonicNow
argument_list|()
argument_list|)
operator|.
name|setOwner
argument_list|(
literal|"OZONE"
argument_list|)
operator|.
name|setContainerID
argument_list|(
name|x
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|stateMap
operator|.
name|addContainer
argument_list|(
name|containerInfo
argument_list|)
expr_stmt|;
name|currentCount
operator|++
expr_stmt|;
block|}
name|stateMap
operator|.
name|updateState
argument_list|(
name|containerInfo
argument_list|,
name|OPEN
argument_list|,
name|CLOSED
argument_list|)
expr_stmt|;
name|SortedSet
argument_list|<
name|ContainerID
argument_list|>
name|closedSet
init|=
name|stateMap
operator|.
name|getMatchingContainerIDs
argument_list|(
name|CLOSED
argument_list|,
literal|"OZONE"
argument_list|,
name|ONE
argument_list|,
name|STAND_ALONE
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|closedSet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|closedSet
operator|.
name|contains
argument_list|(
name|containerInfo
operator|.
name|containerID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|SortedSet
argument_list|<
name|ContainerID
argument_list|>
name|openSet
init|=
name|stateMap
operator|.
name|getMatchingContainerIDs
argument_list|(
name|OPEN
argument_list|,
literal|"OZONE"
argument_list|,
name|ONE
argument_list|,
name|STAND_ALONE
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|999
argument_list|,
name|openSet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

