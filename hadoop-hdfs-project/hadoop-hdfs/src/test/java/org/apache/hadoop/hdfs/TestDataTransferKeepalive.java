begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_CONTEXT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_MAX_BLOCK_ACQUIRE_FAILURES_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_SOCKET_CACHE_EXPIRY_MSEC_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_SOCKET_REUSE_KEEPALIVE_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_SOCKET_REUSE_KEEPALIVE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_SOCKET_WRITE_TIMEOUT_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
operator|.
name|DataNodeProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|net
operator|.
name|Peer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|NullOutputStream
import|;
end_import

begin_class
DECL|class|TestDataTransferKeepalive
specifier|public
class|class
name|TestDataTransferKeepalive
block|{
DECL|field|conf
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|dn
specifier|private
name|DataNode
name|dn
decl_stmt|;
DECL|field|TEST_FILE
specifier|private
specifier|static
specifier|final
name|Path
name|TEST_FILE
init|=
operator|new
name|Path
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
DECL|field|KEEPALIVE_TIMEOUT
specifier|private
specifier|static
specifier|final
name|int
name|KEEPALIVE_TIMEOUT
init|=
literal|1000
decl_stmt|;
DECL|field|WRITE_TIMEOUT
specifier|private
specifier|static
specifier|final
name|int
name|WRITE_TIMEOUT
init|=
literal|3000
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|DFS_DATANODE_SOCKET_REUSE_KEEPALIVE_KEY
argument_list|,
name|KEEPALIVE_TIMEOUT
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFS_CLIENT_MAX_BLOCK_ACQUIRE_FAILURES_KEY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|dn
operator|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|/**    * Regression test for HDFS-3357. Check that the datanode is respecting    * its configured keepalive timeout.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testDatanodeRespectsKeepAliveTimeout ()
specifier|public
name|void
name|testDatanodeRespectsKeepAliveTimeout
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|clientConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Set a client socket cache expiry time much longer than
comment|// the datanode-side expiration time.
specifier|final
name|long
name|CLIENT_EXPIRY_MS
init|=
literal|60000L
decl_stmt|;
name|clientConf
operator|.
name|setLong
argument_list|(
name|DFS_CLIENT_SOCKET_CACHE_EXPIRY_MSEC_KEY
argument_list|,
name|CLIENT_EXPIRY_MS
argument_list|)
expr_stmt|;
name|clientConf
operator|.
name|set
argument_list|(
name|DFS_CLIENT_CONTEXT
argument_list|,
literal|"testDatanodeRespectsKeepAliveTimeout"
argument_list|)
expr_stmt|;
name|DistributedFileSystem
name|fs
init|=
operator|(
name|DistributedFileSystem
operator|)
name|FileSystem
operator|.
name|get
argument_list|(
name|cluster
operator|.
name|getURI
argument_list|()
argument_list|,
name|clientConf
argument_list|)
decl_stmt|;
name|PeerCache
name|peerCache
init|=
name|ClientContext
operator|.
name|getFromConf
argument_list|(
name|clientConf
argument_list|)
operator|.
name|getPeerCache
argument_list|()
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|TEST_FILE
argument_list|,
literal|1L
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
comment|// Clients that write aren't currently re-used.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|peerCache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertXceiverCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Reads the file, so we should get a
comment|// cached socket, and should have an xceiver on the other side.
name|DFSTestUtil
operator|.
name|readFile
argument_list|(
name|fs
argument_list|,
name|TEST_FILE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|peerCache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertXceiverCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Sleep for a bit longer than the keepalive timeout
comment|// and make sure the xceiver died.
name|Thread
operator|.
name|sleep
argument_list|(
name|DFS_DATANODE_SOCKET_REUSE_KEEPALIVE_DEFAULT
operator|+
literal|50
argument_list|)
expr_stmt|;
name|assertXceiverCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// The socket is still in the cache, because we don't
comment|// notice that it's closed until we try to read
comment|// from it again.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|peerCache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Take it out of the cache - reading should
comment|// give an EOF.
name|Peer
name|peer
init|=
name|peerCache
operator|.
name|get
argument_list|(
name|dn
operator|.
name|getDatanodeId
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|peer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|peer
operator|.
name|getInputStream
argument_list|()
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that the client respects its keepalive timeout.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testClientResponsesKeepAliveTimeout ()
specifier|public
name|void
name|testClientResponsesKeepAliveTimeout
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|clientConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Set a client socket cache expiry time much shorter than
comment|// the datanode-side expiration time.
specifier|final
name|long
name|CLIENT_EXPIRY_MS
init|=
literal|10L
decl_stmt|;
name|clientConf
operator|.
name|setLong
argument_list|(
name|DFS_CLIENT_SOCKET_CACHE_EXPIRY_MSEC_KEY
argument_list|,
name|CLIENT_EXPIRY_MS
argument_list|)
expr_stmt|;
name|clientConf
operator|.
name|set
argument_list|(
name|DFS_CLIENT_CONTEXT
argument_list|,
literal|"testClientResponsesKeepAliveTimeout"
argument_list|)
expr_stmt|;
name|DistributedFileSystem
name|fs
init|=
operator|(
name|DistributedFileSystem
operator|)
name|FileSystem
operator|.
name|get
argument_list|(
name|cluster
operator|.
name|getURI
argument_list|()
argument_list|,
name|clientConf
argument_list|)
decl_stmt|;
name|PeerCache
name|peerCache
init|=
name|ClientContext
operator|.
name|getFromConf
argument_list|(
name|clientConf
argument_list|)
operator|.
name|getPeerCache
argument_list|()
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|TEST_FILE
argument_list|,
literal|1L
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
comment|// Clients that write aren't currently re-used.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|peerCache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertXceiverCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Reads the file, so we should get a
comment|// cached socket, and should have an xceiver on the other side.
name|DFSTestUtil
operator|.
name|readFile
argument_list|(
name|fs
argument_list|,
name|TEST_FILE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|peerCache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertXceiverCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Sleep for a bit longer than the client keepalive timeout.
name|Thread
operator|.
name|sleep
argument_list|(
name|CLIENT_EXPIRY_MS
operator|+
literal|50
argument_list|)
expr_stmt|;
comment|// Taking out a peer which is expired should give a null.
name|Peer
name|peer
init|=
name|peerCache
operator|.
name|get
argument_list|(
name|dn
operator|.
name|getDatanodeId
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|peer
operator|==
literal|null
argument_list|)
expr_stmt|;
comment|// The socket cache is now empty.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|peerCache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test for the case where the client beings to read a long block, but doesn't    * read bytes off the stream quickly. The datanode should time out sending the    * chunks and the transceiver should die, even if it has a long keepalive.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testSlowReader ()
specifier|public
name|void
name|testSlowReader
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Set a client socket cache expiry time much longer than
comment|// the datanode-side expiration time.
specifier|final
name|long
name|CLIENT_EXPIRY_MS
init|=
literal|600000L
decl_stmt|;
name|Configuration
name|clientConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|clientConf
operator|.
name|setLong
argument_list|(
name|DFS_CLIENT_SOCKET_CACHE_EXPIRY_MSEC_KEY
argument_list|,
name|CLIENT_EXPIRY_MS
argument_list|)
expr_stmt|;
name|clientConf
operator|.
name|set
argument_list|(
name|DFS_CLIENT_CONTEXT
argument_list|,
literal|"testSlowReader"
argument_list|)
expr_stmt|;
name|DistributedFileSystem
name|fs
init|=
operator|(
name|DistributedFileSystem
operator|)
name|FileSystem
operator|.
name|get
argument_list|(
name|cluster
operator|.
name|getURI
argument_list|()
argument_list|,
name|clientConf
argument_list|)
decl_stmt|;
comment|// Restart the DN with a shorter write timeout.
name|DataNodeProperties
name|props
init|=
name|cluster
operator|.
name|stopDataNode
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|props
operator|.
name|conf
operator|.
name|setInt
argument_list|(
name|DFS_DATANODE_SOCKET_WRITE_TIMEOUT_KEY
argument_list|,
name|WRITE_TIMEOUT
argument_list|)
expr_stmt|;
name|props
operator|.
name|conf
operator|.
name|setInt
argument_list|(
name|DFS_DATANODE_SOCKET_REUSE_KEEPALIVE_KEY
argument_list|,
literal|120000
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cluster
operator|.
name|restartDataNode
argument_list|(
name|props
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|dn
operator|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Wait for heartbeats to avoid a startup race where we
comment|// try to write the block while the DN is still starting.
name|cluster
operator|.
name|triggerHeartbeats
argument_list|()
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|TEST_FILE
argument_list|,
literal|1024
operator|*
literal|1024
operator|*
literal|8L
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|FSDataInputStream
name|stm
init|=
name|fs
operator|.
name|open
argument_list|(
name|TEST_FILE
argument_list|)
decl_stmt|;
name|stm
operator|.
name|read
argument_list|()
expr_stmt|;
name|assertXceiverCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
comment|// DN should time out in sendChunks, and this should force
comment|// the xceiver to exit.
return|return
name|getXceiverCountWithoutServer
argument_list|()
operator|==
literal|0
return|;
block|}
block|}
argument_list|,
literal|500
argument_list|,
literal|50000
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|stm
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testManyClosedSocketsInCache ()
specifier|public
name|void
name|testManyClosedSocketsInCache
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Make a small file
name|Configuration
name|clientConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|clientConf
operator|.
name|set
argument_list|(
name|DFS_CLIENT_CONTEXT
argument_list|,
literal|"testManyClosedSocketsInCache"
argument_list|)
expr_stmt|;
name|DistributedFileSystem
name|fs
init|=
operator|(
name|DistributedFileSystem
operator|)
name|FileSystem
operator|.
name|get
argument_list|(
name|cluster
operator|.
name|getURI
argument_list|()
argument_list|,
name|clientConf
argument_list|)
decl_stmt|;
name|PeerCache
name|peerCache
init|=
name|ClientContext
operator|.
name|getFromConf
argument_list|(
name|clientConf
argument_list|)
operator|.
name|getPeerCache
argument_list|()
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|TEST_FILE
argument_list|,
literal|1L
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
comment|// Insert a bunch of dead sockets in the cache, by opening
comment|// many streams concurrently, reading all of the data,
comment|// and then closing them.
name|InputStream
index|[]
name|stms
init|=
operator|new
name|InputStream
index|[
literal|5
index|]
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stms
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|stms
index|[
name|i
index|]
operator|=
name|fs
operator|.
name|open
argument_list|(
name|TEST_FILE
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|InputStream
name|stm
range|:
name|stms
control|)
block|{
name|IOUtils
operator|.
name|copyBytes
argument_list|(
name|stm
argument_list|,
operator|new
name|NullOutputStream
argument_list|()
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
literal|null
argument_list|,
name|stms
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|peerCache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Let all the xceivers timeout
name|Thread
operator|.
name|sleep
argument_list|(
literal|1500
argument_list|)
expr_stmt|;
name|assertXceiverCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Client side still has the sockets cached
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|peerCache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Reading should not throw an exception.
name|DFSTestUtil
operator|.
name|readFile
argument_list|(
name|fs
argument_list|,
name|TEST_FILE
argument_list|)
expr_stmt|;
block|}
DECL|method|assertXceiverCount (int expected)
specifier|private
name|void
name|assertXceiverCount
parameter_list|(
name|int
name|expected
parameter_list|)
block|{
name|int
name|count
init|=
name|getXceiverCountWithoutServer
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
operator|!=
name|expected
condition|)
block|{
name|ReflectionUtils
operator|.
name|printThreadInfo
argument_list|(
name|System
operator|.
name|err
argument_list|,
literal|"Thread dumps"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected "
operator|+
name|expected
operator|+
literal|" xceivers, found "
operator|+
name|count
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Returns the datanode's xceiver count, but subtracts 1, since the    * DataXceiverServer counts as one.    *     * @return int xceiver count, not including DataXceiverServer    */
DECL|method|getXceiverCountWithoutServer ()
specifier|private
name|int
name|getXceiverCountWithoutServer
parameter_list|()
block|{
return|return
name|dn
operator|.
name|getXceiverCount
argument_list|()
operator|-
literal|1
return|;
block|}
block|}
end_class

end_unit

