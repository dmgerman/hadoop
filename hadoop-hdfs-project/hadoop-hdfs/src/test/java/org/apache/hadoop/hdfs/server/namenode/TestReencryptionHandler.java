begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|JavaKeyStoreProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProviderCryptoExtension
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystemTestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|KMSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StopWatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|internal
operator|.
name|util
operator|.
name|reflection
operator|.
name|Whitebox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|event
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REENCRYPT_THROTTLE_LIMIT_HANDLER_RATIO_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Test class for ReencryptionHandler.  */
end_comment

begin_class
DECL|class|TestReencryptionHandler
specifier|public
class|class
name|TestReencryptionHandler
block|{
DECL|field|LOG
specifier|protected
specifier|static
specifier|final
name|org
operator|.
name|slf4j
operator|.
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestReencryptionHandler
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
DECL|field|globalTimeout
specifier|public
name|Timeout
name|globalTimeout
init|=
operator|new
name|Timeout
argument_list|(
literal|180
operator|*
literal|1000
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|ReencryptionHandler
operator|.
name|LOG
argument_list|,
name|Level
operator|.
name|TRACE
argument_list|)
expr_stmt|;
block|}
DECL|method|mockReencryptionhandler (final Configuration conf)
specifier|private
name|ReencryptionHandler
name|mockReencryptionhandler
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
comment|// mock stuff to create a mocked ReencryptionHandler
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_KEY_PROVIDER_PATH
argument_list|,
name|JavaKeyStoreProvider
operator|.
name|SCHEME_NAME
operator|+
literal|"://file"
operator|+
operator|new
name|Path
argument_list|(
operator|new
name|FileSystemTestHelper
argument_list|()
operator|.
name|getTestRootDir
argument_list|()
argument_list|,
literal|"test.jks"
argument_list|)
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|EncryptionZoneManager
name|ezm
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|EncryptionZoneManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|KeyProvider
name|kp
init|=
name|KMSUtil
operator|.
name|createKeyProvider
argument_list|(
name|conf
argument_list|,
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_KEY_PROVIDER_PATH
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|ezm
operator|.
name|getProvider
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|KeyProviderCryptoExtension
operator|.
name|createKeyProviderCryptoExtension
argument_list|(
name|kp
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|ReencryptionHandler
argument_list|(
name|ezm
argument_list|,
name|conf
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testThrottle ()
specifier|public
name|void
name|testThrottle
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setDouble
argument_list|(
name|DFS_NAMENODE_REENCRYPT_THROTTLE_LIMIT_HANDLER_RATIO_KEY
argument_list|,
literal|0.5
argument_list|)
expr_stmt|;
specifier|final
name|ReencryptionHandler
name|rh
init|=
name|mockReencryptionhandler
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// mock StopWatches so all = 30s, locked = 20s. With ratio = .5, throttle
comment|// should wait for 30 * 0.5 - 20 = 5s.
specifier|final
name|StopWatch
name|mockAll
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|StopWatch
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockAll
operator|.
name|now
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|(
name|long
operator|)
literal|30000
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockAll
operator|.
name|reset
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockAll
argument_list|)
expr_stmt|;
specifier|final
name|StopWatch
name|mockLocked
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|StopWatch
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockLocked
operator|.
name|now
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|(
name|long
operator|)
literal|20000
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockLocked
operator|.
name|reset
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockLocked
argument_list|)
expr_stmt|;
specifier|final
name|BlockingQueue
argument_list|<
name|Runnable
argument_list|>
name|queue
init|=
operator|new
name|LinkedBlockingQueue
argument_list|<>
argument_list|()
decl_stmt|;
name|Whitebox
operator|.
name|setInternalState
argument_list|(
name|rh
argument_list|,
literal|"throttleTimerAll"
argument_list|,
name|mockAll
argument_list|)
expr_stmt|;
name|Whitebox
operator|.
name|setInternalState
argument_list|(
name|rh
argument_list|,
literal|"throttleTimerLocked"
argument_list|,
name|mockLocked
argument_list|)
expr_stmt|;
name|Whitebox
operator|.
name|setInternalState
argument_list|(
name|rh
argument_list|,
literal|"taskQueue"
argument_list|,
name|queue
argument_list|)
expr_stmt|;
specifier|final
name|StopWatch
name|sw
init|=
operator|new
name|StopWatch
argument_list|()
operator|.
name|start
argument_list|()
decl_stmt|;
name|rh
operator|.
name|throttle
argument_list|()
expr_stmt|;
name|sw
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"should have throttled for at least 4 second"
argument_list|,
name|sw
operator|.
name|now
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|>
literal|8000
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"should have throttled for at most 6 second"
argument_list|,
name|sw
operator|.
name|now
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|<
literal|12000
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testThrottleNoOp ()
specifier|public
name|void
name|testThrottleNoOp
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setDouble
argument_list|(
name|DFS_NAMENODE_REENCRYPT_THROTTLE_LIMIT_HANDLER_RATIO_KEY
argument_list|,
literal|0.5
argument_list|)
expr_stmt|;
specifier|final
name|ReencryptionHandler
name|rh
init|=
name|mockReencryptionhandler
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// mock StopWatches so all = 30s, locked = 10s. With ratio = .5, throttle
comment|// should not happen.
name|StopWatch
name|mockAll
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|StopWatch
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockAll
operator|.
name|now
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Long
argument_list|(
literal|30000
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockAll
operator|.
name|reset
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockAll
argument_list|)
expr_stmt|;
name|StopWatch
name|mockLocked
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|StopWatch
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockLocked
operator|.
name|now
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Long
argument_list|(
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockLocked
operator|.
name|reset
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockLocked
argument_list|)
expr_stmt|;
specifier|final
name|BlockingQueue
argument_list|<
name|Runnable
argument_list|>
name|queue
init|=
operator|new
name|LinkedBlockingQueue
argument_list|<>
argument_list|()
decl_stmt|;
name|Whitebox
operator|.
name|setInternalState
argument_list|(
name|rh
argument_list|,
literal|"throttleTimerAll"
argument_list|,
name|mockAll
argument_list|)
expr_stmt|;
name|Whitebox
operator|.
name|setInternalState
argument_list|(
name|rh
argument_list|,
literal|"throttleTimerLocked"
argument_list|,
name|mockLocked
argument_list|)
expr_stmt|;
name|Whitebox
operator|.
name|setInternalState
argument_list|(
name|rh
argument_list|,
literal|"taskQueue"
argument_list|,
name|queue
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|Long
argument_list|,
name|ReencryptionUpdater
operator|.
name|ZoneSubmissionTracker
argument_list|>
name|submissions
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Whitebox
operator|.
name|setInternalState
argument_list|(
name|rh
argument_list|,
literal|"submissions"
argument_list|,
name|submissions
argument_list|)
expr_stmt|;
name|StopWatch
name|sw
init|=
operator|new
name|StopWatch
argument_list|()
operator|.
name|start
argument_list|()
decl_stmt|;
name|rh
operator|.
name|throttle
argument_list|()
expr_stmt|;
name|sw
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"should not have throttled"
argument_list|,
name|sw
operator|.
name|now
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|<
literal|1000
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testThrottleConfigs ()
specifier|public
name|void
name|testThrottleConfigs
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setDouble
argument_list|(
name|DFS_NAMENODE_REENCRYPT_THROTTLE_LIMIT_HANDLER_RATIO_KEY
argument_list|,
operator|-
literal|1.0
argument_list|)
expr_stmt|;
try|try
block|{
name|mockReencryptionhandler
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should not be able to init"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|" is not positive"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|setDouble
argument_list|(
name|DFS_NAMENODE_REENCRYPT_THROTTLE_LIMIT_HANDLER_RATIO_KEY
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
try|try
block|{
name|mockReencryptionhandler
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should not be able to init"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|" is not positive"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testThrottleAccumulatingTasks ()
specifier|public
name|void
name|testThrottleAccumulatingTasks
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|ReencryptionHandler
name|rh
init|=
name|mockReencryptionhandler
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// mock tasks piling up
specifier|final
name|Map
argument_list|<
name|Long
argument_list|,
name|ReencryptionUpdater
operator|.
name|ZoneSubmissionTracker
argument_list|>
name|submissions
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|ReencryptionUpdater
operator|.
name|ZoneSubmissionTracker
name|zst
init|=
operator|new
name|ReencryptionUpdater
operator|.
name|ZoneSubmissionTracker
argument_list|()
decl_stmt|;
name|submissions
operator|.
name|put
argument_list|(
operator|new
name|Long
argument_list|(
literal|1
argument_list|)
argument_list|,
name|zst
argument_list|)
expr_stmt|;
name|Future
name|mock
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Future
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|availableProcessors
argument_list|()
operator|*
literal|3
condition|;
operator|++
name|i
control|)
block|{
name|zst
operator|.
name|addTask
argument_list|(
name|mock
argument_list|)
expr_stmt|;
block|}
name|Thread
name|removeTaskThread
init|=
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"removeTaskThread interrupted."
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
name|zst
operator|.
name|getTasks
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|Whitebox
operator|.
name|setInternalState
argument_list|(
name|rh
argument_list|,
literal|"submissions"
argument_list|,
name|submissions
argument_list|)
expr_stmt|;
specifier|final
name|StopWatch
name|sw
init|=
operator|new
name|StopWatch
argument_list|()
operator|.
name|start
argument_list|()
decl_stmt|;
name|removeTaskThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|rh
operator|.
name|throttle
argument_list|()
expr_stmt|;
name|sw
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"should have throttled for at least 3 second"
argument_list|,
name|sw
operator|.
name|now
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|>
literal|3000
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

