begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.ksm
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|ksm
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|ObjectStoreHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|MiniOzoneCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|scm
operator|.
name|cli
operator|.
name|SQLCLI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|handlers
operator|.
name|BucketArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|handlers
operator|.
name|KeyArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|handlers
operator|.
name|UserArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|handlers
operator|.
name|VolumeArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|interfaces
operator|.
name|StorageHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|utils
operator|.
name|OzoneUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
operator|.
name|KSM_DB_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * This class tests the CLI that transforms ksm.db into SQLite DB files.  */
end_comment

begin_class
DECL|class|TestKSMSQLCli
specifier|public
class|class
name|TestKSMSQLCli
block|{
DECL|field|cluster
specifier|private
specifier|static
name|MiniOzoneCluster
name|cluster
init|=
literal|null
decl_stmt|;
DECL|field|storageHandler
specifier|private
specifier|static
name|StorageHandler
name|storageHandler
decl_stmt|;
DECL|field|userArgs
specifier|private
specifier|static
name|UserArgs
name|userArgs
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|OzoneConfiguration
name|conf
decl_stmt|;
DECL|field|cli
specifier|private
specifier|static
name|SQLCLI
name|cli
decl_stmt|;
DECL|field|userName
specifier|private
specifier|static
name|String
name|userName
init|=
literal|"userTest"
decl_stmt|;
DECL|field|adminName
specifier|private
specifier|static
name|String
name|adminName
init|=
literal|"adminTest"
decl_stmt|;
DECL|field|volumeName0
specifier|private
specifier|static
name|String
name|volumeName0
init|=
literal|"volumeTest0"
decl_stmt|;
DECL|field|volumeName1
specifier|private
specifier|static
name|String
name|volumeName1
init|=
literal|"volumeTest1"
decl_stmt|;
DECL|field|bucketName0
specifier|private
specifier|static
name|String
name|bucketName0
init|=
literal|"bucketTest0"
decl_stmt|;
DECL|field|bucketName1
specifier|private
specifier|static
name|String
name|bucketName1
init|=
literal|"bucketTest1"
decl_stmt|;
DECL|field|bucketName2
specifier|private
specifier|static
name|String
name|bucketName2
init|=
literal|"bucketTest2"
decl_stmt|;
DECL|field|keyName0
specifier|private
specifier|static
name|String
name|keyName0
init|=
literal|"key0"
decl_stmt|;
DECL|field|keyName1
specifier|private
specifier|static
name|String
name|keyName1
init|=
literal|"key1"
decl_stmt|;
DECL|field|keyName2
specifier|private
specifier|static
name|String
name|keyName2
init|=
literal|"key2"
decl_stmt|;
DECL|field|keyName3
specifier|private
specifier|static
name|String
name|keyName3
init|=
literal|"key3"
decl_stmt|;
annotation|@
name|Rule
DECL|field|exception
specifier|public
name|ExpectedException
name|exception
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
comment|/**    * Create a MiniDFSCluster for testing.    *<p>    * Ozone is made active by setting OZONE_ENABLED = true and    * OZONE_HANDLER_TYPE_KEY = "distributed"    *    * @throws IOException    */
annotation|@
name|BeforeClass
DECL|method|setup ()
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|OzoneConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_HANDLER_TYPE_KEY
argument_list|,
name|OzoneConsts
operator|.
name|OZONE_HANDLER_DISTRIBUTED
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniOzoneCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|setHandlerType
argument_list|(
name|OzoneConsts
operator|.
name|OZONE_HANDLER_DISTRIBUTED
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|storageHandler
operator|=
operator|new
name|ObjectStoreHandler
argument_list|(
name|conf
argument_list|)
operator|.
name|getStorageHandler
argument_list|()
expr_stmt|;
name|userArgs
operator|=
operator|new
name|UserArgs
argument_list|(
literal|null
argument_list|,
name|OzoneUtils
operator|.
name|getRequestID
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitForHeartbeatProcessed
argument_list|()
expr_stmt|;
name|VolumeArgs
name|createVolumeArgs0
init|=
operator|new
name|VolumeArgs
argument_list|(
name|volumeName0
argument_list|,
name|userArgs
argument_list|)
decl_stmt|;
name|createVolumeArgs0
operator|.
name|setUserName
argument_list|(
name|userName
argument_list|)
expr_stmt|;
name|createVolumeArgs0
operator|.
name|setAdminName
argument_list|(
name|adminName
argument_list|)
expr_stmt|;
name|storageHandler
operator|.
name|createVolume
argument_list|(
name|createVolumeArgs0
argument_list|)
expr_stmt|;
name|VolumeArgs
name|createVolumeArgs1
init|=
operator|new
name|VolumeArgs
argument_list|(
name|volumeName1
argument_list|,
name|userArgs
argument_list|)
decl_stmt|;
name|createVolumeArgs1
operator|.
name|setUserName
argument_list|(
name|userName
argument_list|)
expr_stmt|;
name|createVolumeArgs1
operator|.
name|setAdminName
argument_list|(
name|adminName
argument_list|)
expr_stmt|;
name|storageHandler
operator|.
name|createVolume
argument_list|(
name|createVolumeArgs1
argument_list|)
expr_stmt|;
name|BucketArgs
name|bucketArgs0
init|=
operator|new
name|BucketArgs
argument_list|(
name|volumeName0
argument_list|,
name|bucketName0
argument_list|,
name|userArgs
argument_list|)
decl_stmt|;
name|storageHandler
operator|.
name|createBucket
argument_list|(
name|bucketArgs0
argument_list|)
expr_stmt|;
name|BucketArgs
name|bucketArgs1
init|=
operator|new
name|BucketArgs
argument_list|(
name|volumeName1
argument_list|,
name|bucketName1
argument_list|,
name|userArgs
argument_list|)
decl_stmt|;
name|storageHandler
operator|.
name|createBucket
argument_list|(
name|bucketArgs1
argument_list|)
expr_stmt|;
name|BucketArgs
name|bucketArgs2
init|=
operator|new
name|BucketArgs
argument_list|(
name|volumeName0
argument_list|,
name|bucketName2
argument_list|,
name|userArgs
argument_list|)
decl_stmt|;
name|storageHandler
operator|.
name|createBucket
argument_list|(
name|bucketArgs2
argument_list|)
expr_stmt|;
name|KeyArgs
name|keyArgs0
init|=
operator|new
name|KeyArgs
argument_list|(
name|volumeName0
argument_list|,
name|bucketName0
argument_list|,
name|keyName0
argument_list|,
name|userArgs
argument_list|)
decl_stmt|;
name|keyArgs0
operator|.
name|setSize
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|KeyArgs
name|keyArgs1
init|=
operator|new
name|KeyArgs
argument_list|(
name|volumeName1
argument_list|,
name|bucketName1
argument_list|,
name|keyName1
argument_list|,
name|userArgs
argument_list|)
decl_stmt|;
name|keyArgs1
operator|.
name|setSize
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|KeyArgs
name|keyArgs2
init|=
operator|new
name|KeyArgs
argument_list|(
name|volumeName0
argument_list|,
name|bucketName2
argument_list|,
name|keyName2
argument_list|,
name|userArgs
argument_list|)
decl_stmt|;
name|keyArgs2
operator|.
name|setSize
argument_list|(
literal|300
argument_list|)
expr_stmt|;
name|KeyArgs
name|keyArgs3
init|=
operator|new
name|KeyArgs
argument_list|(
name|volumeName0
argument_list|,
name|bucketName2
argument_list|,
name|keyName3
argument_list|,
name|userArgs
argument_list|)
decl_stmt|;
name|keyArgs3
operator|.
name|setSize
argument_list|(
literal|400
argument_list|)
expr_stmt|;
name|OutputStream
name|stream
init|=
name|storageHandler
operator|.
name|newKeyWriter
argument_list|(
name|keyArgs0
argument_list|)
decl_stmt|;
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
name|stream
operator|=
name|storageHandler
operator|.
name|newKeyWriter
argument_list|(
name|keyArgs1
argument_list|)
expr_stmt|;
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
name|stream
operator|=
name|storageHandler
operator|.
name|newKeyWriter
argument_list|(
name|keyArgs2
argument_list|)
expr_stmt|;
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
name|stream
operator|=
name|storageHandler
operator|.
name|newKeyWriter
argument_list|(
name|keyArgs3
argument_list|)
expr_stmt|;
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|init ()
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
name|cli
operator|=
operator|new
name|SQLCLI
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testKSMDB ()
specifier|public
name|void
name|testKSMDB
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dbOutPath
init|=
name|cluster
operator|.
name|getDataDirectory
argument_list|()
operator|+
literal|"/out_sql.db"
decl_stmt|;
name|String
name|dbRootPath
init|=
name|conf
operator|.
name|get
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_CONTAINER_METADATA_DIRS
argument_list|)
decl_stmt|;
name|String
name|dbPath
init|=
name|dbRootPath
operator|+
literal|"/"
operator|+
name|KSM_DB_NAME
decl_stmt|;
name|String
index|[]
name|args
init|=
block|{
literal|"-p"
block|,
name|dbPath
block|,
literal|"-o"
block|,
name|dbOutPath
block|}
decl_stmt|;
name|cli
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|Connection
name|conn
init|=
name|connectDB
argument_list|(
name|dbOutPath
argument_list|)
decl_stmt|;
name|String
name|sql
init|=
literal|"SELECT * FROM volumeList"
decl_stmt|;
name|ResultSet
name|rs
init|=
name|executeQuery
argument_list|(
name|conn
argument_list|,
name|sql
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|expectedValues
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|volumeName0
argument_list|,
name|volumeName1
argument_list|)
argument_list|)
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|String
name|userNameRs
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|"userName"
argument_list|)
decl_stmt|;
name|String
name|volumeNameRs
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|"volumeName"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|userName
argument_list|,
name|userNameRs
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|expectedValues
operator|.
name|remove
argument_list|(
name|volumeNameRs
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|expectedValues
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|sql
operator|=
literal|"SELECT * FROM volumeInfo"
expr_stmt|;
name|rs
operator|=
name|executeQuery
argument_list|(
name|conn
argument_list|,
name|sql
argument_list|)
expr_stmt|;
name|expectedValues
operator|=
operator|new
name|LinkedList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|volumeName0
argument_list|,
name|volumeName1
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|String
name|adName
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|"adminName"
argument_list|)
decl_stmt|;
name|String
name|ownerName
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|"ownerName"
argument_list|)
decl_stmt|;
name|String
name|volumeName
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|"volumeName"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|adminName
argument_list|,
name|adName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|userName
argument_list|,
name|ownerName
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|expectedValues
operator|.
name|remove
argument_list|(
name|volumeName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|expectedValues
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|sql
operator|=
literal|"SELECT * FROM aclInfo"
expr_stmt|;
name|rs
operator|=
name|executeQuery
argument_list|(
name|conn
argument_list|,
name|sql
argument_list|)
expr_stmt|;
name|expectedValues
operator|=
operator|new
name|LinkedList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|volumeName0
argument_list|,
name|volumeName1
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|String
name|adName
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|"adminName"
argument_list|)
decl_stmt|;
name|String
name|ownerName
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|"ownerName"
argument_list|)
decl_stmt|;
name|String
name|volumeName
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|"volumeName"
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
name|String
name|uName
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|"userName"
argument_list|)
decl_stmt|;
name|String
name|rights
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|"rights"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|adminName
argument_list|,
name|adName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|userName
argument_list|,
name|ownerName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"USER"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|userName
argument_list|,
name|uName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"READ_WRITE"
argument_list|,
name|rights
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|expectedValues
operator|.
name|remove
argument_list|(
name|volumeName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|expectedValues
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|sql
operator|=
literal|"SELECT * FROM bucketInfo"
expr_stmt|;
name|rs
operator|=
name|executeQuery
argument_list|(
name|conn
argument_list|,
name|sql
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expectedMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedMap
operator|.
name|put
argument_list|(
name|bucketName0
argument_list|,
name|volumeName0
argument_list|)
expr_stmt|;
name|expectedMap
operator|.
name|put
argument_list|(
name|bucketName2
argument_list|,
name|volumeName0
argument_list|)
expr_stmt|;
name|expectedMap
operator|.
name|put
argument_list|(
name|bucketName1
argument_list|,
name|volumeName1
argument_list|)
expr_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|String
name|volumeName
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|"volumeName"
argument_list|)
decl_stmt|;
name|String
name|bucketName
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|"bucketName"
argument_list|)
decl_stmt|;
name|boolean
name|versionEnabled
init|=
name|rs
operator|.
name|getBoolean
argument_list|(
literal|"versionEnabled"
argument_list|)
decl_stmt|;
name|String
name|storegeType
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|"storageType"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|volumeName
argument_list|,
name|expectedMap
operator|.
name|remove
argument_list|(
name|bucketName
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|versionEnabled
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"DISK"
argument_list|,
name|storegeType
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|expectedMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|sql
operator|=
literal|"SELECT * FROM keyInfo"
expr_stmt|;
name|rs
operator|=
name|executeQuery
argument_list|(
name|conn
argument_list|,
name|sql
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|expectedMap2
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedMap2
operator|.
name|put
argument_list|(
name|keyName0
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|volumeName0
argument_list|,
name|bucketName0
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
literal|100
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|expectedMap2
operator|.
name|put
argument_list|(
name|keyName1
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|volumeName1
argument_list|,
name|bucketName1
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
literal|200
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|expectedMap2
operator|.
name|put
argument_list|(
name|keyName2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|volumeName0
argument_list|,
name|bucketName2
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
literal|300
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|expectedMap2
operator|.
name|put
argument_list|(
name|keyName3
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|volumeName0
argument_list|,
name|bucketName2
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
literal|400
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|String
name|volumeName
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|"volumeName"
argument_list|)
decl_stmt|;
name|String
name|bucketName
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|"bucketName"
argument_list|)
decl_stmt|;
name|String
name|keyName
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|"keyName"
argument_list|)
decl_stmt|;
name|int
name|dataSize
init|=
name|rs
operator|.
name|getInt
argument_list|(
literal|"dataSize"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|vals
init|=
name|expectedMap2
operator|.
name|remove
argument_list|(
name|keyName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|vals
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|vals
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|volumeName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|vals
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|bucketName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|vals
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|dataSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|expectedMap2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
name|Files
operator|.
name|delete
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|dbOutPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|executeQuery (Connection conn, String sql)
specifier|private
name|ResultSet
name|executeQuery
parameter_list|(
name|Connection
name|conn
parameter_list|,
name|String
name|sql
parameter_list|)
throws|throws
name|SQLException
block|{
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
decl_stmt|;
return|return
name|stmt
operator|.
name|executeQuery
argument_list|(
name|sql
argument_list|)
return|;
block|}
DECL|method|connectDB (String dbPath)
specifier|private
name|Connection
name|connectDB
parameter_list|(
name|String
name|dbPath
parameter_list|)
throws|throws
name|Exception
block|{
name|Class
operator|.
name|forName
argument_list|(
literal|"org.sqlite.JDBC"
argument_list|)
expr_stmt|;
name|String
name|connectPath
init|=
name|String
operator|.
name|format
argument_list|(
literal|"jdbc:sqlite:%s"
argument_list|,
name|dbPath
argument_list|)
decl_stmt|;
return|return
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|connectPath
argument_list|)
return|;
block|}
block|}
end_class

end_unit

