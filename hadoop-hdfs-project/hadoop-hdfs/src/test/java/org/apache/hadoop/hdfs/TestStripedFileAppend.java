begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RemoteIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|OpenFileEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|OpenFilesIterator
operator|.
name|OpenFilesType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Tests append on erasure coded file.  */
end_comment

begin_class
DECL|class|TestStripedFileAppend
specifier|public
class|class
name|TestStripedFileAppend
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestStripedFileAppend
operator|.
name|class
argument_list|)
decl_stmt|;
static|static
block|{
name|DFSTestUtil
operator|.
name|setNameNodeLogLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
DECL|field|NUM_DATA_BLOCKS
specifier|private
specifier|static
specifier|final
name|int
name|NUM_DATA_BLOCKS
init|=
name|StripedFileTestUtil
operator|.
name|getDefaultECPolicy
argument_list|()
operator|.
name|getNumDataUnits
argument_list|()
decl_stmt|;
DECL|field|CELL_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|CELL_SIZE
init|=
name|StripedFileTestUtil
operator|.
name|getDefaultECPolicy
argument_list|()
operator|.
name|getCellSize
argument_list|()
decl_stmt|;
DECL|field|NUM_DN
specifier|private
specifier|static
specifier|final
name|int
name|NUM_DN
init|=
literal|9
decl_stmt|;
DECL|field|STRIPES_PER_BLOCK
specifier|private
specifier|static
specifier|final
name|int
name|STRIPES_PER_BLOCK
init|=
literal|4
decl_stmt|;
DECL|field|BLOCK_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|BLOCK_SIZE
init|=
name|CELL_SIZE
operator|*
name|STRIPES_PER_BLOCK
decl_stmt|;
DECL|field|BLOCK_GROUP_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|BLOCK_GROUP_SIZE
init|=
name|BLOCK_SIZE
operator|*
name|NUM_DATA_BLOCKS
decl_stmt|;
DECL|field|RANDOM
specifier|private
specifier|static
specifier|final
name|Random
name|RANDOM
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|dfs
specifier|private
name|DistributedFileSystem
name|dfs
decl_stmt|;
DECL|field|dir
specifier|private
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/TestFileAppendStriped"
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
name|HdfsConfiguration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|NUM_DN
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|dfs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|setErasureCodingPolicy
argument_list|(
name|dir
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * test simple append to a closed striped file, with NEW_BLOCK flag enabled.    */
annotation|@
name|Test
DECL|method|testAppendToNewBlock ()
specifier|public
name|void
name|testAppendToNewBlock
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|fileLength
init|=
literal|0
decl_stmt|;
name|int
name|totalSplit
init|=
literal|6
decl_stmt|;
name|byte
index|[]
name|expected
init|=
name|StripedFileTestUtil
operator|.
name|generateBytes
argument_list|(
name|BLOCK_GROUP_SIZE
operator|*
name|totalSplit
argument_list|)
decl_stmt|;
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"testAppendToNewBlock"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|out
decl_stmt|;
for|for
control|(
name|int
name|split
init|=
literal|0
init|;
name|split
operator|<
name|totalSplit
condition|;
name|split
operator|++
control|)
block|{
if|if
condition|(
name|split
operator|==
literal|0
condition|)
block|{
name|out
operator|=
name|dfs
operator|.
name|create
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|=
name|dfs
operator|.
name|append
argument_list|(
name|file
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateFlag
operator|.
name|APPEND
argument_list|,
name|CreateFlag
operator|.
name|NEW_BLOCK
argument_list|)
argument_list|,
literal|4096
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|int
name|splitLength
init|=
name|RANDOM
operator|.
name|nextInt
argument_list|(
name|BLOCK_GROUP_SIZE
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|expected
argument_list|,
name|fileLength
argument_list|,
name|splitLength
argument_list|)
expr_stmt|;
name|fileLength
operator|+=
name|splitLength
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|expected
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|expected
argument_list|,
name|fileLength
argument_list|)
expr_stmt|;
name|LocatedBlocks
name|lbs
init|=
name|dfs
operator|.
name|getClient
argument_list|()
operator|.
name|getLocatedBlocks
argument_list|(
name|file
operator|.
name|toString
argument_list|()
argument_list|,
literal|0L
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|totalSplit
argument_list|,
name|lbs
operator|.
name|getLocatedBlocks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|StripedFileTestUtil
operator|.
name|verifyStatefulRead
argument_list|(
name|dfs
argument_list|,
name|file
argument_list|,
name|fileLength
argument_list|,
name|expected
argument_list|,
operator|new
name|byte
index|[
literal|4096
index|]
argument_list|)
expr_stmt|;
name|StripedFileTestUtil
operator|.
name|verifySeek
argument_list|(
name|dfs
argument_list|,
name|file
argument_list|,
name|fileLength
argument_list|,
name|StripedFileTestUtil
operator|.
name|getDefaultECPolicy
argument_list|()
argument_list|,
name|totalSplit
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppendWithoutNewBlock ()
specifier|public
name|void
name|testAppendWithoutNewBlock
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"testAppendWithoutNewBlock"
argument_list|)
decl_stmt|;
comment|// Create file
name|FSDataOutputStream
name|out
init|=
name|dfs
operator|.
name|create
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"testAppendWithoutNewBlock"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Append file
try|try
block|{
name|out
operator|=
name|dfs
operator|.
name|append
argument_list|(
name|file
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateFlag
operator|.
name|APPEND
argument_list|)
argument_list|,
literal|4096
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"testAppendWithoutNewBlock"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should throw unsupported operation"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Append on EC file without new block is not supported"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|OpenFilesType
argument_list|>
name|types
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|types
operator|.
name|add
argument_list|(
name|OpenFilesType
operator|.
name|ALL_OPEN_FILES
argument_list|)
expr_stmt|;
name|RemoteIterator
argument_list|<
name|OpenFileEntry
argument_list|>
name|listOpenFiles
init|=
name|dfs
operator|.
name|listOpenFiles
argument_list|(
name|EnumSet
operator|.
name|copyOf
argument_list|(
name|types
argument_list|)
argument_list|,
name|file
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"No file should be open after append failure"
argument_list|,
name|listOpenFiles
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

