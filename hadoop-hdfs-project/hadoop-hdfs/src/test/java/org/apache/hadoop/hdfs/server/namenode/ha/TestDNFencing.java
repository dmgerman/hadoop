begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.ha
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ha
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|impl
operator|.
name|Log4JLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|AppendTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSNNTopology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|DatanodeProtocolClientSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockManagerTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockPlacementPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockPlacementPolicyDefault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNodeTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSNamesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNodeAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|StorageBlockReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
operator|.
name|DelayAnswer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_class
DECL|class|TestDNFencing
specifier|public
class|class
name|TestDNFencing
block|{
DECL|field|LOG
specifier|protected
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestDNFencing
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|TEST_FILE
specifier|private
specifier|static
specifier|final
name|String
name|TEST_FILE
init|=
literal|"/testStandbyIsHot"
decl_stmt|;
DECL|field|TEST_FILE_PATH
specifier|private
specifier|static
specifier|final
name|Path
name|TEST_FILE_PATH
init|=
operator|new
name|Path
argument_list|(
name|TEST_FILE
argument_list|)
decl_stmt|;
DECL|field|SMALL_BLOCK
specifier|private
specifier|static
specifier|final
name|int
name|SMALL_BLOCK
init|=
literal|1024
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|nn1
DECL|field|nn2
specifier|private
name|NameNode
name|nn1
decl_stmt|,
name|nn2
decl_stmt|;
DECL|field|fs
specifier|private
name|FileSystem
name|fs
decl_stmt|;
static|static
block|{
operator|(
operator|(
name|Log4JLogger
operator|)
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FSNamesystem
operator|.
name|class
argument_list|)
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Log4JLogger
operator|)
name|LogFactory
operator|.
name|getLog
argument_list|(
name|BlockManager
operator|.
name|class
argument_list|)
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Log4JLogger
operator|)
name|NameNode
operator|.
name|stateChangeLog
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setupCluster ()
specifier|public
name|void
name|setupCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|SMALL_BLOCK
argument_list|)
expr_stmt|;
comment|// Bump up replication interval so that we only run replication
comment|// checks explicitly.
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REPLICATION_INTERVAL_KEY
argument_list|,
literal|600
argument_list|)
expr_stmt|;
comment|// Increase max streams so that we re-replicate quickly.
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REPLICATION_MAX_STREAMS_KEY
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
comment|// See RandomDeleterPolicy javadoc.
name|conf
operator|.
name|setClass
argument_list|(
literal|"dfs.block.replicator.classname"
argument_list|,
name|RandomDeleterPolicy
operator|.
name|class
argument_list|,
name|BlockPlacementPolicy
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HA_TAILEDITS_PERIOD_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|nnTopology
argument_list|(
name|MiniDFSNNTopology
operator|.
name|simpleHATopology
argument_list|()
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|3
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|nn1
operator|=
name|cluster
operator|.
name|getNameNode
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|nn2
operator|=
name|cluster
operator|.
name|getNameNode
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Trigger block reports so that the first NN trusts all
comment|// of the DNs, and will issue deletions
name|cluster
operator|.
name|triggerBlockReports
argument_list|()
expr_stmt|;
name|fs
operator|=
name|HATestUtil
operator|.
name|configureFailoverFs
argument_list|(
name|cluster
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|shutdownCluster ()
specifier|public
name|void
name|shutdownCluster
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|banner
argument_list|(
literal|"Shutting down cluster. NN1 metadata:"
argument_list|)
expr_stmt|;
name|doMetasave
argument_list|(
name|nn1
argument_list|)
expr_stmt|;
name|banner
argument_list|(
literal|"Shutting down cluster. NN2 metadata:"
argument_list|)
expr_stmt|;
name|doMetasave
argument_list|(
name|nn2
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDnFencing ()
specifier|public
name|void
name|testDnFencing
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create a file with replication level 3.
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|TEST_FILE_PATH
argument_list|,
literal|30
operator|*
name|SMALL_BLOCK
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|ExtendedBlock
name|block
init|=
name|DFSTestUtil
operator|.
name|getFirstBlock
argument_list|(
name|fs
argument_list|,
name|TEST_FILE_PATH
argument_list|)
decl_stmt|;
comment|// Drop its replication count to 1, so it becomes over-replicated.
comment|// Then compute the invalidation of the extra blocks and trigger
comment|// heartbeats so the invalidations are flushed to the DNs.
name|nn1
operator|.
name|getRpcServer
argument_list|()
operator|.
name|setReplication
argument_list|(
name|TEST_FILE
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|BlockManagerTestUtil
operator|.
name|computeInvalidationWork
argument_list|(
name|nn1
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|triggerHeartbeats
argument_list|()
expr_stmt|;
comment|// Transition nn2 to active even though nn1 still thinks it's active.
name|banner
argument_list|(
literal|"Failing to NN2 but let NN1 continue to think it's active"
argument_list|)
expr_stmt|;
name|NameNodeAdapter
operator|.
name|abortEditLogs
argument_list|(
name|nn1
argument_list|)
expr_stmt|;
name|NameNodeAdapter
operator|.
name|enterSafeMode
argument_list|(
name|nn1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Check that the standby picked up the replication change.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|nn2
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getFileInfo
argument_list|(
name|TEST_FILE
argument_list|)
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
comment|// Dump some info for debugging purposes.
name|banner
argument_list|(
literal|"NN2 Metadata immediately after failover"
argument_list|)
expr_stmt|;
name|doMetasave
argument_list|(
name|nn2
argument_list|)
expr_stmt|;
comment|// Even though NN2 considers the blocks over-replicated, it should
comment|// post-pone the block invalidation because the DNs are still "stale".
name|assertEquals
argument_list|(
literal|30
argument_list|,
name|nn2
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getPostponedMisreplicatedBlocks
argument_list|()
argument_list|)
expr_stmt|;
name|banner
argument_list|(
literal|"Triggering heartbeats and block reports so that fencing is completed"
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|triggerHeartbeats
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|triggerBlockReports
argument_list|()
expr_stmt|;
name|banner
argument_list|(
literal|"Metadata after nodes have all block-reported"
argument_list|)
expr_stmt|;
name|doMetasave
argument_list|(
name|nn2
argument_list|)
expr_stmt|;
comment|// The blocks should no longer be postponed.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|nn2
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getPostponedMisreplicatedBlocks
argument_list|()
argument_list|)
expr_stmt|;
comment|// Wait for NN2 to enact its deletions (replication monitor has to run, etc)
name|BlockManagerTestUtil
operator|.
name|computeInvalidationWork
argument_list|(
name|nn2
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|triggerHeartbeats
argument_list|()
expr_stmt|;
name|HATestUtil
operator|.
name|waitForDNDeletions
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|triggerDeletionReports
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|nn2
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getUnderReplicatedBlocks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|nn2
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getPendingReplicationBlocks
argument_list|()
argument_list|)
expr_stmt|;
name|banner
argument_list|(
literal|"Making sure the file is still readable"
argument_list|)
expr_stmt|;
name|FileSystem
name|fs2
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|readFile
argument_list|(
name|fs2
argument_list|,
name|TEST_FILE_PATH
argument_list|)
expr_stmt|;
name|banner
argument_list|(
literal|"Waiting for the actual block files to get deleted from DNs."
argument_list|)
expr_stmt|;
name|waitForTrueReplication
argument_list|(
name|cluster
argument_list|,
name|block
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test case which restarts the standby node in such a way that,    * when it exits safemode, it will want to invalidate a bunch    * of over-replicated block replicas. Ensures that if we failover    * at this point it won't lose data.    */
annotation|@
name|Test
DECL|method|testNNClearsCommandsOnFailoverAfterStartup ()
specifier|public
name|void
name|testNNClearsCommandsOnFailoverAfterStartup
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Make lots of blocks to increase chances of triggering a bug.
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|TEST_FILE_PATH
argument_list|,
literal|30
operator|*
name|SMALL_BLOCK
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|banner
argument_list|(
literal|"Shutting down NN2"
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdownNameNode
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|banner
argument_list|(
literal|"Setting replication to 1, rolling edit log."
argument_list|)
expr_stmt|;
name|nn1
operator|.
name|getRpcServer
argument_list|()
operator|.
name|setReplication
argument_list|(
name|TEST_FILE
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|nn1
operator|.
name|getRpcServer
argument_list|()
operator|.
name|rollEditLog
argument_list|()
expr_stmt|;
comment|// Start NN2 again. When it starts up, it will see all of the
comment|// blocks as over-replicated, since it has the metadata for
comment|// replication=1, but the DNs haven't yet processed the deletions.
name|banner
argument_list|(
literal|"Starting NN2 again."
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|restartNameNode
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|nn2
operator|=
name|cluster
operator|.
name|getNameNode
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|banner
argument_list|(
literal|"triggering BRs"
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|triggerBlockReports
argument_list|()
expr_stmt|;
comment|// We expect that both NN1 and NN2 will have some number of
comment|// deletions queued up for the DNs.
name|banner
argument_list|(
literal|"computing invalidation on nn1"
argument_list|)
expr_stmt|;
name|BlockManagerTestUtil
operator|.
name|computeInvalidationWork
argument_list|(
name|nn1
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
argument_list|)
expr_stmt|;
name|banner
argument_list|(
literal|"computing invalidation on nn2"
argument_list|)
expr_stmt|;
name|BlockManagerTestUtil
operator|.
name|computeInvalidationWork
argument_list|(
name|nn2
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
argument_list|)
expr_stmt|;
comment|// Dump some info for debugging purposes.
name|banner
argument_list|(
literal|"Metadata immediately before failover"
argument_list|)
expr_stmt|;
name|doMetasave
argument_list|(
name|nn2
argument_list|)
expr_stmt|;
comment|// Transition nn2 to active even though nn1 still thinks it's active
name|banner
argument_list|(
literal|"Failing to NN2 but let NN1 continue to think it's active"
argument_list|)
expr_stmt|;
name|NameNodeAdapter
operator|.
name|abortEditLogs
argument_list|(
name|nn1
argument_list|)
expr_stmt|;
name|NameNodeAdapter
operator|.
name|enterSafeMode
argument_list|(
name|nn1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Check that the standby picked up the replication change.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|nn2
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getFileInfo
argument_list|(
name|TEST_FILE
argument_list|)
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
comment|// Dump some info for debugging purposes.
name|banner
argument_list|(
literal|"Metadata immediately after failover"
argument_list|)
expr_stmt|;
name|doMetasave
argument_list|(
name|nn2
argument_list|)
expr_stmt|;
name|banner
argument_list|(
literal|"Triggering heartbeats and block reports so that fencing is completed"
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|triggerHeartbeats
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|triggerBlockReports
argument_list|()
expr_stmt|;
name|banner
argument_list|(
literal|"Metadata after nodes have all block-reported"
argument_list|)
expr_stmt|;
name|doMetasave
argument_list|(
name|nn2
argument_list|)
expr_stmt|;
comment|// The block should no longer be postponed.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|nn2
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getPostponedMisreplicatedBlocks
argument_list|()
argument_list|)
expr_stmt|;
comment|// Wait for NN2 to enact its deletions (replication monitor has to run, etc)
name|BlockManagerTestUtil
operator|.
name|computeInvalidationWork
argument_list|(
name|nn2
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
argument_list|)
expr_stmt|;
name|HATestUtil
operator|.
name|waitForNNToIssueDeletions
argument_list|(
name|nn2
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|triggerHeartbeats
argument_list|()
expr_stmt|;
name|HATestUtil
operator|.
name|waitForDNDeletions
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|triggerDeletionReports
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|nn2
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getUnderReplicatedBlocks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|nn2
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getPendingReplicationBlocks
argument_list|()
argument_list|)
expr_stmt|;
name|banner
argument_list|(
literal|"Making sure the file is still readable"
argument_list|)
expr_stmt|;
name|FileSystem
name|fs2
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|readFile
argument_list|(
name|fs2
argument_list|,
name|TEST_FILE_PATH
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test case that reduces replication of a file with a lot of blocks    * and then fails over right after those blocks enter the DN invalidation    * queues on the active. Ensures that fencing is correct and no replicas    * are lost.    */
annotation|@
name|Test
DECL|method|testNNClearsCommandsOnFailoverWithReplChanges ()
specifier|public
name|void
name|testNNClearsCommandsOnFailoverWithReplChanges
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Make lots of blocks to increase chances of triggering a bug.
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|TEST_FILE_PATH
argument_list|,
literal|30
operator|*
name|SMALL_BLOCK
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|banner
argument_list|(
literal|"rolling NN1's edit log, forcing catch-up"
argument_list|)
expr_stmt|;
name|HATestUtil
operator|.
name|waitForStandbyToCatchUp
argument_list|(
name|nn1
argument_list|,
name|nn2
argument_list|)
expr_stmt|;
comment|// Get some new replicas reported so that NN2 now considers
comment|// them over-replicated and schedules some more deletions
name|nn1
operator|.
name|getRpcServer
argument_list|()
operator|.
name|setReplication
argument_list|(
name|TEST_FILE
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
expr_stmt|;
while|while
condition|(
name|BlockManagerTestUtil
operator|.
name|getComputedDatanodeWork
argument_list|(
name|nn1
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
argument_list|)
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Getting more replication work computed"
argument_list|)
expr_stmt|;
block|}
name|BlockManager
name|bm1
init|=
name|nn1
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
decl_stmt|;
while|while
condition|(
name|bm1
operator|.
name|getPendingReplicationBlocksCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|BlockManagerTestUtil
operator|.
name|updateState
argument_list|(
name|bm1
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|triggerHeartbeats
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
name|banner
argument_list|(
literal|"triggering BRs"
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|triggerBlockReports
argument_list|()
expr_stmt|;
name|nn1
operator|.
name|getRpcServer
argument_list|()
operator|.
name|setReplication
argument_list|(
name|TEST_FILE
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|banner
argument_list|(
literal|"computing invalidation on nn1"
argument_list|)
expr_stmt|;
name|BlockManagerTestUtil
operator|.
name|computeInvalidationWork
argument_list|(
name|nn1
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
argument_list|)
expr_stmt|;
name|doMetasave
argument_list|(
name|nn1
argument_list|)
expr_stmt|;
name|banner
argument_list|(
literal|"computing invalidation on nn2"
argument_list|)
expr_stmt|;
name|BlockManagerTestUtil
operator|.
name|computeInvalidationWork
argument_list|(
name|nn2
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
argument_list|)
expr_stmt|;
name|doMetasave
argument_list|(
name|nn2
argument_list|)
expr_stmt|;
comment|// Dump some info for debugging purposes.
name|banner
argument_list|(
literal|"Metadata immediately before failover"
argument_list|)
expr_stmt|;
name|doMetasave
argument_list|(
name|nn2
argument_list|)
expr_stmt|;
comment|// Transition nn2 to active even though nn1 still thinks it's active
name|banner
argument_list|(
literal|"Failing to NN2 but let NN1 continue to think it's active"
argument_list|)
expr_stmt|;
name|NameNodeAdapter
operator|.
name|abortEditLogs
argument_list|(
name|nn1
argument_list|)
expr_stmt|;
name|NameNodeAdapter
operator|.
name|enterSafeMode
argument_list|(
name|nn1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|BlockManagerTestUtil
operator|.
name|computeInvalidationWork
argument_list|(
name|nn2
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Check that the standby picked up the replication change.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|nn2
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getFileInfo
argument_list|(
name|TEST_FILE
argument_list|)
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
comment|// Dump some info for debugging purposes.
name|banner
argument_list|(
literal|"Metadata immediately after failover"
argument_list|)
expr_stmt|;
name|doMetasave
argument_list|(
name|nn2
argument_list|)
expr_stmt|;
name|banner
argument_list|(
literal|"Triggering heartbeats and block reports so that fencing is completed"
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|triggerHeartbeats
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|triggerBlockReports
argument_list|()
expr_stmt|;
name|banner
argument_list|(
literal|"Metadata after nodes have all block-reported"
argument_list|)
expr_stmt|;
name|doMetasave
argument_list|(
name|nn2
argument_list|)
expr_stmt|;
comment|// The block should no longer be postponed.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|nn2
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getPostponedMisreplicatedBlocks
argument_list|()
argument_list|)
expr_stmt|;
comment|// Wait for NN2 to enact its deletions (replication monitor has to run, etc)
name|BlockManagerTestUtil
operator|.
name|computeInvalidationWork
argument_list|(
name|nn2
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
argument_list|)
expr_stmt|;
name|HATestUtil
operator|.
name|waitForNNToIssueDeletions
argument_list|(
name|nn2
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|triggerHeartbeats
argument_list|()
expr_stmt|;
name|HATestUtil
operator|.
name|waitForDNDeletions
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|triggerDeletionReports
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|nn2
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getUnderReplicatedBlocks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|nn2
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getPendingReplicationBlocks
argument_list|()
argument_list|)
expr_stmt|;
name|banner
argument_list|(
literal|"Making sure the file is still readable"
argument_list|)
expr_stmt|;
name|FileSystem
name|fs2
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|readFile
argument_list|(
name|fs2
argument_list|,
name|TEST_FILE_PATH
argument_list|)
expr_stmt|;
block|}
comment|/**    * Regression test for HDFS-2742. The issue in this bug was:    * - DN does a block report while file is open. This BR contains    *   the block in RBW state.    * - Standby queues the RBW state in PendingDatanodeMessages    * - Standby processes edit logs during failover. Before fixing    *   this bug, it was mistakenly applying the RBW reported state    *   after the block had been completed, causing the block to get    *   marked corrupt. Instead, we should now be applying the RBW    *   message on OP_ADD, and then the FINALIZED message on OP_CLOSE.    */
annotation|@
name|Test
DECL|method|testBlockReportsWhileFileBeingWritten ()
specifier|public
name|void
name|testBlockReportsWhileFileBeingWritten
parameter_list|()
throws|throws
name|Exception
block|{
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|TEST_FILE_PATH
argument_list|)
decl_stmt|;
try|try
block|{
name|AppendTestUtil
operator|.
name|write
argument_list|(
name|out
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|out
operator|.
name|hflush
argument_list|()
expr_stmt|;
comment|// Block report will include the RBW replica, but will be
comment|// queued on the StandbyNode.
name|cluster
operator|.
name|triggerBlockReports
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
name|cluster
operator|.
name|transitionToStandby
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Verify that no replicas are marked corrupt, and that the
comment|// file is readable from the failed-over standby.
name|BlockManagerTestUtil
operator|.
name|updateState
argument_list|(
name|nn1
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
argument_list|)
expr_stmt|;
name|BlockManagerTestUtil
operator|.
name|updateState
argument_list|(
name|nn2
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|nn1
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getCorruptReplicaBlocks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|nn2
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getCorruptReplicaBlocks
argument_list|()
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|readFile
argument_list|(
name|fs
argument_list|,
name|TEST_FILE_PATH
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that, when a block is re-opened for append, the related    * datanode messages are correctly queued by the SBN because    * they have future states and genstamps.    */
annotation|@
name|Test
DECL|method|testQueueingWithAppend ()
specifier|public
name|void
name|testQueueingWithAppend
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numQueued
init|=
literal|0
decl_stmt|;
name|int
name|numDN
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|TEST_FILE_PATH
argument_list|)
decl_stmt|;
try|try
block|{
name|AppendTestUtil
operator|.
name|write
argument_list|(
name|out
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|out
operator|.
name|hflush
argument_list|()
expr_stmt|;
comment|// Opening the file will report RBW replicas, but will be
comment|// queued on the StandbyNode.
name|numQueued
operator|+=
name|numDN
expr_stmt|;
comment|// RBW messages
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|numQueued
operator|+=
name|numDN
expr_stmt|;
comment|// blockReceived messages
block|}
name|cluster
operator|.
name|triggerBlockReports
argument_list|()
expr_stmt|;
name|numQueued
operator|+=
name|numDN
expr_stmt|;
try|try
block|{
name|out
operator|=
name|fs
operator|.
name|append
argument_list|(
name|TEST_FILE_PATH
argument_list|)
expr_stmt|;
name|AppendTestUtil
operator|.
name|write
argument_list|(
name|out
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// RBW replicas once it's opened for append
name|numQueued
operator|+=
name|numDN
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|numQueued
operator|+=
name|numDN
expr_stmt|;
comment|// blockReceived
block|}
name|cluster
operator|.
name|triggerBlockReports
argument_list|()
expr_stmt|;
name|numQueued
operator|+=
name|numDN
expr_stmt|;
name|assertEquals
argument_list|(
name|numQueued
argument_list|,
name|cluster
operator|.
name|getNameNode
argument_list|(
literal|1
argument_list|)
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getPendingDataNodeMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|transitionToStandby
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Verify that no replicas are marked corrupt, and that the
comment|// file is readable from the failed-over standby.
name|BlockManagerTestUtil
operator|.
name|updateState
argument_list|(
name|nn1
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
argument_list|)
expr_stmt|;
name|BlockManagerTestUtil
operator|.
name|updateState
argument_list|(
name|nn2
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|nn1
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getCorruptReplicaBlocks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|nn2
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getCorruptReplicaBlocks
argument_list|()
argument_list|)
expr_stmt|;
name|AppendTestUtil
operator|.
name|check
argument_list|(
name|fs
argument_list|,
name|TEST_FILE_PATH
argument_list|,
literal|20
argument_list|)
expr_stmt|;
block|}
comment|/**    * Another regression test for HDFS-2742. This tests the following sequence:    * - DN does a block report while file is open. This BR contains    *   the block in RBW state.    * - The block report is delayed in reaching the standby.    * - The file is closed.    * - The standby processes the OP_ADD and OP_CLOSE operations before    *   the RBW block report arrives.    * - The standby should not mark the block as corrupt.    */
annotation|@
name|Test
DECL|method|testRBWReportArrivesAfterEdits ()
specifier|public
name|void
name|testRBWReportArrivesAfterEdits
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|CountDownLatch
name|brFinished
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|DelayAnswer
name|delayer
init|=
operator|new
name|GenericTestUtils
operator|.
name|DelayAnswer
argument_list|(
name|LOG
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Object
name|passThrough
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
try|try
block|{
return|return
name|super
operator|.
name|passThrough
argument_list|(
name|invocation
argument_list|)
return|;
block|}
finally|finally
block|{
comment|// inform the test that our block report went through.
name|brFinished
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|TEST_FILE_PATH
argument_list|)
decl_stmt|;
try|try
block|{
name|AppendTestUtil
operator|.
name|write
argument_list|(
name|out
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|out
operator|.
name|hflush
argument_list|()
expr_stmt|;
name|DataNode
name|dn
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|DatanodeProtocolClientSideTranslatorPB
name|spy
init|=
name|DataNodeTestUtils
operator|.
name|spyOnBposToNN
argument_list|(
name|dn
argument_list|,
name|nn2
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doAnswer
argument_list|(
name|delayer
argument_list|)
operator|.
name|when
argument_list|(
name|spy
argument_list|)
operator|.
name|blockReport
argument_list|(
name|Mockito
operator|.
expr|<
name|DatanodeRegistration
operator|>
name|anyObject
argument_list|()
argument_list|,
name|Mockito
operator|.
name|anyString
argument_list|()
argument_list|,
name|Mockito
operator|.
expr|<
name|StorageBlockReport
index|[]
operator|>
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
name|dn
operator|.
name|scheduleAllBlockReport
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|delayer
operator|.
name|waitForCall
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
name|cluster
operator|.
name|transitionToStandby
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|delayer
operator|.
name|proceed
argument_list|()
expr_stmt|;
name|brFinished
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// Verify that no replicas are marked corrupt, and that the
comment|// file is readable from the failed-over standby.
name|BlockManagerTestUtil
operator|.
name|updateState
argument_list|(
name|nn1
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
argument_list|)
expr_stmt|;
name|BlockManagerTestUtil
operator|.
name|updateState
argument_list|(
name|nn2
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|nn1
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getCorruptReplicaBlocks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|nn2
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getCorruptReplicaBlocks
argument_list|()
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|readFile
argument_list|(
name|fs
argument_list|,
name|TEST_FILE_PATH
argument_list|)
expr_stmt|;
block|}
comment|/**    * Print a big banner in the test log to make debug easier.    */
DECL|method|banner (String string)
specifier|private
name|void
name|banner
parameter_list|(
name|String
name|string
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"\n\n\n\n================================================\n"
operator|+
name|string
operator|+
literal|"\n"
operator|+
literal|"==================================================\n\n"
argument_list|)
expr_stmt|;
block|}
DECL|method|doMetasave (NameNode nn2)
specifier|private
name|void
name|doMetasave
parameter_list|(
name|NameNode
name|nn2
parameter_list|)
block|{
name|nn2
operator|.
name|getNamesystem
argument_list|()
operator|.
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|System
operator|.
name|err
argument_list|)
decl_stmt|;
name|nn2
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
operator|.
name|metaSave
argument_list|(
name|pw
argument_list|)
expr_stmt|;
name|pw
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|nn2
operator|.
name|getNamesystem
argument_list|()
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|waitForTrueReplication (final MiniDFSCluster cluster, final ExtendedBlock block, final int waitFor)
specifier|private
name|void
name|waitForTrueReplication
parameter_list|(
specifier|final
name|MiniDFSCluster
name|cluster
parameter_list|,
specifier|final
name|ExtendedBlock
name|block
parameter_list|,
specifier|final
name|int
name|waitFor
parameter_list|)
throws|throws
name|Exception
block|{
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
try|try
block|{
return|return
name|getTrueReplication
argument_list|(
name|cluster
argument_list|,
name|block
argument_list|)
operator|==
name|waitFor
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|,
literal|500
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
block|}
DECL|method|getTrueReplication (MiniDFSCluster cluster, ExtendedBlock block)
specifier|private
name|int
name|getTrueReplication
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|,
name|ExtendedBlock
name|block
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|DataNode
name|dn
range|:
name|cluster
operator|.
name|getDataNodes
argument_list|()
control|)
block|{
if|if
condition|(
name|DataNodeTestUtils
operator|.
name|getFSDataset
argument_list|(
name|dn
argument_list|)
operator|.
name|getStoredBlock
argument_list|(
name|block
operator|.
name|getBlockPoolId
argument_list|()
argument_list|,
name|block
operator|.
name|getBlockId
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
block|}
return|return
name|count
return|;
block|}
comment|/**    * A BlockPlacementPolicy which, rather than using space available, makes    * random decisions about which excess replica to delete. This is because,    * in the test cases, the two NNs will usually (but not quite always)    * make the same decision of which replica to delete. The fencing issues    * are exacerbated when the two NNs make different decisions, which can    * happen in "real life" when they have slightly out-of-sync heartbeat    * information regarding disk usage.    */
DECL|class|RandomDeleterPolicy
specifier|public
specifier|static
class|class
name|RandomDeleterPolicy
extends|extends
name|BlockPlacementPolicyDefault
block|{
DECL|method|RandomDeleterPolicy ()
specifier|public
name|RandomDeleterPolicy
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|chooseReplicaToDelete (BlockCollection inode, Block block, short replicationFactor, Collection<DatanodeDescriptor> first, Collection<DatanodeDescriptor> second)
specifier|public
name|DatanodeDescriptor
name|chooseReplicaToDelete
parameter_list|(
name|BlockCollection
name|inode
parameter_list|,
name|Block
name|block
parameter_list|,
name|short
name|replicationFactor
parameter_list|,
name|Collection
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|first
parameter_list|,
name|Collection
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|second
parameter_list|)
block|{
name|Collection
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|chooseFrom
init|=
operator|!
name|first
operator|.
name|isEmpty
argument_list|()
condition|?
name|first
else|:
name|second
decl_stmt|;
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|l
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|chooseFrom
argument_list|)
decl_stmt|;
return|return
name|l
operator|.
name|get
argument_list|(
name|DFSUtil
operator|.
name|getRandom
argument_list|()
operator|.
name|nextInt
argument_list|(
name|l
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

