begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.tools.offlineImageViewer
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|offlineImageViewer
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  * Unit tests for PBImageCorruptionType, CorruptionEntryBuilder and  * PBImageCorruption classes.  */
end_comment

begin_class
DECL|class|TestPBImageCorruption
specifier|public
class|class
name|TestPBImageCorruption
block|{
annotation|@
name|Test
DECL|method|testProperCorruptionTypeCreation ()
specifier|public
name|void
name|testProperCorruptionTypeCreation
parameter_list|()
block|{
name|PBImageCorruption
name|ct
init|=
operator|new
name|PBImageCorruption
argument_list|(
literal|209
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"CorruptNode"
argument_list|,
name|ct
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|ct
operator|.
name|addMissingChildCorruption
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"CorruptNodeWithMissingChild"
argument_list|,
name|ct
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testImproperCorruptionTypeCreation ()
specifier|public
name|void
name|testImproperCorruptionTypeCreation
parameter_list|()
block|{
name|PBImageCorruption
name|ct
init|=
operator|new
name|PBImageCorruption
argument_list|(
literal|210
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|2
argument_list|)
decl_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCorruptionClass ()
specifier|public
name|void
name|testCorruptionClass
parameter_list|()
block|{
name|PBImageCorruption
name|c
init|=
operator|new
name|PBImageCorruption
argument_list|(
literal|211
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|String
name|expected
init|=
literal|"MissingChild"
decl_stmt|;
name|assertEquals
argument_list|(
literal|211
argument_list|,
name|c
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|c
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|c
operator|.
name|getNumOfCorruptChildren
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|addCorruptNodeCorruption
argument_list|()
expr_stmt|;
name|expected
operator|=
literal|"CorruptNodeWithMissingChild"
expr_stmt|;
name|c
operator|.
name|setNumberOfCorruption
argument_list|(
literal|34
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|c
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|34
argument_list|,
name|c
operator|.
name|getNumOfCorruptChildren
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

