begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|http
operator|.
name|HttpServer2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_comment
comment|/**  * A class to test the XFrameoptions of Namenode HTTP Server. We are not reusing  * the TestNameNodeHTTPServer since it is a parameterized class and these  * following tests will run multiple times doing the same thing, if we had the  * code in that classs.  */
end_comment

begin_class
DECL|class|TestNameNodeHttpServerXFrame
specifier|public
class|class
name|TestNameNodeHttpServerXFrame
block|{
annotation|@
name|Rule
DECL|field|exception
specifier|public
name|ExpectedException
name|exception
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
DECL|method|getServerURL (HttpServer2 server)
specifier|public
specifier|static
name|URL
name|getServerURL
parameter_list|(
name|HttpServer2
name|server
parameter_list|)
throws|throws
name|MalformedURLException
block|{
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"No server"
argument_list|,
name|server
argument_list|)
expr_stmt|;
return|return
operator|new
name|URL
argument_list|(
literal|"http://"
operator|+
name|NetUtils
operator|.
name|getHostPortString
argument_list|(
name|server
operator|.
name|getConnectorAddress
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testNameNodeXFrameOptionsEnabled ()
specifier|public
name|void
name|testNameNodeXFrameOptionsEnabled
parameter_list|()
throws|throws
name|Exception
block|{
name|HttpURLConnection
name|conn
init|=
name|createServerwithXFrame
argument_list|(
literal|true
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|xfoHeader
init|=
name|conn
operator|.
name|getHeaderField
argument_list|(
literal|"X-FRAME-OPTIONS"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"X-FRAME-OPTIONS is absent in the header"
argument_list|,
name|xfoHeader
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|xfoHeader
operator|.
name|endsWith
argument_list|(
name|HttpServer2
operator|.
name|XFrameOption
operator|.
name|SAMEORIGIN
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNameNodeXFrameOptionsDisabled ()
specifier|public
name|void
name|testNameNodeXFrameOptionsDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|HttpURLConnection
name|conn
init|=
name|createServerwithXFrame
argument_list|(
literal|false
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|xfoHeader
init|=
name|conn
operator|.
name|getHeaderField
argument_list|(
literal|"X-FRAME-OPTIONS"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"unexpected X-FRAME-OPTION in header"
argument_list|,
name|xfoHeader
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNameNodeXFrameOptionsIllegalOption ()
specifier|public
name|void
name|testNameNodeXFrameOptionsIllegalOption
parameter_list|()
throws|throws
name|Exception
block|{
name|exception
operator|.
name|expect
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
name|createServerwithXFrame
argument_list|(
literal|true
argument_list|,
literal|"hadoop"
argument_list|)
expr_stmt|;
block|}
DECL|method|createServerwithXFrame (boolean enabled, String value)
specifier|private
name|HttpURLConnection
name|createServerwithXFrame
parameter_list|(
name|boolean
name|enabled
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HTTPS_ADDRESS_KEY
argument_list|,
literal|"localhost:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_XFRAME_OPTION_ENABLED
argument_list|,
name|enabled
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_XFRAME_OPTION_VALUE
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|InetSocketAddress
name|addr
init|=
name|InetSocketAddress
operator|.
name|createUnresolved
argument_list|(
literal|"localhost"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|NameNodeHttpServer
name|server
init|=
literal|null
decl_stmt|;
name|server
operator|=
operator|new
name|NameNodeHttpServer
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|,
name|addr
argument_list|)
expr_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|URL
name|url
init|=
name|getServerURL
argument_list|(
name|server
operator|.
name|getHttpServer
argument_list|()
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|connect
argument_list|()
expr_stmt|;
return|return
name|conn
return|;
block|}
annotation|@
name|Test
DECL|method|testSecondaryNameNodeXFrame ()
specifier|public
name|void
name|testSecondaryNameNodeXFrame
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|FileSystem
operator|.
name|setDefaultUri
argument_list|(
name|conf
argument_list|,
literal|"hdfs://localhost:0"
argument_list|)
expr_stmt|;
name|SecondaryNameNode
name|sn
init|=
operator|new
name|SecondaryNameNode
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|sn
operator|.
name|startInfoServer
argument_list|()
expr_stmt|;
name|InetSocketAddress
name|httpAddress
init|=
name|SecondaryNameNode
operator|.
name|getHttpAddress
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|URL
name|url
init|=
name|URI
operator|.
name|create
argument_list|(
literal|"http://"
operator|+
name|httpAddress
operator|.
name|getHostName
argument_list|()
operator|+
literal|":"
operator|+
name|httpAddress
operator|.
name|getPort
argument_list|()
argument_list|)
operator|.
name|toURL
argument_list|()
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|connect
argument_list|()
expr_stmt|;
name|String
name|xfoHeader
init|=
name|conn
operator|.
name|getHeaderField
argument_list|(
literal|"X-FRAME-OPTIONS"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"X-FRAME-OPTIONS is absent in the header"
argument_list|,
name|xfoHeader
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|xfoHeader
operator|.
name|endsWith
argument_list|(
name|HttpServer2
operator|.
name|XFrameOption
operator|.
name|SAMEORIGIN
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

