begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystemTestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|DelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|DelegationTokenFetcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenRenewer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestDelegationTokenFetcher
specifier|public
class|class
name|TestDelegationTokenFetcher
block|{
DECL|field|dfs
specifier|private
name|DistributedFileSystem
name|dfs
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|uri
specifier|private
name|URI
name|uri
decl_stmt|;
DECL|field|SERVICE_VALUE
specifier|private
specifier|static
specifier|final
name|String
name|SERVICE_VALUE
init|=
literal|"localhost:2005"
decl_stmt|;
DECL|field|KIND
specifier|private
specifier|static
specifier|final
name|Text
name|KIND
init|=
operator|new
name|Text
argument_list|(
literal|"TESTING-TOKEN-KIND"
argument_list|)
decl_stmt|;
DECL|field|tokenFile
specifier|private
specifier|static
name|String
name|tokenFile
init|=
literal|"file.dta"
decl_stmt|;
annotation|@
name|Before
DECL|method|init ()
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|URISyntaxException
throws|,
name|IOException
block|{
name|dfs
operator|=
name|mock
argument_list|(
name|DistributedFileSystem
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|uri
operator|=
operator|new
name|URI
argument_list|(
literal|"hdfs://"
operator|+
name|SERVICE_VALUE
argument_list|)
expr_stmt|;
name|FileSystemTestHelper
operator|.
name|addFileSystemForTesting
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|,
name|dfs
argument_list|)
expr_stmt|;
block|}
DECL|class|FakeRenewer
specifier|public
specifier|static
class|class
name|FakeRenewer
extends|extends
name|TokenRenewer
block|{
DECL|field|lastRenewed
specifier|static
name|Token
argument_list|<
name|?
argument_list|>
name|lastRenewed
init|=
literal|null
decl_stmt|;
DECL|field|lastCanceled
specifier|static
name|Token
argument_list|<
name|?
argument_list|>
name|lastCanceled
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
DECL|method|handleKind (Text kind)
specifier|public
name|boolean
name|handleKind
parameter_list|(
name|Text
name|kind
parameter_list|)
block|{
return|return
name|KIND
operator|.
name|equals
argument_list|(
name|kind
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isManaged (Token<?> token)
specifier|public
name|boolean
name|isManaged
parameter_list|(
name|Token
argument_list|<
name|?
argument_list|>
name|token
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|renew (Token<?> token, Configuration conf)
specifier|public
name|long
name|renew
parameter_list|(
name|Token
argument_list|<
name|?
argument_list|>
name|token
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|lastRenewed
operator|=
name|token
expr_stmt|;
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|cancel (Token<?> token, Configuration conf)
specifier|public
name|void
name|cancel
parameter_list|(
name|Token
argument_list|<
name|?
argument_list|>
name|token
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|lastCanceled
operator|=
name|token
expr_stmt|;
block|}
DECL|method|reset ()
specifier|public
specifier|static
name|void
name|reset
parameter_list|()
block|{
name|lastRenewed
operator|=
literal|null
expr_stmt|;
name|lastCanceled
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * Verify that when the DelegationTokenFetcher runs, it talks to the Namenode,    * pulls out the correct user's token and successfully serializes it to disk.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Test
DECL|method|expectedTokenIsRetrievedFromDFS ()
specifier|public
name|void
name|expectedTokenIsRetrievedFromDFS
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|byte
index|[]
name|ident
init|=
operator|new
name|DelegationTokenIdentifier
argument_list|(
operator|new
name|Text
argument_list|(
literal|"owner"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"renewer"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"realuser"
argument_list|)
argument_list|)
operator|.
name|getBytes
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|pw
init|=
operator|new
name|byte
index|[]
block|{
literal|42
block|}
decl_stmt|;
specifier|final
name|Text
name|service
init|=
operator|new
name|Text
argument_list|(
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|user
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
decl_stmt|;
comment|// Create a token for the fetcher to fetch, wire NN to return it when asked
comment|// for this particular user.
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|t
init|=
operator|new
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
argument_list|(
name|ident
argument_list|,
name|pw
argument_list|,
name|KIND
argument_list|,
name|service
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|dfs
operator|.
name|getDelegationToken
argument_list|(
name|eq
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|dfs
operator|.
name|renewDelegationToken
argument_list|(
name|eq
argument_list|(
name|t
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|1000L
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|dfs
operator|.
name|getUri
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|FakeRenewer
operator|.
name|reset
argument_list|()
expr_stmt|;
name|FileSystem
name|fileSys
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|DelegationTokenFetcher
operator|.
name|main
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-fs"
block|,
name|uri
operator|.
name|toString
argument_list|()
block|,
name|tokenFile
block|}
argument_list|)
expr_stmt|;
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|fileSys
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|,
name|tokenFile
argument_list|)
decl_stmt|;
name|Credentials
name|creds
init|=
name|Credentials
operator|.
name|readTokenStorageFile
argument_list|(
name|p
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Token
argument_list|<
name|?
argument_list|>
argument_list|>
name|itr
init|=
name|creds
operator|.
name|getAllTokens
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
comment|// make sure we got back exactly the 1 token we expected
name|assertTrue
argument_list|(
name|itr
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|t
argument_list|,
name|itr
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|itr
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|DelegationTokenFetcher
operator|.
name|main
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"--print"
block|,
name|tokenFile
block|}
argument_list|)
expr_stmt|;
name|DelegationTokenFetcher
operator|.
name|main
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"--renew"
block|,
name|tokenFile
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|t
argument_list|,
name|FakeRenewer
operator|.
name|lastRenewed
argument_list|)
expr_stmt|;
name|FakeRenewer
operator|.
name|reset
argument_list|()
expr_stmt|;
name|DelegationTokenFetcher
operator|.
name|main
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"--cancel"
block|,
name|tokenFile
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|t
argument_list|,
name|FakeRenewer
operator|.
name|lastCanceled
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fileSys
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|tokenFile
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

