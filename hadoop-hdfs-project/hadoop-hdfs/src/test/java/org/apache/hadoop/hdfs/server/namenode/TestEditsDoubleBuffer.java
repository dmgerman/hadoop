begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestEditsDoubleBuffer
specifier|public
class|class
name|TestEditsDoubleBuffer
block|{
annotation|@
name|Test
DECL|method|testDoubleBuffer ()
specifier|public
name|void
name|testDoubleBuffer
parameter_list|()
throws|throws
name|IOException
block|{
name|EditsDoubleBuffer
name|buf
init|=
operator|new
name|EditsDoubleBuffer
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|buf
operator|.
name|isFlushed
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
name|buf
operator|.
name|writeRaw
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should count new data correctly"
argument_list|,
name|data
operator|.
name|length
argument_list|,
name|buf
operator|.
name|countBufferedBytes
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Writing to current buffer should not affect flush state"
argument_list|,
name|buf
operator|.
name|isFlushed
argument_list|()
argument_list|)
expr_stmt|;
comment|// Swap the buffers
name|buf
operator|.
name|setReadyToFlush
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Swapping buffers should still count buffered bytes"
argument_list|,
name|data
operator|.
name|length
argument_list|,
name|buf
operator|.
name|countBufferedBytes
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|buf
operator|.
name|isFlushed
argument_list|()
argument_list|)
expr_stmt|;
comment|// Flush to a stream
name|DataOutputBuffer
name|outBuf
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|buf
operator|.
name|flushTo
argument_list|(
name|outBuf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|data
operator|.
name|length
argument_list|,
name|outBuf
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|buf
operator|.
name|isFlushed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|buf
operator|.
name|countBufferedBytes
argument_list|()
argument_list|)
expr_stmt|;
comment|// Write some more
name|buf
operator|.
name|writeRaw
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should count new data correctly"
argument_list|,
name|data
operator|.
name|length
argument_list|,
name|buf
operator|.
name|countBufferedBytes
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|setReadyToFlush
argument_list|()
expr_stmt|;
name|buf
operator|.
name|flushTo
argument_list|(
name|outBuf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|data
operator|.
name|length
operator|*
literal|2
argument_list|,
name|outBuf
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|buf
operator|.
name|countBufferedBytes
argument_list|()
argument_list|)
expr_stmt|;
name|outBuf
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|shouldFailToCloseWhenUnflushed ()
specifier|public
name|void
name|shouldFailToCloseWhenUnflushed
parameter_list|()
throws|throws
name|IOException
block|{
name|EditsDoubleBuffer
name|buf
init|=
operator|new
name|EditsDoubleBuffer
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|buf
operator|.
name|writeRaw
argument_list|(
operator|new
name|byte
index|[
literal|1
index|]
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
name|buf
operator|.
name|close
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Did not fail to close with unflushed data"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
if|if
condition|(
operator|!
name|ioe
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"still to be flushed"
argument_list|)
condition|)
block|{
throw|throw
name|ioe
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

