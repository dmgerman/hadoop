begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DirectoryListing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ErasureCodingPolicyManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSNamesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ErasureCodingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|ECSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
operator|.
name|assertExceptionContains
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestErasureCodingPolicies
specifier|public
class|class
name|TestErasureCodingPolicies
block|{
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|fs
specifier|private
name|DistributedFileSystem
name|fs
decl_stmt|;
DECL|field|BLOCK_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|BLOCK_SIZE
init|=
literal|1024
decl_stmt|;
DECL|field|namesystem
specifier|private
name|FSNamesystem
name|namesystem
decl_stmt|;
annotation|@
name|Before
DECL|method|setupCluster ()
specifier|public
name|void
name|setupCluster
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|namesystem
operator|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|shutdownCluster ()
specifier|public
name|void
name|shutdownCluster
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * for pre-existing files (with replicated blocks) in an EC dir, getListing    * should report them as non-ec.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testReplicatedFileUnderECDir ()
specifier|public
name|void
name|testReplicatedFileUnderECDir
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/ec"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|replicatedFile
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"replicatedFile"
argument_list|)
decl_stmt|;
comment|// create a file with replicated blocks
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|replicatedFile
argument_list|,
literal|0
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
comment|// set ec policy on dir
name|fs
operator|.
name|setErasureCodingPolicy
argument_list|(
name|dir
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// create a file which should be using ec
specifier|final
name|Path
name|ecSubDir
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"ecSubDir"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|ecFile
init|=
operator|new
name|Path
argument_list|(
name|ecSubDir
argument_list|,
literal|"ecFile"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|ecFile
argument_list|,
literal|0
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|getFileInfo
argument_list|(
name|replicatedFile
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getErasureCodingPolicy
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|getFileInfo
argument_list|(
name|ecFile
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getErasureCodingPolicy
argument_list|()
argument_list|)
expr_stmt|;
comment|// list "/ec"
name|DirectoryListing
name|listing
init|=
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|listPaths
argument_list|(
name|dir
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|HdfsFileStatus
index|[]
name|files
init|=
name|listing
operator|.
name|getPartialListing
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|files
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// the listing is always sorted according to the local name
name|assertEquals
argument_list|(
name|ecSubDir
operator|.
name|getName
argument_list|()
argument_list|,
name|files
index|[
literal|0
index|]
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|files
index|[
literal|0
index|]
operator|.
name|getErasureCodingPolicy
argument_list|()
argument_list|)
expr_stmt|;
comment|// ecSubDir
name|assertEquals
argument_list|(
name|replicatedFile
operator|.
name|getName
argument_list|()
argument_list|,
name|files
index|[
literal|1
index|]
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|files
index|[
literal|1
index|]
operator|.
name|getErasureCodingPolicy
argument_list|()
argument_list|)
expr_stmt|;
comment|// replicatedFile
comment|// list "/ec/ecSubDir"
name|files
operator|=
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|listPaths
argument_list|(
name|ecSubDir
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
literal|false
argument_list|)
operator|.
name|getPartialListing
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|files
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ecFile
operator|.
name|getName
argument_list|()
argument_list|,
name|files
index|[
literal|0
index|]
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|files
index|[
literal|0
index|]
operator|.
name|getErasureCodingPolicy
argument_list|()
argument_list|)
expr_stmt|;
comment|// ecFile
comment|// list "/"
name|files
operator|=
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|listPaths
argument_list|(
literal|"/"
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
literal|false
argument_list|)
operator|.
name|getPartialListing
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|files
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dir
operator|.
name|getName
argument_list|()
argument_list|,
name|files
index|[
literal|0
index|]
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
comment|// ec
name|assertNotNull
argument_list|(
name|files
index|[
literal|0
index|]
operator|.
name|getErasureCodingPolicy
argument_list|()
argument_list|)
expr_stmt|;
comment|// rename "/ec/ecSubDir/ecFile" to "/ecFile"
name|assertTrue
argument_list|(
name|fs
operator|.
name|rename
argument_list|(
name|ecFile
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/ecFile"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|files
operator|=
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|listPaths
argument_list|(
literal|"/"
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
literal|false
argument_list|)
operator|.
name|getPartialListing
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|files
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dir
operator|.
name|getName
argument_list|()
argument_list|,
name|files
index|[
literal|0
index|]
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
comment|// ec
name|assertNotNull
argument_list|(
name|files
index|[
literal|0
index|]
operator|.
name|getErasureCodingPolicy
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ecFile
operator|.
name|getName
argument_list|()
argument_list|,
name|files
index|[
literal|1
index|]
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|files
index|[
literal|1
index|]
operator|.
name|getErasureCodingPolicy
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testBasicSetECPolicy ()
specifier|public
name|void
name|testBasicSetECPolicy
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|Path
name|testDir
init|=
operator|new
name|Path
argument_list|(
literal|"/ec"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdir
argument_list|(
name|testDir
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|)
expr_stmt|;
comment|/* Normal creation of an erasure coding directory */
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|setErasureCodingPolicy
argument_list|(
name|testDir
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|/* Verify files under the directory are striped */
specifier|final
name|Path
name|ECFilePath
init|=
operator|new
name|Path
argument_list|(
name|testDir
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|create
argument_list|(
name|ECFilePath
argument_list|)
expr_stmt|;
name|INode
name|inode
init|=
name|namesystem
operator|.
name|getFSDirectory
argument_list|()
operator|.
name|getINode
argument_list|(
name|ECFilePath
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|inode
operator|.
name|asFile
argument_list|()
operator|.
name|isStriped
argument_list|()
argument_list|)
expr_stmt|;
comment|/**      * Verify that setting EC policy on non-empty directory only affects      * newly created files under the directory.      */
specifier|final
name|Path
name|notEmpty
init|=
operator|new
name|Path
argument_list|(
literal|"/nonEmpty"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdir
argument_list|(
name|notEmpty
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|oldFile
init|=
operator|new
name|Path
argument_list|(
name|notEmpty
argument_list|,
literal|"old"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|create
argument_list|(
name|oldFile
argument_list|)
expr_stmt|;
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|setErasureCodingPolicy
argument_list|(
name|notEmpty
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|newFile
init|=
operator|new
name|Path
argument_list|(
name|notEmpty
argument_list|,
literal|"new"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|create
argument_list|(
name|newFile
argument_list|)
expr_stmt|;
name|INode
name|oldInode
init|=
name|namesystem
operator|.
name|getFSDirectory
argument_list|()
operator|.
name|getINode
argument_list|(
name|oldFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|oldInode
operator|.
name|asFile
argument_list|()
operator|.
name|isStriped
argument_list|()
argument_list|)
expr_stmt|;
name|INode
name|newInode
init|=
name|namesystem
operator|.
name|getFSDirectory
argument_list|()
operator|.
name|getINode
argument_list|(
name|newFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|newInode
operator|.
name|asFile
argument_list|()
operator|.
name|isStriped
argument_list|()
argument_list|)
expr_stmt|;
comment|/* Verify that nested EC policies not supported */
specifier|final
name|Path
name|dir1
init|=
operator|new
name|Path
argument_list|(
literal|"/dir1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|dir2
init|=
operator|new
name|Path
argument_list|(
name|dir1
argument_list|,
literal|"dir2"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdir
argument_list|(
name|dir1
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|setErasureCodingPolicy
argument_list|(
name|dir1
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdir
argument_list|(
name|dir2
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|setErasureCodingPolicy
argument_list|(
name|dir2
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Nested erasure coding policies"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"already has an erasure coding policy"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|/* Verify that EC policy cannot be set on a file */
specifier|final
name|Path
name|fPath
init|=
operator|new
name|Path
argument_list|(
literal|"/file"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|create
argument_list|(
name|fPath
argument_list|)
expr_stmt|;
try|try
block|{
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|setErasureCodingPolicy
argument_list|(
name|fPath
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Erasure coding policy on file"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"erasure coding policy for a file"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testMoveValidity ()
specifier|public
name|void
name|testMoveValidity
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|Path
name|srcECDir
init|=
operator|new
name|Path
argument_list|(
literal|"/srcEC"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|dstECDir
init|=
operator|new
name|Path
argument_list|(
literal|"/dstEC"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdir
argument_list|(
name|srcECDir
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdir
argument_list|(
name|dstECDir
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|setErasureCodingPolicy
argument_list|(
name|srcECDir
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|setErasureCodingPolicy
argument_list|(
name|dstECDir
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|srcFile
init|=
operator|new
name|Path
argument_list|(
name|srcECDir
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|create
argument_list|(
name|srcFile
argument_list|)
expr_stmt|;
comment|// Test move dir
comment|// Move EC dir under non-EC dir
specifier|final
name|Path
name|newDir
init|=
operator|new
name|Path
argument_list|(
literal|"/srcEC_new"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|rename
argument_list|(
name|srcECDir
argument_list|,
name|newDir
argument_list|)
expr_stmt|;
name|fs
operator|.
name|rename
argument_list|(
name|newDir
argument_list|,
name|srcECDir
argument_list|)
expr_stmt|;
comment|// move back
comment|// Move EC dir under another EC dir
name|fs
operator|.
name|rename
argument_list|(
name|srcECDir
argument_list|,
name|dstECDir
argument_list|)
expr_stmt|;
name|fs
operator|.
name|rename
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/dstEC/srcEC"
argument_list|)
argument_list|,
name|srcECDir
argument_list|)
expr_stmt|;
comment|// move back
comment|// Test move file
comment|/* Verify that a file can be moved between 2 EC dirs */
name|fs
operator|.
name|rename
argument_list|(
name|srcFile
argument_list|,
name|dstECDir
argument_list|)
expr_stmt|;
name|fs
operator|.
name|rename
argument_list|(
operator|new
name|Path
argument_list|(
name|dstECDir
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
name|srcECDir
argument_list|)
expr_stmt|;
comment|// move back
comment|/* Verify that a file can be moved from a non-EC dir to an EC dir */
specifier|final
name|Path
name|nonECDir
init|=
operator|new
name|Path
argument_list|(
literal|"/nonEC"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdir
argument_list|(
name|nonECDir
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|rename
argument_list|(
name|srcFile
argument_list|,
name|nonECDir
argument_list|)
expr_stmt|;
comment|/* Verify that a file can be moved from an EC dir to a non-EC dir */
specifier|final
name|Path
name|nonECFile
init|=
operator|new
name|Path
argument_list|(
name|nonECDir
argument_list|,
literal|"nonECFile"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|create
argument_list|(
name|nonECFile
argument_list|)
expr_stmt|;
name|fs
operator|.
name|rename
argument_list|(
name|nonECFile
argument_list|,
name|dstECDir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testReplication ()
specifier|public
name|void
name|testReplication
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|testDir
init|=
operator|new
name|Path
argument_list|(
literal|"/ec"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdir
argument_list|(
name|testDir
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setErasureCodingPolicy
argument_list|(
name|testDir
argument_list|,
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|fooFile
init|=
operator|new
name|Path
argument_list|(
name|testDir
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
comment|// create ec file with replication=0
name|fs
operator|.
name|create
argument_list|(
name|fooFile
argument_list|,
name|FsPermission
operator|.
name|getFileDefault
argument_list|()
argument_list|,
literal|true
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IO_FILE_BUFFER_SIZE_KEY
argument_list|,
literal|4096
argument_list|)
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|,
name|fs
operator|.
name|getDefaultBlockSize
argument_list|(
name|fooFile
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// set replication should be a no-op
name|fs
operator|.
name|setReplication
argument_list|(
name|fooFile
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testGetErasureCodingPolicyWithSystemDefaultECPolicy ()
specifier|public
name|void
name|testGetErasureCodingPolicyWithSystemDefaultECPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|src
init|=
literal|"/ec"
decl_stmt|;
specifier|final
name|Path
name|ecDir
init|=
operator|new
name|Path
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdir
argument_list|(
name|ecDir
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|)
expr_stmt|;
comment|// dir EC policy should be null
name|assertNull
argument_list|(
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|getFileInfo
argument_list|(
name|src
argument_list|)
operator|.
name|getErasureCodingPolicy
argument_list|()
argument_list|)
expr_stmt|;
comment|// dir EC policy after setting
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|setErasureCodingPolicy
argument_list|(
name|src
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|//Default one will be used.
name|ErasureCodingPolicy
name|sysDefaultECPolicy
init|=
name|ErasureCodingPolicyManager
operator|.
name|getSystemDefaultPolicy
argument_list|()
decl_stmt|;
name|verifyErasureCodingInfo
argument_list|(
name|src
argument_list|,
name|sysDefaultECPolicy
argument_list|)
expr_stmt|;
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|ecDir
argument_list|,
literal|"child1"
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// verify for the files in ec dir
name|verifyErasureCodingInfo
argument_list|(
name|src
operator|+
literal|"/child1"
argument_list|,
name|sysDefaultECPolicy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testGetErasureCodingPolicy ()
specifier|public
name|void
name|testGetErasureCodingPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|ErasureCodingPolicy
index|[]
name|sysECPolicies
init|=
name|ErasureCodingPolicyManager
operator|.
name|getSystemPolices
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"System ecPolicies should be of only 1 for now"
argument_list|,
name|sysECPolicies
operator|.
name|length
operator|==
literal|1
argument_list|)
expr_stmt|;
name|ErasureCodingPolicy
name|usingECPolicy
init|=
name|sysECPolicies
index|[
literal|0
index|]
decl_stmt|;
name|String
name|src
init|=
literal|"/ec2"
decl_stmt|;
specifier|final
name|Path
name|ecDir
init|=
operator|new
name|Path
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdir
argument_list|(
name|ecDir
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|)
expr_stmt|;
comment|// dir ECInfo before being set
name|assertNull
argument_list|(
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|getFileInfo
argument_list|(
name|src
argument_list|)
operator|.
name|getErasureCodingPolicy
argument_list|()
argument_list|)
expr_stmt|;
comment|// dir ECInfo after set
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|setErasureCodingPolicy
argument_list|(
name|src
argument_list|,
name|usingECPolicy
argument_list|)
expr_stmt|;
name|verifyErasureCodingInfo
argument_list|(
name|src
argument_list|,
name|usingECPolicy
argument_list|)
expr_stmt|;
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|ecDir
argument_list|,
literal|"child1"
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// verify for the files in ec dir
name|verifyErasureCodingInfo
argument_list|(
name|src
operator|+
literal|"/child1"
argument_list|,
name|usingECPolicy
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyErasureCodingInfo ( String src, ErasureCodingPolicy usingECPolicy)
specifier|private
name|void
name|verifyErasureCodingInfo
parameter_list|(
name|String
name|src
parameter_list|,
name|ErasureCodingPolicy
name|usingECPolicy
parameter_list|)
throws|throws
name|IOException
block|{
name|HdfsFileStatus
name|hdfsFileStatus
init|=
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|getFileInfo
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|ErasureCodingPolicy
name|ecPolicy
init|=
name|hdfsFileStatus
operator|.
name|getErasureCodingPolicy
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|ecPolicy
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Actually used ecPolicy should be equal with target ecPolicy"
argument_list|,
name|usingECPolicy
argument_list|,
name|ecPolicy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testCreationErasureCodingZoneWithInvalidPolicy ()
specifier|public
name|void
name|testCreationErasureCodingZoneWithInvalidPolicy
parameter_list|()
throws|throws
name|IOException
block|{
name|ECSchema
name|rsSchema
init|=
operator|new
name|ECSchema
argument_list|(
literal|"rs"
argument_list|,
literal|4
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|String
name|policyName
init|=
literal|"RS-4-2-128k"
decl_stmt|;
name|int
name|cellSize
init|=
literal|128
operator|*
literal|1024
decl_stmt|;
name|ErasureCodingPolicy
name|ecPolicy
init|=
operator|new
name|ErasureCodingPolicy
argument_list|(
name|policyName
argument_list|,
name|rsSchema
argument_list|,
name|cellSize
argument_list|)
decl_stmt|;
name|String
name|src
init|=
literal|"/ecDir4-2"
decl_stmt|;
specifier|final
name|Path
name|ecDir
init|=
operator|new
name|Path
argument_list|(
name|src
argument_list|)
decl_stmt|;
try|try
block|{
name|fs
operator|.
name|mkdir
argument_list|(
name|ecDir
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|setErasureCodingPolicy
argument_list|(
name|src
argument_list|,
name|ecPolicy
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"HadoopIllegalArgumentException should be thrown for"
operator|+
literal|"setting an invalid erasure coding policy"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"Policy [ RS-4-2-128k ] does not match "
operator|+
literal|"any of the supported policies"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testGetAllErasureCodingPolicies ()
specifier|public
name|void
name|testGetAllErasureCodingPolicies
parameter_list|()
throws|throws
name|Exception
block|{
name|ErasureCodingPolicy
index|[]
name|sysECPolicies
init|=
name|ErasureCodingPolicyManager
operator|.
name|getSystemPolices
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"System ecPolicies should be of only 1 for now"
argument_list|,
name|sysECPolicies
operator|.
name|length
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|ErasureCodingPolicy
argument_list|>
name|allECPolicies
init|=
name|fs
operator|.
name|getAllErasureCodingPolicies
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"All ecPolicies should be of only 1 for now"
argument_list|,
name|allECPolicies
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Erasure coding policy mismatches"
argument_list|,
name|sysECPolicies
index|[
literal|0
index|]
argument_list|,
name|allECPolicies
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testGetErasureCodingPolicyOnANonExistentFile ()
specifier|public
name|void
name|testGetErasureCodingPolicyOnANonExistentFile
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/ecDir"
argument_list|)
decl_stmt|;
try|try
block|{
name|fs
operator|.
name|getErasureCodingPolicy
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"FileNotFoundException should be thrown for a non-existent"
operator|+
literal|" file path"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"Path not found: "
operator|+
name|path
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|HdfsAdmin
name|dfsAdmin
init|=
operator|new
name|HdfsAdmin
argument_list|(
name|cluster
operator|.
name|getURI
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|dfsAdmin
operator|.
name|getErasureCodingPolicy
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"FileNotFoundException should be thrown for a non-existent"
operator|+
literal|" file path"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"Path not found: "
operator|+
name|path
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

