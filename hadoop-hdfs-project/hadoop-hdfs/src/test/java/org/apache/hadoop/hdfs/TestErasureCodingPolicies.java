begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|AddErasureCodingPolicyResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DirectoryListing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ErasureCodingPolicyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SystemErasureCodingPolicies
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ErasureCodingPolicyManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSNamesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ErasureCodingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|ECSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|ErasureCodeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
operator|.
name|assertExceptionContains
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestErasureCodingPolicies
specifier|public
class|class
name|TestErasureCodingPolicies
block|{
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|fs
specifier|private
name|DistributedFileSystem
name|fs
decl_stmt|;
DECL|field|BLOCK_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|BLOCK_SIZE
init|=
literal|16
operator|*
literal|1024
decl_stmt|;
DECL|field|ecPolicy
specifier|private
name|ErasureCodingPolicy
name|ecPolicy
decl_stmt|;
DECL|field|namesystem
specifier|private
name|FSNamesystem
name|namesystem
decl_stmt|;
DECL|method|getEcPolicy ()
specifier|public
name|ErasureCodingPolicy
name|getEcPolicy
parameter_list|()
block|{
return|return
name|StripedFileTestUtil
operator|.
name|getDefaultECPolicy
argument_list|()
return|;
block|}
annotation|@
name|Rule
DECL|field|timeout
specifier|public
name|Timeout
name|timeout
init|=
operator|new
name|Timeout
argument_list|(
literal|60
operator|*
literal|1000
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|setupCluster ()
specifier|public
name|void
name|setupCluster
parameter_list|()
throws|throws
name|IOException
block|{
name|ecPolicy
operator|=
name|getEcPolicy
argument_list|()
expr_stmt|;
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|ecPolicy
operator|.
name|getNumDataUnits
argument_list|()
operator|+
name|ecPolicy
operator|.
name|getNumParityUnits
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|namesystem
operator|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
expr_stmt|;
name|DFSTestUtil
operator|.
name|enableAllECPolicies
argument_list|(
name|fs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|shutdownCluster ()
specifier|public
name|void
name|shutdownCluster
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * for pre-existing files (with replicated blocks) in an EC dir, getListing    * should report them as non-ec.    */
annotation|@
name|Test
DECL|method|testReplicatedFileUnderECDir ()
specifier|public
name|void
name|testReplicatedFileUnderECDir
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/ec"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|replicatedFile
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"replicatedFile"
argument_list|)
decl_stmt|;
comment|// create a file with replicated blocks
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|replicatedFile
argument_list|,
literal|0
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
comment|// set ec policy on dir
name|fs
operator|.
name|setErasureCodingPolicy
argument_list|(
name|dir
argument_list|,
name|ecPolicy
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// create a file which should be using ec
specifier|final
name|Path
name|ecSubDir
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"ecSubDir"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|ecFile
init|=
operator|new
name|Path
argument_list|(
name|ecSubDir
argument_list|,
literal|"ecFile"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|ecFile
argument_list|,
literal|0
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|getFileInfo
argument_list|(
name|replicatedFile
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getErasureCodingPolicy
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|getFileInfo
argument_list|(
name|ecFile
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getErasureCodingPolicy
argument_list|()
argument_list|)
expr_stmt|;
comment|// list "/ec"
name|DirectoryListing
name|listing
init|=
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|listPaths
argument_list|(
name|dir
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|HdfsFileStatus
index|[]
name|files
init|=
name|listing
operator|.
name|getPartialListing
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|files
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// the listing is always sorted according to the local name
name|assertEquals
argument_list|(
name|ecSubDir
operator|.
name|getName
argument_list|()
argument_list|,
name|files
index|[
literal|0
index|]
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|files
index|[
literal|0
index|]
operator|.
name|getErasureCodingPolicy
argument_list|()
argument_list|)
expr_stmt|;
comment|// ecSubDir
name|assertEquals
argument_list|(
name|replicatedFile
operator|.
name|getName
argument_list|()
argument_list|,
name|files
index|[
literal|1
index|]
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|files
index|[
literal|1
index|]
operator|.
name|getErasureCodingPolicy
argument_list|()
argument_list|)
expr_stmt|;
comment|// replicatedFile
comment|// list "/ec/ecSubDir"
name|files
operator|=
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|listPaths
argument_list|(
name|ecSubDir
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
literal|false
argument_list|)
operator|.
name|getPartialListing
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|files
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ecFile
operator|.
name|getName
argument_list|()
argument_list|,
name|files
index|[
literal|0
index|]
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|files
index|[
literal|0
index|]
operator|.
name|getErasureCodingPolicy
argument_list|()
argument_list|)
expr_stmt|;
comment|// ecFile
comment|// list "/"
name|files
operator|=
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|listPaths
argument_list|(
literal|"/"
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
literal|false
argument_list|)
operator|.
name|getPartialListing
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|files
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dir
operator|.
name|getName
argument_list|()
argument_list|,
name|files
index|[
literal|0
index|]
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
comment|// ec
name|assertNotNull
argument_list|(
name|files
index|[
literal|0
index|]
operator|.
name|getErasureCodingPolicy
argument_list|()
argument_list|)
expr_stmt|;
comment|// rename "/ec/ecSubDir/ecFile" to "/ecFile"
name|assertTrue
argument_list|(
name|fs
operator|.
name|rename
argument_list|(
name|ecFile
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/ecFile"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|files
operator|=
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|listPaths
argument_list|(
literal|"/"
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
literal|false
argument_list|)
operator|.
name|getPartialListing
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|files
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dir
operator|.
name|getName
argument_list|()
argument_list|,
name|files
index|[
literal|0
index|]
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
comment|// ec
name|assertNotNull
argument_list|(
name|files
index|[
literal|0
index|]
operator|.
name|getErasureCodingPolicy
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ecFile
operator|.
name|getName
argument_list|()
argument_list|,
name|files
index|[
literal|1
index|]
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|files
index|[
literal|1
index|]
operator|.
name|getErasureCodingPolicy
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBasicSetECPolicy ()
specifier|public
name|void
name|testBasicSetECPolicy
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|Path
name|testDir
init|=
operator|new
name|Path
argument_list|(
literal|"/ec"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdir
argument_list|(
name|testDir
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|)
expr_stmt|;
comment|/* Normal creation of an erasure coding directory */
name|fs
operator|.
name|setErasureCodingPolicy
argument_list|(
name|testDir
argument_list|,
name|ecPolicy
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|/* Verify files under the directory are striped */
specifier|final
name|Path
name|ECFilePath
init|=
operator|new
name|Path
argument_list|(
name|testDir
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|create
argument_list|(
name|ECFilePath
argument_list|)
expr_stmt|;
name|INode
name|inode
init|=
name|namesystem
operator|.
name|getFSDirectory
argument_list|()
operator|.
name|getINode
argument_list|(
name|ECFilePath
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|inode
operator|.
name|asFile
argument_list|()
operator|.
name|isStriped
argument_list|()
argument_list|)
expr_stmt|;
comment|/**      * Verify that setting EC policy on non-empty directory only affects      * newly created files under the directory.      */
specifier|final
name|Path
name|notEmpty
init|=
operator|new
name|Path
argument_list|(
literal|"/nonEmpty"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdir
argument_list|(
name|notEmpty
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|oldFile
init|=
operator|new
name|Path
argument_list|(
name|notEmpty
argument_list|,
literal|"old"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|create
argument_list|(
name|oldFile
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setErasureCodingPolicy
argument_list|(
name|notEmpty
argument_list|,
name|ecPolicy
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|newFile
init|=
operator|new
name|Path
argument_list|(
name|notEmpty
argument_list|,
literal|"new"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|create
argument_list|(
name|newFile
argument_list|)
expr_stmt|;
name|INode
name|oldInode
init|=
name|namesystem
operator|.
name|getFSDirectory
argument_list|()
operator|.
name|getINode
argument_list|(
name|oldFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|oldInode
operator|.
name|asFile
argument_list|()
operator|.
name|isStriped
argument_list|()
argument_list|)
expr_stmt|;
name|INode
name|newInode
init|=
name|namesystem
operator|.
name|getFSDirectory
argument_list|()
operator|.
name|getINode
argument_list|(
name|newFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|newInode
operator|.
name|asFile
argument_list|()
operator|.
name|isStriped
argument_list|()
argument_list|)
expr_stmt|;
comment|/* Verify that nested EC policies are supported */
specifier|final
name|Path
name|dir1
init|=
operator|new
name|Path
argument_list|(
literal|"/dir1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|dir2
init|=
operator|new
name|Path
argument_list|(
name|dir1
argument_list|,
literal|"dir2"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdir
argument_list|(
name|dir1
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setErasureCodingPolicy
argument_list|(
name|dir1
argument_list|,
name|ecPolicy
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdir
argument_list|(
name|dir2
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|fs
operator|.
name|setErasureCodingPolicy
argument_list|(
name|dir2
argument_list|,
name|ecPolicy
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Nested erasure coding policies are supported"
argument_list|)
expr_stmt|;
block|}
comment|/* Verify that EC policy cannot be set on a file */
specifier|final
name|Path
name|fPath
init|=
operator|new
name|Path
argument_list|(
literal|"/file"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|create
argument_list|(
name|fPath
argument_list|)
expr_stmt|;
try|try
block|{
name|fs
operator|.
name|setErasureCodingPolicy
argument_list|(
name|fPath
argument_list|,
name|ecPolicy
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Erasure coding policy on file"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"erasure coding policy for a file"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Verify that policies are successfully loaded even when policies
comment|// are disabled
name|cluster
operator|.
name|restartNameNodes
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
comment|// Already set directory-level policies should still be in effect
name|Path
name|disabledPolicy
init|=
operator|new
name|Path
argument_list|(
name|dir1
argument_list|,
literal|"afterDisabled"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Dir does not have policy set"
argument_list|,
name|ecPolicy
argument_list|,
name|fs
operator|.
name|getErasureCodingPolicy
argument_list|(
name|dir1
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|create
argument_list|(
name|disabledPolicy
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"File did not inherit dir's policy"
argument_list|,
name|ecPolicy
argument_list|,
name|fs
operator|.
name|getErasureCodingPolicy
argument_list|(
name|disabledPolicy
argument_list|)
argument_list|)
expr_stmt|;
comment|// Also check loading disabled EC policies from fsimage
name|fs
operator|.
name|setSafeMode
argument_list|(
name|HdfsConstants
operator|.
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
argument_list|)
expr_stmt|;
name|fs
operator|.
name|saveNamespace
argument_list|()
expr_stmt|;
name|fs
operator|.
name|setSafeMode
argument_list|(
name|HdfsConstants
operator|.
name|SafeModeAction
operator|.
name|SAFEMODE_LEAVE
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|restartNameNodes
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Dir does not have policy set"
argument_list|,
name|ecPolicy
argument_list|,
name|fs
operator|.
name|getErasureCodingPolicy
argument_list|(
name|dir1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"File does not have policy set"
argument_list|,
name|ecPolicy
argument_list|,
name|fs
operator|.
name|getErasureCodingPolicy
argument_list|(
name|disabledPolicy
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMoveValidity ()
specifier|public
name|void
name|testMoveValidity
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|Path
name|srcECDir
init|=
operator|new
name|Path
argument_list|(
literal|"/srcEC"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|dstECDir
init|=
operator|new
name|Path
argument_list|(
literal|"/dstEC"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdir
argument_list|(
name|srcECDir
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdir
argument_list|(
name|dstECDir
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setErasureCodingPolicy
argument_list|(
name|srcECDir
argument_list|,
name|ecPolicy
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setErasureCodingPolicy
argument_list|(
name|dstECDir
argument_list|,
name|ecPolicy
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|srcFile
init|=
operator|new
name|Path
argument_list|(
name|srcECDir
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|create
argument_list|(
name|srcFile
argument_list|)
expr_stmt|;
comment|// Test move dir
comment|// Move EC dir under non-EC dir
specifier|final
name|Path
name|newDir
init|=
operator|new
name|Path
argument_list|(
literal|"/srcEC_new"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|rename
argument_list|(
name|srcECDir
argument_list|,
name|newDir
argument_list|)
expr_stmt|;
name|fs
operator|.
name|rename
argument_list|(
name|newDir
argument_list|,
name|srcECDir
argument_list|)
expr_stmt|;
comment|// move back
comment|// Move EC dir under another EC dir
name|fs
operator|.
name|rename
argument_list|(
name|srcECDir
argument_list|,
name|dstECDir
argument_list|)
expr_stmt|;
name|fs
operator|.
name|rename
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/dstEC/srcEC"
argument_list|)
argument_list|,
name|srcECDir
argument_list|)
expr_stmt|;
comment|// move back
comment|// Test move file
comment|/* Verify that a file can be moved between 2 EC dirs */
name|fs
operator|.
name|rename
argument_list|(
name|srcFile
argument_list|,
name|dstECDir
argument_list|)
expr_stmt|;
name|fs
operator|.
name|rename
argument_list|(
operator|new
name|Path
argument_list|(
name|dstECDir
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
name|srcECDir
argument_list|)
expr_stmt|;
comment|// move back
comment|/* Verify that a file can be moved from a non-EC dir to an EC dir */
specifier|final
name|Path
name|nonECDir
init|=
operator|new
name|Path
argument_list|(
literal|"/nonEC"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdir
argument_list|(
name|nonECDir
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|rename
argument_list|(
name|srcFile
argument_list|,
name|nonECDir
argument_list|)
expr_stmt|;
comment|/* Verify that a file can be moved from an EC dir to a non-EC dir */
specifier|final
name|Path
name|nonECFile
init|=
operator|new
name|Path
argument_list|(
name|nonECDir
argument_list|,
literal|"nonECFile"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|create
argument_list|(
name|nonECFile
argument_list|)
expr_stmt|;
name|fs
operator|.
name|rename
argument_list|(
name|nonECFile
argument_list|,
name|dstECDir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReplication ()
specifier|public
name|void
name|testReplication
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|testDir
init|=
operator|new
name|Path
argument_list|(
literal|"/ec"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdir
argument_list|(
name|testDir
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setErasureCodingPolicy
argument_list|(
name|testDir
argument_list|,
name|ecPolicy
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|fooFile
init|=
operator|new
name|Path
argument_list|(
name|testDir
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
comment|// create ec file with replication=0
name|fs
operator|.
name|create
argument_list|(
name|fooFile
argument_list|,
name|FsPermission
operator|.
name|getFileDefault
argument_list|()
argument_list|,
literal|true
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IO_FILE_BUFFER_SIZE_KEY
argument_list|,
literal|4096
argument_list|)
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|,
name|fs
operator|.
name|getDefaultBlockSize
argument_list|(
name|fooFile
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ErasureCodingPolicy
name|policy
init|=
name|fs
operator|.
name|getErasureCodingPolicy
argument_list|(
name|fooFile
argument_list|)
decl_stmt|;
comment|// set replication should be a no-op
name|fs
operator|.
name|setReplication
argument_list|(
name|fooFile
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
expr_stmt|;
comment|// should preserve the policy after set replication
name|assertEquals
argument_list|(
name|policy
argument_list|,
name|fs
operator|.
name|getErasureCodingPolicy
argument_list|(
name|fooFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetErasureCodingPolicyWithSystemDefaultECPolicy ()
specifier|public
name|void
name|testGetErasureCodingPolicyWithSystemDefaultECPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|src
init|=
literal|"/ec"
decl_stmt|;
specifier|final
name|Path
name|ecDir
init|=
operator|new
name|Path
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdir
argument_list|(
name|ecDir
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|)
expr_stmt|;
comment|// dir EC policy should be null
name|assertNull
argument_list|(
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|getFileInfo
argument_list|(
name|src
argument_list|)
operator|.
name|getErasureCodingPolicy
argument_list|()
argument_list|)
expr_stmt|;
comment|// dir EC policy after setting
name|ErasureCodingPolicy
name|sysDefaultECPolicy
init|=
name|StripedFileTestUtil
operator|.
name|getDefaultECPolicy
argument_list|()
decl_stmt|;
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|setErasureCodingPolicy
argument_list|(
name|src
argument_list|,
name|sysDefaultECPolicy
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|verifyErasureCodingInfo
argument_list|(
name|src
argument_list|,
name|sysDefaultECPolicy
argument_list|)
expr_stmt|;
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|ecDir
argument_list|,
literal|"child1"
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// verify for the files in ec dir
name|verifyErasureCodingInfo
argument_list|(
name|src
operator|+
literal|"/child1"
argument_list|,
name|sysDefaultECPolicy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetErasureCodingPolicy ()
specifier|public
name|void
name|testGetErasureCodingPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|ErasureCodingPolicy
argument_list|>
name|sysECPolicies
init|=
name|SystemErasureCodingPolicies
operator|.
name|getPolicies
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"System ecPolicies should exist"
argument_list|,
name|sysECPolicies
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|ErasureCodingPolicy
name|usingECPolicy
init|=
name|sysECPolicies
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|src
init|=
literal|"/ec2"
decl_stmt|;
specifier|final
name|Path
name|ecDir
init|=
operator|new
name|Path
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdir
argument_list|(
name|ecDir
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|)
expr_stmt|;
comment|// dir ECInfo before being set
name|assertNull
argument_list|(
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|getFileInfo
argument_list|(
name|src
argument_list|)
operator|.
name|getErasureCodingPolicy
argument_list|()
argument_list|)
expr_stmt|;
comment|// dir ECInfo after set
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|setErasureCodingPolicy
argument_list|(
name|src
argument_list|,
name|usingECPolicy
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|verifyErasureCodingInfo
argument_list|(
name|src
argument_list|,
name|usingECPolicy
argument_list|)
expr_stmt|;
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|ecDir
argument_list|,
literal|"child1"
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// verify for the files in ec dir
name|verifyErasureCodingInfo
argument_list|(
name|src
operator|+
literal|"/child1"
argument_list|,
name|usingECPolicy
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyErasureCodingInfo ( String src, ErasureCodingPolicy usingECPolicy)
specifier|private
name|void
name|verifyErasureCodingInfo
parameter_list|(
name|String
name|src
parameter_list|,
name|ErasureCodingPolicy
name|usingECPolicy
parameter_list|)
throws|throws
name|IOException
block|{
name|HdfsFileStatus
name|hdfsFileStatus
init|=
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|getFileInfo
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|ErasureCodingPolicy
name|actualPolicy
init|=
name|hdfsFileStatus
operator|.
name|getErasureCodingPolicy
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|actualPolicy
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Actually used ecPolicy should be equal with target ecPolicy"
argument_list|,
name|usingECPolicy
argument_list|,
name|actualPolicy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetInvalidPolicy ()
specifier|public
name|void
name|testSetInvalidPolicy
parameter_list|()
throws|throws
name|IOException
block|{
name|ECSchema
name|rsSchema
init|=
operator|new
name|ECSchema
argument_list|(
literal|"rs"
argument_list|,
literal|4
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|String
name|policyName
init|=
literal|"RS-4-2-128k"
decl_stmt|;
name|int
name|cellSize
init|=
literal|128
operator|*
literal|1024
decl_stmt|;
name|ErasureCodingPolicy
name|invalidPolicy
init|=
operator|new
name|ErasureCodingPolicy
argument_list|(
name|policyName
argument_list|,
name|rsSchema
argument_list|,
name|cellSize
argument_list|,
operator|(
name|byte
operator|)
operator|-
literal|1
argument_list|)
decl_stmt|;
name|String
name|src
init|=
literal|"/ecDir4-2"
decl_stmt|;
specifier|final
name|Path
name|ecDir
init|=
operator|new
name|Path
argument_list|(
name|src
argument_list|)
decl_stmt|;
try|try
block|{
name|fs
operator|.
name|mkdir
argument_list|(
name|ecDir
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|setErasureCodingPolicy
argument_list|(
name|src
argument_list|,
name|invalidPolicy
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"HadoopIllegalArgumentException should be thrown for"
operator|+
literal|"setting an invalid erasure coding policy"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"Policy 'RS-4-2-128k' does not match "
operator|+
literal|"any enabled erasure coding policies"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSetDefaultPolicy ()
specifier|public
name|void
name|testSetDefaultPolicy
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|src
init|=
literal|"/ecDir"
decl_stmt|;
specifier|final
name|Path
name|ecDir
init|=
operator|new
name|Path
argument_list|(
name|src
argument_list|)
decl_stmt|;
try|try
block|{
name|fs
operator|.
name|mkdir
argument_list|(
name|ecDir
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|setErasureCodingPolicy
argument_list|(
name|src
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|String
name|actualECPolicyName
init|=
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|getErasureCodingPolicy
argument_list|(
name|src
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|expectedECPolicyName
init|=
name|conf
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_EC_SYSTEM_DEFAULT_POLICY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_EC_SYSTEM_DEFAULT_POLICY_DEFAULT
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedECPolicyName
argument_list|,
name|actualECPolicyName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{     }
block|}
annotation|@
name|Test
DECL|method|testGetAllErasureCodingPolicies ()
specifier|public
name|void
name|testGetAllErasureCodingPolicies
parameter_list|()
throws|throws
name|Exception
block|{
name|Collection
argument_list|<
name|ErasureCodingPolicyInfo
argument_list|>
name|allECPolicies
init|=
name|fs
operator|.
name|getAllErasureCodingPolicies
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|ErasureCodingPolicy
argument_list|>
name|sysPolicies
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|SystemErasureCodingPolicies
operator|.
name|getPolicies
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ErasureCodingPolicyInfo
name|ecpi
range|:
name|allECPolicies
control|)
block|{
if|if
condition|(
name|ecpi
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
name|sysPolicies
operator|.
name|remove
argument_list|(
name|ecpi
operator|.
name|getPolicy
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"All system policies should be enabled"
argument_list|,
name|sysPolicies
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// Query after add a new policy
name|ECSchema
name|toAddSchema
init|=
operator|new
name|ECSchema
argument_list|(
literal|"rs"
argument_list|,
literal|5
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|ErasureCodingPolicy
name|newPolicy
init|=
operator|new
name|ErasureCodingPolicy
argument_list|(
name|toAddSchema
argument_list|,
literal|128
operator|*
literal|1024
argument_list|)
decl_stmt|;
name|ErasureCodingPolicy
index|[]
name|policyArray
init|=
operator|new
name|ErasureCodingPolicy
index|[]
block|{
name|newPolicy
block|}
decl_stmt|;
name|fs
operator|.
name|addErasureCodingPolicies
argument_list|(
name|policyArray
argument_list|)
expr_stmt|;
name|allECPolicies
operator|=
name|fs
operator|.
name|getAllErasureCodingPolicies
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should return new added policy"
argument_list|,
name|SystemErasureCodingPolicies
operator|.
name|getPolicies
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|,
name|allECPolicies
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetErasureCodingPolicyOnANonExistentFile ()
specifier|public
name|void
name|testGetErasureCodingPolicyOnANonExistentFile
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/ecDir"
argument_list|)
decl_stmt|;
try|try
block|{
name|fs
operator|.
name|getErasureCodingPolicy
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"FileNotFoundException should be thrown for a non-existent"
operator|+
literal|" file path"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"Path not found: "
operator|+
name|path
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|HdfsAdmin
name|dfsAdmin
init|=
operator|new
name|HdfsAdmin
argument_list|(
name|cluster
operator|.
name|getURI
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|dfsAdmin
operator|.
name|getErasureCodingPolicy
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"FileNotFoundException should be thrown for a non-existent"
operator|+
literal|" file path"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"Path not found: "
operator|+
name|path
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMultiplePoliciesCoExist ()
specifier|public
name|void
name|testMultiplePoliciesCoExist
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|ErasureCodingPolicy
argument_list|>
name|sysPolicies
init|=
name|SystemErasureCodingPolicies
operator|.
name|getPolicies
argument_list|()
decl_stmt|;
if|if
condition|(
name|sysPolicies
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
for|for
control|(
name|ErasureCodingPolicy
name|policy
range|:
name|sysPolicies
control|)
block|{
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/policy_"
operator|+
name|policy
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdir
argument_list|(
name|dir
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setErasureCodingPolicy
argument_list|(
name|dir
argument_list|,
name|policy
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"child"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|create
argument_list|(
name|file
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|policy
argument_list|,
name|fs
operator|.
name|getErasureCodingPolicy
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|policy
argument_list|,
name|fs
operator|.
name|getErasureCodingPolicy
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
name|INode
name|iNode
init|=
name|namesystem
operator|.
name|getFSDirectory
argument_list|()
operator|.
name|getINode
argument_list|(
name|file
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|policy
operator|.
name|getId
argument_list|()
argument_list|,
name|iNode
operator|.
name|asFile
argument_list|()
operator|.
name|getErasureCodingPolicyID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|INodeFile
operator|.
name|DEFAULT_REPL_FOR_STRIPED_BLOCKS
argument_list|,
name|iNode
operator|.
name|asFile
argument_list|()
operator|.
name|getFileReplication
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testPermissions ()
specifier|public
name|void
name|testPermissions
parameter_list|()
throws|throws
name|Exception
block|{
name|UserGroupInformation
name|user
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"ecuser"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"ecgroup"
block|}
argument_list|)
decl_stmt|;
name|FileSystem
name|userfs
init|=
name|user
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|FileSystem
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|FileSystem
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|HdfsAdmin
name|useradmin
init|=
name|user
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|HdfsAdmin
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|HdfsAdmin
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|HdfsAdmin
argument_list|(
name|userfs
operator|.
name|getUri
argument_list|()
argument_list|,
name|conf
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
comment|// Create dir and set an EC policy, create an EC file
name|Path
name|ecdir
init|=
operator|new
name|Path
argument_list|(
literal|"/ecdir"
argument_list|)
decl_stmt|;
name|Path
name|ecfile
init|=
operator|new
name|Path
argument_list|(
name|ecdir
argument_list|,
literal|"ecfile"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
expr_stmt|;
name|userfs
operator|.
name|mkdirs
argument_list|(
name|ecdir
argument_list|)
expr_stmt|;
specifier|final
name|String
name|ecPolicyName
init|=
name|ecPolicy
operator|.
name|getName
argument_list|()
decl_stmt|;
name|useradmin
operator|.
name|setErasureCodingPolicy
argument_list|(
name|ecdir
argument_list|,
name|ecPolicyName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Policy not present on dir"
argument_list|,
name|ecPolicyName
argument_list|,
name|useradmin
operator|.
name|getErasureCodingPolicy
argument_list|(
name|ecdir
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|userfs
operator|.
name|create
argument_list|(
name|ecfile
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Policy not present on file"
argument_list|,
name|ecPolicyName
argument_list|,
name|useradmin
operator|.
name|getErasureCodingPolicy
argument_list|(
name|ecfile
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Unset and re-set
name|useradmin
operator|.
name|unsetErasureCodingPolicy
argument_list|(
name|ecdir
argument_list|)
expr_stmt|;
name|useradmin
operator|.
name|setErasureCodingPolicy
argument_list|(
name|ecdir
argument_list|,
name|ecPolicyName
argument_list|)
expr_stmt|;
comment|// Change write permissions and make sure set and unset are denied
name|userfs
operator|.
name|setPermission
argument_list|(
name|ecdir
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0555
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|useradmin
operator|.
name|setErasureCodingPolicy
argument_list|(
name|ecdir
argument_list|,
name|ecPolicyName
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should not be able to setECPolicy without write permissions"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// pass
block|}
try|try
block|{
name|useradmin
operator|.
name|unsetErasureCodingPolicy
argument_list|(
name|ecdir
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should not be able to unsetECPolicy without write permissions"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// pass
block|}
comment|// Change the permissions again, check that set and unset work
name|userfs
operator|.
name|setPermission
argument_list|(
name|ecdir
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0640
argument_list|)
argument_list|)
expr_stmt|;
name|useradmin
operator|.
name|unsetErasureCodingPolicy
argument_list|(
name|ecdir
argument_list|)
expr_stmt|;
name|useradmin
operator|.
name|setErasureCodingPolicy
argument_list|(
name|ecdir
argument_list|,
name|ecPolicyName
argument_list|)
expr_stmt|;
comment|// Set, unset, and get with another user should be unauthorized
name|UserGroupInformation
name|nobody
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"nobody"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"nogroup"
block|}
argument_list|)
decl_stmt|;
name|HdfsAdmin
name|noadmin
init|=
name|nobody
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|HdfsAdmin
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|HdfsAdmin
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|HdfsAdmin
argument_list|(
name|userfs
operator|.
name|getUri
argument_list|()
argument_list|,
name|conf
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
try|try
block|{
name|noadmin
operator|.
name|setErasureCodingPolicy
argument_list|(
name|ecdir
argument_list|,
name|ecPolicyName
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should not be able to setECPolicy without write permissions"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// pass
block|}
try|try
block|{
name|noadmin
operator|.
name|unsetErasureCodingPolicy
argument_list|(
name|ecdir
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should not be able to unsetECPolicy without write permissions"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// pass
block|}
try|try
block|{
name|noadmin
operator|.
name|getErasureCodingPolicy
argument_list|(
name|ecdir
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should not be able to getECPolicy without write permissions"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// pass
block|}
comment|// superuser can do whatever it wants
name|userfs
operator|.
name|setPermission
argument_list|(
name|ecdir
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0000
argument_list|)
argument_list|)
expr_stmt|;
name|HdfsAdmin
name|superadmin
init|=
operator|new
name|HdfsAdmin
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|superadmin
operator|.
name|unsetErasureCodingPolicy
argument_list|(
name|ecdir
argument_list|)
expr_stmt|;
name|superadmin
operator|.
name|setErasureCodingPolicy
argument_list|(
name|ecdir
argument_list|,
name|ecPolicyName
argument_list|)
expr_stmt|;
name|superadmin
operator|.
name|getErasureCodingPolicy
argument_list|(
name|ecdir
argument_list|)
expr_stmt|;
comment|// Normal user no longer has access
try|try
block|{
name|useradmin
operator|.
name|getErasureCodingPolicy
argument_list|(
name|ecdir
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Normal user should not have access"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// pass
block|}
try|try
block|{
name|useradmin
operator|.
name|setErasureCodingPolicy
argument_list|(
name|ecfile
argument_list|,
name|ecPolicyName
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Normal user should not have access"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// pass
block|}
try|try
block|{
name|useradmin
operator|.
name|unsetErasureCodingPolicy
argument_list|(
name|ecfile
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Normal user should not have access"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// pass
block|}
comment|// Everyone has access to getting the list of EC policies
name|useradmin
operator|.
name|getErasureCodingPolicies
argument_list|()
expr_stmt|;
name|noadmin
operator|.
name|getErasureCodingPolicies
argument_list|()
expr_stmt|;
name|superadmin
operator|.
name|getErasureCodingPolicies
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test apply specific erasure coding policy on single file. Usually file's    * policy is inherited from its parent.    */
annotation|@
name|Test
DECL|method|testFileLevelECPolicy ()
specifier|public
name|void
name|testFileLevelECPolicy
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|dirPath
init|=
operator|new
name|Path
argument_list|(
literal|"/striped"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|filePath0
init|=
operator|new
name|Path
argument_list|(
name|dirPath
argument_list|,
literal|"file0"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|filePath1
init|=
operator|new
name|Path
argument_list|(
name|dirPath
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|dirPath
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setErasureCodingPolicy
argument_list|(
name|dirPath
argument_list|,
name|ecPolicy
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// null EC policy name value means inheriting parent directory's policy
name|fs
operator|.
name|createFile
argument_list|(
name|filePath0
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|ErasureCodingPolicy
name|ecPolicyOnFile
init|=
name|fs
operator|.
name|getErasureCodingPolicy
argument_list|(
name|filePath0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ecPolicy
argument_list|,
name|ecPolicyOnFile
argument_list|)
expr_stmt|;
comment|// Test illegal EC policy name
specifier|final
name|String
name|illegalPolicyName
init|=
literal|"RS-DEFAULT-1-2-64k"
decl_stmt|;
try|try
block|{
name|fs
operator|.
name|createFile
argument_list|(
name|filePath1
argument_list|)
operator|.
name|ecPolicyName
argument_list|(
name|illegalPolicyName
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"illegal erasure coding policy should not be found"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Policy '"
operator|+
name|illegalPolicyName
operator|+
literal|"' does not match any enabled erasure coding policies"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|fs
operator|.
name|delete
argument_list|(
name|dirPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Test create a file with a different EC policy than its parent directory
name|fs
operator|.
name|mkdirs
argument_list|(
name|dirPath
argument_list|)
expr_stmt|;
specifier|final
name|ErasureCodingPolicy
name|ecPolicyOnDir
init|=
name|SystemErasureCodingPolicies
operator|.
name|getByID
argument_list|(
name|SystemErasureCodingPolicies
operator|.
name|RS_3_2_POLICY_ID
argument_list|)
decl_stmt|;
name|ecPolicyOnFile
operator|=
name|SystemErasureCodingPolicies
operator|.
name|getByID
argument_list|(
name|SystemErasureCodingPolicies
operator|.
name|RS_6_3_POLICY_ID
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setErasureCodingPolicy
argument_list|(
name|dirPath
argument_list|,
name|ecPolicyOnDir
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|createFile
argument_list|(
name|filePath0
argument_list|)
operator|.
name|ecPolicyName
argument_list|(
name|ecPolicyOnFile
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ecPolicyOnFile
argument_list|,
name|fs
operator|.
name|getErasureCodingPolicy
argument_list|(
name|filePath0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ecPolicyOnDir
argument_list|,
name|fs
operator|.
name|getErasureCodingPolicy
argument_list|(
name|dirPath
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|dirPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Enforce file as replicated file without regarding its parent's EC policy.    */
annotation|@
name|Test
DECL|method|testEnforceAsReplicatedFile ()
specifier|public
name|void
name|testEnforceAsReplicatedFile
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|dirPath
init|=
operator|new
name|Path
argument_list|(
literal|"/striped"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|dirPath
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|dirPath
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setErasureCodingPolicy
argument_list|(
name|dirPath
argument_list|,
name|ecPolicy
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|ecPolicyName
init|=
literal|null
decl_stmt|;
specifier|final
name|Collection
argument_list|<
name|ErasureCodingPolicyInfo
argument_list|>
name|allPoliciesInfo
init|=
name|fs
operator|.
name|getAllErasureCodingPolicies
argument_list|()
decl_stmt|;
for|for
control|(
name|ErasureCodingPolicyInfo
name|info
range|:
name|allPoliciesInfo
control|)
block|{
if|if
condition|(
operator|!
name|ecPolicy
operator|.
name|equals
argument_list|(
name|info
operator|.
name|getPolicy
argument_list|()
argument_list|)
condition|)
block|{
name|ecPolicyName
operator|=
name|info
operator|.
name|getPolicy
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|assertNotNull
argument_list|(
name|ecPolicyName
argument_list|)
expr_stmt|;
name|fs
operator|.
name|createFile
argument_list|(
name|filePath
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ecPolicy
argument_list|,
name|fs
operator|.
name|getErasureCodingPolicy
argument_list|(
name|filePath
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|filePath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|createFile
argument_list|(
name|filePath
argument_list|)
operator|.
name|ecPolicyName
argument_list|(
name|ecPolicyName
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ecPolicyName
argument_list|,
name|fs
operator|.
name|getErasureCodingPolicy
argument_list|(
name|filePath
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|filePath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|fs
operator|.
name|createFile
argument_list|(
name|filePath
argument_list|)
operator|.
name|ecPolicyName
argument_list|(
name|ecPolicyName
argument_list|)
operator|.
name|replicate
argument_list|()
operator|.
name|build
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"shouldReplicate and ecPolicyName are exclusive "
operator|+
literal|"parameters. Set both is not allowed."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"SHOULD_REPLICATE flag and "
operator|+
literal|"ecPolicyName are exclusive parameters."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
specifier|final
name|DFSClient
name|dfsClient
init|=
name|fs
operator|.
name|getClient
argument_list|()
decl_stmt|;
name|dfsClient
operator|.
name|create
argument_list|(
name|filePath
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateFlag
operator|.
name|CREATE
argument_list|,
name|CreateFlag
operator|.
name|OVERWRITE
argument_list|,
name|CreateFlag
operator|.
name|SHOULD_REPLICATE
argument_list|)
argument_list|,
literal|false
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|1024
argument_list|,
literal|null
argument_list|,
literal|1024
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|ecPolicyName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"SHOULD_REPLICATE flag and ecPolicyName are exclusive "
operator|+
literal|"parameters. Set both is not allowed."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"SHOULD_REPLICATE flag and "
operator|+
literal|"ecPolicyName are exclusive parameters. Set both is not allowed!"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|fs
operator|.
name|createFile
argument_list|(
name|filePath
argument_list|)
operator|.
name|replicate
argument_list|()
operator|.
name|build
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|fs
operator|.
name|getErasureCodingPolicy
argument_list|(
name|filePath
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|dirPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetAllErasureCodingCodecs ()
specifier|public
name|void
name|testGetAllErasureCodingCodecs
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|allECCodecs
init|=
name|fs
operator|.
name|getAllErasureCodingCodecs
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"At least 3 system codecs should be enabled"
argument_list|,
name|allECCodecs
operator|.
name|size
argument_list|()
operator|>=
literal|3
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Erasure Coding Codecs: Codec [Coder List]"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|codec
range|:
name|allECCodecs
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|coders
init|=
name|allECCodecs
operator|.
name|get
argument_list|(
name|codec
argument_list|)
decl_stmt|;
if|if
condition|(
name|codec
operator|!=
literal|null
operator|&&
name|coders
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t"
operator|+
name|codec
operator|.
name|toUpperCase
argument_list|()
operator|+
literal|"["
operator|+
name|coders
operator|.
name|toUpperCase
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testAddErasureCodingPolicies ()
specifier|public
name|void
name|testAddErasureCodingPolicies
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test nonexistent codec name
name|ECSchema
name|toAddSchema
init|=
operator|new
name|ECSchema
argument_list|(
literal|"testcodec"
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|ErasureCodingPolicy
name|newPolicy
init|=
operator|new
name|ErasureCodingPolicy
argument_list|(
name|toAddSchema
argument_list|,
literal|128
operator|*
literal|1024
argument_list|)
decl_stmt|;
name|ErasureCodingPolicy
index|[]
name|policyArray
init|=
operator|new
name|ErasureCodingPolicy
index|[]
block|{
name|newPolicy
block|}
decl_stmt|;
name|AddErasureCodingPolicyResponse
index|[]
name|responses
init|=
name|fs
operator|.
name|addErasureCodingPolicies
argument_list|(
name|policyArray
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|responses
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|responses
index|[
literal|0
index|]
operator|.
name|isSucceed
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test too big cell size
name|toAddSchema
operator|=
operator|new
name|ECSchema
argument_list|(
literal|"rs"
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|newPolicy
operator|=
operator|new
name|ErasureCodingPolicy
argument_list|(
name|toAddSchema
argument_list|,
literal|128
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|policyArray
operator|=
operator|new
name|ErasureCodingPolicy
index|[]
block|{
name|newPolicy
block|}
expr_stmt|;
name|responses
operator|=
name|fs
operator|.
name|addErasureCodingPolicies
argument_list|(
name|policyArray
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|responses
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|responses
index|[
literal|0
index|]
operator|.
name|isSucceed
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test other invalid cell size
name|toAddSchema
operator|=
operator|new
name|ECSchema
argument_list|(
literal|"rs"
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|int
index|[]
name|cellSizes
init|=
block|{
literal|0
block|,
operator|-
literal|1
block|,
literal|1023
block|}
decl_stmt|;
for|for
control|(
name|int
name|cellSize
range|:
name|cellSizes
control|)
block|{
try|try
block|{
operator|new
name|ErasureCodingPolicy
argument_list|(
name|toAddSchema
argument_list|,
name|cellSize
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Invalid cell size should be detected."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"cellSize must be"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Test duplicate policy
name|ErasureCodingPolicy
name|policy0
init|=
name|SystemErasureCodingPolicies
operator|.
name|getPolicies
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|policyArray
operator|=
operator|new
name|ErasureCodingPolicy
index|[]
block|{
name|policy0
block|}
expr_stmt|;
name|responses
operator|=
name|fs
operator|.
name|addErasureCodingPolicies
argument_list|(
name|policyArray
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|responses
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|responses
index|[
literal|0
index|]
operator|.
name|isSucceed
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test add policy successfully
name|newPolicy
operator|=
operator|new
name|ErasureCodingPolicy
argument_list|(
name|toAddSchema
argument_list|,
literal|4
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|policyArray
operator|=
operator|new
name|ErasureCodingPolicy
index|[]
block|{
name|newPolicy
block|}
expr_stmt|;
name|responses
operator|=
name|fs
operator|.
name|addErasureCodingPolicies
argument_list|(
name|policyArray
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|responses
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|responses
index|[
literal|0
index|]
operator|.
name|isSucceed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SystemErasureCodingPolicies
operator|.
name|getPolicies
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|,
name|ErasureCodingPolicyManager
operator|.
name|getInstance
argument_list|()
operator|.
name|getPolicies
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// add erasure coding policy as a user without privilege
name|UserGroupInformation
name|fakeUGI
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"ProbablyNotARealUserName"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"ShangriLa"
block|}
argument_list|)
decl_stmt|;
specifier|final
name|ErasureCodingPolicy
name|ecPolicy
init|=
name|newPolicy
decl_stmt|;
name|fakeUGI
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|DistributedFileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
try|try
block|{
name|fs
operator|.
name|addErasureCodingPolicies
argument_list|(
operator|new
name|ErasureCodingPolicy
index|[]
block|{
name|ecPolicy
block|}
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|ace
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Access denied for user "
operator|+
literal|"ProbablyNotARealUserName. Superuser privilege is required"
argument_list|,
name|ace
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddECPoliciesExceeded ()
specifier|public
name|void
name|testAddECPoliciesExceeded
parameter_list|()
throws|throws
name|Exception
block|{
name|ECSchema
name|toAddSchema
init|=
operator|new
name|ECSchema
argument_list|(
literal|"rs"
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|int
name|allowNumPolicies
init|=
name|ErasureCodeConstants
operator|.
name|MAX_POLICY_ID
operator|-
name|ErasureCodeConstants
operator|.
name|USER_DEFINED_POLICY_START_ID
operator|+
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|allowNumPolicies
condition|;
name|i
operator|++
control|)
block|{
name|ErasureCodingPolicy
name|erasureCodingPolicy
init|=
operator|new
name|ErasureCodingPolicy
argument_list|(
name|toAddSchema
argument_list|,
literal|1024
operator|+
literal|1024
operator|*
name|i
argument_list|)
decl_stmt|;
name|ErasureCodingPolicy
index|[]
name|policyArray
init|=
operator|new
name|ErasureCodingPolicy
index|[]
block|{
name|erasureCodingPolicy
block|}
decl_stmt|;
name|AddErasureCodingPolicyResponse
index|[]
name|responses
init|=
name|fs
operator|.
name|addErasureCodingPolicies
argument_list|(
name|policyArray
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|responses
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|responses
index|[
literal|0
index|]
operator|.
name|isSucceed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|responses
index|[
literal|0
index|]
operator|.
name|getPolicy
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|ErasureCodeConstants
operator|.
name|USER_DEFINED_POLICY_START_ID
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|ErasureCodingPolicy
name|erasureCodingPolicy
init|=
operator|new
name|ErasureCodingPolicy
argument_list|(
name|toAddSchema
argument_list|,
literal|1024
operator|+
literal|1024
operator|*
name|allowNumPolicies
argument_list|)
decl_stmt|;
name|ErasureCodingPolicy
index|[]
name|policyArray
init|=
operator|new
name|ErasureCodingPolicy
index|[]
block|{
name|erasureCodingPolicy
block|}
decl_stmt|;
name|AddErasureCodingPolicyResponse
index|[]
name|responses
init|=
name|fs
operator|.
name|addErasureCodingPolicies
argument_list|(
name|policyArray
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|responses
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|responses
index|[
literal|0
index|]
operator|.
name|isSucceed
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReplicationPolicy ()
specifier|public
name|void
name|testReplicationPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|ErasureCodingPolicy
name|replicaPolicy
init|=
name|SystemErasureCodingPolicies
operator|.
name|getReplicationPolicy
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|rootDir
init|=
operator|new
name|Path
argument_list|(
literal|"/striped"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|replicaDir
init|=
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
literal|"replica"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|subReplicaDir
init|=
operator|new
name|Path
argument_list|(
name|replicaDir
argument_list|,
literal|"replica"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|replicaFile
init|=
operator|new
name|Path
argument_list|(
name|replicaDir
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|subReplicaFile
init|=
operator|new
name|Path
argument_list|(
name|subReplicaDir
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|rootDir
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setErasureCodingPolicy
argument_list|(
name|rootDir
argument_list|,
name|ecPolicy
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// 1. At first, child directory will inherit parent's EC policy
name|fs
operator|.
name|mkdirs
argument_list|(
name|replicaDir
argument_list|)
expr_stmt|;
name|fs
operator|.
name|createFile
argument_list|(
name|replicaFile
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|HdfsFileStatus
name|fileStatus
init|=
operator|(
name|HdfsFileStatus
operator|)
name|fs
operator|.
name|getFileStatus
argument_list|(
name|replicaFile
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"File should inherit EC policy."
argument_list|,
name|ecPolicy
argument_list|,
name|fileStatus
operator|.
name|getErasureCodingPolicy
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"File should be a EC file."
argument_list|,
literal|true
argument_list|,
name|fileStatus
operator|.
name|isErasureCoded
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"File should have the same EC policy as its ancestor."
argument_list|,
name|ecPolicy
argument_list|,
name|fs
operator|.
name|getErasureCodingPolicy
argument_list|(
name|replicaFile
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|replicaFile
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// 2. Set replication policy on child directory, then get back the policy
name|fs
operator|.
name|setErasureCodingPolicy
argument_list|(
name|replicaDir
argument_list|,
name|replicaPolicy
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ErasureCodingPolicy
name|temp
init|=
name|fs
operator|.
name|getErasureCodingPolicy
argument_list|(
name|replicaDir
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Directory should hide replication EC policy."
argument_list|,
literal|null
argument_list|,
name|temp
argument_list|)
expr_stmt|;
comment|// 3. New file will be replication file. Please be noted that replication
comment|//    policy only set on directory, not on file
name|fs
operator|.
name|createFile
argument_list|(
name|replicaFile
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Replication file should have default replication factor."
argument_list|,
name|fs
operator|.
name|getDefaultReplication
argument_list|()
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|replicaFile
argument_list|)
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setReplication
argument_list|(
name|replicaFile
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"File should have replication factor as expected."
argument_list|,
literal|2
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|replicaFile
argument_list|)
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
name|fileStatus
operator|=
operator|(
name|HdfsFileStatus
operator|)
name|fs
operator|.
name|getFileStatus
argument_list|(
name|replicaFile
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"File should not have EC policy."
argument_list|,
literal|null
argument_list|,
name|fileStatus
operator|.
name|getErasureCodingPolicy
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"File should not be a EC file."
argument_list|,
literal|false
argument_list|,
name|fileStatus
operator|.
name|isErasureCoded
argument_list|()
argument_list|)
expr_stmt|;
name|ErasureCodingPolicy
name|ecPolicyOnFile
init|=
name|fs
operator|.
name|getErasureCodingPolicy
argument_list|(
name|replicaFile
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"File should not have EC policy."
argument_list|,
literal|null
argument_list|,
name|ecPolicyOnFile
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|replicaFile
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// 4. New directory under replication directory, is also replication
comment|// directory
name|fs
operator|.
name|mkdirs
argument_list|(
name|subReplicaDir
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Directory should inherit hiding replication EC policy."
argument_list|,
literal|null
argument_list|,
name|fs
operator|.
name|getErasureCodingPolicy
argument_list|(
name|subReplicaDir
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|createFile
argument_list|(
name|subReplicaFile
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"File should have default replication factor."
argument_list|,
name|fs
operator|.
name|getDefaultReplication
argument_list|()
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|subReplicaFile
argument_list|)
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
name|fileStatus
operator|=
operator|(
name|HdfsFileStatus
operator|)
name|fs
operator|.
name|getFileStatus
argument_list|(
name|subReplicaFile
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"File should not have EC policy."
argument_list|,
literal|null
argument_list|,
name|fileStatus
operator|.
name|getErasureCodingPolicy
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"File should not be a EC file."
argument_list|,
literal|false
argument_list|,
name|fileStatus
operator|.
name|isErasureCoded
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"File should not have EC policy."
argument_list|,
literal|null
argument_list|,
name|fs
operator|.
name|getErasureCodingPolicy
argument_list|(
name|subReplicaFile
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|subReplicaFile
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// 5. Unset replication policy on directory, new file will be EC file
name|fs
operator|.
name|unsetErasureCodingPolicy
argument_list|(
name|replicaDir
argument_list|)
expr_stmt|;
name|fs
operator|.
name|createFile
argument_list|(
name|subReplicaFile
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|fileStatus
operator|=
operator|(
name|HdfsFileStatus
operator|)
name|fs
operator|.
name|getFileStatus
argument_list|(
name|subReplicaFile
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"File should inherit EC policy."
argument_list|,
name|ecPolicy
argument_list|,
name|fileStatus
operator|.
name|getErasureCodingPolicy
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"File should be a EC file."
argument_list|,
literal|true
argument_list|,
name|fileStatus
operator|.
name|isErasureCoded
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"File should have the same EC policy as its ancestor"
argument_list|,
name|ecPolicy
argument_list|,
name|fs
operator|.
name|getErasureCodingPolicy
argument_list|(
name|subReplicaFile
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|subReplicaFile
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDifferentErasureCodingPolicyCellSize ()
specifier|public
name|void
name|testDifferentErasureCodingPolicyCellSize
parameter_list|()
throws|throws
name|Exception
block|{
comment|// add policy with cell size 8K
name|ErasureCodingPolicy
name|newPolicy1
init|=
operator|new
name|ErasureCodingPolicy
argument_list|(
name|ErasureCodeConstants
operator|.
name|RS_3_2_SCHEMA
argument_list|,
literal|8
operator|*
literal|1024
argument_list|)
decl_stmt|;
name|ErasureCodingPolicy
index|[]
name|policyArray
init|=
operator|new
name|ErasureCodingPolicy
index|[]
block|{
name|newPolicy1
block|}
decl_stmt|;
name|AddErasureCodingPolicyResponse
index|[]
name|responses
init|=
name|fs
operator|.
name|addErasureCodingPolicies
argument_list|(
name|policyArray
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|responses
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|responses
index|[
literal|0
index|]
operator|.
name|isSucceed
argument_list|()
argument_list|)
expr_stmt|;
name|newPolicy1
operator|=
name|responses
index|[
literal|0
index|]
operator|.
name|getPolicy
argument_list|()
expr_stmt|;
comment|// add policy with cell size 4K
name|ErasureCodingPolicy
name|newPolicy2
init|=
operator|new
name|ErasureCodingPolicy
argument_list|(
name|ErasureCodeConstants
operator|.
name|RS_3_2_SCHEMA
argument_list|,
literal|4
operator|*
literal|1024
argument_list|)
decl_stmt|;
name|policyArray
operator|=
operator|new
name|ErasureCodingPolicy
index|[]
block|{
name|newPolicy2
block|}
expr_stmt|;
name|responses
operator|=
name|fs
operator|.
name|addErasureCodingPolicies
argument_list|(
name|policyArray
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|responses
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|responses
index|[
literal|0
index|]
operator|.
name|isSucceed
argument_list|()
argument_list|)
expr_stmt|;
name|newPolicy2
operator|=
name|responses
index|[
literal|0
index|]
operator|.
name|getPolicy
argument_list|()
expr_stmt|;
comment|// enable policies
name|fs
operator|.
name|enableErasureCodingPolicy
argument_list|(
name|newPolicy1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|enableErasureCodingPolicy
argument_list|(
name|newPolicy2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|stripedDir1
init|=
operator|new
name|Path
argument_list|(
literal|"/striped1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|stripedDir2
init|=
operator|new
name|Path
argument_list|(
literal|"/striped2"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
name|stripedDir1
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|file2
init|=
operator|new
name|Path
argument_list|(
name|stripedDir2
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|stripedDir1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setErasureCodingPolicy
argument_list|(
name|stripedDir1
argument_list|,
name|newPolicy1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|stripedDir2
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setErasureCodingPolicy
argument_list|(
name|stripedDir2
argument_list|,
name|newPolicy2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|int
name|fileLength
init|=
name|BLOCK_SIZE
operator|*
name|newPolicy1
operator|.
name|getNumDataUnits
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|bytes
init|=
name|StripedFileTestUtil
operator|.
name|generateBytes
argument_list|(
name|fileLength
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|writeFile
argument_list|(
name|fs
argument_list|,
name|file1
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|writeFile
argument_list|(
name|fs
argument_list|,
name|file2
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|stripedDir1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|stripedDir2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

