begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocalFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
operator|.
name|DataNodeDiskChecker
import|;
end_import

begin_class
DECL|class|TestDataDirs
specifier|public
class|class
name|TestDataDirs
block|{
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testGetDataDirsFromURIs ()
specifier|public
name|void
name|testGetDataDirsFromURIs
parameter_list|()
throws|throws
name|Throwable
block|{
name|DataNodeDiskChecker
name|diskChecker
init|=
name|mock
argument_list|(
name|DataNodeDiskChecker
operator|.
name|class
argument_list|)
decl_stmt|;
name|doThrow
argument_list|(
operator|new
name|IOException
argument_list|()
argument_list|)
operator|.
name|doThrow
argument_list|(
operator|new
name|IOException
argument_list|()
argument_list|)
operator|.
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|diskChecker
argument_list|)
operator|.
name|checkDir
argument_list|(
name|any
argument_list|(
name|LocalFileSystem
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|LocalFileSystem
name|fs
init|=
name|mock
argument_list|(
name|LocalFileSystem
operator|.
name|class
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|URI
argument_list|>
name|uris
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|URI
argument_list|(
literal|"file:/p1/"
argument_list|)
argument_list|,
operator|new
name|URI
argument_list|(
literal|"file:/p2/"
argument_list|)
argument_list|,
operator|new
name|URI
argument_list|(
literal|"file:/p3/"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|File
argument_list|>
name|dirs
init|=
name|DataNode
operator|.
name|getDataDirsFromURIs
argument_list|(
name|uris
argument_list|,
name|fs
argument_list|,
name|diskChecker
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"number of valid data dirs"
argument_list|,
literal|1
argument_list|,
name|dirs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|validDir
init|=
name|dirs
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"p3 should be valid"
argument_list|,
operator|new
name|File
argument_list|(
literal|"/p3"
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|,
name|validDir
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

