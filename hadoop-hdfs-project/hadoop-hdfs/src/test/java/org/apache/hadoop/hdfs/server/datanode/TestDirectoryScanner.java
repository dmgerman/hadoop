begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|Is
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|ClosedChannelException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|AutoCloseableLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|FsDatasetSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|FsDatasetSpi
operator|.
name|FsVolumeReferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|FsVolumeReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|FsVolumeSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|impl
operator|.
name|FsDatasetTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|impl
operator|.
name|LazyPersistTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_comment
comment|/**  * Tests {@link DirectoryScanner} handling of differences  * between blocks on the disk and block in memory.  */
end_comment

begin_class
DECL|class|TestDirectoryScanner
specifier|public
class|class
name|TestDirectoryScanner
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestDirectoryScanner
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|CONF
specifier|private
specifier|static
specifier|final
name|Configuration
name|CONF
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
DECL|field|DEFAULT_GEN_STAMP
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_GEN_STAMP
init|=
literal|9999
decl_stmt|;
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|bpid
specifier|private
name|String
name|bpid
decl_stmt|;
DECL|field|client
specifier|private
name|DFSClient
name|client
decl_stmt|;
DECL|field|fds
specifier|private
name|FsDatasetSpi
argument_list|<
name|?
extends|extends
name|FsVolumeSpi
argument_list|>
name|fds
init|=
literal|null
decl_stmt|;
DECL|field|scanner
specifier|private
name|DirectoryScanner
name|scanner
init|=
literal|null
decl_stmt|;
DECL|field|rand
specifier|private
specifier|final
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|field|r
specifier|private
specifier|final
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|field|BLOCK_LENGTH
specifier|private
specifier|static
specifier|final
name|int
name|BLOCK_LENGTH
init|=
literal|100
decl_stmt|;
static|static
block|{
name|CONF
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|BLOCK_LENGTH
argument_list|)
expr_stmt|;
name|CONF
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BYTES_PER_CHECKSUM_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|CONF
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|CONF
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_MAX_LOCKED_MEMORY_KEY
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|LazyPersistTestCase
operator|.
name|initCacheManipulator
argument_list|()
expr_stmt|;
block|}
comment|/** create a file with a length of<code>fileLen</code> */
DECL|method|createFile (String fileNamePrefix, long fileLen, boolean isLazyPersist)
specifier|private
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|createFile
parameter_list|(
name|String
name|fileNamePrefix
parameter_list|,
name|long
name|fileLen
parameter_list|,
name|boolean
name|isLazyPersist
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|fileNamePrefix
operator|+
literal|".dat"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|filePath
argument_list|,
name|isLazyPersist
argument_list|,
literal|1024
argument_list|,
name|fileLen
argument_list|,
name|BLOCK_LENGTH
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
name|r
operator|.
name|nextLong
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|client
operator|.
name|getLocatedBlocks
argument_list|(
name|filePath
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|,
name|fileLen
argument_list|)
operator|.
name|getLocatedBlocks
argument_list|()
return|;
block|}
comment|/** Truncate a block file */
DECL|method|truncateBlockFile ()
specifier|private
name|long
name|truncateBlockFile
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|AutoCloseableLock
name|lock
init|=
name|fds
operator|.
name|acquireDatasetLock
argument_list|()
init|)
block|{
for|for
control|(
name|ReplicaInfo
name|b
range|:
name|FsDatasetTestUtil
operator|.
name|getReplicas
argument_list|(
name|fds
argument_list|,
name|bpid
argument_list|)
control|)
block|{
name|File
name|f
init|=
name|b
operator|.
name|getBlockFile
argument_list|()
decl_stmt|;
name|File
name|mf
init|=
name|b
operator|.
name|getMetaFile
argument_list|()
decl_stmt|;
comment|// Truncate a block file that has a corresponding metadata file
if|if
condition|(
name|f
operator|.
name|exists
argument_list|()
operator|&&
name|f
operator|.
name|length
argument_list|()
operator|!=
literal|0
operator|&&
name|mf
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileOutputStream
name|s
init|=
literal|null
decl_stmt|;
name|FileChannel
name|channel
init|=
literal|null
decl_stmt|;
try|try
block|{
name|s
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|channel
operator|=
name|s
operator|.
name|getChannel
argument_list|()
expr_stmt|;
name|channel
operator|.
name|truncate
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Truncated block file "
operator|+
name|f
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|b
operator|.
name|getBlockId
argument_list|()
return|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|channel
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
literal|0
return|;
block|}
comment|/** Delete a block file */
DECL|method|deleteBlockFile ()
specifier|private
name|long
name|deleteBlockFile
parameter_list|()
block|{
try|try
init|(
name|AutoCloseableLock
name|lock
init|=
name|fds
operator|.
name|acquireDatasetLock
argument_list|()
init|)
block|{
for|for
control|(
name|ReplicaInfo
name|b
range|:
name|FsDatasetTestUtil
operator|.
name|getReplicas
argument_list|(
name|fds
argument_list|,
name|bpid
argument_list|)
control|)
block|{
name|File
name|f
init|=
name|b
operator|.
name|getBlockFile
argument_list|()
decl_stmt|;
name|File
name|mf
init|=
name|b
operator|.
name|getMetaFile
argument_list|()
decl_stmt|;
comment|// Delete a block file that has corresponding metadata file
if|if
condition|(
name|f
operator|.
name|exists
argument_list|()
operator|&&
name|mf
operator|.
name|exists
argument_list|()
operator|&&
name|f
operator|.
name|delete
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Deleting block file "
operator|+
name|f
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|b
operator|.
name|getBlockId
argument_list|()
return|;
block|}
block|}
block|}
return|return
literal|0
return|;
block|}
comment|/** Delete block meta file */
DECL|method|deleteMetaFile ()
specifier|private
name|long
name|deleteMetaFile
parameter_list|()
block|{
try|try
init|(
name|AutoCloseableLock
name|lock
init|=
name|fds
operator|.
name|acquireDatasetLock
argument_list|()
init|)
block|{
for|for
control|(
name|ReplicaInfo
name|b
range|:
name|FsDatasetTestUtil
operator|.
name|getReplicas
argument_list|(
name|fds
argument_list|,
name|bpid
argument_list|)
control|)
block|{
name|File
name|file
init|=
name|b
operator|.
name|getMetaFile
argument_list|()
decl_stmt|;
comment|// Delete a metadata file
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
operator|&&
name|file
operator|.
name|delete
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Deleting metadata file "
operator|+
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|b
operator|.
name|getBlockId
argument_list|()
return|;
block|}
block|}
block|}
return|return
literal|0
return|;
block|}
comment|/**    * Duplicate the given block on all volumes.    * @param blockId    * @throws IOException    */
DECL|method|duplicateBlock (long blockId)
specifier|private
name|void
name|duplicateBlock
parameter_list|(
name|long
name|blockId
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|AutoCloseableLock
name|lock
init|=
name|fds
operator|.
name|acquireDatasetLock
argument_list|()
init|)
block|{
name|ReplicaInfo
name|b
init|=
name|FsDatasetTestUtil
operator|.
name|fetchReplicaInfo
argument_list|(
name|fds
argument_list|,
name|bpid
argument_list|,
name|blockId
argument_list|)
decl_stmt|;
try|try
init|(
name|FsDatasetSpi
operator|.
name|FsVolumeReferences
name|volumes
init|=
name|fds
operator|.
name|getFsVolumeReferences
argument_list|()
init|)
block|{
for|for
control|(
name|FsVolumeSpi
name|v
range|:
name|volumes
control|)
block|{
if|if
condition|(
name|v
operator|.
name|getStorageID
argument_list|()
operator|.
name|equals
argument_list|(
name|b
operator|.
name|getVolume
argument_list|()
operator|.
name|getStorageID
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// Volume without a copy of the block. Make a copy now.
name|File
name|sourceBlock
init|=
name|b
operator|.
name|getBlockFile
argument_list|()
decl_stmt|;
name|File
name|sourceMeta
init|=
name|b
operator|.
name|getMetaFile
argument_list|()
decl_stmt|;
name|String
name|sourceRoot
init|=
name|b
operator|.
name|getVolume
argument_list|()
operator|.
name|getBasePath
argument_list|()
decl_stmt|;
name|String
name|destRoot
init|=
name|v
operator|.
name|getBasePath
argument_list|()
decl_stmt|;
name|String
name|relativeBlockPath
init|=
operator|new
name|File
argument_list|(
name|sourceRoot
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|relativize
argument_list|(
name|sourceBlock
operator|.
name|toURI
argument_list|()
argument_list|)
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|relativeMetaPath
init|=
operator|new
name|File
argument_list|(
name|sourceRoot
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|relativize
argument_list|(
name|sourceMeta
operator|.
name|toURI
argument_list|()
argument_list|)
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|File
name|destBlock
init|=
operator|new
name|File
argument_list|(
name|destRoot
argument_list|,
name|relativeBlockPath
argument_list|)
decl_stmt|;
name|File
name|destMeta
init|=
operator|new
name|File
argument_list|(
name|destRoot
argument_list|,
name|relativeMetaPath
argument_list|)
decl_stmt|;
name|destBlock
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|FileUtils
operator|.
name|copyFile
argument_list|(
name|sourceBlock
argument_list|,
name|destBlock
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|copyFile
argument_list|(
name|sourceMeta
argument_list|,
name|destMeta
argument_list|)
expr_stmt|;
if|if
condition|(
name|destBlock
operator|.
name|exists
argument_list|()
operator|&&
name|destMeta
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Copied "
operator|+
name|sourceBlock
operator|+
literal|" ==> "
operator|+
name|destBlock
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Copied "
operator|+
name|sourceMeta
operator|+
literal|" ==> "
operator|+
name|destMeta
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|/** Get a random blockId that is not used already */
DECL|method|getFreeBlockId ()
specifier|private
name|long
name|getFreeBlockId
parameter_list|()
block|{
name|long
name|id
init|=
name|rand
operator|.
name|nextLong
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|id
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
if|if
condition|(
name|FsDatasetTestUtil
operator|.
name|fetchReplicaInfo
argument_list|(
name|fds
argument_list|,
name|bpid
argument_list|,
name|id
argument_list|)
operator|==
literal|null
condition|)
block|{
break|break;
block|}
block|}
return|return
name|id
return|;
block|}
DECL|method|getBlockFile (long id)
specifier|private
name|String
name|getBlockFile
parameter_list|(
name|long
name|id
parameter_list|)
block|{
return|return
name|Block
operator|.
name|BLOCK_FILE_PREFIX
operator|+
name|id
return|;
block|}
DECL|method|getMetaFile (long id)
specifier|private
name|String
name|getMetaFile
parameter_list|(
name|long
name|id
parameter_list|)
block|{
return|return
name|Block
operator|.
name|BLOCK_FILE_PREFIX
operator|+
name|id
operator|+
literal|"_"
operator|+
name|DEFAULT_GEN_STAMP
operator|+
name|Block
operator|.
name|METADATA_EXTENSION
return|;
block|}
comment|/** Create a block file in a random volume*/
DECL|method|createBlockFile ()
specifier|private
name|long
name|createBlockFile
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|id
init|=
name|getFreeBlockId
argument_list|()
decl_stmt|;
try|try
init|(
name|FsDatasetSpi
operator|.
name|FsVolumeReferences
name|volumes
init|=
name|fds
operator|.
name|getFsVolumeReferences
argument_list|()
init|)
block|{
name|int
name|numVolumes
init|=
name|volumes
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|index
init|=
name|rand
operator|.
name|nextInt
argument_list|(
name|numVolumes
operator|-
literal|1
argument_list|)
decl_stmt|;
name|File
name|finalizedDir
init|=
name|volumes
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|getFinalizedDir
argument_list|(
name|bpid
argument_list|)
decl_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|finalizedDir
argument_list|,
name|getBlockFile
argument_list|(
name|id
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|createNewFile
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Created block file "
operator|+
name|file
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|id
return|;
block|}
comment|/** Create a metafile in a random volume*/
DECL|method|createMetaFile ()
specifier|private
name|long
name|createMetaFile
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|id
init|=
name|getFreeBlockId
argument_list|()
decl_stmt|;
try|try
init|(
name|FsDatasetSpi
operator|.
name|FsVolumeReferences
name|refs
init|=
name|fds
operator|.
name|getFsVolumeReferences
argument_list|()
init|)
block|{
name|int
name|numVolumes
init|=
name|refs
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|index
init|=
name|rand
operator|.
name|nextInt
argument_list|(
name|numVolumes
operator|-
literal|1
argument_list|)
decl_stmt|;
name|File
name|finalizedDir
init|=
name|refs
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|getFinalizedDir
argument_list|(
name|bpid
argument_list|)
decl_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|finalizedDir
argument_list|,
name|getMetaFile
argument_list|(
name|id
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|createNewFile
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Created metafile "
operator|+
name|file
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|id
return|;
block|}
comment|/** Create block file and corresponding metafile in a rondom volume */
DECL|method|createBlockMetaFile ()
specifier|private
name|long
name|createBlockMetaFile
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|id
init|=
name|getFreeBlockId
argument_list|()
decl_stmt|;
try|try
init|(
name|FsDatasetSpi
operator|.
name|FsVolumeReferences
name|refs
init|=
name|fds
operator|.
name|getFsVolumeReferences
argument_list|()
init|)
block|{
name|int
name|numVolumes
init|=
name|refs
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|index
init|=
name|rand
operator|.
name|nextInt
argument_list|(
name|numVolumes
operator|-
literal|1
argument_list|)
decl_stmt|;
name|File
name|finalizedDir
init|=
name|refs
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|getFinalizedDir
argument_list|(
name|bpid
argument_list|)
decl_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|finalizedDir
argument_list|,
name|getBlockFile
argument_list|(
name|id
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|createNewFile
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Created block file "
operator|+
name|file
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create files with same prefix as block file but extension names
comment|// such that during sorting, these files appear around meta file
comment|// to test how DirectoryScanner handles extraneous files
name|String
name|name1
init|=
name|file
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|".l"
decl_stmt|;
name|String
name|name2
init|=
name|file
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|".n"
decl_stmt|;
name|file
operator|=
operator|new
name|File
argument_list|(
name|name1
argument_list|)
expr_stmt|;
if|if
condition|(
name|file
operator|.
name|createNewFile
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Created extraneous file "
operator|+
name|name1
argument_list|)
expr_stmt|;
block|}
name|file
operator|=
operator|new
name|File
argument_list|(
name|name2
argument_list|)
expr_stmt|;
if|if
condition|(
name|file
operator|.
name|createNewFile
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Created extraneous file "
operator|+
name|name2
argument_list|)
expr_stmt|;
block|}
name|file
operator|=
operator|new
name|File
argument_list|(
name|finalizedDir
argument_list|,
name|getMetaFile
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|file
operator|.
name|createNewFile
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Created metafile "
operator|+
name|file
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|id
return|;
block|}
DECL|method|scan (long totalBlocks, int diffsize, long missingMetaFile, long missingBlockFile, long missingMemoryBlocks, long mismatchBlocks)
specifier|private
name|void
name|scan
parameter_list|(
name|long
name|totalBlocks
parameter_list|,
name|int
name|diffsize
parameter_list|,
name|long
name|missingMetaFile
parameter_list|,
name|long
name|missingBlockFile
parameter_list|,
name|long
name|missingMemoryBlocks
parameter_list|,
name|long
name|mismatchBlocks
parameter_list|)
throws|throws
name|IOException
block|{
name|scan
argument_list|(
name|totalBlocks
argument_list|,
name|diffsize
argument_list|,
name|missingMetaFile
argument_list|,
name|missingBlockFile
argument_list|,
name|missingMemoryBlocks
argument_list|,
name|mismatchBlocks
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|scan (long totalBlocks, int diffsize, long missingMetaFile, long missingBlockFile, long missingMemoryBlocks, long mismatchBlocks, long duplicateBlocks)
specifier|private
name|void
name|scan
parameter_list|(
name|long
name|totalBlocks
parameter_list|,
name|int
name|diffsize
parameter_list|,
name|long
name|missingMetaFile
parameter_list|,
name|long
name|missingBlockFile
parameter_list|,
name|long
name|missingMemoryBlocks
parameter_list|,
name|long
name|mismatchBlocks
parameter_list|,
name|long
name|duplicateBlocks
parameter_list|)
throws|throws
name|IOException
block|{
name|scanner
operator|.
name|reconcile
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|scanner
operator|.
name|diffs
operator|.
name|containsKey
argument_list|(
name|bpid
argument_list|)
argument_list|)
expr_stmt|;
name|LinkedList
argument_list|<
name|DirectoryScanner
operator|.
name|ScanInfo
argument_list|>
name|diff
init|=
name|scanner
operator|.
name|diffs
operator|.
name|get
argument_list|(
name|bpid
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|scanner
operator|.
name|stats
operator|.
name|containsKey
argument_list|(
name|bpid
argument_list|)
argument_list|)
expr_stmt|;
name|DirectoryScanner
operator|.
name|Stats
name|stats
init|=
name|scanner
operator|.
name|stats
operator|.
name|get
argument_list|(
name|bpid
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|diffsize
argument_list|,
name|diff
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|totalBlocks
argument_list|,
name|stats
operator|.
name|totalBlocks
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|missingMetaFile
argument_list|,
name|stats
operator|.
name|missingMetaFile
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|missingBlockFile
argument_list|,
name|stats
operator|.
name|missingBlockFile
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|missingMemoryBlocks
argument_list|,
name|stats
operator|.
name|missingMemoryBlocks
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mismatchBlocks
argument_list|,
name|stats
operator|.
name|mismatchBlocks
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|duplicateBlocks
argument_list|,
name|stats
operator|.
name|duplicateBlocks
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testRetainBlockOnPersistentStorage ()
specifier|public
name|void
name|testRetainBlockOnPersistentStorage
parameter_list|()
throws|throws
name|Exception
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|CONF
argument_list|)
operator|.
name|storageTypes
argument_list|(
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|RAM_DISK
block|,
name|StorageType
operator|.
name|DEFAULT
block|}
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|DataNode
name|dataNode
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|bpid
operator|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockPoolId
argument_list|()
expr_stmt|;
name|fds
operator|=
name|DataNodeTestUtils
operator|.
name|getFSDataset
argument_list|(
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getClient
argument_list|()
expr_stmt|;
name|scanner
operator|=
operator|new
name|DirectoryScanner
argument_list|(
name|dataNode
argument_list|,
name|fds
argument_list|,
name|CONF
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|setRetainDiffs
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|FsDatasetTestUtil
operator|.
name|stopLazyWriter
argument_list|(
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add a file with 1 block
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|blocks
init|=
name|createFile
argument_list|(
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
argument_list|,
name|BLOCK_LENGTH
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Ensure no difference between volumeMap and disk.
name|scan
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Make a copy of the block on RAM_DISK and ensure that it is
comment|// picked up by the scanner.
name|duplicateBlock
argument_list|(
name|blocks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBlock
argument_list|()
operator|.
name|getBlockId
argument_list|()
argument_list|)
expr_stmt|;
name|scan
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|verifyStorageType
argument_list|(
name|blocks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBlock
argument_list|()
operator|.
name|getBlockId
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|scan
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|scanner
operator|!=
literal|null
condition|)
block|{
name|scanner
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|scanner
operator|=
literal|null
expr_stmt|;
block|}
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testDeleteBlockOnTransientStorage ()
specifier|public
name|void
name|testDeleteBlockOnTransientStorage
parameter_list|()
throws|throws
name|Exception
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|CONF
argument_list|)
operator|.
name|storageTypes
argument_list|(
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|RAM_DISK
block|,
name|StorageType
operator|.
name|DEFAULT
block|}
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|bpid
operator|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockPoolId
argument_list|()
expr_stmt|;
name|DataNode
name|dataNode
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|fds
operator|=
name|DataNodeTestUtils
operator|.
name|getFSDataset
argument_list|(
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getClient
argument_list|()
expr_stmt|;
name|scanner
operator|=
operator|new
name|DirectoryScanner
argument_list|(
name|dataNode
argument_list|,
name|fds
argument_list|,
name|CONF
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|setRetainDiffs
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|FsDatasetTestUtil
operator|.
name|stopLazyWriter
argument_list|(
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create a file file on RAM_DISK
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|blocks
init|=
name|createFile
argument_list|(
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
argument_list|,
name|BLOCK_LENGTH
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// Ensure no difference between volumeMap and disk.
name|scan
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Make a copy of the block on DEFAULT storage and ensure that it is
comment|// picked up by the scanner.
name|duplicateBlock
argument_list|(
name|blocks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBlock
argument_list|()
operator|.
name|getBlockId
argument_list|()
argument_list|)
expr_stmt|;
name|scan
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Ensure that the copy on RAM_DISK was deleted.
name|verifyStorageType
argument_list|(
name|blocks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBlock
argument_list|()
operator|.
name|getBlockId
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|scan
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|scanner
operator|!=
literal|null
condition|)
block|{
name|scanner
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|scanner
operator|=
literal|null
expr_stmt|;
block|}
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|600000
argument_list|)
DECL|method|testDirectoryScanner ()
specifier|public
name|void
name|testDirectoryScanner
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Run the test with and without parallel scanning
for|for
control|(
name|int
name|parallelism
init|=
literal|1
init|;
name|parallelism
operator|<
literal|3
condition|;
name|parallelism
operator|++
control|)
block|{
name|runTest
argument_list|(
name|parallelism
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|runTest (int parallelism)
specifier|public
name|void
name|runTest
parameter_list|(
name|int
name|parallelism
parameter_list|)
throws|throws
name|Exception
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|CONF
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|bpid
operator|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockPoolId
argument_list|()
expr_stmt|;
name|fds
operator|=
name|DataNodeTestUtils
operator|.
name|getFSDataset
argument_list|(
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getClient
argument_list|()
expr_stmt|;
name|CONF
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DIRECTORYSCAN_THREADS_KEY
argument_list|,
name|parallelism
argument_list|)
expr_stmt|;
name|DataNode
name|dataNode
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|scanner
operator|=
operator|new
name|DirectoryScanner
argument_list|(
name|dataNode
argument_list|,
name|fds
argument_list|,
name|CONF
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|setRetainDiffs
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Add files with 100 blocks
name|createFile
argument_list|(
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
argument_list|,
name|BLOCK_LENGTH
operator|*
literal|100
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|long
name|totalBlocks
init|=
literal|100
decl_stmt|;
comment|// Test1: No difference between volumeMap and disk
name|scan
argument_list|(
literal|100
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Test2: block metafile is missing
name|long
name|blockId
init|=
name|deleteMetaFile
argument_list|()
decl_stmt|;
name|scan
argument_list|(
name|totalBlocks
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|verifyGenStamp
argument_list|(
name|blockId
argument_list|,
name|HdfsConstants
operator|.
name|GRANDFATHER_GENERATION_STAMP
argument_list|)
expr_stmt|;
name|scan
argument_list|(
name|totalBlocks
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Test3: block file is missing
name|blockId
operator|=
name|deleteBlockFile
argument_list|()
expr_stmt|;
name|scan
argument_list|(
name|totalBlocks
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|totalBlocks
operator|--
expr_stmt|;
name|verifyDeletion
argument_list|(
name|blockId
argument_list|)
expr_stmt|;
name|scan
argument_list|(
name|totalBlocks
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Test4: A block file exists for which there is no metafile and
comment|// a block in memory
name|blockId
operator|=
name|createBlockFile
argument_list|()
expr_stmt|;
name|totalBlocks
operator|++
expr_stmt|;
name|scan
argument_list|(
name|totalBlocks
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|verifyAddition
argument_list|(
name|blockId
argument_list|,
name|HdfsConstants
operator|.
name|GRANDFATHER_GENERATION_STAMP
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|scan
argument_list|(
name|totalBlocks
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Test5: A metafile exists for which there is no block file and
comment|// a block in memory
name|blockId
operator|=
name|createMetaFile
argument_list|()
expr_stmt|;
name|scan
argument_list|(
name|totalBlocks
operator|+
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|File
name|metafile
init|=
operator|new
name|File
argument_list|(
name|getMetaFile
argument_list|(
name|blockId
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
operator|!
name|metafile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|scan
argument_list|(
name|totalBlocks
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Test6: A block file and metafile exists for which there is no block in
comment|// memory
name|blockId
operator|=
name|createBlockMetaFile
argument_list|()
expr_stmt|;
name|totalBlocks
operator|++
expr_stmt|;
name|scan
argument_list|(
name|totalBlocks
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|verifyAddition
argument_list|(
name|blockId
argument_list|,
name|DEFAULT_GEN_STAMP
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|scan
argument_list|(
name|totalBlocks
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Test7: Delete bunch of metafiles
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|blockId
operator|=
name|deleteMetaFile
argument_list|()
expr_stmt|;
block|}
name|scan
argument_list|(
name|totalBlocks
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|scan
argument_list|(
name|totalBlocks
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Test8: Delete bunch of block files
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|blockId
operator|=
name|deleteBlockFile
argument_list|()
expr_stmt|;
block|}
name|scan
argument_list|(
name|totalBlocks
argument_list|,
literal|10
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|totalBlocks
operator|-=
literal|10
expr_stmt|;
name|scan
argument_list|(
name|totalBlocks
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Test9: create a bunch of blocks files
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|blockId
operator|=
name|createBlockFile
argument_list|()
expr_stmt|;
block|}
name|totalBlocks
operator|+=
literal|10
expr_stmt|;
name|scan
argument_list|(
name|totalBlocks
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|scan
argument_list|(
name|totalBlocks
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Test10: create a bunch of metafiles
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|blockId
operator|=
name|createMetaFile
argument_list|()
expr_stmt|;
block|}
name|scan
argument_list|(
name|totalBlocks
operator|+
literal|10
argument_list|,
literal|10
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|scan
argument_list|(
name|totalBlocks
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Test11: create a bunch block files and meta files
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|blockId
operator|=
name|createBlockMetaFile
argument_list|()
expr_stmt|;
block|}
name|totalBlocks
operator|+=
literal|10
expr_stmt|;
name|scan
argument_list|(
name|totalBlocks
argument_list|,
literal|10
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|scan
argument_list|(
name|totalBlocks
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Test12: truncate block files to test block length mismatch
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|truncateBlockFile
argument_list|()
expr_stmt|;
block|}
name|scan
argument_list|(
name|totalBlocks
argument_list|,
literal|10
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|scan
argument_list|(
name|totalBlocks
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Test13: all the conditions combined
name|createMetaFile
argument_list|()
expr_stmt|;
name|createBlockFile
argument_list|()
expr_stmt|;
name|createBlockMetaFile
argument_list|()
expr_stmt|;
name|deleteMetaFile
argument_list|()
expr_stmt|;
name|deleteBlockFile
argument_list|()
expr_stmt|;
name|truncateBlockFile
argument_list|()
expr_stmt|;
name|scan
argument_list|(
name|totalBlocks
operator|+
literal|3
argument_list|,
literal|6
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|scan
argument_list|(
name|totalBlocks
operator|+
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Test14: make sure no throttling is happening
name|assertTrue
argument_list|(
literal|"Throttle appears to be engaged"
argument_list|,
name|scanner
operator|.
name|timeWaitingMs
operator|.
name|get
argument_list|()
operator|<
literal|10L
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Report complier threads logged no execution time"
argument_list|,
name|scanner
operator|.
name|timeRunningMs
operator|.
name|get
argument_list|()
operator|>
literal|0L
argument_list|)
expr_stmt|;
comment|// Test15: validate clean shutdown of DirectoryScanner
comment|////assertTrue(scanner.getRunStatus()); //assumes "real" FSDataset, not sim
name|scanner
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|scanner
operator|.
name|getRunStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|scanner
operator|!=
literal|null
condition|)
block|{
name|scanner
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|scanner
operator|=
literal|null
expr_stmt|;
block|}
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test that the timeslice throttle limits the report compiler thread's    * execution time correctly.  We test by scanning a large block pool and    * comparing the time spent waiting to the time spent running.    *    * The block pool has to be large, or the ratio will be off.  The throttle    * allows the report compiler thread to finish its current cycle when    * blocking it, so the ratio will always be a little lower than expected.    * The smaller the block pool, the further off the ratio will be.    *    * @throws Exception thrown on unexpected failure    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|600000
argument_list|)
DECL|method|testThrottling ()
specifier|public
name|void
name|testThrottling
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
name|CONF
argument_list|)
decl_stmt|;
comment|// We need lots of blocks so the report compiler threads have enough to
comment|// keep them busy while we watch them.
name|int
name|blocks
init|=
literal|20000
decl_stmt|;
name|int
name|maxRetries
init|=
literal|3
decl_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|bpid
operator|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockPoolId
argument_list|()
expr_stmt|;
name|fds
operator|=
name|DataNodeTestUtils
operator|.
name|getFSDataset
argument_list|(
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getClient
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DIRECTORYSCAN_THROTTLE_LIMIT_MS_PER_SEC_KEY
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|DataNode
name|dataNode
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
argument_list|,
name|BLOCK_LENGTH
operator|*
name|blocks
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|float
name|ratio
init|=
literal|0.0f
decl_stmt|;
name|int
name|retries
init|=
name|maxRetries
decl_stmt|;
while|while
condition|(
operator|(
name|retries
operator|>
literal|0
operator|)
operator|&&
operator|(
operator|(
name|ratio
operator|<
literal|7f
operator|)
operator|||
operator|(
name|ratio
operator|>
literal|10f
operator|)
operator|)
condition|)
block|{
name|scanner
operator|=
operator|new
name|DirectoryScanner
argument_list|(
name|dataNode
argument_list|,
name|fds
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|ratio
operator|=
name|runThrottleTest
argument_list|(
name|blocks
argument_list|)
expr_stmt|;
name|retries
operator|-=
literal|1
expr_stmt|;
block|}
comment|// Waiting should be about 9x running.
name|LOG
operator|.
name|info
argument_list|(
literal|"RATIO: "
operator|+
name|ratio
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Throttle is too restrictive"
argument_list|,
name|ratio
operator|<=
literal|10f
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Throttle is too permissive"
argument_list|,
name|ratio
operator|>=
literal|7f
argument_list|)
expr_stmt|;
comment|// Test with a different limit
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DIRECTORYSCAN_THROTTLE_LIMIT_MS_PER_SEC_KEY
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|ratio
operator|=
literal|0.0f
expr_stmt|;
name|retries
operator|=
name|maxRetries
expr_stmt|;
while|while
condition|(
operator|(
name|retries
operator|>
literal|0
operator|)
operator|&&
operator|(
operator|(
name|ratio
operator|<
literal|2.75f
operator|)
operator|||
operator|(
name|ratio
operator|>
literal|4.5f
operator|)
operator|)
condition|)
block|{
name|scanner
operator|=
operator|new
name|DirectoryScanner
argument_list|(
name|dataNode
argument_list|,
name|fds
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|ratio
operator|=
name|runThrottleTest
argument_list|(
name|blocks
argument_list|)
expr_stmt|;
name|retries
operator|-=
literal|1
expr_stmt|;
block|}
comment|// Waiting should be about 4x running.
name|LOG
operator|.
name|info
argument_list|(
literal|"RATIO: "
operator|+
name|ratio
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Throttle is too restrictive"
argument_list|,
name|ratio
operator|<=
literal|4.5f
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Throttle is too permissive"
argument_list|,
name|ratio
operator|>=
literal|2.75f
argument_list|)
expr_stmt|;
comment|// Test with more than 1 thread
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DIRECTORYSCAN_THREADS_KEY
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DIRECTORYSCAN_THROTTLE_LIMIT_MS_PER_SEC_KEY
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|ratio
operator|=
literal|0.0f
expr_stmt|;
name|retries
operator|=
name|maxRetries
expr_stmt|;
while|while
condition|(
operator|(
name|retries
operator|>
literal|0
operator|)
operator|&&
operator|(
operator|(
name|ratio
operator|<
literal|7f
operator|)
operator|||
operator|(
name|ratio
operator|>
literal|10f
operator|)
operator|)
condition|)
block|{
name|scanner
operator|=
operator|new
name|DirectoryScanner
argument_list|(
name|dataNode
argument_list|,
name|fds
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|ratio
operator|=
name|runThrottleTest
argument_list|(
name|blocks
argument_list|)
expr_stmt|;
name|retries
operator|-=
literal|1
expr_stmt|;
block|}
comment|// Waiting should be about 9x running.
name|LOG
operator|.
name|info
argument_list|(
literal|"RATIO: "
operator|+
name|ratio
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Throttle is too restrictive"
argument_list|,
name|ratio
operator|<=
literal|10f
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Throttle is too permissive"
argument_list|,
name|ratio
operator|>=
literal|7f
argument_list|)
expr_stmt|;
comment|// Test with no limit
name|scanner
operator|=
operator|new
name|DirectoryScanner
argument_list|(
name|dataNode
argument_list|,
name|fds
argument_list|,
name|CONF
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|setRetainDiffs
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scan
argument_list|(
name|blocks
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|scanner
operator|.
name|getRunStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Throttle appears to be engaged"
argument_list|,
name|scanner
operator|.
name|timeWaitingMs
operator|.
name|get
argument_list|()
operator|<
literal|10L
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Report complier threads logged no execution time"
argument_list|,
name|scanner
operator|.
name|timeRunningMs
operator|.
name|get
argument_list|()
operator|>
literal|0L
argument_list|)
expr_stmt|;
comment|// Test with a 1ms limit.  This also tests whether the scanner can be
comment|// shutdown cleanly in mid stride.
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DIRECTORYSCAN_THROTTLE_LIMIT_MS_PER_SEC_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ratio
operator|=
literal|0.0f
expr_stmt|;
name|retries
operator|=
name|maxRetries
expr_stmt|;
name|ScheduledExecutorService
name|interruptor
init|=
name|Executors
operator|.
name|newScheduledThreadPool
argument_list|(
name|maxRetries
argument_list|)
decl_stmt|;
try|try
block|{
while|while
condition|(
operator|(
name|retries
operator|>
literal|0
operator|)
operator|&&
operator|(
name|ratio
operator|<
literal|10
operator|)
condition|)
block|{
name|scanner
operator|=
operator|new
name|DirectoryScanner
argument_list|(
name|dataNode
argument_list|,
name|fds
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|setRetainDiffs
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|AtomicLong
name|nowMs
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
comment|// Stop the scanner after 2 seconds because otherwise it will take an
comment|// eternity to complete it's run
name|interruptor
operator|.
name|schedule
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|nowMs
operator|.
name|set
argument_list|(
name|Time
operator|.
name|monotonicNow
argument_list|()
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|,
literal|2L
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|reconcile
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|scanner
operator|.
name|getRunStatus
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|finalMs
init|=
name|nowMs
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// If the scan didn't complete before the shutdown was run, check
comment|// that the shutdown was timely
if|if
condition|(
name|finalMs
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Scanner took "
operator|+
operator|(
name|Time
operator|.
name|monotonicNow
argument_list|()
operator|-
name|finalMs
operator|)
operator|+
literal|"ms to shutdown"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Scanner took too long to shutdown"
argument_list|,
name|Time
operator|.
name|monotonicNow
argument_list|()
operator|-
name|finalMs
operator|<
literal|1000L
argument_list|)
expr_stmt|;
block|}
name|ratio
operator|=
operator|(
name|float
operator|)
name|scanner
operator|.
name|timeWaitingMs
operator|.
name|get
argument_list|()
operator|/
name|scanner
operator|.
name|timeRunningMs
operator|.
name|get
argument_list|()
expr_stmt|;
name|retries
operator|-=
literal|1
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|interruptor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|// We just want to test that it waits a lot, but it also runs some
name|LOG
operator|.
name|info
argument_list|(
literal|"RATIO: "
operator|+
name|ratio
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Throttle is too permissive"
argument_list|,
name|ratio
operator|>
literal|10
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Report complier threads logged no execution time"
argument_list|,
name|scanner
operator|.
name|timeRunningMs
operator|.
name|get
argument_list|()
operator|>
literal|0L
argument_list|)
expr_stmt|;
comment|// Test with a 0 limit, i.e. disabled
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DIRECTORYSCAN_THROTTLE_LIMIT_MS_PER_SEC_KEY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|scanner
operator|=
operator|new
name|DirectoryScanner
argument_list|(
name|dataNode
argument_list|,
name|fds
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|setRetainDiffs
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scan
argument_list|(
name|blocks
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|scanner
operator|.
name|getRunStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Throttle appears to be engaged"
argument_list|,
name|scanner
operator|.
name|timeWaitingMs
operator|.
name|get
argument_list|()
operator|<
literal|10L
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Report complier threads logged no execution time"
argument_list|,
name|scanner
operator|.
name|timeRunningMs
operator|.
name|get
argument_list|()
operator|>
literal|0L
argument_list|)
expr_stmt|;
comment|// Test with a 1000 limit, i.e. disabled
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DIRECTORYSCAN_THROTTLE_LIMIT_MS_PER_SEC_KEY
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|scanner
operator|=
operator|new
name|DirectoryScanner
argument_list|(
name|dataNode
argument_list|,
name|fds
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|setRetainDiffs
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scan
argument_list|(
name|blocks
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|scanner
operator|.
name|getRunStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Throttle appears to be engaged"
argument_list|,
name|scanner
operator|.
name|timeWaitingMs
operator|.
name|get
argument_list|()
operator|<
literal|10L
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Report complier threads logged no execution time"
argument_list|,
name|scanner
operator|.
name|timeRunningMs
operator|.
name|get
argument_list|()
operator|>
literal|0L
argument_list|)
expr_stmt|;
comment|// Test that throttle works from regular start
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DIRECTORYSCAN_THREADS_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DIRECTORYSCAN_THROTTLE_LIMIT_MS_PER_SEC_KEY
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DIRECTORYSCAN_INTERVAL_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|scanner
operator|=
operator|new
name|DirectoryScanner
argument_list|(
name|dataNode
argument_list|,
name|fds
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|setRetainDiffs
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|start
argument_list|()
expr_stmt|;
name|int
name|count
init|=
literal|50
decl_stmt|;
while|while
condition|(
operator|(
name|count
operator|>
literal|0
operator|)
operator|&&
operator|(
name|scanner
operator|.
name|timeWaitingMs
operator|.
name|get
argument_list|()
operator|<
literal|500L
operator|)
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100L
argument_list|)
expr_stmt|;
name|count
operator|-=
literal|1
expr_stmt|;
block|}
name|scanner
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|scanner
operator|.
name|getRunStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Throttle does not appear to be engaged"
argument_list|,
name|count
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|runThrottleTest (int blocks)
specifier|private
name|float
name|runThrottleTest
parameter_list|(
name|int
name|blocks
parameter_list|)
throws|throws
name|IOException
block|{
name|scanner
operator|.
name|setRetainDiffs
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scan
argument_list|(
name|blocks
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|scanner
operator|.
name|getRunStatus
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
name|float
operator|)
name|scanner
operator|.
name|timeWaitingMs
operator|.
name|get
argument_list|()
operator|/
name|scanner
operator|.
name|timeRunningMs
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|verifyAddition (long blockId, long genStamp, long size)
specifier|private
name|void
name|verifyAddition
parameter_list|(
name|long
name|blockId
parameter_list|,
name|long
name|genStamp
parameter_list|,
name|long
name|size
parameter_list|)
block|{
specifier|final
name|ReplicaInfo
name|replicainfo
decl_stmt|;
name|replicainfo
operator|=
name|FsDatasetTestUtil
operator|.
name|fetchReplicaInfo
argument_list|(
name|fds
argument_list|,
name|bpid
argument_list|,
name|blockId
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|replicainfo
argument_list|)
expr_stmt|;
comment|// Added block has the same file as the one created by the test
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|getBlockFile
argument_list|(
name|blockId
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|file
operator|.
name|getName
argument_list|()
argument_list|,
name|FsDatasetTestUtil
operator|.
name|getFile
argument_list|(
name|fds
argument_list|,
name|bpid
argument_list|,
name|blockId
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Generation stamp is same as that of created file
name|assertEquals
argument_list|(
name|genStamp
argument_list|,
name|replicainfo
operator|.
name|getGenerationStamp
argument_list|()
argument_list|)
expr_stmt|;
comment|// File size matches
name|assertEquals
argument_list|(
name|size
argument_list|,
name|replicainfo
operator|.
name|getNumBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyDeletion (long blockId)
specifier|private
name|void
name|verifyDeletion
parameter_list|(
name|long
name|blockId
parameter_list|)
block|{
comment|// Ensure block does not exist in memory
name|assertNull
argument_list|(
name|FsDatasetTestUtil
operator|.
name|fetchReplicaInfo
argument_list|(
name|fds
argument_list|,
name|bpid
argument_list|,
name|blockId
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyGenStamp (long blockId, long genStamp)
specifier|private
name|void
name|verifyGenStamp
parameter_list|(
name|long
name|blockId
parameter_list|,
name|long
name|genStamp
parameter_list|)
block|{
specifier|final
name|ReplicaInfo
name|memBlock
decl_stmt|;
name|memBlock
operator|=
name|FsDatasetTestUtil
operator|.
name|fetchReplicaInfo
argument_list|(
name|fds
argument_list|,
name|bpid
argument_list|,
name|blockId
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|memBlock
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|genStamp
argument_list|,
name|memBlock
operator|.
name|getGenerationStamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyStorageType (long blockId, boolean expectTransient)
specifier|private
name|void
name|verifyStorageType
parameter_list|(
name|long
name|blockId
parameter_list|,
name|boolean
name|expectTransient
parameter_list|)
block|{
specifier|final
name|ReplicaInfo
name|memBlock
decl_stmt|;
name|memBlock
operator|=
name|FsDatasetTestUtil
operator|.
name|fetchReplicaInfo
argument_list|(
name|fds
argument_list|,
name|bpid
argument_list|,
name|blockId
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|memBlock
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|memBlock
operator|.
name|getVolume
argument_list|()
operator|.
name|isTransientStorage
argument_list|()
argument_list|,
name|is
argument_list|(
name|expectTransient
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|TestFsVolumeSpi
specifier|private
specifier|static
class|class
name|TestFsVolumeSpi
implements|implements
name|FsVolumeSpi
block|{
annotation|@
name|Override
DECL|method|getBlockPoolList ()
specifier|public
name|String
index|[]
name|getBlockPoolList
parameter_list|()
block|{
return|return
operator|new
name|String
index|[
literal|0
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|obtainReference ()
specifier|public
name|FsVolumeReference
name|obtainReference
parameter_list|()
throws|throws
name|ClosedChannelException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getAvailable ()
specifier|public
name|long
name|getAvailable
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|getBasePath ()
specifier|public
name|String
name|getBasePath
parameter_list|()
block|{
return|return
operator|(
operator|new
name|File
argument_list|(
literal|"/base"
argument_list|)
operator|)
operator|.
name|getAbsolutePath
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getPath (String bpid)
specifier|public
name|String
name|getPath
parameter_list|(
name|String
name|bpid
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
operator|new
name|File
argument_list|(
literal|"/base/current/"
operator|+
name|bpid
argument_list|)
operator|)
operator|.
name|getAbsolutePath
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getFinalizedDir (String bpid)
specifier|public
name|File
name|getFinalizedDir
parameter_list|(
name|String
name|bpid
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|File
argument_list|(
literal|"/base/current/"
operator|+
name|bpid
operator|+
literal|"/finalized"
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getStorageType ()
specifier|public
name|StorageType
name|getStorageType
parameter_list|()
block|{
return|return
name|StorageType
operator|.
name|DEFAULT
return|;
block|}
annotation|@
name|Override
DECL|method|getStorageID ()
specifier|public
name|String
name|getStorageID
parameter_list|()
block|{
return|return
literal|""
return|;
block|}
annotation|@
name|Override
DECL|method|isTransientStorage ()
specifier|public
name|boolean
name|isTransientStorage
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|reserveSpaceForReplica (long bytesToReserve)
specifier|public
name|void
name|reserveSpaceForReplica
parameter_list|(
name|long
name|bytesToReserve
parameter_list|)
block|{     }
annotation|@
name|Override
DECL|method|releaseReservedSpace (long bytesToRelease)
specifier|public
name|void
name|releaseReservedSpace
parameter_list|(
name|long
name|bytesToRelease
parameter_list|)
block|{     }
annotation|@
name|Override
DECL|method|releaseLockedMemory (long bytesToRelease)
specifier|public
name|void
name|releaseLockedMemory
parameter_list|(
name|long
name|bytesToRelease
parameter_list|)
block|{     }
annotation|@
name|Override
DECL|method|newBlockIterator (String bpid, String name)
specifier|public
name|BlockIterator
name|newBlockIterator
parameter_list|(
name|String
name|bpid
parameter_list|,
name|String
name|name
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|loadBlockIterator (String bpid, String name)
specifier|public
name|BlockIterator
name|loadBlockIterator
parameter_list|(
name|String
name|bpid
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getDataset ()
specifier|public
name|FsDatasetSpi
name|getDataset
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
DECL|field|TEST_VOLUME
specifier|private
specifier|final
specifier|static
name|TestFsVolumeSpi
name|TEST_VOLUME
init|=
operator|new
name|TestFsVolumeSpi
argument_list|()
decl_stmt|;
DECL|field|BPID_1
specifier|private
specifier|final
specifier|static
name|String
name|BPID_1
init|=
literal|"BP-783049782-127.0.0.1-1370971773491"
decl_stmt|;
DECL|field|BPID_2
specifier|private
specifier|final
specifier|static
name|String
name|BPID_2
init|=
literal|"BP-367845636-127.0.0.1-5895645674231"
decl_stmt|;
DECL|method|testScanInfoObject (long blockId, File blockFile, File metaFile)
name|void
name|testScanInfoObject
parameter_list|(
name|long
name|blockId
parameter_list|,
name|File
name|blockFile
parameter_list|,
name|File
name|metaFile
parameter_list|)
throws|throws
name|Exception
block|{
name|DirectoryScanner
operator|.
name|ScanInfo
name|scanInfo
init|=
operator|new
name|DirectoryScanner
operator|.
name|ScanInfo
argument_list|(
name|blockId
argument_list|,
name|blockFile
argument_list|,
name|metaFile
argument_list|,
name|TEST_VOLUME
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|blockId
argument_list|,
name|scanInfo
operator|.
name|getBlockId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|blockFile
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
name|blockFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|scanInfo
operator|.
name|getBlockFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNull
argument_list|(
name|scanInfo
operator|.
name|getBlockFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|metaFile
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
name|metaFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|scanInfo
operator|.
name|getMetaFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNull
argument_list|(
name|scanInfo
operator|.
name|getMetaFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|TEST_VOLUME
argument_list|,
name|scanInfo
operator|.
name|getVolume
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testScanInfoObject (long blockId)
name|void
name|testScanInfoObject
parameter_list|(
name|long
name|blockId
parameter_list|)
throws|throws
name|Exception
block|{
name|DirectoryScanner
operator|.
name|ScanInfo
name|scanInfo
init|=
operator|new
name|DirectoryScanner
operator|.
name|ScanInfo
argument_list|(
name|blockId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|blockId
argument_list|,
name|scanInfo
operator|.
name|getBlockId
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|scanInfo
operator|.
name|getBlockFile
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|scanInfo
operator|.
name|getMetaFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|TestScanInfo ()
specifier|public
name|void
name|TestScanInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|testScanInfoObject
argument_list|(
literal|123
argument_list|,
operator|new
name|File
argument_list|(
name|TEST_VOLUME
operator|.
name|getFinalizedDir
argument_list|(
name|BPID_1
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"blk_123"
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|TEST_VOLUME
operator|.
name|getFinalizedDir
argument_list|(
name|BPID_1
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"blk_123__1001.meta"
argument_list|)
argument_list|)
expr_stmt|;
name|testScanInfoObject
argument_list|(
literal|464
argument_list|,
operator|new
name|File
argument_list|(
name|TEST_VOLUME
operator|.
name|getFinalizedDir
argument_list|(
name|BPID_1
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"blk_123"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|testScanInfoObject
argument_list|(
literal|523
argument_list|,
literal|null
argument_list|,
operator|new
name|File
argument_list|(
name|TEST_VOLUME
operator|.
name|getFinalizedDir
argument_list|(
name|BPID_1
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"blk_123__1009.meta"
argument_list|)
argument_list|)
expr_stmt|;
name|testScanInfoObject
argument_list|(
literal|789
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|testScanInfoObject
argument_list|(
literal|456
argument_list|)
expr_stmt|;
name|testScanInfoObject
argument_list|(
literal|123
argument_list|,
operator|new
name|File
argument_list|(
name|TEST_VOLUME
operator|.
name|getFinalizedDir
argument_list|(
name|BPID_2
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"blk_567"
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|TEST_VOLUME
operator|.
name|getFinalizedDir
argument_list|(
name|BPID_2
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"blk_567__1004.meta"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the behavior of exception handling during directory scan operation.    * Directory scanner shouldn't abort the scan on every directory just because    * one had an error.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testExceptionHandlingWhileDirectoryScan ()
specifier|public
name|void
name|testExceptionHandlingWhileDirectoryScan
parameter_list|()
throws|throws
name|Exception
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|CONF
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|bpid
operator|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockPoolId
argument_list|()
expr_stmt|;
name|fds
operator|=
name|DataNodeTestUtils
operator|.
name|getFSDataset
argument_list|(
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getClient
argument_list|()
expr_stmt|;
name|CONF
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DIRECTORYSCAN_THREADS_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|DataNode
name|dataNode
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// Add files with 2 blocks
name|createFile
argument_list|(
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
argument_list|,
name|BLOCK_LENGTH
operator|*
literal|2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Inject error on #getFinalizedDir() so that ReportCompiler#call() will
comment|// hit exception while preparing the block info report list.
name|List
argument_list|<
name|FsVolumeSpi
argument_list|>
name|volumes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|FsVolumeSpi
argument_list|>
name|iterator
init|=
name|fds
operator|.
name|getFsVolumeReferences
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|FsVolumeSpi
name|volume
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|FsVolumeSpi
name|spy
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|volume
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doThrow
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"Error while getFinalizedDir"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|spy
argument_list|)
operator|.
name|getFinalizedDir
argument_list|(
name|volume
operator|.
name|getBlockPoolList
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|volumes
operator|.
name|add
argument_list|(
name|spy
argument_list|)
expr_stmt|;
block|}
name|FsVolumeReferences
name|volReferences
init|=
operator|new
name|FsVolumeReferences
argument_list|(
name|volumes
argument_list|)
decl_stmt|;
name|FsDatasetSpi
argument_list|<
name|?
extends|extends
name|FsVolumeSpi
argument_list|>
name|spyFds
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|fds
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
name|volReferences
argument_list|)
operator|.
name|when
argument_list|(
name|spyFds
argument_list|)
operator|.
name|getFsVolumeReferences
argument_list|()
expr_stmt|;
name|scanner
operator|=
operator|new
name|DirectoryScanner
argument_list|(
name|dataNode
argument_list|,
name|spyFds
argument_list|,
name|CONF
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|setRetainDiffs
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|reconcile
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|scanner
operator|!=
literal|null
condition|)
block|{
name|scanner
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|scanner
operator|=
literal|null
expr_stmt|;
block|}
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

