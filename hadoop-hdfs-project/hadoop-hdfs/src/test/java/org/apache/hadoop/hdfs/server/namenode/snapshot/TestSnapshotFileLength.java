begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.snapshot
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileChecksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|AppendTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|not
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FsShell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_class
DECL|class|TestSnapshotFileLength
specifier|public
class|class
name|TestSnapshotFileLength
block|{
DECL|field|SEED
specifier|private
specifier|static
specifier|final
name|long
name|SEED
init|=
literal|0
decl_stmt|;
DECL|field|REPLICATION
specifier|private
specifier|static
specifier|final
name|short
name|REPLICATION
init|=
literal|1
decl_stmt|;
DECL|field|BLOCKSIZE
specifier|private
specifier|static
specifier|final
name|int
name|BLOCKSIZE
init|=
literal|1024
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
DECL|field|cluster
specifier|private
specifier|static
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|hdfs
specifier|private
specifier|static
name|DistributedFileSystem
name|hdfs
decl_stmt|;
DECL|field|dir
specifier|private
specifier|final
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/TestSnapshotFileLength"
argument_list|)
decl_stmt|;
DECL|field|sub
specifier|private
specifier|final
name|Path
name|sub
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"sub1"
argument_list|)
decl_stmt|;
DECL|field|file1Name
specifier|private
specifier|final
name|String
name|file1Name
init|=
literal|"file1"
decl_stmt|;
DECL|field|snapshot1
specifier|private
specifier|final
name|String
name|snapshot1
init|=
literal|"snapshot1"
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_MIN_BLOCK_SIZE_KEY
argument_list|,
name|BLOCKSIZE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BYTES_PER_CHECKSUM_KEY
argument_list|,
name|BLOCKSIZE
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|REPLICATION
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|hdfs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * Test that we cannot read a file beyond its snapshot length    * when accessing it via a snapshot path.    *    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testSnapshotfileLength ()
specifier|public
name|void
name|testSnapshotfileLength
parameter_list|()
throws|throws
name|Exception
block|{
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|sub
argument_list|)
expr_stmt|;
name|int
name|bytesRead
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|BLOCKSIZE
operator|*
literal|8
index|]
decl_stmt|;
name|int
name|origLen
init|=
name|BLOCKSIZE
operator|+
literal|1
decl_stmt|;
name|int
name|toAppend
init|=
name|BLOCKSIZE
decl_stmt|;
name|FSDataInputStream
name|fis
init|=
literal|null
decl_stmt|;
name|FileStatus
name|fileStatus
init|=
literal|null
decl_stmt|;
comment|// Create and write a file.
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
name|sub
argument_list|,
name|file1Name
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|file1
argument_list|,
name|BLOCKSIZE
argument_list|,
literal|0
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|appendFile
argument_list|(
name|hdfs
argument_list|,
name|file1
argument_list|,
name|origLen
argument_list|)
expr_stmt|;
comment|// Create a snapshot on the parent directory.
name|hdfs
operator|.
name|allowSnapshot
argument_list|(
name|sub
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|createSnapshot
argument_list|(
name|sub
argument_list|,
name|snapshot1
argument_list|)
expr_stmt|;
name|Path
name|file1snap1
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|sub
argument_list|,
name|snapshot1
argument_list|,
name|file1Name
argument_list|)
decl_stmt|;
specifier|final
name|FileChecksum
name|snapChksum1
init|=
name|hdfs
operator|.
name|getFileChecksum
argument_list|(
name|file1snap1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
literal|"file and snapshot file checksums are not equal"
argument_list|,
name|hdfs
operator|.
name|getFileChecksum
argument_list|(
name|file1
argument_list|)
argument_list|,
name|is
argument_list|(
name|snapChksum1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Append to the file.
name|FSDataOutputStream
name|out
init|=
name|hdfs
operator|.
name|append
argument_list|(
name|file1
argument_list|)
decl_stmt|;
comment|// Nothing has been appended yet. All checksums should still be equal.
name|assertThat
argument_list|(
literal|"file and snapshot checksums (open for append) are not equal"
argument_list|,
name|hdfs
operator|.
name|getFileChecksum
argument_list|(
name|file1
argument_list|)
argument_list|,
name|is
argument_list|(
name|snapChksum1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"snapshot checksum (post-open for append) has changed"
argument_list|,
name|hdfs
operator|.
name|getFileChecksum
argument_list|(
name|file1snap1
argument_list|)
argument_list|,
name|is
argument_list|(
name|snapChksum1
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|AppendTestUtil
operator|.
name|write
argument_list|(
name|out
argument_list|,
literal|0
argument_list|,
name|toAppend
argument_list|)
expr_stmt|;
comment|// Test reading from snapshot of file that is open for append
name|byte
index|[]
name|dataFromSnapshot
init|=
name|DFSTestUtil
operator|.
name|readFileBuffer
argument_list|(
name|hdfs
argument_list|,
name|file1snap1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
literal|"Wrong data size in snapshot."
argument_list|,
name|dataFromSnapshot
operator|.
name|length
argument_list|,
name|is
argument_list|(
name|origLen
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify that checksum didn't change
name|assertThat
argument_list|(
literal|"snapshot file checksum (pre-close) has changed"
argument_list|,
name|hdfs
operator|.
name|getFileChecksum
argument_list|(
name|file1
argument_list|)
argument_list|,
name|is
argument_list|(
name|snapChksum1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"snapshot checksum (post-append) has changed"
argument_list|,
name|hdfs
operator|.
name|getFileChecksum
argument_list|(
name|file1snap1
argument_list|)
argument_list|,
name|is
argument_list|(
name|snapChksum1
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|assertThat
argument_list|(
literal|"file and snapshot file checksums (post-close) are equal"
argument_list|,
name|hdfs
operator|.
name|getFileChecksum
argument_list|(
name|file1
argument_list|)
argument_list|,
name|not
argument_list|(
name|snapChksum1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"snapshot file checksum (post-close) has changed"
argument_list|,
name|hdfs
operator|.
name|getFileChecksum
argument_list|(
name|file1snap1
argument_list|)
argument_list|,
name|is
argument_list|(
name|snapChksum1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure we can read the entire file via its non-snapshot path.
name|fileStatus
operator|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|file1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fileStatus
operator|.
name|getLen
argument_list|()
argument_list|,
name|is
argument_list|(
operator|(
name|long
operator|)
name|origLen
operator|+
name|toAppend
argument_list|)
argument_list|)
expr_stmt|;
name|fis
operator|=
name|hdfs
operator|.
name|open
argument_list|(
name|file1
argument_list|)
expr_stmt|;
name|bytesRead
operator|=
name|fis
operator|.
name|read
argument_list|(
literal|0
argument_list|,
name|buffer
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bytesRead
argument_list|,
name|is
argument_list|(
name|origLen
operator|+
name|toAppend
argument_list|)
argument_list|)
expr_stmt|;
name|fis
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Try to open the file via its snapshot path.
name|fis
operator|=
name|hdfs
operator|.
name|open
argument_list|(
name|file1snap1
argument_list|)
expr_stmt|;
name|fileStatus
operator|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|file1snap1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fileStatus
operator|.
name|getLen
argument_list|()
argument_list|,
name|is
argument_list|(
operator|(
name|long
operator|)
name|origLen
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure we can only read up to the snapshot length.
name|bytesRead
operator|=
name|fis
operator|.
name|read
argument_list|(
literal|0
argument_list|,
name|buffer
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bytesRead
argument_list|,
name|is
argument_list|(
name|origLen
argument_list|)
argument_list|)
expr_stmt|;
name|fis
operator|.
name|close
argument_list|()
expr_stmt|;
name|byte
index|[]
name|dataFromSnapshot
init|=
name|DFSTestUtil
operator|.
name|readFileBuffer
argument_list|(
name|hdfs
argument_list|,
name|file1snap1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
literal|"Wrong data size in snapshot."
argument_list|,
name|dataFromSnapshot
operator|.
name|length
argument_list|,
name|is
argument_list|(
name|origLen
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Adding as part of jira HDFS-5343    * Test for checking the cat command on snapshot path it    *  cannot read a file beyond snapshot file length    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|600000
argument_list|)
DECL|method|testSnapshotFileLengthWithCatCommand ()
specifier|public
name|void
name|testSnapshotFileLengthWithCatCommand
parameter_list|()
throws|throws
name|Exception
block|{
name|FSDataInputStream
name|fis
init|=
literal|null
decl_stmt|;
name|FileStatus
name|fileStatus
init|=
literal|null
decl_stmt|;
name|int
name|bytesRead
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|BLOCKSIZE
operator|*
literal|8
index|]
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|sub
argument_list|)
expr_stmt|;
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
name|sub
argument_list|,
name|file1Name
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|file1
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|allowSnapshot
argument_list|(
name|sub
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|createSnapshot
argument_list|(
name|sub
argument_list|,
name|snapshot1
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|appendFile
argument_list|(
name|hdfs
argument_list|,
name|file1
argument_list|,
name|BLOCKSIZE
argument_list|)
expr_stmt|;
comment|// Make sure we can read the entire file via its non-snapshot path.
name|fileStatus
operator|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|file1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected file length"
argument_list|,
name|BLOCKSIZE
operator|*
literal|2
argument_list|,
name|fileStatus
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|fis
operator|=
name|hdfs
operator|.
name|open
argument_list|(
name|file1
argument_list|)
expr_stmt|;
name|bytesRead
operator|=
name|fis
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected # bytes read"
argument_list|,
name|BLOCKSIZE
operator|*
literal|2
argument_list|,
name|bytesRead
argument_list|)
expr_stmt|;
name|fis
operator|.
name|close
argument_list|()
expr_stmt|;
name|Path
name|file1snap1
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|sub
argument_list|,
name|snapshot1
argument_list|,
name|file1Name
argument_list|)
decl_stmt|;
name|fis
operator|=
name|hdfs
operator|.
name|open
argument_list|(
name|file1snap1
argument_list|)
expr_stmt|;
name|fileStatus
operator|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|file1snap1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fileStatus
operator|.
name|getLen
argument_list|()
argument_list|,
name|BLOCKSIZE
argument_list|)
expr_stmt|;
comment|// Make sure we can only read up to the snapshot length.
name|bytesRead
operator|=
name|fis
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected # bytes read"
argument_list|,
name|BLOCKSIZE
argument_list|,
name|bytesRead
argument_list|)
expr_stmt|;
name|fis
operator|.
name|close
argument_list|()
expr_stmt|;
name|PrintStream
name|outBackup
init|=
name|System
operator|.
name|out
decl_stmt|;
name|PrintStream
name|errBackup
init|=
name|System
operator|.
name|err
decl_stmt|;
name|ByteArrayOutputStream
name|bao
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|System
operator|.
name|setOut
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|bao
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|setErr
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|bao
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure we can cat the file upto to snapshot length
name|FsShell
name|shell
init|=
operator|new
name|FsShell
argument_list|()
decl_stmt|;
try|try
block|{
name|ToolRunner
operator|.
name|run
argument_list|(
name|conf
argument_list|,
name|shell
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-cat"
block|,
literal|"/TestSnapshotFileLength/sub1/.snapshot/snapshot1/file1"
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected # bytes from -cat"
argument_list|,
name|BLOCKSIZE
argument_list|,
name|bao
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|setOut
argument_list|(
name|outBackup
argument_list|)
expr_stmt|;
name|System
operator|.
name|setErr
argument_list|(
name|errBackup
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

