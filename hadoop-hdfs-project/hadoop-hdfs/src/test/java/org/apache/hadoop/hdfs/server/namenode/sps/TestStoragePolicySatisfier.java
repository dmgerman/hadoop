begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.sps
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|sps
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_STORAGE_POLICY_ENABLED_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_STORAGE_POLICY_SATISFIER_QUEUE_LIMIT_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|XATTR_SATISFY_STORAGE_POLICY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
operator|.
name|getLogger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|ReconfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
operator|.
name|DataNodeProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|NameNodeProxies
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|StripedFileTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|StoragePolicySatisfierMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|StoragePolicySatisfyPathStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNodeTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|InternalDataNodeTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSEditLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSTreeTraverser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
operator|.
name|LogCapturer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|event
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_comment
comment|/**  * Tests that StoragePolicySatisfier daemon is able to check the blocks to be  * moved and finding its suggested target locations to move.  */
end_comment

begin_class
DECL|class|TestStoragePolicySatisfier
specifier|public
class|class
name|TestStoragePolicySatisfier
block|{
block|{
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|getLogger
argument_list|(
name|FSTreeTraverser
operator|.
name|class
argument_list|)
argument_list|,
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
block|}
DECL|field|ONE_SSD
specifier|private
specifier|static
specifier|final
name|String
name|ONE_SSD
init|=
literal|"ONE_SSD"
decl_stmt|;
DECL|field|COLD
specifier|private
specifier|static
specifier|final
name|String
name|COLD
init|=
literal|"COLD"
decl_stmt|;
DECL|field|LOG
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestStoragePolicySatisfier
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|config
specifier|private
name|Configuration
name|config
init|=
literal|null
decl_stmt|;
DECL|field|allDiskTypes
specifier|private
name|StorageType
index|[]
index|[]
name|allDiskTypes
init|=
operator|new
name|StorageType
index|[]
index|[]
block|{
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|}
block|}
decl_stmt|;
DECL|field|hdfsCluster
specifier|private
name|MiniDFSCluster
name|hdfsCluster
init|=
literal|null
decl_stmt|;
DECL|field|dfs
specifier|private
name|DistributedFileSystem
name|dfs
init|=
literal|null
decl_stmt|;
DECL|field|NUM_OF_DATANODES
specifier|public
specifier|static
specifier|final
name|int
name|NUM_OF_DATANODES
init|=
literal|3
decl_stmt|;
DECL|field|STORAGES_PER_DATANODE
specifier|public
specifier|static
specifier|final
name|int
name|STORAGES_PER_DATANODE
init|=
literal|2
decl_stmt|;
DECL|field|CAPACITY
specifier|public
specifier|static
specifier|final
name|long
name|CAPACITY
init|=
literal|2
operator|*
literal|256
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
DECL|field|FILE
specifier|public
specifier|static
specifier|final
name|String
name|FILE
init|=
literal|"/testMoveToSatisfyStoragePolicy"
decl_stmt|;
DECL|field|DEFAULT_BLOCK_SIZE
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_BLOCK_SIZE
init|=
literal|1024
decl_stmt|;
comment|/**    * Sets hdfs cluster.    */
DECL|method|setCluster (MiniDFSCluster cluster)
specifier|public
name|void
name|setCluster
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|)
block|{
name|this
operator|.
name|hdfsCluster
operator|=
name|cluster
expr_stmt|;
block|}
comment|/**    * @return conf.    */
DECL|method|getConf ()
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|this
operator|.
name|config
return|;
block|}
comment|/**    * @return hdfs cluster.    */
DECL|method|getCluster ()
specifier|public
name|MiniDFSCluster
name|getCluster
parameter_list|()
block|{
return|return
name|hdfsCluster
return|;
block|}
comment|/**    * Gets distributed file system.    *    * @throws IOException    */
DECL|method|getFS ()
specifier|public
name|DistributedFileSystem
name|getFS
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|dfs
operator|=
name|hdfsCluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
return|return
name|this
operator|.
name|dfs
return|;
block|}
annotation|@
name|After
DECL|method|shutdownCluster ()
specifier|public
name|void
name|shutdownCluster
parameter_list|()
block|{
if|if
condition|(
name|hdfsCluster
operator|!=
literal|null
condition|)
block|{
name|hdfsCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|createCluster ()
specifier|public
name|void
name|createCluster
parameter_list|()
throws|throws
name|IOException
block|{
name|config
operator|.
name|setLong
argument_list|(
literal|"dfs.block.size"
argument_list|,
name|DEFAULT_BLOCK_SIZE
argument_list|)
expr_stmt|;
name|hdfsCluster
operator|=
name|startCluster
argument_list|(
name|config
argument_list|,
name|allDiskTypes
argument_list|,
name|NUM_OF_DATANODES
argument_list|,
name|STORAGES_PER_DATANODE
argument_list|,
name|CAPACITY
argument_list|)
expr_stmt|;
name|getFS
argument_list|()
expr_stmt|;
name|writeContent
argument_list|(
name|FILE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|config
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_STORAGE_POLICY_SATISFIER_MODE_KEY
argument_list|,
name|StoragePolicySatisfierMode
operator|.
name|INTERNAL
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Most of the tests are restarting DNs and NN. So, reduced refresh cycle to
comment|// update latest datanodes.
name|config
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_SPS_DATANODE_CACHE_REFRESH_INTERVAL_MS
argument_list|,
literal|3000
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testWhenStoragePolicySetToCOLD ()
specifier|public
name|void
name|testWhenStoragePolicySetToCOLD
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|createCluster
argument_list|()
expr_stmt|;
name|doTestWhenStoragePolicySetToCOLD
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|shutdownCluster
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|doTestWhenStoragePolicySetToCOLD ()
specifier|private
name|void
name|doTestWhenStoragePolicySetToCOLD
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Change policy to COLD
name|dfs
operator|.
name|setStoragePolicy
argument_list|(
operator|new
name|Path
argument_list|(
name|FILE
argument_list|)
argument_list|,
name|COLD
argument_list|)
expr_stmt|;
name|StorageType
index|[]
index|[]
name|newtypes
init|=
operator|new
name|StorageType
index|[]
index|[]
block|{
block|{
name|StorageType
operator|.
name|ARCHIVE
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|,
block|{
name|StorageType
operator|.
name|ARCHIVE
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|,
block|{
name|StorageType
operator|.
name|ARCHIVE
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|}
decl_stmt|;
name|startAdditionalDNs
argument_list|(
name|config
argument_list|,
literal|3
argument_list|,
name|NUM_OF_DATANODES
argument_list|,
name|newtypes
argument_list|,
name|STORAGES_PER_DATANODE
argument_list|,
name|CAPACITY
argument_list|,
name|hdfsCluster
argument_list|)
expr_stmt|;
name|hdfsCluster
operator|.
name|triggerHeartbeats
argument_list|()
expr_stmt|;
name|dfs
operator|.
name|satisfyStoragePolicy
argument_list|(
operator|new
name|Path
argument_list|(
name|FILE
argument_list|)
argument_list|)
expr_stmt|;
comment|// Wait till namenode notified about the block location details
name|DFSTestUtil
operator|.
name|waitExpectedStorageType
argument_list|(
name|FILE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
literal|3
argument_list|,
literal|35000
argument_list|,
name|dfs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testWhenStoragePolicySetToALLSSD ()
specifier|public
name|void
name|testWhenStoragePolicySetToALLSSD
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|createCluster
argument_list|()
expr_stmt|;
comment|// Change policy to ALL_SSD
name|dfs
operator|.
name|setStoragePolicy
argument_list|(
operator|new
name|Path
argument_list|(
name|FILE
argument_list|)
argument_list|,
literal|"ALL_SSD"
argument_list|)
expr_stmt|;
name|StorageType
index|[]
index|[]
name|newtypes
init|=
operator|new
name|StorageType
index|[]
index|[]
block|{
block|{
name|StorageType
operator|.
name|SSD
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|SSD
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|SSD
block|,
name|StorageType
operator|.
name|DISK
block|}
block|}
decl_stmt|;
comment|// Making sure SDD based nodes added to cluster. Adding SSD based
comment|// datanodes.
name|startAdditionalDNs
argument_list|(
name|config
argument_list|,
literal|3
argument_list|,
name|NUM_OF_DATANODES
argument_list|,
name|newtypes
argument_list|,
name|STORAGES_PER_DATANODE
argument_list|,
name|CAPACITY
argument_list|,
name|hdfsCluster
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|satisfyStoragePolicy
argument_list|(
operator|new
name|Path
argument_list|(
name|FILE
argument_list|)
argument_list|)
expr_stmt|;
name|hdfsCluster
operator|.
name|triggerHeartbeats
argument_list|()
expr_stmt|;
comment|// Wait till StorgePolicySatisfier Identified that block to move to SSD
comment|// areas
name|DFSTestUtil
operator|.
name|waitExpectedStorageType
argument_list|(
name|FILE
argument_list|,
name|StorageType
operator|.
name|SSD
argument_list|,
literal|3
argument_list|,
literal|30000
argument_list|,
name|dfs
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|shutdownCluster
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testWhenStoragePolicySetToONESSD ()
specifier|public
name|void
name|testWhenStoragePolicySetToONESSD
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|createCluster
argument_list|()
expr_stmt|;
comment|// Change policy to ONE_SSD
name|dfs
operator|.
name|setStoragePolicy
argument_list|(
operator|new
name|Path
argument_list|(
name|FILE
argument_list|)
argument_list|,
name|ONE_SSD
argument_list|)
expr_stmt|;
name|StorageType
index|[]
index|[]
name|newtypes
init|=
operator|new
name|StorageType
index|[]
index|[]
block|{
block|{
name|StorageType
operator|.
name|SSD
block|,
name|StorageType
operator|.
name|DISK
block|}
block|}
decl_stmt|;
comment|// Making sure SDD based nodes added to cluster. Adding SSD based
comment|// datanodes.
name|startAdditionalDNs
argument_list|(
name|config
argument_list|,
literal|1
argument_list|,
name|NUM_OF_DATANODES
argument_list|,
name|newtypes
argument_list|,
name|STORAGES_PER_DATANODE
argument_list|,
name|CAPACITY
argument_list|,
name|hdfsCluster
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|satisfyStoragePolicy
argument_list|(
operator|new
name|Path
argument_list|(
name|FILE
argument_list|)
argument_list|)
expr_stmt|;
name|hdfsCluster
operator|.
name|triggerHeartbeats
argument_list|()
expr_stmt|;
comment|// Wait till StorgePolicySatisfier Identified that block to move to SSD
comment|// areas
name|DFSTestUtil
operator|.
name|waitExpectedStorageType
argument_list|(
name|FILE
argument_list|,
name|StorageType
operator|.
name|SSD
argument_list|,
literal|1
argument_list|,
literal|30000
argument_list|,
name|dfs
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitExpectedStorageType
argument_list|(
name|FILE
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
literal|2
argument_list|,
literal|30000
argument_list|,
name|dfs
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|shutdownCluster
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Tests to verify that the block storage movement report will be propagated    * to Namenode via datanode heartbeat.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testBlksStorageMovementAttemptFinishedReport ()
specifier|public
name|void
name|testBlksStorageMovementAttemptFinishedReport
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|createCluster
argument_list|()
expr_stmt|;
comment|// Change policy to ONE_SSD
name|dfs
operator|.
name|setStoragePolicy
argument_list|(
operator|new
name|Path
argument_list|(
name|FILE
argument_list|)
argument_list|,
name|ONE_SSD
argument_list|)
expr_stmt|;
name|StorageType
index|[]
index|[]
name|newtypes
init|=
operator|new
name|StorageType
index|[]
index|[]
block|{
block|{
name|StorageType
operator|.
name|SSD
block|,
name|StorageType
operator|.
name|DISK
block|}
block|}
decl_stmt|;
comment|// Making sure SDD based nodes added to cluster. Adding SSD based
comment|// datanodes.
name|startAdditionalDNs
argument_list|(
name|config
argument_list|,
literal|1
argument_list|,
name|NUM_OF_DATANODES
argument_list|,
name|newtypes
argument_list|,
name|STORAGES_PER_DATANODE
argument_list|,
name|CAPACITY
argument_list|,
name|hdfsCluster
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|satisfyStoragePolicy
argument_list|(
operator|new
name|Path
argument_list|(
name|FILE
argument_list|)
argument_list|)
expr_stmt|;
name|hdfsCluster
operator|.
name|triggerHeartbeats
argument_list|()
expr_stmt|;
comment|// Wait till the block is moved to SSD areas
name|DFSTestUtil
operator|.
name|waitExpectedStorageType
argument_list|(
name|FILE
argument_list|,
name|StorageType
operator|.
name|SSD
argument_list|,
literal|1
argument_list|,
literal|30000
argument_list|,
name|dfs
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitExpectedStorageType
argument_list|(
name|FILE
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
literal|2
argument_list|,
literal|30000
argument_list|,
name|dfs
argument_list|)
expr_stmt|;
name|waitForBlocksMovementAttemptReport
argument_list|(
literal|1
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|shutdownCluster
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Tests to verify that multiple files are giving to satisfy storage policy    * and should work well altogether.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testMultipleFilesForSatisfyStoragePolicy ()
specifier|public
name|void
name|testMultipleFilesForSatisfyStoragePolicy
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|createCluster
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|files
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|files
operator|.
name|add
argument_list|(
name|FILE
argument_list|)
expr_stmt|;
comment|// Creates 4 more files. Send all of them for satisfying the storage
comment|// policy together.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|String
name|file1
init|=
literal|"/testMoveWhenStoragePolicyNotSatisfying_"
operator|+
name|i
decl_stmt|;
name|files
operator|.
name|add
argument_list|(
name|file1
argument_list|)
expr_stmt|;
name|writeContent
argument_list|(
name|file1
argument_list|)
expr_stmt|;
block|}
comment|// Change policy to ONE_SSD
for|for
control|(
name|String
name|fileName
range|:
name|files
control|)
block|{
name|dfs
operator|.
name|setStoragePolicy
argument_list|(
operator|new
name|Path
argument_list|(
name|fileName
argument_list|)
argument_list|,
name|ONE_SSD
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|satisfyStoragePolicy
argument_list|(
operator|new
name|Path
argument_list|(
name|fileName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|StorageType
index|[]
index|[]
name|newtypes
init|=
operator|new
name|StorageType
index|[]
index|[]
block|{
block|{
name|StorageType
operator|.
name|SSD
block|,
name|StorageType
operator|.
name|DISK
block|}
block|}
decl_stmt|;
comment|// Making sure SDD based nodes added to cluster. Adding SSD based
comment|// datanodes.
name|startAdditionalDNs
argument_list|(
name|config
argument_list|,
literal|1
argument_list|,
name|NUM_OF_DATANODES
argument_list|,
name|newtypes
argument_list|,
name|STORAGES_PER_DATANODE
argument_list|,
name|CAPACITY
argument_list|,
name|hdfsCluster
argument_list|)
expr_stmt|;
name|hdfsCluster
operator|.
name|triggerHeartbeats
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|fileName
range|:
name|files
control|)
block|{
comment|// Wait till the block is moved to SSD areas
name|DFSTestUtil
operator|.
name|waitExpectedStorageType
argument_list|(
name|fileName
argument_list|,
name|StorageType
operator|.
name|SSD
argument_list|,
literal|1
argument_list|,
literal|30000
argument_list|,
name|dfs
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitExpectedStorageType
argument_list|(
name|fileName
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
literal|2
argument_list|,
literal|30000
argument_list|,
name|dfs
argument_list|)
expr_stmt|;
block|}
name|waitForBlocksMovementAttemptReport
argument_list|(
name|files
operator|.
name|size
argument_list|()
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|shutdownCluster
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Tests to verify hdfsAdmin.satisfyStoragePolicy works well for file.    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testSatisfyFileWithHdfsAdmin ()
specifier|public
name|void
name|testSatisfyFileWithHdfsAdmin
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|createCluster
argument_list|()
expr_stmt|;
name|HdfsAdmin
name|hdfsAdmin
init|=
operator|new
name|HdfsAdmin
argument_list|(
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|config
argument_list|)
argument_list|,
name|config
argument_list|)
decl_stmt|;
comment|// Change policy to COLD
name|dfs
operator|.
name|setStoragePolicy
argument_list|(
operator|new
name|Path
argument_list|(
name|FILE
argument_list|)
argument_list|,
name|COLD
argument_list|)
expr_stmt|;
name|StorageType
index|[]
index|[]
name|newtypes
init|=
operator|new
name|StorageType
index|[]
index|[]
block|{
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|}
decl_stmt|;
name|startAdditionalDNs
argument_list|(
name|config
argument_list|,
literal|3
argument_list|,
name|NUM_OF_DATANODES
argument_list|,
name|newtypes
argument_list|,
name|STORAGES_PER_DATANODE
argument_list|,
name|CAPACITY
argument_list|,
name|hdfsCluster
argument_list|)
expr_stmt|;
name|hdfsAdmin
operator|.
name|satisfyStoragePolicy
argument_list|(
operator|new
name|Path
argument_list|(
name|FILE
argument_list|)
argument_list|)
expr_stmt|;
name|hdfsCluster
operator|.
name|triggerHeartbeats
argument_list|()
expr_stmt|;
comment|// Wait till namenode notified about the block location details
name|DFSTestUtil
operator|.
name|waitExpectedStorageType
argument_list|(
name|FILE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
literal|3
argument_list|,
literal|30000
argument_list|,
name|dfs
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|shutdownCluster
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Tests to verify hdfsAdmin.satisfyStoragePolicy works well for dir.    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testSatisfyDirWithHdfsAdmin ()
specifier|public
name|void
name|testSatisfyDirWithHdfsAdmin
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|createCluster
argument_list|()
expr_stmt|;
name|HdfsAdmin
name|hdfsAdmin
init|=
operator|new
name|HdfsAdmin
argument_list|(
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|config
argument_list|)
argument_list|,
name|config
argument_list|)
decl_stmt|;
specifier|final
name|String
name|subDir
init|=
literal|"/subDir"
decl_stmt|;
specifier|final
name|String
name|subFile1
init|=
name|subDir
operator|+
literal|"/subFile1"
decl_stmt|;
specifier|final
name|String
name|subDir2
init|=
name|subDir
operator|+
literal|"/subDir2"
decl_stmt|;
specifier|final
name|String
name|subFile2
init|=
name|subDir2
operator|+
literal|"/subFile2"
decl_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|subDir
argument_list|)
argument_list|)
expr_stmt|;
name|writeContent
argument_list|(
name|subFile1
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|subDir2
argument_list|)
argument_list|)
expr_stmt|;
name|writeContent
argument_list|(
name|subFile2
argument_list|)
expr_stmt|;
comment|// Change policy to COLD
name|dfs
operator|.
name|setStoragePolicy
argument_list|(
operator|new
name|Path
argument_list|(
name|subDir
argument_list|)
argument_list|,
name|ONE_SSD
argument_list|)
expr_stmt|;
name|StorageType
index|[]
index|[]
name|newtypes
init|=
operator|new
name|StorageType
index|[]
index|[]
block|{
block|{
name|StorageType
operator|.
name|SSD
block|,
name|StorageType
operator|.
name|DISK
block|}
block|}
decl_stmt|;
name|startAdditionalDNs
argument_list|(
name|config
argument_list|,
literal|1
argument_list|,
name|NUM_OF_DATANODES
argument_list|,
name|newtypes
argument_list|,
name|STORAGES_PER_DATANODE
argument_list|,
name|CAPACITY
argument_list|,
name|hdfsCluster
argument_list|)
expr_stmt|;
name|hdfsAdmin
operator|.
name|satisfyStoragePolicy
argument_list|(
operator|new
name|Path
argument_list|(
name|subDir
argument_list|)
argument_list|)
expr_stmt|;
name|hdfsCluster
operator|.
name|triggerHeartbeats
argument_list|()
expr_stmt|;
comment|// take effect for the file in the directory.
name|DFSTestUtil
operator|.
name|waitExpectedStorageType
argument_list|(
name|subFile1
argument_list|,
name|StorageType
operator|.
name|SSD
argument_list|,
literal|1
argument_list|,
literal|30000
argument_list|,
name|dfs
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitExpectedStorageType
argument_list|(
name|subFile1
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
literal|2
argument_list|,
literal|30000
argument_list|,
name|dfs
argument_list|)
expr_stmt|;
comment|// take no effect for the sub-dir's file in the directory.
name|DFSTestUtil
operator|.
name|waitExpectedStorageType
argument_list|(
name|subFile2
argument_list|,
name|StorageType
operator|.
name|SSD
argument_list|,
literal|1
argument_list|,
literal|30000
argument_list|,
name|dfs
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitExpectedStorageType
argument_list|(
name|subFile2
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
literal|2
argument_list|,
literal|30000
argument_list|,
name|dfs
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|shutdownCluster
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Tests to verify hdfsAdmin.satisfyStoragePolicy exceptions.    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testSatisfyWithExceptions ()
specifier|public
name|void
name|testSatisfyWithExceptions
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|createCluster
argument_list|()
expr_stmt|;
specifier|final
name|String
name|nonExistingFile
init|=
literal|"/noneExistingFile"
decl_stmt|;
name|hdfsCluster
operator|.
name|getConfiguration
argument_list|(
literal|0
argument_list|)
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_STORAGE_POLICY_ENABLED_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|restartNamenode
argument_list|()
expr_stmt|;
name|HdfsAdmin
name|hdfsAdmin
init|=
operator|new
name|HdfsAdmin
argument_list|(
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|config
argument_list|)
argument_list|,
name|config
argument_list|)
decl_stmt|;
try|try
block|{
name|hdfsAdmin
operator|.
name|satisfyStoragePolicy
argument_list|(
operator|new
name|Path
argument_list|(
name|FILE
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Should failed to satisfy storage policy "
operator|+
literal|"for %s since %s is set to false."
argument_list|,
name|FILE
argument_list|,
name|DFS_STORAGE_POLICY_ENABLED_KEY
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Failed to satisfy storage policy since %s is set to false."
argument_list|,
name|DFS_STORAGE_POLICY_ENABLED_KEY
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|hdfsCluster
operator|.
name|getConfiguration
argument_list|(
literal|0
argument_list|)
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_STORAGE_POLICY_ENABLED_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|restartNamenode
argument_list|()
expr_stmt|;
name|hdfsAdmin
operator|=
operator|new
name|HdfsAdmin
argument_list|(
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|config
argument_list|)
argument_list|,
name|config
argument_list|)
expr_stmt|;
try|try
block|{
name|hdfsAdmin
operator|.
name|satisfyStoragePolicy
argument_list|(
operator|new
name|Path
argument_list|(
name|nonExistingFile
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should throw FileNotFoundException for "
operator|+
name|nonExistingFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{        }
try|try
block|{
name|hdfsAdmin
operator|.
name|satisfyStoragePolicy
argument_list|(
operator|new
name|Path
argument_list|(
name|FILE
argument_list|)
argument_list|)
expr_stmt|;
name|hdfsAdmin
operator|.
name|satisfyStoragePolicy
argument_list|(
operator|new
name|Path
argument_list|(
name|FILE
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Allow to invoke mutlipe times "
operator|+
literal|"#satisfyStoragePolicy() api for a path %s , internally just "
operator|+
literal|"skipping addtion to satisfy movement queue."
argument_list|,
name|FILE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|shutdownCluster
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Tests to verify that for the given path, some of the blocks or block src    * locations(src nodes) under the given path will be scheduled for block    * movement.    *    * For example, there are two block for a file:    *    * File1 => blk_1[locations=A(DISK),B(DISK),C(DISK)],    * blk_2[locations=A(DISK),B(DISK),C(DISK)]. Now, set storage policy to COLD.    * Only one datanode is available with storage type ARCHIVE, say D.    *    * SPS will schedule block movement to the coordinator node with the details,    * blk_1[move A(DISK) -> D(ARCHIVE)], blk_2[move A(DISK) -> D(ARCHIVE)].    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testWhenOnlyFewTargetDatanodeAreAvailableToSatisfyStoragePolicy ()
specifier|public
name|void
name|testWhenOnlyFewTargetDatanodeAreAvailableToSatisfyStoragePolicy
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|createCluster
argument_list|()
expr_stmt|;
comment|// Change policy to COLD
name|dfs
operator|.
name|setStoragePolicy
argument_list|(
operator|new
name|Path
argument_list|(
name|FILE
argument_list|)
argument_list|,
name|COLD
argument_list|)
expr_stmt|;
name|StorageType
index|[]
index|[]
name|newtypes
init|=
operator|new
name|StorageType
index|[]
index|[]
block|{
block|{
name|StorageType
operator|.
name|ARCHIVE
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|}
decl_stmt|;
comment|// Adding ARCHIVE based datanodes.
name|startAdditionalDNs
argument_list|(
name|config
argument_list|,
literal|1
argument_list|,
name|NUM_OF_DATANODES
argument_list|,
name|newtypes
argument_list|,
name|STORAGES_PER_DATANODE
argument_list|,
name|CAPACITY
argument_list|,
name|hdfsCluster
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|satisfyStoragePolicy
argument_list|(
operator|new
name|Path
argument_list|(
name|FILE
argument_list|)
argument_list|)
expr_stmt|;
name|hdfsCluster
operator|.
name|triggerHeartbeats
argument_list|()
expr_stmt|;
comment|// Wait till StorgePolicySatisfier identified that block to move to
comment|// ARCHIVE area.
name|DFSTestUtil
operator|.
name|waitExpectedStorageType
argument_list|(
name|FILE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
literal|1
argument_list|,
literal|30000
argument_list|,
name|dfs
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitExpectedStorageType
argument_list|(
name|FILE
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
literal|2
argument_list|,
literal|30000
argument_list|,
name|dfs
argument_list|)
expr_stmt|;
name|waitForBlocksMovementAttemptReport
argument_list|(
literal|1
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|shutdownCluster
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Tests to verify that for the given path, no blocks or block src    * locations(src nodes) under the given path will be scheduled for block    * movement as there are no available datanode with required storage type.    *    * For example, there are two block for a file:    *    * File1 => blk_1[locations=A(DISK),B(DISK),C(DISK)],    * blk_2[locations=A(DISK),B(DISK),C(DISK)]. Now, set storage policy to COLD.    * No datanode is available with storage type ARCHIVE.    *    * SPS won't schedule any block movement for this path.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testWhenNoTargetDatanodeToSatisfyStoragePolicy ()
specifier|public
name|void
name|testWhenNoTargetDatanodeToSatisfyStoragePolicy
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|createCluster
argument_list|()
expr_stmt|;
comment|// Change policy to COLD
name|dfs
operator|.
name|setStoragePolicy
argument_list|(
operator|new
name|Path
argument_list|(
name|FILE
argument_list|)
argument_list|,
name|COLD
argument_list|)
expr_stmt|;
name|StorageType
index|[]
index|[]
name|newtypes
init|=
operator|new
name|StorageType
index|[]
index|[]
block|{
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|}
block|}
decl_stmt|;
comment|// Adding DISK based datanodes
name|startAdditionalDNs
argument_list|(
name|config
argument_list|,
literal|1
argument_list|,
name|NUM_OF_DATANODES
argument_list|,
name|newtypes
argument_list|,
name|STORAGES_PER_DATANODE
argument_list|,
name|CAPACITY
argument_list|,
name|hdfsCluster
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|satisfyStoragePolicy
argument_list|(
operator|new
name|Path
argument_list|(
name|FILE
argument_list|)
argument_list|)
expr_stmt|;
name|hdfsCluster
operator|.
name|triggerHeartbeats
argument_list|()
expr_stmt|;
comment|// No block movement will be scheduled as there is no target node
comment|// available with the required storage type.
name|waitForAttemptedItems
argument_list|(
literal|1
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitExpectedStorageType
argument_list|(
name|FILE
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
literal|3
argument_list|,
literal|30000
argument_list|,
name|dfs
argument_list|)
expr_stmt|;
comment|// Since there is no target node the item will get timed out and then
comment|// re-attempted.
name|waitForAttemptedItems
argument_list|(
literal|1
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|shutdownCluster
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Tests to verify that SPS should not start when a Mover instance    * is running.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testWhenMoverIsAlreadyRunningBeforeStoragePolicySatisfier ()
specifier|public
name|void
name|testWhenMoverIsAlreadyRunningBeforeStoragePolicySatisfier
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|running
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
name|createCluster
argument_list|()
expr_stmt|;
comment|// Stop SPS
name|hdfsCluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|reconfigureProperty
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_STORAGE_POLICY_SATISFIER_MODE_KEY
argument_list|,
name|StoragePolicySatisfierMode
operator|.
name|NONE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|running
operator|=
name|hdfsCluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getClient
argument_list|()
operator|.
name|isInternalSatisfierRunning
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"SPS should stopped as configured."
argument_list|,
name|running
argument_list|)
expr_stmt|;
comment|// Simulate the case by creating MOVER_ID file
name|out
operator|=
name|hdfsCluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|create
argument_list|(
name|HdfsServerConstants
operator|.
name|MOVER_ID_PATH
argument_list|)
expr_stmt|;
comment|// Restart SPS
name|hdfsCluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|reconfigureProperty
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_STORAGE_POLICY_SATISFIER_MODE_KEY
argument_list|,
name|StoragePolicySatisfierMode
operator|.
name|INTERNAL
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|running
operator|=
name|hdfsCluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getClient
argument_list|()
operator|.
name|isInternalSatisfierRunning
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"SPS should not be able to run as file "
operator|+
name|HdfsServerConstants
operator|.
name|MOVER_ID_PATH
operator|+
literal|" is being hold."
argument_list|,
name|running
argument_list|)
expr_stmt|;
comment|// Simulate Mover exists
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|=
literal|null
expr_stmt|;
name|hdfsCluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|delete
argument_list|(
name|HdfsServerConstants
operator|.
name|MOVER_ID_PATH
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Restart SPS again
name|hdfsCluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|reconfigureProperty
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_STORAGE_POLICY_SATISFIER_MODE_KEY
argument_list|,
name|StoragePolicySatisfierMode
operator|.
name|INTERNAL
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|running
operator|=
name|hdfsCluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getClient
argument_list|()
operator|.
name|isInternalSatisfierRunning
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"SPS should be running as "
operator|+
literal|"Mover already exited"
argument_list|,
name|running
argument_list|)
expr_stmt|;
comment|// Check functionality after SPS restart
name|doTestWhenStoragePolicySetToCOLD
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReconfigurationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Exception when reconfigure "
operator|+
name|DFSConfigKeys
operator|.
name|DFS_STORAGE_POLICY_SATISFIER_MODE_KEY
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|shutdownCluster
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Tests to verify that SPS should be able to start when the Mover ID file    * is not being hold by a Mover. This can be the case when Mover exits    * ungracefully without deleting the ID file from HDFS.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testWhenMoverExitsWithoutDeleteMoverIDFile ()
specifier|public
name|void
name|testWhenMoverExitsWithoutDeleteMoverIDFile
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|createCluster
argument_list|()
expr_stmt|;
comment|// Simulate the case by creating MOVER_ID file
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfsCluster
operator|.
name|getFileSystem
argument_list|()
argument_list|,
name|HdfsServerConstants
operator|.
name|MOVER_ID_PATH
argument_list|,
literal|0
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|restartNamenode
argument_list|()
expr_stmt|;
name|boolean
name|running
init|=
name|hdfsCluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getClient
argument_list|()
operator|.
name|isInternalSatisfierRunning
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"SPS should be running as "
operator|+
literal|"no Mover really running"
argument_list|,
name|running
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|shutdownCluster
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test to verify that satisfy worker can't move blocks. If the given block is    * pinned it shouldn't be considered for retries.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testMoveWithBlockPinning ()
specifier|public
name|void
name|testMoveWithBlockPinning
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|config
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_BLOCK_PINNING_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|hdfsCluster
operator|=
name|startCluster
argument_list|(
name|config
argument_list|,
name|allDiskTypes
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
name|CAPACITY
argument_list|)
expr_stmt|;
name|hdfsCluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|dfs
operator|=
name|hdfsCluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
comment|// create a file with replication factor 3 and mark 2 pinned block
comment|// locations.
specifier|final
name|String
name|file1
init|=
name|createFileAndSimulateFavoredNodes
argument_list|(
literal|2
argument_list|)
decl_stmt|;
comment|// Change policy to COLD
name|dfs
operator|.
name|setStoragePolicy
argument_list|(
operator|new
name|Path
argument_list|(
name|file1
argument_list|)
argument_list|,
name|COLD
argument_list|)
expr_stmt|;
name|StorageType
index|[]
index|[]
name|newtypes
init|=
operator|new
name|StorageType
index|[]
index|[]
block|{
block|{
name|StorageType
operator|.
name|ARCHIVE
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|,
block|{
name|StorageType
operator|.
name|ARCHIVE
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|,
block|{
name|StorageType
operator|.
name|ARCHIVE
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|}
decl_stmt|;
comment|// Adding DISK based datanodes
name|startAdditionalDNs
argument_list|(
name|config
argument_list|,
literal|3
argument_list|,
name|NUM_OF_DATANODES
argument_list|,
name|newtypes
argument_list|,
name|STORAGES_PER_DATANODE
argument_list|,
name|CAPACITY
argument_list|,
name|hdfsCluster
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|satisfyStoragePolicy
argument_list|(
operator|new
name|Path
argument_list|(
name|file1
argument_list|)
argument_list|)
expr_stmt|;
name|hdfsCluster
operator|.
name|triggerHeartbeats
argument_list|()
expr_stmt|;
comment|// No block movement will be scheduled as there is no target node
comment|// available with the required storage type.
name|waitForAttemptedItems
argument_list|(
literal|1
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
name|waitForBlocksMovementAttemptReport
argument_list|(
literal|1
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitExpectedStorageType
argument_list|(
name|file1
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
literal|1
argument_list|,
literal|30000
argument_list|,
name|dfs
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitExpectedStorageType
argument_list|(
name|file1
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
literal|2
argument_list|,
literal|30000
argument_list|,
name|dfs
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|shutdownCluster
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Tests to verify that for the given path, only few of the blocks or block    * src locations(src nodes) under the given path will be scheduled for block    * movement.    *    * For example, there are two block for a file:    *    * File1 => two blocks and default storage policy(HOT).    * blk_1[locations=A(DISK),B(DISK),C(DISK),D(DISK),E(DISK)],    * blk_2[locations=A(DISK),B(DISK),C(DISK),D(DISK),E(DISK)].    *    * Now, set storage policy to COLD.    * Only two Dns are available with expected storage type ARCHIVE, say A, E.    *    * SPS will schedule block movement to the coordinator node with the details,    * blk_1[move A(DISK) -> A(ARCHIVE), move E(DISK) -> E(ARCHIVE)],    * blk_2[move A(DISK) -> A(ARCHIVE), move E(DISK) -> E(ARCHIVE)].    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testWhenOnlyFewSourceNodesHaveMatchingTargetNodes ()
specifier|public
name|void
name|testWhenOnlyFewSourceNodesHaveMatchingTargetNodes
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|int
name|numOfDns
init|=
literal|5
decl_stmt|;
name|config
operator|.
name|setLong
argument_list|(
literal|"dfs.block.size"
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|allDiskTypes
operator|=
operator|new
name|StorageType
index|[]
index|[]
block|{
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|}
expr_stmt|;
name|hdfsCluster
operator|=
name|startCluster
argument_list|(
name|config
argument_list|,
name|allDiskTypes
argument_list|,
name|numOfDns
argument_list|,
name|STORAGES_PER_DATANODE
argument_list|,
name|CAPACITY
argument_list|)
expr_stmt|;
name|dfs
operator|=
name|hdfsCluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|writeContent
argument_list|(
name|FILE
argument_list|,
operator|(
name|short
operator|)
literal|5
argument_list|)
expr_stmt|;
comment|// Change policy to COLD
name|dfs
operator|.
name|setStoragePolicy
argument_list|(
operator|new
name|Path
argument_list|(
name|FILE
argument_list|)
argument_list|,
name|COLD
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|satisfyStoragePolicy
argument_list|(
operator|new
name|Path
argument_list|(
name|FILE
argument_list|)
argument_list|)
expr_stmt|;
name|hdfsCluster
operator|.
name|triggerHeartbeats
argument_list|()
expr_stmt|;
comment|// Wait till StorgePolicySatisfier identified that block to move to
comment|// ARCHIVE area.
name|DFSTestUtil
operator|.
name|waitExpectedStorageType
argument_list|(
name|FILE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
literal|2
argument_list|,
literal|30000
argument_list|,
name|dfs
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitExpectedStorageType
argument_list|(
name|FILE
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
literal|3
argument_list|,
literal|30000
argument_list|,
name|dfs
argument_list|)
expr_stmt|;
name|waitForBlocksMovementAttemptReport
argument_list|(
literal|1
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|shutdownCluster
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Tests that moving block storage with in the same datanode. Let's say we    * have DN1[DISK,ARCHIVE], DN2[DISK, SSD], DN3[DISK,RAM_DISK] when    * storagepolicy set to ONE_SSD and request satisfyStoragePolicy, then block    * should move to DN2[SSD] successfully.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testBlockMoveInSameDatanodeWithONESSD ()
specifier|public
name|void
name|testBlockMoveInSameDatanodeWithONESSD
parameter_list|()
throws|throws
name|Exception
block|{
name|StorageType
index|[]
index|[]
name|diskTypes
init|=
operator|new
name|StorageType
index|[]
index|[]
block|{
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|SSD
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|RAM_DISK
block|}
block|}
decl_stmt|;
name|config
operator|.
name|setLong
argument_list|(
literal|"dfs.block.size"
argument_list|,
name|DEFAULT_BLOCK_SIZE
argument_list|)
expr_stmt|;
try|try
block|{
name|hdfsCluster
operator|=
name|startCluster
argument_list|(
name|config
argument_list|,
name|diskTypes
argument_list|,
name|NUM_OF_DATANODES
argument_list|,
name|STORAGES_PER_DATANODE
argument_list|,
name|CAPACITY
argument_list|)
expr_stmt|;
name|dfs
operator|=
name|hdfsCluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|writeContent
argument_list|(
name|FILE
argument_list|)
expr_stmt|;
comment|// Change policy to ONE_SSD
name|dfs
operator|.
name|setStoragePolicy
argument_list|(
operator|new
name|Path
argument_list|(
name|FILE
argument_list|)
argument_list|,
name|ONE_SSD
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|satisfyStoragePolicy
argument_list|(
operator|new
name|Path
argument_list|(
name|FILE
argument_list|)
argument_list|)
expr_stmt|;
name|hdfsCluster
operator|.
name|triggerHeartbeats
argument_list|()
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitExpectedStorageType
argument_list|(
name|FILE
argument_list|,
name|StorageType
operator|.
name|SSD
argument_list|,
literal|1
argument_list|,
literal|30000
argument_list|,
name|dfs
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitExpectedStorageType
argument_list|(
name|FILE
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
literal|2
argument_list|,
literal|30000
argument_list|,
name|dfs
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|shutdownCluster
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Tests that moving block storage with in the same datanode and remote node.    * Let's say we have DN1[DISK,ARCHIVE], DN2[ARCHIVE, SSD], DN3[DISK,DISK],    * DN4[DISK,DISK] when storagepolicy set to WARM and request    * satisfyStoragePolicy, then block should move to DN1[ARCHIVE] and    * DN2[ARCHIVE] successfully.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testBlockMoveInSameAndRemoteDatanodesWithWARM ()
specifier|public
name|void
name|testBlockMoveInSameAndRemoteDatanodesWithWARM
parameter_list|()
throws|throws
name|Exception
block|{
name|StorageType
index|[]
index|[]
name|diskTypes
init|=
operator|new
name|StorageType
index|[]
index|[]
block|{
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|,
block|{
name|StorageType
operator|.
name|ARCHIVE
block|,
name|StorageType
operator|.
name|SSD
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|}
block|}
decl_stmt|;
name|config
operator|.
name|setLong
argument_list|(
literal|"dfs.block.size"
argument_list|,
name|DEFAULT_BLOCK_SIZE
argument_list|)
expr_stmt|;
try|try
block|{
name|hdfsCluster
operator|=
name|startCluster
argument_list|(
name|config
argument_list|,
name|diskTypes
argument_list|,
name|diskTypes
operator|.
name|length
argument_list|,
name|STORAGES_PER_DATANODE
argument_list|,
name|CAPACITY
argument_list|)
expr_stmt|;
name|dfs
operator|=
name|hdfsCluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|writeContent
argument_list|(
name|FILE
argument_list|)
expr_stmt|;
comment|// Change policy to WARM
name|dfs
operator|.
name|setStoragePolicy
argument_list|(
operator|new
name|Path
argument_list|(
name|FILE
argument_list|)
argument_list|,
literal|"WARM"
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|satisfyStoragePolicy
argument_list|(
operator|new
name|Path
argument_list|(
name|FILE
argument_list|)
argument_list|)
expr_stmt|;
name|hdfsCluster
operator|.
name|triggerHeartbeats
argument_list|()
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitExpectedStorageType
argument_list|(
name|FILE
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
literal|1
argument_list|,
literal|30000
argument_list|,
name|dfs
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitExpectedStorageType
argument_list|(
name|FILE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
literal|2
argument_list|,
literal|30000
argument_list|,
name|dfs
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|shutdownCluster
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * If replica with expected storage type already exist in source DN then that    * DN should be skipped.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testSPSWhenReplicaWithExpectedStorageAlreadyAvailableInSource ()
specifier|public
name|void
name|testSPSWhenReplicaWithExpectedStorageAlreadyAvailableInSource
parameter_list|()
throws|throws
name|Exception
block|{
name|StorageType
index|[]
index|[]
name|diskTypes
init|=
operator|new
name|StorageType
index|[]
index|[]
block|{
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|}
decl_stmt|;
try|try
block|{
name|hdfsCluster
operator|=
name|startCluster
argument_list|(
name|config
argument_list|,
name|diskTypes
argument_list|,
name|diskTypes
operator|.
name|length
argument_list|,
name|STORAGES_PER_DATANODE
argument_list|,
name|CAPACITY
argument_list|)
expr_stmt|;
name|dfs
operator|=
name|hdfsCluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
comment|// 1. Write two replica on disk
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
operator|new
name|Path
argument_list|(
name|FILE
argument_list|)
argument_list|,
name|DEFAULT_BLOCK_SIZE
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// 2. Change policy to COLD, so third replica will be written to ARCHIVE.
name|dfs
operator|.
name|setStoragePolicy
argument_list|(
operator|new
name|Path
argument_list|(
name|FILE
argument_list|)
argument_list|,
literal|"COLD"
argument_list|)
expr_stmt|;
comment|// 3.Change replication factor to 3.
name|dfs
operator|.
name|setReplication
argument_list|(
operator|new
name|Path
argument_list|(
name|FILE
argument_list|)
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitExpectedStorageType
argument_list|(
name|FILE
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
literal|2
argument_list|,
literal|30000
argument_list|,
name|dfs
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitExpectedStorageType
argument_list|(
name|FILE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
literal|1
argument_list|,
literal|30000
argument_list|,
name|dfs
argument_list|)
expr_stmt|;
comment|// 4. Change policy to HOT, so we can move the all block to DISK.
name|dfs
operator|.
name|setStoragePolicy
argument_list|(
operator|new
name|Path
argument_list|(
name|FILE
argument_list|)
argument_list|,
literal|"HOT"
argument_list|)
expr_stmt|;
comment|// 4. Satisfy the policy.
name|dfs
operator|.
name|satisfyStoragePolicy
argument_list|(
operator|new
name|Path
argument_list|(
name|FILE
argument_list|)
argument_list|)
expr_stmt|;
comment|// 5. Block should move successfully .
name|DFSTestUtil
operator|.
name|waitExpectedStorageType
argument_list|(
name|FILE
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
literal|3
argument_list|,
literal|30000
argument_list|,
name|dfs
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|shutdownCluster
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Tests that movements should not be assigned when there is no space in    * target DN.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testChooseInSameDatanodeWithONESSDShouldNotChooseIfNoSpace ()
specifier|public
name|void
name|testChooseInSameDatanodeWithONESSDShouldNotChooseIfNoSpace
parameter_list|()
throws|throws
name|Exception
block|{
name|StorageType
index|[]
index|[]
name|diskTypes
init|=
operator|new
name|StorageType
index|[]
index|[]
block|{
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|SSD
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|}
block|}
decl_stmt|;
name|config
operator|.
name|setLong
argument_list|(
literal|"dfs.block.size"
argument_list|,
literal|2
operator|*
name|DEFAULT_BLOCK_SIZE
argument_list|)
expr_stmt|;
name|long
name|dnCapacity
init|=
literal|1024
operator|*
name|DEFAULT_BLOCK_SIZE
operator|+
operator|(
literal|2
operator|*
name|DEFAULT_BLOCK_SIZE
operator|-
literal|1
operator|)
decl_stmt|;
try|try
block|{
name|hdfsCluster
operator|=
name|startCluster
argument_list|(
name|config
argument_list|,
name|diskTypes
argument_list|,
name|NUM_OF_DATANODES
argument_list|,
name|STORAGES_PER_DATANODE
argument_list|,
name|dnCapacity
argument_list|)
expr_stmt|;
name|dfs
operator|=
name|hdfsCluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|writeContent
argument_list|(
name|FILE
argument_list|)
expr_stmt|;
comment|// Change policy to ONE_SSD
name|dfs
operator|.
name|setStoragePolicy
argument_list|(
operator|new
name|Path
argument_list|(
name|FILE
argument_list|)
argument_list|,
name|ONE_SSD
argument_list|)
expr_stmt|;
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
literal|"/testChooseInSameDatanode"
argument_list|)
decl_stmt|;
specifier|final
name|FSDataOutputStream
name|out
init|=
name|dfs
operator|.
name|create
argument_list|(
name|filePath
argument_list|,
literal|false
argument_list|,
literal|100
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|2
operator|*
name|DEFAULT_BLOCK_SIZE
argument_list|)
decl_stmt|;
try|try
block|{
name|dfs
operator|.
name|setStoragePolicy
argument_list|(
name|filePath
argument_list|,
name|ONE_SSD
argument_list|)
expr_stmt|;
comment|// Try to fill up SSD part by writing content
name|long
name|remaining
init|=
name|dfs
operator|.
name|getStatus
argument_list|()
operator|.
name|getRemaining
argument_list|()
operator|/
operator|(
literal|3
operator|*
literal|2
operator|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|remaining
condition|;
name|i
operator|++
control|)
block|{
name|out
operator|.
name|write
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|hdfsCluster
operator|.
name|triggerHeartbeats
argument_list|()
expr_stmt|;
name|ArrayList
argument_list|<
name|DataNode
argument_list|>
name|dataNodes
init|=
name|hdfsCluster
operator|.
name|getDataNodes
argument_list|()
decl_stmt|;
comment|// Temporarily disable heart beats, so that we can assert whether any
comment|// items schedules for DNs even though DN's does not have space to write.
comment|// Disabling heart beats can keep scheduled items on DatanodeDescriptor
comment|// itself.
for|for
control|(
name|DataNode
name|dataNode
range|:
name|dataNodes
control|)
block|{
name|DataNodeTestUtils
operator|.
name|setHeartbeatsDisabledForTests
argument_list|(
name|dataNode
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|dfs
operator|.
name|satisfyStoragePolicy
argument_list|(
operator|new
name|Path
argument_list|(
name|FILE
argument_list|)
argument_list|)
expr_stmt|;
comment|// Wait for items to be processed
name|waitForAttemptedItems
argument_list|(
literal|1
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
comment|// Make sure no items assigned for movements
name|Set
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|dns
init|=
name|hdfsCluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getDatanodes
argument_list|()
decl_stmt|;
for|for
control|(
name|DatanodeDescriptor
name|dd
range|:
name|dns
control|)
block|{
name|assertNull
argument_list|(
name|dd
operator|.
name|getBlocksToMoveStorages
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Enable heart beats now
for|for
control|(
name|DataNode
name|dataNode
range|:
name|dataNodes
control|)
block|{
name|DataNodeTestUtils
operator|.
name|setHeartbeatsDisabledForTests
argument_list|(
name|dataNode
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|hdfsCluster
operator|.
name|triggerHeartbeats
argument_list|()
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitExpectedStorageType
argument_list|(
name|FILE
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
literal|3
argument_list|,
literal|30000
argument_list|,
name|dfs
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitExpectedStorageType
argument_list|(
name|FILE
argument_list|,
name|StorageType
operator|.
name|SSD
argument_list|,
literal|0
argument_list|,
literal|30000
argument_list|,
name|dfs
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|shutdownCluster
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Tests that Xattrs should be cleaned if satisfy storage policy called on EC    * file with unsuitable storage policy set.    *    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testSPSShouldNotLeakXattrIfSatisfyStoragePolicyCallOnECFiles ()
specifier|public
name|void
name|testSPSShouldNotLeakXattrIfSatisfyStoragePolicyCallOnECFiles
parameter_list|()
throws|throws
name|Exception
block|{
name|StorageType
index|[]
index|[]
name|diskTypes
init|=
operator|new
name|StorageType
index|[]
index|[]
block|{
block|{
name|StorageType
operator|.
name|SSD
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|SSD
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|SSD
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|SSD
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|SSD
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|SSD
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|SSD
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|SSD
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|SSD
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|SSD
block|}
block|}
decl_stmt|;
name|int
name|defaultStripedBlockSize
init|=
name|StripedFileTestUtil
operator|.
name|getDefaultECPolicy
argument_list|()
operator|.
name|getCellSize
argument_list|()
operator|*
literal|4
decl_stmt|;
name|config
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|defaultStripedBlockSize
argument_list|)
expr_stmt|;
name|config
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|config
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REDUNDANCY_INTERVAL_SECONDS_KEY
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|config
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REDUNDANCY_CONSIDERLOAD_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|hdfsCluster
operator|=
name|startCluster
argument_list|(
name|config
argument_list|,
name|diskTypes
argument_list|,
name|diskTypes
operator|.
name|length
argument_list|,
name|STORAGES_PER_DATANODE
argument_list|,
name|CAPACITY
argument_list|)
expr_stmt|;
name|dfs
operator|=
name|hdfsCluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|dfs
operator|.
name|enableErasureCodingPolicy
argument_list|(
name|StripedFileTestUtil
operator|.
name|getDefaultECPolicy
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// set "/foo" directory with ONE_SSD storage policy.
name|ClientProtocol
name|client
init|=
name|NameNodeProxies
operator|.
name|createProxy
argument_list|(
name|config
argument_list|,
name|hdfsCluster
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
operator|.
name|getUri
argument_list|()
argument_list|,
name|ClientProtocol
operator|.
name|class
argument_list|)
operator|.
name|getProxy
argument_list|()
decl_stmt|;
name|String
name|fooDir
init|=
literal|"/foo"
decl_stmt|;
name|client
operator|.
name|mkdirs
argument_list|(
name|fooDir
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|777
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// set an EC policy on "/foo" directory
name|client
operator|.
name|setErasureCodingPolicy
argument_list|(
name|fooDir
argument_list|,
name|StripedFileTestUtil
operator|.
name|getDefaultECPolicy
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// write file to fooDir
specifier|final
name|String
name|testFile
init|=
literal|"/foo/bar"
decl_stmt|;
name|long
name|fileLen
init|=
literal|20
operator|*
name|defaultStripedBlockSize
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
operator|new
name|Path
argument_list|(
name|testFile
argument_list|)
argument_list|,
name|fileLen
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// ONESSD is unsuitable storage policy on EC files
name|client
operator|.
name|setStoragePolicy
argument_list|(
name|fooDir
argument_list|,
name|HdfsConstants
operator|.
name|ONESSD_STORAGE_POLICY_NAME
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|satisfyStoragePolicy
argument_list|(
operator|new
name|Path
argument_list|(
name|testFile
argument_list|)
argument_list|)
expr_stmt|;
comment|// Thread.sleep(9000); // To make sure SPS triggered
comment|// verify storage types and locations
name|LocatedBlocks
name|locatedBlocks
init|=
name|client
operator|.
name|getBlockLocations
argument_list|(
name|testFile
argument_list|,
literal|0
argument_list|,
name|fileLen
argument_list|)
decl_stmt|;
for|for
control|(
name|LocatedBlock
name|lb
range|:
name|locatedBlocks
operator|.
name|getLocatedBlocks
argument_list|()
control|)
block|{
for|for
control|(
name|StorageType
name|type
range|:
name|lb
operator|.
name|getStorageTypes
argument_list|()
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Make sure satisfy xattr has been removed.
name|DFSTestUtil
operator|.
name|waitForXattrRemoved
argument_list|(
name|testFile
argument_list|,
name|XATTR_SATISFY_STORAGE_POLICY
argument_list|,
name|hdfsCluster
operator|.
name|getNamesystem
argument_list|()
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|shutdownCluster
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test SPS with empty file.    * 1. Create one empty file.    * 2. Call satisfyStoragePolicy for empty file.    * 3. SPS should skip this file and xattr should not be added for empty file.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testSPSWhenFileLengthIsZero ()
specifier|public
name|void
name|testSPSWhenFileLengthIsZero
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|hdfsCluster
operator|=
name|startCluster
argument_list|(
name|config
argument_list|,
name|allDiskTypes
argument_list|,
name|NUM_OF_DATANODES
argument_list|,
name|STORAGES_PER_DATANODE
argument_list|,
name|CAPACITY
argument_list|)
expr_stmt|;
name|hdfsCluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|DistributedFileSystem
name|fs
init|=
name|hdfsCluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
literal|"/zeroSizeFile"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|filePath
argument_list|,
literal|0
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|FSEditLog
name|editlog
init|=
name|hdfsCluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getEditLog
argument_list|()
decl_stmt|;
name|long
name|lastWrittenTxId
init|=
name|editlog
operator|.
name|getLastWrittenTxId
argument_list|()
decl_stmt|;
name|fs
operator|.
name|satisfyStoragePolicy
argument_list|(
name|filePath
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Xattr should not be added for the file"
argument_list|,
name|lastWrittenTxId
argument_list|,
name|editlog
operator|.
name|getLastWrittenTxId
argument_list|()
argument_list|)
expr_stmt|;
name|INode
name|inode
init|=
name|hdfsCluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getFSDirectory
argument_list|()
operator|.
name|getINode
argument_list|(
name|filePath
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"XAttrFeature should be null for file"
argument_list|,
name|inode
operator|.
name|getXAttrFeature
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|shutdownCluster
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test SPS for low redundant file blocks.    * 1. Create cluster with 3 datanode.    * 1. Create one file with 3 replica.    * 2. Set policy and call satisfyStoragePolicy for file.    * 3. Stop NameNode and Datanodes.    * 4. Start NameNode with 2 datanode and wait for block movement.    * 5. Start third datanode.    * 6. Third Datanode replica also should be moved in proper    * sorage based on policy.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testSPSWhenFileHasLowRedundancyBlocks ()
specifier|public
name|void
name|testSPSWhenFileHasLowRedundancyBlocks
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|config
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_STORAGE_POLICY_SATISFIER_RECHECK_TIMEOUT_MILLIS_KEY
argument_list|,
literal|"3000"
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_STORAGE_POLICY_SATISFIER_SELF_RETRY_TIMEOUT_MILLIS_KEY
argument_list|,
literal|"5000"
argument_list|)
expr_stmt|;
name|StorageType
index|[]
index|[]
name|newtypes
init|=
operator|new
name|StorageType
index|[]
index|[]
block|{
block|{
name|StorageType
operator|.
name|ARCHIVE
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|ARCHIVE
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|ARCHIVE
block|,
name|StorageType
operator|.
name|DISK
block|}
block|}
decl_stmt|;
name|hdfsCluster
operator|=
name|startCluster
argument_list|(
name|config
argument_list|,
name|newtypes
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
name|CAPACITY
argument_list|)
expr_stmt|;
name|hdfsCluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|DistributedFileSystem
name|fs
init|=
name|hdfsCluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
literal|"/zeroSizeFile"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|filePath
argument_list|,
literal|1024
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setStoragePolicy
argument_list|(
name|filePath
argument_list|,
literal|"COLD"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|DataNodeProperties
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|hdfsCluster
operator|.
name|stopDataNode
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|hdfsCluster
operator|.
name|stopDataNode
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|hdfsCluster
operator|.
name|stopDataNode
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|restartNamenode
argument_list|()
expr_stmt|;
name|hdfsCluster
operator|.
name|restartDataNode
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|hdfsCluster
operator|.
name|restartDataNode
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|hdfsCluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fs
operator|.
name|satisfyStoragePolicy
argument_list|(
name|filePath
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitExpectedStorageType
argument_list|(
name|filePath
operator|.
name|toString
argument_list|()
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
literal|2
argument_list|,
literal|30000
argument_list|,
name|hdfsCluster
operator|.
name|getFileSystem
argument_list|()
argument_list|)
expr_stmt|;
name|hdfsCluster
operator|.
name|restartDataNode
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitExpectedStorageType
argument_list|(
name|filePath
operator|.
name|toString
argument_list|()
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
literal|3
argument_list|,
literal|30000
argument_list|,
name|hdfsCluster
operator|.
name|getFileSystem
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|shutdownCluster
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test SPS for extra redundant file blocks.    * 1. Create cluster with 5 datanode.    * 2. Create one file with 5 replica.    * 3. Set file replication to 3.    * 4. Set policy and call satisfyStoragePolicy for file.    * 5. Block should be moved successfully.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testSPSWhenFileHasExcessRedundancyBlocks ()
specifier|public
name|void
name|testSPSWhenFileHasExcessRedundancyBlocks
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|config
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_STORAGE_POLICY_SATISFIER_RECHECK_TIMEOUT_MILLIS_KEY
argument_list|,
literal|"3000"
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_STORAGE_POLICY_SATISFIER_SELF_RETRY_TIMEOUT_MILLIS_KEY
argument_list|,
literal|"5000"
argument_list|)
expr_stmt|;
name|StorageType
index|[]
index|[]
name|newtypes
init|=
operator|new
name|StorageType
index|[]
index|[]
block|{
block|{
name|StorageType
operator|.
name|ARCHIVE
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|ARCHIVE
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|ARCHIVE
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|ARCHIVE
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|ARCHIVE
block|,
name|StorageType
operator|.
name|DISK
block|}
block|}
decl_stmt|;
name|hdfsCluster
operator|=
name|startCluster
argument_list|(
name|config
argument_list|,
name|newtypes
argument_list|,
literal|5
argument_list|,
literal|2
argument_list|,
name|CAPACITY
argument_list|)
expr_stmt|;
name|hdfsCluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|DistributedFileSystem
name|fs
init|=
name|hdfsCluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
literal|"/zeroSizeFile"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|filePath
argument_list|,
literal|1024
argument_list|,
operator|(
name|short
operator|)
literal|5
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setReplication
argument_list|(
name|filePath
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
expr_stmt|;
name|LogCapturer
name|logs
init|=
name|GenericTestUtils
operator|.
name|LogCapturer
operator|.
name|captureLogs
argument_list|(
name|LogFactory
operator|.
name|getLog
argument_list|(
name|BlockStorageMovementAttemptedItems
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setStoragePolicy
argument_list|(
name|filePath
argument_list|,
literal|"COLD"
argument_list|)
expr_stmt|;
name|fs
operator|.
name|satisfyStoragePolicy
argument_list|(
name|filePath
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitExpectedStorageType
argument_list|(
name|filePath
operator|.
name|toString
argument_list|()
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
literal|3
argument_list|,
literal|60000
argument_list|,
name|hdfsCluster
operator|.
name|getFileSystem
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Log output does not contain expected log message: "
argument_list|,
name|logs
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"some of the blocks are low redundant"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|shutdownCluster
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test SPS for empty directory, xAttr should be removed.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testSPSForEmptyDirectory ()
specifier|public
name|void
name|testSPSForEmptyDirectory
parameter_list|()
throws|throws
name|IOException
throws|,
name|TimeoutException
throws|,
name|InterruptedException
block|{
try|try
block|{
name|hdfsCluster
operator|=
name|startCluster
argument_list|(
name|config
argument_list|,
name|allDiskTypes
argument_list|,
name|NUM_OF_DATANODES
argument_list|,
name|STORAGES_PER_DATANODE
argument_list|,
name|CAPACITY
argument_list|)
expr_stmt|;
name|hdfsCluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|DistributedFileSystem
name|fs
init|=
name|hdfsCluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|emptyDir
init|=
operator|new
name|Path
argument_list|(
literal|"/emptyDir"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|emptyDir
argument_list|)
expr_stmt|;
name|fs
operator|.
name|satisfyStoragePolicy
argument_list|(
name|emptyDir
argument_list|)
expr_stmt|;
comment|// Make sure satisfy xattr has been removed.
name|DFSTestUtil
operator|.
name|waitForXattrRemoved
argument_list|(
literal|"/emptyDir"
argument_list|,
name|XATTR_SATISFY_STORAGE_POLICY
argument_list|,
name|hdfsCluster
operator|.
name|getNamesystem
argument_list|()
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|shutdownCluster
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test SPS for not exist directory.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testSPSForNonExistDirectory ()
specifier|public
name|void
name|testSPSForNonExistDirectory
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|hdfsCluster
operator|=
name|startCluster
argument_list|(
name|config
argument_list|,
name|allDiskTypes
argument_list|,
name|NUM_OF_DATANODES
argument_list|,
name|STORAGES_PER_DATANODE
argument_list|,
name|CAPACITY
argument_list|)
expr_stmt|;
name|hdfsCluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|DistributedFileSystem
name|fs
init|=
name|hdfsCluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|emptyDir
init|=
operator|new
name|Path
argument_list|(
literal|"/emptyDir"
argument_list|)
decl_stmt|;
try|try
block|{
name|fs
operator|.
name|satisfyStoragePolicy
argument_list|(
name|emptyDir
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"FileNotFoundException should throw"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
comment|// nothing to do
block|}
block|}
finally|finally
block|{
name|shutdownCluster
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test SPS for directory tree which doesn't have files.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testSPSWithDirectoryTreeWithoutFile ()
specifier|public
name|void
name|testSPSWithDirectoryTreeWithoutFile
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|hdfsCluster
operator|=
name|startCluster
argument_list|(
name|config
argument_list|,
name|allDiskTypes
argument_list|,
name|NUM_OF_DATANODES
argument_list|,
name|STORAGES_PER_DATANODE
argument_list|,
name|CAPACITY
argument_list|)
expr_stmt|;
name|hdfsCluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
comment|// Create directories
comment|/*        *                   root        *                    |        *           A--------C--------D        *                    |        *               G----H----I        *                    |        *                    O        */
name|DistributedFileSystem
name|fs
init|=
name|hdfsCluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/root/C/H/O"
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/root/A"
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/root/D"
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/root/C/G"
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/root/C/I"
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|satisfyStoragePolicy
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/root"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure satisfy xattr has been removed.
name|DFSTestUtil
operator|.
name|waitForXattrRemoved
argument_list|(
literal|"/root"
argument_list|,
name|XATTR_SATISFY_STORAGE_POLICY
argument_list|,
name|hdfsCluster
operator|.
name|getNamesystem
argument_list|()
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|shutdownCluster
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test SPS for directory which has multilevel directories.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testMultipleLevelDirectoryForSatisfyStoragePolicy ()
specifier|public
name|void
name|testMultipleLevelDirectoryForSatisfyStoragePolicy
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|StorageType
index|[]
index|[]
name|diskTypes
init|=
operator|new
name|StorageType
index|[]
index|[]
block|{
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|,
block|{
name|StorageType
operator|.
name|ARCHIVE
block|,
name|StorageType
operator|.
name|SSD
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|}
block|}
decl_stmt|;
name|config
operator|.
name|setLong
argument_list|(
literal|"dfs.block.size"
argument_list|,
name|DEFAULT_BLOCK_SIZE
argument_list|)
expr_stmt|;
name|hdfsCluster
operator|=
name|startCluster
argument_list|(
name|config
argument_list|,
name|diskTypes
argument_list|,
name|diskTypes
operator|.
name|length
argument_list|,
name|STORAGES_PER_DATANODE
argument_list|,
name|CAPACITY
argument_list|)
expr_stmt|;
name|dfs
operator|=
name|hdfsCluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|createDirectoryTree
argument_list|(
name|dfs
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|files
init|=
name|getDFSListOfTree
argument_list|()
decl_stmt|;
name|dfs
operator|.
name|setStoragePolicy
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/root"
argument_list|)
argument_list|,
name|COLD
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|satisfyStoragePolicy
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/root"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|fileName
range|:
name|files
control|)
block|{
comment|// Wait till the block is moved to ARCHIVE
name|DFSTestUtil
operator|.
name|waitExpectedStorageType
argument_list|(
name|fileName
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
literal|2
argument_list|,
literal|30000
argument_list|,
name|dfs
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|shutdownCluster
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test SPS for batch processing.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|3000000
argument_list|)
DECL|method|testBatchProcessingForSPSDirectory ()
specifier|public
name|void
name|testBatchProcessingForSPSDirectory
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|StorageType
index|[]
index|[]
name|diskTypes
init|=
operator|new
name|StorageType
index|[]
index|[]
block|{
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|,
block|{
name|StorageType
operator|.
name|ARCHIVE
block|,
name|StorageType
operator|.
name|SSD
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|}
block|}
decl_stmt|;
name|config
operator|.
name|setLong
argument_list|(
literal|"dfs.block.size"
argument_list|,
name|DEFAULT_BLOCK_SIZE
argument_list|)
expr_stmt|;
comment|// Set queue max capacity
name|config
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_STORAGE_POLICY_SATISFIER_QUEUE_LIMIT_KEY
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|hdfsCluster
operator|=
name|startCluster
argument_list|(
name|config
argument_list|,
name|diskTypes
argument_list|,
name|diskTypes
operator|.
name|length
argument_list|,
name|STORAGES_PER_DATANODE
argument_list|,
name|CAPACITY
argument_list|)
expr_stmt|;
name|dfs
operator|=
name|hdfsCluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|createDirectoryTree
argument_list|(
name|dfs
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|files
init|=
name|getDFSListOfTree
argument_list|()
decl_stmt|;
name|LogCapturer
name|logs
init|=
name|GenericTestUtils
operator|.
name|LogCapturer
operator|.
name|captureLogs
argument_list|(
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FSTreeTraverser
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|setStoragePolicy
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/root"
argument_list|)
argument_list|,
name|COLD
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|satisfyStoragePolicy
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/root"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|fileName
range|:
name|files
control|)
block|{
comment|// Wait till the block is moved to ARCHIVE
name|DFSTestUtil
operator|.
name|waitExpectedStorageType
argument_list|(
name|fileName
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
literal|2
argument_list|,
literal|30000
argument_list|,
name|dfs
argument_list|)
expr_stmt|;
block|}
name|waitForBlocksMovementAttemptReport
argument_list|(
name|files
operator|.
name|size
argument_list|()
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
name|String
name|expectedLogMessage
init|=
literal|"StorageMovementNeeded queue remaining"
operator|+
literal|" capacity is zero"
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Log output does not contain expected log message: "
operator|+
name|expectedLogMessage
argument_list|,
name|logs
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
name|expectedLogMessage
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|shutdownCluster
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    *  Test traverse when parent got deleted.    *  1. Delete /root when traversing Q    *  2. U, R, S should not be in queued.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testTraverseWhenParentDeleted ()
specifier|public
name|void
name|testTraverseWhenParentDeleted
parameter_list|()
throws|throws
name|Exception
block|{
name|StorageType
index|[]
index|[]
name|diskTypes
init|=
operator|new
name|StorageType
index|[]
index|[]
block|{
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|,
block|{
name|StorageType
operator|.
name|ARCHIVE
block|,
name|StorageType
operator|.
name|SSD
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|}
block|}
decl_stmt|;
name|config
operator|.
name|setLong
argument_list|(
literal|"dfs.block.size"
argument_list|,
name|DEFAULT_BLOCK_SIZE
argument_list|)
expr_stmt|;
name|config
operator|.
name|setInt
argument_list|(
name|DFS_STORAGE_POLICY_SATISFIER_QUEUE_LIMIT_KEY
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|hdfsCluster
operator|=
name|startCluster
argument_list|(
name|config
argument_list|,
name|diskTypes
argument_list|,
name|diskTypes
operator|.
name|length
argument_list|,
name|STORAGES_PER_DATANODE
argument_list|,
name|CAPACITY
argument_list|)
expr_stmt|;
name|dfs
operator|=
name|hdfsCluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|createDirectoryTree
argument_list|(
name|dfs
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|expectedTraverseOrder
init|=
name|getDFSListOfTree
argument_list|()
decl_stmt|;
comment|//Remove files which will not be traverse when parent is deleted
name|expectedTraverseOrder
operator|.
name|remove
argument_list|(
literal|"/root/D/L/R"
argument_list|)
expr_stmt|;
name|expectedTraverseOrder
operator|.
name|remove
argument_list|(
literal|"/root/D/L/S"
argument_list|)
expr_stmt|;
name|expectedTraverseOrder
operator|.
name|remove
argument_list|(
literal|"/root/D/L/Q/U"
argument_list|)
expr_stmt|;
name|FSDirectory
name|fsDir
init|=
name|hdfsCluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getFSDirectory
argument_list|()
decl_stmt|;
comment|//Queue limit can control the traverse logic to wait for some free
comment|//entry in queue. After 10 files, traverse control will be on U.
name|StoragePolicySatisfier
name|sps
init|=
operator|new
name|StoragePolicySatisfier
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|Context
name|ctxt
init|=
operator|new
name|IntraSPSNameNodeContext
argument_list|(
name|hdfsCluster
operator|.
name|getNamesystem
argument_list|()
argument_list|,
name|hdfsCluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
argument_list|,
name|sps
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isInSafeMode
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isRunning
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
name|sps
operator|.
name|init
argument_list|(
name|ctxt
argument_list|)
expr_stmt|;
name|sps
operator|.
name|getStorageMovementQueue
argument_list|()
operator|.
name|activate
argument_list|()
expr_stmt|;
name|INode
name|rootINode
init|=
name|fsDir
operator|.
name|getINode
argument_list|(
literal|"/root"
argument_list|)
decl_stmt|;
name|hdfsCluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getSPSManager
argument_list|()
operator|.
name|addPathId
argument_list|(
name|rootINode
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|//Wait for thread to reach U.
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/root/D/L"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTraversal
argument_list|(
name|expectedTraverseOrder
argument_list|,
name|fsDir
argument_list|,
name|sps
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/root"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    *  Test traverse when root parent got deleted.    *  1. Delete L when traversing Q    *  2. E, M, U, R, S should not be in queued.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testTraverseWhenRootParentDeleted ()
specifier|public
name|void
name|testTraverseWhenRootParentDeleted
parameter_list|()
throws|throws
name|Exception
block|{
name|StorageType
index|[]
index|[]
name|diskTypes
init|=
operator|new
name|StorageType
index|[]
index|[]
block|{
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|,
block|{
name|StorageType
operator|.
name|ARCHIVE
block|,
name|StorageType
operator|.
name|SSD
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|}
block|}
decl_stmt|;
name|config
operator|.
name|setLong
argument_list|(
literal|"dfs.block.size"
argument_list|,
name|DEFAULT_BLOCK_SIZE
argument_list|)
expr_stmt|;
name|config
operator|.
name|setInt
argument_list|(
name|DFS_STORAGE_POLICY_SATISFIER_QUEUE_LIMIT_KEY
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|hdfsCluster
operator|=
name|startCluster
argument_list|(
name|config
argument_list|,
name|diskTypes
argument_list|,
name|diskTypes
operator|.
name|length
argument_list|,
name|STORAGES_PER_DATANODE
argument_list|,
name|CAPACITY
argument_list|)
expr_stmt|;
name|dfs
operator|=
name|hdfsCluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|createDirectoryTree
argument_list|(
name|dfs
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|expectedTraverseOrder
init|=
name|getDFSListOfTree
argument_list|()
decl_stmt|;
comment|// Remove files which will not be traverse when parent is deleted
name|expectedTraverseOrder
operator|.
name|remove
argument_list|(
literal|"/root/D/L/R"
argument_list|)
expr_stmt|;
name|expectedTraverseOrder
operator|.
name|remove
argument_list|(
literal|"/root/D/L/S"
argument_list|)
expr_stmt|;
name|expectedTraverseOrder
operator|.
name|remove
argument_list|(
literal|"/root/D/L/Q/U"
argument_list|)
expr_stmt|;
name|expectedTraverseOrder
operator|.
name|remove
argument_list|(
literal|"/root/D/M"
argument_list|)
expr_stmt|;
name|expectedTraverseOrder
operator|.
name|remove
argument_list|(
literal|"/root/E"
argument_list|)
expr_stmt|;
name|FSDirectory
name|fsDir
init|=
name|hdfsCluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getFSDirectory
argument_list|()
decl_stmt|;
comment|// Queue limit can control the traverse logic to wait for some free
comment|// entry in queue. After 10 files, traverse control will be on U.
name|StoragePolicySatisfier
name|sps
init|=
operator|new
name|StoragePolicySatisfier
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|Context
name|ctxt
init|=
operator|new
name|IntraSPSNameNodeContext
argument_list|(
name|hdfsCluster
operator|.
name|getNamesystem
argument_list|()
argument_list|,
name|hdfsCluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
argument_list|,
name|sps
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isInSafeMode
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isRunning
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
name|sps
operator|.
name|init
argument_list|(
name|ctxt
argument_list|)
expr_stmt|;
name|sps
operator|.
name|getStorageMovementQueue
argument_list|()
operator|.
name|activate
argument_list|()
expr_stmt|;
name|INode
name|rootINode
init|=
name|fsDir
operator|.
name|getINode
argument_list|(
literal|"/root"
argument_list|)
decl_stmt|;
name|hdfsCluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getSPSManager
argument_list|()
operator|.
name|addPathId
argument_list|(
name|rootINode
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Wait for thread to reach U.
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/root/D/L"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTraversal
argument_list|(
name|expectedTraverseOrder
argument_list|,
name|fsDir
argument_list|,
name|sps
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/root"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|assertTraversal (List<String> expectedTraverseOrder, FSDirectory fsDir, StoragePolicySatisfier sps)
specifier|private
name|void
name|assertTraversal
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|expectedTraverseOrder
parameter_list|,
name|FSDirectory
name|fsDir
parameter_list|,
name|StoragePolicySatisfier
name|sps
parameter_list|)
throws|throws
name|InterruptedException
block|{
comment|// Remove 10 element and make queue free, So other traversing will start.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|String
name|path
init|=
name|expectedTraverseOrder
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ItemInfo
name|itemInfo
init|=
name|sps
operator|.
name|getStorageMovementQueue
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|itemInfo
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|Long
name|trackId
init|=
name|itemInfo
operator|.
name|getFile
argument_list|()
decl_stmt|;
name|INode
name|inode
init|=
name|fsDir
operator|.
name|getInode
argument_list|(
name|trackId
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Failed to traverse tree, expected "
operator|+
name|path
operator|+
literal|" but got "
operator|+
name|inode
operator|.
name|getFullPathName
argument_list|()
argument_list|,
name|path
operator|.
name|equals
argument_list|(
name|inode
operator|.
name|getFullPathName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Wait to finish tree traverse
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
comment|// Check other element traversed in order and E, M, U, R, S should not be
comment|// added in queue which we already removed from expected list
for|for
control|(
name|String
name|path
range|:
name|expectedTraverseOrder
control|)
block|{
name|ItemInfo
name|itemInfo
init|=
name|sps
operator|.
name|getStorageMovementQueue
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|itemInfo
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|Long
name|trackId
init|=
name|itemInfo
operator|.
name|getFile
argument_list|()
decl_stmt|;
name|INode
name|inode
init|=
name|fsDir
operator|.
name|getInode
argument_list|(
name|trackId
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Failed to traverse tree, expected "
operator|+
name|path
operator|+
literal|" but got "
operator|+
name|inode
operator|.
name|getFullPathName
argument_list|()
argument_list|,
name|path
operator|.
name|equals
argument_list|(
name|inode
operator|.
name|getFullPathName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test storage move blocks while under replication block tasks exists in the    * system. So, both will share the max transfer streams.    *    * 1. Create cluster with 3 datanode.    * 2. Create 20 files with 2 replica.    * 3. Start 2 more DNs with DISK& SSD types    * 4. SetReplication factor for the 1st 10 files to 4 to trigger replica task    * 5. Set policy to SSD to the 2nd set of files from 11-20    * 6. Call SPS for 11-20 files to trigger move block tasks to new DNs    * 7. Wait for the under replica and SPS tasks completion    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testMoveBlocksWithUnderReplicatedBlocks ()
specifier|public
name|void
name|testMoveBlocksWithUnderReplicatedBlocks
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|config
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REPLICATION_MAX_STREAMS_KEY
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|config
operator|.
name|setLong
argument_list|(
literal|"dfs.block.size"
argument_list|,
name|DEFAULT_BLOCK_SIZE
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_STORAGE_POLICY_SATISFIER_RECHECK_TIMEOUT_MILLIS_KEY
argument_list|,
literal|"3000"
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_STORAGE_POLICY_SATISFIER_SELF_RETRY_TIMEOUT_MILLIS_KEY
argument_list|,
literal|"5000"
argument_list|)
expr_stmt|;
name|config
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_STORAGE_POLICY_SATISFIER_LOW_MAX_STREAMS_PREFERENCE_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|StorageType
index|[]
index|[]
name|storagetypes
init|=
operator|new
name|StorageType
index|[]
index|[]
block|{
block|{
name|StorageType
operator|.
name|ARCHIVE
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|ARCHIVE
block|,
name|StorageType
operator|.
name|DISK
block|}
block|}
decl_stmt|;
name|hdfsCluster
operator|=
name|startCluster
argument_list|(
name|config
argument_list|,
name|storagetypes
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
name|CAPACITY
argument_list|)
expr_stmt|;
name|hdfsCluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|dfs
operator|=
name|hdfsCluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
comment|// Below files will be used for pending replication block tasks.
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
literal|"/file"
operator|+
name|i
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|filePath
argument_list|,
name|DEFAULT_BLOCK_SIZE
operator|*
literal|5
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|StorageType
index|[]
index|[]
name|newtypes
init|=
operator|new
name|StorageType
index|[]
index|[]
block|{
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|SSD
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|SSD
block|}
block|}
decl_stmt|;
name|startAdditionalDNs
argument_list|(
name|config
argument_list|,
literal|2
argument_list|,
name|NUM_OF_DATANODES
argument_list|,
name|newtypes
argument_list|,
name|STORAGES_PER_DATANODE
argument_list|,
name|CAPACITY
argument_list|,
name|hdfsCluster
argument_list|)
expr_stmt|;
comment|// increase replication factor to 4 for the first 10 files and thus
comment|// initiate replica tasks
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
literal|"/file"
operator|+
name|i
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|setReplication
argument_list|(
name|filePath
argument_list|,
operator|(
name|short
operator|)
literal|4
argument_list|)
expr_stmt|;
block|}
comment|// invoke SPS for 11-20 files
for|for
control|(
name|int
name|i
init|=
literal|11
init|;
name|i
operator|<=
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
literal|"/file"
operator|+
name|i
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|setStoragePolicy
argument_list|(
name|filePath
argument_list|,
literal|"ALL_SSD"
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|satisfyStoragePolicy
argument_list|(
name|filePath
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
literal|"/file"
operator|+
name|i
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|waitExpectedStorageType
argument_list|(
name|filePath
operator|.
name|toString
argument_list|()
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
literal|4
argument_list|,
literal|60000
argument_list|,
name|hdfsCluster
operator|.
name|getFileSystem
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|11
init|;
name|i
operator|<=
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
literal|"/file"
operator|+
name|i
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|waitExpectedStorageType
argument_list|(
name|filePath
operator|.
name|toString
argument_list|()
argument_list|,
name|StorageType
operator|.
name|SSD
argument_list|,
literal|2
argument_list|,
literal|30000
argument_list|,
name|hdfsCluster
operator|.
name|getFileSystem
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|shutdownCluster
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testStoragePolicySatisfyPathStatus ()
specifier|public
name|void
name|testStoragePolicySatisfyPathStatus
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|config
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_STORAGE_POLICY_SATISFIER_RECHECK_TIMEOUT_MILLIS_KEY
argument_list|,
literal|"3000"
argument_list|)
expr_stmt|;
name|config
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_STORAGE_POLICY_SATISFIER_LOW_MAX_STREAMS_PREFERENCE_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|StorageType
index|[]
index|[]
name|storagetypes
init|=
operator|new
name|StorageType
index|[]
index|[]
block|{
block|{
name|StorageType
operator|.
name|ARCHIVE
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|ARCHIVE
block|,
name|StorageType
operator|.
name|DISK
block|}
block|}
decl_stmt|;
name|hdfsCluster
operator|=
name|startCluster
argument_list|(
name|config
argument_list|,
name|storagetypes
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
name|CAPACITY
argument_list|)
expr_stmt|;
name|hdfsCluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
comment|// BlockStorageMovementNeeded.setStatusClearanceElapsedTimeMs(200000);
name|dfs
operator|=
name|hdfsCluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
literal|"/file"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|filePath
argument_list|,
literal|1024
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|setStoragePolicy
argument_list|(
name|filePath
argument_list|,
literal|"COLD"
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|satisfyStoragePolicy
argument_list|(
name|filePath
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
name|StoragePolicySatisfyPathStatus
name|status
init|=
name|dfs
operator|.
name|getClient
argument_list|()
operator|.
name|checkStoragePolicySatisfyPathStatus
argument_list|(
name|filePath
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Status should be IN_PROGRESS/SUCCESS, but status is "
operator|+
name|status
argument_list|,
name|StoragePolicySatisfyPathStatus
operator|.
name|IN_PROGRESS
operator|.
name|equals
argument_list|(
name|status
argument_list|)
operator|||
name|StoragePolicySatisfyPathStatus
operator|.
name|SUCCESS
operator|.
name|equals
argument_list|(
name|status
argument_list|)
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitExpectedStorageType
argument_list|(
name|filePath
operator|.
name|toString
argument_list|()
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
literal|2
argument_list|,
literal|30000
argument_list|,
name|dfs
argument_list|)
expr_stmt|;
comment|// wait till status is SUCCESS
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
try|try
block|{
name|StoragePolicySatisfyPathStatus
name|status
init|=
name|dfs
operator|.
name|getClient
argument_list|()
operator|.
name|checkStoragePolicySatisfyPathStatus
argument_list|(
name|filePath
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|StoragePolicySatisfyPathStatus
operator|.
name|SUCCESS
operator|.
name|equals
argument_list|(
name|status
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Fail to get path status for sps"
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
argument_list|,
literal|100
argument_list|,
literal|60000
argument_list|)
expr_stmt|;
name|BlockStorageMovementNeeded
operator|.
name|setStatusClearanceElapsedTimeMs
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|// wait till status is NOT_AVAILABLE
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
try|try
block|{
name|StoragePolicySatisfyPathStatus
name|status
init|=
name|dfs
operator|.
name|getClient
argument_list|()
operator|.
name|checkStoragePolicySatisfyPathStatus
argument_list|(
name|filePath
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|StoragePolicySatisfyPathStatus
operator|.
name|NOT_AVAILABLE
operator|.
name|equals
argument_list|(
name|status
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Fail to get path status for sps"
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
argument_list|,
literal|100
argument_list|,
literal|60000
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|shutdownCluster
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testMaxRetryForFailedBlock ()
specifier|public
name|void
name|testMaxRetryForFailedBlock
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|config
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_STORAGE_POLICY_SATISFIER_RECHECK_TIMEOUT_MILLIS_KEY
argument_list|,
literal|"1000"
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_STORAGE_POLICY_SATISFIER_SELF_RETRY_TIMEOUT_MILLIS_KEY
argument_list|,
literal|"1000"
argument_list|)
expr_stmt|;
name|StorageType
index|[]
index|[]
name|storagetypes
init|=
operator|new
name|StorageType
index|[]
index|[]
block|{
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|}
block|}
decl_stmt|;
name|hdfsCluster
operator|=
name|startCluster
argument_list|(
name|config
argument_list|,
name|storagetypes
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
name|CAPACITY
argument_list|)
expr_stmt|;
name|hdfsCluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|dfs
operator|=
name|hdfsCluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
literal|"/retryFile"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|filePath
argument_list|,
name|DEFAULT_BLOCK_SIZE
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|setStoragePolicy
argument_list|(
name|filePath
argument_list|,
literal|"COLD"
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|satisfyStoragePolicy
argument_list|(
name|filePath
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|3000
operator|*
name|DFSConfigKeys
operator|.
name|DFS_STORAGE_POLICY_SATISFIER_MAX_RETRY_ATTEMPTS_DEFAULT
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitExpectedStorageType
argument_list|(
name|filePath
operator|.
name|toString
argument_list|()
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
literal|2
argument_list|,
literal|60000
argument_list|,
name|hdfsCluster
operator|.
name|getFileSystem
argument_list|()
argument_list|)
expr_stmt|;
comment|// Path status should be FAILURE
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
try|try
block|{
name|StoragePolicySatisfyPathStatus
name|status
init|=
name|dfs
operator|.
name|getClient
argument_list|()
operator|.
name|checkStoragePolicySatisfyPathStatus
argument_list|(
name|filePath
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|StoragePolicySatisfyPathStatus
operator|.
name|FAILURE
operator|.
name|equals
argument_list|(
name|status
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Fail to get path status for sps"
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
argument_list|,
literal|100
argument_list|,
literal|90000
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|shutdownCluster
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|createDirectoryTree (DistributedFileSystem dfs)
specifier|private
specifier|static
name|void
name|createDirectoryTree
parameter_list|(
name|DistributedFileSystem
name|dfs
parameter_list|)
throws|throws
name|Exception
block|{
comment|// tree structure
comment|/*      *                           root      *                             |      *           A--------B--------C--------D--------E      *                    |                 |      *          F----G----H----I       J----K----L----M      *               |                           |      *          N----O----P                 Q----R----S      *                    |                 |      *                    T                 U      */
comment|// create root Node and child
name|dfs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/root"
argument_list|)
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/root/A"
argument_list|)
argument_list|,
literal|1024
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/root/B"
argument_list|)
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/root/C"
argument_list|)
argument_list|,
literal|1024
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/root/D"
argument_list|)
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/root/E"
argument_list|)
argument_list|,
literal|1024
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Create /root/B child
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/root/B/F"
argument_list|)
argument_list|,
literal|1024
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/root/B/G"
argument_list|)
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/root/B/H"
argument_list|)
argument_list|,
literal|1024
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/root/B/I"
argument_list|)
argument_list|,
literal|1024
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Create /root/D child
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/root/D/J"
argument_list|)
argument_list|,
literal|1024
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/root/D/K"
argument_list|)
argument_list|,
literal|1024
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/root/D/L"
argument_list|)
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/root/D/M"
argument_list|)
argument_list|,
literal|1024
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Create /root/B/G child
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/root/B/G/N"
argument_list|)
argument_list|,
literal|1024
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/root/B/G/O"
argument_list|)
argument_list|,
literal|1024
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/root/B/G/P"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create /root/D/L child
name|dfs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/root/D/L/Q"
argument_list|)
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/root/D/L/R"
argument_list|)
argument_list|,
literal|1024
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/root/D/L/S"
argument_list|)
argument_list|,
literal|1024
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Create /root/B/G/P child
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/root/B/G/P/T"
argument_list|)
argument_list|,
literal|1024
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Create /root/D/L/Q child
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/root/D/L/Q/U"
argument_list|)
argument_list|,
literal|1024
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|getDFSListOfTree ()
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getDFSListOfTree
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|dfsList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|dfsList
operator|.
name|add
argument_list|(
literal|"/root/A"
argument_list|)
expr_stmt|;
name|dfsList
operator|.
name|add
argument_list|(
literal|"/root/B/F"
argument_list|)
expr_stmt|;
name|dfsList
operator|.
name|add
argument_list|(
literal|"/root/B/G/N"
argument_list|)
expr_stmt|;
name|dfsList
operator|.
name|add
argument_list|(
literal|"/root/B/G/O"
argument_list|)
expr_stmt|;
name|dfsList
operator|.
name|add
argument_list|(
literal|"/root/B/G/P/T"
argument_list|)
expr_stmt|;
name|dfsList
operator|.
name|add
argument_list|(
literal|"/root/B/H"
argument_list|)
expr_stmt|;
name|dfsList
operator|.
name|add
argument_list|(
literal|"/root/B/I"
argument_list|)
expr_stmt|;
name|dfsList
operator|.
name|add
argument_list|(
literal|"/root/C"
argument_list|)
expr_stmt|;
name|dfsList
operator|.
name|add
argument_list|(
literal|"/root/D/J"
argument_list|)
expr_stmt|;
name|dfsList
operator|.
name|add
argument_list|(
literal|"/root/D/K"
argument_list|)
expr_stmt|;
name|dfsList
operator|.
name|add
argument_list|(
literal|"/root/D/L/Q/U"
argument_list|)
expr_stmt|;
name|dfsList
operator|.
name|add
argument_list|(
literal|"/root/D/L/R"
argument_list|)
expr_stmt|;
name|dfsList
operator|.
name|add
argument_list|(
literal|"/root/D/L/S"
argument_list|)
expr_stmt|;
name|dfsList
operator|.
name|add
argument_list|(
literal|"/root/D/M"
argument_list|)
expr_stmt|;
name|dfsList
operator|.
name|add
argument_list|(
literal|"/root/E"
argument_list|)
expr_stmt|;
return|return
name|dfsList
return|;
block|}
DECL|method|createFileAndSimulateFavoredNodes (int favoredNodesCount)
specifier|private
name|String
name|createFileAndSimulateFavoredNodes
parameter_list|(
name|int
name|favoredNodesCount
parameter_list|)
throws|throws
name|IOException
block|{
name|ArrayList
argument_list|<
name|DataNode
argument_list|>
name|dns
init|=
name|hdfsCluster
operator|.
name|getDataNodes
argument_list|()
decl_stmt|;
specifier|final
name|String
name|file1
init|=
literal|"/testMoveWithBlockPinning"
decl_stmt|;
comment|// replication factor 3
name|InetSocketAddress
index|[]
name|favoredNodes
init|=
operator|new
name|InetSocketAddress
index|[
name|favoredNodesCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|favoredNodesCount
condition|;
name|i
operator|++
control|)
block|{
name|favoredNodes
index|[
name|i
index|]
operator|=
name|dns
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getXferAddress
argument_list|()
expr_stmt|;
block|}
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
operator|new
name|Path
argument_list|(
name|file1
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|1024
argument_list|,
literal|100
argument_list|,
name|DEFAULT_BLOCK_SIZE
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|,
name|favoredNodes
argument_list|)
expr_stmt|;
name|LocatedBlocks
name|locatedBlocks
init|=
name|dfs
operator|.
name|getClient
argument_list|()
operator|.
name|getLocatedBlocks
argument_list|(
name|file1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Wrong block count"
argument_list|,
literal|1
argument_list|,
name|locatedBlocks
operator|.
name|locatedBlockCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify storage type before movement
name|LocatedBlock
name|lb
init|=
name|locatedBlocks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|StorageType
index|[]
name|storageTypes
init|=
name|lb
operator|.
name|getStorageTypes
argument_list|()
decl_stmt|;
for|for
control|(
name|StorageType
name|storageType
range|:
name|storageTypes
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StorageType
operator|.
name|DISK
operator|==
name|storageType
argument_list|)
expr_stmt|;
block|}
comment|// Mock FsDatasetSpi#getPinning to show that the block is pinned.
name|DatanodeInfo
index|[]
name|locations
init|=
name|lb
operator|.
name|getLocations
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|locations
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|favoredNodesCount
operator|<
name|locations
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|DatanodeInfo
name|dnInfo
range|:
name|locations
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Simulate block pinning in datanode {}"
argument_list|,
name|locations
index|[
name|favoredNodesCount
index|]
argument_list|)
expr_stmt|;
name|DataNode
name|dn
init|=
name|hdfsCluster
operator|.
name|getDataNode
argument_list|(
name|dnInfo
operator|.
name|getIpcPort
argument_list|()
argument_list|)
decl_stmt|;
name|InternalDataNodeTestUtils
operator|.
name|mockDatanodeBlkPinning
argument_list|(
name|dn
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|favoredNodesCount
operator|--
expr_stmt|;
if|if
condition|(
name|favoredNodesCount
operator|<=
literal|0
condition|)
block|{
break|break;
comment|// marked favoredNodesCount number of pinned block location
block|}
block|}
return|return
name|file1
return|;
block|}
DECL|method|waitForAttemptedItems (long expectedBlkMovAttemptedCount, int timeout)
specifier|public
name|void
name|waitForAttemptedItems
parameter_list|(
name|long
name|expectedBlkMovAttemptedCount
parameter_list|,
name|int
name|timeout
parameter_list|)
throws|throws
name|TimeoutException
throws|,
name|InterruptedException
block|{
name|BlockManager
name|blockManager
init|=
name|hdfsCluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
decl_stmt|;
specifier|final
name|StoragePolicySatisfier
name|sps
init|=
operator|(
name|StoragePolicySatisfier
operator|)
name|blockManager
operator|.
name|getSPSManager
argument_list|()
operator|.
name|getInternalSPSService
argument_list|()
decl_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"expectedAttemptedItemsCount={} actualAttemptedItemsCount={}"
argument_list|,
name|expectedBlkMovAttemptedCount
argument_list|,
operator|(
call|(
name|BlockStorageMovementAttemptedItems
call|)
argument_list|(
name|sps
operator|.
name|getAttemptedItemsMonitor
argument_list|()
argument_list|)
operator|)
operator|.
name|getAttemptedItemsCount
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
call|(
name|BlockStorageMovementAttemptedItems
call|)
argument_list|(
name|sps
operator|.
name|getAttemptedItemsMonitor
argument_list|()
argument_list|)
operator|)
operator|.
name|getAttemptedItemsCount
argument_list|()
operator|==
name|expectedBlkMovAttemptedCount
return|;
block|}
block|}
argument_list|,
literal|100
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
block|}
DECL|method|waitForBlocksMovementAttemptReport ( long expectedMovementFinishedBlocksCount, int timeout)
specifier|public
name|void
name|waitForBlocksMovementAttemptReport
parameter_list|(
name|long
name|expectedMovementFinishedBlocksCount
parameter_list|,
name|int
name|timeout
parameter_list|)
throws|throws
name|TimeoutException
throws|,
name|InterruptedException
block|{
name|BlockManager
name|blockManager
init|=
name|hdfsCluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
decl_stmt|;
specifier|final
name|StoragePolicySatisfier
name|sps
init|=
operator|(
name|StoragePolicySatisfier
operator|)
name|blockManager
operator|.
name|getSPSManager
argument_list|()
operator|.
name|getInternalSPSService
argument_list|()
decl_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
name|int
name|actualCount
init|=
operator|(
call|(
name|BlockStorageMovementAttemptedItems
call|)
argument_list|(
name|sps
operator|.
name|getAttemptedItemsMonitor
argument_list|()
argument_list|)
operator|)
operator|.
name|getAttemptedItemsCount
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"MovementFinishedBlocks: expectedCount={} actualCount={}"
argument_list|,
name|expectedMovementFinishedBlocksCount
argument_list|,
name|actualCount
argument_list|)
expr_stmt|;
return|return
name|actualCount
operator|>=
name|expectedMovementFinishedBlocksCount
return|;
block|}
block|}
argument_list|,
literal|100
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
block|}
DECL|method|writeContent (final String fileName)
specifier|public
name|void
name|writeContent
parameter_list|(
specifier|final
name|String
name|fileName
parameter_list|)
throws|throws
name|IOException
block|{
name|writeContent
argument_list|(
name|fileName
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
expr_stmt|;
block|}
DECL|method|writeContent (final String fileName, short replicatonFactor)
specifier|private
name|void
name|writeContent
parameter_list|(
specifier|final
name|String
name|fileName
parameter_list|,
name|short
name|replicatonFactor
parameter_list|)
throws|throws
name|IOException
block|{
comment|// write to DISK
specifier|final
name|FSDataOutputStream
name|out
init|=
name|dfs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|fileName
argument_list|)
argument_list|,
name|replicatonFactor
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1024
condition|;
name|i
operator|++
control|)
block|{
name|out
operator|.
name|write
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|startAdditionalDNs (final Configuration conf, int newNodesRequired, int existingNodesNum, StorageType[][] newTypes, int storagesPerDn, long nodeCapacity, final MiniDFSCluster cluster)
specifier|private
name|void
name|startAdditionalDNs
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
name|int
name|newNodesRequired
parameter_list|,
name|int
name|existingNodesNum
parameter_list|,
name|StorageType
index|[]
index|[]
name|newTypes
parameter_list|,
name|int
name|storagesPerDn
parameter_list|,
name|long
name|nodeCapacity
parameter_list|,
specifier|final
name|MiniDFSCluster
name|cluster
parameter_list|)
throws|throws
name|IOException
block|{
name|long
index|[]
index|[]
name|capacities
decl_stmt|;
name|existingNodesNum
operator|+=
name|newNodesRequired
expr_stmt|;
name|capacities
operator|=
operator|new
name|long
index|[
name|newNodesRequired
index|]
index|[
name|storagesPerDn
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|newNodesRequired
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|storagesPerDn
condition|;
name|j
operator|++
control|)
block|{
name|capacities
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
name|nodeCapacity
expr_stmt|;
block|}
block|}
name|cluster
operator|.
name|startDataNodes
argument_list|(
name|conf
argument_list|,
name|newNodesRequired
argument_list|,
name|newTypes
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|capacities
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|triggerHeartbeats
argument_list|()
expr_stmt|;
block|}
DECL|method|startCluster (final Configuration conf, StorageType[][] storageTypes, int numberOfDatanodes, int storagesPerDn, long nodeCapacity)
specifier|public
name|MiniDFSCluster
name|startCluster
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
name|StorageType
index|[]
index|[]
name|storageTypes
parameter_list|,
name|int
name|numberOfDatanodes
parameter_list|,
name|int
name|storagesPerDn
parameter_list|,
name|long
name|nodeCapacity
parameter_list|)
throws|throws
name|IOException
block|{
name|long
index|[]
index|[]
name|capacities
init|=
operator|new
name|long
index|[
name|numberOfDatanodes
index|]
index|[
name|storagesPerDn
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfDatanodes
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|storagesPerDn
condition|;
name|j
operator|++
control|)
block|{
name|capacities
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
name|nodeCapacity
expr_stmt|;
block|}
block|}
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numberOfDatanodes
argument_list|)
operator|.
name|storagesPerDatanode
argument_list|(
name|storagesPerDn
argument_list|)
operator|.
name|storageTypes
argument_list|(
name|storageTypes
argument_list|)
operator|.
name|storageCapacities
argument_list|(
name|capacities
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
return|return
name|cluster
return|;
block|}
DECL|method|restartNamenode ()
specifier|public
name|void
name|restartNamenode
parameter_list|()
throws|throws
name|IOException
block|{
name|hdfsCluster
operator|.
name|restartNameNodes
argument_list|()
expr_stmt|;
name|hdfsCluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
block|}
comment|/**    * Implementation of listener callback, where it collects all the sps move    * attempted blocks for assertion.    */
DECL|class|ExternalBlockMovementListener
specifier|public
specifier|static
specifier|final
class|class
name|ExternalBlockMovementListener
implements|implements
name|BlockMovementListener
block|{
DECL|field|actualBlockMovements
specifier|private
name|List
argument_list|<
name|Block
argument_list|>
name|actualBlockMovements
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|notifyMovementTriedBlocks (Block[] moveAttemptFinishedBlks)
specifier|public
name|void
name|notifyMovementTriedBlocks
parameter_list|(
name|Block
index|[]
name|moveAttemptFinishedBlks
parameter_list|)
block|{
for|for
control|(
name|Block
name|block
range|:
name|moveAttemptFinishedBlks
control|)
block|{
name|actualBlockMovements
operator|.
name|add
argument_list|(
name|block
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Movement attempted blocks:{}"
argument_list|,
name|actualBlockMovements
argument_list|)
expr_stmt|;
block|}
DECL|method|getActualBlockMovements ()
specifier|public
name|List
argument_list|<
name|Block
argument_list|>
name|getActualBlockMovements
parameter_list|()
block|{
return|return
name|actualBlockMovements
return|;
block|}
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|actualBlockMovements
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

