begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|XAttr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
operator|.
name|DataNodeProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|StoragePolicySatisfierMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSNNTopology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ha
operator|.
name|HATestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|XATTR_SATISFY_STORAGE_POLICY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Test persistence of satisfying files/directories.  */
end_comment

begin_class
DECL|class|TestPersistentStoragePolicySatisfier
specifier|public
class|class
name|TestPersistentStoragePolicySatisfier
block|{
DECL|field|conf
specifier|private
specifier|static
name|Configuration
name|conf
decl_stmt|;
DECL|field|cluster
specifier|private
specifier|static
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|fs
specifier|private
specifier|static
name|DistributedFileSystem
name|fs
decl_stmt|;
DECL|field|testFile
specifier|private
specifier|static
name|Path
name|testFile
init|=
operator|new
name|Path
argument_list|(
literal|"/testFile"
argument_list|)
decl_stmt|;
DECL|field|testFileName
specifier|private
specifier|static
name|String
name|testFileName
init|=
name|testFile
operator|.
name|toString
argument_list|()
decl_stmt|;
DECL|field|parentDir
specifier|private
specifier|static
name|Path
name|parentDir
init|=
operator|new
name|Path
argument_list|(
literal|"/parentDir"
argument_list|)
decl_stmt|;
DECL|field|parentFile
specifier|private
specifier|static
name|Path
name|parentFile
init|=
operator|new
name|Path
argument_list|(
name|parentDir
argument_list|,
literal|"parentFile"
argument_list|)
decl_stmt|;
DECL|field|parentFileName
specifier|private
specifier|static
name|String
name|parentFileName
init|=
name|parentFile
operator|.
name|toString
argument_list|()
decl_stmt|;
DECL|field|childDir
specifier|private
specifier|static
name|Path
name|childDir
init|=
operator|new
name|Path
argument_list|(
name|parentDir
argument_list|,
literal|"childDir"
argument_list|)
decl_stmt|;
DECL|field|childFile
specifier|private
specifier|static
name|Path
name|childFile
init|=
operator|new
name|Path
argument_list|(
name|childDir
argument_list|,
literal|"childFile"
argument_list|)
decl_stmt|;
DECL|field|childFileName
specifier|private
specifier|static
name|String
name|childFileName
init|=
name|childFile
operator|.
name|toString
argument_list|()
decl_stmt|;
DECL|field|COLD
specifier|private
specifier|static
specifier|final
name|String
name|COLD
init|=
literal|"COLD"
decl_stmt|;
DECL|field|WARM
specifier|private
specifier|static
specifier|final
name|String
name|WARM
init|=
literal|"WARM"
decl_stmt|;
DECL|field|ONE_SSD
specifier|private
specifier|static
specifier|final
name|String
name|ONE_SSD
init|=
literal|"ONE_SSD"
decl_stmt|;
DECL|field|ALL_SSD
specifier|private
specifier|static
specifier|final
name|String
name|ALL_SSD
init|=
literal|"ALL_SSD"
decl_stmt|;
DECL|field|storageTypes
specifier|private
specifier|static
name|StorageType
index|[]
index|[]
name|storageTypes
init|=
operator|new
name|StorageType
index|[]
index|[]
block|{
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|,
name|StorageType
operator|.
name|SSD
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|,
name|StorageType
operator|.
name|SSD
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|,
name|StorageType
operator|.
name|SSD
block|}
block|}
decl_stmt|;
DECL|field|timeout
specifier|private
specifier|final
name|int
name|timeout
init|=
literal|90000
decl_stmt|;
comment|/**    * Setup environment for every test case.    * @throws IOException    */
DECL|method|clusterSetUp ()
specifier|public
name|void
name|clusterSetUp
parameter_list|()
throws|throws
name|Exception
block|{
name|clusterSetUp
argument_list|(
literal|false
argument_list|,
operator|new
name|HdfsConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Setup environment for every test case.    * @param hdfsConf hdfs conf.    * @throws Exception    */
DECL|method|clusterSetUp (Configuration hdfsConf)
specifier|public
name|void
name|clusterSetUp
parameter_list|(
name|Configuration
name|hdfsConf
parameter_list|)
throws|throws
name|Exception
block|{
name|clusterSetUp
argument_list|(
literal|false
argument_list|,
name|hdfsConf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Setup cluster environment.    * @param isHAEnabled if true, enable simple HA.    * @throws IOException    */
DECL|method|clusterSetUp (boolean isHAEnabled, Configuration newConf)
specifier|private
name|void
name|clusterSetUp
parameter_list|(
name|boolean
name|isHAEnabled
parameter_list|,
name|Configuration
name|newConf
parameter_list|)
throws|throws
name|Exception
block|{
name|conf
operator|=
name|newConf
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_STORAGE_POLICY_SATISFIER_RECHECK_TIMEOUT_MILLIS_KEY
argument_list|,
literal|"3000"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_STORAGE_POLICY_SATISFIER_MODE_KEY
argument_list|,
name|StoragePolicySatisfierMode
operator|.
name|INTERNAL
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|int
name|dnNumber
init|=
name|storageTypes
operator|.
name|length
decl_stmt|;
specifier|final
name|short
name|replication
init|=
literal|3
decl_stmt|;
name|MiniDFSCluster
operator|.
name|Builder
name|clusterBuilder
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|storageTypes
argument_list|(
name|storageTypes
argument_list|)
operator|.
name|storagesPerDatanode
argument_list|(
literal|3
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|dnNumber
argument_list|)
decl_stmt|;
if|if
condition|(
name|isHAEnabled
condition|)
block|{
name|clusterBuilder
operator|.
name|nnTopology
argument_list|(
name|MiniDFSNNTopology
operator|.
name|simpleHATopology
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|cluster
operator|=
name|clusterBuilder
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
if|if
condition|(
name|isHAEnabled
condition|)
block|{
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|fs
operator|=
name|HATestUtil
operator|.
name|configureFailoverFs
argument_list|(
name|cluster
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
block|}
name|createTestFiles
argument_list|(
name|fs
argument_list|,
name|replication
argument_list|)
expr_stmt|;
block|}
comment|/**    * Setup test files for testing.    * @param dfs    * @param replication    * @throws Exception    */
DECL|method|createTestFiles (DistributedFileSystem dfs, short replication)
specifier|private
name|void
name|createTestFiles
parameter_list|(
name|DistributedFileSystem
name|dfs
parameter_list|,
name|short
name|replication
parameter_list|)
throws|throws
name|Exception
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|testFile
argument_list|,
literal|1024L
argument_list|,
name|replication
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|parentFile
argument_list|,
literal|1024L
argument_list|,
name|replication
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|childFile
argument_list|,
literal|1024L
argument_list|,
name|replication
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitReplication
argument_list|(
name|dfs
argument_list|,
name|testFile
argument_list|,
name|replication
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitReplication
argument_list|(
name|dfs
argument_list|,
name|parentFile
argument_list|,
name|replication
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitReplication
argument_list|(
name|dfs
argument_list|,
name|childFile
argument_list|,
name|replication
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tear down environment for every test case.    * @throws IOException    */
DECL|method|clusterShutdown ()
specifier|private
name|void
name|clusterShutdown
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|fs
operator|!=
literal|null
condition|)
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * While satisfying file/directory, trigger the cluster's checkpoint to    * make sure satisfier persistence work as expected. This test case runs    * as below:    * 1. use satisfyStoragePolicy and add xAttr to the file.    * 2. do the checkpoint by secondary NameNode.    * 3. restart the cluster immediately.    * 4. make sure all the storage policies are satisfied.    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testWithCheckpoint ()
specifier|public
name|void
name|testWithCheckpoint
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|clusterSetUp
argument_list|()
expr_stmt|;
name|fs
operator|.
name|setStoragePolicy
argument_list|(
name|testFile
argument_list|,
name|WARM
argument_list|)
expr_stmt|;
name|fs
operator|.
name|satisfyStoragePolicy
argument_list|(
name|testFile
argument_list|)
expr_stmt|;
comment|// Start the checkpoint.
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_KEY
argument_list|,
literal|"0.0.0.0:0"
argument_list|)
expr_stmt|;
name|SecondaryNameNode
name|secondary
init|=
operator|new
name|SecondaryNameNode
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|secondary
operator|.
name|doCheckpoint
argument_list|()
expr_stmt|;
name|restartCluster
argument_list|()
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitExpectedStorageType
argument_list|(
name|testFileName
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
literal|1
argument_list|,
name|timeout
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitExpectedStorageType
argument_list|(
name|testFileName
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
literal|2
argument_list|,
name|timeout
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setStoragePolicy
argument_list|(
name|parentDir
argument_list|,
name|COLD
argument_list|)
expr_stmt|;
name|fs
operator|.
name|satisfyStoragePolicy
argument_list|(
name|parentDir
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitExpectedStorageType
argument_list|(
name|parentFileName
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
literal|3
argument_list|,
name|timeout
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitExpectedStorageType
argument_list|(
name|childFileName
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
literal|3
argument_list|,
name|timeout
argument_list|,
name|fs
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|clusterShutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Tests to verify satisfier persistence working as expected    * in HA env. This test case runs as below:    * 1. setup HA cluster env with simple HA topology.    * 2. switch the active NameNode from nn0/nn1 to nn1/nn0.    * 3. make sure all the storage policies are satisfied.    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testWithHA ()
specifier|public
name|void
name|testWithHA
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
comment|// Enable HA env for testing.
name|clusterSetUp
argument_list|(
literal|true
argument_list|,
operator|new
name|HdfsConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setStoragePolicy
argument_list|(
name|testFile
argument_list|,
name|ALL_SSD
argument_list|)
expr_stmt|;
name|fs
operator|.
name|satisfyStoragePolicy
argument_list|(
name|testFile
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|transitionToStandby
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitExpectedStorageType
argument_list|(
name|testFileName
argument_list|,
name|StorageType
operator|.
name|SSD
argument_list|,
literal|3
argument_list|,
name|timeout
argument_list|,
name|fs
argument_list|)
expr_stmt|;
comment|// test directory
name|fs
operator|.
name|setStoragePolicy
argument_list|(
name|parentDir
argument_list|,
name|WARM
argument_list|)
expr_stmt|;
name|fs
operator|.
name|satisfyStoragePolicy
argument_list|(
name|parentDir
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|transitionToStandby
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitExpectedStorageType
argument_list|(
name|parentFileName
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
literal|1
argument_list|,
name|timeout
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitExpectedStorageType
argument_list|(
name|parentFileName
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
literal|2
argument_list|,
name|timeout
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitExpectedStorageType
argument_list|(
name|childFileName
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
literal|1
argument_list|,
name|timeout
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitExpectedStorageType
argument_list|(
name|childFileName
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
literal|2
argument_list|,
name|timeout
argument_list|,
name|fs
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|clusterShutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Tests to verify satisfier persistence working well with multiple    * restarts operations. This test case runs as below:    * 1. satisfy the storage policy of file1.    * 2. restart the cluster.    * 3. check whether all the blocks are satisfied.    * 4. satisfy the storage policy of file2.    * 5. restart the cluster.    * 6. check whether all the blocks are satisfied.    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testWithRestarts ()
specifier|public
name|void
name|testWithRestarts
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|clusterSetUp
argument_list|()
expr_stmt|;
name|fs
operator|.
name|setStoragePolicy
argument_list|(
name|testFile
argument_list|,
name|ONE_SSD
argument_list|)
expr_stmt|;
name|fs
operator|.
name|satisfyStoragePolicy
argument_list|(
name|testFile
argument_list|)
expr_stmt|;
name|restartCluster
argument_list|()
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitExpectedStorageType
argument_list|(
name|testFileName
argument_list|,
name|StorageType
operator|.
name|SSD
argument_list|,
literal|1
argument_list|,
name|timeout
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitExpectedStorageType
argument_list|(
name|testFileName
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
literal|2
argument_list|,
name|timeout
argument_list|,
name|fs
argument_list|)
expr_stmt|;
comment|// test directory
name|fs
operator|.
name|setStoragePolicy
argument_list|(
name|parentDir
argument_list|,
name|COLD
argument_list|)
expr_stmt|;
name|fs
operator|.
name|satisfyStoragePolicy
argument_list|(
name|parentDir
argument_list|)
expr_stmt|;
name|restartCluster
argument_list|()
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitExpectedStorageType
argument_list|(
name|parentFileName
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
literal|3
argument_list|,
name|timeout
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitExpectedStorageType
argument_list|(
name|childFileName
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
literal|3
argument_list|,
name|timeout
argument_list|,
name|fs
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|clusterShutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Tests to verify satisfier persistence working well with    * federal HA env. This test case runs as below:    * 1. setup HA test environment with federal topology.    * 2. satisfy storage policy of file1.    * 3. switch active NameNode from nn0 to nn1.    * 4. switch active NameNode from nn2 to nn3.    * 5. check whether the storage policy of file1 is satisfied.    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testWithFederationHA ()
specifier|public
name|void
name|testWithFederationHA
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|haCluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_STORAGE_POLICY_SATISFIER_MODE_KEY
argument_list|,
name|StoragePolicySatisfierMode
operator|.
name|INTERNAL
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|haCluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|nnTopology
argument_list|(
name|MiniDFSNNTopology
operator|.
name|simpleHAFederatedTopology
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|storageTypes
argument_list|(
name|storageTypes
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|storageTypes
operator|.
name|length
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|haCluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|haCluster
operator|.
name|transitionToActive
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|haCluster
operator|.
name|transitionToActive
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|fs
operator|=
name|HATestUtil
operator|.
name|configureFailoverFs
argument_list|(
name|haCluster
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|createTestFiles
argument_list|(
name|fs
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setStoragePolicy
argument_list|(
name|testFile
argument_list|,
name|WARM
argument_list|)
expr_stmt|;
name|fs
operator|.
name|satisfyStoragePolicy
argument_list|(
name|testFile
argument_list|)
expr_stmt|;
name|haCluster
operator|.
name|transitionToStandby
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|haCluster
operator|.
name|transitionToActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|haCluster
operator|.
name|transitionToStandby
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|haCluster
operator|.
name|transitionToActive
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitExpectedStorageType
argument_list|(
name|testFileName
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
literal|1
argument_list|,
name|timeout
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitExpectedStorageType
argument_list|(
name|testFileName
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
literal|2
argument_list|,
name|timeout
argument_list|,
name|fs
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|fs
operator|!=
literal|null
condition|)
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|haCluster
operator|!=
literal|null
condition|)
block|{
name|haCluster
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|haCluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Tests to verify SPS xattr will be removed if the satisfy work has    * been finished, expect that the method satisfyStoragePolicy can be    * invoked on the same file again after the block movement has been    * finished:    * 1. satisfy storage policy of file1.    * 2. wait until storage policy is satisfied.    * 3. satisfy storage policy of file1 again    * 4. make sure step 3 works as expected.    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testMultipleSatisfyStoragePolicy ()
specifier|public
name|void
name|testMultipleSatisfyStoragePolicy
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
comment|// Lower block movement check for testing.
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
specifier|final
name|long
name|minCheckTimeout
init|=
literal|500
decl_stmt|;
comment|// minimum value
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_STORAGE_POLICY_SATISFIER_RECHECK_TIMEOUT_MILLIS_KEY
argument_list|,
name|minCheckTimeout
argument_list|)
expr_stmt|;
name|clusterSetUp
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setStoragePolicy
argument_list|(
name|testFile
argument_list|,
name|ONE_SSD
argument_list|)
expr_stmt|;
name|fs
operator|.
name|satisfyStoragePolicy
argument_list|(
name|testFile
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitExpectedStorageType
argument_list|(
name|testFileName
argument_list|,
name|StorageType
operator|.
name|SSD
argument_list|,
literal|1
argument_list|,
name|timeout
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitExpectedStorageType
argument_list|(
name|testFileName
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
literal|2
argument_list|,
name|timeout
argument_list|,
name|fs
argument_list|)
expr_stmt|;
comment|// Make sure satisfy xattr has been removed.
name|DFSTestUtil
operator|.
name|waitForXattrRemoved
argument_list|(
name|testFileName
argument_list|,
name|XATTR_SATISFY_STORAGE_POLICY
argument_list|,
name|cluster
operator|.
name|getNamesystem
argument_list|()
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setStoragePolicy
argument_list|(
name|testFile
argument_list|,
name|COLD
argument_list|)
expr_stmt|;
name|fs
operator|.
name|satisfyStoragePolicy
argument_list|(
name|testFile
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitExpectedStorageType
argument_list|(
name|testFileName
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
literal|3
argument_list|,
name|timeout
argument_list|,
name|fs
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|clusterShutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Tests to verify SPS xattr is removed after SPS is dropped,    * expect that if the SPS is disabled/dropped, the SPS    * xattr should be removed accordingly:    * 1. satisfy storage policy of file1.    * 2. drop SPS thread in block manager.    * 3. make sure sps xattr is removed.    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testDropSPS ()
specifier|public
name|void
name|testDropSPS
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|clusterSetUp
argument_list|()
expr_stmt|;
name|fs
operator|.
name|setStoragePolicy
argument_list|(
name|testFile
argument_list|,
name|ONE_SSD
argument_list|)
expr_stmt|;
name|fs
operator|.
name|satisfyStoragePolicy
argument_list|(
name|testFile
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getSPSManager
argument_list|()
operator|.
name|changeModeEvent
argument_list|(
name|StoragePolicySatisfierMode
operator|.
name|NONE
argument_list|)
expr_stmt|;
comment|// Make sure satisfy xattr has been removed.
name|DFSTestUtil
operator|.
name|waitForXattrRemoved
argument_list|(
name|testFileName
argument_list|,
name|XATTR_SATISFY_STORAGE_POLICY
argument_list|,
name|cluster
operator|.
name|getNamesystem
argument_list|()
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|clusterShutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Tests that Xattrs should be cleaned if all blocks already satisfied.    *    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testSPSShouldNotLeakXattrIfStorageAlreadySatisfied ()
specifier|public
name|void
name|testSPSShouldNotLeakXattrIfStorageAlreadySatisfied
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|clusterSetUp
argument_list|()
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitExpectedStorageType
argument_list|(
name|testFileName
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
literal|3
argument_list|,
name|timeout
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|fs
operator|.
name|satisfyStoragePolicy
argument_list|(
name|testFile
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitExpectedStorageType
argument_list|(
name|testFileName
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
literal|3
argument_list|,
name|timeout
argument_list|,
name|fs
argument_list|)
expr_stmt|;
comment|// Make sure satisfy xattr has been removed.
name|DFSTestUtil
operator|.
name|waitForXattrRemoved
argument_list|(
name|testFileName
argument_list|,
name|XATTR_SATISFY_STORAGE_POLICY
argument_list|,
name|cluster
operator|.
name|getNamesystem
argument_list|()
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|clusterShutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test loading of SPS xAttrs from the edits log when satisfyStoragePolicy    * called on child file and parent directory.    * 1. Create one directory and create one child file.    * 2. Set storage policy for child file and call    * satisfyStoragePolicy.    * 3. wait for SPS to remove xAttr for file child file.    * 4. Set storage policy for parent directory and call    * satisfyStoragePolicy.    * 5. restart the namenode.    * NameNode should be started successfully.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testNameNodeRestartWhenSPSCalledOnChildFileAndParentDir ()
specifier|public
name|void
name|testNameNodeRestartWhenSPSCalledOnChildFileAndParentDir
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|clusterSetUp
argument_list|()
expr_stmt|;
name|fs
operator|.
name|setStoragePolicy
argument_list|(
name|childFile
argument_list|,
literal|"COLD"
argument_list|)
expr_stmt|;
name|fs
operator|.
name|satisfyStoragePolicy
argument_list|(
name|childFile
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitExpectedStorageType
argument_list|(
name|childFile
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
literal|3
argument_list|,
literal|30000
argument_list|,
name|cluster
operator|.
name|getFileSystem
argument_list|()
argument_list|)
expr_stmt|;
comment|// wait for SPS to remove Xattr from file
name|Thread
operator|.
name|sleep
argument_list|(
literal|30000
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setStoragePolicy
argument_list|(
name|childDir
argument_list|,
literal|"COLD"
argument_list|)
expr_stmt|;
name|fs
operator|.
name|satisfyStoragePolicy
argument_list|(
name|childDir
argument_list|)
expr_stmt|;
try|try
block|{
name|cluster
operator|.
name|restartNameNodes
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Cannot request to call satisfy storage policy"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|clusterShutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test SPS when satisfyStoragePolicy called on child file and    * parent directory.    * 1. Create one parent directory and child directory.    * 2. Create some file in both the directory.    * 3. Set storage policy for parent directory and call    * satisfyStoragePolicy.    * 4. Set storage policy for child directory and call    * satisfyStoragePolicy.    * 5. restart the namenode.    * All the file blocks should satisfy the policy.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testSPSOnChildAndParentDirectory ()
specifier|public
name|void
name|testSPSOnChildAndParentDirectory
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|clusterSetUp
argument_list|()
expr_stmt|;
name|fs
operator|.
name|setStoragePolicy
argument_list|(
name|parentDir
argument_list|,
literal|"COLD"
argument_list|)
expr_stmt|;
name|fs
operator|.
name|satisfyStoragePolicy
argument_list|(
name|childDir
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitExpectedStorageType
argument_list|(
name|childFileName
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
literal|3
argument_list|,
literal|30000
argument_list|,
name|cluster
operator|.
name|getFileSystem
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|satisfyStoragePolicy
argument_list|(
name|parentDir
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitExpectedStorageType
argument_list|(
name|parentFileName
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
literal|3
argument_list|,
literal|30000
argument_list|,
name|cluster
operator|.
name|getFileSystem
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|clusterShutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test SPS xAttr on directory. xAttr should be removed from the directory    * once all the files blocks moved to specific storage.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testSPSxAttrWhenSpsCalledForDir ()
specifier|public
name|void
name|testSPSxAttrWhenSpsCalledForDir
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|clusterSetUp
argument_list|()
expr_stmt|;
name|Path
name|parent
init|=
operator|new
name|Path
argument_list|(
literal|"/parent"
argument_list|)
decl_stmt|;
comment|// create parent dir
name|fs
operator|.
name|mkdirs
argument_list|(
name|parent
argument_list|)
expr_stmt|;
comment|// create 10 child files
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"f"
operator|+
name|i
argument_list|)
argument_list|,
literal|1024
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// Set storage policy for parent directory
name|fs
operator|.
name|setStoragePolicy
argument_list|(
name|parent
argument_list|,
literal|"COLD"
argument_list|)
expr_stmt|;
comment|// Stop one DN so we can check the SPS xAttr for directory.
name|DataNodeProperties
name|stopDataNode
init|=
name|cluster
operator|.
name|stopDataNode
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|fs
operator|.
name|satisfyStoragePolicy
argument_list|(
name|parent
argument_list|)
expr_stmt|;
comment|// Check xAttr for parent directory
name|FSNamesystem
name|namesystem
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
decl_stmt|;
name|INode
name|inode
init|=
name|namesystem
operator|.
name|getFSDirectory
argument_list|()
operator|.
name|getINode
argument_list|(
literal|"/parent"
argument_list|)
decl_stmt|;
name|XAttrFeature
name|f
init|=
name|inode
operator|.
name|getXAttrFeature
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"SPS xAttr should be exist"
argument_list|,
name|f
operator|.
name|getXAttr
argument_list|(
name|XATTR_SATISFY_STORAGE_POLICY
argument_list|)
operator|!=
literal|null
argument_list|)
expr_stmt|;
comment|// check for the child, SPS xAttr should not be there
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|inode
operator|=
name|namesystem
operator|.
name|getFSDirectory
argument_list|()
operator|.
name|getINode
argument_list|(
literal|"/parent/f"
operator|+
name|i
argument_list|)
expr_stmt|;
name|f
operator|=
name|inode
operator|.
name|getXAttrFeature
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
name|cluster
operator|.
name|restartDataNode
argument_list|(
name|stopDataNode
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// wait and check all the file block moved in ARCHIVE
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|DFSTestUtil
operator|.
name|waitExpectedStorageType
argument_list|(
literal|"/parent/f"
operator|+
name|i
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
literal|3
argument_list|,
literal|30000
argument_list|,
name|cluster
operator|.
name|getFileSystem
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|DFSTestUtil
operator|.
name|waitForXattrRemoved
argument_list|(
literal|"/parent"
argument_list|,
name|XATTR_SATISFY_STORAGE_POLICY
argument_list|,
name|namesystem
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|clusterShutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test SPS xAttr on file. xAttr should be removed from the file    * once all the blocks moved to specific storage.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testSPSxAttrWhenSpsCalledForFile ()
specifier|public
name|void
name|testSPSxAttrWhenSpsCalledForFile
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|clusterSetUp
argument_list|()
expr_stmt|;
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
literal|"/file"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|file
argument_list|,
literal|1024
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Set storage policy for file
name|fs
operator|.
name|setStoragePolicy
argument_list|(
name|file
argument_list|,
literal|"COLD"
argument_list|)
expr_stmt|;
comment|// Stop one DN so we can check the SPS xAttr for file.
name|DataNodeProperties
name|stopDataNode
init|=
name|cluster
operator|.
name|stopDataNode
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|fs
operator|.
name|satisfyStoragePolicy
argument_list|(
name|file
argument_list|)
expr_stmt|;
comment|// Check xAttr for parent directory
name|FSNamesystem
name|namesystem
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
decl_stmt|;
name|INode
name|inode
init|=
name|namesystem
operator|.
name|getFSDirectory
argument_list|()
operator|.
name|getINode
argument_list|(
literal|"/file"
argument_list|)
decl_stmt|;
name|XAttrFeature
name|f
init|=
name|inode
operator|.
name|getXAttrFeature
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"SPS xAttr should be exist"
argument_list|,
name|f
operator|.
name|getXAttr
argument_list|(
name|XATTR_SATISFY_STORAGE_POLICY
argument_list|)
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|restartDataNode
argument_list|(
name|stopDataNode
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// wait and check all the file block moved in ARCHIVE
name|DFSTestUtil
operator|.
name|waitExpectedStorageType
argument_list|(
literal|"/file"
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
literal|3
argument_list|,
literal|30000
argument_list|,
name|cluster
operator|.
name|getFileSystem
argument_list|()
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
name|List
argument_list|<
name|XAttr
argument_list|>
name|existingXAttrs
init|=
name|XAttrStorage
operator|.
name|readINodeXAttrs
argument_list|(
name|inode
argument_list|)
decl_stmt|;
return|return
operator|!
name|existingXAttrs
operator|.
name|contains
argument_list|(
name|XATTR_SATISFY_STORAGE_POLICY
argument_list|)
return|;
block|}
block|}
argument_list|,
literal|100
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|clusterShutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Restart the hole env and trigger the DataNode's heart beats.    * @throws Exception    */
DECL|method|restartCluster ()
specifier|private
name|void
name|restartCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|cluster
operator|.
name|restartDataNodes
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|restartNameNodes
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|triggerHeartbeats
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

