begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|DirectoryListingStartAfterNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystemTestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|InvalidPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocatedFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Options
operator|.
name|Rename
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathIsNotDirectoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RemoteIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|XAttr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|PermissionStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DirectoryListing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|QuotaExceededException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockInfoContiguous
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|Snapshot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamenodeProtocols
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_class
DECL|class|TestINodeFile
specifier|public
class|class
name|TestINodeFile
block|{
comment|// Re-enable symlinks for tests, see HADOOP-10020 and HADOOP-10052
static|static
block|{
name|FileSystem
operator|.
name|enableSymlinks
argument_list|()
expr_stmt|;
block|}
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestINodeFile
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|BLOCKBITS
specifier|static
specifier|final
name|short
name|BLOCKBITS
init|=
literal|48
decl_stmt|;
DECL|field|BLKSIZE_MAXVALUE
specifier|static
specifier|final
name|long
name|BLKSIZE_MAXVALUE
init|=
operator|~
operator|(
literal|0xffffL
operator|<<
name|BLOCKBITS
operator|)
decl_stmt|;
DECL|field|perm
specifier|private
specifier|static
specifier|final
name|PermissionStatus
name|perm
init|=
operator|new
name|PermissionStatus
argument_list|(
literal|"userName"
argument_list|,
literal|null
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|replication
specifier|private
name|short
name|replication
decl_stmt|;
DECL|field|preferredBlockSize
specifier|private
name|long
name|preferredBlockSize
init|=
literal|1024
decl_stmt|;
DECL|method|createINodeFile (short replication, long preferredBlockSize)
name|INodeFile
name|createINodeFile
parameter_list|(
name|short
name|replication
parameter_list|,
name|long
name|preferredBlockSize
parameter_list|)
block|{
return|return
operator|new
name|INodeFile
argument_list|(
name|HdfsConstants
operator|.
name|GRANDFATHER_INODE_ID
argument_list|,
literal|null
argument_list|,
name|perm
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|,
literal|null
argument_list|,
name|replication
argument_list|,
name|preferredBlockSize
argument_list|)
return|;
block|}
DECL|method|createINodeFile (byte storagePolicyID)
specifier|private
specifier|static
name|INodeFile
name|createINodeFile
parameter_list|(
name|byte
name|storagePolicyID
parameter_list|)
block|{
return|return
operator|new
name|INodeFile
argument_list|(
name|HdfsConstants
operator|.
name|GRANDFATHER_INODE_ID
argument_list|,
literal|null
argument_list|,
name|perm
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|,
literal|null
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|1024L
argument_list|,
name|storagePolicyID
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testStoragePolicyID ()
specifier|public
name|void
name|testStoragePolicyID
parameter_list|()
block|{
for|for
control|(
name|byte
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|16
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|INodeFile
name|f
init|=
name|createINodeFile
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|i
argument_list|,
name|f
operator|.
name|getStoragePolicyID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testStoragePolicyIdBelowLowerBound ()
specifier|public
name|void
name|testStoragePolicyIdBelowLowerBound
parameter_list|()
throws|throws
name|IllegalArgumentException
block|{
name|createINodeFile
argument_list|(
operator|(
name|byte
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testStoragePolicyIdAboveUpperBound ()
specifier|public
name|void
name|testStoragePolicyIdAboveUpperBound
parameter_list|()
throws|throws
name|IllegalArgumentException
block|{
name|createINodeFile
argument_list|(
operator|(
name|byte
operator|)
literal|16
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test for the Replication value. Sets a value and checks if it was set    * correct.    */
annotation|@
name|Test
DECL|method|testReplication ()
specifier|public
name|void
name|testReplication
parameter_list|()
block|{
name|replication
operator|=
literal|3
expr_stmt|;
name|preferredBlockSize
operator|=
literal|128
operator|*
literal|1024
operator|*
literal|1024
expr_stmt|;
name|INodeFile
name|inf
init|=
name|createINodeFile
argument_list|(
name|replication
argument_list|,
name|preferredBlockSize
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"True has to be returned in this case"
argument_list|,
name|replication
argument_list|,
name|inf
operator|.
name|getFileReplication
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * IllegalArgumentException is expected for setting below lower bound    * for Replication.    * @throws IllegalArgumentException as the result    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testReplicationBelowLowerBound ()
specifier|public
name|void
name|testReplicationBelowLowerBound
parameter_list|()
throws|throws
name|IllegalArgumentException
block|{
name|replication
operator|=
operator|-
literal|1
expr_stmt|;
name|preferredBlockSize
operator|=
literal|128
operator|*
literal|1024
operator|*
literal|1024
expr_stmt|;
name|createINodeFile
argument_list|(
name|replication
argument_list|,
name|preferredBlockSize
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test for the PreferredBlockSize value. Sets a value and checks if it was    * set correct.    */
annotation|@
name|Test
DECL|method|testPreferredBlockSize ()
specifier|public
name|void
name|testPreferredBlockSize
parameter_list|()
block|{
name|replication
operator|=
literal|3
expr_stmt|;
name|preferredBlockSize
operator|=
literal|128
operator|*
literal|1024
operator|*
literal|1024
expr_stmt|;
name|INodeFile
name|inf
init|=
name|createINodeFile
argument_list|(
name|replication
argument_list|,
name|preferredBlockSize
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"True has to be returned in this case"
argument_list|,
name|preferredBlockSize
argument_list|,
name|inf
operator|.
name|getPreferredBlockSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPreferredBlockSizeUpperBound ()
specifier|public
name|void
name|testPreferredBlockSizeUpperBound
parameter_list|()
block|{
name|replication
operator|=
literal|3
expr_stmt|;
name|preferredBlockSize
operator|=
name|BLKSIZE_MAXVALUE
expr_stmt|;
name|INodeFile
name|inf
init|=
name|createINodeFile
argument_list|(
name|replication
argument_list|,
name|preferredBlockSize
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"True has to be returned in this case"
argument_list|,
name|BLKSIZE_MAXVALUE
argument_list|,
name|inf
operator|.
name|getPreferredBlockSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * IllegalArgumentException is expected for setting below lower bound    * for PreferredBlockSize.    * @throws IllegalArgumentException as the result    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testPreferredBlockSizeBelowLowerBound ()
specifier|public
name|void
name|testPreferredBlockSizeBelowLowerBound
parameter_list|()
throws|throws
name|IllegalArgumentException
block|{
name|replication
operator|=
literal|3
expr_stmt|;
name|preferredBlockSize
operator|=
operator|-
literal|1
expr_stmt|;
name|createINodeFile
argument_list|(
name|replication
argument_list|,
name|preferredBlockSize
argument_list|)
expr_stmt|;
block|}
comment|/**    * IllegalArgumentException is expected for setting above upper bound    * for PreferredBlockSize.    * @throws IllegalArgumentException as the result    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testPreferredBlockSizeAboveUpperBound ()
specifier|public
name|void
name|testPreferredBlockSizeAboveUpperBound
parameter_list|()
throws|throws
name|IllegalArgumentException
block|{
name|replication
operator|=
literal|3
expr_stmt|;
name|preferredBlockSize
operator|=
name|BLKSIZE_MAXVALUE
operator|+
literal|1
expr_stmt|;
name|createINodeFile
argument_list|(
name|replication
argument_list|,
name|preferredBlockSize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetFullPathName ()
specifier|public
name|void
name|testGetFullPathName
parameter_list|()
block|{
name|replication
operator|=
literal|3
expr_stmt|;
name|preferredBlockSize
operator|=
literal|128
operator|*
literal|1024
operator|*
literal|1024
expr_stmt|;
name|INodeFile
name|inf
init|=
name|createINodeFile
argument_list|(
name|replication
argument_list|,
name|preferredBlockSize
argument_list|)
decl_stmt|;
name|inf
operator|.
name|setLocalName
argument_list|(
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"f"
argument_list|)
argument_list|)
expr_stmt|;
name|INodeDirectory
name|root
init|=
operator|new
name|INodeDirectory
argument_list|(
name|HdfsConstants
operator|.
name|GRANDFATHER_INODE_ID
argument_list|,
name|INodeDirectory
operator|.
name|ROOT_NAME
argument_list|,
name|perm
argument_list|,
literal|0L
argument_list|)
decl_stmt|;
name|INodeDirectory
name|dir
init|=
operator|new
name|INodeDirectory
argument_list|(
name|HdfsConstants
operator|.
name|GRANDFATHER_INODE_ID
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"d"
argument_list|)
argument_list|,
name|perm
argument_list|,
literal|0L
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"f"
argument_list|,
name|inf
operator|.
name|getFullPathName
argument_list|()
argument_list|)
expr_stmt|;
name|dir
operator|.
name|addChild
argument_list|(
name|inf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"d"
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
literal|"f"
argument_list|,
name|inf
operator|.
name|getFullPathName
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|addChild
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Path
operator|.
name|SEPARATOR
operator|+
literal|"d"
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
literal|"f"
argument_list|,
name|inf
operator|.
name|getFullPathName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Path
operator|.
name|SEPARATOR
operator|+
literal|"d"
argument_list|,
name|dir
operator|.
name|getFullPathName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|,
name|root
operator|.
name|getFullPathName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * FSDirectory#unprotectedSetQuota creates a new INodeDirectoryWithQuota to    * replace the original INodeDirectory. Before HDFS-4243, the parent field of    * all the children INodes of the target INodeDirectory is not changed to    * point to the new INodeDirectoryWithQuota. This testcase tests this    * scenario.    */
annotation|@
name|Test
DECL|method|testGetFullPathNameAfterSetQuota ()
specifier|public
name|void
name|testGetFullPathNameAfterSetQuota
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|fileLen
init|=
literal|1024
decl_stmt|;
name|replication
operator|=
literal|3
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|replication
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|FSNamesystem
name|fsn
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
decl_stmt|;
name|FSDirectory
name|fsdir
init|=
name|fsn
operator|.
name|getFSDirectory
argument_list|()
decl_stmt|;
name|DistributedFileSystem
name|dfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// Create a file for test
specifier|final
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/dir"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|file
argument_list|,
name|fileLen
argument_list|,
name|replication
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
comment|// Check the full path name of the INode associating with the file
name|INode
name|fnode
init|=
name|fsdir
operator|.
name|getINode
argument_list|(
name|file
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|file
operator|.
name|toString
argument_list|()
argument_list|,
name|fnode
operator|.
name|getFullPathName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Call FSDirectory#unprotectedSetQuota which calls
comment|// INodeDirectory#replaceChild
name|dfs
operator|.
name|setQuota
argument_list|(
name|dir
argument_list|,
name|Long
operator|.
name|MAX_VALUE
operator|-
literal|1
argument_list|,
name|replication
operator|*
name|fileLen
operator|*
literal|10
argument_list|)
expr_stmt|;
name|INodeDirectory
name|dirNode
init|=
name|getDir
argument_list|(
name|fsdir
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|dir
operator|.
name|toString
argument_list|()
argument_list|,
name|dirNode
operator|.
name|getFullPathName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dirNode
operator|.
name|isWithQuota
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|newDir
init|=
operator|new
name|Path
argument_list|(
literal|"/newdir"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|newFile
init|=
operator|new
name|Path
argument_list|(
name|newDir
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
comment|// Also rename dir
name|dfs
operator|.
name|rename
argument_list|(
name|dir
argument_list|,
name|newDir
argument_list|,
name|Options
operator|.
name|Rename
operator|.
name|OVERWRITE
argument_list|)
expr_stmt|;
comment|// /dir/file now should be renamed to /newdir/file
name|fnode
operator|=
name|fsdir
operator|.
name|getINode
argument_list|(
name|newFile
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// getFullPathName can return correct result only if the parent field of
comment|// child node is set correctly
name|assertEquals
argument_list|(
name|newFile
operator|.
name|toString
argument_list|()
argument_list|,
name|fnode
operator|.
name|getFullPathName
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testConcatBlocks ()
specifier|public
name|void
name|testConcatBlocks
parameter_list|()
block|{
name|INodeFile
name|origFile
init|=
name|createINodeFiles
argument_list|(
literal|1
argument_list|,
literal|"origfile"
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Number of blocks didn't match"
argument_list|,
name|origFile
operator|.
name|numBlocks
argument_list|()
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|INodeFile
index|[]
name|appendFiles
init|=
name|createINodeFiles
argument_list|(
literal|4
argument_list|,
literal|"appendfile"
argument_list|)
decl_stmt|;
name|BlockManager
name|bm
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|BlockManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|origFile
operator|.
name|concatBlocks
argument_list|(
name|appendFiles
argument_list|,
name|bm
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Number of blocks didn't match"
argument_list|,
name|origFile
operator|.
name|numBlocks
argument_list|()
argument_list|,
literal|5L
argument_list|)
expr_stmt|;
block|}
comment|/**     * Creates the required number of files with one block each    * @param nCount Number of INodes to create    * @return Array of INode files    */
DECL|method|createINodeFiles (int nCount, String fileNamePrefix)
specifier|private
name|INodeFile
index|[]
name|createINodeFiles
parameter_list|(
name|int
name|nCount
parameter_list|,
name|String
name|fileNamePrefix
parameter_list|)
block|{
if|if
condition|(
name|nCount
operator|<=
literal|0
condition|)
return|return
operator|new
name|INodeFile
index|[
literal|1
index|]
return|;
name|replication
operator|=
literal|3
expr_stmt|;
name|preferredBlockSize
operator|=
literal|128
operator|*
literal|1024
operator|*
literal|1024
expr_stmt|;
name|INodeFile
index|[]
name|iNodes
init|=
operator|new
name|INodeFile
index|[
name|nCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nCount
condition|;
name|i
operator|++
control|)
block|{
name|iNodes
index|[
name|i
index|]
operator|=
operator|new
name|INodeFile
argument_list|(
name|i
argument_list|,
literal|null
argument_list|,
name|perm
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|,
literal|null
argument_list|,
name|replication
argument_list|,
name|preferredBlockSize
argument_list|)
expr_stmt|;
name|iNodes
index|[
name|i
index|]
operator|.
name|setLocalName
argument_list|(
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
name|fileNamePrefix
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|BlockInfo
name|newblock
init|=
operator|new
name|BlockInfoContiguous
argument_list|(
name|replication
argument_list|)
decl_stmt|;
name|iNodes
index|[
name|i
index|]
operator|.
name|addBlock
argument_list|(
name|newblock
argument_list|)
expr_stmt|;
block|}
return|return
name|iNodes
return|;
block|}
comment|/**    * Test for the static {@link INodeFile#valueOf(INode, String)}    * and {@link INodeFileUnderConstruction#valueOf(INode, String)} methods.    * @throws IOException     */
annotation|@
name|Test
DECL|method|testValueOf ()
specifier|public
name|void
name|testValueOf
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|path
init|=
literal|"/testValueOf"
decl_stmt|;
specifier|final
name|short
name|replication
init|=
literal|3
decl_stmt|;
block|{
comment|//cast from null
specifier|final
name|INode
name|from
init|=
literal|null
decl_stmt|;
comment|//cast to INodeFile, should fail
try|try
block|{
name|INodeFile
operator|.
name|valueOf
argument_list|(
name|from
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnfe
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|fnfe
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"File does not exist"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//cast to INodeDirectory, should fail
try|try
block|{
name|INodeDirectory
operator|.
name|valueOf
argument_list|(
name|from
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Directory does not exist"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|{
comment|//cast from INodeFile
specifier|final
name|INode
name|from
init|=
name|createINodeFile
argument_list|(
name|replication
argument_list|,
name|preferredBlockSize
argument_list|)
decl_stmt|;
comment|//cast to INodeFile, should success
specifier|final
name|INodeFile
name|f
init|=
name|INodeFile
operator|.
name|valueOf
argument_list|(
name|from
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|f
operator|==
name|from
argument_list|)
expr_stmt|;
comment|//cast to INodeDirectory, should fail
try|try
block|{
name|INodeDirectory
operator|.
name|valueOf
argument_list|(
name|from
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathIsNotDirectoryException
name|e
parameter_list|)
block|{
comment|// Expected
block|}
block|}
block|{
comment|//cast from INodeFileUnderConstruction
specifier|final
name|INode
name|from
init|=
operator|new
name|INodeFile
argument_list|(
name|HdfsConstants
operator|.
name|GRANDFATHER_INODE_ID
argument_list|,
literal|null
argument_list|,
name|perm
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|,
literal|null
argument_list|,
name|replication
argument_list|,
literal|1024L
argument_list|)
decl_stmt|;
name|from
operator|.
name|asFile
argument_list|()
operator|.
name|toUnderConstruction
argument_list|(
literal|"client"
argument_list|,
literal|"machine"
argument_list|)
expr_stmt|;
comment|//cast to INodeFile, should success
specifier|final
name|INodeFile
name|f
init|=
name|INodeFile
operator|.
name|valueOf
argument_list|(
name|from
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|f
operator|==
name|from
argument_list|)
expr_stmt|;
comment|//cast to INodeDirectory, should fail
try|try
block|{
name|INodeDirectory
operator|.
name|valueOf
argument_list|(
name|from
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathIsNotDirectoryException
name|expected
parameter_list|)
block|{
comment|// expected
block|}
block|}
block|{
comment|//cast from INodeDirectory
specifier|final
name|INode
name|from
init|=
operator|new
name|INodeDirectory
argument_list|(
name|HdfsConstants
operator|.
name|GRANDFATHER_INODE_ID
argument_list|,
literal|null
argument_list|,
name|perm
argument_list|,
literal|0L
argument_list|)
decl_stmt|;
comment|//cast to INodeFile, should fail
try|try
block|{
name|INodeFile
operator|.
name|valueOf
argument_list|(
name|from
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnfe
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|fnfe
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Path is not a file"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//cast to INodeDirectory, should success
specifier|final
name|INodeDirectory
name|d
init|=
name|INodeDirectory
operator|.
name|valueOf
argument_list|(
name|from
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|d
operator|==
name|from
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This test verifies inode ID counter and inode map functionality.    */
annotation|@
name|Test
DECL|method|testInodeId ()
specifier|public
name|void
name|testInodeId
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_BYTES_PER_CHECKSUM_DEFAULT
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|FSNamesystem
name|fsn
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
decl_stmt|;
name|long
name|lastId
init|=
name|fsn
operator|.
name|dir
operator|.
name|getLastInodeId
argument_list|()
decl_stmt|;
comment|// Ensure root has the correct inode ID
comment|// Last inode ID should be root inode ID and inode map size should be 1
name|int
name|inodeCount
init|=
literal|1
decl_stmt|;
name|long
name|expectedLastInodeId
init|=
name|INodeId
operator|.
name|ROOT_INODE_ID
decl_stmt|;
name|assertEquals
argument_list|(
name|fsn
operator|.
name|dir
operator|.
name|rootDir
operator|.
name|getId
argument_list|()
argument_list|,
name|INodeId
operator|.
name|ROOT_INODE_ID
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedLastInodeId
argument_list|,
name|lastId
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|inodeCount
argument_list|,
name|fsn
operator|.
name|dir
operator|.
name|getInodeMapSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create a directory
comment|// Last inode ID and inode map size should increase by 1
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/test1"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|++
name|expectedLastInodeId
argument_list|,
name|fsn
operator|.
name|dir
operator|.
name|getLastInodeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|++
name|inodeCount
argument_list|,
name|fsn
operator|.
name|dir
operator|.
name|getInodeMapSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create a file
comment|// Last inode ID and inode map size should increase by 1
name|NamenodeProtocols
name|nnrpc
init|=
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/test1/file"
argument_list|)
argument_list|,
literal|1024
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|++
name|expectedLastInodeId
argument_list|,
name|fsn
operator|.
name|dir
operator|.
name|getLastInodeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|++
name|inodeCount
argument_list|,
name|fsn
operator|.
name|dir
operator|.
name|getInodeMapSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Ensure right inode ID is returned in file status
name|HdfsFileStatus
name|fileStatus
init|=
name|nnrpc
operator|.
name|getFileInfo
argument_list|(
literal|"/test1/file"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedLastInodeId
argument_list|,
name|fileStatus
operator|.
name|getFileId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Rename a directory
comment|// Last inode ID and inode map size should not change
name|Path
name|renamedPath
init|=
operator|new
name|Path
argument_list|(
literal|"/test2"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|rename
argument_list|(
name|path
argument_list|,
name|renamedPath
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedLastInodeId
argument_list|,
name|fsn
operator|.
name|dir
operator|.
name|getLastInodeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|inodeCount
argument_list|,
name|fsn
operator|.
name|dir
operator|.
name|getInodeMapSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Delete test2/file and test2 and ensure inode map size decreases
name|assertTrue
argument_list|(
name|fs
operator|.
name|delete
argument_list|(
name|renamedPath
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|inodeCount
operator|-=
literal|2
expr_stmt|;
name|assertEquals
argument_list|(
name|inodeCount
argument_list|,
name|fsn
operator|.
name|dir
operator|.
name|getInodeMapSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create and concat /test/file1 /test/file2
comment|// Create /test1/file1 and /test1/file2
name|String
name|file1
init|=
literal|"/test1/file1"
decl_stmt|;
name|String
name|file2
init|=
literal|"/test1/file2"
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|file1
argument_list|)
argument_list|,
literal|512
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|file2
argument_list|)
argument_list|,
literal|512
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|inodeCount
operator|+=
literal|3
expr_stmt|;
comment|// test1, file1 and file2 are created
name|expectedLastInodeId
operator|+=
literal|3
expr_stmt|;
name|assertEquals
argument_list|(
name|inodeCount
argument_list|,
name|fsn
operator|.
name|dir
operator|.
name|getInodeMapSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedLastInodeId
argument_list|,
name|fsn
operator|.
name|dir
operator|.
name|getLastInodeId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Concat the /test1/file1 /test1/file2 into /test1/file2
name|nnrpc
operator|.
name|concat
argument_list|(
name|file2
argument_list|,
operator|new
name|String
index|[]
block|{
name|file1
block|}
argument_list|)
expr_stmt|;
name|inodeCount
operator|--
expr_stmt|;
comment|// file1 and file2 are concatenated to file2
name|assertEquals
argument_list|(
name|inodeCount
argument_list|,
name|fsn
operator|.
name|dir
operator|.
name|getInodeMapSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedLastInodeId
argument_list|,
name|fsn
operator|.
name|dir
operator|.
name|getLastInodeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test1"
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|inodeCount
operator|-=
literal|2
expr_stmt|;
comment|// test1 and file2 is deleted
name|assertEquals
argument_list|(
name|inodeCount
argument_list|,
name|fsn
operator|.
name|dir
operator|.
name|getInodeMapSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make sure editlog is loaded correctly
name|cluster
operator|.
name|restartNameNode
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fsn
operator|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedLastInodeId
argument_list|,
name|fsn
operator|.
name|dir
operator|.
name|getLastInodeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|inodeCount
argument_list|,
name|fsn
operator|.
name|dir
operator|.
name|getInodeMapSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create two inodes test2 and test2/file2
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/test2/file2"
argument_list|)
argument_list|,
literal|1024
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|expectedLastInodeId
operator|+=
literal|2
expr_stmt|;
name|inodeCount
operator|+=
literal|2
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedLastInodeId
argument_list|,
name|fsn
operator|.
name|dir
operator|.
name|getLastInodeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|inodeCount
argument_list|,
name|fsn
operator|.
name|dir
operator|.
name|getInodeMapSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// create /test3, and /test3/file.
comment|// /test3/file is a file under construction
name|FSDataOutputStream
name|outStream
init|=
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test3/file"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|outStream
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|expectedLastInodeId
operator|+=
literal|2
expr_stmt|;
name|inodeCount
operator|+=
literal|2
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedLastInodeId
argument_list|,
name|fsn
operator|.
name|dir
operator|.
name|getLastInodeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|inodeCount
argument_list|,
name|fsn
operator|.
name|dir
operator|.
name|getInodeMapSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Apply editlogs to fsimage, ensure inodeUnderConstruction is handled
name|fsn
operator|.
name|enterSafeMode
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|fsn
operator|.
name|saveNamespace
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fsn
operator|.
name|leaveSafeMode
argument_list|()
expr_stmt|;
name|outStream
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// The lastInodeId in fsimage should remain the same after reboot
name|cluster
operator|.
name|restartNameNode
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fsn
operator|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedLastInodeId
argument_list|,
name|fsn
operator|.
name|dir
operator|.
name|getLastInodeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|inodeCount
argument_list|,
name|fsn
operator|.
name|dir
operator|.
name|getInodeMapSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testWriteToDeletedFile ()
specifier|public
name|void
name|testWriteToDeletedFile
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/test1"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|size
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BYTES_PER_CHECKSUM_KEY
argument_list|,
literal|512
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
comment|// Create one file
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
literal|"/test1/file"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|fos
init|=
name|fs
operator|.
name|create
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
comment|// Delete the file
name|fs
operator|.
name|delete
argument_list|(
name|filePath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Add new block should fail since /test1/file has been deleted.
try|try
block|{
name|fos
operator|.
name|write
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// make sure addBlock() request gets to NN immediately
name|fos
operator|.
name|hflush
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Write should fail after delete"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|/* Ignore */
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getInodePath (long inodeId, String remainingPath)
specifier|private
name|Path
name|getInodePath
parameter_list|(
name|long
name|inodeId
parameter_list|,
name|String
name|remainingPath
parameter_list|)
block|{
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
operator|.
name|append
argument_list|(
name|FSDirectory
operator|.
name|DOT_RESERVED_STRING
argument_list|)
operator|.
name|append
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
operator|.
name|append
argument_list|(
name|FSDirectory
operator|.
name|DOT_INODES_STRING
argument_list|)
operator|.
name|append
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
operator|.
name|append
argument_list|(
name|inodeId
argument_list|)
operator|.
name|append
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
operator|.
name|append
argument_list|(
name|remainingPath
argument_list|)
expr_stmt|;
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|b
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Inode path is "
operator|+
name|p
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
comment|/**    * Tests for addressing files using /.reserved/.inodes/<inodeID> in file system    * operations.    */
annotation|@
name|Test
DECL|method|testInodeIdBasedPaths ()
specifier|public
name|void
name|testInodeIdBasedPaths
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_BYTES_PER_CHECKSUM_DEFAULT
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_ACLS_ENABLED_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|DistributedFileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|NamenodeProtocols
name|nnRpc
init|=
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
decl_stmt|;
comment|// FileSystem#mkdirs "/testInodeIdBasedPaths"
name|Path
name|baseDir
init|=
name|getInodePath
argument_list|(
name|INodeId
operator|.
name|ROOT_INODE_ID
argument_list|,
literal|"testInodeIdBasedPaths"
argument_list|)
decl_stmt|;
name|Path
name|baseDirRegPath
init|=
operator|new
name|Path
argument_list|(
literal|"/testInodeIdBasedPaths"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|baseDir
argument_list|)
expr_stmt|;
name|fs
operator|.
name|exists
argument_list|(
name|baseDir
argument_list|)
expr_stmt|;
name|long
name|baseDirFileId
init|=
name|nnRpc
operator|.
name|getFileInfo
argument_list|(
name|baseDir
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getFileId
argument_list|()
decl_stmt|;
comment|// FileSystem#create file and FileSystem#close
name|Path
name|testFileInodePath
init|=
name|getInodePath
argument_list|(
name|baseDirFileId
argument_list|,
literal|"test1"
argument_list|)
decl_stmt|;
name|Path
name|testFileRegularPath
init|=
operator|new
name|Path
argument_list|(
name|baseDir
argument_list|,
literal|"test1"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|testFileBlockSize
init|=
literal|1024
decl_stmt|;
name|FileSystemTestHelper
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|testFileInodePath
argument_list|,
literal|1
argument_list|,
name|testFileBlockSize
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|testFileInodePath
argument_list|)
argument_list|)
expr_stmt|;
comment|// FileSystem#setPermission
name|FsPermission
name|perm
init|=
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0666
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|testFileInodePath
argument_list|,
name|perm
argument_list|)
expr_stmt|;
comment|// FileSystem#getFileStatus and FileSystem#getPermission
name|FileStatus
name|fileStatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|testFileInodePath
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|perm
argument_list|,
name|fileStatus
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
comment|// FileSystem#setOwner
name|fs
operator|.
name|setOwner
argument_list|(
name|testFileInodePath
argument_list|,
name|fileStatus
operator|.
name|getOwner
argument_list|()
argument_list|,
name|fileStatus
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
comment|// FileSystem#setTimes
name|fs
operator|.
name|setTimes
argument_list|(
name|testFileInodePath
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fileStatus
operator|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|testFileInodePath
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|fileStatus
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|fileStatus
operator|.
name|getAccessTime
argument_list|()
argument_list|)
expr_stmt|;
comment|// FileSystem#setReplication
name|fs
operator|.
name|setReplication
argument_list|(
name|testFileInodePath
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
expr_stmt|;
name|fileStatus
operator|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|testFileInodePath
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|fileStatus
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setReplication
argument_list|(
name|testFileInodePath
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
comment|// ClientProtocol#getPreferredBlockSize
name|assertEquals
argument_list|(
name|testFileBlockSize
argument_list|,
name|nnRpc
operator|.
name|getPreferredBlockSize
argument_list|(
name|testFileInodePath
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|/*        * HDFS-6749 added missing calls to FSDirectory.resolvePath in the        * following four methods. The calls below ensure that        * /.reserved/.inodes paths work properly. No need to check return        * values as these methods are tested elsewhere.        */
block|{
name|fs
operator|.
name|isFileClosed
argument_list|(
name|testFileInodePath
argument_list|)
expr_stmt|;
name|fs
operator|.
name|getAclStatus
argument_list|(
name|testFileInodePath
argument_list|)
expr_stmt|;
name|fs
operator|.
name|getXAttrs
argument_list|(
name|testFileInodePath
argument_list|)
expr_stmt|;
name|fs
operator|.
name|listXAttrs
argument_list|(
name|testFileInodePath
argument_list|)
expr_stmt|;
name|fs
operator|.
name|access
argument_list|(
name|testFileInodePath
argument_list|,
name|FsAction
operator|.
name|READ_WRITE
argument_list|)
expr_stmt|;
block|}
comment|// symbolic link related tests
comment|// Reserved path is not allowed as a target
name|String
name|invalidTarget
init|=
operator|new
name|Path
argument_list|(
name|baseDir
argument_list|,
literal|"invalidTarget"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|link
init|=
operator|new
name|Path
argument_list|(
name|baseDir
argument_list|,
literal|"link"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|testInvalidSymlinkTarget
argument_list|(
name|nnRpc
argument_list|,
name|invalidTarget
argument_list|,
name|link
argument_list|)
expr_stmt|;
comment|// Test creating a link using reserved inode path
name|String
name|validTarget
init|=
literal|"/validtarget"
decl_stmt|;
name|testValidSymlinkTarget
argument_list|(
name|nnRpc
argument_list|,
name|validTarget
argument_list|,
name|link
argument_list|)
expr_stmt|;
comment|// FileSystem#append
name|fs
operator|.
name|append
argument_list|(
name|testFileInodePath
argument_list|)
expr_stmt|;
comment|// DistributedFileSystem#recoverLease
name|fs
operator|.
name|recoverLease
argument_list|(
name|testFileInodePath
argument_list|)
expr_stmt|;
comment|// Namenode#getBlockLocations
name|LocatedBlocks
name|l1
init|=
name|nnRpc
operator|.
name|getBlockLocations
argument_list|(
name|testFileInodePath
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|LocatedBlocks
name|l2
init|=
name|nnRpc
operator|.
name|getBlockLocations
argument_list|(
name|testFileRegularPath
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|checkEquals
argument_list|(
name|l1
argument_list|,
name|l2
argument_list|)
expr_stmt|;
comment|// FileSystem#rename - both the variants
name|Path
name|renameDst
init|=
name|getInodePath
argument_list|(
name|baseDirFileId
argument_list|,
literal|"test2"
argument_list|)
decl_stmt|;
name|fileStatus
operator|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|testFileInodePath
argument_list|)
expr_stmt|;
comment|// Rename variant 1: rename and rename bacck
name|fs
operator|.
name|rename
argument_list|(
name|testFileInodePath
argument_list|,
name|renameDst
argument_list|)
expr_stmt|;
name|fs
operator|.
name|rename
argument_list|(
name|renameDst
argument_list|,
name|testFileInodePath
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fileStatus
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|testFileInodePath
argument_list|)
argument_list|)
expr_stmt|;
comment|// Rename variant 2: rename and rename bacck
name|fs
operator|.
name|rename
argument_list|(
name|testFileInodePath
argument_list|,
name|renameDst
argument_list|,
name|Rename
operator|.
name|OVERWRITE
argument_list|)
expr_stmt|;
name|fs
operator|.
name|rename
argument_list|(
name|renameDst
argument_list|,
name|testFileInodePath
argument_list|,
name|Rename
operator|.
name|OVERWRITE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fileStatus
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|testFileInodePath
argument_list|)
argument_list|)
expr_stmt|;
comment|// FileSystem#getContentSummary
name|assertEquals
argument_list|(
name|fs
operator|.
name|getContentSummary
argument_list|(
name|testFileRegularPath
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|fs
operator|.
name|getContentSummary
argument_list|(
name|testFileInodePath
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// FileSystem#listFiles
name|checkEquals
argument_list|(
name|fs
operator|.
name|listFiles
argument_list|(
name|baseDirRegPath
argument_list|,
literal|false
argument_list|)
argument_list|,
name|fs
operator|.
name|listFiles
argument_list|(
name|baseDir
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// FileSystem#delete
name|fs
operator|.
name|delete
argument_list|(
name|testFileInodePath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|testFileInodePath
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|testInvalidSymlinkTarget (NamenodeProtocols nnRpc, String invalidTarget, String link)
specifier|private
name|void
name|testInvalidSymlinkTarget
parameter_list|(
name|NamenodeProtocols
name|nnRpc
parameter_list|,
name|String
name|invalidTarget
parameter_list|,
name|String
name|link
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|FsPermission
name|perm
init|=
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0755
argument_list|)
decl_stmt|;
name|nnRpc
operator|.
name|createSymlink
argument_list|(
name|invalidTarget
argument_list|,
name|link
argument_list|,
name|perm
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Symbolic link creation of target "
operator|+
name|invalidTarget
operator|+
literal|" should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidPathException
name|expected
parameter_list|)
block|{
comment|// Expected
block|}
block|}
DECL|method|testValidSymlinkTarget (NamenodeProtocols nnRpc, String target, String link)
specifier|private
name|void
name|testValidSymlinkTarget
parameter_list|(
name|NamenodeProtocols
name|nnRpc
parameter_list|,
name|String
name|target
parameter_list|,
name|String
name|link
parameter_list|)
throws|throws
name|IOException
block|{
name|FsPermission
name|perm
init|=
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0755
argument_list|)
decl_stmt|;
name|nnRpc
operator|.
name|createSymlink
argument_list|(
name|target
argument_list|,
name|link
argument_list|,
name|perm
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|target
argument_list|,
name|nnRpc
operator|.
name|getLinkTarget
argument_list|(
name|link
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|checkEquals (LocatedBlocks l1, LocatedBlocks l2)
specifier|private
specifier|static
name|void
name|checkEquals
parameter_list|(
name|LocatedBlocks
name|l1
parameter_list|,
name|LocatedBlocks
name|l2
parameter_list|)
block|{
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|list1
init|=
name|l1
operator|.
name|getLocatedBlocks
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|list2
init|=
name|l2
operator|.
name|getLocatedBlocks
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|list1
operator|.
name|size
argument_list|()
argument_list|,
name|list2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list1
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|LocatedBlock
name|b1
init|=
name|list1
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|LocatedBlock
name|b2
init|=
name|list2
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|b1
operator|.
name|getBlock
argument_list|()
argument_list|,
name|b2
operator|.
name|getBlock
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|b1
operator|.
name|getBlockSize
argument_list|()
argument_list|,
name|b2
operator|.
name|getBlockSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkEquals (RemoteIterator<LocatedFileStatus> i1, RemoteIterator<LocatedFileStatus> i2)
specifier|private
specifier|static
name|void
name|checkEquals
parameter_list|(
name|RemoteIterator
argument_list|<
name|LocatedFileStatus
argument_list|>
name|i1
parameter_list|,
name|RemoteIterator
argument_list|<
name|LocatedFileStatus
argument_list|>
name|i2
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
name|i1
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|assertTrue
argument_list|(
name|i2
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Compare all the fields but the path name, which is relative
comment|// to the original path from listFiles.
name|LocatedFileStatus
name|l1
init|=
name|i1
operator|.
name|next
argument_list|()
decl_stmt|;
name|LocatedFileStatus
name|l2
init|=
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|l1
operator|.
name|getAccessTime
argument_list|()
argument_list|,
name|l2
operator|.
name|getAccessTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|l1
operator|.
name|getBlockSize
argument_list|()
argument_list|,
name|l2
operator|.
name|getBlockSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|l1
operator|.
name|getGroup
argument_list|()
argument_list|,
name|l2
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|l1
operator|.
name|getLen
argument_list|()
argument_list|,
name|l2
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|l1
operator|.
name|getModificationTime
argument_list|()
argument_list|,
name|l2
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|l1
operator|.
name|getOwner
argument_list|()
argument_list|,
name|l2
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|l1
operator|.
name|getPermission
argument_list|()
argument_list|,
name|l2
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|l1
operator|.
name|getReplication
argument_list|()
argument_list|,
name|l2
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|i2
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check /.reserved path is reserved and cannot be created.    */
annotation|@
name|Test
DECL|method|testReservedFileNames ()
specifier|public
name|void
name|testReservedFileNames
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// First start a cluster with reserved file names check turned off
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// Creation of directory or file with reserved path names is disallowed
name|ensureReservedFileNamesCannotBeCreated
argument_list|(
name|fs
argument_list|,
literal|"/.reserved"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ensureReservedFileNamesCannotBeCreated
argument_list|(
name|fs
argument_list|,
literal|"/.reserved"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Path
name|reservedPath
init|=
operator|new
name|Path
argument_list|(
literal|"/.reserved"
argument_list|)
decl_stmt|;
comment|// Loading of fsimage or editlog with /.reserved directory should fail
comment|// Mkdir "/.reserved reserved path with reserved path check turned off
name|FSDirectory
operator|.
name|CHECK_RESERVED_FILE_NAMES
operator|=
literal|false
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|reservedPath
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|isDirectory
argument_list|(
name|reservedPath
argument_list|)
argument_list|)
expr_stmt|;
name|ensureReservedFileNamesCannotBeLoaded
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
comment|// Loading of fsimage or editlog with /.reserved file should fail
comment|// Create file "/.reserved reserved path with reserved path check turned off
name|FSDirectory
operator|.
name|CHECK_RESERVED_FILE_NAMES
operator|=
literal|false
expr_stmt|;
name|ensureClusterRestartSucceeds
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|reservedPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|reservedPath
argument_list|,
literal|10
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|fs
operator|.
name|isDirectory
argument_list|(
name|reservedPath
argument_list|)
argument_list|)
expr_stmt|;
name|ensureReservedFileNamesCannotBeLoaded
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|ensureReservedFileNamesCannotBeCreated (FileSystem fs, String name, boolean isDir)
specifier|private
name|void
name|ensureReservedFileNamesCannotBeCreated
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|isDir
parameter_list|)
block|{
comment|// Creation of directory or file with reserved path names is disallowed
name|Path
name|reservedPath
init|=
operator|new
name|Path
argument_list|(
name|name
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|isDir
condition|)
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
name|reservedPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|reservedPath
argument_list|,
literal|10
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
name|fail
argument_list|(
operator|(
name|isDir
condition|?
literal|"mkdir"
else|:
literal|"create file"
operator|)
operator|+
literal|" should be disallowed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|expected
parameter_list|)
block|{
comment|// ignored
block|}
block|}
DECL|method|ensureReservedFileNamesCannotBeLoaded (MiniDFSCluster cluster)
specifier|private
name|void
name|ensureReservedFileNamesCannotBeLoaded
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Turn on reserved file name checking. Loading of edits should fail
name|FSDirectory
operator|.
name|CHECK_RESERVED_FILE_NAMES
operator|=
literal|true
expr_stmt|;
name|ensureClusterRestartFails
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
comment|// Turn off reserved file name checking and successfully load edits
name|FSDirectory
operator|.
name|CHECK_RESERVED_FILE_NAMES
operator|=
literal|false
expr_stmt|;
name|ensureClusterRestartSucceeds
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
comment|// Turn on reserved file name checking. Loading of fsimage should fail
name|FSDirectory
operator|.
name|CHECK_RESERVED_FILE_NAMES
operator|=
literal|true
expr_stmt|;
name|ensureClusterRestartFails
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
block|}
DECL|method|ensureClusterRestartFails (MiniDFSCluster cluster)
specifier|private
name|void
name|ensureClusterRestartFails
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|)
block|{
try|try
block|{
name|cluster
operator|.
name|restartNameNode
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Cluster should not have successfully started"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|expected
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Expected exception thrown "
operator|+
name|expected
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|cluster
operator|.
name|isClusterUp
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|ensureClusterRestartSucceeds (MiniDFSCluster cluster)
specifier|private
name|void
name|ensureClusterRestartSucceeds
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|)
throws|throws
name|IOException
block|{
name|cluster
operator|.
name|restartNameNode
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|cluster
operator|.
name|isClusterUp
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * For a given path, build a tree of INodes and return the leaf node.    */
DECL|method|createTreeOfInodes (String path)
specifier|private
name|INode
name|createTreeOfInodes
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|QuotaExceededException
block|{
name|byte
index|[]
index|[]
name|components
init|=
name|INode
operator|.
name|getPathComponents
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|FsPermission
name|perm
init|=
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0755
argument_list|)
decl_stmt|;
name|PermissionStatus
name|permstatus
init|=
name|PermissionStatus
operator|.
name|createImmutable
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
name|perm
argument_list|)
decl_stmt|;
name|long
name|id
init|=
literal|0
decl_stmt|;
name|INodeDirectory
name|prev
init|=
operator|new
name|INodeDirectory
argument_list|(
operator|++
name|id
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
name|permstatus
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|INodeDirectory
name|dir
init|=
literal|null
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|component
range|:
name|components
control|)
block|{
if|if
condition|(
name|component
operator|.
name|length
operator|==
literal|0
condition|)
block|{
continue|continue;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Adding component "
operator|+
name|DFSUtil
operator|.
name|bytes2String
argument_list|(
name|component
argument_list|)
argument_list|)
expr_stmt|;
name|dir
operator|=
operator|new
name|INodeDirectory
argument_list|(
operator|++
name|id
argument_list|,
name|component
argument_list|,
name|permstatus
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|prev
operator|.
name|addChild
argument_list|(
name|dir
argument_list|,
literal|false
argument_list|,
name|Snapshot
operator|.
name|CURRENT_STATE_ID
argument_list|)
expr_stmt|;
name|prev
operator|=
name|dir
expr_stmt|;
block|}
return|return
name|dir
return|;
comment|// Last Inode in the chain
block|}
comment|/**    * Test for {@link FSDirectory#getPathComponents(INode)}    */
annotation|@
name|Test
DECL|method|testGetPathFromInode ()
specifier|public
name|void
name|testGetPathFromInode
parameter_list|()
throws|throws
name|QuotaExceededException
block|{
name|String
name|path
init|=
literal|"/a/b/c"
decl_stmt|;
name|INode
name|inode
init|=
name|createTreeOfInodes
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|expected
init|=
name|INode
operator|.
name|getPathComponents
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|actual
init|=
name|FSDirectory
operator|.
name|getPathComponents
argument_list|(
name|inode
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|checkComponentsEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests for {@link FSDirectory#resolvePath(String, byte[][], FSDirectory)}    */
annotation|@
name|Test
DECL|method|testInodePath ()
specifier|public
name|void
name|testInodePath
parameter_list|()
throws|throws
name|IOException
block|{
comment|// For a non .inodes path the regular components are returned
name|String
name|path
init|=
literal|"/a/b/c"
decl_stmt|;
name|INode
name|inode
init|=
name|createTreeOfInodes
argument_list|(
name|path
argument_list|)
decl_stmt|;
comment|// For an any inode look up return inode corresponding to "c" from /a/b/c
name|FSDirectory
name|fsd
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|FSDirectory
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
name|inode
argument_list|)
operator|.
name|when
argument_list|(
name|fsd
argument_list|)
operator|.
name|getInode
argument_list|(
name|Mockito
operator|.
name|anyLong
argument_list|()
argument_list|)
expr_stmt|;
comment|// Null components
name|assertEquals
argument_list|(
literal|"/test"
argument_list|,
name|FSDirectory
operator|.
name|resolvePath
argument_list|(
literal|"/test"
argument_list|,
literal|null
argument_list|,
name|fsd
argument_list|)
argument_list|)
expr_stmt|;
comment|// Tests for FSDirectory#resolvePath()
comment|// Non inode regular path
name|byte
index|[]
index|[]
name|components
init|=
name|INode
operator|.
name|getPathComponents
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|String
name|resolvedPath
init|=
name|FSDirectory
operator|.
name|resolvePath
argument_list|(
name|path
argument_list|,
name|components
argument_list|,
name|fsd
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|path
argument_list|,
name|resolvedPath
argument_list|)
expr_stmt|;
comment|// Inode path with no trailing separator
name|components
operator|=
name|INode
operator|.
name|getPathComponents
argument_list|(
literal|"/.reserved/.inodes/1"
argument_list|)
expr_stmt|;
name|resolvedPath
operator|=
name|FSDirectory
operator|.
name|resolvePath
argument_list|(
name|path
argument_list|,
name|components
argument_list|,
name|fsd
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|path
argument_list|,
name|resolvedPath
argument_list|)
expr_stmt|;
comment|// Inode path with trailing separator
name|components
operator|=
name|INode
operator|.
name|getPathComponents
argument_list|(
literal|"/.reserved/.inodes/1/"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|path
argument_list|,
name|resolvedPath
argument_list|)
expr_stmt|;
comment|// Inode relative path
name|components
operator|=
name|INode
operator|.
name|getPathComponents
argument_list|(
literal|"/.reserved/.inodes/1/d/e/f"
argument_list|)
expr_stmt|;
name|resolvedPath
operator|=
name|FSDirectory
operator|.
name|resolvePath
argument_list|(
name|path
argument_list|,
name|components
argument_list|,
name|fsd
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/a/b/c/d/e/f"
argument_list|,
name|resolvedPath
argument_list|)
expr_stmt|;
comment|// A path with just .inodes  returns the path as is
name|String
name|testPath
init|=
literal|"/.reserved/.inodes"
decl_stmt|;
name|components
operator|=
name|INode
operator|.
name|getPathComponents
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|resolvedPath
operator|=
name|FSDirectory
operator|.
name|resolvePath
argument_list|(
name|testPath
argument_list|,
name|components
argument_list|,
name|fsd
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testPath
argument_list|,
name|resolvedPath
argument_list|)
expr_stmt|;
comment|// Root inode path
name|testPath
operator|=
literal|"/.reserved/.inodes/"
operator|+
name|INodeId
operator|.
name|ROOT_INODE_ID
expr_stmt|;
name|components
operator|=
name|INode
operator|.
name|getPathComponents
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|resolvedPath
operator|=
name|FSDirectory
operator|.
name|resolvePath
argument_list|(
name|testPath
argument_list|,
name|components
argument_list|,
name|fsd
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/"
argument_list|,
name|resolvedPath
argument_list|)
expr_stmt|;
comment|// An invalid inode path should remain unresolved
name|testPath
operator|=
literal|"/.invalid/.inodes/1"
expr_stmt|;
name|components
operator|=
name|INode
operator|.
name|getPathComponents
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|resolvedPath
operator|=
name|FSDirectory
operator|.
name|resolvePath
argument_list|(
name|testPath
argument_list|,
name|components
argument_list|,
name|fsd
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testPath
argument_list|,
name|resolvedPath
argument_list|)
expr_stmt|;
comment|// Test path with nonexistent(deleted or wrong id) inode
name|Mockito
operator|.
name|doReturn
argument_list|(
literal|null
argument_list|)
operator|.
name|when
argument_list|(
name|fsd
argument_list|)
operator|.
name|getInode
argument_list|(
name|Mockito
operator|.
name|anyLong
argument_list|()
argument_list|)
expr_stmt|;
name|testPath
operator|=
literal|"/.reserved/.inodes/1234"
expr_stmt|;
name|components
operator|=
name|INode
operator|.
name|getPathComponents
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|realPath
init|=
name|FSDirectory
operator|.
name|resolvePath
argument_list|(
name|testPath
argument_list|,
name|components
argument_list|,
name|fsd
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Path should not be resolved:"
operator|+
name|realPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|instanceof
name|FileNotFoundException
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getDir (final FSDirectory fsdir, final Path dir)
specifier|private
specifier|static
name|INodeDirectory
name|getDir
parameter_list|(
specifier|final
name|FSDirectory
name|fsdir
parameter_list|,
specifier|final
name|Path
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|dirStr
init|=
name|dir
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
name|INodeDirectory
operator|.
name|valueOf
argument_list|(
name|fsdir
operator|.
name|getINode
argument_list|(
name|dirStr
argument_list|)
argument_list|,
name|dirStr
argument_list|)
return|;
block|}
comment|/**    * Test whether the inode in inodeMap has been replaced after regular inode    * replacement    */
annotation|@
name|Test
DECL|method|testInodeReplacement ()
specifier|public
name|void
name|testInodeReplacement
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|DistributedFileSystem
name|hdfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|FSDirectory
name|fsdir
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getFSDirectory
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/dir"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|INodeDirectory
name|dirNode
init|=
name|getDir
argument_list|(
name|fsdir
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|INode
name|dirNodeFromNode
init|=
name|fsdir
operator|.
name|getInode
argument_list|(
name|dirNode
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|dirNode
argument_list|,
name|dirNodeFromNode
argument_list|)
expr_stmt|;
comment|// set quota to dir, which leads to node replacement
name|hdfs
operator|.
name|setQuota
argument_list|(
name|dir
argument_list|,
name|Long
operator|.
name|MAX_VALUE
operator|-
literal|1
argument_list|,
name|Long
operator|.
name|MAX_VALUE
operator|-
literal|1
argument_list|)
expr_stmt|;
name|dirNode
operator|=
name|getDir
argument_list|(
name|fsdir
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dirNode
operator|.
name|isWithQuota
argument_list|()
argument_list|)
expr_stmt|;
comment|// the inode in inodeMap should also be replaced
name|dirNodeFromNode
operator|=
name|fsdir
operator|.
name|getInode
argument_list|(
name|dirNode
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|dirNode
argument_list|,
name|dirNodeFromNode
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|setQuota
argument_list|(
name|dir
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|dirNode
operator|=
name|getDir
argument_list|(
name|fsdir
argument_list|,
name|dir
argument_list|)
expr_stmt|;
comment|// the inode in inodeMap should also be replaced
name|dirNodeFromNode
operator|=
name|fsdir
operator|.
name|getInode
argument_list|(
name|dirNode
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|dirNode
argument_list|,
name|dirNodeFromNode
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testDotdotInodePath ()
specifier|public
name|void
name|testDotdotInodePath
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
name|DFSClient
name|client
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|DistributedFileSystem
name|hdfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|FSDirectory
name|fsdir
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getFSDirectory
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/dir"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|long
name|dirId
init|=
name|fsdir
operator|.
name|getINode
argument_list|(
name|dir
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getId
argument_list|()
decl_stmt|;
name|long
name|parentId
init|=
name|fsdir
operator|.
name|getINode
argument_list|(
literal|"/"
argument_list|)
operator|.
name|getId
argument_list|()
decl_stmt|;
name|String
name|testPath
init|=
literal|"/.reserved/.inodes/"
operator|+
name|dirId
operator|+
literal|"/.."
decl_stmt|;
name|client
operator|=
operator|new
name|DFSClient
argument_list|(
name|NameNode
operator|.
name|getAddress
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|HdfsFileStatus
name|status
init|=
name|client
operator|.
name|getFileInfo
argument_list|(
name|testPath
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|parentId
operator|==
name|status
operator|.
name|getFileId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test root's parent is still root
name|testPath
operator|=
literal|"/.reserved/.inodes/"
operator|+
name|parentId
operator|+
literal|"/.."
expr_stmt|;
name|status
operator|=
name|client
operator|.
name|getFileInfo
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|parentId
operator|==
name|status
operator|.
name|getFileId
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|client
argument_list|)
expr_stmt|;
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testLocationLimitInListingOps ()
specifier|public
name|void
name|testLocationLimitInListingOps
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_LIST_LIMIT
argument_list|,
literal|9
argument_list|)
expr_stmt|;
comment|// 3 blocks * 3 replicas
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|3
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|DistributedFileSystem
name|hdfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|source
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// tmp1 holds files with 3 blocks, 3 replicas
comment|// tmp2 holds files with 3 blocks, 1 replica
name|hdfs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/tmp1"
argument_list|)
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/tmp2"
argument_list|)
argument_list|)
expr_stmt|;
name|source
operator|.
name|add
argument_list|(
literal|"f1"
argument_list|)
expr_stmt|;
name|source
operator|.
name|add
argument_list|(
literal|"f2"
argument_list|)
expr_stmt|;
name|int
name|numEntries
init|=
name|source
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numEntries
condition|;
name|j
operator|++
control|)
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/tmp1/"
operator|+
name|source
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
argument_list|,
literal|4096
argument_list|,
literal|3
operator|*
literal|1024
operator|-
literal|100
argument_list|,
literal|1024
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|start
init|=
name|HdfsFileStatus
operator|.
name|EMPTY_NAME
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numEntries
condition|;
name|j
operator|++
control|)
block|{
name|DirectoryListing
name|dl
init|=
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
operator|.
name|getListing
argument_list|(
literal|"/tmp1"
argument_list|,
name|start
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|dl
operator|.
name|getPartialListing
argument_list|()
operator|.
name|length
operator|==
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dl
operator|.
name|getPartialListing
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|source
operator|.
name|remove
argument_list|(
name|dl
operator|.
name|getPartialListing
argument_list|()
index|[
name|i
index|]
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|start
operator|=
name|dl
operator|.
name|getLastName
argument_list|()
expr_stmt|;
block|}
comment|// Verify we have listed all entries in the directory.
name|assertTrue
argument_list|(
name|source
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// Now create 6 files, each with 3 locations. Should take 2 iterations of 3
name|source
operator|.
name|add
argument_list|(
literal|"f1"
argument_list|)
expr_stmt|;
name|source
operator|.
name|add
argument_list|(
literal|"f2"
argument_list|)
expr_stmt|;
name|source
operator|.
name|add
argument_list|(
literal|"f3"
argument_list|)
expr_stmt|;
name|source
operator|.
name|add
argument_list|(
literal|"f4"
argument_list|)
expr_stmt|;
name|source
operator|.
name|add
argument_list|(
literal|"f5"
argument_list|)
expr_stmt|;
name|source
operator|.
name|add
argument_list|(
literal|"f6"
argument_list|)
expr_stmt|;
name|numEntries
operator|=
name|source
operator|.
name|size
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numEntries
condition|;
name|j
operator|++
control|)
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/tmp2/"
operator|+
name|source
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
argument_list|,
literal|4096
argument_list|,
literal|3
operator|*
literal|1024
operator|-
literal|100
argument_list|,
literal|1024
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|start
operator|=
name|HdfsFileStatus
operator|.
name|EMPTY_NAME
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numEntries
operator|/
literal|3
condition|;
name|j
operator|++
control|)
block|{
name|DirectoryListing
name|dl
init|=
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
operator|.
name|getListing
argument_list|(
literal|"/tmp2"
argument_list|,
name|start
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|dl
operator|.
name|getPartialListing
argument_list|()
operator|.
name|length
operator|==
literal|3
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dl
operator|.
name|getPartialListing
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|source
operator|.
name|remove
argument_list|(
name|dl
operator|.
name|getPartialListing
argument_list|()
index|[
name|i
index|]
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|start
operator|=
name|dl
operator|.
name|getLastName
argument_list|()
expr_stmt|;
block|}
comment|// Verify we have listed all entries in tmp2.
name|assertTrue
argument_list|(
name|source
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testFilesInGetListingOps ()
specifier|public
name|void
name|testFilesInGetListingOps
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|DistributedFileSystem
name|hdfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|FSDirectory
name|fsdir
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getFSDirectory
argument_list|()
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/tmp"
argument_list|)
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/tmp/f1"
argument_list|)
argument_list|,
literal|0
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/tmp/f2"
argument_list|)
argument_list|,
literal|0
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/tmp/f3"
argument_list|)
argument_list|,
literal|0
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|DirectoryListing
name|dl
init|=
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
operator|.
name|getListing
argument_list|(
literal|"/tmp"
argument_list|,
name|HdfsFileStatus
operator|.
name|EMPTY_NAME
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|dl
operator|.
name|getPartialListing
argument_list|()
operator|.
name|length
operator|==
literal|3
argument_list|)
expr_stmt|;
name|String
name|f2
init|=
operator|new
name|String
argument_list|(
literal|"f2"
argument_list|)
decl_stmt|;
name|dl
operator|=
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
operator|.
name|getListing
argument_list|(
literal|"/tmp"
argument_list|,
name|f2
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dl
operator|.
name|getPartialListing
argument_list|()
operator|.
name|length
operator|==
literal|1
argument_list|)
expr_stmt|;
name|INode
name|f2INode
init|=
name|fsdir
operator|.
name|getINode
argument_list|(
literal|"/tmp/f2"
argument_list|)
decl_stmt|;
name|String
name|f2InodePath
init|=
literal|"/.reserved/.inodes/"
operator|+
name|f2INode
operator|.
name|getId
argument_list|()
decl_stmt|;
name|dl
operator|=
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
operator|.
name|getListing
argument_list|(
literal|"/tmp"
argument_list|,
name|f2InodePath
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dl
operator|.
name|getPartialListing
argument_list|()
operator|.
name|length
operator|==
literal|1
argument_list|)
expr_stmt|;
comment|// Test the deleted startAfter file
name|hdfs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/tmp/f2"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|dl
operator|=
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
operator|.
name|getListing
argument_list|(
literal|"/tmp"
argument_list|,
name|f2InodePath
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Didn't get exception for the deleted startAfter token."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|instanceof
name|DirectoryListingStartAfterNotFoundException
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testFileUnderConstruction ()
specifier|public
name|void
name|testFileUnderConstruction
parameter_list|()
block|{
name|replication
operator|=
literal|3
expr_stmt|;
specifier|final
name|INodeFile
name|file
init|=
operator|new
name|INodeFile
argument_list|(
name|HdfsConstants
operator|.
name|GRANDFATHER_INODE_ID
argument_list|,
literal|null
argument_list|,
name|perm
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|,
literal|null
argument_list|,
name|replication
argument_list|,
literal|1024L
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|file
operator|.
name|isUnderConstruction
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|String
name|clientName
init|=
literal|"client"
decl_stmt|;
specifier|final
name|String
name|clientMachine
init|=
literal|"machine"
decl_stmt|;
name|file
operator|.
name|toUnderConstruction
argument_list|(
name|clientName
argument_list|,
name|clientMachine
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|file
operator|.
name|isUnderConstruction
argument_list|()
argument_list|)
expr_stmt|;
name|FileUnderConstructionFeature
name|uc
init|=
name|file
operator|.
name|getFileUnderConstructionFeature
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|clientName
argument_list|,
name|uc
operator|.
name|getClientName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|clientMachine
argument_list|,
name|uc
operator|.
name|getClientMachine
argument_list|()
argument_list|)
expr_stmt|;
name|file
operator|.
name|toCompleteFile
argument_list|(
name|Time
operator|.
name|now
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|file
operator|.
name|isUnderConstruction
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testXAttrFeature ()
specifier|public
name|void
name|testXAttrFeature
parameter_list|()
block|{
name|replication
operator|=
literal|3
expr_stmt|;
name|preferredBlockSize
operator|=
literal|128
operator|*
literal|1024
operator|*
literal|1024
expr_stmt|;
name|INodeFile
name|inf
init|=
name|createINodeFile
argument_list|(
name|replication
argument_list|,
name|preferredBlockSize
argument_list|)
decl_stmt|;
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|XAttr
argument_list|>
name|builder
init|=
operator|new
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|XAttr
argument_list|>
argument_list|()
decl_stmt|;
name|XAttr
name|xAttr
init|=
operator|new
name|XAttr
operator|.
name|Builder
argument_list|()
operator|.
name|setNameSpace
argument_list|(
name|XAttr
operator|.
name|NameSpace
operator|.
name|USER
argument_list|)
operator|.
name|setName
argument_list|(
literal|"a1"
argument_list|)
operator|.
name|setValue
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|0x31
block|,
literal|0x32
block|,
literal|0x33
block|}
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|xAttr
argument_list|)
expr_stmt|;
name|XAttrFeature
name|f
init|=
operator|new
name|XAttrFeature
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|inf
operator|.
name|addXAttrFeature
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|XAttrFeature
name|f1
init|=
name|inf
operator|.
name|getXAttrFeature
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|xAttr
argument_list|,
name|f1
operator|.
name|getXAttrs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|inf
operator|.
name|removeXAttrFeature
argument_list|()
expr_stmt|;
name|f1
operator|=
name|inf
operator|.
name|getXAttrFeature
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|f1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testClearBlocks ()
specifier|public
name|void
name|testClearBlocks
parameter_list|()
block|{
name|INodeFile
name|toBeCleared
init|=
name|createINodeFiles
argument_list|(
literal|1
argument_list|,
literal|"toBeCleared"
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|toBeCleared
operator|.
name|getBlocks
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|toBeCleared
operator|.
name|clearBlocks
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|toBeCleared
operator|.
name|getBlocks
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

