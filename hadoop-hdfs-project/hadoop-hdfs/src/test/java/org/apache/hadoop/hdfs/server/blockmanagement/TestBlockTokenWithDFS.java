begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.blockmanagement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|impl
operator|.
name|Log4JLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|BlockReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|BlockReaderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|BlockTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|BlockTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|InvalidBlockTokenException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|SecurityTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|balancer
operator|.
name|TestBalancer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamenodeProtocols
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestBlockTokenWithDFS
specifier|public
class|class
name|TestBlockTokenWithDFS
block|{
DECL|field|BLOCK_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|BLOCK_SIZE
init|=
literal|1024
decl_stmt|;
DECL|field|FILE_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|FILE_SIZE
init|=
literal|2
operator|*
name|BLOCK_SIZE
decl_stmt|;
DECL|field|FILE_TO_READ
specifier|private
specifier|static
specifier|final
name|String
name|FILE_TO_READ
init|=
literal|"/fileToRead.dat"
decl_stmt|;
DECL|field|FILE_TO_WRITE
specifier|private
specifier|static
specifier|final
name|String
name|FILE_TO_WRITE
init|=
literal|"/fileToWrite.dat"
decl_stmt|;
DECL|field|FILE_TO_APPEND
specifier|private
specifier|static
specifier|final
name|String
name|FILE_TO_APPEND
init|=
literal|"/fileToAppend.dat"
decl_stmt|;
DECL|field|rawData
specifier|private
specifier|final
name|byte
index|[]
name|rawData
init|=
operator|new
name|byte
index|[
name|FILE_SIZE
index|]
decl_stmt|;
block|{
operator|(
operator|(
name|Log4JLogger
operator|)
name|DFSClient
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|r
operator|.
name|nextBytes
parameter_list|(
name|rawData
parameter_list|)
constructor_decl|;
block|}
DECL|method|createFile (FileSystem fs, Path filename)
specifier|private
name|void
name|createFile
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|filename
parameter_list|)
throws|throws
name|IOException
block|{
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|rawData
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// read a file using blockSeekTo()
DECL|method|checkFile1 (FSDataInputStream in)
specifier|private
name|boolean
name|checkFile1
parameter_list|(
name|FSDataInputStream
name|in
parameter_list|)
block|{
name|byte
index|[]
name|toRead
init|=
operator|new
name|byte
index|[
name|FILE_SIZE
index|]
decl_stmt|;
name|int
name|totalRead
init|=
literal|0
decl_stmt|;
name|int
name|nRead
init|=
literal|0
decl_stmt|;
try|try
block|{
while|while
condition|(
operator|(
name|nRead
operator|=
name|in
operator|.
name|read
argument_list|(
name|toRead
argument_list|,
name|totalRead
argument_list|,
name|toRead
operator|.
name|length
operator|-
name|totalRead
argument_list|)
operator|)
operator|>
literal|0
condition|)
block|{
name|totalRead
operator|+=
name|nRead
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
name|assertEquals
argument_list|(
literal|"Cannot read file."
argument_list|,
name|toRead
operator|.
name|length
argument_list|,
name|totalRead
argument_list|)
expr_stmt|;
return|return
name|checkFile
argument_list|(
name|toRead
argument_list|)
return|;
block|}
comment|// read a file using fetchBlockByteRange()
DECL|method|checkFile2 (FSDataInputStream in)
specifier|private
name|boolean
name|checkFile2
parameter_list|(
name|FSDataInputStream
name|in
parameter_list|)
block|{
name|byte
index|[]
name|toRead
init|=
operator|new
name|byte
index|[
name|FILE_SIZE
index|]
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
literal|"Cannot read file"
argument_list|,
name|toRead
operator|.
name|length
argument_list|,
name|in
operator|.
name|read
argument_list|(
literal|0
argument_list|,
name|toRead
argument_list|,
literal|0
argument_list|,
name|toRead
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|checkFile
argument_list|(
name|toRead
argument_list|)
return|;
block|}
DECL|method|checkFile (byte[] fileToCheck)
specifier|private
name|boolean
name|checkFile
parameter_list|(
name|byte
index|[]
name|fileToCheck
parameter_list|)
block|{
if|if
condition|(
name|fileToCheck
operator|.
name|length
operator|!=
name|rawData
operator|.
name|length
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fileToCheck
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|fileToCheck
index|[
name|i
index|]
operator|!=
name|rawData
index|[
name|i
index|]
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|// creates a file and returns a descriptor for writing to it
DECL|method|writeFile (FileSystem fileSys, Path name, short repl, long blockSize)
specifier|private
specifier|static
name|FSDataOutputStream
name|writeFile
parameter_list|(
name|FileSystem
name|fileSys
parameter_list|,
name|Path
name|name
parameter_list|,
name|short
name|repl
parameter_list|,
name|long
name|blockSize
parameter_list|)
throws|throws
name|IOException
block|{
name|FSDataOutputStream
name|stm
init|=
name|fileSys
operator|.
name|create
argument_list|(
name|name
argument_list|,
literal|true
argument_list|,
name|fileSys
operator|.
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IO_FILE_BUFFER_SIZE_KEY
argument_list|,
literal|4096
argument_list|)
argument_list|,
name|repl
argument_list|,
name|blockSize
argument_list|)
decl_stmt|;
return|return
name|stm
return|;
block|}
comment|// try reading a block using a BlockReader directly
DECL|method|tryRead (Configuration conf, LocatedBlock lblock, boolean shouldSucceed)
specifier|private
specifier|static
name|void
name|tryRead
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|LocatedBlock
name|lblock
parameter_list|,
name|boolean
name|shouldSucceed
parameter_list|)
block|{
name|InetSocketAddress
name|targetAddr
init|=
literal|null
decl_stmt|;
name|Socket
name|s
init|=
literal|null
decl_stmt|;
name|BlockReader
name|blockReader
init|=
literal|null
decl_stmt|;
name|ExtendedBlock
name|block
init|=
name|lblock
operator|.
name|getBlock
argument_list|()
decl_stmt|;
try|try
block|{
name|DatanodeInfo
index|[]
name|nodes
init|=
name|lblock
operator|.
name|getLocations
argument_list|()
decl_stmt|;
name|targetAddr
operator|=
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|nodes
index|[
literal|0
index|]
operator|.
name|getXferAddr
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|=
name|NetUtils
operator|.
name|getDefaultSocketFactory
argument_list|(
name|conf
argument_list|)
operator|.
name|createSocket
argument_list|()
expr_stmt|;
name|s
operator|.
name|connect
argument_list|(
name|targetAddr
argument_list|,
name|HdfsServerConstants
operator|.
name|READ_TIMEOUT
argument_list|)
expr_stmt|;
name|s
operator|.
name|setSoTimeout
argument_list|(
name|HdfsServerConstants
operator|.
name|READ_TIMEOUT
argument_list|)
expr_stmt|;
name|String
name|file
init|=
name|BlockReaderFactory
operator|.
name|getFileName
argument_list|(
name|targetAddr
argument_list|,
literal|"test-blockpoolid"
argument_list|,
name|block
operator|.
name|getBlockId
argument_list|()
argument_list|)
decl_stmt|;
name|blockReader
operator|=
name|BlockReaderFactory
operator|.
name|newBlockReader
argument_list|(
name|conf
argument_list|,
name|s
argument_list|,
name|file
argument_list|,
name|block
argument_list|,
name|lblock
operator|.
name|getBlockToken
argument_list|()
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|ex
operator|instanceof
name|InvalidBlockTokenException
condition|)
block|{
name|assertFalse
argument_list|(
literal|"OP_READ_BLOCK: access token is invalid, "
operator|+
literal|"when it is expected to be valid"
argument_list|,
name|shouldSucceed
argument_list|)
expr_stmt|;
return|return;
block|}
name|fail
argument_list|(
literal|"OP_READ_BLOCK failed due to reasons other than access token: "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|ex
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|iex
parameter_list|)
block|{         }
finally|finally
block|{
name|s
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|blockReader
operator|==
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"OP_READ_BLOCK failed due to reasons other than access token"
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"OP_READ_BLOCK: access token is valid, "
operator|+
literal|"when it is expected to be invalid"
argument_list|,
name|shouldSucceed
argument_list|)
expr_stmt|;
block|}
comment|// get a conf for testing
DECL|method|getConf (int numDataNodes)
specifier|private
specifier|static
name|Configuration
name|getConf
parameter_list|(
name|int
name|numDataNodes
parameter_list|)
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_ACCESS_TOKEN_ENABLE_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"io.bytes.per.checksum"
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_REPLICATION_KEY
argument_list|,
name|numDataNodes
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"ipc.client.connect.max.retries"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_SUPPORT_APPEND_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_SUPPORT_APPEND_DEFAULT
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
comment|/**    * testing that APPEND operation can handle token expiration when    * re-establishing pipeline is needed    */
annotation|@
name|Test
DECL|method|testAppend ()
specifier|public
name|void
name|testAppend
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
name|int
name|numDataNodes
init|=
literal|2
decl_stmt|;
name|Configuration
name|conf
init|=
name|getConf
argument_list|(
name|numDataNodes
argument_list|)
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDataNodes
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|numDataNodes
argument_list|,
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|NameNode
name|nn
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
decl_stmt|;
specifier|final
name|BlockManager
name|bm
init|=
name|nn
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
decl_stmt|;
specifier|final
name|BlockTokenSecretManager
name|sm
init|=
name|bm
operator|.
name|getBlockTokenSecretManager
argument_list|()
decl_stmt|;
comment|// set a short token lifetime (1 second)
name|SecurityTestUtil
operator|.
name|setBlockTokenLifetime
argument_list|(
name|sm
argument_list|,
literal|1000L
argument_list|)
expr_stmt|;
name|Path
name|fileToAppend
init|=
operator|new
name|Path
argument_list|(
name|FILE_TO_APPEND
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// write a one-byte file
name|FSDataOutputStream
name|stm
init|=
name|writeFile
argument_list|(
name|fs
argument_list|,
name|fileToAppend
argument_list|,
operator|(
name|short
operator|)
name|numDataNodes
argument_list|,
name|BLOCK_SIZE
argument_list|)
decl_stmt|;
name|stm
operator|.
name|write
argument_list|(
name|rawData
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// open the file again for append
name|stm
operator|=
name|fs
operator|.
name|append
argument_list|(
name|fileToAppend
argument_list|)
expr_stmt|;
name|int
name|mid
init|=
name|rawData
operator|.
name|length
operator|-
literal|1
decl_stmt|;
name|stm
operator|.
name|write
argument_list|(
name|rawData
argument_list|,
literal|1
argument_list|,
name|mid
operator|-
literal|1
argument_list|)
expr_stmt|;
name|stm
operator|.
name|hflush
argument_list|()
expr_stmt|;
comment|/*        * wait till token used in stm expires        */
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|token
init|=
name|DFSTestUtil
operator|.
name|getBlockToken
argument_list|(
name|stm
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|SecurityTestUtil
operator|.
name|isBlockTokenExpired
argument_list|(
name|token
argument_list|)
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignored
parameter_list|)
block|{         }
block|}
comment|// remove a datanode to force re-establishing pipeline
name|cluster
operator|.
name|stopDataNode
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// append the rest of the file
name|stm
operator|.
name|write
argument_list|(
name|rawData
argument_list|,
name|mid
argument_list|,
name|rawData
operator|.
name|length
operator|-
name|mid
argument_list|)
expr_stmt|;
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// check if append is successful
name|FSDataInputStream
name|in5
init|=
name|fs
operator|.
name|open
argument_list|(
name|fileToAppend
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|checkFile1
argument_list|(
name|in5
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * testing that WRITE operation can handle token expiration when    * re-establishing pipeline is needed    */
annotation|@
name|Test
DECL|method|testWrite ()
specifier|public
name|void
name|testWrite
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
name|int
name|numDataNodes
init|=
literal|2
decl_stmt|;
name|Configuration
name|conf
init|=
name|getConf
argument_list|(
name|numDataNodes
argument_list|)
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDataNodes
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|numDataNodes
argument_list|,
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|NameNode
name|nn
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
decl_stmt|;
specifier|final
name|BlockManager
name|bm
init|=
name|nn
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
decl_stmt|;
specifier|final
name|BlockTokenSecretManager
name|sm
init|=
name|bm
operator|.
name|getBlockTokenSecretManager
argument_list|()
decl_stmt|;
comment|// set a short token lifetime (1 second)
name|SecurityTestUtil
operator|.
name|setBlockTokenLifetime
argument_list|(
name|sm
argument_list|,
literal|1000L
argument_list|)
expr_stmt|;
name|Path
name|fileToWrite
init|=
operator|new
name|Path
argument_list|(
name|FILE_TO_WRITE
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|FSDataOutputStream
name|stm
init|=
name|writeFile
argument_list|(
name|fs
argument_list|,
name|fileToWrite
argument_list|,
operator|(
name|short
operator|)
name|numDataNodes
argument_list|,
name|BLOCK_SIZE
argument_list|)
decl_stmt|;
comment|// write a partial block
name|int
name|mid
init|=
name|rawData
operator|.
name|length
operator|-
literal|1
decl_stmt|;
name|stm
operator|.
name|write
argument_list|(
name|rawData
argument_list|,
literal|0
argument_list|,
name|mid
argument_list|)
expr_stmt|;
name|stm
operator|.
name|hflush
argument_list|()
expr_stmt|;
comment|/*        * wait till token used in stm expires        */
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|token
init|=
name|DFSTestUtil
operator|.
name|getBlockToken
argument_list|(
name|stm
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|SecurityTestUtil
operator|.
name|isBlockTokenExpired
argument_list|(
name|token
argument_list|)
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignored
parameter_list|)
block|{         }
block|}
comment|// remove a datanode to force re-establishing pipeline
name|cluster
operator|.
name|stopDataNode
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// write the rest of the file
name|stm
operator|.
name|write
argument_list|(
name|rawData
argument_list|,
name|mid
argument_list|,
name|rawData
operator|.
name|length
operator|-
name|mid
argument_list|)
expr_stmt|;
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// check if write is successful
name|FSDataInputStream
name|in4
init|=
name|fs
operator|.
name|open
argument_list|(
name|fileToWrite
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|checkFile1
argument_list|(
name|in4
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testRead ()
specifier|public
name|void
name|testRead
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
name|int
name|numDataNodes
init|=
literal|2
decl_stmt|;
name|Configuration
name|conf
init|=
name|getConf
argument_list|(
name|numDataNodes
argument_list|)
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDataNodes
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|numDataNodes
argument_list|,
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|NameNode
name|nn
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
decl_stmt|;
specifier|final
name|NamenodeProtocols
name|nnProto
init|=
name|nn
operator|.
name|getRpcServer
argument_list|()
decl_stmt|;
specifier|final
name|BlockManager
name|bm
init|=
name|nn
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
decl_stmt|;
specifier|final
name|BlockTokenSecretManager
name|sm
init|=
name|bm
operator|.
name|getBlockTokenSecretManager
argument_list|()
decl_stmt|;
comment|// set a short token lifetime (1 second) initially
name|SecurityTestUtil
operator|.
name|setBlockTokenLifetime
argument_list|(
name|sm
argument_list|,
literal|1000L
argument_list|)
expr_stmt|;
name|Path
name|fileToRead
init|=
operator|new
name|Path
argument_list|(
name|FILE_TO_READ
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|createFile
argument_list|(
name|fs
argument_list|,
name|fileToRead
argument_list|)
expr_stmt|;
comment|/*        * setup for testing expiration handling of cached tokens        */
comment|// read using blockSeekTo(). Acquired tokens are cached in in1
name|FSDataInputStream
name|in1
init|=
name|fs
operator|.
name|open
argument_list|(
name|fileToRead
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|checkFile1
argument_list|(
name|in1
argument_list|)
argument_list|)
expr_stmt|;
comment|// read using blockSeekTo(). Acquired tokens are cached in in2
name|FSDataInputStream
name|in2
init|=
name|fs
operator|.
name|open
argument_list|(
name|fileToRead
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|checkFile1
argument_list|(
name|in2
argument_list|)
argument_list|)
expr_stmt|;
comment|// read using fetchBlockByteRange(). Acquired tokens are cached in in3
name|FSDataInputStream
name|in3
init|=
name|fs
operator|.
name|open
argument_list|(
name|fileToRead
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|checkFile2
argument_list|(
name|in3
argument_list|)
argument_list|)
expr_stmt|;
comment|/*        * testing READ interface on DN using a BlockReader        */
operator|new
name|DFSClient
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
name|cluster
operator|.
name|getNameNodePort
argument_list|()
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|locatedBlocks
init|=
name|nnProto
operator|.
name|getBlockLocations
argument_list|(
name|FILE_TO_READ
argument_list|,
literal|0
argument_list|,
name|FILE_SIZE
argument_list|)
operator|.
name|getLocatedBlocks
argument_list|()
decl_stmt|;
name|LocatedBlock
name|lblock
init|=
name|locatedBlocks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// first block
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|myToken
init|=
name|lblock
operator|.
name|getBlockToken
argument_list|()
decl_stmt|;
comment|// verify token is not expired
name|assertFalse
argument_list|(
name|SecurityTestUtil
operator|.
name|isBlockTokenExpired
argument_list|(
name|myToken
argument_list|)
argument_list|)
expr_stmt|;
comment|// read with valid token, should succeed
name|tryRead
argument_list|(
name|conf
argument_list|,
name|lblock
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|/*        * wait till myToken and all cached tokens in in1, in2 and in3 expire        */
while|while
condition|(
operator|!
name|SecurityTestUtil
operator|.
name|isBlockTokenExpired
argument_list|(
name|myToken
argument_list|)
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignored
parameter_list|)
block|{         }
block|}
comment|/*        * continue testing READ interface on DN using a BlockReader        */
comment|// verify token is expired
name|assertTrue
argument_list|(
name|SecurityTestUtil
operator|.
name|isBlockTokenExpired
argument_list|(
name|myToken
argument_list|)
argument_list|)
expr_stmt|;
comment|// read should fail
name|tryRead
argument_list|(
name|conf
argument_list|,
name|lblock
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// use a valid new token
name|lblock
operator|.
name|setBlockToken
argument_list|(
name|sm
operator|.
name|generateToken
argument_list|(
name|lblock
operator|.
name|getBlock
argument_list|()
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|BlockTokenSecretManager
operator|.
name|AccessMode
operator|.
name|READ
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// read should succeed
name|tryRead
argument_list|(
name|conf
argument_list|,
name|lblock
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// use a token with wrong blockID
name|ExtendedBlock
name|wrongBlock
init|=
operator|new
name|ExtendedBlock
argument_list|(
name|lblock
operator|.
name|getBlock
argument_list|()
operator|.
name|getBlockPoolId
argument_list|()
argument_list|,
name|lblock
operator|.
name|getBlock
argument_list|()
operator|.
name|getBlockId
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
name|lblock
operator|.
name|setBlockToken
argument_list|(
name|sm
operator|.
name|generateToken
argument_list|(
name|wrongBlock
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|BlockTokenSecretManager
operator|.
name|AccessMode
operator|.
name|READ
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// read should fail
name|tryRead
argument_list|(
name|conf
argument_list|,
name|lblock
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// use a token with wrong access modes
name|lblock
operator|.
name|setBlockToken
argument_list|(
name|sm
operator|.
name|generateToken
argument_list|(
name|lblock
operator|.
name|getBlock
argument_list|()
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|BlockTokenSecretManager
operator|.
name|AccessMode
operator|.
name|WRITE
argument_list|,
name|BlockTokenSecretManager
operator|.
name|AccessMode
operator|.
name|COPY
argument_list|,
name|BlockTokenSecretManager
operator|.
name|AccessMode
operator|.
name|REPLACE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// read should fail
name|tryRead
argument_list|(
name|conf
argument_list|,
name|lblock
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// set a long token lifetime for future tokens
name|SecurityTestUtil
operator|.
name|setBlockTokenLifetime
argument_list|(
name|sm
argument_list|,
literal|600
operator|*
literal|1000L
argument_list|)
expr_stmt|;
comment|/*        * testing that when cached tokens are expired, DFSClient will re-fetch        * tokens transparently for READ.        */
comment|// confirm all tokens cached in in1 are expired by now
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|lblocks
init|=
name|DFSTestUtil
operator|.
name|getAllBlocks
argument_list|(
name|in1
argument_list|)
decl_stmt|;
for|for
control|(
name|LocatedBlock
name|blk
range|:
name|lblocks
control|)
block|{
name|assertTrue
argument_list|(
name|SecurityTestUtil
operator|.
name|isBlockTokenExpired
argument_list|(
name|blk
operator|.
name|getBlockToken
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// verify blockSeekTo() is able to re-fetch token transparently
name|in1
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checkFile1
argument_list|(
name|in1
argument_list|)
argument_list|)
expr_stmt|;
comment|// confirm all tokens cached in in2 are expired by now
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|lblocks2
init|=
name|DFSTestUtil
operator|.
name|getAllBlocks
argument_list|(
name|in2
argument_list|)
decl_stmt|;
for|for
control|(
name|LocatedBlock
name|blk
range|:
name|lblocks2
control|)
block|{
name|assertTrue
argument_list|(
name|SecurityTestUtil
operator|.
name|isBlockTokenExpired
argument_list|(
name|blk
operator|.
name|getBlockToken
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// verify blockSeekTo() is able to re-fetch token transparently (testing
comment|// via another interface method)
name|assertTrue
argument_list|(
name|in2
operator|.
name|seekToNewSource
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checkFile1
argument_list|(
name|in2
argument_list|)
argument_list|)
expr_stmt|;
comment|// confirm all tokens cached in in3 are expired by now
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|lblocks3
init|=
name|DFSTestUtil
operator|.
name|getAllBlocks
argument_list|(
name|in3
argument_list|)
decl_stmt|;
for|for
control|(
name|LocatedBlock
name|blk
range|:
name|lblocks3
control|)
block|{
name|assertTrue
argument_list|(
name|SecurityTestUtil
operator|.
name|isBlockTokenExpired
argument_list|(
name|blk
operator|.
name|getBlockToken
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// verify fetchBlockByteRange() is able to re-fetch token transparently
name|assertTrue
argument_list|(
name|checkFile2
argument_list|(
name|in3
argument_list|)
argument_list|)
expr_stmt|;
comment|/*        * testing that after datanodes are restarted on the same ports, cached        * tokens should still work and there is no need to fetch new tokens from        * namenode. This test should run while namenode is down (to make sure no        * new tokens can be fetched from namenode).        */
comment|// restart datanodes on the same ports that they currently use
name|assertTrue
argument_list|(
name|cluster
operator|.
name|restartDataNodes
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|numDataNodes
argument_list|,
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdownNameNode
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// confirm tokens cached in in1 are still valid
name|lblocks
operator|=
name|DFSTestUtil
operator|.
name|getAllBlocks
argument_list|(
name|in1
argument_list|)
expr_stmt|;
for|for
control|(
name|LocatedBlock
name|blk
range|:
name|lblocks
control|)
block|{
name|assertFalse
argument_list|(
name|SecurityTestUtil
operator|.
name|isBlockTokenExpired
argument_list|(
name|blk
operator|.
name|getBlockToken
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// verify blockSeekTo() still works (forced to use cached tokens)
name|in1
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checkFile1
argument_list|(
name|in1
argument_list|)
argument_list|)
expr_stmt|;
comment|// confirm tokens cached in in2 are still valid
name|lblocks2
operator|=
name|DFSTestUtil
operator|.
name|getAllBlocks
argument_list|(
name|in2
argument_list|)
expr_stmt|;
for|for
control|(
name|LocatedBlock
name|blk
range|:
name|lblocks2
control|)
block|{
name|assertFalse
argument_list|(
name|SecurityTestUtil
operator|.
name|isBlockTokenExpired
argument_list|(
name|blk
operator|.
name|getBlockToken
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// verify blockSeekTo() still works (forced to use cached tokens)
name|in2
operator|.
name|seekToNewSource
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checkFile1
argument_list|(
name|in2
argument_list|)
argument_list|)
expr_stmt|;
comment|// confirm tokens cached in in3 are still valid
name|lblocks3
operator|=
name|DFSTestUtil
operator|.
name|getAllBlocks
argument_list|(
name|in3
argument_list|)
expr_stmt|;
for|for
control|(
name|LocatedBlock
name|blk
range|:
name|lblocks3
control|)
block|{
name|assertFalse
argument_list|(
name|SecurityTestUtil
operator|.
name|isBlockTokenExpired
argument_list|(
name|blk
operator|.
name|getBlockToken
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// verify fetchBlockByteRange() still works (forced to use cached tokens)
name|assertTrue
argument_list|(
name|checkFile2
argument_list|(
name|in3
argument_list|)
argument_list|)
expr_stmt|;
comment|/*        * testing that when namenode is restarted, cached tokens should still        * work and there is no need to fetch new tokens from namenode. Like the        * previous test, this test should also run while namenode is down. The        * setup for this test depends on the previous test.        */
comment|// restart the namenode and then shut it down for test
name|cluster
operator|.
name|restartNameNode
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdownNameNode
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// verify blockSeekTo() still works (forced to use cached tokens)
name|in1
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checkFile1
argument_list|(
name|in1
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify again blockSeekTo() still works (forced to use cached tokens)
name|in2
operator|.
name|seekToNewSource
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checkFile1
argument_list|(
name|in2
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify fetchBlockByteRange() still works (forced to use cached tokens)
name|assertTrue
argument_list|(
name|checkFile2
argument_list|(
name|in3
argument_list|)
argument_list|)
expr_stmt|;
comment|/*        * testing that after both namenode and datanodes got restarted (namenode        * first, followed by datanodes), DFSClient can't access DN without        * re-fetching tokens and is able to re-fetch tokens transparently. The        * setup of this test depends on the previous test.        */
comment|// restore the cluster and restart the datanodes for test
name|cluster
operator|.
name|restartNameNode
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cluster
operator|.
name|restartDataNodes
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|numDataNodes
argument_list|,
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// shutdown namenode so that DFSClient can't get new tokens from namenode
name|cluster
operator|.
name|shutdownNameNode
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// verify blockSeekTo() fails (cached tokens become invalid)
name|in1
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|checkFile1
argument_list|(
name|in1
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify fetchBlockByteRange() fails (cached tokens become invalid)
name|assertFalse
argument_list|(
name|checkFile2
argument_list|(
name|in3
argument_list|)
argument_list|)
expr_stmt|;
comment|// restart the namenode to allow DFSClient to re-fetch tokens
name|cluster
operator|.
name|restartNameNode
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// verify blockSeekTo() works again (by transparently re-fetching
comment|// tokens from namenode)
name|in1
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checkFile1
argument_list|(
name|in1
argument_list|)
argument_list|)
expr_stmt|;
name|in2
operator|.
name|seekToNewSource
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checkFile1
argument_list|(
name|in2
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify fetchBlockByteRange() works again (by transparently
comment|// re-fetching tokens from namenode)
name|assertTrue
argument_list|(
name|checkFile2
argument_list|(
name|in3
argument_list|)
argument_list|)
expr_stmt|;
comment|/*        * testing that when datanodes are restarted on different ports, DFSClient        * is able to re-fetch tokens transparently to connect to them        */
comment|// restart datanodes on newly assigned ports
name|assertTrue
argument_list|(
name|cluster
operator|.
name|restartDataNodes
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|numDataNodes
argument_list|,
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify blockSeekTo() is able to re-fetch token transparently
name|in1
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checkFile1
argument_list|(
name|in1
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify blockSeekTo() is able to re-fetch token transparently
name|in2
operator|.
name|seekToNewSource
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checkFile1
argument_list|(
name|in2
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify fetchBlockByteRange() is able to re-fetch token transparently
name|assertTrue
argument_list|(
name|checkFile2
argument_list|(
name|in3
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Integration testing of access token, involving NN, DN, and Balancer    */
annotation|@
name|Test
DECL|method|testEnd2End ()
specifier|public
name|void
name|testEnd2End
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_ACCESS_TOKEN_ENABLE_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
operator|new
name|TestBalancer
argument_list|()
operator|.
name|integrationTest
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

