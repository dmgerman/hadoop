begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode.fsdataset.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
operator|.
name|DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
operator|.
name|RAM_DISK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
DECL|class|TestLazyPersistReplicaPlacement
specifier|public
class|class
name|TestLazyPersistReplicaPlacement
extends|extends
name|LazyPersistTestCase
block|{
annotation|@
name|Test
DECL|method|testPlacementOnRamDisk ()
specifier|public
name|void
name|testPlacementOnRamDisk
parameter_list|()
throws|throws
name|IOException
throws|,
name|TimeoutException
throws|,
name|InterruptedException
block|{
name|getClusterBuilder
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
specifier|final
name|String
name|METHOD_NAME
init|=
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|METHOD_NAME
operator|+
literal|".dat"
argument_list|)
decl_stmt|;
name|makeTestFile
argument_list|(
name|path
argument_list|,
name|BLOCK_SIZE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ensureFileReplicasOnStorageType
argument_list|(
name|path
argument_list|,
name|RAM_DISK
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPlacementOnSizeLimitedRamDisk ()
specifier|public
name|void
name|testPlacementOnSizeLimitedRamDisk
parameter_list|()
throws|throws
name|IOException
throws|,
name|TimeoutException
throws|,
name|InterruptedException
block|{
name|getClusterBuilder
argument_list|()
operator|.
name|setRamDiskReplicaCapacity
argument_list|(
literal|3
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
specifier|final
name|String
name|METHOD_NAME
init|=
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|Path
name|path1
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|METHOD_NAME
operator|+
literal|".01.dat"
argument_list|)
decl_stmt|;
name|Path
name|path2
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|METHOD_NAME
operator|+
literal|".02.dat"
argument_list|)
decl_stmt|;
name|makeTestFile
argument_list|(
name|path1
argument_list|,
name|BLOCK_SIZE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|makeTestFile
argument_list|(
name|path2
argument_list|,
name|BLOCK_SIZE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ensureFileReplicasOnStorageType
argument_list|(
name|path1
argument_list|,
name|RAM_DISK
argument_list|)
expr_stmt|;
name|ensureFileReplicasOnStorageType
argument_list|(
name|path2
argument_list|,
name|RAM_DISK
argument_list|)
expr_stmt|;
block|}
comment|/**    * Client tries to write LAZY_PERSIST to same DN with no RamDisk configured    * Write should default to disk. No error.    * @throws IOException    */
annotation|@
name|Test
DECL|method|testFallbackToDisk ()
specifier|public
name|void
name|testFallbackToDisk
parameter_list|()
throws|throws
name|IOException
throws|,
name|TimeoutException
throws|,
name|InterruptedException
block|{
name|getClusterBuilder
argument_list|()
operator|.
name|setHasTransientStorage
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
specifier|final
name|String
name|METHOD_NAME
init|=
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|METHOD_NAME
operator|+
literal|".dat"
argument_list|)
decl_stmt|;
name|makeTestFile
argument_list|(
name|path
argument_list|,
name|BLOCK_SIZE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ensureFileReplicasOnStorageType
argument_list|(
name|path
argument_list|,
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSynchronousEviction ()
specifier|public
name|void
name|testSynchronousEviction
parameter_list|()
throws|throws
name|Exception
block|{
name|getClusterBuilder
argument_list|()
operator|.
name|setMaxLockedMemory
argument_list|(
name|BLOCK_SIZE
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
specifier|final
name|String
name|METHOD_NAME
init|=
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|path1
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|METHOD_NAME
operator|+
literal|".01.dat"
argument_list|)
decl_stmt|;
name|makeTestFile
argument_list|(
name|path1
argument_list|,
name|BLOCK_SIZE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ensureFileReplicasOnStorageType
argument_list|(
name|path1
argument_list|,
name|RAM_DISK
argument_list|)
expr_stmt|;
comment|// Wait until the replica is written to persistent storage.
name|waitForMetric
argument_list|(
literal|"RamDiskBlocksLazyPersisted"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Ensure that writing a new file to RAM DISK evicts the block
comment|// for the previous one.
name|Path
name|path2
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|METHOD_NAME
operator|+
literal|".02.dat"
argument_list|)
decl_stmt|;
name|makeTestFile
argument_list|(
name|path2
argument_list|,
name|BLOCK_SIZE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyRamDiskJMXMetric
argument_list|(
literal|"RamDiskBlocksEvictedWithoutRead"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * File can not fit in RamDisk even with eviction    * @throws IOException    */
annotation|@
name|Test
DECL|method|testFallbackToDiskFull ()
specifier|public
name|void
name|testFallbackToDiskFull
parameter_list|()
throws|throws
name|Exception
block|{
name|getClusterBuilder
argument_list|()
operator|.
name|setMaxLockedMemory
argument_list|(
name|BLOCK_SIZE
operator|/
literal|2
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
specifier|final
name|String
name|METHOD_NAME
init|=
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|METHOD_NAME
operator|+
literal|".dat"
argument_list|)
decl_stmt|;
name|makeTestFile
argument_list|(
name|path
argument_list|,
name|BLOCK_SIZE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ensureFileReplicasOnStorageType
argument_list|(
name|path
argument_list|,
name|DEFAULT
argument_list|)
expr_stmt|;
name|verifyRamDiskJMXMetric
argument_list|(
literal|"RamDiskBlocksWriteFallback"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * File partially fit in RamDisk after eviction.    * RamDisk can fit 2 blocks. Write a file with 5 blocks.    * Expect 2 blocks are on RamDisk and rest on disk.    * @throws IOException    */
annotation|@
name|Test
DECL|method|testFallbackToDiskPartial ()
specifier|public
name|void
name|testFallbackToDiskPartial
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|getClusterBuilder
argument_list|()
operator|.
name|setMaxLockedMemory
argument_list|(
literal|2
operator|*
name|BLOCK_SIZE
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
specifier|final
name|String
name|METHOD_NAME
init|=
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|METHOD_NAME
operator|+
literal|".dat"
argument_list|)
decl_stmt|;
name|makeTestFile
argument_list|(
name|path
argument_list|,
name|BLOCK_SIZE
operator|*
literal|5
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Sleep for a short time to allow the lazy writer thread to do its job
name|Thread
operator|.
name|sleep
argument_list|(
literal|6
operator|*
name|LAZY_WRITER_INTERVAL_SEC
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|triggerBlockReport
argument_list|()
expr_stmt|;
name|int
name|numBlocksOnRamDisk
init|=
literal|0
decl_stmt|;
name|int
name|numBlocksOnDisk
init|=
literal|0
decl_stmt|;
name|long
name|fileLength
init|=
name|client
operator|.
name|getFileInfo
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|LocatedBlocks
name|locatedBlocks
init|=
name|client
operator|.
name|getLocatedBlocks
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|,
name|fileLength
argument_list|)
decl_stmt|;
for|for
control|(
name|LocatedBlock
name|locatedBlock
range|:
name|locatedBlocks
operator|.
name|getLocatedBlocks
argument_list|()
control|)
block|{
if|if
condition|(
name|locatedBlock
operator|.
name|getStorageTypes
argument_list|()
index|[
literal|0
index|]
operator|==
name|RAM_DISK
condition|)
block|{
name|numBlocksOnRamDisk
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|locatedBlock
operator|.
name|getStorageTypes
argument_list|()
index|[
literal|0
index|]
operator|==
name|DEFAULT
condition|)
block|{
name|numBlocksOnDisk
operator|++
expr_stmt|;
block|}
block|}
comment|// Since eviction is asynchronous, depending on the timing of eviction
comment|// wrt writes, we may get 2 or less blocks on RAM disk.
name|assertThat
argument_list|(
name|numBlocksOnRamDisk
argument_list|,
name|is
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|numBlocksOnDisk
argument_list|,
name|is
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * If the only available storage is RAM_DISK and the LAZY_PERSIST flag is not    * specified, then block placement should fail.    *    * @throws IOException    */
annotation|@
name|Test
DECL|method|testRamDiskNotChosenByDefault ()
specifier|public
name|void
name|testRamDiskNotChosenByDefault
parameter_list|()
throws|throws
name|IOException
block|{
name|getClusterBuilder
argument_list|()
operator|.
name|setStorageTypes
argument_list|(
operator|new
name|StorageType
index|[]
block|{
name|RAM_DISK
block|,
name|RAM_DISK
block|}
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
specifier|final
name|String
name|METHOD_NAME
init|=
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|METHOD_NAME
operator|+
literal|".dat"
argument_list|)
decl_stmt|;
try|try
block|{
name|makeTestFile
argument_list|(
name|path
argument_list|,
name|BLOCK_SIZE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Block placement to RAM_DISK should have failed without lazyPersist flag"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got expected exception "
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

