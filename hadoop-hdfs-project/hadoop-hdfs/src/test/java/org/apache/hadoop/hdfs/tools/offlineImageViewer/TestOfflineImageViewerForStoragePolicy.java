begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.tools.offlineImageViewer
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|offlineImageViewer
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSImageTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|ALLSSD_STORAGE_POLICY_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_comment
comment|/**  * Tests OfflineImageViewer if the input fsimage has HDFS StoragePolicy entries.  */
end_comment

begin_class
DECL|class|TestOfflineImageViewerForStoragePolicy
specifier|public
class|class
name|TestOfflineImageViewerForStoragePolicy
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestOfflineImageViewerForStoragePolicy
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|originalFsimage
specifier|private
specifier|static
name|File
name|originalFsimage
init|=
literal|null
decl_stmt|;
DECL|field|tempDir
specifier|private
specifier|static
name|File
name|tempDir
decl_stmt|;
comment|/**    * Create a populated namespace for later testing. Save its contents to a    * data structure and store its fsimage location.    */
annotation|@
name|BeforeClass
DECL|method|createOriginalFSImage ()
specifier|public
specifier|static
name|void
name|createOriginalFSImage
parameter_list|()
throws|throws
name|IOException
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_ACLS_ENABLED_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_STORAGE_POLICY_ENABLED_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|File
index|[]
name|nnDirs
init|=
name|MiniDFSCluster
operator|.
name|getNameNodeDirectory
argument_list|(
name|MiniDFSCluster
operator|.
name|getBaseDirectory
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|tempDir
operator|=
name|nnDirs
index|[
literal|0
index|]
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|DistributedFileSystem
name|hdfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/dir_wo_sp"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|dir
operator|=
operator|new
name|Path
argument_list|(
literal|"/dir_wo_sp/sub_dir_wo_sp"
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|dir
operator|=
operator|new
name|Path
argument_list|(
literal|"/dir_wo_sp/sub_dir_w_sp_allssd"
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|setStoragePolicy
argument_list|(
name|dir
argument_list|,
name|ALLSSD_STORAGE_POLICY_NAME
argument_list|)
expr_stmt|;
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
literal|"/dir_wo_sp/file_wo_sp"
argument_list|)
decl_stmt|;
try|try
init|(
name|FSDataOutputStream
name|o
init|=
name|hdfs
operator|.
name|create
argument_list|(
name|file
argument_list|)
init|)
block|{
name|o
operator|.
name|write
argument_list|(
literal|123
argument_list|)
expr_stmt|;
name|o
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|file
operator|=
operator|new
name|Path
argument_list|(
literal|"/dir_wo_sp/file_w_sp_allssd"
argument_list|)
expr_stmt|;
try|try
init|(
name|FSDataOutputStream
name|o
init|=
name|hdfs
operator|.
name|create
argument_list|(
name|file
argument_list|)
init|)
block|{
name|o
operator|.
name|write
argument_list|(
literal|123
argument_list|)
expr_stmt|;
name|o
operator|.
name|close
argument_list|()
expr_stmt|;
name|hdfs
operator|.
name|setStoragePolicy
argument_list|(
name|file
argument_list|,
name|HdfsConstants
operator|.
name|ALLSSD_STORAGE_POLICY_NAME
argument_list|)
expr_stmt|;
block|}
name|dir
operator|=
operator|new
name|Path
argument_list|(
literal|"/dir_w_sp_allssd"
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|setStoragePolicy
argument_list|(
name|dir
argument_list|,
name|HdfsConstants
operator|.
name|ALLSSD_STORAGE_POLICY_NAME
argument_list|)
expr_stmt|;
name|dir
operator|=
operator|new
name|Path
argument_list|(
literal|"/dir_w_sp_allssd/sub_dir_wo_sp"
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|file
operator|=
operator|new
name|Path
argument_list|(
literal|"/dir_w_sp_allssd/file_wo_sp"
argument_list|)
expr_stmt|;
try|try
init|(
name|FSDataOutputStream
name|o
init|=
name|hdfs
operator|.
name|create
argument_list|(
name|file
argument_list|)
init|)
block|{
name|o
operator|.
name|write
argument_list|(
literal|123
argument_list|)
expr_stmt|;
name|o
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|dir
operator|=
operator|new
name|Path
argument_list|(
literal|"/dir_w_sp_allssd/sub_dir_w_sp_hot"
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|setStoragePolicy
argument_list|(
name|dir
argument_list|,
name|HdfsConstants
operator|.
name|HOT_STORAGE_POLICY_NAME
argument_list|)
expr_stmt|;
comment|// Write results to the fsimage file
name|hdfs
operator|.
name|setSafeMode
argument_list|(
name|HdfsConstants
operator|.
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|saveNamespace
argument_list|()
expr_stmt|;
comment|// Determine the location of the fsimage file
name|originalFsimage
operator|=
name|FSImageTestUtil
operator|.
name|findLatestImageFile
argument_list|(
name|FSImageTestUtil
operator|.
name|getFSImage
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|()
argument_list|)
operator|.
name|getStorage
argument_list|()
operator|.
name|getStorageDir
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|originalFsimage
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Didn't generate or can't find fsimage"
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"original FS image file is "
operator|+
name|originalFsimage
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|AfterClass
DECL|method|deleteOriginalFSImage ()
specifier|public
specifier|static
name|void
name|deleteOriginalFSImage
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|originalFsimage
operator|!=
literal|null
operator|&&
name|originalFsimage
operator|.
name|exists
argument_list|()
condition|)
block|{
name|originalFsimage
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testPBDelimitedWriterForStoragePolicy ()
specifier|public
name|void
name|testPBDelimitedWriterForStoragePolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|expected
init|=
name|DFSTestUtil
operator|.
name|readResoucePlainFile
argument_list|(
literal|"testStoragePolicy.csv"
argument_list|)
decl_stmt|;
name|String
name|result
init|=
name|readStoragePolicyFromFsimageFile
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
DECL|method|readStoragePolicyFromFsimageFile ()
specifier|private
name|String
name|readStoragePolicyFromFsimageFile
parameter_list|()
throws|throws
name|Exception
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|output
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|String
name|delemiter
init|=
literal|"\t"
decl_stmt|;
name|File
name|delimitedOutput
init|=
operator|new
name|File
argument_list|(
name|tempDir
argument_list|,
literal|"delimitedOutput"
argument_list|)
decl_stmt|;
if|if
condition|(
name|OfflineImageViewerPB
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-p"
operator|,
literal|"Delimited"
operator|,
literal|"-i"
operator|,
name|originalFsimage
operator|.
name|getAbsolutePath
argument_list|()
operator|,
literal|"-o"
operator|,
name|delimitedOutput
operator|.
name|getAbsolutePath
argument_list|()
operator|,
literal|"-sp"
block|}
block|)
function|!= 0
block|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"oiv returned failure creating "
operator|+
literal|"delimited output with sp."
argument_list|)
throw|;
block|}
end_class

begin_try
try|try
init|(
name|InputStream
name|input
init|=
operator|new
name|FileInputStream
argument_list|(
name|delimitedOutput
argument_list|)
init|;
name|BufferedReader
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|input
argument_list|)
argument_list|)
init|)
block|{
name|String
name|line
decl_stmt|;
name|boolean
name|header
init|=
literal|true
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|fields
init|=
name|line
operator|.
name|split
argument_list|(
name|delemiter
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|header
condition|)
block|{
name|String
name|path
init|=
name|fields
index|[
literal|0
index|]
decl_stmt|;
name|int
name|storagePolicy
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|fields
index|[
literal|12
index|]
argument_list|)
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|path
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
operator|.
name|append
argument_list|(
name|storagePolicy
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|header
operator|=
literal|false
expr_stmt|;
block|}
block|}
end_try

begin_return
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
end_return

unit|} }
end_unit

