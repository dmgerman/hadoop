begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.snapshot
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test getting the full path name of a given inode. The INode may be in  * snapshot.  */
end_comment

begin_class
DECL|class|TestFullPathNameWithSnapshot
specifier|public
class|class
name|TestFullPathNameWithSnapshot
block|{
DECL|field|BLOCKSIZE
specifier|private
specifier|static
specifier|final
name|int
name|BLOCKSIZE
init|=
literal|1024
decl_stmt|;
DECL|field|REPLICATION
specifier|private
specifier|static
specifier|final
name|short
name|REPLICATION
init|=
literal|1
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|fsdir
specifier|private
name|FSDirectory
name|fsdir
decl_stmt|;
DECL|field|dfs
specifier|private
name|DistributedFileSystem
name|dfs
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|BLOCKSIZE
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|REPLICATION
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fsdir
operator|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getFSDirectory
argument_list|()
expr_stmt|;
name|dfs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Normal case without snapshot involved    */
annotation|@
name|Test
DECL|method|testNormalINode ()
specifier|public
name|void
name|testNormalINode
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|bar
init|=
operator|new
name|Path
argument_list|(
literal|"/foo/bar"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|bar
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|bar
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|file
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|INode
name|fileNode
init|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|file
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|pathComponents
init|=
name|FSDirectory
operator|.
name|getPathComponentsWithSnapshot
argument_list|(
name|fileNode
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|checkComponentsEquals
argument_list|(
name|INode
operator|.
name|getPathComponents
argument_list|(
name|file
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|pathComponents
argument_list|)
expr_stmt|;
block|}
comment|/**    * INode in deleted list    */
annotation|@
name|Test
DECL|method|testDeletedINode ()
specifier|public
name|void
name|testDeletedINode
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|f1
init|=
operator|new
name|Path
argument_list|(
name|foo
argument_list|,
literal|"f1"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|f1
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|bar
init|=
operator|new
name|Path
argument_list|(
name|foo
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|bar
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|f2
init|=
operator|new
name|Path
argument_list|(
name|bar
argument_list|,
literal|"f2"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|f2
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|INode
name|f1Node
init|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|f1
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|INode
name|f2Node
init|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|f2
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|dfs
argument_list|,
name|foo
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|delete
argument_list|(
name|bar
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|dfs
argument_list|,
name|foo
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|delete
argument_list|(
name|f1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|byte
index|[]
index|[]
name|f1Components
init|=
name|FSDirectory
operator|.
name|getPathComponentsWithSnapshot
argument_list|(
name|f1Node
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|f2Components
init|=
name|FSDirectory
operator|.
name|getPathComponentsWithSnapshot
argument_list|(
name|f2Node
argument_list|)
decl_stmt|;
comment|// expected: /foo/.snapshot/s2/f1
name|String
name|f1Snapshot
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|foo
argument_list|,
literal|"s2"
argument_list|,
name|f1
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// expected: /foo/.snapshot/s1/bar/f2
name|String
name|f2Snapshot
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|foo
argument_list|,
literal|"s1"
argument_list|,
literal|"bar/f2"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|DFSTestUtil
operator|.
name|checkComponentsEquals
argument_list|(
name|INode
operator|.
name|getPathComponents
argument_list|(
name|f1Snapshot
argument_list|)
argument_list|,
name|f1Components
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|checkComponentsEquals
argument_list|(
name|INode
operator|.
name|getPathComponents
argument_list|(
name|f2Snapshot
argument_list|)
argument_list|,
name|f2Components
argument_list|)
expr_stmt|;
comment|// delete snapshot s2
name|dfs
operator|.
name|deleteSnapshot
argument_list|(
name|foo
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
comment|// expected: /foo/.snapshot/s1/f1
name|f1Snapshot
operator|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|foo
argument_list|,
literal|"s1"
argument_list|,
name|f1
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|f1Components
operator|=
name|FSDirectory
operator|.
name|getPathComponentsWithSnapshot
argument_list|(
name|f1Node
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|checkComponentsEquals
argument_list|(
name|INode
operator|.
name|getPathComponents
argument_list|(
name|f1Snapshot
argument_list|)
argument_list|,
name|f1Components
argument_list|)
expr_stmt|;
block|}
comment|/**    * INode after renaming    */
annotation|@
name|Test
DECL|method|testRenamedINode ()
specifier|public
name|void
name|testRenamedINode
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|bar
init|=
operator|new
name|Path
argument_list|(
name|foo
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|f1
init|=
operator|new
name|Path
argument_list|(
name|bar
argument_list|,
literal|"f1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|f2
init|=
operator|new
name|Path
argument_list|(
name|bar
argument_list|,
literal|"f2"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|f1
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|f2
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
comment|// create snapshot s1
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|dfs
argument_list|,
name|foo
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
name|INode
name|f2Node
init|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|f2
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|// delete /foo/bar/f2
name|dfs
operator|.
name|delete
argument_list|(
name|f2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// rename bar to bar2
specifier|final
name|Path
name|bar2
init|=
operator|new
name|Path
argument_list|(
name|foo
argument_list|,
literal|"bar2"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|rename
argument_list|(
name|bar
argument_list|,
name|bar2
argument_list|)
expr_stmt|;
comment|// create snapshot s2
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|dfs
argument_list|,
name|foo
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
comment|// /foo/.snapshot/s1/bar
name|Path
name|barPath
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|foo
argument_list|,
literal|"s1"
argument_list|,
name|bar
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|INode
name|barNode
init|=
name|fsdir
operator|.
name|getINode
argument_list|(
name|barPath
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|barNode
operator|instanceof
name|INodeReference
operator|.
name|WithName
argument_list|)
expr_stmt|;
name|INode
name|bar2Node
init|=
name|fsdir
operator|.
name|getINode
argument_list|(
name|bar2
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|bar2Node
operator|instanceof
name|INodeReference
operator|.
name|DstReference
argument_list|)
expr_stmt|;
name|byte
index|[]
index|[]
name|barComponents
init|=
name|FSDirectory
operator|.
name|getPathComponentsWithSnapshot
argument_list|(
name|barNode
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|bar2Components
init|=
name|FSDirectory
operator|.
name|getPathComponentsWithSnapshot
argument_list|(
name|bar2Node
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|checkComponentsEquals
argument_list|(
name|INode
operator|.
name|getPathComponents
argument_list|(
name|barPath
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|barComponents
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|checkComponentsEquals
argument_list|(
name|INode
operator|.
name|getPathComponents
argument_list|(
name|bar2
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|bar2Components
argument_list|)
expr_stmt|;
name|byte
index|[]
index|[]
name|f2Components
init|=
name|FSDirectory
operator|.
name|getPathComponentsWithSnapshot
argument_list|(
name|f2Node
argument_list|)
decl_stmt|;
comment|// expected: /foo/.snapshot/s1/bar/f2
name|Path
name|deletedf2
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|foo
argument_list|,
literal|"s1"
argument_list|,
literal|"bar/f2"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|checkComponentsEquals
argument_list|(
name|INode
operator|.
name|getPathComponents
argument_list|(
name|deletedf2
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|f2Components
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|newf1
init|=
operator|new
name|Path
argument_list|(
name|bar2
argument_list|,
name|f1
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|INode
name|f1Node
init|=
name|fsdir
operator|.
name|getINode
argument_list|(
name|newf1
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dfs
operator|.
name|delete
argument_list|(
name|newf1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|deletedf1
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|foo
argument_list|,
literal|"s2"
argument_list|,
literal|"bar2/f1"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|f1Components
init|=
name|FSDirectory
operator|.
name|getPathComponentsWithSnapshot
argument_list|(
name|f1Node
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|checkComponentsEquals
argument_list|(
name|INode
operator|.
name|getPathComponents
argument_list|(
name|deletedf1
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|f1Components
argument_list|)
expr_stmt|;
block|}
comment|/**    * Similar with testRenamedINode but the rename is across two snapshottable    * directory.    */
annotation|@
name|Test
DECL|method|testRenamedINode2 ()
specifier|public
name|void
name|testRenamedINode2
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|foo1
init|=
operator|new
name|Path
argument_list|(
literal|"/foo1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|foo2
init|=
operator|new
name|Path
argument_list|(
literal|"/foo2"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|bar
init|=
operator|new
name|Path
argument_list|(
name|foo1
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|f1
init|=
operator|new
name|Path
argument_list|(
name|bar
argument_list|,
literal|"f1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|f2
init|=
operator|new
name|Path
argument_list|(
name|bar
argument_list|,
literal|"f2"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|foo2
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|f1
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|f2
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
comment|// create snapshots on foo1 and foo2
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|dfs
argument_list|,
name|foo1
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|dfs
argument_list|,
name|foo2
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
name|INode
name|f2Node
init|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|f2
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|// delete /foo1/bar/f2
name|dfs
operator|.
name|delete
argument_list|(
name|f2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// rename bar to bar2
specifier|final
name|Path
name|bar2
init|=
operator|new
name|Path
argument_list|(
name|foo2
argument_list|,
literal|"bar2"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|rename
argument_list|(
name|bar
argument_list|,
name|bar2
argument_list|)
expr_stmt|;
comment|// create snapshot s3 and s4 on foo1 and foo2
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|dfs
argument_list|,
name|foo1
argument_list|,
literal|"s3"
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|dfs
argument_list|,
name|foo2
argument_list|,
literal|"s4"
argument_list|)
expr_stmt|;
comment|// /foo1/.snapshot/s1/bar
name|Path
name|barPath
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|foo1
argument_list|,
literal|"s1"
argument_list|,
name|bar
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|INode
name|barNode
init|=
name|fsdir
operator|.
name|getINode
argument_list|(
name|barPath
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|barNode
operator|instanceof
name|INodeReference
operator|.
name|WithName
argument_list|)
expr_stmt|;
name|INode
name|bar2Node
init|=
name|fsdir
operator|.
name|getINode
argument_list|(
name|bar2
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|bar2Node
operator|instanceof
name|INodeReference
operator|.
name|DstReference
argument_list|)
expr_stmt|;
name|byte
index|[]
index|[]
name|barComponents
init|=
name|FSDirectory
operator|.
name|getPathComponentsWithSnapshot
argument_list|(
name|barNode
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|bar2Components
init|=
name|FSDirectory
operator|.
name|getPathComponentsWithSnapshot
argument_list|(
name|bar2Node
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|checkComponentsEquals
argument_list|(
name|INode
operator|.
name|getPathComponents
argument_list|(
name|barPath
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|barComponents
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|checkComponentsEquals
argument_list|(
name|INode
operator|.
name|getPathComponents
argument_list|(
name|bar2
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|bar2Components
argument_list|)
expr_stmt|;
name|byte
index|[]
index|[]
name|f2Components
init|=
name|FSDirectory
operator|.
name|getPathComponentsWithSnapshot
argument_list|(
name|f2Node
argument_list|)
decl_stmt|;
comment|// expected: /foo1/.snapshot/s1/bar/f2
name|Path
name|deletedf2
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|foo1
argument_list|,
literal|"s1"
argument_list|,
literal|"bar/f2"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|checkComponentsEquals
argument_list|(
name|INode
operator|.
name|getPathComponents
argument_list|(
name|deletedf2
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|f2Components
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|newf1
init|=
operator|new
name|Path
argument_list|(
name|bar2
argument_list|,
name|f1
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|INode
name|f1Node
init|=
name|fsdir
operator|.
name|getINode
argument_list|(
name|newf1
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dfs
operator|.
name|delete
argument_list|(
name|newf1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// /foo2/.snapshot/s4/bar2/f1
name|Path
name|deletedf1
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|foo2
argument_list|,
literal|"s4"
argument_list|,
literal|"bar2/f1"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|f1Components
init|=
name|FSDirectory
operator|.
name|getPathComponentsWithSnapshot
argument_list|(
name|f1Node
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|checkComponentsEquals
argument_list|(
name|INode
operator|.
name|getPathComponents
argument_list|(
name|deletedf1
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|f1Components
argument_list|)
expr_stmt|;
block|}
comment|/**    * Rename a directory to its prior descendant    */
annotation|@
name|Test
DECL|method|testNestedRename ()
specifier|public
name|void
name|testNestedRename
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|sdir1
init|=
operator|new
name|Path
argument_list|(
literal|"/dir1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|sdir2
init|=
operator|new
name|Path
argument_list|(
literal|"/dir2"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
name|sdir1
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|bar
init|=
operator|new
name|Path
argument_list|(
name|foo
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|bar
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|sdir2
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|dfs
argument_list|,
name|sdir1
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
comment|// /dir1/foo/bar -> /dir2/bar
specifier|final
name|Path
name|bar2
init|=
operator|new
name|Path
argument_list|(
name|sdir2
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|rename
argument_list|(
name|bar
argument_list|,
name|bar2
argument_list|)
expr_stmt|;
comment|// /dir1/foo -> /dir2/bar/foo
specifier|final
name|Path
name|foo2
init|=
operator|new
name|Path
argument_list|(
name|bar2
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|rename
argument_list|(
name|foo
argument_list|,
name|foo2
argument_list|)
expr_stmt|;
comment|// /dir2/bar
name|INode
name|bar2Node
init|=
name|fsdir
operator|.
name|getINode
argument_list|(
name|bar2
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|bar2Node
operator|instanceof
name|INodeReference
operator|.
name|DstReference
argument_list|)
expr_stmt|;
name|byte
index|[]
index|[]
name|bar2Components
init|=
name|FSDirectory
operator|.
name|getPathComponentsWithSnapshot
argument_list|(
name|bar2Node
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|checkComponentsEquals
argument_list|(
name|INode
operator|.
name|getPathComponents
argument_list|(
name|bar2
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|bar2Components
argument_list|)
expr_stmt|;
comment|// /dir1/.snapshot/s1/foo/bar
name|String
name|oldbar
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|sdir1
argument_list|,
literal|"s1"
argument_list|,
literal|"foo/bar"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|INode
name|oldbarNode
init|=
name|fsdir
operator|.
name|getINode
argument_list|(
name|oldbar
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|oldbarNode
operator|instanceof
name|INodeReference
operator|.
name|WithName
argument_list|)
expr_stmt|;
name|byte
index|[]
index|[]
name|oldbarComponents
init|=
name|FSDirectory
operator|.
name|getPathComponentsWithSnapshot
argument_list|(
name|oldbarNode
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|checkComponentsEquals
argument_list|(
name|INode
operator|.
name|getPathComponents
argument_list|(
name|oldbar
argument_list|)
argument_list|,
name|oldbarComponents
argument_list|)
expr_stmt|;
comment|// /dir2/bar/foo
name|INode
name|foo2Node
init|=
name|fsdir
operator|.
name|getINode
argument_list|(
name|foo2
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|foo2Node
operator|instanceof
name|INodeReference
operator|.
name|DstReference
argument_list|)
expr_stmt|;
name|byte
index|[]
index|[]
name|foo2Components
init|=
name|FSDirectory
operator|.
name|getPathComponentsWithSnapshot
argument_list|(
name|foo2Node
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|checkComponentsEquals
argument_list|(
name|INode
operator|.
name|getPathComponents
argument_list|(
name|foo2
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|foo2Components
argument_list|)
expr_stmt|;
comment|// /dir1/.snapshot/s1/foo
name|String
name|oldfoo
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|sdir1
argument_list|,
literal|"s1"
argument_list|,
name|foo
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|INode
name|oldfooNode
init|=
name|fsdir
operator|.
name|getINode
argument_list|(
name|oldfoo
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|oldfooNode
operator|instanceof
name|INodeReference
operator|.
name|WithName
argument_list|)
expr_stmt|;
name|byte
index|[]
index|[]
name|oldfooComponents
init|=
name|FSDirectory
operator|.
name|getPathComponentsWithSnapshot
argument_list|(
name|oldfooNode
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|checkComponentsEquals
argument_list|(
name|INode
operator|.
name|getPathComponents
argument_list|(
name|oldfoo
argument_list|)
argument_list|,
name|oldfooComponents
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

