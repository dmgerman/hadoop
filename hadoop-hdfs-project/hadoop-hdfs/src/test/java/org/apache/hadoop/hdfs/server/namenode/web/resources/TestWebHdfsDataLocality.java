begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.web.resources
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|web
operator|.
name|resources
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNodeAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|WebHdfsTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|GetOpParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|PostOpParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|PutOpParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test WebHDFS which provides data locality using HTTP redirection.  */
end_comment

begin_class
DECL|class|TestWebHdfsDataLocality
specifier|public
class|class
name|TestWebHdfsDataLocality
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestWebHdfsDataLocality
operator|.
name|class
argument_list|)
decl_stmt|;
block|{
name|DFSTestUtil
operator|.
name|setNameNodeLogLevel
parameter_list|(
name|Level
operator|.
name|ALL
parameter_list|)
constructor_decl|;
block|}
DECL|field|RACK0
specifier|private
specifier|static
specifier|final
name|String
name|RACK0
init|=
literal|"/rack0"
decl_stmt|;
DECL|field|RACK1
specifier|private
specifier|static
specifier|final
name|String
name|RACK1
init|=
literal|"/rack1"
decl_stmt|;
DECL|field|RACK2
specifier|private
specifier|static
specifier|final
name|String
name|RACK2
init|=
literal|"/rack2"
decl_stmt|;
annotation|@
name|Test
DECL|method|testDataLocality ()
specifier|public
name|void
name|testDataLocality
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
name|WebHdfsTestUtil
operator|.
name|createConf
argument_list|()
decl_stmt|;
specifier|final
name|String
index|[]
name|racks
init|=
block|{
name|RACK0
block|,
name|RACK0
block|,
name|RACK1
block|,
name|RACK1
block|,
name|RACK2
block|,
name|RACK2
block|}
decl_stmt|;
specifier|final
name|int
name|nDataNodes
init|=
name|racks
operator|.
name|length
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"nDataNodes="
operator|+
name|nDataNodes
operator|+
literal|", racks="
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|racks
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|nDataNodes
argument_list|)
operator|.
name|racks
argument_list|(
name|racks
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|DistributedFileSystem
name|dfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|NameNode
name|namenode
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
decl_stmt|;
specifier|final
name|DatanodeManager
name|dm
init|=
name|namenode
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|(           )
operator|.
name|getDatanodeManager
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"dm="
operator|+
name|dm
argument_list|)
expr_stmt|;
specifier|final
name|long
name|blocksize
init|=
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_DEFAULT
decl_stmt|;
specifier|final
name|String
name|f
init|=
literal|"/foo"
decl_stmt|;
block|{
comment|//test CREATE
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nDataNodes
condition|;
name|i
operator|++
control|)
block|{
comment|//set client address to a particular datanode
specifier|final
name|DataNode
name|dn
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|String
name|ipAddr
init|=
name|dm
operator|.
name|getDatanode
argument_list|(
name|dn
operator|.
name|getDatanodeId
argument_list|()
argument_list|)
operator|.
name|getIpAddr
argument_list|()
decl_stmt|;
comment|//The chosen datanode must be the same as the client address
specifier|final
name|DatanodeInfo
name|chosen
init|=
name|NamenodeWebHdfsMethods
operator|.
name|chooseDatanode
argument_list|(
name|namenode
argument_list|,
name|f
argument_list|,
name|PutOpParam
operator|.
name|Op
operator|.
name|CREATE
argument_list|,
operator|-
literal|1L
argument_list|,
name|blocksize
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ipAddr
argument_list|,
name|chosen
operator|.
name|getIpAddr
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|//create a file with one replica.
specifier|final
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|f
argument_list|)
decl_stmt|;
specifier|final
name|FSDataOutputStream
name|out
init|=
name|dfs
operator|.
name|create
argument_list|(
name|p
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//get replica location.
specifier|final
name|LocatedBlocks
name|locatedblocks
init|=
name|NameNodeAdapter
operator|.
name|getBlockLocations
argument_list|(
name|namenode
argument_list|,
name|f
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|lb
init|=
name|locatedblocks
operator|.
name|getLocatedBlocks
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|lb
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|DatanodeInfo
index|[]
name|locations
init|=
name|lb
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLocations
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|locations
operator|.
name|length
argument_list|)
expr_stmt|;
specifier|final
name|DatanodeInfo
name|expected
init|=
name|locations
index|[
literal|0
index|]
decl_stmt|;
comment|//For GETFILECHECKSUM, OPEN and APPEND,
comment|//the chosen datanode must be the same as the replica location.
block|{
comment|//test GETFILECHECKSUM
specifier|final
name|DatanodeInfo
name|chosen
init|=
name|NamenodeWebHdfsMethods
operator|.
name|chooseDatanode
argument_list|(
name|namenode
argument_list|,
name|f
argument_list|,
name|GetOpParam
operator|.
name|Op
operator|.
name|GETFILECHECKSUM
argument_list|,
operator|-
literal|1L
argument_list|,
name|blocksize
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|chosen
argument_list|)
expr_stmt|;
block|}
block|{
comment|//test OPEN
specifier|final
name|DatanodeInfo
name|chosen
init|=
name|NamenodeWebHdfsMethods
operator|.
name|chooseDatanode
argument_list|(
name|namenode
argument_list|,
name|f
argument_list|,
name|GetOpParam
operator|.
name|Op
operator|.
name|OPEN
argument_list|,
literal|0
argument_list|,
name|blocksize
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|chosen
argument_list|)
expr_stmt|;
block|}
block|{
comment|//test APPEND
specifier|final
name|DatanodeInfo
name|chosen
init|=
name|NamenodeWebHdfsMethods
operator|.
name|chooseDatanode
argument_list|(
name|namenode
argument_list|,
name|f
argument_list|,
name|PostOpParam
operator|.
name|Op
operator|.
name|APPEND
argument_list|,
operator|-
literal|1L
argument_list|,
name|blocksize
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|chosen
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testExcludeDataNodes ()
specifier|public
name|void
name|testExcludeDataNodes
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
name|WebHdfsTestUtil
operator|.
name|createConf
argument_list|()
decl_stmt|;
specifier|final
name|String
index|[]
name|racks
init|=
block|{
name|RACK0
block|,
name|RACK0
block|,
name|RACK1
block|,
name|RACK1
block|,
name|RACK2
block|,
name|RACK2
block|}
decl_stmt|;
specifier|final
name|String
index|[]
name|hosts
init|=
block|{
literal|"DataNode1"
block|,
literal|"DataNode2"
block|,
literal|"DataNode3"
block|,
literal|"DataNode4"
block|,
literal|"DataNode5"
block|,
literal|"DataNode6"
block|}
decl_stmt|;
specifier|final
name|int
name|nDataNodes
init|=
name|hosts
operator|.
name|length
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"nDataNodes="
operator|+
name|nDataNodes
operator|+
literal|", racks="
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|racks
argument_list|)
operator|+
literal|", hosts="
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|hosts
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|hosts
argument_list|(
name|hosts
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|nDataNodes
argument_list|)
operator|.
name|racks
argument_list|(
name|racks
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|DistributedFileSystem
name|dfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|NameNode
name|namenode
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
decl_stmt|;
specifier|final
name|DatanodeManager
name|dm
init|=
name|namenode
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|(           )
operator|.
name|getDatanodeManager
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"dm="
operator|+
name|dm
argument_list|)
expr_stmt|;
specifier|final
name|long
name|blocksize
init|=
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_DEFAULT
decl_stmt|;
specifier|final
name|String
name|f
init|=
literal|"/foo"
decl_stmt|;
comment|//create a file with three replica.
specifier|final
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|f
argument_list|)
decl_stmt|;
specifier|final
name|FSDataOutputStream
name|out
init|=
name|dfs
operator|.
name|create
argument_list|(
name|p
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//get replica location.
specifier|final
name|LocatedBlocks
name|locatedblocks
init|=
name|NameNodeAdapter
operator|.
name|getBlockLocations
argument_list|(
name|namenode
argument_list|,
name|f
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|lb
init|=
name|locatedblocks
operator|.
name|getLocatedBlocks
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|lb
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|DatanodeInfo
index|[]
name|locations
init|=
name|lb
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLocations
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|locations
operator|.
name|length
argument_list|)
expr_stmt|;
comment|//For GETFILECHECKSUM, OPEN and APPEND,
comment|//the chosen datanode must be different with exclude nodes.
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|locations
index|[
name|i
index|]
operator|.
name|getXferAddr
argument_list|()
argument_list|)
expr_stmt|;
block|{
comment|// test GETFILECHECKSUM
specifier|final
name|DatanodeInfo
name|chosen
init|=
name|NamenodeWebHdfsMethods
operator|.
name|chooseDatanode
argument_list|(
name|namenode
argument_list|,
name|f
argument_list|,
name|GetOpParam
operator|.
name|Op
operator|.
name|GETFILECHECKSUM
argument_list|,
operator|-
literal|1L
argument_list|,
name|blocksize
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<=
name|i
condition|;
name|j
operator|++
control|)
block|{
name|Assert
operator|.
name|assertNotEquals
argument_list|(
name|locations
index|[
name|j
index|]
operator|.
name|getHostName
argument_list|()
argument_list|,
name|chosen
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|{
comment|// test OPEN
specifier|final
name|DatanodeInfo
name|chosen
init|=
name|NamenodeWebHdfsMethods
operator|.
name|chooseDatanode
argument_list|(
name|namenode
argument_list|,
name|f
argument_list|,
name|GetOpParam
operator|.
name|Op
operator|.
name|OPEN
argument_list|,
literal|0
argument_list|,
name|blocksize
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<=
name|i
condition|;
name|j
operator|++
control|)
block|{
name|Assert
operator|.
name|assertNotEquals
argument_list|(
name|locations
index|[
name|j
index|]
operator|.
name|getHostName
argument_list|()
argument_list|,
name|chosen
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|{
comment|// test APPEND
specifier|final
name|DatanodeInfo
name|chosen
init|=
name|NamenodeWebHdfsMethods
operator|.
name|chooseDatanode
argument_list|(
name|namenode
argument_list|,
name|f
argument_list|,
name|PostOpParam
operator|.
name|Op
operator|.
name|APPEND
argument_list|,
operator|-
literal|1L
argument_list|,
name|blocksize
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<=
name|i
condition|;
name|j
operator|++
control|)
block|{
name|Assert
operator|.
name|assertNotEquals
argument_list|(
name|locations
index|[
name|j
index|]
operator|.
name|getHostName
argument_list|()
argument_list|,
name|chosen
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

