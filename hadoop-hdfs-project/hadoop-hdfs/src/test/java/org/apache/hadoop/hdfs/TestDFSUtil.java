begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|FS_DEFAULT_NAME_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_FAILOVER_PROXY_PROVIDER_KEY_PREFIX
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_HA_NAMENODES_KEY_PREFIX
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_BACKUP_ADDRESS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HTTPS_PORT_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HTTP_ADDRESS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HTTP_PORT_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_RPC_ADDRESS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMESERVICES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMESERVICE_ID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
operator|.
name|assertExceptionContains
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|not
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|HadoopIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BlockLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ha
operator|.
name|ConfiguredFailoverProxyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestDFSUtil
specifier|public
class|class
name|TestDFSUtil
block|{
comment|/**    * Reset to default UGI settings since some tests change them.    */
annotation|@
name|Before
DECL|method|resetUGI ()
specifier|public
name|void
name|resetUGI
parameter_list|()
block|{
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test conversion of LocatedBlock to BlockLocation    */
annotation|@
name|Test
DECL|method|testLocatedBlocks2Locations ()
specifier|public
name|void
name|testLocatedBlocks2Locations
parameter_list|()
block|{
name|DatanodeInfo
name|d
init|=
name|DFSTestUtil
operator|.
name|getLocalDatanodeInfo
argument_list|()
decl_stmt|;
name|DatanodeInfo
index|[]
name|ds
init|=
operator|new
name|DatanodeInfo
index|[
literal|1
index|]
decl_stmt|;
name|ds
index|[
literal|0
index|]
operator|=
name|d
expr_stmt|;
comment|// ok
name|ExtendedBlock
name|b1
init|=
operator|new
name|ExtendedBlock
argument_list|(
literal|"bpid"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|LocatedBlock
name|l1
init|=
operator|new
name|LocatedBlock
argument_list|(
name|b1
argument_list|,
name|ds
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// corrupt
name|ExtendedBlock
name|b2
init|=
operator|new
name|ExtendedBlock
argument_list|(
literal|"bpid"
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|LocatedBlock
name|l2
init|=
operator|new
name|LocatedBlock
argument_list|(
name|b2
argument_list|,
name|ds
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|ls
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|l1
argument_list|,
name|l2
argument_list|)
decl_stmt|;
name|LocatedBlocks
name|lbs
init|=
operator|new
name|LocatedBlocks
argument_list|(
literal|10
argument_list|,
literal|false
argument_list|,
name|ls
argument_list|,
name|l2
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|BlockLocation
index|[]
name|bs
init|=
name|DFSUtil
operator|.
name|locatedBlocks2Locations
argument_list|(
name|lbs
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"expected 2 blocks but got "
operator|+
name|bs
operator|.
name|length
argument_list|,
name|bs
operator|.
name|length
operator|==
literal|2
argument_list|)
expr_stmt|;
name|int
name|corruptCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|BlockLocation
name|b
range|:
name|bs
control|)
block|{
if|if
condition|(
name|b
operator|.
name|isCorrupt
argument_list|()
condition|)
block|{
name|corruptCount
operator|++
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"expected 1 corrupt files but got "
operator|+
name|corruptCount
argument_list|,
name|corruptCount
operator|==
literal|1
argument_list|)
expr_stmt|;
comment|// test an empty location
name|bs
operator|=
name|DFSUtil
operator|.
name|locatedBlocks2Locations
argument_list|(
operator|new
name|LocatedBlocks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|bs
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|setupAddress (String key)
specifier|private
name|Configuration
name|setupAddress
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|HdfsConfiguration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMESERVICES
argument_list|,
literal|"nn1"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSUtil
operator|.
name|addKeySuffixes
argument_list|(
name|key
argument_list|,
literal|"nn1"
argument_list|)
argument_list|,
literal|"localhost:9000"
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
comment|/**    * Test {@link DFSUtil#getNamenodeNameServiceId(Configuration)} to ensure    * nameserviceId from the configuration returned    */
annotation|@
name|Test
DECL|method|getNameServiceId ()
specifier|public
name|void
name|getNameServiceId
parameter_list|()
block|{
name|HdfsConfiguration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMESERVICE_ID
argument_list|,
literal|"nn1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"nn1"
argument_list|,
name|DFSUtil
operator|.
name|getNamenodeNameServiceId
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test {@link DFSUtil#getNamenodeNameServiceId(Configuration)} to ensure    * nameserviceId for namenode is determined based on matching the address with    * local node's address    */
annotation|@
name|Test
DECL|method|getNameNodeNameServiceId ()
specifier|public
name|void
name|getNameNodeNameServiceId
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|setupAddress
argument_list|(
name|DFS_NAMENODE_RPC_ADDRESS_KEY
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"nn1"
argument_list|,
name|DFSUtil
operator|.
name|getNamenodeNameServiceId
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test {@link DFSUtil#getBackupNameServiceId(Configuration)} to ensure    * nameserviceId for backup node is determined based on matching the address    * with local node's address    */
annotation|@
name|Test
DECL|method|getBackupNameServiceId ()
specifier|public
name|void
name|getBackupNameServiceId
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|setupAddress
argument_list|(
name|DFS_NAMENODE_BACKUP_ADDRESS_KEY
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"nn1"
argument_list|,
name|DFSUtil
operator|.
name|getBackupNameServiceId
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test {@link DFSUtil#getSecondaryNameServiceId(Configuration)} to ensure    * nameserviceId for backup node is determined based on matching the address    * with local node's address    */
annotation|@
name|Test
DECL|method|getSecondaryNameServiceId ()
specifier|public
name|void
name|getSecondaryNameServiceId
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|setupAddress
argument_list|(
name|DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_KEY
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"nn1"
argument_list|,
name|DFSUtil
operator|.
name|getSecondaryNameServiceId
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test {@link DFSUtil#getNamenodeNameServiceId(Configuration)} to ensure    * exception is thrown when multiple rpc addresses match the local node's    * address    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|HadoopIllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testGetNameServiceIdException ()
specifier|public
name|void
name|testGetNameServiceIdException
parameter_list|()
block|{
name|HdfsConfiguration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMESERVICES
argument_list|,
literal|"nn1,nn2"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSUtil
operator|.
name|addKeySuffixes
argument_list|(
name|DFS_NAMENODE_RPC_ADDRESS_KEY
argument_list|,
literal|"nn1"
argument_list|)
argument_list|,
literal|"localhost:9000"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSUtil
operator|.
name|addKeySuffixes
argument_list|(
name|DFS_NAMENODE_RPC_ADDRESS_KEY
argument_list|,
literal|"nn2"
argument_list|)
argument_list|,
literal|"localhost:9001"
argument_list|)
expr_stmt|;
name|DFSUtil
operator|.
name|getNamenodeNameServiceId
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected exception is not thrown"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test {@link DFSUtil#getNameServiceIds(Configuration)}    */
annotation|@
name|Test
DECL|method|testGetNameServiceIds ()
specifier|public
name|void
name|testGetNameServiceIds
parameter_list|()
block|{
name|HdfsConfiguration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMESERVICES
argument_list|,
literal|"nn1,nn2"
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|nameserviceIds
init|=
name|DFSUtil
operator|.
name|getNameServiceIds
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|nameserviceIds
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|nameserviceIds
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"nn1"
argument_list|,
name|it
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"nn2"
argument_list|,
name|it
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetOnlyNameServiceIdOrNull ()
specifier|public
name|void
name|testGetOnlyNameServiceIdOrNull
parameter_list|()
block|{
name|HdfsConfiguration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMESERVICES
argument_list|,
literal|"ns1,ns2"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|DFSUtil
operator|.
name|getOnlyNameServiceIdOrNull
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMESERVICES
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|DFSUtil
operator|.
name|getOnlyNameServiceIdOrNull
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMESERVICES
argument_list|,
literal|"ns1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ns1"
argument_list|,
name|DFSUtil
operator|.
name|getOnlyNameServiceIdOrNull
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test for {@link DFSUtil#getNNServiceRpcAddresses(Configuration)}    * {@link DFSUtil#getNameServiceIdFromAddress(Configuration, InetSocketAddress, String...)    * (Configuration)}    */
annotation|@
name|Test
DECL|method|testMultipleNamenodes ()
specifier|public
name|void
name|testMultipleNamenodes
parameter_list|()
throws|throws
name|IOException
block|{
name|HdfsConfiguration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMESERVICES
argument_list|,
literal|"nn1,nn2"
argument_list|)
expr_stmt|;
comment|// Test - configured list of namenodes are returned
specifier|final
name|String
name|NN1_ADDRESS
init|=
literal|"localhost:9000"
decl_stmt|;
specifier|final
name|String
name|NN2_ADDRESS
init|=
literal|"localhost:9001"
decl_stmt|;
specifier|final
name|String
name|NN3_ADDRESS
init|=
literal|"localhost:9002"
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSUtil
operator|.
name|addKeySuffixes
argument_list|(
name|DFS_NAMENODE_RPC_ADDRESS_KEY
argument_list|,
literal|"nn1"
argument_list|)
argument_list|,
name|NN1_ADDRESS
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSUtil
operator|.
name|addKeySuffixes
argument_list|(
name|DFS_NAMENODE_RPC_ADDRESS_KEY
argument_list|,
literal|"nn2"
argument_list|)
argument_list|,
name|NN2_ADDRESS
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|InetSocketAddress
argument_list|>
argument_list|>
name|nnMap
init|=
name|DFSUtil
operator|.
name|getNNServiceRpcAddresses
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|nnMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|InetSocketAddress
argument_list|>
name|nn1Map
init|=
name|nnMap
operator|.
name|get
argument_list|(
literal|"nn1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|nn1Map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|InetSocketAddress
name|addr
init|=
name|nn1Map
operator|.
name|get
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"localhost"
argument_list|,
name|addr
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9000
argument_list|,
name|addr
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|InetSocketAddress
argument_list|>
name|nn2Map
init|=
name|nnMap
operator|.
name|get
argument_list|(
literal|"nn2"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|nn2Map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|addr
operator|=
name|nn2Map
operator|.
name|get
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"localhost"
argument_list|,
name|addr
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9001
argument_list|,
name|addr
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test - can look up nameservice ID from service address
name|checkNameServiceId
argument_list|(
name|conf
argument_list|,
name|NN1_ADDRESS
argument_list|,
literal|"nn1"
argument_list|)
expr_stmt|;
name|checkNameServiceId
argument_list|(
name|conf
argument_list|,
name|NN2_ADDRESS
argument_list|,
literal|"nn2"
argument_list|)
expr_stmt|;
name|checkNameServiceId
argument_list|(
name|conf
argument_list|,
name|NN3_ADDRESS
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// HA is not enabled in a purely federated config
name|assertFalse
argument_list|(
name|HAUtil
operator|.
name|isHAEnabled
argument_list|(
name|conf
argument_list|,
literal|"nn1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|HAUtil
operator|.
name|isHAEnabled
argument_list|(
name|conf
argument_list|,
literal|"nn2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|checkNameServiceId (Configuration conf, String addr, String expectedNameServiceId)
specifier|public
name|void
name|checkNameServiceId
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|addr
parameter_list|,
name|String
name|expectedNameServiceId
parameter_list|)
block|{
name|InetSocketAddress
name|s
init|=
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|addr
argument_list|)
decl_stmt|;
name|String
name|nameserviceId
init|=
name|DFSUtil
operator|.
name|getNameServiceIdFromAddress
argument_list|(
name|conf
argument_list|,
name|s
argument_list|,
name|DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY
argument_list|,
name|DFS_NAMENODE_RPC_ADDRESS_KEY
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedNameServiceId
argument_list|,
name|nameserviceId
argument_list|)
expr_stmt|;
block|}
comment|/** Tests to ensure default namenode is used as fallback */
annotation|@
name|Test
DECL|method|testDefaultNamenode ()
specifier|public
name|void
name|testDefaultNamenode
parameter_list|()
throws|throws
name|IOException
block|{
name|HdfsConfiguration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
specifier|final
name|String
name|hdfs_default
init|=
literal|"hdfs://localhost:9999/"
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FS_DEFAULT_NAME_KEY
argument_list|,
name|hdfs_default
argument_list|)
expr_stmt|;
comment|// If DFS_FEDERATION_NAMESERVICES is not set, verify that
comment|// default namenode address is returned.
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|InetSocketAddress
argument_list|>
argument_list|>
name|addrMap
init|=
name|DFSUtil
operator|.
name|getNNServiceRpcAddresses
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|addrMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|InetSocketAddress
argument_list|>
name|defaultNsMap
init|=
name|addrMap
operator|.
name|get
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|defaultNsMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9999
argument_list|,
name|defaultNsMap
operator|.
name|get
argument_list|(
literal|null
argument_list|)
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test to ensure nameservice specific keys in the configuration are    * copied to generic keys when the namenode starts.    */
annotation|@
name|Test
DECL|method|testConfModificationFederationOnly ()
specifier|public
name|void
name|testConfModificationFederationOnly
parameter_list|()
block|{
specifier|final
name|HdfsConfiguration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|String
name|nsId
init|=
literal|"ns1"
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMESERVICES
argument_list|,
name|nsId
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMESERVICE_ID
argument_list|,
name|nsId
argument_list|)
expr_stmt|;
comment|// Set the nameservice specific keys with nameserviceId in the config key
for|for
control|(
name|String
name|key
range|:
name|NameNode
operator|.
name|NAMENODE_SPECIFIC_KEYS
control|)
block|{
comment|// Note: value is same as the key
name|conf
operator|.
name|set
argument_list|(
name|DFSUtil
operator|.
name|addKeySuffixes
argument_list|(
name|key
argument_list|,
name|nsId
argument_list|)
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
comment|// Initialize generic keys from specific keys
name|NameNode
operator|.
name|initializeGenericKeys
argument_list|(
name|conf
argument_list|,
name|nsId
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Retrieve the keys without nameserviceId and Ensure generic keys are set
comment|// to the correct value
for|for
control|(
name|String
name|key
range|:
name|NameNode
operator|.
name|NAMENODE_SPECIFIC_KEYS
control|)
block|{
name|assertEquals
argument_list|(
name|key
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test to ensure nameservice specific keys in the configuration are    * copied to generic keys when the namenode starts.    */
annotation|@
name|Test
DECL|method|testConfModificationFederationAndHa ()
specifier|public
name|void
name|testConfModificationFederationAndHa
parameter_list|()
block|{
specifier|final
name|HdfsConfiguration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|String
name|nsId
init|=
literal|"ns1"
decl_stmt|;
name|String
name|nnId
init|=
literal|"nn1"
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMESERVICES
argument_list|,
name|nsId
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMESERVICE_ID
argument_list|,
name|nsId
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_HA_NAMENODES_KEY_PREFIX
operator|+
literal|"."
operator|+
name|nsId
argument_list|,
name|nnId
argument_list|)
expr_stmt|;
comment|// Set the nameservice specific keys with nameserviceId in the config key
for|for
control|(
name|String
name|key
range|:
name|NameNode
operator|.
name|NAMENODE_SPECIFIC_KEYS
control|)
block|{
comment|// Note: value is same as the key
name|conf
operator|.
name|set
argument_list|(
name|DFSUtil
operator|.
name|addKeySuffixes
argument_list|(
name|key
argument_list|,
name|nsId
argument_list|,
name|nnId
argument_list|)
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
comment|// Initialize generic keys from specific keys
name|NameNode
operator|.
name|initializeGenericKeys
argument_list|(
name|conf
argument_list|,
name|nsId
argument_list|,
name|nnId
argument_list|)
expr_stmt|;
comment|// Retrieve the keys without nameserviceId and Ensure generic keys are set
comment|// to the correct value
for|for
control|(
name|String
name|key
range|:
name|NameNode
operator|.
name|NAMENODE_SPECIFIC_KEYS
control|)
block|{
name|assertEquals
argument_list|(
name|key
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Ensure that fs.defaultFS is set in the configuration even if neither HA nor    * Federation is enabled.    *     * Regression test for HDFS-3351.    */
annotation|@
name|Test
DECL|method|testConfModificationNoFederationOrHa ()
specifier|public
name|void
name|testConfModificationNoFederationOrHa
parameter_list|()
block|{
specifier|final
name|HdfsConfiguration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|String
name|nsId
init|=
literal|null
decl_stmt|;
name|String
name|nnId
init|=
literal|null
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMENODE_RPC_ADDRESS_KEY
argument_list|,
literal|"localhost:1234"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"hdfs://localhost:1234"
operator|.
name|equals
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|FS_DEFAULT_NAME_KEY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|NameNode
operator|.
name|initializeGenericKeys
argument_list|(
name|conf
argument_list|,
name|nsId
argument_list|,
name|nnId
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hdfs://localhost:1234"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|FS_DEFAULT_NAME_KEY
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Regression test for HDFS-2934.    */
annotation|@
name|Test
DECL|method|testSomeConfsNNSpecificSomeNSSpecific ()
specifier|public
name|void
name|testSomeConfsNNSpecificSomeNSSpecific
parameter_list|()
block|{
specifier|final
name|HdfsConfiguration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_SHARED_EDITS_DIR_KEY
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|key
argument_list|,
literal|"global-default"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|key
operator|+
literal|".ns1"
argument_list|,
literal|"ns1-override"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|key
operator|+
literal|".ns1.nn1"
argument_list|,
literal|"nn1-override"
argument_list|)
expr_stmt|;
comment|// A namenode in another nameservice should get the global default.
name|Configuration
name|newConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|NameNode
operator|.
name|initializeGenericKeys
argument_list|(
name|newConf
argument_list|,
literal|"ns2"
argument_list|,
literal|"nn1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"global-default"
argument_list|,
name|newConf
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
comment|// A namenode in another non-HA nameservice should get global default.
name|newConf
operator|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|NameNode
operator|.
name|initializeGenericKeys
argument_list|(
name|newConf
argument_list|,
literal|"ns2"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"global-default"
argument_list|,
name|newConf
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
comment|// A namenode in the same nameservice should get the ns setting
name|newConf
operator|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|NameNode
operator|.
name|initializeGenericKeys
argument_list|(
name|newConf
argument_list|,
literal|"ns1"
argument_list|,
literal|"nn2"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ns1-override"
argument_list|,
name|newConf
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
comment|// The nn with the nn-specific setting should get its own override
name|newConf
operator|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|NameNode
operator|.
name|initializeGenericKeys
argument_list|(
name|newConf
argument_list|,
literal|"ns1"
argument_list|,
literal|"nn1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"nn1-override"
argument_list|,
name|newConf
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests for empty configuration, an exception is thrown from    * {@link DFSUtil#getNNServiceRpcAddresses(Configuration)}    * {@link DFSUtil#getBackupNodeAddresses(Configuration)}    * {@link DFSUtil#getSecondaryNameNodeAddresses(Configuration)}    */
annotation|@
name|Test
DECL|method|testEmptyConf ()
specifier|public
name|void
name|testEmptyConf
parameter_list|()
block|{
name|HdfsConfiguration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
try|try
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|InetSocketAddress
argument_list|>
argument_list|>
name|map
init|=
name|DFSUtil
operator|.
name|getNNServiceRpcAddresses
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Expected IOException is not thrown, result was: "
operator|+
name|DFSUtil
operator|.
name|addressMapToString
argument_list|(
name|map
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|expected
parameter_list|)
block|{
comment|/** Expected */
block|}
try|try
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|InetSocketAddress
argument_list|>
argument_list|>
name|map
init|=
name|DFSUtil
operator|.
name|getBackupNodeAddresses
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Expected IOException is not thrown, result was: "
operator|+
name|DFSUtil
operator|.
name|addressMapToString
argument_list|(
name|map
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|expected
parameter_list|)
block|{
comment|/** Expected */
block|}
try|try
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|InetSocketAddress
argument_list|>
argument_list|>
name|map
init|=
name|DFSUtil
operator|.
name|getSecondaryNameNodeAddresses
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Expected IOException is not thrown, result was: "
operator|+
name|DFSUtil
operator|.
name|addressMapToString
argument_list|(
name|map
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|expected
parameter_list|)
block|{
comment|/** Expected */
block|}
block|}
annotation|@
name|Test
DECL|method|testGetInfoServer ()
specifier|public
name|void
name|testGetInfoServer
parameter_list|()
throws|throws
name|IOException
block|{
name|HdfsConfiguration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|String
name|httpsport
init|=
name|DFSUtil
operator|.
name|getInfoServer
argument_list|(
literal|null
argument_list|,
name|conf
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"0.0.0.0:"
operator|+
name|DFS_NAMENODE_HTTPS_PORT_DEFAULT
argument_list|,
name|httpsport
argument_list|)
expr_stmt|;
name|String
name|httpport
init|=
name|DFSUtil
operator|.
name|getInfoServer
argument_list|(
literal|null
argument_list|,
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"0.0.0.0:"
operator|+
name|DFS_NAMENODE_HTTP_PORT_DEFAULT
argument_list|,
name|httpport
argument_list|)
expr_stmt|;
name|String
name|httpAddress
init|=
name|DFSUtil
operator|.
name|getInfoServer
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
literal|8020
argument_list|)
argument_list|,
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"localhost:"
operator|+
name|DFS_NAMENODE_HTTP_PORT_DEFAULT
argument_list|,
name|httpAddress
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHANameNodesWithFederation ()
specifier|public
name|void
name|testHANameNodesWithFederation
parameter_list|()
throws|throws
name|URISyntaxException
block|{
name|HdfsConfiguration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
specifier|final
name|String
name|NS1_NN1_HOST
init|=
literal|"ns1-nn1.example.com:8020"
decl_stmt|;
specifier|final
name|String
name|NS1_NN2_HOST
init|=
literal|"ns1-nn2.example.com:8020"
decl_stmt|;
specifier|final
name|String
name|NS2_NN1_HOST
init|=
literal|"ns2-nn1.example.com:8020"
decl_stmt|;
specifier|final
name|String
name|NS2_NN2_HOST
init|=
literal|"ns2-nn2.example.com:8020"
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|FS_DEFAULT_NAME_KEY
argument_list|,
literal|"hdfs://ns1"
argument_list|)
expr_stmt|;
comment|// Two nameservices, each with two NNs.
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMESERVICES
argument_list|,
literal|"ns1,ns2"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSUtil
operator|.
name|addKeySuffixes
argument_list|(
name|DFS_HA_NAMENODES_KEY_PREFIX
argument_list|,
literal|"ns1"
argument_list|)
argument_list|,
literal|"ns1-nn1,ns1-nn2"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSUtil
operator|.
name|addKeySuffixes
argument_list|(
name|DFS_HA_NAMENODES_KEY_PREFIX
argument_list|,
literal|"ns2"
argument_list|)
argument_list|,
literal|"ns2-nn1,ns2-nn2"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSUtil
operator|.
name|addKeySuffixes
argument_list|(
name|DFS_NAMENODE_RPC_ADDRESS_KEY
argument_list|,
literal|"ns1"
argument_list|,
literal|"ns1-nn1"
argument_list|)
argument_list|,
name|NS1_NN1_HOST
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSUtil
operator|.
name|addKeySuffixes
argument_list|(
name|DFS_NAMENODE_RPC_ADDRESS_KEY
argument_list|,
literal|"ns1"
argument_list|,
literal|"ns1-nn2"
argument_list|)
argument_list|,
name|NS1_NN2_HOST
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSUtil
operator|.
name|addKeySuffixes
argument_list|(
name|DFS_NAMENODE_RPC_ADDRESS_KEY
argument_list|,
literal|"ns2"
argument_list|,
literal|"ns2-nn1"
argument_list|)
argument_list|,
name|NS2_NN1_HOST
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSUtil
operator|.
name|addKeySuffixes
argument_list|(
name|DFS_NAMENODE_RPC_ADDRESS_KEY
argument_list|,
literal|"ns2"
argument_list|,
literal|"ns2-nn2"
argument_list|)
argument_list|,
name|NS2_NN2_HOST
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|InetSocketAddress
argument_list|>
argument_list|>
name|map
init|=
name|DFSUtil
operator|.
name|getHaNnRpcAddresses
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|HAUtil
operator|.
name|isHAEnabled
argument_list|(
name|conf
argument_list|,
literal|"ns1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|HAUtil
operator|.
name|isHAEnabled
argument_list|(
name|conf
argument_list|,
literal|"ns2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|HAUtil
operator|.
name|isHAEnabled
argument_list|(
name|conf
argument_list|,
literal|"ns3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NS1_NN1_HOST
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"ns1"
argument_list|)
operator|.
name|get
argument_list|(
literal|"ns1-nn1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NS1_NN2_HOST
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"ns1"
argument_list|)
operator|.
name|get
argument_list|(
literal|"ns1-nn2"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NS2_NN1_HOST
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"ns2"
argument_list|)
operator|.
name|get
argument_list|(
literal|"ns2-nn1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NS2_NN2_HOST
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"ns2"
argument_list|)
operator|.
name|get
argument_list|(
literal|"ns2-nn2"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NS1_NN1_HOST
argument_list|,
name|DFSUtil
operator|.
name|getNamenodeServiceAddr
argument_list|(
name|conf
argument_list|,
literal|"ns1"
argument_list|,
literal|"ns1-nn1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NS1_NN2_HOST
argument_list|,
name|DFSUtil
operator|.
name|getNamenodeServiceAddr
argument_list|(
name|conf
argument_list|,
literal|"ns1"
argument_list|,
literal|"ns1-nn2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NS2_NN1_HOST
argument_list|,
name|DFSUtil
operator|.
name|getNamenodeServiceAddr
argument_list|(
name|conf
argument_list|,
literal|"ns2"
argument_list|,
literal|"ns2-nn1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// No nameservice was given and we can't determine which service addr
comment|// to use as two nameservices could share a namenode ID.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|DFSUtil
operator|.
name|getNamenodeServiceAddr
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|,
literal|"ns1-nn1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Ditto for nameservice IDs, if multiple are defined
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|DFSUtil
operator|.
name|getNamenodeNameServiceId
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|DFSUtil
operator|.
name|getSecondaryNameServiceId
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|URI
argument_list|>
name|uris
init|=
name|DFSUtil
operator|.
name|getNameServiceUris
argument_list|(
name|conf
argument_list|,
name|DFS_NAMENODE_RPC_ADDRESS_KEY
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|uris
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|uris
operator|.
name|contains
argument_list|(
operator|new
name|URI
argument_list|(
literal|"hdfs://ns1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|uris
operator|.
name|contains
argument_list|(
operator|new
name|URI
argument_list|(
literal|"hdfs://ns2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getNameNodeServiceAddr ()
specifier|public
name|void
name|getNameNodeServiceAddr
parameter_list|()
throws|throws
name|IOException
block|{
name|HdfsConfiguration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
comment|// One nameservice with two NNs
specifier|final
name|String
name|NS1_NN1_HOST
init|=
literal|"ns1-nn1.example.com:8020"
decl_stmt|;
specifier|final
name|String
name|NS1_NN1_HOST_SVC
init|=
literal|"ns1-nn2.example.com:8021"
decl_stmt|;
specifier|final
name|String
name|NS1_NN2_HOST
init|=
literal|"ns1-nn1.example.com:8020"
decl_stmt|;
specifier|final
name|String
name|NS1_NN2_HOST_SVC
init|=
literal|"ns1-nn2.example.com:8021"
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMESERVICES
argument_list|,
literal|"ns1"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSUtil
operator|.
name|addKeySuffixes
argument_list|(
name|DFS_HA_NAMENODES_KEY_PREFIX
argument_list|,
literal|"ns1"
argument_list|)
argument_list|,
literal|"nn1,nn2"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSUtil
operator|.
name|addKeySuffixes
argument_list|(
name|DFS_NAMENODE_RPC_ADDRESS_KEY
argument_list|,
literal|"ns1"
argument_list|,
literal|"nn1"
argument_list|)
argument_list|,
name|NS1_NN1_HOST
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSUtil
operator|.
name|addKeySuffixes
argument_list|(
name|DFS_NAMENODE_RPC_ADDRESS_KEY
argument_list|,
literal|"ns1"
argument_list|,
literal|"nn2"
argument_list|)
argument_list|,
name|NS1_NN2_HOST
argument_list|)
expr_stmt|;
comment|// The rpc address is used if no service address is defined
name|assertEquals
argument_list|(
name|NS1_NN1_HOST
argument_list|,
name|DFSUtil
operator|.
name|getNamenodeServiceAddr
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|,
literal|"nn1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NS1_NN2_HOST
argument_list|,
name|DFSUtil
operator|.
name|getNamenodeServiceAddr
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|,
literal|"nn2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// A nameservice is specified explicitly
name|assertEquals
argument_list|(
name|NS1_NN1_HOST
argument_list|,
name|DFSUtil
operator|.
name|getNamenodeServiceAddr
argument_list|(
name|conf
argument_list|,
literal|"ns1"
argument_list|,
literal|"nn1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|DFSUtil
operator|.
name|getNamenodeServiceAddr
argument_list|(
name|conf
argument_list|,
literal|"invalid"
argument_list|,
literal|"nn1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// The service addrs are used when they are defined
name|conf
operator|.
name|set
argument_list|(
name|DFSUtil
operator|.
name|addKeySuffixes
argument_list|(
name|DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY
argument_list|,
literal|"ns1"
argument_list|,
literal|"nn1"
argument_list|)
argument_list|,
name|NS1_NN1_HOST_SVC
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSUtil
operator|.
name|addKeySuffixes
argument_list|(
name|DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY
argument_list|,
literal|"ns1"
argument_list|,
literal|"nn2"
argument_list|)
argument_list|,
name|NS1_NN2_HOST_SVC
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NS1_NN1_HOST_SVC
argument_list|,
name|DFSUtil
operator|.
name|getNamenodeServiceAddr
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|,
literal|"nn1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NS1_NN2_HOST_SVC
argument_list|,
name|DFSUtil
operator|.
name|getNamenodeServiceAddr
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|,
literal|"nn2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// We can determine the nameservice ID, there's only one listed
name|assertEquals
argument_list|(
literal|"ns1"
argument_list|,
name|DFSUtil
operator|.
name|getNamenodeNameServiceId
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ns1"
argument_list|,
name|DFSUtil
operator|.
name|getSecondaryNameServiceId
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetHaNnHttpAddresses ()
specifier|public
name|void
name|testGetHaNnHttpAddresses
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|LOGICAL_HOST_NAME
init|=
literal|"ns1"
decl_stmt|;
specifier|final
name|String
name|NS1_NN1_ADDR
init|=
literal|"ns1-nn1.example.com:8020"
decl_stmt|;
specifier|final
name|String
name|NS1_NN2_ADDR
init|=
literal|"ns1-nn2.example.com:8020"
decl_stmt|;
name|Configuration
name|conf
init|=
name|createWebHDFSHAConfiguration
argument_list|(
name|LOGICAL_HOST_NAME
argument_list|,
name|NS1_NN1_ADDR
argument_list|,
name|NS1_NN2_ADDR
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|InetSocketAddress
argument_list|>
argument_list|>
name|map
init|=
name|DFSUtil
operator|.
name|getHaNnWebHdfsAddresses
argument_list|(
name|conf
argument_list|,
literal|"webhdfs"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|NS1_NN1_ADDR
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"ns1"
argument_list|)
operator|.
name|get
argument_list|(
literal|"nn1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NS1_NN2_ADDR
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"ns1"
argument_list|)
operator|.
name|get
argument_list|(
literal|"nn2"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testResolve ()
specifier|public
name|void
name|testResolve
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
specifier|final
name|String
name|LOGICAL_HOST_NAME
init|=
literal|"ns1"
decl_stmt|;
specifier|final
name|String
name|NS1_NN1_HOST
init|=
literal|"ns1-nn1.example.com"
decl_stmt|;
specifier|final
name|String
name|NS1_NN2_HOST
init|=
literal|"ns1-nn2.example.com"
decl_stmt|;
specifier|final
name|String
name|NS1_NN1_ADDR
init|=
literal|"ns1-nn1.example.com:8020"
decl_stmt|;
specifier|final
name|String
name|NS1_NN2_ADDR
init|=
literal|"ns1-nn2.example.com:8020"
decl_stmt|;
specifier|final
name|int
name|DEFAULT_PORT
init|=
name|NameNode
operator|.
name|DEFAULT_PORT
decl_stmt|;
name|Configuration
name|conf
init|=
name|createWebHDFSHAConfiguration
argument_list|(
name|LOGICAL_HOST_NAME
argument_list|,
name|NS1_NN1_ADDR
argument_list|,
name|NS1_NN2_ADDR
argument_list|)
decl_stmt|;
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"webhdfs://ns1"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|HAUtil
operator|.
name|isLogicalUri
argument_list|(
name|conf
argument_list|,
name|uri
argument_list|)
argument_list|)
expr_stmt|;
name|InetSocketAddress
index|[]
name|addrs
init|=
name|DFSUtil
operator|.
name|resolveWebHdfsUri
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|InetSocketAddress
index|[]
block|{
operator|new
name|InetSocketAddress
argument_list|(
name|NS1_NN1_HOST
argument_list|,
name|DEFAULT_PORT
argument_list|)
block|,
operator|new
name|InetSocketAddress
argument_list|(
name|NS1_NN2_HOST
argument_list|,
name|DEFAULT_PORT
argument_list|)
block|,     }
argument_list|,
name|addrs
argument_list|)
expr_stmt|;
block|}
DECL|method|createWebHDFSHAConfiguration (String logicalHostName, String nnaddr1, String nnaddr2)
specifier|private
specifier|static
name|Configuration
name|createWebHDFSHAConfiguration
parameter_list|(
name|String
name|logicalHostName
parameter_list|,
name|String
name|nnaddr1
parameter_list|,
name|String
name|nnaddr2
parameter_list|)
block|{
name|HdfsConfiguration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMESERVICES
argument_list|,
literal|"ns1"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSUtil
operator|.
name|addKeySuffixes
argument_list|(
name|DFS_HA_NAMENODES_KEY_PREFIX
argument_list|,
literal|"ns1"
argument_list|)
argument_list|,
literal|"nn1,nn2"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSUtil
operator|.
name|addKeySuffixes
argument_list|(
name|DFS_NAMENODE_HTTP_ADDRESS_KEY
argument_list|,
literal|"ns1"
argument_list|,
literal|"nn1"
argument_list|)
argument_list|,
name|nnaddr1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSUtil
operator|.
name|addKeySuffixes
argument_list|(
name|DFS_NAMENODE_HTTP_ADDRESS_KEY
argument_list|,
literal|"ns1"
argument_list|,
literal|"nn2"
argument_list|)
argument_list|,
name|nnaddr2
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_CLIENT_FAILOVER_PROXY_PROVIDER_KEY_PREFIX
operator|+
literal|"."
operator|+
name|logicalHostName
argument_list|,
name|ConfiguredFailoverProxyProvider
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
annotation|@
name|Test
DECL|method|testSubstituteForWildcardAddress ()
specifier|public
name|void
name|testSubstituteForWildcardAddress
parameter_list|()
throws|throws
name|IOException
block|{
name|assertEquals
argument_list|(
literal|"foo:12345"
argument_list|,
name|DFSUtil
operator|.
name|substituteForWildcardAddress
argument_list|(
literal|"0.0.0.0:12345"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"127.0.0.1:12345"
argument_list|,
name|DFSUtil
operator|.
name|substituteForWildcardAddress
argument_list|(
literal|"127.0.0.1:12345"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetNNUris ()
specifier|public
name|void
name|testGetNNUris
parameter_list|()
throws|throws
name|Exception
block|{
name|HdfsConfiguration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
specifier|final
name|String
name|NS1_NN1_ADDR
init|=
literal|"ns1-nn1.example.com:8020"
decl_stmt|;
specifier|final
name|String
name|NS1_NN2_ADDR
init|=
literal|"ns1-nn2.example.com:8020"
decl_stmt|;
specifier|final
name|String
name|NS2_NN_ADDR
init|=
literal|"ns2-nn.example.com:8020"
decl_stmt|;
specifier|final
name|String
name|NN1_ADDR
init|=
literal|"nn.example.com:8020"
decl_stmt|;
specifier|final
name|String
name|NN1_SRVC_ADDR
init|=
literal|"nn.example.com:8021"
decl_stmt|;
specifier|final
name|String
name|NN2_ADDR
init|=
literal|"nn2.example.com:8020"
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMESERVICES
argument_list|,
literal|"ns1,ns2"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSUtil
operator|.
name|addKeySuffixes
argument_list|(
name|DFS_HA_NAMENODES_KEY_PREFIX
argument_list|,
literal|"ns1"
argument_list|)
argument_list|,
literal|"nn1,nn2"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSUtil
operator|.
name|addKeySuffixes
argument_list|(
name|DFS_NAMENODE_RPC_ADDRESS_KEY
argument_list|,
literal|"ns1"
argument_list|,
literal|"nn1"
argument_list|)
argument_list|,
name|NS1_NN1_ADDR
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSUtil
operator|.
name|addKeySuffixes
argument_list|(
name|DFS_NAMENODE_RPC_ADDRESS_KEY
argument_list|,
literal|"ns1"
argument_list|,
literal|"nn2"
argument_list|)
argument_list|,
name|NS1_NN2_ADDR
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSUtil
operator|.
name|addKeySuffixes
argument_list|(
name|DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY
argument_list|,
literal|"ns2"
argument_list|)
argument_list|,
name|NS2_NN_ADDR
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMENODE_RPC_ADDRESS_KEY
argument_list|,
literal|"hdfs://"
operator|+
name|NN1_ADDR
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|FS_DEFAULT_NAME_KEY
argument_list|,
literal|"hdfs://"
operator|+
name|NN2_ADDR
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|URI
argument_list|>
name|uris
init|=
name|DFSUtil
operator|.
name|getNameServiceUris
argument_list|(
name|conf
argument_list|,
name|DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY
argument_list|,
name|DFS_NAMENODE_RPC_ADDRESS_KEY
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|uris
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|uris
operator|.
name|contains
argument_list|(
operator|new
name|URI
argument_list|(
literal|"hdfs://ns1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|uris
operator|.
name|contains
argument_list|(
operator|new
name|URI
argument_list|(
literal|"hdfs://"
operator|+
name|NS2_NN_ADDR
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|uris
operator|.
name|contains
argument_list|(
operator|new
name|URI
argument_list|(
literal|"hdfs://"
operator|+
name|NN1_ADDR
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|uris
operator|.
name|contains
argument_list|(
operator|new
name|URI
argument_list|(
literal|"hdfs://"
operator|+
name|NN2_ADDR
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure that non-HDFS URIs in fs.defaultFS don't get included.
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|FS_DEFAULT_NAME_KEY
argument_list|,
literal|"viewfs://vfs-name.example.com"
argument_list|)
expr_stmt|;
name|uris
operator|=
name|DFSUtil
operator|.
name|getNameServiceUris
argument_list|(
name|conf
argument_list|,
name|DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY
argument_list|,
name|DFS_NAMENODE_RPC_ADDRESS_KEY
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|uris
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|uris
operator|.
name|contains
argument_list|(
operator|new
name|URI
argument_list|(
literal|"hdfs://ns1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|uris
operator|.
name|contains
argument_list|(
operator|new
name|URI
argument_list|(
literal|"hdfs://"
operator|+
name|NS2_NN_ADDR
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|uris
operator|.
name|contains
argument_list|(
operator|new
name|URI
argument_list|(
literal|"hdfs://"
operator|+
name|NN1_ADDR
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure that an HA URI being the default URI doesn't result in multiple
comment|// entries being returned.
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|FS_DEFAULT_NAME_KEY
argument_list|,
literal|"hdfs://ns1"
argument_list|)
expr_stmt|;
name|uris
operator|=
name|DFSUtil
operator|.
name|getNameServiceUris
argument_list|(
name|conf
argument_list|,
name|DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY
argument_list|,
name|DFS_NAMENODE_RPC_ADDRESS_KEY
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|uris
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|uris
operator|.
name|contains
argument_list|(
operator|new
name|URI
argument_list|(
literal|"hdfs://ns1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|uris
operator|.
name|contains
argument_list|(
operator|new
name|URI
argument_list|(
literal|"hdfs://"
operator|+
name|NS2_NN_ADDR
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|uris
operator|.
name|contains
argument_list|(
operator|new
name|URI
argument_list|(
literal|"hdfs://"
operator|+
name|NN1_ADDR
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure that when a service RPC address is used that is distinct from
comment|// the client RPC address, and that client RPC address is also used as the
comment|// default URI, that the client URI does not end up in the set of URIs
comment|// returned.
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|FS_DEFAULT_NAME_KEY
argument_list|,
literal|"hdfs://"
operator|+
name|NN1_ADDR
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMENODE_RPC_ADDRESS_KEY
argument_list|,
name|NN1_ADDR
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY
argument_list|,
name|NN1_SRVC_ADDR
argument_list|)
expr_stmt|;
name|uris
operator|=
name|DFSUtil
operator|.
name|getNameServiceUris
argument_list|(
name|conf
argument_list|,
name|DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY
argument_list|,
name|DFS_NAMENODE_RPC_ADDRESS_KEY
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|uris
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|uris
operator|.
name|contains
argument_list|(
operator|new
name|URI
argument_list|(
literal|"hdfs://"
operator|+
name|NN1_SRVC_ADDR
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|15000
argument_list|)
DECL|method|testLocalhostReverseLookup ()
specifier|public
name|void
name|testLocalhostReverseLookup
parameter_list|()
block|{
comment|// 127.0.0.1 -> localhost reverse resolution does not happen on Windows.
name|Assume
operator|.
name|assumeTrue
argument_list|(
operator|!
name|Shell
operator|.
name|WINDOWS
argument_list|)
expr_stmt|;
comment|// Make sure when config FS_DEFAULT_NAME_KEY using IP address,
comment|// it will automatically convert it to hostname
name|HdfsConfiguration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|FS_DEFAULT_NAME_KEY
argument_list|,
literal|"hdfs://127.0.0.1:8020"
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|URI
argument_list|>
name|uris
init|=
name|DFSUtil
operator|.
name|getNameServiceUris
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|uris
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|URI
name|uri
range|:
name|uris
control|)
block|{
name|assertThat
argument_list|(
name|uri
operator|.
name|getHost
argument_list|()
argument_list|,
name|not
argument_list|(
literal|"127.0.0.1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|15000
argument_list|)
DECL|method|testIsValidName ()
specifier|public
name|void
name|testIsValidName
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|DFSUtil
operator|.
name|isValidName
argument_list|(
literal|"/foo/../bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|DFSUtil
operator|.
name|isValidName
argument_list|(
literal|"/foo/./bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|DFSUtil
operator|.
name|isValidName
argument_list|(
literal|"/foo//bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|DFSUtil
operator|.
name|isValidName
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|DFSUtil
operator|.
name|isValidName
argument_list|(
literal|"/bar/"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|DFSUtil
operator|.
name|isValidName
argument_list|(
literal|"/foo/:/bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|DFSUtil
operator|.
name|isValidName
argument_list|(
literal|"/foo:bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testGetSpnegoKeytabKey ()
specifier|public
name|void
name|testGetSpnegoKeytabKey
parameter_list|()
block|{
name|HdfsConfiguration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|String
name|defaultKey
init|=
literal|"default.spengo.key"
decl_stmt|;
name|conf
operator|.
name|unset
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_WEB_AUTHENTICATION_KERBEROS_KEYTAB_KEY
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Test spnego key in config is null"
argument_list|,
name|defaultKey
argument_list|,
name|DFSUtil
operator|.
name|getSpnegoKeytabKey
argument_list|(
name|conf
argument_list|,
name|defaultKey
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_WEB_AUTHENTICATION_KERBEROS_KEYTAB_KEY
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Test spnego key is empty"
argument_list|,
name|defaultKey
argument_list|,
name|DFSUtil
operator|.
name|getSpnegoKeytabKey
argument_list|(
name|conf
argument_list|,
name|defaultKey
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|spengoKey
init|=
literal|"spengo.key"
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_WEB_AUTHENTICATION_KERBEROS_KEYTAB_KEY
argument_list|,
name|spengoKey
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Test spnego key is NOT null"
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_WEB_AUTHENTICATION_KERBEROS_KEYTAB_KEY
argument_list|,
name|DFSUtil
operator|.
name|getSpnegoKeytabKey
argument_list|(
name|conf
argument_list|,
name|defaultKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|)
DECL|method|testDurationToString ()
specifier|public
name|void
name|testDurationToString
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"000:00:00:00"
argument_list|,
name|DFSUtil
operator|.
name|durationToString
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|DFSUtil
operator|.
name|durationToString
argument_list|(
operator|-
literal|199
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Invalid negative duration"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"001:01:01:01"
argument_list|,
name|DFSUtil
operator|.
name|durationToString
argument_list|(
operator|(
operator|(
literal|24
operator|*
literal|60
operator|*
literal|60
operator|)
operator|+
operator|(
literal|60
operator|*
literal|60
operator|)
operator|+
operator|(
literal|60
operator|)
operator|+
literal|1
operator|)
operator|*
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"000:23:59:59"
argument_list|,
name|DFSUtil
operator|.
name|durationToString
argument_list|(
operator|(
operator|(
literal|23
operator|*
literal|60
operator|*
literal|60
operator|)
operator|+
operator|(
literal|59
operator|*
literal|60
operator|)
operator|+
operator|(
literal|59
operator|)
operator|)
operator|*
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testRelativeTimeConversion ()
specifier|public
name|void
name|testRelativeTimeConversion
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|DFSUtil
operator|.
name|parseRelativeTime
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"too short"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|DFSUtil
operator|.
name|parseRelativeTime
argument_list|(
literal|"1z"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"unknown time unit"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|DFSUtil
operator|.
name|parseRelativeTime
argument_list|(
literal|"yyz"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"is not a number"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|61
operator|*
literal|1000
argument_list|,
name|DFSUtil
operator|.
name|parseRelativeTime
argument_list|(
literal|"61s"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|61
operator|*
literal|60
operator|*
literal|1000
argument_list|,
name|DFSUtil
operator|.
name|parseRelativeTime
argument_list|(
literal|"61m"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|DFSUtil
operator|.
name|parseRelativeTime
argument_list|(
literal|"0s"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|25
operator|*
literal|60
operator|*
literal|60
operator|*
literal|1000
argument_list|,
name|DFSUtil
operator|.
name|parseRelativeTime
argument_list|(
literal|"25h"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
operator|*
literal|24
operator|*
literal|60
operator|*
literal|60
operator|*
literal|1000
argument_list|,
name|DFSUtil
operator|.
name|parseRelativeTime
argument_list|(
literal|"4d"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|999
operator|*
literal|24
operator|*
literal|60
operator|*
literal|60
operator|*
literal|1000
argument_list|,
name|DFSUtil
operator|.
name|parseRelativeTime
argument_list|(
literal|"999d"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

