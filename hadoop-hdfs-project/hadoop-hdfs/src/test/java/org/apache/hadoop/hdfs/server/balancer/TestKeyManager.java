begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.balancer
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|balancer
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|BlockTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|DataEncryptionKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamenodeProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|Whitebox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|FakeTimer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * Test KeyManager class.  */
end_comment

begin_class
DECL|class|TestKeyManager
specifier|public
class|class
name|TestKeyManager
block|{
annotation|@
name|Rule
DECL|field|globalTimeout
specifier|public
name|Timeout
name|globalTimeout
init|=
operator|new
name|Timeout
argument_list|(
literal|120000
argument_list|)
decl_stmt|;
annotation|@
name|Test
DECL|method|testNewDataEncryptionKey ()
specifier|public
name|void
name|testNewDataEncryptionKey
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
comment|// Enable data transport encryption and access token
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_ENCRYPT_DATA_TRANSFER_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_ACCESS_TOKEN_ENABLE_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|long
name|keyUpdateInterval
init|=
literal|2
operator|*
literal|1000
decl_stmt|;
specifier|final
name|long
name|tokenLifeTime
init|=
name|keyUpdateInterval
decl_stmt|;
specifier|final
name|String
name|blockPoolId
init|=
literal|"bp-foo"
decl_stmt|;
name|FakeTimer
name|fakeTimer
init|=
operator|new
name|FakeTimer
argument_list|()
decl_stmt|;
name|BlockTokenSecretManager
name|btsm
init|=
operator|new
name|BlockTokenSecretManager
argument_list|(
name|keyUpdateInterval
argument_list|,
name|tokenLifeTime
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|blockPoolId
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Whitebox
operator|.
name|setInternalState
argument_list|(
name|btsm
argument_list|,
literal|"timer"
argument_list|,
name|fakeTimer
argument_list|)
expr_stmt|;
comment|// When KeyManager asks for block keys, return them from btsm directly
name|NamenodeProtocol
name|namenode
init|=
name|mock
argument_list|(
name|NamenodeProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|namenode
operator|.
name|getBlockKeys
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|btsm
operator|.
name|exportKeys
argument_list|()
argument_list|)
expr_stmt|;
comment|// Instantiate a KeyManager instance and get data encryption key.
name|KeyManager
name|keyManager
init|=
operator|new
name|KeyManager
argument_list|(
name|blockPoolId
argument_list|,
name|namenode
argument_list|,
literal|true
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Whitebox
operator|.
name|setInternalState
argument_list|(
name|keyManager
argument_list|,
literal|"timer"
argument_list|,
name|fakeTimer
argument_list|)
expr_stmt|;
name|Whitebox
operator|.
name|setInternalState
argument_list|(
name|Whitebox
operator|.
name|getInternalState
argument_list|(
name|keyManager
argument_list|,
literal|"blockTokenSecretManager"
argument_list|)
argument_list|,
literal|"timer"
argument_list|,
name|fakeTimer
argument_list|)
expr_stmt|;
specifier|final
name|DataEncryptionKey
name|dek
init|=
name|keyManager
operator|.
name|newDataEncryptionKey
argument_list|()
decl_stmt|;
specifier|final
name|long
name|remainingTime
init|=
name|dek
operator|.
name|expiryDate
operator|-
name|fakeTimer
operator|.
name|now
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"KeyManager dataEncryptionKey should expire in 2 seconds"
argument_list|,
name|keyUpdateInterval
argument_list|,
name|remainingTime
argument_list|)
expr_stmt|;
comment|// advance the timer to expire the block key and data encryption key
name|fakeTimer
operator|.
name|advance
argument_list|(
name|keyUpdateInterval
operator|+
literal|1
argument_list|)
expr_stmt|;
comment|// After the initial data encryption key expires, KeyManager should
comment|// regenerate a valid data encryption key using the current block key.
specifier|final
name|DataEncryptionKey
name|dekAfterExpiration
init|=
name|keyManager
operator|.
name|newDataEncryptionKey
argument_list|()
decl_stmt|;
name|assertNotEquals
argument_list|(
literal|"KeyManager should generate a new data encryption key"
argument_list|,
name|dek
argument_list|,
name|dekAfterExpiration
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"KeyManager has an expired DataEncryptionKey!"
argument_list|,
name|dekAfterExpiration
operator|.
name|expiryDate
operator|>
name|fakeTimer
operator|.
name|now
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

