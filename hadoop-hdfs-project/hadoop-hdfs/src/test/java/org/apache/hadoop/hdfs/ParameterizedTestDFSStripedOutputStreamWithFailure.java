begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeTrue
import|;
end_import

begin_comment
comment|/**  * Test striped file write operation with data node failures with parameterized  * test cases.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
DECL|class|ParameterizedTestDFSStripedOutputStreamWithFailure
specifier|public
class|class
name|ParameterizedTestDFSStripedOutputStreamWithFailure
extends|extends
name|TestDFSStripedOutputStreamWithFailureBase
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ParameterizedTestDFSStripedOutputStreamWithFailure
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|base
specifier|private
name|int
name|base
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameters
DECL|method|data ()
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|data
parameter_list|()
block|{
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|parameters
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|parameters
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|RANDOM
operator|.
name|nextInt
argument_list|(
literal|220
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|parameters
return|;
block|}
DECL|method|ParameterizedTestDFSStripedOutputStreamWithFailure (int base)
specifier|public
name|ParameterizedTestDFSStripedOutputStreamWithFailure
parameter_list|(
name|int
name|base
parameter_list|)
block|{
name|this
operator|.
name|base
operator|=
name|base
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|240000
argument_list|)
DECL|method|runTestWithSingleFailure ()
specifier|public
name|void
name|runTestWithSingleFailure
parameter_list|()
block|{
name|assumeTrue
argument_list|(
name|base
operator|>=
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|base
operator|>
name|lengths
operator|.
name|size
argument_list|()
condition|)
block|{
name|base
operator|=
name|base
operator|%
name|lengths
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
specifier|final
name|int
name|i
init|=
name|base
decl_stmt|;
specifier|final
name|Integer
name|length
init|=
name|getLength
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assumeTrue
argument_list|(
literal|"Skip test "
operator|+
name|i
operator|+
literal|" since length=null."
argument_list|,
name|length
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assumeTrue
argument_list|(
literal|"Test "
operator|+
name|i
operator|+
literal|", length="
operator|+
name|length
operator|+
literal|", is not chosen to run."
argument_list|,
name|RANDOM
operator|.
name|nextInt
argument_list|(
literal|16
argument_list|)
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Run test "
operator|+
name|i
operator|+
literal|", length="
operator|+
name|length
argument_list|)
expr_stmt|;
name|runTest
argument_list|(
name|length
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

