begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|XAttr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_class
DECL|class|TestINodeAttributeProvider
specifier|public
class|class
name|TestINodeAttributeProvider
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestINodeAttributeProvider
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|miniDFS
specifier|private
name|MiniDFSCluster
name|miniDFS
decl_stmt|;
DECL|field|CALLED
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|CALLED
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|HDFS_PERMISSION
specifier|private
specifier|static
specifier|final
name|short
name|HDFS_PERMISSION
init|=
literal|0777
decl_stmt|;
DECL|field|PROVIDER_PERMISSION
specifier|private
specifier|static
specifier|final
name|short
name|PROVIDER_PERMISSION
init|=
literal|0770
decl_stmt|;
DECL|class|MyAuthorizationProvider
specifier|public
specifier|static
class|class
name|MyAuthorizationProvider
extends|extends
name|INodeAttributeProvider
block|{
DECL|class|MyAccessControlEnforcer
specifier|public
specifier|static
class|class
name|MyAccessControlEnforcer
implements|implements
name|AccessControlEnforcer
block|{
DECL|field|ace
name|AccessControlEnforcer
name|ace
decl_stmt|;
DECL|method|MyAccessControlEnforcer (AccessControlEnforcer defaultEnforcer)
specifier|public
name|MyAccessControlEnforcer
parameter_list|(
name|AccessControlEnforcer
name|defaultEnforcer
parameter_list|)
block|{
name|this
operator|.
name|ace
operator|=
name|defaultEnforcer
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|checkPermission (String fsOwner, String supergroup, UserGroupInformation ugi, INodeAttributes[] inodeAttrs, INode[] inodes, byte[][] pathByNameArr, int snapshotId, String path, int ancestorIndex, boolean doCheckOwner, FsAction ancestorAccess, FsAction parentAccess, FsAction access, FsAction subAccess, boolean ignoreEmptyDir)
specifier|public
name|void
name|checkPermission
parameter_list|(
name|String
name|fsOwner
parameter_list|,
name|String
name|supergroup
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|,
name|INodeAttributes
index|[]
name|inodeAttrs
parameter_list|,
name|INode
index|[]
name|inodes
parameter_list|,
name|byte
index|[]
index|[]
name|pathByNameArr
parameter_list|,
name|int
name|snapshotId
parameter_list|,
name|String
name|path
parameter_list|,
name|int
name|ancestorIndex
parameter_list|,
name|boolean
name|doCheckOwner
parameter_list|,
name|FsAction
name|ancestorAccess
parameter_list|,
name|FsAction
name|parentAccess
parameter_list|,
name|FsAction
name|access
parameter_list|,
name|FsAction
name|subAccess
parameter_list|,
name|boolean
name|ignoreEmptyDir
parameter_list|)
throws|throws
name|AccessControlException
block|{
if|if
condition|(
name|ancestorIndex
operator|>
literal|1
operator|&&
name|inodes
index|[
literal|1
index|]
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"user"
argument_list|)
operator|&&
name|inodes
index|[
literal|2
index|]
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"acl"
argument_list|)
condition|)
block|{
name|this
operator|.
name|ace
operator|.
name|checkPermission
argument_list|(
name|fsOwner
argument_list|,
name|supergroup
argument_list|,
name|ugi
argument_list|,
name|inodeAttrs
argument_list|,
name|inodes
argument_list|,
name|pathByNameArr
argument_list|,
name|snapshotId
argument_list|,
name|path
argument_list|,
name|ancestorIndex
argument_list|,
name|doCheckOwner
argument_list|,
name|ancestorAccess
argument_list|,
name|parentAccess
argument_list|,
name|access
argument_list|,
name|subAccess
argument_list|,
name|ignoreEmptyDir
argument_list|)
expr_stmt|;
block|}
name|CALLED
operator|.
name|add
argument_list|(
literal|"checkPermission|"
operator|+
name|ancestorAccess
operator|+
literal|"|"
operator|+
name|parentAccess
operator|+
literal|"|"
operator|+
name|access
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
block|{
name|CALLED
operator|.
name|add
argument_list|(
literal|"start"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
name|CALLED
operator|.
name|add
argument_list|(
literal|"stop"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getAttributes (String[] pathElements, final INodeAttributes inode)
specifier|public
name|INodeAttributes
name|getAttributes
parameter_list|(
name|String
index|[]
name|pathElements
parameter_list|,
specifier|final
name|INodeAttributes
name|inode
parameter_list|)
block|{
name|CALLED
operator|.
name|add
argument_list|(
literal|"getAttributes"
argument_list|)
expr_stmt|;
specifier|final
name|boolean
name|useDefault
init|=
name|useDefault
argument_list|(
name|pathElements
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|useNullAcl
init|=
name|useNullAclFeature
argument_list|(
name|pathElements
argument_list|)
decl_stmt|;
return|return
operator|new
name|INodeAttributes
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isDirectory
parameter_list|()
block|{
return|return
name|inode
operator|.
name|isDirectory
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getLocalNameBytes
parameter_list|()
block|{
return|return
name|inode
operator|.
name|getLocalNameBytes
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getUserName
parameter_list|()
block|{
return|return
operator|(
name|useDefault
operator|)
condition|?
name|inode
operator|.
name|getUserName
argument_list|()
else|:
literal|"foo"
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getGroupName
parameter_list|()
block|{
return|return
operator|(
name|useDefault
operator|)
condition|?
name|inode
operator|.
name|getGroupName
argument_list|()
else|:
literal|"bar"
return|;
block|}
annotation|@
name|Override
specifier|public
name|FsPermission
name|getFsPermission
parameter_list|()
block|{
return|return
operator|(
name|useDefault
operator|)
condition|?
name|inode
operator|.
name|getFsPermission
argument_list|()
else|:
operator|new
name|FsPermission
argument_list|(
name|getFsPermissionShort
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|short
name|getFsPermissionShort
parameter_list|()
block|{
return|return
operator|(
name|useDefault
operator|)
condition|?
name|inode
operator|.
name|getFsPermissionShort
argument_list|()
else|:
operator|(
name|short
operator|)
name|getPermissionLong
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getPermissionLong
parameter_list|()
block|{
return|return
operator|(
name|useDefault
operator|)
condition|?
name|inode
operator|.
name|getPermissionLong
argument_list|()
else|:
operator|(
name|long
operator|)
name|PROVIDER_PERMISSION
return|;
block|}
annotation|@
name|Override
specifier|public
name|AclFeature
name|getAclFeature
parameter_list|()
block|{
name|AclFeature
name|f
decl_stmt|;
if|if
condition|(
name|useNullAcl
condition|)
block|{
name|int
index|[]
name|entries
init|=
operator|new
name|int
index|[
literal|0
index|]
decl_stmt|;
name|f
operator|=
operator|new
name|AclFeature
argument_list|(
name|entries
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|useDefault
condition|)
block|{
name|f
operator|=
name|inode
operator|.
name|getAclFeature
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|AclEntry
name|acl
init|=
operator|new
name|AclEntry
operator|.
name|Builder
argument_list|()
operator|.
name|setType
argument_list|(
name|AclEntryType
operator|.
name|GROUP
argument_list|)
operator|.
name|setPermission
argument_list|(
name|FsAction
operator|.
name|ALL
argument_list|)
operator|.
name|setName
argument_list|(
literal|"xxx"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|f
operator|=
operator|new
name|AclFeature
argument_list|(
name|AclEntryStatusFormat
operator|.
name|toInt
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|acl
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|f
return|;
block|}
annotation|@
name|Override
specifier|public
name|XAttrFeature
name|getXAttrFeature
parameter_list|()
block|{
name|XAttrFeature
name|x
decl_stmt|;
if|if
condition|(
name|useDefault
condition|)
block|{
name|x
operator|=
name|inode
operator|.
name|getXAttrFeature
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|x
operator|=
operator|new
name|XAttrFeature
argument_list|(
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
operator|new
name|XAttr
operator|.
name|Builder
argument_list|()
operator|.
name|setName
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setValue
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|2
block|}
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|x
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getModificationTime
parameter_list|()
block|{
return|return
operator|(
name|useDefault
operator|)
condition|?
name|inode
operator|.
name|getModificationTime
argument_list|()
else|:
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getAccessTime
parameter_list|()
block|{
return|return
operator|(
name|useDefault
operator|)
condition|?
name|inode
operator|.
name|getAccessTime
argument_list|()
else|:
literal|0
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|getExternalAccessControlEnforcer ( AccessControlEnforcer defaultEnforcer)
specifier|public
name|AccessControlEnforcer
name|getExternalAccessControlEnforcer
parameter_list|(
name|AccessControlEnforcer
name|defaultEnforcer
parameter_list|)
block|{
return|return
operator|new
name|MyAccessControlEnforcer
argument_list|(
name|defaultEnforcer
argument_list|)
return|;
block|}
DECL|method|useDefault (String[] pathElements)
specifier|private
name|boolean
name|useDefault
parameter_list|(
name|String
index|[]
name|pathElements
parameter_list|)
block|{
return|return
operator|(
name|pathElements
operator|.
name|length
operator|<
literal|2
operator|)
operator|||
operator|!
operator|(
name|pathElements
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"user"
argument_list|)
operator|&&
name|pathElements
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
literal|"authz"
argument_list|)
operator|)
return|;
block|}
DECL|method|useNullAclFeature (String[] pathElements)
specifier|private
name|boolean
name|useNullAclFeature
parameter_list|(
name|String
index|[]
name|pathElements
parameter_list|)
block|{
return|return
operator|(
name|pathElements
operator|.
name|length
operator|>
literal|2
operator|)
operator|&&
name|pathElements
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
literal|"user"
argument_list|)
operator|&&
name|pathElements
index|[
literal|2
index|]
operator|.
name|equals
argument_list|(
literal|"acl"
argument_list|)
return|;
block|}
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
name|CALLED
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_INODE_ATTRIBUTES_PROVIDER_KEY
argument_list|,
name|MyAuthorizationProvider
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_ACLS_ENABLED_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_INODE_ATTRIBUTES_PROVIDER_BYPASS_USERS_KEY
argument_list|,
literal|" u2,, ,u3, "
argument_list|)
expr_stmt|;
name|EditLogFileOutputStream
operator|.
name|setShouldSkipFsyncForTesting
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|miniDFS
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|cleanUp ()
specifier|public
name|void
name|cleanUp
parameter_list|()
throws|throws
name|IOException
block|{
name|CALLED
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|miniDFS
operator|!=
literal|null
condition|)
block|{
name|miniDFS
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|miniDFS
operator|=
literal|null
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|CALLED
operator|.
name|contains
argument_list|(
literal|"stop"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDelegationToProvider ()
specifier|public
name|void
name|testDelegationToProvider
parameter_list|()
throws|throws
name|Exception
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|CALLED
operator|.
name|contains
argument_list|(
literal|"start"
argument_list|)
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|miniDFS
operator|.
name|getConfiguration
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|tmpPath
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|fooPath
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp/foo"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|tmpPath
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|tmpPath
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|HDFS_PERMISSION
argument_list|)
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"u1"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"g1"
block|}
argument_list|)
decl_stmt|;
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|miniDFS
operator|.
name|getConfiguration
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|CALLED
operator|.
name|clear
argument_list|()
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|fooPath
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|CALLED
operator|.
name|contains
argument_list|(
literal|"getAttributes"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|CALLED
operator|.
name|contains
argument_list|(
literal|"checkPermission|null|null|null"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|CALLED
operator|.
name|contains
argument_list|(
literal|"checkPermission|WRITE|null|null"
argument_list|)
argument_list|)
expr_stmt|;
name|CALLED
operator|.
name|clear
argument_list|()
expr_stmt|;
name|fs
operator|.
name|listStatus
argument_list|(
name|fooPath
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|CALLED
operator|.
name|contains
argument_list|(
literal|"getAttributes"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|CALLED
operator|.
name|contains
argument_list|(
literal|"checkPermission|null|null|READ_EXECUTE"
argument_list|)
argument_list|)
expr_stmt|;
name|CALLED
operator|.
name|clear
argument_list|()
expr_stmt|;
name|fs
operator|.
name|getAclStatus
argument_list|(
name|fooPath
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|CALLED
operator|.
name|contains
argument_list|(
literal|"getAttributes"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|CALLED
operator|.
name|contains
argument_list|(
literal|"checkPermission|null|null|null"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|class|AssertHelper
specifier|private
class|class
name|AssertHelper
block|{
DECL|field|bypass
specifier|private
name|boolean
name|bypass
init|=
literal|true
decl_stmt|;
DECL|method|AssertHelper (boolean bp)
name|AssertHelper
parameter_list|(
name|boolean
name|bp
parameter_list|)
block|{
name|bypass
operator|=
name|bp
expr_stmt|;
block|}
DECL|method|doAssert (boolean x)
specifier|public
name|void
name|doAssert
parameter_list|(
name|boolean
name|x
parameter_list|)
block|{
if|if
condition|(
name|bypass
condition|)
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testBypassProviderHelper (final String[] users, final short expectedPermission, final boolean bypass)
specifier|private
name|void
name|testBypassProviderHelper
parameter_list|(
specifier|final
name|String
index|[]
name|users
parameter_list|,
specifier|final
name|short
name|expectedPermission
parameter_list|,
specifier|final
name|boolean
name|bypass
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|AssertHelper
name|asserter
init|=
operator|new
name|AssertHelper
argument_list|(
name|bypass
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|CALLED
operator|.
name|contains
argument_list|(
literal|"start"
argument_list|)
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|miniDFS
operator|.
name|getConfiguration
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|userPath
init|=
operator|new
name|Path
argument_list|(
literal|"/user"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|authz
init|=
operator|new
name|Path
argument_list|(
literal|"/user/authz"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|authzChild
init|=
operator|new
name|Path
argument_list|(
literal|"/user/authz/child2"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|userPath
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|userPath
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|HDFS_PERMISSION
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|authz
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|authz
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|HDFS_PERMISSION
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|authzChild
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|authzChild
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|HDFS_PERMISSION
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|user
range|:
name|users
control|)
block|{
name|UserGroupInformation
name|ugiBypass
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
name|user
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"g1"
block|}
argument_list|)
decl_stmt|;
name|ugiBypass
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|miniDFS
operator|.
name|getConfiguration
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedPermission
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|authzChild
argument_list|)
operator|.
name|getPermission
argument_list|()
operator|.
name|toShort
argument_list|()
argument_list|)
expr_stmt|;
name|asserter
operator|.
name|doAssert
argument_list|(
name|CALLED
operator|.
name|contains
argument_list|(
literal|"getAttributes"
argument_list|)
argument_list|)
expr_stmt|;
name|asserter
operator|.
name|doAssert
argument_list|(
name|CALLED
operator|.
name|contains
argument_list|(
literal|"checkPermission|null|null|null"
argument_list|)
argument_list|)
expr_stmt|;
name|CALLED
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedPermission
argument_list|,
name|fs
operator|.
name|listStatus
argument_list|(
name|userPath
argument_list|)
index|[
literal|0
index|]
operator|.
name|getPermission
argument_list|()
operator|.
name|toShort
argument_list|()
argument_list|)
expr_stmt|;
name|asserter
operator|.
name|doAssert
argument_list|(
name|CALLED
operator|.
name|contains
argument_list|(
literal|"getAttributes"
argument_list|)
argument_list|)
expr_stmt|;
name|asserter
operator|.
name|doAssert
argument_list|(
name|CALLED
operator|.
name|contains
argument_list|(
literal|"checkPermission|null|null|READ_EXECUTE"
argument_list|)
argument_list|)
expr_stmt|;
name|CALLED
operator|.
name|clear
argument_list|()
expr_stmt|;
name|fs
operator|.
name|getAclStatus
argument_list|(
name|authzChild
argument_list|)
expr_stmt|;
name|asserter
operator|.
name|doAssert
argument_list|(
name|CALLED
operator|.
name|contains
argument_list|(
literal|"getAttributes"
argument_list|)
argument_list|)
expr_stmt|;
name|asserter
operator|.
name|doAssert
argument_list|(
name|CALLED
operator|.
name|contains
argument_list|(
literal|"checkPermission|null|null|null"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testAuthzDelegationToProvider ()
specifier|public
name|void
name|testAuthzDelegationToProvider
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Test not bypassing provider"
argument_list|)
expr_stmt|;
name|String
index|[]
name|users
init|=
block|{
literal|"u1"
block|}
decl_stmt|;
name|testBypassProviderHelper
argument_list|(
name|users
argument_list|,
name|PROVIDER_PERMISSION
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAuthzBypassingProvider ()
specifier|public
name|void
name|testAuthzBypassingProvider
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Test bypassing provider"
argument_list|)
expr_stmt|;
name|String
index|[]
name|users
init|=
block|{
literal|"u2"
block|,
literal|"u3"
block|}
decl_stmt|;
name|testBypassProviderHelper
argument_list|(
name|users
argument_list|,
name|HDFS_PERMISSION
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyFileStatus (UserGroupInformation ugi)
specifier|private
name|void
name|verifyFileStatus
parameter_list|(
name|UserGroupInformation
name|ugi
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|miniDFS
operator|.
name|getConfiguration
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|FileStatus
name|status
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Path '/' is owned by: "
operator|+
name|status
operator|.
name|getOwner
argument_list|()
operator|+
literal|":"
operator|+
name|status
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|userDir
init|=
operator|new
name|Path
argument_list|(
literal|"/user/"
operator|+
name|ugi
operator|.
name|getShortUserName
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|userDir
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|userDir
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ugi
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|status
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"supergroup"
argument_list|,
name|status
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0755
argument_list|)
argument_list|,
name|status
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|authzDir
init|=
operator|new
name|Path
argument_list|(
literal|"/user/authz"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|authzDir
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|authzDir
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|status
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|status
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0770
argument_list|)
argument_list|,
name|status
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
name|AclStatus
name|aclStatus
init|=
name|fs
operator|.
name|getAclStatus
argument_list|(
name|authzDir
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|aclStatus
operator|.
name|getEntries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|AclEntryType
operator|.
name|GROUP
argument_list|,
name|aclStatus
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"xxx"
argument_list|,
name|aclStatus
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|FsAction
operator|.
name|ALL
argument_list|,
name|aclStatus
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|xAttrs
init|=
name|fs
operator|.
name|getXAttrs
argument_list|(
name|authzDir
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|xAttrs
operator|.
name|containsKey
argument_list|(
literal|"user.test"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|xAttrs
operator|.
name|get
argument_list|(
literal|"user.test"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**    * With the custom provider configured, verify file status attributes.    * A superuser can bypass permission check while resolving paths. So,    * verify file status for both superuser and non-superuser.    */
annotation|@
name|Test
DECL|method|testCustomProvider ()
specifier|public
name|void
name|testCustomProvider
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|UserGroupInformation
index|[]
name|users
init|=
operator|new
name|UserGroupInformation
index|[]
block|{
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"supergroup"
block|}
argument_list|)
block|,
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"normaluser"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"normalusergroup"
block|}
argument_list|)
block|,     }
decl_stmt|;
for|for
control|(
specifier|final
name|UserGroupInformation
name|user
range|:
name|users
control|)
block|{
name|user
operator|.
name|doAs
argument_list|(
call|(
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
call|)
argument_list|()
operator|->
block|{
name|verifyFileStatus
argument_list|(
name|user
argument_list|)
block|;
return|return
literal|null
return|;
block|}
block|)
empty_stmt|;
block|}
block|}
end_class

begin_function
annotation|@
name|Test
DECL|method|testAclFeature ()
specifier|public
name|void
name|testAclFeature
parameter_list|()
throws|throws
name|Exception
block|{
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"testuser"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"testgroup"
block|}
argument_list|)
decl_stmt|;
name|ugi
operator|.
name|doAs
argument_list|(
call|(
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
call|)
argument_list|()
operator|->
block|{
name|FileSystem
name|fs
operator|=
name|miniDFS
operator|.
name|getFileSystem
argument_list|()
block|;
name|Path
name|aclDir
operator|=
operator|new
name|Path
argument_list|(
literal|"/user/acl"
argument_list|)
block|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|aclDir
argument_list|)
block|;
name|Path
name|aclChildDir
operator|=
operator|new
name|Path
argument_list|(
name|aclDir
argument_list|,
literal|"subdir"
argument_list|)
block|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|aclChildDir
argument_list|)
block|;
name|AclStatus
name|aclStatus
operator|=
name|fs
operator|.
name|getAclStatus
argument_list|(
name|aclDir
argument_list|)
block|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|aclStatus
operator|.
name|getEntries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
block|;
return|return
literal|null
return|;
block|}
block|)
function|;
end_function

begin_function
unit|}    @
name|Test
comment|// HDFS-14389 - Ensure getAclStatus returns the owner, group and permissions
comment|// from the Attribute Provider, and not from HDFS.
DECL|method|testGetAclStatusReturnsProviderOwnerPerms ()
specifier|public
name|void
name|testGetAclStatusReturnsProviderOwnerPerms
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|miniDFS
operator|.
name|getConfiguration
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|userPath
init|=
operator|new
name|Path
argument_list|(
literal|"/user"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|authz
init|=
operator|new
name|Path
argument_list|(
literal|"/user/authz"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|authzChild
init|=
operator|new
name|Path
argument_list|(
literal|"/user/authz/child2"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|userPath
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|userPath
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|HDFS_PERMISSION
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|authz
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|authz
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|HDFS_PERMISSION
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|authzChild
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|authzChild
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|HDFS_PERMISSION
argument_list|)
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"u1"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"g1"
block|}
argument_list|)
decl_stmt|;
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|miniDFS
operator|.
name|getConfiguration
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|PROVIDER_PERMISSION
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|authzChild
argument_list|)
operator|.
name|getPermission
argument_list|()
operator|.
name|toShort
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|fs
operator|.
name|getAclStatus
argument_list|(
name|authzChild
argument_list|)
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|fs
operator|.
name|getAclStatus
argument_list|(
name|authzChild
argument_list|)
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|PROVIDER_PERMISSION
argument_list|,
name|fs
operator|.
name|getAclStatus
argument_list|(
name|authzChild
argument_list|)
operator|.
name|getPermission
argument_list|()
operator|.
name|toShort
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
end_function

unit|}
end_unit

