begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|impl
operator|.
name|Log4JLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|RecoveryInProgressException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSNamesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/** Test reading from hdfs while a file is being written. */
end_comment

begin_class
DECL|class|TestReadWhileWriting
specifier|public
class|class
name|TestReadWhileWriting
block|{
block|{
operator|(
operator|(
name|Log4JLogger
operator|)
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FSNamesystem
operator|.
name|class
argument_list|)
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Log4JLogger
operator|)
name|DFSClient
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
DECL|field|DIR
specifier|private
specifier|static
specifier|final
name|String
name|DIR
init|=
literal|"/"
operator|+
name|TestReadWhileWriting
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"/"
decl_stmt|;
DECL|field|BLOCK_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|BLOCK_SIZE
init|=
literal|8192
decl_stmt|;
comment|// soft limit is short and hard limit is long, to test that
comment|// another thread can lease file after soft limit expired
DECL|field|SOFT_LEASE_LIMIT
specifier|private
specifier|static
specifier|final
name|long
name|SOFT_LEASE_LIMIT
init|=
literal|500
decl_stmt|;
DECL|field|HARD_LEASE_LIMIT
specifier|private
specifier|static
specifier|final
name|long
name|HARD_LEASE_LIMIT
init|=
literal|1000
operator|*
literal|600
decl_stmt|;
comment|/** Test reading while writing. */
annotation|@
name|Test
DECL|method|pipeline_02_03 ()
specifier|public
name|void
name|pipeline_02_03
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// create cluster
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|4
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
comment|//change the lease limits.
name|cluster
operator|.
name|setLeasePeriod
argument_list|(
name|SOFT_LEASE_LIMIT
argument_list|,
name|HARD_LEASE_LIMIT
argument_list|)
expr_stmt|;
comment|//wait for the cluster
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|DIR
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|half
init|=
name|BLOCK_SIZE
operator|/
literal|2
decl_stmt|;
comment|//a. On Machine M1, Create file. Write half block of data.
comment|//   Invoke DFSOutputStream.hflush() on the dfs file handle.
comment|//   Do not close file yet.
block|{
specifier|final
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|p
argument_list|,
literal|true
argument_list|,
name|fs
operator|.
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IO_FILE_BUFFER_SIZE_KEY
argument_list|,
literal|4096
argument_list|)
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
name|BLOCK_SIZE
argument_list|)
decl_stmt|;
name|write
argument_list|(
name|out
argument_list|,
literal|0
argument_list|,
name|half
argument_list|)
expr_stmt|;
comment|//hflush
operator|(
operator|(
name|DFSOutputStream
operator|)
name|out
operator|.
name|getWrappedStream
argument_list|()
operator|)
operator|.
name|hflush
argument_list|()
expr_stmt|;
block|}
comment|//b. On another machine M2, open file and verify that the half-block
comment|//   of data can be read successfully.
name|checkFile
argument_list|(
name|p
argument_list|,
name|half
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|AppendTestUtil
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"leasechecker.interruptAndJoin()"
argument_list|)
expr_stmt|;
operator|(
operator|(
name|DistributedFileSystem
operator|)
name|fs
operator|)
operator|.
name|dfs
operator|.
name|getLeaseRenewer
argument_list|()
operator|.
name|interruptAndJoin
argument_list|()
expr_stmt|;
comment|//c. On M1, append another half block of data.  Close file on M1.
block|{
comment|//sleep to let the lease is expired.
name|Thread
operator|.
name|sleep
argument_list|(
literal|2
operator|*
name|SOFT_LEASE_LIMIT
argument_list|)
expr_stmt|;
specifier|final
name|UserGroupInformation
name|current
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
specifier|final
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
name|current
operator|.
name|getShortUserName
argument_list|()
operator|+
literal|"x"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"supergroup"
block|}
argument_list|)
decl_stmt|;
specifier|final
name|DistributedFileSystem
name|dfs
init|=
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|DistributedFileSystem
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DistributedFileSystem
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|(
name|DistributedFileSystem
operator|)
name|FileSystem
operator|.
name|newInstance
argument_list|(
name|conf
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
specifier|final
name|FSDataOutputStream
name|out
init|=
name|append
argument_list|(
name|dfs
argument_list|,
name|p
argument_list|)
decl_stmt|;
name|write
argument_list|(
name|out
argument_list|,
literal|0
argument_list|,
name|half
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|//d. On M2, open file and read 1 block of data from it. Close file.
name|checkFile
argument_list|(
name|p
argument_list|,
literal|2
operator|*
name|half
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Try openning a file for append. */
DECL|method|append (FileSystem fs, Path p)
specifier|private
specifier|static
name|FSDataOutputStream
name|append
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|p
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
return|return
name|fs
operator|.
name|append
argument_list|(
name|p
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|re
parameter_list|)
block|{
if|if
condition|(
name|re
operator|.
name|getClassName
argument_list|()
operator|.
name|equals
argument_list|(
name|RecoveryInProgressException
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|AppendTestUtil
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Will sleep and retry, i="
operator|+
name|i
operator|+
literal|", p="
operator|+
name|p
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
else|else
throw|throw
name|re
throw|;
block|}
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot append to "
operator|+
name|p
argument_list|)
throw|;
block|}
DECL|field|userCount
specifier|static
specifier|private
name|int
name|userCount
init|=
literal|0
decl_stmt|;
comment|//check the file
DECL|method|checkFile (Path p, int expectedsize, final Configuration conf )
specifier|static
name|void
name|checkFile
parameter_list|(
name|Path
name|p
parameter_list|,
name|int
name|expectedsize
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|//open the file with another user account
specifier|final
name|String
name|username
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
operator|+
literal|"_"
operator|+
operator|++
name|userCount
decl_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
name|username
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"supergroup"
block|}
argument_list|)
decl_stmt|;
specifier|final
name|FileSystem
name|fs
init|=
name|DFSTestUtil
operator|.
name|getFileSystemAs
argument_list|(
name|ugi
argument_list|,
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|HdfsDataInputStream
name|in
init|=
operator|(
name|HdfsDataInputStream
operator|)
name|fs
operator|.
name|open
argument_list|(
name|p
argument_list|)
decl_stmt|;
comment|//Check visible length
name|Assert
operator|.
name|assertTrue
argument_list|(
name|in
operator|.
name|getVisibleLength
argument_list|()
operator|>=
name|expectedsize
argument_list|)
expr_stmt|;
comment|//Able to read?
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedsize
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|(
name|byte
operator|)
name|i
argument_list|,
operator|(
name|byte
operator|)
name|in
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** Write something to a file */
DECL|method|write (OutputStream out, int offset, int length )
specifier|private
specifier|static
name|void
name|write
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|bytes
index|[
name|i
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|offset
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|write
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

