begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_BLOCKREPORT_INCREMENTAL_INTERVAL_MSEC_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_MIN_BLOCK_SIZE_KEY
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorCompletionService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|BlockWrite
operator|.
name|ReplaceDatanodeOnFailure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsRecordBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MetricsAsserts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|event
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * This test verifies that incremental block reports are sent in batch mode  * and the namenode allows closing a file with COMMITTED blocks.  */
end_comment

begin_class
DECL|class|TestBatchIbr
specifier|public
class|class
name|TestBatchIbr
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestBatchIbr
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|NUM_DATANODES
specifier|private
specifier|static
specifier|final
name|short
name|NUM_DATANODES
init|=
literal|4
decl_stmt|;
DECL|field|BLOCK_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|BLOCK_SIZE
init|=
literal|1024
decl_stmt|;
DECL|field|MAX_BLOCK_NUM
specifier|private
specifier|static
specifier|final
name|int
name|MAX_BLOCK_NUM
init|=
literal|8
decl_stmt|;
DECL|field|NUM_FILES
specifier|private
specifier|static
specifier|final
name|int
name|NUM_FILES
init|=
literal|1000
decl_stmt|;
DECL|field|NUM_THREADS
specifier|private
specifier|static
specifier|final
name|int
name|NUM_THREADS
init|=
literal|128
decl_stmt|;
DECL|field|IO_BUF
specifier|private
specifier|static
specifier|final
name|ThreadLocalBuffer
name|IO_BUF
init|=
operator|new
name|ThreadLocalBuffer
argument_list|()
decl_stmt|;
DECL|field|VERIFY_BUF
specifier|private
specifier|static
specifier|final
name|ThreadLocalBuffer
name|VERIFY_BUF
init|=
operator|new
name|ThreadLocalBuffer
argument_list|()
decl_stmt|;
static|static
block|{
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|IncrementalBlockReportManager
operator|.
name|class
argument_list|)
argument_list|,
name|Level
operator|.
name|TRACE
argument_list|)
expr_stmt|;
block|}
DECL|method|newConf (long ibrInterval)
specifier|static
name|HdfsConfiguration
name|newConf
parameter_list|(
name|long
name|ibrInterval
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|HdfsConfiguration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFS_NAMENODE_MIN_BLOCK_SIZE_KEY
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|ReplaceDatanodeOnFailure
operator|.
name|BEST_EFFORT_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|ibrInterval
operator|>
literal|0
condition|)
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|DFS_BLOCKREPORT_INCREMENTAL_INTERVAL_MSEC_KEY
argument_list|,
name|ibrInterval
argument_list|)
expr_stmt|;
block|}
return|return
name|conf
return|;
block|}
DECL|method|createExecutor ()
specifier|static
name|ExecutorService
name|createExecutor
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|NUM_THREADS
argument_list|)
decl_stmt|;
specifier|final
name|ExecutorCompletionService
argument_list|<
name|Path
argument_list|>
name|completion
init|=
operator|new
name|ExecutorCompletionService
argument_list|<>
argument_list|(
name|executor
argument_list|)
decl_stmt|;
comment|// initialize all threads and buffers
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_THREADS
condition|;
name|i
operator|++
control|)
block|{
name|completion
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Path
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Path
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|IO_BUF
operator|.
name|get
argument_list|()
expr_stmt|;
name|VERIFY_BUF
operator|.
name|get
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_THREADS
condition|;
name|i
operator|++
control|)
block|{
name|completion
operator|.
name|take
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
return|return
name|executor
return|;
block|}
DECL|method|runIbrTest (final long ibrInterval)
specifier|static
name|void
name|runIbrTest
parameter_list|(
specifier|final
name|long
name|ibrInterval
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|ExecutorService
name|executor
init|=
name|createExecutor
argument_list|()
decl_stmt|;
specifier|final
name|Random
name|ran
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|newConf
argument_list|(
name|ibrInterval
argument_list|)
decl_stmt|;
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|NUM_DATANODES
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|DistributedFileSystem
name|dfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|String
name|dirPathString
init|=
literal|"/dir"
decl_stmt|;
specifier|final
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
name|dirPathString
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
expr_stmt|;
comment|// start testing
specifier|final
name|long
name|testStartTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
specifier|final
name|ExecutorCompletionService
argument_list|<
name|Path
argument_list|>
name|createService
init|=
operator|new
name|ExecutorCompletionService
argument_list|<>
argument_list|(
name|executor
argument_list|)
decl_stmt|;
specifier|final
name|AtomicLong
name|createFileTime
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|final
name|AtomicInteger
name|numBlockCreated
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
comment|// create files
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_FILES
condition|;
name|i
operator|++
control|)
block|{
name|createService
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Path
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Path
name|call
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|long
name|start
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|long
name|seed
init|=
name|ran
operator|.
name|nextLong
argument_list|()
decl_stmt|;
specifier|final
name|int
name|numBlocks
init|=
name|ran
operator|.
name|nextInt
argument_list|(
name|MAX_BLOCK_NUM
argument_list|)
operator|+
literal|1
decl_stmt|;
name|numBlockCreated
operator|.
name|addAndGet
argument_list|(
name|numBlocks
argument_list|)
expr_stmt|;
return|return
name|createFile
argument_list|(
name|dir
argument_list|,
name|numBlocks
argument_list|,
name|seed
argument_list|,
name|dfs
argument_list|)
return|;
block|}
finally|finally
block|{
name|createFileTime
operator|.
name|addAndGet
argument_list|(
name|Time
operator|.
name|monotonicNow
argument_list|()
operator|-
name|start
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|// verify files
specifier|final
name|ExecutorCompletionService
argument_list|<
name|Boolean
argument_list|>
name|verifyService
init|=
operator|new
name|ExecutorCompletionService
argument_list|<>
argument_list|(
name|executor
argument_list|)
decl_stmt|;
specifier|final
name|AtomicLong
name|verifyFileTime
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_FILES
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Path
name|file
init|=
name|createService
operator|.
name|take
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|verifyService
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|call
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|long
name|start
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|verifyFile
argument_list|(
name|file
argument_list|,
name|dfs
argument_list|)
return|;
block|}
finally|finally
block|{
name|verifyFileTime
operator|.
name|addAndGet
argument_list|(
name|Time
operator|.
name|monotonicNow
argument_list|()
operator|-
name|start
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_FILES
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|verifyService
operator|.
name|take
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|long
name|testEndTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"ibrInterval="
operator|+
name|ibrInterval
operator|+
literal|" ("
operator|+
name|toConfString
argument_list|(
name|DFS_BLOCKREPORT_INCREMENTAL_INTERVAL_MSEC_KEY
argument_list|,
name|conf
argument_list|)
operator|+
literal|"), numBlockCreated="
operator|+
name|numBlockCreated
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"duration="
operator|+
name|toSecondString
argument_list|(
name|testEndTime
operator|-
name|testStartTime
argument_list|)
operator|+
literal|", createFileTime="
operator|+
name|toSecondString
argument_list|(
name|createFileTime
operator|.
name|get
argument_list|()
argument_list|)
operator|+
literal|", verifyFileTime="
operator|+
name|toSecondString
argument_list|(
name|verifyFileTime
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"NUM_FILES="
operator|+
name|NUM_FILES
operator|+
literal|", MAX_BLOCK_NUM="
operator|+
name|MAX_BLOCK_NUM
operator|+
literal|", BLOCK_SIZE="
operator|+
name|BLOCK_SIZE
operator|+
literal|", NUM_THREADS="
operator|+
name|NUM_THREADS
operator|+
literal|", NUM_DATANODES="
operator|+
name|NUM_DATANODES
argument_list|)
expr_stmt|;
name|logIbrCounts
argument_list|(
name|cluster
operator|.
name|getDataNodes
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|toConfString (String key, Configuration conf)
specifier|static
name|String
name|toConfString
parameter_list|(
name|String
name|key
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|key
operator|+
literal|"="
operator|+
name|conf
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
DECL|method|toSecondString (long ms)
specifier|static
name|String
name|toSecondString
parameter_list|(
name|long
name|ms
parameter_list|)
block|{
return|return
operator|(
name|ms
operator|/
literal|1000.0
operator|)
operator|+
literal|"s"
return|;
block|}
DECL|method|logIbrCounts (List<DataNode> datanodes)
specifier|static
name|void
name|logIbrCounts
parameter_list|(
name|List
argument_list|<
name|DataNode
argument_list|>
name|datanodes
parameter_list|)
block|{
specifier|final
name|String
name|name
init|=
literal|"IncrementalBlockReportsNumOps"
decl_stmt|;
for|for
control|(
name|DataNode
name|dn
range|:
name|datanodes
control|)
block|{
specifier|final
name|MetricsRecordBuilder
name|m
init|=
name|MetricsAsserts
operator|.
name|getMetrics
argument_list|(
name|dn
operator|.
name|getMetrics
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|long
name|ibr
init|=
name|MetricsAsserts
operator|.
name|getLongCounter
argument_list|(
name|name
argument_list|,
name|m
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|dn
operator|.
name|getDisplayName
argument_list|()
operator|+
literal|": "
operator|+
name|name
operator|+
literal|"="
operator|+
name|ibr
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ThreadLocalBuffer
specifier|static
class|class
name|ThreadLocalBuffer
extends|extends
name|ThreadLocal
argument_list|<
name|byte
index|[]
argument_list|>
block|{
annotation|@
name|Override
DECL|method|initialValue ()
specifier|protected
name|byte
index|[]
name|initialValue
parameter_list|()
block|{
return|return
operator|new
name|byte
index|[
name|BLOCK_SIZE
index|]
return|;
block|}
block|}
DECL|method|nextBytes (int blockIndex, long seed, byte[] bytes)
specifier|static
name|byte
index|[]
name|nextBytes
parameter_list|(
name|int
name|blockIndex
parameter_list|,
name|long
name|seed
parameter_list|,
name|byte
index|[]
name|bytes
parameter_list|)
block|{
name|byte
name|b
init|=
call|(
name|byte
call|)
argument_list|(
name|seed
operator|^
operator|(
name|seed
operator|>>
name|blockIndex
operator|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bytes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|bytes
index|[
name|i
index|]
operator|=
name|b
operator|++
expr_stmt|;
block|}
return|return
name|bytes
return|;
block|}
DECL|method|createFile (Path dir, int numBlocks, long seed, DistributedFileSystem dfs)
specifier|static
name|Path
name|createFile
parameter_list|(
name|Path
name|dir
parameter_list|,
name|int
name|numBlocks
parameter_list|,
name|long
name|seed
parameter_list|,
name|DistributedFileSystem
name|dfs
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|f
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|seed
operator|+
literal|"_"
operator|+
name|numBlocks
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|bytes
init|=
name|IO_BUF
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
init|(
name|FSDataOutputStream
name|out
init|=
name|dfs
operator|.
name|create
argument_list|(
name|f
argument_list|)
init|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numBlocks
condition|;
name|i
operator|++
control|)
block|{
name|out
operator|.
name|write
argument_list|(
name|nextBytes
argument_list|(
name|i
argument_list|,
name|seed
argument_list|,
name|bytes
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|f
return|;
block|}
DECL|method|verifyFile (Path f, DistributedFileSystem dfs)
specifier|static
name|boolean
name|verifyFile
parameter_list|(
name|Path
name|f
parameter_list|,
name|DistributedFileSystem
name|dfs
parameter_list|)
block|{
specifier|final
name|long
name|seed
decl_stmt|;
specifier|final
name|int
name|numBlocks
decl_stmt|;
block|{
specifier|final
name|String
name|name
init|=
name|f
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|final
name|int
name|i
init|=
name|name
operator|.
name|indexOf
argument_list|(
literal|'_'
argument_list|)
decl_stmt|;
name|seed
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|numBlocks
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|name
operator|.
name|substring
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|byte
index|[]
name|computed
init|=
name|IO_BUF
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|expected
init|=
name|VERIFY_BUF
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
init|(
name|FSDataInputStream
name|in
init|=
name|dfs
operator|.
name|open
argument_list|(
name|f
argument_list|)
init|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numBlocks
condition|;
name|i
operator|++
control|)
block|{
name|in
operator|.
name|read
argument_list|(
name|computed
argument_list|)
expr_stmt|;
name|nextBytes
argument_list|(
name|i
argument_list|,
name|seed
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|computed
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to verify file "
operator|+
name|f
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Test
DECL|method|testIbr ()
specifier|public
name|void
name|testIbr
parameter_list|()
throws|throws
name|Exception
block|{
name|runIbrTest
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
name|runIbrTest
argument_list|(
literal|100L
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

