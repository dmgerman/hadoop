begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.web
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|MessageFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BlockLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystemContractBaseTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|AppendTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|NamenodeAddressParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestWebHdfsFileSystemContract
specifier|public
class|class
name|TestWebHdfsFileSystemContract
extends|extends
name|FileSystemContractBaseTest
block|{
DECL|field|conf
specifier|private
specifier|static
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
DECL|field|cluster
specifier|private
specifier|static
specifier|final
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|defaultWorkingDirectory
specifier|private
name|String
name|defaultWorkingDirectory
decl_stmt|;
DECL|field|ugi
specifier|private
name|UserGroupInformation
name|ugi
decl_stmt|;
static|static
block|{
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|2
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
comment|//change root permission to 777
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|setPermission
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|//get file system as a non-superuser
specifier|final
name|UserGroupInformation
name|current
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|ugi
operator|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
name|current
operator|.
name|getShortUserName
argument_list|()
operator|+
literal|"x"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"user"
block|}
argument_list|)
expr_stmt|;
name|fs
operator|=
name|WebHdfsTestUtil
operator|.
name|getWebHdfsFileSystemAs
argument_list|(
name|ugi
argument_list|,
name|conf
argument_list|,
name|WebHdfsConstants
operator|.
name|WEBHDFS_SCHEME
argument_list|)
expr_stmt|;
name|defaultWorkingDirectory
operator|=
name|fs
operator|.
name|getWorkingDirectory
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getDefaultWorkingDirectory ()
specifier|protected
name|String
name|getDefaultWorkingDirectory
parameter_list|()
block|{
return|return
name|defaultWorkingDirectory
return|;
block|}
comment|/** HDFS throws AccessControlException    * when calling exist(..) on a path /foo/bar/file    * but /foo/bar is indeed a file in HDFS.    */
annotation|@
name|Test
DECL|method|testMkdirsFailsForSubdirectoryOfExistingFile ()
specifier|public
name|void
name|testMkdirsFailsForSubdirectoryOfExistingFile
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|testDir
init|=
name|path
argument_list|(
literal|"/test/hadoop"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|testDir
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|testDir
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|testDir
argument_list|)
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
name|path
argument_list|(
literal|"/test/hadoop/file"
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|testSubDir
init|=
name|path
argument_list|(
literal|"/test/hadoop/file/subdir"
argument_list|)
decl_stmt|;
try|try
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
name|testSubDir
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should throw IOException."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|testSubDir
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// also okay for HDFS.
block|}
name|Path
name|testDeepSubDir
init|=
name|path
argument_list|(
literal|"/test/hadoop/file/deep/sub/dir"
argument_list|)
decl_stmt|;
try|try
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
name|testDeepSubDir
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should throw IOException."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|testDeepSubDir
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// also okay for HDFS.
block|}
block|}
comment|//the following are new tests (i.e. not over-riding the super class methods)
annotation|@
name|Test
DECL|method|testGetFileBlockLocations ()
specifier|public
name|void
name|testGetFileBlockLocations
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|f
init|=
literal|"/test/testGetFileBlockLocations"
decl_stmt|;
name|createFile
argument_list|(
name|path
argument_list|(
name|f
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|BlockLocation
index|[]
name|computed
init|=
name|fs
operator|.
name|getFileBlockLocations
argument_list|(
operator|new
name|Path
argument_list|(
name|f
argument_list|)
argument_list|,
literal|0L
argument_list|,
literal|1L
argument_list|)
decl_stmt|;
specifier|final
name|BlockLocation
index|[]
name|expected
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getFileBlockLocations
argument_list|(
operator|new
name|Path
argument_list|(
name|f
argument_list|)
argument_list|,
literal|0L
argument_list|,
literal|1L
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|length
argument_list|,
name|computed
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|computed
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|expected
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|,
name|computed
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check names
name|String
name|names1
index|[]
init|=
name|expected
index|[
name|i
index|]
operator|.
name|getNames
argument_list|()
decl_stmt|;
name|String
name|names2
index|[]
init|=
name|computed
index|[
name|i
index|]
operator|.
name|getNames
argument_list|()
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|names1
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|names2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
literal|"Names differ"
argument_list|,
name|names1
argument_list|,
name|names2
argument_list|)
expr_stmt|;
comment|// Check topology
name|String
name|topos1
index|[]
init|=
name|expected
index|[
name|i
index|]
operator|.
name|getTopologyPaths
argument_list|()
decl_stmt|;
name|String
name|topos2
index|[]
init|=
name|computed
index|[
name|i
index|]
operator|.
name|getTopologyPaths
argument_list|()
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|topos1
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|topos2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
literal|"Topology differs"
argument_list|,
name|topos1
argument_list|,
name|topos2
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCaseInsensitive ()
specifier|public
name|void
name|testCaseInsensitive
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
literal|"/test/testCaseInsensitive"
argument_list|)
decl_stmt|;
specifier|final
name|WebHdfsFileSystem
name|webhdfs
init|=
operator|(
name|WebHdfsFileSystem
operator|)
name|fs
decl_stmt|;
specifier|final
name|PutOpParam
operator|.
name|Op
name|op
init|=
name|PutOpParam
operator|.
name|Op
operator|.
name|MKDIRS
decl_stmt|;
comment|//replace query with mix case letters
specifier|final
name|URL
name|url
init|=
name|webhdfs
operator|.
name|toUrl
argument_list|(
name|op
argument_list|,
name|p
argument_list|)
decl_stmt|;
name|WebHdfsFileSystem
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"url      = "
operator|+
name|url
argument_list|)
expr_stmt|;
specifier|final
name|URL
name|replaced
init|=
operator|new
name|URL
argument_list|(
name|url
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
name|op
operator|.
name|toQueryString
argument_list|()
argument_list|,
literal|"Op=mkDIrs"
argument_list|)
argument_list|)
decl_stmt|;
name|WebHdfsFileSystem
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"replaced = "
operator|+
name|replaced
argument_list|)
expr_stmt|;
comment|//connect with the replaced URL.
specifier|final
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|replaced
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|setRequestMethod
argument_list|(
name|op
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conn
operator|.
name|connect
argument_list|()
expr_stmt|;
specifier|final
name|BufferedReader
name|in
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|conn
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|line
init|;
operator|(
name|line
operator|=
name|in
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|;
control|)
block|{
name|WebHdfsFileSystem
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"> "
operator|+
name|line
argument_list|)
expr_stmt|;
block|}
comment|//check if the command successes.
name|assertTrue
argument_list|(
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOpenNonExistFile ()
specifier|public
name|void
name|testOpenNonExistFile
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
literal|"/test/testOpenNonExistFile"
argument_list|)
decl_stmt|;
comment|//open it as a file, should get FileNotFoundException
try|try
block|{
name|fs
operator|.
name|open
argument_list|(
name|p
argument_list|)
operator|.
name|read
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected FileNotFoundException was not thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnfe
parameter_list|)
block|{
name|WebHdfsFileSystem
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"This is expected."
argument_list|,
name|fnfe
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSeek ()
specifier|public
name|void
name|testSeek
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/test/testSeek"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
block|{
comment|//test zero file size
specifier|final
name|Path
name|zero
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"zero"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|create
argument_list|(
name|zero
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
specifier|final
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|zero
argument_list|)
decl_stmt|;
for|for
control|(
init|;
name|in
operator|.
name|read
argument_list|()
operator|!=
operator|-
literal|1
condition|;
name|count
operator|++
control|)
empty_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
specifier|final
name|byte
index|[]
name|mydata
init|=
operator|new
name|byte
index|[
literal|1
operator|<<
literal|20
index|]
decl_stmt|;
operator|new
name|Random
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|mydata
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|p
argument_list|,
literal|false
argument_list|,
literal|4096
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|1L
operator|<<
literal|17
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|mydata
argument_list|,
literal|0
argument_list|,
name|mydata
operator|.
name|length
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|int
name|one_third
init|=
name|mydata
operator|.
name|length
operator|/
literal|3
decl_stmt|;
specifier|final
name|int
name|two_third
init|=
name|one_third
operator|*
literal|2
decl_stmt|;
block|{
comment|//test seek
specifier|final
name|int
name|offset
init|=
name|one_third
decl_stmt|;
specifier|final
name|int
name|len
init|=
name|mydata
operator|.
name|length
operator|-
name|offset
decl_stmt|;
specifier|final
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
specifier|final
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|in
operator|.
name|seek
argument_list|(
name|offset
argument_list|)
expr_stmt|;
comment|//read all remaining data
name|in
operator|.
name|readFully
argument_list|(
name|buf
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buf
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"Position "
operator|+
name|i
operator|+
literal|", offset="
operator|+
name|offset
operator|+
literal|", length="
operator|+
name|len
argument_list|,
name|mydata
index|[
name|i
operator|+
name|offset
index|]
argument_list|,
name|buf
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|{
comment|//test position read (read the data after the two_third location)
specifier|final
name|int
name|offset
init|=
name|two_third
decl_stmt|;
specifier|final
name|int
name|len
init|=
name|mydata
operator|.
name|length
operator|-
name|offset
decl_stmt|;
specifier|final
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
specifier|final
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|in
operator|.
name|readFully
argument_list|(
name|offset
argument_list|,
name|buf
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buf
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"Position "
operator|+
name|i
operator|+
literal|", offset="
operator|+
name|offset
operator|+
literal|", length="
operator|+
name|len
argument_list|,
name|mydata
index|[
name|i
operator|+
name|offset
index|]
argument_list|,
name|buf
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testRootDir ()
specifier|public
name|void
name|testRootDir
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|root
init|=
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
specifier|final
name|WebHdfsFileSystem
name|webhdfs
init|=
operator|(
name|WebHdfsFileSystem
operator|)
name|fs
decl_stmt|;
specifier|final
name|URL
name|url
init|=
name|webhdfs
operator|.
name|toUrl
argument_list|(
name|GetOpParam
operator|.
name|Op
operator|.
name|NULL
argument_list|,
name|root
argument_list|)
decl_stmt|;
name|WebHdfsFileSystem
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"null url="
operator|+
name|url
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|url
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"v1"
argument_list|)
argument_list|)
expr_stmt|;
comment|//test root permission
specifier|final
name|FileStatus
name|status
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|status
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0777
argument_list|,
name|status
operator|.
name|getPermission
argument_list|()
operator|.
name|toShort
argument_list|()
argument_list|)
expr_stmt|;
comment|//delete root
name|assertFalse
argument_list|(
name|fs
operator|.
name|delete
argument_list|(
name|root
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|//create file using root path
try|try
block|{
specifier|final
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|WebHdfsFileSystem
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"This is expected."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|//open file using root path
try|try
block|{
specifier|final
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|in
operator|.
name|read
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|WebHdfsFileSystem
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"This is expected."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test get with length parameter greater than actual file length.    */
annotation|@
name|Test
DECL|method|testLengthParamLongerThanFile ()
specifier|public
name|void
name|testLengthParamLongerThanFile
parameter_list|()
throws|throws
name|IOException
block|{
name|WebHdfsFileSystem
name|webhdfs
init|=
operator|(
name|WebHdfsFileSystem
operator|)
name|fs
decl_stmt|;
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|webhdfs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create a file with some content.
name|Path
name|testFile
init|=
operator|new
name|Path
argument_list|(
literal|"/test/testLengthParamLongerThanFile"
argument_list|)
decl_stmt|;
name|String
name|content
init|=
literal|"testLengthParamLongerThanFile"
decl_stmt|;
name|FSDataOutputStream
name|testFileOut
init|=
name|webhdfs
operator|.
name|create
argument_list|(
name|testFile
argument_list|)
decl_stmt|;
try|try
block|{
name|testFileOut
operator|.
name|write
argument_list|(
name|content
operator|.
name|getBytes
argument_list|(
literal|"US-ASCII"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|testFileOut
argument_list|)
expr_stmt|;
block|}
comment|// Open the file, but request length longer than actual file length by 1.
name|HttpOpParam
operator|.
name|Op
name|op
init|=
name|GetOpParam
operator|.
name|Op
operator|.
name|OPEN
decl_stmt|;
name|URL
name|url
init|=
name|webhdfs
operator|.
name|toUrl
argument_list|(
name|op
argument_list|,
name|testFile
argument_list|,
operator|new
name|LengthParam
argument_list|(
call|(
name|long
call|)
argument_list|(
name|content
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
literal|null
decl_stmt|;
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
try|try
block|{
name|conn
operator|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|conn
operator|.
name|setRequestMethod
argument_list|(
name|op
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setDoOutput
argument_list|(
name|op
operator|.
name|getDoOutput
argument_list|()
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setInstanceFollowRedirects
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Expect OK response and Content-Length header equal to actual length.
name|assertEquals
argument_list|(
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|content
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|conn
operator|.
name|getHeaderField
argument_list|(
literal|"Content-Length"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check content matches.
name|byte
index|[]
name|respBody
init|=
operator|new
name|byte
index|[
name|content
operator|.
name|length
argument_list|()
index|]
decl_stmt|;
name|is
operator|=
name|conn
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
name|IOUtils
operator|.
name|readFully
argument_list|(
name|is
argument_list|,
name|respBody
argument_list|,
literal|0
argument_list|,
name|content
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|content
argument_list|,
operator|new
name|String
argument_list|(
name|respBody
argument_list|,
literal|"US-ASCII"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|is
argument_list|)
expr_stmt|;
if|if
condition|(
name|conn
operator|!=
literal|null
condition|)
block|{
name|conn
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Test get with offset and length parameters that combine to request a length    * greater than actual file length.    */
annotation|@
name|Test
DECL|method|testOffsetPlusLengthParamsLongerThanFile ()
specifier|public
name|void
name|testOffsetPlusLengthParamsLongerThanFile
parameter_list|()
throws|throws
name|IOException
block|{
name|WebHdfsFileSystem
name|webhdfs
init|=
operator|(
name|WebHdfsFileSystem
operator|)
name|fs
decl_stmt|;
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|webhdfs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create a file with some content.
name|Path
name|testFile
init|=
operator|new
name|Path
argument_list|(
literal|"/test/testOffsetPlusLengthParamsLongerThanFile"
argument_list|)
decl_stmt|;
name|String
name|content
init|=
literal|"testOffsetPlusLengthParamsLongerThanFile"
decl_stmt|;
name|FSDataOutputStream
name|testFileOut
init|=
name|webhdfs
operator|.
name|create
argument_list|(
name|testFile
argument_list|)
decl_stmt|;
try|try
block|{
name|testFileOut
operator|.
name|write
argument_list|(
name|content
operator|.
name|getBytes
argument_list|(
literal|"US-ASCII"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|testFileOut
argument_list|)
expr_stmt|;
block|}
comment|// Open the file, but request offset starting at 1 and length equal to file
comment|// length.  Considering the offset, this is longer than the actual content.
name|HttpOpParam
operator|.
name|Op
name|op
init|=
name|GetOpParam
operator|.
name|Op
operator|.
name|OPEN
decl_stmt|;
name|URL
name|url
init|=
name|webhdfs
operator|.
name|toUrl
argument_list|(
name|op
argument_list|,
name|testFile
argument_list|,
operator|new
name|LengthParam
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|content
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
argument_list|,
operator|new
name|OffsetParam
argument_list|(
literal|1L
argument_list|)
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
literal|null
decl_stmt|;
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
try|try
block|{
name|conn
operator|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|conn
operator|.
name|setRequestMethod
argument_list|(
name|op
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setDoOutput
argument_list|(
name|op
operator|.
name|getDoOutput
argument_list|()
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setInstanceFollowRedirects
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Expect OK response and Content-Length header equal to actual length.
name|assertEquals
argument_list|(
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|content
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|,
name|conn
operator|.
name|getHeaderField
argument_list|(
literal|"Content-Length"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check content matches.
name|byte
index|[]
name|respBody
init|=
operator|new
name|byte
index|[
name|content
operator|.
name|length
argument_list|()
operator|-
literal|1
index|]
decl_stmt|;
name|is
operator|=
name|conn
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
name|IOUtils
operator|.
name|readFully
argument_list|(
name|is
argument_list|,
name|respBody
argument_list|,
literal|0
argument_list|,
name|content
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|content
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|new
name|String
argument_list|(
name|respBody
argument_list|,
literal|"US-ASCII"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|is
argument_list|)
expr_stmt|;
if|if
condition|(
name|conn
operator|!=
literal|null
condition|)
block|{
name|conn
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testResponseCode ()
specifier|public
name|void
name|testResponseCode
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|WebHdfsFileSystem
name|webhdfs
init|=
operator|(
name|WebHdfsFileSystem
operator|)
name|fs
decl_stmt|;
specifier|final
name|Path
name|root
init|=
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/test/testUrl"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|webhdfs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
literal|"/test/file"
argument_list|)
decl_stmt|;
specifier|final
name|FSDataOutputStream
name|out
init|=
name|webhdfs
operator|.
name|create
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|{
comment|//test GETHOMEDIRECTORY
specifier|final
name|URL
name|url
init|=
name|webhdfs
operator|.
name|toUrl
argument_list|(
name|GetOpParam
operator|.
name|Op
operator|.
name|GETHOMEDIRECTORY
argument_list|,
name|root
argument_list|)
decl_stmt|;
specifier|final
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|m
init|=
name|WebHdfsTestUtil
operator|.
name|connectAndGetJson
argument_list|(
name|conn
argument_list|,
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|webhdfs
operator|.
name|getHomeDirectory
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|m
operator|.
name|get
argument_list|(
name|Path
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|conn
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
block|{
comment|//test GETHOMEDIRECTORY with unauthorized doAs
specifier|final
name|URL
name|url
init|=
name|webhdfs
operator|.
name|toUrl
argument_list|(
name|GetOpParam
operator|.
name|Op
operator|.
name|GETHOMEDIRECTORY
argument_list|,
name|root
argument_list|,
operator|new
name|DoAsParam
argument_list|(
name|ugi
operator|.
name|getShortUserName
argument_list|()
operator|+
literal|"proxy"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|connect
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|HttpServletResponse
operator|.
name|SC_FORBIDDEN
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|conn
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
block|{
comment|//test set owner with empty parameters
specifier|final
name|URL
name|url
init|=
name|webhdfs
operator|.
name|toUrl
argument_list|(
name|PutOpParam
operator|.
name|Op
operator|.
name|SETOWNER
argument_list|,
name|dir
argument_list|)
decl_stmt|;
specifier|final
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|connect
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|HttpServletResponse
operator|.
name|SC_BAD_REQUEST
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|conn
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
block|{
comment|//test set replication on a directory
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
init|=
name|PutOpParam
operator|.
name|Op
operator|.
name|SETREPLICATION
decl_stmt|;
specifier|final
name|URL
name|url
init|=
name|webhdfs
operator|.
name|toUrl
argument_list|(
name|op
argument_list|,
name|dir
argument_list|)
decl_stmt|;
specifier|final
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|setRequestMethod
argument_list|(
name|op
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conn
operator|.
name|connect
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|webhdfs
operator|.
name|setReplication
argument_list|(
name|dir
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|conn
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
block|{
comment|//test get file status for a non-exist file.
specifier|final
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"non-exist"
argument_list|)
decl_stmt|;
specifier|final
name|URL
name|url
init|=
name|webhdfs
operator|.
name|toUrl
argument_list|(
name|GetOpParam
operator|.
name|Op
operator|.
name|GETFILESTATUS
argument_list|,
name|p
argument_list|)
decl_stmt|;
specifier|final
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|connect
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|HttpServletResponse
operator|.
name|SC_NOT_FOUND
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|conn
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
block|{
comment|//test set permission with empty parameters
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
init|=
name|PutOpParam
operator|.
name|Op
operator|.
name|SETPERMISSION
decl_stmt|;
specifier|final
name|URL
name|url
init|=
name|webhdfs
operator|.
name|toUrl
argument_list|(
name|op
argument_list|,
name|dir
argument_list|)
decl_stmt|;
specifier|final
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|setRequestMethod
argument_list|(
name|op
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conn
operator|.
name|connect
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|conn
operator|.
name|getContentLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_OCTET_STREAM
argument_list|,
name|conn
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|short
operator|)
literal|0755
argument_list|,
name|webhdfs
operator|.
name|getFileStatus
argument_list|(
name|dir
argument_list|)
operator|.
name|getPermission
argument_list|()
operator|.
name|toShort
argument_list|()
argument_list|)
expr_stmt|;
name|conn
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
block|{
comment|//test append.
name|AppendTestUtil
operator|.
name|testAppend
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"append"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
comment|//test NamenodeAddressParam not set.
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
init|=
name|PutOpParam
operator|.
name|Op
operator|.
name|CREATE
decl_stmt|;
specifier|final
name|URL
name|url
init|=
name|webhdfs
operator|.
name|toUrl
argument_list|(
name|op
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|setRequestMethod
argument_list|(
name|op
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setDoOutput
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setInstanceFollowRedirects
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|conn
operator|.
name|connect
argument_list|()
expr_stmt|;
specifier|final
name|String
name|redirect
init|=
name|conn
operator|.
name|getHeaderField
argument_list|(
literal|"Location"
argument_list|)
decl_stmt|;
name|conn
operator|.
name|disconnect
argument_list|()
expr_stmt|;
comment|//remove NamenodeAddressParam
name|WebHdfsFileSystem
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"redirect = "
operator|+
name|redirect
argument_list|)
expr_stmt|;
specifier|final
name|int
name|i
init|=
name|redirect
operator|.
name|indexOf
argument_list|(
name|NamenodeAddressParam
operator|.
name|NAME
argument_list|)
decl_stmt|;
specifier|final
name|int
name|j
init|=
name|redirect
operator|.
name|indexOf
argument_list|(
literal|"&"
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|String
name|modified
init|=
name|redirect
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|i
operator|-
literal|1
argument_list|)
operator|+
name|redirect
operator|.
name|substring
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|WebHdfsFileSystem
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"modified = "
operator|+
name|modified
argument_list|)
expr_stmt|;
comment|//connect to datanode
name|conn
operator|=
operator|(
name|HttpURLConnection
operator|)
operator|new
name|URL
argument_list|(
name|modified
argument_list|)
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|conn
operator|.
name|setRequestMethod
argument_list|(
name|op
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setDoOutput
argument_list|(
name|op
operator|.
name|getDoOutput
argument_list|()
argument_list|)
expr_stmt|;
name|conn
operator|.
name|connect
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|HttpServletResponse
operator|.
name|SC_BAD_REQUEST
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
comment|//test jsonParse with non-json type.
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
init|=
name|GetOpParam
operator|.
name|Op
operator|.
name|OPEN
decl_stmt|;
specifier|final
name|URL
name|url
init|=
name|webhdfs
operator|.
name|toUrl
argument_list|(
name|op
argument_list|,
name|file
argument_list|)
decl_stmt|;
specifier|final
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|setRequestMethod
argument_list|(
name|op
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conn
operator|.
name|connect
argument_list|()
expr_stmt|;
try|try
block|{
name|WebHdfsFileSystem
operator|.
name|jsonParse
argument_list|(
name|conn
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|WebHdfsFileSystem
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"GOOD"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
name|conn
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
block|{
comment|//test create with path containing spaces
name|HttpOpParam
operator|.
name|Op
name|op
init|=
name|PutOpParam
operator|.
name|Op
operator|.
name|CREATE
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/test/path with spaces"
argument_list|)
decl_stmt|;
name|URL
name|url
init|=
name|webhdfs
operator|.
name|toUrl
argument_list|(
name|op
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|setRequestMethod
argument_list|(
name|op
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setDoOutput
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setInstanceFollowRedirects
argument_list|(
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|String
name|redirect
decl_stmt|;
try|try
block|{
name|conn
operator|.
name|connect
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|HttpServletResponse
operator|.
name|SC_TEMPORARY_REDIRECT
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|redirect
operator|=
name|conn
operator|.
name|getHeaderField
argument_list|(
literal|"Location"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|conn
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
name|conn
operator|=
operator|(
name|HttpURLConnection
operator|)
operator|new
name|URL
argument_list|(
name|redirect
argument_list|)
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|conn
operator|.
name|setRequestMethod
argument_list|(
name|op
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setDoOutput
argument_list|(
name|op
operator|.
name|getDoOutput
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|conn
operator|.
name|connect
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|HttpServletResponse
operator|.
name|SC_CREATED
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|conn
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testDatanodeCreateMissingParameter ()
specifier|public
name|void
name|testDatanodeCreateMissingParameter
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|WebHdfsFileSystem
name|webhdfs
init|=
operator|(
name|WebHdfsFileSystem
operator|)
name|fs
decl_stmt|;
specifier|final
name|Path
name|testDir
init|=
operator|new
name|Path
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"/test/{0}/{1}"
argument_list|,
name|TestWebHdfsFileSystemContract
operator|.
name|class
argument_list|,
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|webhdfs
operator|.
name|mkdirs
argument_list|(
name|testDir
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|dnCreateParam
range|:
operator|new
name|String
index|[]
block|{
name|CreateFlagParam
operator|.
name|NAME
block|,
name|CreateParentParam
operator|.
name|NAME
block|,
name|OverwriteParam
operator|.
name|NAME
block|}
control|)
block|{
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
init|=
name|PutOpParam
operator|.
name|Op
operator|.
name|CREATE
decl_stmt|;
specifier|final
name|Path
name|newfile
init|=
operator|new
name|Path
argument_list|(
name|testDir
argument_list|,
literal|"newfile_"
operator|+
name|dnCreateParam
argument_list|)
decl_stmt|;
specifier|final
name|URL
name|url
init|=
name|webhdfs
operator|.
name|toUrl
argument_list|(
name|op
argument_list|,
name|newfile
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|setRequestMethod
argument_list|(
name|op
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setDoOutput
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setInstanceFollowRedirects
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|conn
operator|.
name|connect
argument_list|()
expr_stmt|;
specifier|final
name|String
name|redirect
init|=
name|conn
operator|.
name|getHeaderField
argument_list|(
literal|"Location"
argument_list|)
decl_stmt|;
name|conn
operator|.
name|disconnect
argument_list|()
expr_stmt|;
comment|//remove createparent
name|WebHdfsFileSystem
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"redirect = "
operator|+
name|redirect
argument_list|)
expr_stmt|;
name|String
name|re
init|=
literal|"&"
operator|+
name|dnCreateParam
operator|+
literal|"=[^&]*"
decl_stmt|;
name|String
name|modified
init|=
name|redirect
operator|.
name|replaceAll
argument_list|(
name|re
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|WebHdfsFileSystem
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"modified = "
operator|+
name|modified
argument_list|)
expr_stmt|;
comment|//connect to datanode
name|conn
operator|=
operator|(
name|HttpURLConnection
operator|)
operator|new
name|URL
argument_list|(
name|modified
argument_list|)
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|conn
operator|.
name|setRequestMethod
argument_list|(
name|op
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setDoOutput
argument_list|(
name|op
operator|.
name|getDoOutput
argument_list|()
argument_list|)
expr_stmt|;
name|conn
operator|.
name|connect
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|HttpServletResponse
operator|.
name|SC_CREATED
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testAccess ()
specifier|public
name|void
name|testAccess
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Path
name|p1
init|=
operator|new
name|Path
argument_list|(
literal|"/pathX"
argument_list|)
decl_stmt|;
try|try
block|{
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"alpha"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"beta"
block|}
argument_list|)
decl_stmt|;
name|WebHdfsFileSystem
name|fs
init|=
name|WebHdfsTestUtil
operator|.
name|getWebHdfsFileSystemAs
argument_list|(
name|ugi
argument_list|,
name|conf
argument_list|,
name|WebHdfsConstants
operator|.
name|WEBHDFS_SCHEME
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|p1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|p1
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0444
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|access
argument_list|(
name|p1
argument_list|,
name|FsAction
operator|.
name|READ
argument_list|)
expr_stmt|;
try|try
block|{
name|fs
operator|.
name|access
argument_list|(
name|p1
argument_list|,
name|FsAction
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"The access call should have failed."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|Path
name|badPath
init|=
operator|new
name|Path
argument_list|(
literal|"/bad"
argument_list|)
decl_stmt|;
try|try
block|{
name|fs
operator|.
name|access
argument_list|(
name|badPath
argument_list|,
name|FsAction
operator|.
name|READ
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"The access call should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
finally|finally
block|{
name|fs
operator|.
name|delete
argument_list|(
name|p1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

