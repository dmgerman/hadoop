begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_class
DECL|class|TestLeaseManager
specifier|public
class|class
name|TestLeaseManager
block|{
DECL|field|conf
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|testRemoveLeaseWithPrefixPath ()
specifier|public
name|void
name|testRemoveLeaseWithPrefixPath
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|2
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|LeaseManager
name|lm
init|=
name|NameNodeAdapter
operator|.
name|getLeaseManager
argument_list|(
name|cluster
operator|.
name|getNamesystem
argument_list|()
argument_list|)
decl_stmt|;
name|lm
operator|.
name|addLease
argument_list|(
literal|"holder1"
argument_list|,
literal|"/a/b"
argument_list|)
expr_stmt|;
name|lm
operator|.
name|addLease
argument_list|(
literal|"holder2"
argument_list|,
literal|"/a/c"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|lm
operator|.
name|getLeaseByPath
argument_list|(
literal|"/a/b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|lm
operator|.
name|getLeaseByPath
argument_list|(
literal|"/a/c"
argument_list|)
argument_list|)
expr_stmt|;
name|lm
operator|.
name|removeLeaseWithPrefixPath
argument_list|(
literal|"/a"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|lm
operator|.
name|getLeaseByPath
argument_list|(
literal|"/a/b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|lm
operator|.
name|getLeaseByPath
argument_list|(
literal|"/a/c"
argument_list|)
argument_list|)
expr_stmt|;
name|lm
operator|.
name|addLease
argument_list|(
literal|"holder1"
argument_list|,
literal|"/a/b"
argument_list|)
expr_stmt|;
name|lm
operator|.
name|addLease
argument_list|(
literal|"holder2"
argument_list|,
literal|"/a/c"
argument_list|)
expr_stmt|;
name|lm
operator|.
name|removeLeaseWithPrefixPath
argument_list|(
literal|"/a/"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|lm
operator|.
name|getLeaseByPath
argument_list|(
literal|"/a/b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|lm
operator|.
name|getLeaseByPath
argument_list|(
literal|"/a/c"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Check that even if LeaseManager.checkLease is not able to relinquish    * leases, the Namenode does't enter an infinite loop while holding the FSN    * write lock and thus become unresponsive    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|)
DECL|method|testCheckLeaseNotInfiniteLoop ()
specifier|public
name|void
name|testCheckLeaseNotInfiniteLoop
parameter_list|()
block|{
name|FSDirectory
name|dir
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|FSDirectory
operator|.
name|class
argument_list|)
decl_stmt|;
name|FSNamesystem
name|fsn
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|FSNamesystem
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|fsn
operator|.
name|isRunning
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|fsn
operator|.
name|hasWriteLock
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|fsn
operator|.
name|getFSDirectory
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|LeaseManager
name|lm
init|=
operator|new
name|LeaseManager
argument_list|(
name|fsn
argument_list|)
decl_stmt|;
comment|//Make sure the leases we are going to add exceed the hard limit
name|lm
operator|.
name|setLeasePeriod
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|//Add some leases to the LeaseManager
name|lm
operator|.
name|addLease
argument_list|(
literal|"holder1"
argument_list|,
literal|"src1"
argument_list|)
expr_stmt|;
name|lm
operator|.
name|addLease
argument_list|(
literal|"holder2"
argument_list|,
literal|"src2"
argument_list|)
expr_stmt|;
name|lm
operator|.
name|addLease
argument_list|(
literal|"holder3"
argument_list|,
literal|"src3"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|lm
operator|.
name|getNumSortedLeases
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|//Initiate a call to checkLease. This should exit within the test timeout
name|lm
operator|.
name|checkLeases
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

