begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|PermissionStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|SafeModeAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|QuotaExceededException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|Snapshot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestLeaseManager
specifier|public
class|class
name|TestLeaseManager
block|{
annotation|@
name|Rule
DECL|field|timeout
specifier|public
name|Timeout
name|timeout
init|=
operator|new
name|Timeout
argument_list|(
literal|300000
argument_list|)
decl_stmt|;
DECL|field|maxLockHoldToReleaseLeaseMs
specifier|public
specifier|static
name|long
name|maxLockHoldToReleaseLeaseMs
init|=
literal|100
decl_stmt|;
annotation|@
name|Test
DECL|method|testRemoveLeases ()
specifier|public
name|void
name|testRemoveLeases
parameter_list|()
throws|throws
name|Exception
block|{
name|FSNamesystem
name|fsn
init|=
name|mock
argument_list|(
name|FSNamesystem
operator|.
name|class
argument_list|)
decl_stmt|;
name|LeaseManager
name|lm
init|=
operator|new
name|LeaseManager
argument_list|(
name|fsn
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|ids
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|INodeId
operator|.
name|ROOT_INODE_ID
operator|+
literal|1
argument_list|,
name|INodeId
operator|.
name|ROOT_INODE_ID
operator|+
literal|2
argument_list|,
name|INodeId
operator|.
name|ROOT_INODE_ID
operator|+
literal|3
argument_list|,
name|INodeId
operator|.
name|ROOT_INODE_ID
operator|+
literal|4
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|id
range|:
name|ids
control|)
block|{
name|lm
operator|.
name|addLease
argument_list|(
literal|"foo"
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|lm
operator|.
name|getINodeIdWithLeases
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|long
name|id
range|:
name|ids
control|)
block|{
name|lm
operator|.
name|removeLease
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|lm
operator|.
name|getINodeIdWithLeases
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Check that LeaseManager.checkLease release some leases    */
annotation|@
name|Test
DECL|method|testCheckLease ()
specifier|public
name|void
name|testCheckLease
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|LeaseManager
name|lm
init|=
operator|new
name|LeaseManager
argument_list|(
name|makeMockFsNameSystem
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|long
name|numLease
init|=
literal|100
decl_stmt|;
specifier|final
name|long
name|expiryTime
init|=
literal|0
decl_stmt|;
specifier|final
name|long
name|waitTime
init|=
name|expiryTime
operator|+
literal|1
decl_stmt|;
comment|//Make sure the leases we are going to add exceed the hard limit
name|lm
operator|.
name|setLeasePeriod
argument_list|(
name|expiryTime
argument_list|,
name|expiryTime
argument_list|)
expr_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|numLease
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
comment|//Add some leases to the LeaseManager
name|lm
operator|.
name|addLease
argument_list|(
literal|"holder"
operator|+
name|i
argument_list|,
name|INodeId
operator|.
name|ROOT_INODE_ID
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|numLease
argument_list|,
name|lm
operator|.
name|countLease
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|waitTime
argument_list|)
expr_stmt|;
comment|//Initiate a call to checkLease. This should exit within the test timeout
name|lm
operator|.
name|checkLeases
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|lm
operator|.
name|countLease
argument_list|()
operator|<
name|numLease
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test whether the internal lease holder name is updated properly.    */
annotation|@
name|Test
DECL|method|testInternalLeaseHolder ()
specifier|public
name|void
name|testInternalLeaseHolder
parameter_list|()
throws|throws
name|Exception
block|{
name|LeaseManager
name|lm
init|=
operator|new
name|LeaseManager
argument_list|(
name|makeMockFsNameSystem
argument_list|()
argument_list|)
decl_stmt|;
comment|// Set the hard lease limit to 500ms.
name|lm
operator|.
name|setLeasePeriod
argument_list|(
literal|100L
argument_list|,
literal|500L
argument_list|)
expr_stmt|;
name|String
name|holder
init|=
name|lm
operator|.
name|getInternalLeaseHolder
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|holder
argument_list|,
name|lm
operator|.
name|getInternalLeaseHolder
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCountPath ()
specifier|public
name|void
name|testCountPath
parameter_list|()
block|{
name|LeaseManager
name|lm
init|=
operator|new
name|LeaseManager
argument_list|(
name|makeMockFsNameSystem
argument_list|()
argument_list|)
decl_stmt|;
name|lm
operator|.
name|addLease
argument_list|(
literal|"holder1"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|lm
operator|.
name|countPath
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|lm
operator|.
name|addLease
argument_list|(
literal|"holder2"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|lm
operator|.
name|countPath
argument_list|()
argument_list|,
name|is
argument_list|(
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
name|lm
operator|.
name|addLease
argument_list|(
literal|"holder2"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Duplicate addition
name|assertThat
argument_list|(
name|lm
operator|.
name|countPath
argument_list|()
argument_list|,
name|is
argument_list|(
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|lm
operator|.
name|countPath
argument_list|()
argument_list|,
name|is
argument_list|(
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
comment|// Remove a couple of non-existing leases. countPath should not change.
name|lm
operator|.
name|removeLease
argument_list|(
literal|"holder2"
argument_list|,
name|stubInodeFile
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|lm
operator|.
name|removeLease
argument_list|(
literal|"InvalidLeaseHolder"
argument_list|,
name|stubInodeFile
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|lm
operator|.
name|countPath
argument_list|()
argument_list|,
name|is
argument_list|(
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
name|INodeFile
name|file
init|=
name|stubInodeFile
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|lm
operator|.
name|reassignLease
argument_list|(
name|lm
operator|.
name|getLease
argument_list|(
name|file
argument_list|)
argument_list|,
name|file
argument_list|,
literal|"holder2"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|lm
operator|.
name|countPath
argument_list|()
argument_list|,
name|is
argument_list|(
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
comment|// Count unchanged on reassign
name|lm
operator|.
name|removeLease
argument_list|(
literal|"holder2"
argument_list|,
name|stubInodeFile
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Remove existing
name|assertThat
argument_list|(
name|lm
operator|.
name|countPath
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Make sure the lease is restored even if only the inode has the record.    */
annotation|@
name|Test
DECL|method|testLeaseRestorationOnRestart ()
specifier|public
name|void
name|testLeaseRestorationOnRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
operator|new
name|HdfsConfiguration
argument_list|()
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|DistributedFileSystem
name|dfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// Create an empty file
name|String
name|path
init|=
literal|"/testLeaseRestorationOnRestart"
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
name|dfs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|path
argument_list|)
argument_list|)
decl_stmt|;
comment|// Remove the lease from the lease manager, but leave it in the inode.
name|FSDirectory
name|dir
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getFSDirectory
argument_list|()
decl_stmt|;
name|INodeFile
name|file
init|=
name|dir
operator|.
name|getINode
argument_list|(
name|path
argument_list|)
operator|.
name|asFile
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|leaseManager
operator|.
name|removeLease
argument_list|(
name|file
operator|.
name|getFileUnderConstructionFeature
argument_list|()
operator|.
name|getClientName
argument_list|()
argument_list|,
name|file
argument_list|)
expr_stmt|;
comment|// Save a fsimage.
name|dfs
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
operator|.
name|saveNamespace
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_LEAVE
argument_list|)
expr_stmt|;
comment|// Restart the namenode.
name|cluster
operator|.
name|restartNameNode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Check whether the lease manager has the lease
name|dir
operator|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getFSDirectory
argument_list|()
expr_stmt|;
name|file
operator|=
name|dir
operator|.
name|getINode
argument_list|(
name|path
argument_list|)
operator|.
name|asFile
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Lease should exist."
argument_list|,
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|leaseManager
operator|.
name|getLease
argument_list|(
name|file
argument_list|)
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Test leased files counts from    * {@link LeaseManager#getINodeWithLeases()},    * {@link LeaseManager#getINodeIdWithLeases()} and    * {@link LeaseManager#getINodeWithLeases(INodeDirectory)}.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testInodeWithLeases ()
specifier|public
name|void
name|testInodeWithLeases
parameter_list|()
throws|throws
name|Exception
block|{
name|FSNamesystem
name|fsNamesystem
init|=
name|makeMockFsNameSystem
argument_list|()
decl_stmt|;
name|FSDirectory
name|fsDirectory
init|=
name|fsNamesystem
operator|.
name|getFSDirectory
argument_list|()
decl_stmt|;
name|LeaseManager
name|lm
init|=
operator|new
name|LeaseManager
argument_list|(
name|fsNamesystem
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|iNodeIds
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|INodeId
operator|.
name|ROOT_INODE_ID
operator|+
literal|1
argument_list|,
name|INodeId
operator|.
name|ROOT_INODE_ID
operator|+
literal|2
argument_list|,
name|INodeId
operator|.
name|ROOT_INODE_ID
operator|+
literal|3
argument_list|,
name|INodeId
operator|.
name|ROOT_INODE_ID
operator|+
literal|4
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|PermissionStatus
name|perm
init|=
name|PermissionStatus
operator|.
name|createImmutable
argument_list|(
literal|"user"
argument_list|,
literal|"group"
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0755
argument_list|)
argument_list|)
decl_stmt|;
name|INodeDirectory
name|rootInodeDirectory
init|=
operator|new
name|INodeDirectory
argument_list|(
name|HdfsConstants
operator|.
name|GRANDFATHER_INODE_ID
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|""
argument_list|)
argument_list|,
name|perm
argument_list|,
literal|0L
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|fsDirectory
operator|.
name|getRoot
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|rootInodeDirectory
argument_list|)
expr_stmt|;
name|verifyINodeLeaseCounts
argument_list|(
name|lm
argument_list|,
name|rootInodeDirectory
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|Long
name|iNodeId
range|:
name|iNodeIds
control|)
block|{
name|INodeFile
name|iNodeFile
init|=
name|stubInodeFile
argument_list|(
name|iNodeId
argument_list|)
decl_stmt|;
name|iNodeFile
operator|.
name|setParent
argument_list|(
name|rootInodeDirectory
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|fsDirectory
operator|.
name|getInode
argument_list|(
name|iNodeId
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|iNodeFile
argument_list|)
expr_stmt|;
name|lm
operator|.
name|addLease
argument_list|(
literal|"holder_"
operator|+
name|iNodeId
argument_list|,
name|iNodeId
argument_list|)
expr_stmt|;
block|}
name|verifyINodeLeaseCounts
argument_list|(
name|lm
argument_list|,
name|rootInodeDirectory
argument_list|,
name|iNodeIds
operator|.
name|size
argument_list|()
argument_list|,
name|iNodeIds
operator|.
name|size
argument_list|()
argument_list|,
name|iNodeIds
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Long
name|iNodeId
range|:
name|iNodeIds
control|)
block|{
name|lm
operator|.
name|removeLease
argument_list|(
name|iNodeId
argument_list|)
expr_stmt|;
block|}
name|verifyINodeLeaseCounts
argument_list|(
name|lm
argument_list|,
name|rootInodeDirectory
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test leased files counts at various scale from    * {@link LeaseManager#getINodeWithLeases()},    * {@link LeaseManager#getINodeIdWithLeases()} and    * {@link LeaseManager#getINodeWithLeases(INodeDirectory)}.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|240000
argument_list|)
DECL|method|testInodeWithLeasesAtScale ()
specifier|public
name|void
name|testInodeWithLeasesAtScale
parameter_list|()
throws|throws
name|Exception
block|{
name|FSNamesystem
name|fsNamesystem
init|=
name|makeMockFsNameSystem
argument_list|()
decl_stmt|;
name|FSDirectory
name|fsDirectory
init|=
name|fsNamesystem
operator|.
name|getFSDirectory
argument_list|()
decl_stmt|;
name|LeaseManager
name|lm
init|=
operator|new
name|LeaseManager
argument_list|(
name|fsNamesystem
argument_list|)
decl_stmt|;
specifier|final
name|PermissionStatus
name|perm
init|=
name|PermissionStatus
operator|.
name|createImmutable
argument_list|(
literal|"user"
argument_list|,
literal|"group"
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0755
argument_list|)
argument_list|)
decl_stmt|;
name|INodeDirectory
name|rootInodeDirectory
init|=
operator|new
name|INodeDirectory
argument_list|(
name|HdfsConstants
operator|.
name|GRANDFATHER_INODE_ID
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|""
argument_list|)
argument_list|,
name|perm
argument_list|,
literal|0L
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|fsDirectory
operator|.
name|getRoot
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|rootInodeDirectory
argument_list|)
expr_stmt|;
comment|// Case 1: No open files
name|int
name|scale
init|=
literal|0
decl_stmt|;
name|testInodeWithLeasesAtScaleImpl
argument_list|(
name|lm
argument_list|,
name|fsDirectory
argument_list|,
name|rootInodeDirectory
argument_list|,
name|scale
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|workerCount
init|=
literal|1
init|;
name|workerCount
operator|<=
name|LeaseManager
operator|.
name|INODE_FILTER_WORKER_COUNT_MAX
operator|/
literal|2
condition|;
name|workerCount
operator|++
control|)
block|{
comment|// Case 2: Open files count is half of worker task size
name|scale
operator|=
name|workerCount
operator|*
name|LeaseManager
operator|.
name|INODE_FILTER_WORKER_TASK_MIN
operator|/
literal|2
expr_stmt|;
name|testInodeWithLeasesAtScaleImpl
argument_list|(
name|lm
argument_list|,
name|fsDirectory
argument_list|,
name|rootInodeDirectory
argument_list|,
name|scale
argument_list|)
expr_stmt|;
comment|// Case 3: Open files count is 1 less of worker task size
name|scale
operator|=
name|workerCount
operator|*
name|LeaseManager
operator|.
name|INODE_FILTER_WORKER_TASK_MIN
operator|-
literal|1
expr_stmt|;
name|testInodeWithLeasesAtScaleImpl
argument_list|(
name|lm
argument_list|,
name|fsDirectory
argument_list|,
name|rootInodeDirectory
argument_list|,
name|scale
argument_list|)
expr_stmt|;
comment|// Case 4: Open files count is equal to worker task size
name|scale
operator|=
name|workerCount
operator|*
name|LeaseManager
operator|.
name|INODE_FILTER_WORKER_TASK_MIN
expr_stmt|;
name|testInodeWithLeasesAtScaleImpl
argument_list|(
name|lm
argument_list|,
name|fsDirectory
argument_list|,
name|rootInodeDirectory
argument_list|,
name|scale
argument_list|)
expr_stmt|;
comment|// Case 5: Open files count is 1 more than worker task size
name|scale
operator|=
name|workerCount
operator|*
name|LeaseManager
operator|.
name|INODE_FILTER_WORKER_TASK_MIN
operator|+
literal|1
expr_stmt|;
name|testInodeWithLeasesAtScaleImpl
argument_list|(
name|lm
argument_list|,
name|fsDirectory
argument_list|,
name|rootInodeDirectory
argument_list|,
name|scale
argument_list|)
expr_stmt|;
block|}
comment|// Case 6: Open files count is way more than worker count
name|scale
operator|=
literal|1279
expr_stmt|;
name|testInodeWithLeasesAtScaleImpl
argument_list|(
name|lm
argument_list|,
name|fsDirectory
argument_list|,
name|rootInodeDirectory
argument_list|,
name|scale
argument_list|)
expr_stmt|;
block|}
DECL|method|testInodeWithLeasesAtScaleImpl (final LeaseManager leaseManager, final FSDirectory fsDirectory, INodeDirectory ancestorDirectory, int scale)
specifier|private
name|void
name|testInodeWithLeasesAtScaleImpl
parameter_list|(
specifier|final
name|LeaseManager
name|leaseManager
parameter_list|,
specifier|final
name|FSDirectory
name|fsDirectory
parameter_list|,
name|INodeDirectory
name|ancestorDirectory
parameter_list|,
name|int
name|scale
parameter_list|)
block|{
name|verifyINodeLeaseCounts
argument_list|(
name|leaseManager
argument_list|,
name|ancestorDirectory
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|iNodeIds
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|scale
condition|;
name|i
operator|++
control|)
block|{
name|iNodeIds
operator|.
name|add
argument_list|(
name|INodeId
operator|.
name|ROOT_INODE_ID
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Long
name|iNodeId
range|:
name|iNodeIds
control|)
block|{
name|INodeFile
name|iNodeFile
init|=
name|stubInodeFile
argument_list|(
name|iNodeId
argument_list|)
decl_stmt|;
name|iNodeFile
operator|.
name|setParent
argument_list|(
name|ancestorDirectory
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|fsDirectory
operator|.
name|getInode
argument_list|(
name|iNodeId
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|iNodeFile
argument_list|)
expr_stmt|;
name|leaseManager
operator|.
name|addLease
argument_list|(
literal|"holder_"
operator|+
name|iNodeId
argument_list|,
name|iNodeId
argument_list|)
expr_stmt|;
block|}
name|verifyINodeLeaseCounts
argument_list|(
name|leaseManager
argument_list|,
name|ancestorDirectory
argument_list|,
name|iNodeIds
operator|.
name|size
argument_list|()
argument_list|,
name|iNodeIds
operator|.
name|size
argument_list|()
argument_list|,
name|iNodeIds
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|leaseManager
operator|.
name|removeAllLeases
argument_list|()
expr_stmt|;
name|verifyINodeLeaseCounts
argument_list|(
name|leaseManager
argument_list|,
name|ancestorDirectory
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify leased INode details across lease get and release from    * {@link LeaseManager#getINodeIdWithLeases()} and    * {@link LeaseManager#getINodeWithLeases(INodeDirectory)}.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testInodeWithLeasesForAncestorDir ()
specifier|public
name|void
name|testInodeWithLeasesForAncestorDir
parameter_list|()
throws|throws
name|Exception
block|{
name|FSNamesystem
name|fsNamesystem
init|=
name|makeMockFsNameSystem
argument_list|()
decl_stmt|;
name|FSDirectory
name|fsDirectory
init|=
name|fsNamesystem
operator|.
name|getFSDirectory
argument_list|()
decl_stmt|;
name|LeaseManager
name|lm
init|=
operator|new
name|LeaseManager
argument_list|(
name|fsNamesystem
argument_list|)
decl_stmt|;
specifier|final
name|PermissionStatus
name|perm
init|=
name|PermissionStatus
operator|.
name|createImmutable
argument_list|(
literal|"user"
argument_list|,
literal|"group"
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0755
argument_list|)
argument_list|)
decl_stmt|;
name|INodeDirectory
name|rootInodeDirectory
init|=
operator|new
name|INodeDirectory
argument_list|(
name|HdfsConstants
operator|.
name|GRANDFATHER_INODE_ID
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|""
argument_list|)
argument_list|,
name|perm
argument_list|,
literal|0L
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|fsDirectory
operator|.
name|getRoot
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|rootInodeDirectory
argument_list|)
expr_stmt|;
name|AtomicInteger
name|inodeIds
init|=
operator|new
name|AtomicInteger
argument_list|(
call|(
name|int
call|)
argument_list|(
name|HdfsConstants
operator|.
name|GRANDFATHER_INODE_ID
operator|+
literal|1234
argument_list|)
argument_list|)
decl_stmt|;
name|String
index|[]
name|pathTree
init|=
operator|new
name|String
index|[]
block|{
literal|"/root.log"
block|,
literal|"/ENG/a/a1.log"
block|,
literal|"/ENG/a/b/b1.log"
block|,
literal|"/ENG/a/b/c/c1.log"
block|,
literal|"/ENG/a/b/c/c2.log"
block|,
literal|"/OPS/m/m1.log"
block|,
literal|"/OPS/m/n/n1.log"
block|,
literal|"/OPS/m/n/n2.log"
block|}
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|INode
argument_list|>
name|pathINodeMap
init|=
name|createINodeTree
argument_list|(
name|rootInodeDirectory
argument_list|,
name|pathTree
argument_list|,
name|inodeIds
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|lm
operator|.
name|getINodeIdWithLeases
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|INode
argument_list|>
name|entry
range|:
name|pathINodeMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|long
name|iNodeId
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|fsDirectory
operator|.
name|getInode
argument_list|(
name|iNodeId
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|contains
argument_list|(
literal|"log"
argument_list|)
condition|)
block|{
name|lm
operator|.
name|addLease
argument_list|(
literal|"holder_"
operator|+
name|iNodeId
argument_list|,
name|iNodeId
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|pathTree
operator|.
name|length
argument_list|,
name|lm
operator|.
name|getINodeIdWithLeases
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pathTree
operator|.
name|length
argument_list|,
name|lm
operator|.
name|getINodeWithLeases
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pathTree
operator|.
name|length
argument_list|,
name|lm
operator|.
name|getINodeWithLeases
argument_list|(
name|rootInodeDirectory
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// reset
name|lm
operator|.
name|removeAllLeases
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|filesLeased
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"root.log"
argument_list|,
literal|"a1.log"
argument_list|,
literal|"c1.log"
argument_list|,
literal|"n2.log"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|fileName
range|:
name|filesLeased
control|)
block|{
name|lm
operator|.
name|addLease
argument_list|(
literal|"holder"
argument_list|,
name|pathINodeMap
operator|.
name|get
argument_list|(
name|fileName
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|filesLeased
operator|.
name|size
argument_list|()
argument_list|,
name|lm
operator|.
name|getINodeIdWithLeases
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|filesLeased
operator|.
name|size
argument_list|()
argument_list|,
name|lm
operator|.
name|getINodeWithLeases
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|INodesInPath
argument_list|>
name|iNodeWithLeases
init|=
name|lm
operator|.
name|getINodeWithLeases
argument_list|()
decl_stmt|;
for|for
control|(
name|INodesInPath
name|iNodesInPath
range|:
name|iNodeWithLeases
control|)
block|{
name|String
name|leasedFileName
init|=
name|DFSUtil
operator|.
name|bytes2String
argument_list|(
name|iNodesInPath
operator|.
name|getLastLocalName
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|filesLeased
operator|.
name|contains
argument_list|(
name|leasedFileName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|filesLeased
operator|.
name|size
argument_list|()
argument_list|,
name|lm
operator|.
name|getINodeWithLeases
argument_list|(
name|rootInodeDirectory
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|filesLeased
operator|.
name|size
argument_list|()
operator|-
literal|2
argument_list|,
name|lm
operator|.
name|getINodeWithLeases
argument_list|(
name|pathINodeMap
operator|.
name|get
argument_list|(
literal|"ENG"
argument_list|)
operator|.
name|asDirectory
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|filesLeased
operator|.
name|size
argument_list|()
operator|-
literal|2
argument_list|,
name|lm
operator|.
name|getINodeWithLeases
argument_list|(
name|pathINodeMap
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
operator|.
name|asDirectory
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|filesLeased
operator|.
name|size
argument_list|()
operator|-
literal|3
argument_list|,
name|lm
operator|.
name|getINodeWithLeases
argument_list|(
name|pathINodeMap
operator|.
name|get
argument_list|(
literal|"c"
argument_list|)
operator|.
name|asDirectory
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|filesLeased
operator|.
name|size
argument_list|()
operator|-
literal|3
argument_list|,
name|lm
operator|.
name|getINodeWithLeases
argument_list|(
name|pathINodeMap
operator|.
name|get
argument_list|(
literal|"OPS"
argument_list|)
operator|.
name|asDirectory
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|filesLeased
operator|.
name|size
argument_list|()
operator|-
literal|3
argument_list|,
name|lm
operator|.
name|getINodeWithLeases
argument_list|(
name|pathINodeMap
operator|.
name|get
argument_list|(
literal|"n"
argument_list|)
operator|.
name|asDirectory
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|lm
operator|.
name|removeLease
argument_list|(
name|pathINodeMap
operator|.
name|get
argument_list|(
literal|"n2.log"
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|filesLeased
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|,
name|lm
operator|.
name|getINodeWithLeases
argument_list|(
name|rootInodeDirectory
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|filesLeased
operator|.
name|size
argument_list|()
operator|-
literal|4
argument_list|,
name|lm
operator|.
name|getINodeWithLeases
argument_list|(
name|pathINodeMap
operator|.
name|get
argument_list|(
literal|"n"
argument_list|)
operator|.
name|asDirectory
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|lm
operator|.
name|removeAllLeases
argument_list|()
expr_stmt|;
name|filesLeased
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|filesLeased
operator|.
name|size
argument_list|()
argument_list|,
name|lm
operator|.
name|getINodeWithLeases
argument_list|(
name|rootInodeDirectory
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyINodeLeaseCounts (final LeaseManager leaseManager, INodeDirectory ancestorDirectory, int iNodeIdWithLeaseCount, int iNodeWithLeaseCount, int iNodeUnderAncestorLeaseCount)
specifier|private
name|void
name|verifyINodeLeaseCounts
parameter_list|(
specifier|final
name|LeaseManager
name|leaseManager
parameter_list|,
name|INodeDirectory
name|ancestorDirectory
parameter_list|,
name|int
name|iNodeIdWithLeaseCount
parameter_list|,
name|int
name|iNodeWithLeaseCount
parameter_list|,
name|int
name|iNodeUnderAncestorLeaseCount
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|iNodeIdWithLeaseCount
argument_list|,
name|leaseManager
operator|.
name|getINodeIdWithLeases
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|iNodeWithLeaseCount
argument_list|,
name|leaseManager
operator|.
name|getINodeWithLeases
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|iNodeUnderAncestorLeaseCount
argument_list|,
name|leaseManager
operator|.
name|getINodeWithLeases
argument_list|(
name|ancestorDirectory
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|createINodeTree (INodeDirectory parentDir, String[] pathTree, AtomicInteger inodeId)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|INode
argument_list|>
name|createINodeTree
parameter_list|(
name|INodeDirectory
name|parentDir
parameter_list|,
name|String
index|[]
name|pathTree
parameter_list|,
name|AtomicInteger
name|inodeId
parameter_list|)
throws|throws
name|QuotaExceededException
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|INode
argument_list|>
name|pathINodeMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|pathTree
control|)
block|{
name|byte
index|[]
index|[]
name|components
init|=
name|INode
operator|.
name|getPathComponents
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|FsPermission
name|perm
init|=
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0755
argument_list|)
decl_stmt|;
name|PermissionStatus
name|permStatus
init|=
name|PermissionStatus
operator|.
name|createImmutable
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
name|perm
argument_list|)
decl_stmt|;
name|INodeDirectory
name|prev
init|=
name|parentDir
decl_stmt|;
name|INodeDirectory
name|dir
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|components
operator|.
name|length
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|component
init|=
name|components
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|component
operator|.
name|length
operator|==
literal|0
condition|)
block|{
continue|continue;
block|}
name|INode
name|existingChild
init|=
name|prev
operator|.
name|getChild
argument_list|(
name|component
argument_list|,
name|Snapshot
operator|.
name|CURRENT_STATE_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|existingChild
operator|==
literal|null
condition|)
block|{
name|String
name|dirName
init|=
name|DFSUtil
operator|.
name|bytes2String
argument_list|(
name|component
argument_list|)
decl_stmt|;
name|dir
operator|=
operator|new
name|INodeDirectory
argument_list|(
name|inodeId
operator|.
name|incrementAndGet
argument_list|()
argument_list|,
name|component
argument_list|,
name|permStatus
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|prev
operator|.
name|addChild
argument_list|(
name|dir
argument_list|,
literal|false
argument_list|,
name|Snapshot
operator|.
name|CURRENT_STATE_ID
argument_list|)
expr_stmt|;
name|pathINodeMap
operator|.
name|put
argument_list|(
name|dirName
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|prev
operator|=
name|dir
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|existingChild
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|prev
operator|=
name|existingChild
operator|.
name|asDirectory
argument_list|()
expr_stmt|;
block|}
block|}
name|PermissionStatus
name|p
init|=
operator|new
name|PermissionStatus
argument_list|(
literal|"user"
argument_list|,
literal|"group"
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fileNameBytes
init|=
name|components
index|[
name|components
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
name|String
name|fileName
init|=
name|DFSUtil
operator|.
name|bytes2String
argument_list|(
name|fileNameBytes
argument_list|)
decl_stmt|;
name|INodeFile
name|iNodeFile
init|=
operator|new
name|INodeFile
argument_list|(
name|inodeId
operator|.
name|incrementAndGet
argument_list|()
argument_list|,
name|fileNameBytes
argument_list|,
name|p
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|,
name|BlockInfo
operator|.
name|EMPTY_ARRAY
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|1L
argument_list|)
decl_stmt|;
name|iNodeFile
operator|.
name|setParent
argument_list|(
name|prev
argument_list|)
expr_stmt|;
name|pathINodeMap
operator|.
name|put
argument_list|(
name|fileName
argument_list|,
name|iNodeFile
argument_list|)
expr_stmt|;
block|}
return|return
name|pathINodeMap
return|;
block|}
DECL|method|makeMockFsNameSystem ()
specifier|private
specifier|static
name|FSNamesystem
name|makeMockFsNameSystem
parameter_list|()
block|{
name|FSDirectory
name|dir
init|=
name|mock
argument_list|(
name|FSDirectory
operator|.
name|class
argument_list|)
decl_stmt|;
name|FSNamesystem
name|fsn
init|=
name|mock
argument_list|(
name|FSNamesystem
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|fsn
operator|.
name|isRunning
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|fsn
operator|.
name|hasReadLock
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|fsn
operator|.
name|hasWriteLock
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|fsn
operator|.
name|getFSDirectory
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|fsn
operator|.
name|getMaxLockHoldToReleaseLeaseMs
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|maxLockHoldToReleaseLeaseMs
argument_list|)
expr_stmt|;
return|return
name|fsn
return|;
block|}
DECL|method|stubInodeFile (long inodeId)
specifier|private
specifier|static
name|INodeFile
name|stubInodeFile
parameter_list|(
name|long
name|inodeId
parameter_list|)
block|{
name|PermissionStatus
name|p
init|=
operator|new
name|PermissionStatus
argument_list|(
literal|"dummy"
argument_list|,
literal|"dummy"
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|INodeFile
argument_list|(
name|inodeId
argument_list|,
operator|new
name|String
argument_list|(
literal|"foo-"
operator|+
name|inodeId
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|,
name|p
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|,
name|BlockInfo
operator|.
name|EMPTY_ARRAY
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|1L
argument_list|)
return|;
block|}
block|}
end_class

end_unit

