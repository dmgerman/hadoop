begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests NameNode interaction for all XAttr APIs.  * This test suite covers restarting NN, saving new checkpoint,   * and also includes test of xattrs for symlinks.   */
end_comment

begin_class
DECL|class|TestNameNodeXAttr
specifier|public
class|class
name|TestNameNodeXAttr
extends|extends
name|FSXAttrBaseTest
block|{
DECL|field|linkParent
specifier|private
specifier|static
specifier|final
name|Path
name|linkParent
init|=
operator|new
name|Path
argument_list|(
literal|"/symdir1"
argument_list|)
decl_stmt|;
DECL|field|targetParent
specifier|private
specifier|static
specifier|final
name|Path
name|targetParent
init|=
operator|new
name|Path
argument_list|(
literal|"/symdir2"
argument_list|)
decl_stmt|;
DECL|field|link
specifier|private
specifier|static
specifier|final
name|Path
name|link
init|=
operator|new
name|Path
argument_list|(
name|linkParent
argument_list|,
literal|"link"
argument_list|)
decl_stmt|;
DECL|field|target
specifier|private
specifier|static
specifier|final
name|Path
name|target
init|=
operator|new
name|Path
argument_list|(
name|targetParent
argument_list|,
literal|"target"
argument_list|)
decl_stmt|;
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testXAttrSymlinks ()
specifier|public
name|void
name|testXAttrSymlinks
parameter_list|()
throws|throws
name|Exception
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
name|linkParent
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|targetParent
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|target
argument_list|,
literal|1024
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|0xBEEFl
argument_list|)
expr_stmt|;
name|fs
operator|.
name|createSymlink
argument_list|(
name|target
argument_list|,
name|link
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setXAttr
argument_list|(
name|target
argument_list|,
name|name1
argument_list|,
name|value1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setXAttr
argument_list|(
name|target
argument_list|,
name|name2
argument_list|,
name|value2
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|xattrs
init|=
name|fs
operator|.
name|getXAttrs
argument_list|(
name|link
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|xattrs
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|value1
argument_list|,
name|xattrs
operator|.
name|get
argument_list|(
name|name1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|value2
argument_list|,
name|xattrs
operator|.
name|get
argument_list|(
name|name2
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setXAttr
argument_list|(
name|link
argument_list|,
name|name3
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|xattrs
operator|=
name|fs
operator|.
name|getXAttrs
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|xattrs
operator|.
name|size
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|value1
argument_list|,
name|xattrs
operator|.
name|get
argument_list|(
name|name1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|value2
argument_list|,
name|xattrs
operator|.
name|get
argument_list|(
name|name2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
name|xattrs
operator|.
name|get
argument_list|(
name|name3
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|removeXAttr
argument_list|(
name|link
argument_list|,
name|name1
argument_list|)
expr_stmt|;
name|xattrs
operator|=
name|fs
operator|.
name|getXAttrs
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|xattrs
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|value2
argument_list|,
name|xattrs
operator|.
name|get
argument_list|(
name|name2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
name|xattrs
operator|.
name|get
argument_list|(
name|name3
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|removeXAttr
argument_list|(
name|target
argument_list|,
name|name3
argument_list|)
expr_stmt|;
name|xattrs
operator|=
name|fs
operator|.
name|getXAttrs
argument_list|(
name|link
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|xattrs
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|value2
argument_list|,
name|xattrs
operator|.
name|get
argument_list|(
name|name2
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|linkParent
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|targetParent
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

