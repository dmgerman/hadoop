begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.common
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|LAYOUT_VERSION
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|TestDFSUpgradeFromImage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|StartupOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|UpgradeObjectDatanode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|UpgradeObjectNamenode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|UpgradeCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|DFSAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|TestDistributedUpgrade
specifier|public
class|class
name|TestDistributedUpgrade
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestDistributedUpgrade
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|testCounter
specifier|private
name|int
name|testCounter
init|=
literal|0
decl_stmt|;
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
DECL|field|clusterId
specifier|private
name|String
name|clusterId
init|=
literal|"testClsterId"
decl_stmt|;
comment|/**    * Writes an INFO log message containing the parameters.    */
DECL|method|log (String label, int numDirs)
name|void
name|log
parameter_list|(
name|String
name|label
parameter_list|,
name|int
name|numDirs
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"============================================================"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"***TEST "
operator|+
operator|(
name|testCounter
operator|++
operator|)
operator|+
literal|"*** "
operator|+
name|label
operator|+
literal|":"
operator|+
literal|" numDirs="
operator|+
name|numDirs
argument_list|)
expr_stmt|;
block|}
comment|/**    * Attempts to start a NameNode with the given operation.  Starting    * the NameNode should throw an exception.    */
DECL|method|startNameNodeShouldFail (StartupOption operation, String exceptionSubstring)
name|void
name|startNameNodeShouldFail
parameter_list|(
name|StartupOption
name|operation
parameter_list|,
name|String
name|exceptionSubstring
parameter_list|)
block|{
try|try
block|{
comment|//cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).startupOption(operation).build(); // should fail
comment|// we set manage dirs to true as NN has to start from untar'ed image with
comment|// nn dirs set to name1 and name2
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|format
argument_list|(
literal|false
argument_list|)
operator|.
name|clusterId
argument_list|(
name|clusterId
argument_list|)
operator|.
name|startupOption
argument_list|(
name|operation
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// should fail
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"NameNode should have failed to start"
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|expected
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
name|exceptionSubstring
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Attempts to start a DataNode with the given operation.  Starting    * the DataNode should throw an exception.    */
DECL|method|startDataNodeShouldFail (StartupOption operation)
name|void
name|startDataNodeShouldFail
parameter_list|(
name|StartupOption
name|operation
parameter_list|)
block|{
try|try
block|{
name|cluster
operator|.
name|startDataNodes
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
name|operation
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// should fail
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"DataNode should have failed to start"
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|expected
parameter_list|)
block|{
comment|// expected
name|assertFalse
argument_list|(
name|cluster
operator|.
name|isDataNodeUp
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
comment|// 5 min timeout
DECL|method|testDistributedUpgrade ()
specifier|public
name|void
name|testDistributedUpgrade
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numDirs
init|=
literal|1
decl_stmt|;
name|TestDFSUpgradeFromImage
name|testImg
init|=
operator|new
name|TestDFSUpgradeFromImage
argument_list|()
decl_stmt|;
name|testImg
operator|.
name|unpackStorage
argument_list|()
expr_stmt|;
name|int
name|numDNs
init|=
name|testImg
operator|.
name|numDataNodes
decl_stmt|;
comment|// register new upgrade objects (ignore all existing)
name|UpgradeObjectCollection
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|UpgradeObjectCollection
operator|.
name|registerUpgrade
argument_list|(
operator|new
name|UO_Datanode1
argument_list|()
argument_list|)
expr_stmt|;
name|UpgradeObjectCollection
operator|.
name|registerUpgrade
argument_list|(
operator|new
name|UO_Namenode1
argument_list|()
argument_list|)
expr_stmt|;
name|UpgradeObjectCollection
operator|.
name|registerUpgrade
argument_list|(
operator|new
name|UO_Datanode2
argument_list|()
argument_list|)
expr_stmt|;
name|UpgradeObjectCollection
operator|.
name|registerUpgrade
argument_list|(
operator|new
name|UO_Namenode2
argument_list|()
argument_list|)
expr_stmt|;
name|UpgradeObjectCollection
operator|.
name|registerUpgrade
argument_list|(
operator|new
name|UO_Datanode3
argument_list|()
argument_list|)
expr_stmt|;
name|UpgradeObjectCollection
operator|.
name|registerUpgrade
argument_list|(
operator|new
name|UO_Namenode3
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|)
operator|==
literal|null
condition|)
block|{
comment|// to test to be run outside of ant
name|System
operator|.
name|setProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"build/test/data"
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_SCAN_PERIOD_HOURS_KEY
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// block scanning off
name|log
argument_list|(
literal|"NameNode start in regular mode when dustributed upgrade is required"
argument_list|,
name|numDirs
argument_list|)
expr_stmt|;
name|startNameNodeShouldFail
argument_list|(
name|StartupOption
operator|.
name|REGULAR
argument_list|,
literal|"contains an old layout version"
argument_list|)
expr_stmt|;
name|log
argument_list|(
literal|"Start NameNode only distributed upgrade"
argument_list|,
name|numDirs
argument_list|)
expr_stmt|;
comment|// cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).format(false)
comment|// .startupOption(StartupOption.UPGRADE).build();
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|format
argument_list|(
literal|false
argument_list|)
operator|.
name|clusterId
argument_list|(
name|clusterId
argument_list|)
operator|.
name|startupOption
argument_list|(
name|StartupOption
operator|.
name|UPGRADE
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|log
argument_list|(
literal|"NameNode start in regular mode when dustributed upgrade has been started"
argument_list|,
name|numDirs
argument_list|)
expr_stmt|;
name|startNameNodeShouldFail
argument_list|(
name|StartupOption
operator|.
name|REGULAR
argument_list|,
literal|"Previous distributed upgrade was not completed"
argument_list|)
expr_stmt|;
name|log
argument_list|(
literal|"NameNode rollback to the old version that require a dustributed upgrade"
argument_list|,
name|numDirs
argument_list|)
expr_stmt|;
name|startNameNodeShouldFail
argument_list|(
name|StartupOption
operator|.
name|ROLLBACK
argument_list|,
literal|"Cannot rollback to storage version -7 using this version"
argument_list|)
expr_stmt|;
name|log
argument_list|(
literal|"Normal distributed upgrade for the cluster"
argument_list|,
name|numDirs
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDNs
argument_list|)
operator|.
name|format
argument_list|(
literal|false
argument_list|)
operator|.
name|clusterId
argument_list|(
name|clusterId
argument_list|)
operator|.
name|startupOption
argument_list|(
name|StartupOption
operator|.
name|UPGRADE
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|DFSAdmin
name|dfsAdmin
init|=
operator|new
name|DFSAdmin
argument_list|()
decl_stmt|;
name|dfsAdmin
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-safemode"
block|,
literal|"wait"
block|}
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// it should be ok to start in regular mode
name|log
argument_list|(
literal|"NameCluster regular startup after the upgrade"
argument_list|,
name|numDirs
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDNs
argument_list|)
operator|.
name|clusterId
argument_list|(
name|clusterId
argument_list|)
operator|.
name|format
argument_list|(
literal|false
argument_list|)
operator|.
name|startupOption
argument_list|(
name|StartupOption
operator|.
name|REGULAR
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
operator|new
name|TestDistributedUpgrade
argument_list|()
operator|.
name|testDistributedUpgrade
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"=== DONE ==="
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|/**  * Upgrade object for data-node  */
end_comment

begin_class
DECL|class|UO_Datanode
class|class
name|UO_Datanode
extends|extends
name|UpgradeObjectDatanode
block|{
DECL|field|version
name|int
name|version
decl_stmt|;
DECL|method|UO_Datanode (int v)
name|UO_Datanode
parameter_list|(
name|int
name|v
parameter_list|)
block|{
name|this
operator|.
name|status
operator|=
operator|(
name|short
operator|)
literal|0
expr_stmt|;
name|version
operator|=
name|v
expr_stmt|;
block|}
DECL|method|getVersion ()
specifier|public
name|int
name|getVersion
parameter_list|()
block|{
return|return
name|version
return|;
block|}
DECL|method|doUpgrade ()
specifier|public
name|void
name|doUpgrade
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|status
operator|=
operator|(
name|short
operator|)
literal|100
expr_stmt|;
name|DatanodeProtocol
name|nn
init|=
name|getNamenode
argument_list|()
decl_stmt|;
name|nn
operator|.
name|processUpgradeCommand
argument_list|(
operator|new
name|UpgradeCommand
argument_list|(
name|UpgradeCommand
operator|.
name|UC_ACTION_REPORT_STATUS
argument_list|,
name|getVersion
argument_list|()
argument_list|,
name|getUpgradeStatus
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|startUpgrade ()
specifier|public
name|UpgradeCommand
name|startUpgrade
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
block|}
end_class

begin_comment
comment|/**  * Upgrade object for name-node  */
end_comment

begin_class
DECL|class|UO_Namenode
class|class
name|UO_Namenode
extends|extends
name|UpgradeObjectNamenode
block|{
DECL|field|version
name|int
name|version
decl_stmt|;
DECL|method|UO_Namenode (int v)
name|UO_Namenode
parameter_list|(
name|int
name|v
parameter_list|)
block|{
name|status
operator|=
operator|(
name|short
operator|)
literal|0
expr_stmt|;
name|version
operator|=
name|v
expr_stmt|;
block|}
DECL|method|getVersion ()
specifier|public
name|int
name|getVersion
parameter_list|()
block|{
return|return
name|version
return|;
block|}
DECL|method|processUpgradeCommand ( UpgradeCommand command)
specifier|synchronized
specifier|public
name|UpgradeCommand
name|processUpgradeCommand
parameter_list|(
name|UpgradeCommand
name|command
parameter_list|)
throws|throws
name|IOException
block|{
switch|switch
condition|(
name|command
operator|.
name|getAction
argument_list|()
condition|)
block|{
case|case
name|UpgradeCommand
operator|.
name|UC_ACTION_REPORT_STATUS
case|:
name|this
operator|.
name|status
operator|+=
name|command
operator|.
name|getCurrentStatus
argument_list|()
operator|/
literal|8
expr_stmt|;
comment|// 4 reports needed
break|break;
default|default:
name|this
operator|.
name|status
operator|++
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|completeUpgrade ()
specifier|public
name|UpgradeCommand
name|completeUpgrade
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
block|}
end_class

begin_class
DECL|class|UO_Datanode1
class|class
name|UO_Datanode1
extends|extends
name|UO_Datanode
block|{
DECL|method|UO_Datanode1 ()
name|UO_Datanode1
parameter_list|()
block|{
name|super
argument_list|(
name|LAYOUT_VERSION
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_class
DECL|class|UO_Namenode1
class|class
name|UO_Namenode1
extends|extends
name|UO_Namenode
block|{
DECL|method|UO_Namenode1 ()
name|UO_Namenode1
parameter_list|()
block|{
name|super
argument_list|(
name|LAYOUT_VERSION
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_class
DECL|class|UO_Datanode2
class|class
name|UO_Datanode2
extends|extends
name|UO_Datanode
block|{
DECL|method|UO_Datanode2 ()
name|UO_Datanode2
parameter_list|()
block|{
name|super
argument_list|(
name|LAYOUT_VERSION
operator|+
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_class
DECL|class|UO_Namenode2
class|class
name|UO_Namenode2
extends|extends
name|UO_Namenode
block|{
DECL|method|UO_Namenode2 ()
name|UO_Namenode2
parameter_list|()
block|{
name|super
argument_list|(
name|LAYOUT_VERSION
operator|+
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_class
DECL|class|UO_Datanode3
class|class
name|UO_Datanode3
extends|extends
name|UO_Datanode
block|{
DECL|method|UO_Datanode3 ()
name|UO_Datanode3
parameter_list|()
block|{
name|super
argument_list|(
name|LAYOUT_VERSION
operator|+
literal|3
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_class
DECL|class|UO_Namenode3
class|class
name|UO_Namenode3
extends|extends
name|UO_Namenode
block|{
DECL|method|UO_Namenode3 ()
name|UO_Namenode3
parameter_list|()
block|{
name|super
argument_list|(
name|LAYOUT_VERSION
operator|+
literal|3
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

