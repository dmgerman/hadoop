begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|GenerationStamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamenodeProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|BlocksWithLocations
operator|.
name|BlockWithLocations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * This class tests if block replacement request to data nodes work correctly.  */
end_comment

begin_class
DECL|class|TestGetBlocks
specifier|public
class|class
name|TestGetBlocks
extends|extends
name|TestCase
block|{
comment|/** test getBlocks */
DECL|method|testGetBlocks ()
specifier|public
name|void
name|testGetBlocks
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|CONF
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
specifier|final
name|short
name|REPLICATION_FACTOR
init|=
operator|(
name|short
operator|)
literal|2
decl_stmt|;
specifier|final
name|int
name|DEFAULT_BLOCK_SIZE
init|=
literal|1024
decl_stmt|;
specifier|final
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|CONF
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|DEFAULT_BLOCK_SIZE
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|CONF
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|REPLICATION_FACTOR
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
comment|// create a file with two blocks
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/tmp.txt"
argument_list|)
argument_list|,
name|REPLICATION_FACTOR
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|long
name|fileLen
init|=
literal|2
operator|*
name|DEFAULT_BLOCK_SIZE
decl_stmt|;
name|long
name|bytesToWrite
init|=
name|fileLen
decl_stmt|;
while|while
condition|(
name|bytesToWrite
operator|>
literal|0
condition|)
block|{
name|r
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|int
name|bytesToWriteNext
init|=
operator|(
literal|1024
operator|<
name|bytesToWrite
operator|)
condition|?
literal|1024
else|:
operator|(
name|int
operator|)
name|bytesToWrite
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|bytesToWriteNext
argument_list|)
expr_stmt|;
name|bytesToWrite
operator|-=
name|bytesToWriteNext
expr_stmt|;
block|}
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// get blocks& data nodes
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|locatedBlocks
decl_stmt|;
name|DatanodeInfo
index|[]
name|dataNodes
init|=
literal|null
decl_stmt|;
name|boolean
name|notWritten
decl_stmt|;
do|do
block|{
specifier|final
name|DFSClient
name|dfsclient
init|=
operator|new
name|DFSClient
argument_list|(
name|NameNode
operator|.
name|getAddress
argument_list|(
name|CONF
argument_list|)
argument_list|,
name|CONF
argument_list|)
decl_stmt|;
name|locatedBlocks
operator|=
name|dfsclient
operator|.
name|getNamenode
argument_list|()
operator|.
name|getBlockLocations
argument_list|(
literal|"/tmp.txt"
argument_list|,
literal|0
argument_list|,
name|fileLen
argument_list|)
operator|.
name|getLocatedBlocks
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|locatedBlocks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|notWritten
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|dataNodes
operator|=
name|locatedBlocks
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getLocations
argument_list|()
expr_stmt|;
if|if
condition|(
name|dataNodes
operator|.
name|length
operator|!=
name|REPLICATION_FACTOR
condition|)
block|{
name|notWritten
operator|=
literal|true
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{             }
break|break;
block|}
block|}
block|}
do|while
condition|(
name|notWritten
condition|)
do|;
comment|// get RPC client to namenode
name|InetSocketAddress
name|addr
init|=
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
name|cluster
operator|.
name|getNameNodePort
argument_list|()
argument_list|)
decl_stmt|;
name|NamenodeProtocol
name|namenode
init|=
name|NameNodeProxies
operator|.
name|createProxy
argument_list|(
name|CONF
argument_list|,
name|NameNode
operator|.
name|getUri
argument_list|(
name|addr
argument_list|)
argument_list|,
name|NamenodeProtocol
operator|.
name|class
argument_list|)
operator|.
name|getProxy
argument_list|()
decl_stmt|;
comment|// get blocks of size fileLen from dataNodes[0]
name|BlockWithLocations
index|[]
name|locs
decl_stmt|;
name|locs
operator|=
name|namenode
operator|.
name|getBlocks
argument_list|(
name|dataNodes
index|[
literal|0
index|]
argument_list|,
name|fileLen
argument_list|)
operator|.
name|getBlocks
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|locs
operator|.
name|length
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|locs
index|[
literal|0
index|]
operator|.
name|getDatanodes
argument_list|()
operator|.
name|length
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|locs
index|[
literal|1
index|]
operator|.
name|getDatanodes
argument_list|()
operator|.
name|length
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// get blocks of size BlockSize from dataNodes[0]
name|locs
operator|=
name|namenode
operator|.
name|getBlocks
argument_list|(
name|dataNodes
index|[
literal|0
index|]
argument_list|,
name|DEFAULT_BLOCK_SIZE
argument_list|)
operator|.
name|getBlocks
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|locs
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|locs
index|[
literal|0
index|]
operator|.
name|getDatanodes
argument_list|()
operator|.
name|length
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// get blocks of size 1 from dataNodes[0]
name|locs
operator|=
name|namenode
operator|.
name|getBlocks
argument_list|(
name|dataNodes
index|[
literal|0
index|]
argument_list|,
literal|1
argument_list|)
operator|.
name|getBlocks
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|locs
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|locs
index|[
literal|0
index|]
operator|.
name|getDatanodes
argument_list|()
operator|.
name|length
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// get blocks of size 0 from dataNodes[0]
name|getBlocksWithException
argument_list|(
name|namenode
argument_list|,
name|dataNodes
index|[
literal|0
index|]
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// get blocks of size -1 from dataNodes[0]
name|getBlocksWithException
argument_list|(
name|namenode
argument_list|,
name|dataNodes
index|[
literal|0
index|]
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// get blocks of size BlockSize from a non-existent datanode
name|getBlocksWithException
argument_list|(
name|namenode
argument_list|,
operator|new
name|DatanodeInfo
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getBlocksWithException (NamenodeProtocol namenode, DatanodeInfo datanode, long size)
specifier|private
name|void
name|getBlocksWithException
parameter_list|(
name|NamenodeProtocol
name|namenode
parameter_list|,
name|DatanodeInfo
name|datanode
parameter_list|,
name|long
name|size
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|getException
init|=
literal|false
decl_stmt|;
try|try
block|{
name|namenode
operator|.
name|getBlocks
argument_list|(
operator|new
name|DatanodeInfo
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|e
parameter_list|)
block|{
name|getException
operator|=
literal|true
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getClassName
argument_list|()
operator|.
name|contains
argument_list|(
literal|"HadoopIllegalArgumentException"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|getException
argument_list|)
expr_stmt|;
block|}
DECL|method|testBlockKey ()
specifier|public
name|void
name|testBlockKey
parameter_list|()
block|{
name|Map
argument_list|<
name|Block
argument_list|,
name|Long
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|Block
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|Random
name|RAN
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|final
name|long
name|seed
init|=
name|RAN
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"seed="
operator|+
name|seed
argument_list|)
expr_stmt|;
name|RAN
operator|.
name|setSeed
argument_list|(
name|seed
argument_list|)
expr_stmt|;
name|long
index|[]
name|blkids
init|=
operator|new
name|long
index|[
literal|10
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|blkids
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|blkids
index|[
name|i
index|]
operator|=
literal|1000L
operator|+
name|RAN
operator|.
name|nextInt
argument_list|(
literal|100000
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
operator|new
name|Block
argument_list|(
name|blkids
index|[
name|i
index|]
argument_list|,
literal|0
argument_list|,
name|blkids
index|[
name|i
index|]
argument_list|)
argument_list|,
name|blkids
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"map="
operator|+
name|map
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|","
argument_list|,
literal|"\n  "
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|blkids
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Block
name|b
init|=
operator|new
name|Block
argument_list|(
name|blkids
index|[
name|i
index|]
argument_list|,
literal|0
argument_list|,
name|GenerationStamp
operator|.
name|GRANDFATHER_GENERATION_STAMP
argument_list|)
decl_stmt|;
name|Long
name|v
init|=
name|map
operator|.
name|get
argument_list|(
name|b
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|b
operator|+
literal|" => "
operator|+
name|v
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|blkids
index|[
name|i
index|]
argument_list|,
name|v
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * @param args    */
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
operator|(
operator|new
name|TestGetBlocks
argument_list|()
operator|)
operator|.
name|testGetBlocks
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

