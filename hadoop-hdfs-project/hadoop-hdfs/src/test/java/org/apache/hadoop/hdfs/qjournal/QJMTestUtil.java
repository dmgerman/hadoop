begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.qjournal
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|client
operator|.
name|QuorumJournalManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|EditLogInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|EditLogOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSEditLogOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSEditLogOpCodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NNStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNodeAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamespaceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_class
DECL|class|QJMTestUtil
specifier|public
specifier|abstract
class|class
name|QJMTestUtil
block|{
DECL|field|FAKE_NSINFO
specifier|public
specifier|static
specifier|final
name|NamespaceInfo
name|FAKE_NSINFO
init|=
operator|new
name|NamespaceInfo
argument_list|(
literal|12345
argument_list|,
literal|"mycluster"
argument_list|,
literal|"my-bp"
argument_list|,
literal|0L
argument_list|,
literal|0
argument_list|)
decl_stmt|;
DECL|field|JID
specifier|public
specifier|static
specifier|final
name|String
name|JID
init|=
literal|"test-journal"
decl_stmt|;
DECL|method|createTxnData (int startTxn, int numTxns)
specifier|public
specifier|static
name|byte
index|[]
name|createTxnData
parameter_list|(
name|int
name|startTxn
parameter_list|,
name|int
name|numTxns
parameter_list|)
throws|throws
name|Exception
block|{
name|DataOutputBuffer
name|buf
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|FSEditLogOp
operator|.
name|Writer
name|writer
init|=
operator|new
name|FSEditLogOp
operator|.
name|Writer
argument_list|(
name|buf
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|txid
init|=
name|startTxn
init|;
name|txid
operator|<
name|startTxn
operator|+
name|numTxns
condition|;
name|txid
operator|++
control|)
block|{
name|FSEditLogOp
name|op
init|=
name|NameNodeAdapter
operator|.
name|createMkdirOp
argument_list|(
literal|"tx "
operator|+
name|txid
argument_list|)
decl_stmt|;
name|op
operator|.
name|setTransactionId
argument_list|(
name|txid
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeOp
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
return|return
name|Arrays
operator|.
name|copyOf
argument_list|(
name|buf
operator|.
name|getData
argument_list|()
argument_list|,
name|buf
operator|.
name|getLength
argument_list|()
argument_list|)
return|;
block|}
DECL|method|writeSegment (MiniJournalCluster cluster, QuorumJournalManager qjm, int startTxId, int numTxns, boolean finalize)
specifier|public
specifier|static
name|void
name|writeSegment
parameter_list|(
name|MiniJournalCluster
name|cluster
parameter_list|,
name|QuorumJournalManager
name|qjm
parameter_list|,
name|int
name|startTxId
parameter_list|,
name|int
name|numTxns
parameter_list|,
name|boolean
name|finalize
parameter_list|)
throws|throws
name|IOException
block|{
name|EditLogOutputStream
name|stm
init|=
name|qjm
operator|.
name|startLogSegment
argument_list|(
name|startTxId
argument_list|)
decl_stmt|;
comment|// Should create in-progress
name|assertExistsInQuorum
argument_list|(
name|cluster
argument_list|,
name|NNStorage
operator|.
name|getInProgressEditsFileName
argument_list|(
name|startTxId
argument_list|)
argument_list|)
expr_stmt|;
name|writeTxns
argument_list|(
name|stm
argument_list|,
name|startTxId
argument_list|,
name|numTxns
argument_list|)
expr_stmt|;
if|if
condition|(
name|finalize
condition|)
block|{
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
name|qjm
operator|.
name|finalizeLogSegment
argument_list|(
name|startTxId
argument_list|,
name|startTxId
operator|+
name|numTxns
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|writeOp (EditLogOutputStream stm, long txid)
specifier|public
specifier|static
name|void
name|writeOp
parameter_list|(
name|EditLogOutputStream
name|stm
parameter_list|,
name|long
name|txid
parameter_list|)
throws|throws
name|IOException
block|{
name|FSEditLogOp
name|op
init|=
name|NameNodeAdapter
operator|.
name|createMkdirOp
argument_list|(
literal|"tx "
operator|+
name|txid
argument_list|)
decl_stmt|;
name|op
operator|.
name|setTransactionId
argument_list|(
name|txid
argument_list|)
expr_stmt|;
name|stm
operator|.
name|write
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
DECL|method|writeTxns (EditLogOutputStream stm, int startTxId, int numTxns)
specifier|public
specifier|static
name|void
name|writeTxns
parameter_list|(
name|EditLogOutputStream
name|stm
parameter_list|,
name|int
name|startTxId
parameter_list|,
name|int
name|numTxns
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|long
name|txid
init|=
name|startTxId
init|;
name|txid
operator|<
name|startTxId
operator|+
name|numTxns
condition|;
name|txid
operator|++
control|)
block|{
name|writeOp
argument_list|(
name|stm
argument_list|,
name|txid
argument_list|)
expr_stmt|;
block|}
name|stm
operator|.
name|setReadyToFlush
argument_list|()
expr_stmt|;
name|stm
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
comment|/**    * Verify that the given list of streams contains exactly the range of    * transactions specified, inclusive.    */
DECL|method|verifyEdits (List<EditLogInputStream> streams, int firstTxnId, int lastTxnId)
specifier|public
specifier|static
name|void
name|verifyEdits
parameter_list|(
name|List
argument_list|<
name|EditLogInputStream
argument_list|>
name|streams
parameter_list|,
name|int
name|firstTxnId
parameter_list|,
name|int
name|lastTxnId
parameter_list|)
throws|throws
name|IOException
block|{
name|Iterator
argument_list|<
name|EditLogInputStream
argument_list|>
name|iter
init|=
name|streams
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|iter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|EditLogInputStream
name|stream
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|expected
init|=
name|firstTxnId
init|;
name|expected
operator|<=
name|lastTxnId
condition|;
name|expected
operator|++
control|)
block|{
name|FSEditLogOp
name|op
init|=
name|stream
operator|.
name|readOp
argument_list|()
decl_stmt|;
while|while
condition|(
name|op
operator|==
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Expected to find txid "
operator|+
name|expected
operator|+
literal|", "
operator|+
literal|"but no more streams available to read from"
argument_list|,
name|iter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|stream
operator|=
name|iter
operator|.
name|next
argument_list|()
expr_stmt|;
name|op
operator|=
name|stream
operator|.
name|readOp
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|FSEditLogOpCodes
operator|.
name|OP_MKDIR
argument_list|,
name|op
operator|.
name|opCode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|op
operator|.
name|getTransactionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertNull
argument_list|(
name|stream
operator|.
name|readOp
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Expected no more txns after "
operator|+
name|lastTxnId
operator|+
literal|" but more streams are available"
argument_list|,
name|iter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertExistsInQuorum (MiniJournalCluster cluster, String fname)
specifier|public
specifier|static
name|void
name|assertExistsInQuorum
parameter_list|(
name|MiniJournalCluster
name|cluster
parameter_list|,
name|String
name|fname
parameter_list|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|File
name|dir
init|=
name|cluster
operator|.
name|getCurrentDir
argument_list|(
name|i
argument_list|,
name|JID
argument_list|)
decl_stmt|;
if|if
condition|(
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|fname
argument_list|)
operator|.
name|exists
argument_list|()
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"File "
operator|+
name|fname
operator|+
literal|" should exist in a quorum of dirs"
argument_list|,
name|count
operator|>=
name|cluster
operator|.
name|getQuorumSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

