begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.cblock
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Longs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|digest
operator|.
name|DigestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|RandomStringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|jscsiHelper
operator|.
name|CBlockIStorageImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|jscsiHelper
operator|.
name|CBlockTargetMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|jscsiHelper
operator|.
name|ContainerCacheFlusher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|MiniOzoneCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|ozoneimpl
operator|.
name|TestOzoneContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|XceiverClientManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|XceiverClientSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|Pipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|protocolPB
operator|.
name|StorageContainerLocationProtocolClientSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|storage
operator|.
name|ContainerProtocolCalls
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|CBlockConfigKeys
operator|.
name|DFS_CBLOCK_DISK_CACHE_PATH_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|CBlockConfigKeys
operator|.
name|DFS_CBLOCK_TRACE_IO
import|;
end_import

begin_comment
comment|/**  * This class tests the cblock storage layer.  */
end_comment

begin_class
DECL|class|TestStorageImpl
specifier|public
class|class
name|TestStorageImpl
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestStorageImpl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|GB
specifier|private
specifier|final
specifier|static
name|long
name|GB
init|=
literal|1024
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
DECL|field|KB
specifier|private
specifier|final
specifier|static
name|int
name|KB
init|=
literal|1024
decl_stmt|;
DECL|field|cluster
specifier|private
specifier|static
name|MiniOzoneCluster
name|cluster
decl_stmt|;
DECL|field|config
specifier|private
specifier|static
name|OzoneConfiguration
name|config
decl_stmt|;
specifier|private
specifier|static
name|StorageContainerLocationProtocolClientSideTranslatorPB
DECL|field|storageContainerLocationClient
name|storageContainerLocationClient
decl_stmt|;
DECL|field|xceiverClientManager
specifier|private
specifier|static
name|XceiverClientManager
name|xceiverClientManager
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|init ()
specifier|public
specifier|static
name|void
name|init
parameter_list|()
throws|throws
name|IOException
block|{
name|config
operator|=
operator|new
name|OzoneConfiguration
argument_list|()
expr_stmt|;
name|URL
name|p
init|=
name|config
operator|.
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|p
operator|.
name|getPath
argument_list|()
operator|.
name|concat
argument_list|(
name|TestOzoneContainer
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
name|config
operator|.
name|set
argument_list|(
name|DFS_CBLOCK_DISK_CACHE_PATH_KEY
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|config
operator|.
name|setBoolean
argument_list|(
name|DFS_CBLOCK_TRACE_IO
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniOzoneCluster
operator|.
name|Builder
argument_list|(
name|config
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|setHandlerType
argument_list|(
literal|"distributed"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|storageContainerLocationClient
operator|=
name|cluster
operator|.
name|createStorageContainerLocationClient
argument_list|()
expr_stmt|;
name|xceiverClientManager
operator|=
operator|new
name|XceiverClientManager
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|shutdown ()
specifier|public
specifier|static
name|void
name|shutdown
parameter_list|()
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|IOUtils
operator|.
name|cleanup
argument_list|(
literal|null
argument_list|,
name|storageContainerLocationClient
argument_list|,
name|cluster
argument_list|)
expr_stmt|;
block|}
comment|/**    * getContainerPipelines creates a set of containers and returns the    * Pipelines that define those containers.    *    * @param count - Number of containers to create.    * @return - List of Pipelines.    * @throws IOException    */
DECL|method|getContainerPipeline (int count)
specifier|private
name|List
argument_list|<
name|Pipeline
argument_list|>
name|getContainerPipeline
parameter_list|(
name|int
name|count
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Pipeline
argument_list|>
name|containerPipelines
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|count
condition|;
name|x
operator|++
control|)
block|{
name|String
name|traceID
init|=
literal|"trace"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|String
name|containerName
init|=
literal|"container"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|Pipeline
name|pipeline
init|=
name|storageContainerLocationClient
operator|.
name|allocateContainer
argument_list|(
name|containerName
argument_list|)
decl_stmt|;
name|XceiverClientSpi
name|client
init|=
name|xceiverClientManager
operator|.
name|acquireClient
argument_list|(
name|pipeline
argument_list|)
decl_stmt|;
name|ContainerProtocolCalls
operator|.
name|createContainer
argument_list|(
name|client
argument_list|,
name|traceID
argument_list|)
expr_stmt|;
comment|// This step is needed since we set private data on pipelines, when we
comment|// read the list from CBlockServer. So we mimic that action here.
name|pipeline
operator|.
name|setData
argument_list|(
name|Longs
operator|.
name|toByteArray
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
name|containerPipelines
operator|.
name|add
argument_list|(
name|pipeline
argument_list|)
expr_stmt|;
block|}
return|return
name|containerPipelines
return|;
block|}
annotation|@
name|Test
DECL|method|testStorageImplBasicReadWrite ()
specifier|public
name|void
name|testStorageImplBasicReadWrite
parameter_list|()
throws|throws
name|Exception
block|{
name|OzoneConfiguration
name|oConfig
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|String
name|userName
init|=
literal|"user"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|volumeName
init|=
literal|"volume"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|long
name|volumeSize
init|=
literal|50L
operator|*
operator|(
literal|1024L
operator|*
literal|1024L
operator|*
literal|1024L
operator|)
decl_stmt|;
name|int
name|blockSize
init|=
literal|4096
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|RandomStringUtils
operator|.
name|randomAlphanumeric
argument_list|(
literal|10
operator|*
operator|(
literal|1024
operator|*
literal|1024
operator|)
argument_list|)
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|String
name|hash
init|=
name|DigestUtils
operator|.
name|sha256Hex
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|CBlockTargetMetrics
name|metrics
init|=
name|CBlockTargetMetrics
operator|.
name|create
argument_list|()
decl_stmt|;
name|ContainerCacheFlusher
name|flusher
init|=
operator|new
name|ContainerCacheFlusher
argument_list|(
name|oConfig
argument_list|,
name|xceiverClientManager
argument_list|,
name|metrics
argument_list|)
decl_stmt|;
name|CBlockIStorageImpl
name|ozoneStore
init|=
name|CBlockIStorageImpl
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUserName
argument_list|(
name|userName
argument_list|)
operator|.
name|setVolumeName
argument_list|(
name|volumeName
argument_list|)
operator|.
name|setVolumeSize
argument_list|(
name|volumeSize
argument_list|)
operator|.
name|setBlockSize
argument_list|(
name|blockSize
argument_list|)
operator|.
name|setContainerList
argument_list|(
name|getContainerPipeline
argument_list|(
literal|10
argument_list|)
argument_list|)
operator|.
name|setClientManager
argument_list|(
name|xceiverClientManager
argument_list|)
operator|.
name|setConf
argument_list|(
name|oConfig
argument_list|)
operator|.
name|setFlusher
argument_list|(
name|flusher
argument_list|)
operator|.
name|setCBlockTargetMetrics
argument_list|(
name|metrics
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ozoneStore
operator|.
name|write
argument_list|(
name|data
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Currently, local cache is a placeholder and does not actually handle
comment|// read and write. So the below write is guaranteed to fail. After
comment|// CBlockLocalCache is properly implemented, we should uncomment the
comment|// following lines
comment|// TODO uncomment the following.
comment|//byte[] newData = new byte[10 * 1024 * 1024];
comment|//ozoneStore.read(newData, 0);
comment|//String newHash = DigestUtils.sha256Hex(newData);
comment|//Assert.assertEquals("hashes don't match.", hash, newHash);
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
operator|!
name|ozoneStore
operator|.
name|getCache
argument_list|()
operator|.
name|isDirtyCache
argument_list|()
argument_list|,
literal|100
argument_list|,
literal|20
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|ozoneStore
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

