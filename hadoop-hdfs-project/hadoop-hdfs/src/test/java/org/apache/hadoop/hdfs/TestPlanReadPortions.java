begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|StripedBlockUtil
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|StripedBlockUtil
operator|.
name|ReadPortion
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestPlanReadPortions
specifier|public
class|class
name|TestPlanReadPortions
block|{
comment|// We only support this as num of data blocks. It might be good enough for now
comment|// for the purpose, even not flexible yet for any number in a schema.
DECL|field|GROUP_SIZE
specifier|private
specifier|final
name|short
name|GROUP_SIZE
init|=
literal|3
decl_stmt|;
DECL|field|CELLSIZE
specifier|private
specifier|final
name|int
name|CELLSIZE
init|=
literal|128
operator|*
literal|1024
decl_stmt|;
DECL|method|testPlanReadPortions (int startInBlk, int length, int bufferOffset, int[] readLengths, int[] offsetsInBlock, int[][] bufferOffsets, int[][] bufferLengths)
specifier|private
name|void
name|testPlanReadPortions
parameter_list|(
name|int
name|startInBlk
parameter_list|,
name|int
name|length
parameter_list|,
name|int
name|bufferOffset
parameter_list|,
name|int
index|[]
name|readLengths
parameter_list|,
name|int
index|[]
name|offsetsInBlock
parameter_list|,
name|int
index|[]
index|[]
name|bufferOffsets
parameter_list|,
name|int
index|[]
index|[]
name|bufferLengths
parameter_list|)
block|{
name|ReadPortion
index|[]
name|results
init|=
name|StripedBlockUtil
operator|.
name|planReadPortions
argument_list|(
name|GROUP_SIZE
argument_list|,
name|CELLSIZE
argument_list|,
name|startInBlk
argument_list|,
name|length
argument_list|,
name|bufferOffset
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|GROUP_SIZE
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|GROUP_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|readLengths
index|[
name|i
index|]
argument_list|,
name|results
index|[
name|i
index|]
operator|.
name|readLength
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|offsetsInBlock
index|[
name|i
index|]
argument_list|,
name|results
index|[
name|i
index|]
operator|.
name|startOffsetInBlock
argument_list|)
expr_stmt|;
specifier|final
name|int
index|[]
name|bOffsets
init|=
name|results
index|[
name|i
index|]
operator|.
name|getOffsets
argument_list|()
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|bufferOffsets
index|[
name|i
index|]
argument_list|,
name|bOffsets
argument_list|)
expr_stmt|;
specifier|final
name|int
index|[]
name|bLengths
init|=
name|results
index|[
name|i
index|]
operator|.
name|getLengths
argument_list|()
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|bufferLengths
index|[
name|i
index|]
argument_list|,
name|bLengths
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test {@link StripedBlockUtil#planReadPortions}    */
annotation|@
name|Test
DECL|method|testPlanReadPortions ()
specifier|public
name|void
name|testPlanReadPortions
parameter_list|()
block|{
comment|/**      * start block offset is 0, read cellSize - 10      */
name|testPlanReadPortions
argument_list|(
literal|0
argument_list|,
name|CELLSIZE
operator|-
literal|10
argument_list|,
literal|0
argument_list|,
operator|new
name|int
index|[]
block|{
name|CELLSIZE
operator|-
literal|10
block|,
literal|0
block|,
literal|0
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
argument_list|,
operator|new
name|int
index|[]
index|[]
block|{
operator|new
name|int
index|[]
block|{
literal|0
block|}
block|,
operator|new
name|int
index|[]
block|{}
block|,
operator|new
name|int
index|[]
block|{}
block|}
argument_list|,
operator|new
name|int
index|[]
index|[]
block|{
operator|new
name|int
index|[]
block|{
name|CELLSIZE
operator|-
literal|10
block|}
block|,
operator|new
name|int
index|[]
block|{}
block|,
operator|new
name|int
index|[]
block|{}
block|}
argument_list|)
expr_stmt|;
comment|/**      * start block offset is 0, read 3 * cellSize      */
name|testPlanReadPortions
argument_list|(
literal|0
argument_list|,
name|GROUP_SIZE
operator|*
name|CELLSIZE
argument_list|,
literal|0
argument_list|,
operator|new
name|int
index|[]
block|{
name|CELLSIZE
block|,
name|CELLSIZE
block|,
name|CELLSIZE
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
argument_list|,
operator|new
name|int
index|[]
index|[]
block|{
operator|new
name|int
index|[]
block|{
literal|0
block|}
block|,
operator|new
name|int
index|[]
block|{
name|CELLSIZE
block|}
block|,
operator|new
name|int
index|[]
block|{
name|CELLSIZE
operator|*
literal|2
block|}
block|}
argument_list|,
operator|new
name|int
index|[]
index|[]
block|{
operator|new
name|int
index|[]
block|{
name|CELLSIZE
block|}
block|,
operator|new
name|int
index|[]
block|{
name|CELLSIZE
block|}
block|,
operator|new
name|int
index|[]
block|{
name|CELLSIZE
block|}
block|}
argument_list|)
expr_stmt|;
comment|/**      * start block offset is 0, read cellSize + 10      */
name|testPlanReadPortions
argument_list|(
literal|0
argument_list|,
name|CELLSIZE
operator|+
literal|10
argument_list|,
literal|0
argument_list|,
operator|new
name|int
index|[]
block|{
name|CELLSIZE
block|,
literal|10
block|,
literal|0
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
argument_list|,
operator|new
name|int
index|[]
index|[]
block|{
operator|new
name|int
index|[]
block|{
literal|0
block|}
block|,
operator|new
name|int
index|[]
block|{
name|CELLSIZE
block|}
block|,
operator|new
name|int
index|[]
block|{}
block|}
argument_list|,
operator|new
name|int
index|[]
index|[]
block|{
operator|new
name|int
index|[]
block|{
name|CELLSIZE
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|10
block|}
block|,
operator|new
name|int
index|[]
block|{}
block|}
argument_list|)
expr_stmt|;
comment|/**      * start block offset is 0, read 5 * cellSize + 10, buffer start offset is 100      */
name|testPlanReadPortions
argument_list|(
literal|0
argument_list|,
literal|5
operator|*
name|CELLSIZE
operator|+
literal|10
argument_list|,
literal|100
argument_list|,
operator|new
name|int
index|[]
block|{
name|CELLSIZE
operator|*
literal|2
block|,
name|CELLSIZE
operator|*
literal|2
block|,
name|CELLSIZE
operator|+
literal|10
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
argument_list|,
operator|new
name|int
index|[]
index|[]
block|{
operator|new
name|int
index|[]
block|{
literal|100
block|,
literal|100
operator|+
name|CELLSIZE
operator|*
name|GROUP_SIZE
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|100
operator|+
name|CELLSIZE
block|,
literal|100
operator|+
name|CELLSIZE
operator|*
literal|4
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|100
operator|+
name|CELLSIZE
operator|*
literal|2
block|,
literal|100
operator|+
name|CELLSIZE
operator|*
literal|5
block|}
block|}
argument_list|,
operator|new
name|int
index|[]
index|[]
block|{
operator|new
name|int
index|[]
block|{
name|CELLSIZE
block|,
name|CELLSIZE
block|}
block|,
operator|new
name|int
index|[]
block|{
name|CELLSIZE
block|,
name|CELLSIZE
block|}
block|,
operator|new
name|int
index|[]
block|{
name|CELLSIZE
block|,
literal|10
block|}
block|}
argument_list|)
expr_stmt|;
comment|/**      * start block offset is 2, read 3 * cellSize      */
name|testPlanReadPortions
argument_list|(
literal|2
argument_list|,
name|GROUP_SIZE
operator|*
name|CELLSIZE
argument_list|,
literal|100
argument_list|,
operator|new
name|int
index|[]
block|{
name|CELLSIZE
block|,
name|CELLSIZE
block|,
name|CELLSIZE
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|0
block|,
literal|0
block|}
argument_list|,
operator|new
name|int
index|[]
index|[]
block|{
operator|new
name|int
index|[]
block|{
literal|100
block|,
literal|100
operator|+
name|GROUP_SIZE
operator|*
name|CELLSIZE
operator|-
literal|2
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|100
operator|+
name|CELLSIZE
operator|-
literal|2
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|100
operator|+
name|CELLSIZE
operator|*
literal|2
operator|-
literal|2
block|}
block|}
argument_list|,
operator|new
name|int
index|[]
index|[]
block|{
operator|new
name|int
index|[]
block|{
name|CELLSIZE
operator|-
literal|2
block|,
literal|2
block|}
block|,
operator|new
name|int
index|[]
block|{
name|CELLSIZE
block|}
block|,
operator|new
name|int
index|[]
block|{
name|CELLSIZE
block|}
block|}
argument_list|)
expr_stmt|;
comment|/**      * start block offset is 2, read 3 * cellSize + 10      */
name|testPlanReadPortions
argument_list|(
literal|2
argument_list|,
name|GROUP_SIZE
operator|*
name|CELLSIZE
operator|+
literal|10
argument_list|,
literal|0
argument_list|,
operator|new
name|int
index|[]
block|{
name|CELLSIZE
operator|+
literal|10
block|,
name|CELLSIZE
block|,
name|CELLSIZE
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|0
block|,
literal|0
block|}
argument_list|,
operator|new
name|int
index|[]
index|[]
block|{
operator|new
name|int
index|[]
block|{
literal|0
block|,
name|GROUP_SIZE
operator|*
name|CELLSIZE
operator|-
literal|2
block|}
block|,
operator|new
name|int
index|[]
block|{
name|CELLSIZE
operator|-
literal|2
block|}
block|,
operator|new
name|int
index|[]
block|{
name|CELLSIZE
operator|*
literal|2
operator|-
literal|2
block|}
block|}
argument_list|,
operator|new
name|int
index|[]
index|[]
block|{
operator|new
name|int
index|[]
block|{
name|CELLSIZE
operator|-
literal|2
block|,
literal|12
block|}
block|,
operator|new
name|int
index|[]
block|{
name|CELLSIZE
block|}
block|,
operator|new
name|int
index|[]
block|{
name|CELLSIZE
block|}
block|}
argument_list|)
expr_stmt|;
comment|/**      * start block offset is cellSize * 2 - 1, read 5 * cellSize + 10      */
name|testPlanReadPortions
argument_list|(
name|CELLSIZE
operator|*
literal|2
operator|-
literal|1
argument_list|,
literal|5
operator|*
name|CELLSIZE
operator|+
literal|10
argument_list|,
literal|0
argument_list|,
operator|new
name|int
index|[]
block|{
name|CELLSIZE
operator|*
literal|2
block|,
name|CELLSIZE
operator|+
literal|10
block|,
name|CELLSIZE
operator|*
literal|2
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
name|CELLSIZE
block|,
name|CELLSIZE
operator|-
literal|1
block|,
literal|0
block|}
argument_list|,
operator|new
name|int
index|[]
index|[]
block|{
operator|new
name|int
index|[]
block|{
name|CELLSIZE
operator|+
literal|1
block|,
literal|4
operator|*
name|CELLSIZE
operator|+
literal|1
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|2
operator|*
name|CELLSIZE
operator|+
literal|1
block|,
literal|5
operator|*
name|CELLSIZE
operator|+
literal|1
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|3
operator|*
name|CELLSIZE
operator|+
literal|1
block|}
block|}
argument_list|,
operator|new
name|int
index|[]
index|[]
block|{
operator|new
name|int
index|[]
block|{
name|CELLSIZE
block|,
name|CELLSIZE
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
name|CELLSIZE
block|,
literal|9
block|}
block|,
operator|new
name|int
index|[]
block|{
name|CELLSIZE
block|,
name|CELLSIZE
block|}
block|}
argument_list|)
expr_stmt|;
comment|/**      * start block offset is cellSize * 6 - 1, read 7 * cellSize + 10      */
name|testPlanReadPortions
argument_list|(
name|CELLSIZE
operator|*
literal|6
operator|-
literal|1
argument_list|,
literal|7
operator|*
name|CELLSIZE
operator|+
literal|10
argument_list|,
literal|0
argument_list|,
operator|new
name|int
index|[]
block|{
name|CELLSIZE
operator|*
literal|3
block|,
name|CELLSIZE
operator|*
literal|2
operator|+
literal|9
block|,
name|CELLSIZE
operator|*
literal|2
operator|+
literal|1
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
name|CELLSIZE
operator|*
literal|2
block|,
name|CELLSIZE
operator|*
literal|2
block|,
name|CELLSIZE
operator|*
literal|2
operator|-
literal|1
block|}
argument_list|,
operator|new
name|int
index|[]
index|[]
block|{
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|3
operator|*
name|CELLSIZE
operator|+
literal|1
block|,
literal|6
operator|*
name|CELLSIZE
operator|+
literal|1
block|}
block|,
operator|new
name|int
index|[]
block|{
name|CELLSIZE
operator|+
literal|1
block|,
literal|4
operator|*
name|CELLSIZE
operator|+
literal|1
block|,
literal|7
operator|*
name|CELLSIZE
operator|+
literal|1
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|2
operator|*
name|CELLSIZE
operator|+
literal|1
block|,
literal|5
operator|*
name|CELLSIZE
operator|+
literal|1
block|}
block|}
argument_list|,
operator|new
name|int
index|[]
index|[]
block|{
operator|new
name|int
index|[]
block|{
name|CELLSIZE
block|,
name|CELLSIZE
block|,
name|CELLSIZE
block|}
block|,
operator|new
name|int
index|[]
block|{
name|CELLSIZE
block|,
name|CELLSIZE
block|,
literal|9
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
name|CELLSIZE
block|,
name|CELLSIZE
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

