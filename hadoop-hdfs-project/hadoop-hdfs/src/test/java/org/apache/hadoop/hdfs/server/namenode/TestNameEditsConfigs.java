begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NNStorage
operator|.
name|NameNodeDirType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_comment
comment|/**  * This class tests various combinations of dfs.namenode.name.dir   * and dfs.namenode.edits.dir configurations.  */
end_comment

begin_class
DECL|class|TestNameEditsConfigs
specifier|public
class|class
name|TestNameEditsConfigs
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FSEditLog
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|SEED
specifier|static
specifier|final
name|long
name|SEED
init|=
literal|0xDEADBEEFL
decl_stmt|;
DECL|field|BLOCK_SIZE
specifier|static
specifier|final
name|int
name|BLOCK_SIZE
init|=
literal|4096
decl_stmt|;
DECL|field|FILE_SIZE
specifier|static
specifier|final
name|int
name|FILE_SIZE
init|=
literal|8192
decl_stmt|;
DECL|field|NUM_DATA_NODES
specifier|static
specifier|final
name|int
name|NUM_DATA_NODES
init|=
literal|3
decl_stmt|;
DECL|field|FILE_IMAGE
specifier|static
specifier|final
name|String
name|FILE_IMAGE
init|=
literal|"current/fsimage"
decl_stmt|;
DECL|field|FILE_EDITS
specifier|static
specifier|final
name|String
name|FILE_EDITS
init|=
literal|"current/edits"
decl_stmt|;
DECL|field|replication
name|short
name|replication
init|=
literal|3
decl_stmt|;
DECL|field|base_dir
specifier|private
specifier|final
name|File
name|base_dir
init|=
operator|new
name|File
argument_list|(
name|PathUtils
operator|.
name|getTestDir
argument_list|(
name|TestNameEditsConfigs
operator|.
name|class
argument_list|)
argument_list|,
literal|"dfs"
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|base_dir
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|base_dir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot remove directory "
operator|+
name|base_dir
argument_list|)
throw|;
block|}
block|}
DECL|method|checkImageAndEditsFilesExistence (File dir, boolean shouldHaveImages, boolean shouldHaveEdits)
name|void
name|checkImageAndEditsFilesExistence
parameter_list|(
name|File
name|dir
parameter_list|,
name|boolean
name|shouldHaveImages
parameter_list|,
name|boolean
name|shouldHaveEdits
parameter_list|)
throws|throws
name|IOException
block|{
name|FSImageTransactionalStorageInspector
name|ins
init|=
name|inspect
argument_list|(
name|dir
argument_list|)
decl_stmt|;
if|if
condition|(
name|shouldHaveImages
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Expect images in "
operator|+
name|dir
argument_list|,
name|ins
operator|.
name|foundImages
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
literal|"Expect no images in "
operator|+
name|dir
argument_list|,
name|ins
operator|.
name|foundImages
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|FileJournalManager
operator|.
name|EditLogFile
argument_list|>
name|editlogs
init|=
name|FileJournalManager
operator|.
name|matchEditLogs
argument_list|(
operator|new
name|File
argument_list|(
name|dir
argument_list|,
literal|"current"
argument_list|)
operator|.
name|listFiles
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|shouldHaveEdits
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Expect edits in "
operator|+
name|dir
argument_list|,
name|editlogs
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
literal|"Expect no edits in "
operator|+
name|dir
argument_list|,
name|editlogs
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkFile (FileSystem fileSys, Path name, int repl)
specifier|private
name|void
name|checkFile
parameter_list|(
name|FileSystem
name|fileSys
parameter_list|,
name|Path
name|name
parameter_list|,
name|int
name|repl
parameter_list|)
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
name|fileSys
operator|.
name|exists
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|replication
init|=
name|fileSys
operator|.
name|getFileStatus
argument_list|(
name|name
argument_list|)
operator|.
name|getReplication
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"replication for "
operator|+
name|name
argument_list|,
name|repl
argument_list|,
name|replication
argument_list|)
expr_stmt|;
name|long
name|size
init|=
name|fileSys
operator|.
name|getContentSummary
argument_list|(
name|name
argument_list|)
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"file size for "
operator|+
name|name
argument_list|,
name|size
argument_list|,
name|FILE_SIZE
argument_list|)
expr_stmt|;
block|}
DECL|method|cleanupFile (FileSystem fileSys, Path name)
specifier|private
name|void
name|cleanupFile
parameter_list|(
name|FileSystem
name|fileSys
parameter_list|,
name|Path
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
name|fileSys
operator|.
name|exists
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|fileSys
operator|.
name|delete
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|fileSys
operator|.
name|exists
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|startSecondaryNameNode (Configuration conf )
name|SecondaryNameNode
name|startSecondaryNameNode
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_KEY
argument_list|,
literal|"0.0.0.0:0"
argument_list|)
expr_stmt|;
return|return
operator|new
name|SecondaryNameNode
argument_list|(
name|conf
argument_list|)
return|;
block|}
comment|/**    * Test various configuration options of dfs.namenode.name.dir and dfs.namenode.edits.dir    * The test creates files and restarts cluster with different configs.    * 1. Starts cluster with shared name and edits dirs    * 2. Restarts cluster by adding additional (different) name and edits dirs    * 3. Restarts cluster by removing shared name and edits dirs by allowing to     *    start using separate name and edits dirs    * 4. Restart cluster by adding shared directory again, but make sure we     *    do not read any stale image or edits.     * All along the test, we create and delete files at reach restart to make    * sure we are reading proper edits and image.    * @throws Exception     */
annotation|@
name|Test
DECL|method|testNameEditsConfigs ()
specifier|public
name|void
name|testNameEditsConfigs
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"TestNameEditsConfigs1"
argument_list|)
decl_stmt|;
name|Path
name|file2
init|=
operator|new
name|Path
argument_list|(
literal|"TestNameEditsConfigs2"
argument_list|)
decl_stmt|;
name|Path
name|file3
init|=
operator|new
name|Path
argument_list|(
literal|"TestNameEditsConfigs3"
argument_list|)
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
name|SecondaryNameNode
name|secondary
init|=
literal|null
decl_stmt|;
name|Configuration
name|conf
init|=
literal|null
decl_stmt|;
name|FileSystem
name|fileSys
init|=
literal|null
decl_stmt|;
specifier|final
name|File
name|newNameDir
init|=
operator|new
name|File
argument_list|(
name|base_dir
argument_list|,
literal|"name"
argument_list|)
decl_stmt|;
specifier|final
name|File
name|newEditsDir
init|=
operator|new
name|File
argument_list|(
name|base_dir
argument_list|,
literal|"edits"
argument_list|)
decl_stmt|;
specifier|final
name|File
name|nameAndEdits
init|=
operator|new
name|File
argument_list|(
name|base_dir
argument_list|,
literal|"name_and_edits"
argument_list|)
decl_stmt|;
specifier|final
name|File
name|checkpointNameDir
init|=
operator|new
name|File
argument_list|(
name|base_dir
argument_list|,
literal|"secondname"
argument_list|)
decl_stmt|;
specifier|final
name|File
name|checkpointEditsDir
init|=
operator|new
name|File
argument_list|(
name|base_dir
argument_list|,
literal|"secondedits"
argument_list|)
decl_stmt|;
specifier|final
name|File
name|checkpointNameAndEdits
init|=
operator|new
name|File
argument_list|(
name|base_dir
argument_list|,
literal|"second_name_and_edits"
argument_list|)
decl_stmt|;
name|ImmutableList
argument_list|<
name|File
argument_list|>
name|allCurrentDirs
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
operator|new
name|File
argument_list|(
name|nameAndEdits
argument_list|,
literal|"current"
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|newNameDir
argument_list|,
literal|"current"
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|newEditsDir
argument_list|,
literal|"current"
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|checkpointNameAndEdits
argument_list|,
literal|"current"
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|checkpointNameDir
argument_list|,
literal|"current"
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|checkpointEditsDir
argument_list|,
literal|"current"
argument_list|)
argument_list|)
decl_stmt|;
name|ImmutableList
argument_list|<
name|File
argument_list|>
name|imageCurrentDirs
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
operator|new
name|File
argument_list|(
name|nameAndEdits
argument_list|,
literal|"current"
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|newNameDir
argument_list|,
literal|"current"
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|checkpointNameAndEdits
argument_list|,
literal|"current"
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|checkpointNameDir
argument_list|,
literal|"current"
argument_list|)
argument_list|)
decl_stmt|;
comment|// Start namenode with same dfs.namenode.name.dir and dfs.namenode.edits.dir
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_NAME_DIR_KEY
argument_list|,
name|nameAndEdits
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_EDITS_DIR_KEY
argument_list|,
name|nameAndEdits
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_CHECKPOINT_DIR_KEY
argument_list|,
name|checkpointNameAndEdits
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_CHECKPOINT_EDITS_DIR_KEY
argument_list|,
name|checkpointNameAndEdits
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|replication
operator|=
operator|(
name|short
operator|)
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_REPLICATION_KEY
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// Manage our own dfs directories
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|NUM_DATA_NODES
argument_list|)
operator|.
name|manageNameDfsDirs
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|secondary
operator|=
name|startSecondaryNameNode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fileSys
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
try|try
block|{
name|assertTrue
argument_list|(
operator|!
name|fileSys
operator|.
name|exists
argument_list|(
name|file1
argument_list|)
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|,
name|FILE_SIZE
argument_list|,
name|FILE_SIZE
argument_list|,
name|BLOCK_SIZE
argument_list|,
operator|(
name|short
operator|)
name|replication
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|checkFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|,
name|replication
argument_list|)
expr_stmt|;
name|secondary
operator|.
name|doCheckpoint
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|fileSys
operator|.
name|close
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|secondary
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|// Start namenode with additional dfs.namenode.name.dir and dfs.namenode.edits.dir
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|newNameDir
operator|.
name|mkdir
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|newEditsDir
operator|.
name|mkdir
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_NAME_DIR_KEY
argument_list|,
name|nameAndEdits
operator|.
name|getPath
argument_list|()
operator|+
literal|","
operator|+
name|newNameDir
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_EDITS_DIR_KEY
argument_list|,
name|nameAndEdits
operator|.
name|getPath
argument_list|()
operator|+
literal|","
operator|+
name|newEditsDir
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_CHECKPOINT_DIR_KEY
argument_list|,
name|checkpointNameDir
operator|.
name|getPath
argument_list|()
operator|+
literal|","
operator|+
name|checkpointNameAndEdits
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_CHECKPOINT_EDITS_DIR_KEY
argument_list|,
name|checkpointEditsDir
operator|.
name|getPath
argument_list|()
operator|+
literal|","
operator|+
name|checkpointNameAndEdits
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|replication
operator|=
operator|(
name|short
operator|)
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_REPLICATION_KEY
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// Manage our own dfs directories. Do not format.
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|NUM_DATA_NODES
argument_list|)
operator|.
name|format
argument_list|(
literal|false
argument_list|)
operator|.
name|manageNameDfsDirs
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|secondary
operator|=
name|startSecondaryNameNode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fileSys
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
try|try
block|{
name|assertTrue
argument_list|(
name|fileSys
operator|.
name|exists
argument_list|(
name|file1
argument_list|)
argument_list|)
expr_stmt|;
name|checkFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|,
name|replication
argument_list|)
expr_stmt|;
name|cleanupFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fileSys
argument_list|,
name|file2
argument_list|,
name|FILE_SIZE
argument_list|,
name|FILE_SIZE
argument_list|,
name|BLOCK_SIZE
argument_list|,
operator|(
name|short
operator|)
name|replication
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|checkFile
argument_list|(
name|fileSys
argument_list|,
name|file2
argument_list|,
name|replication
argument_list|)
expr_stmt|;
name|secondary
operator|.
name|doCheckpoint
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|fileSys
operator|.
name|close
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|secondary
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|FSImageTestUtil
operator|.
name|assertParallelFilesAreIdentical
argument_list|(
name|allCurrentDirs
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"VERSION"
argument_list|)
argument_list|)
expr_stmt|;
name|FSImageTestUtil
operator|.
name|assertSameNewestImage
argument_list|(
name|imageCurrentDirs
argument_list|)
expr_stmt|;
comment|// Now remove common directory both have and start namenode with
comment|// separate name and edits dirs
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_NAME_DIR_KEY
argument_list|,
name|newNameDir
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_EDITS_DIR_KEY
argument_list|,
name|newEditsDir
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_CHECKPOINT_DIR_KEY
argument_list|,
name|checkpointNameDir
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_CHECKPOINT_EDITS_DIR_KEY
argument_list|,
name|checkpointEditsDir
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|replication
operator|=
operator|(
name|short
operator|)
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_REPLICATION_KEY
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|NUM_DATA_NODES
argument_list|)
operator|.
name|format
argument_list|(
literal|false
argument_list|)
operator|.
name|manageNameDfsDirs
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|secondary
operator|=
name|startSecondaryNameNode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fileSys
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
try|try
block|{
name|assertTrue
argument_list|(
operator|!
name|fileSys
operator|.
name|exists
argument_list|(
name|file1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fileSys
operator|.
name|exists
argument_list|(
name|file2
argument_list|)
argument_list|)
expr_stmt|;
name|checkFile
argument_list|(
name|fileSys
argument_list|,
name|file2
argument_list|,
name|replication
argument_list|)
expr_stmt|;
name|cleanupFile
argument_list|(
name|fileSys
argument_list|,
name|file2
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fileSys
argument_list|,
name|file3
argument_list|,
name|FILE_SIZE
argument_list|,
name|FILE_SIZE
argument_list|,
name|BLOCK_SIZE
argument_list|,
operator|(
name|short
operator|)
name|replication
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|checkFile
argument_list|(
name|fileSys
argument_list|,
name|file3
argument_list|,
name|replication
argument_list|)
expr_stmt|;
name|secondary
operator|.
name|doCheckpoint
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|fileSys
operator|.
name|close
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|secondary
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|// No edit logs in new name dir
name|checkImageAndEditsFilesExistence
argument_list|(
name|newNameDir
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkImageAndEditsFilesExistence
argument_list|(
name|newEditsDir
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkImageAndEditsFilesExistence
argument_list|(
name|checkpointNameDir
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkImageAndEditsFilesExistence
argument_list|(
name|checkpointEditsDir
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Add old name_and_edits dir. File system should not read image or edits
comment|// from old dir
name|assertTrue
argument_list|(
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
operator|new
name|File
argument_list|(
name|nameAndEdits
argument_list|,
literal|"current"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
operator|new
name|File
argument_list|(
name|checkpointNameAndEdits
argument_list|,
literal|"current"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_NAME_DIR_KEY
argument_list|,
name|nameAndEdits
operator|.
name|getPath
argument_list|()
operator|+
literal|","
operator|+
name|newNameDir
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_EDITS_DIR_KEY
argument_list|,
name|nameAndEdits
operator|+
literal|","
operator|+
name|newEditsDir
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_CHECKPOINT_DIR_KEY
argument_list|,
name|checkpointNameDir
operator|.
name|getPath
argument_list|()
operator|+
literal|","
operator|+
name|checkpointNameAndEdits
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_CHECKPOINT_EDITS_DIR_KEY
argument_list|,
name|checkpointEditsDir
operator|.
name|getPath
argument_list|()
operator|+
literal|","
operator|+
name|checkpointNameAndEdits
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|replication
operator|=
operator|(
name|short
operator|)
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_REPLICATION_KEY
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|NUM_DATA_NODES
argument_list|)
operator|.
name|format
argument_list|(
literal|false
argument_list|)
operator|.
name|manageNameDfsDirs
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|secondary
operator|=
name|startSecondaryNameNode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fileSys
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
try|try
block|{
name|assertTrue
argument_list|(
operator|!
name|fileSys
operator|.
name|exists
argument_list|(
name|file1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|fileSys
operator|.
name|exists
argument_list|(
name|file2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fileSys
operator|.
name|exists
argument_list|(
name|file3
argument_list|)
argument_list|)
expr_stmt|;
name|checkFile
argument_list|(
name|fileSys
argument_list|,
name|file3
argument_list|,
name|replication
argument_list|)
expr_stmt|;
name|secondary
operator|.
name|doCheckpoint
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|fileSys
operator|.
name|close
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|secondary
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|checkImageAndEditsFilesExistence
argument_list|(
name|nameAndEdits
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkImageAndEditsFilesExistence
argument_list|(
name|checkpointNameAndEdits
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|inspect (File storageDir)
specifier|private
name|FSImageTransactionalStorageInspector
name|inspect
parameter_list|(
name|File
name|storageDir
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|FSImageTestUtil
operator|.
name|inspectStorageDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|storageDir
argument_list|,
literal|"current"
argument_list|)
argument_list|,
name|NameNodeDirType
operator|.
name|IMAGE_AND_EDITS
argument_list|)
return|;
block|}
comment|/**    * Test edits.dir.required configuration options.    * 1. Directory present in dfs.namenode.edits.dir.required but not in    *    dfs.namenode.edits.dir. Expected to fail.    * 2. Directory present in both dfs.namenode.edits.dir.required and    *    dfs.namenode.edits.dir. Expected to succeed.    * 3. Directory present only in dfs.namenode.edits.dir. Expected to    *    succeed.    */
annotation|@
name|Test
DECL|method|testNameEditsRequiredConfigs ()
specifier|public
name|void
name|testNameEditsRequiredConfigs
parameter_list|()
throws|throws
name|IOException
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
name|File
name|nameAndEditsDir
init|=
operator|new
name|File
argument_list|(
name|base_dir
argument_list|,
literal|"name_and_edits"
argument_list|)
decl_stmt|;
name|File
name|nameAndEditsDir2
init|=
operator|new
name|File
argument_list|(
name|base_dir
argument_list|,
literal|"name_and_edits2"
argument_list|)
decl_stmt|;
name|File
name|nameDir
init|=
operator|new
name|File
argument_list|(
name|base_dir
argument_list|,
literal|"name"
argument_list|)
decl_stmt|;
comment|// 1
comment|// Bad configuration. Add a directory to dfs.namenode.edits.dir.required
comment|// without adding it to dfs.namenode.edits.dir.
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_NAME_DIR_KEY
argument_list|,
name|nameDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_EDITS_DIR_REQUIRED_KEY
argument_list|,
name|nameAndEditsDir2
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_EDITS_DIR_KEY
argument_list|,
name|nameAndEditsDir
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|NUM_DATA_NODES
argument_list|)
operator|.
name|manageNameDfsDirs
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Successfully started cluster but should not have been able to."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
comment|// expect to fail
name|LOG
operator|.
name|info
argument_list|(
literal|"EXPECTED: cluster start failed due to bad configuration"
operator|+
name|iae
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
comment|// 2
comment|// Good configuration. Add a directory to both dfs.namenode.edits.dir.required
comment|// and dfs.namenode.edits.dir.
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_NAME_DIR_KEY
argument_list|,
name|nameDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_EDITS_DIR_KEY
argument_list|,
name|nameAndEditsDir
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|nameAndEditsDir2
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_EDITS_DIR_REQUIRED_KEY
argument_list|,
name|nameAndEditsDir2
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|NUM_DATA_NODES
argument_list|)
operator|.
name|manageNameDfsDirs
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|// 3
comment|// Good configuration. Adds a directory to dfs.namenode.edits.dir but not to
comment|// dfs.namenode.edits.dir.required.
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_NAME_DIR_KEY
argument_list|,
name|nameDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_EDITS_DIR_KEY
argument_list|,
name|nameAndEditsDir
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|nameAndEditsDir2
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|NUM_DATA_NODES
argument_list|)
operator|.
name|manageNameDfsDirs
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Test various configuration options of dfs.namenode.name.dir and dfs.namenode.edits.dir    * This test tries to simulate failure scenarios.    * 1. Start cluster with shared name and edits dir    * 2. Restart cluster by adding separate name and edits dirs    * 3. Restart cluster by removing shared name and edits dir    * 4. Restart cluster with old shared name and edits dir, but only latest     *    name dir. This should fail since we don't have latest edits dir    * 5. Restart cluster with old shared name and edits dir, but only latest    *    edits dir. This should succeed since the latest edits will have    *    segments leading all the way from the image in name_and_edits.    */
annotation|@
name|Test
DECL|method|testNameEditsConfigsFailure ()
specifier|public
name|void
name|testNameEditsConfigsFailure
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"TestNameEditsConfigs1"
argument_list|)
decl_stmt|;
name|Path
name|file2
init|=
operator|new
name|Path
argument_list|(
literal|"TestNameEditsConfigs2"
argument_list|)
decl_stmt|;
name|Path
name|file3
init|=
operator|new
name|Path
argument_list|(
literal|"TestNameEditsConfigs3"
argument_list|)
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
name|Configuration
name|conf
init|=
literal|null
decl_stmt|;
name|FileSystem
name|fileSys
init|=
literal|null
decl_stmt|;
name|File
name|nameOnlyDir
init|=
operator|new
name|File
argument_list|(
name|base_dir
argument_list|,
literal|"name"
argument_list|)
decl_stmt|;
name|File
name|editsOnlyDir
init|=
operator|new
name|File
argument_list|(
name|base_dir
argument_list|,
literal|"edits"
argument_list|)
decl_stmt|;
name|File
name|nameAndEditsDir
init|=
operator|new
name|File
argument_list|(
name|base_dir
argument_list|,
literal|"name_and_edits"
argument_list|)
decl_stmt|;
comment|// 1
comment|// Start namenode with same dfs.namenode.name.dir and dfs.namenode.edits.dir
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_NAME_DIR_KEY
argument_list|,
name|nameAndEditsDir
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_EDITS_DIR_KEY
argument_list|,
name|nameAndEditsDir
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|replication
operator|=
operator|(
name|short
operator|)
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_REPLICATION_KEY
argument_list|,
literal|3
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Manage our own dfs directories
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|NUM_DATA_NODES
argument_list|)
operator|.
name|manageNameDfsDirs
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
comment|// Check that the dir has a VERSION file
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|nameAndEditsDir
argument_list|,
literal|"current/VERSION"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|fileSys
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|fileSys
operator|.
name|exists
argument_list|(
name|file1
argument_list|)
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|,
name|FILE_SIZE
argument_list|,
name|FILE_SIZE
argument_list|,
name|BLOCK_SIZE
argument_list|,
operator|(
name|short
operator|)
name|replication
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|checkFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|,
name|replication
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fileSys
operator|.
name|close
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|// 2
comment|// Start namenode with additional dfs.namenode.name.dir and dfs.namenode.edits.dir
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|nameOnlyDir
operator|.
name|mkdir
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|editsOnlyDir
operator|.
name|mkdir
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_NAME_DIR_KEY
argument_list|,
name|nameAndEditsDir
operator|.
name|getPath
argument_list|()
operator|+
literal|","
operator|+
name|nameOnlyDir
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_EDITS_DIR_KEY
argument_list|,
name|nameAndEditsDir
operator|.
name|getPath
argument_list|()
operator|+
literal|","
operator|+
name|editsOnlyDir
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|replication
operator|=
operator|(
name|short
operator|)
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_REPLICATION_KEY
argument_list|,
literal|3
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Manage our own dfs directories. Do not format.
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|NUM_DATA_NODES
argument_list|)
operator|.
name|format
argument_list|(
literal|false
argument_list|)
operator|.
name|manageNameDfsDirs
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
comment|// Check that the dirs have a VERSION file
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|nameAndEditsDir
argument_list|,
literal|"current/VERSION"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|nameOnlyDir
argument_list|,
literal|"current/VERSION"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|editsOnlyDir
argument_list|,
literal|"current/VERSION"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|fileSys
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|fileSys
operator|.
name|exists
argument_list|(
name|file1
argument_list|)
argument_list|)
expr_stmt|;
name|checkFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|,
name|replication
argument_list|)
expr_stmt|;
name|cleanupFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fileSys
argument_list|,
name|file2
argument_list|,
name|FILE_SIZE
argument_list|,
name|FILE_SIZE
argument_list|,
name|BLOCK_SIZE
argument_list|,
operator|(
name|short
operator|)
name|replication
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|checkFile
argument_list|(
name|fileSys
argument_list|,
name|file2
argument_list|,
name|replication
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fileSys
operator|.
name|close
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|// 3
comment|// Now remove common directory both have and start namenode with
comment|// separate name and edits dirs
try|try
block|{
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_NAME_DIR_KEY
argument_list|,
name|nameOnlyDir
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_EDITS_DIR_KEY
argument_list|,
name|editsOnlyDir
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|replication
operator|=
operator|(
name|short
operator|)
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_REPLICATION_KEY
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|NUM_DATA_NODES
argument_list|)
operator|.
name|format
argument_list|(
literal|false
argument_list|)
operator|.
name|manageNameDfsDirs
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fileSys
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|fileSys
operator|.
name|exists
argument_list|(
name|file1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fileSys
operator|.
name|exists
argument_list|(
name|file2
argument_list|)
argument_list|)
expr_stmt|;
name|checkFile
argument_list|(
name|fileSys
argument_list|,
name|file2
argument_list|,
name|replication
argument_list|)
expr_stmt|;
name|cleanupFile
argument_list|(
name|fileSys
argument_list|,
name|file2
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fileSys
argument_list|,
name|file3
argument_list|,
name|FILE_SIZE
argument_list|,
name|FILE_SIZE
argument_list|,
name|BLOCK_SIZE
argument_list|,
operator|(
name|short
operator|)
name|replication
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|checkFile
argument_list|(
name|fileSys
argument_list|,
name|file3
argument_list|,
name|replication
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fileSys
operator|.
name|close
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|// 4
comment|// Add old shared directory for name and edits along with latest name
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_NAME_DIR_KEY
argument_list|,
name|nameOnlyDir
operator|.
name|getPath
argument_list|()
operator|+
literal|","
operator|+
name|nameAndEditsDir
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_EDITS_DIR_KEY
argument_list|,
name|nameAndEditsDir
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|replication
operator|=
operator|(
name|short
operator|)
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_REPLICATION_KEY
argument_list|,
literal|3
argument_list|)
expr_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|NUM_DATA_NODES
argument_list|)
operator|.
name|format
argument_list|(
literal|false
argument_list|)
operator|.
name|manageNameDfsDirs
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Successfully started cluster but should not have been able to."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// expect to fail
name|LOG
operator|.
name|info
argument_list|(
literal|"EXPECTED: cluster start failed due to missing "
operator|+
literal|"latest edits dir"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
comment|// 5
comment|// Add old shared directory for name and edits along with latest edits.
comment|// This is OK, since the latest edits will have segments leading all
comment|// the way from the image in name_and_edits.
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_NAME_DIR_KEY
argument_list|,
name|nameAndEditsDir
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_EDITS_DIR_KEY
argument_list|,
name|editsOnlyDir
operator|.
name|getPath
argument_list|()
operator|+
literal|","
operator|+
name|nameAndEditsDir
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|replication
operator|=
operator|(
name|short
operator|)
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_REPLICATION_KEY
argument_list|,
literal|3
argument_list|)
expr_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|NUM_DATA_NODES
argument_list|)
operator|.
name|format
argument_list|(
literal|false
argument_list|)
operator|.
name|manageNameDfsDirs
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|fileSys
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|fileSys
operator|.
name|exists
argument_list|(
name|file1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fileSys
operator|.
name|exists
argument_list|(
name|file2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fileSys
operator|.
name|exists
argument_list|(
name|file3
argument_list|)
argument_list|)
expr_stmt|;
name|checkFile
argument_list|(
name|fileSys
argument_list|,
name|file3
argument_list|,
name|replication
argument_list|)
expr_stmt|;
name|cleanupFile
argument_list|(
name|fileSys
argument_list|,
name|file3
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fileSys
argument_list|,
name|file3
argument_list|,
name|FILE_SIZE
argument_list|,
name|FILE_SIZE
argument_list|,
name|BLOCK_SIZE
argument_list|,
operator|(
name|short
operator|)
name|replication
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|checkFile
argument_list|(
name|fileSys
argument_list|,
name|file3
argument_list|,
name|replication
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fileSys
operator|.
name|close
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test dfs.namenode.checkpoint.dir and dfs.namenode.checkpoint.edits.dir    * should tolerate white space between values.    */
annotation|@
name|Test
DECL|method|testCheckPointDirsAreTrimmed ()
specifier|public
name|void
name|testCheckPointDirsAreTrimmed
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
name|SecondaryNameNode
name|secondary
init|=
literal|null
decl_stmt|;
name|File
name|checkpointNameDir1
init|=
operator|new
name|File
argument_list|(
name|base_dir
argument_list|,
literal|"chkptName1"
argument_list|)
decl_stmt|;
name|File
name|checkpointEditsDir1
init|=
operator|new
name|File
argument_list|(
name|base_dir
argument_list|,
literal|"chkptEdits1"
argument_list|)
decl_stmt|;
name|File
name|checkpointNameDir2
init|=
operator|new
name|File
argument_list|(
name|base_dir
argument_list|,
literal|"chkptName2"
argument_list|)
decl_stmt|;
name|File
name|checkpointEditsDir2
init|=
operator|new
name|File
argument_list|(
name|base_dir
argument_list|,
literal|"chkptEdits2"
argument_list|)
decl_stmt|;
name|File
name|nameDir
init|=
operator|new
name|File
argument_list|(
name|base_dir
argument_list|,
literal|"name1"
argument_list|)
decl_stmt|;
name|String
name|whiteSpace
init|=
literal|"  \n   \n  "
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_NAME_DIR_KEY
argument_list|,
name|nameDir
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_CHECKPOINT_DIR_KEY
argument_list|,
name|whiteSpace
operator|+
name|checkpointNameDir1
operator|.
name|getPath
argument_list|()
operator|+
name|whiteSpace
argument_list|,
name|whiteSpace
operator|+
name|checkpointNameDir2
operator|.
name|getPath
argument_list|()
operator|+
name|whiteSpace
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_CHECKPOINT_EDITS_DIR_KEY
argument_list|,
name|whiteSpace
operator|+
name|checkpointEditsDir1
operator|.
name|getPath
argument_list|()
operator|+
name|whiteSpace
argument_list|,
name|whiteSpace
operator|+
name|checkpointEditsDir2
operator|.
name|getPath
argument_list|()
operator|+
name|whiteSpace
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|manageNameDfsDirs
argument_list|(
literal|false
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|3
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|secondary
operator|=
name|startSecondaryNameNode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|secondary
operator|.
name|doCheckpoint
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_NAME_DIR_KEY
operator|+
literal|" must be trimmed "
argument_list|,
name|checkpointNameDir1
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_NAME_DIR_KEY
operator|+
literal|" must be trimmed "
argument_list|,
name|checkpointNameDir2
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_CHECKPOINT_EDITS_DIR_KEY
operator|+
literal|" must be trimmed "
argument_list|,
name|checkpointEditsDir1
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_CHECKPOINT_EDITS_DIR_KEY
operator|+
literal|" must be trimmed "
argument_list|,
name|checkpointEditsDir2
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|secondary
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

