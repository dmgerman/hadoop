begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpMethod
operator|.
name|GET
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpResponseStatus
operator|.
name|OK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpVersion
operator|.
name|HTTP_1_1
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|DelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|DelegationTokenFetcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|HftpFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|URLConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|client
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|bootstrap
operator|.
name|ServerBootstrap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ChannelBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ChannelBuffers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelFutureListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandlerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelPipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelPipelineFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|Channels
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ExceptionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|MessageEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|SimpleChannelUpstreamHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|nio
operator|.
name|NioServerSocketChannelFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|DefaultHttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpChunkAggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpRequestDecoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpResponseEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpResponseStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|UnmodifiableIterator
import|;
end_import

begin_class
DECL|class|TestDelegationTokenRemoteFetcher
specifier|public
class|class
name|TestDelegationTokenRemoteFetcher
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|TestDelegationTokenRemoteFetcher
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|EXP_DATE
specifier|private
specifier|static
specifier|final
name|String
name|EXP_DATE
init|=
literal|"124123512361236"
decl_stmt|;
DECL|field|tokenFile
specifier|private
specifier|static
specifier|final
name|String
name|tokenFile
init|=
literal|"http.file.dta"
decl_stmt|;
DECL|field|connectionFactory
specifier|private
specifier|static
specifier|final
name|URLConnectionFactory
name|connectionFactory
init|=
name|URLConnectionFactory
operator|.
name|DEFAULT_CONNECTION_FACTORY
decl_stmt|;
DECL|field|httpPort
specifier|private
name|int
name|httpPort
decl_stmt|;
DECL|field|serviceUrl
specifier|private
name|URI
name|serviceUrl
decl_stmt|;
DECL|field|fileSys
specifier|private
name|FileSystem
name|fileSys
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|bootstrap
specifier|private
name|ServerBootstrap
name|bootstrap
decl_stmt|;
DECL|field|testToken
specifier|private
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|testToken
decl_stmt|;
DECL|field|assertionError
specifier|private
specifier|volatile
name|AssertionError
name|assertionError
decl_stmt|;
annotation|@
name|Before
DECL|method|init ()
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|fileSys
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|httpPort
operator|=
name|NetUtils
operator|.
name|getFreeSocketPort
argument_list|()
expr_stmt|;
name|serviceUrl
operator|=
operator|new
name|URI
argument_list|(
literal|"http://localhost:"
operator|+
name|httpPort
argument_list|)
expr_stmt|;
name|testToken
operator|=
name|createToken
argument_list|(
name|serviceUrl
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|clean ()
specifier|public
name|void
name|clean
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|fileSys
operator|!=
literal|null
condition|)
name|fileSys
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|tokenFile
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|bootstrap
operator|!=
literal|null
condition|)
name|bootstrap
operator|.
name|releaseExternalResources
argument_list|()
expr_stmt|;
block|}
comment|/**    * try to fetch token without http server with IOException    */
annotation|@
name|Test
DECL|method|testTokenFetchFail ()
specifier|public
name|void
name|testTokenFetchFail
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|DelegationTokenFetcher
operator|.
name|main
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-webservice="
operator|+
name|serviceUrl
block|,
name|tokenFile
block|}
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Token fetcher shouldn't start in absense of NN"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{     }
block|}
comment|/**    * try to fetch token without http server with IOException    */
annotation|@
name|Test
DECL|method|testTokenRenewFail ()
specifier|public
name|void
name|testTokenRenewFail
parameter_list|()
throws|throws
name|AuthenticationException
block|{
try|try
block|{
name|DelegationTokenFetcher
operator|.
name|renewDelegationToken
argument_list|(
name|connectionFactory
argument_list|,
name|serviceUrl
argument_list|,
name|testToken
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Token fetcher shouldn't be able to renew tokens in absense of NN"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{     }
block|}
comment|/**    * try cancel token without http server with IOException    */
annotation|@
name|Test
DECL|method|expectedTokenCancelFail ()
specifier|public
name|void
name|expectedTokenCancelFail
parameter_list|()
throws|throws
name|AuthenticationException
block|{
try|try
block|{
name|DelegationTokenFetcher
operator|.
name|cancelDelegationToken
argument_list|(
name|connectionFactory
argument_list|,
name|serviceUrl
argument_list|,
name|testToken
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Token fetcher shouldn't be able to cancel tokens in absense of NN"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{     }
block|}
comment|/**    * try fetch token and get http response with error    */
annotation|@
name|Test
DECL|method|expectedTokenRenewErrorHttpResponse ()
specifier|public
name|void
name|expectedTokenRenewErrorHttpResponse
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|URISyntaxException
block|{
name|bootstrap
operator|=
name|startHttpServer
argument_list|(
name|httpPort
argument_list|,
name|testToken
argument_list|,
name|serviceUrl
argument_list|)
expr_stmt|;
try|try
block|{
name|DelegationTokenFetcher
operator|.
name|renewDelegationToken
argument_list|(
name|connectionFactory
argument_list|,
operator|new
name|URI
argument_list|(
name|serviceUrl
operator|.
name|toString
argument_list|()
operator|+
literal|"/exception"
argument_list|)
argument_list|,
name|createToken
argument_list|(
name|serviceUrl
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Token fetcher shouldn't be able to renew tokens using an invalid"
operator|+
literal|" NN URL"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{     }
if|if
condition|(
name|assertionError
operator|!=
literal|null
condition|)
throw|throw
name|assertionError
throw|;
block|}
comment|/**    *    */
annotation|@
name|Test
DECL|method|testCancelTokenFromHttp ()
specifier|public
name|void
name|testCancelTokenFromHttp
parameter_list|()
throws|throws
name|IOException
throws|,
name|AuthenticationException
block|{
name|bootstrap
operator|=
name|startHttpServer
argument_list|(
name|httpPort
argument_list|,
name|testToken
argument_list|,
name|serviceUrl
argument_list|)
expr_stmt|;
name|DelegationTokenFetcher
operator|.
name|cancelDelegationToken
argument_list|(
name|connectionFactory
argument_list|,
name|serviceUrl
argument_list|,
name|testToken
argument_list|)
expr_stmt|;
if|if
condition|(
name|assertionError
operator|!=
literal|null
condition|)
throw|throw
name|assertionError
throw|;
block|}
comment|/**    * Call renew token using http server return new expiration time    */
annotation|@
name|Test
DECL|method|testRenewTokenFromHttp ()
specifier|public
name|void
name|testRenewTokenFromHttp
parameter_list|()
throws|throws
name|IOException
throws|,
name|NumberFormatException
throws|,
name|AuthenticationException
block|{
name|bootstrap
operator|=
name|startHttpServer
argument_list|(
name|httpPort
argument_list|,
name|testToken
argument_list|,
name|serviceUrl
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testRenewTokenFromHttp error"
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|EXP_DATE
argument_list|)
operator|==
name|DelegationTokenFetcher
operator|.
name|renewDelegationToken
argument_list|(
name|connectionFactory
argument_list|,
name|serviceUrl
argument_list|,
name|testToken
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|assertionError
operator|!=
literal|null
condition|)
throw|throw
name|assertionError
throw|;
block|}
comment|/**    * Call fetch token using http server     */
annotation|@
name|Test
DECL|method|expectedTokenIsRetrievedFromHttp ()
specifier|public
name|void
name|expectedTokenIsRetrievedFromHttp
parameter_list|()
throws|throws
name|Exception
block|{
name|bootstrap
operator|=
name|startHttpServer
argument_list|(
name|httpPort
argument_list|,
name|testToken
argument_list|,
name|serviceUrl
argument_list|)
expr_stmt|;
name|DelegationTokenFetcher
operator|.
name|main
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-webservice="
operator|+
name|serviceUrl
block|,
name|tokenFile
block|}
argument_list|)
expr_stmt|;
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|fileSys
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|,
name|tokenFile
argument_list|)
decl_stmt|;
name|Credentials
name|creds
init|=
name|Credentials
operator|.
name|readTokenStorageFile
argument_list|(
name|p
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Token
argument_list|<
name|?
argument_list|>
argument_list|>
name|itr
init|=
name|creds
operator|.
name|getAllTokens
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"token not exist error"
argument_list|,
name|itr
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|Token
argument_list|<
name|?
argument_list|>
name|fetchedToken
init|=
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
literal|"token wrong identifier error"
argument_list|,
name|testToken
operator|.
name|getIdentifier
argument_list|()
argument_list|,
name|fetchedToken
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
literal|"token wrong password error"
argument_list|,
name|testToken
operator|.
name|getPassword
argument_list|()
argument_list|,
name|fetchedToken
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|assertionError
operator|!=
literal|null
condition|)
throw|throw
name|assertionError
throw|;
block|}
DECL|method|createToken (URI serviceUri)
specifier|private
specifier|static
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|createToken
parameter_list|(
name|URI
name|serviceUri
parameter_list|)
block|{
name|byte
index|[]
name|pw
init|=
literal|"hadoop"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|ident
init|=
operator|new
name|DelegationTokenIdentifier
argument_list|(
operator|new
name|Text
argument_list|(
literal|"owner"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"renewer"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"realuser"
argument_list|)
argument_list|)
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|Text
name|service
init|=
operator|new
name|Text
argument_list|(
name|serviceUri
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
argument_list|(
name|ident
argument_list|,
name|pw
argument_list|,
name|HftpFileSystem
operator|.
name|TOKEN_KIND
argument_list|,
name|service
argument_list|)
return|;
block|}
DECL|interface|Handler
specifier|private
interface|interface
name|Handler
block|{
DECL|method|handle (Channel channel, Token<DelegationTokenIdentifier> token, String serviceUrl)
name|void
name|handle
parameter_list|(
name|Channel
name|channel
parameter_list|,
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token
parameter_list|,
name|String
name|serviceUrl
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
DECL|class|FetchHandler
specifier|private
class|class
name|FetchHandler
implements|implements
name|Handler
block|{
annotation|@
name|Override
DECL|method|handle (Channel channel, Token<DelegationTokenIdentifier> token, String serviceUrl)
specifier|public
name|void
name|handle
parameter_list|(
name|Channel
name|channel
parameter_list|,
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token
parameter_list|,
name|String
name|serviceUrl
parameter_list|)
throws|throws
name|IOException
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|testToken
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|Credentials
name|creds
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|creds
operator|.
name|addToken
argument_list|(
operator|new
name|Text
argument_list|(
name|serviceUrl
argument_list|)
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|DataOutputBuffer
name|out
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|creds
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|int
name|fileLength
init|=
name|out
operator|.
name|getData
argument_list|()
operator|.
name|length
decl_stmt|;
name|ChannelBuffer
name|cbuffer
init|=
name|ChannelBuffers
operator|.
name|buffer
argument_list|(
name|fileLength
argument_list|)
decl_stmt|;
name|cbuffer
operator|.
name|writeBytes
argument_list|(
name|out
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
name|HttpResponse
name|response
init|=
operator|new
name|DefaultHttpResponse
argument_list|(
name|HTTP_1_1
argument_list|,
name|OK
argument_list|)
decl_stmt|;
name|response
operator|.
name|setHeader
argument_list|(
name|HttpHeaders
operator|.
name|Names
operator|.
name|CONTENT_LENGTH
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|fileLength
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|setContent
argument_list|(
name|cbuffer
argument_list|)
expr_stmt|;
name|channel
operator|.
name|write
argument_list|(
name|response
argument_list|)
operator|.
name|addListener
argument_list|(
name|ChannelFutureListener
operator|.
name|CLOSE
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|RenewHandler
specifier|private
class|class
name|RenewHandler
implements|implements
name|Handler
block|{
annotation|@
name|Override
DECL|method|handle (Channel channel, Token<DelegationTokenIdentifier> token, String serviceUrl)
specifier|public
name|void
name|handle
parameter_list|(
name|Channel
name|channel
parameter_list|,
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token
parameter_list|,
name|String
name|serviceUrl
parameter_list|)
throws|throws
name|IOException
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|testToken
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
name|EXP_DATE
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|ChannelBuffer
name|cbuffer
init|=
name|ChannelBuffers
operator|.
name|buffer
argument_list|(
name|bytes
operator|.
name|length
argument_list|)
decl_stmt|;
name|cbuffer
operator|.
name|writeBytes
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|HttpResponse
name|response
init|=
operator|new
name|DefaultHttpResponse
argument_list|(
name|HTTP_1_1
argument_list|,
name|OK
argument_list|)
decl_stmt|;
name|response
operator|.
name|setHeader
argument_list|(
name|HttpHeaders
operator|.
name|Names
operator|.
name|CONTENT_LENGTH
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|bytes
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|setContent
argument_list|(
name|cbuffer
argument_list|)
expr_stmt|;
name|channel
operator|.
name|write
argument_list|(
name|response
argument_list|)
operator|.
name|addListener
argument_list|(
name|ChannelFutureListener
operator|.
name|CLOSE
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ExceptionHandler
specifier|private
class|class
name|ExceptionHandler
implements|implements
name|Handler
block|{
annotation|@
name|Override
DECL|method|handle (Channel channel, Token<DelegationTokenIdentifier> token, String serviceUrl)
specifier|public
name|void
name|handle
parameter_list|(
name|Channel
name|channel
parameter_list|,
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token
parameter_list|,
name|String
name|serviceUrl
parameter_list|)
throws|throws
name|IOException
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|testToken
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|HttpResponse
name|response
init|=
operator|new
name|DefaultHttpResponse
argument_list|(
name|HTTP_1_1
argument_list|,
name|HttpResponseStatus
operator|.
name|METHOD_NOT_ALLOWED
argument_list|)
decl_stmt|;
name|channel
operator|.
name|write
argument_list|(
name|response
argument_list|)
operator|.
name|addListener
argument_list|(
name|ChannelFutureListener
operator|.
name|CLOSE
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|CancelHandler
specifier|private
class|class
name|CancelHandler
implements|implements
name|Handler
block|{
annotation|@
name|Override
DECL|method|handle (Channel channel, Token<DelegationTokenIdentifier> token, String serviceUrl)
specifier|public
name|void
name|handle
parameter_list|(
name|Channel
name|channel
parameter_list|,
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token
parameter_list|,
name|String
name|serviceUrl
parameter_list|)
throws|throws
name|IOException
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|testToken
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|HttpResponse
name|response
init|=
operator|new
name|DefaultHttpResponse
argument_list|(
name|HTTP_1_1
argument_list|,
name|OK
argument_list|)
decl_stmt|;
name|channel
operator|.
name|write
argument_list|(
name|response
argument_list|)
operator|.
name|addListener
argument_list|(
name|ChannelFutureListener
operator|.
name|CLOSE
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|CredentialsLogicHandler
specifier|private
specifier|final
class|class
name|CredentialsLogicHandler
extends|extends
name|SimpleChannelUpstreamHandler
block|{
DECL|field|token
specifier|private
specifier|final
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token
decl_stmt|;
DECL|field|serviceUrl
specifier|private
specifier|final
name|String
name|serviceUrl
decl_stmt|;
DECL|field|routes
specifier|private
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|Handler
argument_list|>
name|routes
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"/exception"
argument_list|,
operator|new
name|ExceptionHandler
argument_list|()
argument_list|,
literal|"/cancelDelegationToken"
argument_list|,
operator|new
name|CancelHandler
argument_list|()
argument_list|,
literal|"/getDelegationToken"
argument_list|,
operator|new
name|FetchHandler
argument_list|()
argument_list|,
literal|"/renewDelegationToken"
argument_list|,
operator|new
name|RenewHandler
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|CredentialsLogicHandler (Token<DelegationTokenIdentifier> token, String serviceUrl)
specifier|public
name|CredentialsLogicHandler
parameter_list|(
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token
parameter_list|,
name|String
name|serviceUrl
parameter_list|)
block|{
name|this
operator|.
name|token
operator|=
name|token
expr_stmt|;
name|this
operator|.
name|serviceUrl
operator|=
name|serviceUrl
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|messageReceived (ChannelHandlerContext ctx, final MessageEvent e)
specifier|public
name|void
name|messageReceived
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
specifier|final
name|MessageEvent
name|e
parameter_list|)
throws|throws
name|Exception
block|{
name|HttpRequest
name|request
init|=
operator|(
name|HttpRequest
operator|)
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getMethod
argument_list|()
operator|==
name|HttpMethod
operator|.
name|OPTIONS
condition|)
block|{
comment|// Mimic SPNEGO authentication
name|HttpResponse
name|response
init|=
operator|new
name|DefaultHttpResponse
argument_list|(
name|HTTP_1_1
argument_list|,
name|HttpResponseStatus
operator|.
name|OK
argument_list|)
decl_stmt|;
name|response
operator|.
name|addHeader
argument_list|(
literal|"Set-Cookie"
argument_list|,
literal|"hadoop-auth=1234"
argument_list|)
expr_stmt|;
name|e
operator|.
name|getChannel
argument_list|()
operator|.
name|write
argument_list|(
name|response
argument_list|)
operator|.
name|addListener
argument_list|(
name|ChannelFutureListener
operator|.
name|CLOSE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|request
operator|.
name|getMethod
argument_list|()
operator|!=
name|GET
condition|)
block|{
name|e
operator|.
name|getChannel
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|UnmodifiableIterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Handler
argument_list|>
argument_list|>
name|iter
init|=
name|routes
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Handler
argument_list|>
name|entry
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getUri
argument_list|()
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|Handler
name|handler
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
try|try
block|{
name|handler
operator|.
name|handle
argument_list|(
name|e
operator|.
name|getChannel
argument_list|()
argument_list|,
name|token
argument_list|,
name|serviceUrl
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|ee
parameter_list|)
block|{
name|TestDelegationTokenRemoteFetcher
operator|.
name|this
operator|.
name|assertionError
operator|=
name|ee
expr_stmt|;
name|HttpResponse
name|response
init|=
operator|new
name|DefaultHttpResponse
argument_list|(
name|HTTP_1_1
argument_list|,
name|HttpResponseStatus
operator|.
name|BAD_REQUEST
argument_list|)
decl_stmt|;
name|response
operator|.
name|setContent
argument_list|(
name|ChannelBuffers
operator|.
name|copiedBuffer
argument_list|(
name|ee
operator|.
name|getMessage
argument_list|()
argument_list|,
name|Charset
operator|.
name|defaultCharset
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|.
name|getChannel
argument_list|()
operator|.
name|write
argument_list|(
name|response
argument_list|)
operator|.
name|addListener
argument_list|(
name|ChannelFutureListener
operator|.
name|CLOSE
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|exceptionCaught (ChannelHandlerContext ctx, ExceptionEvent e)
specifier|public
name|void
name|exceptionCaught
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|ExceptionEvent
name|e
parameter_list|)
throws|throws
name|Exception
block|{
name|Channel
name|ch
init|=
name|e
operator|.
name|getChannel
argument_list|()
decl_stmt|;
name|Throwable
name|cause
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
name|cause
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|ch
operator|.
name|close
argument_list|()
operator|.
name|addListener
argument_list|(
name|ChannelFutureListener
operator|.
name|CLOSE
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|startHttpServer (int port, final Token<DelegationTokenIdentifier> token, final URI url)
specifier|private
name|ServerBootstrap
name|startHttpServer
parameter_list|(
name|int
name|port
parameter_list|,
specifier|final
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token
parameter_list|,
specifier|final
name|URI
name|url
parameter_list|)
block|{
name|ServerBootstrap
name|bootstrap
init|=
operator|new
name|ServerBootstrap
argument_list|(
operator|new
name|NioServerSocketChannelFactory
argument_list|(
name|Executors
operator|.
name|newCachedThreadPool
argument_list|()
argument_list|,
name|Executors
operator|.
name|newCachedThreadPool
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|bootstrap
operator|.
name|setPipelineFactory
argument_list|(
operator|new
name|ChannelPipelineFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ChannelPipeline
name|getPipeline
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|Channels
operator|.
name|pipeline
argument_list|(
operator|new
name|HttpRequestDecoder
argument_list|()
argument_list|,
operator|new
name|HttpChunkAggregator
argument_list|(
literal|65536
argument_list|)
argument_list|,
operator|new
name|HttpResponseEncoder
argument_list|()
argument_list|,
operator|new
name|CredentialsLogicHandler
argument_list|(
name|token
argument_list|,
name|url
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|bootstrap
operator|.
name|bind
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
name|port
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|bootstrap
return|;
block|}
block|}
end_class

end_unit

