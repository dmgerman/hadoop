begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode.fsdataset.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|FsVolumeSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests to ensure AddBlockPoolException behaves correctly when additional  * exceptions are merged, as this exception is a wrapper for multiple  * exceptions and hence carries some additional logic.  */
end_comment

begin_class
DECL|class|TestAddBlockPoolException
specifier|public
class|class
name|TestAddBlockPoolException
block|{
annotation|@
name|Test
DECL|method|testHasExeceptionsReturnsCorrectValue ()
specifier|public
name|void
name|testHasExeceptionsReturnsCorrectValue
parameter_list|()
block|{
name|AddBlockPoolException
name|e
init|=
operator|new
name|AddBlockPoolException
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|e
operator|.
name|hasExceptions
argument_list|()
argument_list|)
expr_stmt|;
name|FsVolumeImpl
name|fakeVol
init|=
name|mock
argument_list|(
name|FsVolumeImpl
operator|.
name|class
argument_list|)
decl_stmt|;
name|ConcurrentHashMap
argument_list|<
name|FsVolumeSpi
argument_list|,
name|IOException
argument_list|>
name|vols
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|FsVolumeSpi
argument_list|,
name|IOException
argument_list|>
argument_list|()
decl_stmt|;
name|vols
operator|.
name|put
argument_list|(
name|fakeVol
argument_list|,
operator|new
name|IOException
argument_list|(
literal|"Error 1"
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|=
operator|new
name|AddBlockPoolException
argument_list|(
name|vols
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|hasExceptions
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExceptionsCanBeMerged ()
specifier|public
name|void
name|testExceptionsCanBeMerged
parameter_list|()
block|{
name|FsVolumeImpl
name|vol1
init|=
name|mock
argument_list|(
name|FsVolumeImpl
operator|.
name|class
argument_list|)
decl_stmt|;
name|FsVolumeImpl
name|vol2
init|=
name|mock
argument_list|(
name|FsVolumeImpl
operator|.
name|class
argument_list|)
decl_stmt|;
name|ConcurrentHashMap
argument_list|<
name|FsVolumeSpi
argument_list|,
name|IOException
argument_list|>
name|first
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|FsVolumeSpi
argument_list|,
name|IOException
argument_list|>
argument_list|()
decl_stmt|;
name|ConcurrentHashMap
argument_list|<
name|FsVolumeSpi
argument_list|,
name|IOException
argument_list|>
name|second
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|FsVolumeSpi
argument_list|,
name|IOException
argument_list|>
argument_list|()
decl_stmt|;
name|first
operator|.
name|put
argument_list|(
name|vol1
argument_list|,
operator|new
name|IOException
argument_list|(
literal|"First Error"
argument_list|)
argument_list|)
expr_stmt|;
name|second
operator|.
name|put
argument_list|(
name|vol1
argument_list|,
operator|new
name|IOException
argument_list|(
literal|"Second Error"
argument_list|)
argument_list|)
expr_stmt|;
name|second
operator|.
name|put
argument_list|(
name|vol2
argument_list|,
operator|new
name|IOException
argument_list|(
literal|"V2 Error"
argument_list|)
argument_list|)
expr_stmt|;
name|AddBlockPoolException
name|e
init|=
operator|new
name|AddBlockPoolException
argument_list|(
name|first
argument_list|)
decl_stmt|;
name|e
operator|.
name|mergeException
argument_list|(
operator|new
name|AddBlockPoolException
argument_list|(
name|second
argument_list|)
argument_list|)
expr_stmt|;
comment|// Ensure there are two exceptions in the map
name|assertEquals
argument_list|(
name|e
operator|.
name|getFailingVolumes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Ensure the first exception added for a volume is the one retained
comment|// when multiple errors
name|assertEquals
argument_list|(
name|e
operator|.
name|getFailingVolumes
argument_list|()
operator|.
name|get
argument_list|(
name|vol1
argument_list|)
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"First Error"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|e
operator|.
name|getFailingVolumes
argument_list|()
operator|.
name|get
argument_list|(
name|vol2
argument_list|)
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"V2 Error"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEmptyExceptionsCanBeMerged ()
specifier|public
name|void
name|testEmptyExceptionsCanBeMerged
parameter_list|()
block|{
name|AddBlockPoolException
name|e
init|=
operator|new
name|AddBlockPoolException
argument_list|()
decl_stmt|;
name|e
operator|.
name|mergeException
argument_list|(
operator|new
name|AddBlockPoolException
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|e
operator|.
name|hasExceptions
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

