begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MetricsAsserts
operator|.
name|assertCounter
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MetricsAsserts
operator|.
name|getMetrics
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|AppendTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|RandomDatum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
operator|.
name|CompressionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|DefaultCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestHSync
specifier|public
class|class
name|TestHSync
block|{
DECL|method|checkSyncMetric (MiniDFSCluster cluster, int dn, long value)
specifier|private
name|void
name|checkSyncMetric
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|,
name|int
name|dn
parameter_list|,
name|long
name|value
parameter_list|)
block|{
name|DataNode
name|datanode
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
name|dn
argument_list|)
decl_stmt|;
name|assertCounter
argument_list|(
literal|"FsyncCount"
argument_list|,
name|value
argument_list|,
name|getMetrics
argument_list|(
name|datanode
operator|.
name|getMetrics
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|checkSyncMetric (MiniDFSCluster cluster, long value)
specifier|private
name|void
name|checkSyncMetric
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|,
name|long
name|value
parameter_list|)
block|{
name|checkSyncMetric
argument_list|(
name|cluster
argument_list|,
literal|0
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/** Test basic hsync cases */
annotation|@
name|Test
DECL|method|testHSync ()
specifier|public
name|void
name|testHSync
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
literal|"/testHSync/foo"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|len
init|=
literal|1
operator|<<
literal|16
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|p
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateFlag
operator|.
name|CREATE
argument_list|,
name|CreateFlag
operator|.
name|OVERWRITE
argument_list|,
name|CreateFlag
operator|.
name|SYNC_BLOCK
argument_list|)
argument_list|,
literal|4096
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
name|len
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|out
operator|.
name|hflush
argument_list|()
expr_stmt|;
comment|// hflush does not sync
name|checkSyncMetric
argument_list|(
name|cluster
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|out
operator|.
name|hsync
argument_list|()
expr_stmt|;
comment|// hsync on empty file does nothing
name|checkSyncMetric
argument_list|(
name|cluster
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|checkSyncMetric
argument_list|(
name|cluster
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|out
operator|.
name|hsync
argument_list|()
expr_stmt|;
name|checkSyncMetric
argument_list|(
name|cluster
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// avoiding repeated hsyncs is a potential future optimization
name|out
operator|.
name|hsync
argument_list|()
expr_stmt|;
name|checkSyncMetric
argument_list|(
name|cluster
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|out
operator|.
name|hflush
argument_list|()
expr_stmt|;
comment|// hflush still does not sync
name|checkSyncMetric
argument_list|(
name|cluster
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// close is sync'ing
name|checkSyncMetric
argument_list|(
name|cluster
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// same with a file created with out SYNC_BLOCK
name|out
operator|=
name|fs
operator|.
name|create
argument_list|(
name|p
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateFlag
operator|.
name|CREATE
argument_list|,
name|CreateFlag
operator|.
name|OVERWRITE
argument_list|)
argument_list|,
literal|4096
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
name|len
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|out
operator|.
name|hsync
argument_list|()
expr_stmt|;
name|checkSyncMetric
argument_list|(
name|cluster
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|checkSyncMetric
argument_list|(
name|cluster
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|out
operator|.
name|hsync
argument_list|()
expr_stmt|;
name|checkSyncMetric
argument_list|(
name|cluster
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|// repeated hsyncs
name|out
operator|.
name|hsync
argument_list|()
expr_stmt|;
name|checkSyncMetric
argument_list|(
name|cluster
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// close does not sync (not opened with SYNC_BLOCK)
name|checkSyncMetric
argument_list|(
name|cluster
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|/** Test hsync on an exact block boundary */
annotation|@
name|Test
DECL|method|testHSyncBlockBoundary ()
specifier|public
name|void
name|testHSyncBlockBoundary
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
literal|"/testHSyncBlockBoundary/foo"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|len
init|=
literal|1
operator|<<
literal|16
decl_stmt|;
specifier|final
name|byte
index|[]
name|fileContents
init|=
name|AppendTestUtil
operator|.
name|initBuffer
argument_list|(
name|len
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|p
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateFlag
operator|.
name|CREATE
argument_list|,
name|CreateFlag
operator|.
name|OVERWRITE
argument_list|,
name|CreateFlag
operator|.
name|SYNC_BLOCK
argument_list|)
argument_list|,
literal|4096
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
name|len
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// fill exactly one block (tests the SYNC_BLOCK case) and flush
name|out
operator|.
name|write
argument_list|(
name|fileContents
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|out
operator|.
name|hflush
argument_list|()
expr_stmt|;
comment|// the full block should have caused a sync
name|checkSyncMetric
argument_list|(
name|cluster
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|out
operator|.
name|hsync
argument_list|()
expr_stmt|;
comment|// first on block again
name|checkSyncMetric
argument_list|(
name|cluster
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// write one more byte and sync again
name|out
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|out
operator|.
name|hsync
argument_list|()
expr_stmt|;
name|checkSyncMetric
argument_list|(
name|cluster
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|checkSyncMetric
argument_list|(
name|cluster
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|/** Test hsync via SequenceFiles */
annotation|@
name|Test
DECL|method|testSequenceFileSync ()
specifier|public
name|void
name|testSequenceFileSync
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
literal|"/testSequenceFileSync/foo"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|len
init|=
literal|1
operator|<<
literal|16
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|p
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateFlag
operator|.
name|CREATE
argument_list|,
name|CreateFlag
operator|.
name|OVERWRITE
argument_list|,
name|CreateFlag
operator|.
name|SYNC_BLOCK
argument_list|)
argument_list|,
literal|4096
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
name|len
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Writer
name|w
init|=
name|SequenceFile
operator|.
name|createWriter
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|,
name|Writer
operator|.
name|stream
argument_list|(
name|out
argument_list|)
argument_list|,
name|Writer
operator|.
name|keyClass
argument_list|(
name|RandomDatum
operator|.
name|class
argument_list|)
argument_list|,
name|Writer
operator|.
name|valueClass
argument_list|(
name|RandomDatum
operator|.
name|class
argument_list|)
argument_list|,
name|Writer
operator|.
name|compression
argument_list|(
name|CompressionType
operator|.
name|NONE
argument_list|,
operator|new
name|DefaultCodec
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|w
operator|.
name|hflush
argument_list|()
expr_stmt|;
name|checkSyncMetric
argument_list|(
name|cluster
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|w
operator|.
name|hsync
argument_list|()
expr_stmt|;
name|checkSyncMetric
argument_list|(
name|cluster
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|int
name|seed
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|()
decl_stmt|;
name|RandomDatum
operator|.
name|Generator
name|generator
init|=
operator|new
name|RandomDatum
operator|.
name|Generator
argument_list|(
name|seed
argument_list|)
decl_stmt|;
name|generator
operator|.
name|next
argument_list|()
expr_stmt|;
name|w
operator|.
name|append
argument_list|(
name|generator
operator|.
name|getKey
argument_list|()
argument_list|,
name|generator
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|w
operator|.
name|hsync
argument_list|()
expr_stmt|;
name|checkSyncMetric
argument_list|(
name|cluster
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|checkSyncMetric
argument_list|(
name|cluster
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|checkSyncMetric
argument_list|(
name|cluster
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|/** Test that syncBlock is correctly performed at replicas */
annotation|@
name|Test
DECL|method|testHSyncWithReplication ()
specifier|public
name|void
name|testHSyncWithReplication
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|3
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
literal|"/testHSyncWithReplication/foo"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|len
init|=
literal|1
operator|<<
literal|16
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|p
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateFlag
operator|.
name|CREATE
argument_list|,
name|CreateFlag
operator|.
name|OVERWRITE
argument_list|,
name|CreateFlag
operator|.
name|SYNC_BLOCK
argument_list|)
argument_list|,
literal|4096
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
name|len
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|out
operator|.
name|hflush
argument_list|()
expr_stmt|;
name|checkSyncMetric
argument_list|(
name|cluster
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkSyncMetric
argument_list|(
name|cluster
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkSyncMetric
argument_list|(
name|cluster
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|out
operator|.
name|hsync
argument_list|()
expr_stmt|;
name|checkSyncMetric
argument_list|(
name|cluster
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkSyncMetric
argument_list|(
name|cluster
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkSyncMetric
argument_list|(
name|cluster
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|out
operator|.
name|hsync
argument_list|()
expr_stmt|;
name|checkSyncMetric
argument_list|(
name|cluster
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|checkSyncMetric
argument_list|(
name|cluster
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|checkSyncMetric
argument_list|(
name|cluster
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

