begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.web
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|utils
operator|.
name|OzoneUtils
operator|.
name|getRequestID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|utils
operator|.
name|OzoneUtils
operator|.
name|verifyResourceName
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
DECL|class|TestUtils
specifier|public
class|class
name|TestUtils
block|{
comment|/**    * Tests if the bucket name handling is correct.    */
annotation|@
name|Test
DECL|method|testValidBucketNames ()
specifier|public
name|void
name|testValidBucketNames
parameter_list|()
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|testMatrix
decl_stmt|;
comment|// Init the Table with Strings and Expected Return values
name|testMatrix
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
argument_list|()
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|"bucket-.ozone.self"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|"bucket.-ozone.self"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|".bucket.ozone.self"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|"bucket.ozone.self."
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|"bucket..ozone.self"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|"192.1.1.1"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|"ab"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|"bucket.ozone.self.this.is.a.really.long.name.that."
operator|+
literal|"is.more.than.sixty.three.characters.long.for.sure"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|null
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|"bucket@$"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|"BUCKET"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|"bucket .ozone.self"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|"       bucket.ozone.self"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|"bucket.ozone.self-"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|"-bucket.ozone.self"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|"bucket"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|"bucket.ozone.self"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|"bucket.ozone.self"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|"bucket-name.ozone.self"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|"bucket.1.ozone.self"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|keys
init|=
name|testMatrix
operator|.
name|keySet
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
block|{
if|if
condition|(
name|testMatrix
operator|.
name|get
argument_list|(
name|key
argument_list|)
condition|)
block|{
comment|// For valid names there should be no exceptions at all
name|verifyResourceName
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|verifyResourceName
argument_list|(
name|key
argument_list|)
expr_stmt|;
comment|// should never get here since the isValid call will throw
name|fail
argument_list|(
literal|"An exception was expected but did not happen."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{          }
block|}
block|}
block|}
comment|/**    *  Just calls Request ID many times and assert we    *  got different values, ideally this should be    *  run under parallel threads. Since the function under    *  test has no external dependencies it is assumed    *  that this test is good enough.    */
annotation|@
name|Test
DECL|method|testRequestIDisRandom ()
specifier|public
name|void
name|testRequestIDisRandom
parameter_list|()
block|{
name|HashSet
argument_list|<
name|String
argument_list|>
name|set
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|set
operator|.
name|add
argument_list|(
name|getRequestID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

