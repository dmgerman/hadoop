begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.ha
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ha
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadLocalRandom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|AppendTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSNNTopology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|TestFileTruncate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|DFSck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestHAAppend
specifier|public
class|class
name|TestHAAppend
block|{
DECL|field|COUNT
specifier|static
specifier|final
name|int
name|COUNT
init|=
literal|5
decl_stmt|;
DECL|method|createAndHflush (FileSystem fs, Path file, byte[] data, int length)
specifier|static
name|FSDataOutputStream
name|createAndHflush
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|file
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|file
argument_list|,
literal|false
argument_list|,
literal|4096
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|1024
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|out
operator|.
name|hflush
argument_list|()
expr_stmt|;
return|return
name|out
return|;
block|}
comment|/**    * Test to verify the processing of PendingDataNodeMessageQueue in case of    * append. One block will marked as corrupt if the OP_ADD, OP_UPDATE_BLOCKS    * comes in one edit log segment and OP_CLOSE edit comes in next log segment    * which is loaded during failover. Regression test for HDFS-3605.    */
annotation|@
name|Test
DECL|method|testMultipleAppendsDuringCatchupTailing ()
specifier|public
name|void
name|testMultipleAppendsDuringCatchupTailing
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// Set a length edits tailing period, and explicit rolling, so we can
comment|// control the ingest of edits by the standby for this test.
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HA_TAILEDITS_PERIOD_KEY
argument_list|,
literal|"5000"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HA_LOGROLL_PERIOD_KEY
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|nnTopology
argument_list|(
name|MiniDFSNNTopology
operator|.
name|simpleHATopology
argument_list|()
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|3
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|fs
operator|=
name|HATestUtil
operator|.
name|configureFailoverFs
argument_list|(
name|cluster
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Path
name|fileToAppend
init|=
operator|new
name|Path
argument_list|(
literal|"/FileToAppend"
argument_list|)
decl_stmt|;
name|Path
name|fileToTruncate
init|=
operator|new
name|Path
argument_list|(
literal|"/FileToTruncate"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
literal|1
operator|<<
literal|16
index|]
decl_stmt|;
name|ThreadLocalRandom
operator|.
name|current
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
specifier|final
name|int
index|[]
name|appendPos
init|=
name|AppendTestUtil
operator|.
name|randomFilePartition
argument_list|(
name|data
operator|.
name|length
argument_list|,
name|COUNT
argument_list|)
decl_stmt|;
specifier|final
name|int
index|[]
name|truncatePos
init|=
name|AppendTestUtil
operator|.
name|randomFilePartition
argument_list|(
name|data
operator|.
name|length
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// Create file, write some data, and hflush so that the first
comment|// block is in the edit log prior to roll.
name|FSDataOutputStream
name|out
init|=
name|createAndHflush
argument_list|(
name|fs
argument_list|,
name|fileToAppend
argument_list|,
name|data
argument_list|,
name|appendPos
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|out4Truncate
init|=
name|createAndHflush
argument_list|(
name|fs
argument_list|,
name|fileToTruncate
argument_list|,
name|data
argument_list|,
name|data
operator|.
name|length
argument_list|)
decl_stmt|;
comment|// Let the StandbyNode catch the creation of the file.
name|cluster
operator|.
name|getNameNode
argument_list|(
literal|0
argument_list|)
operator|.
name|getRpcServer
argument_list|()
operator|.
name|rollEditLog
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|getNameNode
argument_list|(
literal|1
argument_list|)
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getEditLogTailer
argument_list|()
operator|.
name|doTailEdits
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|out4Truncate
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Append and re-close a few time, so that many block entries are queued.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|COUNT
condition|;
name|i
operator|++
control|)
block|{
name|int
name|end
init|=
name|i
operator|<
name|COUNT
operator|-
literal|1
condition|?
name|appendPos
index|[
name|i
operator|+
literal|1
index|]
else|:
name|data
operator|.
name|length
decl_stmt|;
name|out
operator|=
name|fs
operator|.
name|append
argument_list|(
name|fileToAppend
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|appendPos
index|[
name|i
index|]
argument_list|,
name|end
operator|-
name|appendPos
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|boolean
name|isTruncateReady
init|=
name|fs
operator|.
name|truncate
argument_list|(
name|fileToTruncate
argument_list|,
name|truncatePos
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
comment|// Ensure that blocks have been reported to the SBN ahead of the edits
comment|// arriving.
name|cluster
operator|.
name|triggerBlockReports
argument_list|()
expr_stmt|;
comment|// Failover the current standby to active.
name|cluster
operator|.
name|shutdownNameNode
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Check the FSCK doesn't detect any bad blocks on the SBN.
name|int
name|rc
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|DFSck
argument_list|(
name|cluster
operator|.
name|getConfiguration
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"/"
block|,
literal|"-files"
block|,
literal|"-blocks"
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"CorruptBlocks should be empty."
argument_list|,
literal|0
argument_list|,
name|cluster
operator|.
name|getNameNode
argument_list|(
literal|1
argument_list|)
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getCorruptReplicaBlocks
argument_list|()
argument_list|)
expr_stmt|;
name|AppendTestUtil
operator|.
name|checkFullFile
argument_list|(
name|fs
argument_list|,
name|fileToAppend
argument_list|,
name|data
operator|.
name|length
argument_list|,
name|data
argument_list|,
name|fileToAppend
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isTruncateReady
condition|)
block|{
name|TestFileTruncate
operator|.
name|checkBlockRecovery
argument_list|(
name|fileToTruncate
argument_list|,
name|cluster
operator|.
name|getFileSystem
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|300
argument_list|,
literal|200
argument_list|)
expr_stmt|;
block|}
name|AppendTestUtil
operator|.
name|checkFullFile
argument_list|(
name|fs
argument_list|,
name|fileToTruncate
argument_list|,
name|truncatePos
index|[
literal|0
index|]
argument_list|,
name|data
argument_list|,
name|fileToTruncate
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
literal|null
operator|!=
name|cluster
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|fs
condition|)
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

