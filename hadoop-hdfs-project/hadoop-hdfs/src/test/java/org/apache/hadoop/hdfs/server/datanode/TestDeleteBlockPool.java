begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSNNTopology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|DFSAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests deleteBlockPool functionality.  */
end_comment

begin_class
DECL|class|TestDeleteBlockPool
specifier|public
class|class
name|TestDeleteBlockPool
block|{
annotation|@
name|Test
DECL|method|testDeleteBlockPool ()
specifier|public
name|void
name|testDeleteBlockPool
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Start cluster with a 2 NN and 2 DN
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMESERVICES
argument_list|,
literal|"namesServerId1,namesServerId2"
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|nnTopology
argument_list|(
name|MiniDFSNNTopology
operator|.
name|simpleFederatedTopology
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|2
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|FileSystem
name|fs1
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|FileSystem
name|fs2
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs1
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/alpha"
argument_list|)
argument_list|,
literal|1024
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|54
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs2
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/beta"
argument_list|)
argument_list|,
literal|1024
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|54
argument_list|)
expr_stmt|;
name|DataNode
name|dn1
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|DataNode
name|dn2
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
name|bpid1
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|(
literal|0
argument_list|)
operator|.
name|getBlockPoolId
argument_list|()
decl_stmt|;
name|String
name|bpid2
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|(
literal|1
argument_list|)
operator|.
name|getBlockPoolId
argument_list|()
decl_stmt|;
name|File
name|dn1StorageDir1
init|=
name|cluster
operator|.
name|getInstanceStorageDir
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|File
name|dn1StorageDir2
init|=
name|cluster
operator|.
name|getInstanceStorageDir
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|File
name|dn2StorageDir1
init|=
name|cluster
operator|.
name|getInstanceStorageDir
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|File
name|dn2StorageDir2
init|=
name|cluster
operator|.
name|getInstanceStorageDir
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// Although namenode is shutdown, the bp offerservice is still running
try|try
block|{
name|dn1
operator|.
name|deleteBlockPool
argument_list|(
name|bpid1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Must not delete a running block pool"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|expected
parameter_list|)
block|{       }
name|Configuration
name|nn1Conf
init|=
name|cluster
operator|.
name|getConfiguration
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|nn1Conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMESERVICES
argument_list|,
literal|"namesServerId2"
argument_list|)
expr_stmt|;
name|dn1
operator|.
name|refreshNamenodes
argument_list|(
name|nn1Conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|dn1
operator|.
name|getAllBpOs
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
try|try
block|{
name|dn1
operator|.
name|deleteBlockPool
argument_list|(
name|bpid1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Must not delete if any block files exist unless "
operator|+
literal|"force is true"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|expected
parameter_list|)
block|{       }
name|verifyBlockPoolDirectories
argument_list|(
literal|true
argument_list|,
name|dn1StorageDir1
argument_list|,
name|bpid1
argument_list|)
expr_stmt|;
name|verifyBlockPoolDirectories
argument_list|(
literal|true
argument_list|,
name|dn1StorageDir2
argument_list|,
name|bpid1
argument_list|)
expr_stmt|;
name|dn1
operator|.
name|deleteBlockPool
argument_list|(
name|bpid1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyBlockPoolDirectories
argument_list|(
literal|false
argument_list|,
name|dn1StorageDir1
argument_list|,
name|bpid1
argument_list|)
expr_stmt|;
name|verifyBlockPoolDirectories
argument_list|(
literal|false
argument_list|,
name|dn1StorageDir2
argument_list|,
name|bpid1
argument_list|)
expr_stmt|;
name|fs1
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/alpha"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Wait till all blocks are deleted from the dn2 for bpid1.
while|while
condition|(
operator|(
name|MiniDFSCluster
operator|.
name|getFinalizedDir
argument_list|(
name|dn2StorageDir1
argument_list|,
name|bpid1
argument_list|)
operator|.
name|list
argument_list|()
operator|.
name|length
operator|!=
literal|0
operator|)
operator|||
operator|(
name|MiniDFSCluster
operator|.
name|getFinalizedDir
argument_list|(
name|dn2StorageDir2
argument_list|,
name|bpid1
argument_list|)
operator|.
name|list
argument_list|()
operator|.
name|length
operator|!=
literal|0
operator|)
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{         }
block|}
name|cluster
operator|.
name|shutdownNameNode
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Although namenode is shutdown, the bp offerservice is still running
comment|// on dn2
try|try
block|{
name|dn2
operator|.
name|deleteBlockPool
argument_list|(
name|bpid1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Must not delete a running block pool"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|expected
parameter_list|)
block|{       }
name|dn2
operator|.
name|refreshNamenodes
argument_list|(
name|nn1Conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|dn2
operator|.
name|getAllBpOs
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|verifyBlockPoolDirectories
argument_list|(
literal|true
argument_list|,
name|dn2StorageDir1
argument_list|,
name|bpid1
argument_list|)
expr_stmt|;
name|verifyBlockPoolDirectories
argument_list|(
literal|true
argument_list|,
name|dn2StorageDir2
argument_list|,
name|bpid1
argument_list|)
expr_stmt|;
comment|// Now deleteBlockPool must succeed with force as false, because no
comment|// blocks exist for bpid1 and bpOfferService is also stopped for bpid1.
name|dn2
operator|.
name|deleteBlockPool
argument_list|(
name|bpid1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyBlockPoolDirectories
argument_list|(
literal|false
argument_list|,
name|dn2StorageDir1
argument_list|,
name|bpid1
argument_list|)
expr_stmt|;
name|verifyBlockPoolDirectories
argument_list|(
literal|false
argument_list|,
name|dn2StorageDir2
argument_list|,
name|bpid1
argument_list|)
expr_stmt|;
comment|//bpid2 must not be impacted
name|verifyBlockPoolDirectories
argument_list|(
literal|true
argument_list|,
name|dn1StorageDir1
argument_list|,
name|bpid2
argument_list|)
expr_stmt|;
name|verifyBlockPoolDirectories
argument_list|(
literal|true
argument_list|,
name|dn1StorageDir2
argument_list|,
name|bpid2
argument_list|)
expr_stmt|;
name|verifyBlockPoolDirectories
argument_list|(
literal|true
argument_list|,
name|dn2StorageDir1
argument_list|,
name|bpid2
argument_list|)
expr_stmt|;
name|verifyBlockPoolDirectories
argument_list|(
literal|true
argument_list|,
name|dn2StorageDir2
argument_list|,
name|bpid2
argument_list|)
expr_stmt|;
comment|//make sure second block pool is running all fine
name|Path
name|gammaFile
init|=
operator|new
name|Path
argument_list|(
literal|"/gamma"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs2
argument_list|,
name|gammaFile
argument_list|,
literal|1024
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|55
argument_list|)
expr_stmt|;
name|fs2
operator|.
name|setReplication
argument_list|(
name|gammaFile
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitReplication
argument_list|(
name|fs2
argument_list|,
name|gammaFile
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testDfsAdminDeleteBlockPool ()
specifier|public
name|void
name|testDfsAdminDeleteBlockPool
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMESERVICES
argument_list|,
literal|"namesServerId1,namesServerId2"
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|nnTopology
argument_list|(
name|MiniDFSNNTopology
operator|.
name|simpleFederatedTopology
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|FileSystem
name|fs1
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|FileSystem
name|fs2
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs1
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/alpha"
argument_list|)
argument_list|,
literal|1024
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|54
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs2
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/beta"
argument_list|)
argument_list|,
literal|1024
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|54
argument_list|)
expr_stmt|;
name|DataNode
name|dn1
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|bpid1
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|(
literal|0
argument_list|)
operator|.
name|getBlockPoolId
argument_list|()
decl_stmt|;
name|String
name|bpid2
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|(
literal|1
argument_list|)
operator|.
name|getBlockPoolId
argument_list|()
decl_stmt|;
name|File
name|dn1StorageDir1
init|=
name|cluster
operator|.
name|getInstanceStorageDir
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|File
name|dn1StorageDir2
init|=
name|cluster
operator|.
name|getInstanceStorageDir
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Configuration
name|nn1Conf
init|=
name|cluster
operator|.
name|getConfiguration
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|nn1Conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMESERVICES
argument_list|,
literal|"namesServerId1"
argument_list|)
expr_stmt|;
name|dn1
operator|.
name|refreshNamenodes
argument_list|(
name|nn1Conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|dn1
operator|.
name|getAllBpOs
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|DFSAdmin
name|admin
init|=
operator|new
name|DFSAdmin
argument_list|(
name|nn1Conf
argument_list|)
decl_stmt|;
name|String
name|dn1Address
init|=
name|dn1
operator|.
name|getDatanodeId
argument_list|()
operator|.
name|getIpAddr
argument_list|()
operator|+
literal|":"
operator|+
name|dn1
operator|.
name|getIpcPort
argument_list|()
decl_stmt|;
name|String
index|[]
name|args
init|=
block|{
literal|"-deleteBlockPool"
block|,
name|dn1Address
block|,
name|bpid2
block|}
decl_stmt|;
name|int
name|ret
init|=
name|admin
operator|.
name|run
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|0
operator|==
name|ret
argument_list|)
expr_stmt|;
name|verifyBlockPoolDirectories
argument_list|(
literal|true
argument_list|,
name|dn1StorageDir1
argument_list|,
name|bpid2
argument_list|)
expr_stmt|;
name|verifyBlockPoolDirectories
argument_list|(
literal|true
argument_list|,
name|dn1StorageDir2
argument_list|,
name|bpid2
argument_list|)
expr_stmt|;
name|String
index|[]
name|forceArgs
init|=
block|{
literal|"-deleteBlockPool"
block|,
name|dn1Address
block|,
name|bpid2
block|,
literal|"force"
block|}
decl_stmt|;
name|ret
operator|=
name|admin
operator|.
name|run
argument_list|(
name|forceArgs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|verifyBlockPoolDirectories
argument_list|(
literal|false
argument_list|,
name|dn1StorageDir1
argument_list|,
name|bpid2
argument_list|)
expr_stmt|;
name|verifyBlockPoolDirectories
argument_list|(
literal|false
argument_list|,
name|dn1StorageDir2
argument_list|,
name|bpid2
argument_list|)
expr_stmt|;
comment|//bpid1 remains good
name|verifyBlockPoolDirectories
argument_list|(
literal|true
argument_list|,
name|dn1StorageDir1
argument_list|,
name|bpid1
argument_list|)
expr_stmt|;
name|verifyBlockPoolDirectories
argument_list|(
literal|true
argument_list|,
name|dn1StorageDir2
argument_list|,
name|bpid1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|verifyBlockPoolDirectories (boolean shouldExist, File storageDir, String bpid)
specifier|private
name|void
name|verifyBlockPoolDirectories
parameter_list|(
name|boolean
name|shouldExist
parameter_list|,
name|File
name|storageDir
parameter_list|,
name|String
name|bpid
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|bpDir
init|=
operator|new
name|File
argument_list|(
name|storageDir
argument_list|,
name|DataStorage
operator|.
name|STORAGE_DIR_CURRENT
operator|+
literal|"/"
operator|+
name|bpid
argument_list|)
decl_stmt|;
if|if
condition|(
name|shouldExist
operator|==
literal|false
condition|)
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
name|bpDir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|File
name|bpCurrentDir
init|=
operator|new
name|File
argument_list|(
name|bpDir
argument_list|,
name|DataStorage
operator|.
name|STORAGE_DIR_CURRENT
argument_list|)
decl_stmt|;
name|File
name|finalizedDir
init|=
operator|new
name|File
argument_list|(
name|bpCurrentDir
argument_list|,
name|DataStorage
operator|.
name|STORAGE_DIR_FINALIZED
argument_list|)
decl_stmt|;
name|File
name|rbwDir
init|=
operator|new
name|File
argument_list|(
name|bpCurrentDir
argument_list|,
name|DataStorage
operator|.
name|STORAGE_DIR_RBW
argument_list|)
decl_stmt|;
name|File
name|versionFile
init|=
operator|new
name|File
argument_list|(
name|bpCurrentDir
argument_list|,
literal|"VERSION"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|finalizedDir
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rbwDir
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|versionFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

