begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode.metrics
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|metrics
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|Is
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Test that the {@link DataNodePeerMetrics} class is able to detect  * outliers i.e. slow nodes via the metrics it maintains.  */
end_comment

begin_class
DECL|class|TestDataNodeOutlierDetectionViaMetrics
specifier|public
class|class
name|TestDataNodeOutlierDetectionViaMetrics
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestDataNodeOutlierDetectionViaMetrics
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Set a timeout for every test case.    */
annotation|@
name|Rule
DECL|field|testTimeout
specifier|public
name|Timeout
name|testTimeout
init|=
operator|new
name|Timeout
argument_list|(
literal|300_000
argument_list|)
decl_stmt|;
comment|// A few constants to keep the test run time short.
DECL|field|WINDOW_INTERVAL_SECONDS
specifier|private
specifier|static
specifier|final
name|int
name|WINDOW_INTERVAL_SECONDS
init|=
literal|3
decl_stmt|;
DECL|field|ROLLING_AVERAGE_WINDOWS
specifier|private
specifier|static
specifier|final
name|int
name|ROLLING_AVERAGE_WINDOWS
init|=
literal|10
decl_stmt|;
DECL|field|SLOW_NODE_LATENCY_MS
specifier|private
specifier|static
specifier|final
name|int
name|SLOW_NODE_LATENCY_MS
init|=
literal|20_000
decl_stmt|;
DECL|field|FAST_NODE_MAX_LATENCY_MS
specifier|private
specifier|static
specifier|final
name|int
name|FAST_NODE_MAX_LATENCY_MS
init|=
literal|5
decl_stmt|;
DECL|field|random
specifier|private
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|DataNodePeerMetrics
operator|.
name|LOG
argument_list|,
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|SlowNodeDetector
operator|.
name|LOG
argument_list|,
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that a very slow peer is detected as an outlier.    */
annotation|@
name|Test
DECL|method|testOutlierIsDetected ()
specifier|public
name|void
name|testOutlierIsDetected
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|slowNodeName
init|=
literal|"SlowNode"
decl_stmt|;
name|DataNodePeerMetrics
name|peerMetrics
init|=
operator|new
name|DataNodePeerMetrics
argument_list|(
literal|"PeerMetrics-For-Test"
argument_list|,
name|WINDOW_INTERVAL_SECONDS
argument_list|,
name|ROLLING_AVERAGE_WINDOWS
argument_list|)
decl_stmt|;
name|injectFastNodesSamples
argument_list|(
name|peerMetrics
argument_list|)
expr_stmt|;
name|injectSlowNodeSamples
argument_list|(
name|peerMetrics
argument_list|,
name|slowNodeName
argument_list|)
expr_stmt|;
comment|// Trigger a snapshot.
name|peerMetrics
operator|.
name|dumpSendPacketDownstreamAvgInfoAsJson
argument_list|()
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|outliers
init|=
name|peerMetrics
operator|.
name|getOutliers
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Got back outlier nodes: {}"
argument_list|,
name|outliers
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|outliers
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outliers
operator|.
name|containsKey
argument_list|(
name|slowNodeName
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that when there are no outliers, we get back nothing.    */
annotation|@
name|Test
DECL|method|testWithNoOutliers ()
specifier|public
name|void
name|testWithNoOutliers
parameter_list|()
throws|throws
name|Exception
block|{
name|DataNodePeerMetrics
name|peerMetrics
init|=
operator|new
name|DataNodePeerMetrics
argument_list|(
literal|"PeerMetrics-For-Test"
argument_list|,
name|WINDOW_INTERVAL_SECONDS
argument_list|,
name|ROLLING_AVERAGE_WINDOWS
argument_list|)
decl_stmt|;
name|injectFastNodesSamples
argument_list|(
name|peerMetrics
argument_list|)
expr_stmt|;
comment|// Trigger a snapshot.
name|peerMetrics
operator|.
name|dumpSendPacketDownstreamAvgInfoAsJson
argument_list|()
expr_stmt|;
comment|// Ensure that we get back the outlier.
name|assertTrue
argument_list|(
name|peerMetrics
operator|.
name|getOutliers
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Inject fake stats for MIN_OUTLIER_DETECTION_PEERS fast nodes.    *    * @param peerMetrics    */
DECL|method|injectFastNodesSamples (DataNodePeerMetrics peerMetrics)
specifier|public
name|void
name|injectFastNodesSamples
parameter_list|(
name|DataNodePeerMetrics
name|peerMetrics
parameter_list|)
block|{
for|for
control|(
name|int
name|nodeIndex
init|=
literal|0
init|;
name|nodeIndex
operator|<
name|SlowNodeDetector
operator|.
name|getMinOutlierDetectionPeers
argument_list|()
condition|;
operator|++
name|nodeIndex
control|)
block|{
specifier|final
name|String
name|nodeName
init|=
literal|"FastNode-"
operator|+
name|nodeIndex
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Generating stats for node {}"
argument_list|,
name|nodeName
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
operator|*
name|DataNodePeerMetrics
operator|.
name|MIN_OUTLIER_DETECTION_SAMPLES
condition|;
operator|++
name|i
control|)
block|{
name|peerMetrics
operator|.
name|addSendPacketDownstream
argument_list|(
name|nodeName
argument_list|,
name|random
operator|.
name|nextInt
argument_list|(
name|FAST_NODE_MAX_LATENCY_MS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Inject fake stats for one extremely slow node.    */
DECL|method|injectSlowNodeSamples ( DataNodePeerMetrics peerMetrics, String slowNodeName)
specifier|public
name|void
name|injectSlowNodeSamples
parameter_list|(
name|DataNodePeerMetrics
name|peerMetrics
parameter_list|,
name|String
name|slowNodeName
parameter_list|)
throws|throws
name|InterruptedException
block|{
comment|// And the one slow node.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
operator|*
name|DataNodePeerMetrics
operator|.
name|MIN_OUTLIER_DETECTION_SAMPLES
condition|;
operator|++
name|i
control|)
block|{
name|peerMetrics
operator|.
name|addSendPacketDownstream
argument_list|(
name|slowNodeName
argument_list|,
name|SLOW_NODE_LATENCY_MS
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

