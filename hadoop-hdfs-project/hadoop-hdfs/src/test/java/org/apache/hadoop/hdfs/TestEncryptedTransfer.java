begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileChecksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|TrustedChannelResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|sasl
operator|.
name|DataTransferSaslUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|sasl
operator|.
name|SaslDataTransferServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|BlockTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|StartupOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
operator|.
name|LogCapturer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
DECL|class|TestEncryptedTransfer
specifier|public
class|class
name|TestEncryptedTransfer
block|{
block|{
name|LogManager
operator|.
name|getLogger
argument_list|(
name|SaslDataTransferServer
operator|.
name|class
argument_list|)
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
name|LogManager
operator|.
name|getLogger
argument_list|(
name|DataTransferSaslUtil
operator|.
name|class
argument_list|)
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Parameters
DECL|method|data ()
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|data
parameter_list|()
block|{
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|params
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|null
block|}
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|"org.apache.hadoop.hdfs.TestEncryptedTransfer$TestTrustedChannelResolver"
block|}
argument_list|)
expr_stmt|;
return|return
name|params
return|;
block|}
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestEncryptedTransfer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|PLAIN_TEXT
specifier|private
specifier|static
specifier|final
name|String
name|PLAIN_TEXT
init|=
literal|"this is very secret plain text"
decl_stmt|;
DECL|field|TEST_PATH
specifier|private
specifier|static
specifier|final
name|Path
name|TEST_PATH
init|=
operator|new
name|Path
argument_list|(
literal|"/non-encrypted-file"
argument_list|)
decl_stmt|;
DECL|method|setEncryptionConfigKeys (Configuration conf)
specifier|private
name|void
name|setEncryptionConfigKeys
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_ENCRYPT_DATA_TRANSFER_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_ACCESS_TOKEN_ENABLE_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|resolverClazz
operator|!=
literal|null
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_TRUSTEDCHANNEL_RESOLVER_CLASS
argument_list|,
name|resolverClazz
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Unset DFS_ENCRYPT_DATA_TRANSFER_KEY and DFS_DATA_ENCRYPTION_ALGORITHM_KEY
comment|// on the client side to ensure that clients will detect this setting
comment|// automatically from the NN.
DECL|method|getFileSystem (Configuration conf)
specifier|private
specifier|static
name|FileSystem
name|getFileSystem
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|localConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|localConf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_ENCRYPT_DATA_TRANSFER_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|localConf
operator|.
name|unset
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATA_ENCRYPTION_ALGORITHM_KEY
argument_list|)
expr_stmt|;
return|return
name|FileSystem
operator|.
name|get
argument_list|(
name|localConf
argument_list|)
return|;
block|}
DECL|field|resolverClazz
name|String
name|resolverClazz
decl_stmt|;
DECL|method|TestEncryptedTransfer (String resolverClazz)
specifier|public
name|TestEncryptedTransfer
parameter_list|(
name|String
name|resolverClazz
parameter_list|)
block|{
name|this
operator|.
name|resolverClazz
operator|=
name|resolverClazz
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEncryptedRead ()
specifier|public
name|void
name|testEncryptedRead
parameter_list|()
throws|throws
name|IOException
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|FileSystem
name|fs
init|=
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|writeTestDataToFile
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PLAIN_TEXT
argument_list|,
name|DFSTestUtil
operator|.
name|readFile
argument_list|(
name|fs
argument_list|,
name|TEST_PATH
argument_list|)
argument_list|)
expr_stmt|;
name|FileChecksum
name|checksum
init|=
name|fs
operator|.
name|getFileChecksum
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|setEncryptionConfigKeys
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|manageDataDfsDirs
argument_list|(
literal|false
argument_list|)
operator|.
name|manageNameDfsDirs
argument_list|(
literal|false
argument_list|)
operator|.
name|format
argument_list|(
literal|false
argument_list|)
operator|.
name|startupOption
argument_list|(
name|StartupOption
operator|.
name|REGULAR
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|fs
operator|=
name|getFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|LogCapturer
name|logs
init|=
name|GenericTestUtils
operator|.
name|LogCapturer
operator|.
name|captureLogs
argument_list|(
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SaslDataTransferServer
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|LogCapturer
name|logs1
init|=
name|GenericTestUtils
operator|.
name|LogCapturer
operator|.
name|captureLogs
argument_list|(
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DataTransferSaslUtil
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
name|PLAIN_TEXT
argument_list|,
name|DFSTestUtil
operator|.
name|readFile
argument_list|(
name|fs
argument_list|,
name|TEST_PATH
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|checksum
argument_list|,
name|fs
operator|.
name|getFileChecksum
argument_list|(
name|TEST_PATH
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|logs
operator|.
name|stopCapturing
argument_list|()
expr_stmt|;
name|logs1
operator|.
name|stopCapturing
argument_list|()
expr_stmt|;
block|}
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|resolverClazz
operator|!=
literal|null
operator|&&
operator|!
name|resolverClazz
operator|.
name|endsWith
argument_list|(
literal|"TestTrustedChannelResolver"
argument_list|)
condition|)
block|{
comment|// Test client and server negotiate cipher option
name|GenericTestUtils
operator|.
name|assertMatches
argument_list|(
name|logs
operator|.
name|getOutput
argument_list|()
argument_list|,
literal|"Server using cipher suite"
argument_list|)
expr_stmt|;
comment|// Check the IOStreamPair
name|GenericTestUtils
operator|.
name|assertMatches
argument_list|(
name|logs1
operator|.
name|getOutput
argument_list|()
argument_list|,
literal|"Creating IOStreamPair of CryptoInputStream and CryptoOutputStream."
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testEncryptedReadWithRC4 ()
specifier|public
name|void
name|testEncryptedReadWithRC4
parameter_list|()
throws|throws
name|IOException
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|FileSystem
name|fs
init|=
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|writeTestDataToFile
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PLAIN_TEXT
argument_list|,
name|DFSTestUtil
operator|.
name|readFile
argument_list|(
name|fs
argument_list|,
name|TEST_PATH
argument_list|)
argument_list|)
expr_stmt|;
name|FileChecksum
name|checksum
init|=
name|fs
operator|.
name|getFileChecksum
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|setEncryptionConfigKeys
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// It'll use 3DES by default, but we set it to rc4 here.
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATA_ENCRYPTION_ALGORITHM_KEY
argument_list|,
literal|"rc4"
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|manageDataDfsDirs
argument_list|(
literal|false
argument_list|)
operator|.
name|manageNameDfsDirs
argument_list|(
literal|false
argument_list|)
operator|.
name|format
argument_list|(
literal|false
argument_list|)
operator|.
name|startupOption
argument_list|(
name|StartupOption
operator|.
name|REGULAR
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|fs
operator|=
name|getFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PLAIN_TEXT
argument_list|,
name|DFSTestUtil
operator|.
name|readFile
argument_list|(
name|fs
argument_list|,
name|TEST_PATH
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|checksum
argument_list|,
name|fs
operator|.
name|getFileChecksum
argument_list|(
name|TEST_PATH
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testEncryptedReadAfterNameNodeRestart ()
specifier|public
name|void
name|testEncryptedReadAfterNameNodeRestart
parameter_list|()
throws|throws
name|IOException
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|FileSystem
name|fs
init|=
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|writeTestDataToFile
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PLAIN_TEXT
argument_list|,
name|DFSTestUtil
operator|.
name|readFile
argument_list|(
name|fs
argument_list|,
name|TEST_PATH
argument_list|)
argument_list|)
expr_stmt|;
name|FileChecksum
name|checksum
init|=
name|fs
operator|.
name|getFileChecksum
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|setEncryptionConfigKeys
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|manageDataDfsDirs
argument_list|(
literal|false
argument_list|)
operator|.
name|manageNameDfsDirs
argument_list|(
literal|false
argument_list|)
operator|.
name|format
argument_list|(
literal|false
argument_list|)
operator|.
name|startupOption
argument_list|(
name|StartupOption
operator|.
name|REGULAR
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|fs
operator|=
name|getFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PLAIN_TEXT
argument_list|,
name|DFSTestUtil
operator|.
name|readFile
argument_list|(
name|fs
argument_list|,
name|TEST_PATH
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|checksum
argument_list|,
name|fs
operator|.
name|getFileChecksum
argument_list|(
name|TEST_PATH
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|restartNameNode
argument_list|()
expr_stmt|;
name|fs
operator|=
name|getFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PLAIN_TEXT
argument_list|,
name|DFSTestUtil
operator|.
name|readFile
argument_list|(
name|fs
argument_list|,
name|TEST_PATH
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|checksum
argument_list|,
name|fs
operator|.
name|getFileChecksum
argument_list|(
name|TEST_PATH
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testClientThatDoesNotSupportEncryption ()
specifier|public
name|void
name|testClientThatDoesNotSupportEncryption
parameter_list|()
throws|throws
name|IOException
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// Set short retry timeouts so this test runs faster
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_RETRY_WINDOW_BASE
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|FileSystem
name|fs
init|=
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|writeTestDataToFile
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PLAIN_TEXT
argument_list|,
name|DFSTestUtil
operator|.
name|readFile
argument_list|(
name|fs
argument_list|,
name|TEST_PATH
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|setEncryptionConfigKeys
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|manageDataDfsDirs
argument_list|(
literal|false
argument_list|)
operator|.
name|manageNameDfsDirs
argument_list|(
literal|false
argument_list|)
operator|.
name|format
argument_list|(
literal|false
argument_list|)
operator|.
name|startupOption
argument_list|(
name|StartupOption
operator|.
name|REGULAR
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|fs
operator|=
name|getFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|DFSClient
name|client
init|=
name|DFSClientAdapter
operator|.
name|getDFSClient
argument_list|(
operator|(
name|DistributedFileSystem
operator|)
name|fs
argument_list|)
decl_stmt|;
name|DFSClient
name|spyClient
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|client
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
literal|false
argument_list|)
operator|.
name|when
argument_list|(
name|spyClient
argument_list|)
operator|.
name|shouldEncryptData
argument_list|()
expr_stmt|;
name|DFSClientAdapter
operator|.
name|setDFSClient
argument_list|(
operator|(
name|DistributedFileSystem
operator|)
name|fs
argument_list|,
name|spyClient
argument_list|)
expr_stmt|;
name|LogCapturer
name|logs
init|=
name|GenericTestUtils
operator|.
name|LogCapturer
operator|.
name|captureLogs
argument_list|(
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DataNode
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
name|PLAIN_TEXT
argument_list|,
name|DFSTestUtil
operator|.
name|readFile
argument_list|(
name|fs
argument_list|,
name|TEST_PATH
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|resolverClazz
operator|!=
literal|null
operator|&&
operator|!
name|resolverClazz
operator|.
name|endsWith
argument_list|(
literal|"TestTrustedChannelResolver"
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Should not have been able to read without encryption enabled."
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Could not obtain block:"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|logs
operator|.
name|stopCapturing
argument_list|()
expr_stmt|;
block|}
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|resolverClazz
operator|!=
literal|null
operator|&&
operator|!
name|resolverClazz
operator|.
name|endsWith
argument_list|(
literal|"TestTrustedChannelResolver"
argument_list|)
condition|)
block|{
name|GenericTestUtils
operator|.
name|assertMatches
argument_list|(
name|logs
operator|.
name|getOutput
argument_list|()
argument_list|,
literal|"Failed to read expected encryption handshake from client at"
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testLongLivedReadClientAfterRestart ()
specifier|public
name|void
name|testLongLivedReadClientAfterRestart
parameter_list|()
throws|throws
name|IOException
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|FileSystem
name|fs
init|=
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|writeTestDataToFile
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PLAIN_TEXT
argument_list|,
name|DFSTestUtil
operator|.
name|readFile
argument_list|(
name|fs
argument_list|,
name|TEST_PATH
argument_list|)
argument_list|)
expr_stmt|;
name|FileChecksum
name|checksum
init|=
name|fs
operator|.
name|getFileChecksum
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|setEncryptionConfigKeys
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|manageDataDfsDirs
argument_list|(
literal|false
argument_list|)
operator|.
name|manageNameDfsDirs
argument_list|(
literal|false
argument_list|)
operator|.
name|format
argument_list|(
literal|false
argument_list|)
operator|.
name|startupOption
argument_list|(
name|StartupOption
operator|.
name|REGULAR
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|fs
operator|=
name|getFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PLAIN_TEXT
argument_list|,
name|DFSTestUtil
operator|.
name|readFile
argument_list|(
name|fs
argument_list|,
name|TEST_PATH
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|checksum
argument_list|,
name|fs
operator|.
name|getFileChecksum
argument_list|(
name|TEST_PATH
argument_list|)
argument_list|)
expr_stmt|;
comment|// Restart the NN and DN, after which the client's encryption key will no
comment|// longer be valid.
name|cluster
operator|.
name|restartNameNode
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|cluster
operator|.
name|restartDataNode
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PLAIN_TEXT
argument_list|,
name|DFSTestUtil
operator|.
name|readFile
argument_list|(
name|fs
argument_list|,
name|TEST_PATH
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|checksum
argument_list|,
name|fs
operator|.
name|getFileChecksum
argument_list|(
name|TEST_PATH
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testLongLivedWriteClientAfterRestart ()
specifier|public
name|void
name|testLongLivedWriteClientAfterRestart
parameter_list|()
throws|throws
name|IOException
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|setEncryptionConfigKeys
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|FileSystem
name|fs
init|=
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|writeTestDataToFile
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PLAIN_TEXT
argument_list|,
name|DFSTestUtil
operator|.
name|readFile
argument_list|(
name|fs
argument_list|,
name|TEST_PATH
argument_list|)
argument_list|)
expr_stmt|;
comment|// Restart the NN and DN, after which the client's encryption key will no
comment|// longer be valid.
name|cluster
operator|.
name|restartNameNode
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|cluster
operator|.
name|restartDataNodes
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|writeTestDataToFile
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PLAIN_TEXT
operator|+
name|PLAIN_TEXT
argument_list|,
name|DFSTestUtil
operator|.
name|readFile
argument_list|(
name|fs
argument_list|,
name|TEST_PATH
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testLongLivedClient ()
specifier|public
name|void
name|testLongLivedClient
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|FileSystem
name|fs
init|=
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|writeTestDataToFile
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PLAIN_TEXT
argument_list|,
name|DFSTestUtil
operator|.
name|readFile
argument_list|(
name|fs
argument_list|,
name|TEST_PATH
argument_list|)
argument_list|)
expr_stmt|;
name|FileChecksum
name|checksum
init|=
name|fs
operator|.
name|getFileChecksum
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|setEncryptionConfigKeys
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|manageDataDfsDirs
argument_list|(
literal|false
argument_list|)
operator|.
name|manageNameDfsDirs
argument_list|(
literal|false
argument_list|)
operator|.
name|format
argument_list|(
literal|false
argument_list|)
operator|.
name|startupOption
argument_list|(
name|StartupOption
operator|.
name|REGULAR
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|BlockTokenSecretManager
name|btsm
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getBlockTokenSecretManager
argument_list|()
decl_stmt|;
name|btsm
operator|.
name|setKeyUpdateIntervalForTesting
argument_list|(
literal|2
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|btsm
operator|.
name|setTokenLifetime
argument_list|(
literal|2
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|btsm
operator|.
name|clearAllKeysForTesting
argument_list|()
expr_stmt|;
name|fs
operator|=
name|getFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PLAIN_TEXT
argument_list|,
name|DFSTestUtil
operator|.
name|readFile
argument_list|(
name|fs
argument_list|,
name|TEST_PATH
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|checksum
argument_list|,
name|fs
operator|.
name|getFileChecksum
argument_list|(
name|TEST_PATH
argument_list|)
argument_list|)
expr_stmt|;
comment|// Sleep for 15 seconds, after which the encryption key will no longer be
comment|// valid. It needs to be a few multiples of the block token lifetime,
comment|// since several block tokens are valid at any given time (the current
comment|// and the last two, by default.)
name|LOG
operator|.
name|info
argument_list|(
literal|"Sleeping so that encryption keys expire..."
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|15
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Done sleeping."
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PLAIN_TEXT
argument_list|,
name|DFSTestUtil
operator|.
name|readFile
argument_list|(
name|fs
argument_list|,
name|TEST_PATH
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|checksum
argument_list|,
name|fs
operator|.
name|getFileChecksum
argument_list|(
name|TEST_PATH
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testEncryptedWriteWithOneDn ()
specifier|public
name|void
name|testEncryptedWriteWithOneDn
parameter_list|()
throws|throws
name|IOException
block|{
name|testEncryptedWrite
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEncryptedWriteWithTwoDns ()
specifier|public
name|void
name|testEncryptedWriteWithTwoDns
parameter_list|()
throws|throws
name|IOException
block|{
name|testEncryptedWrite
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEncryptedWriteWithMultipleDns ()
specifier|public
name|void
name|testEncryptedWriteWithMultipleDns
parameter_list|()
throws|throws
name|IOException
block|{
name|testEncryptedWrite
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
DECL|method|testEncryptedWrite (int numDns)
specifier|private
name|void
name|testEncryptedWrite
parameter_list|(
name|int
name|numDns
parameter_list|)
throws|throws
name|IOException
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|setEncryptionConfigKeys
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDns
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|FileSystem
name|fs
init|=
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|LogCapturer
name|logs
init|=
name|GenericTestUtils
operator|.
name|LogCapturer
operator|.
name|captureLogs
argument_list|(
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SaslDataTransferServer
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|LogCapturer
name|logs1
init|=
name|GenericTestUtils
operator|.
name|LogCapturer
operator|.
name|captureLogs
argument_list|(
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DataTransferSaslUtil
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|writeTestDataToFile
argument_list|(
name|fs
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|logs
operator|.
name|stopCapturing
argument_list|()
expr_stmt|;
name|logs1
operator|.
name|stopCapturing
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|PLAIN_TEXT
argument_list|,
name|DFSTestUtil
operator|.
name|readFile
argument_list|(
name|fs
argument_list|,
name|TEST_PATH
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|resolverClazz
operator|!=
literal|null
operator|&&
operator|!
name|resolverClazz
operator|.
name|endsWith
argument_list|(
literal|"TestTrustedChannelResolver"
argument_list|)
condition|)
block|{
comment|// Test client and server negotiate cipher option
name|GenericTestUtils
operator|.
name|assertMatches
argument_list|(
name|logs
operator|.
name|getOutput
argument_list|()
argument_list|,
literal|"Server using cipher suite"
argument_list|)
expr_stmt|;
comment|// Check the IOStreamPair
name|GenericTestUtils
operator|.
name|assertMatches
argument_list|(
name|logs1
operator|.
name|getOutput
argument_list|()
argument_list|,
literal|"Creating IOStreamPair of CryptoInputStream and CryptoOutputStream."
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testEncryptedAppend ()
specifier|public
name|void
name|testEncryptedAppend
parameter_list|()
throws|throws
name|IOException
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|setEncryptionConfigKeys
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|3
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|FileSystem
name|fs
init|=
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|writeTestDataToFile
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PLAIN_TEXT
argument_list|,
name|DFSTestUtil
operator|.
name|readFile
argument_list|(
name|fs
argument_list|,
name|TEST_PATH
argument_list|)
argument_list|)
expr_stmt|;
name|writeTestDataToFile
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PLAIN_TEXT
operator|+
name|PLAIN_TEXT
argument_list|,
name|DFSTestUtil
operator|.
name|readFile
argument_list|(
name|fs
argument_list|,
name|TEST_PATH
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testEncryptedAppendRequiringBlockTransfer ()
specifier|public
name|void
name|testEncryptedAppendRequiringBlockTransfer
parameter_list|()
throws|throws
name|IOException
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|setEncryptionConfigKeys
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// start up 4 DNs
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|4
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|FileSystem
name|fs
init|=
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Create a file with replication 3, so its block is on 3 / 4 DNs.
name|writeTestDataToFile
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PLAIN_TEXT
argument_list|,
name|DFSTestUtil
operator|.
name|readFile
argument_list|(
name|fs
argument_list|,
name|TEST_PATH
argument_list|)
argument_list|)
expr_stmt|;
comment|// Shut down one of the DNs holding a block replica.
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|locatedBlocks
init|=
name|DFSTestUtil
operator|.
name|getAllBlocks
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|locatedBlocks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|locatedBlocks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLocations
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|DataNode
name|dn
init|=
name|cluster
operator|.
name|getDataNode
argument_list|(
name|locatedBlocks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLocations
argument_list|()
index|[
literal|0
index|]
operator|.
name|getIpcPort
argument_list|()
argument_list|)
decl_stmt|;
name|dn
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// Reopen the file for append, which will need to add another DN to the
comment|// pipeline and in doing so trigger a block transfer.
name|writeTestDataToFile
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PLAIN_TEXT
operator|+
name|PLAIN_TEXT
argument_list|,
name|DFSTestUtil
operator|.
name|readFile
argument_list|(
name|fs
argument_list|,
name|TEST_PATH
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|writeTestDataToFile (FileSystem fs)
specifier|private
specifier|static
name|void
name|writeTestDataToFile
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|OutputStream
name|out
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|TEST_PATH
argument_list|)
condition|)
block|{
name|out
operator|=
name|fs
operator|.
name|create
argument_list|(
name|TEST_PATH
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|=
name|fs
operator|.
name|append
argument_list|(
name|TEST_PATH
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|write
argument_list|(
name|PLAIN_TEXT
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|class|TestTrustedChannelResolver
specifier|static
class|class
name|TestTrustedChannelResolver
extends|extends
name|TrustedChannelResolver
block|{
DECL|method|isTrusted ()
specifier|public
name|boolean
name|isTrusted
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|method|isTrusted (InetAddress peerAddress)
specifier|public
name|boolean
name|isTrusted
parameter_list|(
name|InetAddress
name|peerAddress
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
end_class

end_unit

