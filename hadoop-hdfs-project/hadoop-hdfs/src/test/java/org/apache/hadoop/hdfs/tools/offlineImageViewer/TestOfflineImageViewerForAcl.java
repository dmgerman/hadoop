begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.tools.offlineImageViewer
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|offlineImageViewer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSImageTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|WebHdfsFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryScope
operator|.
name|ACCESS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryScope
operator|.
name|DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryType
operator|.
name|GROUP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryType
operator|.
name|OTHER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryType
operator|.
name|USER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
operator|.
name|ALL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
operator|.
name|READ
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
operator|.
name|READ_WRITE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
operator|.
name|READ_EXECUTE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
operator|.
name|NONE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|AclTestHelpers
operator|.
name|aclEntry
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_comment
comment|/**  * Tests OfflineImageViewer if the input fsimage has HDFS ACLs  */
end_comment

begin_class
DECL|class|TestOfflineImageViewerForAcl
specifier|public
class|class
name|TestOfflineImageViewerForAcl
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestOfflineImageViewerForAcl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|originalFsimage
specifier|private
specifier|static
name|File
name|originalFsimage
init|=
literal|null
decl_stmt|;
comment|// ACLs as set to dfs, to be compared with viewer's output
DECL|field|writtenAcls
specifier|final
specifier|static
name|HashMap
argument_list|<
name|String
argument_list|,
name|AclStatus
argument_list|>
name|writtenAcls
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
comment|/**    * Create a populated namespace for later testing. Save its contents to a    * data structure and store its fsimage location.    * We only want to generate the fsimage file once and use it for    * multiple tests.    */
annotation|@
name|BeforeClass
DECL|method|createOriginalFSImage ()
specifier|public
specifier|static
name|void
name|createOriginalFSImage
parameter_list|()
throws|throws
name|IOException
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_ACLS_ENABLED_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|DistributedFileSystem
name|hdfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// Create a reasonable namespace with ACLs
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/dirWithNoAcl"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|writtenAcls
operator|.
name|put
argument_list|(
name|dir
operator|.
name|toString
argument_list|()
argument_list|,
name|hdfs
operator|.
name|getAclStatus
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
name|dir
operator|=
operator|new
name|Path
argument_list|(
literal|"/dirWithDefaultAcl"
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|setAcl
argument_list|(
name|dir
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|OTHER
argument_list|,
name|NONE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|writtenAcls
operator|.
name|put
argument_list|(
name|dir
operator|.
name|toString
argument_list|()
argument_list|,
name|hdfs
operator|.
name|getAclStatus
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
literal|"/noAcl"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|o
init|=
name|hdfs
operator|.
name|create
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|o
operator|.
name|write
argument_list|(
literal|23
argument_list|)
expr_stmt|;
name|o
operator|.
name|close
argument_list|()
expr_stmt|;
name|writtenAcls
operator|.
name|put
argument_list|(
name|file
operator|.
name|toString
argument_list|()
argument_list|,
name|hdfs
operator|.
name|getAclStatus
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|=
operator|new
name|Path
argument_list|(
literal|"/withAcl"
argument_list|)
expr_stmt|;
name|o
operator|=
name|hdfs
operator|.
name|create
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|o
operator|.
name|write
argument_list|(
literal|23
argument_list|)
expr_stmt|;
name|o
operator|.
name|close
argument_list|()
expr_stmt|;
name|hdfs
operator|.
name|setAcl
argument_list|(
name|file
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
name|READ_WRITE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|READ
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|OTHER
argument_list|,
name|NONE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|writtenAcls
operator|.
name|put
argument_list|(
name|file
operator|.
name|toString
argument_list|()
argument_list|,
name|hdfs
operator|.
name|getAclStatus
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|=
operator|new
name|Path
argument_list|(
literal|"/withSeveralAcls"
argument_list|)
expr_stmt|;
name|o
operator|=
name|hdfs
operator|.
name|create
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|o
operator|.
name|write
argument_list|(
literal|23
argument_list|)
expr_stmt|;
name|o
operator|.
name|close
argument_list|()
expr_stmt|;
name|hdfs
operator|.
name|setAcl
argument_list|(
name|file
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
name|READ_WRITE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|READ_WRITE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"bar"
argument_list|,
name|READ
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
literal|"group"
argument_list|,
name|READ
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|OTHER
argument_list|,
name|NONE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|writtenAcls
operator|.
name|put
argument_list|(
name|file
operator|.
name|toString
argument_list|()
argument_list|,
name|hdfs
operator|.
name|getAclStatus
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
comment|// Write results to the fsimage file
name|hdfs
operator|.
name|setSafeMode
argument_list|(
name|HdfsConstants
operator|.
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|saveNamespace
argument_list|()
expr_stmt|;
comment|// Determine the location of the fsimage file
name|originalFsimage
operator|=
name|FSImageTestUtil
operator|.
name|findLatestImageFile
argument_list|(
name|FSImageTestUtil
operator|.
name|getFSImage
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|()
argument_list|)
operator|.
name|getStorage
argument_list|()
operator|.
name|getStorageDir
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|originalFsimage
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Didn't generate or can't find fsimage"
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"original FS image file is "
operator|+
name|originalFsimage
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|AfterClass
DECL|method|deleteOriginalFSImage ()
specifier|public
specifier|static
name|void
name|deleteOriginalFSImage
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|originalFsimage
operator|!=
literal|null
operator|&&
name|originalFsimage
operator|.
name|exists
argument_list|()
condition|)
block|{
name|originalFsimage
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testWebImageViewerForAcl ()
specifier|public
name|void
name|testWebImageViewerForAcl
parameter_list|()
throws|throws
name|Exception
block|{
name|WebImageViewer
name|viewer
init|=
operator|new
name|WebImageViewer
argument_list|(
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
literal|"localhost:0"
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|viewer
operator|.
name|initServer
argument_list|(
name|originalFsimage
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|port
init|=
name|viewer
operator|.
name|getPort
argument_list|()
decl_stmt|;
comment|// create a WebHdfsFileSystem instance
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"webhdfs://localhost:"
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|port
argument_list|)
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|WebHdfsFileSystem
name|webhdfs
init|=
operator|(
name|WebHdfsFileSystem
operator|)
name|FileSystem
operator|.
name|get
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// GETACLSTATUS operation to a directory without ACL
name|AclStatus
name|acl
init|=
name|webhdfs
operator|.
name|getAclStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/dirWithNoAcl"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|writtenAcls
operator|.
name|get
argument_list|(
literal|"/dirWithNoAcl"
argument_list|)
argument_list|,
name|acl
argument_list|)
expr_stmt|;
comment|// GETACLSTATUS operation to a directory with a default ACL
name|acl
operator|=
name|webhdfs
operator|.
name|getAclStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/dirWithDefaultAcl"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|writtenAcls
operator|.
name|get
argument_list|(
literal|"/dirWithDefaultAcl"
argument_list|)
argument_list|,
name|acl
argument_list|)
expr_stmt|;
comment|// GETACLSTATUS operation to a file without ACL
name|acl
operator|=
name|webhdfs
operator|.
name|getAclStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/noAcl"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|writtenAcls
operator|.
name|get
argument_list|(
literal|"/noAcl"
argument_list|)
argument_list|,
name|acl
argument_list|)
expr_stmt|;
comment|// GETACLSTATUS operation to a file with a ACL
name|acl
operator|=
name|webhdfs
operator|.
name|getAclStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/withAcl"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|writtenAcls
operator|.
name|get
argument_list|(
literal|"/withAcl"
argument_list|)
argument_list|,
name|acl
argument_list|)
expr_stmt|;
comment|// GETACLSTATUS operation to a file with several ACL entries
name|acl
operator|=
name|webhdfs
operator|.
name|getAclStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/withSeveralAcls"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|writtenAcls
operator|.
name|get
argument_list|(
literal|"/withSeveralAcls"
argument_list|)
argument_list|,
name|acl
argument_list|)
expr_stmt|;
comment|// GETACLSTATUS operation to a invalid path
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
literal|"http://localhost:"
operator|+
name|port
operator|+
literal|"/webhdfs/v1/invalid/?op=GETACLSTATUS"
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|connection
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setRequestMethod
argument_list|(
literal|"GET"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_NOT_FOUND
argument_list|,
name|connection
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// shutdown the viewer
name|viewer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

