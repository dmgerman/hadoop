begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.viewfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|viewfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystemTestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSNNTopology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_comment
comment|/**  * Test for viewfs with LinkMergeSlash mount table entries.  */
end_comment

begin_class
DECL|class|TestViewFileSystemLinkMergeSlash
specifier|public
class|class
name|TestViewFileSystemLinkMergeSlash
extends|extends
name|ViewFileSystemBaseTest
block|{
DECL|field|fsDefault
specifier|private
specifier|static
name|FileSystem
name|fsDefault
decl_stmt|;
DECL|field|cluster
specifier|private
specifier|static
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|NAME_SPACES_COUNT
specifier|private
specifier|static
specifier|final
name|int
name|NAME_SPACES_COUNT
init|=
literal|3
decl_stmt|;
DECL|field|DATA_NODES_COUNT
specifier|private
specifier|static
specifier|final
name|int
name|DATA_NODES_COUNT
init|=
literal|3
decl_stmt|;
DECL|field|FS_INDEX_DEFAULT
specifier|private
specifier|static
specifier|final
name|int
name|FS_INDEX_DEFAULT
init|=
literal|0
decl_stmt|;
DECL|field|LINK_MERGE_SLASH_CLUSTER_1_NAME
specifier|private
specifier|static
specifier|final
name|String
name|LINK_MERGE_SLASH_CLUSTER_1_NAME
init|=
literal|"ClusterLMS1"
decl_stmt|;
DECL|field|LINK_MERGE_SLASH_CLUSTER_2_NAME
specifier|private
specifier|static
specifier|final
name|String
name|LINK_MERGE_SLASH_CLUSTER_2_NAME
init|=
literal|"ClusterLMS2"
decl_stmt|;
DECL|field|FS_HDFS
specifier|private
specifier|static
specifier|final
name|FileSystem
index|[]
name|FS_HDFS
init|=
operator|new
name|FileSystem
index|[
name|NAME_SPACES_COUNT
index|]
decl_stmt|;
DECL|field|CONF
specifier|private
specifier|static
specifier|final
name|Configuration
name|CONF
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
DECL|field|TEST_DIR
specifier|private
specifier|static
specifier|final
name|File
name|TEST_DIR
init|=
name|GenericTestUtils
operator|.
name|getTestDir
argument_list|(
name|TestViewFileSystemLinkMergeSlash
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|TEST_TEMP_PATH
specifier|private
specifier|static
specifier|final
name|String
name|TEST_TEMP_PATH
init|=
literal|"/tmp/TestViewFileSystemLinkMergeSlash"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestViewFileSystemLinkMergeSlash
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|createFileSystemHelper ()
specifier|protected
name|FileSystemTestHelper
name|createFileSystemHelper
parameter_list|()
block|{
return|return
operator|new
name|FileSystemTestHelper
argument_list|(
name|TEST_TEMP_PATH
argument_list|)
return|;
block|}
annotation|@
name|BeforeClass
DECL|method|clusterSetupAtBeginning ()
specifier|public
specifier|static
name|void
name|clusterSetupAtBeginning
parameter_list|()
throws|throws
name|IOException
throws|,
name|LoginException
throws|,
name|URISyntaxException
block|{
name|SupportsBlocks
operator|=
literal|true
expr_stmt|;
name|CONF
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DELEGATION_TOKEN_ALWAYS_USE_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|CONF
argument_list|)
operator|.
name|nnTopology
argument_list|(
name|MiniDFSNNTopology
operator|.
name|simpleFederatedTopology
argument_list|(
name|NAME_SPACES_COUNT
argument_list|)
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|DATA_NODES_COUNT
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitClusterUp
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NAME_SPACES_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|FS_HDFS
index|[
name|i
index|]
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|fsDefault
operator|=
name|FS_HDFS
index|[
name|FS_INDEX_DEFAULT
index|]
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|clusterShutdownAtEnd ()
specifier|public
specifier|static
name|void
name|clusterShutdownAtEnd
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|fsTarget
operator|=
name|fsDefault
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
comment|/**    * Override this so that we don't set the targetTestRoot to any path under the    * root of the FS, and so that we don't try to delete the test dir, but rather    * only its contents.    */
annotation|@
name|Override
DECL|method|initializeTargetTestRoot ()
name|void
name|initializeTargetTestRoot
parameter_list|()
throws|throws
name|IOException
block|{
name|targetTestRoot
operator|=
name|fsDefault
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|FileStatus
name|status
range|:
name|fsDefault
operator|.
name|listStatus
argument_list|(
name|targetTestRoot
argument_list|)
control|)
block|{
name|fsDefault
operator|.
name|delete
argument_list|(
name|status
operator|.
name|getPath
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|setupMountPoints ()
name|void
name|setupMountPoints
parameter_list|()
block|{
name|super
operator|.
name|setupMountPoints
argument_list|()
expr_stmt|;
name|ConfigUtil
operator|.
name|addLinkMergeSlash
argument_list|(
name|conf
argument_list|,
name|LINK_MERGE_SLASH_CLUSTER_1_NAME
argument_list|,
name|targetTestRoot
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
name|ConfigUtil
operator|.
name|addLinkMergeSlash
argument_list|(
name|conf
argument_list|,
name|LINK_MERGE_SLASH_CLUSTER_2_NAME
argument_list|,
name|targetTestRoot
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getExpectedDelegationTokenCount ()
name|int
name|getExpectedDelegationTokenCount
parameter_list|()
block|{
return|return
literal|1
return|;
comment|// all point to the same fs so 1 unique token
block|}
annotation|@
name|Override
DECL|method|getExpectedDelegationTokenCountWithCredentials ()
name|int
name|getExpectedDelegationTokenCountWithCredentials
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
annotation|@
name|Test
DECL|method|testConfLinkMergeSlash ()
specifier|public
name|void
name|testConfLinkMergeSlash
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_DIR
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|String
name|clusterName
init|=
literal|"ClusterMerge"
decl_stmt|;
name|URI
name|viewFsUri
init|=
operator|new
name|URI
argument_list|(
name|FsConstants
operator|.
name|VIEWFS_SCHEME
argument_list|,
name|clusterName
argument_list|,
literal|"/"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|testFileName
init|=
literal|"testLinkMergeSlash"
decl_stmt|;
name|File
name|infile
init|=
operator|new
name|File
argument_list|(
name|TEST_DIR
argument_list|,
name|testFileName
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|content
init|=
literal|"HelloWorld"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|FileOutputStream
name|fos
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fos
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|infile
argument_list|)
expr_stmt|;
name|fos
operator|.
name|write
argument_list|(
name|content
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|fos
operator|!=
literal|null
condition|)
block|{
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
operator|(
name|long
operator|)
name|content
operator|.
name|length
argument_list|,
name|infile
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|ConfigUtil
operator|.
name|addLinkMergeSlash
argument_list|(
name|conf
argument_list|,
name|clusterName
argument_list|,
name|TEST_DIR
operator|.
name|toURI
argument_list|()
argument_list|)
expr_stmt|;
name|FileSystem
name|vfs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|viewFsUri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ViewFileSystem
operator|.
name|class
argument_list|,
name|vfs
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|FileStatus
name|stat
init|=
name|vfs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|viewFsUri
operator|.
name|toString
argument_list|()
operator|+
name|testFileName
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"File stat: "
operator|+
name|stat
argument_list|)
expr_stmt|;
name|vfs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConfLinkMergeSlashWithRegularLinks ()
specifier|public
name|void
name|testConfLinkMergeSlashWithRegularLinks
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_DIR
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|String
name|clusterName
init|=
literal|"ClusterMerge"
decl_stmt|;
name|String
name|expectedErrorMsg1
init|=
literal|"Mount table ClusterMerge has already been "
operator|+
literal|"configured with a merge slash link"
decl_stmt|;
name|String
name|expectedErrorMsg2
init|=
literal|"Mount table ClusterMerge has already been "
operator|+
literal|"configured with regular links"
decl_stmt|;
name|URI
name|viewFsUri
init|=
operator|new
name|URI
argument_list|(
name|FsConstants
operator|.
name|VIEWFS_SCHEME
argument_list|,
name|clusterName
argument_list|,
literal|"/"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|ConfigUtil
operator|.
name|addLinkMergeSlash
argument_list|(
name|conf
argument_list|,
name|clusterName
argument_list|,
name|TEST_DIR
operator|.
name|toURI
argument_list|()
argument_list|)
expr_stmt|;
name|ConfigUtil
operator|.
name|addLink
argument_list|(
name|conf
argument_list|,
name|clusterName
argument_list|,
literal|"testDir"
argument_list|,
name|TEST_DIR
operator|.
name|toURI
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|FileSystem
operator|.
name|get
argument_list|(
name|viewFsUri
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Shouldn't allow both merge slash link and regular link on same "
operator|+
literal|"mount table."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Unexpected error message: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|expectedErrorMsg1
argument_list|)
operator|||
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|expectedErrorMsg2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testConfLinkMergeSlashWithMountPoint ()
specifier|public
name|void
name|testConfLinkMergeSlashWithMountPoint
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_DIR
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|String
name|clusterName
init|=
literal|"ClusterX"
decl_stmt|;
name|String
name|mountPoint
init|=
literal|"/user"
decl_stmt|;
name|URI
name|viewFsUri
init|=
operator|new
name|URI
argument_list|(
name|FsConstants
operator|.
name|VIEWFS_SCHEME
argument_list|,
name|clusterName
argument_list|,
literal|"/"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|expectedErrorMsg
init|=
literal|"Invalid linkMergeSlash entry in config: "
operator|+
literal|"linkMergeSlash./user"
decl_stmt|;
name|String
name|mountTableEntry
init|=
name|Constants
operator|.
name|CONFIG_VIEWFS_PREFIX
operator|+
literal|"."
operator|+
name|clusterName
operator|+
literal|"."
operator|+
name|Constants
operator|.
name|CONFIG_VIEWFS_LINK_MERGE_SLASH
operator|+
literal|"."
operator|+
name|mountPoint
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|mountTableEntry
argument_list|,
name|TEST_DIR
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|FileSystem
operator|.
name|get
argument_list|(
name|viewFsUri
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Shouldn't allow linkMergeSlash to take extra mount points!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|expectedErrorMsg
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testChildFileSystems ()
specifier|public
name|void
name|testChildFileSystems
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|viewFsUri
init|=
operator|new
name|URI
argument_list|(
name|FsConstants
operator|.
name|VIEWFS_SCHEME
argument_list|,
name|LINK_MERGE_SLASH_CLUSTER_1_NAME
argument_list|,
literal|"/"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|viewFsUri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
index|[]
name|childFs
init|=
name|fs
operator|.
name|getChildFileSystems
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected number of child filesystems!"
argument_list|,
literal|1
argument_list|,
name|childFs
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected child filesystem!"
argument_list|,
name|DistributedFileSystem
operator|.
name|class
argument_list|,
name|childFs
index|[
literal|0
index|]
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

