begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.web.client
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|RandomStringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|MiniOzoneCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|exceptions
operator|.
name|OzoneException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|request
operator|.
name|OzoneQuota
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|utils
operator|.
name|OzoneUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|TestVolume
specifier|public
class|class
name|TestVolume
block|{
DECL|field|cluster
specifier|private
specifier|static
name|MiniOzoneCluster
name|cluster
init|=
literal|null
decl_stmt|;
DECL|field|client
specifier|private
specifier|static
name|OzoneClient
name|client
init|=
literal|null
decl_stmt|;
comment|/**    * Create a MiniDFSCluster for testing.    *<p>    * Ozone is made active by setting OZONE_ENABLED = true and    * OZONE_HANDLER_TYPE_KEY = "local" , which uses a local directory to    * emulate Ozone backend.    *    * @throws IOException    */
annotation|@
name|BeforeClass
DECL|method|init ()
specifier|public
specifier|static
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
name|OzoneConfiguration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|URL
name|p
init|=
name|conf
operator|.
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|p
operator|.
name|getPath
argument_list|()
operator|.
name|concat
argument_list|(
name|TestVolume
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
name|path
operator|+=
name|conf
operator|.
name|getTrimmed
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_LOCALSTORAGE_ROOT
argument_list|,
name|OzoneConfigKeys
operator|.
name|OZONE_LOCALSTORAGE_ROOT_DEFAULT
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_LOCALSTORAGE_ROOT
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|Logger
operator|.
name|getLogger
argument_list|(
literal|"log4j.logger.org.apache.http"
argument_list|)
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniOzoneCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|setHandlerType
argument_list|(
literal|"local"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|DataNode
name|dataNode
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|int
name|port
init|=
name|dataNode
operator|.
name|getInfoPort
argument_list|()
decl_stmt|;
name|client
operator|=
operator|new
name|OzoneClient
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"http://localhost:%d"
argument_list|,
name|port
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * shutdown MiniDFSCluster    */
annotation|@
name|AfterClass
DECL|method|shutdown ()
specifier|public
specifier|static
name|void
name|shutdown
parameter_list|()
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCreateVolume ()
specifier|public
name|void
name|testCreateVolume
parameter_list|()
throws|throws
name|OzoneException
block|{
name|String
name|volumeName
init|=
name|OzoneUtils
operator|.
name|getRequestID
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|client
operator|.
name|setUserAuth
argument_list|(
name|OzoneConsts
operator|.
name|OZONE_SIMPLE_HDFS_USER
argument_list|)
expr_stmt|;
name|OzoneVolume
name|vol
init|=
name|client
operator|.
name|createVolume
argument_list|(
name|volumeName
argument_list|,
literal|"bilbo"
argument_list|,
literal|"100TB"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|vol
operator|.
name|getVolumeName
argument_list|()
argument_list|,
name|volumeName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|vol
operator|.
name|getCreatedby
argument_list|()
argument_list|,
literal|"hdfs"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|vol
operator|.
name|getOwnerName
argument_list|()
argument_list|,
literal|"bilbo"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|vol
operator|.
name|getQuota
argument_list|()
operator|.
name|getUnit
argument_list|()
argument_list|,
name|OzoneQuota
operator|.
name|Units
operator|.
name|TB
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|vol
operator|.
name|getQuota
argument_list|()
operator|.
name|getSize
argument_list|()
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateDuplicateVolume ()
specifier|public
name|void
name|testCreateDuplicateVolume
parameter_list|()
throws|throws
name|OzoneException
block|{
try|try
block|{
name|client
operator|.
name|setUserAuth
argument_list|(
name|OzoneConsts
operator|.
name|OZONE_SIMPLE_HDFS_USER
argument_list|)
expr_stmt|;
name|client
operator|.
name|createVolume
argument_list|(
literal|"testvol"
argument_list|,
literal|"bilbo"
argument_list|,
literal|"100TB"
argument_list|)
expr_stmt|;
name|client
operator|.
name|createVolume
argument_list|(
literal|"testvol"
argument_list|,
literal|"bilbo"
argument_list|,
literal|"100TB"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OzoneException
name|ex
parameter_list|)
block|{
comment|// OZone will throw saying volume already exists
name|assertEquals
argument_list|(
name|ex
operator|.
name|getShortMessage
argument_list|()
argument_list|,
literal|"volumeAlreadyExists"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDeleteVolume ()
specifier|public
name|void
name|testDeleteVolume
parameter_list|()
throws|throws
name|OzoneException
block|{
name|String
name|volumeName
init|=
name|OzoneUtils
operator|.
name|getRequestID
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|client
operator|.
name|setUserAuth
argument_list|(
name|OzoneConsts
operator|.
name|OZONE_SIMPLE_HDFS_USER
argument_list|)
expr_stmt|;
name|OzoneVolume
name|vol
init|=
name|client
operator|.
name|createVolume
argument_list|(
name|volumeName
argument_list|,
literal|"bilbo"
argument_list|,
literal|"100TB"
argument_list|)
decl_stmt|;
name|client
operator|.
name|deleteVolume
argument_list|(
name|vol
operator|.
name|getVolumeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testChangeOwnerOnVolume ()
specifier|public
name|void
name|testChangeOwnerOnVolume
parameter_list|()
throws|throws
name|OzoneException
block|{
name|String
name|volumeName
init|=
name|OzoneUtils
operator|.
name|getRequestID
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|client
operator|.
name|setUserAuth
argument_list|(
name|OzoneConsts
operator|.
name|OZONE_SIMPLE_HDFS_USER
argument_list|)
expr_stmt|;
name|OzoneVolume
name|vol
init|=
name|client
operator|.
name|createVolume
argument_list|(
name|volumeName
argument_list|,
literal|"bilbo"
argument_list|,
literal|"100TB"
argument_list|)
decl_stmt|;
name|client
operator|.
name|setVolumeOwner
argument_list|(
name|volumeName
argument_list|,
literal|"frodo"
argument_list|)
expr_stmt|;
name|OzoneVolume
name|newVol
init|=
name|client
operator|.
name|getVolume
argument_list|(
name|volumeName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|newVol
operator|.
name|getOwnerName
argument_list|()
argument_list|,
literal|"frodo"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testChangeQuotaOnVolume ()
specifier|public
name|void
name|testChangeQuotaOnVolume
parameter_list|()
throws|throws
name|OzoneException
throws|,
name|IOException
block|{
name|String
name|volumeName
init|=
name|OzoneUtils
operator|.
name|getRequestID
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|client
operator|.
name|setUserAuth
argument_list|(
name|OzoneConsts
operator|.
name|OZONE_SIMPLE_HDFS_USER
argument_list|)
expr_stmt|;
name|OzoneVolume
name|vol
init|=
name|client
operator|.
name|createVolume
argument_list|(
name|volumeName
argument_list|,
literal|"bilbo"
argument_list|,
literal|"100TB"
argument_list|)
decl_stmt|;
name|client
operator|.
name|setVolumeQuota
argument_list|(
name|volumeName
argument_list|,
literal|"1000MB"
argument_list|)
expr_stmt|;
name|OzoneVolume
name|newVol
init|=
name|client
operator|.
name|getVolume
argument_list|(
name|volumeName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|newVol
operator|.
name|getQuota
argument_list|()
operator|.
name|getSize
argument_list|()
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newVol
operator|.
name|getQuota
argument_list|()
operator|.
name|getUnit
argument_list|()
argument_list|,
name|OzoneQuota
operator|.
name|Units
operator|.
name|MB
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testListVolume ()
specifier|public
name|void
name|testListVolume
parameter_list|()
throws|throws
name|OzoneException
throws|,
name|IOException
block|{
name|client
operator|.
name|setUserAuth
argument_list|(
name|OzoneConsts
operator|.
name|OZONE_SIMPLE_HDFS_USER
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
literal|10
condition|;
name|x
operator|++
control|)
block|{
name|String
name|volumeName
init|=
name|OzoneUtils
operator|.
name|getRequestID
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|OzoneVolume
name|vol
init|=
name|client
operator|.
name|createVolume
argument_list|(
name|volumeName
argument_list|,
literal|"frodo"
argument_list|,
literal|"100TB"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|vol
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|OzoneVolume
argument_list|>
name|ovols
init|=
name|client
operator|.
name|listVolumes
argument_list|(
literal|"frodo"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ovols
operator|.
name|size
argument_list|()
operator|>=
literal|10
argument_list|)
expr_stmt|;
block|}
comment|//@Test
comment|// Takes 3m to run, disable for now.
DECL|method|testListVolumePagination ()
specifier|public
name|void
name|testListVolumePagination
parameter_list|()
throws|throws
name|OzoneException
throws|,
name|IOException
block|{
specifier|final
name|int
name|volCount
init|=
literal|2000
decl_stmt|;
specifier|final
name|int
name|step
init|=
literal|100
decl_stmt|;
name|client
operator|.
name|setUserAuth
argument_list|(
name|OzoneConsts
operator|.
name|OZONE_SIMPLE_HDFS_USER
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|volCount
condition|;
name|x
operator|++
control|)
block|{
name|String
name|volumeName
init|=
name|OzoneUtils
operator|.
name|getRequestID
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|OzoneVolume
name|vol
init|=
name|client
operator|.
name|createVolume
argument_list|(
name|volumeName
argument_list|,
literal|"frodo"
argument_list|,
literal|"100TB"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|vol
argument_list|)
expr_stmt|;
block|}
name|OzoneVolume
name|prevKey
init|=
literal|null
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|int
name|pagecount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|count
operator|<
name|volCount
condition|)
block|{
name|List
argument_list|<
name|OzoneVolume
argument_list|>
name|ovols
init|=
name|client
operator|.
name|listVolumes
argument_list|(
literal|"frodo"
argument_list|,
literal|null
argument_list|,
name|step
argument_list|,
name|prevKey
argument_list|)
decl_stmt|;
name|count
operator|+=
name|ovols
operator|.
name|size
argument_list|()
expr_stmt|;
name|prevKey
operator|=
name|ovols
operator|.
name|get
argument_list|(
name|ovols
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|pagecount
operator|++
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|volCount
operator|/
name|step
argument_list|,
name|pagecount
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testListAllVolumes ()
specifier|public
name|void
name|testListAllVolumes
parameter_list|()
throws|throws
name|OzoneException
throws|,
name|IOException
block|{
specifier|final
name|int
name|volCount
init|=
literal|200
decl_stmt|;
specifier|final
name|int
name|step
init|=
literal|10
decl_stmt|;
name|client
operator|.
name|setUserAuth
argument_list|(
name|OzoneConsts
operator|.
name|OZONE_SIMPLE_HDFS_USER
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|volCount
condition|;
name|x
operator|++
control|)
block|{
name|String
name|userName
init|=
literal|"frodo"
operator|+
name|RandomStringUtils
operator|.
name|randomAlphabetic
argument_list|(
literal|5
argument_list|)
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|String
name|volumeName
init|=
literal|"vol"
operator|+
name|RandomStringUtils
operator|.
name|randomAlphabetic
argument_list|(
literal|5
argument_list|)
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|OzoneVolume
name|vol
init|=
name|client
operator|.
name|createVolume
argument_list|(
name|volumeName
argument_list|,
name|userName
argument_list|,
literal|"100TB"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|vol
argument_list|)
expr_stmt|;
block|}
name|OzoneVolume
name|prevKey
init|=
literal|null
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|int
name|pagecount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|count
operator|<
name|volCount
condition|)
block|{
name|List
argument_list|<
name|OzoneVolume
argument_list|>
name|ovols
init|=
name|client
operator|.
name|listAllVolumes
argument_list|(
literal|null
argument_list|,
name|step
argument_list|,
name|prevKey
argument_list|)
decl_stmt|;
name|count
operator|+=
name|ovols
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|ovols
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|prevKey
operator|=
name|ovols
operator|.
name|get
argument_list|(
name|ovols
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|pagecount
operator|++
expr_stmt|;
block|}
comment|// becasue we are querying an existing ozone store, there will
comment|// be volumes created by other tests too. So we should get more page counts.
name|Assert
operator|.
name|assertEquals
argument_list|(
name|volCount
operator|/
name|step
argument_list|,
name|pagecount
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

