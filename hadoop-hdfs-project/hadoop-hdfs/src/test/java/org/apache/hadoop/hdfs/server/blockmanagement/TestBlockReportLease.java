begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.blockmanagement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|BlockListAsLongs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSNamesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|BlockReportContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|FinalizeCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|HeartbeatResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamenodeProtocols
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|SlowDiskReports
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|SlowPeerReports
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|StorageBlockReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|StorageReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
operator|.
name|DelayAnswer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doAnswer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_comment
comment|/**  * Tests that BlockReportLease in BlockManager.  */
end_comment

begin_class
DECL|class|TestBlockReportLease
specifier|public
class|class
name|TestBlockReportLease
block|{
comment|/**    * Test check lease about one BlockReport with many StorageBlockReport.    * Before HDFS-12914, when batch storage report to NameNode, it will check    * less for one storage by one, So it could part storage report can    * be process normally, however, the rest storage report can not be process    * since check lease failed.    * After HDFS-12914, NameNode check lease once for every blockreport request,    * So this issue will not exist anymore.    */
annotation|@
name|Test
DECL|method|testCheckBlockReportLease ()
specifier|public
name|void
name|testCheckBlockReportLease
parameter_list|()
throws|throws
name|Exception
block|{
name|HdfsConfiguration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
try|try
init|(
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
init|)
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|FSNamesystem
name|fsn
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
decl_stmt|;
name|BlockManager
name|blockManager
init|=
name|fsn
operator|.
name|getBlockManager
argument_list|()
decl_stmt|;
name|BlockManager
name|spyBlockManager
init|=
name|spy
argument_list|(
name|blockManager
argument_list|)
decl_stmt|;
name|fsn
operator|.
name|setBlockManagerForTesting
argument_list|(
name|spyBlockManager
argument_list|)
expr_stmt|;
name|String
name|poolId
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockPoolId
argument_list|()
decl_stmt|;
name|NamenodeProtocols
name|rpcServer
init|=
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
decl_stmt|;
comment|// Test based on one DataNode report to Namenode
name|DataNode
name|dn
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|DatanodeDescriptor
name|datanodeDescriptor
init|=
name|spyBlockManager
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getDatanode
argument_list|(
name|dn
operator|.
name|getDatanodeId
argument_list|()
argument_list|)
decl_stmt|;
name|DatanodeRegistration
name|dnRegistration
init|=
name|dn
operator|.
name|getDNRegistrationForBP
argument_list|(
name|poolId
argument_list|)
decl_stmt|;
name|StorageReport
index|[]
name|storages
init|=
name|dn
operator|.
name|getFSDataset
argument_list|()
operator|.
name|getStorageReports
argument_list|(
name|poolId
argument_list|)
decl_stmt|;
comment|// Send heartbeat and request full block report lease
name|HeartbeatResponse
name|hbResponse
init|=
name|rpcServer
operator|.
name|sendHeartbeat
argument_list|(
name|dnRegistration
argument_list|,
name|storages
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|SlowPeerReports
operator|.
name|EMPTY_REPORT
argument_list|,
name|SlowDiskReports
operator|.
name|EMPTY_REPORT
argument_list|)
decl_stmt|;
name|DelayAnswer
name|delayer
init|=
operator|new
name|DelayAnswer
argument_list|(
name|BlockManager
operator|.
name|LOG
argument_list|)
decl_stmt|;
name|doAnswer
argument_list|(
name|delayer
argument_list|)
operator|.
name|when
argument_list|(
name|spyBlockManager
argument_list|)
operator|.
name|processReport
argument_list|(
name|any
argument_list|(
name|DatanodeStorageInfo
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|BlockListAsLongs
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|BlockReportContext
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ExecutorService
name|pool
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// Trigger sendBlockReport
name|BlockReportContext
name|brContext
init|=
operator|new
name|BlockReportContext
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|,
name|hbResponse
operator|.
name|getFullBlockReportLeaseId
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Future
argument_list|<
name|DatanodeCommand
argument_list|>
name|sendBRfuturea
init|=
name|pool
operator|.
name|submit
argument_list|(
parameter_list|()
lambda|->
block|{
comment|// Build every storage with 100 blocks for sending report
name|DatanodeStorage
index|[]
name|datanodeStorages
init|=
operator|new
name|DatanodeStorage
index|[
name|storages
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|storages
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|datanodeStorages
index|[
name|i
index|]
operator|=
name|storages
index|[
name|i
index|]
operator|.
name|getStorage
argument_list|()
expr_stmt|;
block|}
name|StorageBlockReport
index|[]
name|reports
init|=
name|createReports
argument_list|(
name|datanodeStorages
argument_list|,
literal|100
argument_list|)
decl_stmt|;
comment|// Send blockReport
return|return
name|rpcServer
operator|.
name|blockReport
argument_list|(
name|dnRegistration
argument_list|,
name|poolId
argument_list|,
name|reports
argument_list|,
name|brContext
argument_list|)
return|;
block|}
argument_list|)
decl_stmt|;
comment|// Wait until BlockManager calls processReport
name|delayer
operator|.
name|waitForCall
argument_list|()
expr_stmt|;
comment|// Remove full block report lease about dn
name|spyBlockManager
operator|.
name|getBlockReportLeaseManager
argument_list|()
operator|.
name|removeLease
argument_list|(
name|datanodeDescriptor
argument_list|)
expr_stmt|;
comment|// Allow blockreport to proceed
name|delayer
operator|.
name|proceed
argument_list|()
expr_stmt|;
comment|// Get result, it will not null if process successfully
name|DatanodeCommand
name|datanodeCommand
init|=
name|sendBRfuturea
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|datanodeCommand
operator|instanceof
name|FinalizeCommand
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|poolId
argument_list|,
operator|(
operator|(
name|FinalizeCommand
operator|)
name|datanodeCommand
operator|)
operator|.
name|getBlockPoolId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createReports (DatanodeStorage[] dnStorages, int numBlocks)
specifier|private
name|StorageBlockReport
index|[]
name|createReports
parameter_list|(
name|DatanodeStorage
index|[]
name|dnStorages
parameter_list|,
name|int
name|numBlocks
parameter_list|)
block|{
name|int
name|longsPerBlock
init|=
literal|3
decl_stmt|;
name|int
name|blockListSize
init|=
literal|2
operator|+
name|numBlocks
operator|*
name|longsPerBlock
decl_stmt|;
name|int
name|numStorages
init|=
name|dnStorages
operator|.
name|length
decl_stmt|;
name|StorageBlockReport
index|[]
name|storageBlockReports
init|=
operator|new
name|StorageBlockReport
index|[
name|numStorages
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numStorages
condition|;
name|i
operator|++
control|)
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|longs
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|(
name|blockListSize
argument_list|)
decl_stmt|;
name|longs
operator|.
name|add
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|numBlocks
argument_list|)
argument_list|)
expr_stmt|;
name|longs
operator|.
name|add
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|blockListSize
condition|;
operator|++
name|j
control|)
block|{
name|longs
operator|.
name|add
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|BlockListAsLongs
name|blockList
init|=
name|BlockListAsLongs
operator|.
name|decodeLongs
argument_list|(
name|longs
argument_list|)
decl_stmt|;
name|storageBlockReports
index|[
name|i
index|]
operator|=
operator|new
name|StorageBlockReport
argument_list|(
name|dnStorages
index|[
name|i
index|]
argument_list|,
name|blockList
argument_list|)
expr_stmt|;
block|}
return|return
name|storageBlockReports
return|;
block|}
block|}
end_class

end_unit

