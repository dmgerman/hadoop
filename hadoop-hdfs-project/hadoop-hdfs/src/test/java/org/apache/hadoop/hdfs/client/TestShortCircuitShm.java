begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.client
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|SystemUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|nativeio
operator|.
name|NativeIO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|nativeio
operator|.
name|SharedFileDescriptorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|ExtendedBlockId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|ShortCircuitShm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|ShortCircuitShm
operator|.
name|ShmId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|ShortCircuitShm
operator|.
name|Slot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_class
DECL|class|TestShortCircuitShm
specifier|public
class|class
name|TestShortCircuitShm
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestShortCircuitShm
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|TEST_BASE
specifier|private
specifier|static
specifier|final
name|File
name|TEST_BASE
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|before ()
specifier|public
name|void
name|before
parameter_list|()
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|NativeIO
operator|.
name|isAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|SystemUtils
operator|.
name|IS_OS_UNIX
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testStartupShutdown ()
specifier|public
name|void
name|testStartupShutdown
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|path
init|=
operator|new
name|File
argument_list|(
name|TEST_BASE
argument_list|,
literal|"testStartupShutdown"
argument_list|)
decl_stmt|;
name|path
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|SharedFileDescriptorFactory
name|factory
init|=
operator|new
name|SharedFileDescriptorFactory
argument_list|(
literal|"shm_"
argument_list|,
name|path
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|FileInputStream
name|stream
init|=
name|factory
operator|.
name|createDescriptor
argument_list|(
literal|"testStartupShutdown"
argument_list|,
literal|4096
argument_list|)
decl_stmt|;
name|ShortCircuitShm
name|shm
init|=
operator|new
name|ShortCircuitShm
argument_list|(
name|ShmId
operator|.
name|createRandom
argument_list|()
argument_list|,
name|stream
argument_list|)
decl_stmt|;
name|shm
operator|.
name|free
argument_list|()
expr_stmt|;
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testAllocateSlots ()
specifier|public
name|void
name|testAllocateSlots
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|path
init|=
operator|new
name|File
argument_list|(
name|TEST_BASE
argument_list|,
literal|"testAllocateSlots"
argument_list|)
decl_stmt|;
name|path
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|SharedFileDescriptorFactory
name|factory
init|=
operator|new
name|SharedFileDescriptorFactory
argument_list|(
literal|"shm_"
argument_list|,
name|path
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|FileInputStream
name|stream
init|=
name|factory
operator|.
name|createDescriptor
argument_list|(
literal|"testAllocateSlots"
argument_list|,
literal|4096
argument_list|)
decl_stmt|;
name|ShortCircuitShm
name|shm
init|=
operator|new
name|ShortCircuitShm
argument_list|(
name|ShmId
operator|.
name|createRandom
argument_list|()
argument_list|,
name|stream
argument_list|)
decl_stmt|;
name|int
name|numSlots
init|=
literal|0
decl_stmt|;
name|ArrayList
argument_list|<
name|Slot
argument_list|>
name|slots
init|=
operator|new
name|ArrayList
argument_list|<
name|Slot
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|shm
operator|.
name|isFull
argument_list|()
condition|)
block|{
name|Slot
name|slot
init|=
name|shm
operator|.
name|allocAndRegisterSlot
argument_list|(
operator|new
name|ExtendedBlockId
argument_list|(
literal|123L
argument_list|,
literal|"test_bp1"
argument_list|)
argument_list|)
decl_stmt|;
name|slots
operator|.
name|add
argument_list|(
name|slot
argument_list|)
expr_stmt|;
name|numSlots
operator|++
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"allocated "
operator|+
name|numSlots
operator|+
literal|" slots before running out."
argument_list|)
expr_stmt|;
name|int
name|slotIdx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Slot
argument_list|>
name|iter
init|=
name|shm
operator|.
name|slotIterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|slots
operator|.
name|contains
argument_list|(
name|iter
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Slot
name|slot
range|:
name|slots
control|)
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
name|slot
operator|.
name|addAnchor
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|slotIdx
operator|++
argument_list|,
name|slot
operator|.
name|getSlotIdx
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Slot
name|slot
range|:
name|slots
control|)
block|{
name|slot
operator|.
name|makeAnchorable
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Slot
name|slot
range|:
name|slots
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|slot
operator|.
name|addAnchor
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Slot
name|slot
range|:
name|slots
control|)
block|{
name|slot
operator|.
name|removeAnchor
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Slot
name|slot
range|:
name|slots
control|)
block|{
name|shm
operator|.
name|unregisterSlot
argument_list|(
name|slot
operator|.
name|getSlotIdx
argument_list|()
argument_list|)
expr_stmt|;
name|slot
operator|.
name|makeInvalid
argument_list|()
expr_stmt|;
block|}
name|shm
operator|.
name|free
argument_list|()
expr_stmt|;
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

