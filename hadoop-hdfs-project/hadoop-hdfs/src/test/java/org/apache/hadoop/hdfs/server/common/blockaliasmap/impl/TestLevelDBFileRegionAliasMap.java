begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.common.blockaliasmap.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|blockaliasmap
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|FileRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|blockaliasmap
operator|.
name|BlockAliasMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_comment
comment|/**  * Tests for the {@link LevelDBFileRegionAliasMap}.  */
end_comment

begin_class
DECL|class|TestLevelDBFileRegionAliasMap
specifier|public
class|class
name|TestLevelDBFileRegionAliasMap
block|{
DECL|field|BPID
specifier|private
specifier|static
specifier|final
name|String
name|BPID
init|=
literal|"BPID-0"
decl_stmt|;
comment|/**    * A basic test to verify that we can write data and read it back again.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testReadBack ()
specifier|public
name|void
name|testReadBack
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|dbFile
init|=
name|Files
operator|.
name|createTempDirectory
argument_list|(
literal|"fileregionformat"
argument_list|)
operator|.
name|toFile
argument_list|()
decl_stmt|;
try|try
block|{
name|LevelDBFileRegionAliasMap
name|frf
init|=
operator|new
name|LevelDBFileRegionAliasMap
argument_list|()
decl_stmt|;
name|LevelDBFileRegionAliasMap
operator|.
name|LevelDBOptions
name|opts
init|=
operator|new
name|LevelDBFileRegionAliasMap
operator|.
name|LevelDBOptions
argument_list|()
operator|.
name|filename
argument_list|(
name|dbFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|BlockAliasMap
operator|.
name|Writer
argument_list|<
name|FileRegion
argument_list|>
name|writer
init|=
name|frf
operator|.
name|getWriter
argument_list|(
name|opts
argument_list|,
name|BPID
argument_list|)
decl_stmt|;
name|FileRegion
name|fr
init|=
operator|new
name|FileRegion
argument_list|(
literal|1
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/file"
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|writer
operator|.
name|store
argument_list|(
name|fr
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|BlockAliasMap
operator|.
name|Reader
argument_list|<
name|FileRegion
argument_list|>
name|reader
init|=
name|frf
operator|.
name|getReader
argument_list|(
name|opts
argument_list|,
name|BPID
argument_list|)
decl_stmt|;
name|FileRegion
name|fr2
init|=
name|reader
operator|.
name|resolve
argument_list|(
operator|new
name|Block
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|fr
argument_list|,
name|fr2
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|dbFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
comment|/**    * A basic test to verify that we can read a bunch of data that we've written.    */
DECL|method|testIterate ()
specifier|public
name|void
name|testIterate
parameter_list|()
throws|throws
name|Exception
block|{
name|FileRegion
index|[]
name|regions
init|=
operator|new
name|FileRegion
index|[
literal|10
index|]
decl_stmt|;
name|regions
index|[
literal|0
index|]
operator|=
operator|new
name|FileRegion
argument_list|(
literal|1
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/file1"
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|regions
index|[
literal|1
index|]
operator|=
operator|new
name|FileRegion
argument_list|(
literal|2
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/file1"
argument_list|)
argument_list|,
literal|1024
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|regions
index|[
literal|2
index|]
operator|=
operator|new
name|FileRegion
argument_list|(
literal|3
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/file1"
argument_list|)
argument_list|,
literal|2048
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|regions
index|[
literal|3
index|]
operator|=
operator|new
name|FileRegion
argument_list|(
literal|4
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/file2"
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|regions
index|[
literal|4
index|]
operator|=
operator|new
name|FileRegion
argument_list|(
literal|5
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/file2"
argument_list|)
argument_list|,
literal|1024
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|regions
index|[
literal|5
index|]
operator|=
operator|new
name|FileRegion
argument_list|(
literal|6
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/file2"
argument_list|)
argument_list|,
literal|2048
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|regions
index|[
literal|6
index|]
operator|=
operator|new
name|FileRegion
argument_list|(
literal|7
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/file2"
argument_list|)
argument_list|,
literal|3072
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|regions
index|[
literal|7
index|]
operator|=
operator|new
name|FileRegion
argument_list|(
literal|8
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/file3"
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|regions
index|[
literal|8
index|]
operator|=
operator|new
name|FileRegion
argument_list|(
literal|9
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/file4"
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|regions
index|[
literal|9
index|]
operator|=
operator|new
name|FileRegion
argument_list|(
literal|10
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/file5"
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|File
name|dbFile
init|=
name|Files
operator|.
name|createTempDirectory
argument_list|(
literal|"fileregionformat"
argument_list|)
operator|.
name|toFile
argument_list|()
decl_stmt|;
try|try
block|{
name|LevelDBFileRegionAliasMap
name|frf
init|=
operator|new
name|LevelDBFileRegionAliasMap
argument_list|()
decl_stmt|;
name|LevelDBFileRegionAliasMap
operator|.
name|LevelDBOptions
name|opts
init|=
operator|new
name|LevelDBFileRegionAliasMap
operator|.
name|LevelDBOptions
argument_list|()
operator|.
name|filename
argument_list|(
name|dbFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|BlockAliasMap
operator|.
name|Writer
argument_list|<
name|FileRegion
argument_list|>
name|writer
init|=
name|frf
operator|.
name|getWriter
argument_list|(
name|opts
argument_list|,
name|BPID
argument_list|)
decl_stmt|;
for|for
control|(
name|FileRegion
name|fr
range|:
name|regions
control|)
block|{
name|writer
operator|.
name|store
argument_list|(
name|fr
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|BlockAliasMap
operator|.
name|Reader
argument_list|<
name|FileRegion
argument_list|>
name|reader
init|=
name|frf
operator|.
name|getReader
argument_list|(
name|opts
argument_list|,
name|BPID
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|FileRegion
argument_list|>
name|it
init|=
name|reader
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|int
name|last
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|FileRegion
name|fr
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|blockId
init|=
operator|(
name|int
operator|)
name|fr
operator|.
name|getBlock
argument_list|()
operator|.
name|getBlockId
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|regions
index|[
name|blockId
operator|-
literal|1
index|]
argument_list|,
name|fr
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|blockId
argument_list|,
name|last
argument_list|)
expr_stmt|;
name|last
operator|=
name|blockId
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|count
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|dbFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

