begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_SOCKET_TIMEOUT_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyLong
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyObject
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyShort
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doAnswer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketTimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|impl
operator|.
name|Log4JLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|CryptoProtocolVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileChecksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ClientDatanodeProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|SafeModeAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NotReplicatedYetException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamenodeProtocols
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|WebHdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|WebHdfsTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|EnumSetWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryPolicies
operator|.
name|MultipleLinearRandomRetry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|internal
operator|.
name|stubbing
operator|.
name|answers
operator|.
name|ThrowsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_comment
comment|/**  * These tests make sure that DFSClient retries fetching data from DFS  * properly in case of errors.  */
end_comment

begin_class
DECL|class|TestDFSClientRetries
specifier|public
class|class
name|TestDFSClientRetries
block|{
DECL|field|ADDRESS
specifier|private
specifier|static
specifier|final
name|String
name|ADDRESS
init|=
literal|"0.0.0.0"
decl_stmt|;
DECL|field|PING_INTERVAL
specifier|final
specifier|static
specifier|private
name|int
name|PING_INTERVAL
init|=
literal|1000
decl_stmt|;
DECL|field|MIN_SLEEP_TIME
specifier|final
specifier|static
specifier|private
name|int
name|MIN_SLEEP_TIME
init|=
literal|1000
decl_stmt|;
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestDFSClientRetries
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|static
specifier|private
name|Configuration
name|conf
init|=
literal|null
decl_stmt|;
DECL|class|TestServer
specifier|private
specifier|static
class|class
name|TestServer
extends|extends
name|Server
block|{
DECL|field|sleep
specifier|private
name|boolean
name|sleep
decl_stmt|;
DECL|field|responseClass
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
name|responseClass
decl_stmt|;
DECL|method|TestServer (int handlerCount, boolean sleep)
specifier|public
name|TestServer
parameter_list|(
name|int
name|handlerCount
parameter_list|,
name|boolean
name|sleep
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|handlerCount
argument_list|,
name|sleep
argument_list|,
name|LongWritable
operator|.
name|class
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|TestServer (int handlerCount, boolean sleep, Class<? extends Writable> paramClass, Class<? extends Writable> responseClass)
specifier|public
name|TestServer
parameter_list|(
name|int
name|handlerCount
parameter_list|,
name|boolean
name|sleep
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
name|paramClass
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
name|responseClass
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|ADDRESS
argument_list|,
literal|0
argument_list|,
name|paramClass
argument_list|,
name|handlerCount
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|sleep
operator|=
name|sleep
expr_stmt|;
name|this
operator|.
name|responseClass
operator|=
name|responseClass
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|call (RPC.RpcKind rpcKind, String protocol, Writable param, long receiveTime)
specifier|public
name|Writable
name|call
parameter_list|(
name|RPC
operator|.
name|RpcKind
name|rpcKind
parameter_list|,
name|String
name|protocol
parameter_list|,
name|Writable
name|param
parameter_list|,
name|long
name|receiveTime
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|sleep
condition|)
block|{
comment|// sleep a bit
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|PING_INTERVAL
operator|+
name|MIN_SLEEP_TIME
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{}
block|}
if|if
condition|(
name|responseClass
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
name|responseClass
operator|.
name|newInstance
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
return|return
name|param
return|;
comment|// echo param as result
block|}
block|}
block|}
comment|// writes 'len' bytes of data to out.
DECL|method|writeData (OutputStream out, int len)
specifier|private
specifier|static
name|void
name|writeData
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|4096
operator|*
literal|16
index|]
decl_stmt|;
while|while
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|int
name|toWrite
init|=
name|Math
operator|.
name|min
argument_list|(
name|len
argument_list|,
name|buf
operator|.
name|length
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|toWrite
argument_list|)
expr_stmt|;
name|len
operator|-=
name|toWrite
expr_stmt|;
block|}
block|}
annotation|@
name|Before
DECL|method|setupConf ()
specifier|public
name|void
name|setupConf
parameter_list|()
block|{
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
block|}
comment|/**    * This makes sure that when DN closes clients socket after client had    * successfully connected earlier, the data can still be fetched.    */
annotation|@
name|Test
DECL|method|testWriteTimeoutAtDataNode ()
specifier|public
name|void
name|testWriteTimeoutAtDataNode
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|int
name|writeTimeout
init|=
literal|100
decl_stmt|;
comment|//milliseconds.
comment|// set a very short write timeout for datanode, so that tests runs fast.
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_SOCKET_WRITE_TIMEOUT_KEY
argument_list|,
name|writeTimeout
argument_list|)
expr_stmt|;
comment|// set a smaller block size
specifier|final
name|int
name|blockSize
init|=
literal|10
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_MAX_BLOCK_ACQUIRE_FAILURES_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// set a small buffer size
specifier|final
name|int
name|bufferSize
init|=
literal|4096
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IO_FILE_BUFFER_SIZE_KEY
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|3
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
literal|"/testWriteTimeoutAtDataNode"
argument_list|)
decl_stmt|;
name|OutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|filePath
argument_list|,
literal|true
argument_list|,
name|bufferSize
argument_list|)
decl_stmt|;
comment|// write a 2 block file.
name|writeData
argument_list|(
name|out
argument_list|,
literal|2
operator|*
name|blockSize
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|1024
operator|*
literal|1024
index|]
decl_stmt|;
comment|// enough to empty TCP buffers.
name|InputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|filePath
argument_list|,
name|bufferSize
argument_list|)
decl_stmt|;
comment|//first read a few bytes
name|IOUtils
operator|.
name|readFully
argument_list|(
name|in
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|,
name|bufferSize
operator|/
literal|2
argument_list|)
expr_stmt|;
comment|//now read few more chunks of data by sleeping in between :
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|2
operator|*
name|writeTimeout
argument_list|)
expr_stmt|;
comment|// force write timeout at the datanode.
comment|// read enough to empty out socket buffers.
name|IOUtils
operator|.
name|readFully
argument_list|(
name|in
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|,
name|buf
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|// successfully read with write timeout on datanodes.
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|// more tests related to different failure cases can be added here.
comment|/**    * Verify that client will correctly give up after the specified number    * of times trying to add a block    */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"serial"
block|,
literal|"unchecked"
block|}
argument_list|)
annotation|@
name|Test
DECL|method|testNotYetReplicatedErrors ()
specifier|public
name|void
name|testNotYetReplicatedErrors
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|exceptionMsg
init|=
literal|"Nope, not replicated yet..."
decl_stmt|;
specifier|final
name|int
name|maxRetries
init|=
literal|1
decl_stmt|;
comment|// Allow one retry (total of two calls)
name|conf
operator|.
name|setInt
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|BlockWrite
operator|.
name|LOCATEFOLLOWINGBLOCK_RETRIES_KEY
argument_list|,
name|maxRetries
argument_list|)
expr_stmt|;
name|NamenodeProtocols
name|mockNN
init|=
name|mock
argument_list|(
name|NamenodeProtocols
operator|.
name|class
argument_list|)
decl_stmt|;
name|Answer
argument_list|<
name|Object
argument_list|>
name|answer
init|=
operator|new
name|ThrowsException
argument_list|(
operator|new
name|IOException
argument_list|()
argument_list|)
block|{
name|int
name|retryCount
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Object
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|retryCount
operator|++
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"addBlock has been called "
operator|+
name|retryCount
operator|+
literal|" times"
argument_list|)
expr_stmt|;
if|if
condition|(
name|retryCount
operator|>
name|maxRetries
operator|+
literal|1
condition|)
comment|// First call was not a retry
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Retried too many times: "
operator|+
name|retryCount
argument_list|)
throw|;
else|else
throw|throw
operator|new
name|RemoteException
argument_list|(
name|NotReplicatedYetException
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|exceptionMsg
argument_list|)
throw|;
block|}
block|}
decl_stmt|;
name|when
argument_list|(
name|mockNN
operator|.
name|addBlock
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyString
argument_list|()
argument_list|,
name|any
argument_list|(
name|ExtendedBlock
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|DatanodeInfo
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|any
argument_list|(
name|String
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
name|answer
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
operator|new
name|HdfsFileStatus
argument_list|(
literal|0
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|,
literal|1024
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|777
argument_list|)
argument_list|,
literal|"owner"
argument_list|,
literal|"group"
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
literal|1010
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|mockNN
argument_list|)
operator|.
name|getFileInfo
argument_list|(
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
operator|new
name|HdfsFileStatus
argument_list|(
literal|0
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|,
literal|1024
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|777
argument_list|)
argument_list|,
literal|"owner"
argument_list|,
literal|"group"
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
literal|1010
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|mockNN
argument_list|)
operator|.
name|create
argument_list|(
name|anyString
argument_list|()
argument_list|,
operator|(
name|FsPermission
operator|)
name|anyObject
argument_list|()
argument_list|,
name|anyString
argument_list|()
argument_list|,
operator|(
name|EnumSetWritable
argument_list|<
name|CreateFlag
argument_list|>
operator|)
name|anyObject
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|,
name|anyShort
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|,
operator|(
name|CryptoProtocolVersion
index|[]
operator|)
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|DFSClient
name|client
init|=
operator|new
name|DFSClient
argument_list|(
literal|null
argument_list|,
name|mockNN
argument_list|,
name|conf
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|OutputStream
name|os
init|=
name|client
operator|.
name|create
argument_list|(
literal|"testfile"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|os
operator|.
name|write
argument_list|(
literal|20
argument_list|)
expr_stmt|;
comment|// write one random byte
try|try
block|{
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Retries are not being stopped correctly: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|equals
argument_list|(
name|exceptionMsg
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This tests that DFSInputStream failures are counted for a given read    * operation, and not over the lifetime of the stream. It is a regression    * test for HDFS-127.    */
annotation|@
name|Test
DECL|method|testFailuresArePerOperation ()
specifier|public
name|void
name|testFailuresArePerOperation
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|fileSize
init|=
literal|4096
decl_stmt|;
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
literal|"/testFile"
argument_list|)
decl_stmt|;
comment|// Set short retry timeouts so this test runs faster
name|conf
operator|.
name|setInt
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|Retry
operator|.
name|WINDOW_BASE_KEY
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFS_CLIENT_SOCKET_TIMEOUT_KEY
argument_list|,
literal|2
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|NamenodeProtocols
name|preSpyNN
init|=
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
decl_stmt|;
name|NamenodeProtocols
name|spyNN
init|=
name|spy
argument_list|(
name|preSpyNN
argument_list|)
decl_stmt|;
name|DFSClient
name|client
init|=
operator|new
name|DFSClient
argument_list|(
literal|null
argument_list|,
name|spyNN
argument_list|,
name|conf
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|int
name|maxBlockAcquires
init|=
name|client
operator|.
name|getConf
argument_list|()
operator|.
name|getMaxBlockAcquireFailures
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|maxBlockAcquires
operator|>
literal|0
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|file
argument_list|,
name|fileSize
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|12345L
comment|/*seed*/
argument_list|)
expr_stmt|;
comment|// If the client will retry maxBlockAcquires times, then if we fail
comment|// any more than that number of times, the operation should entirely
comment|// fail.
name|doAnswer
argument_list|(
operator|new
name|FailNTimesAnswer
argument_list|(
name|preSpyNN
argument_list|,
name|maxBlockAcquires
operator|+
literal|1
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|spyNN
argument_list|)
operator|.
name|getBlockLocations
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|IOUtils
operator|.
name|copyBytes
argument_list|(
name|client
operator|.
name|open
argument_list|(
name|file
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
operator|new
name|IOUtils
operator|.
name|NullOutputStream
argument_list|()
argument_list|,
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Didn't get exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|DFSClient
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Got expected exception"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
comment|// If we fail exactly that many times, then it should succeed.
name|doAnswer
argument_list|(
operator|new
name|FailNTimesAnswer
argument_list|(
name|preSpyNN
argument_list|,
name|maxBlockAcquires
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|spyNN
argument_list|)
operator|.
name|getBlockLocations
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|copyBytes
argument_list|(
name|client
operator|.
name|open
argument_list|(
name|file
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
operator|new
name|IOUtils
operator|.
name|NullOutputStream
argument_list|()
argument_list|,
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|DFSClient
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting test case for failure reset"
argument_list|)
expr_stmt|;
comment|// Now the tricky case - if we fail a few times on one read, then succeed,
comment|// then fail some more on another read, it shouldn't fail.
name|doAnswer
argument_list|(
operator|new
name|FailNTimesAnswer
argument_list|(
name|preSpyNN
argument_list|,
name|maxBlockAcquires
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|spyNN
argument_list|)
operator|.
name|getBlockLocations
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|)
expr_stmt|;
name|DFSInputStream
name|is
init|=
name|client
operator|.
name|open
argument_list|(
name|file
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|byte
name|buf
index|[]
init|=
operator|new
name|byte
index|[
literal|10
index|]
decl_stmt|;
name|IOUtils
operator|.
name|readFully
argument_list|(
name|is
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|,
name|buf
operator|.
name|length
argument_list|)
expr_stmt|;
name|DFSClient
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"First read successful after some failures."
argument_list|)
expr_stmt|;
comment|// Further reads at this point will succeed since it has the good block locations.
comment|// So, force the block locations on this stream to be refreshed from bad info.
comment|// When reading again, it should start from a fresh failure count, since
comment|// we're starting a new operation on the user level.
name|doAnswer
argument_list|(
operator|new
name|FailNTimesAnswer
argument_list|(
name|preSpyNN
argument_list|,
name|maxBlockAcquires
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|spyNN
argument_list|)
operator|.
name|getBlockLocations
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|)
expr_stmt|;
name|is
operator|.
name|openInfo
argument_list|()
expr_stmt|;
comment|// Seek to beginning forces a reopen of the BlockReader - otherwise it'll
comment|// just keep reading on the existing stream and the fact that we've poisoned
comment|// the block info won't do anything.
name|is
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|readFully
argument_list|(
name|is
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|,
name|buf
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test that getAdditionalBlock() and close() are idempotent. This allows    * a client to safely retry a call and still produce a correct    * file. See HDFS-3031.    */
annotation|@
name|Test
DECL|method|testIdempotentAllocateBlockAndClose ()
specifier|public
name|void
name|testIdempotentAllocateBlockAndClose
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|src
init|=
literal|"/testIdempotentAllocateBlock"
decl_stmt|;
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
literal|4096
argument_list|)
expr_stmt|;
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|NamenodeProtocols
name|preSpyNN
init|=
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
decl_stmt|;
name|NamenodeProtocols
name|spyNN
init|=
name|spy
argument_list|(
name|preSpyNN
argument_list|)
decl_stmt|;
name|DFSClient
name|client
init|=
operator|new
name|DFSClient
argument_list|(
literal|null
argument_list|,
name|spyNN
argument_list|,
name|conf
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// Make the call to addBlock() get called twice, as if it were retried
comment|// due to an IPC issue.
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|LocatedBlock
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|LocatedBlock
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|LocatedBlock
name|ret
init|=
operator|(
name|LocatedBlock
operator|)
name|invocation
operator|.
name|callRealMethod
argument_list|()
decl_stmt|;
name|LocatedBlocks
name|lb
init|=
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
operator|.
name|getBlockLocations
argument_list|(
name|src
argument_list|,
literal|0
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|int
name|blockCount
init|=
name|lb
operator|.
name|getLocatedBlocks
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|lb
operator|.
name|getLastLocatedBlock
argument_list|()
operator|.
name|getBlock
argument_list|()
argument_list|,
name|ret
operator|.
name|getBlock
argument_list|()
argument_list|)
expr_stmt|;
comment|// Retrying should result in a new block at the end of the file.
comment|// (abandoning the old one)
name|LocatedBlock
name|ret2
init|=
operator|(
name|LocatedBlock
operator|)
name|invocation
operator|.
name|callRealMethod
argument_list|()
decl_stmt|;
name|lb
operator|=
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
operator|.
name|getBlockLocations
argument_list|(
name|src
argument_list|,
literal|0
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|int
name|blockCount2
init|=
name|lb
operator|.
name|getLocatedBlocks
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|lb
operator|.
name|getLastLocatedBlock
argument_list|()
operator|.
name|getBlock
argument_list|()
argument_list|,
name|ret2
operator|.
name|getBlock
argument_list|()
argument_list|)
expr_stmt|;
comment|// We shouldn't have gained an extra block by the RPC.
name|assertEquals
argument_list|(
name|blockCount
argument_list|,
name|blockCount2
argument_list|)
expr_stmt|;
return|return
name|ret2
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|spyNN
argument_list|)
operator|.
name|addBlock
argument_list|(
name|Mockito
operator|.
name|anyString
argument_list|()
argument_list|,
name|Mockito
operator|.
name|anyString
argument_list|()
argument_list|,
name|Mockito
operator|.
expr|<
name|ExtendedBlock
operator|>
name|any
argument_list|()
argument_list|,
name|Mockito
operator|.
expr|<
name|DatanodeInfo
index|[]
operator|>
name|any
argument_list|()
argument_list|,
name|Mockito
operator|.
name|anyLong
argument_list|()
argument_list|,
name|Mockito
operator|.
expr|<
name|String
index|[]
operator|>
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
comment|// complete() may return false a few times before it returns
comment|// true. We want to wait until it returns true, and then
comment|// make it retry one more time after that.
name|LOG
operator|.
name|info
argument_list|(
literal|"Called complete(: "
operator|+
name|Joiner
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|join
argument_list|(
name|invocation
operator|.
name|getArguments
argument_list|()
argument_list|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|Boolean
operator|)
name|invocation
operator|.
name|callRealMethod
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Complete call returned false, not faking a retry RPC"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// We got a successful close. Call it again to check idempotence.
try|try
block|{
name|boolean
name|ret
init|=
operator|(
name|Boolean
operator|)
name|invocation
operator|.
name|callRealMethod
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Complete call returned true, faked second RPC. "
operator|+
literal|"Returned: "
operator|+
name|ret
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Idempotent retry threw exception"
argument_list|,
name|t
argument_list|)
expr_stmt|;
throw|throw
name|t
throw|;
block|}
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|spyNN
argument_list|)
operator|.
name|complete
argument_list|(
name|Mockito
operator|.
name|anyString
argument_list|()
argument_list|,
name|Mockito
operator|.
name|anyString
argument_list|()
argument_list|,
name|Mockito
operator|.
expr|<
name|ExtendedBlock
operator|>
name|any
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|)
expr_stmt|;
name|OutputStream
name|stm
init|=
name|client
operator|.
name|create
argument_list|(
name|file
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
try|try
block|{
name|AppendTestUtil
operator|.
name|write
argument_list|(
name|stm
argument_list|,
literal|0
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
name|stm
operator|=
literal|null
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|stm
argument_list|)
expr_stmt|;
block|}
comment|// Make sure the mock was actually properly injected.
name|Mockito
operator|.
name|verify
argument_list|(
name|spyNN
argument_list|,
name|Mockito
operator|.
name|atLeastOnce
argument_list|()
argument_list|)
operator|.
name|addBlock
argument_list|(
name|Mockito
operator|.
name|anyString
argument_list|()
argument_list|,
name|Mockito
operator|.
name|anyString
argument_list|()
argument_list|,
name|Mockito
operator|.
expr|<
name|ExtendedBlock
operator|>
name|any
argument_list|()
argument_list|,
name|Mockito
operator|.
expr|<
name|DatanodeInfo
index|[]
operator|>
name|any
argument_list|()
argument_list|,
name|Mockito
operator|.
name|anyLong
argument_list|()
argument_list|,
name|Mockito
operator|.
expr|<
name|String
index|[]
operator|>
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|spyNN
argument_list|,
name|Mockito
operator|.
name|atLeastOnce
argument_list|()
argument_list|)
operator|.
name|complete
argument_list|(
name|Mockito
operator|.
name|anyString
argument_list|()
argument_list|,
name|Mockito
operator|.
name|anyString
argument_list|()
argument_list|,
name|Mockito
operator|.
expr|<
name|ExtendedBlock
operator|>
name|any
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|)
expr_stmt|;
name|AppendTestUtil
operator|.
name|check
argument_list|(
name|fs
argument_list|,
name|file
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Mock Answer implementation of NN.getBlockLocations that will return    * a poisoned block list a certain number of times before returning    * a proper one.    */
DECL|class|FailNTimesAnswer
specifier|private
specifier|static
class|class
name|FailNTimesAnswer
implements|implements
name|Answer
argument_list|<
name|LocatedBlocks
argument_list|>
block|{
DECL|field|failuresLeft
specifier|private
name|int
name|failuresLeft
decl_stmt|;
DECL|field|realNN
specifier|private
specifier|final
name|NamenodeProtocols
name|realNN
decl_stmt|;
DECL|method|FailNTimesAnswer (NamenodeProtocols preSpyNN, int timesToFail)
specifier|public
name|FailNTimesAnswer
parameter_list|(
name|NamenodeProtocols
name|preSpyNN
parameter_list|,
name|int
name|timesToFail
parameter_list|)
block|{
name|failuresLeft
operator|=
name|timesToFail
expr_stmt|;
name|this
operator|.
name|realNN
operator|=
name|preSpyNN
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|answer (InvocationOnMock invocation)
specifier|public
name|LocatedBlocks
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|IOException
block|{
name|Object
name|args
index|[]
init|=
name|invocation
operator|.
name|getArguments
argument_list|()
decl_stmt|;
name|LocatedBlocks
name|realAnswer
init|=
name|realNN
operator|.
name|getBlockLocations
argument_list|(
operator|(
name|String
operator|)
name|args
index|[
literal|0
index|]
argument_list|,
operator|(
name|Long
operator|)
name|args
index|[
literal|1
index|]
argument_list|,
operator|(
name|Long
operator|)
name|args
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|failuresLeft
operator|--
operator|>
literal|0
condition|)
block|{
name|NameNode
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"FailNTimesAnswer injecting failure."
argument_list|)
expr_stmt|;
return|return
name|makeBadBlockList
argument_list|(
name|realAnswer
argument_list|)
return|;
block|}
name|NameNode
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"FailNTimesAnswer no longer failing."
argument_list|)
expr_stmt|;
return|return
name|realAnswer
return|;
block|}
DECL|method|makeBadBlockList (LocatedBlocks goodBlockList)
specifier|private
name|LocatedBlocks
name|makeBadBlockList
parameter_list|(
name|LocatedBlocks
name|goodBlockList
parameter_list|)
block|{
name|LocatedBlock
name|goodLocatedBlock
init|=
name|goodBlockList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|LocatedBlock
name|badLocatedBlock
init|=
operator|new
name|LocatedBlock
argument_list|(
name|goodLocatedBlock
operator|.
name|getBlock
argument_list|()
argument_list|,
operator|new
name|DatanodeInfo
index|[]
block|{
name|DFSTestUtil
operator|.
name|getDatanodeInfo
argument_list|(
literal|"1.2.3.4"
argument_list|,
literal|"bogus"
argument_list|,
literal|1234
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|badLocatedBlock
operator|.
name|setStartOffset
argument_list|(
name|goodLocatedBlock
operator|.
name|getStartOffset
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|badBlocks
init|=
operator|new
name|ArrayList
argument_list|<
name|LocatedBlock
argument_list|>
argument_list|()
decl_stmt|;
name|badBlocks
operator|.
name|add
argument_list|(
name|badLocatedBlock
argument_list|)
expr_stmt|;
return|return
operator|new
name|LocatedBlocks
argument_list|(
name|goodBlockList
operator|.
name|getFileLength
argument_list|()
argument_list|,
literal|false
argument_list|,
name|badBlocks
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
comment|/**    * Test that a DFSClient waits for random time before retry on busy blocks.    */
annotation|@
name|Test
DECL|method|testDFSClientRetriesOnBusyBlocks ()
specifier|public
name|void
name|testDFSClientRetriesOnBusyBlocks
parameter_list|()
throws|throws
name|IOException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Testing DFSClient random waiting on busy blocks."
argument_list|)
expr_stmt|;
comment|//
comment|// Test settings:
comment|//
comment|//           xcievers    fileLen   #clients  timeWindow    #retries
comment|//           ========    =======   ========  ==========    ========
comment|// Test 1:          2       6 MB         50      300 ms           3
comment|// Test 2:          2       6 MB         50      300 ms          50
comment|// Test 3:          2       6 MB         50     1000 ms           3
comment|// Test 4:          2       6 MB         50     1000 ms          50
comment|//
comment|//   Minimum xcievers is 2 since 1 thread is reserved for registry.
comment|//   Test 1& 3 may fail since # retries is low.
comment|//   Test 2& 4 should never fail since (#threads)/(xcievers-1) is the upper
comment|//   bound for guarantee to not throw BlockMissingException.
comment|//
name|int
name|xcievers
init|=
literal|2
decl_stmt|;
name|int
name|fileLen
init|=
literal|6
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
name|int
name|threads
init|=
literal|50
decl_stmt|;
name|int
name|retries
init|=
literal|3
decl_stmt|;
name|int
name|timeWin
init|=
literal|300
decl_stmt|;
comment|//
comment|// Test 1: might fail
comment|//
name|long
name|timestamp
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
name|boolean
name|pass
init|=
name|busyTest
argument_list|(
name|xcievers
argument_list|,
name|threads
argument_list|,
name|fileLen
argument_list|,
name|timeWin
argument_list|,
name|retries
argument_list|)
decl_stmt|;
name|long
name|timestamp2
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
if|if
condition|(
name|pass
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Test 1 succeeded! Time spent: "
operator|+
operator|(
name|timestamp2
operator|-
name|timestamp
operator|)
operator|/
literal|1000.0
operator|+
literal|" sec."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Test 1 failed, but relax. Time spent: "
operator|+
operator|(
name|timestamp2
operator|-
name|timestamp
operator|)
operator|/
literal|1000.0
operator|+
literal|" sec."
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// Test 2: should never fail
comment|//
name|retries
operator|=
literal|50
expr_stmt|;
name|timestamp
operator|=
name|Time
operator|.
name|now
argument_list|()
expr_stmt|;
name|pass
operator|=
name|busyTest
argument_list|(
name|xcievers
argument_list|,
name|threads
argument_list|,
name|fileLen
argument_list|,
name|timeWin
argument_list|,
name|retries
argument_list|)
expr_stmt|;
name|timestamp2
operator|=
name|Time
operator|.
name|now
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Something wrong! Test 2 got Exception with maxmum retries!"
argument_list|,
name|pass
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Test 2 succeeded! Time spent: "
operator|+
operator|(
name|timestamp2
operator|-
name|timestamp
operator|)
operator|/
literal|1000.0
operator|+
literal|" sec."
argument_list|)
expr_stmt|;
comment|//
comment|// Test 3: might fail
comment|//
name|retries
operator|=
literal|3
expr_stmt|;
name|timeWin
operator|=
literal|1000
expr_stmt|;
name|timestamp
operator|=
name|Time
operator|.
name|now
argument_list|()
expr_stmt|;
name|pass
operator|=
name|busyTest
argument_list|(
name|xcievers
argument_list|,
name|threads
argument_list|,
name|fileLen
argument_list|,
name|timeWin
argument_list|,
name|retries
argument_list|)
expr_stmt|;
name|timestamp2
operator|=
name|Time
operator|.
name|now
argument_list|()
expr_stmt|;
if|if
condition|(
name|pass
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Test 3 succeeded! Time spent: "
operator|+
operator|(
name|timestamp2
operator|-
name|timestamp
operator|)
operator|/
literal|1000.0
operator|+
literal|" sec."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Test 3 failed, but relax. Time spent: "
operator|+
operator|(
name|timestamp2
operator|-
name|timestamp
operator|)
operator|/
literal|1000.0
operator|+
literal|" sec."
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// Test 4: should never fail
comment|//
name|retries
operator|=
literal|50
expr_stmt|;
name|timeWin
operator|=
literal|1000
expr_stmt|;
name|timestamp
operator|=
name|Time
operator|.
name|now
argument_list|()
expr_stmt|;
name|pass
operator|=
name|busyTest
argument_list|(
name|xcievers
argument_list|,
name|threads
argument_list|,
name|fileLen
argument_list|,
name|timeWin
argument_list|,
name|retries
argument_list|)
expr_stmt|;
name|timestamp2
operator|=
name|Time
operator|.
name|now
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Something wrong! Test 4 got Exception with maxmum retries!"
argument_list|,
name|pass
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Test 4 succeeded! Time spent: "
operator|+
operator|(
name|timestamp2
operator|-
name|timestamp
operator|)
operator|/
literal|1000.0
operator|+
literal|" sec."
argument_list|)
expr_stmt|;
block|}
DECL|method|busyTest (int xcievers, int threads, int fileLen, int timeWin, int retries)
specifier|private
name|boolean
name|busyTest
parameter_list|(
name|int
name|xcievers
parameter_list|,
name|int
name|threads
parameter_list|,
name|int
name|fileLen
parameter_list|,
name|int
name|timeWin
parameter_list|,
name|int
name|retries
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|ret
init|=
literal|true
decl_stmt|;
name|short
name|replicationFactor
init|=
literal|1
decl_stmt|;
name|long
name|blockSize
init|=
literal|128
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
comment|// DFS block size
name|int
name|bufferSize
init|=
literal|4096
decl_stmt|;
name|int
name|originalXcievers
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_MAX_RECEIVER_THREADS_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_MAX_RECEIVER_THREADS_DEFAULT
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_MAX_RECEIVER_THREADS_KEY
argument_list|,
name|xcievers
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_MAX_BLOCK_ACQUIRE_FAILURES_KEY
argument_list|,
name|retries
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|Retry
operator|.
name|WINDOW_BASE_KEY
argument_list|,
name|timeWin
argument_list|)
expr_stmt|;
comment|// Disable keepalive
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_SOCKET_REUSE_KEEPALIVE_KEY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|replicationFactor
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"test_data.dat"
argument_list|)
decl_stmt|;
name|file1
operator|=
name|file1
operator|.
name|makeQualified
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|fs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
expr_stmt|;
comment|// make URI hdfs://
try|try
block|{
name|FSDataOutputStream
name|stm
init|=
name|fs
operator|.
name|create
argument_list|(
name|file1
argument_list|,
literal|true
argument_list|,
name|bufferSize
argument_list|,
name|replicationFactor
argument_list|,
name|blockSize
argument_list|)
decl_stmt|;
comment|// verify that file exists in FS namespace
name|assertTrue
argument_list|(
name|file1
operator|+
literal|" should be a file"
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|file1
argument_list|)
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Path : \""
operator|+
name|file1
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Path : \""
operator|+
name|file1
operator|+
literal|"\""
argument_list|)
expr_stmt|;
comment|// write 1 block to file
name|byte
index|[]
name|buffer
init|=
name|AppendTestUtil
operator|.
name|randomBytes
argument_list|(
name|Time
operator|.
name|now
argument_list|()
argument_list|,
name|fileLen
argument_list|)
decl_stmt|;
name|stm
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|fileLen
argument_list|)
expr_stmt|;
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// verify that file size has changed to the full size
name|long
name|len
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|file1
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|file1
operator|+
literal|" should be of size "
operator|+
name|fileLen
operator|+
literal|" but found to be of size "
operator|+
name|len
argument_list|,
name|len
operator|==
name|fileLen
argument_list|)
expr_stmt|;
comment|// read back and check data integrigy
name|byte
index|[]
name|read_buf
init|=
operator|new
name|byte
index|[
name|fileLen
index|]
decl_stmt|;
name|InputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|file1
argument_list|,
name|fileLen
argument_list|)
decl_stmt|;
name|IOUtils
operator|.
name|readFully
argument_list|(
name|in
argument_list|,
name|read_buf
argument_list|,
literal|0
argument_list|,
name|fileLen
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|Arrays
operator|.
name|equals
argument_list|(
name|buffer
argument_list|,
name|read_buf
argument_list|)
operator|)
assert|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|read_buf
operator|=
literal|null
expr_stmt|;
comment|// GC it if needed
comment|// compute digest of the content to reduce memory space
name|MessageDigest
name|m
init|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
literal|"SHA"
argument_list|)
decl_stmt|;
name|m
operator|.
name|update
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|fileLen
argument_list|)
expr_stmt|;
name|byte
index|[]
name|hash_sha
init|=
name|m
operator|.
name|digest
argument_list|()
decl_stmt|;
comment|// spawn multiple threads and all trying to access the same block
name|Thread
index|[]
name|readers
init|=
operator|new
name|Thread
index|[
name|threads
index|]
decl_stmt|;
name|Counter
name|counter
init|=
operator|new
name|Counter
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threads
condition|;
operator|++
name|i
control|)
block|{
name|DFSClientReader
name|reader
init|=
operator|new
name|DFSClientReader
argument_list|(
name|file1
argument_list|,
name|cluster
argument_list|,
name|hash_sha
argument_list|,
name|fileLen
argument_list|,
name|counter
argument_list|)
decl_stmt|;
name|readers
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|readers
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|// wait for them to exit
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threads
condition|;
operator|++
name|i
control|)
block|{
name|readers
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|counter
operator|.
name|get
argument_list|()
operator|==
name|threads
condition|)
name|ret
operator|=
literal|true
expr_stmt|;
else|else
name|ret
operator|=
literal|false
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Thread got InterruptedException."
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|ret
operator|=
literal|false
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|ret
operator|=
literal|false
expr_stmt|;
block|}
finally|finally
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_MAX_RECEIVER_THREADS_KEY
argument_list|,
name|originalXcievers
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|file1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
DECL|class|DFSClientReader
class|class
name|DFSClientReader
implements|implements
name|Runnable
block|{
DECL|field|client
name|DFSClient
name|client
decl_stmt|;
DECL|field|conf
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|expected_sha
specifier|final
name|byte
index|[]
name|expected_sha
decl_stmt|;
DECL|field|fs
name|FileSystem
name|fs
decl_stmt|;
DECL|field|filePath
specifier|final
name|Path
name|filePath
decl_stmt|;
DECL|field|cluster
specifier|final
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|len
specifier|final
name|int
name|len
decl_stmt|;
DECL|field|counter
specifier|final
name|Counter
name|counter
decl_stmt|;
DECL|method|DFSClientReader (Path file, MiniDFSCluster cluster, byte[] hash_sha, int fileLen, Counter cnt)
name|DFSClientReader
parameter_list|(
name|Path
name|file
parameter_list|,
name|MiniDFSCluster
name|cluster
parameter_list|,
name|byte
index|[]
name|hash_sha
parameter_list|,
name|int
name|fileLen
parameter_list|,
name|Counter
name|cnt
parameter_list|)
block|{
name|filePath
operator|=
name|file
expr_stmt|;
name|this
operator|.
name|cluster
operator|=
name|cluster
expr_stmt|;
name|counter
operator|=
name|cnt
expr_stmt|;
name|len
operator|=
name|fileLen
expr_stmt|;
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
name|expected_sha
operator|=
name|hash_sha
expr_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|fs
operator|=
name|cluster
operator|.
name|getNewFileSystemInstance
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|int
name|bufferSize
init|=
name|len
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|bufferSize
index|]
decl_stmt|;
name|InputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|filePath
argument_list|,
name|bufferSize
argument_list|)
decl_stmt|;
comment|// read the whole file
name|IOUtils
operator|.
name|readFully
argument_list|(
name|in
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
comment|// compare with the expected input
name|MessageDigest
name|m
init|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
literal|"SHA"
argument_list|)
decl_stmt|;
name|m
operator|.
name|update
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
name|byte
index|[]
name|hash_sha
init|=
name|m
operator|.
name|digest
argument_list|()
decl_stmt|;
name|buf
operator|=
literal|null
expr_stmt|;
comment|// GC if needed since there may be too many threads
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"hashed keys are not the same size"
argument_list|,
name|hash_sha
operator|.
name|length
operator|==
name|expected_sha
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"hashed keys are not equal"
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|hash_sha
argument_list|,
name|expected_sha
argument_list|)
argument_list|)
expr_stmt|;
name|counter
operator|.
name|inc
argument_list|()
expr_stmt|;
comment|// count this thread as successful
name|LOG
operator|.
name|info
argument_list|(
literal|"Thread correctly read the block."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BlockMissingException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Bad - BlockMissingException is caught."
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|class|Counter
class|class
name|Counter
block|{
DECL|field|counter
name|int
name|counter
decl_stmt|;
DECL|method|Counter (int n)
name|Counter
parameter_list|(
name|int
name|n
parameter_list|)
block|{
name|counter
operator|=
name|n
expr_stmt|;
block|}
DECL|method|inc ()
specifier|public
specifier|synchronized
name|void
name|inc
parameter_list|()
block|{
operator|++
name|counter
expr_stmt|;
block|}
DECL|method|get ()
specifier|public
name|int
name|get
parameter_list|()
block|{
return|return
name|counter
return|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGetFileChecksum ()
specifier|public
name|void
name|testGetFileChecksum
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|f
init|=
literal|"/testGetFileChecksum"
decl_stmt|;
specifier|final
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|f
argument_list|)
decl_stmt|;
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|3
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
comment|//create a file
specifier|final
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|p
argument_list|,
literal|1L
operator|<<
literal|20
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|20100402L
argument_list|)
expr_stmt|;
comment|//get checksum
specifier|final
name|FileChecksum
name|cs1
init|=
name|fs
operator|.
name|getFileChecksum
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|cs1
operator|!=
literal|null
argument_list|)
expr_stmt|;
comment|//stop the first datanode
specifier|final
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|locatedblocks
init|=
name|DFSClient
operator|.
name|callGetBlockLocations
argument_list|(
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
argument_list|,
name|f
argument_list|,
literal|0
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
operator|.
name|getLocatedBlocks
argument_list|()
decl_stmt|;
specifier|final
name|DatanodeInfo
name|first
init|=
name|locatedblocks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLocations
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|cluster
operator|.
name|stopDataNode
argument_list|(
name|first
operator|.
name|getXferAddr
argument_list|()
argument_list|)
expr_stmt|;
comment|//get checksum again
specifier|final
name|FileChecksum
name|cs2
init|=
name|fs
operator|.
name|getFileChecksum
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|cs1
argument_list|,
name|cs2
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Test that timeout occurs when DN does not respond to RPC.    * Start up a server and ask it to sleep for n seconds. Make an    * RPC to the server and set rpcTimeout to less than n and ensure    * that socketTimeoutException is obtained    */
annotation|@
name|Test
DECL|method|testClientDNProtocolTimeout ()
specifier|public
name|void
name|testClientDNProtocolTimeout
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Server
name|server
init|=
operator|new
name|TestServer
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|InetSocketAddress
name|addr
init|=
name|NetUtils
operator|.
name|getConnectAddress
argument_list|(
name|server
argument_list|)
decl_stmt|;
name|DatanodeID
name|fakeDnId
init|=
name|DFSTestUtil
operator|.
name|getLocalDatanodeID
argument_list|(
name|addr
operator|.
name|getPort
argument_list|()
argument_list|)
decl_stmt|;
name|ExtendedBlock
name|b
init|=
operator|new
name|ExtendedBlock
argument_list|(
literal|"fake-pool"
argument_list|,
operator|new
name|Block
argument_list|(
literal|12345L
argument_list|)
argument_list|)
decl_stmt|;
name|LocatedBlock
name|fakeBlock
init|=
operator|new
name|LocatedBlock
argument_list|(
name|b
argument_list|,
operator|new
name|DatanodeInfo
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|ClientDatanodeProtocol
name|proxy
init|=
literal|null
decl_stmt|;
try|try
block|{
name|proxy
operator|=
name|DFSUtil
operator|.
name|createClientDatanodeProtocolProxy
argument_list|(
name|fakeDnId
argument_list|,
name|conf
argument_list|,
literal|500
argument_list|,
literal|false
argument_list|,
name|fakeBlock
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|getReplicaVisibleLength
argument_list|(
operator|new
name|ExtendedBlock
argument_list|(
literal|"bpid"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Did not get expected exception: SocketTimeoutException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SocketTimeoutException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got the expected Exception: SocketTimeoutException"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|proxy
operator|!=
literal|null
condition|)
block|{
name|RPC
operator|.
name|stopProxy
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
block|}
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test that checksum failures are recovered from by the next read on the same    * DFSInputStream. Corruption information is not persisted from read call to    * read call, so the client should expect consecutive calls to behave the same    * way. See HDFS-3067.    */
annotation|@
name|Test
DECL|method|testRetryOnChecksumFailure ()
specifier|public
name|void
name|testRetryOnChecksumFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|HdfsConfiguration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|short
name|REPL_FACTOR
init|=
literal|1
decl_stmt|;
specifier|final
name|long
name|FILE_LENGTH
init|=
literal|512L
decl_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/corrupted"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|FILE_LENGTH
argument_list|,
name|REPL_FACTOR
argument_list|,
literal|12345L
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitReplication
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|REPL_FACTOR
argument_list|)
expr_stmt|;
name|ExtendedBlock
name|block
init|=
name|DFSTestUtil
operator|.
name|getFirstBlock
argument_list|(
name|fs
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|int
name|blockFilesCorrupted
init|=
name|cluster
operator|.
name|corruptBlockOnDataNodes
argument_list|(
name|block
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"All replicas not corrupted"
argument_list|,
name|REPL_FACTOR
argument_list|,
name|blockFilesCorrupted
argument_list|)
expr_stmt|;
name|InetSocketAddress
name|nnAddr
init|=
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
name|cluster
operator|.
name|getNameNodePort
argument_list|()
argument_list|)
decl_stmt|;
name|DFSClient
name|client
init|=
operator|new
name|DFSClient
argument_list|(
name|nnAddr
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|DFSInputStream
name|dis
init|=
name|client
operator|.
name|open
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|arr
init|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|FILE_LENGTH
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
operator|++
name|i
control|)
block|{
try|try
block|{
name|dis
operator|.
name|read
argument_list|(
name|arr
argument_list|,
literal|0
argument_list|,
operator|(
name|int
operator|)
name|FILE_LENGTH
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected ChecksumException not thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Checksum error"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Test client retry with namenode restarting. */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testNamenodeRestart ()
specifier|public
name|void
name|testNamenodeRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|namenodeRestartTest
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|namenodeRestartTest (final Configuration conf, final boolean isWebHDFS)
specifier|public
specifier|static
name|void
name|namenodeRestartTest
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|boolean
name|isWebHDFS
parameter_list|)
throws|throws
name|Exception
block|{
operator|(
operator|(
name|Log4JLogger
operator|)
name|DFSClient
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Exception
argument_list|>
name|exceptions
init|=
operator|new
name|ArrayList
argument_list|<
name|Exception
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/testNamenodeRestart"
argument_list|)
decl_stmt|;
if|if
condition|(
name|isWebHDFS
condition|)
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|HttpClient
operator|.
name|RETRY_POLICY_ENABLED_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|Retry
operator|.
name|POLICY_ENABLED_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_SAFEMODE_MIN_DATANODES_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MiniDFSCluster
operator|.
name|DFS_NAMENODE_SAFEMODE_EXTENSION_TESTING_KEY
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
specifier|final
name|short
name|numDatanodes
init|=
literal|3
decl_stmt|;
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDatanodes
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|DistributedFileSystem
name|dfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|FileSystem
name|fs
init|=
name|isWebHDFS
condition|?
name|WebHdfsTestUtil
operator|.
name|getWebHdfsFileSystem
argument_list|(
name|conf
argument_list|,
name|WebHdfsConstants
operator|.
name|WEBHDFS_SCHEME
argument_list|)
else|:
name|dfs
decl_stmt|;
specifier|final
name|URI
name|uri
init|=
name|dfs
operator|.
name|getUri
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|HdfsUtils
operator|.
name|isHealthy
argument_list|(
name|uri
argument_list|)
argument_list|)
expr_stmt|;
comment|//create a file
specifier|final
name|long
name|length
init|=
literal|1L
operator|<<
literal|20
decl_stmt|;
specifier|final
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|file1
argument_list|,
name|length
argument_list|,
name|numDatanodes
argument_list|,
literal|20120406L
argument_list|)
expr_stmt|;
comment|//get file status
specifier|final
name|FileStatus
name|s1
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|file1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|length
argument_list|,
name|s1
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
comment|//create file4, write some data but not close
specifier|final
name|Path
name|file4
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"file4"
argument_list|)
decl_stmt|;
specifier|final
name|FSDataOutputStream
name|out4
init|=
name|fs
operator|.
name|create
argument_list|(
name|file4
argument_list|,
literal|false
argument_list|,
literal|4096
argument_list|,
name|fs
operator|.
name|getDefaultReplication
argument_list|(
name|file4
argument_list|)
argument_list|,
literal|1024L
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
literal|1000
index|]
decl_stmt|;
operator|new
name|Random
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|out4
operator|.
name|write
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|out4
operator|.
name|write
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
if|if
condition|(
name|isWebHDFS
condition|)
block|{
comment|// WebHDFS does not support hflush. To avoid DataNode communicating with
comment|// NN while we're shutting down NN, we call out4.close() to finish
comment|// writing the data
name|out4
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|out4
operator|.
name|hflush
argument_list|()
expr_stmt|;
block|}
comment|//shutdown namenode
name|assertTrue
argument_list|(
name|HdfsUtils
operator|.
name|isHealthy
argument_list|(
name|uri
argument_list|)
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdownNameNode
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|HdfsUtils
operator|.
name|isHealthy
argument_list|(
name|uri
argument_list|)
argument_list|)
expr_stmt|;
comment|//namenode is down, continue writing file4 in a thread
specifier|final
name|Thread
name|file4thread
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
comment|//write some more data and then close the file
if|if
condition|(
operator|!
name|isWebHDFS
condition|)
block|{
name|out4
operator|.
name|write
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|out4
operator|.
name|write
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|out4
operator|.
name|write
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|out4
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exceptions
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|file4thread
operator|.
name|start
argument_list|()
expr_stmt|;
comment|//namenode is down, read the file in a thread
specifier|final
name|Thread
name|reader
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
comment|//it should retry till namenode is up.
specifier|final
name|FileSystem
name|fs
init|=
name|createFsWithDifferentUsername
argument_list|(
name|conf
argument_list|,
name|isWebHDFS
argument_list|)
decl_stmt|;
specifier|final
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|file1
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|in
operator|.
name|read
argument_list|()
operator|!=
operator|-
literal|1
condition|;
name|count
operator|++
control|)
empty_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|s1
operator|.
name|getLen
argument_list|()
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exceptions
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|reader
operator|.
name|start
argument_list|()
expr_stmt|;
comment|//namenode is down, create another file in a thread
specifier|final
name|Path
name|file3
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
specifier|final
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
comment|//it should retry till namenode is up.
specifier|final
name|FileSystem
name|fs
init|=
name|createFsWithDifferentUsername
argument_list|(
name|conf
argument_list|,
name|isWebHDFS
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|file3
argument_list|,
name|length
argument_list|,
name|numDatanodes
argument_list|,
literal|20120406L
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exceptions
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
comment|//restart namenode in a new thread
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
comment|//sleep, restart, and then wait active
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|sleep
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|HdfsUtils
operator|.
name|isHealthy
argument_list|(
name|uri
argument_list|)
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|restartNameNode
argument_list|(
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|HdfsUtils
operator|.
name|isHealthy
argument_list|(
name|uri
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exceptions
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
comment|//namenode is down, it should retry until namenode is up again.
specifier|final
name|FileStatus
name|s2
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|file1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
expr_stmt|;
comment|//check file1 and file3
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertEmpty
argument_list|(
name|exceptions
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|s1
operator|.
name|getLen
argument_list|()
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|file3
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fs
operator|.
name|getFileChecksum
argument_list|(
name|file1
argument_list|)
argument_list|,
name|fs
operator|.
name|getFileChecksum
argument_list|(
name|file3
argument_list|)
argument_list|)
expr_stmt|;
name|reader
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertEmpty
argument_list|(
name|exceptions
argument_list|)
expr_stmt|;
comment|//check file4
name|file4thread
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertEmpty
argument_list|(
name|exceptions
argument_list|)
expr_stmt|;
block|{
specifier|final
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|file4
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|r
init|;
operator|(
name|r
operator|=
name|in
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|;
name|count
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"count=%d"
argument_list|,
name|count
argument_list|)
argument_list|,
name|bytes
index|[
name|count
operator|%
name|bytes
operator|.
name|length
index|]
argument_list|,
operator|(
name|byte
operator|)
name|r
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isWebHDFS
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
operator|*
name|bytes
operator|.
name|length
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
operator|*
name|bytes
operator|.
name|length
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|//enter safe mode
name|assertTrue
argument_list|(
name|HdfsUtils
operator|.
name|isHealthy
argument_list|(
name|uri
argument_list|)
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|HdfsUtils
operator|.
name|isHealthy
argument_list|(
name|uri
argument_list|)
argument_list|)
expr_stmt|;
comment|//leave safe mode in a new thread
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
comment|//sleep and then leave safe mode
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|sleep
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|HdfsUtils
operator|.
name|isHealthy
argument_list|(
name|uri
argument_list|)
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_LEAVE
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|HdfsUtils
operator|.
name|isHealthy
argument_list|(
name|uri
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exceptions
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
comment|//namenode is in safe mode, create should retry until it leaves safe mode.
specifier|final
name|Path
name|file2
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|file2
argument_list|,
name|length
argument_list|,
name|numDatanodes
argument_list|,
literal|20120406L
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fs
operator|.
name|getFileChecksum
argument_list|(
name|file1
argument_list|)
argument_list|,
name|fs
operator|.
name|getFileChecksum
argument_list|(
name|file2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|HdfsUtils
operator|.
name|isHealthy
argument_list|(
name|uri
argument_list|)
argument_list|)
expr_stmt|;
comment|//make sure it won't retry on exceptions like FileNotFoundException
specifier|final
name|Path
name|nonExisting
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"nonExisting"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"setPermission: "
operator|+
name|nonExisting
argument_list|)
expr_stmt|;
try|try
block|{
name|fs
operator|.
name|setPermission
argument_list|(
name|nonExisting
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnfe
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"GOOD!"
argument_list|,
name|fnfe
argument_list|)
expr_stmt|;
block|}
name|assertEmpty
argument_list|(
name|exceptions
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|assertEmpty (final List<Exception> exceptions)
specifier|static
name|void
name|assertEmpty
parameter_list|(
specifier|final
name|List
argument_list|<
name|Exception
argument_list|>
name|exceptions
parameter_list|)
block|{
if|if
condition|(
operator|!
name|exceptions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|final
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"There are "
argument_list|)
operator|.
name|append
argument_list|(
name|exceptions
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" exception(s):"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|exceptions
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|"\n  Exception "
argument_list|)
operator|.
name|append
argument_list|(
name|i
argument_list|)
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|exceptions
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|fail
argument_list|(
name|b
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createFsWithDifferentUsername ( final Configuration conf, final boolean isWebHDFS )
specifier|private
specifier|static
name|FileSystem
name|createFsWithDifferentUsername
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|boolean
name|isWebHDFS
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|String
name|username
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|(         )
operator|.
name|getShortUserName
argument_list|()
operator|+
literal|"_XXX"
decl_stmt|;
specifier|final
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
name|username
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"supergroup"
block|}
argument_list|)
decl_stmt|;
return|return
name|isWebHDFS
condition|?
name|WebHdfsTestUtil
operator|.
name|getWebHdfsFileSystemAs
argument_list|(
name|ugi
argument_list|,
name|conf
argument_list|,
name|WebHdfsConstants
operator|.
name|WEBHDFS_SCHEME
argument_list|)
else|:
name|DFSTestUtil
operator|.
name|getFileSystemAs
argument_list|(
name|ugi
argument_list|,
name|conf
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testMultipleLinearRandomRetry ()
specifier|public
name|void
name|testMultipleLinearRandomRetry
parameter_list|()
block|{
name|parseMultipleLinearRandomRetry
argument_list|(
literal|null
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|parseMultipleLinearRandomRetry
argument_list|(
literal|null
argument_list|,
literal|"11"
argument_list|)
expr_stmt|;
name|parseMultipleLinearRandomRetry
argument_list|(
literal|null
argument_list|,
literal|"11,22,33"
argument_list|)
expr_stmt|;
name|parseMultipleLinearRandomRetry
argument_list|(
literal|null
argument_list|,
literal|"11,22,33,44,55"
argument_list|)
expr_stmt|;
name|parseMultipleLinearRandomRetry
argument_list|(
literal|null
argument_list|,
literal|"AA"
argument_list|)
expr_stmt|;
name|parseMultipleLinearRandomRetry
argument_list|(
literal|null
argument_list|,
literal|"11,AA"
argument_list|)
expr_stmt|;
name|parseMultipleLinearRandomRetry
argument_list|(
literal|null
argument_list|,
literal|"11,22,33,FF"
argument_list|)
expr_stmt|;
name|parseMultipleLinearRandomRetry
argument_list|(
literal|null
argument_list|,
literal|"11,-22"
argument_list|)
expr_stmt|;
name|parseMultipleLinearRandomRetry
argument_list|(
literal|null
argument_list|,
literal|"-11,22"
argument_list|)
expr_stmt|;
name|parseMultipleLinearRandomRetry
argument_list|(
literal|"[22x11ms]"
argument_list|,
literal|"11,22"
argument_list|)
expr_stmt|;
name|parseMultipleLinearRandomRetry
argument_list|(
literal|"[22x11ms, 44x33ms]"
argument_list|,
literal|"11,22,33,44"
argument_list|)
expr_stmt|;
name|parseMultipleLinearRandomRetry
argument_list|(
literal|"[22x11ms, 44x33ms, 66x55ms]"
argument_list|,
literal|"11,22,33,44,55,66"
argument_list|)
expr_stmt|;
name|parseMultipleLinearRandomRetry
argument_list|(
literal|"[22x11ms, 44x33ms, 66x55ms]"
argument_list|,
literal|"   11,   22, 33,  44, 55,  66   "
argument_list|)
expr_stmt|;
block|}
DECL|method|parseMultipleLinearRandomRetry (String expected, String s)
specifier|static
name|void
name|parseMultipleLinearRandomRetry
parameter_list|(
name|String
name|expected
parameter_list|,
name|String
name|s
parameter_list|)
block|{
specifier|final
name|MultipleLinearRandomRetry
name|r
init|=
name|MultipleLinearRandomRetry
operator|.
name|parseCommaSeparatedString
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"input="
operator|+
name|s
operator|+
literal|", parsed="
operator|+
name|r
operator|+
literal|", expected="
operator|+
name|expected
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
name|expected
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|"MultipleLinearRandomRetry"
operator|+
name|expected
argument_list|,
name|r
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDFSClientConfigurationLocateFollowingBlockInitialDelay ()
specifier|public
name|void
name|testDFSClientConfigurationLocateFollowingBlockInitialDelay
parameter_list|()
throws|throws
name|Exception
block|{
comment|// test if HdfsClientConfigKeys.BlockWrite.LOCATEFOLLOWINGBLOCK_INITIAL_DELAY_KEY
comment|// is not configured, verify DFSClient uses the default value 400.
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|NamenodeProtocols
name|nn
init|=
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
decl_stmt|;
name|DFSClient
name|client
init|=
operator|new
name|DFSClient
argument_list|(
literal|null
argument_list|,
name|nn
argument_list|,
name|conf
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|client
operator|.
name|getConf
argument_list|()
operator|.
name|getBlockWriteLocateFollowingInitialDelayMs
argument_list|()
argument_list|,
literal|400
argument_list|)
expr_stmt|;
comment|// change HdfsClientConfigKeys.BlockWrite.LOCATEFOLLOWINGBLOCK_INITIAL_DELAY_KEY,
comment|// verify DFSClient uses the configured value 1000.
name|conf
operator|.
name|setInt
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|BlockWrite
operator|.
name|LOCATEFOLLOWINGBLOCK_INITIAL_DELAY_MS_KEY
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|client
operator|=
operator|new
name|DFSClient
argument_list|(
literal|null
argument_list|,
name|nn
argument_list|,
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|client
operator|.
name|getConf
argument_list|()
operator|.
name|getBlockWriteLocateFollowingInitialDelayMs
argument_list|()
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

