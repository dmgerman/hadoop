begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_class
DECL|class|TestDirectBufferPool
specifier|public
class|class
name|TestDirectBufferPool
block|{
DECL|field|pool
name|DirectBufferPool
name|pool
init|=
operator|new
name|DirectBufferPool
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|testBasics ()
specifier|public
name|void
name|testBasics
parameter_list|()
block|{
name|ByteBuffer
name|a
init|=
name|pool
operator|.
name|getBuffer
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|a
operator|.
name|capacity
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|a
operator|.
name|remaining
argument_list|()
argument_list|)
expr_stmt|;
name|pool
operator|.
name|returnBuffer
argument_list|(
name|a
argument_list|)
expr_stmt|;
comment|// Getting a new buffer should return the same one
name|ByteBuffer
name|b
init|=
name|pool
operator|.
name|getBuffer
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
comment|// Getting a new buffer before returning "B" should
comment|// not return the same one
name|ByteBuffer
name|c
init|=
name|pool
operator|.
name|getBuffer
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
name|b
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|pool
operator|.
name|returnBuffer
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|pool
operator|.
name|returnBuffer
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBuffersAreReset ()
specifier|public
name|void
name|testBuffersAreReset
parameter_list|()
block|{
name|ByteBuffer
name|a
init|=
name|pool
operator|.
name|getBuffer
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|a
operator|.
name|putInt
argument_list|(
literal|0xdeadbeef
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|96
argument_list|,
name|a
operator|.
name|remaining
argument_list|()
argument_list|)
expr_stmt|;
name|pool
operator|.
name|returnBuffer
argument_list|(
name|a
argument_list|)
expr_stmt|;
comment|// Even though we return the same buffer,
comment|// its position should be reset to 0
name|ByteBuffer
name|b
init|=
name|pool
operator|.
name|getBuffer
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|a
operator|.
name|remaining
argument_list|()
argument_list|)
expr_stmt|;
name|pool
operator|.
name|returnBuffer
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWeakRefClearing ()
specifier|public
name|void
name|testWeakRefClearing
parameter_list|()
block|{
comment|// Allocate and return 10 buffers.
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|bufs
init|=
name|Lists
operator|.
name|newLinkedList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|ByteBuffer
name|buf
init|=
name|pool
operator|.
name|getBuffer
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|bufs
operator|.
name|add
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ByteBuffer
name|buf
range|:
name|bufs
control|)
block|{
name|pool
operator|.
name|returnBuffer
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|pool
operator|.
name|countBuffersOfSize
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
comment|// Clear out any references to the buffers, and force
comment|// GC. Weak refs should get cleared.
name|bufs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|bufs
operator|=
literal|null
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
block|}
name|ByteBuffer
name|buf
init|=
name|pool
operator|.
name|getBuffer
argument_list|(
literal|100
argument_list|)
decl_stmt|;
comment|// the act of getting a buffer should clear all the nulled
comment|// references from the pool.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|pool
operator|.
name|countBuffersOfSize
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|pool
operator|.
name|returnBuffer
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

