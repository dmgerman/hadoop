begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockManagerTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeAdminMonitorInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeAdminBackoffMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNodeTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|DFSAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|HostsFileWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  * Extends the TestDecommissioningStatus class to provide the same set of  * tests for the backoff Monitor version.  */
end_comment

begin_class
DECL|class|TestDecommissioningStatusWithBackoffMonitor
specifier|public
class|class
name|TestDecommissioningStatusWithBackoffMonitor
extends|extends
name|TestDecommissioningStatus
block|{
DECL|field|seed
specifier|private
specifier|final
name|long
name|seed
init|=
literal|0xDEADBEEFL
decl_stmt|;
DECL|field|blockSize
specifier|private
specifier|final
name|int
name|blockSize
init|=
literal|8192
decl_stmt|;
DECL|field|fileSize
specifier|private
specifier|final
name|int
name|fileSize
init|=
literal|16384
decl_stmt|;
DECL|field|numDatanodes
specifier|private
specifier|final
name|int
name|numDatanodes
init|=
literal|2
decl_stmt|;
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|fileSys
specifier|private
name|FileSystem
name|fileSys
decl_stmt|;
DECL|field|hostsFileWriter
specifier|private
name|HostsFileWriter
name|hostsFileWriter
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
name|setupConfig
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DECOMMISSION_MONITOR_CLASS
argument_list|,
name|DatanodeAdminBackoffMonitor
operator|.
name|class
argument_list|,
name|DatanodeAdminMonitorInterface
operator|.
name|class
argument_list|)
expr_stmt|;
name|createCluster
argument_list|()
expr_stmt|;
name|this
operator|.
name|cluster
operator|=
name|super
operator|.
name|getCluster
argument_list|()
expr_stmt|;
name|this
operator|.
name|fileSys
operator|=
name|super
operator|.
name|getFileSys
argument_list|()
expr_stmt|;
name|this
operator|.
name|hostsFileWriter
operator|=
name|super
operator|.
name|getHostsFileWriter
argument_list|()
expr_stmt|;
block|}
comment|/**    * This test is almost a copy of the original in the parent class, but due to    * how the backoff monitor works, it needs to run the check loop twice after a    * node is decommissioned to get the stats to update.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testDecommissionStatus ()
specifier|public
name|void
name|testDecommissionStatus
parameter_list|()
throws|throws
name|Exception
block|{
name|InetSocketAddress
name|addr
init|=
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
name|cluster
operator|.
name|getNameNodePort
argument_list|()
argument_list|)
decl_stmt|;
name|DFSClient
name|client
init|=
operator|new
name|DFSClient
argument_list|(
name|addr
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|DatanodeInfo
index|[]
name|info
init|=
name|client
operator|.
name|datanodeReport
argument_list|(
name|HdfsConstants
operator|.
name|DatanodeReportType
operator|.
name|LIVE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Number of Datanodes "
argument_list|,
literal|2
argument_list|,
name|info
operator|.
name|length
argument_list|)
expr_stmt|;
name|DistributedFileSystem
name|distFileSys
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|DFSAdmin
name|admin
init|=
operator|new
name|DFSAdmin
argument_list|(
name|cluster
operator|.
name|getConfiguration
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|short
name|replicas
init|=
name|numDatanodes
decl_stmt|;
comment|//
comment|// Decommission one node. Verify the decommission status
comment|//
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"decommission.dat"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|distFileSys
argument_list|,
name|file1
argument_list|,
name|fileSize
argument_list|,
name|fileSize
argument_list|,
name|blockSize
argument_list|,
name|replicas
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|Path
name|file2
init|=
operator|new
name|Path
argument_list|(
literal|"decommission1.dat"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|st1
init|=
name|AdminStatesBaseTest
operator|.
name|writeIncompleteFile
argument_list|(
name|distFileSys
argument_list|,
name|file2
argument_list|,
name|replicas
argument_list|,
call|(
name|short
call|)
argument_list|(
name|fileSize
operator|/
name|blockSize
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|DataNode
name|d
range|:
name|cluster
operator|.
name|getDataNodes
argument_list|()
control|)
block|{
name|DataNodeTestUtils
operator|.
name|triggerBlockReport
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
name|FSNamesystem
name|fsn
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
decl_stmt|;
specifier|final
name|DatanodeManager
name|dm
init|=
name|fsn
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|iteration
init|=
literal|0
init|;
name|iteration
operator|<
name|numDatanodes
condition|;
name|iteration
operator|++
control|)
block|{
name|String
name|downnode
init|=
name|decommissionNode
argument_list|(
name|client
argument_list|,
name|iteration
argument_list|)
decl_stmt|;
name|dm
operator|.
name|refreshNodes
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|decommissionedNodes
operator|.
name|add
argument_list|(
name|downnode
argument_list|)
expr_stmt|;
name|BlockManagerTestUtil
operator|.
name|recheckDecommissionState
argument_list|(
name|dm
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|decommissioningNodes
init|=
name|dm
operator|.
name|getDecommissioningNodes
argument_list|()
decl_stmt|;
if|if
condition|(
name|iteration
operator|==
literal|0
condition|)
block|{
name|assertEquals
argument_list|(
name|decommissioningNodes
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Due to how the alternative decom monitor works, we need to run
comment|// through the check loop a second time to get stats updated
name|BlockManagerTestUtil
operator|.
name|recheckDecommissionState
argument_list|(
name|dm
argument_list|)
expr_stmt|;
name|DatanodeDescriptor
name|decommNode
init|=
name|decommissioningNodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|checkDecommissionStatus
argument_list|(
name|decommNode
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkDFSAdminDecommissionStatus
argument_list|(
name|decommissioningNodes
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|,
name|distFileSys
argument_list|,
name|admin
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|decommissioningNodes
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Due to how the alternative decom monitor works, we need to run
comment|// through the check loop a second time to get stats updated
name|BlockManagerTestUtil
operator|.
name|recheckDecommissionState
argument_list|(
name|dm
argument_list|)
expr_stmt|;
name|DatanodeDescriptor
name|decommNode1
init|=
name|decommissioningNodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|DatanodeDescriptor
name|decommNode2
init|=
name|decommissioningNodes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// This one is still 3,3,1 since it passed over the UC block
comment|// earlier, before node 2 was decommed
name|checkDecommissionStatus
argument_list|(
name|decommNode1
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// This one is 4,4,2 since it has the full state
name|checkDecommissionStatus
argument_list|(
name|decommNode2
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|checkDFSAdminDecommissionStatus
argument_list|(
name|decommissioningNodes
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|,
name|distFileSys
argument_list|,
name|admin
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Call refreshNodes on FSNamesystem with empty exclude file.
comment|// This will remove the datanodes from decommissioning list and
comment|// make them available again.
name|hostsFileWriter
operator|.
name|initExcludeHost
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|dm
operator|.
name|refreshNodes
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|st1
operator|.
name|close
argument_list|()
expr_stmt|;
name|AdminStatesBaseTest
operator|.
name|cleanupFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|)
expr_stmt|;
name|AdminStatesBaseTest
operator|.
name|cleanupFile
argument_list|(
name|fileSys
argument_list|,
name|file2
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

