begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.blockmanagement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetworkTopology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetworkTopologyWithNodeGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestReplicationPolicyWithNodeGroup
specifier|public
class|class
name|TestReplicationPolicyWithNodeGroup
block|{
DECL|field|BLOCK_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|BLOCK_SIZE
init|=
literal|1024
decl_stmt|;
DECL|field|NUM_OF_DATANODES
specifier|private
specifier|static
specifier|final
name|int
name|NUM_OF_DATANODES
init|=
literal|8
decl_stmt|;
DECL|field|NUM_OF_DATANODES_BOUNDARY
specifier|private
specifier|static
specifier|final
name|int
name|NUM_OF_DATANODES_BOUNDARY
init|=
literal|6
decl_stmt|;
DECL|field|NUM_OF_DATANODES_MORE_TARGETS
specifier|private
specifier|static
specifier|final
name|int
name|NUM_OF_DATANODES_MORE_TARGETS
init|=
literal|12
decl_stmt|;
DECL|field|NUM_OF_DATANODES_FOR_DEPENDENCIES
specifier|private
specifier|static
specifier|final
name|int
name|NUM_OF_DATANODES_FOR_DEPENDENCIES
init|=
literal|6
decl_stmt|;
DECL|field|CONF
specifier|private
specifier|final
name|Configuration
name|CONF
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
DECL|field|cluster
specifier|private
name|NetworkTopology
name|cluster
decl_stmt|;
DECL|field|namenode
specifier|private
name|NameNode
name|namenode
decl_stmt|;
DECL|field|replicator
specifier|private
name|BlockPlacementPolicy
name|replicator
decl_stmt|;
DECL|field|filename
specifier|private
specifier|static
specifier|final
name|String
name|filename
init|=
literal|"/dummyfile.txt"
decl_stmt|;
DECL|field|storages
specifier|private
specifier|static
specifier|final
name|DatanodeStorageInfo
index|[]
name|storages
decl_stmt|;
DECL|field|dataNodes
specifier|private
specifier|static
specifier|final
name|DatanodeDescriptor
index|[]
name|dataNodes
decl_stmt|;
static|static
block|{
specifier|final
name|String
index|[]
name|racks
init|=
block|{
literal|"/d1/r1/n1"
block|,
literal|"/d1/r1/n1"
block|,
literal|"/d1/r1/n2"
block|,
literal|"/d1/r2/n3"
block|,
literal|"/d1/r2/n3"
block|,
literal|"/d1/r2/n4"
block|,
literal|"/d2/r3/n5"
block|,
literal|"/d2/r3/n6"
block|}
decl_stmt|;
name|storages
operator|=
name|DFSTestUtil
operator|.
name|createDatanodeStorageInfos
argument_list|(
name|racks
argument_list|)
expr_stmt|;
name|dataNodes
operator|=
name|DFSTestUtil
operator|.
name|toDatanodeDescriptor
argument_list|(
name|storages
argument_list|)
expr_stmt|;
block|}
DECL|field|storagesInBoundaryCase
specifier|private
specifier|static
specifier|final
name|DatanodeStorageInfo
index|[]
name|storagesInBoundaryCase
decl_stmt|;
DECL|field|dataNodesInBoundaryCase
specifier|private
specifier|static
specifier|final
name|DatanodeDescriptor
index|[]
name|dataNodesInBoundaryCase
decl_stmt|;
static|static
block|{
specifier|final
name|String
index|[]
name|racksInBoundaryCase
init|=
block|{
literal|"/d1/r1/n1"
block|,
literal|"/d1/r1/n1"
block|,
literal|"/d1/r1/n1"
block|,
literal|"/d1/r1/n2"
block|,
literal|"/d1/r2/n3"
block|,
literal|"/d1/r2/n3"
block|}
decl_stmt|;
name|storagesInBoundaryCase
operator|=
name|DFSTestUtil
operator|.
name|createDatanodeStorageInfos
argument_list|(
name|racksInBoundaryCase
argument_list|)
expr_stmt|;
name|dataNodesInBoundaryCase
operator|=
name|DFSTestUtil
operator|.
name|toDatanodeDescriptor
argument_list|(
name|storagesInBoundaryCase
argument_list|)
expr_stmt|;
block|}
DECL|field|storagesInMoreTargetsCase
specifier|private
specifier|static
specifier|final
name|DatanodeStorageInfo
index|[]
name|storagesInMoreTargetsCase
decl_stmt|;
DECL|field|dataNodesInMoreTargetsCase
specifier|private
specifier|final
specifier|static
name|DatanodeDescriptor
index|[]
name|dataNodesInMoreTargetsCase
decl_stmt|;
static|static
block|{
specifier|final
name|String
index|[]
name|racksInMoreTargetsCase
init|=
block|{
literal|"/r1/n1"
block|,
literal|"/r1/n1"
block|,
literal|"/r1/n2"
block|,
literal|"/r1/n2"
block|,
literal|"/r1/n3"
block|,
literal|"/r1/n3"
block|,
literal|"/r2/n4"
block|,
literal|"/r2/n4"
block|,
literal|"/r2/n5"
block|,
literal|"/r2/n5"
block|,
literal|"/r2/n6"
block|,
literal|"/r2/n6"
block|}
decl_stmt|;
name|storagesInMoreTargetsCase
operator|=
name|DFSTestUtil
operator|.
name|createDatanodeStorageInfos
argument_list|(
name|racksInMoreTargetsCase
argument_list|)
expr_stmt|;
name|dataNodesInMoreTargetsCase
operator|=
name|DFSTestUtil
operator|.
name|toDatanodeDescriptor
argument_list|(
name|storagesInMoreTargetsCase
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
DECL|field|NODE
specifier|private
specifier|final
specifier|static
name|DatanodeDescriptor
name|NODE
init|=
operator|new
name|DatanodeDescriptor
argument_list|(
name|DFSTestUtil
operator|.
name|getDatanodeDescriptor
argument_list|(
literal|"9.9.9.9"
argument_list|,
literal|"/d2/r4/n7"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|storagesForDependencies
specifier|private
specifier|static
specifier|final
name|DatanodeStorageInfo
index|[]
name|storagesForDependencies
decl_stmt|;
DECL|field|dataNodesForDependencies
specifier|private
specifier|static
specifier|final
name|DatanodeDescriptor
index|[]
name|dataNodesForDependencies
decl_stmt|;
static|static
block|{
specifier|final
name|String
index|[]
name|racksForDependencies
init|=
block|{
literal|"/d1/r1/n1"
block|,
literal|"/d1/r1/n1"
block|,
literal|"/d1/r1/n2"
block|,
literal|"/d1/r1/n2"
block|,
literal|"/d1/r1/n3"
block|,
literal|"/d1/r1/n4"
block|}
decl_stmt|;
specifier|final
name|String
index|[]
name|hostNamesForDependencies
init|=
block|{
literal|"h1"
block|,
literal|"h2"
block|,
literal|"h3"
block|,
literal|"h4"
block|,
literal|"h5"
block|,
literal|"h6"
block|}
decl_stmt|;
name|storagesForDependencies
operator|=
name|DFSTestUtil
operator|.
name|createDatanodeStorageInfos
argument_list|(
name|racksForDependencies
argument_list|,
name|hostNamesForDependencies
argument_list|)
expr_stmt|;
name|dataNodesForDependencies
operator|=
name|DFSTestUtil
operator|.
name|toDatanodeDescriptor
argument_list|(
name|storagesForDependencies
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
operator|.
name|setDefaultUri
argument_list|(
name|CONF
argument_list|,
literal|"hdfs://localhost:0"
argument_list|)
expr_stmt|;
name|CONF
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HTTP_ADDRESS_KEY
argument_list|,
literal|"0.0.0.0:0"
argument_list|)
expr_stmt|;
comment|// Set properties to make HDFS aware of NodeGroup.
name|CONF
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_REPLICATOR_CLASSNAME_KEY
argument_list|,
name|BlockPlacementPolicyWithNodeGroup
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|CONF
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|NET_TOPOLOGY_IMPL_KEY
argument_list|,
name|NetworkTopologyWithNodeGroup
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|CONF
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_AVOID_STALE_DATANODE_FOR_WRITE_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|File
name|baseDir
init|=
name|PathUtils
operator|.
name|getTestDir
argument_list|(
name|TestReplicationPolicyWithNodeGroup
operator|.
name|class
argument_list|)
decl_stmt|;
name|CONF
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_NAME_DIR_KEY
argument_list|,
operator|new
name|File
argument_list|(
name|baseDir
argument_list|,
literal|"name"
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|formatNameNode
argument_list|(
name|CONF
argument_list|)
expr_stmt|;
name|namenode
operator|=
operator|new
name|NameNode
argument_list|(
name|CONF
argument_list|)
expr_stmt|;
specifier|final
name|BlockManager
name|bm
init|=
name|namenode
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
decl_stmt|;
name|replicator
operator|=
name|bm
operator|.
name|getBlockPlacementPolicy
argument_list|()
expr_stmt|;
name|cluster
operator|=
name|bm
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getNetworkTopology
argument_list|()
expr_stmt|;
comment|// construct network topology
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_OF_DATANODES
condition|;
name|i
operator|++
control|)
block|{
name|cluster
operator|.
name|add
argument_list|(
name|dataNodes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|setupDataNodeCapacity
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|namenode
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|method|updateHeartbeatWithUsage (DatanodeDescriptor dn, long capacity, long dfsUsed, long remaining, long blockPoolUsed, long dnCacheCapacity, long dnCacheUsed, int xceiverCount, int volFailures)
specifier|private
specifier|static
name|void
name|updateHeartbeatWithUsage
parameter_list|(
name|DatanodeDescriptor
name|dn
parameter_list|,
name|long
name|capacity
parameter_list|,
name|long
name|dfsUsed
parameter_list|,
name|long
name|remaining
parameter_list|,
name|long
name|blockPoolUsed
parameter_list|,
name|long
name|dnCacheCapacity
parameter_list|,
name|long
name|dnCacheUsed
parameter_list|,
name|int
name|xceiverCount
parameter_list|,
name|int
name|volFailures
parameter_list|)
block|{
name|dn
operator|.
name|getStorageInfos
argument_list|()
index|[
literal|0
index|]
operator|.
name|setUtilizationForTesting
argument_list|(
name|capacity
argument_list|,
name|dfsUsed
argument_list|,
name|remaining
argument_list|,
name|blockPoolUsed
argument_list|)
expr_stmt|;
name|dn
operator|.
name|updateHeartbeat
argument_list|(
name|BlockManagerTestUtil
operator|.
name|getStorageReportsForDatanode
argument_list|(
name|dn
argument_list|)
argument_list|,
name|dnCacheCapacity
argument_list|,
name|dnCacheUsed
argument_list|,
name|xceiverCount
argument_list|,
name|volFailures
argument_list|)
expr_stmt|;
block|}
DECL|method|setupDataNodeCapacity ()
specifier|private
specifier|static
name|void
name|setupDataNodeCapacity
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_OF_DATANODES
condition|;
name|i
operator|++
control|)
block|{
name|updateHeartbeatWithUsage
argument_list|(
name|dataNodes
index|[
name|i
index|]
argument_list|,
literal|2
operator|*
name|HdfsConstants
operator|.
name|MIN_BLOCKS_FOR_WRITE
operator|*
name|BLOCK_SIZE
argument_list|,
literal|0L
argument_list|,
literal|2
operator|*
name|HdfsConstants
operator|.
name|MIN_BLOCKS_FOR_WRITE
operator|*
name|BLOCK_SIZE
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Scan the targets list: all targets should be on different NodeGroups.    * Return false if two targets are found on the same NodeGroup.    */
DECL|method|checkTargetsOnDifferentNodeGroup ( DatanodeStorageInfo[] targets)
specifier|private
specifier|static
name|boolean
name|checkTargetsOnDifferentNodeGroup
parameter_list|(
name|DatanodeStorageInfo
index|[]
name|targets
parameter_list|)
block|{
if|if
condition|(
name|targets
operator|.
name|length
operator|==
literal|0
condition|)
return|return
literal|true
return|;
name|Set
argument_list|<
name|String
argument_list|>
name|targetSet
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|DatanodeStorageInfo
name|storage
range|:
name|targets
control|)
block|{
specifier|final
name|DatanodeDescriptor
name|node
init|=
name|storage
operator|.
name|getDatanodeDescriptor
argument_list|()
decl_stmt|;
name|String
name|nodeGroup
init|=
name|NetworkTopology
operator|.
name|getLastHalf
argument_list|(
name|node
operator|.
name|getNetworkLocation
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|targetSet
operator|.
name|contains
argument_list|(
name|nodeGroup
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
name|targetSet
operator|.
name|add
argument_list|(
name|nodeGroup
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|isOnSameRack (DatanodeStorageInfo left, DatanodeStorageInfo right)
specifier|private
name|boolean
name|isOnSameRack
parameter_list|(
name|DatanodeStorageInfo
name|left
parameter_list|,
name|DatanodeStorageInfo
name|right
parameter_list|)
block|{
return|return
name|isOnSameRack
argument_list|(
name|left
operator|.
name|getDatanodeDescriptor
argument_list|()
argument_list|,
name|right
argument_list|)
return|;
block|}
DECL|method|isOnSameRack (DatanodeDescriptor left, DatanodeStorageInfo right)
specifier|private
name|boolean
name|isOnSameRack
parameter_list|(
name|DatanodeDescriptor
name|left
parameter_list|,
name|DatanodeStorageInfo
name|right
parameter_list|)
block|{
return|return
name|cluster
operator|.
name|isOnSameRack
argument_list|(
name|left
argument_list|,
name|right
operator|.
name|getDatanodeDescriptor
argument_list|()
argument_list|)
return|;
block|}
DECL|method|isOnSameNodeGroup (DatanodeStorageInfo left, DatanodeStorageInfo right)
specifier|private
name|boolean
name|isOnSameNodeGroup
parameter_list|(
name|DatanodeStorageInfo
name|left
parameter_list|,
name|DatanodeStorageInfo
name|right
parameter_list|)
block|{
return|return
name|isOnSameNodeGroup
argument_list|(
name|left
operator|.
name|getDatanodeDescriptor
argument_list|()
argument_list|,
name|right
argument_list|)
return|;
block|}
DECL|method|isOnSameNodeGroup (DatanodeDescriptor left, DatanodeStorageInfo right)
specifier|private
name|boolean
name|isOnSameNodeGroup
parameter_list|(
name|DatanodeDescriptor
name|left
parameter_list|,
name|DatanodeStorageInfo
name|right
parameter_list|)
block|{
return|return
name|cluster
operator|.
name|isOnSameNodeGroup
argument_list|(
name|left
argument_list|,
name|right
operator|.
name|getDatanodeDescriptor
argument_list|()
argument_list|)
return|;
block|}
DECL|method|chooseTarget (int numOfReplicas)
specifier|private
name|DatanodeStorageInfo
index|[]
name|chooseTarget
parameter_list|(
name|int
name|numOfReplicas
parameter_list|)
block|{
return|return
name|chooseTarget
argument_list|(
name|numOfReplicas
argument_list|,
name|dataNodes
index|[
literal|0
index|]
argument_list|)
return|;
block|}
DECL|method|chooseTarget (int numOfReplicas, DatanodeDescriptor writer)
specifier|private
name|DatanodeStorageInfo
index|[]
name|chooseTarget
parameter_list|(
name|int
name|numOfReplicas
parameter_list|,
name|DatanodeDescriptor
name|writer
parameter_list|)
block|{
return|return
name|chooseTarget
argument_list|(
name|numOfReplicas
argument_list|,
name|writer
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|DatanodeStorageInfo
argument_list|>
argument_list|()
argument_list|)
return|;
block|}
DECL|method|chooseTarget (int numOfReplicas, List<DatanodeStorageInfo> chosenNodes)
specifier|private
name|DatanodeStorageInfo
index|[]
name|chooseTarget
parameter_list|(
name|int
name|numOfReplicas
parameter_list|,
name|List
argument_list|<
name|DatanodeStorageInfo
argument_list|>
name|chosenNodes
parameter_list|)
block|{
return|return
name|chooseTarget
argument_list|(
name|numOfReplicas
argument_list|,
name|dataNodes
index|[
literal|0
index|]
argument_list|,
name|chosenNodes
argument_list|)
return|;
block|}
DECL|method|chooseTarget (int numOfReplicas, DatanodeDescriptor writer, List<DatanodeStorageInfo> chosenNodes)
specifier|private
name|DatanodeStorageInfo
index|[]
name|chooseTarget
parameter_list|(
name|int
name|numOfReplicas
parameter_list|,
name|DatanodeDescriptor
name|writer
parameter_list|,
name|List
argument_list|<
name|DatanodeStorageInfo
argument_list|>
name|chosenNodes
parameter_list|)
block|{
return|return
name|chooseTarget
argument_list|(
name|numOfReplicas
argument_list|,
name|writer
argument_list|,
name|chosenNodes
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|chooseTarget ( int numOfReplicas, DatanodeDescriptor writer, List<DatanodeStorageInfo> chosenNodes, Set<Node> excludedNodes)
specifier|private
name|DatanodeStorageInfo
index|[]
name|chooseTarget
parameter_list|(
name|int
name|numOfReplicas
parameter_list|,
name|DatanodeDescriptor
name|writer
parameter_list|,
name|List
argument_list|<
name|DatanodeStorageInfo
argument_list|>
name|chosenNodes
parameter_list|,
name|Set
argument_list|<
name|Node
argument_list|>
name|excludedNodes
parameter_list|)
block|{
return|return
name|replicator
operator|.
name|chooseTarget
argument_list|(
name|filename
argument_list|,
name|numOfReplicas
argument_list|,
name|writer
argument_list|,
name|chosenNodes
argument_list|,
literal|false
argument_list|,
name|excludedNodes
argument_list|,
name|BLOCK_SIZE
argument_list|,
name|StorageType
operator|.
name|DEFAULT
argument_list|)
return|;
block|}
comment|/**    * In this testcase, client is dataNodes[0]. So the 1st replica should be    * placed on dataNodes[0], the 2nd replica should be placed on     * different rack and third should be placed on different node (and node group)    * of rack chosen for 2nd node.    * The only excpetion is when the<i>numOfReplicas</i> is 2,     * the 1st is on dataNodes[0] and the 2nd is on a different rack.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testChooseTarget1 ()
specifier|public
name|void
name|testChooseTarget1
parameter_list|()
throws|throws
name|Exception
block|{
name|updateHeartbeatWithUsage
argument_list|(
name|dataNodes
index|[
literal|0
index|]
argument_list|,
literal|2
operator|*
name|HdfsConstants
operator|.
name|MIN_BLOCKS_FOR_WRITE
operator|*
name|BLOCK_SIZE
argument_list|,
literal|0L
argument_list|,
name|HdfsConstants
operator|.
name|MIN_BLOCKS_FOR_WRITE
operator|*
name|BLOCK_SIZE
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// overloaded
name|DatanodeStorageInfo
index|[]
name|targets
decl_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|storages
index|[
literal|0
index|]
argument_list|,
name|targets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|storages
index|[
literal|0
index|]
argument_list|,
name|targets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|0
index|]
argument_list|,
name|targets
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|storages
index|[
literal|0
index|]
argument_list|,
name|targets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|0
index|]
argument_list|,
name|targets
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|1
index|]
argument_list|,
name|targets
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isOnSameNodeGroup
argument_list|(
name|targets
index|[
literal|1
index|]
argument_list|,
name|targets
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|storages
index|[
literal|0
index|]
argument_list|,
name|targets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|1
index|]
argument_list|,
name|targets
index|[
literal|2
index|]
argument_list|)
operator|||
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|2
index|]
argument_list|,
name|targets
index|[
literal|3
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|0
index|]
argument_list|,
name|targets
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure no more than one replicas are on the same nodegroup
name|verifyNoTwoTargetsOnSameNodeGroup
argument_list|(
name|targets
argument_list|)
expr_stmt|;
name|updateHeartbeatWithUsage
argument_list|(
name|dataNodes
index|[
literal|0
index|]
argument_list|,
literal|2
operator|*
name|HdfsConstants
operator|.
name|MIN_BLOCKS_FOR_WRITE
operator|*
name|BLOCK_SIZE
argument_list|,
literal|0L
argument_list|,
name|HdfsConstants
operator|.
name|MIN_BLOCKS_FOR_WRITE
operator|*
name|BLOCK_SIZE
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyNoTwoTargetsOnSameNodeGroup (DatanodeStorageInfo[] targets)
specifier|private
name|void
name|verifyNoTwoTargetsOnSameNodeGroup
parameter_list|(
name|DatanodeStorageInfo
index|[]
name|targets
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|nodeGroupSet
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|DatanodeStorageInfo
name|target
range|:
name|targets
control|)
block|{
name|nodeGroupSet
operator|.
name|add
argument_list|(
name|target
operator|.
name|getDatanodeDescriptor
argument_list|()
operator|.
name|getNetworkLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|nodeGroupSet
operator|.
name|size
argument_list|()
argument_list|,
name|targets
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**    * In this testcase, client is dataNodes[0], but the dataNodes[1] is    * not allowed to be chosen. So the 1st replica should be    * placed on dataNodes[0], the 2nd replica should be placed on a different    * rack, the 3rd should be on same rack as the 2nd replica but in different    * node group, and the rest should be placed on a third rack.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testChooseTarget2 ()
specifier|public
name|void
name|testChooseTarget2
parameter_list|()
throws|throws
name|Exception
block|{
name|DatanodeStorageInfo
index|[]
name|targets
decl_stmt|;
name|BlockPlacementPolicyDefault
name|repl
init|=
operator|(
name|BlockPlacementPolicyDefault
operator|)
name|replicator
decl_stmt|;
name|List
argument_list|<
name|DatanodeStorageInfo
argument_list|>
name|chosenNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|DatanodeStorageInfo
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Node
argument_list|>
name|excludedNodes
init|=
operator|new
name|HashSet
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
name|excludedNodes
operator|.
name|add
argument_list|(
name|dataNodes
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|targets
operator|=
name|repl
operator|.
name|chooseTarget
argument_list|(
name|filename
argument_list|,
literal|4
argument_list|,
name|dataNodes
index|[
literal|0
index|]
argument_list|,
name|chosenNodes
argument_list|,
literal|false
argument_list|,
name|excludedNodes
argument_list|,
name|BLOCK_SIZE
argument_list|,
name|StorageType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|storages
index|[
literal|0
index|]
argument_list|,
name|targets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cluster
operator|.
name|isNodeGroupAware
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make sure no replicas are on the same nodegroup
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|assertFalse
argument_list|(
name|isOnSameNodeGroup
argument_list|(
name|targets
index|[
literal|0
index|]
argument_list|,
name|targets
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|1
index|]
argument_list|,
name|targets
index|[
literal|2
index|]
argument_list|)
operator|||
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|2
index|]
argument_list|,
name|targets
index|[
literal|3
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|1
index|]
argument_list|,
name|targets
index|[
literal|3
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|excludedNodes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|chosenNodes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|excludedNodes
operator|.
name|add
argument_list|(
name|dataNodes
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|chosenNodes
operator|.
name|add
argument_list|(
name|storages
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|targets
operator|=
name|repl
operator|.
name|chooseTarget
argument_list|(
name|filename
argument_list|,
literal|1
argument_list|,
name|dataNodes
index|[
literal|0
index|]
argument_list|,
name|chosenNodes
argument_list|,
literal|true
argument_list|,
name|excludedNodes
argument_list|,
name|BLOCK_SIZE
argument_list|,
name|StorageType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"targets="
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|targets
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|targets
operator|.
name|length
argument_list|)
expr_stmt|;
comment|//make sure that the chosen node is in the target.
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|targets
operator|.
name|length
operator|&&
operator|!
name|storages
index|[
literal|2
index|]
operator|.
name|equals
argument_list|(
name|targets
index|[
name|i
index|]
argument_list|)
condition|;
name|i
operator|++
control|)
empty_stmt|;
name|assertTrue
argument_list|(
name|i
operator|<
name|targets
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**    * In this testcase, client is dataNodes[0], but dataNodes[0] is not qualified    * to be chosen. So the 1st replica should be placed on dataNodes[1],     * the 2nd replica should be placed on a different rack,    * the 3rd replica should be placed on the same rack as the 2nd replica but in different nodegroup,    * and the rest should be placed on the third rack.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testChooseTarget3 ()
specifier|public
name|void
name|testChooseTarget3
parameter_list|()
throws|throws
name|Exception
block|{
comment|// make data node 0 to be not qualified to choose
name|updateHeartbeatWithUsage
argument_list|(
name|dataNodes
index|[
literal|0
index|]
argument_list|,
literal|2
operator|*
name|HdfsConstants
operator|.
name|MIN_BLOCKS_FOR_WRITE
operator|*
name|BLOCK_SIZE
argument_list|,
literal|0L
argument_list|,
operator|(
name|HdfsConstants
operator|.
name|MIN_BLOCKS_FOR_WRITE
operator|-
literal|1
operator|)
operator|*
name|BLOCK_SIZE
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// no space
name|DatanodeStorageInfo
index|[]
name|targets
decl_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|storages
index|[
literal|1
index|]
argument_list|,
name|targets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|storages
index|[
literal|1
index|]
argument_list|,
name|targets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|0
index|]
argument_list|,
name|targets
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|storages
index|[
literal|1
index|]
argument_list|,
name|targets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|1
index|]
argument_list|,
name|targets
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|0
index|]
argument_list|,
name|targets
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|storages
index|[
literal|1
index|]
argument_list|,
name|targets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cluster
operator|.
name|isNodeGroupAware
argument_list|()
argument_list|)
expr_stmt|;
name|verifyNoTwoTargetsOnSameNodeGroup
argument_list|(
name|targets
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|1
index|]
argument_list|,
name|targets
index|[
literal|2
index|]
argument_list|)
operator|||
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|2
index|]
argument_list|,
name|targets
index|[
literal|3
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|updateHeartbeatWithUsage
argument_list|(
name|dataNodes
index|[
literal|0
index|]
argument_list|,
literal|2
operator|*
name|HdfsConstants
operator|.
name|MIN_BLOCKS_FOR_WRITE
operator|*
name|BLOCK_SIZE
argument_list|,
literal|0L
argument_list|,
name|HdfsConstants
operator|.
name|MIN_BLOCKS_FOR_WRITE
operator|*
name|BLOCK_SIZE
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * In this testcase, client is dataNodes[0], but none of the nodes on rack 1    * is qualified to be chosen. So the 1st replica should be placed on either    * rack 2 or rack 3.     * the 2nd replica should be placed on a different rack,    * the 3rd replica should be placed on the same rack as the 1st replica, but     * in different node group.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testChooseTarget4 ()
specifier|public
name|void
name|testChooseTarget4
parameter_list|()
throws|throws
name|Exception
block|{
comment|// make data node 0-2 to be not qualified to choose: not enough disk space
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|updateHeartbeatWithUsage
argument_list|(
name|dataNodes
index|[
name|i
index|]
argument_list|,
literal|2
operator|*
name|HdfsConstants
operator|.
name|MIN_BLOCKS_FOR_WRITE
operator|*
name|BLOCK_SIZE
argument_list|,
literal|0L
argument_list|,
operator|(
name|HdfsConstants
operator|.
name|MIN_BLOCKS_FOR_WRITE
operator|-
literal|1
operator|)
operator|*
name|BLOCK_SIZE
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|DatanodeStorageInfo
index|[]
name|targets
decl_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isOnSameRack
argument_list|(
name|dataNodes
index|[
literal|0
index|]
argument_list|,
name|targets
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isOnSameRack
argument_list|(
name|dataNodes
index|[
literal|0
index|]
argument_list|,
name|targets
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|0
index|]
argument_list|,
name|targets
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|3
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|assertFalse
argument_list|(
name|isOnSameRack
argument_list|(
name|dataNodes
index|[
literal|0
index|]
argument_list|,
name|targets
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|verifyNoTwoTargetsOnSameNodeGroup
argument_list|(
name|targets
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|0
index|]
argument_list|,
name|targets
index|[
literal|1
index|]
argument_list|)
operator|||
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|1
index|]
argument_list|,
name|targets
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|0
index|]
argument_list|,
name|targets
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * In this testcase, client is is a node outside of file system.    * So the 1st replica can be placed on any node.     * the 2nd replica should be placed on a different rack,    * the 3rd replica should be placed on the same rack as the 2nd replica,    * @throws Exception    */
annotation|@
name|Test
DECL|method|testChooseTarget5 ()
specifier|public
name|void
name|testChooseTarget5
parameter_list|()
throws|throws
name|Exception
block|{
name|setupDataNodeCapacity
argument_list|()
expr_stmt|;
name|DatanodeStorageInfo
index|[]
name|targets
decl_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|0
argument_list|,
name|NODE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|1
argument_list|,
name|NODE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|2
argument_list|,
name|NODE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|0
index|]
argument_list|,
name|targets
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|3
argument_list|,
name|NODE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|1
index|]
argument_list|,
name|targets
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|0
index|]
argument_list|,
name|targets
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|verifyNoTwoTargetsOnSameNodeGroup
argument_list|(
name|targets
argument_list|)
expr_stmt|;
block|}
comment|/**    * This testcase tests re-replication, when dataNodes[0] is already chosen.    * So the 1st replica can be placed on random rack.     * the 2nd replica should be placed on different node and nodegroup by same rack as     * the 1st replica. The 3rd replica can be placed randomly.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testRereplicate1 ()
specifier|public
name|void
name|testRereplicate1
parameter_list|()
throws|throws
name|Exception
block|{
name|setupDataNodeCapacity
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|DatanodeStorageInfo
argument_list|>
name|chosenNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|DatanodeStorageInfo
argument_list|>
argument_list|()
decl_stmt|;
name|chosenNodes
operator|.
name|add
argument_list|(
name|storages
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|DatanodeStorageInfo
index|[]
name|targets
decl_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|0
argument_list|,
name|chosenNodes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|1
argument_list|,
name|chosenNodes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isOnSameRack
argument_list|(
name|dataNodes
index|[
literal|0
index|]
argument_list|,
name|targets
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|2
argument_list|,
name|chosenNodes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isOnSameRack
argument_list|(
name|dataNodes
index|[
literal|0
index|]
argument_list|,
name|targets
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|0
index|]
argument_list|,
name|targets
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|3
argument_list|,
name|chosenNodes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isOnSameRack
argument_list|(
name|dataNodes
index|[
literal|0
index|]
argument_list|,
name|targets
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isOnSameNodeGroup
argument_list|(
name|dataNodes
index|[
literal|0
index|]
argument_list|,
name|targets
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|0
index|]
argument_list|,
name|targets
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * This testcase tests re-replication,     * when dataNodes[0] and dataNodes[1] are already chosen.    * So the 1st replica should be placed on a different rack of rack 1.     * the rest replicas can be placed randomly,    * @throws Exception    */
annotation|@
name|Test
DECL|method|testRereplicate2 ()
specifier|public
name|void
name|testRereplicate2
parameter_list|()
throws|throws
name|Exception
block|{
name|setupDataNodeCapacity
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|DatanodeStorageInfo
argument_list|>
name|chosenNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|DatanodeStorageInfo
argument_list|>
argument_list|()
decl_stmt|;
name|chosenNodes
operator|.
name|add
argument_list|(
name|storages
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|chosenNodes
operator|.
name|add
argument_list|(
name|storages
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|DatanodeStorageInfo
index|[]
name|targets
decl_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|0
argument_list|,
name|chosenNodes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|1
argument_list|,
name|chosenNodes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isOnSameRack
argument_list|(
name|dataNodes
index|[
literal|0
index|]
argument_list|,
name|targets
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|2
argument_list|,
name|chosenNodes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isOnSameRack
argument_list|(
name|dataNodes
index|[
literal|0
index|]
argument_list|,
name|targets
index|[
literal|0
index|]
argument_list|)
operator|&&
name|isOnSameRack
argument_list|(
name|dataNodes
index|[
literal|0
index|]
argument_list|,
name|targets
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * This testcase tests re-replication,     * when dataNodes[0] and dataNodes[3] are already chosen.    * So the 1st replica should be placed on the rack that the writer resides.     * the rest replicas can be placed randomly,    * @throws Exception    */
annotation|@
name|Test
DECL|method|testRereplicate3 ()
specifier|public
name|void
name|testRereplicate3
parameter_list|()
throws|throws
name|Exception
block|{
name|setupDataNodeCapacity
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|DatanodeStorageInfo
argument_list|>
name|chosenNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|DatanodeStorageInfo
argument_list|>
argument_list|()
decl_stmt|;
name|chosenNodes
operator|.
name|add
argument_list|(
name|storages
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|chosenNodes
operator|.
name|add
argument_list|(
name|storages
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|DatanodeStorageInfo
index|[]
name|targets
decl_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|0
argument_list|,
name|chosenNodes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|1
argument_list|,
name|chosenNodes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isOnSameRack
argument_list|(
name|dataNodes
index|[
literal|0
index|]
argument_list|,
name|targets
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isOnSameRack
argument_list|(
name|dataNodes
index|[
literal|3
index|]
argument_list|,
name|targets
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|1
argument_list|,
name|dataNodes
index|[
literal|3
index|]
argument_list|,
name|chosenNodes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isOnSameRack
argument_list|(
name|dataNodes
index|[
literal|3
index|]
argument_list|,
name|targets
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isOnSameNodeGroup
argument_list|(
name|dataNodes
index|[
literal|3
index|]
argument_list|,
name|targets
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isOnSameRack
argument_list|(
name|dataNodes
index|[
literal|0
index|]
argument_list|,
name|targets
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|2
argument_list|,
name|chosenNodes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isOnSameRack
argument_list|(
name|dataNodes
index|[
literal|0
index|]
argument_list|,
name|targets
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isOnSameNodeGroup
argument_list|(
name|dataNodes
index|[
literal|0
index|]
argument_list|,
name|targets
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|2
argument_list|,
name|dataNodes
index|[
literal|3
index|]
argument_list|,
name|chosenNodes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isOnSameRack
argument_list|(
name|dataNodes
index|[
literal|3
index|]
argument_list|,
name|targets
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test for the chooseReplicaToDelete are processed based on     * block locality and free space    */
annotation|@
name|Test
DECL|method|testChooseReplicaToDelete ()
specifier|public
name|void
name|testChooseReplicaToDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|replicaNodeList
init|=
operator|new
name|ArrayList
argument_list|<
name|DatanodeDescriptor
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
argument_list|>
name|rackMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|dataNodes
index|[
literal|0
index|]
operator|.
name|setRemaining
argument_list|(
literal|4
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|replicaNodeList
operator|.
name|add
argument_list|(
name|dataNodes
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|dataNodes
index|[
literal|1
index|]
operator|.
name|setRemaining
argument_list|(
literal|3
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|replicaNodeList
operator|.
name|add
argument_list|(
name|dataNodes
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|dataNodes
index|[
literal|2
index|]
operator|.
name|setRemaining
argument_list|(
literal|2
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|replicaNodeList
operator|.
name|add
argument_list|(
name|dataNodes
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|dataNodes
index|[
literal|5
index|]
operator|.
name|setRemaining
argument_list|(
literal|1
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|replicaNodeList
operator|.
name|add
argument_list|(
name|dataNodes
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|first
init|=
operator|new
name|ArrayList
argument_list|<
name|DatanodeDescriptor
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|second
init|=
operator|new
name|ArrayList
argument_list|<
name|DatanodeDescriptor
argument_list|>
argument_list|()
decl_stmt|;
name|replicator
operator|.
name|splitNodesWithRack
argument_list|(
name|replicaNodeList
argument_list|,
name|rackMap
argument_list|,
name|first
argument_list|,
name|second
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|first
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|second
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|DatanodeDescriptor
name|chosenNode
init|=
name|replicator
operator|.
name|chooseReplicaToDelete
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
name|first
argument_list|,
name|second
argument_list|)
decl_stmt|;
comment|// Within first set {dataNodes[0], dataNodes[1], dataNodes[2]},
comment|// dataNodes[0] and dataNodes[1] are in the same nodegroup,
comment|// but dataNodes[1] is chosen as less free space
name|assertEquals
argument_list|(
name|chosenNode
argument_list|,
name|dataNodes
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|replicator
operator|.
name|adjustSetsWithChosenReplica
argument_list|(
name|rackMap
argument_list|,
name|first
argument_list|,
name|second
argument_list|,
name|chosenNode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|first
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|second
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Within first set {dataNodes[0], dataNodes[2]}, dataNodes[2] is chosen
comment|// as less free space
name|chosenNode
operator|=
name|replicator
operator|.
name|chooseReplicaToDelete
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|,
name|first
argument_list|,
name|second
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|chosenNode
argument_list|,
name|dataNodes
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|replicator
operator|.
name|adjustSetsWithChosenReplica
argument_list|(
name|rackMap
argument_list|,
name|first
argument_list|,
name|second
argument_list|,
name|chosenNode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|first
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|second
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Within second set, dataNodes[5] with less free space
name|chosenNode
operator|=
name|replicator
operator|.
name|chooseReplicaToDelete
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
name|first
argument_list|,
name|second
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|chosenNode
argument_list|,
name|dataNodes
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test replica placement policy in case of boundary topology.    * Rack 2 has only 1 node group& can't be placed with two replicas    * The 1st replica will be placed on writer.    * The 2nd replica should be placed on a different rack     * The 3rd replica should be placed on the same rack with writer, but on a     * different node group.    */
annotation|@
name|Test
DECL|method|testChooseTargetsOnBoundaryTopology ()
specifier|public
name|void
name|testChooseTargetsOnBoundaryTopology
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_OF_DATANODES
condition|;
name|i
operator|++
control|)
block|{
name|cluster
operator|.
name|remove
argument_list|(
name|dataNodes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_OF_DATANODES_BOUNDARY
condition|;
name|i
operator|++
control|)
block|{
name|cluster
operator|.
name|add
argument_list|(
name|dataNodesInBoundaryCase
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_OF_DATANODES_BOUNDARY
condition|;
name|i
operator|++
control|)
block|{
name|updateHeartbeatWithUsage
argument_list|(
name|dataNodes
index|[
literal|0
index|]
argument_list|,
literal|2
operator|*
name|HdfsConstants
operator|.
name|MIN_BLOCKS_FOR_WRITE
operator|*
name|BLOCK_SIZE
argument_list|,
literal|0L
argument_list|,
operator|(
name|HdfsConstants
operator|.
name|MIN_BLOCKS_FOR_WRITE
operator|-
literal|1
operator|)
operator|*
name|BLOCK_SIZE
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|updateHeartbeatWithUsage
argument_list|(
name|dataNodesInBoundaryCase
index|[
name|i
index|]
argument_list|,
literal|2
operator|*
name|HdfsConstants
operator|.
name|MIN_BLOCKS_FOR_WRITE
operator|*
name|BLOCK_SIZE
argument_list|,
literal|0L
argument_list|,
literal|2
operator|*
name|HdfsConstants
operator|.
name|MIN_BLOCKS_FOR_WRITE
operator|*
name|BLOCK_SIZE
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|DatanodeStorageInfo
index|[]
name|targets
decl_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|0
argument_list|,
name|dataNodesInBoundaryCase
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|1
argument_list|,
name|dataNodesInBoundaryCase
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|2
argument_list|,
name|dataNodesInBoundaryCase
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|0
index|]
argument_list|,
name|targets
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|3
argument_list|,
name|dataNodesInBoundaryCase
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checkTargetsOnDifferentNodeGroup
argument_list|(
name|targets
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test re-replication policy in boundary case.    * Rack 2 has only one node group& the node in this node group is chosen    * Rack 1 has two nodegroups& one of them is chosen.    * Replica policy should choose the node from node group of Rack1 but not the    * same nodegroup with chosen nodes.    */
annotation|@
name|Test
DECL|method|testRereplicateOnBoundaryTopology ()
specifier|public
name|void
name|testRereplicateOnBoundaryTopology
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_OF_DATANODES_BOUNDARY
condition|;
name|i
operator|++
control|)
block|{
name|updateHeartbeatWithUsage
argument_list|(
name|dataNodesInBoundaryCase
index|[
name|i
index|]
argument_list|,
literal|2
operator|*
name|HdfsConstants
operator|.
name|MIN_BLOCKS_FOR_WRITE
operator|*
name|BLOCK_SIZE
argument_list|,
literal|0L
argument_list|,
literal|2
operator|*
name|HdfsConstants
operator|.
name|MIN_BLOCKS_FOR_WRITE
operator|*
name|BLOCK_SIZE
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|DatanodeStorageInfo
argument_list|>
name|chosenNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|DatanodeStorageInfo
argument_list|>
argument_list|()
decl_stmt|;
name|chosenNodes
operator|.
name|add
argument_list|(
name|storagesInBoundaryCase
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|chosenNodes
operator|.
name|add
argument_list|(
name|storagesInBoundaryCase
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|DatanodeStorageInfo
index|[]
name|targets
decl_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|1
argument_list|,
name|dataNodesInBoundaryCase
index|[
literal|0
index|]
argument_list|,
name|chosenNodes
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isOnSameNodeGroup
argument_list|(
name|dataNodesInBoundaryCase
index|[
literal|0
index|]
argument_list|,
name|targets
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isOnSameNodeGroup
argument_list|(
name|dataNodesInBoundaryCase
index|[
literal|5
index|]
argument_list|,
name|targets
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checkTargetsOnDifferentNodeGroup
argument_list|(
name|targets
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test replica placement policy in case of targets more than number of     * NodeGroups.    * The 12-nodes cluster only has 6 NodeGroups, but in some cases, like:     * placing submitted job file, there is requirement to choose more (10)     * targets for placing replica. We should test it can return 6 targets.    */
annotation|@
name|Test
DECL|method|testChooseMoreTargetsThanNodeGroups ()
specifier|public
name|void
name|testChooseMoreTargetsThanNodeGroups
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_OF_DATANODES
condition|;
name|i
operator|++
control|)
block|{
name|cluster
operator|.
name|remove
argument_list|(
name|dataNodes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_OF_DATANODES_BOUNDARY
condition|;
name|i
operator|++
control|)
block|{
name|DatanodeDescriptor
name|node
init|=
name|dataNodesInBoundaryCase
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|cluster
operator|.
name|contains
argument_list|(
name|node
argument_list|)
condition|)
block|{
name|cluster
operator|.
name|remove
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_OF_DATANODES_MORE_TARGETS
condition|;
name|i
operator|++
control|)
block|{
name|cluster
operator|.
name|add
argument_list|(
name|dataNodesInMoreTargetsCase
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_OF_DATANODES_MORE_TARGETS
condition|;
name|i
operator|++
control|)
block|{
name|updateHeartbeatWithUsage
argument_list|(
name|dataNodesInMoreTargetsCase
index|[
name|i
index|]
argument_list|,
literal|2
operator|*
name|HdfsConstants
operator|.
name|MIN_BLOCKS_FOR_WRITE
operator|*
name|BLOCK_SIZE
argument_list|,
literal|0L
argument_list|,
literal|2
operator|*
name|HdfsConstants
operator|.
name|MIN_BLOCKS_FOR_WRITE
operator|*
name|BLOCK_SIZE
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|DatanodeStorageInfo
index|[]
name|targets
decl_stmt|;
comment|// Test normal case -- 3 replicas
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|3
argument_list|,
name|dataNodesInMoreTargetsCase
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checkTargetsOnDifferentNodeGroup
argument_list|(
name|targets
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test special case -- replica number over node groups.
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|10
argument_list|,
name|dataNodesInMoreTargetsCase
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checkTargetsOnDifferentNodeGroup
argument_list|(
name|targets
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify it only can find 6 targets for placing replicas.
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|6
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testChooseTargetWithDependencies ()
specifier|public
name|void
name|testChooseTargetWithDependencies
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_OF_DATANODES
condition|;
name|i
operator|++
control|)
block|{
name|cluster
operator|.
name|remove
argument_list|(
name|dataNodes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_OF_DATANODES_MORE_TARGETS
condition|;
name|i
operator|++
control|)
block|{
name|DatanodeDescriptor
name|node
init|=
name|dataNodesInMoreTargetsCase
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|cluster
operator|.
name|contains
argument_list|(
name|node
argument_list|)
condition|)
block|{
name|cluster
operator|.
name|remove
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
name|Host2NodesMap
name|host2DatanodeMap
init|=
name|namenode
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getHost2DatanodeMap
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_OF_DATANODES_FOR_DEPENDENCIES
condition|;
name|i
operator|++
control|)
block|{
name|cluster
operator|.
name|add
argument_list|(
name|dataNodesForDependencies
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|host2DatanodeMap
operator|.
name|add
argument_list|(
name|dataNodesForDependencies
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|//add dependencies (node1<-> node2, and node3<->node4)
name|dataNodesForDependencies
index|[
literal|1
index|]
operator|.
name|addDependentHostName
argument_list|(
name|dataNodesForDependencies
index|[
literal|2
index|]
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
name|dataNodesForDependencies
index|[
literal|2
index|]
operator|.
name|addDependentHostName
argument_list|(
name|dataNodesForDependencies
index|[
literal|1
index|]
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
name|dataNodesForDependencies
index|[
literal|3
index|]
operator|.
name|addDependentHostName
argument_list|(
name|dataNodesForDependencies
index|[
literal|4
index|]
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
name|dataNodesForDependencies
index|[
literal|4
index|]
operator|.
name|addDependentHostName
argument_list|(
name|dataNodesForDependencies
index|[
literal|3
index|]
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
comment|//Update heartbeat
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_OF_DATANODES_FOR_DEPENDENCIES
condition|;
name|i
operator|++
control|)
block|{
name|updateHeartbeatWithUsage
argument_list|(
name|dataNodesForDependencies
index|[
name|i
index|]
argument_list|,
literal|2
operator|*
name|HdfsConstants
operator|.
name|MIN_BLOCKS_FOR_WRITE
operator|*
name|BLOCK_SIZE
argument_list|,
literal|0L
argument_list|,
literal|2
operator|*
name|HdfsConstants
operator|.
name|MIN_BLOCKS_FOR_WRITE
operator|*
name|BLOCK_SIZE
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|DatanodeStorageInfo
argument_list|>
name|chosenNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|DatanodeStorageInfo
argument_list|>
argument_list|()
decl_stmt|;
name|DatanodeStorageInfo
index|[]
name|targets
decl_stmt|;
name|Set
argument_list|<
name|Node
argument_list|>
name|excludedNodes
init|=
operator|new
name|HashSet
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
name|excludedNodes
operator|.
name|add
argument_list|(
name|dataNodesForDependencies
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
comment|//try to select three targets as there are three node groups
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|3
argument_list|,
name|dataNodesForDependencies
index|[
literal|1
index|]
argument_list|,
name|chosenNodes
argument_list|,
name|excludedNodes
argument_list|)
expr_stmt|;
comment|//Even there are three node groups, verify that
comment|//only two targets are selected due to dependencies
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
index|[
literal|0
index|]
argument_list|,
name|storagesForDependencies
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|targets
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
name|storagesForDependencies
index|[
literal|3
index|]
argument_list|)
operator|||
name|targets
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
name|storagesForDependencies
index|[
literal|4
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|//verify that all data nodes are in the excluded list
name|assertEquals
argument_list|(
name|excludedNodes
operator|.
name|size
argument_list|()
argument_list|,
name|NUM_OF_DATANODES_FOR_DEPENDENCIES
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_OF_DATANODES_FOR_DEPENDENCIES
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|excludedNodes
operator|.
name|contains
argument_list|(
name|dataNodesForDependencies
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

