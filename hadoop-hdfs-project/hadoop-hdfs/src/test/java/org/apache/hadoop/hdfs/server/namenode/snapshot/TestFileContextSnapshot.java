begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.snapshot
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshotException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestFileContextSnapshot
specifier|public
class|class
name|TestFileContextSnapshot
block|{
DECL|field|REPLICATION
specifier|private
specifier|static
specifier|final
name|short
name|REPLICATION
init|=
literal|3
decl_stmt|;
DECL|field|BLOCKSIZE
specifier|private
specifier|static
specifier|final
name|int
name|BLOCKSIZE
init|=
literal|1024
decl_stmt|;
DECL|field|SEED
specifier|private
specifier|static
specifier|final
name|long
name|SEED
init|=
literal|0
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|fileContext
specifier|private
name|FileContext
name|fileContext
decl_stmt|;
DECL|field|dfs
specifier|private
name|DistributedFileSystem
name|dfs
decl_stmt|;
DECL|field|snapshotRoot
specifier|private
specifier|final
name|String
name|snapshotRoot
init|=
literal|"/snapshot"
decl_stmt|;
DECL|field|filePath
specifier|private
specifier|final
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|snapshotRoot
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
DECL|field|snapRootPath
specifier|private
name|Path
name|snapRootPath
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|BLOCKSIZE
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|REPLICATION
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fileContext
operator|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|dfs
operator|=
operator|(
name|DistributedFileSystem
operator|)
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|snapRootPath
operator|=
operator|new
name|Path
argument_list|(
name|snapshotRoot
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|snapRootPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testCreateAndDeleteSnapshot ()
specifier|public
name|void
name|testCreateAndDeleteSnapshot
parameter_list|()
throws|throws
name|Exception
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|filePath
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
comment|// disallow snapshot on dir
name|dfs
operator|.
name|disallowSnapshot
argument_list|(
name|snapRootPath
argument_list|)
expr_stmt|;
try|try
block|{
name|fileContext
operator|.
name|createSnapshot
argument_list|(
name|snapRootPath
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SnapshotException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Directory is not a snapshottable directory: "
operator|+
name|snapRootPath
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// allow snapshot on dir
name|dfs
operator|.
name|allowSnapshot
argument_list|(
name|snapRootPath
argument_list|)
expr_stmt|;
name|Path
name|ssPath
init|=
name|fileContext
operator|.
name|createSnapshot
argument_list|(
name|snapRootPath
argument_list|,
literal|"s1"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Failed to create snapshot"
argument_list|,
name|dfs
operator|.
name|exists
argument_list|(
name|ssPath
argument_list|)
argument_list|)
expr_stmt|;
name|fileContext
operator|.
name|deleteSnapshot
argument_list|(
name|snapRootPath
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Failed to delete snapshot"
argument_list|,
name|dfs
operator|.
name|exists
argument_list|(
name|ssPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test FileStatus of snapshot file before/after rename    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testRenameSnapshot ()
specifier|public
name|void
name|testRenameSnapshot
parameter_list|()
throws|throws
name|Exception
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|filePath
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|allowSnapshot
argument_list|(
name|snapRootPath
argument_list|)
expr_stmt|;
comment|// Create snapshot for sub1
name|Path
name|snapPath1
init|=
name|fileContext
operator|.
name|createSnapshot
argument_list|(
name|snapRootPath
argument_list|,
literal|"s1"
argument_list|)
decl_stmt|;
name|Path
name|ssPath
init|=
operator|new
name|Path
argument_list|(
name|snapPath1
argument_list|,
name|filePath
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Failed to create snapshot"
argument_list|,
name|dfs
operator|.
name|exists
argument_list|(
name|ssPath
argument_list|)
argument_list|)
expr_stmt|;
name|FileStatus
name|statusBeforeRename
init|=
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|ssPath
argument_list|)
decl_stmt|;
comment|// Rename the snapshot
name|fileContext
operator|.
name|renameSnapshot
argument_list|(
name|snapRootPath
argument_list|,
literal|"s1"
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
comment|//<sub1>/.snapshot/s1/file1 should no longer exist
name|assertFalse
argument_list|(
literal|"Old snapshot still exists after rename!"
argument_list|,
name|dfs
operator|.
name|exists
argument_list|(
name|ssPath
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|snapshotRoot
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotRoot
argument_list|(
name|snapRootPath
argument_list|,
literal|"s2"
argument_list|)
decl_stmt|;
name|ssPath
operator|=
operator|new
name|Path
argument_list|(
name|snapshotRoot
argument_list|,
name|filePath
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Instead,<sub1>/.snapshot/s2/file1 should exist
name|assertTrue
argument_list|(
literal|"Snapshot doesn't exists!"
argument_list|,
name|dfs
operator|.
name|exists
argument_list|(
name|ssPath
argument_list|)
argument_list|)
expr_stmt|;
name|FileStatus
name|statusAfterRename
init|=
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|ssPath
argument_list|)
decl_stmt|;
comment|// FileStatus of the snapshot should not change except the path
name|assertFalse
argument_list|(
literal|"Filestatus of the snapshot matches"
argument_list|,
name|statusBeforeRename
operator|.
name|equals
argument_list|(
name|statusAfterRename
argument_list|)
argument_list|)
expr_stmt|;
name|statusBeforeRename
operator|.
name|setPath
argument_list|(
name|statusAfterRename
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"FileStatus of the snapshot mismatches!"
argument_list|,
name|statusBeforeRename
operator|.
name|toString
argument_list|()
argument_list|,
name|statusAfterRename
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

