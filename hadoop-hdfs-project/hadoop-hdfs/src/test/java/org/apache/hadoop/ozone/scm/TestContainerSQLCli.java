begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.scm
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|scm
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|MiniOzoneCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|scm
operator|.
name|cli
operator|.
name|SQLCLI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|protocolPB
operator|.
name|StorageContainerLocationProtocolClientSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
operator|.
name|CONTAINER_DB
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * This class tests the CLI that transforms container into SQLite DB files.  */
end_comment

begin_class
DECL|class|TestContainerSQLCli
specifier|public
class|class
name|TestContainerSQLCli
block|{
DECL|field|cli
specifier|private
specifier|static
name|SQLCLI
name|cli
decl_stmt|;
DECL|field|cluster
specifier|private
specifier|static
name|MiniOzoneCluster
name|cluster
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|OzoneConfiguration
name|conf
decl_stmt|;
specifier|private
specifier|static
name|StorageContainerLocationProtocolClientSideTranslatorPB
DECL|field|storageContainerLocationClient
name|storageContainerLocationClient
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|init ()
specifier|public
specifier|static
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|datanodeCapacities
init|=
literal|3
operator|*
name|OzoneConsts
operator|.
name|TB
decl_stmt|;
name|conf
operator|=
operator|new
name|OzoneConfiguration
argument_list|()
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniOzoneCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|storageCapacities
argument_list|(
operator|new
name|long
index|[]
block|{
name|datanodeCapacities
block|,
name|datanodeCapacities
block|}
argument_list|)
operator|.
name|setHandlerType
argument_list|(
literal|"distributed"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|storageContainerLocationClient
operator|=
name|cluster
operator|.
name|createStorageContainerLocationClient
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitForHeartbeatProcessed
argument_list|()
expr_stmt|;
comment|// create two containers to be retrieved later.
name|storageContainerLocationClient
operator|.
name|allocateContainer
argument_list|(
literal|"container0"
argument_list|)
expr_stmt|;
name|storageContainerLocationClient
operator|.
name|allocateContainer
argument_list|(
literal|"container1"
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cli
operator|=
operator|new
name|SQLCLI
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|shutdown ()
specifier|public
specifier|static
name|void
name|shutdown
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
literal|null
argument_list|,
name|storageContainerLocationClient
argument_list|,
name|cluster
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConvertContainerDB ()
specifier|public
name|void
name|testConvertContainerDB
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dbOutPath
init|=
name|cluster
operator|.
name|getDataDirectory
argument_list|()
operator|+
literal|"/out_sql.db"
decl_stmt|;
comment|// TODO : the following will fail due to empty Datanode list, need to fix.
comment|//String dnUUID = cluster.getDataNodes().get(0).getDatanodeUuid();
name|String
name|dbRootPath
init|=
name|conf
operator|.
name|get
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_CONTAINER_METADATA_DIRS
argument_list|)
decl_stmt|;
name|String
name|dbPath
init|=
name|dbRootPath
operator|+
literal|"/"
operator|+
name|CONTAINER_DB
decl_stmt|;
name|String
index|[]
name|args
init|=
block|{
literal|"-p"
block|,
name|dbPath
block|,
literal|"-o"
block|,
name|dbOutPath
block|}
decl_stmt|;
name|Connection
name|conn
decl_stmt|;
name|String
name|sql
decl_stmt|;
name|ResultSet
name|rs
decl_stmt|;
name|cli
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
comment|//verify the sqlite db
comment|// only checks the container names are as expected. Because other fields
comment|// such as datanode UUID are generated randomly each time
name|conn
operator|=
name|connectDB
argument_list|(
name|dbOutPath
argument_list|)
expr_stmt|;
name|sql
operator|=
literal|"SELECT * FROM containerInfo"
expr_stmt|;
name|rs
operator|=
name|executeQuery
argument_list|(
name|conn
argument_list|,
name|sql
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|containerNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|containerNames
operator|.
name|add
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|"containerName"
argument_list|)
argument_list|)
expr_stmt|;
comment|//assertEquals(dnUUID, rs.getString("leaderUUID"));
block|}
name|assertTrue
argument_list|(
name|containerNames
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|&&
name|containerNames
operator|.
name|contains
argument_list|(
literal|"container0"
argument_list|)
operator|&&
name|containerNames
operator|.
name|contains
argument_list|(
literal|"container1"
argument_list|)
argument_list|)
expr_stmt|;
name|sql
operator|=
literal|"SELECT * FROM containerMembers"
expr_stmt|;
name|rs
operator|=
name|executeQuery
argument_list|(
name|conn
argument_list|,
name|sql
argument_list|)
expr_stmt|;
name|containerNames
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|containerNames
operator|.
name|add
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|"containerName"
argument_list|)
argument_list|)
expr_stmt|;
comment|//assertEquals(dnUUID, rs.getString("datanodeUUID"));
block|}
name|assertTrue
argument_list|(
name|containerNames
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|&&
name|containerNames
operator|.
name|contains
argument_list|(
literal|"container0"
argument_list|)
operator|&&
name|containerNames
operator|.
name|contains
argument_list|(
literal|"container1"
argument_list|)
argument_list|)
expr_stmt|;
name|sql
operator|=
literal|"SELECT * FROM datanodeInfo"
expr_stmt|;
name|rs
operator|=
name|executeQuery
argument_list|(
name|conn
argument_list|,
name|sql
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
literal|"127.0.0.1"
argument_list|,
name|rs
operator|.
name|getString
argument_list|(
literal|"ipAddr"
argument_list|)
argument_list|)
expr_stmt|;
comment|//assertEquals(dnUUID, rs.getString("datanodeUUID"));
name|count
operator|+=
literal|1
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|Files
operator|.
name|delete
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|dbOutPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|executeQuery (Connection conn, String sql)
specifier|private
name|ResultSet
name|executeQuery
parameter_list|(
name|Connection
name|conn
parameter_list|,
name|String
name|sql
parameter_list|)
throws|throws
name|SQLException
block|{
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
decl_stmt|;
return|return
name|stmt
operator|.
name|executeQuery
argument_list|(
name|sql
argument_list|)
return|;
block|}
DECL|method|connectDB (String dbPath)
specifier|private
name|Connection
name|connectDB
parameter_list|(
name|String
name|dbPath
parameter_list|)
throws|throws
name|Exception
block|{
name|Class
operator|.
name|forName
argument_list|(
literal|"org.sqlite.JDBC"
argument_list|)
expr_stmt|;
name|String
name|connectPath
init|=
name|String
operator|.
name|format
argument_list|(
literal|"jdbc:sqlite:%s"
argument_list|,
name|dbPath
argument_list|)
decl_stmt|;
return|return
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|connectPath
argument_list|)
return|;
block|}
block|}
end_class

end_unit

