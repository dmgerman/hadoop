begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
operator|.
name|CREATE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContextTestHelper
operator|.
name|getDefaultBlockSize
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContextTestHelper
operator|.
name|getFileData
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|RandomStringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|JavaKeyStoreProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProvider
operator|.
name|KeyVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProviderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestHDFSEncryption
specifier|public
class|class
name|TestHDFSEncryption
block|{
DECL|field|cluster
specifier|private
specifier|static
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|defaultWorkingDirectory
specifier|private
specifier|static
name|Path
name|defaultWorkingDirectory
decl_stmt|;
DECL|field|CONF
specifier|private
specifier|static
specifier|final
name|HdfsConfiguration
name|CONF
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
DECL|field|fc
specifier|private
specifier|static
name|FileContext
name|fc
decl_stmt|;
DECL|field|localFsRootPath
specifier|private
name|Path
name|localFsRootPath
decl_stmt|;
DECL|field|src1
specifier|private
name|Path
name|src1
decl_stmt|;
comment|/* The KeyProvider, if any. */
DECL|field|provider
specifier|private
specifier|static
name|KeyProvider
name|provider
init|=
literal|null
decl_stmt|;
DECL|field|tmpDir
specifier|private
specifier|static
name|File
name|tmpDir
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|clusterSetupAtBegining ()
specifier|public
specifier|static
name|void
name|clusterSetupAtBegining
parameter_list|()
throws|throws
name|IOException
throws|,
name|LoginException
throws|,
name|URISyntaxException
block|{
name|tmpDir
operator|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"target"
argument_list|)
argument_list|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
expr_stmt|;
name|tmpDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|CONF
operator|.
name|set
argument_list|(
name|KeyProviderFactory
operator|.
name|KEY_PROVIDER_PATH
argument_list|,
name|JavaKeyStoreProvider
operator|.
name|SCHEME_NAME
operator|+
literal|"://file"
operator|+
name|tmpDir
operator|+
literal|"/test.jks"
argument_list|)
expr_stmt|;
name|initializeKeyProvider
argument_list|(
name|CONF
argument_list|)
expr_stmt|;
try|try
block|{
name|createOneKey
argument_list|()
expr_stmt|;
name|KeyVersion
name|blort
init|=
name|provider
operator|.
name|getCurrentKey
argument_list|(
literal|"blort"
argument_list|)
decl_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|CONF
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitClusterUp
argument_list|()
expr_stmt|;
name|URI
name|uri0
init|=
name|cluster
operator|.
name|getURI
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|fc
operator|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|uri0
argument_list|,
name|CONF
argument_list|)
expr_stmt|;
name|defaultWorkingDirectory
operator|=
name|fc
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/user/"
operator|+
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fc
operator|.
name|mkdir
argument_list|(
name|defaultWorkingDirectory
argument_list|,
name|FileContext
operator|.
name|DEFAULT_PERM
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|initializeKeyProvider (final Configuration conf)
specifier|private
specifier|static
name|void
name|initializeKeyProvider
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|KeyProvider
argument_list|>
name|providers
init|=
name|KeyProviderFactory
operator|.
name|getProviders
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|providers
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|providers
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|providers
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
specifier|final
name|String
name|err
init|=
literal|"Multiple KeyProviders found. Only one is permitted."
decl_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|err
argument_list|)
throw|;
block|}
name|provider
operator|=
name|providers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|provider
operator|.
name|isTransient
argument_list|()
condition|)
block|{
specifier|final
name|String
name|err
init|=
literal|"A KeyProvider was found but it is a transient provider."
decl_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|err
argument_list|)
throw|;
block|}
block|}
DECL|method|createOneKey ()
specifier|private
specifier|static
name|void
name|createOneKey
parameter_list|()
throws|throws
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
throws|,
name|IOException
block|{
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProvider
operator|.
name|Options
name|options
init|=
name|KeyProvider
operator|.
name|options
argument_list|(
name|CONF
argument_list|)
decl_stmt|;
name|provider
operator|.
name|createKey
argument_list|(
literal|"blort"
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|provider
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|ClusterShutdownAtEnd ()
specifier|public
specifier|static
name|void
name|ClusterShutdownAtEnd
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|testBuildData
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"build/test/data"
argument_list|)
argument_list|,
name|RandomStringUtils
operator|.
name|randomAlphanumeric
argument_list|(
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|rootPath
init|=
operator|new
name|Path
argument_list|(
name|testBuildData
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"root-uri"
argument_list|)
decl_stmt|;
name|localFsRootPath
operator|=
name|rootPath
operator|.
name|makeQualified
argument_list|(
name|LocalFileSystem
operator|.
name|NAME
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fc
operator|.
name|mkdir
argument_list|(
name|getTestRootPath
argument_list|(
name|fc
argument_list|,
literal|"test"
argument_list|)
argument_list|,
name|FileContext
operator|.
name|DEFAULT_PERM
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|src1
operator|=
name|getTestRootPath
argument_list|(
name|fc
argument_list|,
literal|"testfile"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|boolean
name|del
init|=
name|fc
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|fileContextTestHelper
operator|.
name|getAbsoluteTestRootPath
argument_list|(
name|fc
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"test"
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|del
argument_list|)
expr_stmt|;
name|fc
operator|.
name|delete
argument_list|(
name|localFsRootPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|field|fileContextTestHelper
specifier|protected
specifier|final
name|FileContextTestHelper
name|fileContextTestHelper
init|=
name|createFileContextHelper
argument_list|()
decl_stmt|;
DECL|method|createFileContextHelper ()
specifier|protected
name|FileContextTestHelper
name|createFileContextHelper
parameter_list|()
block|{
return|return
operator|new
name|FileContextTestHelper
argument_list|()
return|;
block|}
DECL|method|getDefaultWorkingDirectory ()
specifier|protected
name|Path
name|getDefaultWorkingDirectory
parameter_list|()
block|{
return|return
name|defaultWorkingDirectory
return|;
block|}
DECL|method|getTestRootPath (FileContext fc, String path)
specifier|private
name|Path
name|getTestRootPath
parameter_list|(
name|FileContext
name|fc
parameter_list|,
name|String
name|path
parameter_list|)
block|{
return|return
name|fileContextTestHelper
operator|.
name|getTestRootPath
argument_list|(
name|fc
argument_list|,
name|path
argument_list|)
return|;
block|}
DECL|method|unwrapException (IOException e)
specifier|protected
name|IOException
name|unwrapException
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|RemoteException
condition|)
block|{
return|return
operator|(
operator|(
name|RemoteException
operator|)
name|e
operator|)
operator|.
name|unwrapRemoteException
argument_list|()
return|;
block|}
return|return
name|e
return|;
block|}
DECL|field|NUM_BLOCKS
specifier|private
specifier|static
specifier|final
name|int
name|NUM_BLOCKS
init|=
literal|3
decl_stmt|;
DECL|field|data
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|data
init|=
name|getFileData
argument_list|(
name|NUM_BLOCKS
argument_list|,
name|getDefaultBlockSize
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|writeSomeData ()
specifier|private
name|void
name|writeSomeData
parameter_list|()
throws|throws
name|Exception
block|{
name|writeSomeData
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|writeSomeData (boolean doHFlush, boolean doHSync)
specifier|private
name|void
name|writeSomeData
parameter_list|(
name|boolean
name|doHFlush
parameter_list|,
name|boolean
name|doHSync
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|FSDataOutputStream
name|out
init|=
name|fc
operator|.
name|create
argument_list|(
name|src1
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CREATE
argument_list|)
argument_list|,
name|Options
operator|.
name|CreateOpts
operator|.
name|createParent
argument_list|()
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|doHFlush
condition|)
block|{
name|out
operator|.
name|hflush
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|doHSync
condition|)
block|{
name|out
operator|.
name|hsync
argument_list|()
expr_stmt|;
block|}
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|writeAndVerify (boolean doHFlush, boolean doHSync)
specifier|private
name|void
name|writeAndVerify
parameter_list|(
name|boolean
name|doHFlush
parameter_list|,
name|boolean
name|doHSync
parameter_list|)
throws|throws
name|Exception
block|{
name|writeSomeData
argument_list|(
name|doHFlush
argument_list|,
name|doHSync
argument_list|)
expr_stmt|;
specifier|final
name|FSDataInputStream
name|in
init|=
name|fc
operator|.
name|open
argument_list|(
name|src1
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|byte
index|[]
name|readBuf
init|=
operator|new
name|byte
index|[
name|getDefaultBlockSize
argument_list|()
operator|*
name|NUM_BLOCKS
index|]
decl_stmt|;
name|in
operator|.
name|readFully
argument_list|(
name|readBuf
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected read-back data to be equal (hflush="
operator|+
name|doHFlush
operator|+
literal|" hfsync="
operator|+
name|doHSync
operator|+
literal|")"
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|data
argument_list|,
name|readBuf
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testBasicEncryptionStreamNoFlushNoSync ()
specifier|public
name|void
name|testBasicEncryptionStreamNoFlushNoSync
parameter_list|()
throws|throws
name|Exception
block|{
name|writeAndVerify
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBasicEncryptionStreamFlushSync ()
specifier|public
name|void
name|testBasicEncryptionStreamFlushSync
parameter_list|()
throws|throws
name|Exception
block|{
name|writeAndVerify
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBasicEncryptionStreamNoFlushSync ()
specifier|public
name|void
name|testBasicEncryptionStreamNoFlushSync
parameter_list|()
throws|throws
name|Exception
block|{
name|writeAndVerify
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBasicEncryptionStreamFlushNoSync ()
specifier|public
name|void
name|testBasicEncryptionStreamFlushNoSync
parameter_list|()
throws|throws
name|Exception
block|{
name|writeAndVerify
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetPos ()
specifier|public
name|void
name|testGetPos
parameter_list|()
throws|throws
name|Exception
block|{
name|writeSomeData
argument_list|()
expr_stmt|;
specifier|final
name|FSDataInputStream
name|in
init|=
name|fc
operator|.
name|open
argument_list|(
name|src1
argument_list|)
decl_stmt|;
name|int
name|expectedGetPos
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|in
operator|.
name|read
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
name|assertTrue
argument_list|(
operator|++
name|expectedGetPos
operator|==
name|in
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDoubleClose ()
specifier|public
name|void
name|testDoubleClose
parameter_list|()
throws|throws
name|Exception
block|{
name|writeSomeData
argument_list|()
expr_stmt|;
specifier|final
name|FSDataInputStream
name|in
init|=
name|fc
operator|.
name|open
argument_list|(
name|src1
argument_list|)
decl_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Caught unexpected exception on double-close: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testHFlush ()
specifier|public
name|void
name|testHFlush
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|DistributedFileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|FSDataOutputStream
name|out
init|=
name|fc
operator|.
name|create
argument_list|(
name|src1
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CREATE
argument_list|)
argument_list|,
name|Options
operator|.
name|CreateOpts
operator|.
name|createParent
argument_list|()
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|out
operator|.
name|hflush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSeekBogusArgs ()
specifier|public
name|void
name|testSeekBogusArgs
parameter_list|()
throws|throws
name|Exception
block|{
name|writeSomeData
argument_list|()
expr_stmt|;
specifier|final
name|FSDataInputStream
name|in
init|=
name|fc
operator|.
name|open
argument_list|(
name|src1
argument_list|)
decl_stmt|;
try|try
block|{
name|in
operator|.
name|seek
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IOException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Cannot seek to negative offset"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|in
operator|.
name|seek
argument_list|(
literal|1
operator|<<
literal|20
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IOException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Cannot seek after EOF"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSeekForward ()
specifier|public
name|void
name|testSeekForward
parameter_list|()
throws|throws
name|Exception
block|{
name|writeSomeData
argument_list|()
expr_stmt|;
specifier|final
name|FSDataInputStream
name|in
init|=
name|fc
operator|.
name|open
argument_list|(
name|src1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|seekInc
init|=
literal|1
init|;
name|seekInc
operator|<
literal|1024
condition|;
name|seekInc
operator|+=
literal|32
control|)
block|{
name|long
name|seekTo
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|seekTo
operator|<
name|data
operator|.
name|length
condition|)
block|{
name|in
operator|.
name|seek
argument_list|(
name|seekTo
argument_list|)
expr_stmt|;
name|int
name|b
init|=
name|in
operator|.
name|read
argument_list|()
decl_stmt|;
name|byte
name|expected
init|=
name|data
index|[
operator|(
name|int
operator|)
name|seekTo
index|]
decl_stmt|;
name|assertTrue
argument_list|(
literal|"seek("
operator|+
name|seekTo
operator|+
literal|") Expected: "
operator|+
name|expected
operator|+
literal|", but got: "
operator|+
name|b
argument_list|,
name|b
operator|==
name|expected
argument_list|)
expr_stmt|;
name|seekTo
operator|+=
name|seekInc
expr_stmt|;
block|}
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSeekBackwards ()
specifier|public
name|void
name|testSeekBackwards
parameter_list|()
throws|throws
name|Exception
block|{
name|writeSomeData
argument_list|()
expr_stmt|;
specifier|final
name|FSDataInputStream
name|in
init|=
name|fc
operator|.
name|open
argument_list|(
name|src1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|seekInc
init|=
literal|1
init|;
name|seekInc
operator|<
literal|1024
condition|;
name|seekInc
operator|+=
literal|32
control|)
block|{
name|long
name|seekTo
init|=
name|data
operator|.
name|length
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|seekTo
operator|>=
literal|0
condition|)
block|{
name|in
operator|.
name|seek
argument_list|(
name|seekTo
argument_list|)
expr_stmt|;
name|int
name|b
init|=
name|in
operator|.
name|read
argument_list|()
decl_stmt|;
name|byte
name|expected
init|=
name|data
index|[
operator|(
name|int
operator|)
name|seekTo
index|]
decl_stmt|;
name|assertTrue
argument_list|(
literal|"seek("
operator|+
name|seekTo
operator|+
literal|") Expected: "
operator|+
name|expected
operator|+
literal|", but got: "
operator|+
name|b
argument_list|,
name|b
operator|==
name|expected
argument_list|)
expr_stmt|;
name|seekTo
operator|-=
name|seekInc
expr_stmt|;
block|}
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPostionedReadable ()
specifier|public
name|void
name|testPostionedReadable
parameter_list|()
throws|throws
name|Exception
block|{
name|writeSomeData
argument_list|()
expr_stmt|;
specifier|final
name|FSDataInputStream
name|in
init|=
name|fc
operator|.
name|open
argument_list|(
name|src1
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|byte
index|[]
name|oneByteToRead
init|=
operator|new
name|byte
index|[
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|nread
init|=
name|in
operator|.
name|read
argument_list|(
name|i
argument_list|,
name|oneByteToRead
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|byte
name|b
init|=
name|oneByteToRead
index|[
literal|0
index|]
decl_stmt|;
name|byte
name|expected
init|=
name|data
index|[
operator|(
name|int
operator|)
name|i
index|]
decl_stmt|;
name|assertTrue
argument_list|(
literal|"read() expected only one byte to be read, but got "
operator|+
name|nread
argument_list|,
name|nread
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"read() expected: "
operator|+
name|expected
operator|+
literal|", but got: "
operator|+
name|b
argument_list|,
name|b
operator|==
name|expected
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

