begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.store
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|FederationTestUtils
operator|.
name|verifyException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|FederationStateStoreTestUtils
operator|.
name|clearRecords
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
operator|.
name|FederationUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
operator|.
name|RouterServiceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|GetRouterRegistrationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|GetRouterRegistrationsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|RouterHeartbeatRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|RouterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test the basic {@link StateStoreService} {@link RouterStore} functionality.  */
end_comment

begin_class
DECL|class|TestStateStoreRouterState
specifier|public
class|class
name|TestStateStoreRouterState
extends|extends
name|TestStateStoreBase
block|{
DECL|field|routerStore
specifier|private
specifier|static
name|RouterStore
name|routerStore
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|create ()
specifier|public
specifier|static
name|void
name|create
parameter_list|()
block|{
comment|// Reduce expirations to 5 seconds
name|getConf
argument_list|()
operator|.
name|setTimeDuration
argument_list|(
name|DFSConfigKeys
operator|.
name|FEDERATION_STORE_ROUTER_EXPIRATION_MS
argument_list|,
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|routerStore
operator|==
literal|null
condition|)
block|{
name|routerStore
operator|=
name|getStateStore
argument_list|()
operator|.
name|getRegisteredRecordStore
argument_list|(
name|RouterStore
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|// Clear router status registrations
name|assertTrue
argument_list|(
name|clearRecords
argument_list|(
name|getStateStore
argument_list|()
argument_list|,
name|RouterState
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStateStoreDisconnected ()
specifier|public
name|void
name|testStateStoreDisconnected
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Close the data store driver
name|getStateStore
argument_list|()
operator|.
name|closeDriver
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|getStateStore
argument_list|()
operator|.
name|isDriverReady
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test all APIs that access the data store to ensure they throw the correct
comment|// exception.
name|GetRouterRegistrationRequest
name|getSingleRequest
init|=
name|GetRouterRegistrationRequest
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|verifyException
argument_list|(
name|routerStore
argument_list|,
literal|"getRouterRegistration"
argument_list|,
name|StateStoreUnavailableException
operator|.
name|class
argument_list|,
operator|new
name|Class
index|[]
block|{
name|GetRouterRegistrationRequest
operator|.
name|class
block|}
argument_list|,
operator|new
name|Object
index|[]
block|{
name|getSingleRequest
block|}
argument_list|)
expr_stmt|;
name|GetRouterRegistrationsRequest
name|getRequest
init|=
name|GetRouterRegistrationsRequest
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|routerStore
operator|.
name|loadCache
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|verifyException
argument_list|(
name|routerStore
argument_list|,
literal|"getRouterRegistrations"
argument_list|,
name|StateStoreUnavailableException
operator|.
name|class
argument_list|,
operator|new
name|Class
index|[]
block|{
name|GetRouterRegistrationsRequest
operator|.
name|class
block|}
argument_list|,
operator|new
name|Object
index|[]
block|{
name|getRequest
block|}
argument_list|)
expr_stmt|;
name|RouterHeartbeatRequest
name|hbRequest
init|=
name|RouterHeartbeatRequest
operator|.
name|newInstance
argument_list|(
name|RouterState
operator|.
name|newInstance
argument_list|(
literal|"test"
argument_list|,
literal|0
argument_list|,
name|RouterServiceState
operator|.
name|UNINITIALIZED
argument_list|)
argument_list|)
decl_stmt|;
name|verifyException
argument_list|(
name|routerStore
argument_list|,
literal|"routerHeartbeat"
argument_list|,
name|StateStoreUnavailableException
operator|.
name|class
argument_list|,
operator|new
name|Class
index|[]
block|{
name|RouterHeartbeatRequest
operator|.
name|class
block|}
argument_list|,
operator|new
name|Object
index|[]
block|{
name|hbRequest
block|}
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// Router
comment|//
annotation|@
name|Test
DECL|method|testUpdateRouterStatus ()
specifier|public
name|void
name|testUpdateRouterStatus
parameter_list|()
throws|throws
name|IllegalStateException
throws|,
name|IOException
block|{
name|long
name|dateStarted
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
name|String
name|address
init|=
literal|"testaddress"
decl_stmt|;
comment|// Set
name|RouterHeartbeatRequest
name|request
init|=
name|RouterHeartbeatRequest
operator|.
name|newInstance
argument_list|(
name|RouterState
operator|.
name|newInstance
argument_list|(
name|address
argument_list|,
name|dateStarted
argument_list|,
name|RouterServiceState
operator|.
name|RUNNING
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|routerStore
operator|.
name|routerHeartbeat
argument_list|(
name|request
argument_list|)
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify
name|GetRouterRegistrationRequest
name|getRequest
init|=
name|GetRouterRegistrationRequest
operator|.
name|newInstance
argument_list|(
name|address
argument_list|)
decl_stmt|;
name|RouterState
name|record
init|=
name|routerStore
operator|.
name|getRouterRegistration
argument_list|(
name|getRequest
argument_list|)
operator|.
name|getRouter
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|record
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RouterServiceState
operator|.
name|RUNNING
argument_list|,
name|record
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|address
argument_list|,
name|record
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|FederationUtil
operator|.
name|getCompileInfo
argument_list|()
argument_list|,
name|record
operator|.
name|getCompileInfo
argument_list|()
argument_list|)
expr_stmt|;
comment|// Build version may vary a bit
name|assertFalse
argument_list|(
name|record
operator|.
name|getVersion
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRouterStateExpired ()
specifier|public
name|void
name|testRouterStateExpired
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|long
name|dateStarted
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
name|String
name|address
init|=
literal|"testaddress"
decl_stmt|;
name|RouterHeartbeatRequest
name|request
init|=
name|RouterHeartbeatRequest
operator|.
name|newInstance
argument_list|(
name|RouterState
operator|.
name|newInstance
argument_list|(
name|address
argument_list|,
name|dateStarted
argument_list|,
name|RouterServiceState
operator|.
name|RUNNING
argument_list|)
argument_list|)
decl_stmt|;
comment|// Set
name|assertTrue
argument_list|(
name|routerStore
operator|.
name|routerHeartbeat
argument_list|(
name|request
argument_list|)
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify
name|GetRouterRegistrationRequest
name|getRequest
init|=
name|GetRouterRegistrationRequest
operator|.
name|newInstance
argument_list|(
name|address
argument_list|)
decl_stmt|;
name|RouterState
name|record
init|=
name|routerStore
operator|.
name|getRouterRegistration
argument_list|(
name|getRequest
argument_list|)
operator|.
name|getRouter
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|record
argument_list|)
expr_stmt|;
comment|// Wait past expiration (set to 5 sec in config)
name|Thread
operator|.
name|sleep
argument_list|(
literal|6000
argument_list|)
expr_stmt|;
comment|// Verify expired
name|RouterState
name|r
init|=
name|routerStore
operator|.
name|getRouterRegistration
argument_list|(
name|getRequest
argument_list|)
operator|.
name|getRouter
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|RouterServiceState
operator|.
name|EXPIRED
argument_list|,
name|r
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// Heartbeat again and this shouldn't be EXPIRED anymore
name|assertTrue
argument_list|(
name|routerStore
operator|.
name|routerHeartbeat
argument_list|(
name|request
argument_list|)
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
name|routerStore
operator|.
name|getRouterRegistration
argument_list|(
name|getRequest
argument_list|)
operator|.
name|getRouter
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|RouterServiceState
operator|.
name|RUNNING
argument_list|,
name|r
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetAllRouterStates ()
specifier|public
name|void
name|testGetAllRouterStates
parameter_list|()
throws|throws
name|StateStoreUnavailableException
throws|,
name|IOException
block|{
comment|// Set 2 entries
name|RouterHeartbeatRequest
name|heartbeatRequest1
init|=
name|RouterHeartbeatRequest
operator|.
name|newInstance
argument_list|(
name|RouterState
operator|.
name|newInstance
argument_list|(
literal|"testaddress1"
argument_list|,
name|Time
operator|.
name|now
argument_list|()
argument_list|,
name|RouterServiceState
operator|.
name|RUNNING
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|routerStore
operator|.
name|routerHeartbeat
argument_list|(
name|heartbeatRequest1
argument_list|)
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|RouterHeartbeatRequest
name|heartbeatRequest2
init|=
name|RouterHeartbeatRequest
operator|.
name|newInstance
argument_list|(
name|RouterState
operator|.
name|newInstance
argument_list|(
literal|"testaddress2"
argument_list|,
name|Time
operator|.
name|now
argument_list|()
argument_list|,
name|RouterServiceState
operator|.
name|RUNNING
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|routerStore
operator|.
name|routerHeartbeat
argument_list|(
name|heartbeatRequest2
argument_list|)
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify
name|routerStore
operator|.
name|loadCache
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|GetRouterRegistrationsRequest
name|request
init|=
name|GetRouterRegistrationsRequest
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RouterState
argument_list|>
name|entries
init|=
name|routerStore
operator|.
name|getRouterRegistrations
argument_list|(
name|request
argument_list|)
operator|.
name|getRouters
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|entries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|entries
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testaddress1"
argument_list|,
name|entries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testaddress2"
argument_list|,
name|entries
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RouterServiceState
operator|.
name|RUNNING
argument_list|,
name|entries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RouterServiceState
operator|.
name|RUNNING
argument_list|,
name|entries
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

