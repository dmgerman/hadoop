begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MetricsAsserts
operator|.
name|assertCounter
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MetricsAsserts
operator|.
name|getMetrics
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|impl
operator|.
name|Log4JLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|ReconfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|FsDatasetSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSNamesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|VolumeFailureSummary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test reporting of DN volume failure counts and metrics.  */
end_comment

begin_class
DECL|class|TestDataNodeVolumeFailureReporting
specifier|public
class|class
name|TestDataNodeVolumeFailureReporting
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestDataNodeVolumeFailureReporting
operator|.
name|class
argument_list|)
decl_stmt|;
block|{
operator|(
operator|(
name|Log4JLogger
operator|)
name|TestDataNodeVolumeFailureReporting
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
DECL|field|fs
specifier|private
name|FileSystem
name|fs
decl_stmt|;
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|dataDir
specifier|private
name|String
name|dataDir
decl_stmt|;
DECL|field|volumeCapacity
specifier|private
name|long
name|volumeCapacity
decl_stmt|;
comment|// Sleep at least 3 seconds (a 1s heartbeat plus padding) to allow
comment|// for heartbeats to propagate from the datanodes to the namenode.
DECL|field|WAIT_FOR_HEARTBEATS
specifier|final
name|int
name|WAIT_FOR_HEARTBEATS
init|=
literal|3000
decl_stmt|;
comment|// Wait at least (2 * re-check + 10 * heartbeat) seconds for
comment|// a datanode to be considered dead by the namenode.
DECL|field|WAIT_FOR_DEATH
specifier|final
name|int
name|WAIT_FOR_DEATH
init|=
literal|15000
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// These tests simulate volume failures by denying execute permission on the
comment|// volume's path.  On Windows, the owner of an object is always allowed
comment|// access, so we can't run these tests on Windows.
name|assumeTrue
argument_list|(
operator|!
name|Path
operator|.
name|WINDOWS
argument_list|)
expr_stmt|;
comment|// Allow a single volume failure (there are two volumes)
name|initCluster
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Restore executable permission on all directories where a failure may have
comment|// been simulated by denying execute access.  This is based on the maximum
comment|// number of datanodes and the maximum number of storages per data node used
comment|// throughout the tests in this suite.
name|int
name|maxDataNodes
init|=
literal|3
decl_stmt|;
name|int
name|maxStoragesPerDataNode
init|=
literal|4
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxDataNodes
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<=
name|maxStoragesPerDataNode
condition|;
name|j
operator|++
control|)
block|{
name|String
name|subDir
init|=
literal|"data"
operator|+
operator|(
operator|(
name|i
operator|*
name|maxStoragesPerDataNode
operator|)
operator|+
name|j
operator|)
decl_stmt|;
name|FileUtil
operator|.
name|setExecutable
argument_list|(
operator|new
name|File
argument_list|(
name|dataDir
argument_list|,
name|subDir
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test that individual volume failures do not cause DNs to fail, that    * all volumes failed on a single datanode do cause it to fail, and    * that the capacities and liveliness is adjusted correctly in the NN.    */
annotation|@
name|Test
DECL|method|testSuccessiveVolumeFailures ()
specifier|public
name|void
name|testSuccessiveVolumeFailures
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Bring up two more datanodes
name|cluster
operator|.
name|startDataNodes
argument_list|(
name|conf
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
comment|/*      * Calculate the total capacity of all the datanodes. Sleep for      * three seconds to be sure the datanodes have had a chance to      * heartbeat their capacities.      */
name|Thread
operator|.
name|sleep
argument_list|(
name|WAIT_FOR_HEARTBEATS
argument_list|)
expr_stmt|;
specifier|final
name|DatanodeManager
name|dm
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|(         )
operator|.
name|getDatanodeManager
argument_list|()
decl_stmt|;
specifier|final
name|long
name|origCapacity
init|=
name|DFSTestUtil
operator|.
name|getLiveDatanodeCapacity
argument_list|(
name|dm
argument_list|)
decl_stmt|;
name|long
name|dnCapacity
init|=
name|DFSTestUtil
operator|.
name|getDatanodeCapacity
argument_list|(
name|dm
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|File
name|dn1Vol1
init|=
operator|new
name|File
argument_list|(
name|dataDir
argument_list|,
literal|"data"
operator|+
operator|(
literal|2
operator|*
literal|0
operator|+
literal|1
operator|)
argument_list|)
decl_stmt|;
name|File
name|dn2Vol1
init|=
operator|new
name|File
argument_list|(
name|dataDir
argument_list|,
literal|"data"
operator|+
operator|(
literal|2
operator|*
literal|1
operator|+
literal|1
operator|)
argument_list|)
decl_stmt|;
name|File
name|dn3Vol1
init|=
operator|new
name|File
argument_list|(
name|dataDir
argument_list|,
literal|"data"
operator|+
operator|(
literal|2
operator|*
literal|2
operator|+
literal|1
operator|)
argument_list|)
decl_stmt|;
name|File
name|dn3Vol2
init|=
operator|new
name|File
argument_list|(
name|dataDir
argument_list|,
literal|"data"
operator|+
operator|(
literal|2
operator|*
literal|2
operator|+
literal|2
operator|)
argument_list|)
decl_stmt|;
comment|/*      * Make the 1st volume directories on the first two datanodes      * non-accessible.  We don't make all three 1st volume directories      * readonly since that would cause the entire pipeline to      * fail. The client does not retry failed nodes even though      * perhaps they could succeed because just a single volume failed.      */
name|assertTrue
argument_list|(
literal|"Couldn't chmod local vol"
argument_list|,
name|FileUtil
operator|.
name|setExecutable
argument_list|(
name|dn1Vol1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Couldn't chmod local vol"
argument_list|,
name|FileUtil
operator|.
name|setExecutable
argument_list|(
name|dn2Vol1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|/*      * Create file1 and wait for 3 replicas (ie all DNs can still      * store a block).  Then assert that all DNs are up, despite the      * volume failures.      */
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"/test1"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|file1
argument_list|,
literal|1024
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitReplication
argument_list|(
name|fs
argument_list|,
name|file1
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|DataNode
argument_list|>
name|dns
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"DN1 should be up"
argument_list|,
name|dns
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isDatanodeUp
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"DN2 should be up"
argument_list|,
name|dns
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|isDatanodeUp
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"DN3 should be up"
argument_list|,
name|dns
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|isDatanodeUp
argument_list|()
argument_list|)
expr_stmt|;
comment|/*      * The metrics should confirm the volume failures.      */
name|checkFailuresAtDataNode
argument_list|(
name|dns
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|dn1Vol1
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|checkFailuresAtDataNode
argument_list|(
name|dns
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|dn2Vol1
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|checkFailuresAtDataNode
argument_list|(
name|dns
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Ensure we wait a sufficient amount of time
assert|assert
operator|(
name|WAIT_FOR_HEARTBEATS
operator|*
literal|10
operator|)
operator|>
name|WAIT_FOR_DEATH
assert|;
comment|// Eventually the NN should report two volume failures
name|DFSTestUtil
operator|.
name|waitForDatanodeStatus
argument_list|(
name|dm
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
name|origCapacity
operator|-
operator|(
literal|1
operator|*
name|dnCapacity
operator|)
argument_list|,
name|WAIT_FOR_HEARTBEATS
argument_list|)
expr_stmt|;
name|checkAggregateFailuresAtNameNode
argument_list|(
literal|true
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|checkFailuresAtNameNode
argument_list|(
name|dm
argument_list|,
name|dns
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|,
name|dn1Vol1
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|checkFailuresAtNameNode
argument_list|(
name|dm
argument_list|,
name|dns
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|true
argument_list|,
name|dn2Vol1
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|checkFailuresAtNameNode
argument_list|(
name|dm
argument_list|,
name|dns
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|/*      * Now fail a volume on the third datanode. We should be able to get      * three replicas since we've already identified the other failures.      */
name|assertTrue
argument_list|(
literal|"Couldn't chmod local vol"
argument_list|,
name|FileUtil
operator|.
name|setExecutable
argument_list|(
name|dn3Vol1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|file2
init|=
operator|new
name|Path
argument_list|(
literal|"/test2"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|file2
argument_list|,
literal|1024
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitReplication
argument_list|(
name|fs
argument_list|,
name|file2
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"DN3 should still be up"
argument_list|,
name|dns
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|isDatanodeUp
argument_list|()
argument_list|)
expr_stmt|;
name|checkFailuresAtDataNode
argument_list|(
name|dns
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|dn3Vol1
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|DataNodeTestUtils
operator|.
name|triggerHeartbeat
argument_list|(
name|dns
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|checkFailuresAtNameNode
argument_list|(
name|dm
argument_list|,
name|dns
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|true
argument_list|,
name|dn3Vol1
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
comment|/*      * Once the datanodes have a chance to heartbeat their new capacity the      * total capacity should be down by three volumes (assuming the host      * did not grow or shrink the data volume while the test was running).      */
name|dnCapacity
operator|=
name|DFSTestUtil
operator|.
name|getDatanodeCapacity
argument_list|(
name|dm
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitForDatanodeStatus
argument_list|(
name|dm
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
name|origCapacity
operator|-
operator|(
literal|3
operator|*
name|dnCapacity
operator|)
argument_list|,
name|WAIT_FOR_HEARTBEATS
argument_list|)
expr_stmt|;
name|checkAggregateFailuresAtNameNode
argument_list|(
literal|true
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|checkFailuresAtNameNode
argument_list|(
name|dm
argument_list|,
name|dns
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|,
name|dn1Vol1
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|checkFailuresAtNameNode
argument_list|(
name|dm
argument_list|,
name|dns
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|true
argument_list|,
name|dn2Vol1
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|checkFailuresAtNameNode
argument_list|(
name|dm
argument_list|,
name|dns
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|true
argument_list|,
name|dn3Vol1
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
comment|/*      * Now fail the 2nd volume on the 3rd datanode. All its volumes      * are now failed and so it should report two volume failures      * and that it's no longer up. Only wait for two replicas since      * we'll never get a third.      */
name|assertTrue
argument_list|(
literal|"Couldn't chmod local vol"
argument_list|,
name|FileUtil
operator|.
name|setExecutable
argument_list|(
name|dn3Vol2
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|file3
init|=
operator|new
name|Path
argument_list|(
literal|"/test3"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|file3
argument_list|,
literal|1024
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitReplication
argument_list|(
name|fs
argument_list|,
name|file3
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
expr_stmt|;
comment|// The DN should consider itself dead
name|DFSTestUtil
operator|.
name|waitForDatanodeDeath
argument_list|(
name|dns
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// And report two failed volumes
name|checkFailuresAtDataNode
argument_list|(
name|dns
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
name|dn3Vol1
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|dn3Vol2
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
comment|// The NN considers the DN dead
name|DFSTestUtil
operator|.
name|waitForDatanodeStatus
argument_list|(
name|dm
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
name|origCapacity
operator|-
operator|(
literal|4
operator|*
name|dnCapacity
operator|)
argument_list|,
name|WAIT_FOR_HEARTBEATS
argument_list|)
expr_stmt|;
name|checkAggregateFailuresAtNameNode
argument_list|(
literal|true
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|checkFailuresAtNameNode
argument_list|(
name|dm
argument_list|,
name|dns
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|,
name|dn1Vol1
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|checkFailuresAtNameNode
argument_list|(
name|dm
argument_list|,
name|dns
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|true
argument_list|,
name|dn2Vol1
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
comment|/*      * The datanode never tries to restore the failed volume, even if      * it's subsequently repaired, but it should see this volume on      * restart, so file creation should be able to succeed after      * restoring the data directories and restarting the datanodes.      */
name|assertTrue
argument_list|(
literal|"Couldn't chmod local vol"
argument_list|,
name|FileUtil
operator|.
name|setExecutable
argument_list|(
name|dn1Vol1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Couldn't chmod local vol"
argument_list|,
name|FileUtil
operator|.
name|setExecutable
argument_list|(
name|dn2Vol1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Couldn't chmod local vol"
argument_list|,
name|FileUtil
operator|.
name|setExecutable
argument_list|(
name|dn3Vol1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Couldn't chmod local vol"
argument_list|,
name|FileUtil
operator|.
name|setExecutable
argument_list|(
name|dn3Vol2
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|restartDataNodes
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|Path
name|file4
init|=
operator|new
name|Path
argument_list|(
literal|"/test4"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|file4
argument_list|,
literal|1024
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitReplication
argument_list|(
name|fs
argument_list|,
name|file4
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
expr_stmt|;
comment|/*      * Eventually the capacity should be restored to its original value,      * and that the volume failure count should be reported as zero by      * both the metrics and the NN.      */
name|DFSTestUtil
operator|.
name|waitForDatanodeStatus
argument_list|(
name|dm
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|origCapacity
argument_list|,
name|WAIT_FOR_HEARTBEATS
argument_list|)
expr_stmt|;
name|checkAggregateFailuresAtNameNode
argument_list|(
literal|true
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|dns
operator|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
expr_stmt|;
name|checkFailuresAtNameNode
argument_list|(
name|dm
argument_list|,
name|dns
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkFailuresAtNameNode
argument_list|(
name|dm
argument_list|,
name|dns
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkFailuresAtNameNode
argument_list|(
name|dm
argument_list|,
name|dns
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that the NN re-learns of volume failures after restart.    */
annotation|@
name|Test
DECL|method|testVolFailureStatsPreservedOnNNRestart ()
specifier|public
name|void
name|testVolFailureStatsPreservedOnNNRestart
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Bring up two more datanodes that can tolerate 1 failure
name|cluster
operator|.
name|startDataNodes
argument_list|(
name|conf
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|DatanodeManager
name|dm
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|(         )
operator|.
name|getDatanodeManager
argument_list|()
decl_stmt|;
name|long
name|origCapacity
init|=
name|DFSTestUtil
operator|.
name|getLiveDatanodeCapacity
argument_list|(
name|dm
argument_list|)
decl_stmt|;
name|long
name|dnCapacity
init|=
name|DFSTestUtil
operator|.
name|getDatanodeCapacity
argument_list|(
name|dm
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// Fail the first volume on both datanodes (we have to keep the
comment|// third healthy so one node in the pipeline will not fail).
name|File
name|dn1Vol1
init|=
operator|new
name|File
argument_list|(
name|dataDir
argument_list|,
literal|"data"
operator|+
operator|(
literal|2
operator|*
literal|0
operator|+
literal|1
operator|)
argument_list|)
decl_stmt|;
name|File
name|dn2Vol1
init|=
operator|new
name|File
argument_list|(
name|dataDir
argument_list|,
literal|"data"
operator|+
operator|(
literal|2
operator|*
literal|1
operator|+
literal|1
operator|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Couldn't chmod local vol"
argument_list|,
name|FileUtil
operator|.
name|setExecutable
argument_list|(
name|dn1Vol1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Couldn't chmod local vol"
argument_list|,
name|FileUtil
operator|.
name|setExecutable
argument_list|(
name|dn2Vol1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"/test1"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|file1
argument_list|,
literal|1024
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitReplication
argument_list|(
name|fs
argument_list|,
name|file1
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|DataNode
argument_list|>
name|dns
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
decl_stmt|;
comment|// The NN reports two volumes failures
name|DFSTestUtil
operator|.
name|waitForDatanodeStatus
argument_list|(
name|dm
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
name|origCapacity
operator|-
operator|(
literal|1
operator|*
name|dnCapacity
operator|)
argument_list|,
name|WAIT_FOR_HEARTBEATS
argument_list|)
expr_stmt|;
name|checkAggregateFailuresAtNameNode
argument_list|(
literal|true
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|checkFailuresAtNameNode
argument_list|(
name|dm
argument_list|,
name|dns
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|,
name|dn1Vol1
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|checkFailuresAtNameNode
argument_list|(
name|dm
argument_list|,
name|dns
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|true
argument_list|,
name|dn2Vol1
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
comment|// After restarting the NN it still see the two failures
name|cluster
operator|.
name|restartNameNode
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitForDatanodeStatus
argument_list|(
name|dm
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
name|origCapacity
operator|-
operator|(
literal|1
operator|*
name|dnCapacity
operator|)
argument_list|,
name|WAIT_FOR_HEARTBEATS
argument_list|)
expr_stmt|;
name|checkAggregateFailuresAtNameNode
argument_list|(
literal|true
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|checkFailuresAtNameNode
argument_list|(
name|dm
argument_list|,
name|dns
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|,
name|dn1Vol1
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|checkFailuresAtNameNode
argument_list|(
name|dm
argument_list|,
name|dns
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|true
argument_list|,
name|dn2Vol1
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultipleVolFailuresOnNode ()
specifier|public
name|void
name|testMultipleVolFailuresOnNode
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Reinitialize the cluster, configured with 4 storage locations per DataNode
comment|// and tolerating up to 2 failures.
name|tearDown
argument_list|()
expr_stmt|;
name|initCluster
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Calculate the total capacity of all the datanodes. Sleep for three seconds
comment|// to be sure the datanodes have had a chance to heartbeat their capacities.
name|Thread
operator|.
name|sleep
argument_list|(
name|WAIT_FOR_HEARTBEATS
argument_list|)
expr_stmt|;
name|DatanodeManager
name|dm
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
decl_stmt|;
name|long
name|origCapacity
init|=
name|DFSTestUtil
operator|.
name|getLiveDatanodeCapacity
argument_list|(
name|dm
argument_list|)
decl_stmt|;
name|long
name|dnCapacity
init|=
name|DFSTestUtil
operator|.
name|getDatanodeCapacity
argument_list|(
name|dm
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|File
name|dn1Vol1
init|=
operator|new
name|File
argument_list|(
name|dataDir
argument_list|,
literal|"data"
operator|+
operator|(
literal|4
operator|*
literal|0
operator|+
literal|1
operator|)
argument_list|)
decl_stmt|;
name|File
name|dn1Vol2
init|=
operator|new
name|File
argument_list|(
name|dataDir
argument_list|,
literal|"data"
operator|+
operator|(
literal|4
operator|*
literal|0
operator|+
literal|2
operator|)
argument_list|)
decl_stmt|;
name|File
name|dn2Vol1
init|=
operator|new
name|File
argument_list|(
name|dataDir
argument_list|,
literal|"data"
operator|+
operator|(
literal|4
operator|*
literal|1
operator|+
literal|1
operator|)
argument_list|)
decl_stmt|;
name|File
name|dn2Vol2
init|=
operator|new
name|File
argument_list|(
name|dataDir
argument_list|,
literal|"data"
operator|+
operator|(
literal|4
operator|*
literal|1
operator|+
literal|2
operator|)
argument_list|)
decl_stmt|;
comment|// Make the first two volume directories on the first two datanodes
comment|// non-accessible.
name|assertTrue
argument_list|(
literal|"Couldn't chmod local vol"
argument_list|,
name|FileUtil
operator|.
name|setExecutable
argument_list|(
name|dn1Vol1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Couldn't chmod local vol"
argument_list|,
name|FileUtil
operator|.
name|setExecutable
argument_list|(
name|dn1Vol2
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Couldn't chmod local vol"
argument_list|,
name|FileUtil
operator|.
name|setExecutable
argument_list|(
name|dn2Vol1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Couldn't chmod local vol"
argument_list|,
name|FileUtil
operator|.
name|setExecutable
argument_list|(
name|dn2Vol2
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create file1 and wait for 3 replicas (ie all DNs can still store a block).
comment|// Then assert that all DNs are up, despite the volume failures.
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"/test1"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|file1
argument_list|,
literal|1024
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitReplication
argument_list|(
name|fs
argument_list|,
name|file1
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|DataNode
argument_list|>
name|dns
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"DN1 should be up"
argument_list|,
name|dns
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isDatanodeUp
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"DN2 should be up"
argument_list|,
name|dns
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|isDatanodeUp
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"DN3 should be up"
argument_list|,
name|dns
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|isDatanodeUp
argument_list|()
argument_list|)
expr_stmt|;
name|checkFailuresAtDataNode
argument_list|(
name|dns
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|dn1Vol1
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|dn1Vol2
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|checkFailuresAtDataNode
argument_list|(
name|dns
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|dn2Vol1
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|dn2Vol2
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|checkFailuresAtDataNode
argument_list|(
name|dns
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Ensure we wait a sufficient amount of time
assert|assert
operator|(
name|WAIT_FOR_HEARTBEATS
operator|*
literal|10
operator|)
operator|>
name|WAIT_FOR_DEATH
assert|;
comment|// Eventually the NN should report four volume failures
name|DFSTestUtil
operator|.
name|waitForDatanodeStatus
argument_list|(
name|dm
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|,
name|origCapacity
operator|-
operator|(
literal|1
operator|*
name|dnCapacity
operator|)
argument_list|,
name|WAIT_FOR_HEARTBEATS
argument_list|)
expr_stmt|;
name|checkAggregateFailuresAtNameNode
argument_list|(
literal|true
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|checkFailuresAtNameNode
argument_list|(
name|dm
argument_list|,
name|dns
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|,
name|dn1Vol1
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|dn1Vol2
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|checkFailuresAtNameNode
argument_list|(
name|dm
argument_list|,
name|dns
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|true
argument_list|,
name|dn2Vol1
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|dn2Vol2
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|checkFailuresAtNameNode
argument_list|(
name|dm
argument_list|,
name|dns
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDataNodeReconfigureWithVolumeFailures ()
specifier|public
name|void
name|testDataNodeReconfigureWithVolumeFailures
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Bring up two more datanodes
name|cluster
operator|.
name|startDataNodes
argument_list|(
name|conf
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|DatanodeManager
name|dm
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|(         )
operator|.
name|getDatanodeManager
argument_list|()
decl_stmt|;
name|long
name|origCapacity
init|=
name|DFSTestUtil
operator|.
name|getLiveDatanodeCapacity
argument_list|(
name|dm
argument_list|)
decl_stmt|;
name|long
name|dnCapacity
init|=
name|DFSTestUtil
operator|.
name|getDatanodeCapacity
argument_list|(
name|dm
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// Fail the first volume on both datanodes (we have to keep the
comment|// third healthy so one node in the pipeline will not fail).
name|File
name|dn1Vol1
init|=
operator|new
name|File
argument_list|(
name|dataDir
argument_list|,
literal|"data"
operator|+
operator|(
literal|2
operator|*
literal|0
operator|+
literal|1
operator|)
argument_list|)
decl_stmt|;
name|File
name|dn1Vol2
init|=
operator|new
name|File
argument_list|(
name|dataDir
argument_list|,
literal|"data"
operator|+
operator|(
literal|2
operator|*
literal|0
operator|+
literal|2
operator|)
argument_list|)
decl_stmt|;
name|File
name|dn2Vol1
init|=
operator|new
name|File
argument_list|(
name|dataDir
argument_list|,
literal|"data"
operator|+
operator|(
literal|2
operator|*
literal|1
operator|+
literal|1
operator|)
argument_list|)
decl_stmt|;
name|File
name|dn2Vol2
init|=
operator|new
name|File
argument_list|(
name|dataDir
argument_list|,
literal|"data"
operator|+
operator|(
literal|2
operator|*
literal|1
operator|+
literal|2
operator|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Couldn't chmod local vol"
argument_list|,
name|FileUtil
operator|.
name|setExecutable
argument_list|(
name|dn1Vol1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Couldn't chmod local vol"
argument_list|,
name|FileUtil
operator|.
name|setExecutable
argument_list|(
name|dn2Vol1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"/test1"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|file1
argument_list|,
literal|1024
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitReplication
argument_list|(
name|fs
argument_list|,
name|file1
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|DataNode
argument_list|>
name|dns
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"DN1 should be up"
argument_list|,
name|dns
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isDatanodeUp
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"DN2 should be up"
argument_list|,
name|dns
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|isDatanodeUp
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"DN3 should be up"
argument_list|,
name|dns
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|isDatanodeUp
argument_list|()
argument_list|)
expr_stmt|;
name|checkFailuresAtDataNode
argument_list|(
name|dns
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|dn1Vol1
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|checkFailuresAtDataNode
argument_list|(
name|dns
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|dn2Vol1
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|checkFailuresAtDataNode
argument_list|(
name|dns
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Ensure we wait a sufficient amount of time
assert|assert
operator|(
name|WAIT_FOR_HEARTBEATS
operator|*
literal|10
operator|)
operator|>
name|WAIT_FOR_DEATH
assert|;
comment|// The NN reports two volume failures
name|DFSTestUtil
operator|.
name|waitForDatanodeStatus
argument_list|(
name|dm
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
name|origCapacity
operator|-
operator|(
literal|1
operator|*
name|dnCapacity
operator|)
argument_list|,
name|WAIT_FOR_HEARTBEATS
argument_list|)
expr_stmt|;
name|checkAggregateFailuresAtNameNode
argument_list|(
literal|true
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|checkFailuresAtNameNode
argument_list|(
name|dm
argument_list|,
name|dns
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|,
name|dn1Vol1
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|checkFailuresAtNameNode
argument_list|(
name|dm
argument_list|,
name|dns
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|true
argument_list|,
name|dn2Vol1
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
comment|// Reconfigure again to try to add back the failed volumes.
name|reconfigureDataNode
argument_list|(
name|dns
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|dn1Vol1
argument_list|,
name|dn1Vol2
argument_list|)
expr_stmt|;
name|reconfigureDataNode
argument_list|(
name|dns
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|dn2Vol1
argument_list|,
name|dn2Vol2
argument_list|)
expr_stmt|;
name|DataNodeTestUtils
operator|.
name|triggerHeartbeat
argument_list|(
name|dns
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|DataNodeTestUtils
operator|.
name|triggerHeartbeat
argument_list|(
name|dns
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|checkFailuresAtDataNode
argument_list|(
name|dns
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
name|dn1Vol1
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|checkFailuresAtDataNode
argument_list|(
name|dns
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
name|dn2Vol1
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
comment|// Ensure we wait a sufficient amount of time.
assert|assert
operator|(
name|WAIT_FOR_HEARTBEATS
operator|*
literal|10
operator|)
operator|>
name|WAIT_FOR_DEATH
assert|;
comment|// The NN reports two volume failures again.
name|DFSTestUtil
operator|.
name|waitForDatanodeStatus
argument_list|(
name|dm
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
name|origCapacity
operator|-
operator|(
literal|1
operator|*
name|dnCapacity
operator|)
argument_list|,
name|WAIT_FOR_HEARTBEATS
argument_list|)
expr_stmt|;
name|checkAggregateFailuresAtNameNode
argument_list|(
literal|false
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|checkFailuresAtNameNode
argument_list|(
name|dm
argument_list|,
name|dns
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|false
argument_list|,
name|dn1Vol1
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|checkFailuresAtNameNode
argument_list|(
name|dm
argument_list|,
name|dns
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|false
argument_list|,
name|dn2Vol1
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
comment|// Reconfigure a third time with the failed volumes.  Afterwards, we expect
comment|// the same volume failures to be reported.  (No double-counting.)
name|reconfigureDataNode
argument_list|(
name|dns
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|dn1Vol1
argument_list|,
name|dn1Vol2
argument_list|)
expr_stmt|;
name|reconfigureDataNode
argument_list|(
name|dns
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|dn2Vol1
argument_list|,
name|dn2Vol2
argument_list|)
expr_stmt|;
name|DataNodeTestUtils
operator|.
name|triggerHeartbeat
argument_list|(
name|dns
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|DataNodeTestUtils
operator|.
name|triggerHeartbeat
argument_list|(
name|dns
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|checkFailuresAtDataNode
argument_list|(
name|dns
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
name|dn1Vol1
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|checkFailuresAtDataNode
argument_list|(
name|dns
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
name|dn2Vol1
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
comment|// Ensure we wait a sufficient amount of time.
assert|assert
operator|(
name|WAIT_FOR_HEARTBEATS
operator|*
literal|10
operator|)
operator|>
name|WAIT_FOR_DEATH
assert|;
comment|// The NN reports two volume failures again.
name|DFSTestUtil
operator|.
name|waitForDatanodeStatus
argument_list|(
name|dm
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
name|origCapacity
operator|-
operator|(
literal|1
operator|*
name|dnCapacity
operator|)
argument_list|,
name|WAIT_FOR_HEARTBEATS
argument_list|)
expr_stmt|;
name|checkAggregateFailuresAtNameNode
argument_list|(
literal|false
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|checkFailuresAtNameNode
argument_list|(
name|dm
argument_list|,
name|dns
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|false
argument_list|,
name|dn1Vol1
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|checkFailuresAtNameNode
argument_list|(
name|dm
argument_list|,
name|dns
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|false
argument_list|,
name|dn2Vol1
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
comment|// Replace failed volume with healthy volume and run reconfigure DataNode.
comment|// The failed volume information should be cleared.
name|assertTrue
argument_list|(
literal|"Couldn't chmod local vol"
argument_list|,
name|FileUtil
operator|.
name|setExecutable
argument_list|(
name|dn1Vol1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Couldn't chmod local vol"
argument_list|,
name|FileUtil
operator|.
name|setExecutable
argument_list|(
name|dn2Vol1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|reconfigureDataNode
argument_list|(
name|dns
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|dn1Vol1
argument_list|,
name|dn1Vol2
argument_list|)
expr_stmt|;
name|reconfigureDataNode
argument_list|(
name|dns
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|dn2Vol1
argument_list|,
name|dn2Vol2
argument_list|)
expr_stmt|;
name|DataNodeTestUtils
operator|.
name|triggerHeartbeat
argument_list|(
name|dns
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|DataNodeTestUtils
operator|.
name|triggerHeartbeat
argument_list|(
name|dns
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|checkFailuresAtDataNode
argument_list|(
name|dns
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkFailuresAtDataNode
argument_list|(
name|dns
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitForDatanodeStatus
argument_list|(
name|dm
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|origCapacity
argument_list|,
name|WAIT_FOR_HEARTBEATS
argument_list|)
expr_stmt|;
name|checkAggregateFailuresAtNameNode
argument_list|(
literal|true
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkFailuresAtNameNode
argument_list|(
name|dm
argument_list|,
name|dns
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkFailuresAtNameNode
argument_list|(
name|dm
argument_list|,
name|dns
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Checks the NameNode for correct values of aggregate counters tracking failed    * volumes across all DataNodes.    *    * @param expectCapacityKnown if true, then expect that the capacities of the    *     volumes were known before the failures, and therefore the lost capacity    *     can be reported    * @param expectedVolumeFailuresTotal expected number of failed volumes    */
DECL|method|checkAggregateFailuresAtNameNode (boolean expectCapacityKnown, int expectedVolumeFailuresTotal)
specifier|private
name|void
name|checkAggregateFailuresAtNameNode
parameter_list|(
name|boolean
name|expectCapacityKnown
parameter_list|,
name|int
name|expectedVolumeFailuresTotal
parameter_list|)
block|{
name|FSNamesystem
name|ns
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedVolumeFailuresTotal
argument_list|,
name|ns
operator|.
name|getVolumeFailuresTotal
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|expectedCapacityLost
init|=
name|getExpectedCapacityLost
argument_list|(
name|expectCapacityKnown
argument_list|,
name|expectedVolumeFailuresTotal
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedCapacityLost
argument_list|,
name|ns
operator|.
name|getEstimatedCapacityLostTotal
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Checks a DataNode for correct reporting of failed volumes.    *    * @param dn DataNode to check    * @param expectedVolumeFailuresCounter metric counter value for    *     VolumeFailures.  The current implementation actually counts the number    *     of failed disk checker cycles, which may be different from the length of    *     expectedFailedVolumes if multiple disks fail in the same disk checker    *     cycle    * @param expectCapacityKnown if true, then expect that the capacities of the    *     volumes were known before the failures, and therefore the lost capacity    *     can be reported    * @param expectedFailedVolumes expected locations of failed volumes    * @throws Exception if there is any failure    */
DECL|method|checkFailuresAtDataNode (DataNode dn, long expectedVolumeFailuresCounter, boolean expectCapacityKnown, String... expectedFailedVolumes)
specifier|private
name|void
name|checkFailuresAtDataNode
parameter_list|(
name|DataNode
name|dn
parameter_list|,
name|long
name|expectedVolumeFailuresCounter
parameter_list|,
name|boolean
name|expectCapacityKnown
parameter_list|,
name|String
modifier|...
name|expectedFailedVolumes
parameter_list|)
throws|throws
name|Exception
block|{
name|assertCounter
argument_list|(
literal|"VolumeFailures"
argument_list|,
name|expectedVolumeFailuresCounter
argument_list|,
name|getMetrics
argument_list|(
name|dn
operator|.
name|getMetrics
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|FsDatasetSpi
argument_list|<
name|?
argument_list|>
name|fsd
init|=
name|dn
operator|.
name|getFSDataset
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedFailedVolumes
operator|.
name|length
argument_list|,
name|fsd
operator|.
name|getNumFailedVolumes
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expectedFailedVolumes
argument_list|,
name|fsd
operator|.
name|getFailedStorageLocations
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectedFailedVolumes
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|assertTrue
argument_list|(
name|fsd
operator|.
name|getLastVolumeFailureDate
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|long
name|expectedCapacityLost
init|=
name|getExpectedCapacityLost
argument_list|(
name|expectCapacityKnown
argument_list|,
name|expectedFailedVolumes
operator|.
name|length
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedCapacityLost
argument_list|,
name|fsd
operator|.
name|getEstimatedCapacityLostTotal
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|fsd
operator|.
name|getLastVolumeFailureDate
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|fsd
operator|.
name|getEstimatedCapacityLostTotal
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Checks NameNode tracking of a particular DataNode for correct reporting of    * failed volumes.    *    * @param dm DatanodeManager to check    * @param dn DataNode to check    * @param expectCapacityKnown if true, then expect that the capacities of the    *     volumes were known before the failures, and therefore the lost capacity    *     can be reported    * @param expectedFailedVolumes expected locations of failed volumes    * @throws Exception if there is any failure    */
DECL|method|checkFailuresAtNameNode (DatanodeManager dm, DataNode dn, boolean expectCapacityKnown, String... expectedFailedVolumes)
specifier|private
name|void
name|checkFailuresAtNameNode
parameter_list|(
name|DatanodeManager
name|dm
parameter_list|,
name|DataNode
name|dn
parameter_list|,
name|boolean
name|expectCapacityKnown
parameter_list|,
name|String
modifier|...
name|expectedFailedVolumes
parameter_list|)
throws|throws
name|Exception
block|{
name|DatanodeDescriptor
name|dd
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getDatanode
argument_list|(
name|dn
operator|.
name|getDatanodeId
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedFailedVolumes
operator|.
name|length
argument_list|,
name|dd
operator|.
name|getVolumeFailures
argument_list|()
argument_list|)
expr_stmt|;
name|VolumeFailureSummary
name|volumeFailureSummary
init|=
name|dd
operator|.
name|getVolumeFailureSummary
argument_list|()
decl_stmt|;
if|if
condition|(
name|expectedFailedVolumes
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|assertArrayEquals
argument_list|(
name|expectedFailedVolumes
argument_list|,
name|volumeFailureSummary
operator|.
name|getFailedStorageLocations
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|volumeFailureSummary
operator|.
name|getLastVolumeFailureDate
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|long
name|expectedCapacityLost
init|=
name|getExpectedCapacityLost
argument_list|(
name|expectCapacityKnown
argument_list|,
name|expectedFailedVolumes
operator|.
name|length
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedCapacityLost
argument_list|,
name|volumeFailureSummary
operator|.
name|getEstimatedCapacityLostTotal
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNull
argument_list|(
name|volumeFailureSummary
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Returns expected capacity lost for use in assertions.  The return value is    * dependent on whether or not it is expected that the volume capacities were    * known prior to the failures.    *    * @param expectCapacityKnown if true, then expect that the capacities of the    *     volumes were known before the failures, and therefore the lost capacity    *     can be reported    * @param expectedVolumeFailuresTotal expected number of failed volumes    * @return estimated capacity lost in bytes    */
DECL|method|getExpectedCapacityLost (boolean expectCapacityKnown, int expectedVolumeFailuresTotal)
specifier|private
name|long
name|getExpectedCapacityLost
parameter_list|(
name|boolean
name|expectCapacityKnown
parameter_list|,
name|int
name|expectedVolumeFailuresTotal
parameter_list|)
block|{
return|return
name|expectCapacityKnown
condition|?
name|expectedVolumeFailuresTotal
operator|*
name|volumeCapacity
else|:
literal|0
return|;
block|}
comment|/**    * Initializes the cluster.    *    * @param numDataNodes number of datanodes    * @param storagesPerDatanode number of storage locations on each datanode    * @param failedVolumesTolerated number of acceptable volume failures    * @throws Exception if there is any failure    */
DECL|method|initCluster (int numDataNodes, int storagesPerDatanode, int failedVolumesTolerated)
specifier|private
name|void
name|initCluster
parameter_list|(
name|int
name|numDataNodes
parameter_list|,
name|int
name|storagesPerDatanode
parameter_list|,
name|int
name|failedVolumesTolerated
parameter_list|)
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
literal|512L
argument_list|)
expr_stmt|;
comment|/*      * Lower the DN heartbeat, DF rate, and recheck interval to one second      * so state about failures and datanode death propagates faster.      */
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DF_INTERVAL_KEY
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_FAILED_VOLUMES_TOLERATED_KEY
argument_list|,
name|failedVolumesTolerated
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDataNodes
argument_list|)
operator|.
name|storagesPerDatanode
argument_list|(
name|storagesPerDatanode
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|dataDir
operator|=
name|cluster
operator|.
name|getDataDirectory
argument_list|()
expr_stmt|;
name|long
name|dnCapacity
init|=
name|DFSTestUtil
operator|.
name|getDatanodeCapacity
argument_list|(
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|volumeCapacity
operator|=
name|dnCapacity
operator|/
name|cluster
operator|.
name|getStoragesPerDatanode
argument_list|()
expr_stmt|;
block|}
comment|/**    * Reconfigure a DataNode by setting a new list of volumes.    *    * @param dn DataNode to reconfigure    * @param newVols new volumes to configure    * @throws Exception if there is any failure    */
DECL|method|reconfigureDataNode (DataNode dn, File... newVols)
specifier|private
specifier|static
name|void
name|reconfigureDataNode
parameter_list|(
name|DataNode
name|dn
parameter_list|,
name|File
modifier|...
name|newVols
parameter_list|)
throws|throws
name|Exception
block|{
name|StringBuilder
name|dnNewDataDirs
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|newVol
range|:
name|newVols
control|)
block|{
if|if
condition|(
name|dnNewDataDirs
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|dnNewDataDirs
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|dnNewDataDirs
operator|.
name|append
argument_list|(
name|newVol
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|dn
operator|.
name|reconfigurePropertyImpl
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DATA_DIR_KEY
argument_list|,
name|dnNewDataDirs
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReconfigurationException
name|e
parameter_list|)
block|{
comment|// This can be thrown if reconfiguration tries to use a failed volume.
comment|// We need to swallow the exception, because some of our tests want to
comment|// cover this case.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not reconfigure DataNode."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

