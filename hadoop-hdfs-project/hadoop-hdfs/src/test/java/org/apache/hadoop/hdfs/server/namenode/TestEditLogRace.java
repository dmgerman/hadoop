begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|impl
operator|.
name|Log4JLogger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|SafeModeAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|EditLogFileInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|NamenodeRole
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|Storage
operator|.
name|StorageDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NNStorage
operator|.
name|NameNodeDirType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * This class tests various synchronization bugs in FSEditLog rolling  * and namespace saving.  */
end_comment

begin_class
DECL|class|TestEditLogRace
specifier|public
class|class
name|TestEditLogRace
block|{
static|static
block|{
operator|(
operator|(
name|Log4JLogger
operator|)
name|FSEditLog
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestEditLogRace
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|NAME_DIR
specifier|private
specifier|static
specifier|final
name|String
name|NAME_DIR
init|=
name|MiniDFSCluster
operator|.
name|getBaseDirectory
argument_list|()
operator|+
literal|"name1"
decl_stmt|;
comment|// This test creates NUM_THREADS threads and each thread continuously writes
comment|// transactions
DECL|field|NUM_THREADS
specifier|static
specifier|final
name|int
name|NUM_THREADS
init|=
literal|16
decl_stmt|;
comment|/**    * The number of times to roll the edit log during the test. Since this    * tests for a race condition, higher numbers are more likely to find    * a bug if it exists, but the test will take longer.    */
DECL|field|NUM_ROLLS
specifier|static
specifier|final
name|int
name|NUM_ROLLS
init|=
literal|30
decl_stmt|;
comment|/**    * The number of times to save the fsimage and create an empty edit log.    */
DECL|field|NUM_SAVE_IMAGE
specifier|static
specifier|final
name|int
name|NUM_SAVE_IMAGE
init|=
literal|30
decl_stmt|;
DECL|field|workers
specifier|private
name|List
argument_list|<
name|Transactions
argument_list|>
name|workers
init|=
operator|new
name|ArrayList
argument_list|<
name|Transactions
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|NUM_DATA_NODES
specifier|private
specifier|static
specifier|final
name|int
name|NUM_DATA_NODES
init|=
literal|1
decl_stmt|;
comment|/**    * Several of the test cases work by introducing a sleep    * into an operation that is usually fast, and then verifying    * that another operation blocks for at least this amount of time.    * This value needs to be significantly longer than the average    * time for an fsync() or enterSafeMode().    */
DECL|field|BLOCK_TIME
specifier|private
specifier|static
specifier|final
name|int
name|BLOCK_TIME
init|=
literal|10
decl_stmt|;
comment|//
comment|// an object that does a bunch of transactions
comment|//
DECL|class|Transactions
specifier|static
class|class
name|Transactions
implements|implements
name|Runnable
block|{
DECL|field|namesystem
name|FSNamesystem
name|namesystem
decl_stmt|;
DECL|field|replication
name|short
name|replication
init|=
literal|3
decl_stmt|;
DECL|field|blockSize
name|long
name|blockSize
init|=
literal|64
decl_stmt|;
DECL|field|stopped
specifier|volatile
name|boolean
name|stopped
init|=
literal|false
decl_stmt|;
DECL|field|thr
specifier|volatile
name|Thread
name|thr
decl_stmt|;
DECL|field|caught
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
name|caught
decl_stmt|;
DECL|method|Transactions (FSNamesystem ns, AtomicReference<Throwable> caught)
name|Transactions
parameter_list|(
name|FSNamesystem
name|ns
parameter_list|,
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
name|caught
parameter_list|)
block|{
name|namesystem
operator|=
name|ns
expr_stmt|;
name|this
operator|.
name|caught
operator|=
name|caught
expr_stmt|;
block|}
comment|// add a bunch of transactions.
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|thr
operator|=
name|Thread
operator|.
name|currentThread
argument_list|()
expr_stmt|;
name|PermissionStatus
name|p
init|=
name|namesystem
operator|.
name|createFsOwnerPermissions
argument_list|(
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|stopped
condition|)
block|{
try|try
block|{
name|String
name|dirname
init|=
literal|"/thr-"
operator|+
name|thr
operator|.
name|getId
argument_list|()
operator|+
literal|"-dir-"
operator|+
name|i
decl_stmt|;
name|namesystem
operator|.
name|mkdirs
argument_list|(
name|dirname
argument_list|,
name|p
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|namesystem
operator|.
name|delete
argument_list|(
name|dirname
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SafeModeException
name|sme
parameter_list|)
block|{
comment|// This is OK - the tests will bring NN in and out of safemode
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Got error in transaction thread"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|caught
operator|.
name|compareAndSet
argument_list|(
literal|null
argument_list|,
name|e
argument_list|)
expr_stmt|;
break|break;
block|}
name|i
operator|++
expr_stmt|;
block|}
block|}
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
name|stopped
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|getThread ()
specifier|public
name|Thread
name|getThread
parameter_list|()
block|{
return|return
name|thr
return|;
block|}
block|}
DECL|method|startTransactionWorkers (FSNamesystem namesystem, AtomicReference<Throwable> caughtErr)
specifier|private
name|void
name|startTransactionWorkers
parameter_list|(
name|FSNamesystem
name|namesystem
parameter_list|,
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
name|caughtErr
parameter_list|)
block|{
comment|// Create threads and make them run transactions concurrently.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_THREADS
condition|;
name|i
operator|++
control|)
block|{
name|Transactions
name|trans
init|=
operator|new
name|Transactions
argument_list|(
name|namesystem
argument_list|,
name|caughtErr
argument_list|)
decl_stmt|;
operator|new
name|Thread
argument_list|(
name|trans
argument_list|,
literal|"TransactionThread-"
operator|+
name|i
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|workers
operator|.
name|add
argument_list|(
name|trans
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|stopTransactionWorkers ()
specifier|private
name|void
name|stopTransactionWorkers
parameter_list|()
block|{
comment|// wait for all transactions to get over
for|for
control|(
name|Transactions
name|worker
range|:
name|workers
control|)
block|{
name|worker
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Transactions
name|worker
range|:
name|workers
control|)
block|{
name|Thread
name|thr
init|=
name|worker
operator|.
name|getThread
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|thr
operator|!=
literal|null
condition|)
name|thr
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{}
block|}
block|}
comment|/**    * Tests rolling edit logs while transactions are ongoing.    */
annotation|@
name|Test
DECL|method|testEditLogRolling ()
specifier|public
name|void
name|testEditLogRolling
parameter_list|()
throws|throws
name|Exception
block|{
comment|// start a cluster
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
name|FileSystem
name|fileSys
init|=
literal|null
decl_stmt|;
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
name|caughtErr
init|=
operator|new
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|NUM_DATA_NODES
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fileSys
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
specifier|final
name|FSNamesystem
name|namesystem
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
decl_stmt|;
name|FSImage
name|fsimage
init|=
name|namesystem
operator|.
name|getFSImage
argument_list|()
decl_stmt|;
name|FSEditLog
name|editLog
init|=
name|fsimage
operator|.
name|getEditLog
argument_list|()
decl_stmt|;
name|StorageDirectory
name|sd
init|=
name|fsimage
operator|.
name|getStorage
argument_list|()
operator|.
name|getStorageDir
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|startTransactionWorkers
argument_list|(
name|namesystem
argument_list|,
name|caughtErr
argument_list|)
expr_stmt|;
name|long
name|previousLogTxId
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_ROLLS
operator|&&
name|caughtErr
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|20
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{}
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting roll "
operator|+
name|i
operator|+
literal|"."
argument_list|)
expr_stmt|;
name|CheckpointSignature
name|sig
init|=
name|namesystem
operator|.
name|rollEditLog
argument_list|()
decl_stmt|;
name|long
name|nextLog
init|=
name|sig
operator|.
name|curSegmentTxId
decl_stmt|;
name|String
name|logFileName
init|=
name|NNStorage
operator|.
name|getFinalizedEditsFileName
argument_list|(
name|previousLogTxId
argument_list|,
name|nextLog
operator|-
literal|1
argument_list|)
decl_stmt|;
name|previousLogTxId
operator|+=
name|verifyEditLogs
argument_list|(
name|namesystem
argument_list|,
name|fsimage
argument_list|,
name|logFileName
argument_list|,
name|previousLogTxId
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|previousLogTxId
argument_list|,
name|nextLog
argument_list|)
expr_stmt|;
name|File
name|expectedLog
init|=
name|NNStorage
operator|.
name|getInProgressEditsFile
argument_list|(
name|sd
argument_list|,
name|previousLogTxId
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expect "
operator|+
name|expectedLog
operator|+
literal|" to exist"
argument_list|,
name|expectedLog
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|stopTransactionWorkers
argument_list|()
expr_stmt|;
if|if
condition|(
name|caughtErr
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|caughtErr
operator|.
name|get
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|fileSys
operator|!=
literal|null
condition|)
name|fileSys
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|verifyEditLogs (FSNamesystem namesystem, FSImage fsimage, String logFileName, long startTxId)
specifier|private
name|long
name|verifyEditLogs
parameter_list|(
name|FSNamesystem
name|namesystem
parameter_list|,
name|FSImage
name|fsimage
parameter_list|,
name|String
name|logFileName
parameter_list|,
name|long
name|startTxId
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|numEdits
init|=
operator|-
literal|1
decl_stmt|;
comment|// Verify that we can read in all the transactions that we have written.
comment|// If there were any corruptions, it is likely that the reading in
comment|// of these transactions will throw an exception.
for|for
control|(
name|StorageDirectory
name|sd
range|:
name|fsimage
operator|.
name|getStorage
argument_list|()
operator|.
name|dirIterable
argument_list|(
name|NameNodeDirType
operator|.
name|EDITS
argument_list|)
control|)
block|{
name|File
name|editFile
init|=
operator|new
name|File
argument_list|(
name|sd
operator|.
name|getCurrentDir
argument_list|()
argument_list|,
name|logFileName
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Verifying file: "
operator|+
name|editFile
argument_list|)
expr_stmt|;
name|FSEditLogLoader
name|loader
init|=
operator|new
name|FSEditLogLoader
argument_list|(
name|namesystem
argument_list|)
decl_stmt|;
name|int
name|numEditsThisLog
init|=
name|loader
operator|.
name|loadFSEdits
argument_list|(
operator|new
name|EditLogFileInputStream
argument_list|(
name|editFile
argument_list|)
argument_list|,
name|startTxId
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Number of edits: "
operator|+
name|numEditsThisLog
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|numEdits
operator|==
operator|-
literal|1
operator|||
name|numEditsThisLog
operator|==
name|numEdits
argument_list|)
expr_stmt|;
name|numEdits
operator|=
name|numEditsThisLog
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|numEdits
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
name|numEdits
return|;
block|}
comment|/**    * Tests saving fs image while transactions are ongoing.    */
annotation|@
name|Test
DECL|method|testSaveNamespace ()
specifier|public
name|void
name|testSaveNamespace
parameter_list|()
throws|throws
name|Exception
block|{
comment|// start a cluster
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
name|FileSystem
name|fileSys
init|=
literal|null
decl_stmt|;
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
name|caughtErr
init|=
operator|new
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|NUM_DATA_NODES
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fileSys
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
specifier|final
name|FSNamesystem
name|namesystem
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
decl_stmt|;
name|FSImage
name|fsimage
init|=
name|namesystem
operator|.
name|getFSImage
argument_list|()
decl_stmt|;
name|FSEditLog
name|editLog
init|=
name|fsimage
operator|.
name|getEditLog
argument_list|()
decl_stmt|;
name|startTransactionWorkers
argument_list|(
name|namesystem
argument_list|,
name|caughtErr
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_SAVE_IMAGE
operator|&&
name|caughtErr
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|20
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{}
name|LOG
operator|.
name|info
argument_list|(
literal|"Save "
operator|+
name|i
operator|+
literal|": entering safe mode"
argument_list|)
expr_stmt|;
name|namesystem
operator|.
name|enterSafeMode
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Verify edit logs before the save
comment|// They should start with the first edit after the checkpoint
name|long
name|logStartTxId
init|=
name|fsimage
operator|.
name|getStorage
argument_list|()
operator|.
name|getMostRecentCheckpointTxId
argument_list|()
operator|+
literal|1
decl_stmt|;
name|verifyEditLogs
argument_list|(
name|namesystem
argument_list|,
name|fsimage
argument_list|,
name|NNStorage
operator|.
name|getInProgressEditsFileName
argument_list|(
name|logStartTxId
argument_list|)
argument_list|,
name|logStartTxId
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Save "
operator|+
name|i
operator|+
literal|": saving namespace"
argument_list|)
expr_stmt|;
name|namesystem
operator|.
name|saveNamespace
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Save "
operator|+
name|i
operator|+
literal|": leaving safemode"
argument_list|)
expr_stmt|;
name|long
name|savedImageTxId
init|=
name|fsimage
operator|.
name|getStorage
argument_list|()
operator|.
name|getMostRecentCheckpointTxId
argument_list|()
decl_stmt|;
comment|// Verify that edit logs post save got finalized and aren't corrupt
name|verifyEditLogs
argument_list|(
name|namesystem
argument_list|,
name|fsimage
argument_list|,
name|NNStorage
operator|.
name|getFinalizedEditsFileName
argument_list|(
name|logStartTxId
argument_list|,
name|savedImageTxId
argument_list|)
argument_list|,
name|logStartTxId
argument_list|)
expr_stmt|;
comment|// The checkpoint id should be 1 less than the last written ID, since
comment|// the log roll writes the "BEGIN" transaction to the new log.
name|assertEquals
argument_list|(
name|fsimage
operator|.
name|getStorage
argument_list|()
operator|.
name|getMostRecentCheckpointTxId
argument_list|()
argument_list|,
name|editLog
operator|.
name|getLastWrittenTxId
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|namesystem
operator|.
name|leaveSafeMode
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Save "
operator|+
name|i
operator|+
literal|": complete"
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|stopTransactionWorkers
argument_list|()
expr_stmt|;
if|if
condition|(
name|caughtErr
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|caughtErr
operator|.
name|get
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|fileSys
operator|!=
literal|null
condition|)
name|fileSys
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getConf ()
specifier|private
name|Configuration
name|getConf
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|FileSystem
operator|.
name|setDefaultUri
argument_list|(
name|conf
argument_list|,
literal|"hdfs://localhost:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HTTP_ADDRESS_KEY
argument_list|,
literal|"0.0.0.0:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_NAME_DIR_KEY
argument_list|,
name|NAME_DIR
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_EDITS_DIR_KEY
argument_list|,
name|NAME_DIR
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_PERMISSIONS_ENABLED_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
comment|/**    * The logSync() method in FSEditLog is unsynchronized whiel syncing    * so that other threads can concurrently enqueue edits while the prior    * sync is ongoing. This test checks that the log is saved correctly    * if the saveImage occurs while the syncing thread is in the unsynchronized middle section.    *     * This replicates the following manual test proposed by Konstantin:    *   I start the name-node in debugger.    *   I do -mkdir and stop the debugger in logSync() just before it does flush.    *   Then I enter safe mode with another client    *   I start saveNamepsace and stop the debugger in    *     FSImage.saveFSImage() -> FSEditLog.createEditLogFile()    *     -> EditLogFileOutputStream.create() ->    *     after truncating the file but before writing LAYOUT_VERSION into it.    *   Then I let logSync() run.    *   Then I terminate the name-node.    *   After that the name-node wont start, since the edits file is broken.    */
annotation|@
name|Test
DECL|method|testSaveImageWhileSyncInProgress ()
specifier|public
name|void
name|testSaveImageWhileSyncInProgress
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|NameNode
operator|.
name|initMetrics
argument_list|(
name|conf
argument_list|,
name|NamenodeRole
operator|.
name|NAMENODE
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|formatNameNode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
specifier|final
name|FSNamesystem
name|namesystem
init|=
operator|new
name|FSNamesystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|FSImage
name|fsimage
init|=
name|namesystem
operator|.
name|getFSImage
argument_list|()
decl_stmt|;
name|FSEditLog
name|editLog
init|=
name|fsimage
operator|.
name|getEditLog
argument_list|()
decl_stmt|;
name|FSEditLog
operator|.
name|JournalAndStream
name|jas
init|=
name|editLog
operator|.
name|getJournals
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|EditLogFileOutputStream
name|spyElos
init|=
name|spy
argument_list|(
operator|(
name|EditLogFileOutputStream
operator|)
name|jas
operator|.
name|getCurrentStream
argument_list|()
argument_list|)
decl_stmt|;
name|jas
operator|.
name|setCurrentStreamForTests
argument_list|(
name|spyElos
argument_list|)
expr_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
name|deferredException
init|=
operator|new
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|CountDownLatch
name|waitToEnterFlush
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|Thread
name|doAnEditThread
init|=
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting mkdirs"
argument_list|)
expr_stmt|;
name|namesystem
operator|.
name|mkdirs
argument_list|(
literal|"/test"
argument_list|,
operator|new
name|PermissionStatus
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|00755
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"mkdirs complete"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ioe
parameter_list|)
block|{
name|deferredException
operator|.
name|set
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
name|waitToEnterFlush
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|Answer
argument_list|<
name|Void
argument_list|>
name|blockingFlush
init|=
operator|new
name|Answer
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Flush called"
argument_list|)
expr_stmt|;
if|if
condition|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|==
name|doAnEditThread
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"edit thread: Telling main thread we made it to flush section..."
argument_list|)
expr_stmt|;
comment|// Signal to main thread that the edit thread is in the racy section
name|waitToEnterFlush
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"edit thread: sleeping for "
operator|+
name|BLOCK_TIME
operator|+
literal|"secs"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|BLOCK_TIME
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Going through to flush. This will allow the main thread to continue."
argument_list|)
expr_stmt|;
block|}
name|invocation
operator|.
name|callRealMethod
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Flush complete"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|doAnswer
argument_list|(
name|blockingFlush
argument_list|)
operator|.
name|when
argument_list|(
name|spyElos
argument_list|)
operator|.
name|flush
argument_list|()
expr_stmt|;
name|doAnEditThread
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Wait for the edit thread to get to the logsync unsynchronized section
name|LOG
operator|.
name|info
argument_list|(
literal|"Main thread: waiting to enter flush..."
argument_list|)
expr_stmt|;
name|waitToEnterFlush
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|deferredException
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Main thread: detected that logSync is in unsynchronized section."
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Trying to enter safe mode."
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"This should block for "
operator|+
name|BLOCK_TIME
operator|+
literal|"sec, since flush will sleep that long"
argument_list|)
expr_stmt|;
name|long
name|st
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|namesystem
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
argument_list|)
expr_stmt|;
name|long
name|et
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Entered safe mode"
argument_list|)
expr_stmt|;
comment|// Make sure we really waited for the flush to complete!
name|assertTrue
argument_list|(
name|et
operator|-
name|st
operator|>
operator|(
name|BLOCK_TIME
operator|-
literal|1
operator|)
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// Once we're in safe mode, save namespace.
name|namesystem
operator|.
name|saveNamespace
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Joining on edit thread..."
argument_list|)
expr_stmt|;
name|doAnEditThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|deferredException
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// We did 3 edits: begin, txn, and end
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|verifyEditLogs
argument_list|(
name|namesystem
argument_list|,
name|fsimage
argument_list|,
name|NNStorage
operator|.
name|getFinalizedEditsFileName
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// after the save, just the one "begin"
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|verifyEditLogs
argument_list|(
name|namesystem
argument_list|,
name|fsimage
argument_list|,
name|NNStorage
operator|.
name|getInProgressEditsFileName
argument_list|(
literal|4
argument_list|)
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Closing namesystem"
argument_list|)
expr_stmt|;
if|if
condition|(
name|namesystem
operator|!=
literal|null
condition|)
name|namesystem
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Most of the FSNamesystem methods have a synchronized section where they    * update the name system itself and write to the edit log, and then    * unsynchronized, they call logSync. This test verifies that, if an    * operation has written to the edit log but not yet synced it,    * we wait for that sync before entering safe mode.    */
annotation|@
name|Test
DECL|method|testSaveRightBeforeSync ()
specifier|public
name|void
name|testSaveRightBeforeSync
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|NameNode
operator|.
name|initMetrics
argument_list|(
name|conf
argument_list|,
name|NamenodeRole
operator|.
name|NAMENODE
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|formatNameNode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
specifier|final
name|FSNamesystem
name|namesystem
init|=
operator|new
name|FSNamesystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|FSImage
name|fsimage
init|=
name|namesystem
operator|.
name|getFSImage
argument_list|()
decl_stmt|;
name|FSEditLog
name|editLog
init|=
name|spy
argument_list|(
name|fsimage
operator|.
name|getEditLog
argument_list|()
argument_list|)
decl_stmt|;
name|fsimage
operator|.
name|editLog
operator|=
name|editLog
expr_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
name|deferredException
init|=
operator|new
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|CountDownLatch
name|waitToEnterSync
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|Thread
name|doAnEditThread
init|=
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting mkdirs"
argument_list|)
expr_stmt|;
name|namesystem
operator|.
name|mkdirs
argument_list|(
literal|"/test"
argument_list|,
operator|new
name|PermissionStatus
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|00755
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"mkdirs complete"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ioe
parameter_list|)
block|{
name|deferredException
operator|.
name|set
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
name|waitToEnterSync
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|Answer
argument_list|<
name|Void
argument_list|>
name|blockingSync
init|=
operator|new
name|Answer
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"logSync called"
argument_list|)
expr_stmt|;
if|if
condition|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|==
name|doAnEditThread
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"edit thread: Telling main thread we made it just before logSync..."
argument_list|)
expr_stmt|;
name|waitToEnterSync
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"edit thread: sleeping for "
operator|+
name|BLOCK_TIME
operator|+
literal|"secs"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|BLOCK_TIME
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Going through to logSync. This will allow the main thread to continue."
argument_list|)
expr_stmt|;
block|}
name|invocation
operator|.
name|callRealMethod
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"logSync complete"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|doAnswer
argument_list|(
name|blockingSync
argument_list|)
operator|.
name|when
argument_list|(
name|editLog
argument_list|)
operator|.
name|logSync
argument_list|()
expr_stmt|;
name|doAnEditThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Main thread: waiting to just before logSync..."
argument_list|)
expr_stmt|;
name|waitToEnterSync
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|deferredException
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Main thread: detected that logSync about to be called."
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Trying to enter safe mode."
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"This should block for "
operator|+
name|BLOCK_TIME
operator|+
literal|"sec, since we have pending edits"
argument_list|)
expr_stmt|;
name|long
name|st
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|namesystem
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
argument_list|)
expr_stmt|;
name|long
name|et
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Entered safe mode"
argument_list|)
expr_stmt|;
comment|// Make sure we really waited for the flush to complete!
name|assertTrue
argument_list|(
name|et
operator|-
name|st
operator|>
operator|(
name|BLOCK_TIME
operator|-
literal|1
operator|)
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// Once we're in safe mode, save namespace.
name|namesystem
operator|.
name|saveNamespace
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Joining on edit thread..."
argument_list|)
expr_stmt|;
name|doAnEditThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|deferredException
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// We did 3 edits: begin, txn, and end
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|verifyEditLogs
argument_list|(
name|namesystem
argument_list|,
name|fsimage
argument_list|,
name|NNStorage
operator|.
name|getFinalizedEditsFileName
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// after the save, just the one "begin"
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|verifyEditLogs
argument_list|(
name|namesystem
argument_list|,
name|fsimage
argument_list|,
name|NNStorage
operator|.
name|getInProgressEditsFileName
argument_list|(
literal|4
argument_list|)
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Closing namesystem"
argument_list|)
expr_stmt|;
if|if
condition|(
name|namesystem
operator|!=
literal|null
condition|)
name|namesystem
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

