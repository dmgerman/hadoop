begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.qjournal
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|server
operator|.
name|JournalNode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_class
DECL|class|MiniJournalCluster
specifier|public
class|class
name|MiniJournalCluster
block|{
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
block|{
DECL|field|baseDir
specifier|private
name|String
name|baseDir
decl_stmt|;
DECL|field|numJournalNodes
specifier|private
name|int
name|numJournalNodes
init|=
literal|3
decl_stmt|;
DECL|field|format
specifier|private
name|boolean
name|format
init|=
literal|true
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|method|Builder (Configuration conf)
specifier|public
name|Builder
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
DECL|method|baseDir (String d)
specifier|public
name|Builder
name|baseDir
parameter_list|(
name|String
name|d
parameter_list|)
block|{
name|this
operator|.
name|baseDir
operator|=
name|d
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|numJournalNodes (int n)
specifier|public
name|Builder
name|numJournalNodes
parameter_list|(
name|int
name|n
parameter_list|)
block|{
name|this
operator|.
name|numJournalNodes
operator|=
name|n
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|format (boolean f)
specifier|public
name|Builder
name|format
parameter_list|(
name|boolean
name|f
parameter_list|)
block|{
name|this
operator|.
name|format
operator|=
name|f
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|build ()
specifier|public
name|MiniJournalCluster
name|build
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|MiniJournalCluster
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MiniJournalCluster
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|baseDir
specifier|private
name|File
name|baseDir
decl_stmt|;
DECL|field|nodes
specifier|private
name|JournalNode
name|nodes
index|[]
decl_stmt|;
DECL|field|ipcAddrs
specifier|private
name|InetSocketAddress
name|ipcAddrs
index|[]
decl_stmt|;
DECL|field|httpAddrs
specifier|private
name|InetSocketAddress
name|httpAddrs
index|[]
decl_stmt|;
DECL|method|MiniJournalCluster (Builder b)
specifier|private
name|MiniJournalCluster
parameter_list|(
name|Builder
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting MiniJournalCluster with "
operator|+
name|b
operator|.
name|numJournalNodes
operator|+
literal|" journal nodes"
argument_list|)
expr_stmt|;
if|if
condition|(
name|b
operator|.
name|baseDir
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|baseDir
operator|=
operator|new
name|File
argument_list|(
name|b
operator|.
name|baseDir
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|baseDir
operator|=
operator|new
name|File
argument_list|(
name|MiniDFSCluster
operator|.
name|getBaseDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|nodes
operator|=
operator|new
name|JournalNode
index|[
name|b
operator|.
name|numJournalNodes
index|]
expr_stmt|;
name|ipcAddrs
operator|=
operator|new
name|InetSocketAddress
index|[
name|b
operator|.
name|numJournalNodes
index|]
expr_stmt|;
name|httpAddrs
operator|=
operator|new
name|InetSocketAddress
index|[
name|b
operator|.
name|numJournalNodes
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|b
operator|.
name|numJournalNodes
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|b
operator|.
name|format
condition|)
block|{
name|File
name|dir
init|=
name|getStorageDir
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Fully deleting JN directory "
operator|+
name|dir
argument_list|)
expr_stmt|;
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
name|nodes
index|[
name|i
index|]
operator|=
operator|new
name|JournalNode
argument_list|()
expr_stmt|;
name|nodes
index|[
name|i
index|]
operator|.
name|setConf
argument_list|(
name|createConfForNode
argument_list|(
name|b
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|nodes
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
name|ipcAddrs
index|[
name|i
index|]
operator|=
name|nodes
index|[
name|i
index|]
operator|.
name|getBoundIpcAddress
argument_list|()
expr_stmt|;
name|httpAddrs
index|[
name|i
index|]
operator|=
name|nodes
index|[
name|i
index|]
operator|.
name|getBoundHttpAddress
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Set up the given Configuration object to point to the set of JournalNodes     * in this cluster.    */
DECL|method|getQuorumJournalURI (String jid)
specifier|public
name|URI
name|getQuorumJournalURI
parameter_list|(
name|String
name|jid
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|addrs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|InetSocketAddress
name|addr
range|:
name|ipcAddrs
control|)
block|{
name|addrs
operator|.
name|add
argument_list|(
literal|"127.0.0.1:"
operator|+
name|addr
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|addrsVal
init|=
name|Joiner
operator|.
name|on
argument_list|(
literal|";"
argument_list|)
operator|.
name|join
argument_list|(
name|addrs
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Setting logger addresses to: "
operator|+
name|addrsVal
argument_list|)
expr_stmt|;
try|try
block|{
return|return
operator|new
name|URI
argument_list|(
literal|"qjournal://"
operator|+
name|addrsVal
operator|+
literal|"/"
operator|+
name|jid
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Start the JournalNodes in the cluster.    */
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|JournalNode
name|jn
range|:
name|nodes
control|)
block|{
name|jn
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Shutdown all of the JournalNodes in the cluster.    * @throws IOException if one or more nodes failed to stop    */
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
throws|throws
name|IOException
block|{
name|boolean
name|failed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|JournalNode
name|jn
range|:
name|nodes
control|)
block|{
try|try
block|{
name|jn
operator|.
name|stopAndJoin
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|failed
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to stop journal node "
operator|+
name|jn
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failed
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to shut down. Check log for details"
argument_list|)
throw|;
block|}
block|}
DECL|method|createConfForNode (Builder b, int idx)
specifier|private
name|Configuration
name|createConfForNode
parameter_list|(
name|Builder
name|b
parameter_list|,
name|int
name|idx
parameter_list|)
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
name|b
operator|.
name|conf
argument_list|)
decl_stmt|;
name|File
name|logDir
init|=
name|getStorageDir
argument_list|(
name|idx
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_JOURNALNODE_EDITS_DIR_KEY
argument_list|,
name|logDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_JOURNALNODE_RPC_ADDRESS_KEY
argument_list|,
literal|"0.0.0.0:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_JOURNALNODE_HTTP_ADDRESS_KEY
argument_list|,
literal|"0.0.0.0:0"
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
DECL|method|getStorageDir (int idx)
specifier|public
name|File
name|getStorageDir
parameter_list|(
name|int
name|idx
parameter_list|)
block|{
return|return
operator|new
name|File
argument_list|(
name|baseDir
argument_list|,
literal|"journalnode-"
operator|+
name|idx
argument_list|)
return|;
block|}
DECL|method|getCurrentDir (int idx, String jid)
specifier|public
name|File
name|getCurrentDir
parameter_list|(
name|int
name|idx
parameter_list|,
name|String
name|jid
parameter_list|)
block|{
return|return
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|getStorageDir
argument_list|(
name|idx
argument_list|)
argument_list|,
name|jid
argument_list|)
argument_list|,
literal|"current"
argument_list|)
return|;
block|}
DECL|method|getJournalNode (int i)
specifier|public
name|JournalNode
name|getJournalNode
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|nodes
index|[
name|i
index|]
return|;
block|}
DECL|method|restartJournalNode (int i)
specifier|public
name|void
name|restartJournalNode
parameter_list|(
name|int
name|i
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
name|nodes
index|[
name|i
index|]
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodes
index|[
name|i
index|]
operator|.
name|isStarted
argument_list|()
condition|)
block|{
name|nodes
index|[
name|i
index|]
operator|.
name|stopAndJoin
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_JOURNALNODE_RPC_ADDRESS_KEY
argument_list|,
literal|"127.0.0.1:"
operator|+
name|ipcAddrs
index|[
name|i
index|]
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_JOURNALNODE_HTTP_ADDRESS_KEY
argument_list|,
literal|"127.0.0.1:"
operator|+
name|httpAddrs
index|[
name|i
index|]
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|JournalNode
name|jn
init|=
operator|new
name|JournalNode
argument_list|()
decl_stmt|;
name|jn
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|jn
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|getQuorumSize ()
specifier|public
name|int
name|getQuorumSize
parameter_list|()
block|{
return|return
name|nodes
operator|.
name|length
operator|/
literal|2
operator|+
literal|1
return|;
block|}
DECL|method|getNumNodes ()
specifier|public
name|int
name|getNumNodes
parameter_list|()
block|{
return|return
name|nodes
operator|.
name|length
return|;
block|}
block|}
end_class

end_unit

