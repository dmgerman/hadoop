begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestCyclicIteration
specifier|public
class|class
name|TestCyclicIteration
block|{
annotation|@
name|Test
DECL|method|testCyclicIteration ()
specifier|public
name|void
name|testCyclicIteration
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<
literal|5
condition|;
name|n
operator|++
control|)
block|{
name|checkCyclicIteration
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkCyclicIteration (int numOfElements)
specifier|private
specifier|static
name|void
name|checkCyclicIteration
parameter_list|(
name|int
name|numOfElements
parameter_list|)
block|{
comment|//create a tree map
specifier|final
name|NavigableMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|map
init|=
operator|new
name|TreeMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|Integer
index|[]
name|integers
init|=
operator|new
name|Integer
index|[
name|numOfElements
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|integers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|integers
index|[
name|i
index|]
operator|=
literal|2
operator|*
name|i
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|integers
index|[
name|i
index|]
argument_list|,
name|integers
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\n\nintegers="
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|integers
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"map="
operator|+
name|map
argument_list|)
expr_stmt|;
comment|//try starting everywhere
for|for
control|(
name|int
name|start
init|=
operator|-
literal|1
init|;
name|start
operator|<=
literal|2
operator|*
name|integers
operator|.
name|length
operator|-
literal|1
condition|;
name|start
operator|++
control|)
block|{
comment|//get a cyclic iteration
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|iteration
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|e
range|:
operator|new
name|CyclicIteration
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|(
name|map
argument_list|,
name|start
argument_list|)
control|)
block|{
name|iteration
operator|.
name|add
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"start="
operator|+
name|start
operator|+
literal|", iteration="
operator|+
name|iteration
argument_list|)
expr_stmt|;
comment|//verify results
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|integers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|j
init|=
operator|(
operator|(
name|start
operator|+
literal|2
operator|)
operator|/
literal|2
operator|+
name|i
operator|)
operator|%
name|integers
operator|.
name|length
decl_stmt|;
name|assertEquals
argument_list|(
literal|"i="
operator|+
name|i
operator|+
literal|", j="
operator|+
name|j
argument_list|,
name|iteration
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|integers
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

