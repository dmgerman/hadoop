begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.ha
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ha
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ha
operator|.
name|ConfiguredFailoverProxyProvider
operator|.
name|ProxyFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamenodeProtocols
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|MultiException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_class
DECL|class|TestRequestHedgingProxyProvider
specifier|public
class|class
name|TestRequestHedgingProxyProvider
block|{
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|nnUri
specifier|private
name|URI
name|nnUri
decl_stmt|;
DECL|field|ns
specifier|private
name|String
name|ns
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|URISyntaxException
block|{
name|ns
operator|=
literal|"mycluster-"
operator|+
name|Time
operator|.
name|monotonicNow
argument_list|()
expr_stmt|;
name|nnUri
operator|=
operator|new
name|URI
argument_list|(
literal|"hdfs://"
operator|+
name|ns
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMESERVICES
argument_list|,
name|ns
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HA_NAMENODES_KEY_PREFIX
operator|+
literal|"."
operator|+
name|ns
argument_list|,
literal|"nn1,nn2"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_RPC_ADDRESS_KEY
operator|+
literal|"."
operator|+
name|ns
operator|+
literal|".nn1"
argument_list|,
literal|"machine1.foo.bar:8020"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_RPC_ADDRESS_KEY
operator|+
literal|"."
operator|+
name|ns
operator|+
literal|".nn2"
argument_list|,
literal|"machine2.foo.bar:8020"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHedgingWhenOneFails ()
specifier|public
name|void
name|testHedgingWhenOneFails
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|NamenodeProtocols
name|goodMock
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|NamenodeProtocols
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|goodMock
operator|.
name|getStats
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|long
index|[]
block|{
literal|1
block|}
argument_list|)
expr_stmt|;
specifier|final
name|NamenodeProtocols
name|badMock
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|NamenodeProtocols
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|badMock
operator|.
name|getStats
argument_list|()
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"Bad mock !!"
argument_list|)
argument_list|)
expr_stmt|;
name|RequestHedgingProxyProvider
argument_list|<
name|NamenodeProtocols
argument_list|>
name|provider
init|=
operator|new
name|RequestHedgingProxyProvider
argument_list|<>
argument_list|(
name|conf
argument_list|,
name|nnUri
argument_list|,
name|NamenodeProtocols
operator|.
name|class
argument_list|,
name|createFactory
argument_list|(
name|goodMock
argument_list|,
name|badMock
argument_list|)
argument_list|)
decl_stmt|;
name|long
index|[]
name|stats
init|=
name|provider
operator|.
name|getProxy
argument_list|()
operator|.
name|proxy
operator|.
name|getStats
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|stats
operator|.
name|length
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|badMock
argument_list|)
operator|.
name|getStats
argument_list|()
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|goodMock
argument_list|)
operator|.
name|getStats
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHedgingWhenOneIsSlow ()
specifier|public
name|void
name|testHedgingWhenOneIsSlow
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|NamenodeProtocols
name|goodMock
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|NamenodeProtocols
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|goodMock
operator|.
name|getStats
argument_list|()
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|long
index|[]
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
index|[]
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
return|return
operator|new
name|long
index|[]
block|{
literal|1
block|}
return|;
block|}
block|}
argument_list|)
expr_stmt|;
specifier|final
name|NamenodeProtocols
name|badMock
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|NamenodeProtocols
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|badMock
operator|.
name|getStats
argument_list|()
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"Bad mock !!"
argument_list|)
argument_list|)
expr_stmt|;
name|RequestHedgingProxyProvider
argument_list|<
name|NamenodeProtocols
argument_list|>
name|provider
init|=
operator|new
name|RequestHedgingProxyProvider
argument_list|<>
argument_list|(
name|conf
argument_list|,
name|nnUri
argument_list|,
name|NamenodeProtocols
operator|.
name|class
argument_list|,
name|createFactory
argument_list|(
name|goodMock
argument_list|,
name|badMock
argument_list|)
argument_list|)
decl_stmt|;
name|long
index|[]
name|stats
init|=
name|provider
operator|.
name|getProxy
argument_list|()
operator|.
name|proxy
operator|.
name|getStats
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|stats
operator|.
name|length
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|badMock
argument_list|)
operator|.
name|getStats
argument_list|()
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|goodMock
argument_list|)
operator|.
name|getStats
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHedgingWhenBothFail ()
specifier|public
name|void
name|testHedgingWhenBothFail
parameter_list|()
throws|throws
name|Exception
block|{
name|NamenodeProtocols
name|badMock
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|NamenodeProtocols
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|badMock
operator|.
name|getStats
argument_list|()
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"Bad mock !!"
argument_list|)
argument_list|)
expr_stmt|;
name|NamenodeProtocols
name|worseMock
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|NamenodeProtocols
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|worseMock
operator|.
name|getStats
argument_list|()
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"Worse mock !!"
argument_list|)
argument_list|)
expr_stmt|;
name|RequestHedgingProxyProvider
argument_list|<
name|NamenodeProtocols
argument_list|>
name|provider
init|=
operator|new
name|RequestHedgingProxyProvider
argument_list|<>
argument_list|(
name|conf
argument_list|,
name|nnUri
argument_list|,
name|NamenodeProtocols
operator|.
name|class
argument_list|,
name|createFactory
argument_list|(
name|badMock
argument_list|,
name|worseMock
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|provider
operator|.
name|getProxy
argument_list|()
operator|.
name|proxy
operator|.
name|getStats
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should fail since both namenodes throw IOException !!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|instanceof
name|MultiException
argument_list|)
expr_stmt|;
block|}
name|Mockito
operator|.
name|verify
argument_list|(
name|badMock
argument_list|)
operator|.
name|getStats
argument_list|()
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|worseMock
argument_list|)
operator|.
name|getStats
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPerformFailover ()
specifier|public
name|void
name|testPerformFailover
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|AtomicInteger
name|counter
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|int
index|[]
name|isGood
init|=
block|{
literal|1
block|}
decl_stmt|;
specifier|final
name|NamenodeProtocols
name|goodMock
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|NamenodeProtocols
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|goodMock
operator|.
name|getStats
argument_list|()
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|long
index|[]
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
index|[]
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|counter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
if|if
condition|(
name|isGood
index|[
literal|0
index|]
operator|==
literal|1
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
return|return
operator|new
name|long
index|[]
block|{
literal|1
block|}
return|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Was Good mock !!"
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
specifier|final
name|NamenodeProtocols
name|badMock
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|NamenodeProtocols
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|badMock
operator|.
name|getStats
argument_list|()
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|long
index|[]
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
index|[]
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|counter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
if|if
condition|(
name|isGood
index|[
literal|0
index|]
operator|==
literal|2
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
return|return
operator|new
name|long
index|[]
block|{
literal|2
block|}
return|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Bad mock !!"
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
name|RequestHedgingProxyProvider
argument_list|<
name|NamenodeProtocols
argument_list|>
name|provider
init|=
operator|new
name|RequestHedgingProxyProvider
argument_list|<>
argument_list|(
name|conf
argument_list|,
name|nnUri
argument_list|,
name|NamenodeProtocols
operator|.
name|class
argument_list|,
name|createFactory
argument_list|(
name|goodMock
argument_list|,
name|badMock
argument_list|)
argument_list|)
decl_stmt|;
name|long
index|[]
name|stats
init|=
name|provider
operator|.
name|getProxy
argument_list|()
operator|.
name|proxy
operator|.
name|getStats
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|stats
operator|.
name|length
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|counter
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|badMock
argument_list|)
operator|.
name|getStats
argument_list|()
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|goodMock
argument_list|)
operator|.
name|getStats
argument_list|()
expr_stmt|;
name|stats
operator|=
name|provider
operator|.
name|getProxy
argument_list|()
operator|.
name|proxy
operator|.
name|getStats
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|stats
operator|.
name|length
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// Ensure only the previous successful one is invoked
name|Mockito
operator|.
name|verifyNoMoreInteractions
argument_list|(
name|badMock
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|counter
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// Flip to standby.. so now this should fail
name|isGood
index|[
literal|0
index|]
operator|=
literal|2
expr_stmt|;
try|try
block|{
name|provider
operator|.
name|getProxy
argument_list|()
operator|.
name|proxy
operator|.
name|getStats
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should fail since previously successful proxy now fails "
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ex
operator|instanceof
name|IOException
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|counter
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|provider
operator|.
name|performFailover
argument_list|(
name|provider
operator|.
name|getProxy
argument_list|()
operator|.
name|proxy
argument_list|)
expr_stmt|;
name|stats
operator|=
name|provider
operator|.
name|getProxy
argument_list|()
operator|.
name|proxy
operator|.
name|getStats
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|stats
operator|.
name|length
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// Counter shuodl update only once
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|counter
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|stats
operator|=
name|provider
operator|.
name|getProxy
argument_list|()
operator|.
name|proxy
operator|.
name|getStats
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|stats
operator|.
name|length
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// Counter updates only once now
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|counter
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// Flip back to old active.. so now this should fail
name|isGood
index|[
literal|0
index|]
operator|=
literal|1
expr_stmt|;
try|try
block|{
name|provider
operator|.
name|getProxy
argument_list|()
operator|.
name|proxy
operator|.
name|getStats
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should fail since previously successful proxy now fails "
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ex
operator|instanceof
name|IOException
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|counter
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|provider
operator|.
name|performFailover
argument_list|(
name|provider
operator|.
name|getProxy
argument_list|()
operator|.
name|proxy
argument_list|)
expr_stmt|;
name|stats
operator|=
name|provider
operator|.
name|getProxy
argument_list|()
operator|.
name|proxy
operator|.
name|getStats
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|stats
operator|.
name|length
operator|==
literal|1
argument_list|)
expr_stmt|;
comment|// Ensure correct proxy was called
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPerformFailoverWith3Proxies ()
specifier|public
name|void
name|testPerformFailoverWith3Proxies
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HA_NAMENODES_KEY_PREFIX
operator|+
literal|"."
operator|+
name|ns
argument_list|,
literal|"nn1,nn2,nn3"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_RPC_ADDRESS_KEY
operator|+
literal|"."
operator|+
name|ns
operator|+
literal|".nn3"
argument_list|,
literal|"machine3.foo.bar:8020"
argument_list|)
expr_stmt|;
specifier|final
name|AtomicInteger
name|counter
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|int
index|[]
name|isGood
init|=
block|{
literal|1
block|}
decl_stmt|;
specifier|final
name|NamenodeProtocols
name|goodMock
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|NamenodeProtocols
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|goodMock
operator|.
name|getStats
argument_list|()
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|long
index|[]
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
index|[]
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|counter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
if|if
condition|(
name|isGood
index|[
literal|0
index|]
operator|==
literal|1
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
return|return
operator|new
name|long
index|[]
block|{
literal|1
block|}
return|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Was Good mock !!"
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
specifier|final
name|NamenodeProtocols
name|badMock
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|NamenodeProtocols
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|badMock
operator|.
name|getStats
argument_list|()
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|long
index|[]
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
index|[]
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|counter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
if|if
condition|(
name|isGood
index|[
literal|0
index|]
operator|==
literal|2
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
return|return
operator|new
name|long
index|[]
block|{
literal|2
block|}
return|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Bad mock !!"
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
specifier|final
name|NamenodeProtocols
name|worseMock
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|NamenodeProtocols
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|worseMock
operator|.
name|getStats
argument_list|()
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|long
index|[]
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
index|[]
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|counter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
if|if
condition|(
name|isGood
index|[
literal|0
index|]
operator|==
literal|3
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
return|return
operator|new
name|long
index|[]
block|{
literal|3
block|}
return|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Worse mock !!"
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
name|RequestHedgingProxyProvider
argument_list|<
name|NamenodeProtocols
argument_list|>
name|provider
init|=
operator|new
name|RequestHedgingProxyProvider
argument_list|<>
argument_list|(
name|conf
argument_list|,
name|nnUri
argument_list|,
name|NamenodeProtocols
operator|.
name|class
argument_list|,
name|createFactory
argument_list|(
name|goodMock
argument_list|,
name|badMock
argument_list|,
name|worseMock
argument_list|)
argument_list|)
decl_stmt|;
name|long
index|[]
name|stats
init|=
name|provider
operator|.
name|getProxy
argument_list|()
operator|.
name|proxy
operator|.
name|getStats
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|stats
operator|.
name|length
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|counter
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|badMock
argument_list|)
operator|.
name|getStats
argument_list|()
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|goodMock
argument_list|)
operator|.
name|getStats
argument_list|()
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|worseMock
argument_list|)
operator|.
name|getStats
argument_list|()
expr_stmt|;
name|stats
operator|=
name|provider
operator|.
name|getProxy
argument_list|()
operator|.
name|proxy
operator|.
name|getStats
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|stats
operator|.
name|length
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// Ensure only the previous successful one is invoked
name|Mockito
operator|.
name|verifyNoMoreInteractions
argument_list|(
name|badMock
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verifyNoMoreInteractions
argument_list|(
name|worseMock
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|counter
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// Flip to standby.. so now this should fail
name|isGood
index|[
literal|0
index|]
operator|=
literal|2
expr_stmt|;
try|try
block|{
name|provider
operator|.
name|getProxy
argument_list|()
operator|.
name|proxy
operator|.
name|getStats
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should fail since previously successful proxy now fails "
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ex
operator|instanceof
name|IOException
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|counter
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|provider
operator|.
name|performFailover
argument_list|(
name|provider
operator|.
name|getProxy
argument_list|()
operator|.
name|proxy
argument_list|)
expr_stmt|;
name|stats
operator|=
name|provider
operator|.
name|getProxy
argument_list|()
operator|.
name|proxy
operator|.
name|getStats
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|stats
operator|.
name|length
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// Counter updates twice since both proxies are tried on failure
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|counter
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|stats
operator|=
name|provider
operator|.
name|getProxy
argument_list|()
operator|.
name|proxy
operator|.
name|getStats
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|stats
operator|.
name|length
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// Counter updates only once now
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|counter
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// Flip to Other standby.. so now this should fail
name|isGood
index|[
literal|0
index|]
operator|=
literal|3
expr_stmt|;
try|try
block|{
name|provider
operator|.
name|getProxy
argument_list|()
operator|.
name|proxy
operator|.
name|getStats
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should fail since previously successful proxy now fails "
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ex
operator|instanceof
name|IOException
argument_list|)
expr_stmt|;
block|}
comment|// Counter should ipdate only 1 time
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|counter
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|provider
operator|.
name|performFailover
argument_list|(
name|provider
operator|.
name|getProxy
argument_list|()
operator|.
name|proxy
argument_list|)
expr_stmt|;
name|stats
operator|=
name|provider
operator|.
name|getProxy
argument_list|()
operator|.
name|proxy
operator|.
name|getStats
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|stats
operator|.
name|length
operator|==
literal|1
argument_list|)
expr_stmt|;
comment|// Ensure correct proxy was called
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|stats
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// Counter updates twice since both proxies are tried on failure
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|counter
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|stats
operator|=
name|provider
operator|.
name|getProxy
argument_list|()
operator|.
name|proxy
operator|.
name|getStats
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|stats
operator|.
name|length
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|stats
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// Counter updates only once now
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|12
argument_list|,
name|counter
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|createFactory ( NamenodeProtocols... protos)
specifier|private
name|ProxyFactory
argument_list|<
name|NamenodeProtocols
argument_list|>
name|createFactory
parameter_list|(
name|NamenodeProtocols
modifier|...
name|protos
parameter_list|)
block|{
specifier|final
name|Iterator
argument_list|<
name|NamenodeProtocols
argument_list|>
name|iterator
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|protos
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
return|return
operator|new
name|ProxyFactory
argument_list|<
name|NamenodeProtocols
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|NamenodeProtocols
name|createProxy
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|InetSocketAddress
name|nnAddr
parameter_list|,
name|Class
argument_list|<
name|NamenodeProtocols
argument_list|>
name|xface
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|,
name|boolean
name|withRetries
parameter_list|,
name|AtomicBoolean
name|fallbackToSimpleAuth
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|iterator
operator|.
name|next
argument_list|()
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

