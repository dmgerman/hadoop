begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.snapshot
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyObject
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doReturn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshotException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodesInPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|LeaseManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Testing snapshot manager functionality.  */
end_comment

begin_class
DECL|class|TestSnapshotManager
specifier|public
class|class
name|TestSnapshotManager
block|{
DECL|field|testMaxSnapshotLimit
specifier|private
specifier|static
specifier|final
name|int
name|testMaxSnapshotLimit
init|=
literal|7
decl_stmt|;
comment|/**    * Test that the global limit on snapshots is honored.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testSnapshotLimits ()
specifier|public
name|void
name|testSnapshotLimits
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Setup mock objects for SnapshotManager.createSnapshot.
comment|//
name|LeaseManager
name|leaseManager
init|=
name|mock
argument_list|(
name|LeaseManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|INodeDirectory
name|ids
init|=
name|mock
argument_list|(
name|INodeDirectory
operator|.
name|class
argument_list|)
decl_stmt|;
name|FSDirectory
name|fsdir
init|=
name|mock
argument_list|(
name|FSDirectory
operator|.
name|class
argument_list|)
decl_stmt|;
name|INodesInPath
name|iip
init|=
name|mock
argument_list|(
name|INodesInPath
operator|.
name|class
argument_list|)
decl_stmt|;
name|SnapshotManager
name|sm
init|=
name|spy
argument_list|(
operator|new
name|SnapshotManager
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|,
name|fsdir
argument_list|)
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|ids
argument_list|)
operator|.
name|when
argument_list|(
name|sm
argument_list|)
operator|.
name|getSnapshottableRoot
argument_list|(
operator|(
name|INodesInPath
operator|)
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
name|testMaxSnapshotLimit
argument_list|)
operator|.
name|when
argument_list|(
name|sm
argument_list|)
operator|.
name|getMaxSnapshotID
argument_list|()
expr_stmt|;
comment|// Create testMaxSnapshotLimit snapshots. These should all succeed.
comment|//
for|for
control|(
name|Integer
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testMaxSnapshotLimit
condition|;
operator|++
name|i
control|)
block|{
name|sm
operator|.
name|createSnapshot
argument_list|(
name|leaseManager
argument_list|,
name|iip
argument_list|,
literal|"dummy"
argument_list|,
name|i
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Attempt to create one more snapshot. This should fail due to snapshot
comment|// ID rollover.
comment|//
try|try
block|{
name|sm
operator|.
name|createSnapshot
argument_list|(
name|leaseManager
argument_list|,
name|iip
argument_list|,
literal|"dummy"
argument_list|,
literal|"shouldFailSnapshot"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected SnapshotException not thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SnapshotException
name|se
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringUtils
operator|.
name|toLowerCase
argument_list|(
name|se
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"rollover"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Delete a snapshot to free up a slot.
comment|//
name|sm
operator|.
name|deleteSnapshot
argument_list|(
name|iip
argument_list|,
literal|""
argument_list|,
name|mock
argument_list|(
name|INode
operator|.
name|ReclaimContext
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// Attempt to create a snapshot again. It should still fail due
comment|// to snapshot ID rollover.
comment|//
try|try
block|{
name|sm
operator|.
name|createSnapshot
argument_list|(
name|leaseManager
argument_list|,
name|iip
argument_list|,
literal|"dummy"
argument_list|,
literal|"shouldFailSnapshot2"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected SnapshotException not thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SnapshotException
name|se
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringUtils
operator|.
name|toLowerCase
argument_list|(
name|se
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"rollover"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

