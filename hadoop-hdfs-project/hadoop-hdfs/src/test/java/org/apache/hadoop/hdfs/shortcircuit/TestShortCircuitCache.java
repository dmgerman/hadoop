begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.shortcircuit
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|shortcircuit
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_CLIENT_CONTEXT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_CLIENT_DOMAIN_SOCKET_DATA_TRAFFIC
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_DOMAIN_SOCKET_PATH_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|net
operator|.
name|jcip
operator|.
name|annotations
operator|.
name|NotThreadSafe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|map
operator|.
name|LinkedMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|mutable
operator|.
name|MutableBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|impl
operator|.
name|BlockReaderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|impl
operator|.
name|BlockReaderTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|ExtendedBlockId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|net
operator|.
name|DomainPeer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
operator|.
name|DatanodeInfoBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|BlockMetadataHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNodeFaultInjector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|ShortCircuitRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|ShortCircuitRegistry
operator|.
name|RegisteredShm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|shortcircuit
operator|.
name|DfsClientShmManager
operator|.
name|PerDatanodeVisitorInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|shortcircuit
operator|.
name|DfsClientShmManager
operator|.
name|Visitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|shortcircuit
operator|.
name|ShortCircuitCache
operator|.
name|CacheVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|shortcircuit
operator|.
name|ShortCircuitCache
operator|.
name|ShortCircuitReplicaCreator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|shortcircuit
operator|.
name|ShortCircuitShm
operator|.
name|ShmId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|shortcircuit
operator|.
name|ShortCircuitShm
operator|.
name|Slot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|unix
operator|.
name|DomainSocket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|unix
operator|.
name|TemporarySocketDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|SecretManager
operator|.
name|InvalidToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DataChecksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|HashMultimap
import|;
end_import

begin_class
annotation|@
name|NotThreadSafe
DECL|class|TestShortCircuitCache
specifier|public
class|class
name|TestShortCircuitCache
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestShortCircuitCache
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|class|TestFileDescriptorPair
specifier|private
specifier|static
class|class
name|TestFileDescriptorPair
block|{
DECL|field|dir
specifier|final
name|TemporarySocketDirectory
name|dir
init|=
operator|new
name|TemporarySocketDirectory
argument_list|()
decl_stmt|;
DECL|field|fis
specifier|final
name|FileInputStream
index|[]
name|fis
decl_stmt|;
DECL|method|TestFileDescriptorPair ()
specifier|public
name|TestFileDescriptorPair
parameter_list|()
throws|throws
name|IOException
block|{
name|fis
operator|=
operator|new
name|FileInputStream
index|[
literal|2
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
name|dir
operator|.
name|getDir
argument_list|()
operator|+
literal|"/file"
operator|+
name|i
decl_stmt|;
name|FileOutputStream
name|fos
init|=
operator|new
name|FileOutputStream
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
comment|// write 'data' file
name|fos
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// write 'metadata' file
name|BlockMetadataHeader
name|header
init|=
operator|new
name|BlockMetadataHeader
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
name|DataChecksum
operator|.
name|newDataChecksum
argument_list|(
name|DataChecksum
operator|.
name|Type
operator|.
name|NULL
argument_list|,
literal|4
argument_list|)
argument_list|)
decl_stmt|;
name|DataOutputStream
name|dos
init|=
operator|new
name|DataOutputStream
argument_list|(
name|fos
argument_list|)
decl_stmt|;
name|BlockMetadataHeader
operator|.
name|writeHeader
argument_list|(
name|dos
argument_list|,
name|header
argument_list|)
expr_stmt|;
name|dos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
name|fis
index|[
name|i
index|]
operator|=
operator|new
name|FileInputStream
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getFileInputStreams ()
specifier|public
name|FileInputStream
index|[]
name|getFileInputStreams
parameter_list|()
block|{
return|return
name|fis
return|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|fis
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|compareWith (FileInputStream data, FileInputStream meta)
specifier|public
name|boolean
name|compareWith
parameter_list|(
name|FileInputStream
name|data
parameter_list|,
name|FileInputStream
name|meta
parameter_list|)
block|{
return|return
operator|(
operator|(
name|data
operator|==
name|fis
index|[
literal|0
index|]
operator|)
operator|&&
operator|(
name|meta
operator|==
name|fis
index|[
literal|1
index|]
operator|)
operator|)
return|;
block|}
block|}
DECL|class|SimpleReplicaCreator
specifier|private
specifier|static
class|class
name|SimpleReplicaCreator
implements|implements
name|ShortCircuitReplicaCreator
block|{
DECL|field|blockId
specifier|private
specifier|final
name|int
name|blockId
decl_stmt|;
DECL|field|cache
specifier|private
specifier|final
name|ShortCircuitCache
name|cache
decl_stmt|;
DECL|field|pair
specifier|private
specifier|final
name|TestFileDescriptorPair
name|pair
decl_stmt|;
DECL|method|SimpleReplicaCreator (int blockId, ShortCircuitCache cache, TestFileDescriptorPair pair)
name|SimpleReplicaCreator
parameter_list|(
name|int
name|blockId
parameter_list|,
name|ShortCircuitCache
name|cache
parameter_list|,
name|TestFileDescriptorPair
name|pair
parameter_list|)
block|{
name|this
operator|.
name|blockId
operator|=
name|blockId
expr_stmt|;
name|this
operator|.
name|cache
operator|=
name|cache
expr_stmt|;
name|this
operator|.
name|pair
operator|=
name|pair
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createShortCircuitReplicaInfo ()
specifier|public
name|ShortCircuitReplicaInfo
name|createShortCircuitReplicaInfo
parameter_list|()
block|{
try|try
block|{
name|ExtendedBlockId
name|key
init|=
operator|new
name|ExtendedBlockId
argument_list|(
name|blockId
argument_list|,
literal|"test_bp1"
argument_list|)
decl_stmt|;
return|return
operator|new
name|ShortCircuitReplicaInfo
argument_list|(
operator|new
name|ShortCircuitReplica
argument_list|(
name|key
argument_list|,
name|pair
operator|.
name|getFileInputStreams
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|pair
operator|.
name|getFileInputStreams
argument_list|()
index|[
literal|1
index|]
argument_list|,
name|cache
argument_list|,
name|Time
operator|.
name|monotonicNow
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testCreateAndDestroy ()
specifier|public
name|void
name|testCreateAndDestroy
parameter_list|()
throws|throws
name|Exception
block|{
name|ShortCircuitCache
name|cache
init|=
operator|new
name|ShortCircuitCache
argument_list|(
literal|10
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|10000
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|cache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testAddAndRetrieve ()
specifier|public
name|void
name|testAddAndRetrieve
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ShortCircuitCache
name|cache
init|=
operator|new
name|ShortCircuitCache
argument_list|(
literal|10
argument_list|,
literal|10000000
argument_list|,
literal|10
argument_list|,
literal|10000000
argument_list|,
literal|1
argument_list|,
literal|10000
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|TestFileDescriptorPair
name|pair
init|=
operator|new
name|TestFileDescriptorPair
argument_list|()
decl_stmt|;
name|ShortCircuitReplicaInfo
name|replicaInfo1
init|=
name|cache
operator|.
name|fetchOrCreate
argument_list|(
operator|new
name|ExtendedBlockId
argument_list|(
literal|123
argument_list|,
literal|"test_bp1"
argument_list|)
argument_list|,
operator|new
name|SimpleReplicaCreator
argument_list|(
literal|123
argument_list|,
name|cache
argument_list|,
name|pair
argument_list|)
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|replicaInfo1
operator|.
name|getReplica
argument_list|()
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|replicaInfo1
operator|.
name|getInvalidTokenException
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
name|pair
operator|.
name|compareWith
argument_list|(
name|replicaInfo1
operator|.
name|getReplica
argument_list|()
operator|.
name|getDataStream
argument_list|()
argument_list|,
name|replicaInfo1
operator|.
name|getReplica
argument_list|()
operator|.
name|getMetaStream
argument_list|()
argument_list|)
expr_stmt|;
name|ShortCircuitReplicaInfo
name|replicaInfo2
init|=
name|cache
operator|.
name|fetchOrCreate
argument_list|(
operator|new
name|ExtendedBlockId
argument_list|(
literal|123
argument_list|,
literal|"test_bp1"
argument_list|)
argument_list|,
operator|new
name|ShortCircuitReplicaCreator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ShortCircuitReplicaInfo
name|createShortCircuitReplicaInfo
parameter_list|()
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"expected to use existing entry."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|replicaInfo2
operator|.
name|getReplica
argument_list|()
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|replicaInfo2
operator|.
name|getInvalidTokenException
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|replicaInfo1
operator|==
name|replicaInfo2
argument_list|)
expr_stmt|;
name|pair
operator|.
name|compareWith
argument_list|(
name|replicaInfo2
operator|.
name|getReplica
argument_list|()
operator|.
name|getDataStream
argument_list|()
argument_list|,
name|replicaInfo2
operator|.
name|getReplica
argument_list|()
operator|.
name|getMetaStream
argument_list|()
argument_list|)
expr_stmt|;
name|replicaInfo1
operator|.
name|getReplica
argument_list|()
operator|.
name|unref
argument_list|()
expr_stmt|;
name|replicaInfo2
operator|.
name|getReplica
argument_list|()
operator|.
name|unref
argument_list|()
expr_stmt|;
comment|// Even after the reference count falls to 0, we still keep the replica
comment|// around for a while (we have configured the expiry period to be really,
comment|// really long here)
name|ShortCircuitReplicaInfo
name|replicaInfo3
init|=
name|cache
operator|.
name|fetchOrCreate
argument_list|(
operator|new
name|ExtendedBlockId
argument_list|(
literal|123
argument_list|,
literal|"test_bp1"
argument_list|)
argument_list|,
operator|new
name|ShortCircuitReplicaCreator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ShortCircuitReplicaInfo
name|createShortCircuitReplicaInfo
parameter_list|()
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"expected to use existing entry."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|replicaInfo3
operator|.
name|getReplica
argument_list|()
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|replicaInfo3
operator|.
name|getInvalidTokenException
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
name|replicaInfo3
operator|.
name|getReplica
argument_list|()
operator|.
name|unref
argument_list|()
expr_stmt|;
name|pair
operator|.
name|close
argument_list|()
expr_stmt|;
name|cache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|100000
argument_list|)
DECL|method|testExpiry ()
specifier|public
name|void
name|testExpiry
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ShortCircuitCache
name|cache
init|=
operator|new
name|ShortCircuitCache
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|10000000
argument_list|,
literal|1
argument_list|,
literal|10000000
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|TestFileDescriptorPair
name|pair
init|=
operator|new
name|TestFileDescriptorPair
argument_list|()
decl_stmt|;
name|ShortCircuitReplicaInfo
name|replicaInfo1
init|=
name|cache
operator|.
name|fetchOrCreate
argument_list|(
operator|new
name|ExtendedBlockId
argument_list|(
literal|123
argument_list|,
literal|"test_bp1"
argument_list|)
argument_list|,
operator|new
name|SimpleReplicaCreator
argument_list|(
literal|123
argument_list|,
name|cache
argument_list|,
name|pair
argument_list|)
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|replicaInfo1
operator|.
name|getReplica
argument_list|()
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|replicaInfo1
operator|.
name|getInvalidTokenException
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
name|pair
operator|.
name|compareWith
argument_list|(
name|replicaInfo1
operator|.
name|getReplica
argument_list|()
operator|.
name|getDataStream
argument_list|()
argument_list|,
name|replicaInfo1
operator|.
name|getReplica
argument_list|()
operator|.
name|getMetaStream
argument_list|()
argument_list|)
expr_stmt|;
name|replicaInfo1
operator|.
name|getReplica
argument_list|()
operator|.
name|unref
argument_list|()
expr_stmt|;
specifier|final
name|MutableBoolean
name|triedToCreate
init|=
operator|new
name|MutableBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
do|do
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|ShortCircuitReplicaInfo
name|replicaInfo2
init|=
name|cache
operator|.
name|fetchOrCreate
argument_list|(
operator|new
name|ExtendedBlockId
argument_list|(
literal|123
argument_list|,
literal|"test_bp1"
argument_list|)
argument_list|,
operator|new
name|ShortCircuitReplicaCreator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ShortCircuitReplicaInfo
name|createShortCircuitReplicaInfo
parameter_list|()
block|{
name|triedToCreate
operator|.
name|setValue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|replicaInfo2
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|replicaInfo2
operator|.
name|getReplica
argument_list|()
operator|!=
literal|null
operator|)
condition|)
block|{
name|replicaInfo2
operator|.
name|getReplica
argument_list|()
operator|.
name|unref
argument_list|()
expr_stmt|;
block|}
block|}
do|while
condition|(
name|triedToCreate
operator|.
name|isFalse
argument_list|()
condition|)
do|;
name|cache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testEviction ()
specifier|public
name|void
name|testEviction
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ShortCircuitCache
name|cache
init|=
operator|new
name|ShortCircuitCache
argument_list|(
literal|2
argument_list|,
literal|10000000
argument_list|,
literal|1
argument_list|,
literal|10000000
argument_list|,
literal|1
argument_list|,
literal|10000
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|TestFileDescriptorPair
name|pairs
index|[]
init|=
operator|new
name|TestFileDescriptorPair
index|[]
block|{
operator|new
name|TestFileDescriptorPair
argument_list|()
block|,
operator|new
name|TestFileDescriptorPair
argument_list|()
block|,
operator|new
name|TestFileDescriptorPair
argument_list|()
block|,     }
decl_stmt|;
name|ShortCircuitReplicaInfo
name|replicaInfos
index|[]
init|=
operator|new
name|ShortCircuitReplicaInfo
index|[]
block|{
literal|null
block|,
literal|null
block|,
literal|null
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pairs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|replicaInfos
index|[
name|i
index|]
operator|=
name|cache
operator|.
name|fetchOrCreate
argument_list|(
operator|new
name|ExtendedBlockId
argument_list|(
name|i
argument_list|,
literal|"test_bp1"
argument_list|)
argument_list|,
operator|new
name|SimpleReplicaCreator
argument_list|(
name|i
argument_list|,
name|cache
argument_list|,
name|pairs
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|replicaInfos
index|[
name|i
index|]
operator|.
name|getReplica
argument_list|()
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|replicaInfos
index|[
name|i
index|]
operator|.
name|getInvalidTokenException
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
name|pairs
index|[
name|i
index|]
operator|.
name|compareWith
argument_list|(
name|replicaInfos
index|[
name|i
index|]
operator|.
name|getReplica
argument_list|()
operator|.
name|getDataStream
argument_list|()
argument_list|,
name|replicaInfos
index|[
name|i
index|]
operator|.
name|getReplica
argument_list|()
operator|.
name|getMetaStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// At this point, we have 3 replicas in use.
comment|// Let's close them all.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pairs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|replicaInfos
index|[
name|i
index|]
operator|.
name|getReplica
argument_list|()
operator|.
name|unref
argument_list|()
expr_stmt|;
block|}
comment|// The last two replicas should still be cached.
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|pairs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Integer
name|iVal
init|=
name|i
decl_stmt|;
name|replicaInfos
index|[
name|i
index|]
operator|=
name|cache
operator|.
name|fetchOrCreate
argument_list|(
operator|new
name|ExtendedBlockId
argument_list|(
name|i
argument_list|,
literal|"test_bp1"
argument_list|)
argument_list|,
operator|new
name|ShortCircuitReplicaCreator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ShortCircuitReplicaInfo
name|createShortCircuitReplicaInfo
parameter_list|()
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"expected to use existing entry for "
operator|+
name|iVal
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|replicaInfos
index|[
name|i
index|]
operator|.
name|getReplica
argument_list|()
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|replicaInfos
index|[
name|i
index|]
operator|.
name|getInvalidTokenException
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
name|pairs
index|[
name|i
index|]
operator|.
name|compareWith
argument_list|(
name|replicaInfos
index|[
name|i
index|]
operator|.
name|getReplica
argument_list|()
operator|.
name|getDataStream
argument_list|()
argument_list|,
name|replicaInfos
index|[
name|i
index|]
operator|.
name|getReplica
argument_list|()
operator|.
name|getMetaStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// The first (oldest) replica should not be cached.
specifier|final
name|MutableBoolean
name|calledCreate
init|=
operator|new
name|MutableBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|replicaInfos
index|[
literal|0
index|]
operator|=
name|cache
operator|.
name|fetchOrCreate
argument_list|(
operator|new
name|ExtendedBlockId
argument_list|(
literal|0
argument_list|,
literal|"test_bp1"
argument_list|)
argument_list|,
operator|new
name|ShortCircuitReplicaCreator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ShortCircuitReplicaInfo
name|createShortCircuitReplicaInfo
parameter_list|()
block|{
name|calledCreate
operator|.
name|setValue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|replicaInfos
index|[
literal|0
index|]
operator|.
name|getReplica
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|calledCreate
operator|.
name|isTrue
argument_list|()
argument_list|)
expr_stmt|;
comment|// Clean up
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|pairs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|replicaInfos
index|[
name|i
index|]
operator|.
name|getReplica
argument_list|()
operator|.
name|unref
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pairs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|pairs
index|[
name|i
index|]
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|cache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testTimeBasedStaleness ()
specifier|public
name|void
name|testTimeBasedStaleness
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Set up the cache with a short staleness time.
specifier|final
name|ShortCircuitCache
name|cache
init|=
operator|new
name|ShortCircuitCache
argument_list|(
literal|2
argument_list|,
literal|10000000
argument_list|,
literal|1
argument_list|,
literal|10000000
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|TestFileDescriptorPair
name|pairs
index|[]
init|=
operator|new
name|TestFileDescriptorPair
index|[]
block|{
operator|new
name|TestFileDescriptorPair
argument_list|()
block|,
operator|new
name|TestFileDescriptorPair
argument_list|()
block|,     }
decl_stmt|;
name|ShortCircuitReplicaInfo
name|replicaInfos
index|[]
init|=
operator|new
name|ShortCircuitReplicaInfo
index|[]
block|{
literal|null
block|,
literal|null
block|}
decl_stmt|;
specifier|final
name|long
name|HOUR_IN_MS
init|=
literal|60
operator|*
literal|60
operator|*
literal|1000
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pairs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Integer
name|iVal
init|=
name|i
decl_stmt|;
specifier|final
name|ExtendedBlockId
name|key
init|=
operator|new
name|ExtendedBlockId
argument_list|(
name|i
argument_list|,
literal|"test_bp1"
argument_list|)
decl_stmt|;
name|replicaInfos
index|[
name|i
index|]
operator|=
name|cache
operator|.
name|fetchOrCreate
argument_list|(
name|key
argument_list|,
operator|new
name|ShortCircuitReplicaCreator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ShortCircuitReplicaInfo
name|createShortCircuitReplicaInfo
parameter_list|()
block|{
try|try
block|{
return|return
operator|new
name|ShortCircuitReplicaInfo
argument_list|(
operator|new
name|ShortCircuitReplica
argument_list|(
name|key
argument_list|,
name|pairs
index|[
name|iVal
index|]
operator|.
name|getFileInputStreams
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|pairs
index|[
name|iVal
index|]
operator|.
name|getFileInputStreams
argument_list|()
index|[
literal|1
index|]
argument_list|,
name|cache
argument_list|,
name|Time
operator|.
name|monotonicNow
argument_list|()
operator|+
operator|(
name|iVal
operator|*
name|HOUR_IN_MS
operator|)
argument_list|,
literal|null
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|replicaInfos
index|[
name|i
index|]
operator|.
name|getReplica
argument_list|()
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|replicaInfos
index|[
name|i
index|]
operator|.
name|getInvalidTokenException
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
name|pairs
index|[
name|i
index|]
operator|.
name|compareWith
argument_list|(
name|replicaInfos
index|[
name|i
index|]
operator|.
name|getReplica
argument_list|()
operator|.
name|getDataStream
argument_list|()
argument_list|,
name|replicaInfos
index|[
name|i
index|]
operator|.
name|getReplica
argument_list|()
operator|.
name|getMetaStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Keep trying to getOrCreate block 0 until it goes stale (and we must re-create.)
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
name|ShortCircuitReplicaInfo
name|info
init|=
name|cache
operator|.
name|fetchOrCreate
argument_list|(
operator|new
name|ExtendedBlockId
argument_list|(
literal|0
argument_list|,
literal|"test_bp1"
argument_list|)
argument_list|,
operator|new
name|ShortCircuitReplicaCreator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ShortCircuitReplicaInfo
name|createShortCircuitReplicaInfo
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|getReplica
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|info
operator|.
name|getReplica
argument_list|()
operator|.
name|unref
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
argument_list|,
literal|500
argument_list|,
literal|60000
argument_list|)
expr_stmt|;
comment|// Make sure that second replica did not go stale.
name|ShortCircuitReplicaInfo
name|info
init|=
name|cache
operator|.
name|fetchOrCreate
argument_list|(
operator|new
name|ExtendedBlockId
argument_list|(
literal|1
argument_list|,
literal|"test_bp1"
argument_list|)
argument_list|,
operator|new
name|ShortCircuitReplicaCreator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ShortCircuitReplicaInfo
name|createShortCircuitReplicaInfo
parameter_list|()
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"second replica went stale, despite 1 "
operator|+
literal|"hour staleness time."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|info
operator|.
name|getReplica
argument_list|()
operator|.
name|unref
argument_list|()
expr_stmt|;
comment|// Clean up
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|pairs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|replicaInfos
index|[
name|i
index|]
operator|.
name|getReplica
argument_list|()
operator|.
name|unref
argument_list|()
expr_stmt|;
block|}
name|cache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|createShortCircuitConf (String testName, TemporarySocketDirectory sockDir)
specifier|private
specifier|static
name|Configuration
name|createShortCircuitConf
parameter_list|(
name|String
name|testName
parameter_list|,
name|TemporarySocketDirectory
name|sockDir
parameter_list|)
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_CLIENT_CONTEXT
argument_list|,
name|testName
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFS_BLOCK_SIZE_KEY
argument_list|,
literal|4096
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_DOMAIN_SOCKET_PATH_KEY
argument_list|,
operator|new
name|File
argument_list|(
name|sockDir
operator|.
name|getDir
argument_list|()
argument_list|,
name|testName
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|Read
operator|.
name|ShortCircuit
operator|.
name|KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|Read
operator|.
name|ShortCircuit
operator|.
name|SKIP_CHECKSUM_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFS_CLIENT_DOMAIN_SOCKET_DATA_TRAFFIC
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|DFSInputStream
operator|.
name|tcpReadsDisabledForTesting
operator|=
literal|true
expr_stmt|;
name|DomainSocket
operator|.
name|disableBindPathValidation
argument_list|()
expr_stmt|;
name|Assume
operator|.
name|assumeThat
argument_list|(
name|DomainSocket
operator|.
name|getLoadingFailureReason
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
DECL|method|getDomainPeerToDn (Configuration conf)
specifier|private
specifier|static
name|DomainPeer
name|getDomainPeerToDn
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|DomainSocket
name|sock
init|=
name|DomainSocket
operator|.
name|connect
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|DFS_DOMAIN_SOCKET_PATH_KEY
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|DomainPeer
argument_list|(
name|sock
argument_list|)
return|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testAllocShm ()
specifier|public
name|void
name|testAllocShm
parameter_list|()
throws|throws
name|Exception
block|{
name|BlockReaderTestUtil
operator|.
name|enableShortCircuitShmTracing
argument_list|()
expr_stmt|;
name|TemporarySocketDirectory
name|sockDir
init|=
operator|new
name|TemporarySocketDirectory
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|createShortCircuitConf
argument_list|(
literal|"testAllocShm"
argument_list|,
name|sockDir
argument_list|)
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|DistributedFileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|ShortCircuitCache
name|cache
init|=
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|getClientContext
argument_list|()
operator|.
name|getShortCircuitCache
argument_list|()
decl_stmt|;
name|cache
operator|.
name|getDfsClientShmManager
argument_list|()
operator|.
name|visit
argument_list|(
operator|new
name|Visitor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|HashMap
argument_list|<
name|DatanodeInfo
argument_list|,
name|PerDatanodeVisitorInfo
argument_list|>
name|info
parameter_list|)
throws|throws
name|IOException
block|{
comment|// The ClientShmManager starts off empty
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|info
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|DomainPeer
name|peer
init|=
name|getDomainPeerToDn
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|MutableBoolean
name|usedPeer
init|=
operator|new
name|MutableBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|ExtendedBlockId
name|blockId
init|=
operator|new
name|ExtendedBlockId
argument_list|(
literal|123
argument_list|,
literal|"xyz"
argument_list|)
decl_stmt|;
specifier|final
name|DatanodeInfo
name|datanode
init|=
operator|new
name|DatanodeInfoBuilder
argument_list|()
operator|.
name|setNodeID
argument_list|(
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDatanodeId
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// Allocating the first shm slot requires using up a peer.
name|Slot
name|slot
init|=
name|cache
operator|.
name|allocShmSlot
argument_list|(
name|datanode
argument_list|,
name|peer
argument_list|,
name|usedPeer
argument_list|,
name|blockId
argument_list|,
literal|"testAllocShm_client"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|slot
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|usedPeer
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
name|cache
operator|.
name|getDfsClientShmManager
argument_list|()
operator|.
name|visit
argument_list|(
operator|new
name|Visitor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|HashMap
argument_list|<
name|DatanodeInfo
argument_list|,
name|PerDatanodeVisitorInfo
argument_list|>
name|info
parameter_list|)
throws|throws
name|IOException
block|{
comment|// The ClientShmManager starts off empty
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|info
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|PerDatanodeVisitorInfo
name|vinfo
init|=
name|info
operator|.
name|get
argument_list|(
name|datanode
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|vinfo
operator|.
name|disabled
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|vinfo
operator|.
name|full
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|vinfo
operator|.
name|notFull
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|cache
operator|.
name|scheduleSlotReleaser
argument_list|(
name|slot
argument_list|)
expr_stmt|;
comment|// Wait for the slot to be released, and the shared memory area to be
comment|// closed.  Since we didn't register this shared memory segment on the
comment|// server, it will also be a test of how well the server deals with
comment|// bogus client behavior.
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
specifier|final
name|MutableBoolean
name|done
init|=
operator|new
name|MutableBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
try|try
block|{
name|cache
operator|.
name|getDfsClientShmManager
argument_list|()
operator|.
name|visit
argument_list|(
operator|new
name|Visitor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|HashMap
argument_list|<
name|DatanodeInfo
argument_list|,
name|PerDatanodeVisitorInfo
argument_list|>
name|info
parameter_list|)
throws|throws
name|IOException
block|{
name|done
operator|.
name|setValue
argument_list|(
name|info
operator|.
name|get
argument_list|(
name|datanode
argument_list|)
operator|.
name|full
operator|.
name|isEmpty
argument_list|()
operator|&&
name|info
operator|.
name|get
argument_list|(
name|datanode
argument_list|)
operator|.
name|notFull
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error running visitor"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|done
operator|.
name|booleanValue
argument_list|()
return|;
block|}
block|}
argument_list|,
literal|10
argument_list|,
literal|60000
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|sockDir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testShmBasedStaleness ()
specifier|public
name|void
name|testShmBasedStaleness
parameter_list|()
throws|throws
name|Exception
block|{
name|BlockReaderTestUtil
operator|.
name|enableShortCircuitShmTracing
argument_list|()
expr_stmt|;
name|TemporarySocketDirectory
name|sockDir
init|=
operator|new
name|TemporarySocketDirectory
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|createShortCircuitConf
argument_list|(
literal|"testShmBasedStaleness"
argument_list|,
name|sockDir
argument_list|)
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|DistributedFileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|ShortCircuitCache
name|cache
init|=
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|getClientContext
argument_list|()
operator|.
name|getShortCircuitCache
argument_list|()
decl_stmt|;
name|String
name|TEST_FILE
init|=
literal|"/test_file"
decl_stmt|;
specifier|final
name|int
name|TEST_FILE_LEN
init|=
literal|8193
decl_stmt|;
specifier|final
name|int
name|SEED
init|=
literal|0xFADED
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|TEST_FILE
argument_list|)
argument_list|,
name|TEST_FILE_LEN
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|FSDataInputStream
name|fis
init|=
name|fs
operator|.
name|open
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|first
init|=
name|fis
operator|.
name|read
argument_list|()
decl_stmt|;
specifier|final
name|ExtendedBlock
name|block
init|=
name|DFSTestUtil
operator|.
name|getFirstBlock
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|TEST_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|first
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|cache
operator|.
name|accept
argument_list|(
operator|new
name|CacheVisitor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|int
name|numOutstandingMmaps
parameter_list|,
name|Map
argument_list|<
name|ExtendedBlockId
argument_list|,
name|ShortCircuitReplica
argument_list|>
name|replicas
parameter_list|,
name|Map
argument_list|<
name|ExtendedBlockId
argument_list|,
name|InvalidToken
argument_list|>
name|failedLoads
parameter_list|,
name|LinkedMap
name|evictable
parameter_list|,
name|LinkedMap
name|evictableMmapped
parameter_list|)
block|{
name|ShortCircuitReplica
name|replica
init|=
name|replicas
operator|.
name|get
argument_list|(
name|ExtendedBlockId
operator|.
name|fromExtendedBlock
argument_list|(
name|block
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|replica
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|replica
operator|.
name|getSlot
argument_list|()
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Stop the Namenode.  This will close the socket keeping the client's
comment|// shared memory segment alive, and make it stale.
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cache
operator|.
name|accept
argument_list|(
operator|new
name|CacheVisitor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|int
name|numOutstandingMmaps
parameter_list|,
name|Map
argument_list|<
name|ExtendedBlockId
argument_list|,
name|ShortCircuitReplica
argument_list|>
name|replicas
parameter_list|,
name|Map
argument_list|<
name|ExtendedBlockId
argument_list|,
name|InvalidToken
argument_list|>
name|failedLoads
parameter_list|,
name|LinkedMap
name|evictable
parameter_list|,
name|LinkedMap
name|evictableMmapped
parameter_list|)
block|{
name|ShortCircuitReplica
name|replica
init|=
name|replicas
operator|.
name|get
argument_list|(
name|ExtendedBlockId
operator|.
name|fromExtendedBlock
argument_list|(
name|block
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|replica
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|replica
operator|.
name|getSlot
argument_list|()
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|sockDir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test unlinking a file whose blocks we are caching in the DFSClient.    * The DataNode will notify the DFSClient that the replica is stale via the    * ShortCircuitShm.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testUnlinkingReplicasInFileDescriptorCache ()
specifier|public
name|void
name|testUnlinkingReplicasInFileDescriptorCache
parameter_list|()
throws|throws
name|Exception
block|{
name|BlockReaderTestUtil
operator|.
name|enableShortCircuitShmTracing
argument_list|()
expr_stmt|;
name|TemporarySocketDirectory
name|sockDir
init|=
operator|new
name|TemporarySocketDirectory
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|createShortCircuitConf
argument_list|(
literal|"testUnlinkingReplicasInFileDescriptorCache"
argument_list|,
name|sockDir
argument_list|)
decl_stmt|;
comment|// We don't want the CacheCleaner to time out short-circuit shared memory
comment|// segments during the test, so set the timeout really high.
name|conf
operator|.
name|setLong
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|Read
operator|.
name|ShortCircuit
operator|.
name|STREAMS_CACHE_EXPIRY_MS_KEY
argument_list|,
literal|1000000000L
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|DistributedFileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|ShortCircuitCache
name|cache
init|=
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|getClientContext
argument_list|()
operator|.
name|getShortCircuitCache
argument_list|()
decl_stmt|;
name|cache
operator|.
name|getDfsClientShmManager
argument_list|()
operator|.
name|visit
argument_list|(
operator|new
name|Visitor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|HashMap
argument_list|<
name|DatanodeInfo
argument_list|,
name|PerDatanodeVisitorInfo
argument_list|>
name|info
parameter_list|)
throws|throws
name|IOException
block|{
comment|// The ClientShmManager starts off empty.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|info
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|TEST_PATH
init|=
operator|new
name|Path
argument_list|(
literal|"/test_file"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|TEST_FILE_LEN
init|=
literal|8193
decl_stmt|;
specifier|final
name|int
name|SEED
init|=
literal|0xFADE0
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|TEST_PATH
argument_list|,
name|TEST_FILE_LEN
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|byte
name|contents
index|[]
init|=
name|DFSTestUtil
operator|.
name|readFileBuffer
argument_list|(
name|fs
argument_list|,
name|TEST_PATH
argument_list|)
decl_stmt|;
name|byte
name|expected
index|[]
init|=
name|DFSTestUtil
operator|.
name|calculateFileContentsFromSeed
argument_list|(
name|SEED
argument_list|,
name|TEST_FILE_LEN
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|contents
argument_list|,
name|expected
argument_list|)
argument_list|)
expr_stmt|;
comment|// Loading this file brought the ShortCircuitReplica into our local
comment|// replica cache.
specifier|final
name|DatanodeInfo
name|datanode
init|=
operator|new
name|DatanodeInfoBuilder
argument_list|()
operator|.
name|setNodeID
argument_list|(
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDatanodeId
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cache
operator|.
name|getDfsClientShmManager
argument_list|()
operator|.
name|visit
argument_list|(
operator|new
name|Visitor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|HashMap
argument_list|<
name|DatanodeInfo
argument_list|,
name|PerDatanodeVisitorInfo
argument_list|>
name|info
parameter_list|)
throws|throws
name|IOException
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|info
operator|.
name|get
argument_list|(
name|datanode
argument_list|)
operator|.
name|full
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|info
operator|.
name|get
argument_list|(
name|datanode
argument_list|)
operator|.
name|disabled
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|info
operator|.
name|get
argument_list|(
name|datanode
argument_list|)
operator|.
name|notFull
operator|.
name|values
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|DfsClientShm
name|shm
init|=
name|info
operator|.
name|get
argument_list|(
name|datanode
argument_list|)
operator|.
name|notFull
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|shm
operator|.
name|isDisconnected
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Remove the file whose blocks we just read.
name|fs
operator|.
name|delete
argument_list|(
name|TEST_PATH
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Wait for the replica to be purged from the DFSClient's cache.
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
name|MutableBoolean
name|done
init|=
operator|new
name|MutableBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
try|try
block|{
name|done
operator|.
name|setValue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cache
operator|.
name|getDfsClientShmManager
argument_list|()
operator|.
name|visit
argument_list|(
operator|new
name|Visitor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|HashMap
argument_list|<
name|DatanodeInfo
argument_list|,
name|PerDatanodeVisitorInfo
argument_list|>
name|info
parameter_list|)
throws|throws
name|IOException
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|info
operator|.
name|get
argument_list|(
name|datanode
argument_list|)
operator|.
name|full
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|info
operator|.
name|get
argument_list|(
name|datanode
argument_list|)
operator|.
name|disabled
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|info
operator|.
name|get
argument_list|(
name|datanode
argument_list|)
operator|.
name|notFull
operator|.
name|values
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|DfsClientShm
name|shm
init|=
name|info
operator|.
name|get
argument_list|(
name|datanode
argument_list|)
operator|.
name|notFull
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// Check that all slots have been invalidated.
for|for
control|(
name|Iterator
argument_list|<
name|Slot
argument_list|>
name|iter
init|=
name|shm
operator|.
name|slotIterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Slot
name|slot
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|slot
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|done
operator|.
name|setValue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error running visitor"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|done
operator|.
name|booleanValue
argument_list|()
return|;
block|}
block|}
argument_list|,
literal|10
argument_list|,
literal|60000
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|sockDir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|checkNumberOfSegmentsAndSlots (final int expectedSegments, final int expectedSlots, final ShortCircuitRegistry registry)
specifier|static
specifier|private
name|void
name|checkNumberOfSegmentsAndSlots
parameter_list|(
specifier|final
name|int
name|expectedSegments
parameter_list|,
specifier|final
name|int
name|expectedSlots
parameter_list|,
specifier|final
name|ShortCircuitRegistry
name|registry
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|TimeoutException
block|{
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
return|return
name|registry
operator|.
name|visit
argument_list|(
operator|new
name|ShortCircuitRegistry
operator|.
name|Visitor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|HashMap
argument_list|<
name|ShmId
argument_list|,
name|RegisteredShm
argument_list|>
name|segments
parameter_list|,
name|HashMultimap
argument_list|<
name|ExtendedBlockId
argument_list|,
name|Slot
argument_list|>
name|slots
parameter_list|)
block|{
return|return
operator|(
name|expectedSegments
operator|==
name|segments
operator|.
name|size
argument_list|()
operator|)
operator|&&
operator|(
name|expectedSlots
operator|==
name|slots
operator|.
name|size
argument_list|()
operator|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
argument_list|,
literal|100
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
block|}
DECL|class|TestCleanupFailureInjector
specifier|public
specifier|static
class|class
name|TestCleanupFailureInjector
extends|extends
name|BlockReaderFactory
operator|.
name|FailureInjector
block|{
annotation|@
name|Override
DECL|method|injectRequestFileDescriptorsFailure ()
specifier|public
name|void
name|injectRequestFileDescriptorsFailure
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"injected I/O error"
argument_list|)
throw|;
block|}
block|}
comment|// Regression test for HDFS-7915
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testDataXceiverCleansUpSlotsOnFailure ()
specifier|public
name|void
name|testDataXceiverCleansUpSlotsOnFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|BlockReaderTestUtil
operator|.
name|enableShortCircuitShmTracing
argument_list|()
expr_stmt|;
name|TemporarySocketDirectory
name|sockDir
init|=
operator|new
name|TemporarySocketDirectory
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|createShortCircuitConf
argument_list|(
literal|"testDataXceiverCleansUpSlotsOnFailure"
argument_list|,
name|sockDir
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|Read
operator|.
name|ShortCircuit
operator|.
name|STREAMS_CACHE_EXPIRY_MS_KEY
argument_list|,
literal|1000000000L
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|DistributedFileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|TEST_PATH1
init|=
operator|new
name|Path
argument_list|(
literal|"/test_file1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|TEST_PATH2
init|=
operator|new
name|Path
argument_list|(
literal|"/test_file2"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|TEST_FILE_LEN
init|=
literal|4096
decl_stmt|;
specifier|final
name|int
name|SEED
init|=
literal|0xFADE1
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|TEST_PATH1
argument_list|,
name|TEST_FILE_LEN
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|TEST_PATH2
argument_list|,
name|TEST_FILE_LEN
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
comment|// The first read should allocate one shared memory segment and slot.
name|DFSTestUtil
operator|.
name|readFileBuffer
argument_list|(
name|fs
argument_list|,
name|TEST_PATH1
argument_list|)
expr_stmt|;
comment|// The second read should fail, and we should only have 1 segment and 1 slot
comment|// left.
name|BlockReaderFactory
operator|.
name|setFailureInjectorForTesting
argument_list|(
operator|new
name|TestCleanupFailureInjector
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|DFSTestUtil
operator|.
name|readFileBuffer
argument_list|(
name|fs
argument_list|,
name|TEST_PATH2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"TCP reads were disabled for "
operator|+
literal|"testing, but we failed to do a non-TCP read."
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
name|checkNumberOfSegmentsAndSlots
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getShortCircuitRegistry
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|sockDir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Regression test for HADOOP-11802
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testDataXceiverHandlesRequestShortCircuitShmFailure ()
specifier|public
name|void
name|testDataXceiverHandlesRequestShortCircuitShmFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|BlockReaderTestUtil
operator|.
name|enableShortCircuitShmTracing
argument_list|()
expr_stmt|;
name|TemporarySocketDirectory
name|sockDir
init|=
operator|new
name|TemporarySocketDirectory
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|createShortCircuitConf
argument_list|(
literal|"testDataXceiverHandlesRequestShortCircuitShmFailure"
argument_list|,
name|sockDir
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|Read
operator|.
name|ShortCircuit
operator|.
name|STREAMS_CACHE_EXPIRY_MS_KEY
argument_list|,
literal|1000000000L
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|DistributedFileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|TEST_PATH1
init|=
operator|new
name|Path
argument_list|(
literal|"/test_file1"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|TEST_PATH1
argument_list|,
literal|4096
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFADE1
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Setting failure injector and performing a read which "
operator|+
literal|"should fail..."
argument_list|)
expr_stmt|;
name|DataNodeFaultInjector
name|failureInjector
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|DataNodeFaultInjector
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"injected error into sendShmResponse"
argument_list|)
throw|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|failureInjector
argument_list|)
operator|.
name|sendShortCircuitShmResponse
argument_list|()
expr_stmt|;
name|DataNodeFaultInjector
name|prevInjector
init|=
name|DataNodeFaultInjector
operator|.
name|get
argument_list|()
decl_stmt|;
name|DataNodeFaultInjector
operator|.
name|set
argument_list|(
name|failureInjector
argument_list|)
expr_stmt|;
try|try
block|{
comment|// The first read will try to allocate a shared memory segment and slot.
comment|// The shared memory segment allocation will fail because of the failure
comment|// injector.
name|DFSTestUtil
operator|.
name|readFileBuffer
argument_list|(
name|fs
argument_list|,
name|TEST_PATH1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"expected readFileBuffer to fail, but it succeeded."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"TCP reads were disabled for "
operator|+
literal|"testing, but we failed to do a non-TCP read."
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
name|checkNumberOfSegmentsAndSlots
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getShortCircuitRegistry
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Clearing failure injector and performing another read..."
argument_list|)
expr_stmt|;
name|DataNodeFaultInjector
operator|.
name|set
argument_list|(
name|prevInjector
argument_list|)
expr_stmt|;
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|getClientContext
argument_list|()
operator|.
name|getDomainSocketFactory
argument_list|()
operator|.
name|clearPathMap
argument_list|()
expr_stmt|;
comment|// The second read should succeed.
name|DFSTestUtil
operator|.
name|readFileBuffer
argument_list|(
name|fs
argument_list|,
name|TEST_PATH1
argument_list|)
expr_stmt|;
comment|// We should have added a new short-circuit shared memory segment and slot.
name|checkNumberOfSegmentsAndSlots
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getShortCircuitRegistry
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|sockDir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|class|TestPreReceiptVerificationFailureInjector
specifier|public
specifier|static
class|class
name|TestPreReceiptVerificationFailureInjector
extends|extends
name|BlockReaderFactory
operator|.
name|FailureInjector
block|{
annotation|@
name|Override
DECL|method|getSupportsReceiptVerification ()
specifier|public
name|boolean
name|getSupportsReceiptVerification
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
comment|// Regression test for HDFS-8070
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testPreReceiptVerificationDfsClientCanDoScr ()
specifier|public
name|void
name|testPreReceiptVerificationDfsClientCanDoScr
parameter_list|()
throws|throws
name|Exception
block|{
name|BlockReaderTestUtil
operator|.
name|enableShortCircuitShmTracing
argument_list|()
expr_stmt|;
name|TemporarySocketDirectory
name|sockDir
init|=
operator|new
name|TemporarySocketDirectory
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|createShortCircuitConf
argument_list|(
literal|"testPreReceiptVerificationDfsClientCanDoScr"
argument_list|,
name|sockDir
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|Read
operator|.
name|ShortCircuit
operator|.
name|STREAMS_CACHE_EXPIRY_MS_KEY
argument_list|,
literal|1000000000L
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|DistributedFileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|BlockReaderFactory
operator|.
name|setFailureInjectorForTesting
argument_list|(
operator|new
name|TestPreReceiptVerificationFailureInjector
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|TEST_PATH1
init|=
operator|new
name|Path
argument_list|(
literal|"/test_file1"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|TEST_PATH1
argument_list|,
literal|4096
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFADE2
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|TEST_PATH2
init|=
operator|new
name|Path
argument_list|(
literal|"/test_file2"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|TEST_PATH2
argument_list|,
literal|4096
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFADE2
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|readFileBuffer
argument_list|(
name|fs
argument_list|,
name|TEST_PATH1
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|readFileBuffer
argument_list|(
name|fs
argument_list|,
name|TEST_PATH2
argument_list|)
expr_stmt|;
name|checkNumberOfSegmentsAndSlots
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getShortCircuitRegistry
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|sockDir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

