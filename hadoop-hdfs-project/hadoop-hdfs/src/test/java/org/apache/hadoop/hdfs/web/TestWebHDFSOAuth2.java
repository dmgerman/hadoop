begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.web
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|oauth2
operator|.
name|ConfCredentialBasedAccessTokenProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|oauth2
operator|.
name|CredentialBasedAccessTokenProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|oauth2
operator|.
name|OAuth2ConnectionConfigurator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockserver
operator|.
name|client
operator|.
name|server
operator|.
name|MockServerClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockserver
operator|.
name|integration
operator|.
name|ClientAndServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockserver
operator|.
name|model
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockserver
operator|.
name|model
operator|.
name|HttpRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockserver
operator|.
name|model
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|ACCESS_TOKEN_PROVIDER_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|OAUTH_CLIENT_ID_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|OAUTH_REFRESH_URL_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|oauth2
operator|.
name|OAuth2Constants
operator|.
name|ACCESS_TOKEN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|oauth2
operator|.
name|OAuth2Constants
operator|.
name|EXPIRES_IN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|oauth2
operator|.
name|OAuth2Constants
operator|.
name|TOKEN_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockserver
operator|.
name|integration
operator|.
name|ClientAndServer
operator|.
name|startClientAndServer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockserver
operator|.
name|matchers
operator|.
name|Times
operator|.
name|exactly
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockserver
operator|.
name|model
operator|.
name|HttpRequest
operator|.
name|request
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockserver
operator|.
name|model
operator|.
name|HttpResponse
operator|.
name|response
import|;
end_import

begin_class
DECL|class|TestWebHDFSOAuth2
specifier|public
class|class
name|TestWebHDFSOAuth2
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestWebHDFSOAuth2
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|mockWebHDFS
specifier|private
name|ClientAndServer
name|mockWebHDFS
decl_stmt|;
DECL|field|mockOAuthServer
specifier|private
name|ClientAndServer
name|mockOAuthServer
decl_stmt|;
DECL|field|WEBHDFS_PORT
specifier|public
specifier|final
specifier|static
name|int
name|WEBHDFS_PORT
init|=
literal|7552
decl_stmt|;
DECL|field|OAUTH_PORT
specifier|public
specifier|final
specifier|static
name|int
name|OAUTH_PORT
init|=
literal|7553
decl_stmt|;
DECL|field|CONTENT_TYPE_APPLICATION_JSON
specifier|public
specifier|final
specifier|static
name|Header
name|CONTENT_TYPE_APPLICATION_JSON
init|=
operator|new
name|Header
argument_list|(
literal|"Content-Type"
argument_list|,
literal|"application/json"
argument_list|)
decl_stmt|;
DECL|field|AUTH_TOKEN
specifier|public
specifier|final
specifier|static
name|String
name|AUTH_TOKEN
init|=
literal|"0123456789abcdef"
decl_stmt|;
DECL|field|AUTH_TOKEN_HEADER
specifier|public
specifier|final
specifier|static
name|Header
name|AUTH_TOKEN_HEADER
init|=
operator|new
name|Header
argument_list|(
literal|"AUTHORIZATION"
argument_list|,
name|OAuth2ConnectionConfigurator
operator|.
name|HEADER
operator|+
name|AUTH_TOKEN
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|startMockOAuthServer ()
specifier|public
name|void
name|startMockOAuthServer
parameter_list|()
block|{
name|mockOAuthServer
operator|=
name|startClientAndServer
argument_list|(
name|OAUTH_PORT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|startMockWebHDFSServer ()
specifier|public
name|void
name|startMockWebHDFSServer
parameter_list|()
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"hadoop.home.dir"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.dir"
argument_list|)
argument_list|)
expr_stmt|;
name|mockWebHDFS
operator|=
name|startClientAndServer
argument_list|(
name|WEBHDFS_PORT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|listStatusReturnsAsExpected ()
specifier|public
name|void
name|listStatusReturnsAsExpected
parameter_list|()
throws|throws
name|URISyntaxException
throws|,
name|IOException
block|{
name|MockServerClient
name|mockWebHDFSServerClient
init|=
operator|new
name|MockServerClient
argument_list|(
literal|"localhost"
argument_list|,
name|WEBHDFS_PORT
argument_list|)
decl_stmt|;
name|MockServerClient
name|mockOAuthServerClient
init|=
operator|new
name|MockServerClient
argument_list|(
literal|"localhost"
argument_list|,
name|OAUTH_PORT
argument_list|)
decl_stmt|;
name|HttpRequest
name|oauthServerRequest
init|=
name|getOAuthServerMockRequest
argument_list|(
name|mockOAuthServerClient
argument_list|)
decl_stmt|;
name|HttpRequest
name|fileSystemRequest
init|=
name|request
argument_list|()
operator|.
name|withMethod
argument_list|(
literal|"GET"
argument_list|)
operator|.
name|withPath
argument_list|(
name|WebHdfsFileSystem
operator|.
name|PATH_PREFIX
operator|+
literal|"/test1/test2"
argument_list|)
operator|.
name|withHeader
argument_list|(
name|AUTH_TOKEN_HEADER
argument_list|)
decl_stmt|;
try|try
block|{
name|mockWebHDFSServerClient
operator|.
name|when
argument_list|(
name|fileSystemRequest
argument_list|,
name|exactly
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|respond
argument_list|(
name|response
argument_list|()
operator|.
name|withStatusCode
argument_list|(
name|HttpStatus
operator|.
name|SC_OK
argument_list|)
operator|.
name|withHeaders
argument_list|(
name|CONTENT_TYPE_APPLICATION_JSON
argument_list|)
operator|.
name|withBody
argument_list|(
literal|"{\n"
operator|+
literal|"  \"FileStatuses\":\n"
operator|+
literal|"  {\n"
operator|+
literal|"    \"FileStatus\":\n"
operator|+
literal|"    [\n"
operator|+
literal|"      {\n"
operator|+
literal|"        \"accessTime\"      : 1320171722771,\n"
operator|+
literal|"        \"blockSize\"       : 33554432,\n"
operator|+
literal|"        \"group\"           : \"supergroup\",\n"
operator|+
literal|"        \"length\"          : 24930,\n"
operator|+
literal|"        \"modificationTime\": 1320171722771,\n"
operator|+
literal|"        \"owner\"           : \"webuser\",\n"
operator|+
literal|"        \"pathSuffix\"      : \"a.patch\",\n"
operator|+
literal|"        \"permission\"      : \"644\",\n"
operator|+
literal|"        \"replication\"     : 1,\n"
operator|+
literal|"        \"type\"            : \"FILE\"\n"
operator|+
literal|"      },\n"
operator|+
literal|"      {\n"
operator|+
literal|"        \"accessTime\"      : 0,\n"
operator|+
literal|"        \"blockSize\"       : 0,\n"
operator|+
literal|"        \"group\"           : \"supergroup\",\n"
operator|+
literal|"        \"length\"          : 0,\n"
operator|+
literal|"        \"modificationTime\": 1320895981256,\n"
operator|+
literal|"        \"owner\"           : \"szetszwo\",\n"
operator|+
literal|"        \"pathSuffix\"      : \"bar\",\n"
operator|+
literal|"        \"permission\"      : \"711\",\n"
operator|+
literal|"        \"replication\"     : 0,\n"
operator|+
literal|"        \"type\"            : \"DIRECTORY\"\n"
operator|+
literal|"      }\n"
operator|+
literal|"    ]\n"
operator|+
literal|"  }\n"
operator|+
literal|"}\n"
argument_list|)
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
operator|new
name|WebHdfsFileSystem
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|OAUTH_REFRESH_URL_KEY
argument_list|,
literal|"http://localhost:"
operator|+
name|OAUTH_PORT
operator|+
literal|"/refresh"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CredentialBasedAccessTokenProvider
operator|.
name|OAUTH_CREDENTIAL_KEY
argument_list|,
literal|"credential"
argument_list|)
expr_stmt|;
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"webhdfs://localhost:"
operator|+
name|WEBHDFS_PORT
argument_list|)
decl_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|ls
init|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test1/test2"
argument_list|)
argument_list|)
decl_stmt|;
name|mockOAuthServer
operator|.
name|verify
argument_list|(
name|oauthServerRequest
argument_list|)
expr_stmt|;
name|mockWebHDFSServerClient
operator|.
name|verify
argument_list|(
name|fileSystemRequest
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|ls
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a.patch"
argument_list|,
name|ls
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|ls
index|[
literal|1
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|mockWebHDFSServerClient
operator|.
name|clear
argument_list|(
name|fileSystemRequest
argument_list|)
expr_stmt|;
name|mockOAuthServerClient
operator|.
name|clear
argument_list|(
name|oauthServerRequest
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getOAuthServerMockRequest (MockServerClient mockServerClient)
specifier|private
name|HttpRequest
name|getOAuthServerMockRequest
parameter_list|(
name|MockServerClient
name|mockServerClient
parameter_list|)
throws|throws
name|IOException
block|{
name|HttpRequest
name|expectedRequest
init|=
name|request
argument_list|()
operator|.
name|withMethod
argument_list|(
literal|"POST"
argument_list|)
operator|.
name|withPath
argument_list|(
literal|"/refresh"
argument_list|)
operator|.
name|withBody
argument_list|(
literal|"client_secret=credential&grant_type=client_credentials&client_id=MY_CLIENTID"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|EXPIRES_IN
argument_list|,
literal|"0987654321"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|TOKEN_TYPE
argument_list|,
literal|"bearer"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|ACCESS_TOKEN
argument_list|,
name|AUTH_TOKEN
argument_list|)
expr_stmt|;
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|HttpResponse
name|resp
init|=
name|response
argument_list|()
operator|.
name|withStatusCode
argument_list|(
name|HttpStatus
operator|.
name|SC_OK
argument_list|)
operator|.
name|withHeaders
argument_list|(
name|CONTENT_TYPE_APPLICATION_JSON
argument_list|)
operator|.
name|withBody
argument_list|(
name|mapper
operator|.
name|writeValueAsString
argument_list|(
name|map
argument_list|)
argument_list|)
decl_stmt|;
name|mockServerClient
operator|.
name|when
argument_list|(
name|expectedRequest
argument_list|,
name|exactly
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|respond
argument_list|(
name|resp
argument_list|)
expr_stmt|;
return|return
name|expectedRequest
return|;
block|}
DECL|method|getConfiguration ()
specifier|public
name|Configuration
name|getConfiguration
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// Configs for OAuth2
name|conf
operator|.
name|setBoolean
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|DFS_WEBHDFS_OAUTH_ENABLED_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|OAUTH_CLIENT_ID_KEY
argument_list|,
literal|"MY_CLIENTID"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ACCESS_TOKEN_PROVIDER_KEY
argument_list|,
name|ConfCredentialBasedAccessTokenProvider
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
annotation|@
name|After
DECL|method|stopMockWebHDFSServer ()
specifier|public
name|void
name|stopMockWebHDFSServer
parameter_list|()
block|{
name|mockWebHDFS
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|stopMockOAuthServer ()
specifier|public
name|void
name|stopMockOAuthServer
parameter_list|()
block|{
name|mockOAuthServer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

