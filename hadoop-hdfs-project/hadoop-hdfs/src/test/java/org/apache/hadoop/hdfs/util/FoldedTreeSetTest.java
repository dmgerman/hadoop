begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_comment
comment|/**  * Test of TreeSet  */
end_comment

begin_class
DECL|class|FoldedTreeSetTest
specifier|public
class|class
name|FoldedTreeSetTest
block|{
DECL|field|srand
specifier|private
specifier|static
name|Random
name|srand
decl_stmt|;
DECL|method|FoldedTreeSetTest ()
specifier|public
name|FoldedTreeSetTest
parameter_list|()
block|{   }
annotation|@
name|BeforeClass
DECL|method|setUpClass ()
specifier|public
specifier|static
name|void
name|setUpClass
parameter_list|()
block|{
name|long
name|seed
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"This run uses the random seed "
operator|+
name|seed
argument_list|)
expr_stmt|;
name|srand
operator|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|tearDownClass ()
specifier|public
specifier|static
name|void
name|tearDownClass
parameter_list|()
block|{   }
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{   }
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{   }
comment|/**    * Test of comparator method, of class TreeSet.    */
annotation|@
name|Test
DECL|method|testComparator ()
specifier|public
name|void
name|testComparator
parameter_list|()
block|{
name|Comparator
argument_list|<
name|String
argument_list|>
name|comparator
init|=
operator|new
name|Comparator
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|String
name|o1
parameter_list|,
name|String
name|o2
parameter_list|)
block|{
return|return
name|o1
operator|.
name|compareTo
argument_list|(
name|o2
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
operator|new
name|FoldedTreeSet
argument_list|<>
argument_list|()
operator|.
name|comparator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|comparator
argument_list|,
operator|new
name|FoldedTreeSet
argument_list|<>
argument_list|(
name|comparator
argument_list|)
operator|.
name|comparator
argument_list|()
argument_list|)
expr_stmt|;
name|FoldedTreeSet
argument_list|<
name|String
argument_list|>
name|set
init|=
operator|new
name|FoldedTreeSet
argument_list|<>
argument_list|(
name|comparator
argument_list|)
decl_stmt|;
name|set
operator|.
name|add
argument_list|(
literal|"apa3"
argument_list|)
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
literal|"apa2"
argument_list|)
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
literal|"apa"
argument_list|)
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
literal|"apa5"
argument_list|)
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
literal|"apa4"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|set
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"apa"
argument_list|,
name|set
operator|.
name|get
argument_list|(
literal|"apa"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test of first method, of class TreeSet.    */
annotation|@
name|Test
DECL|method|testFirst ()
specifier|public
name|void
name|testFirst
parameter_list|()
block|{
name|FoldedTreeSet
argument_list|<
name|Integer
argument_list|>
name|tree
init|=
operator|new
name|FoldedTreeSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|256
condition|;
name|i
operator|++
control|)
block|{
name|tree
operator|.
name|add
argument_list|(
literal|1024
operator|+
name|i
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|tree
operator|.
name|first
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|256
condition|;
name|i
operator|++
control|)
block|{
name|tree
operator|.
name|remove
argument_list|(
literal|1024
operator|+
name|i
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|tree
operator|.
name|first
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test of last method, of class TreeSet.    */
annotation|@
name|Test
DECL|method|testLast ()
specifier|public
name|void
name|testLast
parameter_list|()
block|{
name|FoldedTreeSet
argument_list|<
name|Integer
argument_list|>
name|tree
init|=
operator|new
name|FoldedTreeSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|256
condition|;
name|i
operator|++
control|)
block|{
name|tree
operator|.
name|add
argument_list|(
literal|1024
operator|+
name|i
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1024
operator|+
name|i
argument_list|,
name|tree
operator|.
name|last
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|255
condition|;
name|i
operator|++
control|)
block|{
name|tree
operator|.
name|remove
argument_list|(
literal|1024
operator|+
name|i
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1279
argument_list|,
name|tree
operator|.
name|last
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test of size method, of class TreeSet.    */
annotation|@
name|Test
DECL|method|testSize ()
specifier|public
name|void
name|testSize
parameter_list|()
block|{
name|FoldedTreeSet
argument_list|<
name|String
argument_list|>
name|instance
init|=
operator|new
name|FoldedTreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|entry
init|=
literal|"apa"
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|instance
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|instance
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|remove
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|instance
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test of isEmpty method, of class TreeSet.    */
annotation|@
name|Test
DECL|method|testIsEmpty ()
specifier|public
name|void
name|testIsEmpty
parameter_list|()
block|{
name|FoldedTreeSet
argument_list|<
name|String
argument_list|>
name|instance
init|=
operator|new
name|FoldedTreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|expResult
init|=
literal|true
decl_stmt|;
name|boolean
name|result
init|=
name|instance
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expResult
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|instance
operator|.
name|add
argument_list|(
literal|"apa"
argument_list|)
expr_stmt|;
name|instance
operator|.
name|remove
argument_list|(
literal|"apa"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expResult
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test of contains method, of class TreeSet.    */
annotation|@
name|Test
DECL|method|testContains ()
specifier|public
name|void
name|testContains
parameter_list|()
block|{
name|FoldedTreeSet
argument_list|<
name|String
argument_list|>
name|instance
init|=
operator|new
name|FoldedTreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|entry
init|=
literal|"apa"
decl_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|instance
operator|.
name|contains
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
name|instance
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|instance
operator|.
name|contains
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|instance
operator|.
name|contains
argument_list|(
name|entry
operator|+
name|entry
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test of iterator method, of class TreeSet.    */
annotation|@
name|Test
DECL|method|testIterator ()
specifier|public
name|void
name|testIterator
parameter_list|()
block|{
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
literal|10
condition|;
name|iter
operator|++
control|)
block|{
name|FoldedTreeSet
argument_list|<
name|Holder
argument_list|>
name|set
init|=
operator|new
name|FoldedTreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|long
index|[]
name|longs
init|=
operator|new
name|long
index|[
literal|64723
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|longs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Holder
name|val
init|=
operator|new
name|Holder
argument_list|(
name|srand
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|set
operator|.
name|contains
argument_list|(
name|val
argument_list|)
condition|)
block|{
name|val
operator|=
operator|new
name|Holder
argument_list|(
name|srand
operator|.
name|nextLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|longs
index|[
name|i
index|]
operator|=
name|val
operator|.
name|getId
argument_list|()
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|longs
operator|.
name|length
argument_list|,
name|set
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|longs
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Holder
argument_list|>
name|it
init|=
name|set
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|longs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|Holder
name|val
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|longs
index|[
name|i
index|]
argument_list|,
name|val
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// remove randomly to force non linear removes
if|if
condition|(
name|srand
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Test of toArray method, of class TreeSet.    */
annotation|@
name|Test
DECL|method|testToArray ()
specifier|public
name|void
name|testToArray
parameter_list|()
block|{
name|FoldedTreeSet
argument_list|<
name|Integer
argument_list|>
name|tree
init|=
operator|new
name|FoldedTreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|256
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|256
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
literal|1024
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|tree
operator|.
name|addAll
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|list
operator|.
name|toArray
argument_list|()
argument_list|,
name|tree
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test of toArray method, of class TreeSet.    */
annotation|@
name|Test
DECL|method|testToArray_GenericType ()
specifier|public
name|void
name|testToArray_GenericType
parameter_list|()
block|{
name|FoldedTreeSet
argument_list|<
name|Integer
argument_list|>
name|tree
init|=
operator|new
name|FoldedTreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|256
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|256
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
literal|1024
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|tree
operator|.
name|addAll
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|list
operator|.
name|toArray
argument_list|(
operator|new
name|Integer
index|[
name|tree
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
name|tree
operator|.
name|toArray
argument_list|(
operator|new
name|Integer
index|[
name|tree
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|list
operator|.
name|toArray
argument_list|(
operator|new
name|Integer
index|[
name|tree
operator|.
name|size
argument_list|()
operator|+
literal|100
index|]
argument_list|)
argument_list|,
name|tree
operator|.
name|toArray
argument_list|(
operator|new
name|Integer
index|[
name|tree
operator|.
name|size
argument_list|()
operator|+
literal|100
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test of add method, of class TreeSet.    */
annotation|@
name|Test
DECL|method|testAdd ()
specifier|public
name|void
name|testAdd
parameter_list|()
block|{
name|FoldedTreeSet
argument_list|<
name|String
argument_list|>
name|simpleSet
init|=
operator|new
name|FoldedTreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|entry
init|=
literal|"apa"
decl_stmt|;
name|assertTrue
argument_list|(
name|simpleSet
operator|.
name|add
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|simpleSet
operator|.
name|add
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
name|FoldedTreeSet
argument_list|<
name|Integer
argument_list|>
name|intSet
init|=
operator|new
name|FoldedTreeSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|512
init|;
name|i
operator|<
literal|1024
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|intSet
operator|.
name|add
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
operator|-
literal|1024
init|;
name|i
operator|<
operator|-
literal|512
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|intSet
operator|.
name|add
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|512
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|intSet
operator|.
name|add
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
operator|-
literal|512
init|;
name|i
operator|<
literal|0
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|intSet
operator|.
name|add
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|2048
argument_list|,
name|intSet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|FoldedTreeSet
argument_list|<
name|Holder
argument_list|>
name|set
init|=
operator|new
name|FoldedTreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|long
index|[]
name|longs
init|=
operator|new
name|long
index|[
literal|23432
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|longs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Holder
name|val
init|=
operator|new
name|Holder
argument_list|(
name|srand
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|set
operator|.
name|contains
argument_list|(
name|val
argument_list|)
condition|)
block|{
name|val
operator|=
operator|new
name|Holder
argument_list|(
name|srand
operator|.
name|nextLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|longs
index|[
name|i
index|]
operator|=
name|val
operator|.
name|getId
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|add
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|longs
operator|.
name|length
argument_list|,
name|set
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|longs
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Holder
argument_list|>
name|it
init|=
name|set
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|longs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|Holder
name|val
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|longs
index|[
name|i
index|]
argument_list|,
name|val
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Specially constructed adds to exercise all code paths
name|FoldedTreeSet
argument_list|<
name|Integer
argument_list|>
name|specialAdds
init|=
operator|new
name|FoldedTreeSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Fill node with even numbers
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|128
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|assertTrue
argument_list|(
name|specialAdds
operator|.
name|add
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Remove left and add left
name|assertTrue
argument_list|(
name|specialAdds
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|specialAdds
operator|.
name|add
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|specialAdds
operator|.
name|remove
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add right and shift everything left
name|assertTrue
argument_list|(
name|specialAdds
operator|.
name|add
argument_list|(
literal|127
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|specialAdds
operator|.
name|remove
argument_list|(
literal|127
argument_list|)
argument_list|)
expr_stmt|;
comment|// Empty at both ends
name|assertTrue
argument_list|(
name|specialAdds
operator|.
name|add
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|specialAdds
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|specialAdds
operator|.
name|remove
argument_list|(
literal|126
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add in the middle left to slide entries left
name|assertTrue
argument_list|(
name|specialAdds
operator|.
name|add
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|specialAdds
operator|.
name|remove
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add in the middle right to slide entries right
name|assertTrue
argument_list|(
name|specialAdds
operator|.
name|add
argument_list|(
literal|99
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|specialAdds
operator|.
name|remove
argument_list|(
literal|99
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add existing entry in the middle of a node
name|assertFalse
argument_list|(
name|specialAdds
operator|.
name|add
argument_list|(
literal|64
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddOrReplace ()
specifier|public
name|void
name|testAddOrReplace
parameter_list|()
block|{
name|FoldedTreeSet
argument_list|<
name|String
argument_list|>
name|simpleSet
init|=
operator|new
name|FoldedTreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|entry
init|=
literal|"apa"
decl_stmt|;
name|assertNull
argument_list|(
name|simpleSet
operator|.
name|addOrReplace
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|entry
argument_list|,
name|simpleSet
operator|.
name|addOrReplace
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
name|FoldedTreeSet
argument_list|<
name|Integer
argument_list|>
name|intSet
init|=
operator|new
name|FoldedTreeSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1024
condition|;
name|i
operator|++
control|)
block|{
name|assertNull
argument_list|(
name|intSet
operator|.
name|addOrReplace
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1024
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|i
argument_list|,
name|intSet
operator|.
name|addOrReplace
argument_list|(
name|i
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|Holder
specifier|private
specifier|static
class|class
name|Holder
implements|implements
name|Comparable
argument_list|<
name|Holder
argument_list|>
block|{
DECL|field|id
specifier|private
specifier|final
name|long
name|id
decl_stmt|;
DECL|method|Holder (long id)
specifier|public
name|Holder
parameter_list|(
name|long
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
DECL|method|getId ()
specifier|public
name|long
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo (Holder o)
specifier|public
name|int
name|compareTo
parameter_list|(
name|Holder
name|o
parameter_list|)
block|{
return|return
name|id
operator|<
name|o
operator|.
name|getId
argument_list|()
condition|?
operator|-
literal|1
else|:
name|id
operator|>
name|o
operator|.
name|getId
argument_list|()
condition|?
literal|1
else|:
literal|0
return|;
block|}
block|}
annotation|@
name|Test
DECL|method|testRemoveWithComparator ()
specifier|public
name|void
name|testRemoveWithComparator
parameter_list|()
block|{
name|FoldedTreeSet
argument_list|<
name|Holder
argument_list|>
name|set
init|=
operator|new
name|FoldedTreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|long
index|[]
name|longs
init|=
operator|new
name|long
index|[
literal|98327
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|longs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Holder
name|val
init|=
operator|new
name|Holder
argument_list|(
name|srand
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|set
operator|.
name|contains
argument_list|(
name|val
argument_list|)
condition|)
block|{
name|val
operator|=
operator|new
name|Holder
argument_list|(
name|srand
operator|.
name|nextLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|longs
index|[
name|i
index|]
operator|=
name|val
operator|.
name|getId
argument_list|()
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|longs
operator|.
name|length
argument_list|,
name|set
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Comparator
argument_list|<
name|Object
argument_list|>
name|cmp
init|=
operator|new
name|Comparator
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
name|long
name|lookup
init|=
operator|(
name|long
operator|)
name|o1
decl_stmt|;
name|long
name|stored
init|=
operator|(
operator|(
name|Holder
operator|)
name|o2
operator|)
operator|.
name|getId
argument_list|()
decl_stmt|;
return|return
name|lookup
operator|<
name|stored
condition|?
operator|-
literal|1
else|:
name|lookup
operator|>
name|stored
condition|?
literal|1
else|:
literal|0
return|;
block|}
block|}
decl_stmt|;
for|for
control|(
name|long
name|val
range|:
name|longs
control|)
block|{
name|set
operator|.
name|remove
argument_list|(
name|val
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|set
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetWithComparator ()
specifier|public
name|void
name|testGetWithComparator
parameter_list|()
block|{
name|FoldedTreeSet
argument_list|<
name|Holder
argument_list|>
name|set
init|=
operator|new
name|FoldedTreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|long
index|[]
name|longs
init|=
operator|new
name|long
index|[
literal|32147
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|longs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Holder
name|val
init|=
operator|new
name|Holder
argument_list|(
name|srand
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|set
operator|.
name|contains
argument_list|(
name|val
argument_list|)
condition|)
block|{
name|val
operator|=
operator|new
name|Holder
argument_list|(
name|srand
operator|.
name|nextLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|longs
index|[
name|i
index|]
operator|=
name|val
operator|.
name|getId
argument_list|()
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|longs
operator|.
name|length
argument_list|,
name|set
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Comparator
argument_list|<
name|Object
argument_list|>
name|cmp
init|=
operator|new
name|Comparator
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
name|long
name|lookup
init|=
operator|(
name|long
operator|)
name|o1
decl_stmt|;
name|long
name|stored
init|=
operator|(
operator|(
name|Holder
operator|)
name|o2
operator|)
operator|.
name|getId
argument_list|()
decl_stmt|;
return|return
name|lookup
operator|<
name|stored
condition|?
operator|-
literal|1
else|:
name|lookup
operator|>
name|stored
condition|?
literal|1
else|:
literal|0
return|;
block|}
block|}
decl_stmt|;
for|for
control|(
name|long
name|val
range|:
name|longs
control|)
block|{
name|assertEquals
argument_list|(
name|val
argument_list|,
name|set
operator|.
name|get
argument_list|(
name|val
argument_list|,
name|cmp
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGet ()
specifier|public
name|void
name|testGet
parameter_list|()
block|{
name|FoldedTreeSet
argument_list|<
name|Holder
argument_list|>
name|set
init|=
operator|new
name|FoldedTreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|long
index|[]
name|longs
init|=
operator|new
name|long
index|[
literal|43277
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|longs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Holder
name|val
init|=
operator|new
name|Holder
argument_list|(
name|srand
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|set
operator|.
name|contains
argument_list|(
name|val
argument_list|)
condition|)
block|{
name|val
operator|=
operator|new
name|Holder
argument_list|(
name|srand
operator|.
name|nextLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|longs
index|[
name|i
index|]
operator|=
name|val
operator|.
name|getId
argument_list|()
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|longs
operator|.
name|length
argument_list|,
name|set
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|long
name|val
range|:
name|longs
control|)
block|{
name|assertEquals
argument_list|(
name|val
argument_list|,
name|set
operator|.
name|get
argument_list|(
operator|new
name|Holder
argument_list|(
name|val
argument_list|)
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test of remove method, of class TreeSet.    */
annotation|@
name|Test
DECL|method|testRemove ()
specifier|public
name|void
name|testRemove
parameter_list|()
block|{
name|FoldedTreeSet
argument_list|<
name|String
argument_list|>
name|instance
init|=
operator|new
name|FoldedTreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|instance
operator|.
name|remove
argument_list|(
literal|"apa"
argument_list|)
argument_list|)
expr_stmt|;
name|instance
operator|.
name|add
argument_list|(
literal|"apa"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|instance
operator|.
name|remove
argument_list|(
literal|"apa"
argument_list|)
argument_list|)
expr_stmt|;
name|removeLeft
argument_list|()
expr_stmt|;
name|removeRight
argument_list|()
expr_stmt|;
name|removeAt
argument_list|()
expr_stmt|;
name|removeRandom
argument_list|()
expr_stmt|;
block|}
DECL|method|removeLeft ()
specifier|public
name|void
name|removeLeft
parameter_list|()
block|{
name|FoldedTreeSet
argument_list|<
name|Integer
argument_list|>
name|set
init|=
operator|new
name|FoldedTreeSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|320
condition|;
name|i
operator|++
control|)
block|{
name|set
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|193
init|;
name|i
operator|<
literal|225
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|set
operator|.
name|remove
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|set
operator|.
name|remove
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|129
init|;
name|i
operator|<
literal|161
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|set
operator|.
name|remove
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|set
operator|.
name|remove
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|256
init|;
name|i
operator|>
literal|224
condition|;
name|i
operator|--
control|)
block|{
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|set
operator|.
name|remove
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|set
operator|.
name|remove
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|257
init|;
name|i
operator|<
literal|289
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|set
operator|.
name|remove
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|set
operator|.
name|remove
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
operator|!
name|set
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|assertTrue
argument_list|(
name|set
operator|.
name|remove
argument_list|(
name|set
operator|.
name|first
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|removeRight ()
specifier|public
name|void
name|removeRight
parameter_list|()
block|{
name|FoldedTreeSet
argument_list|<
name|Integer
argument_list|>
name|set
init|=
operator|new
name|FoldedTreeSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|320
condition|;
name|i
operator|++
control|)
block|{
name|set
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|193
init|;
name|i
operator|<
literal|225
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|set
operator|.
name|remove
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|set
operator|.
name|remove
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|192
init|;
name|i
operator|>
literal|160
condition|;
name|i
operator|--
control|)
block|{
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|set
operator|.
name|remove
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|set
operator|.
name|remove
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|256
init|;
name|i
operator|>
literal|224
condition|;
name|i
operator|--
control|)
block|{
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|set
operator|.
name|remove
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|set
operator|.
name|remove
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|320
init|;
name|i
operator|>
literal|288
condition|;
name|i
operator|--
control|)
block|{
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|set
operator|.
name|remove
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|set
operator|.
name|remove
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
operator|!
name|set
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|assertTrue
argument_list|(
name|set
operator|.
name|remove
argument_list|(
name|set
operator|.
name|last
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|removeAt ()
specifier|public
name|void
name|removeAt
parameter_list|()
block|{
name|FoldedTreeSet
argument_list|<
name|Integer
argument_list|>
name|set
init|=
operator|new
name|FoldedTreeSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|320
condition|;
name|i
operator|++
control|)
block|{
name|set
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|193
init|;
name|i
operator|<
literal|225
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|set
operator|.
name|remove
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|set
operator|.
name|remove
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|160
init|;
name|i
operator|<
literal|192
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|set
operator|.
name|remove
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|set
operator|.
name|remove
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|225
init|;
name|i
operator|<
literal|257
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|set
operator|.
name|remove
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|set
operator|.
name|remove
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|288
init|;
name|i
operator|<
literal|320
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|set
operator|.
name|remove
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|set
operator|.
name|remove
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|removeRandom ()
specifier|public
name|void
name|removeRandom
parameter_list|()
block|{
name|FoldedTreeSet
argument_list|<
name|Integer
argument_list|>
name|set
init|=
operator|new
name|FoldedTreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|int
index|[]
name|integers
init|=
operator|new
name|int
index|[
literal|2048
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2048
condition|;
name|i
operator|++
control|)
block|{
name|int
name|val
init|=
name|srand
operator|.
name|nextInt
argument_list|()
decl_stmt|;
while|while
condition|(
name|set
operator|.
name|contains
argument_list|(
name|val
argument_list|)
condition|)
block|{
name|val
operator|=
name|srand
operator|.
name|nextInt
argument_list|()
expr_stmt|;
block|}
name|integers
index|[
name|i
index|]
operator|=
name|val
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|2048
argument_list|,
name|set
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|val
range|:
name|integers
control|)
block|{
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|set
operator|.
name|remove
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|set
operator|.
name|remove
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|set
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test of containsAll method, of class TreeSet.    */
annotation|@
name|Test
DECL|method|testContainsAll ()
specifier|public
name|void
name|testContainsAll
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|list
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"apa"
block|,
literal|"apa2"
block|,
literal|"apa"
block|}
argument_list|)
decl_stmt|;
name|FoldedTreeSet
argument_list|<
name|String
argument_list|>
name|instance
init|=
operator|new
name|FoldedTreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|instance
operator|.
name|containsAll
argument_list|(
name|list
argument_list|)
argument_list|)
expr_stmt|;
name|instance
operator|.
name|addAll
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|instance
operator|.
name|containsAll
argument_list|(
name|list
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test of addAll method, of class TreeSet.    */
annotation|@
name|Test
DECL|method|testAddAll ()
specifier|public
name|void
name|testAddAll
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|list
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"apa"
block|,
literal|"apa2"
block|,
literal|"apa"
block|}
argument_list|)
decl_stmt|;
name|FoldedTreeSet
argument_list|<
name|String
argument_list|>
name|instance
init|=
operator|new
name|FoldedTreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|instance
operator|.
name|addAll
argument_list|(
name|list
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|instance
operator|.
name|addAll
argument_list|(
name|list
argument_list|)
argument_list|)
expr_stmt|;
comment|// add same entries again
block|}
comment|/**    * Test of retainAll method, of class TreeSet.    */
annotation|@
name|Test
DECL|method|testRetainAll ()
specifier|public
name|void
name|testRetainAll
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|list
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"apa"
block|,
literal|"apa2"
block|,
literal|"apa"
block|}
argument_list|)
decl_stmt|;
name|FoldedTreeSet
argument_list|<
name|String
argument_list|>
name|instance
init|=
operator|new
name|FoldedTreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|instance
operator|.
name|addAll
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|instance
operator|.
name|retainAll
argument_list|(
name|list
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|instance
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|list2
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"apa"
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|instance
operator|.
name|retainAll
argument_list|(
name|list2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|instance
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test of removeAll method, of class TreeSet.    */
annotation|@
name|Test
DECL|method|testRemoveAll ()
specifier|public
name|void
name|testRemoveAll
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|list
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"apa"
block|,
literal|"apa2"
block|,
literal|"apa"
block|}
argument_list|)
decl_stmt|;
name|FoldedTreeSet
argument_list|<
name|String
argument_list|>
name|instance
init|=
operator|new
name|FoldedTreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|instance
operator|.
name|removeAll
argument_list|(
name|list
argument_list|)
argument_list|)
expr_stmt|;
name|instance
operator|.
name|addAll
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|instance
operator|.
name|removeAll
argument_list|(
name|list
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|instance
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test of clear method, of class TreeSet.    */
annotation|@
name|Test
DECL|method|testClear ()
specifier|public
name|void
name|testClear
parameter_list|()
block|{
name|FoldedTreeSet
argument_list|<
name|String
argument_list|>
name|instance
init|=
operator|new
name|FoldedTreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|instance
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|instance
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|add
argument_list|(
literal|"apa"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|instance
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|instance
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFillRatio ()
specifier|public
name|void
name|testFillRatio
parameter_list|()
block|{
name|FoldedTreeSet
argument_list|<
name|Integer
argument_list|>
name|set
init|=
operator|new
name|FoldedTreeSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|int
name|size
init|=
literal|1024
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|size
condition|;
name|i
operator|++
control|)
block|{
name|set
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Iteration: "
operator|+
name|i
argument_list|,
literal|1.0
argument_list|,
name|set
operator|.
name|fillRatio
argument_list|()
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|size
operator|/
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|set
operator|.
name|remove
argument_list|(
name|i
operator|*
literal|2
argument_list|)
expr_stmt|;
comment|// Need the max since all the removes from the last node doesn't
comment|// affect the fill ratio
name|assertEquals
argument_list|(
literal|"Iteration: "
operator|+
name|i
argument_list|,
name|Math
operator|.
name|max
argument_list|(
operator|(
name|size
operator|-
name|i
operator|)
operator|/
operator|(
name|double
operator|)
name|size
argument_list|,
literal|0.53125
argument_list|)
argument_list|,
name|set
operator|.
name|fillRatio
argument_list|()
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCompact ()
specifier|public
name|void
name|testCompact
parameter_list|()
block|{
name|FoldedTreeSet
argument_list|<
name|Holder
argument_list|>
name|set
init|=
operator|new
name|FoldedTreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|long
index|[]
name|longs
init|=
operator|new
name|long
index|[
literal|24553
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|longs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Holder
name|val
init|=
operator|new
name|Holder
argument_list|(
name|srand
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|set
operator|.
name|contains
argument_list|(
name|val
argument_list|)
condition|)
block|{
name|val
operator|=
operator|new
name|Holder
argument_list|(
name|srand
operator|.
name|nextLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|longs
index|[
name|i
index|]
operator|=
name|val
operator|.
name|getId
argument_list|()
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|longs
operator|.
name|length
argument_list|,
name|set
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|long
index|[]
name|longs2
init|=
operator|new
name|long
index|[
name|longs
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|longs2
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Holder
name|val
init|=
operator|new
name|Holder
argument_list|(
name|srand
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|set
operator|.
name|contains
argument_list|(
name|val
argument_list|)
condition|)
block|{
name|val
operator|=
operator|new
name|Holder
argument_list|(
name|srand
operator|.
name|nextLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|longs2
index|[
name|i
index|]
operator|=
name|val
operator|.
name|getId
argument_list|()
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|longs
operator|.
name|length
operator|+
name|longs2
operator|.
name|length
argument_list|,
name|set
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create fragementation
for|for
control|(
name|long
name|val
range|:
name|longs
control|)
block|{
name|assertTrue
argument_list|(
name|set
operator|.
name|remove
argument_list|(
operator|new
name|Holder
argument_list|(
name|val
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|longs2
operator|.
name|length
argument_list|,
name|set
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|set
operator|.
name|compact
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|compact
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|longs2
operator|.
name|length
argument_list|,
name|set
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|long
name|val
range|:
name|longs
control|)
block|{
name|assertFalse
argument_list|(
name|set
operator|.
name|remove
argument_list|(
operator|new
name|Holder
argument_list|(
name|val
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|long
name|val
range|:
name|longs2
control|)
block|{
name|assertEquals
argument_list|(
name|val
argument_list|,
name|set
operator|.
name|get
argument_list|(
operator|new
name|Holder
argument_list|(
name|val
argument_list|)
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

