begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ErasureCodingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedStripedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockManagerTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeStorageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ErasureCodingPolicyManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|BlockECReconstructionCommand
operator|.
name|BlockECReconstructionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|StripedBlockUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|CodecUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|ErasureCodeNative
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|rawcoder
operator|.
name|NativeRSRawErasureCoderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestReconstructStripedFile
specifier|public
class|class
name|TestReconstructStripedFile
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestReconstructStripedFile
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|ecPolicy
specifier|private
specifier|final
name|ErasureCodingPolicy
name|ecPolicy
init|=
name|ErasureCodingPolicyManager
operator|.
name|getSystemDefaultPolicy
argument_list|()
decl_stmt|;
DECL|field|dataBlkNum
specifier|private
specifier|final
name|int
name|dataBlkNum
init|=
name|ecPolicy
operator|.
name|getNumDataUnits
argument_list|()
decl_stmt|;
DECL|field|parityBlkNum
specifier|private
specifier|final
name|int
name|parityBlkNum
init|=
name|ecPolicy
operator|.
name|getNumParityUnits
argument_list|()
decl_stmt|;
DECL|field|cellSize
specifier|private
specifier|final
name|int
name|cellSize
init|=
name|ecPolicy
operator|.
name|getCellSize
argument_list|()
decl_stmt|;
DECL|field|blockSize
specifier|private
specifier|final
name|int
name|blockSize
init|=
name|cellSize
operator|*
literal|3
decl_stmt|;
DECL|field|groupSize
specifier|private
specifier|final
name|int
name|groupSize
init|=
name|dataBlkNum
operator|+
name|parityBlkNum
decl_stmt|;
DECL|field|dnNum
specifier|private
specifier|final
name|int
name|dnNum
init|=
name|groupSize
operator|+
name|parityBlkNum
decl_stmt|;
static|static
block|{
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|DFSClient
operator|.
name|LOG
argument_list|,
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|BlockManager
operator|.
name|LOG
argument_list|,
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|BlockManager
operator|.
name|blockLog
argument_list|,
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
DECL|enum|ReconstructionType
enum|enum
name|ReconstructionType
block|{
DECL|enumConstant|DataOnly
name|DataOnly
block|,
DECL|enumConstant|ParityOnly
name|ParityOnly
block|,
DECL|enumConstant|Any
name|Any
block|}
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|fs
specifier|private
name|DistributedFileSystem
name|fs
decl_stmt|;
comment|// Map: DatanodeID -> datanode index in cluster
DECL|field|dnMap
specifier|private
name|Map
argument_list|<
name|DatanodeID
argument_list|,
name|Integer
argument_list|>
name|dnMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|random
specifier|private
specifier|final
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DN_EC_RECONSTRUCTION_STRIPED_READ_BUFFER_SIZE_KEY
argument_list|,
name|cellSize
operator|-
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REPLICATION_INTERVAL_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REPLICATION_CONSIDERLOAD_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|ErasureCodeNative
operator|.
name|isNativeCodeLoaded
argument_list|()
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|CodecUtil
operator|.
name|IO_ERASURECODE_CODEC_RS_DEFAULT_RAWCODER_KEY
argument_list|,
name|NativeRSRawErasureCoderFactory
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|dnNum
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|setErasureCodingPolicy
argument_list|(
literal|"/"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|DataNode
argument_list|>
name|datanodes
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dnNum
condition|;
name|i
operator|++
control|)
block|{
name|dnMap
operator|.
name|put
argument_list|(
name|datanodes
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getDatanodeId
argument_list|()
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testRecoverOneParityBlock ()
specifier|public
name|void
name|testRecoverOneParityBlock
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|fileLen
init|=
operator|(
name|dataBlkNum
operator|+
literal|1
operator|)
operator|*
name|blockSize
operator|+
name|blockSize
operator|/
literal|10
decl_stmt|;
name|assertFileBlocksReconstruction
argument_list|(
literal|"/testRecoverOneParityBlock"
argument_list|,
name|fileLen
argument_list|,
name|ReconstructionType
operator|.
name|ParityOnly
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testRecoverOneParityBlock1 ()
specifier|public
name|void
name|testRecoverOneParityBlock1
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|fileLen
init|=
name|cellSize
operator|+
name|cellSize
operator|/
literal|10
decl_stmt|;
name|assertFileBlocksReconstruction
argument_list|(
literal|"/testRecoverOneParityBlock1"
argument_list|,
name|fileLen
argument_list|,
name|ReconstructionType
operator|.
name|ParityOnly
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testRecoverOneParityBlock2 ()
specifier|public
name|void
name|testRecoverOneParityBlock2
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|fileLen
init|=
literal|1
decl_stmt|;
name|assertFileBlocksReconstruction
argument_list|(
literal|"/testRecoverOneParityBlock2"
argument_list|,
name|fileLen
argument_list|,
name|ReconstructionType
operator|.
name|ParityOnly
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testRecoverOneParityBlock3 ()
specifier|public
name|void
name|testRecoverOneParityBlock3
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|fileLen
init|=
operator|(
name|dataBlkNum
operator|-
literal|1
operator|)
operator|*
name|blockSize
operator|+
name|blockSize
operator|/
literal|10
decl_stmt|;
name|assertFileBlocksReconstruction
argument_list|(
literal|"/testRecoverOneParityBlock3"
argument_list|,
name|fileLen
argument_list|,
name|ReconstructionType
operator|.
name|ParityOnly
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testRecoverAllParityBlocks ()
specifier|public
name|void
name|testRecoverAllParityBlocks
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|fileLen
init|=
name|dataBlkNum
operator|*
name|blockSize
operator|+
name|blockSize
operator|/
literal|10
decl_stmt|;
name|assertFileBlocksReconstruction
argument_list|(
literal|"/testRecoverAllParityBlocks"
argument_list|,
name|fileLen
argument_list|,
name|ReconstructionType
operator|.
name|ParityOnly
argument_list|,
name|parityBlkNum
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testRecoverAllDataBlocks ()
specifier|public
name|void
name|testRecoverAllDataBlocks
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|fileLen
init|=
operator|(
name|dataBlkNum
operator|+
name|parityBlkNum
operator|)
operator|*
name|blockSize
operator|+
name|blockSize
operator|/
literal|10
decl_stmt|;
name|assertFileBlocksReconstruction
argument_list|(
literal|"/testRecoverAllDataBlocks"
argument_list|,
name|fileLen
argument_list|,
name|ReconstructionType
operator|.
name|DataOnly
argument_list|,
name|parityBlkNum
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testRecoverAllDataBlocks1 ()
specifier|public
name|void
name|testRecoverAllDataBlocks1
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|fileLen
init|=
name|parityBlkNum
operator|*
name|blockSize
operator|+
name|blockSize
operator|/
literal|10
decl_stmt|;
name|assertFileBlocksReconstruction
argument_list|(
literal|"/testRecoverAllDataBlocks1"
argument_list|,
name|fileLen
argument_list|,
name|ReconstructionType
operator|.
name|DataOnly
argument_list|,
name|parityBlkNum
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testRecoverOneDataBlock ()
specifier|public
name|void
name|testRecoverOneDataBlock
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|fileLen
init|=
operator|(
name|dataBlkNum
operator|+
literal|1
operator|)
operator|*
name|blockSize
operator|+
name|blockSize
operator|/
literal|10
decl_stmt|;
name|assertFileBlocksReconstruction
argument_list|(
literal|"/testRecoverOneDataBlock"
argument_list|,
name|fileLen
argument_list|,
name|ReconstructionType
operator|.
name|DataOnly
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testRecoverOneDataBlock1 ()
specifier|public
name|void
name|testRecoverOneDataBlock1
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|fileLen
init|=
name|cellSize
operator|+
name|cellSize
operator|/
literal|10
decl_stmt|;
name|assertFileBlocksReconstruction
argument_list|(
literal|"/testRecoverOneDataBlock1"
argument_list|,
name|fileLen
argument_list|,
name|ReconstructionType
operator|.
name|DataOnly
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testRecoverOneDataBlock2 ()
specifier|public
name|void
name|testRecoverOneDataBlock2
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|fileLen
init|=
literal|1
decl_stmt|;
name|assertFileBlocksReconstruction
argument_list|(
literal|"/testRecoverOneDataBlock2"
argument_list|,
name|fileLen
argument_list|,
name|ReconstructionType
operator|.
name|DataOnly
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testRecoverAnyBlocks ()
specifier|public
name|void
name|testRecoverAnyBlocks
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|fileLen
init|=
name|parityBlkNum
operator|*
name|blockSize
operator|+
name|blockSize
operator|/
literal|10
decl_stmt|;
name|assertFileBlocksReconstruction
argument_list|(
literal|"/testRecoverAnyBlocks"
argument_list|,
name|fileLen
argument_list|,
name|ReconstructionType
operator|.
name|Any
argument_list|,
name|random
operator|.
name|nextInt
argument_list|(
name|parityBlkNum
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testRecoverAnyBlocks1 ()
specifier|public
name|void
name|testRecoverAnyBlocks1
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|fileLen
init|=
operator|(
name|dataBlkNum
operator|+
name|parityBlkNum
operator|)
operator|*
name|blockSize
operator|+
name|blockSize
operator|/
literal|10
decl_stmt|;
name|assertFileBlocksReconstruction
argument_list|(
literal|"/testRecoverAnyBlocks1"
argument_list|,
name|fileLen
argument_list|,
name|ReconstructionType
operator|.
name|Any
argument_list|,
name|random
operator|.
name|nextInt
argument_list|(
name|parityBlkNum
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|generateDeadDnIndices (ReconstructionType type, int deadNum, byte[] indices)
specifier|private
name|int
index|[]
name|generateDeadDnIndices
parameter_list|(
name|ReconstructionType
name|type
parameter_list|,
name|int
name|deadNum
parameter_list|,
name|byte
index|[]
name|indices
parameter_list|)
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|deadList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|deadNum
argument_list|)
decl_stmt|;
while|while
condition|(
name|deadList
operator|.
name|size
argument_list|()
operator|<
name|deadNum
condition|)
block|{
name|int
name|dead
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|indices
operator|.
name|length
argument_list|)
decl_stmt|;
name|boolean
name|isOfType
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|ReconstructionType
operator|.
name|DataOnly
condition|)
block|{
name|isOfType
operator|=
name|indices
index|[
name|dead
index|]
operator|<
name|dataBlkNum
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|ReconstructionType
operator|.
name|ParityOnly
condition|)
block|{
name|isOfType
operator|=
name|indices
index|[
name|dead
index|]
operator|>=
name|dataBlkNum
expr_stmt|;
block|}
if|if
condition|(
name|isOfType
operator|&&
operator|!
name|deadList
operator|.
name|contains
argument_list|(
name|dead
argument_list|)
condition|)
block|{
name|deadList
operator|.
name|add
argument_list|(
name|dead
argument_list|)
expr_stmt|;
block|}
block|}
name|int
index|[]
name|d
init|=
operator|new
name|int
index|[
name|deadNum
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|deadNum
condition|;
name|i
operator|++
control|)
block|{
name|d
index|[
name|i
index|]
operator|=
name|deadList
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|d
return|;
block|}
DECL|method|shutdownDataNode (DataNode dn)
specifier|private
name|void
name|shutdownDataNode
parameter_list|(
name|DataNode
name|dn
parameter_list|)
throws|throws
name|IOException
block|{
comment|/*      * Kill the datanode which contains one replica      * We need to make sure it dead in namenode: clear its update time and      * trigger NN to check heartbeat.      */
name|dn
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|setDataNodeDead
argument_list|(
name|dn
operator|.
name|getDatanodeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|generateErrors (Map<ExtendedBlock, DataNode> corruptTargets, ReconstructionType type)
specifier|private
name|int
name|generateErrors
parameter_list|(
name|Map
argument_list|<
name|ExtendedBlock
argument_list|,
name|DataNode
argument_list|>
name|corruptTargets
parameter_list|,
name|ReconstructionType
name|type
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|stoppedDNs
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ExtendedBlock
argument_list|,
name|DataNode
argument_list|>
name|target
range|:
name|corruptTargets
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|stoppedDNs
operator|==
literal|0
operator|||
name|type
operator|!=
name|ReconstructionType
operator|.
name|DataOnly
operator|||
name|random
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|// stop at least one DN to trigger reconstruction
name|LOG
operator|.
name|info
argument_list|(
literal|"Note: stop DataNode "
operator|+
name|target
operator|.
name|getValue
argument_list|()
operator|.
name|getDisplayName
argument_list|()
operator|+
literal|" with internal block "
operator|+
name|target
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|shutdownDataNode
argument_list|(
name|target
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|stoppedDNs
operator|++
expr_stmt|;
block|}
else|else
block|{
comment|// corrupt the data on the DN
name|LOG
operator|.
name|info
argument_list|(
literal|"Note: corrupt data on "
operator|+
name|target
operator|.
name|getValue
argument_list|()
operator|.
name|getDisplayName
argument_list|()
operator|+
literal|" with internal block "
operator|+
name|target
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|corruptReplica
argument_list|(
name|target
operator|.
name|getValue
argument_list|()
argument_list|,
name|target
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|stoppedDNs
return|;
block|}
comment|/**    * Test the file blocks reconstruction.    * 1. Check the replica is reconstructed in the target datanode,    *    and verify the block replica length, generationStamp and content.    * 2. Read the file and verify content.    */
DECL|method|assertFileBlocksReconstruction (String fileName, int fileLen, ReconstructionType type, int toRecoverBlockNum)
specifier|private
name|void
name|assertFileBlocksReconstruction
parameter_list|(
name|String
name|fileName
parameter_list|,
name|int
name|fileLen
parameter_list|,
name|ReconstructionType
name|type
parameter_list|,
name|int
name|toRecoverBlockNum
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|toRecoverBlockNum
argument_list|<
literal|1
operator|||
name|toRecoverBlockNum
argument_list|>
name|parityBlkNum
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"toRecoverBlockNum should be between 1 ~ "
operator|+
name|parityBlkNum
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"File length must be positive."
argument_list|,
name|fileLen
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|fileLen
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|data
argument_list|,
operator|(
name|byte
operator|)
literal|1
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|writeFile
argument_list|(
name|fs
argument_list|,
name|file
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|StripedFileTestUtil
operator|.
name|waitBlockGroupsReported
argument_list|(
name|fs
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|LocatedBlocks
name|locatedBlocks
init|=
name|StripedFileTestUtil
operator|.
name|getLocatedBlocks
argument_list|(
name|file
argument_list|,
name|fs
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|locatedBlocks
operator|.
name|getFileLength
argument_list|()
argument_list|,
name|fileLen
argument_list|)
expr_stmt|;
name|LocatedStripedBlock
name|lastBlock
init|=
operator|(
name|LocatedStripedBlock
operator|)
name|locatedBlocks
operator|.
name|getLastLocatedBlock
argument_list|()
decl_stmt|;
name|DatanodeInfo
index|[]
name|storageInfos
init|=
name|lastBlock
operator|.
name|getLocations
argument_list|()
decl_stmt|;
name|byte
index|[]
name|indices
init|=
name|lastBlock
operator|.
name|getBlockIndices
argument_list|()
decl_stmt|;
name|BitSet
name|bitset
init|=
operator|new
name|BitSet
argument_list|(
name|dnNum
argument_list|)
decl_stmt|;
for|for
control|(
name|DatanodeInfo
name|storageInfo
range|:
name|storageInfos
control|)
block|{
name|bitset
operator|.
name|set
argument_list|(
name|dnMap
operator|.
name|get
argument_list|(
name|storageInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
index|[]
name|dead
init|=
name|generateDeadDnIndices
argument_list|(
name|type
argument_list|,
name|toRecoverBlockNum
argument_list|,
name|indices
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Note: indices == "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|indices
argument_list|)
operator|+
literal|". Generate errors on datanodes: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|dead
argument_list|)
argument_list|)
expr_stmt|;
name|DatanodeInfo
index|[]
name|dataDNs
init|=
operator|new
name|DatanodeInfo
index|[
name|toRecoverBlockNum
index|]
decl_stmt|;
name|int
index|[]
name|deadDnIndices
init|=
operator|new
name|int
index|[
name|toRecoverBlockNum
index|]
decl_stmt|;
name|ExtendedBlock
index|[]
name|blocks
init|=
operator|new
name|ExtendedBlock
index|[
name|toRecoverBlockNum
index|]
decl_stmt|;
name|File
index|[]
name|replicas
init|=
operator|new
name|File
index|[
name|toRecoverBlockNum
index|]
decl_stmt|;
name|long
index|[]
name|replicaLengths
init|=
operator|new
name|long
index|[
name|toRecoverBlockNum
index|]
decl_stmt|;
name|File
index|[]
name|metadatas
init|=
operator|new
name|File
index|[
name|toRecoverBlockNum
index|]
decl_stmt|;
name|byte
index|[]
index|[]
name|replicaContents
init|=
operator|new
name|byte
index|[
name|toRecoverBlockNum
index|]
index|[]
decl_stmt|;
name|Map
argument_list|<
name|ExtendedBlock
argument_list|,
name|DataNode
argument_list|>
name|errorMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|dead
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|toRecoverBlockNum
condition|;
name|i
operator|++
control|)
block|{
name|dataDNs
index|[
name|i
index|]
operator|=
name|storageInfos
index|[
name|dead
index|[
name|i
index|]
index|]
expr_stmt|;
name|deadDnIndices
index|[
name|i
index|]
operator|=
name|dnMap
operator|.
name|get
argument_list|(
name|dataDNs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
comment|// Check the block replica file on deadDn before it dead.
name|blocks
index|[
name|i
index|]
operator|=
name|StripedBlockUtil
operator|.
name|constructInternalBlock
argument_list|(
name|lastBlock
operator|.
name|getBlock
argument_list|()
argument_list|,
name|cellSize
argument_list|,
name|dataBlkNum
argument_list|,
name|indices
index|[
name|dead
index|[
name|i
index|]
index|]
argument_list|)
expr_stmt|;
name|errorMap
operator|.
name|put
argument_list|(
name|blocks
index|[
name|i
index|]
argument_list|,
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
name|deadDnIndices
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|replicas
index|[
name|i
index|]
operator|=
name|cluster
operator|.
name|getBlockFile
argument_list|(
name|deadDnIndices
index|[
name|i
index|]
argument_list|,
name|blocks
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|replicaLengths
index|[
name|i
index|]
operator|=
name|replicas
index|[
name|i
index|]
operator|.
name|length
argument_list|()
expr_stmt|;
name|metadatas
index|[
name|i
index|]
operator|=
name|cluster
operator|.
name|getBlockMetadataFile
argument_list|(
name|deadDnIndices
index|[
name|i
index|]
argument_list|,
name|blocks
index|[
name|i
index|]
argument_list|)
expr_stmt|;
comment|// the block replica on the datanode should be the same as expected
name|assertEquals
argument_list|(
name|replicaLengths
index|[
name|i
index|]
argument_list|,
name|StripedBlockUtil
operator|.
name|getInternalBlockLength
argument_list|(
name|lastBlock
operator|.
name|getBlockSize
argument_list|()
argument_list|,
name|cellSize
argument_list|,
name|dataBlkNum
argument_list|,
name|indices
index|[
name|dead
index|[
name|i
index|]
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|metadatas
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
name|blocks
index|[
name|i
index|]
operator|.
name|getGenerationStamp
argument_list|()
operator|+
literal|".meta"
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"replica "
operator|+
name|i
operator|+
literal|" locates in file: "
operator|+
name|replicas
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|replicaContents
index|[
name|i
index|]
operator|=
name|DFSTestUtil
operator|.
name|readFileAsBytes
argument_list|(
name|replicas
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|int
name|lastGroupDataLen
init|=
name|fileLen
operator|%
operator|(
name|dataBlkNum
operator|*
name|blockSize
operator|)
decl_stmt|;
name|int
name|lastGroupNumBlk
init|=
name|lastGroupDataLen
operator|==
literal|0
condition|?
name|dataBlkNum
else|:
name|Math
operator|.
name|min
argument_list|(
name|dataBlkNum
argument_list|,
operator|(
operator|(
name|lastGroupDataLen
operator|-
literal|1
operator|)
operator|/
name|cellSize
operator|+
literal|1
operator|)
argument_list|)
decl_stmt|;
name|int
name|groupSize
init|=
name|lastGroupNumBlk
operator|+
name|parityBlkNum
decl_stmt|;
comment|// shutdown datanodes or generate corruption
name|int
name|stoppedDN
init|=
name|generateErrors
argument_list|(
name|errorMap
argument_list|,
name|type
argument_list|)
decl_stmt|;
comment|// Check the locatedBlocks of the file again
name|locatedBlocks
operator|=
name|StripedFileTestUtil
operator|.
name|getLocatedBlocks
argument_list|(
name|file
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|lastBlock
operator|=
operator|(
name|LocatedStripedBlock
operator|)
name|locatedBlocks
operator|.
name|getLastLocatedBlock
argument_list|()
expr_stmt|;
name|storageInfos
operator|=
name|lastBlock
operator|.
name|getLocations
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|storageInfos
operator|.
name|length
argument_list|,
name|groupSize
operator|-
name|stoppedDN
argument_list|)
expr_stmt|;
name|int
index|[]
name|targetDNs
init|=
operator|new
name|int
index|[
name|dnNum
operator|-
name|groupSize
index|]
decl_stmt|;
name|int
name|n
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dnNum
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|bitset
operator|.
name|get
argument_list|(
name|i
argument_list|)
condition|)
block|{
comment|// not contain replica of the block.
name|targetDNs
index|[
name|n
operator|++
index|]
operator|=
name|i
expr_stmt|;
block|}
block|}
name|StripedFileTestUtil
operator|.
name|waitForReconstructionFinished
argument_list|(
name|file
argument_list|,
name|fs
argument_list|,
name|groupSize
argument_list|)
expr_stmt|;
name|targetDNs
operator|=
name|sortTargetsByReplicas
argument_list|(
name|blocks
argument_list|,
name|targetDNs
argument_list|)
expr_stmt|;
comment|// Check the replica on the new target node.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|toRecoverBlockNum
condition|;
name|i
operator|++
control|)
block|{
name|File
name|replicaAfterReconstruction
init|=
name|cluster
operator|.
name|getBlockFile
argument_list|(
name|targetDNs
index|[
name|i
index|]
argument_list|,
name|blocks
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"replica after reconstruction "
operator|+
name|replicaAfterReconstruction
argument_list|)
expr_stmt|;
name|File
name|metadataAfterReconstruction
init|=
name|cluster
operator|.
name|getBlockMetadataFile
argument_list|(
name|targetDNs
index|[
name|i
index|]
argument_list|,
name|blocks
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|replicaLengths
index|[
name|i
index|]
argument_list|,
name|replicaAfterReconstruction
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"replica before "
operator|+
name|replicas
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|metadataAfterReconstruction
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
name|blocks
index|[
name|i
index|]
operator|.
name|getGenerationStamp
argument_list|()
operator|+
literal|".meta"
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|replicaContentAfterReconstruction
init|=
name|DFSTestUtil
operator|.
name|readFileAsBytes
argument_list|(
name|replicaAfterReconstruction
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|replicaContents
index|[
name|i
index|]
argument_list|,
name|replicaContentAfterReconstruction
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|sortTargetsByReplicas (ExtendedBlock[] blocks, int[] targetDNs)
specifier|private
name|int
index|[]
name|sortTargetsByReplicas
parameter_list|(
name|ExtendedBlock
index|[]
name|blocks
parameter_list|,
name|int
index|[]
name|targetDNs
parameter_list|)
block|{
name|int
index|[]
name|result
init|=
operator|new
name|int
index|[
name|blocks
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|blocks
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|result
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|targetDNs
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|targetDNs
index|[
name|j
index|]
operator|!=
operator|-
literal|1
condition|)
block|{
name|File
name|replica
init|=
name|cluster
operator|.
name|getBlockFile
argument_list|(
name|targetDNs
index|[
name|j
index|]
argument_list|,
name|blocks
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|replica
operator|!=
literal|null
condition|)
block|{
name|result
index|[
name|i
index|]
operator|=
name|targetDNs
index|[
name|j
index|]
expr_stmt|;
name|targetDNs
index|[
name|j
index|]
operator|=
operator|-
literal|1
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|result
index|[
name|i
index|]
operator|==
operator|-
literal|1
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Failed to reconstruct striped block: "
operator|+
name|blocks
index|[
name|i
index|]
operator|.
name|getBlockId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/*    * Tests that processErasureCodingTasks should not throw exceptions out due to    * invalid ECTask submission.    */
annotation|@
name|Test
DECL|method|testProcessErasureCodingTasksSubmitionShouldSucceed ()
specifier|public
name|void
name|testProcessErasureCodingTasksSubmitionShouldSucceed
parameter_list|()
throws|throws
name|Exception
block|{
name|DataNode
name|dataNode
init|=
name|cluster
operator|.
name|dataNodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|datanode
decl_stmt|;
comment|// Pack invalid(dummy) parameters in ecTasks. Irrespective of parameters, each task
comment|// thread pool submission should succeed, so that it will not prevent
comment|// processing other tasks in the list if any exceptions.
name|int
name|size
init|=
name|cluster
operator|.
name|dataNodes
operator|.
name|size
argument_list|()
decl_stmt|;
name|byte
index|[]
name|liveIndices
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
name|DatanodeInfo
index|[]
name|dataDNs
init|=
operator|new
name|DatanodeInfo
index|[
name|size
operator|+
literal|1
index|]
decl_stmt|;
name|DatanodeStorageInfo
name|targetDnInfos_1
init|=
name|BlockManagerTestUtil
operator|.
name|newDatanodeStorageInfo
argument_list|(
name|DFSTestUtil
operator|.
name|getLocalDatanodeDescriptor
argument_list|()
argument_list|,
operator|new
name|DatanodeStorage
argument_list|(
literal|"s01"
argument_list|)
argument_list|)
decl_stmt|;
name|DatanodeStorageInfo
index|[]
name|dnStorageInfo
init|=
operator|new
name|DatanodeStorageInfo
index|[]
block|{
name|targetDnInfos_1
block|}
decl_stmt|;
name|BlockECReconstructionInfo
name|invalidECInfo
init|=
operator|new
name|BlockECReconstructionInfo
argument_list|(
operator|new
name|ExtendedBlock
argument_list|(
literal|"bp-id"
argument_list|,
literal|123456
argument_list|)
argument_list|,
name|dataDNs
argument_list|,
name|dnStorageInfo
argument_list|,
name|liveIndices
argument_list|,
name|ErasureCodingPolicyManager
operator|.
name|getSystemDefaultPolicy
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|BlockECReconstructionInfo
argument_list|>
name|ecTasks
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ecTasks
operator|.
name|add
argument_list|(
name|invalidECInfo
argument_list|)
expr_stmt|;
name|dataNode
operator|.
name|getErasureCodingWorker
argument_list|()
operator|.
name|processErasureCodingTasks
argument_list|(
name|ecTasks
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

