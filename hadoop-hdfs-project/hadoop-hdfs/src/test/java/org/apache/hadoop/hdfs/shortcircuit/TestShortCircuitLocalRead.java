begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.shortcircuit
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|shortcircuit
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|AppendTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|ClientContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtilClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|TestBlockReaderLocal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ClientDatanodeProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|DataTransferProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|BlockTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|SimulatedFSDataset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|unix
operator|.
name|DomainSocket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|unix
operator|.
name|TemporarySocketDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test for short circuit read functionality using {@link BlockReaderLocal}.  * When a block is being read by a client is on the local datanode, instead of  * using {@link DataTransferProtocol} and connect to datanode,  * the short circuit read allows reading the file directly  * from the files on the local file system.  */
end_comment

begin_class
DECL|class|TestShortCircuitLocalRead
specifier|public
class|class
name|TestShortCircuitLocalRead
block|{
DECL|field|sockDir
specifier|private
specifier|static
name|TemporarySocketDirectory
name|sockDir
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|init ()
specifier|public
specifier|static
name|void
name|init
parameter_list|()
block|{
name|sockDir
operator|=
operator|new
name|TemporarySocketDirectory
argument_list|()
expr_stmt|;
name|DomainSocket
operator|.
name|disableBindPathValidation
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|shutdown ()
specifier|public
specifier|static
name|void
name|shutdown
parameter_list|()
throws|throws
name|IOException
block|{
name|sockDir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|before ()
specifier|public
name|void
name|before
parameter_list|()
block|{
name|Assume
operator|.
name|assumeThat
argument_list|(
name|DomainSocket
operator|.
name|getLoadingFailureReason
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|field|seed
specifier|static
specifier|final
name|long
name|seed
init|=
literal|0xDEADBEEFL
decl_stmt|;
DECL|field|blockSize
specifier|static
specifier|final
name|int
name|blockSize
init|=
literal|5120
decl_stmt|;
comment|// creates a file but does not close it
DECL|method|createFile (FileSystem fileSys, Path name, int repl)
specifier|static
name|FSDataOutputStream
name|createFile
parameter_list|(
name|FileSystem
name|fileSys
parameter_list|,
name|Path
name|name
parameter_list|,
name|int
name|repl
parameter_list|)
throws|throws
name|IOException
block|{
name|FSDataOutputStream
name|stm
init|=
name|fileSys
operator|.
name|create
argument_list|(
name|name
argument_list|,
literal|true
argument_list|,
name|fileSys
operator|.
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
literal|"io.file.buffer.size"
argument_list|,
literal|4096
argument_list|)
argument_list|,
operator|(
name|short
operator|)
name|repl
argument_list|,
name|blockSize
argument_list|)
decl_stmt|;
return|return
name|stm
return|;
block|}
DECL|method|checkData (byte[] actual, int from, byte[] expected, String message)
specifier|static
specifier|private
name|void
name|checkData
parameter_list|(
name|byte
index|[]
name|actual
parameter_list|,
name|int
name|from
parameter_list|,
name|byte
index|[]
name|expected
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|checkData
argument_list|(
name|actual
argument_list|,
name|from
argument_list|,
name|expected
argument_list|,
name|actual
operator|.
name|length
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
DECL|method|checkData (byte[] actual, int from, byte[] expected, int len, String message)
specifier|static
specifier|private
name|void
name|checkData
parameter_list|(
name|byte
index|[]
name|actual
parameter_list|,
name|int
name|from
parameter_list|,
name|byte
index|[]
name|expected
parameter_list|,
name|int
name|len
parameter_list|,
name|String
name|message
parameter_list|)
block|{
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|len
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|expected
index|[
name|from
operator|+
name|idx
index|]
operator|!=
name|actual
index|[
name|idx
index|]
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|message
operator|+
literal|" byte "
operator|+
operator|(
name|from
operator|+
name|idx
operator|)
operator|+
literal|" differs. expected "
operator|+
name|expected
index|[
name|from
operator|+
name|idx
index|]
operator|+
literal|" actual "
operator|+
name|actual
index|[
name|idx
index|]
operator|+
literal|"\nexpected: "
operator|+
name|StringUtils
operator|.
name|byteToHexString
argument_list|(
name|expected
argument_list|,
name|from
argument_list|,
name|from
operator|+
name|len
argument_list|)
operator|+
literal|"\nactual:   "
operator|+
name|StringUtils
operator|.
name|byteToHexString
argument_list|(
name|actual
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getCurrentUser ()
specifier|private
specifier|static
name|String
name|getCurrentUser
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
return|;
block|}
comment|/** Check file content, reading as user {@code readingUser} */
DECL|method|checkFileContent (URI uri, Path name, byte[] expected, int readOffset, String readingUser, Configuration conf, boolean legacyShortCircuitFails)
specifier|static
name|void
name|checkFileContent
parameter_list|(
name|URI
name|uri
parameter_list|,
name|Path
name|name
parameter_list|,
name|byte
index|[]
name|expected
parameter_list|,
name|int
name|readOffset
parameter_list|,
name|String
name|readingUser
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|boolean
name|legacyShortCircuitFails
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|// Ensure short circuit is enabled
name|DistributedFileSystem
name|fs
init|=
name|getFileSystem
argument_list|(
name|readingUser
argument_list|,
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|ClientContext
name|getClientContext
init|=
name|ClientContext
operator|.
name|getFromConf
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|legacyShortCircuitFails
condition|)
block|{
name|assertFalse
argument_list|(
name|getClientContext
operator|.
name|getDisableLegacyBlockReaderLocal
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|FSDataInputStream
name|stm
init|=
name|fs
operator|.
name|open
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|byte
index|[]
name|actual
init|=
operator|new
name|byte
index|[
name|expected
operator|.
name|length
operator|-
name|readOffset
index|]
decl_stmt|;
name|stm
operator|.
name|readFully
argument_list|(
name|readOffset
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|checkData
argument_list|(
name|actual
argument_list|,
name|readOffset
argument_list|,
name|expected
argument_list|,
literal|"Read 2"
argument_list|)
expr_stmt|;
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Now read using a different API.
name|actual
operator|=
operator|new
name|byte
index|[
name|expected
operator|.
name|length
operator|-
name|readOffset
index|]
expr_stmt|;
name|stm
operator|=
name|fs
operator|.
name|open
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|skipFully
argument_list|(
name|stm
argument_list|,
name|readOffset
argument_list|)
expr_stmt|;
comment|//Read a small number of bytes first.
name|int
name|nread
init|=
name|stm
operator|.
name|read
argument_list|(
name|actual
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|nread
operator|+=
name|stm
operator|.
name|read
argument_list|(
name|actual
argument_list|,
name|nread
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|int
name|len
init|=
literal|517
decl_stmt|;
if|if
condition|(
name|actual
operator|.
name|length
operator|-
name|nread
operator|>=
name|len
condition|)
block|{
comment|//Read across chunk boundary
name|nread
operator|+=
name|stm
operator|.
name|read
argument_list|(
name|actual
argument_list|,
name|nread
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
name|checkData
argument_list|(
name|actual
argument_list|,
name|readOffset
argument_list|,
name|expected
argument_list|,
name|nread
argument_list|,
literal|"A few bytes"
argument_list|)
expr_stmt|;
comment|//Now read rest of it
while|while
condition|(
name|nread
operator|<
name|actual
operator|.
name|length
condition|)
block|{
name|int
name|nbytes
init|=
name|stm
operator|.
name|read
argument_list|(
name|actual
argument_list|,
name|nread
argument_list|,
name|actual
operator|.
name|length
operator|-
name|nread
argument_list|)
decl_stmt|;
if|if
condition|(
name|nbytes
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|(
literal|"End of file reached before reading fully."
argument_list|)
throw|;
block|}
name|nread
operator|+=
name|nbytes
expr_stmt|;
block|}
name|checkData
argument_list|(
name|actual
argument_list|,
name|readOffset
argument_list|,
name|expected
argument_list|,
literal|"Read 3"
argument_list|)
expr_stmt|;
if|if
condition|(
name|legacyShortCircuitFails
condition|)
block|{
name|assertTrue
argument_list|(
name|getClientContext
operator|.
name|getDisableLegacyBlockReaderLocal
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|arrayFromByteBuffer (ByteBuffer buf)
specifier|private
specifier|static
name|byte
index|[]
name|arrayFromByteBuffer
parameter_list|(
name|ByteBuffer
name|buf
parameter_list|)
block|{
name|ByteBuffer
name|alt
init|=
name|buf
operator|.
name|duplicate
argument_list|()
decl_stmt|;
name|alt
operator|.
name|clear
argument_list|()
expr_stmt|;
name|byte
index|[]
name|arr
init|=
operator|new
name|byte
index|[
name|alt
operator|.
name|remaining
argument_list|()
index|]
decl_stmt|;
name|alt
operator|.
name|get
argument_list|(
name|arr
argument_list|)
expr_stmt|;
return|return
name|arr
return|;
block|}
comment|/** Check the file content, reading as user {@code readingUser} */
DECL|method|checkFileContentDirect (URI uri, Path name, byte[] expected, int readOffset, String readingUser, Configuration conf, boolean legacyShortCircuitFails)
specifier|static
name|void
name|checkFileContentDirect
parameter_list|(
name|URI
name|uri
parameter_list|,
name|Path
name|name
parameter_list|,
name|byte
index|[]
name|expected
parameter_list|,
name|int
name|readOffset
parameter_list|,
name|String
name|readingUser
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|boolean
name|legacyShortCircuitFails
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|// Ensure short circuit is enabled
name|DistributedFileSystem
name|fs
init|=
name|getFileSystem
argument_list|(
name|readingUser
argument_list|,
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|ClientContext
name|clientContext
init|=
name|ClientContext
operator|.
name|getFromConf
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|legacyShortCircuitFails
condition|)
block|{
name|assertTrue
argument_list|(
name|clientContext
operator|.
name|getDisableLegacyBlockReaderLocal
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|HdfsDataInputStream
name|stm
init|=
operator|(
name|HdfsDataInputStream
operator|)
name|fs
operator|.
name|open
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|ByteBuffer
name|actual
init|=
name|ByteBuffer
operator|.
name|allocateDirect
argument_list|(
name|expected
operator|.
name|length
operator|-
name|readOffset
argument_list|)
decl_stmt|;
name|IOUtils
operator|.
name|skipFully
argument_list|(
name|stm
argument_list|,
name|readOffset
argument_list|)
expr_stmt|;
name|actual
operator|.
name|limit
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|//Read a small number of bytes first.
name|int
name|nread
init|=
name|stm
operator|.
name|read
argument_list|(
name|actual
argument_list|)
decl_stmt|;
name|actual
operator|.
name|limit
argument_list|(
name|nread
operator|+
literal|2
argument_list|)
expr_stmt|;
name|nread
operator|+=
name|stm
operator|.
name|read
argument_list|(
name|actual
argument_list|)
expr_stmt|;
comment|// Read across chunk boundary
name|actual
operator|.
name|limit
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|actual
operator|.
name|capacity
argument_list|()
argument_list|,
name|nread
operator|+
literal|517
argument_list|)
argument_list|)
expr_stmt|;
name|nread
operator|+=
name|stm
operator|.
name|read
argument_list|(
name|actual
argument_list|)
expr_stmt|;
name|checkData
argument_list|(
name|arrayFromByteBuffer
argument_list|(
name|actual
argument_list|)
argument_list|,
name|readOffset
argument_list|,
name|expected
argument_list|,
name|nread
argument_list|,
literal|"A few bytes"
argument_list|)
expr_stmt|;
comment|//Now read rest of it
name|actual
operator|.
name|limit
argument_list|(
name|actual
operator|.
name|capacity
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|actual
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
name|int
name|nbytes
init|=
name|stm
operator|.
name|read
argument_list|(
name|actual
argument_list|)
decl_stmt|;
if|if
condition|(
name|nbytes
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|(
literal|"End of file reached before reading fully."
argument_list|)
throw|;
block|}
name|nread
operator|+=
name|nbytes
expr_stmt|;
block|}
name|checkData
argument_list|(
name|arrayFromByteBuffer
argument_list|(
name|actual
argument_list|)
argument_list|,
name|readOffset
argument_list|,
name|expected
argument_list|,
literal|"Read 3"
argument_list|)
expr_stmt|;
if|if
condition|(
name|legacyShortCircuitFails
condition|)
block|{
name|assertTrue
argument_list|(
name|clientContext
operator|.
name|getDisableLegacyBlockReaderLocal
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|doTestShortCircuitReadLegacy (boolean ignoreChecksum, int size, int readOffset, String shortCircuitUser, String readingUser, boolean legacyShortCircuitFails)
specifier|public
name|void
name|doTestShortCircuitReadLegacy
parameter_list|(
name|boolean
name|ignoreChecksum
parameter_list|,
name|int
name|size
parameter_list|,
name|int
name|readOffset
parameter_list|,
name|String
name|shortCircuitUser
parameter_list|,
name|String
name|readingUser
parameter_list|,
name|boolean
name|legacyShortCircuitFails
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|doTestShortCircuitReadImpl
argument_list|(
name|ignoreChecksum
argument_list|,
name|size
argument_list|,
name|readOffset
argument_list|,
name|shortCircuitUser
argument_list|,
name|readingUser
argument_list|,
name|legacyShortCircuitFails
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestShortCircuitRead (boolean ignoreChecksum, int size, int readOffset)
specifier|public
name|void
name|doTestShortCircuitRead
parameter_list|(
name|boolean
name|ignoreChecksum
parameter_list|,
name|int
name|size
parameter_list|,
name|int
name|readOffset
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|doTestShortCircuitReadImpl
argument_list|(
name|ignoreChecksum
argument_list|,
name|size
argument_list|,
name|readOffset
argument_list|,
literal|null
argument_list|,
name|getCurrentUser
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that file data can be read by reading the block file    * directly from the local store.    */
DECL|method|doTestShortCircuitReadImpl (boolean ignoreChecksum, int size, int readOffset, String shortCircuitUser, String readingUser, boolean legacyShortCircuitFails)
specifier|public
name|void
name|doTestShortCircuitReadImpl
parameter_list|(
name|boolean
name|ignoreChecksum
parameter_list|,
name|int
name|size
parameter_list|,
name|int
name|readOffset
parameter_list|,
name|String
name|shortCircuitUser
parameter_list|,
name|String
name|readingUser
parameter_list|,
name|boolean
name|legacyShortCircuitFails
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|Read
operator|.
name|ShortCircuit
operator|.
name|KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|Read
operator|.
name|ShortCircuit
operator|.
name|SKIP_CHECKSUM_KEY
argument_list|,
name|ignoreChecksum
argument_list|)
expr_stmt|;
comment|// Set a random client context name so that we don't share a cache with
comment|// other invocations of this function.
name|conf
operator|.
name|set
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|DFS_CLIENT_CONTEXT
argument_list|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DOMAIN_SOCKET_PATH_KEY
argument_list|,
operator|new
name|File
argument_list|(
name|sockDir
operator|.
name|getDir
argument_list|()
argument_list|,
literal|"TestShortCircuitLocalRead._PORT.sock"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|shortCircuitUser
operator|!=
literal|null
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_LOCAL_PATH_ACCESS_USER_KEY
argument_list|,
name|shortCircuitUser
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|DFS_CLIENT_USE_LEGACY_BLOCKREADERLOCAL
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|format
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
try|try
block|{
comment|// check that / exists
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"/ should be a directory"
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|fileData
init|=
name|AppendTestUtil
operator|.
name|randomBytes
argument_list|(
name|seed
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|Path
name|file1
init|=
name|fs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
literal|"filelocal.dat"
argument_list|)
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|stm
init|=
name|createFile
argument_list|(
name|fs
argument_list|,
name|file1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|stm
operator|.
name|write
argument_list|(
name|fileData
argument_list|)
expr_stmt|;
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
name|URI
name|uri
init|=
name|cluster
operator|.
name|getURI
argument_list|()
decl_stmt|;
name|checkFileContent
argument_list|(
name|uri
argument_list|,
name|file1
argument_list|,
name|fileData
argument_list|,
name|readOffset
argument_list|,
name|readingUser
argument_list|,
name|conf
argument_list|,
name|legacyShortCircuitFails
argument_list|)
expr_stmt|;
name|checkFileContentDirect
argument_list|(
name|uri
argument_list|,
name|file1
argument_list|,
name|fileData
argument_list|,
name|readOffset
argument_list|,
name|readingUser
argument_list|,
name|conf
argument_list|,
name|legacyShortCircuitFails
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testFileLocalReadNoChecksum ()
specifier|public
name|void
name|testFileLocalReadNoChecksum
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestShortCircuitRead
argument_list|(
literal|true
argument_list|,
literal|3
operator|*
name|blockSize
operator|+
literal|100
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testFileLocalReadChecksum ()
specifier|public
name|void
name|testFileLocalReadChecksum
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestShortCircuitRead
argument_list|(
literal|false
argument_list|,
literal|3
operator|*
name|blockSize
operator|+
literal|100
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testSmallFileLocalRead ()
specifier|public
name|void
name|testSmallFileLocalRead
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestShortCircuitRead
argument_list|(
literal|false
argument_list|,
literal|13
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|doTestShortCircuitRead
argument_list|(
literal|false
argument_list|,
literal|13
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|doTestShortCircuitRead
argument_list|(
literal|true
argument_list|,
literal|13
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|doTestShortCircuitRead
argument_list|(
literal|true
argument_list|,
literal|13
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testLocalReadLegacy ()
specifier|public
name|void
name|testLocalReadLegacy
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestShortCircuitReadLegacy
argument_list|(
literal|true
argument_list|,
literal|13
argument_list|,
literal|0
argument_list|,
name|getCurrentUser
argument_list|()
argument_list|,
name|getCurrentUser
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Try a short circuit from a reader that is not allowed to    * to use short circuit. The test ensures reader falls back to non    * shortcircuit reads when shortcircuit is disallowed.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testLocalReadFallback ()
specifier|public
name|void
name|testLocalReadFallback
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestShortCircuitReadLegacy
argument_list|(
literal|true
argument_list|,
literal|13
argument_list|,
literal|0
argument_list|,
name|getCurrentUser
argument_list|()
argument_list|,
literal|"notallowed"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testReadFromAnOffset ()
specifier|public
name|void
name|testReadFromAnOffset
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestShortCircuitRead
argument_list|(
literal|false
argument_list|,
literal|3
operator|*
name|blockSize
operator|+
literal|100
argument_list|,
literal|777
argument_list|)
expr_stmt|;
name|doTestShortCircuitRead
argument_list|(
literal|true
argument_list|,
literal|3
operator|*
name|blockSize
operator|+
literal|100
argument_list|,
literal|777
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testLongFile ()
specifier|public
name|void
name|testLongFile
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestShortCircuitRead
argument_list|(
literal|false
argument_list|,
literal|10
operator|*
name|blockSize
operator|+
literal|100
argument_list|,
literal|777
argument_list|)
expr_stmt|;
name|doTestShortCircuitRead
argument_list|(
literal|true
argument_list|,
literal|10
operator|*
name|blockSize
operator|+
literal|100
argument_list|,
literal|777
argument_list|)
expr_stmt|;
block|}
DECL|method|getFileSystem (String user, final URI uri, final Configuration conf)
specifier|private
specifier|static
name|DistributedFileSystem
name|getFileSystem
parameter_list|(
name|String
name|user
parameter_list|,
specifier|final
name|URI
name|uri
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|user
argument_list|)
decl_stmt|;
return|return
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|DistributedFileSystem
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DistributedFileSystem
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|(
name|DistributedFileSystem
operator|)
name|FileSystem
operator|.
name|get
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testDeprecatedGetBlockLocalPathInfoRpc ()
specifier|public
name|void
name|testDeprecatedGetBlockLocalPathInfoRpc
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|format
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
try|try
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/tmp/x"
argument_list|)
argument_list|,
literal|16
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|23
argument_list|)
expr_stmt|;
name|LocatedBlocks
name|lb
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getBlockLocations
argument_list|(
literal|"/tmp/x"
argument_list|,
literal|0
argument_list|,
literal|16
argument_list|)
decl_stmt|;
comment|// Create a new block object, because the block inside LocatedBlock at
comment|// namenode is of type BlockInfo.
name|ExtendedBlock
name|blk
init|=
operator|new
name|ExtendedBlock
argument_list|(
name|lb
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBlock
argument_list|()
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|token
init|=
name|lb
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBlockToken
argument_list|()
decl_stmt|;
specifier|final
name|DatanodeInfo
name|dnInfo
init|=
name|lb
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLocations
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|ClientDatanodeProtocol
name|proxy
init|=
name|DFSUtilClient
operator|.
name|createClientDatanodeProtocolProxy
argument_list|(
name|dnInfo
argument_list|,
name|conf
argument_list|,
literal|60000
argument_list|,
literal|false
argument_list|)
decl_stmt|;
try|try
block|{
name|proxy
operator|.
name|getBlockLocalPathInfo
argument_list|(
name|blk
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"The call should have failed as this user "
operator|+
literal|" is not allowed to call getBlockLocalPathInfo"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"not allowed to call getBlockLocalPathInfo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testSkipWithVerifyChecksum ()
specifier|public
name|void
name|testSkipWithVerifyChecksum
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|size
init|=
name|blockSize
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|Read
operator|.
name|ShortCircuit
operator|.
name|KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|Read
operator|.
name|ShortCircuit
operator|.
name|SKIP_CHECKSUM_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DOMAIN_SOCKET_PATH_KEY
argument_list|,
operator|new
name|File
argument_list|(
name|sockDir
operator|.
name|getDir
argument_list|()
argument_list|,
literal|"testSkipWithVerifyChecksum._PORT.sock"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|DomainSocket
operator|.
name|disableBindPathValidation
argument_list|()
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|format
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
try|try
block|{
comment|// check that / exists
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"/ should be a directory"
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|fileData
init|=
name|AppendTestUtil
operator|.
name|randomBytes
argument_list|(
name|seed
argument_list|,
name|size
operator|*
literal|3
argument_list|)
decl_stmt|;
comment|// create a new file in home directory. Do not close it.
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"filelocal.dat"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|stm
init|=
name|createFile
argument_list|(
name|fs
argument_list|,
name|file1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// write to file
name|stm
operator|.
name|write
argument_list|(
name|fileData
argument_list|)
expr_stmt|;
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// now test the skip function
name|FSDataInputStream
name|instm
init|=
name|fs
operator|.
name|open
argument_list|(
name|file1
argument_list|)
decl_stmt|;
name|byte
index|[]
name|actual
init|=
operator|new
name|byte
index|[
name|fileData
operator|.
name|length
index|]
decl_stmt|;
comment|// read something from the block first, otherwise BlockReaderLocal.skip()
comment|// will not be invoked
name|int
name|nread
init|=
name|instm
operator|.
name|read
argument_list|(
name|actual
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|long
name|skipped
init|=
literal|2
operator|*
name|size
operator|+
literal|3
decl_stmt|;
name|instm
operator|.
name|seek
argument_list|(
name|skipped
argument_list|)
expr_stmt|;
name|nread
operator|=
name|instm
operator|.
name|read
argument_list|(
name|actual
argument_list|,
call|(
name|int
call|)
argument_list|(
name|skipped
operator|+
name|nread
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|instm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testHandleTruncatedBlockFile ()
specifier|public
name|void
name|testHandleTruncatedBlockFile
parameter_list|()
throws|throws
name|IOException
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
name|HdfsConfiguration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|Read
operator|.
name|ShortCircuit
operator|.
name|KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|Read
operator|.
name|ShortCircuit
operator|.
name|SKIP_CHECKSUM_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DOMAIN_SOCKET_PATH_KEY
argument_list|,
operator|new
name|File
argument_list|(
name|sockDir
operator|.
name|getDir
argument_list|()
argument_list|,
literal|"testHandleTruncatedBlockFile._PORT.sock"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_CHECKSUM_TYPE_KEY
argument_list|,
literal|"CRC32C"
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|TEST_PATH
init|=
operator|new
name|Path
argument_list|(
literal|"/a"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|TEST_PATH2
init|=
operator|new
name|Path
argument_list|(
literal|"/b"
argument_list|)
decl_stmt|;
specifier|final
name|long
name|RANDOM_SEED
init|=
literal|4567L
decl_stmt|;
specifier|final
name|long
name|RANDOM_SEED2
init|=
literal|4568L
decl_stmt|;
name|FSDataInputStream
name|fsIn
init|=
literal|null
decl_stmt|;
specifier|final
name|int
name|TEST_LENGTH
init|=
literal|3456
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|TEST_PATH
argument_list|,
name|TEST_LENGTH
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
name|RANDOM_SEED
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|TEST_PATH2
argument_list|,
name|TEST_LENGTH
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
name|RANDOM_SEED2
argument_list|)
expr_stmt|;
name|fsIn
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|open
argument_list|(
name|TEST_PATH2
argument_list|)
expr_stmt|;
name|byte
name|original
index|[]
init|=
operator|new
name|byte
index|[
name|TEST_LENGTH
index|]
decl_stmt|;
name|IOUtils
operator|.
name|readFully
argument_list|(
name|fsIn
argument_list|,
name|original
argument_list|,
literal|0
argument_list|,
name|TEST_LENGTH
argument_list|)
expr_stmt|;
name|fsIn
operator|.
name|close
argument_list|()
expr_stmt|;
name|fsIn
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|DFSTestUtil
operator|.
name|waitReplication
argument_list|(
name|fs
argument_list|,
name|TEST_PATH
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"unexpected InterruptedException during "
operator|+
literal|"waitReplication: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"unexpected TimeoutException during "
operator|+
literal|"waitReplication: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
name|ExtendedBlock
name|block
init|=
name|DFSTestUtil
operator|.
name|getFirstBlock
argument_list|(
name|fs
argument_list|,
name|TEST_PATH
argument_list|)
decl_stmt|;
name|File
name|dataFile
init|=
name|cluster
operator|.
name|getBlockFile
argument_list|(
literal|0
argument_list|,
name|block
argument_list|)
decl_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
try|try
init|(
name|RandomAccessFile
name|raf
init|=
operator|new
name|RandomAccessFile
argument_list|(
name|dataFile
argument_list|,
literal|"rw"
argument_list|)
init|)
block|{
name|raf
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|format
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|fsIn
operator|=
name|fs
operator|.
name|open
argument_list|(
name|TEST_PATH
argument_list|)
expr_stmt|;
try|try
block|{
name|byte
name|buf
index|[]
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
name|fsIn
operator|.
name|seek
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|fsIn
operator|.
name|readFully
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|buf
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"shouldn't be able to read from corrupt 0-length "
operator|+
literal|"block file."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|DFSClient
operator|.
name|LOG
operator|.
name|error
argument_list|(
literal|"caught exception "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|fsIn
operator|.
name|close
argument_list|()
expr_stmt|;
name|fsIn
operator|=
literal|null
expr_stmt|;
comment|// We should still be able to read the other file.
comment|// This is important because it indicates that we detected that the
comment|// previous block was corrupt, rather than blaming the problem on
comment|// communication.
name|fsIn
operator|=
name|fs
operator|.
name|open
argument_list|(
name|TEST_PATH2
argument_list|)
expr_stmt|;
name|byte
name|buf
index|[]
init|=
operator|new
name|byte
index|[
name|original
operator|.
name|length
index|]
decl_stmt|;
name|fsIn
operator|.
name|readFully
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|buf
operator|.
name|length
argument_list|)
expr_stmt|;
name|TestBlockReaderLocal
operator|.
name|assertArrayRegionsEqual
argument_list|(
name|original
argument_list|,
literal|0
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|,
name|original
operator|.
name|length
argument_list|)
expr_stmt|;
name|fsIn
operator|.
name|close
argument_list|()
expr_stmt|;
name|fsIn
operator|=
literal|null
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|fsIn
operator|!=
literal|null
condition|)
name|fsIn
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test to run benchmarks between short circuit read vs regular read with    * specified number of threads simultaneously reading.    *<br>    * Run this using the following command:    * bin/hadoop --config confdir \    * org.apache.hadoop.hdfs.TestShortCircuitLocalRead \    *<shortcircuit on?><checsum on?><Number of threads>    */
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|!=
literal|3
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Usage: test shortcircuit checksum threadCount"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|boolean
name|shortcircuit
init|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|boolean
name|checksum
init|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|int
name|threadCount
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
comment|// Setup create a file
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|Read
operator|.
name|ShortCircuit
operator|.
name|KEY
argument_list|,
name|shortcircuit
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DOMAIN_SOCKET_PATH_KEY
argument_list|,
literal|"/tmp/TestShortCircuitLocalRead._PORT"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|Read
operator|.
name|ShortCircuit
operator|.
name|SKIP_CHECKSUM_KEY
argument_list|,
name|checksum
argument_list|)
expr_stmt|;
comment|// Override fileSize and DATA_TO_WRITE to
comment|// much larger values for benchmark test
name|int
name|fileSize
init|=
literal|1000
operator|*
name|blockSize
operator|+
literal|100
decl_stmt|;
comment|// File with 1000 blocks
specifier|final
name|byte
index|[]
name|dataToWrite
init|=
name|AppendTestUtil
operator|.
name|randomBytes
argument_list|(
name|seed
argument_list|,
name|fileSize
argument_list|)
decl_stmt|;
comment|// create a new file in home directory. Do not close it.
specifier|final
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"filelocal.dat"
argument_list|)
decl_stmt|;
specifier|final
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|stm
init|=
name|createFile
argument_list|(
name|fs
argument_list|,
name|file1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|stm
operator|.
name|write
argument_list|(
name|dataToWrite
argument_list|)
expr_stmt|;
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
name|long
name|start
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
specifier|final
name|int
name|iteration
init|=
literal|20
decl_stmt|;
name|Thread
index|[]
name|threads
init|=
operator|new
name|Thread
index|[
name|threadCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threadCount
condition|;
name|i
operator|++
control|)
block|{
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iteration
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|String
name|user
init|=
name|getCurrentUser
argument_list|()
decl_stmt|;
name|checkFileContent
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|file1
argument_list|,
name|dataToWrite
argument_list|,
literal|0
argument_list|,
name|user
argument_list|,
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threadCount
condition|;
name|i
operator|++
control|)
block|{
name|threads
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threadCount
condition|;
name|i
operator|++
control|)
block|{
name|threads
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|long
name|end
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Iteration "
operator|+
name|iteration
operator|+
literal|" took "
operator|+
operator|(
name|end
operator|-
name|start
operator|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|file1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testReadWithRemoteBlockReader ()
specifier|public
name|void
name|testReadWithRemoteBlockReader
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|doTestShortCircuitReadWithRemoteBlockReader
argument_list|(
literal|true
argument_list|,
literal|3
operator|*
name|blockSize
operator|+
literal|100
argument_list|,
name|getCurrentUser
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that file data can be read by reading the block    * through RemoteBlockReader    * @throws IOException   */
DECL|method|doTestShortCircuitReadWithRemoteBlockReader ( boolean ignoreChecksum, int size, String shortCircuitUser, int readOffset, boolean shortCircuitFails)
specifier|public
name|void
name|doTestShortCircuitReadWithRemoteBlockReader
parameter_list|(
name|boolean
name|ignoreChecksum
parameter_list|,
name|int
name|size
parameter_list|,
name|String
name|shortCircuitUser
parameter_list|,
name|int
name|readOffset
parameter_list|,
name|boolean
name|shortCircuitFails
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|DFS_CLIENT_USE_LEGACY_BLOCKREADER
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|Read
operator|.
name|ShortCircuit
operator|.
name|KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|format
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// check that / exists
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|URI
name|uri
init|=
name|cluster
operator|.
name|getURI
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"/ should be a directory"
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|fileData
init|=
name|AppendTestUtil
operator|.
name|randomBytes
argument_list|(
name|seed
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"filelocal.dat"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|stm
init|=
name|createFile
argument_list|(
name|fs
argument_list|,
name|file1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|stm
operator|.
name|write
argument_list|(
name|fileData
argument_list|)
expr_stmt|;
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|checkFileContent
argument_list|(
name|uri
argument_list|,
name|file1
argument_list|,
name|fileData
argument_list|,
name|readOffset
argument_list|,
name|shortCircuitUser
argument_list|,
name|conf
argument_list|,
name|shortCircuitFails
argument_list|)
expr_stmt|;
comment|//RemoteBlockReader have unsupported method read(ByteBuffer bf)
name|assertTrue
argument_list|(
literal|"RemoteBlockReader unsupported method read(ByteBuffer bf) error"
argument_list|,
name|checkUnsupportedMethod
argument_list|(
name|fs
argument_list|,
name|file1
argument_list|,
name|fileData
argument_list|,
name|readOffset
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"doTestShortCircuitReadWithRemoteBlockReader ex error "
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|inEx
parameter_list|)
block|{
throw|throw
name|inEx
throw|;
block|}
finally|finally
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|checkUnsupportedMethod (FileSystem fs, Path file, byte[] expected, int readOffset)
specifier|private
name|boolean
name|checkUnsupportedMethod
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|file
parameter_list|,
name|byte
index|[]
name|expected
parameter_list|,
name|int
name|readOffset
parameter_list|)
throws|throws
name|IOException
block|{
name|HdfsDataInputStream
name|stm
init|=
operator|(
name|HdfsDataInputStream
operator|)
name|fs
operator|.
name|open
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|ByteBuffer
name|actual
init|=
name|ByteBuffer
operator|.
name|allocateDirect
argument_list|(
name|expected
operator|.
name|length
operator|-
name|readOffset
argument_list|)
decl_stmt|;
name|IOUtils
operator|.
name|skipFully
argument_list|(
name|stm
argument_list|,
name|readOffset
argument_list|)
expr_stmt|;
try|try
block|{
name|stm
operator|.
name|read
argument_list|(
name|actual
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|unex
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

