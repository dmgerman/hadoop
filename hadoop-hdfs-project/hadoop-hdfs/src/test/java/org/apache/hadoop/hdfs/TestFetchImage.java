begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_HEARTBEAT_INTERVAL_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_HA_TAILEDITS_PERIOD_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|SafeModeAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ha
operator|.
name|HATestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|DFSAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|MD5FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|MD5Hash
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestFetchImage
specifier|public
class|class
name|TestFetchImage
block|{
DECL|field|FETCHED_IMAGE_FILE
specifier|private
specifier|static
specifier|final
name|File
name|FETCHED_IMAGE_FILE
init|=
name|GenericTestUtils
operator|.
name|getTestDir
argument_list|(
literal|"target/fetched-image-dir"
argument_list|)
decl_stmt|;
comment|// Shamelessly stolen from NNStorage.
DECL|field|IMAGE_REGEX
specifier|private
specifier|static
specifier|final
name|Pattern
name|IMAGE_REGEX
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"fsimage_(\\d+)"
argument_list|)
decl_stmt|;
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|nn0
specifier|private
name|NameNode
name|nn0
init|=
literal|null
decl_stmt|;
DECL|field|nn1
specifier|private
name|NameNode
name|nn1
init|=
literal|null
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
init|=
literal|null
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setupImageDir ()
specifier|public
specifier|static
name|void
name|setupImageDir
parameter_list|()
block|{
name|FETCHED_IMAGE_FILE
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|cleanup ()
specifier|public
specifier|static
name|void
name|cleanup
parameter_list|()
block|{
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|FETCHED_IMAGE_FILE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setupCluster ()
specifier|public
name|void
name|setupCluster
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFS_HA_TAILEDITS_PERIOD_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFS_BLOCK_SIZE_KEY
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|nnTopology
argument_list|(
name|MiniDFSNNTopology
operator|.
name|simpleHATopology
argument_list|()
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|nn0
operator|=
name|cluster
operator|.
name|getNameNode
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|nn1
operator|=
name|cluster
operator|.
name|getNameNode
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|HATestUtil
operator|.
name|configureFailoverFs
argument_list|(
name|cluster
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
block|}
comment|/**    * Download a few fsimages using `hdfs dfsadmin -fetchImage ...' and verify    * the results.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testFetchImageHA ()
specifier|public
name|void
name|testFetchImageHA
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|parent
init|=
operator|new
name|Path
argument_list|(
name|PathUtils
operator|.
name|getTestPath
argument_list|(
name|getClass
argument_list|()
argument_list|)
argument_list|,
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|nnIndex
init|=
literal|0
decl_stmt|;
comment|/* run on nn0 as active */
name|cluster
operator|.
name|transitionToActive
argument_list|(
name|nnIndex
argument_list|)
expr_stmt|;
name|testFetchImageInternal
argument_list|(
name|nnIndex
argument_list|,
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"dir1"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"dir2"
argument_list|)
argument_list|)
expr_stmt|;
comment|/* run on nn1 as active */
name|nnIndex
operator|=
literal|1
expr_stmt|;
name|HATestUtil
operator|.
name|waitForStandbyToCatchUp
argument_list|(
name|nn0
argument_list|,
name|nn1
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|transitionToActive
argument_list|(
name|nnIndex
argument_list|)
expr_stmt|;
name|testFetchImageInternal
argument_list|(
name|nnIndex
argument_list|,
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"dir3"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"dir4"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFetchImageInternal ( final int nnIndex, final Path dir1, final Path dir2)
specifier|private
name|void
name|testFetchImageInternal
parameter_list|(
specifier|final
name|int
name|nnIndex
parameter_list|,
specifier|final
name|Path
name|dir1
parameter_list|,
specifier|final
name|Path
name|dir2
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|dfsConf
init|=
name|cluster
operator|.
name|getConfiguration
argument_list|(
name|nnIndex
argument_list|)
decl_stmt|;
specifier|final
name|DFSAdmin
name|dfsAdmin
init|=
operator|new
name|DFSAdmin
argument_list|()
decl_stmt|;
name|dfsAdmin
operator|.
name|setConf
argument_list|(
name|dfsConf
argument_list|)
expr_stmt|;
try|try
init|(
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|(
name|nnIndex
argument_list|)
init|)
block|{
name|runFetchImage
argument_list|(
name|dfsAdmin
argument_list|,
name|cluster
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir2
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getNameNodeRpc
argument_list|(
name|nnIndex
argument_list|)
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getNameNodeRpc
argument_list|(
name|nnIndex
argument_list|)
operator|.
name|saveNamespace
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getNameNodeRpc
argument_list|(
name|nnIndex
argument_list|)
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_LEAVE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|runFetchImage
argument_list|(
name|dfsAdmin
argument_list|,
name|cluster
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Run `hdfs dfsadmin -fetchImage ...' and verify that the downloaded image is    * correct.    */
DECL|method|runFetchImage (DFSAdmin dfsAdmin, MiniDFSCluster cluster)
specifier|private
specifier|static
name|void
name|runFetchImage
parameter_list|(
name|DFSAdmin
name|dfsAdmin
parameter_list|,
name|MiniDFSCluster
name|cluster
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|retVal
init|=
name|dfsAdmin
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-fetchImage"
block|,
name|FETCHED_IMAGE_FILE
operator|.
name|getPath
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|retVal
argument_list|)
expr_stmt|;
name|File
name|highestImageOnNn
init|=
name|getHighestFsImageOnCluster
argument_list|(
name|cluster
argument_list|)
decl_stmt|;
name|MD5Hash
name|expected
init|=
name|MD5FileUtils
operator|.
name|computeMd5ForFile
argument_list|(
name|highestImageOnNn
argument_list|)
decl_stmt|;
name|MD5Hash
name|actual
init|=
name|MD5FileUtils
operator|.
name|computeMd5ForFile
argument_list|(
operator|new
name|File
argument_list|(
name|FETCHED_IMAGE_FILE
argument_list|,
name|highestImageOnNn
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
comment|/**    * @return the fsimage with highest transaction ID in the cluster.    */
DECL|method|getHighestFsImageOnCluster (MiniDFSCluster cluster)
specifier|private
specifier|static
name|File
name|getHighestFsImageOnCluster
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|)
block|{
name|long
name|highestImageTxId
init|=
operator|-
literal|1
decl_stmt|;
name|File
name|highestImageOnNn
init|=
literal|null
decl_stmt|;
for|for
control|(
name|URI
name|nameDir
range|:
name|cluster
operator|.
name|getNameDirs
argument_list|(
literal|0
argument_list|)
control|)
block|{
for|for
control|(
name|File
name|imageFile
range|:
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|nameDir
argument_list|)
argument_list|,
literal|"current"
argument_list|)
operator|.
name|listFiles
argument_list|()
control|)
block|{
name|Matcher
name|imageMatch
init|=
name|IMAGE_REGEX
operator|.
name|matcher
argument_list|(
name|imageFile
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|imageMatch
operator|.
name|matches
argument_list|()
condition|)
block|{
name|long
name|imageTxId
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|imageMatch
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|imageTxId
operator|>
name|highestImageTxId
condition|)
block|{
name|highestImageTxId
operator|=
name|imageTxId
expr_stmt|;
name|highestImageOnNn
operator|=
name|imageFile
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|highestImageOnNn
return|;
block|}
block|}
end_class

end_unit

