begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.ha
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ha
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|impl
operator|.
name|Log4JLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|AppendTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSNNTopology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|DatanodeProtocolClientSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockInfoUnderConstruction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockManagerTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeStorageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNodeTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSNamesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryInvocationHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
operator|.
name|DelayAnswer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MultithreadedTestUtil
operator|.
name|RepeatingTestThread
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MultithreadedTestUtil
operator|.
name|TestContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
operator|.
name|ShellCommandExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_comment
comment|/**  * Test cases regarding pipeline recovery during NN failover.  */
end_comment

begin_class
DECL|class|TestPipelinesFailover
specifier|public
class|class
name|TestPipelinesFailover
block|{
static|static
block|{
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RetryInvocationHandler
operator|.
name|class
argument_list|)
argument_list|,
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|setNameNodeLogLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
DECL|field|LOG
specifier|protected
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestPipelinesFailover
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|TEST_PATH
specifier|private
specifier|static
specifier|final
name|Path
name|TEST_PATH
init|=
operator|new
name|Path
argument_list|(
literal|"/test-file"
argument_list|)
decl_stmt|;
DECL|field|BLOCK_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|BLOCK_SIZE
init|=
literal|4096
decl_stmt|;
DECL|field|BLOCK_AND_A_HALF
specifier|private
specifier|static
specifier|final
name|int
name|BLOCK_AND_A_HALF
init|=
name|BLOCK_SIZE
operator|*
literal|3
operator|/
literal|2
decl_stmt|;
DECL|field|STRESS_NUM_THREADS
specifier|private
specifier|static
specifier|final
name|int
name|STRESS_NUM_THREADS
init|=
literal|25
decl_stmt|;
DECL|field|STRESS_RUNTIME
specifier|private
specifier|static
specifier|final
name|int
name|STRESS_RUNTIME
init|=
literal|40000
decl_stmt|;
DECL|enum|TestScenario
enum|enum
name|TestScenario
block|{
DECL|enumConstant|GRACEFUL_FAILOVER
name|GRACEFUL_FAILOVER
block|{
annotation|@
name|Override
name|void
name|run
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|)
throws|throws
name|IOException
block|{
name|cluster
operator|.
name|transitionToStandby
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|,
DECL|enumConstant|ORIGINAL_ACTIVE_CRASHED
name|ORIGINAL_ACTIVE_CRASHED
block|{
annotation|@
name|Override
name|void
name|run
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|)
throws|throws
name|IOException
block|{
name|cluster
operator|.
name|restartNameNode
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|;
DECL|method|run (MiniDFSCluster cluster)
specifier|abstract
name|void
name|run
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
DECL|enum|MethodToTestIdempotence
enum|enum
name|MethodToTestIdempotence
block|{
DECL|enumConstant|ALLOCATE_BLOCK
name|ALLOCATE_BLOCK
block|,
DECL|enumConstant|COMPLETE_FILE
name|COMPLETE_FILE
block|;   }
comment|/**    * Tests continuing a write pipeline over a failover.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testWriteOverGracefulFailover ()
specifier|public
name|void
name|testWriteOverGracefulFailover
parameter_list|()
throws|throws
name|Exception
block|{
name|doWriteOverFailoverTest
argument_list|(
name|TestScenario
operator|.
name|GRACEFUL_FAILOVER
argument_list|,
name|MethodToTestIdempotence
operator|.
name|ALLOCATE_BLOCK
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testAllocateBlockAfterCrashFailover ()
specifier|public
name|void
name|testAllocateBlockAfterCrashFailover
parameter_list|()
throws|throws
name|Exception
block|{
name|doWriteOverFailoverTest
argument_list|(
name|TestScenario
operator|.
name|ORIGINAL_ACTIVE_CRASHED
argument_list|,
name|MethodToTestIdempotence
operator|.
name|ALLOCATE_BLOCK
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testCompleteFileAfterCrashFailover ()
specifier|public
name|void
name|testCompleteFileAfterCrashFailover
parameter_list|()
throws|throws
name|Exception
block|{
name|doWriteOverFailoverTest
argument_list|(
name|TestScenario
operator|.
name|ORIGINAL_ACTIVE_CRASHED
argument_list|,
name|MethodToTestIdempotence
operator|.
name|COMPLETE_FILE
argument_list|)
expr_stmt|;
block|}
DECL|method|doWriteOverFailoverTest (TestScenario scenario, MethodToTestIdempotence methodToTest)
specifier|private
name|void
name|doWriteOverFailoverTest
parameter_list|(
name|TestScenario
name|scenario
parameter_list|,
name|MethodToTestIdempotence
name|methodToTest
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
comment|// Don't check replication periodically.
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REPLICATION_INTERVAL_KEY
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|FSDataOutputStream
name|stm
init|=
literal|null
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|nnTopology
argument_list|(
name|MiniDFSNNTopology
operator|.
name|simpleHATopology
argument_list|()
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|3
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|int
name|sizeWritten
init|=
literal|0
decl_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting with NN 0 active"
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|HATestUtil
operator|.
name|configureFailoverFs
argument_list|(
name|cluster
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|stm
operator|=
name|fs
operator|.
name|create
argument_list|(
name|TEST_PATH
argument_list|)
expr_stmt|;
comment|// write a block and a half
name|AppendTestUtil
operator|.
name|write
argument_list|(
name|stm
argument_list|,
literal|0
argument_list|,
name|BLOCK_AND_A_HALF
argument_list|)
expr_stmt|;
name|sizeWritten
operator|+=
name|BLOCK_AND_A_HALF
expr_stmt|;
comment|// Make sure all of the blocks are written out before failover.
name|stm
operator|.
name|hflush
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Failing over to NN 1"
argument_list|)
expr_stmt|;
name|scenario
operator|.
name|run
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
comment|// NOTE: explicitly do *not* make any further metadata calls
comment|// to the NN here. The next IPC call should be to allocate the next
comment|// block. Any other call would notice the failover and not test
comment|// idempotence of the operation (HDFS-3031)
name|FSNamesystem
name|ns1
init|=
name|cluster
operator|.
name|getNameNode
argument_list|(
literal|1
argument_list|)
operator|.
name|getNamesystem
argument_list|()
decl_stmt|;
name|BlockManagerTestUtil
operator|.
name|updateState
argument_list|(
name|ns1
operator|.
name|getBlockManager
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ns1
operator|.
name|getPendingReplicationBlocks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ns1
operator|.
name|getCorruptReplicaBlocks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ns1
operator|.
name|getMissingBlocksCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// If we're testing allocateBlock()'s idempotence, write another
comment|// block and a half, so we have to allocate a new block.
comment|// Otherise, don't write anything, so our next RPC will be
comment|// completeFile() if we're testing idempotence of that operation.
if|if
condition|(
name|methodToTest
operator|==
name|MethodToTestIdempotence
operator|.
name|ALLOCATE_BLOCK
condition|)
block|{
comment|// write another block and a half
name|AppendTestUtil
operator|.
name|write
argument_list|(
name|stm
argument_list|,
name|sizeWritten
argument_list|,
name|BLOCK_AND_A_HALF
argument_list|)
expr_stmt|;
name|sizeWritten
operator|+=
name|BLOCK_AND_A_HALF
expr_stmt|;
block|}
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
name|stm
operator|=
literal|null
expr_stmt|;
name|AppendTestUtil
operator|.
name|check
argument_list|(
name|fs
argument_list|,
name|TEST_PATH
argument_list|,
name|sizeWritten
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|stm
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Tests continuing a write pipeline over a failover when a DN fails    * after the failover - ensures that updating the pipeline succeeds    * even when the pipeline was constructed on a different NN.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testWriteOverGracefulFailoverWithDnFail ()
specifier|public
name|void
name|testWriteOverGracefulFailoverWithDnFail
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestWriteOverFailoverWithDnFail
argument_list|(
name|TestScenario
operator|.
name|GRACEFUL_FAILOVER
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testWriteOverCrashFailoverWithDnFail ()
specifier|public
name|void
name|testWriteOverCrashFailoverWithDnFail
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestWriteOverFailoverWithDnFail
argument_list|(
name|TestScenario
operator|.
name|ORIGINAL_ACTIVE_CRASHED
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestWriteOverFailoverWithDnFail (TestScenario scenario)
specifier|private
name|void
name|doTestWriteOverFailoverWithDnFail
parameter_list|(
name|TestScenario
name|scenario
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|FSDataOutputStream
name|stm
init|=
literal|null
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|nnTopology
argument_list|(
name|MiniDFSNNTopology
operator|.
name|simpleHATopology
argument_list|()
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|5
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting with NN 0 active"
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|HATestUtil
operator|.
name|configureFailoverFs
argument_list|(
name|cluster
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|stm
operator|=
name|fs
operator|.
name|create
argument_list|(
name|TEST_PATH
argument_list|)
expr_stmt|;
comment|// write a block and a half
name|AppendTestUtil
operator|.
name|write
argument_list|(
name|stm
argument_list|,
literal|0
argument_list|,
name|BLOCK_AND_A_HALF
argument_list|)
expr_stmt|;
comment|// Make sure all the blocks are written before failover
name|stm
operator|.
name|hflush
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Failing over to NN 1"
argument_list|)
expr_stmt|;
name|scenario
operator|.
name|run
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|TEST_PATH
argument_list|)
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|stopDataNode
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// write another block and a half
name|AppendTestUtil
operator|.
name|write
argument_list|(
name|stm
argument_list|,
name|BLOCK_AND_A_HALF
argument_list|,
name|BLOCK_AND_A_HALF
argument_list|)
expr_stmt|;
name|stm
operator|.
name|hflush
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Failing back to NN 0"
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|transitionToStandby
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|stopDataNode
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|AppendTestUtil
operator|.
name|write
argument_list|(
name|stm
argument_list|,
name|BLOCK_AND_A_HALF
operator|*
literal|2
argument_list|,
name|BLOCK_AND_A_HALF
argument_list|)
expr_stmt|;
name|stm
operator|.
name|hflush
argument_list|()
expr_stmt|;
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
name|stm
operator|=
literal|null
expr_stmt|;
name|AppendTestUtil
operator|.
name|check
argument_list|(
name|fs
argument_list|,
name|TEST_PATH
argument_list|,
name|BLOCK_AND_A_HALF
operator|*
literal|3
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|stm
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Tests lease recovery if a client crashes. This approximates the    * use case of HBase WALs being recovered after a NN failover.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testLeaseRecoveryAfterFailover ()
specifier|public
name|void
name|testLeaseRecoveryAfterFailover
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// Disable permissions so that another user can recover the lease.
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_PERMISSIONS_ENABLED_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|FSDataOutputStream
name|stm
init|=
literal|null
decl_stmt|;
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|nnTopology
argument_list|(
name|MiniDFSNNTopology
operator|.
name|simpleHATopology
argument_list|()
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|3
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting with NN 0 active"
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|HATestUtil
operator|.
name|configureFailoverFs
argument_list|(
name|cluster
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|stm
operator|=
name|fs
operator|.
name|create
argument_list|(
name|TEST_PATH
argument_list|)
expr_stmt|;
comment|// write a block and a half
name|AppendTestUtil
operator|.
name|write
argument_list|(
name|stm
argument_list|,
literal|0
argument_list|,
name|BLOCK_AND_A_HALF
argument_list|)
expr_stmt|;
name|stm
operator|.
name|hflush
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Failing over to NN 1"
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|transitionToStandby
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|TEST_PATH
argument_list|)
argument_list|)
expr_stmt|;
name|FileSystem
name|fsOtherUser
init|=
name|createFsAsOtherUser
argument_list|(
name|cluster
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|loopRecoverLease
argument_list|(
name|fsOtherUser
argument_list|,
name|TEST_PATH
argument_list|)
expr_stmt|;
name|AppendTestUtil
operator|.
name|check
argument_list|(
name|fs
argument_list|,
name|TEST_PATH
argument_list|,
name|BLOCK_AND_A_HALF
argument_list|)
expr_stmt|;
comment|// Fail back to ensure that the block locations weren't lost on the
comment|// original node.
name|cluster
operator|.
name|transitionToStandby
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|AppendTestUtil
operator|.
name|check
argument_list|(
name|fs
argument_list|,
name|TEST_PATH
argument_list|,
name|BLOCK_AND_A_HALF
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|stm
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test the scenario where the NN fails over after issuing a block    * synchronization request, but before it is committed. The    * DN running the recovery should then fail to commit the synchronization    * and a later retry will succeed.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testFailoverRightBeforeCommitSynchronization ()
specifier|public
name|void
name|testFailoverRightBeforeCommitSynchronization
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// Disable permissions so that another user can recover the lease.
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_PERMISSIONS_ENABLED_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|FSDataOutputStream
name|stm
init|=
literal|null
decl_stmt|;
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|nnTopology
argument_list|(
name|MiniDFSNNTopology
operator|.
name|simpleHATopology
argument_list|()
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|3
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting with NN 0 active"
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|HATestUtil
operator|.
name|configureFailoverFs
argument_list|(
name|cluster
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|stm
operator|=
name|fs
operator|.
name|create
argument_list|(
name|TEST_PATH
argument_list|)
expr_stmt|;
comment|// write a half block
name|AppendTestUtil
operator|.
name|write
argument_list|(
name|stm
argument_list|,
literal|0
argument_list|,
name|BLOCK_SIZE
operator|/
literal|2
argument_list|)
expr_stmt|;
name|stm
operator|.
name|hflush
argument_list|()
expr_stmt|;
comment|// Look into the block manager on the active node for the block
comment|// under construction.
name|NameNode
name|nn0
init|=
name|cluster
operator|.
name|getNameNode
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ExtendedBlock
name|blk
init|=
name|DFSTestUtil
operator|.
name|getFirstBlock
argument_list|(
name|fs
argument_list|,
name|TEST_PATH
argument_list|)
decl_stmt|;
name|DatanodeDescriptor
name|expectedPrimary
init|=
name|DFSTestUtil
operator|.
name|getExpectedPrimaryNode
argument_list|(
name|nn0
argument_list|,
name|blk
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Expecting block recovery to be triggered on DN "
operator|+
name|expectedPrimary
argument_list|)
expr_stmt|;
comment|// Find the corresponding DN daemon, and spy on its connection to the
comment|// active.
name|DataNode
name|primaryDN
init|=
name|cluster
operator|.
name|getDataNode
argument_list|(
name|expectedPrimary
operator|.
name|getIpcPort
argument_list|()
argument_list|)
decl_stmt|;
name|DatanodeProtocolClientSideTranslatorPB
name|nnSpy
init|=
name|DataNodeTestUtils
operator|.
name|spyOnBposToNN
argument_list|(
name|primaryDN
argument_list|,
name|nn0
argument_list|)
decl_stmt|;
comment|// Delay the commitBlockSynchronization call
name|DelayAnswer
name|delayer
init|=
operator|new
name|DelayAnswer
argument_list|(
name|LOG
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doAnswer
argument_list|(
name|delayer
argument_list|)
operator|.
name|when
argument_list|(
name|nnSpy
argument_list|)
operator|.
name|commitBlockSynchronization
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
name|blk
argument_list|)
argument_list|,
name|Mockito
operator|.
name|anyInt
argument_list|()
argument_list|,
comment|// new genstamp
name|Mockito
operator|.
name|anyLong
argument_list|()
argument_list|,
comment|// new length
name|Mockito
operator|.
name|eq
argument_list|(
literal|true
argument_list|)
argument_list|,
comment|// close file
name|Mockito
operator|.
name|eq
argument_list|(
literal|false
argument_list|)
argument_list|,
comment|// delete block
operator|(
name|DatanodeID
index|[]
operator|)
name|Mockito
operator|.
name|anyObject
argument_list|()
argument_list|,
comment|// new targets
operator|(
name|String
index|[]
operator|)
name|Mockito
operator|.
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
comment|// new target storages
name|DistributedFileSystem
name|fsOtherUser
init|=
name|createFsAsOtherUser
argument_list|(
name|cluster
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|fsOtherUser
operator|.
name|recoverLease
argument_list|(
name|TEST_PATH
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for commitBlockSynchronization call from primary"
argument_list|)
expr_stmt|;
name|delayer
operator|.
name|waitForCall
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Failing over to NN 1"
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|transitionToStandby
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Let the commitBlockSynchronization call go through, and check that
comment|// it failed with the correct exception.
name|delayer
operator|.
name|proceed
argument_list|()
expr_stmt|;
name|delayer
operator|.
name|waitForResult
argument_list|()
expr_stmt|;
name|Throwable
name|t
init|=
name|delayer
operator|.
name|getThrown
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|==
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"commitBlockSynchronization call did not fail on standby"
argument_list|)
expr_stmt|;
block|}
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Operation category WRITE is not supported"
argument_list|,
name|t
argument_list|)
expr_stmt|;
comment|// Now, if we try again to recover the block, it should succeed on the new
comment|// active.
name|loopRecoverLease
argument_list|(
name|fsOtherUser
argument_list|,
name|TEST_PATH
argument_list|)
expr_stmt|;
name|AppendTestUtil
operator|.
name|check
argument_list|(
name|fs
argument_list|,
name|TEST_PATH
argument_list|,
name|BLOCK_SIZE
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|stm
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Stress test for pipeline/lease recovery. Starts a number of    * threads, each of which creates a file and has another client    * break the lease. While these threads run, failover proceeds    * back and forth between two namenodes.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|STRESS_RUNTIME
operator|*
literal|3
argument_list|)
DECL|method|testPipelineRecoveryStress ()
specifier|public
name|void
name|testPipelineRecoveryStress
parameter_list|()
throws|throws
name|Exception
block|{
comment|// The following section of code is to help debug HDFS-6694 about
comment|// this test that fails from time to time due to "too many open files".
comment|//
name|String
index|[]
name|scmd
init|=
operator|new
name|String
index|[]
block|{
literal|"/bin/sh"
block|,
literal|"-c"
block|,
literal|"ulimit -a"
block|}
decl_stmt|;
name|ShellCommandExecutor
name|sce
init|=
operator|new
name|ShellCommandExecutor
argument_list|(
name|scmd
argument_list|)
decl_stmt|;
name|sce
operator|.
name|execute
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"HDFS-6694 Debug Data BEGIN==="
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"'ulimit -a' output:\n"
operator|+
name|sce
operator|.
name|getOutput
argument_list|()
argument_list|)
expr_stmt|;
name|scmd
operator|=
operator|new
name|String
index|[]
block|{
literal|"hostname"
block|}
expr_stmt|;
name|sce
operator|=
operator|new
name|ShellCommandExecutor
argument_list|(
name|scmd
argument_list|)
expr_stmt|;
name|sce
operator|.
name|execute
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"'hostname' output:\n"
operator|+
name|sce
operator|.
name|getOutput
argument_list|()
argument_list|)
expr_stmt|;
name|scmd
operator|=
operator|new
name|String
index|[]
block|{
literal|"ifconfig"
block|}
expr_stmt|;
name|sce
operator|=
operator|new
name|ShellCommandExecutor
argument_list|(
name|scmd
argument_list|)
expr_stmt|;
name|sce
operator|.
name|execute
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"'ifconfig' output:\n"
operator|+
name|sce
operator|.
name|getOutput
argument_list|()
argument_list|)
expr_stmt|;
name|scmd
operator|=
operator|new
name|String
index|[]
block|{
literal|"whoami"
block|}
expr_stmt|;
name|sce
operator|=
operator|new
name|ShellCommandExecutor
argument_list|(
name|scmd
argument_list|)
expr_stmt|;
name|sce
operator|.
name|execute
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"'whoami' output:\n"
operator|+
name|sce
operator|.
name|getOutput
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"===HDFS-6694 Debug Data END"
argument_list|)
expr_stmt|;
name|HAStressTestHarness
name|harness
init|=
operator|new
name|HAStressTestHarness
argument_list|()
decl_stmt|;
comment|// Disable permissions so that another user can recover the lease.
name|harness
operator|.
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_PERMISSIONS_ENABLED_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// This test triggers rapid NN failovers.  The client retry policy uses an
comment|// exponential backoff.  This can quickly lead to long sleep times and even
comment|// timeout the whole test.  Cap the sleep time at 1s to prevent this.
name|harness
operator|.
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_FAILOVER_SLEEPTIME_MAX_KEY
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
specifier|final
name|MiniDFSCluster
name|cluster
init|=
name|harness
operator|.
name|startCluster
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|harness
operator|.
name|getFailoverFs
argument_list|()
decl_stmt|;
name|DistributedFileSystem
name|fsAsOtherUser
init|=
name|createFsAsOtherUser
argument_list|(
name|cluster
argument_list|,
name|harness
operator|.
name|conf
argument_list|)
decl_stmt|;
name|TestContext
name|testers
init|=
operator|new
name|TestContext
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|STRESS_NUM_THREADS
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
literal|"/test-"
operator|+
name|i
argument_list|)
decl_stmt|;
name|testers
operator|.
name|addThread
argument_list|(
operator|new
name|PipelineTestThread
argument_list|(
name|testers
argument_list|,
name|fs
argument_list|,
name|fsAsOtherUser
argument_list|,
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Start a separate thread which will make sure that replication
comment|// happens quickly by triggering deletion reports and replication
comment|// work calculation frequently.
name|harness
operator|.
name|addReplicationTriggerThread
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|harness
operator|.
name|addFailoverThread
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|harness
operator|.
name|startThreads
argument_list|()
expr_stmt|;
name|testers
operator|.
name|startThreads
argument_list|()
expr_stmt|;
name|testers
operator|.
name|waitFor
argument_list|(
name|STRESS_RUNTIME
argument_list|)
expr_stmt|;
name|testers
operator|.
name|stop
argument_list|()
expr_stmt|;
name|harness
operator|.
name|stopThreads
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"===========================\n\n\n\n"
argument_list|)
expr_stmt|;
name|harness
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test thread which creates a file, has another fake user recover    * the lease on the file, and then ensures that the file's contents    * are properly readable. If any of these steps fails, propagates    * an exception back to the test context, causing the test case    * to fail.    */
DECL|class|PipelineTestThread
specifier|private
specifier|static
class|class
name|PipelineTestThread
extends|extends
name|RepeatingTestThread
block|{
DECL|field|fs
specifier|private
specifier|final
name|FileSystem
name|fs
decl_stmt|;
DECL|field|fsOtherUser
specifier|private
specifier|final
name|FileSystem
name|fsOtherUser
decl_stmt|;
DECL|field|path
specifier|private
specifier|final
name|Path
name|path
decl_stmt|;
DECL|method|PipelineTestThread (TestContext ctx, FileSystem fs, FileSystem fsOtherUser, Path p)
specifier|public
name|PipelineTestThread
parameter_list|(
name|TestContext
name|ctx
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|FileSystem
name|fsOtherUser
parameter_list|,
name|Path
name|p
parameter_list|)
block|{
name|super
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
name|this
operator|.
name|fsOtherUser
operator|=
name|fsOtherUser
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|p
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doAnAction ()
specifier|public
name|void
name|doAnAction
parameter_list|()
throws|throws
name|Exception
block|{
name|FSDataOutputStream
name|stm
init|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
decl_stmt|;
try|try
block|{
name|AppendTestUtil
operator|.
name|write
argument_list|(
name|stm
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|stm
operator|.
name|hflush
argument_list|()
expr_stmt|;
name|loopRecoverLease
argument_list|(
name|fsOtherUser
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|AppendTestUtil
operator|.
name|check
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// should expect this since we lost the lease
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Pipeline test thread for "
operator|+
name|path
return|;
block|}
block|}
DECL|method|createFsAsOtherUser ( final MiniDFSCluster cluster, final Configuration conf)
specifier|private
name|DistributedFileSystem
name|createFsAsOtherUser
parameter_list|(
specifier|final
name|MiniDFSCluster
name|cluster
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
operator|(
name|DistributedFileSystem
operator|)
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"otheruser"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"othergroup"
block|}
argument_list|)
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|FileSystem
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|FileSystem
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|HATestUtil
operator|.
name|configureFailoverFs
argument_list|(
name|cluster
argument_list|,
name|conf
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * Try to recover the lease on the given file for up to 60 seconds.    * @param fsOtherUser the filesystem to use for the recoverLease call    * @param testPath the path on which to run lease recovery    * @throws TimeoutException if lease recover does not succeed within 60    * seconds    * @throws InterruptedException if the thread is interrupted    */
DECL|method|loopRecoverLease ( final FileSystem fsOtherUser, final Path testPath)
specifier|private
specifier|static
name|void
name|loopRecoverLease
parameter_list|(
specifier|final
name|FileSystem
name|fsOtherUser
parameter_list|,
specifier|final
name|Path
name|testPath
parameter_list|)
throws|throws
name|TimeoutException
throws|,
name|InterruptedException
block|{
try|try
block|{
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
name|boolean
name|success
decl_stmt|;
try|try
block|{
name|success
operator|=
operator|(
operator|(
name|DistributedFileSystem
operator|)
name|fsOtherUser
operator|)
operator|.
name|recoverLease
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting to recover lease successfully"
argument_list|)
expr_stmt|;
block|}
return|return
name|success
return|;
block|}
block|}
argument_list|,
literal|1000
argument_list|,
literal|60000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TimeoutException
argument_list|(
literal|"Timed out recovering lease for "
operator|+
name|testPath
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

