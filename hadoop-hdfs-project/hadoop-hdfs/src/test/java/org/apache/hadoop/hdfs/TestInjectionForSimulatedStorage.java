begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|SimulatedFSDataset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_comment
comment|/**  * This class tests the replication and injection of blocks of a DFS file for simulated storage.  */
end_comment

begin_class
DECL|class|TestInjectionForSimulatedStorage
specifier|public
class|class
name|TestInjectionForSimulatedStorage
extends|extends
name|TestCase
block|{
DECL|field|checksumSize
specifier|private
name|int
name|checksumSize
init|=
literal|16
decl_stmt|;
DECL|field|blockSize
specifier|private
name|int
name|blockSize
init|=
name|checksumSize
operator|*
literal|2
decl_stmt|;
DECL|field|numBlocks
specifier|private
name|int
name|numBlocks
init|=
literal|4
decl_stmt|;
DECL|field|filesize
specifier|private
name|int
name|filesize
init|=
name|blockSize
operator|*
name|numBlocks
decl_stmt|;
DECL|field|numDataNodes
specifier|private
name|int
name|numDataNodes
init|=
literal|4
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"org.apache.hadoop.hdfs.TestInjectionForSimulatedStorage"
argument_list|)
decl_stmt|;
DECL|method|writeFile (FileSystem fileSys, Path name, int repl)
specifier|private
name|void
name|writeFile
parameter_list|(
name|FileSystem
name|fileSys
parameter_list|,
name|Path
name|name
parameter_list|,
name|int
name|repl
parameter_list|)
throws|throws
name|IOException
block|{
comment|// create and write a file that contains three blocks of data
name|FSDataOutputStream
name|stm
init|=
name|fileSys
operator|.
name|create
argument_list|(
name|name
argument_list|,
literal|true
argument_list|,
name|fileSys
operator|.
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IO_FILE_BUFFER_SIZE_KEY
argument_list|,
literal|4096
argument_list|)
argument_list|,
operator|(
name|short
operator|)
name|repl
argument_list|,
name|blockSize
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|filesize
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buffer
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|buffer
index|[
name|i
index|]
operator|=
literal|'1'
expr_stmt|;
block|}
name|stm
operator|.
name|write
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Waits for all of the blocks to have expected replication
comment|// Waits for all of the blocks to have expected replication
DECL|method|waitForBlockReplication (String filename, ClientProtocol namenode, int expected, long maxWaitSec)
specifier|private
name|void
name|waitForBlockReplication
parameter_list|(
name|String
name|filename
parameter_list|,
name|ClientProtocol
name|namenode
parameter_list|,
name|int
name|expected
parameter_list|,
name|long
name|maxWaitSec
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|start
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
comment|//wait for all the blocks to be replicated;
name|LOG
operator|.
name|info
argument_list|(
literal|"Checking for block replication for "
operator|+
name|filename
argument_list|)
expr_stmt|;
name|LocatedBlocks
name|blocks
init|=
name|namenode
operator|.
name|getBlockLocations
argument_list|(
name|filename
argument_list|,
literal|0
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|numBlocks
argument_list|,
name|blocks
operator|.
name|locatedBlockCount
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numBlocks
condition|;
operator|++
name|i
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Checking for block:"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
comment|// Loop to check for block i (usually when 0 is done all will be done
name|blocks
operator|=
name|namenode
operator|.
name|getBlockLocations
argument_list|(
name|filename
argument_list|,
literal|0
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numBlocks
argument_list|,
name|blocks
operator|.
name|locatedBlockCount
argument_list|()
argument_list|)
expr_stmt|;
name|LocatedBlock
name|block
init|=
name|blocks
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|int
name|actual
init|=
name|block
operator|.
name|getLocations
argument_list|()
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|actual
operator|==
name|expected
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got enough replicas for "
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
operator|+
literal|"th block "
operator|+
name|block
operator|.
name|getBlock
argument_list|()
operator|+
literal|", got "
operator|+
name|actual
operator|+
literal|"."
argument_list|)
expr_stmt|;
break|break;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Not enough replicas for "
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
operator|+
literal|"th block "
operator|+
name|block
operator|.
name|getBlock
argument_list|()
operator|+
literal|" yet. Expecting "
operator|+
name|expected
operator|+
literal|", got "
operator|+
name|actual
operator|+
literal|"."
argument_list|)
expr_stmt|;
if|if
condition|(
name|maxWaitSec
operator|>
literal|0
operator|&&
operator|(
name|Time
operator|.
name|now
argument_list|()
operator|-
name|start
operator|)
operator|>
operator|(
name|maxWaitSec
operator|*
literal|1000
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Timedout while waiting for all blocks to "
operator|+
literal|" be replicated for "
operator|+
name|filename
argument_list|)
throw|;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignored
parameter_list|)
block|{}
block|}
block|}
block|}
comment|/* This test makes sure that NameNode retries all the available blocks     * for under replicated blocks. This test uses simulated storage and one    * of its features to inject blocks,    *     * It creates a file with several blocks and replication of 4.     * The cluster is then shut down - NN retains its state but the DNs are     * all simulated and hence loose their blocks.     * The blocks are then injected in one of the DNs. The  expected behaviour is    * that the NN will arrange for themissing replica will be copied from a valid source.    */
DECL|method|testInjection ()
specifier|public
name|void
name|testInjection
parameter_list|()
throws|throws
name|IOException
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
name|String
name|testFile
init|=
literal|"/replication-test-file"
decl_stmt|;
name|Path
name|testPath
init|=
operator|new
name|Path
argument_list|(
name|testFile
argument_list|)
decl_stmt|;
name|byte
name|buffer
index|[]
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buffer
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|buffer
index|[
name|i
index|]
operator|=
literal|'1'
expr_stmt|;
block|}
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_REPLICATION_KEY
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|numDataNodes
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BYTES_PER_CHECKSUM_KEY
argument_list|,
name|checksumSize
argument_list|)
expr_stmt|;
name|SimulatedFSDataset
operator|.
name|setFactory
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|//first time format
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDataNodes
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|String
name|bpid
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockPoolId
argument_list|()
decl_stmt|;
name|DFSClient
name|dfsClient
init|=
operator|new
name|DFSClient
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
name|cluster
operator|.
name|getNameNodePort
argument_list|()
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|cluster
operator|.
name|getFileSystem
argument_list|()
argument_list|,
name|testPath
argument_list|,
name|numDataNodes
argument_list|)
expr_stmt|;
name|waitForBlockReplication
argument_list|(
name|testFile
argument_list|,
name|dfsClient
operator|.
name|getNamenode
argument_list|()
argument_list|,
name|numDataNodes
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|Iterable
argument_list|<
name|Block
argument_list|>
index|[]
name|blocksList
init|=
name|cluster
operator|.
name|getAllBlockReports
argument_list|(
name|bpid
argument_list|)
decl_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
comment|/* Start the MiniDFSCluster with more datanodes since once a writeBlock        * to a datanode node fails, same block can not be written to it        * immediately. In our case some replication attempts will fail.        */
name|LOG
operator|.
name|info
argument_list|(
literal|"Restarting minicluster"
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
name|SimulatedFSDataset
operator|.
name|setFactory
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_SAFEMODE_THRESHOLD_PCT_KEY
argument_list|,
literal|"0.0f"
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDataNodes
operator|*
literal|2
argument_list|)
operator|.
name|format
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|Block
argument_list|>
name|uniqueBlocks
init|=
operator|new
name|HashSet
argument_list|<
name|Block
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|blocksList
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|Block
name|b
range|:
name|blocksList
index|[
name|i
index|]
control|)
block|{
name|uniqueBlocks
operator|.
name|add
argument_list|(
operator|new
name|Block
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Insert all the blocks in the first data node
name|LOG
operator|.
name|info
argument_list|(
literal|"Inserting "
operator|+
name|uniqueBlocks
operator|.
name|size
argument_list|()
operator|+
literal|" blocks"
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|injectBlocks
argument_list|(
literal|0
argument_list|,
name|uniqueBlocks
argument_list|)
expr_stmt|;
name|dfsClient
operator|=
operator|new
name|DFSClient
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
name|cluster
operator|.
name|getNameNodePort
argument_list|()
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|waitForBlockReplication
argument_list|(
name|testFile
argument_list|,
name|dfsClient
operator|.
name|getNamenode
argument_list|()
argument_list|,
name|numDataNodes
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

