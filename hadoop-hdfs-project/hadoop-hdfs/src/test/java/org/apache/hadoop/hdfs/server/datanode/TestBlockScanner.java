begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_SCAN_PERIOD_HOURS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SCANNER_VOLUME_BYTES_PER_SECOND
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|BlockScanner
operator|.
name|Conf
operator|.
name|INTERNAL_DFS_DATANODE_SCAN_PERIOD_MS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|BlockScanner
operator|.
name|Conf
operator|.
name|INTERNAL_VOLUME_SCANNER_SCAN_RESULT_HANDLER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|BlockScanner
operator|.
name|Conf
operator|.
name|INTERNAL_DFS_BLOCK_SCANNER_CURSOR_SAVE_INTERVAL_MS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Semaphore
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSNNTopology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|FsDatasetSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|VolumeScanner
operator|.
name|ScanResultHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|FsVolumeSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|FsVolumeSpi
operator|.
name|BlockIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|impl
operator|.
name|FsVolumeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|VolumeScanner
operator|.
name|Statistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|TestBlockScanner
specifier|public
class|class
name|TestBlockScanner
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestBlockScanner
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|before ()
specifier|public
name|void
name|before
parameter_list|()
block|{
name|BlockScanner
operator|.
name|Conf
operator|.
name|allowUnitTestSettings
operator|=
literal|true
expr_stmt|;
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|BlockScanner
operator|.
name|LOG
argument_list|,
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|VolumeScanner
operator|.
name|LOG
argument_list|,
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|FsVolumeImpl
operator|.
name|LOG
argument_list|,
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
DECL|method|disableBlockScanner (Configuration conf)
specifier|private
specifier|static
name|void
name|disableBlockScanner
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|DFS_BLOCK_SCANNER_VOLUME_BYTES_PER_SECOND
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
DECL|class|TestContext
specifier|private
specifier|static
class|class
name|TestContext
implements|implements
name|Closeable
block|{
DECL|field|numNameServices
specifier|final
name|int
name|numNameServices
decl_stmt|;
DECL|field|cluster
specifier|final
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|dfs
specifier|final
name|DistributedFileSystem
index|[]
name|dfs
decl_stmt|;
DECL|field|bpids
specifier|final
name|String
index|[]
name|bpids
decl_stmt|;
DECL|field|datanode
specifier|final
name|DataNode
name|datanode
decl_stmt|;
DECL|field|blockScanner
specifier|final
name|BlockScanner
name|blockScanner
decl_stmt|;
DECL|field|data
specifier|final
name|FsDatasetSpi
argument_list|<
name|?
extends|extends
name|FsVolumeSpi
argument_list|>
name|data
decl_stmt|;
DECL|field|volumes
specifier|final
name|List
argument_list|<
name|?
extends|extends
name|FsVolumeSpi
argument_list|>
name|volumes
decl_stmt|;
DECL|method|TestContext (Configuration conf, int numNameServices)
name|TestContext
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|numNameServices
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|numNameServices
operator|=
name|numNameServices
expr_stmt|;
name|MiniDFSCluster
operator|.
name|Builder
name|bld
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|storagesPerDatanode
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|numNameServices
operator|>
literal|1
condition|)
block|{
name|bld
operator|.
name|nnTopology
argument_list|(
name|MiniDFSNNTopology
operator|.
name|simpleFederatedTopology
argument_list|(
name|numNameServices
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|cluster
operator|=
name|bld
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|dfs
operator|=
operator|new
name|DistributedFileSystem
index|[
name|numNameServices
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numNameServices
condition|;
name|i
operator|++
control|)
block|{
name|dfs
index|[
name|i
index|]
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|bpids
operator|=
operator|new
name|String
index|[
name|numNameServices
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numNameServices
condition|;
name|i
operator|++
control|)
block|{
name|bpids
index|[
name|i
index|]
operator|=
name|cluster
operator|.
name|getNamesystem
argument_list|(
name|i
argument_list|)
operator|.
name|getBlockPoolId
argument_list|()
expr_stmt|;
block|}
name|datanode
operator|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|blockScanner
operator|=
name|datanode
operator|.
name|getBlockScanner
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numNameServices
condition|;
name|i
operator|++
control|)
block|{
name|dfs
index|[
name|i
index|]
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|data
operator|=
name|datanode
operator|.
name|getFSDataset
argument_list|()
expr_stmt|;
name|volumes
operator|=
name|data
operator|.
name|getVolumes
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numNameServices
condition|;
name|i
operator|++
control|)
block|{
name|dfs
index|[
name|i
index|]
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|createFiles (int nsIdx, int numFiles, int length)
specifier|public
name|void
name|createFiles
parameter_list|(
name|int
name|nsIdx
parameter_list|,
name|int
name|numFiles
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|blockIdx
init|=
literal|0
init|;
name|blockIdx
operator|<
name|numFiles
condition|;
name|blockIdx
operator|++
control|)
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
index|[
name|nsIdx
index|]
argument_list|,
name|getPath
argument_list|(
name|blockIdx
argument_list|)
argument_list|,
name|length
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|123L
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getPath (int fileIdx)
specifier|public
name|Path
name|getPath
parameter_list|(
name|int
name|fileIdx
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
literal|"/test/"
operator|+
name|fileIdx
argument_list|)
return|;
block|}
DECL|method|getFileBlock (int nsIdx, int fileIdx)
specifier|public
name|ExtendedBlock
name|getFileBlock
parameter_list|(
name|int
name|nsIdx
parameter_list|,
name|int
name|fileIdx
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|DFSTestUtil
operator|.
name|getFirstBlock
argument_list|(
name|dfs
index|[
name|nsIdx
index|]
argument_list|,
name|getPath
argument_list|(
name|fileIdx
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**    * Test iterating through a bunch of blocks in a volume using a volume    * iterator.<p/>    *    * We will rewind the iterator when about halfway through the blocks.    *    * @param numFiles        The number of files to create.    * @param maxStaleness    The maximum staleness to allow with the iterator.    * @throws Exception    */
DECL|method|testVolumeIteratorImpl (int numFiles, long maxStaleness)
specifier|private
name|void
name|testVolumeIteratorImpl
parameter_list|(
name|int
name|numFiles
parameter_list|,
name|long
name|maxStaleness
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|disableBlockScanner
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|TestContext
name|ctx
init|=
operator|new
name|TestContext
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ctx
operator|.
name|createFiles
argument_list|(
literal|0
argument_list|,
name|numFiles
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ctx
operator|.
name|volumes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|FsVolumeSpi
name|volume
init|=
name|ctx
operator|.
name|volumes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ExtendedBlock
name|savedBlock
init|=
literal|null
decl_stmt|,
name|loadedBlock
init|=
literal|null
decl_stmt|;
name|boolean
name|testedRewind
init|=
literal|false
decl_stmt|,
name|testedSave
init|=
literal|false
decl_stmt|,
name|testedLoad
init|=
literal|false
decl_stmt|;
name|int
name|blocksProcessed
init|=
literal|0
decl_stmt|,
name|savedBlocksProcessed
init|=
literal|0
decl_stmt|;
try|try
block|{
name|BPOfferService
name|bpos
index|[]
init|=
name|ctx
operator|.
name|datanode
operator|.
name|getAllBpOs
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|bpos
operator|.
name|length
argument_list|)
expr_stmt|;
name|BlockIterator
name|iter
init|=
name|volume
operator|.
name|newBlockIterator
argument_list|(
name|ctx
operator|.
name|bpids
index|[
literal|0
index|]
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ctx
operator|.
name|bpids
index|[
literal|0
index|]
argument_list|,
name|iter
operator|.
name|getBlockPoolId
argument_list|()
argument_list|)
expr_stmt|;
name|iter
operator|.
name|setMaxStalenessMs
argument_list|(
name|maxStaleness
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|HashSet
argument_list|<
name|ExtendedBlock
argument_list|>
name|blocks
init|=
operator|new
name|HashSet
argument_list|<
name|ExtendedBlock
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|blockIdx
init|=
literal|0
init|;
name|blockIdx
operator|<
name|numFiles
condition|;
name|blockIdx
operator|++
control|)
block|{
name|blocks
operator|.
name|add
argument_list|(
name|ctx
operator|.
name|getFileBlock
argument_list|(
literal|0
argument_list|,
name|blockIdx
argument_list|)
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
literal|true
condition|)
block|{
name|ExtendedBlock
name|block
init|=
name|iter
operator|.
name|nextBlock
argument_list|()
decl_stmt|;
if|if
condition|(
name|block
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|blocksProcessed
operator|++
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"BlockIterator for {} found block {}, blocksProcessed = {}"
argument_list|,
name|volume
argument_list|,
name|block
argument_list|,
name|blocksProcessed
argument_list|)
expr_stmt|;
if|if
condition|(
name|testedSave
operator|&&
operator|(
name|savedBlock
operator|==
literal|null
operator|)
condition|)
block|{
name|savedBlock
operator|=
name|block
expr_stmt|;
block|}
if|if
condition|(
name|testedLoad
operator|&&
operator|(
name|loadedBlock
operator|==
literal|null
operator|)
condition|)
block|{
name|loadedBlock
operator|=
name|block
expr_stmt|;
comment|// The block that we get back right after loading the iterator
comment|// should be the same block we got back right after saving
comment|// the iterator.
name|assertEquals
argument_list|(
name|savedBlock
argument_list|,
name|loadedBlock
argument_list|)
expr_stmt|;
block|}
name|boolean
name|blockRemoved
init|=
name|blocks
operator|.
name|remove
argument_list|(
name|block
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Found unknown block "
operator|+
name|block
argument_list|,
name|blockRemoved
argument_list|)
expr_stmt|;
if|if
condition|(
name|blocksProcessed
operator|>
operator|(
name|numFiles
operator|/
literal|3
operator|)
condition|)
block|{
if|if
condition|(
operator|!
name|testedSave
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Processed {} blocks out of {}.  Saving iterator."
argument_list|,
name|blocksProcessed
argument_list|,
name|numFiles
argument_list|)
expr_stmt|;
name|iter
operator|.
name|save
argument_list|()
expr_stmt|;
name|testedSave
operator|=
literal|true
expr_stmt|;
name|savedBlocksProcessed
operator|=
name|blocksProcessed
expr_stmt|;
block|}
block|}
if|if
condition|(
name|blocksProcessed
operator|>
operator|(
name|numFiles
operator|/
literal|2
operator|)
condition|)
block|{
if|if
condition|(
operator|!
name|testedRewind
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Processed {} blocks out of {}.  Rewinding iterator."
argument_list|,
name|blocksProcessed
argument_list|,
name|numFiles
argument_list|)
expr_stmt|;
name|iter
operator|.
name|rewind
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|blocksProcessed
operator|>
operator|(
operator|(
literal|2
operator|*
name|numFiles
operator|)
operator|/
literal|3
operator|)
condition|)
block|{
if|if
condition|(
operator|!
name|testedLoad
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Processed {} blocks out of {}.  Loading iterator."
argument_list|,
name|blocksProcessed
argument_list|,
name|numFiles
argument_list|)
expr_stmt|;
name|iter
operator|=
name|volume
operator|.
name|loadBlockIterator
argument_list|(
name|ctx
operator|.
name|bpids
index|[
literal|0
index|]
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|iter
operator|.
name|setMaxStalenessMs
argument_list|(
name|maxStaleness
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|testedRewind
condition|)
block|{
name|testedRewind
operator|=
literal|true
expr_stmt|;
name|blocksProcessed
operator|=
literal|0
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting again at the beginning..."
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|!
name|testedLoad
condition|)
block|{
name|testedLoad
operator|=
literal|true
expr_stmt|;
name|blocksProcessed
operator|=
name|savedBlocksProcessed
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting again at the load point..."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|assertEquals
argument_list|(
name|numFiles
argument_list|,
name|blocksProcessed
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
finally|finally
block|{
name|ctx
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testVolumeIteratorWithoutCaching ()
specifier|public
name|void
name|testVolumeIteratorWithoutCaching
parameter_list|()
throws|throws
name|Exception
block|{
name|testVolumeIteratorImpl
argument_list|(
literal|5
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testVolumeIteratorWithCaching ()
specifier|public
name|void
name|testVolumeIteratorWithCaching
parameter_list|()
throws|throws
name|Exception
block|{
name|testVolumeIteratorImpl
argument_list|(
literal|600
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testDisableVolumeScanner ()
specifier|public
name|void
name|testDisableVolumeScanner
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|disableBlockScanner
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|TestContext
name|ctx
init|=
operator|new
name|TestContext
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
name|ctx
operator|.
name|datanode
operator|.
name|getBlockScanner
argument_list|()
operator|.
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ctx
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|TestScanResultHandler
specifier|public
specifier|static
class|class
name|TestScanResultHandler
extends|extends
name|ScanResultHandler
block|{
DECL|class|Info
specifier|static
class|class
name|Info
block|{
DECL|field|shouldRun
name|boolean
name|shouldRun
init|=
literal|false
decl_stmt|;
DECL|field|badBlocks
specifier|final
name|Set
argument_list|<
name|ExtendedBlock
argument_list|>
name|badBlocks
init|=
operator|new
name|HashSet
argument_list|<
name|ExtendedBlock
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|goodBlocks
specifier|final
name|Set
argument_list|<
name|ExtendedBlock
argument_list|>
name|goodBlocks
init|=
operator|new
name|HashSet
argument_list|<
name|ExtendedBlock
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|blocksScanned
name|long
name|blocksScanned
init|=
literal|0
decl_stmt|;
DECL|field|sem
name|Semaphore
name|sem
init|=
literal|null
decl_stmt|;
block|}
DECL|field|scanner
specifier|private
name|VolumeScanner
name|scanner
decl_stmt|;
DECL|field|infos
specifier|final
specifier|static
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Info
argument_list|>
name|infos
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Info
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|getInfo (FsVolumeSpi volume)
specifier|static
name|Info
name|getInfo
parameter_list|(
name|FsVolumeSpi
name|volume
parameter_list|)
block|{
name|Info
name|newInfo
init|=
operator|new
name|Info
argument_list|()
decl_stmt|;
name|Info
name|prevInfo
init|=
name|infos
operator|.
name|putIfAbsent
argument_list|(
name|volume
operator|.
name|getStorageID
argument_list|()
argument_list|,
name|newInfo
argument_list|)
decl_stmt|;
return|return
name|prevInfo
operator|==
literal|null
condition|?
name|newInfo
else|:
name|prevInfo
return|;
block|}
annotation|@
name|Override
DECL|method|setup (VolumeScanner scanner)
specifier|public
name|void
name|setup
parameter_list|(
name|VolumeScanner
name|scanner
parameter_list|)
block|{
name|this
operator|.
name|scanner
operator|=
name|scanner
expr_stmt|;
name|Info
name|info
init|=
name|getInfo
argument_list|(
name|scanner
operator|.
name|volume
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"about to start scanning."
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|info
init|)
block|{
while|while
condition|(
operator|!
name|info
operator|.
name|shouldRun
condition|)
block|{
try|try
block|{
name|info
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{           }
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"starting scanning."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handle (ExtendedBlock block, IOException e)
specifier|public
name|void
name|handle
parameter_list|(
name|ExtendedBlock
name|block
parameter_list|,
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"handling block {} (exception {})"
argument_list|,
name|block
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Info
name|info
init|=
name|getInfo
argument_list|(
name|scanner
operator|.
name|volume
argument_list|)
decl_stmt|;
name|Semaphore
name|sem
decl_stmt|;
synchronized|synchronized
init|(
name|info
init|)
block|{
name|sem
operator|=
name|info
operator|.
name|sem
expr_stmt|;
block|}
if|if
condition|(
name|sem
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|sem
operator|.
name|acquire
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"interrupted"
argument_list|)
throw|;
block|}
block|}
synchronized|synchronized
init|(
name|info
init|)
block|{
if|if
condition|(
operator|!
name|info
operator|.
name|shouldRun
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"stopping volumescanner thread."
argument_list|)
throw|;
block|}
if|if
condition|(
name|e
operator|==
literal|null
condition|)
block|{
name|info
operator|.
name|goodBlocks
operator|.
name|add
argument_list|(
name|block
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|info
operator|.
name|badBlocks
operator|.
name|add
argument_list|(
name|block
argument_list|)
expr_stmt|;
block|}
name|info
operator|.
name|blocksScanned
operator|++
expr_stmt|;
block|}
block|}
block|}
DECL|method|testScanAllBlocksImpl (final boolean rescan)
specifier|private
name|void
name|testScanAllBlocksImpl
parameter_list|(
specifier|final
name|boolean
name|rescan
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFS_BLOCK_SCANNER_VOLUME_BYTES_PER_SECOND
argument_list|,
literal|1048576L
argument_list|)
expr_stmt|;
if|if
condition|(
name|rescan
condition|)
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|INTERNAL_DFS_DATANODE_SCAN_PERIOD_MS
argument_list|,
literal|100L
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|DFS_DATANODE_SCAN_PERIOD_HOURS_KEY
argument_list|,
literal|100L
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|set
argument_list|(
name|INTERNAL_VOLUME_SCANNER_SCAN_RESULT_HANDLER
argument_list|,
name|TestScanResultHandler
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|TestContext
name|ctx
init|=
operator|new
name|TestContext
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|int
name|NUM_EXPECTED_BLOCKS
init|=
literal|10
decl_stmt|;
name|ctx
operator|.
name|createFiles
argument_list|(
literal|0
argument_list|,
name|NUM_EXPECTED_BLOCKS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|Set
argument_list|<
name|ExtendedBlock
argument_list|>
name|expectedBlocks
init|=
operator|new
name|HashSet
argument_list|<
name|ExtendedBlock
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_EXPECTED_BLOCKS
condition|;
name|i
operator|++
control|)
block|{
name|expectedBlocks
operator|.
name|add
argument_list|(
name|ctx
operator|.
name|getFileBlock
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|TestScanResultHandler
operator|.
name|Info
name|info
init|=
name|TestScanResultHandler
operator|.
name|getInfo
argument_list|(
name|ctx
operator|.
name|volumes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|info
init|)
block|{
name|info
operator|.
name|shouldRun
operator|=
literal|true
expr_stmt|;
name|info
operator|.
name|notify
argument_list|()
expr_stmt|;
block|}
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
name|TestScanResultHandler
operator|.
name|Info
name|info
init|=
name|TestScanResultHandler
operator|.
name|getInfo
argument_list|(
name|ctx
operator|.
name|volumes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|numFoundBlocks
init|=
literal|0
decl_stmt|;
name|StringBuilder
name|foundBlocksBld
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|prefix
init|=
literal|""
decl_stmt|;
synchronized|synchronized
init|(
name|info
init|)
block|{
for|for
control|(
name|ExtendedBlock
name|block
range|:
name|info
operator|.
name|goodBlocks
control|)
block|{
name|assertTrue
argument_list|(
name|expectedBlocks
operator|.
name|contains
argument_list|(
name|block
argument_list|)
argument_list|)
expr_stmt|;
name|numFoundBlocks
operator|++
expr_stmt|;
name|foundBlocksBld
operator|.
name|append
argument_list|(
name|prefix
argument_list|)
operator|.
name|append
argument_list|(
name|block
argument_list|)
expr_stmt|;
name|prefix
operator|=
literal|", "
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"numFoundBlocks = {}.  blocksScanned = {}. Found blocks {}"
argument_list|,
name|numFoundBlocks
argument_list|,
name|info
operator|.
name|blocksScanned
argument_list|,
name|foundBlocksBld
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|rescan
condition|)
block|{
return|return
operator|(
name|numFoundBlocks
operator|==
name|NUM_EXPECTED_BLOCKS
operator|)
operator|&&
operator|(
name|info
operator|.
name|blocksScanned
operator|>=
literal|2
operator|*
name|NUM_EXPECTED_BLOCKS
operator|)
return|;
block|}
else|else
block|{
return|return
name|numFoundBlocks
operator|==
name|NUM_EXPECTED_BLOCKS
return|;
block|}
block|}
block|}
block|}
argument_list|,
literal|10
argument_list|,
literal|60000
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|rescan
condition|)
block|{
synchronized|synchronized
init|(
name|info
init|)
block|{
name|assertEquals
argument_list|(
name|NUM_EXPECTED_BLOCKS
argument_list|,
name|info
operator|.
name|blocksScanned
argument_list|)
expr_stmt|;
block|}
name|Statistics
name|stats
init|=
name|ctx
operator|.
name|blockScanner
operator|.
name|getVolumeStats
argument_list|(
name|ctx
operator|.
name|volumes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStorageID
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
operator|*
name|NUM_EXPECTED_BLOCKS
argument_list|,
name|stats
operator|.
name|bytesScannedInPastHour
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NUM_EXPECTED_BLOCKS
argument_list|,
name|stats
operator|.
name|blocksScannedSinceRestart
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NUM_EXPECTED_BLOCKS
argument_list|,
name|stats
operator|.
name|blocksScannedInCurrentPeriod
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|scanErrorsSinceRestart
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|scansSinceRestart
argument_list|)
expr_stmt|;
block|}
name|ctx
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test scanning all blocks.  Set the scan period high enough that    * we shouldn't rescan any block during this test.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testScanAllBlocksNoRescan ()
specifier|public
name|void
name|testScanAllBlocksNoRescan
parameter_list|()
throws|throws
name|Exception
block|{
name|testScanAllBlocksImpl
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test scanning all blocks.  Set the scan period high enough that    * we should rescan all blocks at least twice during this test.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testScanAllBlocksWithRescan ()
specifier|public
name|void
name|testScanAllBlocksWithRescan
parameter_list|()
throws|throws
name|Exception
block|{
name|testScanAllBlocksImpl
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that we don't scan too many blocks per second.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testScanRateLimit ()
specifier|public
name|void
name|testScanRateLimit
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// Limit scan bytes per second dramatically
name|conf
operator|.
name|setLong
argument_list|(
name|DFS_BLOCK_SCANNER_VOLUME_BYTES_PER_SECOND
argument_list|,
literal|4096L
argument_list|)
expr_stmt|;
comment|// Scan continuously
name|conf
operator|.
name|setLong
argument_list|(
name|INTERNAL_DFS_DATANODE_SCAN_PERIOD_MS
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|INTERNAL_VOLUME_SCANNER_SCAN_RESULT_HANDLER
argument_list|,
name|TestScanResultHandler
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|TestContext
name|ctx
init|=
operator|new
name|TestContext
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|int
name|NUM_EXPECTED_BLOCKS
init|=
literal|5
decl_stmt|;
name|ctx
operator|.
name|createFiles
argument_list|(
literal|0
argument_list|,
name|NUM_EXPECTED_BLOCKS
argument_list|,
literal|4096
argument_list|)
expr_stmt|;
specifier|final
name|TestScanResultHandler
operator|.
name|Info
name|info
init|=
name|TestScanResultHandler
operator|.
name|getInfo
argument_list|(
name|ctx
operator|.
name|volumes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|startMs
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|info
init|)
block|{
name|info
operator|.
name|shouldRun
operator|=
literal|true
expr_stmt|;
name|info
operator|.
name|notify
argument_list|()
expr_stmt|;
block|}
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
synchronized|synchronized
init|(
name|info
init|)
block|{
return|return
name|info
operator|.
name|blocksScanned
operator|>
literal|0
return|;
block|}
block|}
block|}
argument_list|,
literal|1
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|info
init|)
block|{
name|long
name|endMs
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
comment|// Should scan no more than one block a second.
name|long
name|seconds
init|=
operator|(
operator|(
name|endMs
operator|+
literal|999
operator|-
name|startMs
operator|)
operator|/
literal|1000
operator|)
decl_stmt|;
name|long
name|maxBlocksScanned
init|=
name|seconds
operator|*
literal|1
decl_stmt|;
name|assertTrue
argument_list|(
literal|"The number of blocks scanned is too large.  Scanned "
operator|+
name|info
operator|.
name|blocksScanned
operator|+
literal|" blocks; only expected to scan at most "
operator|+
name|maxBlocksScanned
operator|+
literal|" in "
operator|+
name|seconds
operator|+
literal|" seconds."
argument_list|,
name|info
operator|.
name|blocksScanned
operator|<=
name|maxBlocksScanned
argument_list|)
expr_stmt|;
block|}
name|ctx
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testCorruptBlockHandling ()
specifier|public
name|void
name|testCorruptBlockHandling
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFS_DATANODE_SCAN_PERIOD_HOURS_KEY
argument_list|,
literal|100L
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|INTERNAL_VOLUME_SCANNER_SCAN_RESULT_HANDLER
argument_list|,
name|TestScanResultHandler
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|TestContext
name|ctx
init|=
operator|new
name|TestContext
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|int
name|NUM_EXPECTED_BLOCKS
init|=
literal|5
decl_stmt|;
specifier|final
name|int
name|CORRUPT_INDEX
init|=
literal|3
decl_stmt|;
name|ctx
operator|.
name|createFiles
argument_list|(
literal|0
argument_list|,
name|NUM_EXPECTED_BLOCKS
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|ExtendedBlock
name|badBlock
init|=
name|ctx
operator|.
name|getFileBlock
argument_list|(
literal|0
argument_list|,
name|CORRUPT_INDEX
argument_list|)
decl_stmt|;
name|ctx
operator|.
name|cluster
operator|.
name|corruptBlockOnDataNodes
argument_list|(
name|badBlock
argument_list|)
expr_stmt|;
specifier|final
name|TestScanResultHandler
operator|.
name|Info
name|info
init|=
name|TestScanResultHandler
operator|.
name|getInfo
argument_list|(
name|ctx
operator|.
name|volumes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|info
init|)
block|{
name|info
operator|.
name|shouldRun
operator|=
literal|true
expr_stmt|;
name|info
operator|.
name|notify
argument_list|()
expr_stmt|;
block|}
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
synchronized|synchronized
init|(
name|info
init|)
block|{
return|return
name|info
operator|.
name|blocksScanned
operator|==
name|NUM_EXPECTED_BLOCKS
return|;
block|}
block|}
block|}
argument_list|,
literal|3
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|info
init|)
block|{
name|assertTrue
argument_list|(
name|info
operator|.
name|badBlocks
operator|.
name|contains
argument_list|(
name|badBlock
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_EXPECTED_BLOCKS
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|!=
name|CORRUPT_INDEX
condition|)
block|{
name|ExtendedBlock
name|block
init|=
name|ctx
operator|.
name|getFileBlock
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|info
operator|.
name|goodBlocks
operator|.
name|contains
argument_list|(
name|block
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|ctx
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test that we save the scan cursor when shutting down the datanode, and    * restart scanning from there when the datanode is restarted.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testDatanodeCursor ()
specifier|public
name|void
name|testDatanodeCursor
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFS_DATANODE_SCAN_PERIOD_HOURS_KEY
argument_list|,
literal|100L
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|INTERNAL_VOLUME_SCANNER_SCAN_RESULT_HANDLER
argument_list|,
name|TestScanResultHandler
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|INTERNAL_DFS_BLOCK_SCANNER_CURSOR_SAVE_INTERVAL_MS
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
specifier|final
name|TestContext
name|ctx
init|=
operator|new
name|TestContext
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|int
name|NUM_EXPECTED_BLOCKS
init|=
literal|10
decl_stmt|;
name|ctx
operator|.
name|createFiles
argument_list|(
literal|0
argument_list|,
name|NUM_EXPECTED_BLOCKS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|TestScanResultHandler
operator|.
name|Info
name|info
init|=
name|TestScanResultHandler
operator|.
name|getInfo
argument_list|(
name|ctx
operator|.
name|volumes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|info
init|)
block|{
name|info
operator|.
name|sem
operator|=
operator|new
name|Semaphore
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|info
operator|.
name|shouldRun
operator|=
literal|true
expr_stmt|;
name|info
operator|.
name|notify
argument_list|()
expr_stmt|;
block|}
comment|// Scan the first 5 blocks
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
synchronized|synchronized
init|(
name|info
init|)
block|{
return|return
name|info
operator|.
name|blocksScanned
operator|==
literal|5
return|;
block|}
block|}
block|}
argument_list|,
literal|3
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|info
init|)
block|{
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|info
operator|.
name|goodBlocks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|info
operator|.
name|blocksScanned
argument_list|)
expr_stmt|;
name|info
operator|.
name|shouldRun
operator|=
literal|false
expr_stmt|;
block|}
name|ctx
operator|.
name|datanode
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|String
name|vPath
init|=
name|ctx
operator|.
name|volumes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBasePath
argument_list|()
decl_stmt|;
name|File
name|cursorPath
init|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|vPath
argument_list|,
literal|"current"
argument_list|)
argument_list|,
name|ctx
operator|.
name|bpids
index|[
literal|0
index|]
argument_list|)
argument_list|,
literal|"scanner.cursor"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Failed to find cursor save file in "
operator|+
name|cursorPath
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|cursorPath
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|ExtendedBlock
argument_list|>
name|prevGoodBlocks
init|=
operator|new
name|HashSet
argument_list|<
name|ExtendedBlock
argument_list|>
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|info
init|)
block|{
name|info
operator|.
name|sem
operator|=
operator|new
name|Semaphore
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|prevGoodBlocks
operator|.
name|addAll
argument_list|(
name|info
operator|.
name|goodBlocks
argument_list|)
expr_stmt|;
name|info
operator|.
name|goodBlocks
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|// The block that we were scanning when we shut down the DN won't get
comment|// recorded.
comment|// After restarting the datanode, we should scan the next 4 blocks.
name|ctx
operator|.
name|cluster
operator|.
name|restartDataNode
argument_list|(
literal|0
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|info
init|)
block|{
name|info
operator|.
name|shouldRun
operator|=
literal|true
expr_stmt|;
name|info
operator|.
name|notify
argument_list|()
expr_stmt|;
block|}
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
synchronized|synchronized
init|(
name|info
init|)
block|{
if|if
condition|(
name|info
operator|.
name|blocksScanned
operator|!=
literal|9
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for blocksScanned to reach 9.  It is at {}"
argument_list|,
name|info
operator|.
name|blocksScanned
argument_list|)
expr_stmt|;
block|}
return|return
name|info
operator|.
name|blocksScanned
operator|==
literal|9
return|;
block|}
block|}
block|}
argument_list|,
literal|3
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|info
init|)
block|{
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|info
operator|.
name|goodBlocks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|goodBlocks
operator|.
name|addAll
argument_list|(
name|prevGoodBlocks
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|info
operator|.
name|goodBlocks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|info
operator|.
name|blocksScanned
argument_list|)
expr_stmt|;
block|}
name|ctx
operator|.
name|datanode
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// After restarting the datanode, we should not scan any more blocks.
comment|// This is because we reached the end of the block pool earlier, and
comment|// the scan period is much, much longer than the test time.
synchronized|synchronized
init|(
name|info
init|)
block|{
name|info
operator|.
name|sem
operator|=
literal|null
expr_stmt|;
name|info
operator|.
name|shouldRun
operator|=
literal|false
expr_stmt|;
name|info
operator|.
name|goodBlocks
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|ctx
operator|.
name|cluster
operator|.
name|restartDataNode
argument_list|(
literal|0
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|info
init|)
block|{
name|info
operator|.
name|shouldRun
operator|=
literal|true
expr_stmt|;
name|info
operator|.
name|notify
argument_list|()
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|info
init|)
block|{
name|assertTrue
argument_list|(
name|info
operator|.
name|goodBlocks
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ctx
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testMultipleBlockPoolScanning ()
specifier|public
name|void
name|testMultipleBlockPoolScanning
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFS_DATANODE_SCAN_PERIOD_HOURS_KEY
argument_list|,
literal|100L
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|INTERNAL_VOLUME_SCANNER_SCAN_RESULT_HANDLER
argument_list|,
name|TestScanResultHandler
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|TestContext
name|ctx
init|=
operator|new
name|TestContext
argument_list|(
name|conf
argument_list|,
literal|3
argument_list|)
decl_stmt|;
comment|// We scan 5 bytes per file (1 byte in file, 4 bytes of checksum)
specifier|final
name|int
name|BYTES_SCANNED_PER_FILE
init|=
literal|5
decl_stmt|;
specifier|final
name|int
name|NUM_FILES
index|[]
init|=
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|5
block|,
literal|10
block|}
decl_stmt|;
name|int
name|TOTAL_FILES
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_FILES
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|TOTAL_FILES
operator|+=
name|NUM_FILES
index|[
name|i
index|]
expr_stmt|;
block|}
name|ctx
operator|.
name|createFiles
argument_list|(
literal|0
argument_list|,
name|NUM_FILES
index|[
literal|0
index|]
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|createFiles
argument_list|(
literal|0
argument_list|,
name|NUM_FILES
index|[
literal|1
index|]
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|createFiles
argument_list|(
literal|0
argument_list|,
name|NUM_FILES
index|[
literal|2
index|]
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// start scanning
specifier|final
name|TestScanResultHandler
operator|.
name|Info
name|info
init|=
name|TestScanResultHandler
operator|.
name|getInfo
argument_list|(
name|ctx
operator|.
name|volumes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|info
init|)
block|{
name|info
operator|.
name|shouldRun
operator|=
literal|true
expr_stmt|;
name|info
operator|.
name|notify
argument_list|()
expr_stmt|;
block|}
comment|// Wait for all the block pools to be scanned.
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
synchronized|synchronized
init|(
name|info
init|)
block|{
name|Statistics
name|stats
init|=
name|ctx
operator|.
name|blockScanner
operator|.
name|getVolumeStats
argument_list|(
name|ctx
operator|.
name|volumes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStorageID
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|stats
operator|.
name|scansSinceRestart
operator|<
literal|3
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for scansSinceRestart to reach 3 (it is {})"
argument_list|,
name|stats
operator|.
name|scansSinceRestart
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|stats
operator|.
name|eof
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for eof."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
block|}
argument_list|,
literal|3
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
name|Statistics
name|stats
init|=
name|ctx
operator|.
name|blockScanner
operator|.
name|getVolumeStats
argument_list|(
name|ctx
operator|.
name|volumes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStorageID
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|TOTAL_FILES
argument_list|,
name|stats
operator|.
name|blocksScannedSinceRestart
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BYTES_SCANNED_PER_FILE
operator|*
name|TOTAL_FILES
argument_list|,
name|stats
operator|.
name|bytesScannedInPastHour
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testNextSorted ()
specifier|public
name|void
name|testNextSorted
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|arr
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|arr
operator|.
name|add
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|arr
operator|.
name|add
argument_list|(
literal|"3"
argument_list|)
expr_stmt|;
name|arr
operator|.
name|add
argument_list|(
literal|"5"
argument_list|)
expr_stmt|;
name|arr
operator|.
name|add
argument_list|(
literal|"7"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|FsVolumeImpl
operator|.
name|nextSorted
argument_list|(
name|arr
argument_list|,
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|FsVolumeImpl
operator|.
name|nextSorted
argument_list|(
name|arr
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|FsVolumeImpl
operator|.
name|nextSorted
argument_list|(
name|arr
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|FsVolumeImpl
operator|.
name|nextSorted
argument_list|(
name|arr
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|FsVolumeImpl
operator|.
name|nextSorted
argument_list|(
name|arr
argument_list|,
literal|"9"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testCalculateNeededBytesPerSec ()
specifier|public
name|void
name|testCalculateNeededBytesPerSec
parameter_list|()
throws|throws
name|Exception
block|{
comment|// If we didn't check anything the last hour, we should scan now.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|VolumeScanner
operator|.
name|calculateShouldScan
argument_list|(
literal|"test"
argument_list|,
literal|100
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|60
argument_list|)
argument_list|)
expr_stmt|;
comment|// If, on average, we checked 101 bytes/s checked during the last hour,
comment|// stop checking now.
name|Assert
operator|.
name|assertFalse
argument_list|(
name|VolumeScanner
operator|.
name|calculateShouldScan
argument_list|(
literal|"test"
argument_list|,
literal|100
argument_list|,
literal|101
operator|*
literal|3600
argument_list|,
literal|1000
argument_list|,
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
comment|// Target is 1 byte / s, but we didn't scan anything in the last minute.
comment|// Should scan now.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|VolumeScanner
operator|.
name|calculateShouldScan
argument_list|(
literal|"test"
argument_list|,
literal|1
argument_list|,
literal|3540
argument_list|,
literal|0
argument_list|,
literal|60
argument_list|)
argument_list|)
expr_stmt|;
comment|// Target is 1000000 byte / s, but we didn't scan anything in the last
comment|// minute.  Should scan now.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|VolumeScanner
operator|.
name|calculateShouldScan
argument_list|(
literal|"test"
argument_list|,
literal|100000L
argument_list|,
literal|354000000L
argument_list|,
literal|0
argument_list|,
literal|60
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|VolumeScanner
operator|.
name|calculateShouldScan
argument_list|(
literal|"test"
argument_list|,
literal|100000L
argument_list|,
literal|365000000L
argument_list|,
literal|0
argument_list|,
literal|60
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

