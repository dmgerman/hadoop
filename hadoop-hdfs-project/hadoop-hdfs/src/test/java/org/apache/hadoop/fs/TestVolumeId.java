begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestVolumeId
specifier|public
class|class
name|TestVolumeId
block|{
annotation|@
name|Test
DECL|method|testEquality ()
specifier|public
name|void
name|testEquality
parameter_list|()
block|{
specifier|final
name|VolumeId
name|id1
init|=
operator|new
name|HdfsVolumeId
argument_list|(
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|0
block|,
operator|(
name|byte
operator|)
literal|0
block|}
argument_list|)
decl_stmt|;
name|testEq
argument_list|(
literal|true
argument_list|,
name|id1
argument_list|,
name|id1
argument_list|)
expr_stmt|;
specifier|final
name|VolumeId
name|id2
init|=
operator|new
name|HdfsVolumeId
argument_list|(
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|0
block|,
operator|(
name|byte
operator|)
literal|1
block|}
argument_list|)
decl_stmt|;
name|testEq
argument_list|(
literal|true
argument_list|,
name|id2
argument_list|,
name|id2
argument_list|)
expr_stmt|;
name|testEq
argument_list|(
literal|false
argument_list|,
name|id1
argument_list|,
name|id2
argument_list|)
expr_stmt|;
specifier|final
name|VolumeId
name|id3
init|=
operator|new
name|HdfsVolumeId
argument_list|(
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|1
block|,
operator|(
name|byte
operator|)
literal|0
block|}
argument_list|)
decl_stmt|;
name|testEq
argument_list|(
literal|true
argument_list|,
name|id3
argument_list|,
name|id3
argument_list|)
expr_stmt|;
name|testEq
argument_list|(
literal|false
argument_list|,
name|id1
argument_list|,
name|id3
argument_list|)
expr_stmt|;
comment|// same as 2, but "invalid":
specifier|final
name|VolumeId
name|id2copy1
init|=
operator|new
name|HdfsVolumeId
argument_list|(
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|0
block|,
operator|(
name|byte
operator|)
literal|1
block|}
argument_list|)
decl_stmt|;
name|testEq
argument_list|(
literal|true
argument_list|,
name|id2
argument_list|,
name|id2copy1
argument_list|)
expr_stmt|;
comment|// same as 2copy1:
specifier|final
name|VolumeId
name|id2copy2
init|=
operator|new
name|HdfsVolumeId
argument_list|(
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|0
block|,
operator|(
name|byte
operator|)
literal|1
block|}
argument_list|)
decl_stmt|;
name|testEq
argument_list|(
literal|true
argument_list|,
name|id2
argument_list|,
name|id2copy2
argument_list|)
expr_stmt|;
name|testEqMany
argument_list|(
literal|true
argument_list|,
operator|new
name|VolumeId
index|[]
block|{
name|id2
block|,
name|id2copy1
block|,
name|id2copy2
block|}
argument_list|)
expr_stmt|;
name|testEqMany
argument_list|(
literal|false
argument_list|,
operator|new
name|VolumeId
index|[]
block|{
name|id1
block|,
name|id2
block|,
name|id3
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testEq (final boolean eq, Comparable<T> id1, Comparable<T> id2)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|void
name|testEq
parameter_list|(
specifier|final
name|boolean
name|eq
parameter_list|,
name|Comparable
argument_list|<
name|T
argument_list|>
name|id1
parameter_list|,
name|Comparable
argument_list|<
name|T
argument_list|>
name|id2
parameter_list|)
block|{
specifier|final
name|int
name|h1
init|=
name|id1
operator|.
name|hashCode
argument_list|()
decl_stmt|;
specifier|final
name|int
name|h2
init|=
name|id2
operator|.
name|hashCode
argument_list|()
decl_stmt|;
comment|// eq reflectivity:
name|assertTrue
argument_list|(
name|id1
operator|.
name|equals
argument_list|(
name|id1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|id2
operator|.
name|equals
argument_list|(
name|id2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|id1
operator|.
name|compareTo
argument_list|(
operator|(
name|T
operator|)
name|id1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|id2
operator|.
name|compareTo
argument_list|(
operator|(
name|T
operator|)
name|id2
argument_list|)
argument_list|)
expr_stmt|;
comment|// eq symmetry:
name|assertEquals
argument_list|(
name|eq
argument_list|,
name|id1
operator|.
name|equals
argument_list|(
name|id2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|eq
argument_list|,
name|id2
operator|.
name|equals
argument_list|(
name|id1
argument_list|)
argument_list|)
expr_stmt|;
comment|// null comparison:
name|assertFalse
argument_list|(
name|id1
operator|.
name|equals
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|id2
operator|.
name|equals
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// compareTo:
name|assertEquals
argument_list|(
name|eq
argument_list|,
literal|0
operator|==
name|id1
operator|.
name|compareTo
argument_list|(
operator|(
name|T
operator|)
name|id2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|eq
argument_list|,
literal|0
operator|==
name|id2
operator|.
name|compareTo
argument_list|(
operator|(
name|T
operator|)
name|id1
argument_list|)
argument_list|)
expr_stmt|;
comment|// compareTo must be antisymmetric:
name|assertEquals
argument_list|(
name|sign
argument_list|(
name|id1
operator|.
name|compareTo
argument_list|(
operator|(
name|T
operator|)
name|id2
argument_list|)
argument_list|)
argument_list|,
operator|-
name|sign
argument_list|(
name|id2
operator|.
name|compareTo
argument_list|(
operator|(
name|T
operator|)
name|id1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// compare with null should never return 0 to be consistent with #equals():
name|assertTrue
argument_list|(
name|id1
operator|.
name|compareTo
argument_list|(
literal|null
argument_list|)
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|id2
operator|.
name|compareTo
argument_list|(
literal|null
argument_list|)
operator|!=
literal|0
argument_list|)
expr_stmt|;
comment|// check that hash codes did not change:
name|assertEquals
argument_list|(
name|h1
argument_list|,
name|id1
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|h2
argument_list|,
name|id2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|eq
condition|)
block|{
comment|// in this case the hash codes must be the same:
name|assertEquals
argument_list|(
name|h1
argument_list|,
name|h2
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|sign (int x)
specifier|private
specifier|static
name|int
name|sign
parameter_list|(
name|int
name|x
parameter_list|)
block|{
if|if
condition|(
name|x
operator|==
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
elseif|else
if|if
condition|(
name|x
operator|>
literal|0
condition|)
block|{
return|return
literal|1
return|;
block|}
else|else
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testEqMany (final boolean eq, Comparable<T>... volumeIds)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|void
name|testEqMany
parameter_list|(
specifier|final
name|boolean
name|eq
parameter_list|,
name|Comparable
argument_list|<
name|T
argument_list|>
modifier|...
name|volumeIds
parameter_list|)
block|{
name|Comparable
argument_list|<
name|T
argument_list|>
name|vidNext
decl_stmt|;
name|int
name|sum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|volumeIds
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
name|volumeIds
operator|.
name|length
operator|-
literal|1
condition|)
block|{
name|vidNext
operator|=
name|volumeIds
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
name|vidNext
operator|=
name|volumeIds
index|[
name|i
operator|+
literal|1
index|]
expr_stmt|;
block|}
name|testEq
argument_list|(
name|eq
argument_list|,
name|volumeIds
index|[
name|i
index|]
argument_list|,
name|vidNext
argument_list|)
expr_stmt|;
name|sum
operator|+=
name|sign
argument_list|(
name|volumeIds
index|[
name|i
index|]
operator|.
name|compareTo
argument_list|(
operator|(
name|T
operator|)
name|vidNext
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// the comparison relationship must always be acyclic:
name|assertTrue
argument_list|(
name|sum
operator|<
name|volumeIds
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|/*    * Test HdfsVolumeId(new byte[0]) instances: show that we permit such    * objects, they are still valid, and obey the same equality    * rules other objects do.     */
annotation|@
name|Test
DECL|method|testIdEmptyBytes ()
specifier|public
name|void
name|testIdEmptyBytes
parameter_list|()
block|{
specifier|final
name|VolumeId
name|idEmpty1
init|=
operator|new
name|HdfsVolumeId
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
specifier|final
name|VolumeId
name|idEmpty2
init|=
operator|new
name|HdfsVolumeId
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
specifier|final
name|VolumeId
name|idNotEmpty
init|=
operator|new
name|HdfsVolumeId
argument_list|(
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|1
block|}
argument_list|)
decl_stmt|;
name|testEq
argument_list|(
literal|true
argument_list|,
name|idEmpty1
argument_list|,
name|idEmpty2
argument_list|)
expr_stmt|;
name|testEq
argument_list|(
literal|false
argument_list|,
name|idEmpty1
argument_list|,
name|idNotEmpty
argument_list|)
expr_stmt|;
name|testEq
argument_list|(
literal|false
argument_list|,
name|idEmpty2
argument_list|,
name|idNotEmpty
argument_list|)
expr_stmt|;
block|}
comment|/*    * test #toString() for typical VolumeId equality classes    */
annotation|@
name|Test
DECL|method|testToString ()
specifier|public
name|void
name|testToString
parameter_list|()
block|{
name|String
name|strEmpty
init|=
operator|new
name|HdfsVolumeId
argument_list|(
operator|new
name|byte
index|[]
block|{}
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|strEmpty
argument_list|)
expr_stmt|;
name|String
name|strNotEmpty
init|=
operator|new
name|HdfsVolumeId
argument_list|(
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|1
block|}
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|strNotEmpty
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

