begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|unix
operator|.
name|DomainSocket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|unix
operator|.
name|TemporarySocketDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestDFSInputStream
specifier|public
class|class
name|TestDFSInputStream
block|{
DECL|method|testSkipInner (MiniDFSCluster cluster)
specifier|private
name|void
name|testSkipInner
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|)
throws|throws
name|IOException
block|{
name|DistributedFileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|DFSClient
name|client
init|=
name|fs
operator|.
name|dfs
decl_stmt|;
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
literal|"/testfile"
argument_list|)
decl_stmt|;
name|int
name|fileLength
init|=
literal|1
operator|<<
literal|22
decl_stmt|;
name|byte
index|[]
name|fileContent
init|=
operator|new
name|byte
index|[
name|fileLength
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fileLength
condition|;
name|i
operator|++
control|)
block|{
name|fileContent
index|[
name|i
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|i
operator|%
literal|133
argument_list|)
expr_stmt|;
block|}
name|FSDataOutputStream
name|fout
init|=
name|fs
operator|.
name|create
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|fout
operator|.
name|write
argument_list|(
name|fileContent
argument_list|)
expr_stmt|;
name|fout
operator|.
name|close
argument_list|()
expr_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|3
init|;
name|i
operator|<
literal|18
condition|;
name|i
operator|++
control|)
block|{
name|DFSInputStream
name|fin
init|=
name|client
operator|.
name|open
argument_list|(
literal|"/testfile"
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|pos
init|=
literal|0
init|;
name|pos
operator|<
name|fileLength
condition|;
control|)
block|{
name|long
name|skip
init|=
name|random
operator|.
name|nextInt
argument_list|(
literal|1
operator|<<
name|i
argument_list|)
operator|+
literal|1
decl_stmt|;
name|long
name|skipped
init|=
name|fin
operator|.
name|skip
argument_list|(
name|skip
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|+
name|skip
operator|>=
name|fileLength
condition|)
block|{
name|assertEquals
argument_list|(
name|fileLength
argument_list|,
name|pos
operator|+
name|skipped
argument_list|)
expr_stmt|;
break|break;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|skip
argument_list|,
name|skipped
argument_list|)
expr_stmt|;
name|pos
operator|+=
name|skipped
expr_stmt|;
name|int
name|data
init|=
name|fin
operator|.
name|read
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|pos
operator|%
literal|133
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|pos
operator|+=
literal|1
expr_stmt|;
block|}
block|}
name|fin
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testSkipWithRemoteBlockReader ()
specifier|public
name|void
name|testSkipWithRemoteBlockReader
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|DFS_CLIENT_USE_LEGACY_BLOCKREADER
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|testSkipInner
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testSkipWithRemoteBlockReader2 ()
specifier|public
name|void
name|testSkipWithRemoteBlockReader2
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|testSkipInner
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testSkipWithLocalBlockReader ()
specifier|public
name|void
name|testSkipWithLocalBlockReader
parameter_list|()
throws|throws
name|IOException
block|{
name|Assume
operator|.
name|assumeThat
argument_list|(
name|DomainSocket
operator|.
name|getLoadingFailureReason
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|TemporarySocketDirectory
name|sockDir
init|=
operator|new
name|TemporarySocketDirectory
argument_list|()
decl_stmt|;
name|DomainSocket
operator|.
name|disableBindPathValidation
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|Read
operator|.
name|ShortCircuit
operator|.
name|KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DOMAIN_SOCKET_PATH_KEY
argument_list|,
operator|new
name|File
argument_list|(
name|sockDir
operator|.
name|getDir
argument_list|()
argument_list|,
literal|"TestShortCircuitLocalRead._PORT.sock"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|DFSInputStream
operator|.
name|tcpReadsDisabledForTesting
operator|=
literal|true
expr_stmt|;
name|testSkipInner
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|DFSInputStream
operator|.
name|tcpReadsDisabledForTesting
operator|=
literal|false
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|sockDir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testSeekToNewSource ()
specifier|public
name|void
name|testSeekToNewSource
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|3
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|DistributedFileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/testfile"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
literal|1024
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|DFSInputStream
name|fin
init|=
name|fs
operator|.
name|dfs
operator|.
name|open
argument_list|(
literal|"/testfile"
argument_list|)
decl_stmt|;
try|try
block|{
name|fin
operator|.
name|seekToNewSource
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|fin
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
name|DatanodeInfo
name|firstNode
init|=
name|fin
operator|.
name|getCurrentDatanode
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|firstNode
argument_list|)
expr_stmt|;
name|fin
operator|.
name|seekToNewSource
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|fin
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|firstNode
operator|.
name|equals
argument_list|(
name|fin
operator|.
name|getCurrentDatanode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fin
operator|.
name|close
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

