begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode.web.dtp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|web
operator|.
name|dtp
package|;
end_package

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandlerContext
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|SimpleChannelInboundHandler
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|FullHttpResponse
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http2
operator|.
name|HttpUtil
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Promise
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|Http2ResponseHandler
specifier|public
class|class
name|Http2ResponseHandler
extends|extends
name|SimpleChannelInboundHandler
argument_list|<
name|FullHttpResponse
argument_list|>
block|{
DECL|field|streamId2Promise
specifier|private
name|Map
argument_list|<
name|Integer
argument_list|,
name|Promise
argument_list|<
name|FullHttpResponse
argument_list|>
argument_list|>
name|streamId2Promise
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|channelRead0 (ChannelHandlerContext ctx, FullHttpResponse msg)
specifier|protected
name|void
name|channelRead0
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|FullHttpResponse
name|msg
parameter_list|)
throws|throws
name|Exception
block|{
name|Integer
name|streamId
init|=
name|msg
operator|.
name|headers
argument_list|()
operator|.
name|getInt
argument_list|(
name|HttpUtil
operator|.
name|ExtensionHeaderNames
operator|.
name|STREAM_ID
operator|.
name|text
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|streamId
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"HttpResponseHandler unexpected message received: "
operator|+
name|msg
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|streamId
operator|.
name|intValue
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// this is the upgrade response message, just ignore it.
return|return;
block|}
name|Promise
argument_list|<
name|FullHttpResponse
argument_list|>
name|promise
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|promise
operator|=
name|streamId2Promise
operator|.
name|get
argument_list|(
name|streamId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|promise
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Message received for unknown stream id "
operator|+
name|streamId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Do stuff with the message (for now just print it)
name|promise
operator|.
name|setSuccess
argument_list|(
name|msg
operator|.
name|retain
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|put (Integer streamId, Promise<FullHttpResponse> promise)
specifier|public
name|void
name|put
parameter_list|(
name|Integer
name|streamId
parameter_list|,
name|Promise
argument_list|<
name|FullHttpResponse
argument_list|>
name|promise
parameter_list|)
block|{
name|streamId2Promise
operator|.
name|put
argument_list|(
name|streamId
argument_list|,
name|promise
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

