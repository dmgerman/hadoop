begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.protocolPB
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|AddPathBasedCacheDirectiveException
operator|.
name|EmptyPathError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ClientNamenodeProtocolProtos
operator|.
name|AddPathBasedCacheDirectiveRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ClientNamenodeProtocolProtos
operator|.
name|PathBasedCacheDirectiveProto
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcController
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_class
DECL|class|TestClientNamenodeProtocolServerSideTranslatorPB
specifier|public
class|class
name|TestClientNamenodeProtocolServerSideTranslatorPB
block|{
annotation|@
name|Test
DECL|method|testAddPathBasedCacheDirectiveEmptyPathError ()
specifier|public
name|void
name|testAddPathBasedCacheDirectiveEmptyPathError
parameter_list|()
throws|throws
name|Exception
block|{
name|ClientProtocol
name|server
init|=
name|mock
argument_list|(
name|ClientProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|RpcController
name|controller
init|=
name|mock
argument_list|(
name|RpcController
operator|.
name|class
argument_list|)
decl_stmt|;
name|AddPathBasedCacheDirectiveRequestProto
name|request
init|=
name|AddPathBasedCacheDirectiveRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setDirective
argument_list|(
name|PathBasedCacheDirectiveProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setPath
argument_list|(
literal|""
argument_list|)
operator|.
name|setPool
argument_list|(
literal|"pool"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ClientNamenodeProtocolServerSideTranslatorPB
name|translator
init|=
operator|new
name|ClientNamenodeProtocolServerSideTranslatorPB
argument_list|(
name|server
argument_list|)
decl_stmt|;
try|try
block|{
name|translator
operator|.
name|addPathBasedCacheDirective
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected ServiceException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|EmptyPathError
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

