begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|HadoopIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|XAttrSetFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryScope
operator|.
name|ACCESS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryType
operator|.
name|USER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
operator|.
name|ALL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
operator|.
name|READ
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|AclTestHelpers
operator|.
name|aclEntry
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * Tests NameNode interaction for all XAttr APIs.  * This test suite covers restarting the NN, saving a new checkpoint.   */
end_comment

begin_class
DECL|class|FSXAttrBaseTest
specifier|public
class|class
name|FSXAttrBaseTest
block|{
DECL|field|MAX_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|MAX_SIZE
init|=
literal|16
decl_stmt|;
DECL|field|dfsCluster
specifier|protected
specifier|static
name|MiniDFSCluster
name|dfsCluster
decl_stmt|;
DECL|field|conf
specifier|protected
specifier|static
name|Configuration
name|conf
decl_stmt|;
DECL|field|pathCount
specifier|private
specifier|static
name|int
name|pathCount
init|=
literal|0
decl_stmt|;
DECL|field|path
specifier|protected
specifier|static
name|Path
name|path
decl_stmt|;
comment|// XAttrs
DECL|field|name1
specifier|protected
specifier|static
specifier|final
name|String
name|name1
init|=
literal|"user.a1"
decl_stmt|;
DECL|field|value1
specifier|protected
specifier|static
specifier|final
name|byte
index|[]
name|value1
init|=
block|{
literal|0x31
block|,
literal|0x32
block|,
literal|0x33
block|}
decl_stmt|;
DECL|field|newValue1
specifier|protected
specifier|static
specifier|final
name|byte
index|[]
name|newValue1
init|=
block|{
literal|0x31
block|,
literal|0x31
block|,
literal|0x31
block|}
decl_stmt|;
DECL|field|name2
specifier|protected
specifier|static
specifier|final
name|String
name|name2
init|=
literal|"user.a2"
decl_stmt|;
DECL|field|value2
specifier|protected
specifier|static
specifier|final
name|byte
index|[]
name|value2
init|=
block|{
literal|0x37
block|,
literal|0x38
block|,
literal|0x39
block|}
decl_stmt|;
DECL|field|name3
specifier|protected
specifier|static
specifier|final
name|String
name|name3
init|=
literal|"user.a3"
decl_stmt|;
DECL|field|name4
specifier|protected
specifier|static
specifier|final
name|String
name|name4
init|=
literal|"user.a4"
decl_stmt|;
DECL|field|fs
specifier|protected
name|FileSystem
name|fs
decl_stmt|;
DECL|field|BRUCE
specifier|private
specifier|static
specifier|final
name|UserGroupInformation
name|BRUCE
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"bruce"
argument_list|,
operator|new
name|String
index|[]
block|{ }
argument_list|)
decl_stmt|;
DECL|field|DIANA
specifier|private
specifier|static
specifier|final
name|UserGroupInformation
name|DIANA
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"diana"
argument_list|,
operator|new
name|String
index|[]
block|{ }
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|init ()
specifier|public
specifier|static
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_XATTRS_ENABLED_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_ACLS_ENABLED_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_MAX_XATTRS_PER_INODE_KEY
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_MAX_XATTR_SIZE_KEY
argument_list|,
name|MAX_SIZE
argument_list|)
expr_stmt|;
name|initCluster
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|shutdown ()
specifier|public
specifier|static
name|void
name|shutdown
parameter_list|()
block|{
if|if
condition|(
name|dfsCluster
operator|!=
literal|null
condition|)
block|{
name|dfsCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|pathCount
operator|+=
literal|1
expr_stmt|;
name|path
operator|=
operator|new
name|Path
argument_list|(
literal|"/p"
operator|+
name|pathCount
argument_list|)
expr_stmt|;
name|initFileSystem
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|destroyFileSystems ()
specifier|public
name|void
name|destroyFileSystems
parameter_list|()
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
literal|null
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|fs
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * Tests for creating xattr    * 1. Create an xattr using XAttrSetFlag.CREATE.    * 2. Create an xattr which already exists and expect an exception.    * 3. Create multiple xattrs.    * 4. Restart NN and save checkpoint scenarios.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testCreateXAttr ()
specifier|public
name|void
name|testCreateXAttr
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0750
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setXAttr
argument_list|(
name|path
argument_list|,
name|name1
argument_list|,
name|value1
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|XAttrSetFlag
operator|.
name|CREATE
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|xattrs
init|=
name|fs
operator|.
name|getXAttrs
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|xattrs
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|value1
argument_list|,
name|xattrs
operator|.
name|get
argument_list|(
name|name1
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|removeXAttr
argument_list|(
name|path
argument_list|,
name|name1
argument_list|)
expr_stmt|;
name|xattrs
operator|=
name|fs
operator|.
name|getXAttrs
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|xattrs
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Create xattr which already exists.
name|fs
operator|.
name|setXAttr
argument_list|(
name|path
argument_list|,
name|name1
argument_list|,
name|value1
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|XAttrSetFlag
operator|.
name|CREATE
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|fs
operator|.
name|setXAttr
argument_list|(
name|path
argument_list|,
name|name1
argument_list|,
name|value1
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|XAttrSetFlag
operator|.
name|CREATE
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Creating xattr which already exists should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{     }
name|fs
operator|.
name|removeXAttr
argument_list|(
name|path
argument_list|,
name|name1
argument_list|)
expr_stmt|;
comment|// Create two xattrs
name|fs
operator|.
name|setXAttr
argument_list|(
name|path
argument_list|,
name|name1
argument_list|,
name|value1
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|XAttrSetFlag
operator|.
name|CREATE
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setXAttr
argument_list|(
name|path
argument_list|,
name|name2
argument_list|,
literal|null
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|XAttrSetFlag
operator|.
name|CREATE
argument_list|)
argument_list|)
expr_stmt|;
name|xattrs
operator|=
name|fs
operator|.
name|getXAttrs
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|xattrs
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|value1
argument_list|,
name|xattrs
operator|.
name|get
argument_list|(
name|name1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
name|xattrs
operator|.
name|get
argument_list|(
name|name2
argument_list|)
argument_list|)
expr_stmt|;
name|restart
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|initFileSystem
argument_list|()
expr_stmt|;
name|xattrs
operator|=
name|fs
operator|.
name|getXAttrs
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|xattrs
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|value1
argument_list|,
name|xattrs
operator|.
name|get
argument_list|(
name|name1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
name|xattrs
operator|.
name|get
argument_list|(
name|name2
argument_list|)
argument_list|)
expr_stmt|;
name|restart
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|initFileSystem
argument_list|()
expr_stmt|;
name|xattrs
operator|=
name|fs
operator|.
name|getXAttrs
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|xattrs
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|value1
argument_list|,
name|xattrs
operator|.
name|get
argument_list|(
name|name1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
name|xattrs
operator|.
name|get
argument_list|(
name|name2
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|removeXAttr
argument_list|(
name|path
argument_list|,
name|name1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|removeXAttr
argument_list|(
name|path
argument_list|,
name|name2
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests for replacing xattr    * 1. Replace an xattr using XAttrSetFlag.REPLACE.    * 2. Replace an xattr which doesn't exist and expect an exception.    * 3. Create multiple xattrs and replace some.    * 4. Restart NN and save checkpoint scenarios.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testReplaceXAttr ()
specifier|public
name|void
name|testReplaceXAttr
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0750
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setXAttr
argument_list|(
name|path
argument_list|,
name|name1
argument_list|,
name|value1
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|XAttrSetFlag
operator|.
name|CREATE
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setXAttr
argument_list|(
name|path
argument_list|,
name|name1
argument_list|,
name|newValue1
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|XAttrSetFlag
operator|.
name|REPLACE
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|xattrs
init|=
name|fs
operator|.
name|getXAttrs
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|xattrs
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|newValue1
argument_list|,
name|xattrs
operator|.
name|get
argument_list|(
name|name1
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|removeXAttr
argument_list|(
name|path
argument_list|,
name|name1
argument_list|)
expr_stmt|;
comment|// Replace xattr which does not exist.
try|try
block|{
name|fs
operator|.
name|setXAttr
argument_list|(
name|path
argument_list|,
name|name1
argument_list|,
name|value1
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|XAttrSetFlag
operator|.
name|REPLACE
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Replacing xattr which does not exist should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{     }
comment|// Create two xattrs, then replace one
name|fs
operator|.
name|setXAttr
argument_list|(
name|path
argument_list|,
name|name1
argument_list|,
name|value1
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|XAttrSetFlag
operator|.
name|CREATE
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setXAttr
argument_list|(
name|path
argument_list|,
name|name2
argument_list|,
name|value2
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|XAttrSetFlag
operator|.
name|CREATE
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setXAttr
argument_list|(
name|path
argument_list|,
name|name2
argument_list|,
literal|null
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|XAttrSetFlag
operator|.
name|REPLACE
argument_list|)
argument_list|)
expr_stmt|;
name|xattrs
operator|=
name|fs
operator|.
name|getXAttrs
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|xattrs
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|value1
argument_list|,
name|xattrs
operator|.
name|get
argument_list|(
name|name1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
name|xattrs
operator|.
name|get
argument_list|(
name|name2
argument_list|)
argument_list|)
expr_stmt|;
name|restart
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|initFileSystem
argument_list|()
expr_stmt|;
name|xattrs
operator|=
name|fs
operator|.
name|getXAttrs
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|xattrs
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|value1
argument_list|,
name|xattrs
operator|.
name|get
argument_list|(
name|name1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
name|xattrs
operator|.
name|get
argument_list|(
name|name2
argument_list|)
argument_list|)
expr_stmt|;
name|restart
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|initFileSystem
argument_list|()
expr_stmt|;
name|xattrs
operator|=
name|fs
operator|.
name|getXAttrs
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|xattrs
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|value1
argument_list|,
name|xattrs
operator|.
name|get
argument_list|(
name|name1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
name|xattrs
operator|.
name|get
argument_list|(
name|name2
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|removeXAttr
argument_list|(
name|path
argument_list|,
name|name1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|removeXAttr
argument_list|(
name|path
argument_list|,
name|name2
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests for setting xattr    * 1. Set xattr with XAttrSetFlag.CREATE|XAttrSetFlag.REPLACE flag.    * 2. Set xattr with illegal name.    * 3. Set xattr without XAttrSetFlag.    * 4. Set xattr and total number exceeds max limit.    * 5. Set xattr and name is too long.    * 6. Set xattr and value is too long.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testSetXAttr ()
specifier|public
name|void
name|testSetXAttr
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0750
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setXAttr
argument_list|(
name|path
argument_list|,
name|name1
argument_list|,
name|value1
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|XAttrSetFlag
operator|.
name|CREATE
argument_list|,
name|XAttrSetFlag
operator|.
name|REPLACE
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|xattrs
init|=
name|fs
operator|.
name|getXAttrs
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|xattrs
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|value1
argument_list|,
name|xattrs
operator|.
name|get
argument_list|(
name|name1
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|removeXAttr
argument_list|(
name|path
argument_list|,
name|name1
argument_list|)
expr_stmt|;
comment|// Set xattr with null name
try|try
block|{
name|fs
operator|.
name|setXAttr
argument_list|(
name|path
argument_list|,
literal|null
argument_list|,
name|value1
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|XAttrSetFlag
operator|.
name|CREATE
argument_list|,
name|XAttrSetFlag
operator|.
name|REPLACE
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Setting xattr with null name should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"XAttr name cannot be null"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"XAttr name cannot be null"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Set xattr with empty name: "user."
try|try
block|{
name|fs
operator|.
name|setXAttr
argument_list|(
name|path
argument_list|,
literal|"user."
argument_list|,
name|value1
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|XAttrSetFlag
operator|.
name|CREATE
argument_list|,
name|XAttrSetFlag
operator|.
name|REPLACE
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Setting xattr with empty name should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HadoopIllegalArgumentException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"XAttr name cannot be empty"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Invalid value: \"user.\" does "
operator|+
literal|"not belong to the domain ^(user\\.|trusted\\.|system\\.|security\\.).+"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Set xattr with invalid name: "a1"
try|try
block|{
name|fs
operator|.
name|setXAttr
argument_list|(
name|path
argument_list|,
literal|"a1"
argument_list|,
name|value1
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|XAttrSetFlag
operator|.
name|CREATE
argument_list|,
name|XAttrSetFlag
operator|.
name|REPLACE
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Setting xattr with invalid name prefix or without "
operator|+
literal|"name prefix should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HadoopIllegalArgumentException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"XAttr name must be prefixed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Invalid value: \"a1\" does "
operator|+
literal|"not belong to the domain ^(user\\.|trusted\\.|system\\.|security\\.).+"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Set xattr without XAttrSetFlag
name|fs
operator|.
name|setXAttr
argument_list|(
name|path
argument_list|,
name|name1
argument_list|,
name|value1
argument_list|)
expr_stmt|;
name|xattrs
operator|=
name|fs
operator|.
name|getXAttrs
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|xattrs
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|value1
argument_list|,
name|xattrs
operator|.
name|get
argument_list|(
name|name1
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|removeXAttr
argument_list|(
name|path
argument_list|,
name|name1
argument_list|)
expr_stmt|;
comment|// XAttr exists, and replace it using CREATE|REPLACE flag.
name|fs
operator|.
name|setXAttr
argument_list|(
name|path
argument_list|,
name|name1
argument_list|,
name|value1
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|XAttrSetFlag
operator|.
name|CREATE
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setXAttr
argument_list|(
name|path
argument_list|,
name|name1
argument_list|,
name|newValue1
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|XAttrSetFlag
operator|.
name|CREATE
argument_list|,
name|XAttrSetFlag
operator|.
name|REPLACE
argument_list|)
argument_list|)
expr_stmt|;
name|xattrs
operator|=
name|fs
operator|.
name|getXAttrs
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|xattrs
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|newValue1
argument_list|,
name|xattrs
operator|.
name|get
argument_list|(
name|name1
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|removeXAttr
argument_list|(
name|path
argument_list|,
name|name1
argument_list|)
expr_stmt|;
comment|// Total number exceeds max limit
name|fs
operator|.
name|setXAttr
argument_list|(
name|path
argument_list|,
name|name1
argument_list|,
name|value1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setXAttr
argument_list|(
name|path
argument_list|,
name|name2
argument_list|,
name|value2
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setXAttr
argument_list|(
name|path
argument_list|,
name|name3
argument_list|,
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|fs
operator|.
name|setXAttr
argument_list|(
name|path
argument_list|,
name|name4
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Setting xattr should fail if total number of xattrs "
operator|+
literal|"for inode exceeds max limit."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Cannot add additional XAttr"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|fs
operator|.
name|removeXAttr
argument_list|(
name|path
argument_list|,
name|name1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|removeXAttr
argument_list|(
name|path
argument_list|,
name|name2
argument_list|)
expr_stmt|;
name|fs
operator|.
name|removeXAttr
argument_list|(
name|path
argument_list|,
name|name3
argument_list|)
expr_stmt|;
comment|// Name length exceeds max limit
name|String
name|longName
init|=
literal|"user.0123456789abcdefX"
decl_stmt|;
try|try
block|{
name|fs
operator|.
name|setXAttr
argument_list|(
name|path
argument_list|,
name|longName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Setting xattr should fail if name is too long."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"XAttr is too big"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"total size is 17"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Value length exceeds max limit
name|byte
index|[]
name|longValue
init|=
operator|new
name|byte
index|[
name|MAX_SIZE
index|]
decl_stmt|;
try|try
block|{
name|fs
operator|.
name|setXAttr
argument_list|(
name|path
argument_list|,
literal|"user.a"
argument_list|,
name|longValue
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Setting xattr should fail if value is too long."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"XAttr is too big"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"total size is 17"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Name + value exactly equal the limit
name|String
name|name
init|=
literal|"user.111"
decl_stmt|;
name|byte
index|[]
name|value
init|=
operator|new
name|byte
index|[
name|MAX_SIZE
operator|-
literal|3
index|]
decl_stmt|;
name|fs
operator|.
name|setXAttr
argument_list|(
name|path
argument_list|,
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests for getting xattr    * 1. To get xattr which does not exist.    * 2. To get multiple xattrs.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testGetXAttrs ()
specifier|public
name|void
name|testGetXAttrs
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0750
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setXAttr
argument_list|(
name|path
argument_list|,
name|name1
argument_list|,
name|value1
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|XAttrSetFlag
operator|.
name|CREATE
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setXAttr
argument_list|(
name|path
argument_list|,
name|name2
argument_list|,
name|value2
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|XAttrSetFlag
operator|.
name|CREATE
argument_list|)
argument_list|)
expr_stmt|;
comment|// XAttr does not exist.
name|byte
index|[]
name|value
init|=
name|fs
operator|.
name|getXAttr
argument_list|(
name|path
argument_list|,
name|name3
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|value
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|names
operator|.
name|add
argument_list|(
name|name1
argument_list|)
expr_stmt|;
name|names
operator|.
name|add
argument_list|(
name|name2
argument_list|)
expr_stmt|;
name|names
operator|.
name|add
argument_list|(
name|name3
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|xattrs
init|=
name|fs
operator|.
name|getXAttrs
argument_list|(
name|path
argument_list|,
name|names
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|xattrs
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|value1
argument_list|,
name|xattrs
operator|.
name|get
argument_list|(
name|name1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|value2
argument_list|,
name|xattrs
operator|.
name|get
argument_list|(
name|name2
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|removeXAttr
argument_list|(
name|path
argument_list|,
name|name1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|removeXAttr
argument_list|(
name|path
argument_list|,
name|name2
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests for removing xattr    * 1. Remove xattr.    * 2. Restart NN and save checkpoint scenarios.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testRemoveXAttr ()
specifier|public
name|void
name|testRemoveXAttr
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0750
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setXAttr
argument_list|(
name|path
argument_list|,
name|name1
argument_list|,
name|value1
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|XAttrSetFlag
operator|.
name|CREATE
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setXAttr
argument_list|(
name|path
argument_list|,
name|name2
argument_list|,
name|value2
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|XAttrSetFlag
operator|.
name|CREATE
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setXAttr
argument_list|(
name|path
argument_list|,
name|name3
argument_list|,
literal|null
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|XAttrSetFlag
operator|.
name|CREATE
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|removeXAttr
argument_list|(
name|path
argument_list|,
name|name1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|removeXAttr
argument_list|(
name|path
argument_list|,
name|name2
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|xattrs
init|=
name|fs
operator|.
name|getXAttrs
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|xattrs
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
name|xattrs
operator|.
name|get
argument_list|(
name|name3
argument_list|)
argument_list|)
expr_stmt|;
name|restart
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|initFileSystem
argument_list|()
expr_stmt|;
name|xattrs
operator|=
name|fs
operator|.
name|getXAttrs
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|xattrs
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
name|xattrs
operator|.
name|get
argument_list|(
name|name3
argument_list|)
argument_list|)
expr_stmt|;
name|restart
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|initFileSystem
argument_list|()
expr_stmt|;
name|xattrs
operator|=
name|fs
operator|.
name|getXAttrs
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|xattrs
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
name|xattrs
operator|.
name|get
argument_list|(
name|name3
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|removeXAttr
argument_list|(
name|path
argument_list|,
name|name3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testRenameFileWithXAttr ()
specifier|public
name|void
name|testRenameFileWithXAttr
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0750
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setXAttr
argument_list|(
name|path
argument_list|,
name|name1
argument_list|,
name|value1
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|XAttrSetFlag
operator|.
name|CREATE
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setXAttr
argument_list|(
name|path
argument_list|,
name|name2
argument_list|,
name|value2
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|XAttrSetFlag
operator|.
name|CREATE
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|renamePath
init|=
operator|new
name|Path
argument_list|(
name|path
operator|.
name|toString
argument_list|()
operator|+
literal|"-rename"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|rename
argument_list|(
name|path
argument_list|,
name|renamePath
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|xattrs
init|=
name|fs
operator|.
name|getXAttrs
argument_list|(
name|renamePath
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|xattrs
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|value1
argument_list|,
name|xattrs
operator|.
name|get
argument_list|(
name|name1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|value2
argument_list|,
name|xattrs
operator|.
name|get
argument_list|(
name|name2
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|removeXAttr
argument_list|(
name|renamePath
argument_list|,
name|name1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|removeXAttr
argument_list|(
name|renamePath
argument_list|,
name|name2
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the listXAttrs api.    * listXAttrs on a path that doesn't exist.    * listXAttrs on a path with no XAttrs    * Check basic functionality.    * Check that read access to parent dir is not enough to get xattr names    * Check that write access to the parent dir is not enough to get names    * Check that execute/scan access to the parent dir is sufficient to get    *  xattr names.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testListXAttrs ()
specifier|public
name|void
name|testListXAttrs
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|UserGroupInformation
name|user
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"user"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"mygroup"
block|}
argument_list|)
decl_stmt|;
comment|/* listXAttrs in a path that doesn't exist. */
try|try
block|{
name|fs
operator|.
name|listXAttrs
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected FileNotFoundException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"cannot find"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0750
argument_list|)
argument_list|)
expr_stmt|;
comment|/* listXAttrs on a path with no XAttrs.*/
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|noXAttrs
init|=
name|fs
operator|.
name|listXAttrs
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"XAttrs were found?"
argument_list|,
name|noXAttrs
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setXAttr
argument_list|(
name|path
argument_list|,
name|name1
argument_list|,
name|value1
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|XAttrSetFlag
operator|.
name|CREATE
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setXAttr
argument_list|(
name|path
argument_list|,
name|name2
argument_list|,
name|value2
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|XAttrSetFlag
operator|.
name|CREATE
argument_list|)
argument_list|)
expr_stmt|;
comment|/** Check basic functionality. */
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|xattrNames
init|=
name|fs
operator|.
name|listXAttrs
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|xattrNames
operator|.
name|contains
argument_list|(
name|name1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|xattrNames
operator|.
name|contains
argument_list|(
name|name2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|xattrNames
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
comment|/* Check that read access to parent dir is not enough to get xattr names. */
name|fs
operator|.
name|setPermission
argument_list|(
name|path
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0704
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|childDir
init|=
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"child"
operator|+
name|pathCount
argument_list|)
decl_stmt|;
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|childDir
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0700
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setXAttr
argument_list|(
name|childDir
argument_list|,
name|name1
argument_list|,
literal|"1234"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|user
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|FileSystem
name|userFs
init|=
name|dfsCluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|userFs
operator|.
name|listXAttrs
argument_list|(
name|childDir
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected IOException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Permission denied"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|/*      * Check that write access to the parent dir is not enough to get names.      */
name|fs
operator|.
name|setPermission
argument_list|(
name|path
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0702
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|user
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|FileSystem
name|userFs
init|=
name|dfsCluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|userFs
operator|.
name|listXAttrs
argument_list|(
name|childDir
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected IOException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Permission denied"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|/*      * Check that execute/scan access to the parent dir is sufficient to get      * xattr names.      */
name|fs
operator|.
name|setPermission
argument_list|(
name|path
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0701
argument_list|)
argument_list|)
expr_stmt|;
name|user
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|FileSystem
name|userFs
init|=
name|dfsCluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|userFs
operator|.
name|listXAttrs
argument_list|(
name|childDir
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|/*      * Test that xattrs in the "trusted" namespace are filtered correctly.      */
name|fs
operator|.
name|setXAttr
argument_list|(
name|childDir
argument_list|,
literal|"trusted.myxattr"
argument_list|,
literal|"1234"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|user
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|FileSystem
name|userFs
init|=
name|dfsCluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|userFs
operator|.
name|listXAttrs
argument_list|(
name|childDir
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|listXAttrs
argument_list|(
name|childDir
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
block|}
comment|/**    * Steps:    * 1) Set xattrs on a file.    * 2) Remove xattrs from that file.    * 3) Save a checkpoint and restart NN.    * 4) Set xattrs again on the same file.    * 5) Remove xattrs from that file.    * 6) Restart NN without saving a checkpoint.    * 7) Set xattrs again on the same file.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testCleanupXAttrs ()
specifier|public
name|void
name|testCleanupXAttrs
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0750
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setXAttr
argument_list|(
name|path
argument_list|,
name|name1
argument_list|,
name|value1
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|XAttrSetFlag
operator|.
name|CREATE
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setXAttr
argument_list|(
name|path
argument_list|,
name|name2
argument_list|,
name|value2
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|XAttrSetFlag
operator|.
name|CREATE
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|removeXAttr
argument_list|(
name|path
argument_list|,
name|name1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|removeXAttr
argument_list|(
name|path
argument_list|,
name|name2
argument_list|)
expr_stmt|;
name|restart
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|initFileSystem
argument_list|()
expr_stmt|;
name|fs
operator|.
name|setXAttr
argument_list|(
name|path
argument_list|,
name|name1
argument_list|,
name|value1
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|XAttrSetFlag
operator|.
name|CREATE
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setXAttr
argument_list|(
name|path
argument_list|,
name|name2
argument_list|,
name|value2
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|XAttrSetFlag
operator|.
name|CREATE
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|removeXAttr
argument_list|(
name|path
argument_list|,
name|name1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|removeXAttr
argument_list|(
name|path
argument_list|,
name|name2
argument_list|)
expr_stmt|;
name|restart
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|initFileSystem
argument_list|()
expr_stmt|;
name|fs
operator|.
name|setXAttr
argument_list|(
name|path
argument_list|,
name|name1
argument_list|,
name|value1
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|XAttrSetFlag
operator|.
name|CREATE
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setXAttr
argument_list|(
name|path
argument_list|,
name|name2
argument_list|,
name|value2
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|XAttrSetFlag
operator|.
name|CREATE
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|removeXAttr
argument_list|(
name|path
argument_list|,
name|name1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|removeXAttr
argument_list|(
name|path
argument_list|,
name|name2
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setXAttr
argument_list|(
name|path
argument_list|,
name|name1
argument_list|,
name|value1
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|XAttrSetFlag
operator|.
name|CREATE
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setXAttr
argument_list|(
name|path
argument_list|,
name|name2
argument_list|,
name|value2
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|XAttrSetFlag
operator|.
name|CREATE
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|xattrs
init|=
name|fs
operator|.
name|getXAttrs
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|xattrs
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|value1
argument_list|,
name|xattrs
operator|.
name|get
argument_list|(
name|name1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|value2
argument_list|,
name|xattrs
operator|.
name|get
argument_list|(
name|name2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testXAttrAcl ()
specifier|public
name|void
name|testXAttrAcl
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0750
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setOwner
argument_list|(
name|path
argument_list|,
name|BRUCE
operator|.
name|getUserName
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|FileSystem
name|fsAsBruce
init|=
name|createFileSystem
argument_list|(
name|BRUCE
argument_list|)
decl_stmt|;
name|FileSystem
name|fsAsDiana
init|=
name|createFileSystem
argument_list|(
name|DIANA
argument_list|)
decl_stmt|;
name|fsAsBruce
operator|.
name|setXAttr
argument_list|(
name|path
argument_list|,
name|name1
argument_list|,
name|value1
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|xattrs
decl_stmt|;
try|try
block|{
name|xattrs
operator|=
name|fsAsDiana
operator|.
name|getXAttrs
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Diana should not have read access to get xattrs"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
comment|// Give Diana read permissions to the path
name|fsAsBruce
operator|.
name|modifyAclEntries
argument_list|(
name|path
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
name|DIANA
operator|.
name|getUserName
argument_list|()
argument_list|,
name|READ
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|xattrs
operator|=
name|fsAsDiana
operator|.
name|getXAttrs
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|value1
argument_list|,
name|xattrs
operator|.
name|get
argument_list|(
name|name1
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|fsAsDiana
operator|.
name|removeXAttr
argument_list|(
name|path
argument_list|,
name|name1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Diana should not have write access to remove xattrs"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
try|try
block|{
name|fsAsDiana
operator|.
name|setXAttr
argument_list|(
name|path
argument_list|,
name|name2
argument_list|,
name|value2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Diana should not have write access to set xattrs"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
name|fsAsBruce
operator|.
name|modifyAclEntries
argument_list|(
name|path
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
name|DIANA
operator|.
name|getUserName
argument_list|()
argument_list|,
name|ALL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|fsAsDiana
operator|.
name|setXAttr
argument_list|(
name|path
argument_list|,
name|name2
argument_list|,
name|value2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|value2
argument_list|,
name|fsAsDiana
operator|.
name|getXAttrs
argument_list|(
name|path
argument_list|)
operator|.
name|get
argument_list|(
name|name2
argument_list|)
argument_list|)
expr_stmt|;
name|fsAsDiana
operator|.
name|removeXAttr
argument_list|(
name|path
argument_list|,
name|name1
argument_list|)
expr_stmt|;
name|fsAsDiana
operator|.
name|removeXAttr
argument_list|(
name|path
argument_list|,
name|name2
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a FileSystem for the super-user.    *    * @return FileSystem for super-user    * @throws Exception if creation fails    */
DECL|method|createFileSystem ()
specifier|protected
name|FileSystem
name|createFileSystem
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|dfsCluster
operator|.
name|getFileSystem
argument_list|()
return|;
block|}
comment|/**    * Creates a FileSystem for a specific user.    *    * @param user UserGroupInformation specific user    * @return FileSystem for specific user    * @throws Exception if creation fails    */
DECL|method|createFileSystem (UserGroupInformation user)
specifier|protected
name|FileSystem
name|createFileSystem
parameter_list|(
name|UserGroupInformation
name|user
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|DFSTestUtil
operator|.
name|getFileSystemAs
argument_list|(
name|user
argument_list|,
name|conf
argument_list|)
return|;
block|}
comment|/**    * Initializes all FileSystem instances used in the tests.    *    * @throws Exception if initialization fails    */
DECL|method|initFileSystem ()
specifier|private
name|void
name|initFileSystem
parameter_list|()
throws|throws
name|Exception
block|{
name|fs
operator|=
name|createFileSystem
argument_list|()
expr_stmt|;
block|}
comment|/**    * Initialize the cluster, wait for it to become active, and get FileSystem    * instances for our test users.    *    * @param format if true, format the NameNode and DataNodes before starting up    * @throws Exception if any step fails    */
DECL|method|initCluster (boolean format)
specifier|protected
specifier|static
name|void
name|initCluster
parameter_list|(
name|boolean
name|format
parameter_list|)
throws|throws
name|Exception
block|{
name|dfsCluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|format
argument_list|(
name|format
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|dfsCluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
block|}
comment|/**    * Restart the cluster, optionally saving a new checkpoint.    *    * @param checkpoint boolean true to save a new checkpoint    * @throws Exception if restart fails    */
DECL|method|restart (boolean checkpoint)
specifier|protected
specifier|static
name|void
name|restart
parameter_list|(
name|boolean
name|checkpoint
parameter_list|)
throws|throws
name|Exception
block|{
name|NameNode
name|nameNode
init|=
name|dfsCluster
operator|.
name|getNameNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|checkpoint
condition|)
block|{
name|NameNodeAdapter
operator|.
name|enterSafeMode
argument_list|(
name|nameNode
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|NameNodeAdapter
operator|.
name|saveNamespace
argument_list|(
name|nameNode
argument_list|)
expr_stmt|;
block|}
name|shutdown
argument_list|()
expr_stmt|;
name|initCluster
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

