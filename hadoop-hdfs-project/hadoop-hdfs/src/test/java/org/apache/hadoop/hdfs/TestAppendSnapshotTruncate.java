begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileFilter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadLocalRandom
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|BlockWrite
operator|.
name|ReplaceDatanodeOnFailure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|TestFileTruncate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * Test randomly mixing append, snapshot and truncate operations.  * Use local file system to simulate the each operation and verify  * the correctness.  */
end_comment

begin_class
DECL|class|TestAppendSnapshotTruncate
specifier|public
class|class
name|TestAppendSnapshotTruncate
block|{
static|static
block|{
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|NameNode
operator|.
name|stateChangeLog
argument_list|,
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestAppendSnapshotTruncate
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|BLOCK_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|BLOCK_SIZE
init|=
literal|1024
decl_stmt|;
DECL|field|DATANODE_NUM
specifier|private
specifier|static
specifier|final
name|int
name|DATANODE_NUM
init|=
literal|4
decl_stmt|;
DECL|field|REPLICATION
specifier|private
specifier|static
specifier|final
name|short
name|REPLICATION
init|=
literal|3
decl_stmt|;
DECL|field|FILE_WORKER_NUM
specifier|private
specifier|static
specifier|final
name|int
name|FILE_WORKER_NUM
init|=
literal|10
decl_stmt|;
DECL|field|TEST_TIME_SECOND
specifier|private
specifier|static
specifier|final
name|long
name|TEST_TIME_SECOND
init|=
literal|20
decl_stmt|;
DECL|field|TEST_TIMEOUT_SECOND
specifier|private
specifier|static
specifier|final
name|long
name|TEST_TIMEOUT_SECOND
init|=
name|TEST_TIME_SECOND
operator|+
literal|60
decl_stmt|;
DECL|field|SHORT_HEARTBEAT
specifier|static
specifier|final
name|int
name|SHORT_HEARTBEAT
init|=
literal|1
decl_stmt|;
DECL|field|EMPTY_STRINGS
specifier|static
specifier|final
name|String
index|[]
name|EMPTY_STRINGS
init|=
block|{}
decl_stmt|;
DECL|field|conf
specifier|static
name|Configuration
name|conf
decl_stmt|;
DECL|field|cluster
specifier|static
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|dfs
specifier|static
name|DistributedFileSystem
name|dfs
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|startUp ()
specifier|public
specifier|static
name|void
name|startUp
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_MIN_BLOCK_SIZE_KEY
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BYTES_PER_CHECKSUM_KEY
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|,
name|SHORT_HEARTBEAT
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_RECONSTRUCTION_PENDING_TIMEOUT_SEC_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|ReplaceDatanodeOnFailure
operator|.
name|BEST_EFFORT_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|format
argument_list|(
literal|true
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|DATANODE_NUM
argument_list|)
operator|.
name|nameNodePort
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|DFS_NAMENODE_RPC_PORT_DEFAULT
argument_list|)
operator|.
name|waitSafeMode
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|dfs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|tearDown ()
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|dfs
operator|!=
literal|null
condition|)
block|{
name|dfs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Test randomly mixing append, snapshot and truncate operations. */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|TEST_TIMEOUT_SECOND
operator|*
literal|1000
argument_list|)
DECL|method|testAST ()
specifier|public
name|void
name|testAST
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|dirPathString
init|=
literal|"/dir"
decl_stmt|;
specifier|final
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
name|dirPathString
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|allowSnapshot
argument_list|(
name|dir
argument_list|)
expr_stmt|;
specifier|final
name|File
name|localDir
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"target/test/data"
argument_list|)
operator|+
name|dirPathString
argument_list|)
decl_stmt|;
if|if
condition|(
name|localDir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|localDir
argument_list|)
expr_stmt|;
block|}
name|localDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
specifier|final
name|DirWorker
name|w
init|=
operator|new
name|DirWorker
argument_list|(
name|dir
argument_list|,
name|localDir
argument_list|,
name|FILE_WORKER_NUM
argument_list|)
decl_stmt|;
name|w
operator|.
name|startAllFiles
argument_list|()
expr_stmt|;
name|w
operator|.
name|start
argument_list|()
expr_stmt|;
name|Worker
operator|.
name|sleep
argument_list|(
name|TEST_TIME_SECOND
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|w
operator|.
name|stop
argument_list|()
expr_stmt|;
name|w
operator|.
name|stopAllFiles
argument_list|()
expr_stmt|;
name|w
operator|.
name|checkEverything
argument_list|()
expr_stmt|;
block|}
DECL|field|FILE_ONLY
specifier|static
specifier|final
name|FileFilter
name|FILE_ONLY
init|=
operator|new
name|FileFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|f
parameter_list|)
block|{
return|return
name|f
operator|.
name|isFile
argument_list|()
return|;
block|}
block|}
decl_stmt|;
DECL|class|DirWorker
specifier|static
class|class
name|DirWorker
extends|extends
name|Worker
block|{
DECL|field|dir
specifier|final
name|Path
name|dir
decl_stmt|;
DECL|field|localDir
specifier|final
name|File
name|localDir
decl_stmt|;
DECL|field|files
specifier|final
name|FileWorker
index|[]
name|files
decl_stmt|;
DECL|field|snapshotPaths
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
name|snapshotPaths
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|snapshotCount
specifier|private
name|AtomicInteger
name|snapshotCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
DECL|method|DirWorker (Path dir, File localDir, int nFiles)
name|DirWorker
parameter_list|(
name|Path
name|dir
parameter_list|,
name|File
name|localDir
parameter_list|,
name|int
name|nFiles
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|dir
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|dir
operator|=
name|dir
expr_stmt|;
name|this
operator|.
name|localDir
operator|=
name|localDir
expr_stmt|;
name|this
operator|.
name|files
operator|=
operator|new
name|FileWorker
index|[
name|nFiles
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|files
index|[
name|i
index|]
operator|=
operator|new
name|FileWorker
argument_list|(
name|dir
argument_list|,
name|localDir
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"file%02d"
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getSnapshotName (int n)
specifier|static
name|String
name|getSnapshotName
parameter_list|(
name|int
name|n
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"s%02d"
argument_list|,
name|n
argument_list|)
return|;
block|}
DECL|method|createSnapshot (String snapshot)
name|String
name|createSnapshot
parameter_list|(
name|String
name|snapshot
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"createSnapshot: "
argument_list|)
operator|.
name|append
argument_list|(
name|snapshot
argument_list|)
operator|.
name|append
argument_list|(
literal|" for "
argument_list|)
operator|.
name|append
argument_list|(
name|dir
argument_list|)
decl_stmt|;
block|{
comment|//copy all local files to a sub dir to simulate snapshot.
specifier|final
name|File
name|subDir
init|=
operator|new
name|File
argument_list|(
name|localDir
argument_list|,
name|snapshot
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|subDir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|subDir
operator|.
name|mkdir
argument_list|()
expr_stmt|;
for|for
control|(
name|File
name|f
range|:
name|localDir
operator|.
name|listFiles
argument_list|(
name|FILE_ONLY
argument_list|)
control|)
block|{
name|FileUtils
operator|.
name|copyFile
argument_list|(
name|f
argument_list|,
operator|new
name|File
argument_list|(
name|subDir
argument_list|,
name|f
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|Path
name|p
init|=
name|dfs
operator|.
name|createSnapshot
argument_list|(
name|dir
argument_list|,
name|snapshot
argument_list|)
decl_stmt|;
name|snapshotPaths
operator|.
name|put
argument_list|(
name|snapshot
argument_list|,
name|p
argument_list|)
expr_stmt|;
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|checkSnapshot (String snapshot)
name|String
name|checkSnapshot
parameter_list|(
name|String
name|snapshot
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"checkSnapshot: "
argument_list|)
operator|.
name|append
argument_list|(
name|snapshot
argument_list|)
decl_stmt|;
specifier|final
name|File
name|subDir
init|=
operator|new
name|File
argument_list|(
name|localDir
argument_list|,
name|snapshot
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|subDir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|File
index|[]
name|localFiles
init|=
name|subDir
operator|.
name|listFiles
argument_list|(
name|FILE_ONLY
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|p
init|=
name|snapshotPaths
operator|.
name|get
argument_list|(
name|snapshot
argument_list|)
decl_stmt|;
specifier|final
name|FileStatus
index|[]
name|statuses
init|=
name|dfs
operator|.
name|listStatus
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|localFiles
operator|.
name|length
argument_list|,
name|statuses
operator|.
name|length
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|p
argument_list|)
operator|.
name|append
argument_list|(
literal|" vs "
argument_list|)
operator|.
name|append
argument_list|(
name|subDir
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|statuses
operator|.
name|length
argument_list|)
operator|.
name|append
argument_list|(
literal|" entries"
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|localFiles
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|statuses
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|statuses
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|FileWorker
operator|.
name|checkFullFile
argument_list|(
name|statuses
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|,
name|localFiles
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|deleteSnapshot (String snapshot)
name|String
name|deleteSnapshot
parameter_list|(
name|String
name|snapshot
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"deleteSnapshot: "
argument_list|)
operator|.
name|append
argument_list|(
name|snapshot
argument_list|)
operator|.
name|append
argument_list|(
literal|" from "
argument_list|)
operator|.
name|append
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
operator|new
name|File
argument_list|(
name|localDir
argument_list|,
name|snapshot
argument_list|)
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|deleteSnapshot
argument_list|(
name|dir
argument_list|,
name|snapshot
argument_list|)
expr_stmt|;
name|snapshotPaths
operator|.
name|remove
argument_list|(
name|snapshot
argument_list|)
expr_stmt|;
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|call ()
specifier|public
name|String
name|call
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|op
init|=
name|ThreadLocalRandom
operator|.
name|current
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|6
argument_list|)
decl_stmt|;
if|if
condition|(
name|op
operator|<=
literal|1
condition|)
block|{
name|pauseAllFiles
argument_list|()
expr_stmt|;
try|try
block|{
specifier|final
name|String
name|snapshot
init|=
name|getSnapshotName
argument_list|(
name|snapshotCount
operator|.
name|getAndIncrement
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|createSnapshot
argument_list|(
name|snapshot
argument_list|)
return|;
block|}
finally|finally
block|{
name|startAllFiles
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|op
operator|<=
literal|3
condition|)
block|{
specifier|final
name|String
index|[]
name|keys
init|=
name|snapshotPaths
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
name|EMPTY_STRINGS
argument_list|)
decl_stmt|;
if|if
condition|(
name|keys
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|"NO-OP"
return|;
block|}
specifier|final
name|String
name|snapshot
init|=
name|keys
index|[
name|ThreadLocalRandom
operator|.
name|current
argument_list|()
operator|.
name|nextInt
argument_list|(
name|keys
operator|.
name|length
argument_list|)
index|]
decl_stmt|;
specifier|final
name|String
name|s
init|=
name|checkSnapshot
argument_list|(
name|snapshot
argument_list|)
decl_stmt|;
if|if
condition|(
name|op
operator|==
literal|2
condition|)
block|{
return|return
name|deleteSnapshot
argument_list|(
name|snapshot
argument_list|)
return|;
block|}
return|return
name|s
return|;
block|}
else|else
block|{
return|return
literal|"NO-OP"
return|;
block|}
block|}
DECL|method|pauseAllFiles ()
name|void
name|pauseAllFiles
parameter_list|()
block|{
for|for
control|(
name|FileWorker
name|f
range|:
name|files
control|)
block|{
name|f
operator|.
name|pause
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|length
condition|;
control|)
block|{
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|files
operator|.
name|length
operator|&&
name|files
index|[
name|i
index|]
operator|.
name|isPaused
argument_list|()
condition|;
name|i
operator|++
control|)
empty_stmt|;
block|}
block|}
DECL|method|startAllFiles ()
name|void
name|startAllFiles
parameter_list|()
block|{
for|for
control|(
name|FileWorker
name|f
range|:
name|files
control|)
block|{
name|f
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|stopAllFiles ()
name|void
name|stopAllFiles
parameter_list|()
throws|throws
name|InterruptedException
block|{
for|for
control|(
name|FileWorker
name|f
range|:
name|files
control|)
block|{
name|f
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|checkEverything ()
name|void
name|checkEverything
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"checkEverything"
argument_list|)
expr_stmt|;
for|for
control|(
name|FileWorker
name|f
range|:
name|files
control|)
block|{
name|f
operator|.
name|checkFullFile
argument_list|()
expr_stmt|;
name|f
operator|.
name|checkErrorState
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|String
name|snapshot
range|:
name|snapshotPaths
operator|.
name|keySet
argument_list|()
control|)
block|{
name|checkSnapshot
argument_list|(
name|snapshot
argument_list|)
expr_stmt|;
block|}
name|checkErrorState
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|FileWorker
specifier|static
class|class
name|FileWorker
extends|extends
name|Worker
block|{
DECL|field|file
specifier|final
name|Path
name|file
decl_stmt|;
DECL|field|localFile
specifier|final
name|File
name|localFile
decl_stmt|;
DECL|method|FileWorker (Path dir, File localDir, String filename)
name|FileWorker
parameter_list|(
name|Path
name|dir
parameter_list|,
name|File
name|localDir
parameter_list|,
name|String
name|filename
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|filename
argument_list|)
expr_stmt|;
name|this
operator|.
name|file
operator|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|filename
argument_list|)
expr_stmt|;
name|this
operator|.
name|localFile
operator|=
operator|new
name|File
argument_list|(
name|localDir
argument_list|,
name|filename
argument_list|)
expr_stmt|;
name|localFile
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|dfs
operator|.
name|create
argument_list|(
name|file
argument_list|,
literal|false
argument_list|,
literal|4096
argument_list|,
name|REPLICATION
argument_list|,
name|BLOCK_SIZE
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|call ()
specifier|public
name|String
name|call
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|op
init|=
name|ThreadLocalRandom
operator|.
name|current
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|9
argument_list|)
decl_stmt|;
if|if
condition|(
name|op
operator|==
literal|0
condition|)
block|{
return|return
name|checkFullFile
argument_list|()
return|;
block|}
else|else
block|{
specifier|final
name|int
name|nBlocks
init|=
name|ThreadLocalRandom
operator|.
name|current
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|4
argument_list|)
operator|+
literal|1
decl_stmt|;
specifier|final
name|int
name|lastBlockSize
init|=
name|ThreadLocalRandom
operator|.
name|current
argument_list|()
operator|.
name|nextInt
argument_list|(
name|BLOCK_SIZE
argument_list|)
operator|+
literal|1
decl_stmt|;
specifier|final
name|int
name|nBytes
init|=
name|nBlocks
operator|*
name|BLOCK_SIZE
operator|+
name|lastBlockSize
decl_stmt|;
if|if
condition|(
name|op
operator|<=
literal|4
condition|)
block|{
return|return
name|append
argument_list|(
name|nBytes
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|op
operator|<=
literal|6
condition|)
block|{
return|return
name|truncateArbitrarily
argument_list|(
name|nBytes
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|truncateToBlockBoundary
argument_list|(
name|nBlocks
argument_list|)
return|;
block|}
block|}
block|}
DECL|method|append (int n)
name|String
name|append
parameter_list|(
name|int
name|n
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"append "
argument_list|)
operator|.
name|append
argument_list|(
name|n
argument_list|)
operator|.
name|append
argument_list|(
literal|" bytes to "
argument_list|)
operator|.
name|append
argument_list|(
name|file
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|n
index|]
decl_stmt|;
name|ThreadLocalRandom
operator|.
name|current
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|{
comment|// write to local file
specifier|final
name|FileOutputStream
name|out
init|=
operator|new
name|FileOutputStream
argument_list|(
name|localFile
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|{
specifier|final
name|FSDataOutputStream
name|out
init|=
name|dfs
operator|.
name|append
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|truncateArbitrarily (int nBytes)
name|String
name|truncateArbitrarily
parameter_list|(
name|int
name|nBytes
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|nBytes
operator|>
literal|0
argument_list|)
expr_stmt|;
specifier|final
name|int
name|length
init|=
name|checkLength
argument_list|()
decl_stmt|;
specifier|final
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"truncateArbitrarily: "
argument_list|)
operator|.
name|append
argument_list|(
name|nBytes
argument_list|)
operator|.
name|append
argument_list|(
literal|" bytes from "
argument_list|)
operator|.
name|append
argument_list|(
name|file
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", length="
operator|+
name|length
argument_list|)
decl_stmt|;
name|truncate
argument_list|(
name|length
operator|>
name|nBytes
condition|?
name|length
operator|-
name|nBytes
else|:
literal|0
argument_list|,
name|b
argument_list|)
expr_stmt|;
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|truncateToBlockBoundary (int nBlocks)
name|String
name|truncateToBlockBoundary
parameter_list|(
name|int
name|nBlocks
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|nBlocks
operator|>
literal|0
argument_list|)
expr_stmt|;
specifier|final
name|int
name|length
init|=
name|checkLength
argument_list|()
decl_stmt|;
specifier|final
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"truncateToBlockBoundary: "
argument_list|)
operator|.
name|append
argument_list|(
name|nBlocks
argument_list|)
operator|.
name|append
argument_list|(
literal|" blocks from "
argument_list|)
operator|.
name|append
argument_list|(
name|file
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", length="
operator|+
name|length
argument_list|)
decl_stmt|;
specifier|final
name|int
name|n
init|=
operator|(
name|nBlocks
operator|-
literal|1
operator|)
operator|*
name|BLOCK_SIZE
operator|+
operator|(
name|length
operator|%
name|BLOCK_SIZE
operator|)
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|truncate
argument_list|(
name|length
operator|>
name|n
condition|?
name|length
operator|-
name|n
else|:
literal|0
argument_list|,
name|b
argument_list|)
argument_list|,
name|b
argument_list|)
expr_stmt|;
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|truncate (long newLength, StringBuilder b)
specifier|private
name|boolean
name|truncate
parameter_list|(
name|long
name|newLength
parameter_list|,
name|StringBuilder
name|b
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|RandomAccessFile
name|raf
init|=
operator|new
name|RandomAccessFile
argument_list|(
name|localFile
argument_list|,
literal|"rw"
argument_list|)
decl_stmt|;
name|raf
operator|.
name|setLength
argument_list|(
name|newLength
argument_list|)
expr_stmt|;
name|raf
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|boolean
name|isReady
init|=
name|dfs
operator|.
name|truncate
argument_list|(
name|file
argument_list|,
name|newLength
argument_list|)
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|", newLength="
argument_list|)
operator|.
name|append
argument_list|(
name|newLength
argument_list|)
operator|.
name|append
argument_list|(
literal|", isReady="
argument_list|)
operator|.
name|append
argument_list|(
name|isReady
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isReady
condition|)
block|{
name|TestFileTruncate
operator|.
name|checkBlockRecovery
argument_list|(
name|file
argument_list|,
name|dfs
argument_list|,
literal|100
argument_list|,
literal|300L
argument_list|)
expr_stmt|;
block|}
return|return
name|isReady
return|;
block|}
DECL|method|checkLength ()
name|int
name|checkLength
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|checkLength
argument_list|(
name|file
argument_list|,
name|localFile
argument_list|)
return|;
block|}
DECL|method|checkLength (Path file, File localFile)
specifier|static
name|int
name|checkLength
parameter_list|(
name|Path
name|file
parameter_list|,
name|File
name|localFile
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|long
name|length
init|=
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|file
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|localFile
operator|.
name|length
argument_list|()
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|length
operator|<=
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
return|return
operator|(
name|int
operator|)
name|length
return|;
block|}
DECL|method|checkFullFile ()
name|String
name|checkFullFile
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|checkFullFile
argument_list|(
name|file
argument_list|,
name|localFile
argument_list|)
return|;
block|}
DECL|method|checkFullFile (Path file, File localFile)
specifier|static
name|String
name|checkFullFile
parameter_list|(
name|Path
name|file
parameter_list|,
name|File
name|localFile
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"checkFullFile: "
argument_list|)
operator|.
name|append
argument_list|(
name|file
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" vs "
argument_list|)
operator|.
name|append
argument_list|(
name|localFile
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|checkLength
argument_list|(
name|file
argument_list|,
name|localFile
argument_list|)
index|]
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|", length="
argument_list|)
operator|.
name|append
argument_list|(
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
specifier|final
name|FileInputStream
name|in
init|=
operator|new
name|FileInputStream
argument_list|(
name|localFile
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<
name|bytes
operator|.
name|length
condition|;
control|)
block|{
name|n
operator|+=
name|in
operator|.
name|read
argument_list|(
name|bytes
argument_list|,
name|n
argument_list|,
name|bytes
operator|.
name|length
operator|-
name|n
argument_list|)
expr_stmt|;
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|AppendTestUtil
operator|.
name|checkFullFile
argument_list|(
name|dfs
argument_list|,
name|file
argument_list|,
name|bytes
operator|.
name|length
argument_list|,
name|bytes
argument_list|,
literal|"File content mismatch: "
operator|+
name|b
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
DECL|class|Worker
specifier|static
specifier|abstract
class|class
name|Worker
implements|implements
name|Callable
argument_list|<
name|String
argument_list|>
block|{
DECL|enum|State
enum|enum
name|State
block|{
DECL|enumConstant|IDLE
DECL|enumConstant|RUNNING
DECL|enumConstant|STOPPED
DECL|enumConstant|ERROR
name|IDLE
argument_list|(
literal|false
argument_list|)
block|,
name|RUNNING
argument_list|(
literal|false
argument_list|)
block|,
name|STOPPED
argument_list|(
literal|true
argument_list|)
block|,
name|ERROR
argument_list|(
literal|true
argument_list|)
block|;
DECL|field|isTerminated
specifier|final
name|boolean
name|isTerminated
decl_stmt|;
DECL|method|State (boolean isTerminated)
name|State
parameter_list|(
name|boolean
name|isTerminated
parameter_list|)
block|{
name|this
operator|.
name|isTerminated
operator|=
name|isTerminated
expr_stmt|;
block|}
block|}
empty_stmt|;
DECL|field|name
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|state
specifier|final
name|AtomicReference
argument_list|<
name|State
argument_list|>
name|state
init|=
operator|new
name|AtomicReference
argument_list|<
name|State
argument_list|>
argument_list|(
name|State
operator|.
name|IDLE
argument_list|)
decl_stmt|;
DECL|field|isCalling
specifier|final
name|AtomicBoolean
name|isCalling
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
DECL|field|thread
specifier|final
name|AtomicReference
argument_list|<
name|Thread
argument_list|>
name|thread
init|=
operator|new
name|AtomicReference
argument_list|<
name|Thread
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|thrown
specifier|private
name|Throwable
name|thrown
init|=
literal|null
decl_stmt|;
DECL|method|Worker (String name)
name|Worker
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
DECL|method|checkErrorState ()
name|State
name|checkErrorState
parameter_list|()
block|{
specifier|final
name|State
name|s
init|=
name|state
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|==
name|State
operator|.
name|ERROR
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|name
operator|+
literal|" has "
operator|+
name|s
argument_list|,
name|thrown
argument_list|)
throw|;
block|}
return|return
name|s
return|;
block|}
DECL|method|setErrorState (Throwable t)
name|void
name|setErrorState
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|checkErrorState
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Worker "
operator|+
name|name
operator|+
literal|" failed."
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|state
operator|.
name|set
argument_list|(
name|State
operator|.
name|ERROR
argument_list|)
expr_stmt|;
name|thrown
operator|=
name|t
expr_stmt|;
block|}
DECL|method|start ()
name|void
name|start
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|state
operator|.
name|compareAndSet
argument_list|(
name|State
operator|.
name|IDLE
argument_list|,
name|State
operator|.
name|RUNNING
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|thread
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
block|{
specifier|final
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
literal|null
argument_list|,
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|State
name|s
init|;
operator|!
operator|(
name|s
operator|=
name|checkErrorState
argument_list|()
operator|)
operator|.
name|isTerminated
condition|;
control|)
block|{
if|if
condition|(
name|s
operator|==
name|State
operator|.
name|RUNNING
condition|)
block|{
name|isCalling
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
name|call
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|setErrorState
argument_list|(
name|t
argument_list|)
expr_stmt|;
return|return;
block|}
name|isCalling
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|sleep
argument_list|(
name|ThreadLocalRandom
operator|.
name|current
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|+
literal|50
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|thread
operator|.
name|compareAndSet
argument_list|(
literal|null
argument_list|,
name|t
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|isPaused ()
name|boolean
name|isPaused
parameter_list|()
block|{
specifier|final
name|State
name|s
init|=
name|checkErrorState
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|==
name|State
operator|.
name|STOPPED
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|name
operator|+
literal|" is "
operator|+
name|s
argument_list|)
throw|;
block|}
return|return
name|s
operator|==
name|State
operator|.
name|IDLE
operator|&&
operator|!
name|isCalling
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|pause ()
name|void
name|pause
parameter_list|()
block|{
name|checkErrorState
argument_list|()
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|state
operator|.
name|compareAndSet
argument_list|(
name|State
operator|.
name|RUNNING
argument_list|,
name|State
operator|.
name|IDLE
argument_list|)
argument_list|,
literal|"%s: state=%s != %s"
argument_list|,
name|name
argument_list|,
name|state
operator|.
name|get
argument_list|()
argument_list|,
name|State
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
block|}
DECL|method|stop ()
name|void
name|stop
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|checkErrorState
argument_list|()
expr_stmt|;
name|state
operator|.
name|set
argument_list|(
name|State
operator|.
name|STOPPED
argument_list|)
expr_stmt|;
name|thread
operator|.
name|get
argument_list|()
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
DECL|method|sleep (final long sleepTimeMs)
specifier|static
name|void
name|sleep
parameter_list|(
specifier|final
name|long
name|sleepTimeMs
parameter_list|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepTimeMs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

