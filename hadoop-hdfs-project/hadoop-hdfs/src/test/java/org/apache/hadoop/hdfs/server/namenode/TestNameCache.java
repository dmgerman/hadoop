begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test for {@link NameCache} class  */
end_comment

begin_class
DECL|class|TestNameCache
specifier|public
class|class
name|TestNameCache
block|{
annotation|@
name|Test
DECL|method|testDictionary ()
specifier|public
name|void
name|testDictionary
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create dictionary with useThreshold 2
name|NameCache
argument_list|<
name|String
argument_list|>
name|cache
init|=
operator|new
name|NameCache
argument_list|<
name|String
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|String
index|[]
name|matching
init|=
block|{
literal|"part1"
block|,
literal|"part10000000"
block|,
literal|"fileabc"
block|,
literal|"abc"
block|,
literal|"filepart"
block|}
decl_stmt|;
name|String
index|[]
name|notMatching
init|=
block|{
literal|"spart1"
block|,
literal|"apart"
block|,
literal|"abcd"
block|,
literal|"def"
block|}
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|matching
control|)
block|{
comment|// Add useThreshold times so the names are promoted to dictionary
name|cache
operator|.
name|put
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|s
operator|==
name|cache
operator|.
name|put
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|s
range|:
name|notMatching
control|)
block|{
comment|// Add< useThreshold times so the names are not promoted to dictionary
name|cache
operator|.
name|put
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
comment|// Mark dictionary as initialized
name|cache
operator|.
name|initialized
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|s
range|:
name|matching
control|)
block|{
name|verifyNameReuse
argument_list|(
name|cache
argument_list|,
name|s
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// Check dictionary size
name|assertEquals
argument_list|(
name|matching
operator|.
name|length
argument_list|,
name|cache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|s
range|:
name|notMatching
control|)
block|{
name|verifyNameReuse
argument_list|(
name|cache
argument_list|,
name|s
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifyNameReuse (NameCache<String> cache, String s, boolean reused)
specifier|private
name|void
name|verifyNameReuse
parameter_list|(
name|NameCache
argument_list|<
name|String
argument_list|>
name|cache
parameter_list|,
name|String
name|s
parameter_list|,
name|boolean
name|reused
parameter_list|)
block|{
name|cache
operator|.
name|put
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|int
name|lookupCount
init|=
name|cache
operator|.
name|getLookupCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|reused
condition|)
block|{
comment|// Dictionary returns non null internal value
name|assertNotNull
argument_list|(
name|cache
operator|.
name|put
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
comment|// Successful lookup increments lookup count
name|assertEquals
argument_list|(
name|lookupCount
operator|+
literal|1
argument_list|,
name|cache
operator|.
name|getLookupCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Dictionary returns null - since name is not in the dictionary
name|assertNull
argument_list|(
name|cache
operator|.
name|put
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
comment|// Lookup count remains the same
name|assertEquals
argument_list|(
name|lookupCount
argument_list|,
name|cache
operator|.
name|getLookupCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

