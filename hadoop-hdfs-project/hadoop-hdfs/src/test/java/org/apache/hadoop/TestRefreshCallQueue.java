begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|BindException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNodeRpcServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|DFSAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|FairCallQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestRefreshCallQueue
specifier|public
class|class
name|TestRefreshCallQueue
block|{
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|config
specifier|private
name|Configuration
name|config
decl_stmt|;
DECL|field|mockQueueConstructions
specifier|static
name|int
name|mockQueueConstructions
decl_stmt|;
DECL|field|mockQueuePuts
specifier|static
name|int
name|mockQueuePuts
decl_stmt|;
DECL|field|nnPort
specifier|private
name|int
name|nnPort
init|=
literal|0
decl_stmt|;
DECL|method|setUp (Class<?> queueClass)
specifier|private
name|void
name|setUp
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|queueClass
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|portRetries
init|=
literal|5
decl_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|portRetries
operator|>
literal|0
condition|;
operator|--
name|portRetries
control|)
block|{
comment|// Pick a random port in the range [30000,60000).
name|nnPort
operator|=
literal|30000
operator|+
name|rand
operator|.
name|nextInt
argument_list|(
literal|30000
argument_list|)
expr_stmt|;
name|config
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|String
name|callQueueConfigKey
init|=
literal|"ipc."
operator|+
name|nnPort
operator|+
literal|".callqueue.impl"
decl_stmt|;
name|config
operator|.
name|setClass
argument_list|(
name|callQueueConfigKey
argument_list|,
name|queueClass
argument_list|,
name|BlockingQueue
operator|.
name|class
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
literal|"hadoop.security.authorization"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|FileSystem
operator|.
name|setDefaultUri
argument_list|(
name|config
argument_list|,
literal|"hdfs://localhost:"
operator|+
name|nnPort
argument_list|)
expr_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|config
argument_list|)
operator|.
name|nameNodePort
argument_list|(
name|nnPort
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|BindException
name|be
parameter_list|)
block|{
comment|// Retry with a different port number.
block|}
block|}
if|if
condition|(
name|portRetries
operator|==
literal|0
condition|)
block|{
comment|// Bail if we get very unlucky with our choice of ports.
name|fail
argument_list|(
literal|"Failed to pick an ephemeral port for the NameNode RPC server."
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
DECL|class|MockCallQueue
specifier|public
specifier|static
class|class
name|MockCallQueue
parameter_list|<
name|E
parameter_list|>
extends|extends
name|LinkedBlockingQueue
argument_list|<
name|E
argument_list|>
block|{
DECL|method|MockCallQueue (int levels, int cap, String ns, Configuration conf)
specifier|public
name|MockCallQueue
parameter_list|(
name|int
name|levels
parameter_list|,
name|int
name|cap
parameter_list|,
name|String
name|ns
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|cap
argument_list|)
expr_stmt|;
name|mockQueueConstructions
operator|++
expr_stmt|;
block|}
DECL|method|put (E e)
specifier|public
name|void
name|put
parameter_list|(
name|E
name|e
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|super
operator|.
name|put
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|mockQueuePuts
operator|++
expr_stmt|;
block|}
block|}
comment|// Returns true if mock queue was used for put
DECL|method|canPutInMockQueue ()
specifier|public
name|boolean
name|canPutInMockQueue
parameter_list|()
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|int
name|putsBefore
init|=
name|mockQueuePuts
decl_stmt|;
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make an RPC call
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|mockQueuePuts
operator|>
name|putsBefore
return|;
block|}
annotation|@
name|Test
DECL|method|testRefresh ()
specifier|public
name|void
name|testRefresh
parameter_list|()
throws|throws
name|Exception
block|{
comment|// We want to count additional events, so we reset here
name|mockQueueConstructions
operator|=
literal|0
expr_stmt|;
name|mockQueuePuts
operator|=
literal|0
expr_stmt|;
name|setUp
argument_list|(
name|MockCallQueue
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Mock queue should have been constructed"
argument_list|,
name|mockQueueConstructions
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Puts are routed through MockQueue"
argument_list|,
name|canPutInMockQueue
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|lastMockQueueConstructions
init|=
name|mockQueueConstructions
decl_stmt|;
comment|// Replace queue with the queue specified in core-site.xml, which would be
comment|// the LinkedBlockingQueue
name|DFSAdmin
name|admin
init|=
operator|new
name|DFSAdmin
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-refreshCallQueue"
block|}
decl_stmt|;
name|int
name|exitCode
init|=
name|admin
operator|.
name|run
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"DFSAdmin should return 0"
argument_list|,
literal|0
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Mock queue should have no additional constructions"
argument_list|,
name|lastMockQueueConstructions
argument_list|,
name|mockQueueConstructions
argument_list|)
expr_stmt|;
try|try
block|{
name|assertFalse
argument_list|(
literal|"Puts are routed through LBQ instead of MockQueue"
argument_list|,
name|canPutInMockQueue
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Could not put into queue at all"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testRefreshCallQueueWithFairCallQueue ()
specifier|public
name|void
name|testRefreshCallQueueWithFairCallQueue
parameter_list|()
throws|throws
name|Exception
block|{
name|setUp
argument_list|(
name|FairCallQueue
operator|.
name|class
argument_list|)
expr_stmt|;
name|boolean
name|oldValue
init|=
name|DefaultMetricsSystem
operator|.
name|inMiniClusterMode
argument_list|()
decl_stmt|;
comment|// throw an error when we double-initialize JvmMetrics
name|DefaultMetricsSystem
operator|.
name|setMiniClusterMode
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|NameNodeRpcServer
name|rpcServer
init|=
operator|(
name|NameNodeRpcServer
operator|)
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
decl_stmt|;
try|try
block|{
name|rpcServer
operator|.
name|getClientRpcServer
argument_list|()
operator|.
name|refreshCallQueue
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Throwable
name|cause
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|cause
operator|instanceof
name|MetricsException
operator|)
operator|&&
name|cause
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Metrics source DecayRpcSchedulerMetrics2.ipc."
operator|+
name|nnPort
operator|+
literal|" already exists!"
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"DecayRpcScheduler metrics should be unregistered before"
operator|+
literal|" reregister"
argument_list|)
expr_stmt|;
block|}
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|DefaultMetricsSystem
operator|.
name|setMiniClusterMode
argument_list|(
name|oldValue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

