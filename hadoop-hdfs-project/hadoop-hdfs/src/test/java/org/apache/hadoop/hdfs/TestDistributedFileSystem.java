begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|inOrder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CancellationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|ArrayUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|impl
operator|.
name|Log4JLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BlockLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BlockStorageLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileChecksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocatedFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|MD5MD5CRC32FileChecksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Options
operator|.
name|ChecksumOpt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RemoteIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|VolumeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
operator|.
name|DataNodeProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNodeFaultInjector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ha
operator|.
name|HATestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|WebHdfsFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtobufRpcEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DataChecksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|InOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_class
DECL|class|TestDistributedFileSystem
specifier|public
class|class
name|TestDistributedFileSystem
block|{
DECL|field|RAN
specifier|private
specifier|static
specifier|final
name|Random
name|RAN
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
block|{
operator|(
operator|(
name|Log4JLogger
operator|)
name|DFSClient
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
DECL|field|dualPortTesting
specifier|private
name|boolean
name|dualPortTesting
init|=
literal|false
decl_stmt|;
DECL|field|noXmlDefaults
specifier|private
name|boolean
name|noXmlDefaults
init|=
literal|false
decl_stmt|;
DECL|method|getTestConfiguration ()
specifier|private
name|HdfsConfiguration
name|getTestConfiguration
parameter_list|()
block|{
name|HdfsConfiguration
name|conf
decl_stmt|;
if|if
condition|(
name|noXmlDefaults
condition|)
block|{
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|String
name|namenodeDir
init|=
operator|new
name|File
argument_list|(
name|MiniDFSCluster
operator|.
name|getBaseDirectory
argument_list|()
argument_list|,
literal|"name"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_NAME_DIR_KEY
argument_list|,
name|namenodeDir
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_EDITS_DIR_KEY
argument_list|,
name|namenodeDir
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|dualPortTesting
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY
argument_list|,
literal|"localhost:0"
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_MIN_BLOCK_SIZE_KEY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
annotation|@
name|Test
DECL|method|testEmptyDelegationToken ()
specifier|public
name|void
name|testEmptyDelegationToken
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
name|getTestConfiguration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|FileSystem
name|fileSys
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|fileSys
operator|.
name|getDelegationToken
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testFileSystemCloseAll ()
specifier|public
name|void
name|testFileSystemCloseAll
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|getTestConfiguration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|URI
name|address
init|=
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|FileSystem
operator|.
name|closeAll
argument_list|()
expr_stmt|;
name|conf
operator|=
name|getTestConfiguration
argument_list|()
expr_stmt|;
name|FileSystem
operator|.
name|setDefaultUri
argument_list|(
name|conf
argument_list|,
name|address
argument_list|)
expr_stmt|;
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|FileSystem
operator|.
name|closeAll
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Tests DFSClient.close throws no ConcurrentModificationException if     * multiple files are open.    * Also tests that any cached sockets are closed. (HDFS-3359)    */
annotation|@
name|Test
DECL|method|testDFSClose ()
specifier|public
name|void
name|testDFSClose
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|getTestConfiguration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|2
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|FileSystem
name|fileSys
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// create two files, leaving them open
name|fileSys
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test/dfsclose/file-0"
argument_list|)
argument_list|)
expr_stmt|;
name|fileSys
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test/dfsclose/file-1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// create another file, close it, and read it, so
comment|// the client gets a socket in its SocketCache
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
literal|"/non-empty-file"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fileSys
argument_list|,
name|p
argument_list|,
literal|1L
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|readFile
argument_list|(
name|fileSys
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|fileSys
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testDFSCloseOrdering ()
specifier|public
name|void
name|testDFSCloseOrdering
parameter_list|()
throws|throws
name|Exception
block|{
name|DistributedFileSystem
name|fs
init|=
operator|new
name|MyDistributedFileSystem
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/a"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|deleteOnExit
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|InOrder
name|inOrder
init|=
name|inOrder
argument_list|(
name|fs
operator|.
name|dfs
argument_list|)
decl_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|fs
operator|.
name|dfs
argument_list|)
operator|.
name|closeOutputStreams
argument_list|(
name|eq
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|fs
operator|.
name|dfs
argument_list|)
operator|.
name|delete
argument_list|(
name|eq
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|fs
operator|.
name|dfs
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|class|MyDistributedFileSystem
specifier|private
specifier|static
class|class
name|MyDistributedFileSystem
extends|extends
name|DistributedFileSystem
block|{
DECL|method|MyDistributedFileSystem ()
name|MyDistributedFileSystem
parameter_list|()
block|{
name|statistics
operator|=
operator|new
name|FileSystem
operator|.
name|Statistics
argument_list|(
literal|"myhdfs"
argument_list|)
expr_stmt|;
comment|// can't mock finals
name|dfs
operator|=
name|mock
argument_list|(
name|DFSClient
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|exists (Path p)
specifier|public
name|boolean
name|exists
parameter_list|(
name|Path
name|p
parameter_list|)
block|{
return|return
literal|true
return|;
comment|// trick out deleteOnExit
block|}
comment|// Symlink resolution doesn't work with a mock, since it doesn't
comment|// have a valid Configuration to resolve paths to the right FileSystem.
comment|// Just call the DFSClient directly to register the delete
annotation|@
name|Override
DECL|method|delete (Path f, final boolean recursive)
specifier|public
name|boolean
name|delete
parameter_list|(
name|Path
name|f
parameter_list|,
specifier|final
name|boolean
name|recursive
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|dfs
operator|.
name|delete
argument_list|(
name|f
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|recursive
argument_list|)
return|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDFSSeekExceptions ()
specifier|public
name|void
name|testDFSSeekExceptions
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
name|getTestConfiguration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|2
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|FileSystem
name|fileSys
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|String
name|file
init|=
literal|"/test/fileclosethenseek/file-0"
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|file
argument_list|)
decl_stmt|;
comment|// create file
name|FSDataOutputStream
name|output
init|=
name|fileSys
operator|.
name|create
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|output
operator|.
name|writeBytes
argument_list|(
literal|"Some test data to write longer than 10 bytes"
argument_list|)
expr_stmt|;
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
name|FSDataInputStream
name|input
init|=
name|fileSys
operator|.
name|open
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|input
operator|.
name|seek
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|boolean
name|threw
init|=
literal|false
decl_stmt|;
try|try
block|{
name|input
operator|.
name|seek
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// success
name|threw
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Failed to throw IOE when seeking past end"
argument_list|,
name|threw
argument_list|)
expr_stmt|;
name|input
operator|.
name|close
argument_list|()
expr_stmt|;
name|threw
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|input
operator|.
name|seek
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//success
name|threw
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Failed to throw IOE when seeking after close"
argument_list|,
name|threw
argument_list|)
expr_stmt|;
name|fileSys
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testDFSClient ()
specifier|public
name|void
name|testDFSClient
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|getTestConfiguration
argument_list|()
decl_stmt|;
specifier|final
name|long
name|grace
init|=
literal|1000L
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|2
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
specifier|final
name|String
name|filepathstring
init|=
literal|"/test/LeaseChecker/foo"
decl_stmt|;
specifier|final
name|Path
index|[]
name|filepaths
init|=
operator|new
name|Path
index|[
literal|4
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|filepaths
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|filepaths
index|[
name|i
index|]
operator|=
operator|new
name|Path
argument_list|(
name|filepathstring
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
specifier|final
name|long
name|millis
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
block|{
specifier|final
name|DistributedFileSystem
name|dfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|dfs
operator|.
name|dfs
operator|.
name|getLeaseRenewer
argument_list|()
operator|.
name|setGraceSleepPeriod
argument_list|(
name|grace
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|dfs
operator|.
name|dfs
operator|.
name|getLeaseRenewer
argument_list|()
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
block|{
comment|//create a file
specifier|final
name|FSDataOutputStream
name|out
init|=
name|dfs
operator|.
name|create
argument_list|(
name|filepaths
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|dfs
operator|.
name|dfs
operator|.
name|getLeaseRenewer
argument_list|()
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
comment|//write something
name|out
operator|.
name|writeLong
argument_list|(
name|millis
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dfs
operator|.
name|dfs
operator|.
name|getLeaseRenewer
argument_list|()
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
comment|//close
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|grace
operator|/
literal|4
operator|*
literal|3
argument_list|)
expr_stmt|;
comment|//within grace period
name|assertTrue
argument_list|(
name|dfs
operator|.
name|dfs
operator|.
name|getLeaseRenewer
argument_list|()
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|dfs
operator|.
name|dfs
operator|.
name|getLeaseRenewer
argument_list|()
operator|.
name|isRunning
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|grace
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
comment|//passed grace period
name|assertFalse
argument_list|(
name|dfs
operator|.
name|dfs
operator|.
name|getLeaseRenewer
argument_list|()
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
comment|//create file1
specifier|final
name|FSDataOutputStream
name|out1
init|=
name|dfs
operator|.
name|create
argument_list|(
name|filepaths
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|dfs
operator|.
name|dfs
operator|.
name|getLeaseRenewer
argument_list|()
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
comment|//create file2
specifier|final
name|FSDataOutputStream
name|out2
init|=
name|dfs
operator|.
name|create
argument_list|(
name|filepaths
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|dfs
operator|.
name|dfs
operator|.
name|getLeaseRenewer
argument_list|()
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
comment|//write something to file1
name|out1
operator|.
name|writeLong
argument_list|(
name|millis
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dfs
operator|.
name|dfs
operator|.
name|getLeaseRenewer
argument_list|()
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
comment|//close file1
name|out1
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|dfs
operator|.
name|dfs
operator|.
name|getLeaseRenewer
argument_list|()
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
comment|//write something to file2
name|out2
operator|.
name|writeLong
argument_list|(
name|millis
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dfs
operator|.
name|dfs
operator|.
name|getLeaseRenewer
argument_list|()
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
comment|//close file2
name|out2
operator|.
name|close
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|grace
operator|/
literal|4
operator|*
literal|3
argument_list|)
expr_stmt|;
comment|//within grace period
name|assertTrue
argument_list|(
name|dfs
operator|.
name|dfs
operator|.
name|getLeaseRenewer
argument_list|()
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
comment|//create file3
specifier|final
name|FSDataOutputStream
name|out3
init|=
name|dfs
operator|.
name|create
argument_list|(
name|filepaths
index|[
literal|3
index|]
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|dfs
operator|.
name|dfs
operator|.
name|getLeaseRenewer
argument_list|()
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|grace
operator|/
literal|4
operator|*
literal|3
argument_list|)
expr_stmt|;
comment|//passed previous grace period, should still running
name|assertTrue
argument_list|(
name|dfs
operator|.
name|dfs
operator|.
name|getLeaseRenewer
argument_list|()
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
comment|//write something to file3
name|out3
operator|.
name|writeLong
argument_list|(
name|millis
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dfs
operator|.
name|dfs
operator|.
name|getLeaseRenewer
argument_list|()
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
comment|//close file3
name|out3
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|dfs
operator|.
name|dfs
operator|.
name|getLeaseRenewer
argument_list|()
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|grace
operator|/
literal|4
operator|*
literal|3
argument_list|)
expr_stmt|;
comment|//within grace period
name|assertTrue
argument_list|(
name|dfs
operator|.
name|dfs
operator|.
name|getLeaseRenewer
argument_list|()
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|dfs
operator|.
name|dfs
operator|.
name|getLeaseRenewer
argument_list|()
operator|.
name|isRunning
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|grace
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
comment|//passed grace period
name|assertFalse
argument_list|(
name|dfs
operator|.
name|dfs
operator|.
name|getLeaseRenewer
argument_list|()
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|dfs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|{
comment|// Check to see if opening a non-existent file triggers a FNF
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/wrwelkj"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"File should not exist for test."
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
try|try
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|assertTrue
argument_list|(
literal|"Did not get a FileNotFoundException for non-existing"
operator|+
literal|" file."
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnf
parameter_list|)
block|{
comment|// This is the proper exception to catch; move on.
block|}
block|}
block|{
specifier|final
name|DistributedFileSystem
name|dfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|dfs
operator|.
name|dfs
operator|.
name|getLeaseRenewer
argument_list|()
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
comment|//open and check the file
name|FSDataInputStream
name|in
init|=
name|dfs
operator|.
name|open
argument_list|(
name|filepaths
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|dfs
operator|.
name|dfs
operator|.
name|getLeaseRenewer
argument_list|()
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|millis
argument_list|,
name|in
operator|.
name|readLong
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|dfs
operator|.
name|dfs
operator|.
name|getLeaseRenewer
argument_list|()
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|dfs
operator|.
name|dfs
operator|.
name|getLeaseRenewer
argument_list|()
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|{
comment|// test accessing DFS with ip address. should work with any hostname
comment|// alias or ip address that points to the interface that NameNode
comment|// is listening on. In this case, it is localhost.
name|String
name|uri
init|=
literal|"hdfs://127.0.0.1:"
operator|+
name|cluster
operator|.
name|getNameNodePort
argument_list|()
operator|+
literal|"/test/ipAddress/file"
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|path
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|buf
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|in
operator|.
name|readFully
argument_list|(
name|buf
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testStatistics ()
specifier|public
name|void
name|testStatistics
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|lsLimit
init|=
literal|2
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|getTestConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_LIST_LIMIT
argument_list|,
name|lsLimit
argument_list|)
expr_stmt|;
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
name|int
name|readOps
init|=
name|DFSTestUtil
operator|.
name|getStatistics
argument_list|(
name|fs
argument_list|)
operator|.
name|getReadOps
argument_list|()
decl_stmt|;
name|int
name|writeOps
init|=
name|DFSTestUtil
operator|.
name|getStatistics
argument_list|(
name|fs
argument_list|)
operator|.
name|getWriteOps
argument_list|()
decl_stmt|;
name|int
name|largeReadOps
init|=
name|DFSTestUtil
operator|.
name|getStatistics
argument_list|(
name|fs
argument_list|)
operator|.
name|getLargeReadOps
argument_list|()
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|checkStatistics
argument_list|(
name|fs
argument_list|,
name|readOps
argument_list|,
operator|++
name|writeOps
argument_list|,
name|largeReadOps
argument_list|)
expr_stmt|;
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|file
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|checkStatistics
argument_list|(
name|fs
argument_list|,
name|readOps
argument_list|,
operator|++
name|writeOps
argument_list|,
name|largeReadOps
argument_list|)
expr_stmt|;
name|FileStatus
name|status
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|checkStatistics
argument_list|(
name|fs
argument_list|,
operator|++
name|readOps
argument_list|,
name|writeOps
argument_list|,
name|largeReadOps
argument_list|)
expr_stmt|;
name|fs
operator|.
name|getFileBlockLocations
argument_list|(
name|file
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkStatistics
argument_list|(
name|fs
argument_list|,
operator|++
name|readOps
argument_list|,
name|writeOps
argument_list|,
name|largeReadOps
argument_list|)
expr_stmt|;
name|fs
operator|.
name|getFileBlockLocations
argument_list|(
name|status
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkStatistics
argument_list|(
name|fs
argument_list|,
operator|++
name|readOps
argument_list|,
name|writeOps
argument_list|,
name|largeReadOps
argument_list|)
expr_stmt|;
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|checkStatistics
argument_list|(
name|fs
argument_list|,
operator|++
name|readOps
argument_list|,
name|writeOps
argument_list|,
name|largeReadOps
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setReplication
argument_list|(
name|file
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
expr_stmt|;
name|checkStatistics
argument_list|(
name|fs
argument_list|,
name|readOps
argument_list|,
operator|++
name|writeOps
argument_list|,
name|largeReadOps
argument_list|)
expr_stmt|;
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|rename
argument_list|(
name|file
argument_list|,
name|file1
argument_list|)
expr_stmt|;
name|checkStatistics
argument_list|(
name|fs
argument_list|,
name|readOps
argument_list|,
operator|++
name|writeOps
argument_list|,
name|largeReadOps
argument_list|)
expr_stmt|;
name|fs
operator|.
name|getContentSummary
argument_list|(
name|file1
argument_list|)
expr_stmt|;
name|checkStatistics
argument_list|(
name|fs
argument_list|,
operator|++
name|readOps
argument_list|,
name|writeOps
argument_list|,
name|largeReadOps
argument_list|)
expr_stmt|;
comment|// Iterative ls test
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|list
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|dir
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|.
name|length
operator|>
name|lsLimit
condition|)
block|{
comment|// if large directory, then count readOps and largeReadOps by
comment|// number times listStatus iterates
name|int
name|iterations
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
operator|(
name|double
operator|)
name|list
operator|.
name|length
operator|/
name|lsLimit
argument_list|)
decl_stmt|;
name|largeReadOps
operator|+=
name|iterations
expr_stmt|;
name|readOps
operator|+=
name|iterations
expr_stmt|;
block|}
else|else
block|{
comment|// Single iteration in listStatus - no large read operation done
name|readOps
operator|++
expr_stmt|;
block|}
comment|// writeOps incremented by 1 for mkdirs
comment|// readOps and largeReadOps incremented by 1 or more
name|checkStatistics
argument_list|(
name|fs
argument_list|,
name|readOps
argument_list|,
operator|++
name|writeOps
argument_list|,
name|largeReadOps
argument_list|)
expr_stmt|;
block|}
name|fs
operator|.
name|getStatus
argument_list|(
name|file1
argument_list|)
expr_stmt|;
name|checkStatistics
argument_list|(
name|fs
argument_list|,
operator|++
name|readOps
argument_list|,
name|writeOps
argument_list|,
name|largeReadOps
argument_list|)
expr_stmt|;
name|fs
operator|.
name|getFileChecksum
argument_list|(
name|file1
argument_list|)
expr_stmt|;
name|checkStatistics
argument_list|(
name|fs
argument_list|,
operator|++
name|readOps
argument_list|,
name|writeOps
argument_list|,
name|largeReadOps
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|file1
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
expr_stmt|;
name|checkStatistics
argument_list|(
name|fs
argument_list|,
name|readOps
argument_list|,
operator|++
name|writeOps
argument_list|,
name|largeReadOps
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setTimes
argument_list|(
name|file1
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|checkStatistics
argument_list|(
name|fs
argument_list|,
name|readOps
argument_list|,
operator|++
name|writeOps
argument_list|,
name|largeReadOps
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|fs
operator|.
name|setOwner
argument_list|(
name|file1
argument_list|,
name|ugi
operator|.
name|getUserName
argument_list|()
argument_list|,
name|ugi
operator|.
name|getGroupNames
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|checkStatistics
argument_list|(
name|fs
argument_list|,
name|readOps
argument_list|,
operator|++
name|writeOps
argument_list|,
name|largeReadOps
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkStatistics
argument_list|(
name|fs
argument_list|,
name|readOps
argument_list|,
operator|++
name|writeOps
argument_list|,
name|largeReadOps
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Checks statistics. -1 indicates do not check for the operations */
DECL|method|checkStatistics (FileSystem fs, int readOps, int writeOps, int largeReadOps)
specifier|private
name|void
name|checkStatistics
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|int
name|readOps
parameter_list|,
name|int
name|writeOps
parameter_list|,
name|int
name|largeReadOps
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|readOps
argument_list|,
name|DFSTestUtil
operator|.
name|getStatistics
argument_list|(
name|fs
argument_list|)
operator|.
name|getReadOps
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|writeOps
argument_list|,
name|DFSTestUtil
operator|.
name|getStatistics
argument_list|(
name|fs
argument_list|)
operator|.
name|getWriteOps
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|largeReadOps
argument_list|,
name|DFSTestUtil
operator|.
name|getStatistics
argument_list|(
name|fs
argument_list|)
operator|.
name|getLargeReadOps
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFileChecksum ()
specifier|public
name|void
name|testFileChecksum
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|long
name|seed
init|=
name|RAN
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"seed="
operator|+
name|seed
argument_list|)
expr_stmt|;
name|RAN
operator|.
name|setSeed
argument_list|(
name|seed
argument_list|)
expr_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|getTestConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_WEBHDFS_ENABLED_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|2
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|FileSystem
name|hdfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|String
name|nnAddr
init|=
name|conf
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HTTP_ADDRESS_KEY
argument_list|)
decl_stmt|;
specifier|final
name|UserGroupInformation
name|current
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
specifier|final
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
name|current
operator|.
name|getShortUserName
argument_list|()
operator|+
literal|"x"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"user"
block|}
argument_list|)
decl_stmt|;
try|try
block|{
name|hdfs
operator|.
name|getFileChecksum
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test/TestNonExistingFile"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expecting FileNotFoundException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Not throwing the intended exception message"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"File does not exist: /test/TestNonExistingFile"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/test/TestExistingDir/"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|getFileChecksum
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expecting FileNotFoundException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Not throwing the intended exception message"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Path is not a file: /test/TestExistingDir"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//webhdfs
specifier|final
name|String
name|webhdfsuri
init|=
name|WebHdfsFileSystem
operator|.
name|SCHEME
operator|+
literal|"://"
operator|+
name|nnAddr
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"webhdfsuri="
operator|+
name|webhdfsuri
argument_list|)
expr_stmt|;
specifier|final
name|FileSystem
name|webhdfs
init|=
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|FileSystem
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|FileSystem
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|Path
argument_list|(
name|webhdfsuri
argument_list|)
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/filechecksum"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|block_size
init|=
literal|1024
decl_stmt|;
specifier|final
name|int
name|buffer_size
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IO_FILE_BUFFER_SIZE_KEY
argument_list|,
literal|4096
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BYTES_PER_CHECKSUM_KEY
argument_list|,
literal|512
argument_list|)
expr_stmt|;
comment|//try different number of blocks
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<
literal|5
condition|;
name|n
operator|++
control|)
block|{
comment|//generate random data
specifier|final
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|RAN
operator|.
name|nextInt
argument_list|(
name|block_size
operator|/
literal|2
operator|-
literal|1
argument_list|)
operator|+
name|n
operator|*
name|block_size
operator|+
literal|1
index|]
decl_stmt|;
name|RAN
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"data.length="
operator|+
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
comment|//write data to a file
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"foo"
operator|+
name|n
argument_list|)
decl_stmt|;
block|{
specifier|final
name|FSDataOutputStream
name|out
init|=
name|hdfs
operator|.
name|create
argument_list|(
name|foo
argument_list|,
literal|false
argument_list|,
name|buffer_size
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|,
name|block_size
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|//compute checksum
specifier|final
name|FileChecksum
name|hdfsfoocs
init|=
name|hdfs
operator|.
name|getFileChecksum
argument_list|(
name|foo
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"hdfsfoocs="
operator|+
name|hdfsfoocs
argument_list|)
expr_stmt|;
comment|//webhdfs
specifier|final
name|FileChecksum
name|webhdfsfoocs
init|=
name|webhdfs
operator|.
name|getFileChecksum
argument_list|(
name|foo
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"webhdfsfoocs="
operator|+
name|webhdfsfoocs
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|webhdfsqualified
init|=
operator|new
name|Path
argument_list|(
name|webhdfsuri
operator|+
name|dir
argument_list|,
literal|"foo"
operator|+
name|n
argument_list|)
decl_stmt|;
specifier|final
name|FileChecksum
name|webhdfs_qfoocs
init|=
name|webhdfs
operator|.
name|getFileChecksum
argument_list|(
name|webhdfsqualified
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"webhdfs_qfoocs="
operator|+
name|webhdfs_qfoocs
argument_list|)
expr_stmt|;
comment|//create a zero byte file
specifier|final
name|Path
name|zeroByteFile
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"zeroByteFile"
operator|+
name|n
argument_list|)
decl_stmt|;
block|{
specifier|final
name|FSDataOutputStream
name|out
init|=
name|hdfs
operator|.
name|create
argument_list|(
name|zeroByteFile
argument_list|,
literal|false
argument_list|,
name|buffer_size
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|,
name|block_size
argument_list|)
decl_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// verify the magic val for zero byte files
block|{
specifier|final
name|FileChecksum
name|zeroChecksum
init|=
name|hdfs
operator|.
name|getFileChecksum
argument_list|(
name|zeroByteFile
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|zeroChecksum
operator|.
name|toString
argument_list|()
argument_list|,
literal|"MD5-of-0MD5-of-0CRC32:70bc8f4b72a86921468bf8e8441dce51"
argument_list|)
expr_stmt|;
block|}
comment|//write another file
specifier|final
name|Path
name|bar
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"bar"
operator|+
name|n
argument_list|)
decl_stmt|;
block|{
specifier|final
name|FSDataOutputStream
name|out
init|=
name|hdfs
operator|.
name|create
argument_list|(
name|bar
argument_list|,
literal|false
argument_list|,
name|buffer_size
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|,
name|block_size
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|{
comment|//verify checksum
specifier|final
name|FileChecksum
name|barcs
init|=
name|hdfs
operator|.
name|getFileChecksum
argument_list|(
name|bar
argument_list|)
decl_stmt|;
specifier|final
name|int
name|barhashcode
init|=
name|barcs
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|hdfsfoocs
operator|.
name|hashCode
argument_list|()
argument_list|,
name|barhashcode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hdfsfoocs
argument_list|,
name|barcs
argument_list|)
expr_stmt|;
comment|//webhdfs
name|assertEquals
argument_list|(
name|webhdfsfoocs
operator|.
name|hashCode
argument_list|()
argument_list|,
name|barhashcode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|webhdfsfoocs
argument_list|,
name|barcs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|webhdfs_qfoocs
operator|.
name|hashCode
argument_list|()
argument_list|,
name|barhashcode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|webhdfs_qfoocs
argument_list|,
name|barcs
argument_list|)
expr_stmt|;
block|}
name|hdfs
operator|.
name|setPermission
argument_list|(
name|dir
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|{
comment|//test permission error on webhdfs
try|try
block|{
name|webhdfs
operator|.
name|getFileChecksum
argument_list|(
name|webhdfsqualified
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|FileSystem
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"GOOD: getting an exception"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
name|hdfs
operator|.
name|setPermission
argument_list|(
name|dir
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAllWithDualPort ()
specifier|public
name|void
name|testAllWithDualPort
parameter_list|()
throws|throws
name|Exception
block|{
name|dualPortTesting
operator|=
literal|true
expr_stmt|;
try|try
block|{
name|testFileSystemCloseAll
argument_list|()
expr_stmt|;
name|testDFSClose
argument_list|()
expr_stmt|;
name|testDFSClient
argument_list|()
expr_stmt|;
name|testFileChecksum
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|dualPortTesting
operator|=
literal|false
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testAllWithNoXmlDefaults ()
specifier|public
name|void
name|testAllWithNoXmlDefaults
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Do all the tests with a configuration that ignores the defaults in
comment|// the XML files.
name|noXmlDefaults
operator|=
literal|true
expr_stmt|;
try|try
block|{
name|testFileSystemCloseAll
argument_list|()
expr_stmt|;
name|testDFSClose
argument_list|()
expr_stmt|;
name|testDFSClient
argument_list|()
expr_stmt|;
name|testFileChecksum
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|noXmlDefaults
operator|=
literal|false
expr_stmt|;
block|}
block|}
comment|/**    * Tests the normal path of batching up BlockLocation[]s to be passed to a    * single    * {@link DistributedFileSystem#getFileBlockStorageLocations(java.util.List)}    * call    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testGetFileBlockStorageLocationsBatching ()
specifier|public
name|void
name|testGetFileBlockStorageLocationsBatching
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
name|getTestConfiguration
argument_list|()
decl_stmt|;
operator|(
operator|(
name|Log4JLogger
operator|)
name|ProtobufRpcEngine
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|TRACE
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Log4JLogger
operator|)
name|BlockStorageLocationUtil
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|TRACE
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Log4JLogger
operator|)
name|DFSClient
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|TRACE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HDFS_BLOCKS_METADATA_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|2
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|DistributedFileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// Create two files
specifier|final
name|Path
name|tmpFile1
init|=
operator|new
name|Path
argument_list|(
literal|"/tmpfile1.dat"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|tmpFile2
init|=
operator|new
name|Path
argument_list|(
literal|"/tmpfile2.dat"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|tmpFile1
argument_list|,
literal|1024
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|0xDEADDEADl
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|tmpFile2
argument_list|,
literal|1024
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|0xDEADDEADl
argument_list|)
expr_stmt|;
comment|// Make sure files are fully replicated before continuing
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
try|try
block|{
name|List
argument_list|<
name|BlockLocation
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|list
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|fs
operator|.
name|getFileBlockLocations
argument_list|(
name|tmpFile1
argument_list|,
literal|0
argument_list|,
literal|1024
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|fs
operator|.
name|getFileBlockLocations
argument_list|(
name|tmpFile2
argument_list|,
literal|0
argument_list|,
literal|1024
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|totalRepl
init|=
literal|0
decl_stmt|;
for|for
control|(
name|BlockLocation
name|loc
range|:
name|list
control|)
block|{
name|totalRepl
operator|+=
name|loc
operator|.
name|getHosts
argument_list|()
operator|.
name|length
expr_stmt|;
block|}
if|if
condition|(
name|totalRepl
operator|==
literal|4
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// swallow
block|}
return|return
literal|false
return|;
block|}
block|}
argument_list|,
literal|500
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
comment|// Get locations of blocks of both files and concat together
name|BlockLocation
index|[]
name|blockLocs1
init|=
name|fs
operator|.
name|getFileBlockLocations
argument_list|(
name|tmpFile1
argument_list|,
literal|0
argument_list|,
literal|1024
argument_list|)
decl_stmt|;
name|BlockLocation
index|[]
name|blockLocs2
init|=
name|fs
operator|.
name|getFileBlockLocations
argument_list|(
name|tmpFile2
argument_list|,
literal|0
argument_list|,
literal|1024
argument_list|)
decl_stmt|;
name|BlockLocation
index|[]
name|blockLocs
init|=
operator|(
name|BlockLocation
index|[]
operator|)
name|ArrayUtils
operator|.
name|addAll
argument_list|(
name|blockLocs1
argument_list|,
name|blockLocs2
argument_list|)
decl_stmt|;
comment|// Fetch VolumeBlockLocations in batch
name|BlockStorageLocation
index|[]
name|locs
init|=
name|fs
operator|.
name|getFileBlockStorageLocations
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|blockLocs
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
comment|// Print out the list of ids received for each block
for|for
control|(
name|BlockStorageLocation
name|l
range|:
name|locs
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|l
operator|.
name|getVolumeIds
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|VolumeId
name|id
init|=
name|l
operator|.
name|getVolumeIds
argument_list|()
index|[
name|i
index|]
decl_stmt|;
name|String
name|name
init|=
name|l
operator|.
name|getNames
argument_list|()
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Datanode "
operator|+
name|name
operator|+
literal|" has block "
operator|+
name|counter
operator|+
literal|" on volume id "
operator|+
name|id
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|counter
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Expected two HdfsBlockLocations for two 1-block files"
argument_list|,
literal|2
argument_list|,
name|locs
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|BlockStorageLocation
name|l
range|:
name|locs
control|)
block|{
name|assertEquals
argument_list|(
literal|"Expected two replicas for each block"
argument_list|,
literal|2
argument_list|,
name|l
operator|.
name|getVolumeIds
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|l
operator|.
name|getVolumeIds
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|VolumeId
name|id
init|=
name|l
operator|.
name|getVolumeIds
argument_list|()
index|[
name|i
index|]
decl_stmt|;
name|String
name|name
init|=
name|l
operator|.
name|getNames
argument_list|()
index|[
name|i
index|]
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expected block to be valid on datanode "
operator|+
name|name
argument_list|,
name|id
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Tests error paths for    * {@link DistributedFileSystem#getFileBlockStorageLocations(java.util.List)}    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testGetFileBlockStorageLocationsError ()
specifier|public
name|void
name|testGetFileBlockStorageLocationsError
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
name|getTestConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HDFS_BLOCKS_METADATA_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_FILE_BLOCK_STORAGE_LOCATIONS_TIMEOUT_MS
argument_list|,
literal|1500
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|IPC_CLIENT_CONNECT_MAX_RETRIES_KEY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|2
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|getDataNodes
argument_list|()
expr_stmt|;
specifier|final
name|DistributedFileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// Create a few files and add together their block locations into
comment|// a list.
specifier|final
name|Path
name|tmpFile1
init|=
operator|new
name|Path
argument_list|(
literal|"/errorfile1.dat"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|tmpFile2
init|=
operator|new
name|Path
argument_list|(
literal|"/errorfile2.dat"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|tmpFile1
argument_list|,
literal|1024
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|0xDEADDEADl
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|tmpFile2
argument_list|,
literal|1024
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|0xDEADDEADl
argument_list|)
expr_stmt|;
comment|// Make sure files are fully replicated before continuing
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
try|try
block|{
name|List
argument_list|<
name|BlockLocation
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|list
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|fs
operator|.
name|getFileBlockLocations
argument_list|(
name|tmpFile1
argument_list|,
literal|0
argument_list|,
literal|1024
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|fs
operator|.
name|getFileBlockLocations
argument_list|(
name|tmpFile2
argument_list|,
literal|0
argument_list|,
literal|1024
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|totalRepl
init|=
literal|0
decl_stmt|;
for|for
control|(
name|BlockLocation
name|loc
range|:
name|list
control|)
block|{
name|totalRepl
operator|+=
name|loc
operator|.
name|getHosts
argument_list|()
operator|.
name|length
expr_stmt|;
block|}
if|if
condition|(
name|totalRepl
operator|==
literal|4
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// swallow
block|}
return|return
literal|false
return|;
block|}
block|}
argument_list|,
literal|500
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
name|BlockLocation
index|[]
name|blockLocs1
init|=
name|fs
operator|.
name|getFileBlockLocations
argument_list|(
name|tmpFile1
argument_list|,
literal|0
argument_list|,
literal|1024
argument_list|)
decl_stmt|;
name|BlockLocation
index|[]
name|blockLocs2
init|=
name|fs
operator|.
name|getFileBlockLocations
argument_list|(
name|tmpFile2
argument_list|,
literal|0
argument_list|,
literal|1024
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|BlockLocation
argument_list|>
name|allLocs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|allLocs
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|blockLocs1
argument_list|)
argument_list|)
expr_stmt|;
name|allLocs
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|blockLocs2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Stall on the DN to test the timeout
name|DataNodeFaultInjector
name|injector
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|DataNodeFaultInjector
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|injector
argument_list|)
operator|.
name|getHdfsBlocksMetadata
argument_list|()
expr_stmt|;
name|DataNodeFaultInjector
operator|.
name|instance
operator|=
name|injector
expr_stmt|;
name|BlockStorageLocation
index|[]
name|locs
init|=
name|fs
operator|.
name|getFileBlockStorageLocations
argument_list|(
name|allLocs
argument_list|)
decl_stmt|;
for|for
control|(
name|BlockStorageLocation
name|loc
range|:
name|locs
control|)
block|{
name|assertEquals
argument_list|(
literal|"Found more than 0 cached hosts although RPCs supposedly timed out"
argument_list|,
literal|0
argument_list|,
name|loc
operator|.
name|getCachedHosts
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|// Restore a default injector
name|DataNodeFaultInjector
operator|.
name|instance
operator|=
operator|new
name|DataNodeFaultInjector
argument_list|()
expr_stmt|;
comment|// Stop a datanode to simulate a failure.
name|DataNodeProperties
name|stoppedNode
init|=
name|cluster
operator|.
name|stopDataNode
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// Fetch VolumeBlockLocations
name|locs
operator|=
name|fs
operator|.
name|getFileBlockStorageLocations
argument_list|(
name|allLocs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected two HdfsBlockLocation for two 1-block files"
argument_list|,
literal|2
argument_list|,
name|locs
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|BlockStorageLocation
name|l
range|:
name|locs
control|)
block|{
name|assertEquals
argument_list|(
literal|"Expected two replicas for each block"
argument_list|,
literal|2
argument_list|,
name|l
operator|.
name|getHosts
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected two VolumeIDs for each block"
argument_list|,
literal|2
argument_list|,
name|l
operator|.
name|getVolumeIds
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected one valid and one invalid volume"
argument_list|,
operator|(
name|l
operator|.
name|getVolumeIds
argument_list|()
index|[
literal|0
index|]
operator|==
literal|null
operator|)
operator|^
operator|(
name|l
operator|.
name|getVolumeIds
argument_list|()
index|[
literal|1
index|]
operator|==
literal|null
operator|)
argument_list|)
expr_stmt|;
block|}
comment|// Start the datanode again, and remove one of the blocks.
comment|// This is a different type of failure where the block itself
comment|// is invalid.
name|cluster
operator|.
name|restartDataNode
argument_list|(
name|stoppedNode
argument_list|,
literal|true
comment|/*keepPort*/
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|tmpFile2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|HATestUtil
operator|.
name|waitForNNToIssueDeletions
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|triggerHeartbeats
argument_list|()
expr_stmt|;
name|HATestUtil
operator|.
name|waitForDNDeletions
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
name|locs
operator|=
name|fs
operator|.
name|getFileBlockStorageLocations
argument_list|(
name|allLocs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected two HdfsBlockLocations for two 1-block files"
argument_list|,
literal|2
argument_list|,
name|locs
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|locs
index|[
literal|0
index|]
operator|.
name|getVolumeIds
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|locs
index|[
literal|0
index|]
operator|.
name|getVolumeIds
argument_list|()
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|locs
index|[
literal|1
index|]
operator|.
name|getVolumeIds
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|locs
index|[
literal|1
index|]
operator|.
name|getVolumeIds
argument_list|()
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testCreateWithCustomChecksum ()
specifier|public
name|void
name|testCreateWithCustomChecksum
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|getTestConfiguration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
name|Path
name|testBasePath
init|=
operator|new
name|Path
argument_list|(
literal|"/test/csum"
argument_list|)
decl_stmt|;
comment|// create args
name|Path
name|path1
init|=
operator|new
name|Path
argument_list|(
name|testBasePath
argument_list|,
literal|"file_wtih_crc1"
argument_list|)
decl_stmt|;
name|Path
name|path2
init|=
operator|new
name|Path
argument_list|(
name|testBasePath
argument_list|,
literal|"file_with_crc2"
argument_list|)
decl_stmt|;
name|ChecksumOpt
name|opt1
init|=
operator|new
name|ChecksumOpt
argument_list|(
name|DataChecksum
operator|.
name|Type
operator|.
name|CRC32C
argument_list|,
literal|512
argument_list|)
decl_stmt|;
name|ChecksumOpt
name|opt2
init|=
operator|new
name|ChecksumOpt
argument_list|(
name|DataChecksum
operator|.
name|Type
operator|.
name|CRC32
argument_list|,
literal|512
argument_list|)
decl_stmt|;
comment|// common args
name|FsPermission
name|perm
init|=
name|FsPermission
operator|.
name|getDefault
argument_list|()
operator|.
name|applyUMask
argument_list|(
name|FsPermission
operator|.
name|getUMask
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|EnumSet
argument_list|<
name|CreateFlag
argument_list|>
name|flags
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateFlag
operator|.
name|OVERWRITE
argument_list|,
name|CreateFlag
operator|.
name|CREATE
argument_list|)
decl_stmt|;
name|short
name|repl
init|=
literal|1
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|FileSystem
name|dfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|testBasePath
argument_list|)
expr_stmt|;
comment|// create two files with different checksum types
name|FSDataOutputStream
name|out1
init|=
name|dfs
operator|.
name|create
argument_list|(
name|path1
argument_list|,
name|perm
argument_list|,
name|flags
argument_list|,
literal|4096
argument_list|,
name|repl
argument_list|,
literal|131072L
argument_list|,
literal|null
argument_list|,
name|opt1
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|out2
init|=
name|dfs
operator|.
name|create
argument_list|(
name|path2
argument_list|,
name|perm
argument_list|,
name|flags
argument_list|,
literal|4096
argument_list|,
name|repl
argument_list|,
literal|131072L
argument_list|,
literal|null
argument_list|,
name|opt2
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1024
condition|;
name|i
operator|++
control|)
block|{
name|out1
operator|.
name|write
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|out2
operator|.
name|write
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|out1
operator|.
name|close
argument_list|()
expr_stmt|;
name|out2
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// the two checksums must be different.
name|MD5MD5CRC32FileChecksum
name|sum1
init|=
operator|(
name|MD5MD5CRC32FileChecksum
operator|)
name|dfs
operator|.
name|getFileChecksum
argument_list|(
name|path1
argument_list|)
decl_stmt|;
name|MD5MD5CRC32FileChecksum
name|sum2
init|=
operator|(
name|MD5MD5CRC32FileChecksum
operator|)
name|dfs
operator|.
name|getFileChecksum
argument_list|(
name|path2
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|sum1
operator|.
name|equals
argument_list|(
name|sum2
argument_list|)
argument_list|)
expr_stmt|;
comment|// check the individual params
name|assertEquals
argument_list|(
name|DataChecksum
operator|.
name|Type
operator|.
name|CRC32C
argument_list|,
name|sum1
operator|.
name|getCrcType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DataChecksum
operator|.
name|Type
operator|.
name|CRC32
argument_list|,
name|sum2
operator|.
name|getCrcType
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|delete
argument_list|(
name|testBasePath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testFileCloseStatus ()
specifier|public
name|void
name|testFileCloseStatus
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|DistributedFileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
try|try
block|{
comment|// create a new file.
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
literal|"/simpleFlush.dat"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|output
init|=
name|fs
operator|.
name|create
argument_list|(
name|file
argument_list|)
decl_stmt|;
comment|// write to file
name|output
operator|.
name|writeBytes
argument_list|(
literal|"Some test data"
argument_list|)
expr_stmt|;
name|output
operator|.
name|flush
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"File status should be open"
argument_list|,
name|fs
operator|.
name|isFileClosed
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"File status should be closed"
argument_list|,
name|fs
operator|.
name|isFileClosed
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testListFiles ()
specifier|public
name|void
name|testListFiles
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|DistributedFileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|relative
init|=
operator|new
name|Path
argument_list|(
literal|"relative"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|relative
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|List
argument_list|<
name|LocatedFileStatus
argument_list|>
name|retVal
init|=
operator|new
name|ArrayList
argument_list|<
name|LocatedFileStatus
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|RemoteIterator
argument_list|<
name|LocatedFileStatus
argument_list|>
name|iter
init|=
name|fs
operator|.
name|listFiles
argument_list|(
name|relative
argument_list|,
literal|true
argument_list|)
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|retVal
operator|.
name|add
argument_list|(
name|iter
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"retVal = "
operator|+
name|retVal
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

