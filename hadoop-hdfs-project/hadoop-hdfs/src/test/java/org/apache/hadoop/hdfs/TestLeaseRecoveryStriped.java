begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ErasureCodingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|StripedBlockUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|internal
operator|.
name|util
operator|.
name|reflection
operator|.
name|Whitebox
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadLocalRandom
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_class
DECL|class|TestLeaseRecoveryStriped
specifier|public
class|class
name|TestLeaseRecoveryStriped
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestLeaseRecoveryStriped
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|ecPolicy
specifier|private
specifier|static
specifier|final
name|ErasureCodingPolicy
name|ecPolicy
init|=
name|StripedFileTestUtil
operator|.
name|TEST_EC_POLICY
decl_stmt|;
DECL|field|NUM_DATA_BLOCKS
specifier|private
specifier|static
specifier|final
name|int
name|NUM_DATA_BLOCKS
init|=
name|StripedFileTestUtil
operator|.
name|NUM_DATA_BLOCKS
decl_stmt|;
DECL|field|NUM_PARITY_BLOCKS
specifier|private
specifier|static
specifier|final
name|int
name|NUM_PARITY_BLOCKS
init|=
name|StripedFileTestUtil
operator|.
name|NUM_PARITY_BLOCKS
decl_stmt|;
DECL|field|CELL_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|CELL_SIZE
init|=
name|StripedFileTestUtil
operator|.
name|BLOCK_STRIPED_CELL_SIZE
decl_stmt|;
DECL|field|STRIPE_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|STRIPE_SIZE
init|=
name|NUM_DATA_BLOCKS
operator|*
name|CELL_SIZE
decl_stmt|;
DECL|field|STRIPES_PER_BLOCK
specifier|private
specifier|static
specifier|final
name|int
name|STRIPES_PER_BLOCK
init|=
literal|15
decl_stmt|;
DECL|field|BLOCK_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|BLOCK_SIZE
init|=
name|CELL_SIZE
operator|*
name|STRIPES_PER_BLOCK
decl_stmt|;
DECL|field|BLOCK_GROUP_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|BLOCK_GROUP_SIZE
init|=
name|BLOCK_SIZE
operator|*
name|NUM_DATA_BLOCKS
decl_stmt|;
DECL|field|bytesPerChecksum
specifier|private
specifier|static
specifier|final
name|int
name|bytesPerChecksum
init|=
literal|512
decl_stmt|;
static|static
block|{
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|DataNode
operator|.
name|LOG
argument_list|,
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
name|StripedFileTestUtil
operator|.
name|stripesPerBlock
operator|=
name|STRIPES_PER_BLOCK
expr_stmt|;
name|StripedFileTestUtil
operator|.
name|blockSize
operator|=
name|BLOCK_SIZE
expr_stmt|;
name|StripedFileTestUtil
operator|.
name|BLOCK_GROUP_SIZE
operator|=
name|BLOCK_GROUP_SIZE
expr_stmt|;
block|}
DECL|field|fakeUsername
specifier|static
specifier|private
specifier|final
name|String
name|fakeUsername
init|=
literal|"fakeUser1"
decl_stmt|;
DECL|field|fakeGroup
specifier|static
specifier|private
specifier|final
name|String
name|fakeGroup
init|=
literal|"supergroup"
decl_stmt|;
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|dfs
specifier|private
name|DistributedFileSystem
name|dfs
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|dir
specifier|private
specifier|final
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|p
specifier|final
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"testfile"
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|DFS_CLIENT_SOCKET_TIMEOUT_KEY
argument_list|,
literal|6000L
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REPLICATION_CONSIDERLOAD_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REPLICATION_MAX_STREAMS_KEY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numDNs
init|=
name|NUM_DATA_BLOCKS
operator|+
name|NUM_PARITY_BLOCKS
decl_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDNs
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|dfs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|setErasureCodingPolicy
argument_list|(
name|dir
argument_list|,
name|ecPolicy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getBlockLengthsSuite ()
specifier|private
specifier|static
name|int
index|[]
index|[]
index|[]
name|getBlockLengthsSuite
parameter_list|()
block|{
specifier|final
name|int
name|groups
init|=
literal|4
decl_stmt|;
specifier|final
name|int
name|minNumCell
init|=
literal|3
decl_stmt|;
specifier|final
name|int
name|maxNumCell
init|=
literal|11
decl_stmt|;
specifier|final
name|int
name|minNumDelta
init|=
operator|-
literal|4
decl_stmt|;
specifier|final
name|int
name|maxNumDelta
init|=
literal|2
decl_stmt|;
name|int
name|delta
init|=
literal|0
decl_stmt|;
name|int
index|[]
index|[]
index|[]
name|blkLenSuite
init|=
operator|new
name|int
index|[
name|groups
index|]
index|[]
index|[]
decl_stmt|;
name|Random
name|random
init|=
name|ThreadLocalRandom
operator|.
name|current
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|blkLenSuite
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
name|blkLenSuite
operator|.
name|length
operator|-
literal|1
condition|)
block|{
name|delta
operator|=
name|bytesPerChecksum
expr_stmt|;
block|}
name|int
index|[]
index|[]
name|suite
init|=
operator|new
name|int
index|[
literal|2
index|]
index|[]
decl_stmt|;
name|int
index|[]
name|lens
init|=
operator|new
name|int
index|[
name|NUM_DATA_BLOCKS
operator|+
name|NUM_PARITY_BLOCKS
index|]
decl_stmt|;
name|long
index|[]
name|lenInLong
init|=
operator|new
name|long
index|[
name|lens
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|lens
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|int
name|numCell
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|maxNumCell
operator|-
name|minNumCell
operator|+
literal|1
argument_list|)
operator|+
name|minNumCell
decl_stmt|;
name|int
name|numDelta
init|=
name|j
operator|<
name|NUM_DATA_BLOCKS
condition|?
name|random
operator|.
name|nextInt
argument_list|(
name|maxNumDelta
operator|-
name|minNumDelta
operator|+
literal|1
argument_list|)
operator|+
name|minNumDelta
else|:
literal|0
decl_stmt|;
name|lens
index|[
name|j
index|]
operator|=
name|CELL_SIZE
operator|*
name|numCell
operator|+
name|delta
operator|*
name|numDelta
expr_stmt|;
name|lenInLong
index|[
name|j
index|]
operator|=
name|lens
index|[
name|j
index|]
expr_stmt|;
block|}
name|suite
index|[
literal|0
index|]
operator|=
name|lens
expr_stmt|;
name|suite
index|[
literal|1
index|]
operator|=
operator|new
name|int
index|[]
block|{
operator|(
name|int
operator|)
name|StripedBlockUtil
operator|.
name|getSafeLength
argument_list|(
name|ecPolicy
argument_list|,
name|lenInLong
argument_list|)
block|}
expr_stmt|;
name|blkLenSuite
index|[
name|i
index|]
operator|=
name|suite
expr_stmt|;
block|}
return|return
name|blkLenSuite
return|;
block|}
DECL|field|BLOCK_LENGTHS_SUITE
specifier|private
specifier|static
specifier|final
name|int
index|[]
index|[]
index|[]
name|BLOCK_LENGTHS_SUITE
init|=
name|getBlockLengthsSuite
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|testLeaseRecovery ()
specifier|public
name|void
name|testLeaseRecovery
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BLOCK_LENGTHS_SUITE
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
index|[]
name|blockLengths
init|=
name|BLOCK_LENGTHS_SUITE
index|[
name|i
index|]
index|[
literal|0
index|]
decl_stmt|;
name|int
name|safeLength
init|=
name|BLOCK_LENGTHS_SUITE
index|[
name|i
index|]
index|[
literal|1
index|]
index|[
literal|0
index|]
decl_stmt|;
try|try
block|{
name|runTest
argument_list|(
name|blockLengths
argument_list|,
name|safeLength
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"failed testCase at i="
operator|+
name|i
operator|+
literal|", blockLengths="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|blockLengths
argument_list|)
operator|+
literal|"\n"
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|runTest (int[] blockLengths, int safeLength)
specifier|private
name|void
name|runTest
parameter_list|(
name|int
index|[]
name|blockLengths
parameter_list|,
name|int
name|safeLength
parameter_list|)
throws|throws
name|Exception
block|{
name|writePartialBlocks
argument_list|(
name|blockLengths
argument_list|)
expr_stmt|;
name|recoverLease
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|oldGS
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|oldGS
operator|.
name|add
argument_list|(
literal|1001L
argument_list|)
expr_stmt|;
name|StripedFileTestUtil
operator|.
name|checkData
argument_list|(
name|dfs
argument_list|,
name|p
argument_list|,
name|safeLength
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|DatanodeInfo
argument_list|>
argument_list|()
argument_list|,
name|oldGS
argument_list|)
expr_stmt|;
comment|// After recovery, storages are reported by primary DN. we should verify
comment|// storages reported by blockReport.
name|cluster
operator|.
name|restartNameNode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|StripedFileTestUtil
operator|.
name|checkData
argument_list|(
name|dfs
argument_list|,
name|p
argument_list|,
name|safeLength
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|DatanodeInfo
argument_list|>
argument_list|()
argument_list|,
name|oldGS
argument_list|)
expr_stmt|;
block|}
DECL|method|writePartialBlocks (int[] blockLengths)
specifier|private
name|void
name|writePartialBlocks
parameter_list|(
name|int
index|[]
name|blockLengths
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|FSDataOutputStream
name|out
init|=
name|dfs
operator|.
name|create
argument_list|(
name|p
argument_list|)
decl_stmt|;
specifier|final
name|DFSStripedOutputStream
name|stripedOut
init|=
operator|(
name|DFSStripedOutputStream
operator|)
name|out
operator|.
name|getWrappedStream
argument_list|()
decl_stmt|;
name|int
name|length
init|=
operator|(
name|STRIPES_PER_BLOCK
operator|-
literal|1
operator|)
operator|*
name|STRIPE_SIZE
decl_stmt|;
name|int
index|[]
name|posToKill
init|=
name|getPosToKill
argument_list|(
name|blockLengths
argument_list|)
decl_stmt|;
name|int
name|checkingPos
init|=
name|nextCheckingPos
argument_list|(
name|posToKill
argument_list|,
literal|0
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|pos
init|=
literal|0
init|;
name|pos
operator|<
name|length
condition|;
name|pos
operator|++
control|)
block|{
name|out
operator|.
name|write
argument_list|(
name|StripedFileTestUtil
operator|.
name|getByte
argument_list|(
name|pos
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|pos
operator|==
name|checkingPos
condition|)
block|{
for|for
control|(
name|int
name|index
range|:
name|getIndexToStop
argument_list|(
name|posToKill
argument_list|,
name|pos
argument_list|)
control|)
block|{
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|stripedOut
operator|.
name|enqueueAllCurrentPackets
argument_list|()
expr_stmt|;
name|StripedDataStreamer
name|s
init|=
name|stripedOut
operator|.
name|getStripedDataStreamer
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|waitStreamerAllAcked
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|waitByteSent
argument_list|(
name|s
argument_list|,
name|blockLengths
index|[
name|index
index|]
argument_list|)
expr_stmt|;
name|stopBlockStream
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|checkingPos
operator|=
name|nextCheckingPos
argument_list|(
name|posToKill
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|DFSTestUtil
operator|.
name|abortStream
argument_list|(
name|stripedOut
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|nextCheckingPos (int[] posToKill, int curPos)
specifier|private
name|int
name|nextCheckingPos
parameter_list|(
name|int
index|[]
name|posToKill
parameter_list|,
name|int
name|curPos
parameter_list|)
block|{
name|int
name|checkingPos
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|posToKill
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|posToKill
index|[
name|i
index|]
operator|>
name|curPos
condition|)
block|{
name|checkingPos
operator|=
name|Math
operator|.
name|min
argument_list|(
name|checkingPos
argument_list|,
name|posToKill
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|checkingPos
return|;
block|}
DECL|method|getPosToKill (int[] blockLengths)
specifier|private
name|int
index|[]
name|getPosToKill
parameter_list|(
name|int
index|[]
name|blockLengths
parameter_list|)
block|{
name|int
index|[]
name|posToKill
init|=
operator|new
name|int
index|[
name|NUM_DATA_BLOCKS
operator|+
name|NUM_PARITY_BLOCKS
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_DATA_BLOCKS
condition|;
name|i
operator|++
control|)
block|{
name|int
name|numStripe
init|=
operator|(
name|blockLengths
index|[
name|i
index|]
operator|-
literal|1
operator|)
operator|/
name|CELL_SIZE
decl_stmt|;
name|posToKill
index|[
name|i
index|]
operator|=
name|numStripe
operator|*
name|STRIPE_SIZE
operator|+
name|i
operator|*
name|CELL_SIZE
operator|+
name|blockLengths
index|[
name|i
index|]
operator|%
name|CELL_SIZE
expr_stmt|;
if|if
condition|(
name|blockLengths
index|[
name|i
index|]
operator|%
name|CELL_SIZE
operator|==
literal|0
condition|)
block|{
name|posToKill
index|[
name|i
index|]
operator|+=
name|CELL_SIZE
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
name|NUM_DATA_BLOCKS
init|;
name|i
operator|<
name|NUM_DATA_BLOCKS
operator|+
name|NUM_PARITY_BLOCKS
condition|;
name|i
operator|++
control|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|blockLengths
index|[
name|i
index|]
operator|%
name|CELL_SIZE
operator|==
literal|0
argument_list|)
expr_stmt|;
name|int
name|numStripe
init|=
operator|(
name|blockLengths
index|[
name|i
index|]
operator|)
operator|/
name|CELL_SIZE
decl_stmt|;
name|posToKill
index|[
name|i
index|]
operator|=
name|numStripe
operator|*
name|STRIPE_SIZE
expr_stmt|;
block|}
return|return
name|posToKill
return|;
block|}
DECL|method|getIndexToStop (int[] posToKill, int pos)
specifier|private
name|List
argument_list|<
name|Integer
argument_list|>
name|getIndexToStop
parameter_list|(
name|int
index|[]
name|posToKill
parameter_list|,
name|int
name|pos
parameter_list|)
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|indices
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|posToKill
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|pos
operator|==
name|posToKill
index|[
name|i
index|]
condition|)
block|{
name|indices
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|indices
return|;
block|}
DECL|method|waitByteSent (final StripedDataStreamer s, final long byteSent)
specifier|private
name|void
name|waitByteSent
parameter_list|(
specifier|final
name|StripedDataStreamer
name|s
parameter_list|,
specifier|final
name|long
name|byteSent
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
return|return
name|s
operator|.
name|bytesSent
operator|>=
name|byteSent
return|;
block|}
block|}
argument_list|,
literal|100
argument_list|,
literal|3000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Timeout waiting for streamer "
operator|+
name|s
operator|+
literal|". Sent="
operator|+
name|s
operator|.
name|bytesSent
operator|+
literal|", expected="
operator|+
name|byteSent
argument_list|)
throw|;
block|}
block|}
DECL|method|stopBlockStream (StripedDataStreamer s)
specifier|private
name|void
name|stopBlockStream
parameter_list|(
name|StripedDataStreamer
name|s
parameter_list|)
throws|throws
name|Exception
block|{
name|IOUtils
operator|.
name|NullOutputStream
name|nullOutputStream
init|=
operator|new
name|IOUtils
operator|.
name|NullOutputStream
argument_list|()
decl_stmt|;
name|Whitebox
operator|.
name|setInternalState
argument_list|(
name|s
argument_list|,
literal|"blockStream"
argument_list|,
operator|new
name|DataOutputStream
argument_list|(
name|nullOutputStream
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|recoverLease ()
specifier|private
name|void
name|recoverLease
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|DistributedFileSystem
name|dfs2
init|=
operator|(
name|DistributedFileSystem
operator|)
name|getFSAsAnotherUser
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
try|try
block|{
return|return
name|dfs2
operator|.
name|recoverLease
argument_list|(
name|p
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
argument_list|,
literal|5000
argument_list|,
literal|24000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Timeout waiting for recoverLease()"
argument_list|)
throw|;
block|}
block|}
DECL|method|getFSAsAnotherUser (final Configuration c)
specifier|private
name|FileSystem
name|getFSAsAnotherUser
parameter_list|(
specifier|final
name|Configuration
name|c
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|FileSystem
operator|.
name|get
argument_list|(
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|c
argument_list|)
argument_list|,
name|c
argument_list|,
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
name|fakeUsername
argument_list|,
operator|new
name|String
index|[]
block|{
name|fakeGroup
block|}
argument_list|)
operator|.
name|getUserName
argument_list|()
argument_list|)
return|;
block|}
DECL|method|waitStreamerAllAcked (DataStreamer s)
specifier|public
specifier|static
name|void
name|waitStreamerAllAcked
parameter_list|(
name|DataStreamer
name|s
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|toWaitFor
init|=
name|s
operator|.
name|getLastQueuedSeqno
argument_list|()
decl_stmt|;
name|s
operator|.
name|waitForAckedSeqno
argument_list|(
name|toWaitFor
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

