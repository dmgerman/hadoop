begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.metrics2.sink
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|sink
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
operator|.
name|IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SASL_KEY
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_ACCESS_TOKEN_ENABLE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_HTTPS_KEYSTORE_RESOURCE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_HTTPS_ADDRESS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_KERBEROS_PRINCIPAL_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_KEYTAB_FILE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_HTTP_POLICY_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HTTPS_ADDRESS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_KERBEROS_PRINCIPAL_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_KEYTAB_FILE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_SERVER_HTTPS_KEYSTORE_RESOURCE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_WEB_AUTHENTICATION_KERBEROS_PRINCIPAL_KEY
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_DATA_TRANSFER_PROTECTION_KEY
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|http
operator|.
name|HttpConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|minikdc
operator|.
name|MiniKdc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|NullGroupsMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|ssl
operator|.
name|KeyStoreTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Test the {@link RollingFileSystemSink} class in the context of HDFS with  * Kerberos enabled.  */
end_comment

begin_class
DECL|class|TestRollingFileSystemSinkWithSecureHdfs
specifier|public
class|class
name|TestRollingFileSystemSinkWithSecureHdfs
extends|extends
name|RollingFileSystemSinkTestBase
block|{
DECL|field|NUM_DATANODES
specifier|private
specifier|static
specifier|final
name|int
name|NUM_DATANODES
init|=
literal|4
decl_stmt|;
DECL|field|kdc
specifier|private
specifier|static
name|MiniKdc
name|kdc
decl_stmt|;
DECL|field|sinkPrincipal
specifier|private
specifier|static
name|String
name|sinkPrincipal
decl_stmt|;
DECL|field|sinkKeytab
specifier|private
specifier|static
name|String
name|sinkKeytab
decl_stmt|;
DECL|field|hdfsPrincipal
specifier|private
specifier|static
name|String
name|hdfsPrincipal
decl_stmt|;
DECL|field|hdfsKeytab
specifier|private
specifier|static
name|String
name|hdfsKeytab
decl_stmt|;
DECL|field|spnegoPrincipal
specifier|private
specifier|static
name|String
name|spnegoPrincipal
decl_stmt|;
comment|/**    * Do a basic write test against an HDFS cluster with Kerberos enabled. We    * assume that if a basic write succeeds, more complex operations will also    * succeed.    *    * @throws Exception thrown if things break    */
annotation|@
name|Test
DECL|method|testWithSecureHDFS ()
specifier|public
name|void
name|testWithSecureHDFS
parameter_list|()
throws|throws
name|Exception
block|{
name|RollingFileSystemSink
operator|.
name|flushQuickly
operator|=
literal|false
expr_stmt|;
name|RollingFileSystemSink
operator|.
name|hasFlushed
operator|=
literal|false
expr_stmt|;
name|initKdc
argument_list|()
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|HdfsConfiguration
name|conf
init|=
name|createSecureConfig
argument_list|(
literal|"authentication,privacy"
argument_list|)
decl_stmt|;
name|RollingFileSystemSink
operator|.
name|suppliedConf
operator|=
name|conf
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|NUM_DATANODES
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|UserGroupInformation
name|sink
init|=
name|createDirectoriesSecurely
argument_list|(
name|cluster
argument_list|)
decl_stmt|;
specifier|final
name|String
name|path
init|=
literal|"hdfs://"
operator|+
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getHostAndPort
argument_list|()
operator|+
literal|"/tmp/test"
decl_stmt|;
specifier|final
name|MetricsSystem
name|ms
init|=
name|initMetricsSystem
argument_list|(
name|path
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertMetricsContents
argument_list|(
name|sink
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|doWriteTest
argument_list|(
name|ms
argument_list|,
name|path
argument_list|,
literal|1
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|shutdownKdc
argument_list|()
expr_stmt|;
comment|// Restore non-secure conf
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|RollingFileSystemSink
operator|.
name|suppliedConf
operator|=
literal|null
expr_stmt|;
name|RollingFileSystemSink
operator|.
name|suppliedFilesystem
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * Do a basic write test against an HDFS cluster with Kerberos enabled but    * without the principal and keytab properties set.    *    * @throws Exception thrown if things break    */
annotation|@
name|Test
DECL|method|testMissingPropertiesWithSecureHDFS ()
specifier|public
name|void
name|testMissingPropertiesWithSecureHDFS
parameter_list|()
throws|throws
name|Exception
block|{
name|RollingFileSystemSink
operator|.
name|flushQuickly
operator|=
literal|false
expr_stmt|;
name|RollingFileSystemSink
operator|.
name|hasFlushed
operator|=
literal|false
expr_stmt|;
name|initKdc
argument_list|()
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|HdfsConfiguration
name|conf
init|=
name|createSecureConfig
argument_list|(
literal|"authentication,privacy"
argument_list|)
decl_stmt|;
name|RollingFileSystemSink
operator|.
name|suppliedConf
operator|=
name|conf
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|NUM_DATANODES
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
specifier|final
name|String
name|path
init|=
literal|"hdfs://"
operator|+
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getHostAndPort
argument_list|()
operator|+
literal|"/tmp/test"
decl_stmt|;
name|createDirectoriesSecurely
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
name|initMetricsSystem
argument_list|(
name|path
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"No exception was generated initializing the sink against a "
operator|+
literal|"secure cluster even though the principal and keytab properties "
operator|+
literal|"were missing"
argument_list|,
name|MockSink
operator|.
name|errored
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|shutdownKdc
argument_list|()
expr_stmt|;
comment|// Restore non-secure conf
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|RollingFileSystemSink
operator|.
name|suppliedConf
operator|=
literal|null
expr_stmt|;
name|RollingFileSystemSink
operator|.
name|suppliedFilesystem
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * Create the /tmp directory as<i>hdfs</i> and /tmp/test as<i>sink</i> and    * return the UGI for<i>sink</i>.    *    * @param cluster the mini-cluster    * @return the UGI for<i>sink</i>    * @throws IOException thrown if login or directory creation fails    * @throws InterruptedException thrown if interrupted while creating a    * file system handle    */
DECL|method|createDirectoriesSecurely (final MiniDFSCluster cluster)
specifier|protected
name|UserGroupInformation
name|createDirectoriesSecurely
parameter_list|(
specifier|final
name|MiniDFSCluster
name|cluster
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Path
name|tmp
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp"
argument_list|)
decl_stmt|;
name|Path
name|test
init|=
operator|new
name|Path
argument_list|(
name|tmp
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|hdfs
init|=
name|UserGroupInformation
operator|.
name|loginUserFromKeytabAndReturnUGI
argument_list|(
name|hdfsPrincipal
argument_list|,
name|hdfsKeytab
argument_list|)
decl_stmt|;
name|FileSystem
name|fsForSuperUser
init|=
name|hdfs
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|FileSystem
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|FileSystem
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|cluster
operator|.
name|getFileSystem
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|fsForSuperUser
operator|.
name|mkdirs
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
name|fsForSuperUser
operator|.
name|setPermission
argument_list|(
name|tmp
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|sink
init|=
name|UserGroupInformation
operator|.
name|loginUserFromKeytabAndReturnUGI
argument_list|(
name|sinkPrincipal
argument_list|,
name|sinkKeytab
argument_list|)
decl_stmt|;
name|FileSystem
name|fsForSink
init|=
name|sink
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|FileSystem
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|FileSystem
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|cluster
operator|.
name|getFileSystem
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|fsForSink
operator|.
name|mkdirs
argument_list|(
name|test
argument_list|)
expr_stmt|;
name|RollingFileSystemSink
operator|.
name|suppliedFilesystem
operator|=
name|fsForSink
expr_stmt|;
return|return
name|sink
return|;
block|}
comment|/**    * Setup the KDC for testing a secure HDFS cluster    *    * @throws Exception thrown if the KDC setup fails    */
DECL|method|initKdc ()
specifier|public
specifier|static
name|void
name|initKdc
parameter_list|()
throws|throws
name|Exception
block|{
name|Properties
name|kdcConf
init|=
name|MiniKdc
operator|.
name|createConf
argument_list|()
decl_stmt|;
name|kdc
operator|=
operator|new
name|MiniKdc
argument_list|(
name|kdcConf
argument_list|,
name|methodDir
argument_list|)
expr_stmt|;
name|kdc
operator|.
name|start
argument_list|()
expr_stmt|;
name|File
name|sinkKeytabFile
init|=
operator|new
name|File
argument_list|(
name|methodDir
argument_list|,
literal|"sink.keytab"
argument_list|)
decl_stmt|;
name|sinkKeytab
operator|=
name|sinkKeytabFile
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
name|kdc
operator|.
name|createPrincipal
argument_list|(
name|sinkKeytabFile
argument_list|,
literal|"sink/localhost"
argument_list|)
expr_stmt|;
name|sinkPrincipal
operator|=
literal|"sink/localhost@"
operator|+
name|kdc
operator|.
name|getRealm
argument_list|()
expr_stmt|;
name|File
name|hdfsKeytabFile
init|=
operator|new
name|File
argument_list|(
name|methodDir
argument_list|,
literal|"hdfs.keytab"
argument_list|)
decl_stmt|;
name|hdfsKeytab
operator|=
name|hdfsKeytabFile
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
name|kdc
operator|.
name|createPrincipal
argument_list|(
name|hdfsKeytabFile
argument_list|,
literal|"hdfs/localhost"
argument_list|,
literal|"HTTP/localhost"
argument_list|)
expr_stmt|;
name|hdfsPrincipal
operator|=
literal|"hdfs/localhost@"
operator|+
name|kdc
operator|.
name|getRealm
argument_list|()
expr_stmt|;
name|spnegoPrincipal
operator|=
literal|"HTTP/localhost@"
operator|+
name|kdc
operator|.
name|getRealm
argument_list|()
expr_stmt|;
block|}
comment|/**    * Stop the mini-KDC.    */
DECL|method|shutdownKdc ()
specifier|public
specifier|static
name|void
name|shutdownKdc
parameter_list|()
block|{
if|if
condition|(
name|kdc
operator|!=
literal|null
condition|)
block|{
name|kdc
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Creates a configuration for starting a secure cluster.    *    * @param dataTransferProtection supported QOPs    * @return configuration for starting a secure cluster    * @throws Exception if there is any failure    */
DECL|method|createSecureConfig ( String dataTransferProtection)
specifier|protected
name|HdfsConfiguration
name|createSecureConfig
parameter_list|(
name|String
name|dataTransferProtection
parameter_list|)
throws|throws
name|Exception
block|{
name|HdfsConfiguration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|SecurityUtil
operator|.
name|setAuthenticationMethod
argument_list|(
name|UserGroupInformation
operator|.
name|AuthenticationMethod
operator|.
name|KERBEROS
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMENODE_KERBEROS_PRINCIPAL_KEY
argument_list|,
name|hdfsPrincipal
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMENODE_KEYTAB_FILE_KEY
argument_list|,
name|hdfsKeytab
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_DATANODE_KERBEROS_PRINCIPAL_KEY
argument_list|,
name|hdfsPrincipal
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_DATANODE_KEYTAB_FILE_KEY
argument_list|,
name|hdfsKeytab
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|SINK_PRINCIPAL_KEY
argument_list|,
name|sinkPrincipal
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|SINK_KEYTAB_FILE_KEY
argument_list|,
name|sinkKeytab
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_WEB_AUTHENTICATION_KERBEROS_PRINCIPAL_KEY
argument_list|,
name|spnegoPrincipal
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFS_BLOCK_ACCESS_TOKEN_ENABLE_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_DATA_TRANSFER_PROTECTION_KEY
argument_list|,
name|dataTransferProtection
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_HTTP_POLICY_KEY
argument_list|,
name|HttpConfig
operator|.
name|Policy
operator|.
name|HTTPS_ONLY
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMENODE_HTTPS_ADDRESS_KEY
argument_list|,
literal|"localhost:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_DATANODE_HTTPS_ADDRESS_KEY
argument_list|,
literal|"localhost:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SASL_KEY
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_GROUP_MAPPING
argument_list|,
name|NullGroupsMapping
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|keystoresDir
init|=
name|methodDir
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|String
name|sslConfDir
init|=
name|KeyStoreTestUtil
operator|.
name|getClasspathDir
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|KeyStoreTestUtil
operator|.
name|setupSSLConfig
argument_list|(
name|keystoresDir
argument_list|,
name|sslConfDir
argument_list|,
name|conf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_CLIENT_HTTPS_KEYSTORE_RESOURCE_KEY
argument_list|,
name|KeyStoreTestUtil
operator|.
name|getClientSSLConfigFileName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_SERVER_HTTPS_KEYSTORE_RESOURCE_KEY
argument_list|,
name|KeyStoreTestUtil
operator|.
name|getServerSSLConfigFileName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
block|}
end_class

end_unit

