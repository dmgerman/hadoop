begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.web
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystemTestHelper
operator|.
name|exists
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystemTestHelper
operator|.
name|getDefaultBlockSize
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystemTestHelper
operator|.
name|getTestRootPath
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|impl
operator|.
name|Log4JLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSMainOperationsBaseTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|ExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestFSMainOperationsWebHdfs
specifier|public
class|class
name|TestFSMainOperationsWebHdfs
extends|extends
name|FSMainOperationsBaseTest
block|{
block|{
operator|(
operator|(
name|Log4JLogger
operator|)
name|ExceptionHandler
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
DECL|field|cluster
specifier|private
specifier|static
specifier|final
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|defaultWorkingDirectory
specifier|private
specifier|static
specifier|final
name|Path
name|defaultWorkingDirectory
decl_stmt|;
static|static
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|2
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|fSys
operator|=
name|cluster
operator|.
name|getWebHdfsFileSystem
argument_list|()
expr_stmt|;
name|defaultWorkingDirectory
operator|=
name|fSys
operator|.
name|getWorkingDirectory
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getDefaultWorkingDirectory ()
specifier|protected
name|Path
name|getDefaultWorkingDirectory
parameter_list|()
block|{
return|return
name|defaultWorkingDirectory
return|;
block|}
comment|/** Override the following method without using position read. */
annotation|@
name|Override
DECL|method|writeReadAndDelete (int len)
specifier|protected
name|void
name|writeReadAndDelete
parameter_list|(
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/hadoop/file"
argument_list|)
decl_stmt|;
name|fSys
operator|.
name|mkdirs
argument_list|(
name|path
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|FSDataOutputStream
name|out
init|=
name|fSys
operator|.
name|create
argument_list|(
name|path
argument_list|,
literal|false
argument_list|,
literal|4096
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
name|getDefaultBlockSize
argument_list|()
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Exists"
argument_list|,
name|exists
argument_list|(
name|fSys
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Length"
argument_list|,
name|len
argument_list|,
name|fSys
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|FSDataInputStream
name|in
init|=
name|fSys
operator|.
name|open
argument_list|(
name|path
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|b
init|=
name|in
operator|.
name|read
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Position "
operator|+
name|i
argument_list|,
name|data
index|[
name|i
index|]
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Deleted"
argument_list|,
name|fSys
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"No longer exists"
argument_list|,
name|exists
argument_list|(
name|fSys
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//The following tests failed for HftpFileSystem,
comment|//Disable it for WebHdfsFileSystem
annotation|@
name|Test
DECL|method|testListStatusThrowsExceptionForNonExistentFile ()
specifier|public
name|void
name|testListStatusThrowsExceptionForNonExistentFile
parameter_list|()
block|{}
annotation|@
name|Test
DECL|method|testListStatusThrowsExceptionForUnreadableDir ()
specifier|public
name|void
name|testListStatusThrowsExceptionForUnreadableDir
parameter_list|()
block|{}
annotation|@
name|Test
DECL|method|testGlobStatusThrowsExceptionForNonExistentFile ()
specifier|public
name|void
name|testGlobStatusThrowsExceptionForNonExistentFile
parameter_list|()
block|{}
block|}
end_class

end_unit

