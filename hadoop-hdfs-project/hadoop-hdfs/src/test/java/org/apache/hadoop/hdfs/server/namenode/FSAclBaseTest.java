begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
operator|.
name|FS_PERMISSIONS_UMASK_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|AclTestHelpers
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryScope
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryType
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|AclException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|FsPermissionExtension
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|SafeModeAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSDirectory
operator|.
name|DirOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * Tests NameNode interaction for all ACL modification APIs.  This test suite  * also covers interaction of setPermission with inodes that have ACLs.  */
end_comment

begin_class
DECL|class|FSAclBaseTest
specifier|public
specifier|abstract
class|class
name|FSAclBaseTest
block|{
DECL|field|BRUCE
specifier|private
specifier|static
specifier|final
name|UserGroupInformation
name|BRUCE
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"bruce"
argument_list|,
operator|new
name|String
index|[]
block|{ }
argument_list|)
decl_stmt|;
DECL|field|DIANA
specifier|private
specifier|static
specifier|final
name|UserGroupInformation
name|DIANA
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"diana"
argument_list|,
operator|new
name|String
index|[]
block|{ }
argument_list|)
decl_stmt|;
DECL|field|SUPERGROUP_MEMBER
specifier|private
specifier|static
specifier|final
name|UserGroupInformation
name|SUPERGROUP_MEMBER
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"super"
argument_list|,
operator|new
name|String
index|[]
block|{
name|DFSConfigKeys
operator|.
name|DFS_PERMISSIONS_SUPERUSERGROUP_DEFAULT
block|}
argument_list|)
decl_stmt|;
comment|// group member
DECL|field|BOB
specifier|private
specifier|static
specifier|final
name|UserGroupInformation
name|BOB
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"bob"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"groupY"
block|,
literal|"groupZ"
block|}
argument_list|)
decl_stmt|;
DECL|field|cluster
specifier|protected
specifier|static
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|conf
specifier|protected
specifier|static
name|Configuration
name|conf
decl_stmt|;
DECL|field|pathCount
specifier|private
specifier|static
name|int
name|pathCount
init|=
literal|0
decl_stmt|;
DECL|field|path
specifier|private
specifier|static
name|Path
name|path
decl_stmt|;
annotation|@
name|Rule
DECL|field|exception
specifier|public
name|ExpectedException
name|exception
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
DECL|field|fs
DECL|field|fsAsBruce
DECL|field|fsAsDiana
DECL|field|fsAsSupergroupMember
DECL|field|fsAsBob
specifier|private
name|FileSystem
name|fs
decl_stmt|,
name|fsAsBruce
decl_stmt|,
name|fsAsDiana
decl_stmt|,
name|fsAsSupergroupMember
decl_stmt|,
name|fsAsBob
decl_stmt|;
DECL|method|startCluster ()
specifier|protected
specifier|static
name|void
name|startCluster
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_ACLS_ENABLED_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|shutdown ()
specifier|public
specifier|static
name|void
name|shutdown
parameter_list|()
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|pathCount
operator|+=
literal|1
expr_stmt|;
name|path
operator|=
operator|new
name|Path
argument_list|(
literal|"/p"
operator|+
name|pathCount
argument_list|)
expr_stmt|;
name|initFileSystems
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|destroyFileSystems ()
specifier|public
name|void
name|destroyFileSystems
parameter_list|()
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
literal|null
argument_list|,
name|fs
argument_list|,
name|fsAsBruce
argument_list|,
name|fsAsDiana
argument_list|,
name|fsAsSupergroupMember
argument_list|)
expr_stmt|;
name|fs
operator|=
name|fsAsBruce
operator|=
name|fsAsDiana
operator|=
name|fsAsSupergroupMember
operator|=
name|fsAsBob
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testModifyAclEntries ()
specifier|public
name|void
name|testModifyAclEntries
parameter_list|()
throws|throws
name|IOException
block|{
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0750
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|OTHER
argument_list|,
name|NONE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setAcl
argument_list|(
name|path
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|path
operator|+
literal|" should have ACLs in FileStatus!"
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|hasAcl
argument_list|()
argument_list|)
expr_stmt|;
name|aclSpec
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|READ_EXECUTE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|READ_EXECUTE
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|modifyAclEntries
argument_list|(
name|path
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|path
operator|+
literal|" should have ACLs in FileStatus!"
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|hasAcl
argument_list|()
argument_list|)
expr_stmt|;
name|AclStatus
name|s
init|=
name|fs
operator|.
name|getAclStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|AclEntry
index|[]
name|returned
init|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|MASK
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|OTHER
argument_list|,
name|NONE
argument_list|)
block|}
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
operator|(
name|short
operator|)
literal|010750
argument_list|)
expr_stmt|;
name|assertAclFeature
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testModifyAclEntriesOnlyAccess ()
specifier|public
name|void
name|testModifyAclEntriesOnlyAccess
parameter_list|()
throws|throws
name|IOException
block|{
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0640
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|OTHER
argument_list|,
name|NONE
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setAcl
argument_list|(
name|path
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|aclSpec
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|READ_EXECUTE
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|modifyAclEntries
argument_list|(
name|path
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|AclStatus
name|s
init|=
name|fs
operator|.
name|getAclStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|AclEntry
index|[]
name|returned
init|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
block|}
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
operator|(
name|short
operator|)
literal|010750
argument_list|)
expr_stmt|;
name|assertAclFeature
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testModifyAclEntriesOnlyDefault ()
specifier|public
name|void
name|testModifyAclEntriesOnlyDefault
parameter_list|()
throws|throws
name|IOException
block|{
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0750
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setAcl
argument_list|(
name|path
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|aclSpec
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|READ_EXECUTE
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|modifyAclEntries
argument_list|(
name|path
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|AclStatus
name|s
init|=
name|fs
operator|.
name|getAclStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|AclEntry
index|[]
name|returned
init|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|MASK
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|OTHER
argument_list|,
name|NONE
argument_list|)
block|}
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
operator|(
name|short
operator|)
literal|010750
argument_list|)
expr_stmt|;
name|assertAclFeature
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testModifyAclEntriesMinimal ()
specifier|public
name|void
name|testModifyAclEntriesMinimal
parameter_list|()
throws|throws
name|IOException
block|{
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0640
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|READ_WRITE
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|modifyAclEntries
argument_list|(
name|path
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|AclStatus
name|s
init|=
name|fs
operator|.
name|getAclStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|AclEntry
index|[]
name|returned
init|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|READ_WRITE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ
argument_list|)
block|}
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
operator|(
name|short
operator|)
literal|010660
argument_list|)
expr_stmt|;
name|assertAclFeature
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testModifyAclEntriesMinimalDefault ()
specifier|public
name|void
name|testModifyAclEntriesMinimalDefault
parameter_list|()
throws|throws
name|IOException
block|{
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0750
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|OTHER
argument_list|,
name|NONE
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|modifyAclEntries
argument_list|(
name|path
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|AclStatus
name|s
init|=
name|fs
operator|.
name|getAclStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|AclEntry
index|[]
name|returned
init|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|OTHER
argument_list|,
name|NONE
argument_list|)
block|}
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
operator|(
name|short
operator|)
literal|010750
argument_list|)
expr_stmt|;
name|assertAclFeature
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testModifyAclEntriesCustomMask ()
specifier|public
name|void
name|testModifyAclEntriesCustomMask
parameter_list|()
throws|throws
name|IOException
block|{
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0640
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|MASK
argument_list|,
name|NONE
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|modifyAclEntries
argument_list|(
name|path
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|AclStatus
name|s
init|=
name|fs
operator|.
name|getAclStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|AclEntry
index|[]
name|returned
init|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ
argument_list|)
block|}
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
operator|(
name|short
operator|)
literal|010600
argument_list|)
expr_stmt|;
name|assertAclFeature
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testModifyAclEntriesStickyBit ()
specifier|public
name|void
name|testModifyAclEntriesStickyBit
parameter_list|()
throws|throws
name|IOException
block|{
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|01750
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|OTHER
argument_list|,
name|NONE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setAcl
argument_list|(
name|path
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|aclSpec
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|READ_EXECUTE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|READ_EXECUTE
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|modifyAclEntries
argument_list|(
name|path
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|AclStatus
name|s
init|=
name|fs
operator|.
name|getAclStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|AclEntry
index|[]
name|returned
init|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|MASK
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|OTHER
argument_list|,
name|NONE
argument_list|)
block|}
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
operator|(
name|short
operator|)
literal|011750
argument_list|)
expr_stmt|;
name|assertAclFeature
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|FileNotFoundException
operator|.
name|class
argument_list|)
DECL|method|testModifyAclEntriesPathNotFound ()
specifier|public
name|void
name|testModifyAclEntriesPathNotFound
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Path has not been created.
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|OTHER
argument_list|,
name|NONE
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|modifyAclEntries
argument_list|(
name|path
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AclException
operator|.
name|class
argument_list|)
DECL|method|testModifyAclEntriesDefaultOnFile ()
specifier|public
name|void
name|testModifyAclEntriesDefaultOnFile
parameter_list|()
throws|throws
name|IOException
block|{
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0640
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|modifyAclEntries
argument_list|(
name|path
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemoveAclEntries ()
specifier|public
name|void
name|testRemoveAclEntries
parameter_list|()
throws|throws
name|IOException
block|{
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0750
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|OTHER
argument_list|,
name|NONE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setAcl
argument_list|(
name|path
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|aclSpec
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|removeAclEntries
argument_list|(
name|path
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|AclStatus
name|s
init|=
name|fs
operator|.
name|getAclStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|AclEntry
index|[]
name|returned
init|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|MASK
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|OTHER
argument_list|,
name|NONE
argument_list|)
block|}
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
operator|(
name|short
operator|)
literal|010750
argument_list|)
expr_stmt|;
name|assertAclFeature
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemoveAclEntriesOnlyAccess ()
specifier|public
name|void
name|testRemoveAclEntriesOnlyAccess
parameter_list|()
throws|throws
name|IOException
block|{
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0640
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"bar"
argument_list|,
name|READ_WRITE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ_WRITE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|OTHER
argument_list|,
name|NONE
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setAcl
argument_list|(
name|path
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|aclSpec
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|removeAclEntries
argument_list|(
name|path
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|AclStatus
name|s
init|=
name|fs
operator|.
name|getAclStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|AclEntry
index|[]
name|returned
init|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"bar"
argument_list|,
name|READ_WRITE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ_WRITE
argument_list|)
block|}
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
operator|(
name|short
operator|)
literal|010760
argument_list|)
expr_stmt|;
name|assertAclFeature
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemoveAclEntriesOnlyDefault ()
specifier|public
name|void
name|testRemoveAclEntriesOnlyDefault
parameter_list|()
throws|throws
name|IOException
block|{
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0750
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|OTHER
argument_list|,
name|NONE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"bar"
argument_list|,
name|READ_EXECUTE
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setAcl
argument_list|(
name|path
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|aclSpec
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|removeAclEntries
argument_list|(
name|path
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|AclStatus
name|s
init|=
name|fs
operator|.
name|getAclStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|AclEntry
index|[]
name|returned
init|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"bar"
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|MASK
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|OTHER
argument_list|,
name|NONE
argument_list|)
block|}
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
operator|(
name|short
operator|)
literal|010750
argument_list|)
expr_stmt|;
name|assertAclFeature
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemoveAclEntriesMinimal ()
specifier|public
name|void
name|testRemoveAclEntriesMinimal
parameter_list|()
throws|throws
name|IOException
block|{
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0760
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ_WRITE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|OTHER
argument_list|,
name|NONE
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setAcl
argument_list|(
name|path
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|aclSpec
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|MASK
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|removeAclEntries
argument_list|(
name|path
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|AclStatus
name|s
init|=
name|fs
operator|.
name|getAclStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|AclEntry
index|[]
name|returned
init|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|AclEntry
index|[]
block|{ }
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
operator|(
name|short
operator|)
literal|0760
argument_list|)
expr_stmt|;
name|assertAclFeature
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemoveAclEntriesMinimalDefault ()
specifier|public
name|void
name|testRemoveAclEntriesMinimalDefault
parameter_list|()
throws|throws
name|IOException
block|{
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0750
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|OTHER
argument_list|,
name|NONE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setAcl
argument_list|(
name|path
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|aclSpec
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|MASK
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|MASK
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|removeAclEntries
argument_list|(
name|path
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|AclStatus
name|s
init|=
name|fs
operator|.
name|getAclStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|AclEntry
index|[]
name|returned
init|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|OTHER
argument_list|,
name|NONE
argument_list|)
block|}
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
operator|(
name|short
operator|)
literal|010750
argument_list|)
expr_stmt|;
name|assertAclFeature
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemoveAclEntriesStickyBit ()
specifier|public
name|void
name|testRemoveAclEntriesStickyBit
parameter_list|()
throws|throws
name|IOException
block|{
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|01750
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|OTHER
argument_list|,
name|NONE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setAcl
argument_list|(
name|path
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|aclSpec
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|removeAclEntries
argument_list|(
name|path
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|AclStatus
name|s
init|=
name|fs
operator|.
name|getAclStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|AclEntry
index|[]
name|returned
init|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|MASK
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|OTHER
argument_list|,
name|NONE
argument_list|)
block|}
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
operator|(
name|short
operator|)
literal|011750
argument_list|)
expr_stmt|;
name|assertAclFeature
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|FileNotFoundException
operator|.
name|class
argument_list|)
DECL|method|testRemoveAclEntriesPathNotFound ()
specifier|public
name|void
name|testRemoveAclEntriesPathNotFound
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Path has not been created.
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|removeAclEntries
argument_list|(
name|path
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemoveDefaultAcl ()
specifier|public
name|void
name|testRemoveDefaultAcl
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0750
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|OTHER
argument_list|,
name|NONE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setAcl
argument_list|(
name|path
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|fs
operator|.
name|removeDefaultAcl
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|AclStatus
name|s
init|=
name|fs
operator|.
name|getAclStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|AclEntry
index|[]
name|returned
init|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
block|}
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
operator|(
name|short
operator|)
literal|010770
argument_list|)
expr_stmt|;
name|assertAclFeature
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// restart of the cluster
name|restartCluster
argument_list|()
expr_stmt|;
name|s
operator|=
name|fs
operator|.
name|getAclStatus
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|AclEntry
index|[]
name|afterRestart
init|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|returned
argument_list|,
name|afterRestart
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemoveDefaultAclOnlyAccess ()
specifier|public
name|void
name|testRemoveDefaultAclOnlyAccess
parameter_list|()
throws|throws
name|Exception
block|{
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0640
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|OTHER
argument_list|,
name|NONE
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setAcl
argument_list|(
name|path
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|fs
operator|.
name|removeDefaultAcl
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|AclStatus
name|s
init|=
name|fs
operator|.
name|getAclStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|AclEntry
index|[]
name|returned
init|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
block|}
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
operator|(
name|short
operator|)
literal|010770
argument_list|)
expr_stmt|;
name|assertAclFeature
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// restart of the cluster
name|restartCluster
argument_list|()
expr_stmt|;
name|s
operator|=
name|fs
operator|.
name|getAclStatus
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|AclEntry
index|[]
name|afterRestart
init|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|returned
argument_list|,
name|afterRestart
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemoveDefaultAclOnlyDefault ()
specifier|public
name|void
name|testRemoveDefaultAclOnlyDefault
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0750
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setAcl
argument_list|(
name|path
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|fs
operator|.
name|removeDefaultAcl
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|AclStatus
name|s
init|=
name|fs
operator|.
name|getAclStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|AclEntry
index|[]
name|returned
init|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|AclEntry
index|[]
block|{ }
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
operator|(
name|short
operator|)
literal|0750
argument_list|)
expr_stmt|;
name|assertAclFeature
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// restart of the cluster
name|restartCluster
argument_list|()
expr_stmt|;
name|s
operator|=
name|fs
operator|.
name|getAclStatus
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|AclEntry
index|[]
name|afterRestart
init|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|returned
argument_list|,
name|afterRestart
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemoveDefaultAclMinimal ()
specifier|public
name|void
name|testRemoveDefaultAclMinimal
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0750
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|removeDefaultAcl
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|AclStatus
name|s
init|=
name|fs
operator|.
name|getAclStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|AclEntry
index|[]
name|returned
init|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|AclEntry
index|[]
block|{ }
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
operator|(
name|short
operator|)
literal|0750
argument_list|)
expr_stmt|;
name|assertAclFeature
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// restart of the cluster
name|restartCluster
argument_list|()
expr_stmt|;
name|s
operator|=
name|fs
operator|.
name|getAclStatus
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|AclEntry
index|[]
name|afterRestart
init|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|returned
argument_list|,
name|afterRestart
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemoveDefaultAclStickyBit ()
specifier|public
name|void
name|testRemoveDefaultAclStickyBit
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|01750
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|OTHER
argument_list|,
name|NONE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setAcl
argument_list|(
name|path
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|fs
operator|.
name|removeDefaultAcl
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|AclStatus
name|s
init|=
name|fs
operator|.
name|getAclStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|AclEntry
index|[]
name|returned
init|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
block|}
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
operator|(
name|short
operator|)
literal|011770
argument_list|)
expr_stmt|;
name|assertAclFeature
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// restart of the cluster
name|restartCluster
argument_list|()
expr_stmt|;
name|s
operator|=
name|fs
operator|.
name|getAclStatus
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|AclEntry
index|[]
name|afterRestart
init|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|returned
argument_list|,
name|afterRestart
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|FileNotFoundException
operator|.
name|class
argument_list|)
DECL|method|testRemoveDefaultAclPathNotFound ()
specifier|public
name|void
name|testRemoveDefaultAclPathNotFound
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Path has not been created.
name|fs
operator|.
name|removeDefaultAcl
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemoveAcl ()
specifier|public
name|void
name|testRemoveAcl
parameter_list|()
throws|throws
name|IOException
block|{
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0750
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|OTHER
argument_list|,
name|NONE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setAcl
argument_list|(
name|path
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|path
operator|+
literal|" should have ACLs in FileStatus!"
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|hasAcl
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|path
operator|+
literal|" should have ACLs in FileStatus#toString()!"
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"hasAcl=true"
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|removeAcl
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|path
operator|+
literal|" should not have ACLs in FileStatus!"
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|hasAcl
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|path
operator|+
literal|" should not have ACLs in FileStatus#toString()!"
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"hasAcl=false"
argument_list|)
argument_list|)
expr_stmt|;
name|AclStatus
name|s
init|=
name|fs
operator|.
name|getAclStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|AclEntry
index|[]
name|returned
init|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|AclEntry
index|[]
block|{ }
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
operator|(
name|short
operator|)
literal|0750
argument_list|)
expr_stmt|;
name|assertAclFeature
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemoveAclMinimalAcl ()
specifier|public
name|void
name|testRemoveAclMinimalAcl
parameter_list|()
throws|throws
name|IOException
block|{
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0640
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|removeAcl
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|AclStatus
name|s
init|=
name|fs
operator|.
name|getAclStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|AclEntry
index|[]
name|returned
init|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|AclEntry
index|[]
block|{ }
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
operator|(
name|short
operator|)
literal|0640
argument_list|)
expr_stmt|;
name|assertAclFeature
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemoveAclStickyBit ()
specifier|public
name|void
name|testRemoveAclStickyBit
parameter_list|()
throws|throws
name|IOException
block|{
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|01750
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|OTHER
argument_list|,
name|NONE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setAcl
argument_list|(
name|path
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|fs
operator|.
name|removeAcl
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|AclStatus
name|s
init|=
name|fs
operator|.
name|getAclStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|AclEntry
index|[]
name|returned
init|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|AclEntry
index|[]
block|{ }
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
operator|(
name|short
operator|)
literal|01750
argument_list|)
expr_stmt|;
name|assertAclFeature
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemoveAclOnlyDefault ()
specifier|public
name|void
name|testRemoveAclOnlyDefault
parameter_list|()
throws|throws
name|IOException
block|{
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0750
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|OTHER
argument_list|,
name|NONE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setAcl
argument_list|(
name|path
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|fs
operator|.
name|removeAcl
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|AclStatus
name|s
init|=
name|fs
operator|.
name|getAclStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|AclEntry
index|[]
name|returned
init|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|AclEntry
index|[]
block|{ }
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
operator|(
name|short
operator|)
literal|0750
argument_list|)
expr_stmt|;
name|assertAclFeature
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|FileNotFoundException
operator|.
name|class
argument_list|)
DECL|method|testRemoveAclPathNotFound ()
specifier|public
name|void
name|testRemoveAclPathNotFound
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Path has not been created.
name|fs
operator|.
name|removeAcl
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetAcl ()
specifier|public
name|void
name|testSetAcl
parameter_list|()
throws|throws
name|IOException
block|{
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0750
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|OTHER
argument_list|,
name|NONE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setAcl
argument_list|(
name|path
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|AclStatus
name|s
init|=
name|fs
operator|.
name|getAclStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|AclEntry
index|[]
name|returned
init|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|MASK
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|OTHER
argument_list|,
name|NONE
argument_list|)
block|}
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
operator|(
name|short
operator|)
literal|010770
argument_list|)
expr_stmt|;
name|assertAclFeature
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetAclOnlyAccess ()
specifier|public
name|void
name|testSetAclOnlyAccess
parameter_list|()
throws|throws
name|IOException
block|{
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0640
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
name|READ_WRITE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|READ
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|OTHER
argument_list|,
name|NONE
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setAcl
argument_list|(
name|path
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|AclStatus
name|s
init|=
name|fs
operator|.
name|getAclStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|AclEntry
index|[]
name|returned
init|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|READ
argument_list|)
block|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ
argument_list|)
block|}
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
operator|(
name|short
operator|)
literal|010640
argument_list|)
expr_stmt|;
name|assertAclFeature
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetAclOnlyDefault ()
specifier|public
name|void
name|testSetAclOnlyDefault
parameter_list|()
throws|throws
name|IOException
block|{
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0750
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setAcl
argument_list|(
name|path
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|AclStatus
name|s
init|=
name|fs
operator|.
name|getAclStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|AclEntry
index|[]
name|returned
init|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|MASK
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|OTHER
argument_list|,
name|NONE
argument_list|)
block|}
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
operator|(
name|short
operator|)
literal|010750
argument_list|)
expr_stmt|;
name|assertAclFeature
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetAclMinimal ()
specifier|public
name|void
name|testSetAclMinimal
parameter_list|()
throws|throws
name|IOException
block|{
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0644
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
name|READ_WRITE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|READ
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|OTHER
argument_list|,
name|NONE
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setAcl
argument_list|(
name|path
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|aclSpec
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
name|READ_WRITE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|OTHER
argument_list|,
name|NONE
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setAcl
argument_list|(
name|path
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|AclStatus
name|s
init|=
name|fs
operator|.
name|getAclStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|AclEntry
index|[]
name|returned
init|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|AclEntry
index|[]
block|{ }
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
operator|(
name|short
operator|)
literal|0640
argument_list|)
expr_stmt|;
name|assertAclFeature
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetAclMinimalDefault ()
specifier|public
name|void
name|testSetAclMinimalDefault
parameter_list|()
throws|throws
name|IOException
block|{
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0750
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|OTHER
argument_list|,
name|NONE
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setAcl
argument_list|(
name|path
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|AclStatus
name|s
init|=
name|fs
operator|.
name|getAclStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|AclEntry
index|[]
name|returned
init|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|OTHER
argument_list|,
name|NONE
argument_list|)
block|}
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
operator|(
name|short
operator|)
literal|010750
argument_list|)
expr_stmt|;
name|assertAclFeature
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetAclCustomMask ()
specifier|public
name|void
name|testSetAclCustomMask
parameter_list|()
throws|throws
name|IOException
block|{
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0640
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
name|READ_WRITE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|READ
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|MASK
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|OTHER
argument_list|,
name|NONE
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setAcl
argument_list|(
name|path
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|AclStatus
name|s
init|=
name|fs
operator|.
name|getAclStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|AclEntry
index|[]
name|returned
init|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|READ
argument_list|)
block|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ
argument_list|)
block|}
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
operator|(
name|short
operator|)
literal|010670
argument_list|)
expr_stmt|;
name|assertAclFeature
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetAclStickyBit ()
specifier|public
name|void
name|testSetAclStickyBit
parameter_list|()
throws|throws
name|IOException
block|{
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|01750
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|OTHER
argument_list|,
name|NONE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setAcl
argument_list|(
name|path
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|AclStatus
name|s
init|=
name|fs
operator|.
name|getAclStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|AclEntry
index|[]
name|returned
init|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|MASK
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|OTHER
argument_list|,
name|NONE
argument_list|)
block|}
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
operator|(
name|short
operator|)
literal|011770
argument_list|)
expr_stmt|;
name|assertAclFeature
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|FileNotFoundException
operator|.
name|class
argument_list|)
DECL|method|testSetAclPathNotFound ()
specifier|public
name|void
name|testSetAclPathNotFound
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Path has not been created.
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
name|READ_WRITE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|READ
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|OTHER
argument_list|,
name|NONE
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setAcl
argument_list|(
name|path
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AclException
operator|.
name|class
argument_list|)
DECL|method|testSetAclDefaultOnFile ()
specifier|public
name|void
name|testSetAclDefaultOnFile
parameter_list|()
throws|throws
name|IOException
block|{
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0640
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setAcl
argument_list|(
name|path
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetPermission ()
specifier|public
name|void
name|testSetPermission
parameter_list|()
throws|throws
name|IOException
block|{
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0750
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|OTHER
argument_list|,
name|NONE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setAcl
argument_list|(
name|path
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0700
argument_list|)
argument_list|)
expr_stmt|;
name|AclStatus
name|s
init|=
name|fs
operator|.
name|getAclStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|AclEntry
index|[]
name|returned
init|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|MASK
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|OTHER
argument_list|,
name|NONE
argument_list|)
block|}
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
operator|(
name|short
operator|)
literal|010700
argument_list|)
expr_stmt|;
name|assertAclFeature
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetPermissionOnlyAccess ()
specifier|public
name|void
name|testSetPermissionOnlyAccess
parameter_list|()
throws|throws
name|IOException
block|{
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0640
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
name|READ_WRITE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|READ
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|OTHER
argument_list|,
name|NONE
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setAcl
argument_list|(
name|path
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0600
argument_list|)
argument_list|)
expr_stmt|;
name|AclStatus
name|s
init|=
name|fs
operator|.
name|getAclStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|AclEntry
index|[]
name|returned
init|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|READ
argument_list|)
block|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ
argument_list|)
block|}
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
operator|(
name|short
operator|)
literal|010600
argument_list|)
expr_stmt|;
name|assertAclFeature
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetPermissionOnlyDefault ()
specifier|public
name|void
name|testSetPermissionOnlyDefault
parameter_list|()
throws|throws
name|IOException
block|{
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0750
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|OTHER
argument_list|,
name|NONE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setAcl
argument_list|(
name|path
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0700
argument_list|)
argument_list|)
expr_stmt|;
name|AclStatus
name|s
init|=
name|fs
operator|.
name|getAclStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|AclEntry
index|[]
name|returned
init|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|MASK
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|OTHER
argument_list|,
name|NONE
argument_list|)
block|}
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
operator|(
name|short
operator|)
literal|010700
argument_list|)
expr_stmt|;
name|assertAclFeature
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetPermissionCannotSetAclBit ()
specifier|public
name|void
name|testSetPermissionCannotSetAclBit
parameter_list|()
throws|throws
name|IOException
block|{
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0750
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0700
argument_list|)
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
operator|(
name|short
operator|)
literal|0700
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|path
argument_list|,
operator|new
name|FsPermissionExtension
argument_list|(
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0755
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|INode
name|inode
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getFSDirectory
argument_list|()
operator|.
name|getINode
argument_list|(
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|DirOp
operator|.
name|READ_LINK
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|inode
argument_list|)
expr_stmt|;
name|FsPermission
name|perm
init|=
name|inode
operator|.
name|getFsPermission
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|perm
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0755
argument_list|,
name|perm
operator|.
name|toShort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0755
argument_list|,
name|perm
operator|.
name|toExtendedShort
argument_list|()
argument_list|)
expr_stmt|;
name|assertAclFeature
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefaultAclNewFile ()
specifier|public
name|void
name|testDefaultAclNewFile
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0750
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setAcl
argument_list|(
name|path
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|create
argument_list|(
name|filePath
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|AclStatus
name|s
init|=
name|fs
operator|.
name|getAclStatus
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
name|AclEntry
index|[]
name|returned
init|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
block|}
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
name|filePath
argument_list|,
operator|(
name|short
operator|)
literal|010640
argument_list|)
expr_stmt|;
name|assertAclFeature
argument_list|(
name|filePath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUMaskDefaultAclNewFile ()
specifier|public
name|void
name|testUMaskDefaultAclNewFile
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0750
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|GROUP
argument_list|,
name|READ_WRITE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setAcl
argument_list|(
name|path
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|String
name|oldUMask
init|=
name|fs
operator|.
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|FS_PERMISSIONS_UMASK_KEY
argument_list|)
decl_stmt|;
name|fs
operator|.
name|getConf
argument_list|()
operator|.
name|set
argument_list|(
name|FS_PERMISSIONS_UMASK_KEY
argument_list|,
literal|"027"
argument_list|)
expr_stmt|;
name|FSDirectory
name|fsDirectory
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getFSDirectory
argument_list|()
decl_stmt|;
name|boolean
name|oldEnabled
init|=
name|fsDirectory
operator|.
name|isPosixAclInheritanceEnabled
argument_list|()
decl_stmt|;
try|try
block|{
name|fsDirectory
operator|.
name|setPosixAclInheritanceEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|create
argument_list|(
name|filePath
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|AclStatus
name|s
init|=
name|fs
operator|.
name|getAclStatus
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
name|AclEntry
index|[]
name|returned
init|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ_WRITE
argument_list|)
block|}
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
name|filePath
argument_list|,
operator|(
name|short
operator|)
literal|010640
argument_list|)
expr_stmt|;
name|fsDirectory
operator|.
name|setPosixAclInheritanceEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Path
name|file2Path
init|=
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"file2"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|create
argument_list|(
name|file2Path
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|AclStatus
name|s2
init|=
name|fs
operator|.
name|getAclStatus
argument_list|(
name|file2Path
argument_list|)
decl_stmt|;
name|AclEntry
index|[]
name|returned2
init|=
name|s2
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ_WRITE
argument_list|)
block|}
argument_list|,
name|returned2
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
name|file2Path
argument_list|,
operator|(
name|short
operator|)
literal|010660
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fsDirectory
operator|.
name|setPosixAclInheritanceEnabled
argument_list|(
name|oldEnabled
argument_list|)
expr_stmt|;
name|fs
operator|.
name|getConf
argument_list|()
operator|.
name|set
argument_list|(
name|FS_PERMISSIONS_UMASK_KEY
argument_list|,
name|oldUMask
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testOnlyAccessAclNewFile ()
specifier|public
name|void
name|testOnlyAccessAclNewFile
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0750
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|modifyAclEntries
argument_list|(
name|path
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|create
argument_list|(
name|filePath
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|AclStatus
name|s
init|=
name|fs
operator|.
name|getAclStatus
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
name|AclEntry
index|[]
name|returned
init|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|AclEntry
index|[]
block|{ }
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
name|filePath
argument_list|,
operator|(
name|short
operator|)
literal|0644
argument_list|)
expr_stmt|;
name|assertAclFeature
argument_list|(
name|filePath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefaultMinimalAclNewFile ()
specifier|public
name|void
name|testDefaultMinimalAclNewFile
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0750
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|OTHER
argument_list|,
name|NONE
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setAcl
argument_list|(
name|path
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|create
argument_list|(
name|filePath
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|AclStatus
name|s
init|=
name|fs
operator|.
name|getAclStatus
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
name|AclEntry
index|[]
name|returned
init|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|AclEntry
index|[]
block|{ }
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
name|filePath
argument_list|,
operator|(
name|short
operator|)
literal|0640
argument_list|)
expr_stmt|;
name|assertAclFeature
argument_list|(
name|filePath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefaultAclNewDir ()
specifier|public
name|void
name|testDefaultAclNewDir
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0750
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setAcl
argument_list|(
name|path
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|path
operator|+
literal|" should have ACLs in FileStatus!"
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|hasAcl
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|dirPath
init|=
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"dir1"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|dirPath
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dirPath
operator|+
literal|" should have ACLs in FileStatus!"
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|dirPath
argument_list|)
operator|.
name|hasAcl
argument_list|()
argument_list|)
expr_stmt|;
name|AclStatus
name|s
init|=
name|fs
operator|.
name|getAclStatus
argument_list|(
name|dirPath
argument_list|)
decl_stmt|;
name|AclEntry
index|[]
name|returned
init|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|MASK
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|OTHER
argument_list|,
name|NONE
argument_list|)
block|}
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
name|dirPath
argument_list|,
operator|(
name|short
operator|)
literal|010750
argument_list|)
expr_stmt|;
name|assertAclFeature
argument_list|(
name|dirPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUMaskDefaultAclNewDir ()
specifier|public
name|void
name|testUMaskDefaultAclNewDir
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0750
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|GROUP
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setAcl
argument_list|(
name|path
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|String
name|oldUMask
init|=
name|fs
operator|.
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|FS_PERMISSIONS_UMASK_KEY
argument_list|)
decl_stmt|;
name|fs
operator|.
name|getConf
argument_list|()
operator|.
name|set
argument_list|(
name|FS_PERMISSIONS_UMASK_KEY
argument_list|,
literal|"027"
argument_list|)
expr_stmt|;
name|FSDirectory
name|fsDirectory
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getFSDirectory
argument_list|()
decl_stmt|;
name|boolean
name|oldEnabled
init|=
name|fsDirectory
operator|.
name|isPosixAclInheritanceEnabled
argument_list|()
decl_stmt|;
try|try
block|{
name|fsDirectory
operator|.
name|setPosixAclInheritanceEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Path
name|dirPath
init|=
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"dir1"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|dirPath
argument_list|)
expr_stmt|;
name|AclStatus
name|s
init|=
name|fs
operator|.
name|getAclStatus
argument_list|(
name|dirPath
argument_list|)
decl_stmt|;
name|AclEntry
index|[]
name|returned
init|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|GROUP
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|MASK
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|OTHER
argument_list|,
name|NONE
argument_list|)
block|}
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
name|dirPath
argument_list|,
operator|(
name|short
operator|)
literal|010750
argument_list|)
expr_stmt|;
name|fsDirectory
operator|.
name|setPosixAclInheritanceEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Path
name|dir2Path
init|=
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"dir2"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir2Path
argument_list|)
expr_stmt|;
name|AclStatus
name|s2
init|=
name|fs
operator|.
name|getAclStatus
argument_list|(
name|dir2Path
argument_list|)
decl_stmt|;
name|AclEntry
index|[]
name|returned2
init|=
name|s2
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|GROUP
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|MASK
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|OTHER
argument_list|,
name|NONE
argument_list|)
block|}
argument_list|,
name|returned2
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
name|dir2Path
argument_list|,
operator|(
name|short
operator|)
literal|010770
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fsDirectory
operator|.
name|setPosixAclInheritanceEnabled
argument_list|(
name|oldEnabled
argument_list|)
expr_stmt|;
name|fs
operator|.
name|getConf
argument_list|()
operator|.
name|set
argument_list|(
name|FS_PERMISSIONS_UMASK_KEY
argument_list|,
name|oldUMask
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testOnlyAccessAclNewDir ()
specifier|public
name|void
name|testOnlyAccessAclNewDir
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0750
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|modifyAclEntries
argument_list|(
name|path
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|Path
name|dirPath
init|=
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"dir1"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|dirPath
argument_list|)
expr_stmt|;
name|AclStatus
name|s
init|=
name|fs
operator|.
name|getAclStatus
argument_list|(
name|dirPath
argument_list|)
decl_stmt|;
name|AclEntry
index|[]
name|returned
init|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|AclEntry
index|[]
block|{ }
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
name|dirPath
argument_list|,
operator|(
name|short
operator|)
literal|0755
argument_list|)
expr_stmt|;
name|assertAclFeature
argument_list|(
name|dirPath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefaultMinimalAclNewDir ()
specifier|public
name|void
name|testDefaultMinimalAclNewDir
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0750
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|OTHER
argument_list|,
name|NONE
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setAcl
argument_list|(
name|path
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|Path
name|dirPath
init|=
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"dir1"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|dirPath
argument_list|)
expr_stmt|;
name|AclStatus
name|s
init|=
name|fs
operator|.
name|getAclStatus
argument_list|(
name|dirPath
argument_list|)
decl_stmt|;
name|AclEntry
index|[]
name|returned
init|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|OTHER
argument_list|,
name|NONE
argument_list|)
block|}
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
name|dirPath
argument_list|,
operator|(
name|short
operator|)
literal|010750
argument_list|)
expr_stmt|;
name|assertAclFeature
argument_list|(
name|dirPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefaultAclNewFileIntermediate ()
specifier|public
name|void
name|testDefaultAclNewFileIntermediate
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0750
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setAcl
argument_list|(
name|path
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|Path
name|dirPath
init|=
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"dir1"
argument_list|)
decl_stmt|;
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|dirPath
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|create
argument_list|(
name|filePath
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|AclEntry
index|[]
name|expected
init|=
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|MASK
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|OTHER
argument_list|,
name|NONE
argument_list|)
block|}
decl_stmt|;
name|AclStatus
name|s
init|=
name|fs
operator|.
name|getAclStatus
argument_list|(
name|dirPath
argument_list|)
decl_stmt|;
name|AclEntry
index|[]
name|returned
init|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
name|dirPath
argument_list|,
operator|(
name|short
operator|)
literal|010750
argument_list|)
expr_stmt|;
name|assertAclFeature
argument_list|(
name|dirPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|expected
operator|=
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
block|}
expr_stmt|;
name|s
operator|=
name|fs
operator|.
name|getAclStatus
argument_list|(
name|filePath
argument_list|)
expr_stmt|;
name|returned
operator|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
name|filePath
argument_list|,
operator|(
name|short
operator|)
literal|010640
argument_list|)
expr_stmt|;
name|assertAclFeature
argument_list|(
name|filePath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefaultAclNewDirIntermediate ()
specifier|public
name|void
name|testDefaultAclNewDirIntermediate
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0750
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setAcl
argument_list|(
name|path
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|Path
name|dirPath
init|=
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"dir1"
argument_list|)
decl_stmt|;
name|Path
name|subdirPath
init|=
operator|new
name|Path
argument_list|(
name|dirPath
argument_list|,
literal|"subdir1"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|subdirPath
argument_list|)
expr_stmt|;
name|AclEntry
index|[]
name|expected
init|=
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|MASK
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|OTHER
argument_list|,
name|NONE
argument_list|)
block|}
decl_stmt|;
name|AclStatus
name|s
init|=
name|fs
operator|.
name|getAclStatus
argument_list|(
name|dirPath
argument_list|)
decl_stmt|;
name|AclEntry
index|[]
name|returned
init|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
name|dirPath
argument_list|,
operator|(
name|short
operator|)
literal|010750
argument_list|)
expr_stmt|;
name|assertAclFeature
argument_list|(
name|dirPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|s
operator|=
name|fs
operator|.
name|getAclStatus
argument_list|(
name|subdirPath
argument_list|)
expr_stmt|;
name|returned
operator|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
name|subdirPath
argument_list|,
operator|(
name|short
operator|)
literal|010750
argument_list|)
expr_stmt|;
name|assertAclFeature
argument_list|(
name|subdirPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefaultAclNewSymlinkIntermediate ()
specifier|public
name|void
name|testDefaultAclNewSymlinkIntermediate
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0750
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|create
argument_list|(
name|filePath
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|filePath
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0640
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setAcl
argument_list|(
name|path
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|Path
name|dirPath
init|=
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"dir1"
argument_list|)
decl_stmt|;
name|Path
name|linkPath
init|=
operator|new
name|Path
argument_list|(
name|dirPath
argument_list|,
literal|"link1"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|createSymlink
argument_list|(
name|filePath
argument_list|,
name|linkPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|AclEntry
index|[]
name|expected
init|=
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|MASK
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|OTHER
argument_list|,
name|NONE
argument_list|)
block|}
decl_stmt|;
name|AclStatus
name|s
init|=
name|fs
operator|.
name|getAclStatus
argument_list|(
name|dirPath
argument_list|)
decl_stmt|;
name|AclEntry
index|[]
name|returned
init|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
name|dirPath
argument_list|,
operator|(
name|short
operator|)
literal|010750
argument_list|)
expr_stmt|;
name|assertAclFeature
argument_list|(
name|dirPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|expected
operator|=
operator|new
name|AclEntry
index|[]
block|{ }
expr_stmt|;
name|s
operator|=
name|fs
operator|.
name|getAclStatus
argument_list|(
name|linkPath
argument_list|)
expr_stmt|;
name|returned
operator|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
name|linkPath
argument_list|,
operator|(
name|short
operator|)
literal|0640
argument_list|)
expr_stmt|;
name|assertAclFeature
argument_list|(
name|linkPath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|s
operator|=
name|fs
operator|.
name|getAclStatus
argument_list|(
name|filePath
argument_list|)
expr_stmt|;
name|returned
operator|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
name|filePath
argument_list|,
operator|(
name|short
operator|)
literal|0640
argument_list|)
expr_stmt|;
name|assertAclFeature
argument_list|(
name|filePath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefaultAclNewFileWithMode ()
specifier|public
name|void
name|testDefaultAclNewFileWithMode
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0755
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setAcl
argument_list|(
name|path
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
name|int
name|bufferSize
init|=
name|cluster
operator|.
name|getConfiguration
argument_list|(
literal|0
argument_list|)
operator|.
name|getInt
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IO_FILE_BUFFER_SIZE_KEY
argument_list|,
name|CommonConfigurationKeys
operator|.
name|IO_FILE_BUFFER_SIZE_DEFAULT
argument_list|)
decl_stmt|;
name|fs
operator|.
name|create
argument_list|(
name|filePath
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0740
argument_list|)
argument_list|,
literal|false
argument_list|,
name|bufferSize
argument_list|,
name|fs
operator|.
name|getDefaultReplication
argument_list|(
name|filePath
argument_list|)
argument_list|,
name|fs
operator|.
name|getDefaultBlockSize
argument_list|(
name|path
argument_list|)
argument_list|,
literal|null
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|AclStatus
name|s
init|=
name|fs
operator|.
name|getAclStatus
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
name|AclEntry
index|[]
name|returned
init|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
block|}
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
name|filePath
argument_list|,
operator|(
name|short
operator|)
literal|010740
argument_list|)
expr_stmt|;
name|assertAclFeature
argument_list|(
name|filePath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefaultAclNewDirWithMode ()
specifier|public
name|void
name|testDefaultAclNewDirWithMode
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0755
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setAcl
argument_list|(
name|path
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|Path
name|dirPath
init|=
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"dir1"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|dirPath
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0740
argument_list|)
argument_list|)
expr_stmt|;
name|AclStatus
name|s
init|=
name|fs
operator|.
name|getAclStatus
argument_list|(
name|dirPath
argument_list|)
decl_stmt|;
name|AclEntry
index|[]
name|returned
init|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|MASK
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|OTHER
argument_list|,
name|READ_EXECUTE
argument_list|)
block|}
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
name|dirPath
argument_list|,
operator|(
name|short
operator|)
literal|010740
argument_list|)
expr_stmt|;
name|assertAclFeature
argument_list|(
name|dirPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefaultAclRenamedFile ()
specifier|public
name|void
name|testDefaultAclRenamedFile
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|dirPath
init|=
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"dir"
argument_list|)
decl_stmt|;
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|dirPath
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0750
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setAcl
argument_list|(
name|dirPath
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|create
argument_list|(
name|filePath
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|filePath
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0640
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|renamedFilePath
init|=
operator|new
name|Path
argument_list|(
name|dirPath
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|rename
argument_list|(
name|filePath
argument_list|,
name|renamedFilePath
argument_list|)
expr_stmt|;
name|AclEntry
index|[]
name|expected
init|=
operator|new
name|AclEntry
index|[]
block|{ }
decl_stmt|;
name|AclStatus
name|s
init|=
name|fs
operator|.
name|getAclStatus
argument_list|(
name|renamedFilePath
argument_list|)
decl_stmt|;
name|AclEntry
index|[]
name|returned
init|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
name|renamedFilePath
argument_list|,
operator|(
name|short
operator|)
literal|0640
argument_list|)
expr_stmt|;
name|assertAclFeature
argument_list|(
name|renamedFilePath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefaultAclRenamedDir ()
specifier|public
name|void
name|testDefaultAclRenamedDir
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|dirPath
init|=
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"dir"
argument_list|)
decl_stmt|;
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|dirPath
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0750
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setAcl
argument_list|(
name|dirPath
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|Path
name|subdirPath
init|=
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"subdir"
argument_list|)
decl_stmt|;
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|subdirPath
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0750
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|renamedSubdirPath
init|=
operator|new
name|Path
argument_list|(
name|dirPath
argument_list|,
literal|"subdir"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|rename
argument_list|(
name|subdirPath
argument_list|,
name|renamedSubdirPath
argument_list|)
expr_stmt|;
name|AclEntry
index|[]
name|expected
init|=
operator|new
name|AclEntry
index|[]
block|{ }
decl_stmt|;
name|AclStatus
name|s
init|=
name|fs
operator|.
name|getAclStatus
argument_list|(
name|renamedSubdirPath
argument_list|)
decl_stmt|;
name|AclEntry
index|[]
name|returned
init|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
name|renamedSubdirPath
argument_list|,
operator|(
name|short
operator|)
literal|0750
argument_list|)
expr_stmt|;
name|assertAclFeature
argument_list|(
name|renamedSubdirPath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSkipAclEnforcementPermsDisabled ()
specifier|public
name|void
name|testSkipAclEnforcementPermsDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|bruceDir
init|=
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"bruce"
argument_list|)
decl_stmt|;
name|Path
name|bruceFile
init|=
operator|new
name|Path
argument_list|(
name|bruceDir
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|bruceDir
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setOwner
argument_list|(
name|bruceDir
argument_list|,
literal|"bruce"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fsAsBruce
operator|.
name|create
argument_list|(
name|bruceFile
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|fsAsBruce
operator|.
name|modifyAclEntries
argument_list|(
name|bruceFile
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"diana"
argument_list|,
name|NONE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFilePermissionDenied
argument_list|(
name|fsAsDiana
argument_list|,
name|DIANA
argument_list|,
name|bruceFile
argument_list|)
expr_stmt|;
try|try
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_PERMISSIONS_ENABLED_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|restartCluster
argument_list|()
expr_stmt|;
name|assertFilePermissionGranted
argument_list|(
name|fsAsDiana
argument_list|,
name|DIANA
argument_list|,
name|bruceFile
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_PERMISSIONS_ENABLED_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|restartCluster
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSkipAclEnforcementSuper ()
specifier|public
name|void
name|testSkipAclEnforcementSuper
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|bruceDir
init|=
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"bruce"
argument_list|)
decl_stmt|;
name|Path
name|bruceFile
init|=
operator|new
name|Path
argument_list|(
name|bruceDir
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|bruceDir
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setOwner
argument_list|(
name|bruceDir
argument_list|,
literal|"bruce"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fsAsBruce
operator|.
name|create
argument_list|(
name|bruceFile
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|fsAsBruce
operator|.
name|modifyAclEntries
argument_list|(
name|bruceFile
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"diana"
argument_list|,
name|NONE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFilePermissionGranted
argument_list|(
name|fs
argument_list|,
name|DIANA
argument_list|,
name|bruceFile
argument_list|)
expr_stmt|;
name|assertFilePermissionGranted
argument_list|(
name|fsAsBruce
argument_list|,
name|DIANA
argument_list|,
name|bruceFile
argument_list|)
expr_stmt|;
name|assertFilePermissionDenied
argument_list|(
name|fsAsDiana
argument_list|,
name|DIANA
argument_list|,
name|bruceFile
argument_list|)
expr_stmt|;
name|assertFilePermissionGranted
argument_list|(
name|fsAsSupergroupMember
argument_list|,
name|SUPERGROUP_MEMBER
argument_list|,
name|bruceFile
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testModifyAclEntriesMustBeOwnerOrSuper ()
specifier|public
name|void
name|testModifyAclEntriesMustBeOwnerOrSuper
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|bruceDir
init|=
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"bruce"
argument_list|)
decl_stmt|;
name|Path
name|bruceFile
init|=
operator|new
name|Path
argument_list|(
name|bruceDir
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|bruceDir
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setOwner
argument_list|(
name|bruceDir
argument_list|,
literal|"bruce"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fsAsBruce
operator|.
name|create
argument_list|(
name|bruceFile
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"diana"
argument_list|,
name|ALL
argument_list|)
argument_list|)
decl_stmt|;
name|fsAsBruce
operator|.
name|modifyAclEntries
argument_list|(
name|bruceFile
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|fs
operator|.
name|modifyAclEntries
argument_list|(
name|bruceFile
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|fsAsSupergroupMember
operator|.
name|modifyAclEntries
argument_list|(
name|bruceFile
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|AccessControlException
operator|.
name|class
argument_list|)
expr_stmt|;
name|fsAsDiana
operator|.
name|modifyAclEntries
argument_list|(
name|bruceFile
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemoveAclEntriesMustBeOwnerOrSuper ()
specifier|public
name|void
name|testRemoveAclEntriesMustBeOwnerOrSuper
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|bruceDir
init|=
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"bruce"
argument_list|)
decl_stmt|;
name|Path
name|bruceFile
init|=
operator|new
name|Path
argument_list|(
name|bruceDir
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|bruceDir
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setOwner
argument_list|(
name|bruceDir
argument_list|,
literal|"bruce"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fsAsBruce
operator|.
name|create
argument_list|(
name|bruceFile
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"diana"
argument_list|)
argument_list|)
decl_stmt|;
name|fsAsBruce
operator|.
name|removeAclEntries
argument_list|(
name|bruceFile
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|fs
operator|.
name|removeAclEntries
argument_list|(
name|bruceFile
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|fsAsSupergroupMember
operator|.
name|removeAclEntries
argument_list|(
name|bruceFile
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|AccessControlException
operator|.
name|class
argument_list|)
expr_stmt|;
name|fsAsDiana
operator|.
name|removeAclEntries
argument_list|(
name|bruceFile
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemoveDefaultAclMustBeOwnerOrSuper ()
specifier|public
name|void
name|testRemoveDefaultAclMustBeOwnerOrSuper
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|bruceDir
init|=
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"bruce"
argument_list|)
decl_stmt|;
name|Path
name|bruceFile
init|=
operator|new
name|Path
argument_list|(
name|bruceDir
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|bruceDir
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setOwner
argument_list|(
name|bruceDir
argument_list|,
literal|"bruce"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fsAsBruce
operator|.
name|create
argument_list|(
name|bruceFile
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|fsAsBruce
operator|.
name|removeDefaultAcl
argument_list|(
name|bruceFile
argument_list|)
expr_stmt|;
name|fs
operator|.
name|removeDefaultAcl
argument_list|(
name|bruceFile
argument_list|)
expr_stmt|;
name|fsAsSupergroupMember
operator|.
name|removeDefaultAcl
argument_list|(
name|bruceFile
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|AccessControlException
operator|.
name|class
argument_list|)
expr_stmt|;
name|fsAsDiana
operator|.
name|removeDefaultAcl
argument_list|(
name|bruceFile
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemoveAclMustBeOwnerOrSuper ()
specifier|public
name|void
name|testRemoveAclMustBeOwnerOrSuper
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|bruceDir
init|=
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"bruce"
argument_list|)
decl_stmt|;
name|Path
name|bruceFile
init|=
operator|new
name|Path
argument_list|(
name|bruceDir
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|bruceDir
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setOwner
argument_list|(
name|bruceDir
argument_list|,
literal|"bruce"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fsAsBruce
operator|.
name|create
argument_list|(
name|bruceFile
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|fsAsBruce
operator|.
name|removeAcl
argument_list|(
name|bruceFile
argument_list|)
expr_stmt|;
name|fs
operator|.
name|removeAcl
argument_list|(
name|bruceFile
argument_list|)
expr_stmt|;
name|fsAsSupergroupMember
operator|.
name|removeAcl
argument_list|(
name|bruceFile
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|AccessControlException
operator|.
name|class
argument_list|)
expr_stmt|;
name|fsAsDiana
operator|.
name|removeAcl
argument_list|(
name|bruceFile
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetAclMustBeOwnerOrSuper ()
specifier|public
name|void
name|testSetAclMustBeOwnerOrSuper
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|bruceDir
init|=
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"bruce"
argument_list|)
decl_stmt|;
name|Path
name|bruceFile
init|=
operator|new
name|Path
argument_list|(
name|bruceDir
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|bruceDir
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setOwner
argument_list|(
name|bruceDir
argument_list|,
literal|"bruce"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fsAsBruce
operator|.
name|create
argument_list|(
name|bruceFile
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
name|READ_WRITE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"diana"
argument_list|,
name|READ_WRITE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|OTHER
argument_list|,
name|READ
argument_list|)
argument_list|)
decl_stmt|;
name|fsAsBruce
operator|.
name|setAcl
argument_list|(
name|bruceFile
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setAcl
argument_list|(
name|bruceFile
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|fsAsSupergroupMember
operator|.
name|setAcl
argument_list|(
name|bruceFile
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|AccessControlException
operator|.
name|class
argument_list|)
expr_stmt|;
name|fsAsDiana
operator|.
name|setAcl
argument_list|(
name|bruceFile
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetAclStatusRequiresTraverseOrSuper ()
specifier|public
name|void
name|testGetAclStatusRequiresTraverseOrSuper
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|bruceDir
init|=
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"bruce"
argument_list|)
decl_stmt|;
name|Path
name|bruceFile
init|=
operator|new
name|Path
argument_list|(
name|bruceDir
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|bruceDir
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setOwner
argument_list|(
name|bruceDir
argument_list|,
literal|"bruce"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fsAsBruce
operator|.
name|create
argument_list|(
name|bruceFile
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|fsAsBruce
operator|.
name|setAcl
argument_list|(
name|bruceDir
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"diana"
argument_list|,
name|READ
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|NONE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|OTHER
argument_list|,
name|NONE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|fsAsBruce
operator|.
name|getAclStatus
argument_list|(
name|bruceFile
argument_list|)
expr_stmt|;
name|fs
operator|.
name|getAclStatus
argument_list|(
name|bruceFile
argument_list|)
expr_stmt|;
name|fsAsSupergroupMember
operator|.
name|getAclStatus
argument_list|(
name|bruceFile
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|AccessControlException
operator|.
name|class
argument_list|)
expr_stmt|;
name|fsAsDiana
operator|.
name|getAclStatus
argument_list|(
name|bruceFile
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAccess ()
specifier|public
name|void
name|testAccess
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Path
name|p1
init|=
operator|new
name|Path
argument_list|(
literal|"/p1"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|p1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setOwner
argument_list|(
name|p1
argument_list|,
name|BRUCE
operator|.
name|getShortUserName
argument_list|()
argument_list|,
literal|"groupX"
argument_list|)
expr_stmt|;
name|fsAsBruce
operator|.
name|setAcl
argument_list|(
name|p1
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
name|READ
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"bruce"
argument_list|,
name|READ
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|NONE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|OTHER
argument_list|,
name|NONE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|fsAsBruce
operator|.
name|access
argument_list|(
name|p1
argument_list|,
name|FsAction
operator|.
name|READ
argument_list|)
expr_stmt|;
try|try
block|{
name|fsAsBruce
operator|.
name|access
argument_list|(
name|p1
argument_list|,
name|FsAction
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"The access call should have failed."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|Path
name|badPath
init|=
operator|new
name|Path
argument_list|(
literal|"/bad/bad"
argument_list|)
decl_stmt|;
try|try
block|{
name|fsAsBruce
operator|.
name|access
argument_list|(
name|badPath
argument_list|,
name|FsAction
operator|.
name|READ
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"The access call should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
comment|// expected
block|}
comment|// Add a named group entry with only READ access
name|fsAsBruce
operator|.
name|modifyAclEntries
argument_list|(
name|p1
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
literal|"groupY"
argument_list|,
name|READ
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now bob should have read access, but not write
name|fsAsBob
operator|.
name|access
argument_list|(
name|p1
argument_list|,
name|READ
argument_list|)
expr_stmt|;
try|try
block|{
name|fsAsBob
operator|.
name|access
argument_list|(
name|p1
argument_list|,
name|WRITE
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"The access call should have failed."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// expected;
block|}
comment|// Add another named group entry with WRITE access
name|fsAsBruce
operator|.
name|modifyAclEntries
argument_list|(
name|p1
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
literal|"groupZ"
argument_list|,
name|WRITE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now bob should have write access
name|fsAsBob
operator|.
name|access
argument_list|(
name|p1
argument_list|,
name|WRITE
argument_list|)
expr_stmt|;
comment|// Add a named user entry to deny bob
name|fsAsBruce
operator|.
name|modifyAclEntries
argument_list|(
name|p1
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"bob"
argument_list|,
name|NONE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|fsAsBob
operator|.
name|access
argument_list|(
name|p1
argument_list|,
name|READ
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"The access call should have failed."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// expected;
block|}
block|}
annotation|@
name|Test
DECL|method|testEffectiveAccess ()
specifier|public
name|void
name|testEffectiveAccess
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|p1
init|=
operator|new
name|Path
argument_list|(
literal|"/testEffectiveAccess"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|p1
argument_list|)
expr_stmt|;
comment|// give all access at first
name|fs
operator|.
name|setPermission
argument_list|(
name|p1
argument_list|,
name|FsPermission
operator|.
name|valueOf
argument_list|(
literal|"-rwxrwxrwx"
argument_list|)
argument_list|)
expr_stmt|;
name|AclStatus
name|aclStatus
init|=
name|fs
operator|.
name|getAclStatus
argument_list|(
name|p1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Entries should be empty"
argument_list|,
literal|0
argument_list|,
name|aclStatus
operator|.
name|getEntries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Permission should be carried by AclStatus"
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p1
argument_list|)
operator|.
name|getPermission
argument_list|()
argument_list|,
name|aclStatus
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add a named entries with all access
name|fs
operator|.
name|modifyAclEntries
argument_list|(
name|p1
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"bruce"
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
literal|"groupY"
argument_list|,
name|ALL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|aclStatus
operator|=
name|fs
operator|.
name|getAclStatus
argument_list|(
name|p1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Entries should contain owner group entry also"
argument_list|,
literal|3
argument_list|,
name|aclStatus
operator|.
name|getEntries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// restrict the access
name|fs
operator|.
name|setPermission
argument_list|(
name|p1
argument_list|,
name|FsPermission
operator|.
name|valueOf
argument_list|(
literal|"-rwxr-----"
argument_list|)
argument_list|)
expr_stmt|;
comment|// latest permissions should be reflected as effective permission
name|aclStatus
operator|=
name|fs
operator|.
name|getAclStatus
argument_list|(
name|p1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|entries
init|=
name|aclStatus
operator|.
name|getEntries
argument_list|()
decl_stmt|;
for|for
control|(
name|AclEntry
name|aclEntry
range|:
name|entries
control|)
block|{
if|if
condition|(
name|aclEntry
operator|.
name|getName
argument_list|()
operator|!=
literal|null
operator|||
name|aclEntry
operator|.
name|getType
argument_list|()
operator|==
name|GROUP
condition|)
block|{
name|assertEquals
argument_list|(
name|FsAction
operator|.
name|ALL
argument_list|,
name|aclEntry
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|FsAction
operator|.
name|READ
argument_list|,
name|aclStatus
operator|.
name|getEffectivePermission
argument_list|(
name|aclEntry
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|fsAsBruce
operator|.
name|access
argument_list|(
name|p1
argument_list|,
name|READ
argument_list|)
expr_stmt|;
try|try
block|{
name|fsAsBruce
operator|.
name|access
argument_list|(
name|p1
argument_list|,
name|WRITE
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Access should not be given"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|fsAsBob
operator|.
name|access
argument_list|(
name|p1
argument_list|,
name|READ
argument_list|)
expr_stmt|;
try|try
block|{
name|fsAsBob
operator|.
name|access
argument_list|(
name|p1
argument_list|,
name|WRITE
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Access should not be given"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
comment|/**    * Verify the de-duplication of AclFeatures with same entries.    *    * @throws Exception    */
annotation|@
name|Test
DECL|method|testDeDuplication ()
specifier|public
name|void
name|testDeDuplication
parameter_list|()
throws|throws
name|Exception
block|{
comment|// This test needs to verify the count of the references which is held by
comment|// static data structure. So shutting down entire cluster to get the fresh
comment|// data.
name|shutdown
argument_list|()
expr_stmt|;
name|AclStorage
operator|.
name|getUniqueAclFeatures
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|startCluster
argument_list|()
expr_stmt|;
name|setUp
argument_list|()
expr_stmt|;
name|int
name|currentSize
init|=
literal|0
decl_stmt|;
name|Path
name|p1
init|=
operator|new
name|Path
argument_list|(
literal|"/testDeduplication"
argument_list|)
decl_stmt|;
block|{
comment|// unique default AclEntries for this test
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"testdeduplicateuser"
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|GROUP
argument_list|,
literal|"testdeduplicategroup"
argument_list|,
name|ALL
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|p1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|modifyAclEntries
argument_list|(
name|p1
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"One more ACL feature should be unique"
argument_list|,
name|currentSize
operator|+
literal|1
argument_list|,
name|AclStorage
operator|.
name|getUniqueAclFeatures
argument_list|()
operator|.
name|getUniqueElementsSize
argument_list|()
argument_list|)
expr_stmt|;
name|currentSize
operator|++
expr_stmt|;
block|}
name|Path
name|child1
init|=
operator|new
name|Path
argument_list|(
name|p1
argument_list|,
literal|"child1"
argument_list|)
decl_stmt|;
name|AclFeature
name|child1AclFeature
decl_stmt|;
block|{
comment|// new child dir should copy entries from its parent.
name|fs
operator|.
name|mkdirs
argument_list|(
name|child1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"One more ACL feature should be unique"
argument_list|,
name|currentSize
operator|+
literal|1
argument_list|,
name|AclStorage
operator|.
name|getUniqueAclFeatures
argument_list|()
operator|.
name|getUniqueElementsSize
argument_list|()
argument_list|)
expr_stmt|;
name|child1AclFeature
operator|=
name|getAclFeature
argument_list|(
name|child1
argument_list|,
name|cluster
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Reference count should be 1"
argument_list|,
literal|1
argument_list|,
name|child1AclFeature
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
name|currentSize
operator|++
expr_stmt|;
block|}
name|Path
name|child2
init|=
operator|new
name|Path
argument_list|(
name|p1
argument_list|,
literal|"child2"
argument_list|)
decl_stmt|;
block|{
comment|// new child dir should copy entries from its parent. But all entries are
comment|// same as its sibling without any more acl changes.
name|fs
operator|.
name|mkdirs
argument_list|(
name|child2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"existing AclFeature should be re-used"
argument_list|,
name|currentSize
argument_list|,
name|AclStorage
operator|.
name|getUniqueAclFeatures
argument_list|()
operator|.
name|getUniqueElementsSize
argument_list|()
argument_list|)
expr_stmt|;
name|AclFeature
name|child2AclFeature
init|=
name|getAclFeature
argument_list|(
name|child1
argument_list|,
name|cluster
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
literal|"Same Aclfeature should be re-used"
argument_list|,
name|child1AclFeature
argument_list|,
name|child2AclFeature
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Reference count should be 2"
argument_list|,
literal|2
argument_list|,
name|child2AclFeature
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
comment|// modification of ACL on should decrement the original reference count
comment|// and increase new one.
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"user1"
argument_list|,
name|ALL
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|modifyAclEntries
argument_list|(
name|child1
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|AclFeature
name|modifiedAclFeature
init|=
name|getAclFeature
argument_list|(
name|child1
argument_list|,
name|cluster
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Old Reference count should be 1"
argument_list|,
literal|1
argument_list|,
name|child1AclFeature
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"New Reference count should be 1"
argument_list|,
literal|1
argument_list|,
name|modifiedAclFeature
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// removing the new added ACL entry should refer to old ACLfeature
name|AclEntry
name|aclEntry
init|=
operator|new
name|AclEntry
operator|.
name|Builder
argument_list|()
operator|.
name|setScope
argument_list|(
name|ACCESS
argument_list|)
operator|.
name|setType
argument_list|(
name|USER
argument_list|)
operator|.
name|setName
argument_list|(
literal|"user1"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|fs
operator|.
name|removeAclEntries
argument_list|(
name|child1
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Old Reference count should be 2 again"
argument_list|,
literal|2
argument_list|,
name|child1AclFeature
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"New Reference count should be 0"
argument_list|,
literal|0
argument_list|,
name|modifiedAclFeature
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
comment|// verify the reference count on deletion of Acls
name|fs
operator|.
name|removeAcl
argument_list|(
name|child2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Reference count should be 1"
argument_list|,
literal|1
argument_list|,
name|child1AclFeature
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
comment|// verify the reference count on deletion of dir with ACL
name|fs
operator|.
name|delete
argument_list|(
name|child1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Reference count should be 0"
argument_list|,
literal|0
argument_list|,
name|child1AclFeature
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
name|p1
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
name|Path
name|file2
init|=
operator|new
name|Path
argument_list|(
name|p1
argument_list|,
literal|"file2"
argument_list|)
decl_stmt|;
name|AclFeature
name|fileAclFeature
decl_stmt|;
block|{
comment|// Using same reference on creation of file
name|fs
operator|.
name|create
argument_list|(
name|file1
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|fileAclFeature
operator|=
name|getAclFeature
argument_list|(
name|file1
argument_list|,
name|cluster
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Reference count should be 1"
argument_list|,
literal|1
argument_list|,
name|fileAclFeature
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|create
argument_list|(
name|file2
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Reference count should be 2"
argument_list|,
literal|2
argument_list|,
name|fileAclFeature
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
comment|// modifying ACLs on file should decrease the reference count on old
comment|// instance and increase on the new instance
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"user1"
argument_list|,
name|ALL
argument_list|)
argument_list|)
decl_stmt|;
comment|// adding new ACL entry
name|fs
operator|.
name|modifyAclEntries
argument_list|(
name|file1
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|AclFeature
name|modifiedFileAcl
init|=
name|getAclFeature
argument_list|(
name|file1
argument_list|,
name|cluster
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Old Reference count should be 1"
argument_list|,
literal|1
argument_list|,
name|fileAclFeature
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"New Reference count should be 1"
argument_list|,
literal|1
argument_list|,
name|modifiedFileAcl
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// removing the new added ACL entry should refer to old ACLfeature
name|AclEntry
name|aclEntry
init|=
operator|new
name|AclEntry
operator|.
name|Builder
argument_list|()
operator|.
name|setScope
argument_list|(
name|ACCESS
argument_list|)
operator|.
name|setType
argument_list|(
name|USER
argument_list|)
operator|.
name|setName
argument_list|(
literal|"user1"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|fs
operator|.
name|removeAclEntries
argument_list|(
name|file1
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Old Reference count should be 2"
argument_list|,
literal|2
argument_list|,
name|fileAclFeature
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"New Reference count should be 0"
argument_list|,
literal|0
argument_list|,
name|modifiedFileAcl
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
comment|// reference count should be decreased on deletion of files with ACLs
name|fs
operator|.
name|delete
argument_list|(
name|file2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Reference count should be decreased on delete of the file"
argument_list|,
literal|1
argument_list|,
name|fileAclFeature
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|file1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Reference count should be decreased on delete of the file"
argument_list|,
literal|0
argument_list|,
name|fileAclFeature
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// On reference count reaches 0 instance should be removed from map
name|fs
operator|.
name|create
argument_list|(
name|file1
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|AclFeature
name|newFileAclFeature
init|=
name|getAclFeature
argument_list|(
name|file1
argument_list|,
name|cluster
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
literal|"Instance should be different on reference count 0"
argument_list|,
name|fileAclFeature
argument_list|,
name|newFileAclFeature
argument_list|)
expr_stmt|;
name|fileAclFeature
operator|=
name|newFileAclFeature
expr_stmt|;
block|}
name|Map
argument_list|<
name|AclFeature
argument_list|,
name|Integer
argument_list|>
name|restartRefCounter
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Restart the Namenode to check the references.
comment|// Here reference counts will not be same after restart because, while
comment|// shutting down namenode will not call any removal of AclFeature.
comment|// However this is applicable only in case of tests as in real-cluster JVM
comment|// itself will be new.
name|List
argument_list|<
name|AclFeature
argument_list|>
name|entriesBeforeRestart
init|=
name|AclStorage
operator|.
name|getUniqueAclFeatures
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
block|{
comment|//restart by loading edits
for|for
control|(
name|AclFeature
name|aclFeature
range|:
name|entriesBeforeRestart
control|)
block|{
name|restartRefCounter
operator|.
name|put
argument_list|(
name|aclFeature
argument_list|,
name|aclFeature
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|cluster
operator|.
name|restartNameNode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclFeature
argument_list|>
name|entriesAfterRestart
init|=
name|AclStorage
operator|.
name|getUniqueAclFeatures
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Entries before and after should be same"
argument_list|,
name|entriesBeforeRestart
argument_list|,
name|entriesAfterRestart
argument_list|)
expr_stmt|;
for|for
control|(
name|AclFeature
name|aclFeature
range|:
name|entriesAfterRestart
control|)
block|{
name|int
name|before
init|=
name|restartRefCounter
operator|.
name|get
argument_list|(
name|aclFeature
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"ReferenceCount After Restart should be doubled"
argument_list|,
name|before
operator|*
literal|2
argument_list|,
name|aclFeature
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|{
comment|//restart by loading fsimage
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
operator|.
name|saveNamespace
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_LEAVE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|restartNameNode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclFeature
argument_list|>
name|entriesAfterRestart
init|=
name|AclStorage
operator|.
name|getUniqueAclFeatures
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Entries before and after should be same"
argument_list|,
name|entriesBeforeRestart
argument_list|,
name|entriesAfterRestart
argument_list|)
expr_stmt|;
for|for
control|(
name|AclFeature
name|aclFeature
range|:
name|entriesAfterRestart
control|)
block|{
name|int
name|before
init|=
name|restartRefCounter
operator|.
name|get
argument_list|(
name|aclFeature
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"ReferenceCount After 2 Restarts should be tripled"
argument_list|,
name|before
operator|*
literal|3
argument_list|,
name|aclFeature
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Creates a FileSystem for the super-user.    *    * @return FileSystem for super-user    * @throws Exception if creation fails    */
DECL|method|createFileSystem ()
specifier|protected
name|FileSystem
name|createFileSystem
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|cluster
operator|.
name|getFileSystem
argument_list|()
return|;
block|}
comment|/**    * Creates a FileSystem for a specific user.    *    * @param user UserGroupInformation specific user    * @return FileSystem for specific user    * @throws Exception if creation fails    */
DECL|method|createFileSystem (UserGroupInformation user)
specifier|protected
name|FileSystem
name|createFileSystem
parameter_list|(
name|UserGroupInformation
name|user
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|DFSTestUtil
operator|.
name|getFileSystemAs
argument_list|(
name|user
argument_list|,
name|cluster
operator|.
name|getConfiguration
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Initializes all FileSystem instances used in the tests.    *    * @throws Exception if initialization fails    */
DECL|method|initFileSystems ()
specifier|private
name|void
name|initFileSystems
parameter_list|()
throws|throws
name|Exception
block|{
name|fs
operator|=
name|createFileSystem
argument_list|()
expr_stmt|;
name|fsAsBruce
operator|=
name|createFileSystem
argument_list|(
name|BRUCE
argument_list|)
expr_stmt|;
name|fsAsDiana
operator|=
name|createFileSystem
argument_list|(
name|DIANA
argument_list|)
expr_stmt|;
name|fsAsBob
operator|=
name|createFileSystem
argument_list|(
name|BOB
argument_list|)
expr_stmt|;
name|fsAsSupergroupMember
operator|=
name|createFileSystem
argument_list|(
name|SUPERGROUP_MEMBER
argument_list|)
expr_stmt|;
block|}
comment|/**    * Restarts the cluster without formatting, so all data is preserved.    *    * @throws Exception if restart fails    */
DECL|method|restartCluster ()
specifier|private
name|void
name|restartCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|destroyFileSystems
argument_list|()
expr_stmt|;
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|format
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|initFileSystems
argument_list|()
expr_stmt|;
block|}
comment|/**    * Asserts whether or not the inode for the test path has an AclFeature.    *    * @param expectAclFeature boolean true if an AclFeature must be present,    *   false if an AclFeature must not be present    * @throws IOException thrown if there is an I/O error    */
DECL|method|assertAclFeature (boolean expectAclFeature)
specifier|private
specifier|static
name|void
name|assertAclFeature
parameter_list|(
name|boolean
name|expectAclFeature
parameter_list|)
throws|throws
name|IOException
block|{
name|assertAclFeature
argument_list|(
name|path
argument_list|,
name|expectAclFeature
argument_list|)
expr_stmt|;
block|}
DECL|method|assertAclFeature (Path pathToCheck, boolean expectAclFeature)
specifier|private
specifier|static
name|void
name|assertAclFeature
parameter_list|(
name|Path
name|pathToCheck
parameter_list|,
name|boolean
name|expectAclFeature
parameter_list|)
throws|throws
name|IOException
block|{
name|assertAclFeature
argument_list|(
name|cluster
argument_list|,
name|pathToCheck
argument_list|,
name|expectAclFeature
argument_list|)
expr_stmt|;
block|}
comment|/**    * Asserts whether or not the inode for a specific path has an AclFeature.    *    * @param miniCluster the cluster into which the path resides    * @param pathToCheck Path inode to check    * @param expectAclFeature boolean true if an AclFeature must be present,    *   false if an AclFeature must not be present    * @throws IOException thrown if there is an I/O error    */
DECL|method|assertAclFeature (final MiniDFSCluster miniCluster, Path pathToCheck, boolean expectAclFeature)
specifier|public
specifier|static
name|void
name|assertAclFeature
parameter_list|(
specifier|final
name|MiniDFSCluster
name|miniCluster
parameter_list|,
name|Path
name|pathToCheck
parameter_list|,
name|boolean
name|expectAclFeature
parameter_list|)
throws|throws
name|IOException
block|{
name|AclFeature
name|aclFeature
init|=
name|getAclFeature
argument_list|(
name|pathToCheck
argument_list|,
name|miniCluster
argument_list|)
decl_stmt|;
if|if
condition|(
name|expectAclFeature
condition|)
block|{
name|assertNotNull
argument_list|(
name|aclFeature
argument_list|)
expr_stmt|;
comment|// Intentionally capturing a reference to the entries, not using nested
comment|// calls.  This way, we get compile-time enforcement that the entries are
comment|// stored in an ImmutableList.
name|ImmutableList
argument_list|<
name|AclEntry
argument_list|>
name|entries
init|=
name|AclStorage
operator|.
name|getEntriesFromAclFeature
argument_list|(
name|aclFeature
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|entries
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNull
argument_list|(
name|aclFeature
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get AclFeature for the path    */
DECL|method|getAclFeature (Path pathToCheck, MiniDFSCluster cluster)
specifier|public
specifier|static
name|AclFeature
name|getAclFeature
parameter_list|(
name|Path
name|pathToCheck
parameter_list|,
name|MiniDFSCluster
name|cluster
parameter_list|)
throws|throws
name|IOException
block|{
name|INode
name|inode
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getFSDirectory
argument_list|()
operator|.
name|getINode
argument_list|(
name|pathToCheck
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|DirOp
operator|.
name|READ_LINK
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|inode
argument_list|)
expr_stmt|;
name|AclFeature
name|aclFeature
init|=
name|inode
operator|.
name|getAclFeature
argument_list|()
decl_stmt|;
return|return
name|aclFeature
return|;
block|}
comment|/**    * Asserts the value of the FsPermission bits on the inode of the test path.    *    * @param perm short expected permission bits    * @throws IOException thrown if there is an I/O error    */
DECL|method|assertPermission (short perm)
specifier|private
name|void
name|assertPermission
parameter_list|(
name|short
name|perm
parameter_list|)
throws|throws
name|IOException
block|{
name|assertPermission
argument_list|(
name|path
argument_list|,
name|perm
argument_list|)
expr_stmt|;
block|}
comment|/**    * Asserts the value of the FsPermission bits on the inode of a specific path.    *    * @param pathToCheck Path inode to check    * @param perm short expected permission bits    * @throws IOException thrown if there is an I/O error    */
DECL|method|assertPermission (Path pathToCheck, short perm)
specifier|private
name|void
name|assertPermission
parameter_list|(
name|Path
name|pathToCheck
parameter_list|,
name|short
name|perm
parameter_list|)
throws|throws
name|IOException
block|{
name|AclTestHelpers
operator|.
name|assertPermission
argument_list|(
name|fs
argument_list|,
name|pathToCheck
argument_list|,
name|perm
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

