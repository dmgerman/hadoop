begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|PacketHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestDFSPacket
specifier|public
class|class
name|TestDFSPacket
block|{
DECL|field|chunkSize
specifier|private
specifier|static
specifier|final
name|int
name|chunkSize
init|=
literal|512
decl_stmt|;
DECL|field|checksumSize
specifier|private
specifier|static
specifier|final
name|int
name|checksumSize
init|=
literal|4
decl_stmt|;
DECL|field|maxChunksPerPacket
specifier|private
specifier|static
specifier|final
name|int
name|maxChunksPerPacket
init|=
literal|4
decl_stmt|;
annotation|@
name|Test
DECL|method|testPacket ()
specifier|public
name|void
name|testPacket
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|12345L
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|chunkSize
index|]
decl_stmt|;
name|r
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|byte
index|[]
name|checksum
init|=
operator|new
name|byte
index|[
name|checksumSize
index|]
decl_stmt|;
name|r
operator|.
name|nextBytes
argument_list|(
name|checksum
argument_list|)
expr_stmt|;
name|DataOutputBuffer
name|os
init|=
operator|new
name|DataOutputBuffer
argument_list|(
name|data
operator|.
name|length
operator|*
literal|2
argument_list|)
decl_stmt|;
name|byte
index|[]
name|packetBuf
init|=
operator|new
name|byte
index|[
name|data
operator|.
name|length
operator|*
literal|2
index|]
decl_stmt|;
name|DFSPacket
name|p
init|=
operator|new
name|DFSPacket
argument_list|(
name|packetBuf
argument_list|,
name|maxChunksPerPacket
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|checksumSize
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|p
operator|.
name|setSyncBlock
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|p
operator|.
name|writeData
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|p
operator|.
name|writeChecksum
argument_list|(
name|checksum
argument_list|,
literal|0
argument_list|,
name|checksum
operator|.
name|length
argument_list|)
expr_stmt|;
name|p
operator|.
name|writeTo
argument_list|(
name|os
argument_list|)
expr_stmt|;
comment|//we have set syncBlock to true, so the header has the maximum length
name|int
name|headerLen
init|=
name|PacketHeader
operator|.
name|PKT_MAX_HEADER_LEN
decl_stmt|;
name|byte
index|[]
name|readBuf
init|=
name|os
operator|.
name|getData
argument_list|()
decl_stmt|;
name|assertArrayRegionsEqual
argument_list|(
name|readBuf
argument_list|,
name|headerLen
argument_list|,
name|checksum
argument_list|,
literal|0
argument_list|,
name|checksum
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertArrayRegionsEqual
argument_list|(
name|readBuf
argument_list|,
name|headerLen
operator|+
name|checksum
operator|.
name|length
argument_list|,
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|assertArrayRegionsEqual (byte []buf1, int off1, byte []buf2, int off2, int len)
specifier|public
specifier|static
name|void
name|assertArrayRegionsEqual
parameter_list|(
name|byte
index|[]
name|buf1
parameter_list|,
name|int
name|off1
parameter_list|,
name|byte
index|[]
name|buf2
parameter_list|,
name|int
name|off2
parameter_list|,
name|int
name|len
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|buf1
index|[
name|off1
operator|+
name|i
index|]
operator|!=
name|buf2
index|[
name|off2
operator|+
name|i
index|]
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"arrays differ at byte "
operator|+
name|i
operator|+
literal|". "
operator|+
literal|"The first array has "
operator|+
operator|(
name|int
operator|)
name|buf1
index|[
name|off1
operator|+
name|i
index|]
operator|+
literal|", but the second array has "
operator|+
operator|(
name|int
operator|)
name|buf2
index|[
name|off2
operator|+
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

