begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
operator|.
name|DataNodeProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|BlockLocalPathInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNodeTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|impl
operator|.
name|TestInterDatanodeProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|LeaseManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNodeAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|EnumSetWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestLeaseRecovery
specifier|public
class|class
name|TestLeaseRecovery
block|{
DECL|field|BLOCK_SIZE
specifier|static
specifier|final
name|int
name|BLOCK_SIZE
init|=
literal|1024
decl_stmt|;
DECL|field|REPLICATION_NUM
specifier|static
specifier|final
name|short
name|REPLICATION_NUM
init|=
operator|(
name|short
operator|)
literal|3
decl_stmt|;
DECL|field|LEASE_PERIOD
specifier|private
specifier|static
specifier|final
name|long
name|LEASE_PERIOD
init|=
literal|300L
decl_stmt|;
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
annotation|@
name|After
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|checkMetaInfo (ExtendedBlock b, DataNode dn )
specifier|static
name|void
name|checkMetaInfo
parameter_list|(
name|ExtendedBlock
name|b
parameter_list|,
name|DataNode
name|dn
parameter_list|)
throws|throws
name|IOException
block|{
name|TestInterDatanodeProtocol
operator|.
name|checkMetaInfo
argument_list|(
name|b
argument_list|,
name|dn
argument_list|)
expr_stmt|;
block|}
DECL|method|min (Integer... x)
specifier|static
name|int
name|min
parameter_list|(
name|Integer
modifier|...
name|x
parameter_list|)
block|{
name|int
name|m
init|=
name|x
index|[
literal|0
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|x
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|x
index|[
name|i
index|]
operator|<
name|m
condition|)
block|{
name|m
operator|=
name|x
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
return|return
name|m
return|;
block|}
DECL|method|waitLeaseRecovery (MiniDFSCluster cluster)
name|void
name|waitLeaseRecovery
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|)
block|{
name|cluster
operator|.
name|setLeasePeriod
argument_list|(
name|LEASE_PERIOD
argument_list|,
name|LEASE_PERIOD
argument_list|)
expr_stmt|;
comment|// wait for the lease to expire
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|2
operator|*
literal|3000
argument_list|)
expr_stmt|;
comment|// 2 heartbeat intervals
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{     }
block|}
comment|/**    * The following test first creates a file with a few blocks.    * It randomly truncates the replica of the last block stored in each datanode.    * Finally, it triggers block synchronization to synchronize all stored block.    */
annotation|@
name|Test
DECL|method|testBlockSynchronization ()
specifier|public
name|void
name|testBlockSynchronization
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|ORG_FILE_SIZE
init|=
literal|3000
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|5
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
comment|//create a file
name|DistributedFileSystem
name|dfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|String
name|filestr
init|=
literal|"/foo"
decl_stmt|;
name|Path
name|filepath
init|=
operator|new
name|Path
argument_list|(
name|filestr
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|filepath
argument_list|,
name|ORG_FILE_SIZE
argument_list|,
name|REPLICATION_NUM
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dfs
operator|.
name|exists
argument_list|(
name|filepath
argument_list|)
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitReplication
argument_list|(
name|dfs
argument_list|,
name|filepath
argument_list|,
name|REPLICATION_NUM
argument_list|)
expr_stmt|;
comment|//get block info for the last block
name|LocatedBlock
name|locatedblock
init|=
name|TestInterDatanodeProtocol
operator|.
name|getLastLocatedBlock
argument_list|(
name|dfs
operator|.
name|dfs
operator|.
name|getNamenode
argument_list|()
argument_list|,
name|filestr
argument_list|)
decl_stmt|;
name|DatanodeInfo
index|[]
name|datanodeinfos
init|=
name|locatedblock
operator|.
name|getLocations
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|REPLICATION_NUM
argument_list|,
name|datanodeinfos
operator|.
name|length
argument_list|)
expr_stmt|;
comment|//connect to data nodes
name|DataNode
index|[]
name|datanodes
init|=
operator|new
name|DataNode
index|[
name|REPLICATION_NUM
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|REPLICATION_NUM
condition|;
name|i
operator|++
control|)
block|{
name|datanodes
index|[
name|i
index|]
operator|=
name|cluster
operator|.
name|getDataNode
argument_list|(
name|datanodeinfos
index|[
name|i
index|]
operator|.
name|getIpcPort
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|datanodes
index|[
name|i
index|]
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
comment|//verify Block Info
name|ExtendedBlock
name|lastblock
init|=
name|locatedblock
operator|.
name|getBlock
argument_list|()
decl_stmt|;
name|DataNode
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"newblocks="
operator|+
name|lastblock
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|REPLICATION_NUM
condition|;
name|i
operator|++
control|)
block|{
name|checkMetaInfo
argument_list|(
name|lastblock
argument_list|,
name|datanodes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|DataNode
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"dfs.dfs.clientName="
operator|+
name|dfs
operator|.
name|dfs
operator|.
name|clientName
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
operator|.
name|append
argument_list|(
name|filestr
argument_list|,
name|dfs
operator|.
name|dfs
operator|.
name|clientName
argument_list|,
operator|new
name|EnumSetWritable
argument_list|<>
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateFlag
operator|.
name|APPEND
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// expire lease to trigger block recovery.
name|waitLeaseRecovery
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
name|Block
index|[]
name|updatedmetainfo
init|=
operator|new
name|Block
index|[
name|REPLICATION_NUM
index|]
decl_stmt|;
name|long
name|oldSize
init|=
name|lastblock
operator|.
name|getNumBytes
argument_list|()
decl_stmt|;
name|lastblock
operator|=
name|TestInterDatanodeProtocol
operator|.
name|getLastLocatedBlock
argument_list|(
name|dfs
operator|.
name|dfs
operator|.
name|getNamenode
argument_list|()
argument_list|,
name|filestr
argument_list|)
operator|.
name|getBlock
argument_list|()
expr_stmt|;
name|long
name|currentGS
init|=
name|lastblock
operator|.
name|getGenerationStamp
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|REPLICATION_NUM
condition|;
name|i
operator|++
control|)
block|{
name|updatedmetainfo
index|[
name|i
index|]
operator|=
name|DataNodeTestUtils
operator|.
name|getFSDataset
argument_list|(
name|datanodes
index|[
name|i
index|]
argument_list|)
operator|.
name|getStoredBlock
argument_list|(
name|lastblock
operator|.
name|getBlockPoolId
argument_list|()
argument_list|,
name|lastblock
operator|.
name|getBlockId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|lastblock
operator|.
name|getBlockId
argument_list|()
argument_list|,
name|updatedmetainfo
index|[
name|i
index|]
operator|.
name|getBlockId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|oldSize
argument_list|,
name|updatedmetainfo
index|[
name|i
index|]
operator|.
name|getNumBytes
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|currentGS
argument_list|,
name|updatedmetainfo
index|[
name|i
index|]
operator|.
name|getGenerationStamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// verify that lease recovery does not occur when namenode is in safemode
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Testing that lease recovery cannot happen during safemode."
argument_list|)
expr_stmt|;
name|filestr
operator|=
literal|"/foo.safemode"
expr_stmt|;
name|filepath
operator|=
operator|new
name|Path
argument_list|(
name|filestr
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|create
argument_list|(
name|filepath
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
operator|.
name|setSafeMode
argument_list|(
name|HdfsConstants
operator|.
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dfs
operator|.
name|dfs
operator|.
name|exists
argument_list|(
name|filestr
argument_list|)
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitReplication
argument_list|(
name|dfs
argument_list|,
name|filepath
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|waitLeaseRecovery
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
comment|// verify that we still cannot recover the lease
name|LeaseManager
name|lm
init|=
name|NameNodeAdapter
operator|.
name|getLeaseManager
argument_list|(
name|cluster
operator|.
name|getNamesystem
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Found "
operator|+
name|lm
operator|.
name|countLease
argument_list|()
operator|+
literal|" lease, expected 1"
argument_list|,
name|lm
operator|.
name|countLease
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
operator|.
name|setSafeMode
argument_list|(
name|HdfsConstants
operator|.
name|SafeModeAction
operator|.
name|SAFEMODE_LEAVE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Block Recovery when the meta file not having crcs for all chunks in block    * file    */
annotation|@
name|Test
DECL|method|testBlockRecoveryWithLessMetafile ()
specifier|public
name|void
name|testBlockRecoveryWithLessMetafile
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_LOCAL_PATH_ACCESS_USER_KEY
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
literal|"/testRecoveryFile"
argument_list|)
decl_stmt|;
name|DistributedFileSystem
name|dfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
name|dfs
operator|.
name|create
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|count
operator|<
literal|2
operator|*
literal|1024
operator|*
literal|1024
condition|)
block|{
name|out
operator|.
name|writeBytes
argument_list|(
literal|"Data"
argument_list|)
expr_stmt|;
name|count
operator|+=
literal|4
expr_stmt|;
block|}
name|out
operator|.
name|hsync
argument_list|()
expr_stmt|;
comment|// abort the original stream
operator|(
operator|(
name|DFSOutputStream
operator|)
name|out
operator|.
name|getWrappedStream
argument_list|()
operator|)
operator|.
name|abort
argument_list|()
expr_stmt|;
name|LocatedBlocks
name|locations
init|=
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
operator|.
name|getBlockLocations
argument_list|(
name|file
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|,
name|count
argument_list|)
decl_stmt|;
name|ExtendedBlock
name|block
init|=
name|locations
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBlock
argument_list|()
decl_stmt|;
name|DataNode
name|dn
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|BlockLocalPathInfo
name|localPathInfo
init|=
name|dn
operator|.
name|getBlockLocalPathInfo
argument_list|(
name|block
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|File
name|metafile
init|=
operator|new
name|File
argument_list|(
name|localPathInfo
operator|.
name|getMetaPath
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|metafile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// reduce the block meta file size
name|RandomAccessFile
name|raf
init|=
operator|new
name|RandomAccessFile
argument_list|(
name|metafile
argument_list|,
literal|"rw"
argument_list|)
decl_stmt|;
name|raf
operator|.
name|setLength
argument_list|(
name|metafile
operator|.
name|length
argument_list|()
operator|-
literal|20
argument_list|)
expr_stmt|;
name|raf
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// restart DN to make replica to RWR
name|DataNodeProperties
name|dnProp
init|=
name|cluster
operator|.
name|stopDataNode
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|cluster
operator|.
name|restartDataNode
argument_list|(
name|dnProp
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// try to recover the lease
name|DistributedFileSystem
name|newdfs
init|=
operator|(
name|DistributedFileSystem
operator|)
name|FileSystem
operator|.
name|newInstance
argument_list|(
name|cluster
operator|.
name|getConfiguration
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
while|while
condition|(
operator|++
name|count
operator|<
literal|10
operator|&&
operator|!
name|newdfs
operator|.
name|recoverLease
argument_list|(
name|file
argument_list|)
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"File should be closed"
argument_list|,
name|newdfs
operator|.
name|recoverLease
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Recover the lease on a file and append file from another client.    */
annotation|@
name|Test
DECL|method|testLeaseRecoveryAndAppend ()
specifier|public
name|void
name|testLeaseRecoveryAndAppend
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
literal|"/testLeaseRecovery"
argument_list|)
decl_stmt|;
name|DistributedFileSystem
name|dfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// create a file with 0 bytes
name|FSDataOutputStream
name|out
init|=
name|dfs
operator|.
name|create
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|out
operator|.
name|hflush
argument_list|()
expr_stmt|;
name|out
operator|.
name|hsync
argument_list|()
expr_stmt|;
comment|// abort the original stream
operator|(
operator|(
name|DFSOutputStream
operator|)
name|out
operator|.
name|getWrappedStream
argument_list|()
operator|)
operator|.
name|abort
argument_list|()
expr_stmt|;
name|DistributedFileSystem
name|newdfs
init|=
operator|(
name|DistributedFileSystem
operator|)
name|FileSystem
operator|.
name|newInstance
argument_list|(
name|cluster
operator|.
name|getConfiguration
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
comment|// Append to a file , whose lease is held by another client should fail
try|try
block|{
name|newdfs
operator|.
name|append
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Append to a file(lease is held by another client) should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"file lease is currently owned"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Lease recovery on first try should be successful
name|boolean
name|recoverLease
init|=
name|newdfs
operator|.
name|recoverLease
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|recoverLease
argument_list|)
expr_stmt|;
name|FSDataOutputStream
name|append
init|=
name|newdfs
operator|.
name|append
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|append
operator|.
name|write
argument_list|(
literal|"test"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|append
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

