begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.balancer
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|balancer
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
operator|.
name|DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
operator|.
name|RAM_DISK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_BLOCK_PINNING_ENABLED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_LAZY_WRITER_INTERVAL_SEC
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_MAX_LOCKED_MEMORY_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_HEARTBEAT_INTERVAL_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_LAZY_PERSIST_FILE_SCRUB_INTERVAL_SEC
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|HadoopIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|NameNodeProxies
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|StripedFileTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|DatanodeReportType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|balancer
operator|.
name|Balancer
operator|.
name|Cli
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|balancer
operator|.
name|Balancer
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|balancer
operator|.
name|BalancerParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|SimulatedFSDataset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|impl
operator|.
name|LazyPersistTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * This class tests if a balancer schedules tasks correctly.  */
end_comment

begin_class
DECL|class|TestBalancer
specifier|public
class|class
name|TestBalancer
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestBalancer
operator|.
name|class
argument_list|)
decl_stmt|;
static|static
block|{
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|Balancer
operator|.
name|LOG
argument_list|,
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
DECL|field|CAPACITY
specifier|final
specifier|static
name|long
name|CAPACITY
init|=
literal|5000L
decl_stmt|;
DECL|field|RACK0
specifier|final
specifier|static
name|String
name|RACK0
init|=
literal|"/rack0"
decl_stmt|;
DECL|field|RACK1
specifier|final
specifier|static
name|String
name|RACK1
init|=
literal|"/rack1"
decl_stmt|;
DECL|field|RACK2
specifier|final
specifier|static
name|String
name|RACK2
init|=
literal|"/rack2"
decl_stmt|;
DECL|field|fileName
specifier|final
specifier|private
specifier|static
name|String
name|fileName
init|=
literal|"/tmp.txt"
decl_stmt|;
DECL|field|filePath
specifier|final
specifier|static
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
annotation|@
name|After
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|field|client
name|ClientProtocol
name|client
decl_stmt|;
DECL|field|TIMEOUT
specifier|static
specifier|final
name|long
name|TIMEOUT
init|=
literal|40000L
decl_stmt|;
comment|//msec
DECL|field|CAPACITY_ALLOWED_VARIANCE
specifier|static
specifier|final
name|double
name|CAPACITY_ALLOWED_VARIANCE
init|=
literal|0.005
decl_stmt|;
comment|// 0.5%
DECL|field|BALANCE_ALLOWED_VARIANCE
specifier|static
specifier|final
name|double
name|BALANCE_ALLOWED_VARIANCE
init|=
literal|0.11
decl_stmt|;
comment|// 10%+delta
DECL|field|DEFAULT_BLOCK_SIZE
specifier|static
specifier|final
name|int
name|DEFAULT_BLOCK_SIZE
init|=
literal|100
decl_stmt|;
DECL|field|DEFAULT_RAM_DISK_BLOCK_SIZE
specifier|static
specifier|final
name|int
name|DEFAULT_RAM_DISK_BLOCK_SIZE
init|=
literal|5
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
DECL|field|r
specifier|private
specifier|static
specifier|final
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
static|static
block|{
name|initTestSetup
argument_list|()
expr_stmt|;
block|}
DECL|method|initTestSetup ()
specifier|public
specifier|static
name|void
name|initTestSetup
parameter_list|()
block|{
comment|// do not create id file since it occupies the disk space
name|NameNodeConnector
operator|.
name|setWrite2IdFile
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|initConf (Configuration conf)
specifier|static
name|void
name|initConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|DEFAULT_BLOCK_SIZE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BYTES_PER_CHECKSUM_KEY
argument_list|,
name|DEFAULT_BLOCK_SIZE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REPLICATION_INTERVAL_KEY
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|SimulatedFSDataset
operator|.
name|setFactory
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BALANCER_MOVEDWINWIDTH_KEY
argument_list|,
literal|2000L
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BALANCER_GETBLOCKS_MIN_BLOCK_SIZE_KEY
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
block|}
DECL|method|initConfWithRamDisk (Configuration conf, long ramDiskCapacity)
specifier|static
name|void
name|initConfWithRamDisk
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|long
name|ramDiskCapacity
parameter_list|)
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|DEFAULT_RAM_DISK_BLOCK_SIZE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFS_DATANODE_MAX_LOCKED_MEMORY_KEY
argument_list|,
name|ramDiskCapacity
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFS_NAMENODE_LAZY_PERSIST_FILE_SCRUB_INTERVAL_SEC
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFS_DATANODE_LAZY_WRITER_INTERVAL_SEC
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|LazyPersistTestCase
operator|.
name|initCacheManipulator
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BALANCER_GETBLOCKS_MIN_BLOCK_SIZE_KEY
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
block|}
DECL|field|dataBlocks
name|int
name|dataBlocks
init|=
name|StripedFileTestUtil
operator|.
name|NUM_DATA_BLOCKS
decl_stmt|;
DECL|field|parityBlocks
name|int
name|parityBlocks
init|=
name|StripedFileTestUtil
operator|.
name|NUM_PARITY_BLOCKS
decl_stmt|;
DECL|field|groupSize
name|int
name|groupSize
init|=
name|dataBlocks
operator|+
name|parityBlocks
decl_stmt|;
DECL|field|cellSize
specifier|private
specifier|final
specifier|static
name|int
name|cellSize
init|=
name|StripedFileTestUtil
operator|.
name|BLOCK_STRIPED_CELL_SIZE
decl_stmt|;
DECL|field|stripesPerBlock
specifier|private
specifier|final
specifier|static
name|int
name|stripesPerBlock
init|=
literal|4
decl_stmt|;
DECL|field|DEFAULT_STRIPE_BLOCK_SIZE
specifier|static
name|int
name|DEFAULT_STRIPE_BLOCK_SIZE
init|=
name|cellSize
operator|*
name|stripesPerBlock
decl_stmt|;
DECL|method|initConfWithStripe (Configuration conf)
specifier|static
name|void
name|initConfWithStripe
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|DEFAULT_STRIPE_BLOCK_SIZE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REPLICATION_CONSIDERLOAD_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|SimulatedFSDataset
operator|.
name|setFactory
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REPLICATION_INTERVAL_KEY
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BALANCER_MOVEDWINWIDTH_KEY
argument_list|,
literal|2000L
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BALANCER_GETBLOCKS_MIN_BLOCK_SIZE_KEY
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
block|}
comment|/* create a file with a length of<code>fileLen</code> */
DECL|method|createFile (MiniDFSCluster cluster, Path filePath, long fileLen, short replicationFactor, int nnIndex)
specifier|static
name|void
name|createFile
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|,
name|Path
name|filePath
parameter_list|,
name|long
name|fileLen
parameter_list|,
name|short
name|replicationFactor
parameter_list|,
name|int
name|nnIndex
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|TimeoutException
block|{
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|(
name|nnIndex
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|filePath
argument_list|,
name|fileLen
argument_list|,
name|replicationFactor
argument_list|,
name|r
operator|.
name|nextLong
argument_list|()
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitReplication
argument_list|(
name|fs
argument_list|,
name|filePath
argument_list|,
name|replicationFactor
argument_list|)
expr_stmt|;
block|}
comment|/* fill up a cluster with<code>numNodes</code> datanodes     * whose used space to be<code>size</code>    */
DECL|method|generateBlocks (Configuration conf, long size, short numNodes)
specifier|private
name|ExtendedBlock
index|[]
name|generateBlocks
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|long
name|size
parameter_list|,
name|short
name|numNodes
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|TimeoutException
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numNodes
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|client
operator|=
name|NameNodeProxies
operator|.
name|createProxy
argument_list|(
name|conf
argument_list|,
name|cluster
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
operator|.
name|getUri
argument_list|()
argument_list|,
name|ClientProtocol
operator|.
name|class
argument_list|)
operator|.
name|getProxy
argument_list|()
expr_stmt|;
name|short
name|replicationFactor
init|=
call|(
name|short
call|)
argument_list|(
name|numNodes
operator|-
literal|1
argument_list|)
decl_stmt|;
name|long
name|fileLen
init|=
name|size
operator|/
name|replicationFactor
decl_stmt|;
name|createFile
argument_list|(
name|cluster
argument_list|,
name|filePath
argument_list|,
name|fileLen
argument_list|,
name|replicationFactor
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|locatedBlocks
init|=
name|client
operator|.
name|getBlockLocations
argument_list|(
name|fileName
argument_list|,
literal|0
argument_list|,
name|fileLen
argument_list|)
operator|.
name|getLocatedBlocks
argument_list|()
decl_stmt|;
name|int
name|numOfBlocks
init|=
name|locatedBlocks
operator|.
name|size
argument_list|()
decl_stmt|;
name|ExtendedBlock
index|[]
name|blocks
init|=
operator|new
name|ExtendedBlock
index|[
name|numOfBlocks
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOfBlocks
condition|;
name|i
operator|++
control|)
block|{
name|ExtendedBlock
name|b
init|=
name|locatedBlocks
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getBlock
argument_list|()
decl_stmt|;
name|blocks
index|[
name|i
index|]
operator|=
operator|new
name|ExtendedBlock
argument_list|(
name|b
operator|.
name|getBlockPoolId
argument_list|()
argument_list|,
name|b
operator|.
name|getBlockId
argument_list|()
argument_list|,
name|b
operator|.
name|getNumBytes
argument_list|()
argument_list|,
name|b
operator|.
name|getGenerationStamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|blocks
return|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/* Distribute all blocks according to the given distribution */
DECL|method|distributeBlocks (ExtendedBlock[] blocks, short replicationFactor, final long[] distribution)
specifier|static
name|Block
index|[]
index|[]
name|distributeBlocks
parameter_list|(
name|ExtendedBlock
index|[]
name|blocks
parameter_list|,
name|short
name|replicationFactor
parameter_list|,
specifier|final
name|long
index|[]
name|distribution
parameter_list|)
block|{
comment|// make a copy
name|long
index|[]
name|usedSpace
init|=
operator|new
name|long
index|[
name|distribution
operator|.
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|distribution
argument_list|,
literal|0
argument_list|,
name|usedSpace
argument_list|,
literal|0
argument_list|,
name|distribution
operator|.
name|length
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|Block
argument_list|>
argument_list|>
name|blockReports
init|=
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|Block
argument_list|>
argument_list|>
argument_list|(
name|usedSpace
operator|.
name|length
argument_list|)
decl_stmt|;
name|Block
index|[]
index|[]
name|results
init|=
operator|new
name|Block
index|[
name|usedSpace
operator|.
name|length
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|usedSpace
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|blockReports
operator|.
name|add
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Block
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|blocks
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|replicationFactor
condition|;
name|j
operator|++
control|)
block|{
name|boolean
name|notChosen
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|notChosen
condition|)
block|{
name|int
name|chosenIndex
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|usedSpace
operator|.
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|usedSpace
index|[
name|chosenIndex
index|]
operator|>
literal|0
condition|)
block|{
name|notChosen
operator|=
literal|false
expr_stmt|;
name|blockReports
operator|.
name|get
argument_list|(
name|chosenIndex
argument_list|)
operator|.
name|add
argument_list|(
name|blocks
index|[
name|i
index|]
operator|.
name|getLocalBlock
argument_list|()
argument_list|)
expr_stmt|;
name|usedSpace
index|[
name|chosenIndex
index|]
operator|-=
name|blocks
index|[
name|i
index|]
operator|.
name|getNumBytes
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|usedSpace
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|List
argument_list|<
name|Block
argument_list|>
name|nodeBlockList
init|=
name|blockReports
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|results
index|[
name|i
index|]
operator|=
name|nodeBlockList
operator|.
name|toArray
argument_list|(
operator|new
name|Block
index|[
name|nodeBlockList
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
DECL|method|sum (long[] x)
specifier|static
name|long
name|sum
parameter_list|(
name|long
index|[]
name|x
parameter_list|)
block|{
name|long
name|s
init|=
literal|0L
decl_stmt|;
for|for
control|(
name|long
name|a
range|:
name|x
control|)
block|{
name|s
operator|+=
name|a
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
comment|/* we first start a cluster and fill the cluster up to a certain size.    * then redistribute blocks according the required distribution.    * Afterwards a balancer is running to balance the cluster.    */
DECL|method|testUnevenDistribution (Configuration conf, long distribution[], long capacities[], String[] racks)
specifier|private
name|void
name|testUnevenDistribution
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|long
name|distribution
index|[]
parameter_list|,
name|long
name|capacities
index|[]
parameter_list|,
name|String
index|[]
name|racks
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|numDatanodes
init|=
name|distribution
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|capacities
operator|.
name|length
operator|!=
name|numDatanodes
operator|||
name|racks
operator|.
name|length
operator|!=
name|numDatanodes
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Array length is not the same"
argument_list|)
throw|;
block|}
comment|// calculate total space that need to be filled
specifier|final
name|long
name|totalUsedSpace
init|=
name|sum
argument_list|(
name|distribution
argument_list|)
decl_stmt|;
comment|// fill the cluster
name|ExtendedBlock
index|[]
name|blocks
init|=
name|generateBlocks
argument_list|(
name|conf
argument_list|,
name|totalUsedSpace
argument_list|,
operator|(
name|short
operator|)
name|numDatanodes
argument_list|)
decl_stmt|;
comment|// redistribute blocks
name|Block
index|[]
index|[]
name|blocksDN
init|=
name|distributeBlocks
argument_list|(
name|blocks
argument_list|,
call|(
name|short
call|)
argument_list|(
name|numDatanodes
operator|-
literal|1
argument_list|)
argument_list|,
name|distribution
argument_list|)
decl_stmt|;
comment|// restart the cluster: do NOT format the cluster
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_SAFEMODE_THRESHOLD_PCT_KEY
argument_list|,
literal|"0.0f"
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDatanodes
argument_list|)
operator|.
name|format
argument_list|(
literal|false
argument_list|)
operator|.
name|racks
argument_list|(
name|racks
argument_list|)
operator|.
name|simulatedCapacities
argument_list|(
name|capacities
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|client
operator|=
name|NameNodeProxies
operator|.
name|createProxy
argument_list|(
name|conf
argument_list|,
name|cluster
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
operator|.
name|getUri
argument_list|()
argument_list|,
name|ClientProtocol
operator|.
name|class
argument_list|)
operator|.
name|getProxy
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|blocksDN
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|cluster
operator|.
name|injectBlocks
argument_list|(
name|i
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|blocksDN
index|[
name|i
index|]
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|long
name|totalCapacity
init|=
name|sum
argument_list|(
name|capacities
argument_list|)
decl_stmt|;
name|runBalancer
argument_list|(
name|conf
argument_list|,
name|totalUsedSpace
argument_list|,
name|totalCapacity
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|/**    * Wait until heartbeat gives expected results, within CAPACITY_ALLOWED_VARIANCE,     * summed over all nodes.  Times out after TIMEOUT msec.    * @param expectedUsedSpace    * @param expectedTotalSpace    * @throws IOException - if getStats() fails    * @throws TimeoutException    */
DECL|method|waitForHeartBeat (long expectedUsedSpace, long expectedTotalSpace, ClientProtocol client, MiniDFSCluster cluster)
specifier|static
name|void
name|waitForHeartBeat
parameter_list|(
name|long
name|expectedUsedSpace
parameter_list|,
name|long
name|expectedTotalSpace
parameter_list|,
name|ClientProtocol
name|client
parameter_list|,
name|MiniDFSCluster
name|cluster
parameter_list|)
throws|throws
name|IOException
throws|,
name|TimeoutException
block|{
name|long
name|timeout
init|=
name|TIMEOUT
decl_stmt|;
name|long
name|failtime
init|=
operator|(
name|timeout
operator|<=
literal|0L
operator|)
condition|?
name|Long
operator|.
name|MAX_VALUE
else|:
name|Time
operator|.
name|monotonicNow
argument_list|()
operator|+
name|timeout
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|long
index|[]
name|status
init|=
name|client
operator|.
name|getStats
argument_list|()
decl_stmt|;
name|double
name|totalSpaceVariance
init|=
name|Math
operator|.
name|abs
argument_list|(
operator|(
name|double
operator|)
name|status
index|[
literal|0
index|]
operator|-
name|expectedTotalSpace
argument_list|)
operator|/
name|expectedTotalSpace
decl_stmt|;
name|double
name|usedSpaceVariance
init|=
name|Math
operator|.
name|abs
argument_list|(
operator|(
name|double
operator|)
name|status
index|[
literal|1
index|]
operator|-
name|expectedUsedSpace
argument_list|)
operator|/
name|expectedUsedSpace
decl_stmt|;
if|if
condition|(
name|totalSpaceVariance
operator|<
name|CAPACITY_ALLOWED_VARIANCE
operator|&&
name|usedSpaceVariance
operator|<
name|CAPACITY_ALLOWED_VARIANCE
condition|)
break|break;
comment|//done
if|if
condition|(
name|Time
operator|.
name|monotonicNow
argument_list|()
operator|>
name|failtime
condition|)
block|{
throw|throw
operator|new
name|TimeoutException
argument_list|(
literal|"Cluster failed to reached expected values of "
operator|+
literal|"totalSpace (current: "
operator|+
name|status
index|[
literal|0
index|]
operator|+
literal|", expected: "
operator|+
name|expectedTotalSpace
operator|+
literal|"), or usedSpace (current: "
operator|+
name|status
index|[
literal|1
index|]
operator|+
literal|", expected: "
operator|+
name|expectedUsedSpace
operator|+
literal|"), in more than "
operator|+
name|timeout
operator|+
literal|" msec."
argument_list|)
throw|;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100L
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignored
parameter_list|)
block|{       }
block|}
block|}
comment|/**    * Wait until balanced: each datanode gives utilization within    * BALANCE_ALLOWED_VARIANCE of average    * @throws IOException    * @throws TimeoutException    */
DECL|method|waitForBalancer (long totalUsedSpace, long totalCapacity, ClientProtocol client, MiniDFSCluster cluster, BalancerParameters p)
specifier|static
name|void
name|waitForBalancer
parameter_list|(
name|long
name|totalUsedSpace
parameter_list|,
name|long
name|totalCapacity
parameter_list|,
name|ClientProtocol
name|client
parameter_list|,
name|MiniDFSCluster
name|cluster
parameter_list|,
name|BalancerParameters
name|p
parameter_list|)
throws|throws
name|IOException
throws|,
name|TimeoutException
block|{
name|waitForBalancer
argument_list|(
name|totalUsedSpace
argument_list|,
name|totalCapacity
argument_list|,
name|client
argument_list|,
name|cluster
argument_list|,
name|p
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * Make sure that balancer can't move pinned blocks.    * If specified favoredNodes when create file, blocks will be pinned use     * sticky bit.    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|100000
argument_list|)
DECL|method|testBalancerWithPinnedBlocks ()
specifier|public
name|void
name|testBalancerWithPinnedBlocks
parameter_list|()
throws|throws
name|Exception
block|{
comment|// This test assumes stick-bit based block pin mechanism available only
comment|// in Linux/Unix. It can be unblocked on Windows when HDFS-7759 is ready to
comment|// provide a different mechanism for Windows.
name|assumeTrue
argument_list|(
operator|!
name|Path
operator|.
name|WINDOWS
argument_list|)
expr_stmt|;
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|initConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFS_DATANODE_BLOCK_PINNING_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|long
index|[]
name|capacities
init|=
operator|new
name|long
index|[]
block|{
name|CAPACITY
block|,
name|CAPACITY
block|}
decl_stmt|;
name|String
index|[]
name|hosts
init|=
block|{
literal|"host0"
block|,
literal|"host1"
block|}
decl_stmt|;
name|String
index|[]
name|racks
init|=
block|{
name|RACK0
block|,
name|RACK1
block|}
decl_stmt|;
name|int
name|numOfDatanodes
init|=
name|capacities
operator|.
name|length
decl_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|capacities
operator|.
name|length
argument_list|)
operator|.
name|hosts
argument_list|(
name|hosts
argument_list|)
operator|.
name|racks
argument_list|(
name|racks
argument_list|)
operator|.
name|simulatedCapacities
argument_list|(
name|capacities
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|client
operator|=
name|NameNodeProxies
operator|.
name|createProxy
argument_list|(
name|conf
argument_list|,
name|cluster
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
operator|.
name|getUri
argument_list|()
argument_list|,
name|ClientProtocol
operator|.
name|class
argument_list|)
operator|.
name|getProxy
argument_list|()
expr_stmt|;
comment|// fill up the cluster to be 80% full
name|long
name|totalCapacity
init|=
name|sum
argument_list|(
name|capacities
argument_list|)
decl_stmt|;
name|long
name|totalUsedSpace
init|=
name|totalCapacity
operator|*
literal|8
operator|/
literal|10
decl_stmt|;
name|InetSocketAddress
index|[]
name|favoredNodes
init|=
operator|new
name|InetSocketAddress
index|[
name|numOfDatanodes
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|favoredNodes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// DFSClient will attempt reverse lookup. In case it resolves
comment|// "127.0.0.1" to "localhost", we manually specify the hostname.
name|int
name|port
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getXferAddress
argument_list|()
operator|.
name|getPort
argument_list|()
decl_stmt|;
name|favoredNodes
index|[
name|i
index|]
operator|=
operator|new
name|InetSocketAddress
argument_list|(
name|hosts
index|[
name|i
index|]
argument_list|,
name|port
argument_list|)
expr_stmt|;
block|}
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|cluster
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
argument_list|,
name|filePath
argument_list|,
literal|false
argument_list|,
literal|1024
argument_list|,
name|totalUsedSpace
operator|/
name|numOfDatanodes
argument_list|,
name|DEFAULT_BLOCK_SIZE
argument_list|,
operator|(
name|short
operator|)
name|numOfDatanodes
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|,
name|favoredNodes
argument_list|)
expr_stmt|;
comment|// start up an empty node with the same capacity
name|cluster
operator|.
name|startDataNodes
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
name|RACK2
block|}
argument_list|,
operator|new
name|long
index|[]
block|{
name|CAPACITY
block|}
argument_list|)
expr_stmt|;
name|totalCapacity
operator|+=
name|CAPACITY
expr_stmt|;
comment|// run balancer and validate results
name|waitForHeartBeat
argument_list|(
name|totalUsedSpace
argument_list|,
name|totalCapacity
argument_list|,
name|client
argument_list|,
name|cluster
argument_list|)
expr_stmt|;
comment|// start rebalancing
name|Collection
argument_list|<
name|URI
argument_list|>
name|namenodes
init|=
name|DFSUtil
operator|.
name|getNsServiceRpcUris
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|int
name|r
init|=
name|Balancer
operator|.
name|run
argument_list|(
name|namenodes
argument_list|,
name|BalancerParameters
operator|.
name|DEFAULT
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ExitStatus
operator|.
name|NO_MOVE_PROGRESS
operator|.
name|getExitCode
argument_list|()
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
comment|/**    * Wait until balanced: each datanode gives utilization within     * BALANCE_ALLOWED_VARIANCE of average    * @throws IOException    * @throws TimeoutException    */
DECL|method|waitForBalancer (long totalUsedSpace, long totalCapacity, ClientProtocol client, MiniDFSCluster cluster, BalancerParameters p, int expectedExcludedNodes)
specifier|static
name|void
name|waitForBalancer
parameter_list|(
name|long
name|totalUsedSpace
parameter_list|,
name|long
name|totalCapacity
parameter_list|,
name|ClientProtocol
name|client
parameter_list|,
name|MiniDFSCluster
name|cluster
parameter_list|,
name|BalancerParameters
name|p
parameter_list|,
name|int
name|expectedExcludedNodes
parameter_list|)
throws|throws
name|IOException
throws|,
name|TimeoutException
block|{
name|long
name|timeout
init|=
name|TIMEOUT
decl_stmt|;
name|long
name|failtime
init|=
operator|(
name|timeout
operator|<=
literal|0L
operator|)
condition|?
name|Long
operator|.
name|MAX_VALUE
else|:
name|Time
operator|.
name|monotonicNow
argument_list|()
operator|+
name|timeout
decl_stmt|;
if|if
condition|(
operator|!
name|p
operator|.
name|getIncludedNodes
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|totalCapacity
operator|=
name|p
operator|.
name|getIncludedNodes
argument_list|()
operator|.
name|size
argument_list|()
operator|*
name|CAPACITY
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|p
operator|.
name|getExcludedNodes
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|totalCapacity
operator|-=
name|p
operator|.
name|getExcludedNodes
argument_list|()
operator|.
name|size
argument_list|()
operator|*
name|CAPACITY
expr_stmt|;
block|}
specifier|final
name|double
name|avgUtilization
init|=
operator|(
operator|(
name|double
operator|)
name|totalUsedSpace
operator|)
operator|/
name|totalCapacity
decl_stmt|;
name|boolean
name|balanced
decl_stmt|;
do|do
block|{
name|DatanodeInfo
index|[]
name|datanodeReport
init|=
name|client
operator|.
name|getDatanodeReport
argument_list|(
name|DatanodeReportType
operator|.
name|ALL
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|datanodeReport
operator|.
name|length
argument_list|,
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|balanced
operator|=
literal|true
expr_stmt|;
name|int
name|actualExcludedNodeCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|DatanodeInfo
name|datanode
range|:
name|datanodeReport
control|)
block|{
name|double
name|nodeUtilization
init|=
operator|(
operator|(
name|double
operator|)
name|datanode
operator|.
name|getDfsUsed
argument_list|()
operator|)
operator|/
name|datanode
operator|.
name|getCapacity
argument_list|()
decl_stmt|;
if|if
condition|(
name|Dispatcher
operator|.
name|Util
operator|.
name|isExcluded
argument_list|(
name|p
operator|.
name|getExcludedNodes
argument_list|()
argument_list|,
name|datanode
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|nodeUtilization
operator|==
literal|0
argument_list|)
expr_stmt|;
name|actualExcludedNodeCount
operator|++
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|!
name|Dispatcher
operator|.
name|Util
operator|.
name|isIncluded
argument_list|(
name|p
operator|.
name|getIncludedNodes
argument_list|()
argument_list|,
name|datanode
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|nodeUtilization
operator|==
literal|0
argument_list|)
expr_stmt|;
name|actualExcludedNodeCount
operator|++
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|Math
operator|.
name|abs
argument_list|(
name|avgUtilization
operator|-
name|nodeUtilization
argument_list|)
operator|>
name|BALANCE_ALLOWED_VARIANCE
condition|)
block|{
name|balanced
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|Time
operator|.
name|monotonicNow
argument_list|()
operator|>
name|failtime
condition|)
block|{
throw|throw
operator|new
name|TimeoutException
argument_list|(
literal|"Rebalancing expected avg utilization to become "
operator|+
name|avgUtilization
operator|+
literal|", but on datanode "
operator|+
name|datanode
operator|+
literal|" it remains at "
operator|+
name|nodeUtilization
operator|+
literal|" after more than "
operator|+
name|TIMEOUT
operator|+
literal|" msec."
argument_list|)
throw|;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignored
parameter_list|)
block|{           }
break|break;
block|}
block|}
name|assertEquals
argument_list|(
name|expectedExcludedNodes
argument_list|,
name|actualExcludedNodeCount
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
operator|!
name|balanced
condition|)
do|;
block|}
DECL|method|long2String (long[] array)
name|String
name|long2String
parameter_list|(
name|long
index|[]
name|array
parameter_list|)
block|{
if|if
condition|(
name|array
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|"<empty>"
return|;
block|}
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"["
argument_list|)
operator|.
name|append
argument_list|(
name|array
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|array
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|array
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|b
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Class which contains information about the    * new nodes to be added to the cluster for balancing.    */
DECL|class|NewNodeInfo
specifier|static
specifier|abstract
class|class
name|NewNodeInfo
block|{
DECL|field|nodesToBeExcluded
name|Set
argument_list|<
name|String
argument_list|>
name|nodesToBeExcluded
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|nodesToBeIncluded
name|Set
argument_list|<
name|String
argument_list|>
name|nodesToBeIncluded
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|getNames ()
specifier|abstract
name|String
index|[]
name|getNames
parameter_list|()
function_decl|;
DECL|method|getNumberofNewNodes ()
specifier|abstract
name|int
name|getNumberofNewNodes
parameter_list|()
function_decl|;
DECL|method|getNumberofIncludeNodes ()
specifier|abstract
name|int
name|getNumberofIncludeNodes
parameter_list|()
function_decl|;
DECL|method|getNumberofExcludeNodes ()
specifier|abstract
name|int
name|getNumberofExcludeNodes
parameter_list|()
function_decl|;
DECL|method|getNodesToBeIncluded ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getNodesToBeIncluded
parameter_list|()
block|{
return|return
name|nodesToBeIncluded
return|;
block|}
DECL|method|getNodesToBeExcluded ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getNodesToBeExcluded
parameter_list|()
block|{
return|return
name|nodesToBeExcluded
return|;
block|}
block|}
comment|/**    * The host names of new nodes are specified    */
DECL|class|HostNameBasedNodes
specifier|static
class|class
name|HostNameBasedNodes
extends|extends
name|NewNodeInfo
block|{
DECL|field|hostnames
name|String
index|[]
name|hostnames
decl_stmt|;
DECL|method|HostNameBasedNodes (String[] hostnames, Set<String> nodesToBeExcluded, Set<String> nodesToBeIncluded)
specifier|public
name|HostNameBasedNodes
parameter_list|(
name|String
index|[]
name|hostnames
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|nodesToBeExcluded
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|nodesToBeIncluded
parameter_list|)
block|{
name|this
operator|.
name|hostnames
operator|=
name|hostnames
expr_stmt|;
name|this
operator|.
name|nodesToBeExcluded
operator|=
name|nodesToBeExcluded
expr_stmt|;
name|this
operator|.
name|nodesToBeIncluded
operator|=
name|nodesToBeIncluded
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getNames ()
name|String
index|[]
name|getNames
parameter_list|()
block|{
return|return
name|hostnames
return|;
block|}
annotation|@
name|Override
DECL|method|getNumberofNewNodes ()
name|int
name|getNumberofNewNodes
parameter_list|()
block|{
return|return
name|hostnames
operator|.
name|length
return|;
block|}
annotation|@
name|Override
DECL|method|getNumberofIncludeNodes ()
name|int
name|getNumberofIncludeNodes
parameter_list|()
block|{
return|return
name|nodesToBeIncluded
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getNumberofExcludeNodes ()
name|int
name|getNumberofExcludeNodes
parameter_list|()
block|{
return|return
name|nodesToBeExcluded
operator|.
name|size
argument_list|()
return|;
block|}
block|}
comment|/**    * The number of data nodes to be started are specified.    * The data nodes will have same host name, but different port numbers.    *    */
DECL|class|PortNumberBasedNodes
specifier|static
class|class
name|PortNumberBasedNodes
extends|extends
name|NewNodeInfo
block|{
DECL|field|newNodes
name|int
name|newNodes
decl_stmt|;
DECL|field|excludeNodes
name|int
name|excludeNodes
decl_stmt|;
DECL|field|includeNodes
name|int
name|includeNodes
decl_stmt|;
DECL|method|PortNumberBasedNodes (int newNodes, int excludeNodes, int includeNodes)
specifier|public
name|PortNumberBasedNodes
parameter_list|(
name|int
name|newNodes
parameter_list|,
name|int
name|excludeNodes
parameter_list|,
name|int
name|includeNodes
parameter_list|)
block|{
name|this
operator|.
name|newNodes
operator|=
name|newNodes
expr_stmt|;
name|this
operator|.
name|excludeNodes
operator|=
name|excludeNodes
expr_stmt|;
name|this
operator|.
name|includeNodes
operator|=
name|includeNodes
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getNames ()
name|String
index|[]
name|getNames
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getNumberofNewNodes ()
name|int
name|getNumberofNewNodes
parameter_list|()
block|{
return|return
name|newNodes
return|;
block|}
annotation|@
name|Override
DECL|method|getNumberofIncludeNodes ()
name|int
name|getNumberofIncludeNodes
parameter_list|()
block|{
return|return
name|includeNodes
return|;
block|}
annotation|@
name|Override
DECL|method|getNumberofExcludeNodes ()
name|int
name|getNumberofExcludeNodes
parameter_list|()
block|{
return|return
name|excludeNodes
return|;
block|}
block|}
DECL|method|doTest (Configuration conf, long[] capacities, String[] racks, long newCapacity, String newRack, boolean useTool)
specifier|private
name|void
name|doTest
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|long
index|[]
name|capacities
parameter_list|,
name|String
index|[]
name|racks
parameter_list|,
name|long
name|newCapacity
parameter_list|,
name|String
name|newRack
parameter_list|,
name|boolean
name|useTool
parameter_list|)
throws|throws
name|Exception
block|{
name|doTest
argument_list|(
name|conf
argument_list|,
name|capacities
argument_list|,
name|racks
argument_list|,
name|newCapacity
argument_list|,
name|newRack
argument_list|,
literal|null
argument_list|,
name|useTool
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/** This test start a cluster with specified number of nodes,    * and fills it to be 30% full (with a single file replicated identically    * to all datanodes);    * It then adds one new empty node and starts balancing.    *    * @param conf - configuration    * @param capacities - array of capacities of original nodes in cluster    * @param racks - array of racks for original nodes in cluster    * @param newCapacity - new node's capacity    * @param newRack - new node's rack    * @param nodes - information about new nodes to be started.    * @param useTool - if true run test via Cli with command-line argument     *   parsing, etc.   Otherwise invoke balancer API directly.    * @param useFile - if true, the hosts to included or excluded will be stored in a    *   file and then later read from the file.    * @throws Exception    */
DECL|method|doTest (Configuration conf, long[] capacities, String[] racks, long newCapacity, String newRack, NewNodeInfo nodes, boolean useTool, boolean useFile)
specifier|private
name|void
name|doTest
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|long
index|[]
name|capacities
parameter_list|,
name|String
index|[]
name|racks
parameter_list|,
name|long
name|newCapacity
parameter_list|,
name|String
name|newRack
parameter_list|,
name|NewNodeInfo
name|nodes
parameter_list|,
name|boolean
name|useTool
parameter_list|,
name|boolean
name|useFile
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"capacities = "
operator|+
name|long2String
argument_list|(
name|capacities
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"racks      = "
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|racks
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"newCapacity= "
operator|+
name|newCapacity
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"newRack    = "
operator|+
name|newRack
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"useTool    = "
operator|+
name|useTool
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|capacities
operator|.
name|length
argument_list|,
name|racks
operator|.
name|length
argument_list|)
expr_stmt|;
name|int
name|numOfDatanodes
init|=
name|capacities
operator|.
name|length
decl_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|capacities
operator|.
name|length
argument_list|)
operator|.
name|racks
argument_list|(
name|racks
argument_list|)
operator|.
name|simulatedCapacities
argument_list|(
name|capacities
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|client
operator|=
name|NameNodeProxies
operator|.
name|createProxy
argument_list|(
name|conf
argument_list|,
name|cluster
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
operator|.
name|getUri
argument_list|()
argument_list|,
name|ClientProtocol
operator|.
name|class
argument_list|)
operator|.
name|getProxy
argument_list|()
expr_stmt|;
name|long
name|totalCapacity
init|=
name|sum
argument_list|(
name|capacities
argument_list|)
decl_stmt|;
comment|// fill up the cluster to be 30% full
name|long
name|totalUsedSpace
init|=
name|totalCapacity
operator|*
literal|3
operator|/
literal|10
decl_stmt|;
name|createFile
argument_list|(
name|cluster
argument_list|,
name|filePath
argument_list|,
name|totalUsedSpace
operator|/
name|numOfDatanodes
argument_list|,
operator|(
name|short
operator|)
name|numOfDatanodes
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|nodes
operator|==
literal|null
condition|)
block|{
comment|// there is no specification of new nodes.
comment|// start up an empty node with the same capacity and on the same rack
name|cluster
operator|.
name|startDataNodes
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
name|newRack
block|}
argument_list|,
literal|null
argument_list|,
operator|new
name|long
index|[]
block|{
name|newCapacity
block|}
argument_list|)
expr_stmt|;
name|totalCapacity
operator|+=
name|newCapacity
expr_stmt|;
block|}
else|else
block|{
comment|//if running a test with "include list", include original nodes as well
if|if
condition|(
name|nodes
operator|.
name|getNumberofIncludeNodes
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|DataNode
name|dn
range|:
name|cluster
operator|.
name|getDataNodes
argument_list|()
control|)
name|nodes
operator|.
name|getNodesToBeIncluded
argument_list|()
operator|.
name|add
argument_list|(
name|dn
operator|.
name|getDatanodeId
argument_list|()
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|newRacks
init|=
operator|new
name|String
index|[
name|nodes
operator|.
name|getNumberofNewNodes
argument_list|()
index|]
decl_stmt|;
name|long
index|[]
name|newCapacities
init|=
operator|new
name|long
index|[
name|nodes
operator|.
name|getNumberofNewNodes
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodes
operator|.
name|getNumberofNewNodes
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|newRacks
index|[
name|i
index|]
operator|=
name|newRack
expr_stmt|;
name|newCapacities
index|[
name|i
index|]
operator|=
name|newCapacity
expr_stmt|;
block|}
comment|// if host names are specified for the new nodes to be created.
if|if
condition|(
name|nodes
operator|.
name|getNames
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|startDataNodes
argument_list|(
name|conf
argument_list|,
name|nodes
operator|.
name|getNumberofNewNodes
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|newRacks
argument_list|,
name|nodes
operator|.
name|getNames
argument_list|()
argument_list|,
name|newCapacities
argument_list|)
expr_stmt|;
name|totalCapacity
operator|+=
name|newCapacity
operator|*
name|nodes
operator|.
name|getNumberofNewNodes
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// host names are not specified
name|cluster
operator|.
name|startDataNodes
argument_list|(
name|conf
argument_list|,
name|nodes
operator|.
name|getNumberofNewNodes
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|newRacks
argument_list|,
literal|null
argument_list|,
name|newCapacities
argument_list|)
expr_stmt|;
name|totalCapacity
operator|+=
name|newCapacity
operator|*
name|nodes
operator|.
name|getNumberofNewNodes
argument_list|()
expr_stmt|;
comment|//populate the include nodes
if|if
condition|(
name|nodes
operator|.
name|getNumberofIncludeNodes
argument_list|()
operator|>
literal|0
condition|)
block|{
name|int
name|totalNodes
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodes
operator|.
name|getNumberofIncludeNodes
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|nodes
operator|.
name|getNodesToBeIncluded
argument_list|()
operator|.
name|add
argument_list|(
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
name|totalNodes
operator|-
literal|1
operator|-
name|i
argument_list|)
operator|.
name|getDatanodeId
argument_list|()
operator|.
name|getXferAddr
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|//polulate the exclude nodes
if|if
condition|(
name|nodes
operator|.
name|getNumberofExcludeNodes
argument_list|()
operator|>
literal|0
condition|)
block|{
name|int
name|totalNodes
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodes
operator|.
name|getNumberofExcludeNodes
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|nodes
operator|.
name|getNodesToBeExcluded
argument_list|()
operator|.
name|add
argument_list|(
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
name|totalNodes
operator|-
literal|1
operator|-
name|i
argument_list|)
operator|.
name|getDatanodeId
argument_list|()
operator|.
name|getXferAddr
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// run balancer and validate results
name|BalancerParameters
operator|.
name|Builder
name|pBuilder
init|=
operator|new
name|BalancerParameters
operator|.
name|Builder
argument_list|()
decl_stmt|;
if|if
condition|(
name|nodes
operator|!=
literal|null
condition|)
block|{
name|pBuilder
operator|.
name|setExcludedNodes
argument_list|(
name|nodes
operator|.
name|getNodesToBeExcluded
argument_list|()
argument_list|)
expr_stmt|;
name|pBuilder
operator|.
name|setIncludedNodes
argument_list|(
name|nodes
operator|.
name|getNodesToBeIncluded
argument_list|()
argument_list|)
expr_stmt|;
name|pBuilder
operator|.
name|setRunDuringUpgrade
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|BalancerParameters
name|p
init|=
name|pBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|int
name|expectedExcludedNodes
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|nodes
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|nodes
operator|.
name|getNodesToBeExcluded
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|expectedExcludedNodes
operator|=
name|nodes
operator|.
name|getNodesToBeExcluded
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|nodes
operator|.
name|getNodesToBeIncluded
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|expectedExcludedNodes
operator|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|size
argument_list|()
operator|-
name|nodes
operator|.
name|getNodesToBeIncluded
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
comment|// run balancer and validate results
if|if
condition|(
name|useTool
condition|)
block|{
name|runBalancerCli
argument_list|(
name|conf
argument_list|,
name|totalUsedSpace
argument_list|,
name|totalCapacity
argument_list|,
name|p
argument_list|,
name|useFile
argument_list|,
name|expectedExcludedNodes
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|runBalancer
argument_list|(
name|conf
argument_list|,
name|totalUsedSpace
argument_list|,
name|totalCapacity
argument_list|,
name|p
argument_list|,
name|expectedExcludedNodes
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|runBalancer (Configuration conf, long totalUsedSpace, long totalCapacity)
specifier|private
name|void
name|runBalancer
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|long
name|totalUsedSpace
parameter_list|,
name|long
name|totalCapacity
parameter_list|)
throws|throws
name|Exception
block|{
name|runBalancer
argument_list|(
name|conf
argument_list|,
name|totalUsedSpace
argument_list|,
name|totalCapacity
argument_list|,
name|BalancerParameters
operator|.
name|DEFAULT
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|runBalancer (Configuration conf, long totalUsedSpace, long totalCapacity, BalancerParameters p, int excludedNodes)
specifier|private
name|void
name|runBalancer
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|long
name|totalUsedSpace
parameter_list|,
name|long
name|totalCapacity
parameter_list|,
name|BalancerParameters
name|p
parameter_list|,
name|int
name|excludedNodes
parameter_list|)
throws|throws
name|Exception
block|{
name|waitForHeartBeat
argument_list|(
name|totalUsedSpace
argument_list|,
name|totalCapacity
argument_list|,
name|client
argument_list|,
name|cluster
argument_list|)
expr_stmt|;
comment|// start rebalancing
name|Collection
argument_list|<
name|URI
argument_list|>
name|namenodes
init|=
name|DFSUtil
operator|.
name|getNsServiceRpcUris
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|int
name|r
init|=
name|runBalancer
argument_list|(
name|namenodes
argument_list|,
name|p
argument_list|,
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_BALANCE_MAX_NUM_CONCURRENT_MOVES_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_BALANCE_MAX_NUM_CONCURRENT_MOVES_DEFAULT
argument_list|)
operator|==
literal|0
condition|)
block|{
name|assertEquals
argument_list|(
name|ExitStatus
operator|.
name|NO_MOVE_PROGRESS
operator|.
name|getExitCode
argument_list|()
argument_list|,
name|r
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|ExitStatus
operator|.
name|SUCCESS
operator|.
name|getExitCode
argument_list|()
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
name|waitForHeartBeat
argument_list|(
name|totalUsedSpace
argument_list|,
name|totalCapacity
argument_list|,
name|client
argument_list|,
name|cluster
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"  ."
argument_list|)
expr_stmt|;
name|waitForBalancer
argument_list|(
name|totalUsedSpace
argument_list|,
name|totalCapacity
argument_list|,
name|client
argument_list|,
name|cluster
argument_list|,
name|p
argument_list|,
name|excludedNodes
argument_list|)
expr_stmt|;
block|}
DECL|method|runBalancer (Collection<URI> namenodes, final BalancerParameters p, Configuration conf)
specifier|private
specifier|static
name|int
name|runBalancer
parameter_list|(
name|Collection
argument_list|<
name|URI
argument_list|>
name|namenodes
parameter_list|,
specifier|final
name|BalancerParameters
name|p
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|long
name|sleeptime
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_HEARTBEAT_INTERVAL_DEFAULT
argument_list|)
operator|*
literal|2000
operator|+
name|conf
operator|.
name|getLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REPLICATION_INTERVAL_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REPLICATION_INTERVAL_DEFAULT
argument_list|)
operator|*
literal|1000
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"namenodes  = "
operator|+
name|namenodes
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"parameters = "
operator|+
name|p
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Print stack trace"
argument_list|,
operator|new
name|Throwable
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Time Stamp               Iteration#  Bytes Already Moved  Bytes Left To Move  Bytes Being Moved"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|NameNodeConnector
argument_list|>
name|connectors
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
try|try
block|{
name|connectors
operator|=
name|NameNodeConnector
operator|.
name|newNameNodeConnectors
argument_list|(
name|namenodes
argument_list|,
name|Balancer
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|Balancer
operator|.
name|BALANCER_ID_PATH
argument_list|,
name|conf
argument_list|,
name|BalancerParameters
operator|.
name|DEFAULT
operator|.
name|getMaxIdleIteration
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|done
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|iteration
init|=
literal|0
init|;
operator|!
name|done
condition|;
name|iteration
operator|++
control|)
block|{
name|done
operator|=
literal|true
expr_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|connectors
argument_list|)
expr_stmt|;
for|for
control|(
name|NameNodeConnector
name|nnc
range|:
name|connectors
control|)
block|{
specifier|final
name|Balancer
name|b
init|=
operator|new
name|Balancer
argument_list|(
name|nnc
argument_list|,
name|p
argument_list|,
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|Result
name|r
init|=
name|b
operator|.
name|runOneIteration
argument_list|()
decl_stmt|;
name|r
operator|.
name|print
argument_list|(
name|iteration
argument_list|,
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
comment|// clean all lists
name|b
operator|.
name|resetData
argument_list|(
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|exitStatus
operator|==
name|ExitStatus
operator|.
name|IN_PROGRESS
condition|)
block|{
name|done
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|r
operator|.
name|exitStatus
operator|!=
name|ExitStatus
operator|.
name|SUCCESS
condition|)
block|{
comment|//must be an error statue, return.
return|return
name|r
operator|.
name|exitStatus
operator|.
name|getExitCode
argument_list|()
return|;
block|}
else|else
block|{
if|if
condition|(
name|iteration
operator|>
literal|0
condition|)
block|{
name|assertTrue
argument_list|(
name|r
operator|.
name|bytesAlreadyMoved
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|done
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|sleeptime
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
for|for
control|(
name|NameNodeConnector
name|nnc
range|:
name|connectors
control|)
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|nnc
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ExitStatus
operator|.
name|SUCCESS
operator|.
name|getExitCode
argument_list|()
return|;
block|}
DECL|method|runBalancerCli (Configuration conf, long totalUsedSpace, long totalCapacity, BalancerParameters p, boolean useFile, int expectedExcludedNodes)
specifier|private
name|void
name|runBalancerCli
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|long
name|totalUsedSpace
parameter_list|,
name|long
name|totalCapacity
parameter_list|,
name|BalancerParameters
name|p
parameter_list|,
name|boolean
name|useFile
parameter_list|,
name|int
name|expectedExcludedNodes
parameter_list|)
throws|throws
name|Exception
block|{
name|waitForHeartBeat
argument_list|(
name|totalUsedSpace
argument_list|,
name|totalCapacity
argument_list|,
name|client
argument_list|,
name|cluster
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|args
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"-policy"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"datanode"
argument_list|)
expr_stmt|;
name|File
name|excludeHostsFile
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|p
operator|.
name|getExcludedNodes
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|args
operator|.
name|add
argument_list|(
literal|"-exclude"
argument_list|)
expr_stmt|;
if|if
condition|(
name|useFile
condition|)
block|{
name|excludeHostsFile
operator|=
operator|new
name|File
argument_list|(
literal|"exclude-hosts-file"
argument_list|)
expr_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|excludeHostsFile
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|host
range|:
name|p
operator|.
name|getExcludedNodes
argument_list|()
control|)
block|{
name|pw
operator|.
name|write
argument_list|(
name|host
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"-f"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"exclude-hosts-file"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|args
operator|.
name|add
argument_list|(
name|StringUtils
operator|.
name|join
argument_list|(
name|p
operator|.
name|getExcludedNodes
argument_list|()
argument_list|,
literal|','
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|File
name|includeHostsFile
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|p
operator|.
name|getIncludedNodes
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|args
operator|.
name|add
argument_list|(
literal|"-include"
argument_list|)
expr_stmt|;
if|if
condition|(
name|useFile
condition|)
block|{
name|includeHostsFile
operator|=
operator|new
name|File
argument_list|(
literal|"include-hosts-file"
argument_list|)
expr_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|includeHostsFile
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|host
range|:
name|p
operator|.
name|getIncludedNodes
argument_list|()
control|)
block|{
name|pw
operator|.
name|write
argument_list|(
name|host
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"-f"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"include-hosts-file"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|args
operator|.
name|add
argument_list|(
name|StringUtils
operator|.
name|join
argument_list|(
name|p
operator|.
name|getIncludedNodes
argument_list|()
argument_list|,
literal|','
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|Tool
name|tool
init|=
operator|new
name|Cli
argument_list|()
decl_stmt|;
name|tool
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
specifier|final
name|int
name|r
init|=
name|tool
operator|.
name|run
argument_list|(
name|args
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
comment|// start rebalancing
name|assertEquals
argument_list|(
literal|"Tools should exit 0 on success"
argument_list|,
literal|0
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|waitForHeartBeat
argument_list|(
name|totalUsedSpace
argument_list|,
name|totalCapacity
argument_list|,
name|client
argument_list|,
name|cluster
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Rebalancing with default ctor."
argument_list|)
expr_stmt|;
name|waitForBalancer
argument_list|(
name|totalUsedSpace
argument_list|,
name|totalCapacity
argument_list|,
name|client
argument_list|,
name|cluster
argument_list|,
name|p
argument_list|,
name|expectedExcludedNodes
argument_list|)
expr_stmt|;
if|if
condition|(
name|excludeHostsFile
operator|!=
literal|null
operator|&&
name|excludeHostsFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|excludeHostsFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|includeHostsFile
operator|!=
literal|null
operator|&&
name|includeHostsFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|includeHostsFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** one-node cluster test*/
DECL|method|oneNodeTest (Configuration conf, boolean useTool)
specifier|private
name|void
name|oneNodeTest
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|boolean
name|useTool
parameter_list|)
throws|throws
name|Exception
block|{
comment|// add an empty node with half of the CAPACITY& the same rack
name|doTest
argument_list|(
name|conf
argument_list|,
operator|new
name|long
index|[]
block|{
name|CAPACITY
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|RACK0
block|}
argument_list|,
name|CAPACITY
operator|/
literal|2
argument_list|,
name|RACK0
argument_list|,
name|useTool
argument_list|)
expr_stmt|;
block|}
comment|/** two-node cluster test */
DECL|method|twoNodeTest (Configuration conf)
specifier|private
name|void
name|twoNodeTest
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|doTest
argument_list|(
name|conf
argument_list|,
operator|new
name|long
index|[]
block|{
name|CAPACITY
block|,
name|CAPACITY
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|RACK0
block|,
name|RACK1
block|}
argument_list|,
name|CAPACITY
argument_list|,
name|RACK2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/** test using a user-supplied conf */
DECL|method|integrationTest (Configuration conf)
specifier|public
name|void
name|integrationTest
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|initConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|oneNodeTest
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/* we first start a cluster and fill the cluster up to a certain size.    * then redistribute blocks according the required distribution.    * Then we start an empty datanode.    * Afterwards a balancer is run to balance the cluster.    * A partially filled datanode is excluded during balancing.    * This triggers a situation where one of the block's location is unknown.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|100000
argument_list|)
DECL|method|testUnknownDatanode ()
specifier|public
name|void
name|testUnknownDatanode
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|initConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|long
name|distribution
index|[]
init|=
operator|new
name|long
index|[]
block|{
literal|50
operator|*
name|CAPACITY
operator|/
literal|100
block|,
literal|70
operator|*
name|CAPACITY
operator|/
literal|100
block|,
literal|0
operator|*
name|CAPACITY
operator|/
literal|100
block|}
decl_stmt|;
name|long
name|capacities
index|[]
init|=
operator|new
name|long
index|[]
block|{
name|CAPACITY
block|,
name|CAPACITY
block|,
name|CAPACITY
block|}
decl_stmt|;
name|String
name|racks
index|[]
init|=
operator|new
name|String
index|[]
block|{
name|RACK0
block|,
name|RACK1
block|,
name|RACK1
block|}
decl_stmt|;
name|int
name|numDatanodes
init|=
name|distribution
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|capacities
operator|.
name|length
operator|!=
name|numDatanodes
operator|||
name|racks
operator|.
name|length
operator|!=
name|numDatanodes
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Array length is not the same"
argument_list|)
throw|;
block|}
comment|// calculate total space that need to be filled
specifier|final
name|long
name|totalUsedSpace
init|=
name|sum
argument_list|(
name|distribution
argument_list|)
decl_stmt|;
comment|// fill the cluster
name|ExtendedBlock
index|[]
name|blocks
init|=
name|generateBlocks
argument_list|(
name|conf
argument_list|,
name|totalUsedSpace
argument_list|,
operator|(
name|short
operator|)
name|numDatanodes
argument_list|)
decl_stmt|;
comment|// redistribute blocks
name|Block
index|[]
index|[]
name|blocksDN
init|=
name|distributeBlocks
argument_list|(
name|blocks
argument_list|,
call|(
name|short
call|)
argument_list|(
name|numDatanodes
operator|-
literal|1
argument_list|)
argument_list|,
name|distribution
argument_list|)
decl_stmt|;
comment|// restart the cluster: do NOT format the cluster
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_SAFEMODE_THRESHOLD_PCT_KEY
argument_list|,
literal|"0.0f"
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDatanodes
argument_list|)
operator|.
name|format
argument_list|(
literal|false
argument_list|)
operator|.
name|racks
argument_list|(
name|racks
argument_list|)
operator|.
name|simulatedCapacities
argument_list|(
name|capacities
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|client
operator|=
name|NameNodeProxies
operator|.
name|createProxy
argument_list|(
name|conf
argument_list|,
name|cluster
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
operator|.
name|getUri
argument_list|()
argument_list|,
name|ClientProtocol
operator|.
name|class
argument_list|)
operator|.
name|getProxy
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|cluster
operator|.
name|injectBlocks
argument_list|(
name|i
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|blocksDN
index|[
name|i
index|]
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|cluster
operator|.
name|startDataNodes
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
name|RACK0
block|}
argument_list|,
literal|null
argument_list|,
operator|new
name|long
index|[]
block|{
name|CAPACITY
block|}
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|triggerHeartbeats
argument_list|()
expr_stmt|;
name|Collection
argument_list|<
name|URI
argument_list|>
name|namenodes
init|=
name|DFSUtil
operator|.
name|getNsServiceRpcUris
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|datanodes
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|datanodes
operator|.
name|add
argument_list|(
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDatanodeId
argument_list|()
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
name|BalancerParameters
operator|.
name|Builder
name|pBuilder
init|=
operator|new
name|BalancerParameters
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|pBuilder
operator|.
name|setExcludedNodes
argument_list|(
name|datanodes
argument_list|)
expr_stmt|;
name|pBuilder
operator|.
name|setRunDuringUpgrade
argument_list|(
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|int
name|r
init|=
name|Balancer
operator|.
name|run
argument_list|(
name|namenodes
argument_list|,
name|pBuilder
operator|.
name|build
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ExitStatus
operator|.
name|SUCCESS
operator|.
name|getExitCode
argument_list|()
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test parse method in Balancer#Cli class with threshold value out of    * boundaries.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|100000
argument_list|)
DECL|method|testBalancerCliParseWithThresholdOutOfBoundaries ()
specifier|public
name|void
name|testBalancerCliParseWithThresholdOutOfBoundaries
parameter_list|()
block|{
name|String
name|parameters
index|[]
init|=
operator|new
name|String
index|[]
block|{
literal|"-threshold"
block|,
literal|"0"
block|}
decl_stmt|;
name|String
name|reason
init|=
literal|"IllegalArgumentException is expected when threshold value"
operator|+
literal|" is out of boundary."
decl_stmt|;
try|try
block|{
name|Balancer
operator|.
name|Cli
operator|.
name|parse
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|reason
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Number out of range: threshold = 0.0"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|parameters
operator|=
operator|new
name|String
index|[]
block|{
literal|"-threshold"
block|,
literal|"101"
block|}
expr_stmt|;
try|try
block|{
name|Balancer
operator|.
name|Cli
operator|.
name|parse
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|reason
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Number out of range: threshold = 101.0"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Test a cluster with even distribution,    * then a new empty node is added to the cluster*/
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|100000
argument_list|)
DECL|method|testBalancer0 ()
specifier|public
name|void
name|testBalancer0
parameter_list|()
throws|throws
name|Exception
block|{
name|testBalancer0Internal
argument_list|(
operator|new
name|HdfsConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testBalancer0Internal (Configuration conf)
name|void
name|testBalancer0Internal
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|initConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|oneNodeTest
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|twoNodeTest
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/** Test unevenly distributed cluster */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|100000
argument_list|)
DECL|method|testBalancer1 ()
specifier|public
name|void
name|testBalancer1
parameter_list|()
throws|throws
name|Exception
block|{
name|testBalancer1Internal
argument_list|(
operator|new
name|HdfsConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testBalancer1Internal (Configuration conf)
name|void
name|testBalancer1Internal
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|initConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|testUnevenDistribution
argument_list|(
name|conf
argument_list|,
operator|new
name|long
index|[]
block|{
literal|50
operator|*
name|CAPACITY
operator|/
literal|100
block|,
literal|10
operator|*
name|CAPACITY
operator|/
literal|100
block|}
argument_list|,
operator|new
name|long
index|[]
block|{
name|CAPACITY
block|,
name|CAPACITY
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|RACK0
block|,
name|RACK1
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|HadoopIllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testBalancerWithZeroThreadsForMove ()
specifier|public
name|void
name|testBalancerWithZeroThreadsForMove
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_BALANCE_MAX_NUM_CONCURRENT_MOVES_KEY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|testBalancer1Internal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|100000
argument_list|)
DECL|method|testBalancerWithNonZeroThreadsForMove ()
specifier|public
name|void
name|testBalancerWithNonZeroThreadsForMove
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_BALANCE_MAX_NUM_CONCURRENT_MOVES_KEY
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|testBalancer1Internal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|100000
argument_list|)
DECL|method|testBalancer2 ()
specifier|public
name|void
name|testBalancer2
parameter_list|()
throws|throws
name|Exception
block|{
name|testBalancer2Internal
argument_list|(
operator|new
name|HdfsConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testBalancer2Internal (Configuration conf)
name|void
name|testBalancer2Internal
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|initConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|testBalancerDefaultConstructor
argument_list|(
name|conf
argument_list|,
operator|new
name|long
index|[]
block|{
name|CAPACITY
block|,
name|CAPACITY
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|RACK0
block|,
name|RACK1
block|}
argument_list|,
name|CAPACITY
argument_list|,
name|RACK2
argument_list|)
expr_stmt|;
block|}
DECL|method|testBalancerDefaultConstructor (Configuration conf, long[] capacities, String[] racks, long newCapacity, String newRack)
specifier|private
name|void
name|testBalancerDefaultConstructor
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|long
index|[]
name|capacities
parameter_list|,
name|String
index|[]
name|racks
parameter_list|,
name|long
name|newCapacity
parameter_list|,
name|String
name|newRack
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|numOfDatanodes
init|=
name|capacities
operator|.
name|length
decl_stmt|;
name|assertEquals
argument_list|(
name|numOfDatanodes
argument_list|,
name|racks
operator|.
name|length
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|capacities
operator|.
name|length
argument_list|)
operator|.
name|racks
argument_list|(
name|racks
argument_list|)
operator|.
name|simulatedCapacities
argument_list|(
name|capacities
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|client
operator|=
name|NameNodeProxies
operator|.
name|createProxy
argument_list|(
name|conf
argument_list|,
name|cluster
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
operator|.
name|getUri
argument_list|()
argument_list|,
name|ClientProtocol
operator|.
name|class
argument_list|)
operator|.
name|getProxy
argument_list|()
expr_stmt|;
name|long
name|totalCapacity
init|=
name|sum
argument_list|(
name|capacities
argument_list|)
decl_stmt|;
comment|// fill up the cluster to be 30% full
name|long
name|totalUsedSpace
init|=
name|totalCapacity
operator|*
literal|3
operator|/
literal|10
decl_stmt|;
name|createFile
argument_list|(
name|cluster
argument_list|,
name|filePath
argument_list|,
name|totalUsedSpace
operator|/
name|numOfDatanodes
argument_list|,
operator|(
name|short
operator|)
name|numOfDatanodes
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// start up an empty node with the same capacity and on the same rack
name|cluster
operator|.
name|startDataNodes
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
name|newRack
block|}
argument_list|,
operator|new
name|long
index|[]
block|{
name|newCapacity
block|}
argument_list|)
expr_stmt|;
name|totalCapacity
operator|+=
name|newCapacity
expr_stmt|;
comment|// run balancer and validate results
name|runBalancer
argument_list|(
name|conf
argument_list|,
name|totalUsedSpace
argument_list|,
name|totalCapacity
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test parse method in Balancer#Cli class with wrong number of params    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|100000
argument_list|)
DECL|method|testBalancerCliParseWithWrongParams ()
specifier|public
name|void
name|testBalancerCliParseWithWrongParams
parameter_list|()
block|{
name|String
name|parameters
index|[]
init|=
operator|new
name|String
index|[]
block|{
literal|"-threshold"
block|}
decl_stmt|;
name|String
name|reason
init|=
literal|"IllegalArgumentException is expected when value is not specified"
decl_stmt|;
try|try
block|{
name|Balancer
operator|.
name|Cli
operator|.
name|parse
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|reason
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{      }
name|parameters
operator|=
operator|new
name|String
index|[]
block|{
literal|"-policy"
block|}
expr_stmt|;
try|try
block|{
name|Balancer
operator|.
name|Cli
operator|.
name|parse
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|reason
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{      }
name|parameters
operator|=
operator|new
name|String
index|[]
block|{
literal|"-threshold"
block|,
literal|"1"
block|,
literal|"-policy"
block|}
expr_stmt|;
try|try
block|{
name|Balancer
operator|.
name|Cli
operator|.
name|parse
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|reason
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{      }
name|parameters
operator|=
operator|new
name|String
index|[]
block|{
literal|"-threshold"
block|,
literal|"1"
block|,
literal|"-include"
block|}
expr_stmt|;
try|try
block|{
name|Balancer
operator|.
name|Cli
operator|.
name|parse
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|reason
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{      }
name|parameters
operator|=
operator|new
name|String
index|[]
block|{
literal|"-threshold"
block|,
literal|"1"
block|,
literal|"-exclude"
block|}
expr_stmt|;
try|try
block|{
name|Balancer
operator|.
name|Cli
operator|.
name|parse
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|reason
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{      }
name|parameters
operator|=
operator|new
name|String
index|[]
block|{
literal|"-include"
block|,
literal|"-f"
block|}
expr_stmt|;
try|try
block|{
name|Balancer
operator|.
name|Cli
operator|.
name|parse
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|reason
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{      }
name|parameters
operator|=
operator|new
name|String
index|[]
block|{
literal|"-exclude"
block|,
literal|"-f"
block|}
expr_stmt|;
try|try
block|{
name|Balancer
operator|.
name|Cli
operator|.
name|parse
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|reason
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{      }
name|parameters
operator|=
operator|new
name|String
index|[]
block|{
literal|"-include"
block|,
literal|"testnode1"
block|,
literal|"-exclude"
block|,
literal|"testnode2"
block|}
expr_stmt|;
try|try
block|{
name|Balancer
operator|.
name|Cli
operator|.
name|parse
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"IllegalArgumentException is expected when both -exclude and -include are specified"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{      }
name|parameters
operator|=
operator|new
name|String
index|[]
block|{
literal|"-blockpools"
block|}
expr_stmt|;
try|try
block|{
name|Balancer
operator|.
name|Cli
operator|.
name|parse
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"IllegalArgumentException is expected when a value "
operator|+
literal|"is not specified for the blockpool flag"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{      }
block|}
annotation|@
name|Test
DECL|method|testBalancerCliParseBlockpools ()
specifier|public
name|void
name|testBalancerCliParseBlockpools
parameter_list|()
block|{
name|String
index|[]
name|parameters
init|=
operator|new
name|String
index|[]
block|{
literal|"-blockpools"
block|,
literal|"bp-1,bp-2,bp-3"
block|}
decl_stmt|;
name|BalancerParameters
name|p
init|=
name|Balancer
operator|.
name|Cli
operator|.
name|parse
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|p
operator|.
name|getBlockPools
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|parameters
operator|=
operator|new
name|String
index|[]
block|{
literal|"-blockpools"
block|,
literal|"bp-1"
block|}
expr_stmt|;
name|p
operator|=
name|Balancer
operator|.
name|Cli
operator|.
name|parse
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|getBlockPools
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|parameters
operator|=
operator|new
name|String
index|[]
block|{
literal|"-blockpools"
block|,
literal|"bp-1,,bp-2"
block|}
expr_stmt|;
name|p
operator|=
name|Balancer
operator|.
name|Cli
operator|.
name|parse
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|p
operator|.
name|getBlockPools
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|parameters
operator|=
operator|new
name|String
index|[]
block|{
literal|"-blockpools"
block|,
literal|"bp-1,"
block|}
expr_stmt|;
name|p
operator|=
name|Balancer
operator|.
name|Cli
operator|.
name|parse
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|getBlockPools
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify balancer exits 0 on success.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|100000
argument_list|)
DECL|method|testExitZeroOnSuccess ()
specifier|public
name|void
name|testExitZeroOnSuccess
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|initConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|oneNodeTest
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test a cluster with even distribution,    * then three nodes are added to the cluster,    * runs balancer with two of the nodes in the exclude list    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|100000
argument_list|)
DECL|method|testBalancerWithExcludeList ()
specifier|public
name|void
name|testBalancerWithExcludeList
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|initConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|excludeHosts
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|excludeHosts
operator|.
name|add
argument_list|(
literal|"datanodeY"
argument_list|)
expr_stmt|;
name|excludeHosts
operator|.
name|add
argument_list|(
literal|"datanodeZ"
argument_list|)
expr_stmt|;
name|doTest
argument_list|(
name|conf
argument_list|,
operator|new
name|long
index|[]
block|{
name|CAPACITY
block|,
name|CAPACITY
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|RACK0
block|,
name|RACK1
block|}
argument_list|,
name|CAPACITY
argument_list|,
name|RACK2
argument_list|,
operator|new
name|HostNameBasedNodes
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"datanodeX"
block|,
literal|"datanodeY"
block|,
literal|"datanodeZ"
block|}
argument_list|,
name|excludeHosts
argument_list|,
name|BalancerParameters
operator|.
name|DEFAULT
operator|.
name|getIncludedNodes
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test a cluster with even distribution,    * then three nodes are added to the cluster,    * runs balancer with two of the nodes in the exclude list    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|100000
argument_list|)
DECL|method|testBalancerWithExcludeListWithPorts ()
specifier|public
name|void
name|testBalancerWithExcludeListWithPorts
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|initConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|doTest
argument_list|(
name|conf
argument_list|,
operator|new
name|long
index|[]
block|{
name|CAPACITY
block|,
name|CAPACITY
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|RACK0
block|,
name|RACK1
block|}
argument_list|,
name|CAPACITY
argument_list|,
name|RACK2
argument_list|,
operator|new
name|PortNumberBasedNodes
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test a cluster with even distribution,    * then three nodes are added to the cluster,    * runs balancer with two of the nodes in the exclude list    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|100000
argument_list|)
DECL|method|testBalancerCliWithExcludeList ()
specifier|public
name|void
name|testBalancerCliWithExcludeList
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|initConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|excludeHosts
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|excludeHosts
operator|.
name|add
argument_list|(
literal|"datanodeY"
argument_list|)
expr_stmt|;
name|excludeHosts
operator|.
name|add
argument_list|(
literal|"datanodeZ"
argument_list|)
expr_stmt|;
name|doTest
argument_list|(
name|conf
argument_list|,
operator|new
name|long
index|[]
block|{
name|CAPACITY
block|,
name|CAPACITY
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|RACK0
block|,
name|RACK1
block|}
argument_list|,
name|CAPACITY
argument_list|,
name|RACK2
argument_list|,
operator|new
name|HostNameBasedNodes
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"datanodeX"
block|,
literal|"datanodeY"
block|,
literal|"datanodeZ"
block|}
argument_list|,
name|excludeHosts
argument_list|,
name|BalancerParameters
operator|.
name|DEFAULT
operator|.
name|getIncludedNodes
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test a cluster with even distribution,    * then three nodes are added to the cluster,    * runs balancer with two of the nodes in the exclude list    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|100000
argument_list|)
DECL|method|testBalancerCliWithExcludeListWithPorts ()
specifier|public
name|void
name|testBalancerCliWithExcludeListWithPorts
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|initConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|doTest
argument_list|(
name|conf
argument_list|,
operator|new
name|long
index|[]
block|{
name|CAPACITY
block|,
name|CAPACITY
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|RACK0
block|,
name|RACK1
block|}
argument_list|,
name|CAPACITY
argument_list|,
name|RACK2
argument_list|,
operator|new
name|PortNumberBasedNodes
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test a cluster with even distribution,    * then three nodes are added to the cluster,    * runs balancer with two of the nodes in the exclude list in a file    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|100000
argument_list|)
DECL|method|testBalancerCliWithExcludeListInAFile ()
specifier|public
name|void
name|testBalancerCliWithExcludeListInAFile
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|initConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|excludeHosts
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|excludeHosts
operator|.
name|add
argument_list|(
literal|"datanodeY"
argument_list|)
expr_stmt|;
name|excludeHosts
operator|.
name|add
argument_list|(
literal|"datanodeZ"
argument_list|)
expr_stmt|;
name|doTest
argument_list|(
name|conf
argument_list|,
operator|new
name|long
index|[]
block|{
name|CAPACITY
block|,
name|CAPACITY
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|RACK0
block|,
name|RACK1
block|}
argument_list|,
name|CAPACITY
argument_list|,
name|RACK2
argument_list|,
operator|new
name|HostNameBasedNodes
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"datanodeX"
block|,
literal|"datanodeY"
block|,
literal|"datanodeZ"
block|}
argument_list|,
name|excludeHosts
argument_list|,
name|BalancerParameters
operator|.
name|DEFAULT
operator|.
name|getIncludedNodes
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test a cluster with even distribution,G    * then three nodes are added to the cluster,    * runs balancer with two of the nodes in the exclude list    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|100000
argument_list|)
DECL|method|testBalancerCliWithExcludeListWithPortsInAFile ()
specifier|public
name|void
name|testBalancerCliWithExcludeListWithPortsInAFile
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|initConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|doTest
argument_list|(
name|conf
argument_list|,
operator|new
name|long
index|[]
block|{
name|CAPACITY
block|,
name|CAPACITY
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|RACK0
block|,
name|RACK1
block|}
argument_list|,
name|CAPACITY
argument_list|,
name|RACK2
argument_list|,
operator|new
name|PortNumberBasedNodes
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test a cluster with even distribution,    * then three nodes are added to the cluster,    * runs balancer with two of the nodes in the include list    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|100000
argument_list|)
DECL|method|testBalancerWithIncludeList ()
specifier|public
name|void
name|testBalancerWithIncludeList
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|initConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|includeHosts
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|includeHosts
operator|.
name|add
argument_list|(
literal|"datanodeY"
argument_list|)
expr_stmt|;
name|doTest
argument_list|(
name|conf
argument_list|,
operator|new
name|long
index|[]
block|{
name|CAPACITY
block|,
name|CAPACITY
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|RACK0
block|,
name|RACK1
block|}
argument_list|,
name|CAPACITY
argument_list|,
name|RACK2
argument_list|,
operator|new
name|HostNameBasedNodes
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"datanodeX"
block|,
literal|"datanodeY"
block|,
literal|"datanodeZ"
block|}
argument_list|,
name|BalancerParameters
operator|.
name|DEFAULT
operator|.
name|getExcludedNodes
argument_list|()
argument_list|,
name|includeHosts
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test a cluster with even distribution,    * then three nodes are added to the cluster,    * runs balancer with two of the nodes in the include list    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|100000
argument_list|)
DECL|method|testBalancerWithIncludeListWithPorts ()
specifier|public
name|void
name|testBalancerWithIncludeListWithPorts
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|initConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|doTest
argument_list|(
name|conf
argument_list|,
operator|new
name|long
index|[]
block|{
name|CAPACITY
block|,
name|CAPACITY
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|RACK0
block|,
name|RACK1
block|}
argument_list|,
name|CAPACITY
argument_list|,
name|RACK2
argument_list|,
operator|new
name|PortNumberBasedNodes
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test a cluster with even distribution,    * then three nodes are added to the cluster,    * runs balancer with two of the nodes in the include list    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|100000
argument_list|)
DECL|method|testBalancerCliWithIncludeList ()
specifier|public
name|void
name|testBalancerCliWithIncludeList
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|initConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|includeHosts
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|includeHosts
operator|.
name|add
argument_list|(
literal|"datanodeY"
argument_list|)
expr_stmt|;
name|doTest
argument_list|(
name|conf
argument_list|,
operator|new
name|long
index|[]
block|{
name|CAPACITY
block|,
name|CAPACITY
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|RACK0
block|,
name|RACK1
block|}
argument_list|,
name|CAPACITY
argument_list|,
name|RACK2
argument_list|,
operator|new
name|HostNameBasedNodes
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"datanodeX"
block|,
literal|"datanodeY"
block|,
literal|"datanodeZ"
block|}
argument_list|,
name|BalancerParameters
operator|.
name|DEFAULT
operator|.
name|getExcludedNodes
argument_list|()
argument_list|,
name|includeHosts
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test a cluster with even distribution,    * then three nodes are added to the cluster,    * runs balancer with two of the nodes in the include list    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|100000
argument_list|)
DECL|method|testBalancerCliWithIncludeListWithPorts ()
specifier|public
name|void
name|testBalancerCliWithIncludeListWithPorts
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|initConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|doTest
argument_list|(
name|conf
argument_list|,
operator|new
name|long
index|[]
block|{
name|CAPACITY
block|,
name|CAPACITY
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|RACK0
block|,
name|RACK1
block|}
argument_list|,
name|CAPACITY
argument_list|,
name|RACK2
argument_list|,
operator|new
name|PortNumberBasedNodes
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test a cluster with even distribution,    * then three nodes are added to the cluster,    * runs balancer with two of the nodes in the include list    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|100000
argument_list|)
DECL|method|testBalancerCliWithIncludeListInAFile ()
specifier|public
name|void
name|testBalancerCliWithIncludeListInAFile
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|initConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|includeHosts
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|includeHosts
operator|.
name|add
argument_list|(
literal|"datanodeY"
argument_list|)
expr_stmt|;
name|doTest
argument_list|(
name|conf
argument_list|,
operator|new
name|long
index|[]
block|{
name|CAPACITY
block|,
name|CAPACITY
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|RACK0
block|,
name|RACK1
block|}
argument_list|,
name|CAPACITY
argument_list|,
name|RACK2
argument_list|,
operator|new
name|HostNameBasedNodes
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"datanodeX"
block|,
literal|"datanodeY"
block|,
literal|"datanodeZ"
block|}
argument_list|,
name|BalancerParameters
operator|.
name|DEFAULT
operator|.
name|getExcludedNodes
argument_list|()
argument_list|,
name|includeHosts
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test a cluster with even distribution,    * then three nodes are added to the cluster,    * runs balancer with two of the nodes in the include list    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|100000
argument_list|)
DECL|method|testBalancerCliWithIncludeListWithPortsInAFile ()
specifier|public
name|void
name|testBalancerCliWithIncludeListWithPortsInAFile
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|initConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|doTest
argument_list|(
name|conf
argument_list|,
operator|new
name|long
index|[]
block|{
name|CAPACITY
block|,
name|CAPACITY
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|RACK0
block|,
name|RACK1
block|}
argument_list|,
name|CAPACITY
argument_list|,
name|RACK2
argument_list|,
operator|new
name|PortNumberBasedNodes
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/*    * Test Balancer with Ram_Disk configured    * One DN has two files on RAM_DISK, other DN has no files on RAM_DISK.    * Then verify that the balancer does not migrate files on RAM_DISK across DN.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testBalancerWithRamDisk ()
specifier|public
name|void
name|testBalancerWithRamDisk
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|SEED
init|=
literal|0xFADED
decl_stmt|;
specifier|final
name|short
name|REPL_FACT
init|=
literal|1
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|int
name|defaultRamDiskCapacity
init|=
literal|10
decl_stmt|;
specifier|final
name|long
name|ramDiskStorageLimit
init|=
operator|(
operator|(
name|long
operator|)
name|defaultRamDiskCapacity
operator|*
name|DEFAULT_RAM_DISK_BLOCK_SIZE
operator|)
operator|+
operator|(
name|DEFAULT_RAM_DISK_BLOCK_SIZE
operator|-
literal|1
operator|)
decl_stmt|;
specifier|final
name|long
name|diskStorageLimit
init|=
operator|(
operator|(
name|long
operator|)
name|defaultRamDiskCapacity
operator|*
name|DEFAULT_RAM_DISK_BLOCK_SIZE
operator|)
operator|+
operator|(
name|DEFAULT_RAM_DISK_BLOCK_SIZE
operator|-
literal|1
operator|)
decl_stmt|;
name|initConfWithRamDisk
argument_list|(
name|conf
argument_list|,
name|ramDiskStorageLimit
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|storageCapacities
argument_list|(
operator|new
name|long
index|[]
block|{
name|ramDiskStorageLimit
block|,
name|diskStorageLimit
block|}
argument_list|)
operator|.
name|storageTypes
argument_list|(
operator|new
name|StorageType
index|[]
block|{
name|RAM_DISK
block|,
name|DEFAULT
block|}
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
comment|// Create few files on RAM_DISK
specifier|final
name|String
name|METHOD_NAME
init|=
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|path1
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|METHOD_NAME
operator|+
literal|".01.dat"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|path2
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|METHOD_NAME
operator|+
literal|".02.dat"
argument_list|)
decl_stmt|;
name|DistributedFileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|DFSClient
name|client
init|=
name|fs
operator|.
name|getClient
argument_list|()
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|path1
argument_list|,
literal|true
argument_list|,
name|DEFAULT_RAM_DISK_BLOCK_SIZE
argument_list|,
literal|4
operator|*
name|DEFAULT_RAM_DISK_BLOCK_SIZE
argument_list|,
name|DEFAULT_RAM_DISK_BLOCK_SIZE
argument_list|,
name|REPL_FACT
argument_list|,
name|SEED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|path2
argument_list|,
literal|true
argument_list|,
name|DEFAULT_RAM_DISK_BLOCK_SIZE
argument_list|,
literal|1
operator|*
name|DEFAULT_RAM_DISK_BLOCK_SIZE
argument_list|,
name|DEFAULT_RAM_DISK_BLOCK_SIZE
argument_list|,
name|REPL_FACT
argument_list|,
name|SEED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Sleep for a short time to allow the lazy writer thread to do its job
name|Thread
operator|.
name|sleep
argument_list|(
literal|6
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// Add another fresh DN with the same type/capacity without files on RAM_DISK
name|StorageType
index|[]
index|[]
name|storageTypes
init|=
operator|new
name|StorageType
index|[]
index|[]
block|{
block|{
name|RAM_DISK
block|,
name|DEFAULT
block|}
block|}
decl_stmt|;
name|long
index|[]
index|[]
name|storageCapacities
init|=
operator|new
name|long
index|[]
index|[]
block|{
block|{
name|ramDiskStorageLimit
block|,
name|diskStorageLimit
block|}
block|}
decl_stmt|;
name|cluster
operator|.
name|startDataNodes
argument_list|(
name|conf
argument_list|,
name|REPL_FACT
argument_list|,
name|storageTypes
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|storageCapacities
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|triggerHeartbeats
argument_list|()
expr_stmt|;
name|Collection
argument_list|<
name|URI
argument_list|>
name|namenodes
init|=
name|DFSUtil
operator|.
name|getNsServiceRpcUris
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Run Balancer
specifier|final
name|BalancerParameters
name|p
init|=
name|BalancerParameters
operator|.
name|DEFAULT
decl_stmt|;
specifier|final
name|int
name|r
init|=
name|Balancer
operator|.
name|run
argument_list|(
name|namenodes
argument_list|,
name|p
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// Validate no RAM_DISK block should be moved
name|assertEquals
argument_list|(
name|ExitStatus
operator|.
name|NO_MOVE_PROGRESS
operator|.
name|getExitCode
argument_list|()
argument_list|,
name|r
argument_list|)
expr_stmt|;
comment|// Verify files are still on RAM_DISK
name|DFSTestUtil
operator|.
name|verifyFileReplicasOnStorageType
argument_list|(
name|fs
argument_list|,
name|client
argument_list|,
name|path1
argument_list|,
name|RAM_DISK
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|verifyFileReplicasOnStorageType
argument_list|(
name|fs
argument_list|,
name|client
argument_list|,
name|path2
argument_list|,
name|RAM_DISK
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check that the balancer exits when there is an unfinalized upgrade.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testBalancerDuringUpgrade ()
specifier|public
name|void
name|testBalancerDuringUpgrade
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|SEED
init|=
literal|0xFADED
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REPLICATION_INTERVAL_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BALANCER_GETBLOCKS_MIN_BLOCK_SIZE_KEY
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
specifier|final
name|int
name|BLOCK_SIZE
init|=
literal|1024
operator|*
literal|1024
decl_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|storageCapacities
argument_list|(
operator|new
name|long
index|[]
block|{
name|BLOCK_SIZE
operator|*
literal|10
block|}
argument_list|)
operator|.
name|storageTypes
argument_list|(
operator|new
name|StorageType
index|[]
block|{
name|DEFAULT
block|}
argument_list|)
operator|.
name|storagesPerDatanode
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
comment|// Create a file on the single DN
specifier|final
name|String
name|METHOD_NAME
init|=
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|path1
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|METHOD_NAME
operator|+
literal|".01.dat"
argument_list|)
decl_stmt|;
name|DistributedFileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|path1
argument_list|,
name|BLOCK_SIZE
argument_list|,
name|BLOCK_SIZE
operator|*
literal|2
argument_list|,
name|BLOCK_SIZE
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
comment|// Add another DN with the same capacity, cluster is now unbalanced
name|cluster
operator|.
name|startDataNodes
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|triggerHeartbeats
argument_list|()
expr_stmt|;
name|Collection
argument_list|<
name|URI
argument_list|>
name|namenodes
init|=
name|DFSUtil
operator|.
name|getNsServiceRpcUris
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Run balancer
specifier|final
name|BalancerParameters
name|p
init|=
name|BalancerParameters
operator|.
name|DEFAULT
decl_stmt|;
name|fs
operator|.
name|setSafeMode
argument_list|(
name|HdfsConstants
operator|.
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
argument_list|)
expr_stmt|;
name|fs
operator|.
name|rollingUpgrade
argument_list|(
name|HdfsConstants
operator|.
name|RollingUpgradeAction
operator|.
name|PREPARE
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setSafeMode
argument_list|(
name|HdfsConstants
operator|.
name|SafeModeAction
operator|.
name|SAFEMODE_LEAVE
argument_list|)
expr_stmt|;
comment|// Rolling upgrade should abort the balancer
name|assertEquals
argument_list|(
name|ExitStatus
operator|.
name|UNFINALIZED_UPGRADE
operator|.
name|getExitCode
argument_list|()
argument_list|,
name|Balancer
operator|.
name|run
argument_list|(
name|namenodes
argument_list|,
name|p
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
comment|// Should work with the -runDuringUpgrade flag.
name|BalancerParameters
operator|.
name|Builder
name|b
init|=
operator|new
name|BalancerParameters
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|b
operator|.
name|setRunDuringUpgrade
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|BalancerParameters
name|runDuringUpgrade
init|=
name|b
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|ExitStatus
operator|.
name|SUCCESS
operator|.
name|getExitCode
argument_list|()
argument_list|,
name|Balancer
operator|.
name|run
argument_list|(
name|namenodes
argument_list|,
name|runDuringUpgrade
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
comment|// Finalize the rolling upgrade
name|fs
operator|.
name|rollingUpgrade
argument_list|(
name|HdfsConstants
operator|.
name|RollingUpgradeAction
operator|.
name|FINALIZE
argument_list|)
expr_stmt|;
comment|// Should also work after finalization.
name|assertEquals
argument_list|(
name|ExitStatus
operator|.
name|SUCCESS
operator|.
name|getExitCode
argument_list|()
argument_list|,
name|Balancer
operator|.
name|run
argument_list|(
name|namenodes
argument_list|,
name|p
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test special case. Two replicas belong to same block should not in same node.    * We have 2 nodes.    * We have a block in (DN0,SSD) and (DN1,DISK).    * Replica in (DN0,SSD) should not be moved to (DN1,SSD).    * Otherwise DN1 has 2 replicas.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|100000
argument_list|)
DECL|method|testTwoReplicaShouldNotInSameDN ()
specifier|public
name|void
name|testTwoReplicaShouldNotInSameDN
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|int
name|blockSize
init|=
literal|5
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REPLICATION_INTERVAL_KEY
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BALANCER_GETBLOCKS_MIN_BLOCK_SIZE_KEY
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|int
name|numOfDatanodes
init|=
literal|2
decl_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|2
argument_list|)
operator|.
name|racks
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"/default/rack0"
block|,
literal|"/default/rack0"
block|}
argument_list|)
operator|.
name|storagesPerDatanode
argument_list|(
literal|2
argument_list|)
operator|.
name|storageTypes
argument_list|(
operator|new
name|StorageType
index|[]
index|[]
block|{
block|{
name|StorageType
operator|.
name|SSD
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|SSD
block|,
name|StorageType
operator|.
name|DISK
block|}
block|}
argument_list|)
operator|.
name|storageCapacities
argument_list|(
operator|new
name|long
index|[]
index|[]
block|{
block|{
literal|100
operator|*
name|blockSize
block|,
literal|20
operator|*
name|blockSize
block|}
block|,
block|{
literal|20
operator|*
name|blockSize
block|,
literal|100
operator|*
name|blockSize
block|}
block|}
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
comment|//set "/bar" directory with ONE_SSD storage policy.
name|DistributedFileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|barDir
init|=
operator|new
name|Path
argument_list|(
literal|"/bar"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdir
argument_list|(
name|barDir
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|777
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setStoragePolicy
argument_list|(
name|barDir
argument_list|,
name|HdfsConstants
operator|.
name|ONESSD_STORAGE_POLICY_NAME
argument_list|)
expr_stmt|;
comment|// Insert 30 blocks. So (DN0,SSD) and (DN1,DISK) are about half full,
comment|// and (DN0,SSD) and (DN1,DISK) are about 15% full.
name|long
name|fileLen
init|=
literal|30
operator|*
name|blockSize
decl_stmt|;
comment|// fooFile has ONE_SSD policy. So
comment|// (DN0,SSD) and (DN1,DISK) have 2 replicas belong to same block.
comment|// (DN0,DISK) and (DN1,SSD) have 2 replicas belong to same block.
name|Path
name|fooFile
init|=
operator|new
name|Path
argument_list|(
name|barDir
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|cluster
argument_list|,
name|fooFile
argument_list|,
name|fileLen
argument_list|,
operator|(
name|short
operator|)
name|numOfDatanodes
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// update space info
name|cluster
operator|.
name|triggerHeartbeats
argument_list|()
expr_stmt|;
name|BalancerParameters
name|p
init|=
name|BalancerParameters
operator|.
name|DEFAULT
decl_stmt|;
name|Collection
argument_list|<
name|URI
argument_list|>
name|namenodes
init|=
name|DFSUtil
operator|.
name|getNsServiceRpcUris
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|int
name|r
init|=
name|Balancer
operator|.
name|run
argument_list|(
name|namenodes
argument_list|,
name|p
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// Replica in (DN0,SSD) was not moved to (DN1,SSD), because (DN1,DISK)
comment|// already has one. Otherwise DN1 will have 2 replicas.
comment|// For same reason, no replicas were moved.
name|assertEquals
argument_list|(
name|ExitStatus
operator|.
name|NO_MOVE_PROGRESS
operator|.
name|getExitCode
argument_list|()
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test running many balancer simultaneously.    *    * Case-1: First balancer is running. Now, running second one should get    * "Another balancer is running. Exiting.." IOException and fail immediately    *    * Case-2: When running second balancer 'balancer.id' file exists but the    * lease doesn't exists. Now, the second balancer should run successfully.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|100000
argument_list|)
DECL|method|testManyBalancerSimultaneously ()
specifier|public
name|void
name|testManyBalancerSimultaneously
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|initConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// add an empty node with half of the capacities(4 * CAPACITY)& the same
comment|// rack
name|long
index|[]
name|capacities
init|=
operator|new
name|long
index|[]
block|{
literal|4
operator|*
name|CAPACITY
block|}
decl_stmt|;
name|String
index|[]
name|racks
init|=
operator|new
name|String
index|[]
block|{
name|RACK0
block|}
decl_stmt|;
name|long
name|newCapacity
init|=
literal|2
operator|*
name|CAPACITY
decl_stmt|;
name|String
name|newRack
init|=
name|RACK0
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"capacities = "
operator|+
name|long2String
argument_list|(
name|capacities
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"racks      = "
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|racks
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"newCapacity= "
operator|+
name|newCapacity
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"newRack    = "
operator|+
name|newRack
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"useTool    = "
operator|+
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|capacities
operator|.
name|length
argument_list|,
name|racks
operator|.
name|length
argument_list|)
expr_stmt|;
name|int
name|numOfDatanodes
init|=
name|capacities
operator|.
name|length
decl_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|capacities
operator|.
name|length
argument_list|)
operator|.
name|racks
argument_list|(
name|racks
argument_list|)
operator|.
name|simulatedCapacities
argument_list|(
name|capacities
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|client
operator|=
name|NameNodeProxies
operator|.
name|createProxy
argument_list|(
name|conf
argument_list|,
name|cluster
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
operator|.
name|getUri
argument_list|()
argument_list|,
name|ClientProtocol
operator|.
name|class
argument_list|)
operator|.
name|getProxy
argument_list|()
expr_stmt|;
name|long
name|totalCapacity
init|=
name|sum
argument_list|(
name|capacities
argument_list|)
decl_stmt|;
comment|// fill up the cluster to be 30% full
specifier|final
name|long
name|totalUsedSpace
init|=
name|totalCapacity
operator|*
literal|3
operator|/
literal|10
decl_stmt|;
name|createFile
argument_list|(
name|cluster
argument_list|,
name|filePath
argument_list|,
name|totalUsedSpace
operator|/
name|numOfDatanodes
argument_list|,
operator|(
name|short
operator|)
name|numOfDatanodes
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// start up an empty node with the same capacity and on the same rack
name|cluster
operator|.
name|startDataNodes
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
name|newRack
block|}
argument_list|,
operator|new
name|long
index|[]
block|{
name|newCapacity
block|}
argument_list|)
expr_stmt|;
comment|// Case1: Simulate first balancer by creating 'balancer.id' file. It
comment|// will keep this file until the balancing operation is completed.
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|Balancer
operator|.
name|BALANCER_ID_PATH
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeBytes
argument_list|(
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|hflush
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"'balancer.id' file doesn't exist!"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|Balancer
operator|.
name|BALANCER_ID_PATH
argument_list|)
argument_list|)
expr_stmt|;
comment|// start second balancer
specifier|final
name|String
index|[]
name|args
init|=
block|{
literal|"-policy"
block|,
literal|"datanode"
block|}
decl_stmt|;
specifier|final
name|Tool
name|tool
init|=
operator|new
name|Cli
argument_list|()
decl_stmt|;
name|tool
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|int
name|exitCode
init|=
name|tool
operator|.
name|run
argument_list|(
name|args
argument_list|)
decl_stmt|;
comment|// start balancing
name|assertEquals
argument_list|(
literal|"Exit status code mismatches"
argument_list|,
name|ExitStatus
operator|.
name|IO_EXCEPTION
operator|.
name|getExitCode
argument_list|()
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
comment|// Case2: Release lease so that another balancer would be able to
comment|// perform balancing.
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"'balancer.id' file doesn't exist!"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|Balancer
operator|.
name|BALANCER_ID_PATH
argument_list|)
argument_list|)
expr_stmt|;
name|exitCode
operator|=
name|tool
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
comment|// start balancing
name|assertEquals
argument_list|(
literal|"Exit status code mismatches"
argument_list|,
name|ExitStatus
operator|.
name|SUCCESS
operator|.
name|getExitCode
argument_list|()
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
block|}
comment|/** Balancer should not move blocks with size< minBlockSize. */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testMinBlockSizeAndSourceNodes ()
specifier|public
name|void
name|testMinBlockSizeAndSourceNodes
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|initConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
specifier|final
name|short
name|replication
init|=
literal|3
decl_stmt|;
specifier|final
name|long
index|[]
name|lengths
init|=
block|{
literal|10
block|,
literal|10
block|,
literal|10
block|,
literal|10
block|}
decl_stmt|;
specifier|final
name|long
index|[]
name|capacities
init|=
operator|new
name|long
index|[
name|replication
index|]
decl_stmt|;
specifier|final
name|long
name|totalUsed
init|=
name|capacities
operator|.
name|length
operator|*
name|sum
argument_list|(
name|lengths
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|capacities
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|capacities
operator|.
name|length
argument_list|)
operator|.
name|simulatedCapacities
argument_list|(
name|capacities
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
specifier|final
name|DistributedFileSystem
name|dfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|client
operator|=
name|NameNodeProxies
operator|.
name|createProxy
argument_list|(
name|conf
argument_list|,
name|dfs
operator|.
name|getUri
argument_list|()
argument_list|,
name|ClientProtocol
operator|.
name|class
argument_list|)
operator|.
name|getProxy
argument_list|()
expr_stmt|;
comment|// fill up the cluster to be 80% full
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lengths
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|long
name|size
init|=
name|lengths
index|[
name|i
index|]
decl_stmt|;
specifier|final
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
literal|"/file"
operator|+
name|i
operator|+
literal|"_size"
operator|+
name|size
argument_list|)
decl_stmt|;
try|try
init|(
specifier|final
name|OutputStream
name|out
init|=
name|dfs
operator|.
name|create
argument_list|(
name|p
argument_list|)
init|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|size
condition|;
name|j
operator|++
control|)
block|{
name|out
operator|.
name|write
argument_list|(
name|j
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// start up an empty node with the same capacity
name|cluster
operator|.
name|startDataNodes
argument_list|(
name|conf
argument_list|,
name|capacities
operator|.
name|length
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|capacities
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"capacities    = "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|capacities
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"totalUsedSpace= "
operator|+
name|totalUsed
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"lengths       = "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|lengths
argument_list|)
operator|+
literal|", #="
operator|+
name|lengths
operator|.
name|length
argument_list|)
expr_stmt|;
name|waitForHeartBeat
argument_list|(
name|totalUsed
argument_list|,
literal|2
operator|*
name|capacities
index|[
literal|0
index|]
operator|*
name|capacities
operator|.
name|length
argument_list|,
name|client
argument_list|,
name|cluster
argument_list|)
expr_stmt|;
specifier|final
name|Collection
argument_list|<
name|URI
argument_list|>
name|namenodes
init|=
name|DFSUtil
operator|.
name|getNsServiceRpcUris
argument_list|(
name|conf
argument_list|)
decl_stmt|;
block|{
comment|// run Balancer with min-block-size=50
name|BalancerParameters
operator|.
name|Builder
name|b
init|=
operator|new
name|BalancerParameters
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|b
operator|.
name|setBalancingPolicy
argument_list|(
name|BalancingPolicy
operator|.
name|Node
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|b
operator|.
name|setThreshold
argument_list|(
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|BalancerParameters
name|p
init|=
name|b
operator|.
name|build
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BALANCER_GETBLOCKS_MIN_BLOCK_SIZE_KEY
argument_list|,
literal|50
argument_list|)
expr_stmt|;
specifier|final
name|int
name|r
init|=
name|Balancer
operator|.
name|run
argument_list|(
name|namenodes
argument_list|,
name|p
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ExitStatus
operator|.
name|NO_MOVE_PROGRESS
operator|.
name|getExitCode
argument_list|()
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BALANCER_GETBLOCKS_MIN_BLOCK_SIZE_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
comment|// run Balancer with empty nodes as source nodes
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|sourceNodes
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|DataNode
argument_list|>
name|datanodes
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|capacities
operator|.
name|length
init|;
name|i
operator|<
name|datanodes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|sourceNodes
operator|.
name|add
argument_list|(
name|datanodes
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|BalancerParameters
operator|.
name|Builder
name|b
init|=
operator|new
name|BalancerParameters
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|b
operator|.
name|setBalancingPolicy
argument_list|(
name|BalancingPolicy
operator|.
name|Node
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|b
operator|.
name|setThreshold
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|b
operator|.
name|setSourceNodes
argument_list|(
name|sourceNodes
argument_list|)
expr_stmt|;
specifier|final
name|BalancerParameters
name|p
init|=
name|b
operator|.
name|build
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BALANCER_GETBLOCKS_MIN_BLOCK_SIZE_KEY
argument_list|,
literal|50
argument_list|)
expr_stmt|;
specifier|final
name|int
name|r
init|=
name|Balancer
operator|.
name|run
argument_list|(
name|namenodes
argument_list|,
name|p
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ExitStatus
operator|.
name|NO_MOVE_BLOCK
operator|.
name|getExitCode
argument_list|()
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
block|{
comment|// run Balancer with a filled node as a source node
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|sourceNodes
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|DataNode
argument_list|>
name|datanodes
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
decl_stmt|;
name|sourceNodes
operator|.
name|add
argument_list|(
name|datanodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
name|BalancerParameters
operator|.
name|Builder
name|b
init|=
operator|new
name|BalancerParameters
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|b
operator|.
name|setBalancingPolicy
argument_list|(
name|BalancingPolicy
operator|.
name|Node
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|b
operator|.
name|setThreshold
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|b
operator|.
name|setSourceNodes
argument_list|(
name|sourceNodes
argument_list|)
expr_stmt|;
specifier|final
name|BalancerParameters
name|p
init|=
name|b
operator|.
name|build
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BALANCER_GETBLOCKS_MIN_BLOCK_SIZE_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|int
name|r
init|=
name|Balancer
operator|.
name|run
argument_list|(
name|namenodes
argument_list|,
name|p
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ExitStatus
operator|.
name|NO_MOVE_BLOCK
operator|.
name|getExitCode
argument_list|()
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
block|{
comment|// run Balancer with all filled node as source nodes
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|sourceNodes
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|DataNode
argument_list|>
name|datanodes
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|capacities
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|sourceNodes
operator|.
name|add
argument_list|(
name|datanodes
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|BalancerParameters
operator|.
name|Builder
name|b
init|=
operator|new
name|BalancerParameters
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|b
operator|.
name|setBalancingPolicy
argument_list|(
name|BalancingPolicy
operator|.
name|Node
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|b
operator|.
name|setThreshold
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|b
operator|.
name|setSourceNodes
argument_list|(
name|sourceNodes
argument_list|)
expr_stmt|;
specifier|final
name|BalancerParameters
name|p
init|=
name|b
operator|.
name|build
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BALANCER_GETBLOCKS_MIN_BLOCK_SIZE_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|int
name|r
init|=
name|Balancer
operator|.
name|run
argument_list|(
name|namenodes
argument_list|,
name|p
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ExitStatus
operator|.
name|SUCCESS
operator|.
name|getExitCode
argument_list|()
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|integrationTestWithStripedFile (Configuration conf)
specifier|public
name|void
name|integrationTestWithStripedFile
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|initConfWithStripe
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|doTestBalancerWithStripedFile
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|100000
argument_list|)
DECL|method|testBalancerWithStripedFile ()
specifier|public
name|void
name|testBalancerWithStripedFile
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|initConfWithStripe
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|doTestBalancerWithStripedFile
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestBalancerWithStripedFile (Configuration conf)
specifier|private
name|void
name|doTestBalancerWithStripedFile
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|numOfDatanodes
init|=
name|dataBlocks
operator|+
name|parityBlocks
operator|+
literal|2
decl_stmt|;
name|int
name|numOfRacks
init|=
name|dataBlocks
decl_stmt|;
name|long
name|capacity
init|=
literal|20
operator|*
name|DEFAULT_STRIPE_BLOCK_SIZE
decl_stmt|;
name|long
index|[]
name|capacities
init|=
operator|new
name|long
index|[
name|numOfDatanodes
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|capacities
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|capacities
index|[
name|i
index|]
operator|=
name|capacity
expr_stmt|;
block|}
name|String
index|[]
name|racks
init|=
operator|new
name|String
index|[
name|numOfDatanodes
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOfDatanodes
condition|;
name|i
operator|++
control|)
block|{
name|racks
index|[
name|i
index|]
operator|=
literal|"/rack"
operator|+
operator|(
name|i
operator|%
name|numOfRacks
operator|)
expr_stmt|;
block|}
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numOfDatanodes
argument_list|)
operator|.
name|racks
argument_list|(
name|racks
argument_list|)
operator|.
name|simulatedCapacities
argument_list|(
name|capacities
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|client
operator|=
name|NameNodeProxies
operator|.
name|createProxy
argument_list|(
name|conf
argument_list|,
name|cluster
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
operator|.
name|getUri
argument_list|()
argument_list|,
name|ClientProtocol
operator|.
name|class
argument_list|)
operator|.
name|getProxy
argument_list|()
expr_stmt|;
name|client
operator|.
name|setErasureCodingPolicy
argument_list|(
literal|"/"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|long
name|totalCapacity
init|=
name|sum
argument_list|(
name|capacities
argument_list|)
decl_stmt|;
comment|// fill up the cluster with 30% data. It'll be 45% full plus parity.
name|long
name|fileLen
init|=
name|totalCapacity
operator|*
literal|3
operator|/
literal|10
decl_stmt|;
name|long
name|totalUsedSpace
init|=
name|fileLen
operator|*
operator|(
name|dataBlocks
operator|+
name|parityBlocks
operator|)
operator|/
name|dataBlocks
decl_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|filePath
argument_list|,
name|fileLen
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
name|r
operator|.
name|nextLong
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify locations of striped blocks
name|LocatedBlocks
name|locatedBlocks
init|=
name|client
operator|.
name|getBlockLocations
argument_list|(
name|fileName
argument_list|,
literal|0
argument_list|,
name|fileLen
argument_list|)
decl_stmt|;
name|StripedFileTestUtil
operator|.
name|verifyLocatedStripedBlocks
argument_list|(
name|locatedBlocks
argument_list|,
name|groupSize
argument_list|)
expr_stmt|;
comment|// add one datanode
name|String
name|newRack
init|=
literal|"/rack"
operator|+
operator|(
operator|++
name|numOfRacks
operator|)
decl_stmt|;
name|cluster
operator|.
name|startDataNodes
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
name|newRack
block|}
argument_list|,
literal|null
argument_list|,
operator|new
name|long
index|[]
block|{
name|capacity
block|}
argument_list|)
expr_stmt|;
name|totalCapacity
operator|+=
name|capacity
expr_stmt|;
name|cluster
operator|.
name|triggerHeartbeats
argument_list|()
expr_stmt|;
comment|// run balancer and validate results
name|BalancerParameters
name|p
init|=
name|BalancerParameters
operator|.
name|DEFAULT
decl_stmt|;
name|Collection
argument_list|<
name|URI
argument_list|>
name|namenodes
init|=
name|DFSUtil
operator|.
name|getNsServiceRpcUris
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|runBalancer
argument_list|(
name|conf
argument_list|,
name|totalUsedSpace
argument_list|,
name|totalCapacity
argument_list|,
name|p
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// verify locations of striped blocks
name|locatedBlocks
operator|=
name|client
operator|.
name|getBlockLocations
argument_list|(
name|fileName
argument_list|,
literal|0
argument_list|,
name|fileLen
argument_list|)
expr_stmt|;
name|StripedFileTestUtil
operator|.
name|verifyLocatedStripedBlocks
argument_list|(
name|locatedBlocks
argument_list|,
name|groupSize
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * @param args    */
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|TestBalancer
name|balancerTest
init|=
operator|new
name|TestBalancer
argument_list|()
decl_stmt|;
name|balancerTest
operator|.
name|testBalancer0
argument_list|()
expr_stmt|;
name|balancerTest
operator|.
name|testBalancer1
argument_list|()
expr_stmt|;
name|balancerTest
operator|.
name|testBalancer2
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

