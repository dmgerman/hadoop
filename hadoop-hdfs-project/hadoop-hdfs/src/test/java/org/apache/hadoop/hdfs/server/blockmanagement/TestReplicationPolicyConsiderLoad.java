begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.blockmanagement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|TestBlockStoragePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|ExportedBlockKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|NodeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|StorageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|VersionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestReplicationPolicyConsiderLoad
specifier|public
class|class
name|TestReplicationPolicyConsiderLoad
block|{
DECL|field|namenode
specifier|private
specifier|static
name|NameNode
name|namenode
decl_stmt|;
DECL|field|dnManager
specifier|private
specifier|static
name|DatanodeManager
name|dnManager
decl_stmt|;
DECL|field|dnrList
specifier|private
specifier|static
name|List
argument_list|<
name|DatanodeRegistration
argument_list|>
name|dnrList
decl_stmt|;
DECL|field|dataNodes
specifier|private
specifier|static
name|DatanodeDescriptor
index|[]
name|dataNodes
decl_stmt|;
DECL|field|storages
specifier|private
specifier|static
name|DatanodeStorageInfo
index|[]
name|storages
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setupCluster ()
specifier|public
specifier|static
name|void
name|setupCluster
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
specifier|final
name|String
index|[]
name|racks
init|=
block|{
literal|"/rack1"
block|,
literal|"/rack1"
block|,
literal|"/rack1"
block|,
literal|"/rack2"
block|,
literal|"/rack2"
block|,
literal|"/rack2"
block|}
decl_stmt|;
name|storages
operator|=
name|DFSTestUtil
operator|.
name|createDatanodeStorageInfos
argument_list|(
name|racks
argument_list|)
expr_stmt|;
name|dataNodes
operator|=
name|DFSTestUtil
operator|.
name|toDatanodeDescriptor
argument_list|(
name|storages
argument_list|)
expr_stmt|;
name|FileSystem
operator|.
name|setDefaultUri
argument_list|(
name|conf
argument_list|,
literal|"hdfs://localhost:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HTTP_ADDRESS_KEY
argument_list|,
literal|"0.0.0.0:0"
argument_list|)
expr_stmt|;
name|File
name|baseDir
init|=
name|PathUtils
operator|.
name|getTestDir
argument_list|(
name|TestReplicationPolicy
operator|.
name|class
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_NAME_DIR_KEY
argument_list|,
operator|new
name|File
argument_list|(
name|baseDir
argument_list|,
literal|"name"
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_AVOID_STALE_DATANODE_FOR_READ_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_AVOID_STALE_DATANODE_FOR_WRITE_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REPLICATION_CONSIDERLOAD_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|formatNameNode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|namenode
operator|=
operator|new
name|NameNode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|int
name|blockSize
init|=
literal|1024
decl_stmt|;
name|dnrList
operator|=
operator|new
name|ArrayList
argument_list|<
name|DatanodeRegistration
argument_list|>
argument_list|()
expr_stmt|;
name|dnManager
operator|=
name|namenode
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
expr_stmt|;
comment|// Register DNs
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|6
condition|;
name|i
operator|++
control|)
block|{
name|DatanodeRegistration
name|dnr
init|=
operator|new
name|DatanodeRegistration
argument_list|(
name|dataNodes
index|[
name|i
index|]
argument_list|,
operator|new
name|StorageInfo
argument_list|(
name|NodeType
operator|.
name|DATA_NODE
argument_list|)
argument_list|,
operator|new
name|ExportedBlockKeys
argument_list|()
argument_list|,
name|VersionInfo
operator|.
name|getVersion
argument_list|()
argument_list|)
decl_stmt|;
name|dnrList
operator|.
name|add
argument_list|(
name|dnr
argument_list|)
expr_stmt|;
name|dnManager
operator|.
name|registerDatanode
argument_list|(
name|dnr
argument_list|)
expr_stmt|;
name|dataNodes
index|[
name|i
index|]
operator|.
name|getStorageInfos
argument_list|()
index|[
literal|0
index|]
operator|.
name|setUtilizationForTesting
argument_list|(
literal|2
operator|*
name|HdfsConstants
operator|.
name|MIN_BLOCKS_FOR_WRITE
operator|*
name|blockSize
argument_list|,
literal|0L
argument_list|,
literal|2
operator|*
name|HdfsConstants
operator|.
name|MIN_BLOCKS_FOR_WRITE
operator|*
name|blockSize
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|dataNodes
index|[
name|i
index|]
operator|.
name|updateHeartbeat
argument_list|(
name|BlockManagerTestUtil
operator|.
name|getStorageReportsForDatanode
argument_list|(
name|dataNodes
index|[
name|i
index|]
argument_list|)
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Tests that chooseTarget with considerLoad set to true correctly calculates    * load with decommissioned nodes.    */
annotation|@
name|Test
DECL|method|testChooseTargetWithDecomNodes ()
specifier|public
name|void
name|testChooseTargetWithDecomNodes
parameter_list|()
throws|throws
name|IOException
block|{
name|namenode
operator|.
name|getNamesystem
argument_list|()
operator|.
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
comment|// Decommission DNs so BlockPlacementPolicyDefault.isGoodTarget()
comment|// returns false
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|DatanodeInfo
name|d
init|=
name|dnManager
operator|.
name|getDatanodeByXferAddr
argument_list|(
name|dnrList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getIpAddr
argument_list|()
argument_list|,
name|dnrList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getXferPort
argument_list|()
argument_list|)
decl_stmt|;
name|d
operator|.
name|setDecommissioned
argument_list|()
expr_stmt|;
block|}
name|String
name|blockPoolId
init|=
name|namenode
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockPoolId
argument_list|()
decl_stmt|;
name|dnManager
operator|.
name|handleHeartbeat
argument_list|(
name|dnrList
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
name|BlockManagerTestUtil
operator|.
name|getStorageReportsForDatanode
argument_list|(
name|dataNodes
index|[
literal|3
index|]
argument_list|)
argument_list|,
name|blockPoolId
argument_list|,
name|dataNodes
index|[
literal|3
index|]
operator|.
name|getCacheCapacity
argument_list|()
argument_list|,
name|dataNodes
index|[
literal|3
index|]
operator|.
name|getCacheRemaining
argument_list|()
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|dnManager
operator|.
name|handleHeartbeat
argument_list|(
name|dnrList
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|,
name|BlockManagerTestUtil
operator|.
name|getStorageReportsForDatanode
argument_list|(
name|dataNodes
index|[
literal|4
index|]
argument_list|)
argument_list|,
name|blockPoolId
argument_list|,
name|dataNodes
index|[
literal|4
index|]
operator|.
name|getCacheCapacity
argument_list|()
argument_list|,
name|dataNodes
index|[
literal|4
index|]
operator|.
name|getCacheRemaining
argument_list|()
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|dnManager
operator|.
name|handleHeartbeat
argument_list|(
name|dnrList
operator|.
name|get
argument_list|(
literal|5
argument_list|)
argument_list|,
name|BlockManagerTestUtil
operator|.
name|getStorageReportsForDatanode
argument_list|(
name|dataNodes
index|[
literal|5
index|]
argument_list|)
argument_list|,
name|blockPoolId
argument_list|,
name|dataNodes
index|[
literal|5
index|]
operator|.
name|getCacheCapacity
argument_list|()
argument_list|,
name|dataNodes
index|[
literal|5
index|]
operator|.
name|getCacheRemaining
argument_list|()
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Call chooseTarget()
name|DatanodeStorageInfo
index|[]
name|targets
init|=
name|namenode
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getBlockPlacementPolicy
argument_list|()
operator|.
name|chooseTarget
argument_list|(
literal|"testFile.txt"
argument_list|,
literal|3
argument_list|,
name|dataNodes
index|[
literal|0
index|]
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|DatanodeStorageInfo
argument_list|>
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|1024
argument_list|,
name|TestBlockStoragePolicy
operator|.
name|DEFAULT_STORAGE_POLICY
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|targets
operator|.
name|length
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|DatanodeStorageInfo
argument_list|>
name|targetSet
init|=
operator|new
name|HashSet
argument_list|<
name|DatanodeStorageInfo
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|targets
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|3
init|;
name|i
operator|<
name|storages
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|targetSet
operator|.
name|contains
argument_list|(
name|storages
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|dataNodes
index|[
literal|0
index|]
operator|.
name|stopDecommission
argument_list|()
expr_stmt|;
name|dataNodes
index|[
literal|1
index|]
operator|.
name|stopDecommission
argument_list|()
expr_stmt|;
name|dataNodes
index|[
literal|2
index|]
operator|.
name|stopDecommission
argument_list|()
expr_stmt|;
name|namenode
operator|.
name|getNamesystem
argument_list|()
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
name|NameNode
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Done working on it"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|teardownCluster ()
specifier|public
specifier|static
name|void
name|teardownCluster
parameter_list|()
block|{
if|if
condition|(
name|namenode
operator|!=
literal|null
condition|)
name|namenode
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

