begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|impl
operator|.
name|Log4JLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BlockLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNodeTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ServletUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_class
DECL|class|TestHftpFileSystem
specifier|public
class|class
name|TestHftpFileSystem
block|{
DECL|field|RAN
specifier|private
specifier|static
specifier|final
name|Random
name|RAN
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|field|config
specifier|private
specifier|static
name|Configuration
name|config
init|=
literal|null
decl_stmt|;
DECL|field|cluster
specifier|private
specifier|static
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
DECL|field|hdfs
specifier|private
specifier|static
name|FileSystem
name|hdfs
init|=
literal|null
decl_stmt|;
DECL|field|hftpFs
specifier|private
specifier|static
name|HftpFileSystem
name|hftpFs
init|=
literal|null
decl_stmt|;
DECL|field|blockPoolId
specifier|private
specifier|static
name|String
name|blockPoolId
init|=
literal|null
decl_stmt|;
DECL|field|TEST_PATHS
specifier|private
specifier|static
name|Path
index|[]
name|TEST_PATHS
init|=
operator|new
name|Path
index|[]
block|{
comment|// URI does not encode, Request#getPathInfo returns /foo
operator|new
name|Path
argument_list|(
literal|"/foo;bar"
argument_list|)
block|,
comment|// URI does not encode, Request#getPathInfo returns verbatim
operator|new
name|Path
argument_list|(
literal|"/foo+"
argument_list|)
block|,
operator|new
name|Path
argument_list|(
literal|"/foo+bar/foo+bar"
argument_list|)
block|,
operator|new
name|Path
argument_list|(
literal|"/foo=bar/foo=bar"
argument_list|)
block|,
operator|new
name|Path
argument_list|(
literal|"/foo,bar/foo,bar"
argument_list|)
block|,
operator|new
name|Path
argument_list|(
literal|"/foo@bar/foo@bar"
argument_list|)
block|,
operator|new
name|Path
argument_list|(
literal|"/foo&bar/foo&bar"
argument_list|)
block|,
operator|new
name|Path
argument_list|(
literal|"/foo$bar/foo$bar"
argument_list|)
block|,
operator|new
name|Path
argument_list|(
literal|"/foo_bar/foo_bar"
argument_list|)
block|,
operator|new
name|Path
argument_list|(
literal|"/foo~bar/foo~bar"
argument_list|)
block|,
operator|new
name|Path
argument_list|(
literal|"/foo.bar/foo.bar"
argument_list|)
block|,
operator|new
name|Path
argument_list|(
literal|"/foo../bar/foo../bar"
argument_list|)
block|,
operator|new
name|Path
argument_list|(
literal|"/foo.../bar/foo.../bar"
argument_list|)
block|,
operator|new
name|Path
argument_list|(
literal|"/foo'bar/foo'bar"
argument_list|)
block|,
operator|new
name|Path
argument_list|(
literal|"/foo#bar/foo#bar"
argument_list|)
block|,
operator|new
name|Path
argument_list|(
literal|"/foo!bar/foo!bar"
argument_list|)
block|,
comment|// HDFS file names may not contain ":"
comment|// URI percent encodes, Request#getPathInfo decodes
operator|new
name|Path
argument_list|(
literal|"/foo bar/foo bar"
argument_list|)
block|,
operator|new
name|Path
argument_list|(
literal|"/foo?bar/foo?bar"
argument_list|)
block|,
operator|new
name|Path
argument_list|(
literal|"/foo\">bar/foo\">bar"
argument_list|)
block|,     }
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setUp ()
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
operator|(
operator|(
name|Log4JLogger
operator|)
name|HftpFileSystem
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
specifier|final
name|long
name|seed
init|=
name|RAN
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"seed="
operator|+
name|seed
argument_list|)
expr_stmt|;
name|RAN
operator|.
name|setSeed
argument_list|(
name|seed
argument_list|)
expr_stmt|;
name|config
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_HOST_NAME_KEY
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|config
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|2
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|hdfs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|blockPoolId
operator|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockPoolId
argument_list|()
expr_stmt|;
specifier|final
name|String
name|hftpUri
init|=
literal|"hftp://"
operator|+
name|config
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HTTP_ADDRESS_KEY
argument_list|)
decl_stmt|;
name|hftpFs
operator|=
operator|(
name|HftpFileSystem
operator|)
operator|new
name|Path
argument_list|(
name|hftpUri
argument_list|)
operator|.
name|getFileSystem
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|tearDown ()
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
name|hdfs
operator|.
name|close
argument_list|()
expr_stmt|;
name|hftpFs
operator|.
name|close
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test file creation and access with file names that need encoding.     */
annotation|@
name|Test
DECL|method|testFileNameEncoding ()
specifier|public
name|void
name|testFileNameEncoding
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
for|for
control|(
name|Path
name|p
range|:
name|TEST_PATHS
control|)
block|{
comment|// Create and access the path (data and streamFile servlets)
name|FSDataOutputStream
name|out
init|=
name|hdfs
operator|.
name|create
argument_list|(
name|p
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeBytes
argument_list|(
literal|"0123456789"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|FSDataInputStream
name|in
init|=
name|hftpFs
operator|.
name|open
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|'0'
argument_list|,
name|in
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check the file status matches the path. Hftp returns a FileStatus
comment|// with the entire URI, extract the path part.
name|assertEquals
argument_list|(
name|p
argument_list|,
operator|new
name|Path
argument_list|(
name|hftpFs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test list status (listPath servlet)
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|hftpFs
operator|.
name|listStatus
argument_list|(
name|p
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Test content summary (contentSummary servlet)
name|assertNotNull
argument_list|(
literal|"No content summary"
argument_list|,
name|hftpFs
operator|.
name|getContentSummary
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test checksums (fileChecksum and getFileChecksum servlets)
name|assertNotNull
argument_list|(
literal|"No file checksum"
argument_list|,
name|hftpFs
operator|.
name|getFileChecksum
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testDataNodeRedirect (Path path)
specifier|private
name|void
name|testDataNodeRedirect
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Create the file
if|if
condition|(
name|hdfs
operator|.
name|exists
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|hdfs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|FSDataOutputStream
name|out
init|=
name|hdfs
operator|.
name|create
argument_list|(
name|path
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeBytes
argument_list|(
literal|"0123456789"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Get the path's block location so we can determine
comment|// if we were redirected to the right DN.
name|BlockLocation
index|[]
name|locations
init|=
name|hdfs
operator|.
name|getFileBlockLocations
argument_list|(
name|path
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|String
name|xferAddr
init|=
name|locations
index|[
literal|0
index|]
operator|.
name|getNames
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
comment|// Connect to the NN to get redirected
name|URL
name|u
init|=
name|hftpFs
operator|.
name|getNamenodeURL
argument_list|(
literal|"/data"
operator|+
name|ServletUtil
operator|.
name|encodePath
argument_list|(
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|,
literal|"ugi=userx,groupy"
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|u
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|HttpURLConnection
operator|.
name|setFollowRedirects
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|conn
operator|.
name|connect
argument_list|()
expr_stmt|;
name|conn
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
name|boolean
name|checked
init|=
literal|false
decl_stmt|;
comment|// Find the datanode that has the block according to locations
comment|// and check that the URL was redirected to this DN's info port
for|for
control|(
name|DataNode
name|node
range|:
name|cluster
operator|.
name|getDataNodes
argument_list|()
control|)
block|{
name|DatanodeRegistration
name|dnR
init|=
name|DataNodeTestUtils
operator|.
name|getDNRegistrationForBP
argument_list|(
name|node
argument_list|,
name|blockPoolId
argument_list|)
decl_stmt|;
if|if
condition|(
name|dnR
operator|.
name|getXferAddr
argument_list|()
operator|.
name|equals
argument_list|(
name|xferAddr
argument_list|)
condition|)
block|{
name|checked
operator|=
literal|true
expr_stmt|;
name|assertEquals
argument_list|(
name|dnR
operator|.
name|getInfoPort
argument_list|()
argument_list|,
name|conn
operator|.
name|getURL
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"The test never checked that location of "
operator|+
literal|"the block and hftp desitnation are the same"
argument_list|,
name|checked
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that clients are redirected to the appropriate DN.    */
annotation|@
name|Test
DECL|method|testDataNodeRedirect ()
specifier|public
name|void
name|testDataNodeRedirect
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|Path
name|p
range|:
name|TEST_PATHS
control|)
block|{
name|testDataNodeRedirect
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Tests getPos() functionality.    */
annotation|@
name|Test
DECL|method|testGetPos ()
specifier|public
name|void
name|testGetPos
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|testFile
init|=
operator|new
name|Path
argument_list|(
literal|"/testfile+1"
argument_list|)
decl_stmt|;
comment|// Write a test file.
name|FSDataOutputStream
name|out
init|=
name|hdfs
operator|.
name|create
argument_list|(
name|testFile
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeBytes
argument_list|(
literal|"0123456789"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|FSDataInputStream
name|in
init|=
name|hftpFs
operator|.
name|open
argument_list|(
name|testFile
argument_list|)
decl_stmt|;
comment|// Test read().
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
name|i
argument_list|,
name|in
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
name|in
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
comment|// Test read(b, off, len).
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|in
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|10
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|in
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|in
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test read(b).
name|int
name|bytesRead
init|=
name|in
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|7
operator|+
name|bytesRead
argument_list|,
name|in
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test EOF.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
operator|++
name|i
control|)
block|{
name|in
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|in
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Tests seek().    */
annotation|@
name|Test
DECL|method|testSeek ()
specifier|public
name|void
name|testSeek
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|testFile
init|=
operator|new
name|Path
argument_list|(
literal|"/testfile+1"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
name|hdfs
operator|.
name|create
argument_list|(
name|testFile
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeBytes
argument_list|(
literal|"0123456789"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|FSDataInputStream
name|in
init|=
name|hftpFs
operator|.
name|open
argument_list|(
name|testFile
argument_list|)
decl_stmt|;
name|in
operator|.
name|seek
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|'7'
argument_list|,
name|in
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReadClosedStream ()
specifier|public
name|void
name|testReadClosedStream
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|testFile
init|=
operator|new
name|Path
argument_list|(
literal|"/testfile+2"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|os
init|=
name|hdfs
operator|.
name|create
argument_list|(
name|testFile
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
literal|"0123456789"
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// ByteRangeInputStream delays opens until reads.  Make sure it doesn't
comment|// open a closed stream that has never been opened
name|FSDataInputStream
name|in
init|=
name|hftpFs
operator|.
name|open
argument_list|(
name|testFile
argument_list|)
decl_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|checkClosedStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|checkClosedStream
argument_list|(
name|in
operator|.
name|getWrappedStream
argument_list|()
argument_list|)
expr_stmt|;
comment|// force the stream to connect and then close it
name|in
operator|=
name|hftpFs
operator|.
name|open
argument_list|(
name|testFile
argument_list|)
expr_stmt|;
name|int
name|ch
init|=
name|in
operator|.
name|read
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|'0'
argument_list|,
name|ch
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|checkClosedStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|checkClosedStream
argument_list|(
name|in
operator|.
name|getWrappedStream
argument_list|()
argument_list|)
expr_stmt|;
comment|// make sure seeking doesn't automagically reopen the stream
name|in
operator|.
name|seek
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|checkClosedStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|checkClosedStream
argument_list|(
name|in
operator|.
name|getWrappedStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|checkClosedStream (InputStream is)
specifier|private
name|void
name|checkClosedStream
parameter_list|(
name|InputStream
name|is
parameter_list|)
block|{
name|IOException
name|ioe
init|=
literal|null
decl_stmt|;
try|try
block|{
name|is
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|ioe
operator|=
name|e
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
literal|"No exception on closed read"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Stream closed"
argument_list|,
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|resetFileSystem ()
specifier|public
name|void
name|resetFileSystem
parameter_list|()
throws|throws
name|IOException
block|{
comment|// filesystem caching has a quirk/bug that it caches based on the user's
comment|// given uri.  the result is if a filesystem is instantiated with no port,
comment|// it gets the default port.  then if the default port is changed,
comment|// and another filesystem is instantiated with no port, the prior fs
comment|// is returned, not a new one using the changed port.  so let's flush
comment|// the cache between tests...
name|FileSystem
operator|.
name|closeAll
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHftpDefaultPorts ()
specifier|public
name|void
name|testHftpDefaultPorts
parameter_list|()
throws|throws
name|IOException
block|{
name|resetFileSystem
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|URI
name|uri
init|=
name|URI
operator|.
name|create
argument_list|(
literal|"hftp://localhost"
argument_list|)
decl_stmt|;
name|HftpFileSystem
name|fs
init|=
operator|(
name|HftpFileSystem
operator|)
name|FileSystem
operator|.
name|get
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HTTP_PORT_DEFAULT
argument_list|,
name|fs
operator|.
name|getDefaultPort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HTTPS_PORT_DEFAULT
argument_list|,
name|fs
operator|.
name|getDefaultSecurePort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|uri
argument_list|,
name|fs
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"127.0.0.1:"
operator|+
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HTTPS_PORT_DEFAULT
argument_list|,
name|fs
operator|.
name|getCanonicalServiceName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHftpCustomDefaultPorts ()
specifier|public
name|void
name|testHftpCustomDefaultPorts
parameter_list|()
throws|throws
name|IOException
block|{
name|resetFileSystem
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"dfs.http.port"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"dfs.https.port"
argument_list|,
literal|456
argument_list|)
expr_stmt|;
name|URI
name|uri
init|=
name|URI
operator|.
name|create
argument_list|(
literal|"hftp://localhost"
argument_list|)
decl_stmt|;
name|HftpFileSystem
name|fs
init|=
operator|(
name|HftpFileSystem
operator|)
name|FileSystem
operator|.
name|get
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|123
argument_list|,
name|fs
operator|.
name|getDefaultPort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|456
argument_list|,
name|fs
operator|.
name|getDefaultSecurePort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|uri
argument_list|,
name|fs
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"127.0.0.1:456"
argument_list|,
name|fs
operator|.
name|getCanonicalServiceName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHftpCustomUriPortWithDefaultPorts ()
specifier|public
name|void
name|testHftpCustomUriPortWithDefaultPorts
parameter_list|()
throws|throws
name|IOException
block|{
name|resetFileSystem
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|URI
name|uri
init|=
name|URI
operator|.
name|create
argument_list|(
literal|"hftp://localhost:123"
argument_list|)
decl_stmt|;
name|HftpFileSystem
name|fs
init|=
operator|(
name|HftpFileSystem
operator|)
name|FileSystem
operator|.
name|get
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HTTP_PORT_DEFAULT
argument_list|,
name|fs
operator|.
name|getDefaultPort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HTTPS_PORT_DEFAULT
argument_list|,
name|fs
operator|.
name|getDefaultSecurePort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|uri
argument_list|,
name|fs
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"127.0.0.1:"
operator|+
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HTTPS_PORT_DEFAULT
argument_list|,
name|fs
operator|.
name|getCanonicalServiceName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHftpCustomUriPortWithCustomDefaultPorts ()
specifier|public
name|void
name|testHftpCustomUriPortWithCustomDefaultPorts
parameter_list|()
throws|throws
name|IOException
block|{
name|resetFileSystem
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"dfs.http.port"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"dfs.https.port"
argument_list|,
literal|456
argument_list|)
expr_stmt|;
name|URI
name|uri
init|=
name|URI
operator|.
name|create
argument_list|(
literal|"hftp://localhost:789"
argument_list|)
decl_stmt|;
name|HftpFileSystem
name|fs
init|=
operator|(
name|HftpFileSystem
operator|)
name|FileSystem
operator|.
name|get
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|123
argument_list|,
name|fs
operator|.
name|getDefaultPort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|456
argument_list|,
name|fs
operator|.
name|getDefaultSecurePort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|uri
argument_list|,
name|fs
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"127.0.0.1:456"
argument_list|,
name|fs
operator|.
name|getCanonicalServiceName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|///
annotation|@
name|Test
DECL|method|testHsftpDefaultPorts ()
specifier|public
name|void
name|testHsftpDefaultPorts
parameter_list|()
throws|throws
name|IOException
block|{
name|resetFileSystem
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|URI
name|uri
init|=
name|URI
operator|.
name|create
argument_list|(
literal|"hsftp://localhost"
argument_list|)
decl_stmt|;
name|HsftpFileSystem
name|fs
init|=
operator|(
name|HsftpFileSystem
operator|)
name|FileSystem
operator|.
name|get
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HTTPS_PORT_DEFAULT
argument_list|,
name|fs
operator|.
name|getDefaultPort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HTTPS_PORT_DEFAULT
argument_list|,
name|fs
operator|.
name|getDefaultSecurePort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|uri
argument_list|,
name|fs
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"127.0.0.1:"
operator|+
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HTTPS_PORT_DEFAULT
argument_list|,
name|fs
operator|.
name|getCanonicalServiceName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHsftpCustomDefaultPorts ()
specifier|public
name|void
name|testHsftpCustomDefaultPorts
parameter_list|()
throws|throws
name|IOException
block|{
name|resetFileSystem
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"dfs.http.port"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"dfs.https.port"
argument_list|,
literal|456
argument_list|)
expr_stmt|;
name|URI
name|uri
init|=
name|URI
operator|.
name|create
argument_list|(
literal|"hsftp://localhost"
argument_list|)
decl_stmt|;
name|HsftpFileSystem
name|fs
init|=
operator|(
name|HsftpFileSystem
operator|)
name|FileSystem
operator|.
name|get
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|456
argument_list|,
name|fs
operator|.
name|getDefaultPort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|456
argument_list|,
name|fs
operator|.
name|getDefaultSecurePort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|uri
argument_list|,
name|fs
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"127.0.0.1:456"
argument_list|,
name|fs
operator|.
name|getCanonicalServiceName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHsftpCustomUriPortWithDefaultPorts ()
specifier|public
name|void
name|testHsftpCustomUriPortWithDefaultPorts
parameter_list|()
throws|throws
name|IOException
block|{
name|resetFileSystem
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|URI
name|uri
init|=
name|URI
operator|.
name|create
argument_list|(
literal|"hsftp://localhost:123"
argument_list|)
decl_stmt|;
name|HsftpFileSystem
name|fs
init|=
operator|(
name|HsftpFileSystem
operator|)
name|FileSystem
operator|.
name|get
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HTTPS_PORT_DEFAULT
argument_list|,
name|fs
operator|.
name|getDefaultPort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HTTPS_PORT_DEFAULT
argument_list|,
name|fs
operator|.
name|getDefaultSecurePort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|uri
argument_list|,
name|fs
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"127.0.0.1:123"
argument_list|,
name|fs
operator|.
name|getCanonicalServiceName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHsftpCustomUriPortWithCustomDefaultPorts ()
specifier|public
name|void
name|testHsftpCustomUriPortWithCustomDefaultPorts
parameter_list|()
throws|throws
name|IOException
block|{
name|resetFileSystem
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"dfs.http.port"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"dfs.https.port"
argument_list|,
literal|456
argument_list|)
expr_stmt|;
name|URI
name|uri
init|=
name|URI
operator|.
name|create
argument_list|(
literal|"hsftp://localhost:789"
argument_list|)
decl_stmt|;
name|HsftpFileSystem
name|fs
init|=
operator|(
name|HsftpFileSystem
operator|)
name|FileSystem
operator|.
name|get
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|456
argument_list|,
name|fs
operator|.
name|getDefaultPort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|456
argument_list|,
name|fs
operator|.
name|getDefaultSecurePort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|uri
argument_list|,
name|fs
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"127.0.0.1:789"
argument_list|,
name|fs
operator|.
name|getCanonicalServiceName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

