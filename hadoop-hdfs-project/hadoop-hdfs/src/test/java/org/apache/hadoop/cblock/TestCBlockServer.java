begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.cblock
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|RandomStringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|meta
operator|.
name|VolumeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|client
operator|.
name|ScmClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|util
operator|.
name|MockStorageClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|CBlockConfigKeys
operator|.
name|DFS_CBLOCK_JSCSIRPC_ADDRESS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|CBlockConfigKeys
operator|.
name|DFS_CBLOCK_SERVICERPC_ADDRESS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * This class tests the basics of CBlock server. Mainly about the four  * operations on volumes: create, delete, info and list.  */
end_comment

begin_class
DECL|class|TestCBlockServer
specifier|public
class|class
name|TestCBlockServer
block|{
DECL|field|cBlockManager
specifier|private
specifier|static
name|CBlockManager
name|cBlockManager
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|OzoneConfiguration
name|conf
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setup ()
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|ScmClient
name|storageClient
init|=
operator|new
name|MockStorageClient
argument_list|()
decl_stmt|;
name|conf
operator|=
operator|new
name|OzoneConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_CBLOCK_SERVICERPC_ADDRESS_KEY
argument_list|,
literal|"127.0.0.1:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_CBLOCK_JSCSIRPC_ADDRESS_KEY
argument_list|,
literal|"127.0.0.1:0"
argument_list|)
expr_stmt|;
name|cBlockManager
operator|=
operator|new
name|CBlockManager
argument_list|(
name|conf
argument_list|,
name|storageClient
argument_list|)
expr_stmt|;
name|cBlockManager
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|clean ()
specifier|public
specifier|static
name|void
name|clean
parameter_list|()
block|{
name|cBlockManager
operator|.
name|stop
argument_list|()
expr_stmt|;
name|cBlockManager
operator|.
name|join
argument_list|()
expr_stmt|;
name|cBlockManager
operator|.
name|clean
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test create volume for different users.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testCreateVolume ()
specifier|public
name|void
name|testCreateVolume
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|userName1
init|=
literal|"user"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|userName2
init|=
literal|"user"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|volumeName1
init|=
literal|"volume"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|volumeName2
init|=
literal|"volume"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|long
name|volumeSize
init|=
literal|1L
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
name|int
name|blockSize
init|=
literal|4096
decl_stmt|;
name|cBlockManager
operator|.
name|createVolume
argument_list|(
name|userName1
argument_list|,
name|volumeName1
argument_list|,
name|volumeSize
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|VolumeInfo
argument_list|>
name|volumes
init|=
name|cBlockManager
operator|.
name|listVolume
argument_list|(
name|userName1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|volumes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|VolumeInfo
name|existingVolume
init|=
name|volumes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|userName1
argument_list|,
name|existingVolume
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|volumeName1
argument_list|,
name|existingVolume
operator|.
name|getVolumeName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|volumeSize
argument_list|,
name|existingVolume
operator|.
name|getVolumeSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|blockSize
argument_list|,
name|existingVolume
operator|.
name|getBlockSize
argument_list|()
argument_list|)
expr_stmt|;
name|cBlockManager
operator|.
name|createVolume
argument_list|(
name|userName1
argument_list|,
name|volumeName2
argument_list|,
name|volumeSize
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
name|cBlockManager
operator|.
name|createVolume
argument_list|(
name|userName2
argument_list|,
name|volumeName1
argument_list|,
name|volumeSize
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
name|volumes
operator|=
name|cBlockManager
operator|.
name|listVolume
argument_list|(
name|userName1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|volumes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|volumes
operator|=
name|cBlockManager
operator|.
name|listVolume
argument_list|(
name|userName2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|volumes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test delete volume.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testDeleteVolume ()
specifier|public
name|void
name|testDeleteVolume
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|userName
init|=
literal|"user"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|volumeName1
init|=
literal|"volume"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|volumeName2
init|=
literal|"volume"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|long
name|volumeSize
init|=
literal|1L
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
name|int
name|blockSize
init|=
literal|4096
decl_stmt|;
name|cBlockManager
operator|.
name|createVolume
argument_list|(
name|userName
argument_list|,
name|volumeName1
argument_list|,
name|volumeSize
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
name|cBlockManager
operator|.
name|createVolume
argument_list|(
name|userName
argument_list|,
name|volumeName2
argument_list|,
name|volumeSize
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
name|cBlockManager
operator|.
name|deleteVolume
argument_list|(
name|userName
argument_list|,
name|volumeName1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|VolumeInfo
argument_list|>
name|volumes
init|=
name|cBlockManager
operator|.
name|listVolume
argument_list|(
name|userName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|volumes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|VolumeInfo
name|existingVolume
init|=
name|volumes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|userName
argument_list|,
name|existingVolume
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|volumeName2
argument_list|,
name|existingVolume
operator|.
name|getVolumeName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|volumeSize
argument_list|,
name|existingVolume
operator|.
name|getVolumeSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|blockSize
argument_list|,
name|existingVolume
operator|.
name|getBlockSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test info volume.    *    * TODO : usage field is not being tested (as it is not implemented yet)    * @throws Exception    */
annotation|@
name|Test
DECL|method|testInfoVolume ()
specifier|public
name|void
name|testInfoVolume
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|userName
init|=
literal|"user"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|volumeName
init|=
literal|"volume"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|long
name|volumeSize
init|=
literal|1L
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
name|int
name|blockSize
init|=
literal|4096
decl_stmt|;
name|cBlockManager
operator|.
name|createVolume
argument_list|(
name|userName
argument_list|,
name|volumeName
argument_list|,
name|volumeSize
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
name|VolumeInfo
name|info
init|=
name|cBlockManager
operator|.
name|infoVolume
argument_list|(
name|userName
argument_list|,
name|volumeName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|userName
argument_list|,
name|info
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|volumeName
argument_list|,
name|info
operator|.
name|getVolumeName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|volumeSize
argument_list|,
name|info
operator|.
name|getVolumeSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|blockSize
argument_list|,
name|info
operator|.
name|getBlockSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test listing a number of volumes.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testListVolume ()
specifier|public
name|void
name|testListVolume
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|userName
init|=
literal|"user"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|volumeName
init|=
literal|"volume"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|long
name|volumeSize
init|=
literal|1L
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
name|int
name|blockSize
init|=
literal|4096
decl_stmt|;
name|int
name|volumeNum
init|=
literal|100
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|volumeNum
condition|;
name|i
operator|++
control|)
block|{
name|cBlockManager
operator|.
name|createVolume
argument_list|(
name|userName
argument_list|,
name|volumeName
operator|+
name|i
argument_list|,
name|volumeSize
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|VolumeInfo
argument_list|>
name|volumes
init|=
name|cBlockManager
operator|.
name|listVolume
argument_list|(
name|userName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|volumeNum
argument_list|,
name|volumes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|HashSet
argument_list|<
name|String
argument_list|>
name|volumeIds
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|volumeNum
condition|;
name|i
operator|++
control|)
block|{
name|VolumeInfo
name|volumeInfo
init|=
name|volumes
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|userName
argument_list|,
name|volumeInfo
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|volumeIds
operator|.
name|contains
argument_list|(
name|volumeName
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|volumeIds
operator|.
name|add
argument_list|(
name|volumeName
operator|+
name|i
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|volumeSize
argument_list|,
name|volumeInfo
operator|.
name|getVolumeSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|blockSize
argument_list|,
name|volumeInfo
operator|.
name|getBlockSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|volumeNum
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|volumeIds
operator|.
name|contains
argument_list|(
name|volumeName
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

