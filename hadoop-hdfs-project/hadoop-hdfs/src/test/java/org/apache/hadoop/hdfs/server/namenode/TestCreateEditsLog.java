begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_NAME_DIR_KEY
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|Util
import|;
end_import

begin_comment
comment|/**  * Tests the CreateEditsLog utility.  */
end_comment

begin_class
DECL|class|TestCreateEditsLog
specifier|public
class|class
name|TestCreateEditsLog
block|{
DECL|field|HDFS_DIR
specifier|private
specifier|static
specifier|final
name|File
name|HDFS_DIR
init|=
operator|new
name|File
argument_list|(
name|MiniDFSCluster
operator|.
name|getBaseDirectory
argument_list|()
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
decl_stmt|;
DECL|field|TEST_DIR
specifier|private
specifier|static
specifier|final
name|File
name|TEST_DIR
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"build/test/data"
argument_list|)
argument_list|,
literal|"TestCreateEditsLog"
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
decl_stmt|;
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|deleteIfExists
argument_list|(
name|HDFS_DIR
argument_list|)
expr_stmt|;
name|deleteIfExists
argument_list|(
name|TEST_DIR
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
name|deleteIfExists
argument_list|(
name|HDFS_DIR
argument_list|)
expr_stmt|;
name|deleteIfExists
argument_list|(
name|TEST_DIR
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests that an edits log created using CreateEditsLog is valid and can be    * loaded successfully by a namenode.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testCanLoadCreatedEditsLog ()
specifier|public
name|void
name|testCanLoadCreatedEditsLog
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Format namenode.
name|HdfsConfiguration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|File
name|nameDir
init|=
operator|new
name|File
argument_list|(
name|HDFS_DIR
argument_list|,
literal|"name"
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMENODE_NAME_DIR_KEY
argument_list|,
name|Util
operator|.
name|fileAsURI
argument_list|(
name|nameDir
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|formatNameNode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Call CreateEditsLog and move the resulting edits to the name dir.
name|CreateEditsLog
operator|.
name|main
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-f"
block|,
literal|"1000"
block|,
literal|"0"
block|,
literal|"1"
block|,
literal|"-d"
block|,
name|TEST_DIR
operator|.
name|getAbsolutePath
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|Path
name|editsWildcard
init|=
operator|new
name|Path
argument_list|(
name|TEST_DIR
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"*"
argument_list|)
decl_stmt|;
name|FileContext
name|localFc
init|=
name|FileContext
operator|.
name|getLocalFSFileContext
argument_list|()
decl_stmt|;
for|for
control|(
name|FileStatus
name|edits
range|:
name|localFc
operator|.
name|util
argument_list|()
operator|.
name|globStatus
argument_list|(
name|editsWildcard
argument_list|)
control|)
block|{
name|Path
name|src
init|=
name|edits
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|Path
name|dst
init|=
operator|new
name|Path
argument_list|(
operator|new
name|File
argument_list|(
name|nameDir
argument_list|,
literal|"current"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|src
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|localFc
operator|.
name|rename
argument_list|(
name|src
argument_list|,
name|dst
argument_list|)
expr_stmt|;
block|}
comment|// Start a namenode to try to load the edits.
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|format
argument_list|(
literal|false
argument_list|)
operator|.
name|manageNameDfsDirs
argument_list|(
literal|false
argument_list|)
operator|.
name|waitSafeMode
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitClusterUp
argument_list|()
expr_stmt|;
comment|// Test successful, because no exception thrown.
block|}
comment|/**    * Fully delete the given directory if it exists.    *     * @param file File to delete    */
DECL|method|deleteIfExists (File file)
specifier|private
specifier|static
name|void
name|deleteIfExists
parameter_list|(
name|File
name|file
parameter_list|)
block|{
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|file
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Could not delete  '"
operator|+
name|file
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

