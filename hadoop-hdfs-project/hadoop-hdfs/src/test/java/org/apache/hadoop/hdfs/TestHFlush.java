begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|impl
operator|.
name|Log4JLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsDataOutputStream
operator|.
name|SyncFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/** Class contains a set of tests to verify the correctness of   * newly introduced {@link FSDataOutputStream#hflush()} method */
end_comment

begin_class
DECL|class|TestHFlush
specifier|public
class|class
name|TestHFlush
block|{
block|{
operator|(
operator|(
name|Log4JLogger
operator|)
name|DataNode
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Log4JLogger
operator|)
name|DFSClient
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
DECL|field|fName
specifier|private
specifier|final
name|String
name|fName
init|=
literal|"hflushtest.dat"
decl_stmt|;
comment|/**    * The test uses    * {@link #doTheJob(Configuration, String, long, short, boolean, EnumSet)}     * to write a file with a standard block size    */
annotation|@
name|Test
DECL|method|hFlush_01 ()
specifier|public
name|void
name|hFlush_01
parameter_list|()
throws|throws
name|IOException
block|{
name|doTheJob
argument_list|(
operator|new
name|HdfsConfiguration
argument_list|()
argument_list|,
name|fName
argument_list|,
name|AppendTestUtil
operator|.
name|BLOCK_SIZE
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|false
argument_list|,
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|SyncFlag
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * The test uses    * {@link #doTheJob(Configuration, String, long, short, boolean, EnumSet)}     * to write a file with a custom block size so the writes will be     * happening across block' boundaries    */
annotation|@
name|Test
DECL|method|hFlush_02 ()
specifier|public
name|void
name|hFlush_02
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|int
name|customPerChecksumSize
init|=
literal|512
decl_stmt|;
name|int
name|customBlockSize
init|=
name|customPerChecksumSize
operator|*
literal|3
decl_stmt|;
comment|// Modify defaul filesystem settings
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BYTES_PER_CHECKSUM_KEY
argument_list|,
name|customPerChecksumSize
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|customBlockSize
argument_list|)
expr_stmt|;
name|doTheJob
argument_list|(
name|conf
argument_list|,
name|fName
argument_list|,
name|customBlockSize
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|false
argument_list|,
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|SyncFlag
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * The test uses    * {@link #doTheJob(Configuration, String, long, short, boolean, EnumSet)}     * to write a file with a custom block size so the writes will be     * happening across block's and checksum' boundaries    */
annotation|@
name|Test
DECL|method|hFlush_03 ()
specifier|public
name|void
name|hFlush_03
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|int
name|customPerChecksumSize
init|=
literal|400
decl_stmt|;
name|int
name|customBlockSize
init|=
name|customPerChecksumSize
operator|*
literal|3
decl_stmt|;
comment|// Modify defaul filesystem settings
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BYTES_PER_CHECKSUM_KEY
argument_list|,
name|customPerChecksumSize
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|customBlockSize
argument_list|)
expr_stmt|;
name|doTheJob
argument_list|(
name|conf
argument_list|,
name|fName
argument_list|,
name|customBlockSize
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|false
argument_list|,
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|SyncFlag
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test hsync (with updating block length in NameNode) while no data is    * actually written yet    */
annotation|@
name|Test
DECL|method|hSyncUpdateLength_00 ()
specifier|public
name|void
name|hSyncUpdateLength_00
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|2
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|DistributedFileSystem
name|fileSystem
init|=
operator|(
name|DistributedFileSystem
operator|)
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
try|try
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|fName
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|stm
init|=
name|fileSystem
operator|.
name|create
argument_list|(
name|path
argument_list|,
literal|true
argument_list|,
literal|4096
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|,
name|AppendTestUtil
operator|.
name|BLOCK_SIZE
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Created file "
operator|+
name|path
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|DFSOutputStream
operator|)
name|stm
operator|.
name|getWrappedStream
argument_list|()
operator|)
operator|.
name|hsync
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|SyncFlag
operator|.
name|UPDATE_LENGTH
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|currentFileLength
init|=
name|fileSystem
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|currentFileLength
argument_list|)
expr_stmt|;
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|fileSystem
operator|.
name|close
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * The test calls    * {@link #doTheJob(Configuration, String, long, short, boolean, EnumSet)}    * while requiring the semantic of {@link SyncFlag#UPDATE_LENGTH}.    */
annotation|@
name|Test
DECL|method|hSyncUpdateLength_01 ()
specifier|public
name|void
name|hSyncUpdateLength_01
parameter_list|()
throws|throws
name|IOException
block|{
name|doTheJob
argument_list|(
operator|new
name|HdfsConfiguration
argument_list|()
argument_list|,
name|fName
argument_list|,
name|AppendTestUtil
operator|.
name|BLOCK_SIZE
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|true
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|SyncFlag
operator|.
name|UPDATE_LENGTH
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * The test calls    * {@link #doTheJob(Configuration, String, long, short, boolean, EnumSet)}    * while requiring the semantic of {@link SyncFlag#UPDATE_LENGTH}.    * Similar with {@link #hFlush_02()} , it writes a file with a custom block    * size so the writes will be happening across block' boundaries    */
annotation|@
name|Test
DECL|method|hSyncUpdateLength_02 ()
specifier|public
name|void
name|hSyncUpdateLength_02
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|int
name|customPerChecksumSize
init|=
literal|512
decl_stmt|;
name|int
name|customBlockSize
init|=
name|customPerChecksumSize
operator|*
literal|3
decl_stmt|;
comment|// Modify defaul filesystem settings
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BYTES_PER_CHECKSUM_KEY
argument_list|,
name|customPerChecksumSize
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|customBlockSize
argument_list|)
expr_stmt|;
name|doTheJob
argument_list|(
name|conf
argument_list|,
name|fName
argument_list|,
name|customBlockSize
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|true
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|SyncFlag
operator|.
name|UPDATE_LENGTH
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * The test calls    * {@link #doTheJob(Configuration, String, long, short, boolean, EnumSet)}    * while requiring the semantic of {@link SyncFlag#UPDATE_LENGTH}.    * Similar with {@link #hFlush_03()} , it writes a file with a custom block    * size so the writes will be happening across block's and checksum'    * boundaries.    */
annotation|@
name|Test
DECL|method|hSyncUpdateLength_03 ()
specifier|public
name|void
name|hSyncUpdateLength_03
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|int
name|customPerChecksumSize
init|=
literal|400
decl_stmt|;
name|int
name|customBlockSize
init|=
name|customPerChecksumSize
operator|*
literal|3
decl_stmt|;
comment|// Modify defaul filesystem settings
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BYTES_PER_CHECKSUM_KEY
argument_list|,
name|customPerChecksumSize
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|customBlockSize
argument_list|)
expr_stmt|;
name|doTheJob
argument_list|(
name|conf
argument_list|,
name|fName
argument_list|,
name|customBlockSize
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|true
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|SyncFlag
operator|.
name|UPDATE_LENGTH
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * The method starts new cluster with defined Configuration; creates a file    * with specified block_size and writes 10 equal sections in it; it also calls    * hflush/hsync after each write and throws an IOException in case of an error.    *     * @param conf cluster configuration    * @param fileName of the file to be created and processed as required    * @param block_size value to be used for the file's creation    * @param replicas is the number of replicas    * @param isSync hsync or hflush             * @param syncFlags specify the semantic of the sync/flush    * @throws IOException in case of any errors    */
DECL|method|doTheJob (Configuration conf, final String fileName, long block_size, short replicas, boolean isSync, EnumSet<SyncFlag> syncFlags)
specifier|public
specifier|static
name|void
name|doTheJob
parameter_list|(
name|Configuration
name|conf
parameter_list|,
specifier|final
name|String
name|fileName
parameter_list|,
name|long
name|block_size
parameter_list|,
name|short
name|replicas
parameter_list|,
name|boolean
name|isSync
parameter_list|,
name|EnumSet
argument_list|<
name|SyncFlag
argument_list|>
name|syncFlags
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|fileContent
decl_stmt|;
specifier|final
name|int
name|SECTIONS
init|=
literal|10
decl_stmt|;
name|fileContent
operator|=
name|AppendTestUtil
operator|.
name|initBuffer
argument_list|(
name|AppendTestUtil
operator|.
name|FILE_SIZE
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|replicas
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// Make sure we work with DFS in order to utilize all its functionality
name|DistributedFileSystem
name|fileSystem
init|=
operator|(
name|DistributedFileSystem
operator|)
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|FSDataInputStream
name|is
decl_stmt|;
try|try
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|stm
init|=
name|fileSystem
operator|.
name|create
argument_list|(
name|path
argument_list|,
literal|false
argument_list|,
literal|4096
argument_list|,
name|replicas
argument_list|,
name|block_size
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Created file "
operator|+
name|fileName
argument_list|)
expr_stmt|;
name|int
name|tenth
init|=
name|AppendTestUtil
operator|.
name|FILE_SIZE
operator|/
name|SECTIONS
decl_stmt|;
name|int
name|rounding
init|=
name|AppendTestUtil
operator|.
name|FILE_SIZE
operator|-
name|tenth
operator|*
name|SECTIONS
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|SECTIONS
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Writing "
operator|+
operator|(
name|tenth
operator|*
name|i
operator|)
operator|+
literal|" to "
operator|+
operator|(
name|tenth
operator|*
operator|(
name|i
operator|+
literal|1
operator|)
operator|)
operator|+
literal|" section to file "
operator|+
name|fileName
argument_list|)
expr_stmt|;
comment|// write to the file
name|stm
operator|.
name|write
argument_list|(
name|fileContent
argument_list|,
name|tenth
operator|*
name|i
argument_list|,
name|tenth
argument_list|)
expr_stmt|;
comment|// Wait while hflush/hsync pushes all packets through built pipeline
if|if
condition|(
name|isSync
condition|)
block|{
operator|(
operator|(
name|DFSOutputStream
operator|)
name|stm
operator|.
name|getWrappedStream
argument_list|()
operator|)
operator|.
name|hsync
argument_list|(
name|syncFlags
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|(
operator|(
name|DFSOutputStream
operator|)
name|stm
operator|.
name|getWrappedStream
argument_list|()
operator|)
operator|.
name|hflush
argument_list|()
expr_stmt|;
block|}
comment|// Check file length if updatelength is required
if|if
condition|(
name|isSync
operator|&&
name|syncFlags
operator|.
name|contains
argument_list|(
name|SyncFlag
operator|.
name|UPDATE_LENGTH
argument_list|)
condition|)
block|{
name|long
name|currentFileLength
init|=
name|fileSystem
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"File size doesn't match for hsync/hflush with updating the length"
argument_list|,
name|tenth
operator|*
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|,
name|currentFileLength
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|toRead
init|=
operator|new
name|byte
index|[
name|tenth
index|]
decl_stmt|;
name|byte
index|[]
name|expected
init|=
operator|new
name|byte
index|[
name|tenth
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|fileContent
argument_list|,
name|tenth
operator|*
name|i
argument_list|,
name|expected
argument_list|,
literal|0
argument_list|,
name|tenth
argument_list|)
expr_stmt|;
comment|// Open the same file for read. Need to create new reader after every write operation(!)
name|is
operator|=
name|fileSystem
operator|.
name|open
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|is
operator|.
name|seek
argument_list|(
name|tenth
operator|*
name|i
argument_list|)
expr_stmt|;
name|int
name|readBytes
init|=
name|is
operator|.
name|read
argument_list|(
name|toRead
argument_list|,
literal|0
argument_list|,
name|tenth
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Has read "
operator|+
name|readBytes
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should've get more bytes"
argument_list|,
operator|(
name|readBytes
operator|>
literal|0
operator|)
operator|&&
operator|(
name|readBytes
operator|<=
name|tenth
operator|)
argument_list|)
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
name|checkData
argument_list|(
name|toRead
argument_list|,
literal|0
argument_list|,
name|readBytes
argument_list|,
name|expected
argument_list|,
literal|"Partial verification"
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Writing "
operator|+
operator|(
name|tenth
operator|*
name|SECTIONS
operator|)
operator|+
literal|" to "
operator|+
operator|(
name|tenth
operator|*
name|SECTIONS
operator|+
name|rounding
operator|)
operator|+
literal|" section to file "
operator|+
name|fileName
argument_list|)
expr_stmt|;
name|stm
operator|.
name|write
argument_list|(
name|fileContent
argument_list|,
name|tenth
operator|*
name|SECTIONS
argument_list|,
name|rounding
argument_list|)
expr_stmt|;
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"File size doesn't match "
argument_list|,
name|AppendTestUtil
operator|.
name|FILE_SIZE
argument_list|,
name|fileSystem
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|AppendTestUtil
operator|.
name|checkFullFile
argument_list|(
name|fileSystem
argument_list|,
name|path
argument_list|,
name|fileContent
operator|.
name|length
argument_list|,
name|fileContent
argument_list|,
literal|"hflush()"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fileSystem
operator|.
name|close
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|checkData (final byte[] actual, int from, int len, final byte[] expected, String message)
specifier|static
name|void
name|checkData
parameter_list|(
specifier|final
name|byte
index|[]
name|actual
parameter_list|,
name|int
name|from
parameter_list|,
name|int
name|len
parameter_list|,
specifier|final
name|byte
index|[]
name|expected
parameter_list|,
name|String
name|message
parameter_list|)
block|{
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|len
condition|;
name|idx
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|message
operator|+
literal|" byte "
operator|+
operator|(
name|from
operator|+
name|idx
operator|)
operator|+
literal|" differs. expected "
operator|+
name|expected
index|[
name|from
operator|+
name|idx
index|]
operator|+
literal|" actual "
operator|+
name|actual
index|[
name|idx
index|]
argument_list|,
name|expected
index|[
name|from
operator|+
name|idx
index|]
argument_list|,
name|actual
index|[
name|idx
index|]
argument_list|)
expr_stmt|;
name|actual
index|[
name|idx
index|]
operator|=
literal|0
expr_stmt|;
block|}
block|}
comment|/** This creates a slow writer and check to see     * if pipeline heartbeats work fine    */
annotation|@
name|Test
DECL|method|testPipelineHeartbeat ()
specifier|public
name|void
name|testPipelineHeartbeat
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|DATANODE_NUM
init|=
literal|2
decl_stmt|;
specifier|final
name|int
name|fileLen
init|=
literal|6
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
specifier|final
name|int
name|timeout
init|=
literal|2000
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_SOCKET_TIMEOUT_KEY
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
literal|"/pipelineHeartbeat/foo"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"p="
operator|+
name|p
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|DATANODE_NUM
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|DistributedFileSystem
name|fs
init|=
operator|(
name|DistributedFileSystem
operator|)
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|byte
index|[]
name|fileContents
init|=
name|AppendTestUtil
operator|.
name|initBuffer
argument_list|(
name|fileLen
argument_list|)
decl_stmt|;
comment|// create a new file.
name|FSDataOutputStream
name|stm
init|=
name|AppendTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|p
argument_list|,
name|DATANODE_NUM
argument_list|)
decl_stmt|;
name|stm
operator|.
name|write
argument_list|(
name|fileContents
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
name|stm
operator|.
name|hflush
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Wrote 1 byte and hflush "
operator|+
name|p
argument_list|)
expr_stmt|;
comment|// write another byte
name|Thread
operator|.
name|sleep
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
name|stm
operator|.
name|write
argument_list|(
name|fileContents
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|stm
operator|.
name|hflush
argument_list|()
expr_stmt|;
name|stm
operator|.
name|write
argument_list|(
name|fileContents
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
name|stm
operator|.
name|hflush
argument_list|()
expr_stmt|;
name|stm
operator|.
name|write
argument_list|(
name|fileContents
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
name|stm
operator|.
name|write
argument_list|(
name|fileContents
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|stm
operator|.
name|hflush
argument_list|()
expr_stmt|;
name|stm
operator|.
name|write
argument_list|(
name|fileContents
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// verify that entire file is good
name|AppendTestUtil
operator|.
name|checkFullFile
argument_list|(
name|fs
argument_list|,
name|p
argument_list|,
name|fileLen
argument_list|,
name|fileContents
argument_list|,
literal|"Failed to slowly write to a file"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testHFlushInterrupted ()
specifier|public
name|void
name|testHFlushInterrupted
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|DATANODE_NUM
init|=
literal|2
decl_stmt|;
specifier|final
name|int
name|fileLen
init|=
literal|6
decl_stmt|;
name|byte
index|[]
name|fileContents
init|=
name|AppendTestUtil
operator|.
name|initBuffer
argument_list|(
name|fileLen
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
literal|"/hflush-interrupted"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"p="
operator|+
name|p
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|DATANODE_NUM
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|DistributedFileSystem
name|fs
init|=
operator|(
name|DistributedFileSystem
operator|)
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// create a new file.
name|FSDataOutputStream
name|stm
init|=
name|AppendTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|p
argument_list|,
name|DATANODE_NUM
argument_list|)
decl_stmt|;
name|stm
operator|.
name|write
argument_list|(
name|fileContents
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
try|try
block|{
name|stm
operator|.
name|hflush
argument_list|()
expr_stmt|;
comment|// If we made it past the hflush(), then that means that the ack made it back
comment|// from the pipeline before we got to the wait() call. In that case we should
comment|// still have interrupted status.
name|assertTrue
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupted
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedIOException
name|ie
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Got expected exception during flush"
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupted
argument_list|()
argument_list|)
expr_stmt|;
comment|// Try again to flush should succeed since we no longer have interrupt status
name|stm
operator|.
name|hflush
argument_list|()
expr_stmt|;
comment|// Write some more data and flush
name|stm
operator|.
name|write
argument_list|(
name|fileContents
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|stm
operator|.
name|hflush
argument_list|()
expr_stmt|;
comment|// Write some data and close while interrupted
name|stm
operator|.
name|write
argument_list|(
name|fileContents
argument_list|,
literal|4
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
try|try
block|{
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// If we made it past the close(), then that means that the ack made it back
comment|// from the pipeline before we got to the wait() call. In that case we should
comment|// still have interrupted status.
name|assertTrue
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupted
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedIOException
name|ioe
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Got expected exception during close"
argument_list|)
expr_stmt|;
comment|// If we got the exception, we shouldn't have interrupted status anymore.
name|assertFalse
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupted
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now do a successful close.
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// verify that entire file is good
name|AppendTestUtil
operator|.
name|checkFullFile
argument_list|(
name|fs
argument_list|,
name|p
argument_list|,
name|fileLen
argument_list|,
name|fileContents
argument_list|,
literal|"Failed to deal with thread interruptions"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

