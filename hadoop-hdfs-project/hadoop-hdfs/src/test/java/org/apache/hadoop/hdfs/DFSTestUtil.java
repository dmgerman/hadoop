begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|IO_FILE_BUFFER_SIZE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
operator|.
name|CREATE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
operator|.
name|LAZY_PERSIST
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
operator|.
name|OVERWRITE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_HA_NAMENODES_KEY_PREFIX
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_RPC_ADDRESS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|DFSck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BlockLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CacheFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
operator|.
name|Statistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FsShell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Options
operator|.
name|Rename
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ParentNotDirectoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|UnresolvedLinkException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|XAttr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
operator|.
name|NameNodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|AddErasureCodingPolicyResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CacheDirectiveInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CachePoolInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
operator|.
name|AdminStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
operator|.
name|DatanodeInfoBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ECBlockGroupStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ErasureCodingPolicyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ErasureCodingPolicyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ReplicatedBlockStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshotDiffReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshotDiffReport
operator|.
name|DiffReportEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshotDiffReport
operator|.
name|DiffType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SystemErasureCodingPolicies
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ErasureCodingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LayoutVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|Sender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DataTransferProtos
operator|.
name|BlockOpResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DataTransferProtos
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|BlockTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|BlockTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|ExportedBlockKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|balancer
operator|.
name|NameNodeConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockManagerTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeStorageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|NodeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|StartupOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|StorageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNodeLayoutVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|SimulatedFSDataset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|TestTransferRbw
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|FsDatasetSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ErasureCodingPolicyManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSEditLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSNamesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|LeaseManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|Namesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|XAttrStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ha
operator|.
name|ConfiguredFailoverProxyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|sps
operator|.
name|StoragePolicySatisfier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamenodeProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|ReceivedDeletedBlockInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|ReceivedDeletedBlockInfo
operator|.
name|BlockStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|StorageReceivedDeletedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|DFSAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|JMXGet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|EnumSetWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|ECSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|ErasureCodeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|nativeio
operator|.
name|NativeIO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|unix
operator|.
name|DomainSocket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|unix
operator|.
name|TemporarySocketDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|RefreshUserMappingsProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|ShellBasedUnixGroupsMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|Whitebox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|VersionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/** Utilities for HDFS tests */
end_comment

begin_class
DECL|class|DFSTestUtil
specifier|public
class|class
name|DFSTestUtil
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DFSTestUtil
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|gen
specifier|private
specifier|static
specifier|final
name|Random
name|gen
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|field|dirNames
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|dirNames
init|=
block|{
literal|"zero"
block|,
literal|"one"
block|,
literal|"two"
block|,
literal|"three"
block|,
literal|"four"
block|,
literal|"five"
block|,
literal|"six"
block|,
literal|"seven"
block|,
literal|"eight"
block|,
literal|"nine"
block|}
decl_stmt|;
DECL|field|maxLevels
specifier|private
specifier|final
name|int
name|maxLevels
decl_stmt|;
DECL|field|maxSize
specifier|private
specifier|final
name|int
name|maxSize
decl_stmt|;
DECL|field|minSize
specifier|private
specifier|final
name|int
name|minSize
decl_stmt|;
DECL|field|nFiles
specifier|private
specifier|final
name|int
name|nFiles
decl_stmt|;
DECL|field|files
specifier|private
name|MyFile
index|[]
name|files
decl_stmt|;
comment|/** Creates a new instance of DFSTestUtil    *    * @param nFiles Number of files to be created    * @param maxLevels Maximum number of directory levels    * @param maxSize Maximum size for file    * @param minSize Minimum size for file    */
DECL|method|DFSTestUtil (int nFiles, int maxLevels, int maxSize, int minSize)
specifier|private
name|DFSTestUtil
parameter_list|(
name|int
name|nFiles
parameter_list|,
name|int
name|maxLevels
parameter_list|,
name|int
name|maxSize
parameter_list|,
name|int
name|minSize
parameter_list|)
block|{
name|this
operator|.
name|nFiles
operator|=
name|nFiles
expr_stmt|;
name|this
operator|.
name|maxLevels
operator|=
name|maxLevels
expr_stmt|;
name|this
operator|.
name|maxSize
operator|=
name|maxSize
expr_stmt|;
name|this
operator|.
name|minSize
operator|=
name|minSize
expr_stmt|;
block|}
comment|/** Creates a new instance of DFSTestUtil    *    * @param testName Name of the test from where this utility is used    * @param nFiles Number of files to be created    * @param maxLevels Maximum number of directory levels    * @param maxSize Maximum size for file    * @param minSize Minimum size for file    */
DECL|method|DFSTestUtil (String testName, int nFiles, int maxLevels, int maxSize, int minSize)
specifier|public
name|DFSTestUtil
parameter_list|(
name|String
name|testName
parameter_list|,
name|int
name|nFiles
parameter_list|,
name|int
name|maxLevels
parameter_list|,
name|int
name|maxSize
parameter_list|,
name|int
name|minSize
parameter_list|)
block|{
name|this
operator|.
name|nFiles
operator|=
name|nFiles
expr_stmt|;
name|this
operator|.
name|maxLevels
operator|=
name|maxLevels
expr_stmt|;
name|this
operator|.
name|maxSize
operator|=
name|maxSize
expr_stmt|;
name|this
operator|.
name|minSize
operator|=
name|minSize
expr_stmt|;
block|}
comment|/**    * when formatting a namenode - we must provide clusterid.    * @param conf    * @throws IOException    */
DECL|method|formatNameNode (Configuration conf)
specifier|public
specifier|static
name|void
name|formatNameNode
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|clusterId
init|=
name|StartupOption
operator|.
name|FORMAT
operator|.
name|getClusterId
argument_list|()
decl_stmt|;
if|if
condition|(
name|clusterId
operator|==
literal|null
operator|||
name|clusterId
operator|.
name|isEmpty
argument_list|()
condition|)
name|StartupOption
operator|.
name|FORMAT
operator|.
name|setClusterId
argument_list|(
literal|"testClusterID"
argument_list|)
expr_stmt|;
comment|// Use a copy of conf as it can be altered by namenode during format.
name|NameNode
operator|.
name|format
argument_list|(
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a new HA-enabled configuration.    */
DECL|method|newHAConfiguration (final String logicalName)
specifier|public
specifier|static
name|Configuration
name|newHAConfiguration
parameter_list|(
specifier|final
name|String
name|logicalName
parameter_list|)
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|addHAConfiguration
argument_list|(
name|conf
argument_list|,
name|logicalName
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
comment|/**    * Add a new HA configuration.    */
DECL|method|addHAConfiguration (Configuration conf, final String logicalName)
specifier|public
specifier|static
name|void
name|addHAConfiguration
parameter_list|(
name|Configuration
name|conf
parameter_list|,
specifier|final
name|String
name|logicalName
parameter_list|)
block|{
name|String
name|nsIds
init|=
name|conf
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMESERVICES
argument_list|)
decl_stmt|;
if|if
condition|(
name|nsIds
operator|==
literal|null
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMESERVICES
argument_list|,
name|logicalName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// append the nsid
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMESERVICES
argument_list|,
name|nsIds
operator|+
literal|","
operator|+
name|logicalName
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|set
argument_list|(
name|DFSUtil
operator|.
name|addKeySuffixes
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|DFS_HA_NAMENODES_KEY_PREFIX
argument_list|,
name|logicalName
argument_list|)
argument_list|,
literal|"nn1,nn2"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|Failover
operator|.
name|PROXY_PROVIDER_KEY_PREFIX
operator|+
literal|"."
operator|+
name|logicalName
argument_list|,
name|ConfiguredFailoverProxyProvider
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_REPLICATION_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|setFakeHttpAddresses (Configuration conf, final String logicalName)
specifier|public
specifier|static
name|void
name|setFakeHttpAddresses
parameter_list|(
name|Configuration
name|conf
parameter_list|,
specifier|final
name|String
name|logicalName
parameter_list|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|DFSUtil
operator|.
name|addKeySuffixes
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HTTP_ADDRESS_KEY
argument_list|,
name|logicalName
argument_list|,
literal|"nn1"
argument_list|)
argument_list|,
literal|"127.0.0.1:12345"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSUtil
operator|.
name|addKeySuffixes
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HTTP_ADDRESS_KEY
argument_list|,
name|logicalName
argument_list|,
literal|"nn2"
argument_list|)
argument_list|,
literal|"127.0.0.1:12346"
argument_list|)
expr_stmt|;
block|}
DECL|method|setEditLogForTesting (FSNamesystem fsn, FSEditLog newLog)
specifier|public
specifier|static
name|void
name|setEditLogForTesting
parameter_list|(
name|FSNamesystem
name|fsn
parameter_list|,
name|FSEditLog
name|newLog
parameter_list|)
block|{
comment|// spies are shallow copies, must allow async log to restart its thread
comment|// so it has the new copy
name|newLog
operator|.
name|restart
argument_list|()
expr_stmt|;
name|Whitebox
operator|.
name|setInternalState
argument_list|(
name|fsn
operator|.
name|getFSImage
argument_list|()
argument_list|,
literal|"editLog"
argument_list|,
name|newLog
argument_list|)
expr_stmt|;
name|Whitebox
operator|.
name|setInternalState
argument_list|(
name|fsn
operator|.
name|getFSDirectory
argument_list|()
argument_list|,
literal|"editLog"
argument_list|,
name|newLog
argument_list|)
expr_stmt|;
block|}
DECL|method|enableAllECPolicies (DistributedFileSystem fs)
specifier|public
specifier|static
name|void
name|enableAllECPolicies
parameter_list|(
name|DistributedFileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Enable all available EC policies
for|for
control|(
name|ErasureCodingPolicy
name|ecPolicy
range|:
name|SystemErasureCodingPolicies
operator|.
name|getPolicies
argument_list|()
control|)
block|{
name|fs
operator|.
name|enableErasureCodingPolicy
argument_list|(
name|ecPolicy
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getECPolicyState ( final ErasureCodingPolicy policy)
specifier|public
specifier|static
name|ErasureCodingPolicyState
name|getECPolicyState
parameter_list|(
specifier|final
name|ErasureCodingPolicy
name|policy
parameter_list|)
block|{
specifier|final
name|ErasureCodingPolicyInfo
index|[]
name|policyInfos
init|=
name|ErasureCodingPolicyManager
operator|.
name|getInstance
argument_list|()
operator|.
name|getPolicies
argument_list|()
decl_stmt|;
for|for
control|(
name|ErasureCodingPolicyInfo
name|pi
range|:
name|policyInfos
control|)
block|{
if|if
condition|(
name|pi
operator|.
name|getPolicy
argument_list|()
operator|.
name|equals
argument_list|(
name|policy
argument_list|)
condition|)
block|{
return|return
name|pi
operator|.
name|getState
argument_list|()
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"ErasureCodingPolicy<"
operator|+
name|policy
operator|+
literal|"> doesn't exist in the policies:"
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|policyInfos
argument_list|)
argument_list|)
throw|;
block|}
comment|/** class MyFile contains enough information to recreate the contents of    * a single file.    */
DECL|class|MyFile
specifier|private
class|class
name|MyFile
block|{
DECL|field|name
specifier|private
name|String
name|name
init|=
literal|""
decl_stmt|;
DECL|field|size
specifier|private
specifier|final
name|int
name|size
decl_stmt|;
DECL|field|seed
specifier|private
specifier|final
name|long
name|seed
decl_stmt|;
DECL|method|MyFile ()
name|MyFile
parameter_list|()
block|{
name|int
name|nLevels
init|=
name|gen
operator|.
name|nextInt
argument_list|(
name|maxLevels
argument_list|)
decl_stmt|;
if|if
condition|(
name|nLevels
operator|!=
literal|0
condition|)
block|{
name|int
index|[]
name|levels
init|=
operator|new
name|int
index|[
name|nLevels
index|]
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|nLevels
condition|;
name|idx
operator|++
control|)
block|{
name|levels
index|[
name|idx
index|]
operator|=
name|gen
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|nLevels
condition|;
name|idx
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|dirNames
index|[
name|levels
index|[
name|idx
index|]
index|]
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
block|}
name|name
operator|=
name|sb
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|long
name|fidx
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|fidx
operator|<
literal|0
condition|)
block|{
name|fidx
operator|=
name|gen
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
name|name
operator|=
name|name
operator|+
name|Long
operator|.
name|toString
argument_list|(
name|fidx
argument_list|)
expr_stmt|;
name|size
operator|=
name|minSize
operator|+
name|gen
operator|.
name|nextInt
argument_list|(
name|maxSize
operator|-
name|minSize
argument_list|)
expr_stmt|;
name|seed
operator|=
name|gen
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
DECL|method|getName ()
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|getSize ()
name|int
name|getSize
parameter_list|()
block|{
return|return
name|size
return|;
block|}
DECL|method|getSeed ()
name|long
name|getSeed
parameter_list|()
block|{
return|return
name|seed
return|;
block|}
block|}
DECL|method|createFiles (FileSystem fs, String topdir)
specifier|public
name|void
name|createFiles
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|topdir
parameter_list|)
throws|throws
name|IOException
block|{
name|createFiles
argument_list|(
name|fs
argument_list|,
name|topdir
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
expr_stmt|;
block|}
DECL|method|readFileAsBytes (FileSystem fs, Path fileName)
specifier|public
specifier|static
name|byte
index|[]
name|readFileAsBytes
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|fileName
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
init|)
block|{
name|IOUtils
operator|.
name|copyBytes
argument_list|(
name|fs
operator|.
name|open
argument_list|(
name|fileName
argument_list|)
argument_list|,
name|os
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
return|return
name|os
operator|.
name|toByteArray
argument_list|()
return|;
block|}
block|}
comment|/** create nFiles with random names and directory hierarchies    *  with random (but reproducible) data in them.    */
DECL|method|createFiles (FileSystem fs, String topdir, short replicationFactor)
specifier|public
name|void
name|createFiles
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|topdir
parameter_list|,
name|short
name|replicationFactor
parameter_list|)
throws|throws
name|IOException
block|{
name|files
operator|=
operator|new
name|MyFile
index|[
name|nFiles
index|]
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|nFiles
condition|;
name|idx
operator|++
control|)
block|{
name|files
index|[
name|idx
index|]
operator|=
operator|new
name|MyFile
argument_list|()
expr_stmt|;
block|}
name|Path
name|root
init|=
operator|new
name|Path
argument_list|(
name|topdir
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|nFiles
condition|;
name|idx
operator|++
control|)
block|{
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|root
argument_list|,
name|files
index|[
name|idx
index|]
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|files
index|[
name|idx
index|]
operator|.
name|getSize
argument_list|()
argument_list|,
name|replicationFactor
argument_list|,
name|files
index|[
name|idx
index|]
operator|.
name|getSeed
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|readFile (FileSystem fs, Path fileName)
specifier|public
specifier|static
name|String
name|readFile
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|fileName
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
name|buf
index|[]
init|=
name|readFileBuffer
argument_list|(
name|fs
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
return|return
operator|new
name|String
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|buf
operator|.
name|length
argument_list|)
return|;
block|}
DECL|method|readFileBuffer (FileSystem fs, Path fileName)
specifier|public
specifier|static
name|byte
index|[]
name|readFileBuffer
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|fileName
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
init|;
name|FSDataInputStream
name|in
operator|=
name|fs
operator|.
name|open
argument_list|(
name|fileName
argument_list|)
init|)
block|{
name|IOUtils
operator|.
name|copyBytes
argument_list|(
name|in
argument_list|,
name|os
argument_list|,
literal|1024
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|os
operator|.
name|toByteArray
argument_list|()
return|;
block|}
block|}
DECL|method|createFile (FileSystem fs, Path fileName, long fileLen, short replFactor, long seed)
specifier|public
specifier|static
name|void
name|createFile
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|fileName
parameter_list|,
name|long
name|fileLen
parameter_list|,
name|short
name|replFactor
parameter_list|,
name|long
name|seed
parameter_list|)
throws|throws
name|IOException
block|{
name|createFile
argument_list|(
name|fs
argument_list|,
name|fileName
argument_list|,
literal|1024
argument_list|,
name|fileLen
argument_list|,
name|fs
operator|.
name|getDefaultBlockSize
argument_list|(
name|fileName
argument_list|)
argument_list|,
name|replFactor
argument_list|,
name|seed
argument_list|)
expr_stmt|;
block|}
DECL|method|createFile (FileSystem fs, Path fileName, int bufferLen, long fileLen, long blockSize, short replFactor, long seed)
specifier|public
specifier|static
name|void
name|createFile
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|fileName
parameter_list|,
name|int
name|bufferLen
parameter_list|,
name|long
name|fileLen
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|short
name|replFactor
parameter_list|,
name|long
name|seed
parameter_list|)
throws|throws
name|IOException
block|{
name|createFile
argument_list|(
name|fs
argument_list|,
name|fileName
argument_list|,
literal|false
argument_list|,
name|bufferLen
argument_list|,
name|fileLen
argument_list|,
name|blockSize
argument_list|,
name|replFactor
argument_list|,
name|seed
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|createFile (FileSystem fs, Path fileName, boolean isLazyPersist, int bufferLen, long fileLen, long blockSize, short replFactor, long seed, boolean flush)
specifier|public
specifier|static
name|void
name|createFile
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|fileName
parameter_list|,
name|boolean
name|isLazyPersist
parameter_list|,
name|int
name|bufferLen
parameter_list|,
name|long
name|fileLen
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|short
name|replFactor
parameter_list|,
name|long
name|seed
parameter_list|,
name|boolean
name|flush
parameter_list|)
throws|throws
name|IOException
block|{
name|createFile
argument_list|(
name|fs
argument_list|,
name|fileName
argument_list|,
name|isLazyPersist
argument_list|,
name|bufferLen
argument_list|,
name|fileLen
argument_list|,
name|blockSize
argument_list|,
name|replFactor
argument_list|,
name|seed
argument_list|,
name|flush
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|createFile (FileSystem fs, Path fileName, boolean isLazyPersist, int bufferLen, long fileLen, long blockSize, short replFactor, long seed, boolean flush, InetSocketAddress[] favoredNodes)
specifier|public
specifier|static
name|void
name|createFile
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|fileName
parameter_list|,
name|boolean
name|isLazyPersist
parameter_list|,
name|int
name|bufferLen
parameter_list|,
name|long
name|fileLen
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|short
name|replFactor
parameter_list|,
name|long
name|seed
parameter_list|,
name|boolean
name|flush
parameter_list|,
name|InetSocketAddress
index|[]
name|favoredNodes
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|bufferLen
operator|>
literal|0
assert|;
if|if
condition|(
operator|!
name|fs
operator|.
name|mkdirs
argument_list|(
name|fileName
operator|.
name|getParent
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Mkdirs failed to create "
operator|+
name|fileName
operator|.
name|getParent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|EnumSet
argument_list|<
name|CreateFlag
argument_list|>
name|createFlags
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|CREATE
argument_list|)
decl_stmt|;
name|createFlags
operator|.
name|add
argument_list|(
name|OVERWRITE
argument_list|)
expr_stmt|;
if|if
condition|(
name|isLazyPersist
condition|)
block|{
name|createFlags
operator|.
name|add
argument_list|(
name|LAZY_PERSIST
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|FSDataOutputStream
name|out
init|=
operator|(
name|favoredNodes
operator|==
literal|null
operator|)
condition|?
name|fs
operator|.
name|create
argument_list|(
name|fileName
argument_list|,
name|FsPermission
operator|.
name|getFileDefault
argument_list|()
argument_list|,
name|createFlags
argument_list|,
name|fs
operator|.
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
name|IO_FILE_BUFFER_SIZE_KEY
argument_list|,
literal|4096
argument_list|)
argument_list|,
name|replFactor
argument_list|,
name|blockSize
argument_list|,
literal|null
argument_list|)
else|:
operator|(
operator|(
name|DistributedFileSystem
operator|)
name|fs
operator|)
operator|.
name|create
argument_list|(
name|fileName
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|,
literal|true
argument_list|,
name|bufferLen
argument_list|,
name|replFactor
argument_list|,
name|blockSize
argument_list|,
literal|null
argument_list|,
name|favoredNodes
argument_list|)
init|)
block|{
if|if
condition|(
name|fileLen
operator|>
literal|0
condition|)
block|{
name|byte
index|[]
name|toWrite
init|=
operator|new
name|byte
index|[
name|bufferLen
index|]
decl_stmt|;
name|Random
name|rb
init|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
decl_stmt|;
name|long
name|bytesToWrite
init|=
name|fileLen
decl_stmt|;
while|while
condition|(
name|bytesToWrite
operator|>
literal|0
condition|)
block|{
name|rb
operator|.
name|nextBytes
argument_list|(
name|toWrite
argument_list|)
expr_stmt|;
name|int
name|bytesToWriteNext
init|=
operator|(
name|bufferLen
operator|<
name|bytesToWrite
operator|)
condition|?
name|bufferLen
else|:
operator|(
name|int
operator|)
name|bytesToWrite
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|toWrite
argument_list|,
literal|0
argument_list|,
name|bytesToWriteNext
argument_list|)
expr_stmt|;
name|bytesToWrite
operator|-=
name|bytesToWriteNext
expr_stmt|;
block|}
if|if
condition|(
name|flush
condition|)
block|{
name|out
operator|.
name|hsync
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|calculateFileContentsFromSeed (long seed, int length)
specifier|public
specifier|static
name|byte
index|[]
name|calculateFileContentsFromSeed
parameter_list|(
name|long
name|seed
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|Random
name|rb
init|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
decl_stmt|;
name|byte
name|val
index|[]
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
name|rb
operator|.
name|nextBytes
argument_list|(
name|val
argument_list|)
expr_stmt|;
return|return
name|val
return|;
block|}
comment|/** check if the files have been copied correctly. */
DECL|method|checkFiles (FileSystem fs, String topdir)
specifier|public
name|boolean
name|checkFiles
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|topdir
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|root
init|=
operator|new
name|Path
argument_list|(
name|topdir
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|nFiles
condition|;
name|idx
operator|++
control|)
block|{
name|Path
name|fPath
init|=
operator|new
name|Path
argument_list|(
name|root
argument_list|,
name|files
index|[
name|idx
index|]
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|fPath
argument_list|)
init|)
block|{
name|byte
index|[]
name|toRead
init|=
operator|new
name|byte
index|[
name|files
index|[
name|idx
index|]
operator|.
name|getSize
argument_list|()
index|]
decl_stmt|;
name|byte
index|[]
name|toCompare
init|=
operator|new
name|byte
index|[
name|files
index|[
name|idx
index|]
operator|.
name|getSize
argument_list|()
index|]
decl_stmt|;
name|Random
name|rb
init|=
operator|new
name|Random
argument_list|(
name|files
index|[
name|idx
index|]
operator|.
name|getSeed
argument_list|()
argument_list|)
decl_stmt|;
name|rb
operator|.
name|nextBytes
argument_list|(
name|toCompare
argument_list|)
expr_stmt|;
name|in
operator|.
name|readFully
argument_list|(
literal|0
argument_list|,
name|toRead
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|toRead
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|toRead
index|[
name|i
index|]
operator|!=
name|toCompare
index|[
name|i
index|]
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|setReplication (FileSystem fs, String topdir, short value)
name|void
name|setReplication
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|topdir
parameter_list|,
name|short
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|root
init|=
operator|new
name|Path
argument_list|(
name|topdir
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|nFiles
condition|;
name|idx
operator|++
control|)
block|{
name|Path
name|fPath
init|=
operator|new
name|Path
argument_list|(
name|root
argument_list|,
name|files
index|[
name|idx
index|]
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setReplication
argument_list|(
name|fPath
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Waits for the replication factor of all files to reach the    * specified target.    */
DECL|method|waitReplication (FileSystem fs, String topdir, short value)
specifier|public
name|void
name|waitReplication
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|topdir
parameter_list|,
name|short
name|value
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|TimeoutException
block|{
name|Path
name|root
init|=
operator|new
name|Path
argument_list|(
name|topdir
argument_list|)
decl_stmt|;
comment|/** wait for the replication factor to settle down */
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|nFiles
condition|;
name|idx
operator|++
control|)
block|{
name|waitReplication
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|root
argument_list|,
name|files
index|[
name|idx
index|]
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Check if the given block in the given file is corrupt.    */
DECL|method|allBlockReplicasCorrupt (MiniDFSCluster cluster, Path file, int blockNo)
specifier|public
specifier|static
name|boolean
name|allBlockReplicasCorrupt
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|,
name|Path
name|file
parameter_list|,
name|int
name|blockNo
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|DFSClient
name|client
init|=
operator|new
name|DFSClient
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
name|cluster
operator|.
name|getNameNodePort
argument_list|()
argument_list|)
argument_list|,
name|cluster
operator|.
name|getConfiguration
argument_list|(
literal|0
argument_list|)
argument_list|)
init|)
block|{
name|LocatedBlocks
name|blocks
decl_stmt|;
name|blocks
operator|=
name|client
operator|.
name|getNamenode
argument_list|()
operator|.
name|getBlockLocations
argument_list|(
name|file
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
return|return
name|blocks
operator|.
name|get
argument_list|(
name|blockNo
argument_list|)
operator|.
name|isCorrupt
argument_list|()
return|;
block|}
block|}
comment|/*    * Wait up to 20s for the given block to be replicated across    * the requested number of racks, with the requested number of    * replicas, and the requested number of replicas still needed.    */
DECL|method|waitForReplication (MiniDFSCluster cluster, ExtendedBlock b, int racks, int replicas, int neededReplicas)
specifier|public
specifier|static
name|void
name|waitForReplication
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|,
name|ExtendedBlock
name|b
parameter_list|,
name|int
name|racks
parameter_list|,
name|int
name|replicas
parameter_list|,
name|int
name|neededReplicas
parameter_list|)
throws|throws
name|TimeoutException
throws|,
name|InterruptedException
block|{
name|int
name|curRacks
init|=
literal|0
decl_stmt|;
name|int
name|curReplicas
init|=
literal|0
decl_stmt|;
name|int
name|curNeededReplicas
init|=
literal|0
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|ATTEMPTS
init|=
literal|20
decl_stmt|;
do|do
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|int
index|[]
name|r
init|=
name|BlockManagerTestUtil
operator|.
name|getReplicaInfo
argument_list|(
name|cluster
operator|.
name|getNamesystem
argument_list|()
argument_list|,
name|b
operator|.
name|getLocalBlock
argument_list|()
argument_list|)
decl_stmt|;
name|curRacks
operator|=
name|r
index|[
literal|0
index|]
expr_stmt|;
name|curReplicas
operator|=
name|r
index|[
literal|1
index|]
expr_stmt|;
name|curNeededReplicas
operator|=
name|r
index|[
literal|2
index|]
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
do|while
condition|(
operator|(
name|curRacks
operator|!=
name|racks
operator|||
name|curReplicas
operator|!=
name|replicas
operator|||
name|curNeededReplicas
operator|!=
name|neededReplicas
operator|)
operator|&&
name|count
operator|<
name|ATTEMPTS
condition|)
do|;
if|if
condition|(
name|count
operator|==
name|ATTEMPTS
condition|)
block|{
throw|throw
operator|new
name|TimeoutException
argument_list|(
literal|"Timed out waiting for replication."
operator|+
literal|" Needed replicas = "
operator|+
name|neededReplicas
operator|+
literal|" Cur needed replicas = "
operator|+
name|curNeededReplicas
operator|+
literal|" Replicas = "
operator|+
name|replicas
operator|+
literal|" Cur replicas = "
operator|+
name|curReplicas
operator|+
literal|" Racks = "
operator|+
name|racks
operator|+
literal|" Cur racks = "
operator|+
name|curRacks
argument_list|)
throw|;
block|}
block|}
DECL|method|waitForReplication (final DistributedFileSystem dfs, final Path file, final short replication, int waitForMillis)
specifier|public
specifier|static
name|void
name|waitForReplication
parameter_list|(
specifier|final
name|DistributedFileSystem
name|dfs
parameter_list|,
specifier|final
name|Path
name|file
parameter_list|,
specifier|final
name|short
name|replication
parameter_list|,
name|int
name|waitForMillis
parameter_list|)
throws|throws
name|TimeoutException
throws|,
name|InterruptedException
block|{
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
try|try
block|{
name|FileStatus
name|stat
init|=
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|BlockLocation
index|[]
name|locs
init|=
name|dfs
operator|.
name|getFileBlockLocations
argument_list|(
name|stat
argument_list|,
literal|0
argument_list|,
name|stat
operator|.
name|getLen
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|BlockLocation
name|loc
range|:
name|locs
control|)
block|{
if|if
condition|(
name|replication
operator|!=
name|loc
operator|.
name|getHosts
argument_list|()
operator|.
name|length
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"getFileStatus on path "
operator|+
name|file
operator|+
literal|" failed!"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
argument_list|,
literal|100
argument_list|,
name|waitForMillis
argument_list|)
expr_stmt|;
block|}
comment|/**    * Keep accessing the given file until the namenode reports that the    * given block in the file contains the given number of corrupt replicas.    */
DECL|method|waitCorruptReplicas (FileSystem fs, FSNamesystem ns, Path file, ExtendedBlock b, int corruptRepls)
specifier|public
specifier|static
name|void
name|waitCorruptReplicas
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|FSNamesystem
name|ns
parameter_list|,
name|Path
name|file
parameter_list|,
name|ExtendedBlock
name|b
parameter_list|,
name|int
name|corruptRepls
parameter_list|)
throws|throws
name|TimeoutException
throws|,
name|InterruptedException
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|ATTEMPTS
init|=
literal|50
decl_stmt|;
name|int
name|repls
init|=
name|ns
operator|.
name|getBlockManager
argument_list|()
operator|.
name|numCorruptReplicas
argument_list|(
name|b
operator|.
name|getLocalBlock
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|repls
operator|!=
name|corruptRepls
operator|&&
name|count
operator|<
name|ATTEMPTS
condition|)
block|{
try|try
block|{
name|IOUtils
operator|.
name|copyBytes
argument_list|(
name|fs
operator|.
name|open
argument_list|(
name|file
argument_list|)
argument_list|,
operator|new
name|IOUtils
operator|.
name|NullOutputStream
argument_list|()
argument_list|,
literal|512
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Swallow exceptions
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Waiting for "
operator|+
name|corruptRepls
operator|+
literal|" corrupt replicas"
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
comment|// check more often so corrupt block reports are not easily missed
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|repls
operator|=
name|ns
operator|.
name|getBlockManager
argument_list|()
operator|.
name|numCorruptReplicas
argument_list|(
name|b
operator|.
name|getLocalBlock
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
if|if
condition|(
name|repls
operator|==
name|corruptRepls
condition|)
block|{
break|break;
block|}
block|}
block|}
if|if
condition|(
name|count
operator|==
name|ATTEMPTS
condition|)
block|{
throw|throw
operator|new
name|TimeoutException
argument_list|(
literal|"Timed out waiting for corrupt replicas."
operator|+
literal|" Waiting for "
operator|+
name|corruptRepls
operator|+
literal|", but only found "
operator|+
name|repls
argument_list|)
throw|;
block|}
block|}
comment|/*    * Wait up to 20s for the given DN (IP:port) to be decommissioned    */
DECL|method|waitForDecommission (FileSystem fs, String name)
specifier|public
specifier|static
name|void
name|waitForDecommission
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|TimeoutException
block|{
name|DatanodeInfo
name|dn
init|=
literal|null
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|ATTEMPTS
init|=
literal|20
decl_stmt|;
do|do
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|DistributedFileSystem
name|dfs
init|=
operator|(
name|DistributedFileSystem
operator|)
name|fs
decl_stmt|;
for|for
control|(
name|DatanodeInfo
name|info
range|:
name|dfs
operator|.
name|getDataNodeStats
argument_list|()
control|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|info
operator|.
name|getXferAddr
argument_list|()
argument_list|)
condition|)
block|{
name|dn
operator|=
name|info
expr_stmt|;
block|}
block|}
name|count
operator|++
expr_stmt|;
block|}
do|while
condition|(
operator|(
name|dn
operator|==
literal|null
operator|||
name|dn
operator|.
name|isDecommissionInProgress
argument_list|()
operator|||
operator|!
name|dn
operator|.
name|isDecommissioned
argument_list|()
operator|)
operator|&&
name|count
operator|<
name|ATTEMPTS
condition|)
do|;
if|if
condition|(
name|count
operator|==
name|ATTEMPTS
condition|)
block|{
throw|throw
operator|new
name|TimeoutException
argument_list|(
literal|"Timed out waiting for datanode "
operator|+
name|name
operator|+
literal|" to decommission."
argument_list|)
throw|;
block|}
block|}
comment|/*    * Returns the index of the first datanode which has a copy    * of the given block, or -1 if no such datanode exists.    */
DECL|method|firstDnWithBlock (MiniDFSCluster cluster, ExtendedBlock b)
specifier|public
specifier|static
name|int
name|firstDnWithBlock
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|,
name|ExtendedBlock
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|numDatanodes
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDatanodes
condition|;
name|i
operator|++
control|)
block|{
name|String
name|blockContent
init|=
name|cluster
operator|.
name|readBlockOnDataNode
argument_list|(
name|i
argument_list|,
name|b
argument_list|)
decl_stmt|;
if|if
condition|(
name|blockContent
operator|!=
literal|null
condition|)
block|{
return|return
name|i
return|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|/*    * Return the total capacity of all live DNs.    */
DECL|method|getLiveDatanodeCapacity (DatanodeManager dm)
specifier|public
specifier|static
name|long
name|getLiveDatanodeCapacity
parameter_list|(
name|DatanodeManager
name|dm
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|live
init|=
operator|new
name|ArrayList
argument_list|<
name|DatanodeDescriptor
argument_list|>
argument_list|()
decl_stmt|;
name|dm
operator|.
name|fetchDatanodes
argument_list|(
name|live
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|long
name|capacity
init|=
literal|0
decl_stmt|;
for|for
control|(
specifier|final
name|DatanodeDescriptor
name|dn
range|:
name|live
control|)
block|{
name|capacity
operator|+=
name|dn
operator|.
name|getCapacity
argument_list|()
expr_stmt|;
block|}
return|return
name|capacity
return|;
block|}
comment|/*    * Return the capacity of the given live DN.    */
DECL|method|getDatanodeCapacity (DatanodeManager dm, int index)
specifier|public
specifier|static
name|long
name|getDatanodeCapacity
parameter_list|(
name|DatanodeManager
name|dm
parameter_list|,
name|int
name|index
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|live
init|=
operator|new
name|ArrayList
argument_list|<
name|DatanodeDescriptor
argument_list|>
argument_list|()
decl_stmt|;
name|dm
operator|.
name|fetchDatanodes
argument_list|(
name|live
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|live
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|getCapacity
argument_list|()
return|;
block|}
comment|/*    * Wait for the given # live/dead DNs, total capacity, and # vol failures.     */
DECL|method|waitForDatanodeStatus (DatanodeManager dm, int expectedLive, int expectedDead, long expectedVolFails, long expectedTotalCapacity, long timeout)
specifier|public
specifier|static
name|void
name|waitForDatanodeStatus
parameter_list|(
name|DatanodeManager
name|dm
parameter_list|,
name|int
name|expectedLive
parameter_list|,
name|int
name|expectedDead
parameter_list|,
name|long
name|expectedVolFails
parameter_list|,
name|long
name|expectedTotalCapacity
parameter_list|,
name|long
name|timeout
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|TimeoutException
block|{
specifier|final
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|live
init|=
operator|new
name|ArrayList
argument_list|<
name|DatanodeDescriptor
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|dead
init|=
operator|new
name|ArrayList
argument_list|<
name|DatanodeDescriptor
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|int
name|ATTEMPTS
init|=
literal|10
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|long
name|currTotalCapacity
init|=
literal|0
decl_stmt|;
name|int
name|volFails
init|=
literal|0
decl_stmt|;
do|do
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
name|live
operator|.
name|clear
argument_list|()
expr_stmt|;
name|dead
operator|.
name|clear
argument_list|()
expr_stmt|;
name|dm
operator|.
name|fetchDatanodes
argument_list|(
name|live
argument_list|,
name|dead
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|currTotalCapacity
operator|=
literal|0
expr_stmt|;
name|volFails
operator|=
literal|0
expr_stmt|;
for|for
control|(
specifier|final
name|DatanodeDescriptor
name|dd
range|:
name|live
control|)
block|{
name|currTotalCapacity
operator|+=
name|dd
operator|.
name|getCapacity
argument_list|()
expr_stmt|;
name|volFails
operator|+=
name|dd
operator|.
name|getVolumeFailures
argument_list|()
expr_stmt|;
block|}
name|count
operator|++
expr_stmt|;
block|}
do|while
condition|(
operator|(
name|expectedLive
operator|!=
name|live
operator|.
name|size
argument_list|()
operator|||
name|expectedDead
operator|!=
name|dead
operator|.
name|size
argument_list|()
operator|||
name|expectedTotalCapacity
operator|!=
name|currTotalCapacity
operator|||
name|expectedVolFails
operator|!=
name|volFails
operator|)
operator|&&
name|count
operator|<
name|ATTEMPTS
condition|)
do|;
if|if
condition|(
name|count
operator|==
name|ATTEMPTS
condition|)
block|{
throw|throw
operator|new
name|TimeoutException
argument_list|(
literal|"Timed out waiting for capacity."
operator|+
literal|" Live = "
operator|+
name|live
operator|.
name|size
argument_list|()
operator|+
literal|" Expected = "
operator|+
name|expectedLive
operator|+
literal|" Dead = "
operator|+
name|dead
operator|.
name|size
argument_list|()
operator|+
literal|" Expected = "
operator|+
name|expectedDead
operator|+
literal|" Total capacity = "
operator|+
name|currTotalCapacity
operator|+
literal|" Expected = "
operator|+
name|expectedTotalCapacity
operator|+
literal|" Vol Fails = "
operator|+
name|volFails
operator|+
literal|" Expected = "
operator|+
name|expectedVolFails
argument_list|)
throw|;
block|}
block|}
comment|/*    * Wait for the given DN to consider itself dead.    */
DECL|method|waitForDatanodeDeath (DataNode dn)
specifier|public
specifier|static
name|void
name|waitForDatanodeDeath
parameter_list|(
name|DataNode
name|dn
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|TimeoutException
block|{
specifier|final
name|int
name|ATTEMPTS
init|=
literal|10
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
do|do
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
do|while
condition|(
name|dn
operator|.
name|isDatanodeUp
argument_list|()
operator|&&
name|count
operator|<
name|ATTEMPTS
condition|)
do|;
if|if
condition|(
name|count
operator|==
name|ATTEMPTS
condition|)
block|{
throw|throw
operator|new
name|TimeoutException
argument_list|(
literal|"Timed out waiting for DN to die"
argument_list|)
throw|;
block|}
block|}
comment|/** return list of filenames created as part of createFiles */
DECL|method|getFileNames (String topDir)
specifier|public
name|String
index|[]
name|getFileNames
parameter_list|(
name|String
name|topDir
parameter_list|)
block|{
if|if
condition|(
name|nFiles
operator|==
literal|0
condition|)
return|return
operator|new
name|String
index|[]
block|{}
return|;
else|else
block|{
name|String
index|[]
name|fileNames
init|=
operator|new
name|String
index|[
name|nFiles
index|]
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|nFiles
condition|;
name|idx
operator|++
control|)
block|{
name|fileNames
index|[
name|idx
index|]
operator|=
name|topDir
operator|+
literal|"/"
operator|+
name|files
index|[
name|idx
index|]
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
return|return
name|fileNames
return|;
block|}
block|}
comment|/**    * Wait for the given file to reach the given replication factor.    * @throws TimeoutException if we fail to sufficiently replicate the file    */
DECL|method|waitReplication (FileSystem fs, Path fileName, short replFactor)
specifier|public
specifier|static
name|void
name|waitReplication
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|fileName
parameter_list|,
name|short
name|replFactor
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|TimeoutException
block|{
name|boolean
name|correctReplFactor
decl_stmt|;
specifier|final
name|int
name|ATTEMPTS
init|=
literal|40
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
do|do
block|{
name|correctReplFactor
operator|=
literal|true
expr_stmt|;
name|BlockLocation
name|locs
index|[]
init|=
name|fs
operator|.
name|getFileBlockLocations
argument_list|(
name|fs
operator|.
name|getFileStatus
argument_list|(
name|fileName
argument_list|)
argument_list|,
literal|0
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|count
operator|++
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|locs
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|String
index|[]
name|hostnames
init|=
name|locs
index|[
name|j
index|]
operator|.
name|getNames
argument_list|()
decl_stmt|;
if|if
condition|(
name|hostnames
operator|.
name|length
operator|!=
name|replFactor
condition|)
block|{
name|correctReplFactor
operator|=
literal|false
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Block "
operator|+
name|j
operator|+
literal|" of file "
operator|+
name|fileName
operator|+
literal|" has replication factor "
operator|+
name|hostnames
operator|.
name|length
operator|+
literal|" (desired "
operator|+
name|replFactor
operator|+
literal|"); locations "
operator|+
name|Joiner
operator|.
name|on
argument_list|(
literal|' '
argument_list|)
operator|.
name|join
argument_list|(
name|hostnames
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|correctReplFactor
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"All blocks of file "
operator|+
name|fileName
operator|+
literal|" verified to have replication factor "
operator|+
name|replFactor
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
operator|!
name|correctReplFactor
operator|&&
name|count
operator|<
name|ATTEMPTS
condition|)
do|;
if|if
condition|(
name|count
operator|==
name|ATTEMPTS
condition|)
block|{
throw|throw
operator|new
name|TimeoutException
argument_list|(
literal|"Timed out waiting for "
operator|+
name|fileName
operator|+
literal|" to reach "
operator|+
name|replFactor
operator|+
literal|" replicas"
argument_list|)
throw|;
block|}
block|}
comment|/** delete directory and everything underneath it.*/
DECL|method|cleanup (FileSystem fs, String topdir)
specifier|public
name|void
name|cleanup
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|topdir
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|root
init|=
operator|new
name|Path
argument_list|(
name|topdir
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|root
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|files
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|getFirstBlock (FileSystem fs, Path path)
specifier|public
specifier|static
name|ExtendedBlock
name|getFirstBlock
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|HdfsDataInputStream
name|in
init|=
operator|(
name|HdfsDataInputStream
operator|)
name|fs
operator|.
name|open
argument_list|(
name|path
argument_list|)
init|)
block|{
name|in
operator|.
name|readByte
argument_list|()
expr_stmt|;
return|return
name|in
operator|.
name|getCurrentBlock
argument_list|()
return|;
block|}
block|}
DECL|method|getAllBlocks (FSDataInputStream in)
specifier|public
specifier|static
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|getAllBlocks
parameter_list|(
name|FSDataInputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
operator|(
name|HdfsDataInputStream
operator|)
name|in
operator|)
operator|.
name|getAllBlocks
argument_list|()
return|;
block|}
DECL|method|getAllBlocks (FileSystem fs, Path path)
specifier|public
specifier|static
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|getAllBlocks
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|HdfsDataInputStream
name|in
init|=
operator|(
name|HdfsDataInputStream
operator|)
name|fs
operator|.
name|open
argument_list|(
name|path
argument_list|)
init|)
block|{
return|return
name|in
operator|.
name|getAllBlocks
argument_list|()
return|;
block|}
block|}
DECL|method|getBlockToken ( FSDataOutputStream out)
specifier|public
specifier|static
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|getBlockToken
parameter_list|(
name|FSDataOutputStream
name|out
parameter_list|)
block|{
return|return
operator|(
operator|(
name|DFSOutputStream
operator|)
name|out
operator|.
name|getWrappedStream
argument_list|()
operator|)
operator|.
name|getBlockToken
argument_list|()
return|;
block|}
DECL|method|readFile (File f)
specifier|public
specifier|static
name|String
name|readFile
parameter_list|(
name|File
name|f
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|BufferedReader
name|in
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|f
argument_list|)
argument_list|)
init|)
block|{
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|c
decl_stmt|;
while|while
condition|(
operator|(
name|c
operator|=
name|in
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|c
argument_list|)
expr_stmt|;
block|}
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
DECL|method|readFileAsBytes (File f)
specifier|public
specifier|static
name|byte
index|[]
name|readFileAsBytes
parameter_list|(
name|File
name|f
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
init|)
block|{
name|IOUtils
operator|.
name|copyBytes
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|f
argument_list|)
argument_list|,
name|os
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
return|return
name|os
operator|.
name|toByteArray
argument_list|()
return|;
block|}
block|}
comment|/* Write the given bytes to the given file */
DECL|method|writeFile (FileSystem fs, Path p, byte[] bytes)
specifier|public
specifier|static
name|void
name|writeFile
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|p
parameter_list|,
name|byte
index|[]
name|bytes
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|p
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|p
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
init|;
name|FSDataOutputStream
name|os
operator|=
name|fs
operator|.
name|create
argument_list|(
name|p
argument_list|)
init|)
block|{
name|IOUtils
operator|.
name|copyBytes
argument_list|(
name|is
argument_list|,
name|os
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
comment|/* Write the given bytes to the given file using the specified blockSize */
DECL|method|writeFile ( FileSystem fs, Path p, byte[] bytes, long blockSize)
specifier|public
specifier|static
name|void
name|writeFile
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|p
parameter_list|,
name|byte
index|[]
name|bytes
parameter_list|,
name|long
name|blockSize
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|p
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|p
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
init|;
name|FSDataOutputStream
name|os
operator|=
name|fs
operator|.
name|create
argument_list|(
name|p
argument_list|,
literal|false
argument_list|,
literal|4096
argument_list|,
name|fs
operator|.
name|getDefaultReplication
argument_list|(
name|p
argument_list|)
argument_list|,
name|blockSize
argument_list|)
init|)
block|{
name|IOUtils
operator|.
name|copyBytes
argument_list|(
name|is
argument_list|,
name|os
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
comment|/* Write the given string to the given file */
DECL|method|writeFile (FileSystem fs, Path p, String s)
specifier|public
specifier|static
name|void
name|writeFile
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|p
parameter_list|,
name|String
name|s
parameter_list|)
throws|throws
name|IOException
block|{
name|writeFile
argument_list|(
name|fs
argument_list|,
name|p
argument_list|,
name|s
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/* Append the given string to the given file */
DECL|method|appendFile (FileSystem fs, Path p, String s)
specifier|public
specifier|static
name|void
name|appendFile
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|p
parameter_list|,
name|String
name|s
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|fs
operator|.
name|exists
argument_list|(
name|p
argument_list|)
assert|;
try|try
init|(
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|s
operator|.
name|getBytes
argument_list|()
argument_list|)
init|;
name|FSDataOutputStream
name|os
operator|=
name|fs
operator|.
name|append
argument_list|(
name|p
argument_list|)
init|)
block|{
name|IOUtils
operator|.
name|copyBytes
argument_list|(
name|is
argument_list|,
name|os
argument_list|,
name|s
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Append specified length of bytes to a given file    * @param fs The file system    * @param p Path of the file to append    * @param length Length of bytes to append to the file    * @throws IOException    */
DECL|method|appendFile (FileSystem fs, Path p, int length)
specifier|public
specifier|static
name|void
name|appendFile
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|p
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|fs
operator|.
name|exists
argument_list|(
name|p
argument_list|)
assert|;
assert|assert
name|length
operator|>=
literal|0
assert|;
name|byte
index|[]
name|toAppend
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|random
operator|.
name|nextBytes
argument_list|(
name|toAppend
argument_list|)
expr_stmt|;
try|try
init|(
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|append
argument_list|(
name|p
argument_list|)
init|)
block|{
name|out
operator|.
name|write
argument_list|(
name|toAppend
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Append specified length of bytes to a given file, starting with new block.    * @param fs The file system    * @param p Path of the file to append    * @param length Length of bytes to append to the file    * @throws IOException    */
DECL|method|appendFileNewBlock (DistributedFileSystem fs, Path p, int length)
specifier|public
specifier|static
name|void
name|appendFileNewBlock
parameter_list|(
name|DistributedFileSystem
name|fs
parameter_list|,
name|Path
name|p
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|length
operator|>=
literal|0
assert|;
name|byte
index|[]
name|toAppend
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|random
operator|.
name|nextBytes
argument_list|(
name|toAppend
argument_list|)
expr_stmt|;
name|appendFileNewBlock
argument_list|(
name|fs
argument_list|,
name|p
argument_list|,
name|toAppend
argument_list|)
expr_stmt|;
block|}
comment|/**    * Append specified bytes to a given file, starting with new block.    *    * @param fs The file system    * @param p Path of the file to append    * @param bytes The data to append    * @throws IOException    */
DECL|method|appendFileNewBlock (DistributedFileSystem fs, Path p, byte[] bytes)
specifier|public
specifier|static
name|void
name|appendFileNewBlock
parameter_list|(
name|DistributedFileSystem
name|fs
parameter_list|,
name|Path
name|p
parameter_list|,
name|byte
index|[]
name|bytes
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|fs
operator|.
name|exists
argument_list|(
name|p
argument_list|)
assert|;
try|try
init|(
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|append
argument_list|(
name|p
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateFlag
operator|.
name|APPEND
argument_list|,
name|CreateFlag
operator|.
name|NEW_BLOCK
argument_list|)
argument_list|,
literal|4096
argument_list|,
literal|null
argument_list|)
init|)
block|{
name|out
operator|.
name|write
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * @return url content as string (UTF-8 encoding assumed)    */
DECL|method|urlGet (URL url)
specifier|public
specifier|static
name|String
name|urlGet
parameter_list|(
name|URL
name|url
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|String
argument_list|(
name|urlGetBytes
argument_list|(
name|url
argument_list|)
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
return|;
block|}
comment|/**    * @return URL contents as a byte array    */
DECL|method|urlGetBytes (URL url)
specifier|public
specifier|static
name|byte
index|[]
name|urlGetBytes
parameter_list|(
name|URL
name|url
parameter_list|)
throws|throws
name|IOException
block|{
name|URLConnection
name|conn
init|=
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|HttpURLConnection
name|hc
init|=
operator|(
name|HttpURLConnection
operator|)
name|conn
decl_stmt|;
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|hc
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|IOUtils
operator|.
name|copyBytes
argument_list|(
name|conn
operator|.
name|getInputStream
argument_list|()
argument_list|,
name|out
argument_list|,
literal|4096
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|out
operator|.
name|toByteArray
argument_list|()
return|;
block|}
comment|/**    * mock class to get group mapping for fake users    *     */
DECL|class|MockUnixGroupsMapping
specifier|static
class|class
name|MockUnixGroupsMapping
extends|extends
name|ShellBasedUnixGroupsMapping
block|{
DECL|field|fakeUser2GroupsMap
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|fakeUser2GroupsMap
decl_stmt|;
DECL|field|defaultGroups
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|defaultGroups
decl_stmt|;
static|static
block|{
name|defaultGroups
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|defaultGroups
operator|.
name|add
argument_list|(
literal|"supergroup"
argument_list|)
expr_stmt|;
name|fakeUser2GroupsMap
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getGroups (String user)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getGroups
parameter_list|(
name|String
name|user
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
comment|// check to see if this is one of fake users
name|List
argument_list|<
name|String
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|u
range|:
name|fakeUser2GroupsMap
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|user
operator|.
name|equals
argument_list|(
name|u
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|String
name|gr
range|:
name|fakeUser2GroupsMap
operator|.
name|get
argument_list|(
name|u
argument_list|)
control|)
block|{
name|l
operator|.
name|add
argument_list|(
name|gr
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// default
if|if
condition|(
operator|!
name|found
condition|)
block|{
name|l
operator|=
name|super
operator|.
name|getGroups
argument_list|(
name|user
argument_list|)
expr_stmt|;
if|if
condition|(
name|l
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"failed to get real group for "
operator|+
name|user
operator|+
literal|"; using default"
argument_list|)
expr_stmt|;
return|return
name|defaultGroups
return|;
block|}
block|}
return|return
name|l
return|;
block|}
block|}
comment|/**    * update the configuration with fake class for mapping user to groups    * @param conf    * @param map - user to groups mapping    */
DECL|method|updateConfWithFakeGroupMapping (Configuration conf, Map<String, String []> map)
specifier|static
specifier|public
name|void
name|updateConfWithFakeGroupMapping
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|map
parameter_list|)
block|{
if|if
condition|(
name|map
operator|!=
literal|null
condition|)
block|{
name|MockUnixGroupsMapping
operator|.
name|fakeUser2GroupsMap
operator|=
name|map
expr_stmt|;
block|}
comment|// fake mapping user to groups
name|conf
operator|.
name|setClass
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_GROUP_MAPPING
argument_list|,
name|DFSTestUtil
operator|.
name|MockUnixGroupsMapping
operator|.
name|class
argument_list|,
name|ShellBasedUnixGroupsMapping
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get a FileSystem instance as specified user in a doAs block.    */
DECL|method|getFileSystemAs (UserGroupInformation ugi, final Configuration conf)
specifier|static
specifier|public
name|FileSystem
name|getFileSystemAs
parameter_list|(
name|UserGroupInformation
name|ugi
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|FileSystem
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|FileSystem
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|InterruptedIOException
operator|)
operator|new
name|InterruptedIOException
argument_list|()
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|generateSequentialBytes (int start, int length)
specifier|public
specifier|static
name|byte
index|[]
name|generateSequentialBytes
parameter_list|(
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|result
index|[
name|i
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|start
operator|+
name|i
operator|)
operator|%
literal|127
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|getStatistics (FileSystem fs)
specifier|public
specifier|static
name|Statistics
name|getStatistics
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
block|{
return|return
name|FileSystem
operator|.
name|getStatistics
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
operator|.
name|getScheme
argument_list|()
argument_list|,
name|fs
operator|.
name|getClass
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Load file into byte[]    */
DECL|method|loadFile (String filename)
specifier|public
specifier|static
name|byte
index|[]
name|loadFile
parameter_list|(
name|String
name|filename
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|filename
argument_list|)
decl_stmt|;
try|try
init|(
name|DataInputStream
name|in
init|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|)
init|)
block|{
name|byte
index|[]
name|content
init|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|file
operator|.
name|length
argument_list|()
index|]
decl_stmt|;
name|in
operator|.
name|readFully
argument_list|(
name|content
argument_list|)
expr_stmt|;
return|return
name|content
return|;
block|}
block|}
comment|/** For {@link TestTransferRbw} */
DECL|method|transferRbw (final ExtendedBlock b, final DFSClient dfsClient, final DatanodeInfo... datanodes)
specifier|public
specifier|static
name|BlockOpResponseProto
name|transferRbw
parameter_list|(
specifier|final
name|ExtendedBlock
name|b
parameter_list|,
specifier|final
name|DFSClient
name|dfsClient
parameter_list|,
specifier|final
name|DatanodeInfo
modifier|...
name|datanodes
parameter_list|)
throws|throws
name|IOException
block|{
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|datanodes
operator|.
name|length
argument_list|)
expr_stmt|;
specifier|final
name|long
name|writeTimeout
init|=
name|dfsClient
operator|.
name|getDatanodeWriteTimeout
argument_list|(
name|datanodes
operator|.
name|length
argument_list|)
decl_stmt|;
try|try
init|(
name|Socket
name|s
init|=
name|DataStreamer
operator|.
name|createSocketForPipeline
argument_list|(
name|datanodes
index|[
literal|0
index|]
argument_list|,
name|datanodes
operator|.
name|length
argument_list|,
name|dfsClient
argument_list|)
init|;
name|DataOutputStream
name|out
operator|=
operator|new
name|DataOutputStream
argument_list|(
operator|new
name|BufferedOutputStream
argument_list|(
name|NetUtils
operator|.
name|getOutputStream
argument_list|(
name|s
argument_list|,
name|writeTimeout
argument_list|)
argument_list|,
name|DFSUtilClient
operator|.
name|getSmallBufferSize
argument_list|(
name|dfsClient
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|)
argument_list|)
init|;
name|DataInputStream
name|in
operator|=
operator|new
name|DataInputStream
argument_list|(
name|NetUtils
operator|.
name|getInputStream
argument_list|(
name|s
argument_list|)
argument_list|)
init|)
block|{
comment|// send the request
operator|new
name|Sender
argument_list|(
name|out
argument_list|)
operator|.
name|transferBlock
argument_list|(
name|b
argument_list|,
operator|new
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
argument_list|()
argument_list|,
name|dfsClient
operator|.
name|clientName
argument_list|,
operator|new
name|DatanodeInfo
index|[]
block|{
name|datanodes
index|[
literal|1
index|]
block|}
argument_list|,
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|DEFAULT
block|}
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|BlockOpResponseProto
operator|.
name|parseDelimitedFrom
argument_list|(
name|in
argument_list|)
return|;
block|}
block|}
DECL|method|setFederatedConfiguration (MiniDFSCluster cluster, Configuration conf)
specifier|public
specifier|static
name|void
name|setFederatedConfiguration
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|nameservices
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|NameNodeInfo
name|info
range|:
name|cluster
operator|.
name|getNameNodeInfos
argument_list|()
control|)
block|{
assert|assert
name|info
operator|.
name|nameserviceId
operator|!=
literal|null
assert|;
name|nameservices
operator|.
name|add
argument_list|(
name|info
operator|.
name|nameserviceId
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSUtil
operator|.
name|addKeySuffixes
argument_list|(
name|DFS_NAMENODE_RPC_ADDRESS_KEY
argument_list|,
name|info
operator|.
name|nameserviceId
argument_list|)
argument_list|,
name|DFSUtil
operator|.
name|createUri
argument_list|(
name|HdfsConstants
operator|.
name|HDFS_URI_SCHEME
argument_list|,
name|info
operator|.
name|nameNode
operator|.
name|getNameNodeAddress
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSUtil
operator|.
name|addKeySuffixes
argument_list|(
name|DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY
argument_list|,
name|info
operator|.
name|nameserviceId
argument_list|)
argument_list|,
name|DFSUtil
operator|.
name|createUri
argument_list|(
name|HdfsConstants
operator|.
name|HDFS_URI_SCHEME
argument_list|,
name|info
operator|.
name|nameNode
operator|.
name|getNameNodeAddress
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMESERVICES
argument_list|,
name|Joiner
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|join
argument_list|(
name|nameservices
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|setFederatedHAConfiguration (MiniDFSCluster cluster, Configuration conf)
specifier|public
specifier|static
name|void
name|setFederatedHAConfiguration
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|nameservices
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|NameNodeInfo
name|info
range|:
name|cluster
operator|.
name|getNameNodeInfos
argument_list|()
control|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|info
operator|.
name|nameserviceId
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|nns
init|=
name|nameservices
operator|.
name|get
argument_list|(
name|info
operator|.
name|nameserviceId
argument_list|)
decl_stmt|;
if|if
condition|(
name|nns
operator|==
literal|null
condition|)
block|{
name|nns
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
name|nameservices
operator|.
name|put
argument_list|(
name|info
operator|.
name|nameserviceId
argument_list|,
name|nns
argument_list|)
expr_stmt|;
block|}
name|nns
operator|.
name|add
argument_list|(
name|info
operator|.
name|nnId
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSUtil
operator|.
name|addKeySuffixes
argument_list|(
name|DFS_NAMENODE_RPC_ADDRESS_KEY
argument_list|,
name|info
operator|.
name|nameserviceId
argument_list|,
name|info
operator|.
name|nnId
argument_list|)
argument_list|,
name|DFSUtil
operator|.
name|createUri
argument_list|(
name|HdfsConstants
operator|.
name|HDFS_URI_SCHEME
argument_list|,
name|info
operator|.
name|nameNode
operator|.
name|getNameNodeAddress
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSUtil
operator|.
name|addKeySuffixes
argument_list|(
name|DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY
argument_list|,
name|info
operator|.
name|nameserviceId
argument_list|,
name|info
operator|.
name|nnId
argument_list|)
argument_list|,
name|DFSUtil
operator|.
name|createUri
argument_list|(
name|HdfsConstants
operator|.
name|HDFS_URI_SCHEME
argument_list|,
name|info
operator|.
name|nameNode
operator|.
name|getNameNodeAddress
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|nameservices
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|DFSUtil
operator|.
name|addKeySuffixes
argument_list|(
name|DFS_HA_NAMENODES_KEY_PREFIX
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|Joiner
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|join
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|Failover
operator|.
name|PROXY_PROVIDER_KEY_PREFIX
operator|+
literal|"."
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|ConfiguredFailoverProxyProvider
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMESERVICES
argument_list|,
name|Joiner
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|join
argument_list|(
name|nameservices
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getDatanodeID (String ipAddr)
specifier|private
specifier|static
name|DatanodeID
name|getDatanodeID
parameter_list|(
name|String
name|ipAddr
parameter_list|)
block|{
return|return
operator|new
name|DatanodeID
argument_list|(
name|ipAddr
argument_list|,
literal|"localhost"
argument_list|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DEFAULT_PORT
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_HTTP_DEFAULT_PORT
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_HTTPS_DEFAULT_PORT
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_IPC_DEFAULT_PORT
argument_list|)
return|;
block|}
DECL|method|getLocalDatanodeID ()
specifier|public
specifier|static
name|DatanodeID
name|getLocalDatanodeID
parameter_list|()
block|{
return|return
name|getDatanodeID
argument_list|(
literal|"127.0.0.1"
argument_list|)
return|;
block|}
DECL|method|getLocalDatanodeID (int port)
specifier|public
specifier|static
name|DatanodeID
name|getLocalDatanodeID
parameter_list|(
name|int
name|port
parameter_list|)
block|{
return|return
operator|new
name|DatanodeID
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|"localhost"
argument_list|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|port
argument_list|,
name|port
argument_list|,
name|port
argument_list|,
name|port
argument_list|)
return|;
block|}
DECL|method|getLocalDatanodeDescriptor ()
specifier|public
specifier|static
name|DatanodeDescriptor
name|getLocalDatanodeDescriptor
parameter_list|()
block|{
return|return
operator|new
name|DatanodeDescriptor
argument_list|(
name|getLocalDatanodeID
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getLocalDatanodeInfo ()
specifier|public
specifier|static
name|DatanodeInfo
name|getLocalDatanodeInfo
parameter_list|()
block|{
return|return
operator|new
name|DatanodeInfoBuilder
argument_list|()
operator|.
name|setNodeID
argument_list|(
name|getLocalDatanodeID
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|getDatanodeInfo (String ipAddr)
specifier|public
specifier|static
name|DatanodeInfo
name|getDatanodeInfo
parameter_list|(
name|String
name|ipAddr
parameter_list|)
block|{
return|return
operator|new
name|DatanodeInfoBuilder
argument_list|()
operator|.
name|setNodeID
argument_list|(
name|getDatanodeID
argument_list|(
name|ipAddr
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|getLocalDatanodeInfo (int port)
specifier|public
specifier|static
name|DatanodeInfo
name|getLocalDatanodeInfo
parameter_list|(
name|int
name|port
parameter_list|)
block|{
return|return
operator|new
name|DatanodeInfoBuilder
argument_list|()
operator|.
name|setNodeID
argument_list|(
name|getLocalDatanodeID
argument_list|(
name|port
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|getDatanodeInfo (String ipAddr, String host, int port)
specifier|public
specifier|static
name|DatanodeInfo
name|getDatanodeInfo
parameter_list|(
name|String
name|ipAddr
parameter_list|,
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|)
block|{
return|return
operator|new
name|DatanodeInfoBuilder
argument_list|()
operator|.
name|setNodeID
argument_list|(
operator|new
name|DatanodeID
argument_list|(
name|ipAddr
argument_list|,
name|host
argument_list|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|port
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_HTTP_DEFAULT_PORT
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_HTTPS_DEFAULT_PORT
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_IPC_DEFAULT_PORT
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|getLocalDatanodeInfo (String ipAddr, String hostname, AdminStates adminState)
specifier|public
specifier|static
name|DatanodeInfo
name|getLocalDatanodeInfo
parameter_list|(
name|String
name|ipAddr
parameter_list|,
name|String
name|hostname
parameter_list|,
name|AdminStates
name|adminState
parameter_list|)
block|{
return|return
operator|new
name|DatanodeInfoBuilder
argument_list|()
operator|.
name|setIpAddr
argument_list|(
name|ipAddr
argument_list|)
operator|.
name|setHostName
argument_list|(
name|hostname
argument_list|)
operator|.
name|setDatanodeUuid
argument_list|(
literal|""
argument_list|)
operator|.
name|setXferPort
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DEFAULT_PORT
argument_list|)
operator|.
name|setInfoPort
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_HTTP_DEFAULT_PORT
argument_list|)
operator|.
name|setInfoSecurePort
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_HTTPS_DEFAULT_PORT
argument_list|)
operator|.
name|setIpcPort
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_IPC_DEFAULT_PORT
argument_list|)
operator|.
name|setCapacity
argument_list|(
literal|1L
argument_list|)
operator|.
name|setDfsUsed
argument_list|(
literal|2L
argument_list|)
operator|.
name|setRemaining
argument_list|(
literal|3L
argument_list|)
operator|.
name|setBlockPoolUsed
argument_list|(
literal|4L
argument_list|)
operator|.
name|setCacheCapacity
argument_list|(
literal|0L
argument_list|)
operator|.
name|setCacheUsed
argument_list|(
literal|0L
argument_list|)
operator|.
name|setLastUpdate
argument_list|(
literal|0L
argument_list|)
operator|.
name|setLastUpdateMonotonic
argument_list|(
literal|5
argument_list|)
operator|.
name|setXceiverCount
argument_list|(
literal|6
argument_list|)
operator|.
name|setNetworkLocation
argument_list|(
literal|"local"
argument_list|)
operator|.
name|setAdminState
argument_list|(
name|adminState
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|getDatanodeDescriptor (String ipAddr, String rackLocation)
specifier|public
specifier|static
name|DatanodeDescriptor
name|getDatanodeDescriptor
parameter_list|(
name|String
name|ipAddr
parameter_list|,
name|String
name|rackLocation
parameter_list|)
block|{
return|return
name|getDatanodeDescriptor
argument_list|(
name|ipAddr
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DEFAULT_PORT
argument_list|,
name|rackLocation
argument_list|)
return|;
block|}
DECL|method|getDatanodeDescriptor (String ipAddr, String rackLocation, String hostname)
specifier|public
specifier|static
name|DatanodeDescriptor
name|getDatanodeDescriptor
parameter_list|(
name|String
name|ipAddr
parameter_list|,
name|String
name|rackLocation
parameter_list|,
name|String
name|hostname
parameter_list|)
block|{
return|return
name|getDatanodeDescriptor
argument_list|(
name|ipAddr
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DEFAULT_PORT
argument_list|,
name|rackLocation
argument_list|,
name|hostname
argument_list|)
return|;
block|}
DECL|method|createDatanodeStorageInfo ( String storageID, String ip)
specifier|public
specifier|static
name|DatanodeStorageInfo
name|createDatanodeStorageInfo
parameter_list|(
name|String
name|storageID
parameter_list|,
name|String
name|ip
parameter_list|)
block|{
return|return
name|createDatanodeStorageInfo
argument_list|(
name|storageID
argument_list|,
name|ip
argument_list|,
literal|"defaultRack"
argument_list|,
literal|"host"
argument_list|)
return|;
block|}
DECL|method|createDatanodeStorageInfos (String[] racks)
specifier|public
specifier|static
name|DatanodeStorageInfo
index|[]
name|createDatanodeStorageInfos
parameter_list|(
name|String
index|[]
name|racks
parameter_list|)
block|{
return|return
name|createDatanodeStorageInfos
argument_list|(
name|racks
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|createDatanodeStorageInfos (String[] racks, String[] hostnames)
specifier|public
specifier|static
name|DatanodeStorageInfo
index|[]
name|createDatanodeStorageInfos
parameter_list|(
name|String
index|[]
name|racks
parameter_list|,
name|String
index|[]
name|hostnames
parameter_list|)
block|{
return|return
name|createDatanodeStorageInfos
argument_list|(
name|racks
operator|.
name|length
argument_list|,
name|racks
argument_list|,
name|hostnames
argument_list|)
return|;
block|}
DECL|method|createDatanodeStorageInfos (int n)
specifier|public
specifier|static
name|DatanodeStorageInfo
index|[]
name|createDatanodeStorageInfos
parameter_list|(
name|int
name|n
parameter_list|)
block|{
return|return
name|createDatanodeStorageInfos
argument_list|(
name|n
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|createDatanodeStorageInfos ( int n, String[] racks, String[] hostnames)
specifier|public
specifier|static
name|DatanodeStorageInfo
index|[]
name|createDatanodeStorageInfos
parameter_list|(
name|int
name|n
parameter_list|,
name|String
index|[]
name|racks
parameter_list|,
name|String
index|[]
name|hostnames
parameter_list|)
block|{
return|return
name|createDatanodeStorageInfos
argument_list|(
name|n
argument_list|,
name|racks
argument_list|,
name|hostnames
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|createDatanodeStorageInfos ( int n, String[] racks, String[] hostnames, StorageType[] types)
specifier|public
specifier|static
name|DatanodeStorageInfo
index|[]
name|createDatanodeStorageInfos
parameter_list|(
name|int
name|n
parameter_list|,
name|String
index|[]
name|racks
parameter_list|,
name|String
index|[]
name|hostnames
parameter_list|,
name|StorageType
index|[]
name|types
parameter_list|)
block|{
name|DatanodeStorageInfo
index|[]
name|storages
init|=
operator|new
name|DatanodeStorageInfo
index|[
name|n
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|storages
operator|.
name|length
init|;
name|i
operator|>
literal|0
condition|;
control|)
block|{
specifier|final
name|String
name|storageID
init|=
literal|"s"
operator|+
name|i
decl_stmt|;
specifier|final
name|String
name|ip
init|=
name|i
operator|+
literal|"."
operator|+
name|i
operator|+
literal|"."
operator|+
name|i
operator|+
literal|"."
operator|+
name|i
decl_stmt|;
name|i
operator|--
expr_stmt|;
specifier|final
name|String
name|rack
init|=
operator|(
name|racks
operator|!=
literal|null
operator|&&
name|i
operator|<
name|racks
operator|.
name|length
operator|)
condition|?
name|racks
index|[
name|i
index|]
else|:
literal|"defaultRack"
decl_stmt|;
specifier|final
name|String
name|hostname
init|=
operator|(
name|hostnames
operator|!=
literal|null
operator|&&
name|i
operator|<
name|hostnames
operator|.
name|length
operator|)
condition|?
name|hostnames
index|[
name|i
index|]
else|:
literal|"host"
decl_stmt|;
specifier|final
name|StorageType
name|type
init|=
operator|(
name|types
operator|!=
literal|null
operator|&&
name|i
operator|<
name|types
operator|.
name|length
operator|)
condition|?
name|types
index|[
name|i
index|]
else|:
name|StorageType
operator|.
name|DEFAULT
decl_stmt|;
name|storages
index|[
name|i
index|]
operator|=
name|createDatanodeStorageInfo
argument_list|(
name|storageID
argument_list|,
name|ip
argument_list|,
name|rack
argument_list|,
name|hostname
argument_list|,
name|type
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|storages
return|;
block|}
DECL|method|createDatanodeStorageInfo ( String storageID, String ip, String rack, String hostname)
specifier|public
specifier|static
name|DatanodeStorageInfo
name|createDatanodeStorageInfo
parameter_list|(
name|String
name|storageID
parameter_list|,
name|String
name|ip
parameter_list|,
name|String
name|rack
parameter_list|,
name|String
name|hostname
parameter_list|)
block|{
return|return
name|createDatanodeStorageInfo
argument_list|(
name|storageID
argument_list|,
name|ip
argument_list|,
name|rack
argument_list|,
name|hostname
argument_list|,
name|StorageType
operator|.
name|DEFAULT
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|createDatanodeStorageInfo ( String storageID, String ip, String rack, String hostname, StorageType type, String upgradeDomain)
specifier|public
specifier|static
name|DatanodeStorageInfo
name|createDatanodeStorageInfo
parameter_list|(
name|String
name|storageID
parameter_list|,
name|String
name|ip
parameter_list|,
name|String
name|rack
parameter_list|,
name|String
name|hostname
parameter_list|,
name|StorageType
name|type
parameter_list|,
name|String
name|upgradeDomain
parameter_list|)
block|{
specifier|final
name|DatanodeStorage
name|storage
init|=
operator|new
name|DatanodeStorage
argument_list|(
name|storageID
argument_list|,
name|DatanodeStorage
operator|.
name|State
operator|.
name|NORMAL
argument_list|,
name|type
argument_list|)
decl_stmt|;
specifier|final
name|DatanodeDescriptor
name|dn
init|=
name|BlockManagerTestUtil
operator|.
name|getDatanodeDescriptor
argument_list|(
name|ip
argument_list|,
name|rack
argument_list|,
name|storage
argument_list|,
name|hostname
argument_list|)
decl_stmt|;
if|if
condition|(
name|upgradeDomain
operator|!=
literal|null
condition|)
block|{
name|dn
operator|.
name|setUpgradeDomain
argument_list|(
name|upgradeDomain
argument_list|)
expr_stmt|;
block|}
return|return
name|BlockManagerTestUtil
operator|.
name|newDatanodeStorageInfo
argument_list|(
name|dn
argument_list|,
name|storage
argument_list|)
return|;
block|}
DECL|method|toDatanodeDescriptor ( DatanodeStorageInfo[] storages)
specifier|public
specifier|static
name|DatanodeDescriptor
index|[]
name|toDatanodeDescriptor
parameter_list|(
name|DatanodeStorageInfo
index|[]
name|storages
parameter_list|)
block|{
name|DatanodeDescriptor
index|[]
name|datanodes
init|=
operator|new
name|DatanodeDescriptor
index|[
name|storages
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|datanodes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|datanodes
index|[
name|i
index|]
operator|=
name|storages
index|[
name|i
index|]
operator|.
name|getDatanodeDescriptor
argument_list|()
expr_stmt|;
block|}
return|return
name|datanodes
return|;
block|}
DECL|method|getDatanodeDescriptor (String ipAddr, int port, String rackLocation, String hostname)
specifier|public
specifier|static
name|DatanodeDescriptor
name|getDatanodeDescriptor
parameter_list|(
name|String
name|ipAddr
parameter_list|,
name|int
name|port
parameter_list|,
name|String
name|rackLocation
parameter_list|,
name|String
name|hostname
parameter_list|)
block|{
name|DatanodeID
name|dnId
init|=
operator|new
name|DatanodeID
argument_list|(
name|ipAddr
argument_list|,
name|hostname
argument_list|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|port
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_HTTP_DEFAULT_PORT
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_HTTPS_DEFAULT_PORT
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_IPC_DEFAULT_PORT
argument_list|)
decl_stmt|;
return|return
operator|new
name|DatanodeDescriptor
argument_list|(
name|dnId
argument_list|,
name|rackLocation
argument_list|)
return|;
block|}
DECL|method|getDatanodeDescriptor (String ipAddr, int port, String rackLocation)
specifier|public
specifier|static
name|DatanodeDescriptor
name|getDatanodeDescriptor
parameter_list|(
name|String
name|ipAddr
parameter_list|,
name|int
name|port
parameter_list|,
name|String
name|rackLocation
parameter_list|)
block|{
return|return
name|getDatanodeDescriptor
argument_list|(
name|ipAddr
argument_list|,
name|port
argument_list|,
name|rackLocation
argument_list|,
literal|"host"
argument_list|)
return|;
block|}
DECL|method|getLocalDatanodeRegistration ()
specifier|public
specifier|static
name|DatanodeRegistration
name|getLocalDatanodeRegistration
parameter_list|()
block|{
return|return
operator|new
name|DatanodeRegistration
argument_list|(
name|getLocalDatanodeID
argument_list|()
argument_list|,
operator|new
name|StorageInfo
argument_list|(
name|NodeType
operator|.
name|DATA_NODE
argument_list|)
argument_list|,
operator|new
name|ExportedBlockKeys
argument_list|()
argument_list|,
name|VersionInfo
operator|.
name|getVersion
argument_list|()
argument_list|)
return|;
block|}
comment|/** Copy one file's contents into the other **/
DECL|method|copyFile (File src, File dest)
specifier|public
specifier|static
name|void
name|copyFile
parameter_list|(
name|File
name|src
parameter_list|,
name|File
name|dest
parameter_list|)
throws|throws
name|IOException
block|{
name|FileUtils
operator|.
name|copyFile
argument_list|(
name|src
argument_list|,
name|dest
argument_list|)
expr_stmt|;
block|}
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
block|{
DECL|field|maxLevels
specifier|private
name|int
name|maxLevels
init|=
literal|3
decl_stmt|;
DECL|field|maxSize
specifier|private
name|int
name|maxSize
init|=
literal|8
operator|*
literal|1024
decl_stmt|;
DECL|field|minSize
specifier|private
name|int
name|minSize
init|=
literal|1
decl_stmt|;
DECL|field|nFiles
specifier|private
name|int
name|nFiles
init|=
literal|1
decl_stmt|;
DECL|method|Builder ()
specifier|public
name|Builder
parameter_list|()
block|{     }
DECL|method|setName (String string)
specifier|public
name|Builder
name|setName
parameter_list|(
name|String
name|string
parameter_list|)
block|{
return|return
name|this
return|;
block|}
DECL|method|setNumFiles (int nFiles)
specifier|public
name|Builder
name|setNumFiles
parameter_list|(
name|int
name|nFiles
parameter_list|)
block|{
name|this
operator|.
name|nFiles
operator|=
name|nFiles
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setMaxLevels (int maxLevels)
specifier|public
name|Builder
name|setMaxLevels
parameter_list|(
name|int
name|maxLevels
parameter_list|)
block|{
name|this
operator|.
name|maxLevels
operator|=
name|maxLevels
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setMaxSize (int maxSize)
specifier|public
name|Builder
name|setMaxSize
parameter_list|(
name|int
name|maxSize
parameter_list|)
block|{
name|this
operator|.
name|maxSize
operator|=
name|maxSize
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setMinSize (int minSize)
specifier|public
name|Builder
name|setMinSize
parameter_list|(
name|int
name|minSize
parameter_list|)
block|{
name|this
operator|.
name|minSize
operator|=
name|minSize
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|build ()
specifier|public
name|DFSTestUtil
name|build
parameter_list|()
block|{
return|return
operator|new
name|DFSTestUtil
argument_list|(
name|nFiles
argument_list|,
name|maxLevels
argument_list|,
name|maxSize
argument_list|,
name|minSize
argument_list|)
return|;
block|}
block|}
comment|/**    * Run a set of operations and generate all edit logs    */
DECL|method|runOperations (MiniDFSCluster cluster, DistributedFileSystem filesystem, Configuration conf, long blockSize, int nnIndex)
specifier|public
specifier|static
name|void
name|runOperations
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|,
name|DistributedFileSystem
name|filesystem
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|int
name|nnIndex
parameter_list|)
throws|throws
name|IOException
block|{
comment|// create FileContext for rename2
name|FileContext
name|fc
init|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|cluster
operator|.
name|getURI
argument_list|(
literal|0
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// OP_ADD 0
specifier|final
name|Path
name|pathFileCreate
init|=
operator|new
name|Path
argument_list|(
literal|"/file_create"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|s
init|=
name|filesystem
operator|.
name|create
argument_list|(
name|pathFileCreate
argument_list|)
decl_stmt|;
comment|// OP_CLOSE 9
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// OP_APPEND 47
name|FSDataOutputStream
name|s2
init|=
name|filesystem
operator|.
name|append
argument_list|(
name|pathFileCreate
argument_list|,
literal|4096
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|s2
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// OP_UPDATE_BLOCKS 25
specifier|final
name|String
name|updateBlockFile
init|=
literal|"/update_blocks"
decl_stmt|;
name|FSDataOutputStream
name|fout
init|=
name|filesystem
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|updateBlockFile
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|4096
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|4096L
argument_list|)
decl_stmt|;
name|fout
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|fout
operator|.
name|hflush
argument_list|()
expr_stmt|;
name|long
name|fileId
init|=
operator|(
operator|(
name|DFSOutputStream
operator|)
name|fout
operator|.
name|getWrappedStream
argument_list|()
operator|)
operator|.
name|getFileId
argument_list|()
decl_stmt|;
name|DFSClient
name|dfsclient
init|=
name|DFSClientAdapter
operator|.
name|getDFSClient
argument_list|(
name|filesystem
argument_list|)
decl_stmt|;
name|LocatedBlocks
name|blocks
init|=
name|dfsclient
operator|.
name|getNamenode
argument_list|()
operator|.
name|getBlockLocations
argument_list|(
name|updateBlockFile
argument_list|,
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|dfsclient
operator|.
name|getNamenode
argument_list|()
operator|.
name|abandonBlock
argument_list|(
name|blocks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBlock
argument_list|()
argument_list|,
name|fileId
argument_list|,
name|updateBlockFile
argument_list|,
name|dfsclient
operator|.
name|clientName
argument_list|)
expr_stmt|;
name|fout
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// OP_SET_STORAGE_POLICY 45
name|filesystem
operator|.
name|setStoragePolicy
argument_list|(
name|pathFileCreate
argument_list|,
name|HdfsConstants
operator|.
name|HOT_STORAGE_POLICY_NAME
argument_list|)
expr_stmt|;
comment|// OP_RENAME_OLD 1
specifier|final
name|Path
name|pathFileMoved
init|=
operator|new
name|Path
argument_list|(
literal|"/file_moved"
argument_list|)
decl_stmt|;
name|filesystem
operator|.
name|rename
argument_list|(
name|pathFileCreate
argument_list|,
name|pathFileMoved
argument_list|)
expr_stmt|;
comment|// OP_DELETE 2
name|filesystem
operator|.
name|delete
argument_list|(
name|pathFileMoved
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// OP_MKDIR 3
name|Path
name|pathDirectoryMkdir
init|=
operator|new
name|Path
argument_list|(
literal|"/directory_mkdir"
argument_list|)
decl_stmt|;
name|filesystem
operator|.
name|mkdirs
argument_list|(
name|pathDirectoryMkdir
argument_list|)
expr_stmt|;
comment|// OP_ALLOW_SNAPSHOT 29
name|filesystem
operator|.
name|allowSnapshot
argument_list|(
name|pathDirectoryMkdir
argument_list|)
expr_stmt|;
comment|// OP_DISALLOW_SNAPSHOT 30
name|filesystem
operator|.
name|disallowSnapshot
argument_list|(
name|pathDirectoryMkdir
argument_list|)
expr_stmt|;
comment|// OP_CREATE_SNAPSHOT 26
name|String
name|ssName
init|=
literal|"snapshot1"
decl_stmt|;
name|filesystem
operator|.
name|allowSnapshot
argument_list|(
name|pathDirectoryMkdir
argument_list|)
expr_stmt|;
name|filesystem
operator|.
name|createSnapshot
argument_list|(
name|pathDirectoryMkdir
argument_list|,
name|ssName
argument_list|)
expr_stmt|;
comment|// OP_RENAME_SNAPSHOT 28
name|String
name|ssNewName
init|=
literal|"snapshot2"
decl_stmt|;
name|filesystem
operator|.
name|renameSnapshot
argument_list|(
name|pathDirectoryMkdir
argument_list|,
name|ssName
argument_list|,
name|ssNewName
argument_list|)
expr_stmt|;
comment|// OP_DELETE_SNAPSHOT 27
name|filesystem
operator|.
name|deleteSnapshot
argument_list|(
name|pathDirectoryMkdir
argument_list|,
name|ssNewName
argument_list|)
expr_stmt|;
comment|// OP_SET_REPLICATION 4
name|s
operator|=
name|filesystem
operator|.
name|create
argument_list|(
name|pathFileCreate
argument_list|)
expr_stmt|;
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
name|filesystem
operator|.
name|setReplication
argument_list|(
name|pathFileCreate
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
comment|// OP_SET_PERMISSIONS 7
name|Short
name|permission
init|=
literal|0777
decl_stmt|;
name|filesystem
operator|.
name|setPermission
argument_list|(
name|pathFileCreate
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|permission
argument_list|)
argument_list|)
expr_stmt|;
comment|// OP_SET_OWNER 8
name|filesystem
operator|.
name|setOwner
argument_list|(
name|pathFileCreate
argument_list|,
operator|new
name|String
argument_list|(
literal|"newOwner"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// OP_CLOSE 9 see above
comment|// OP_SET_GENSTAMP 10 see above
comment|// OP_SET_NS_QUOTA 11 obsolete
comment|// OP_CLEAR_NS_QUOTA 12 obsolete
comment|// OP_TIMES 13
name|long
name|mtime
init|=
literal|1285195527000L
decl_stmt|;
comment|// Wed, 22 Sep 2010 22:45:27 GMT
name|long
name|atime
init|=
name|mtime
decl_stmt|;
name|filesystem
operator|.
name|setTimes
argument_list|(
name|pathFileCreate
argument_list|,
name|mtime
argument_list|,
name|atime
argument_list|)
expr_stmt|;
comment|// OP_SET_QUOTA 14
name|filesystem
operator|.
name|setQuota
argument_list|(
name|pathDirectoryMkdir
argument_list|,
literal|1000L
argument_list|,
name|HdfsConstants
operator|.
name|QUOTA_DONT_SET
argument_list|)
expr_stmt|;
comment|// OP_SET_QUOTA_BY_STORAGETYPE
name|filesystem
operator|.
name|setQuotaByStorageType
argument_list|(
name|pathDirectoryMkdir
argument_list|,
name|StorageType
operator|.
name|SSD
argument_list|,
literal|888L
argument_list|)
expr_stmt|;
comment|// OP_RENAME 15
name|fc
operator|.
name|rename
argument_list|(
name|pathFileCreate
argument_list|,
name|pathFileMoved
argument_list|,
name|Rename
operator|.
name|NONE
argument_list|)
expr_stmt|;
comment|// OP_CONCAT_DELETE 16
name|Path
name|pathConcatTarget
init|=
operator|new
name|Path
argument_list|(
literal|"/file_concat_target"
argument_list|)
decl_stmt|;
name|Path
index|[]
name|pathConcatFiles
init|=
operator|new
name|Path
index|[
literal|2
index|]
decl_stmt|;
name|pathConcatFiles
index|[
literal|0
index|]
operator|=
operator|new
name|Path
argument_list|(
literal|"/file_concat_0"
argument_list|)
expr_stmt|;
name|pathConcatFiles
index|[
literal|1
index|]
operator|=
operator|new
name|Path
argument_list|(
literal|"/file_concat_1"
argument_list|)
expr_stmt|;
name|long
name|length
init|=
name|blockSize
operator|*
literal|3
decl_stmt|;
comment|// multiple of blocksize for concat
name|short
name|replication
init|=
literal|1
decl_stmt|;
name|long
name|seed
init|=
literal|1
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|filesystem
argument_list|,
name|pathConcatTarget
argument_list|,
name|length
argument_list|,
name|replication
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|filesystem
argument_list|,
name|pathConcatFiles
index|[
literal|0
index|]
argument_list|,
name|length
argument_list|,
name|replication
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|filesystem
argument_list|,
name|pathConcatFiles
index|[
literal|1
index|]
argument_list|,
name|length
argument_list|,
name|replication
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|filesystem
operator|.
name|concat
argument_list|(
name|pathConcatTarget
argument_list|,
name|pathConcatFiles
argument_list|)
expr_stmt|;
comment|// OP_TRUNCATE 46
name|length
operator|=
name|blockSize
operator|*
literal|2
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|filesystem
argument_list|,
name|pathFileCreate
argument_list|,
name|length
argument_list|,
name|replication
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|filesystem
operator|.
name|truncate
argument_list|(
name|pathFileCreate
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
comment|// OP_SYMLINK 17
name|Path
name|pathSymlink
init|=
operator|new
name|Path
argument_list|(
literal|"/file_symlink"
argument_list|)
decl_stmt|;
name|fc
operator|.
name|createSymlink
argument_list|(
name|pathConcatTarget
argument_list|,
name|pathSymlink
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// OP_REASSIGN_LEASE 22
name|String
name|filePath
init|=
literal|"/hard-lease-recovery-test"
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
literal|"foo-bar-baz"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|DFSClientAdapter
operator|.
name|stopLeaseRenewer
argument_list|(
name|filesystem
argument_list|)
expr_stmt|;
name|FSDataOutputStream
name|leaseRecoveryPath
init|=
name|filesystem
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|filePath
argument_list|)
argument_list|)
decl_stmt|;
name|leaseRecoveryPath
operator|.
name|write
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|leaseRecoveryPath
operator|.
name|hflush
argument_list|()
expr_stmt|;
comment|// Set the hard lease timeout to 1 second.
name|cluster
operator|.
name|setLeasePeriod
argument_list|(
literal|60
operator|*
literal|1000
argument_list|,
literal|1000
argument_list|,
name|nnIndex
argument_list|)
expr_stmt|;
comment|// wait for lease recovery to complete
name|LocatedBlocks
name|locatedBlocks
decl_stmt|;
do|do
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{}
name|locatedBlocks
operator|=
name|DFSClientAdapter
operator|.
name|callGetBlockLocations
argument_list|(
name|cluster
operator|.
name|getNameNodeRpc
argument_list|(
name|nnIndex
argument_list|)
argument_list|,
name|filePath
argument_list|,
literal|0L
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|locatedBlocks
operator|.
name|isUnderConstruction
argument_list|()
condition|)
do|;
comment|// OP_ADD_CACHE_POOL
name|filesystem
operator|.
name|addCachePool
argument_list|(
operator|new
name|CachePoolInfo
argument_list|(
literal|"pool1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// OP_MODIFY_CACHE_POOL
name|filesystem
operator|.
name|modifyCachePool
argument_list|(
operator|new
name|CachePoolInfo
argument_list|(
literal|"pool1"
argument_list|)
operator|.
name|setLimit
argument_list|(
literal|99l
argument_list|)
argument_list|)
expr_stmt|;
comment|// OP_ADD_PATH_BASED_CACHE_DIRECTIVE
name|long
name|id
init|=
name|filesystem
operator|.
name|addCacheDirective
argument_list|(
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setPath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/path"
argument_list|)
argument_list|)
operator|.
name|setReplication
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
operator|.
name|setPool
argument_list|(
literal|"pool1"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CacheFlag
operator|.
name|FORCE
argument_list|)
argument_list|)
decl_stmt|;
comment|// OP_MODIFY_PATH_BASED_CACHE_DIRECTIVE
name|filesystem
operator|.
name|modifyCacheDirective
argument_list|(
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setId
argument_list|(
name|id
argument_list|)
operator|.
name|setReplication
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CacheFlag
operator|.
name|FORCE
argument_list|)
argument_list|)
expr_stmt|;
comment|// OP_REMOVE_PATH_BASED_CACHE_DIRECTIVE
name|filesystem
operator|.
name|removeCacheDirective
argument_list|(
name|id
argument_list|)
expr_stmt|;
comment|// OP_REMOVE_CACHE_POOL
name|filesystem
operator|.
name|removeCachePool
argument_list|(
literal|"pool1"
argument_list|)
expr_stmt|;
comment|// OP_SET_ACL
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclEntryList
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|aclEntryList
operator|.
name|add
argument_list|(
operator|new
name|AclEntry
operator|.
name|Builder
argument_list|()
operator|.
name|setPermission
argument_list|(
name|FsAction
operator|.
name|READ_WRITE
argument_list|)
operator|.
name|setScope
argument_list|(
name|AclEntryScope
operator|.
name|ACCESS
argument_list|)
operator|.
name|setType
argument_list|(
name|AclEntryType
operator|.
name|USER
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|aclEntryList
operator|.
name|add
argument_list|(
operator|new
name|AclEntry
operator|.
name|Builder
argument_list|()
operator|.
name|setName
argument_list|(
literal|"user"
argument_list|)
operator|.
name|setPermission
argument_list|(
name|FsAction
operator|.
name|READ_WRITE
argument_list|)
operator|.
name|setScope
argument_list|(
name|AclEntryScope
operator|.
name|ACCESS
argument_list|)
operator|.
name|setType
argument_list|(
name|AclEntryType
operator|.
name|USER
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|aclEntryList
operator|.
name|add
argument_list|(
operator|new
name|AclEntry
operator|.
name|Builder
argument_list|()
operator|.
name|setPermission
argument_list|(
name|FsAction
operator|.
name|WRITE
argument_list|)
operator|.
name|setScope
argument_list|(
name|AclEntryScope
operator|.
name|ACCESS
argument_list|)
operator|.
name|setType
argument_list|(
name|AclEntryType
operator|.
name|GROUP
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|aclEntryList
operator|.
name|add
argument_list|(
operator|new
name|AclEntry
operator|.
name|Builder
argument_list|()
operator|.
name|setPermission
argument_list|(
name|FsAction
operator|.
name|NONE
argument_list|)
operator|.
name|setScope
argument_list|(
name|AclEntryScope
operator|.
name|ACCESS
argument_list|)
operator|.
name|setType
argument_list|(
name|AclEntryType
operator|.
name|OTHER
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|filesystem
operator|.
name|setAcl
argument_list|(
name|pathConcatTarget
argument_list|,
name|aclEntryList
argument_list|)
expr_stmt|;
comment|// OP_SET_XATTR
name|filesystem
operator|.
name|setXAttr
argument_list|(
name|pathConcatTarget
argument_list|,
literal|"user.a1"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0x31
block|,
literal|0x32
block|,
literal|0x33
block|}
argument_list|)
expr_stmt|;
name|filesystem
operator|.
name|setXAttr
argument_list|(
name|pathConcatTarget
argument_list|,
literal|"user.a2"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0x37
block|,
literal|0x38
block|,
literal|0x39
block|}
argument_list|)
expr_stmt|;
comment|// OP_REMOVE_XATTR
name|filesystem
operator|.
name|removeXAttr
argument_list|(
name|pathConcatTarget
argument_list|,
literal|"user.a2"
argument_list|)
expr_stmt|;
comment|// OP_ADD_ERASURE_CODING_POLICY
name|ErasureCodingPolicy
name|newPolicy1
init|=
operator|new
name|ErasureCodingPolicy
argument_list|(
name|ErasureCodeConstants
operator|.
name|RS_3_2_SCHEMA
argument_list|,
literal|8
operator|*
literal|1024
argument_list|)
decl_stmt|;
name|ErasureCodingPolicy
index|[]
name|policyArray
init|=
operator|new
name|ErasureCodingPolicy
index|[]
block|{
name|newPolicy1
block|}
decl_stmt|;
name|AddErasureCodingPolicyResponse
index|[]
name|responses
init|=
name|filesystem
operator|.
name|addErasureCodingPolicies
argument_list|(
name|policyArray
argument_list|)
decl_stmt|;
name|newPolicy1
operator|=
name|responses
index|[
literal|0
index|]
operator|.
name|getPolicy
argument_list|()
expr_stmt|;
comment|// OP_ADD_ERASURE_CODING_POLICY - policy with extra options
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|extraOptions
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|extraOptions
operator|.
name|put
argument_list|(
literal|"dummyKey"
argument_list|,
literal|"dummyValue"
argument_list|)
expr_stmt|;
name|ECSchema
name|schema
init|=
operator|new
name|ECSchema
argument_list|(
name|ErasureCodeConstants
operator|.
name|RS_CODEC_NAME
argument_list|,
literal|6
argument_list|,
literal|10
argument_list|,
name|extraOptions
argument_list|)
decl_stmt|;
name|ErasureCodingPolicy
name|newPolicy2
init|=
operator|new
name|ErasureCodingPolicy
argument_list|(
name|schema
argument_list|,
literal|4
operator|*
literal|1024
argument_list|)
decl_stmt|;
name|policyArray
operator|=
operator|new
name|ErasureCodingPolicy
index|[]
block|{
name|newPolicy2
block|}
expr_stmt|;
name|responses
operator|=
name|filesystem
operator|.
name|addErasureCodingPolicies
argument_list|(
name|policyArray
argument_list|)
expr_stmt|;
name|newPolicy2
operator|=
name|responses
index|[
literal|0
index|]
operator|.
name|getPolicy
argument_list|()
expr_stmt|;
comment|// OP_ENABLE_ERASURE_CODING_POLICY
name|filesystem
operator|.
name|enableErasureCodingPolicy
argument_list|(
name|newPolicy1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|filesystem
operator|.
name|enableErasureCodingPolicy
argument_list|(
name|newPolicy2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// OP_DISABLE_ERASURE_CODING_POLICY
name|filesystem
operator|.
name|disableErasureCodingPolicy
argument_list|(
name|newPolicy1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|filesystem
operator|.
name|disableErasureCodingPolicy
argument_list|(
name|newPolicy2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// OP_REMOVE_ERASURE_CODING_POLICY
name|filesystem
operator|.
name|removeErasureCodingPolicy
argument_list|(
name|newPolicy1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|filesystem
operator|.
name|removeErasureCodingPolicy
argument_list|(
name|newPolicy2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// OP_ADD on erasure coding directory
name|Path
name|ecDir
init|=
operator|new
name|Path
argument_list|(
literal|"/ec"
argument_list|)
decl_stmt|;
name|filesystem
operator|.
name|mkdirs
argument_list|(
name|ecDir
argument_list|)
expr_stmt|;
specifier|final
name|ErasureCodingPolicy
name|defaultEcPolicy
init|=
name|SystemErasureCodingPolicies
operator|.
name|getByID
argument_list|(
name|SystemErasureCodingPolicies
operator|.
name|RS_6_3_POLICY_ID
argument_list|)
decl_stmt|;
specifier|final
name|ErasureCodingPolicy
name|ecPolicyRS32
init|=
name|SystemErasureCodingPolicies
operator|.
name|getByID
argument_list|(
name|SystemErasureCodingPolicies
operator|.
name|RS_3_2_POLICY_ID
argument_list|)
decl_stmt|;
name|filesystem
operator|.
name|enableErasureCodingPolicy
argument_list|(
name|ecPolicyRS32
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|filesystem
operator|.
name|enableErasureCodingPolicy
argument_list|(
name|defaultEcPolicy
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|filesystem
operator|.
name|setErasureCodingPolicy
argument_list|(
name|ecDir
argument_list|,
name|defaultEcPolicy
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|FSDataOutputStream
name|out
init|=
name|filesystem
operator|.
name|createFile
argument_list|(
operator|new
name|Path
argument_list|(
name|ecDir
argument_list|,
literal|"replicated"
argument_list|)
argument_list|)
operator|.
name|replicate
argument_list|()
operator|.
name|build
argument_list|()
init|)
block|{
name|out
operator|.
name|write
argument_list|(
literal|"replicated"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|FSDataOutputStream
name|out
init|=
name|filesystem
operator|.
name|createFile
argument_list|(
operator|new
name|Path
argument_list|(
name|ecDir
argument_list|,
literal|"RS-3-2"
argument_list|)
argument_list|)
operator|.
name|ecPolicyName
argument_list|(
name|ecPolicyRS32
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|blockSize
argument_list|(
literal|1024
operator|*
literal|1024
argument_list|)
operator|.
name|build
argument_list|()
init|)
block|{
name|out
operator|.
name|write
argument_list|(
literal|"RS-3-2"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|abortStream (DFSOutputStream out)
specifier|public
specifier|static
name|void
name|abortStream
parameter_list|(
name|DFSOutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|abort
argument_list|()
expr_stmt|;
block|}
DECL|method|setPipeline (DFSOutputStream out, LocatedBlock lastBlock)
specifier|public
specifier|static
name|void
name|setPipeline
parameter_list|(
name|DFSOutputStream
name|out
parameter_list|,
name|LocatedBlock
name|lastBlock
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|getStreamer
argument_list|()
operator|.
name|setPipelineInConstruction
argument_list|(
name|lastBlock
argument_list|)
expr_stmt|;
block|}
DECL|method|asArray (ByteBuffer buf)
specifier|public
specifier|static
name|byte
index|[]
name|asArray
parameter_list|(
name|ByteBuffer
name|buf
parameter_list|)
block|{
name|byte
name|arr
index|[]
init|=
operator|new
name|byte
index|[
name|buf
operator|.
name|remaining
argument_list|()
index|]
decl_stmt|;
name|buf
operator|.
name|duplicate
argument_list|()
operator|.
name|get
argument_list|(
name|arr
argument_list|)
expr_stmt|;
return|return
name|arr
return|;
block|}
comment|/**    * Blocks until cache usage hits the expected new value.    */
DECL|method|verifyExpectedCacheUsage (final long expectedCacheUsed, final long expectedBlocks, final FsDatasetSpi<?> fsd)
specifier|public
specifier|static
name|long
name|verifyExpectedCacheUsage
parameter_list|(
specifier|final
name|long
name|expectedCacheUsed
parameter_list|,
specifier|final
name|long
name|expectedBlocks
parameter_list|,
specifier|final
name|FsDatasetSpi
argument_list|<
name|?
argument_list|>
name|fsd
parameter_list|)
throws|throws
name|Exception
block|{
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
specifier|private
name|int
name|tries
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
name|long
name|curCacheUsed
init|=
name|fsd
operator|.
name|getCacheUsed
argument_list|()
decl_stmt|;
name|long
name|curBlocks
init|=
name|fsd
operator|.
name|getNumBlocksCached
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|curCacheUsed
operator|!=
name|expectedCacheUsed
operator|)
operator|||
operator|(
name|curBlocks
operator|!=
name|expectedBlocks
operator|)
condition|)
block|{
if|if
condition|(
name|tries
operator|++
operator|>
literal|10
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"verifyExpectedCacheUsage: have "
operator|+
name|curCacheUsed
operator|+
literal|"/"
operator|+
name|expectedCacheUsed
operator|+
literal|" bytes cached; "
operator|+
name|curBlocks
operator|+
literal|"/"
operator|+
name|expectedBlocks
operator|+
literal|" blocks cached. "
operator|+
literal|"memlock limit = "
operator|+
name|NativeIO
operator|.
name|POSIX
operator|.
name|getCacheManipulator
argument_list|()
operator|.
name|getMemlockLimit
argument_list|()
operator|+
literal|".  Waiting..."
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"verifyExpectedCacheUsage: got "
operator|+
name|curCacheUsed
operator|+
literal|"/"
operator|+
name|expectedCacheUsed
operator|+
literal|" bytes cached; "
operator|+
name|curBlocks
operator|+
literal|"/"
operator|+
name|expectedBlocks
operator|+
literal|" blocks cached. "
operator|+
literal|"memlock limit = "
operator|+
name|NativeIO
operator|.
name|POSIX
operator|.
name|getCacheManipulator
argument_list|()
operator|.
name|getMemlockLimit
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
argument_list|,
literal|100
argument_list|,
literal|120000
argument_list|)
expr_stmt|;
return|return
name|expectedCacheUsed
return|;
block|}
comment|/**    * Round a long value up to a multiple of a factor.    *    * @param val    The value.    * @param factor The factor to round up to.  Must be> 1.    * @return       The rounded value.    */
DECL|method|roundUpToMultiple (long val, int factor)
specifier|public
specifier|static
name|long
name|roundUpToMultiple
parameter_list|(
name|long
name|val
parameter_list|,
name|int
name|factor
parameter_list|)
block|{
assert|assert
operator|(
name|factor
operator|>
literal|1
operator|)
assert|;
name|long
name|c
init|=
operator|(
name|val
operator|+
name|factor
operator|-
literal|1
operator|)
operator|/
name|factor
decl_stmt|;
return|return
name|c
operator|*
name|factor
return|;
block|}
DECL|method|checkComponentsEquals (byte[][] expected, byte[][] actual)
specifier|public
specifier|static
name|void
name|checkComponentsEquals
parameter_list|(
name|byte
index|[]
index|[]
name|expected
parameter_list|,
name|byte
index|[]
index|[]
name|actual
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"expected: "
operator|+
name|DFSUtil
operator|.
name|byteArray2PathString
argument_list|(
name|expected
argument_list|)
operator|+
literal|", actual: "
operator|+
name|DFSUtil
operator|.
name|byteArray2PathString
argument_list|(
name|actual
argument_list|)
argument_list|,
name|expected
operator|.
name|length
argument_list|,
name|actual
operator|.
name|length
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|e
range|:
name|expected
control|)
block|{
name|byte
index|[]
name|actualComponent
init|=
name|actual
index|[
name|i
operator|++
index|]
decl_stmt|;
name|assertTrue
argument_list|(
literal|"expected: "
operator|+
name|DFSUtil
operator|.
name|bytes2String
argument_list|(
name|e
argument_list|)
operator|+
literal|", actual: "
operator|+
name|DFSUtil
operator|.
name|bytes2String
argument_list|(
name|actualComponent
argument_list|)
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|e
argument_list|,
name|actualComponent
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * A short-circuit test context which makes it easier to get a short-circuit    * configuration and set everything up.    */
DECL|class|ShortCircuitTestContext
specifier|public
specifier|static
class|class
name|ShortCircuitTestContext
implements|implements
name|Closeable
block|{
DECL|field|testName
specifier|private
specifier|final
name|String
name|testName
decl_stmt|;
DECL|field|sockDir
specifier|private
specifier|final
name|TemporarySocketDirectory
name|sockDir
decl_stmt|;
DECL|field|closed
specifier|private
name|boolean
name|closed
init|=
literal|false
decl_stmt|;
DECL|field|formerTcpReadsDisabled
specifier|private
specifier|final
name|boolean
name|formerTcpReadsDisabled
decl_stmt|;
DECL|method|ShortCircuitTestContext (String testName)
specifier|public
name|ShortCircuitTestContext
parameter_list|(
name|String
name|testName
parameter_list|)
block|{
name|this
operator|.
name|testName
operator|=
name|testName
expr_stmt|;
name|this
operator|.
name|sockDir
operator|=
operator|new
name|TemporarySocketDirectory
argument_list|()
expr_stmt|;
name|DomainSocket
operator|.
name|disableBindPathValidation
argument_list|()
expr_stmt|;
name|formerTcpReadsDisabled
operator|=
name|DFSInputStream
operator|.
name|tcpReadsDisabledForTesting
expr_stmt|;
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|DomainSocket
operator|.
name|getLoadingFailureReason
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|newConfiguration ()
specifier|public
name|Configuration
name|newConfiguration
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|Read
operator|.
name|ShortCircuit
operator|.
name|KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DOMAIN_SOCKET_PATH_KEY
argument_list|,
operator|new
name|File
argument_list|(
name|sockDir
operator|.
name|getDir
argument_list|()
argument_list|,
name|testName
operator|+
literal|"._PORT.sock"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
DECL|method|getTestName ()
specifier|public
name|String
name|getTestName
parameter_list|()
block|{
return|return
name|testName
return|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|closed
condition|)
return|return;
name|closed
operator|=
literal|true
expr_stmt|;
name|DFSInputStream
operator|.
name|tcpReadsDisabledForTesting
operator|=
name|formerTcpReadsDisabled
expr_stmt|;
name|sockDir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Verify that two files have the same contents.    *    * @param fs The file system containing the two files.    * @param p1 The path of the first file.    * @param p2 The path of the second file.    * @param len The length of the two files.    * @throws IOException    */
DECL|method|verifyFilesEqual (FileSystem fs, Path p1, Path p2, int len)
specifier|public
specifier|static
name|void
name|verifyFilesEqual
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|p1
parameter_list|,
name|Path
name|p2
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|FSDataInputStream
name|in1
init|=
name|fs
operator|.
name|open
argument_list|(
name|p1
argument_list|)
init|;
name|FSDataInputStream
name|in2
operator|=
name|fs
operator|.
name|open
argument_list|(
name|p2
argument_list|)
init|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"Mismatch at byte "
operator|+
name|i
argument_list|,
name|in1
operator|.
name|read
argument_list|()
argument_list|,
name|in2
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Verify that two files have different contents.    *    * @param fs The file system containing the two files.    * @param p1 The path of the first file.    * @param p2 The path of the second file.    * @param len The length of the two files.    * @throws IOException    */
DECL|method|verifyFilesNotEqual (FileSystem fs, Path p1, Path p2, int len)
specifier|public
specifier|static
name|void
name|verifyFilesNotEqual
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|p1
parameter_list|,
name|Path
name|p2
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|FSDataInputStream
name|in1
init|=
name|fs
operator|.
name|open
argument_list|(
name|p1
argument_list|)
init|;
name|FSDataInputStream
name|in2
operator|=
name|fs
operator|.
name|open
argument_list|(
name|p2
argument_list|)
init|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|in1
operator|.
name|read
argument_list|()
operator|!=
name|in2
operator|.
name|read
argument_list|()
condition|)
block|{
return|return;
block|}
block|}
name|fail
argument_list|(
literal|"files are equal, but should not be"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Helper function that verified blocks of a file are placed on the    * expected storage type.    *    * @param fs The file system containing the the file.    * @param client The DFS client used to access the file    * @param path name to the file to verify    * @param storageType expected storage type    * @returns true if file exists and its blocks are located on the expected    *            storage type.    *          false otherwise.    */
DECL|method|verifyFileReplicasOnStorageType (FileSystem fs, DFSClient client, Path path, StorageType storageType)
specifier|public
specifier|static
name|boolean
name|verifyFileReplicasOnStorageType
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|DFSClient
name|client
parameter_list|,
name|Path
name|path
parameter_list|,
name|StorageType
name|storageType
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"verifyFileReplicasOnStorageType: file "
operator|+
name|path
operator|+
literal|"does not exist"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|long
name|fileLength
init|=
name|client
operator|.
name|getFileInfo
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|LocatedBlocks
name|locatedBlocks
init|=
name|client
operator|.
name|getLocatedBlocks
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|,
name|fileLength
argument_list|)
decl_stmt|;
for|for
control|(
name|LocatedBlock
name|locatedBlock
range|:
name|locatedBlocks
operator|.
name|getLocatedBlocks
argument_list|()
control|)
block|{
if|if
condition|(
name|locatedBlock
operator|.
name|getStorageTypes
argument_list|()
index|[
literal|0
index|]
operator|!=
name|storageType
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"verifyFileReplicasOnStorageType: for file "
operator|+
name|path
operator|+
literal|". Expect blk"
operator|+
name|locatedBlock
operator|+
literal|" on Type: "
operator|+
name|storageType
operator|+
literal|". Actual Type: "
operator|+
name|locatedBlock
operator|.
name|getStorageTypes
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Verify the aggregated {@link ClientProtocol#getStats()} block counts equal    * the sum of {@link ClientProtocol#getReplicatedBlockStats()} and    * {@link ClientProtocol#getECBlockGroupStats()}.    * @throws Exception    */
DECL|method|verifyClientStats (Configuration conf, MiniDFSCluster cluster)
specifier|public
specifier|static
name|void
name|verifyClientStats
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|MiniDFSCluster
name|cluster
parameter_list|)
throws|throws
name|Exception
block|{
name|ClientProtocol
name|client
init|=
name|NameNodeProxies
operator|.
name|createProxy
argument_list|(
name|conf
argument_list|,
name|cluster
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
operator|.
name|getUri
argument_list|()
argument_list|,
name|ClientProtocol
operator|.
name|class
argument_list|)
operator|.
name|getProxy
argument_list|()
decl_stmt|;
name|long
index|[]
name|aggregatedStats
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getStats
argument_list|()
decl_stmt|;
name|ReplicatedBlockStats
name|replicatedBlockStats
init|=
name|client
operator|.
name|getReplicatedBlockStats
argument_list|()
decl_stmt|;
name|ECBlockGroupStats
name|ecBlockGroupStats
init|=
name|client
operator|.
name|getECBlockGroupStats
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Under replicated stats not matching!"
argument_list|,
name|aggregatedStats
index|[
name|ClientProtocol
operator|.
name|GET_STATS_LOW_REDUNDANCY_IDX
index|]
argument_list|,
name|aggregatedStats
index|[
name|ClientProtocol
operator|.
name|GET_STATS_UNDER_REPLICATED_IDX
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Low redundancy stats not matching!"
argument_list|,
name|aggregatedStats
index|[
name|ClientProtocol
operator|.
name|GET_STATS_LOW_REDUNDANCY_IDX
index|]
argument_list|,
name|replicatedBlockStats
operator|.
name|getLowRedundancyBlocks
argument_list|()
operator|+
name|ecBlockGroupStats
operator|.
name|getLowRedundancyBlockGroups
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Corrupt blocks stats not matching!"
argument_list|,
name|aggregatedStats
index|[
name|ClientProtocol
operator|.
name|GET_STATS_CORRUPT_BLOCKS_IDX
index|]
argument_list|,
name|replicatedBlockStats
operator|.
name|getCorruptBlocks
argument_list|()
operator|+
name|ecBlockGroupStats
operator|.
name|getCorruptBlockGroups
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Missing blocks stats not matching!"
argument_list|,
name|aggregatedStats
index|[
name|ClientProtocol
operator|.
name|GET_STATS_MISSING_BLOCKS_IDX
index|]
argument_list|,
name|replicatedBlockStats
operator|.
name|getMissingReplicaBlocks
argument_list|()
operator|+
name|ecBlockGroupStats
operator|.
name|getMissingBlockGroups
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Missing blocks with replication factor one not matching!"
argument_list|,
name|aggregatedStats
index|[
name|ClientProtocol
operator|.
name|GET_STATS_MISSING_REPL_ONE_BLOCKS_IDX
index|]
argument_list|,
name|replicatedBlockStats
operator|.
name|getMissingReplicationOneBlocks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Bytes in future blocks stats not matching!"
argument_list|,
name|aggregatedStats
index|[
name|ClientProtocol
operator|.
name|GET_STATS_BYTES_IN_FUTURE_BLOCKS_IDX
index|]
argument_list|,
name|replicatedBlockStats
operator|.
name|getBytesInFutureBlocks
argument_list|()
operator|+
name|ecBlockGroupStats
operator|.
name|getBytesInFutureBlockGroups
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Pending deletion blocks stats not matching!"
argument_list|,
name|aggregatedStats
index|[
name|ClientProtocol
operator|.
name|GET_STATS_PENDING_DELETION_BLOCKS_IDX
index|]
argument_list|,
name|replicatedBlockStats
operator|.
name|getPendingDeletionBlocks
argument_list|()
operator|+
name|ecBlockGroupStats
operator|.
name|getPendingDeletionBlocks
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Helper function to create a key in the Key Provider. Defaults    * to the first indexed NameNode's Key Provider.    *    * @param keyName The name of the key to create    * @param cluster The cluster to create it in    * @param conf Configuration to use    */
DECL|method|createKey (String keyName, MiniDFSCluster cluster, Configuration conf)
specifier|public
specifier|static
name|void
name|createKey
parameter_list|(
name|String
name|keyName
parameter_list|,
name|MiniDFSCluster
name|cluster
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|NoSuchAlgorithmException
throws|,
name|IOException
block|{
name|createKey
argument_list|(
name|keyName
argument_list|,
name|cluster
argument_list|,
literal|0
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Helper function to create a key in the Key Provider.    *    * @param keyName The name of the key to create    * @param cluster The cluster to create it in    * @param idx The NameNode index    * @param conf Configuration to use    */
DECL|method|createKey (String keyName, MiniDFSCluster cluster, int idx, Configuration conf)
specifier|public
specifier|static
name|void
name|createKey
parameter_list|(
name|String
name|keyName
parameter_list|,
name|MiniDFSCluster
name|cluster
parameter_list|,
name|int
name|idx
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|NoSuchAlgorithmException
throws|,
name|IOException
block|{
name|NameNode
name|nn
init|=
name|cluster
operator|.
name|getNameNode
argument_list|(
name|idx
argument_list|)
decl_stmt|;
name|KeyProvider
name|provider
init|=
name|nn
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getProvider
argument_list|()
decl_stmt|;
specifier|final
name|KeyProvider
operator|.
name|Options
name|options
init|=
name|KeyProvider
operator|.
name|options
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|options
operator|.
name|setDescription
argument_list|(
name|keyName
argument_list|)
expr_stmt|;
name|options
operator|.
name|setBitLength
argument_list|(
literal|128
argument_list|)
expr_stmt|;
name|provider
operator|.
name|createKey
argument_list|(
name|keyName
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|provider
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
comment|/**    * @return the node which is expected to run the recovery of the    * given block, which is known to be under construction inside the    * given NameNOde.    */
DECL|method|getExpectedPrimaryNode (NameNode nn, ExtendedBlock blk)
specifier|public
specifier|static
name|DatanodeDescriptor
name|getExpectedPrimaryNode
parameter_list|(
name|NameNode
name|nn
parameter_list|,
name|ExtendedBlock
name|blk
parameter_list|)
block|{
name|BlockManager
name|bm0
init|=
name|nn
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
decl_stmt|;
name|BlockInfo
name|storedBlock
init|=
name|bm0
operator|.
name|getStoredBlock
argument_list|(
name|blk
operator|.
name|getLocalBlock
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Block "
operator|+
name|blk
operator|+
literal|" should be under construction, "
operator|+
literal|"got: "
operator|+
name|storedBlock
argument_list|,
operator|!
name|storedBlock
operator|.
name|isComplete
argument_list|()
argument_list|)
expr_stmt|;
comment|// We expect that the replica with the most recent heart beat will be
comment|// the one to be in charge of the synchronization / recovery protocol.
specifier|final
name|DatanodeStorageInfo
index|[]
name|storages
init|=
name|storedBlock
operator|.
name|getUnderConstructionFeature
argument_list|()
operator|.
name|getExpectedStorageLocations
argument_list|()
decl_stmt|;
name|DatanodeStorageInfo
name|expectedPrimary
init|=
name|storages
index|[
literal|0
index|]
decl_stmt|;
name|long
name|mostRecentLastUpdate
init|=
name|expectedPrimary
operator|.
name|getDatanodeDescriptor
argument_list|()
operator|.
name|getLastUpdateMonotonic
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|storages
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|long
name|lastUpdate
init|=
name|storages
index|[
name|i
index|]
operator|.
name|getDatanodeDescriptor
argument_list|()
operator|.
name|getLastUpdateMonotonic
argument_list|()
decl_stmt|;
if|if
condition|(
name|lastUpdate
operator|>
name|mostRecentLastUpdate
condition|)
block|{
name|expectedPrimary
operator|=
name|storages
index|[
name|i
index|]
expr_stmt|;
name|mostRecentLastUpdate
operator|=
name|lastUpdate
expr_stmt|;
block|}
block|}
return|return
name|expectedPrimary
operator|.
name|getDatanodeDescriptor
argument_list|()
return|;
block|}
DECL|method|toolRun (Tool tool, String cmd, int retcode, String contain)
specifier|public
specifier|static
name|void
name|toolRun
parameter_list|(
name|Tool
name|tool
parameter_list|,
name|String
name|cmd
parameter_list|,
name|int
name|retcode
parameter_list|,
name|String
name|contain
parameter_list|)
throws|throws
name|Exception
block|{
name|String
index|[]
name|cmds
init|=
name|StringUtils
operator|.
name|split
argument_list|(
name|cmd
argument_list|,
literal|' '
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|flush
argument_list|()
expr_stmt|;
name|PrintStream
name|origOut
init|=
name|System
operator|.
name|out
decl_stmt|;
name|PrintStream
name|origErr
init|=
name|System
operator|.
name|err
decl_stmt|;
name|String
name|output
init|=
literal|null
decl_stmt|;
name|int
name|ret
init|=
literal|0
decl_stmt|;
try|try
block|{
name|ByteArrayOutputStream
name|bs
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
try|try
init|(
name|PrintStream
name|out
init|=
operator|new
name|PrintStream
argument_list|(
name|bs
argument_list|)
init|)
block|{
name|System
operator|.
name|setOut
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|System
operator|.
name|setErr
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|ret
operator|=
name|tool
operator|.
name|run
argument_list|(
name|cmds
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
name|output
operator|=
name|bs
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|setOut
argument_list|(
name|origOut
argument_list|)
expr_stmt|;
name|System
operator|.
name|setErr
argument_list|(
name|origErr
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Output for command: "
operator|+
name|cmd
operator|+
literal|" retcode: "
operator|+
name|ret
argument_list|)
expr_stmt|;
if|if
condition|(
name|output
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|retcode
argument_list|,
name|ret
argument_list|)
expr_stmt|;
if|if
condition|(
name|contain
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
literal|"The real output is: "
operator|+
name|output
operator|+
literal|".\n It should contain: "
operator|+
name|contain
argument_list|,
name|output
operator|.
name|contains
argument_list|(
name|contain
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|FsShellRun (String cmd, int retcode, String contain, Configuration conf)
specifier|public
specifier|static
name|void
name|FsShellRun
parameter_list|(
name|String
name|cmd
parameter_list|,
name|int
name|retcode
parameter_list|,
name|String
name|contain
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|FsShell
name|shell
init|=
operator|new
name|FsShell
argument_list|(
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|toolRun
argument_list|(
name|shell
argument_list|,
name|cmd
argument_list|,
name|retcode
argument_list|,
name|contain
argument_list|)
expr_stmt|;
block|}
DECL|method|DFSAdminRun (String cmd, int retcode, String contain, Configuration conf)
specifier|public
specifier|static
name|void
name|DFSAdminRun
parameter_list|(
name|String
name|cmd
parameter_list|,
name|int
name|retcode
parameter_list|,
name|String
name|contain
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|DFSAdmin
name|admin
init|=
operator|new
name|DFSAdmin
argument_list|(
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|toolRun
argument_list|(
name|admin
argument_list|,
name|cmd
argument_list|,
name|retcode
argument_list|,
name|contain
argument_list|)
expr_stmt|;
block|}
DECL|method|FsShellRun (String cmd, Configuration conf)
specifier|public
specifier|static
name|void
name|FsShellRun
parameter_list|(
name|String
name|cmd
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|FsShellRun
argument_list|(
name|cmd
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|addDataNodeLayoutVersion (final int lv, final String description)
specifier|public
specifier|static
name|void
name|addDataNodeLayoutVersion
parameter_list|(
specifier|final
name|int
name|lv
parameter_list|,
specifier|final
name|String
name|description
parameter_list|)
throws|throws
name|NoSuchFieldException
throws|,
name|IllegalAccessException
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|lv
operator|<
name|DataNodeLayoutVersion
operator|.
name|CURRENT_LAYOUT_VERSION
argument_list|)
expr_stmt|;
comment|// Override {@link DataNodeLayoutVersion#CURRENT_LAYOUT_VERSION} via reflection.
name|Field
name|modifiersField
init|=
name|Field
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"modifiers"
argument_list|)
decl_stmt|;
name|modifiersField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Field
name|field
init|=
name|DataNodeLayoutVersion
operator|.
name|class
operator|.
name|getField
argument_list|(
literal|"CURRENT_LAYOUT_VERSION"
argument_list|)
decl_stmt|;
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|modifiersField
operator|.
name|setInt
argument_list|(
name|field
argument_list|,
name|field
operator|.
name|getModifiers
argument_list|()
operator|&
operator|~
name|Modifier
operator|.
name|FINAL
argument_list|)
expr_stmt|;
name|field
operator|.
name|setInt
argument_list|(
literal|null
argument_list|,
name|lv
argument_list|)
expr_stmt|;
name|field
operator|=
name|HdfsServerConstants
operator|.
name|class
operator|.
name|getField
argument_list|(
literal|"DATANODE_LAYOUT_VERSION"
argument_list|)
expr_stmt|;
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|modifiersField
operator|.
name|setInt
argument_list|(
name|field
argument_list|,
name|field
operator|.
name|getModifiers
argument_list|()
operator|&
operator|~
name|Modifier
operator|.
name|FINAL
argument_list|)
expr_stmt|;
name|field
operator|.
name|setInt
argument_list|(
literal|null
argument_list|,
name|lv
argument_list|)
expr_stmt|;
comment|// Inject the feature into the FEATURES map.
specifier|final
name|LayoutVersion
operator|.
name|FeatureInfo
name|featureInfo
init|=
operator|new
name|LayoutVersion
operator|.
name|FeatureInfo
argument_list|(
name|lv
argument_list|,
name|lv
operator|+
literal|1
argument_list|,
name|description
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|LayoutVersion
operator|.
name|LayoutFeature
name|feature
init|=
operator|new
name|LayoutVersion
operator|.
name|LayoutFeature
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|LayoutVersion
operator|.
name|FeatureInfo
name|getInfo
parameter_list|()
block|{
return|return
name|featureInfo
return|;
block|}
block|}
decl_stmt|;
comment|// Update the FEATURES map with the new layout version.
name|LayoutVersion
operator|.
name|updateMap
argument_list|(
name|DataNodeLayoutVersion
operator|.
name|FEATURES
argument_list|,
operator|new
name|LayoutVersion
operator|.
name|LayoutFeature
index|[]
block|{
name|feature
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Wait for datanode to reach alive or dead state for waitTime given in    * milliseconds.    */
DECL|method|waitForDatanodeState ( final MiniDFSCluster cluster, final String nodeID, final boolean alive, int waitTime)
specifier|public
specifier|static
name|void
name|waitForDatanodeState
parameter_list|(
specifier|final
name|MiniDFSCluster
name|cluster
parameter_list|,
specifier|final
name|String
name|nodeID
parameter_list|,
specifier|final
name|boolean
name|alive
parameter_list|,
name|int
name|waitTime
parameter_list|)
throws|throws
name|TimeoutException
throws|,
name|InterruptedException
block|{
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
name|FSNamesystem
name|namesystem
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
decl_stmt|;
specifier|final
name|DatanodeDescriptor
name|dd
init|=
name|BlockManagerTestUtil
operator|.
name|getDatanode
argument_list|(
name|namesystem
argument_list|,
name|nodeID
argument_list|)
decl_stmt|;
return|return
operator|(
name|dd
operator|.
name|isAlive
argument_list|()
operator|==
name|alive
operator|)
return|;
block|}
block|}
argument_list|,
literal|100
argument_list|,
name|waitTime
argument_list|)
expr_stmt|;
block|}
comment|/**    * Change the length of a block at datanode dnIndex.    */
DECL|method|changeReplicaLength (MiniDFSCluster cluster, ExtendedBlock blk, int dnIndex, int lenDelta)
specifier|public
specifier|static
name|boolean
name|changeReplicaLength
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|,
name|ExtendedBlock
name|blk
parameter_list|,
name|int
name|dnIndex
parameter_list|,
name|int
name|lenDelta
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|blockFile
init|=
name|cluster
operator|.
name|getBlockFile
argument_list|(
name|dnIndex
argument_list|,
name|blk
argument_list|)
decl_stmt|;
if|if
condition|(
name|blockFile
operator|!=
literal|null
operator|&&
name|blockFile
operator|.
name|exists
argument_list|()
condition|)
block|{
try|try
init|(
name|RandomAccessFile
name|raFile
init|=
operator|new
name|RandomAccessFile
argument_list|(
name|blockFile
argument_list|,
literal|"rw"
argument_list|)
init|)
block|{
name|raFile
operator|.
name|setLength
argument_list|(
name|raFile
operator|.
name|length
argument_list|()
operator|+
name|lenDelta
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"failed to change length of block "
operator|+
name|blk
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
DECL|method|setNameNodeLogLevel (Level level)
specifier|public
specifier|static
name|void
name|setNameNodeLogLevel
parameter_list|(
name|Level
name|level
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|FSNamesystem
operator|.
name|LOG
argument_list|,
name|level
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|BlockManager
operator|.
name|LOG
argument_list|,
name|level
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|LeaseManager
operator|.
name|LOG
argument_list|,
name|level
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|NameNode
operator|.
name|LOG
argument_list|,
name|level
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|NameNode
operator|.
name|stateChangeLog
argument_list|,
name|level
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|NameNode
operator|.
name|blockStateChangeLog
argument_list|,
name|level
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the NamenodeProtocol RPC proxy for the NN associated with this    * DFSClient object    *    * @param nameNodeUri the URI of the NN to get a proxy for.    *    * @return the Namenode RPC proxy associated with this DFSClient object    */
annotation|@
name|VisibleForTesting
DECL|method|getNamenodeProtocolProxy (Configuration conf, URI nameNodeUri, UserGroupInformation ugi)
specifier|public
specifier|static
name|NamenodeProtocol
name|getNamenodeProtocolProxy
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|URI
name|nameNodeUri
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|NameNodeProxies
operator|.
name|createNonHAProxy
argument_list|(
name|conf
argument_list|,
name|DFSUtilClient
operator|.
name|getNNAddress
argument_list|(
name|nameNodeUri
argument_list|)
argument_list|,
name|NamenodeProtocol
operator|.
name|class
argument_list|,
name|ugi
argument_list|,
literal|false
argument_list|)
operator|.
name|getProxy
argument_list|()
return|;
block|}
comment|/**    * Get the RefreshUserMappingsProtocol RPC proxy for the NN associated with    * this DFSClient object    *    * @param nnAddr the address of the NN to get a proxy for.    *    * @return the RefreshUserMappingsProtocol RPC proxy associated with this    * DFSClient object    */
annotation|@
name|VisibleForTesting
DECL|method|getRefreshUserMappingsProtocolProxy ( Configuration conf, InetSocketAddress nnAddr)
specifier|public
specifier|static
name|RefreshUserMappingsProtocol
name|getRefreshUserMappingsProtocolProxy
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|InetSocketAddress
name|nnAddr
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|NameNodeProxies
operator|.
name|createNonHAProxy
argument_list|(
name|conf
argument_list|,
name|nnAddr
argument_list|,
name|RefreshUserMappingsProtocol
operator|.
name|class
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|getProxy
argument_list|()
return|;
block|}
comment|/**    * Set the datanode dead    */
DECL|method|setDatanodeDead (DatanodeInfo dn)
specifier|public
specifier|static
name|void
name|setDatanodeDead
parameter_list|(
name|DatanodeInfo
name|dn
parameter_list|)
block|{
name|dn
operator|.
name|setLastUpdate
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Set this to a large negative value.
comment|// On short-lived VMs, the monotonic time can be less than the heartbeat
comment|// expiry time. Setting this to 0 will fail to immediately mark the DN as
comment|// dead.
name|dn
operator|.
name|setLastUpdateMonotonic
argument_list|(
name|Long
operator|.
name|MIN_VALUE
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
comment|/**    * Update lastUpdate and lastUpdateMonotonic with some offset.    */
DECL|method|resetLastUpdatesWithOffset (DatanodeInfo dn, long offset)
specifier|public
specifier|static
name|void
name|resetLastUpdatesWithOffset
parameter_list|(
name|DatanodeInfo
name|dn
parameter_list|,
name|long
name|offset
parameter_list|)
block|{
name|dn
operator|.
name|setLastUpdate
argument_list|(
name|Time
operator|.
name|now
argument_list|()
operator|+
name|offset
argument_list|)
expr_stmt|;
name|dn
operator|.
name|setLastUpdateMonotonic
argument_list|(
name|Time
operator|.
name|monotonicNow
argument_list|()
operator|+
name|offset
argument_list|)
expr_stmt|;
block|}
comment|/**    * This method takes a set of block locations and fills the provided buffer    * with expected bytes based on simulated content from    * {@link SimulatedFSDataset}.    *    * @param lbs The block locations of a file    * @param expected The buffer to be filled with expected bytes on the above    *                 locations.    */
DECL|method|fillExpectedBuf (LocatedBlocks lbs, byte[] expected)
specifier|public
specifier|static
name|void
name|fillExpectedBuf
parameter_list|(
name|LocatedBlocks
name|lbs
parameter_list|,
name|byte
index|[]
name|expected
parameter_list|)
block|{
name|Block
index|[]
name|blks
init|=
operator|new
name|Block
index|[
name|lbs
operator|.
name|getLocatedBlocks
argument_list|()
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lbs
operator|.
name|getLocatedBlocks
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|blks
index|[
name|i
index|]
operator|=
name|lbs
operator|.
name|getLocatedBlocks
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getBlock
argument_list|()
operator|.
name|getLocalBlock
argument_list|()
expr_stmt|;
block|}
name|int
name|bufPos
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Block
name|b
range|:
name|blks
control|)
block|{
for|for
control|(
name|long
name|blkPos
init|=
literal|0
init|;
name|blkPos
operator|<
name|b
operator|.
name|getNumBytes
argument_list|()
condition|;
name|blkPos
operator|++
control|)
block|{
assert|assert
name|bufPos
operator|<
name|expected
operator|.
name|length
assert|;
name|expected
index|[
name|bufPos
operator|++
index|]
operator|=
name|SimulatedFSDataset
operator|.
name|simulatedByte
argument_list|(
name|b
argument_list|,
name|blkPos
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|makeReportForReceivedBlock ( Block block, BlockStatus blockStatus, DatanodeStorage storage)
specifier|public
specifier|static
name|StorageReceivedDeletedBlocks
index|[]
name|makeReportForReceivedBlock
parameter_list|(
name|Block
name|block
parameter_list|,
name|BlockStatus
name|blockStatus
parameter_list|,
name|DatanodeStorage
name|storage
parameter_list|)
block|{
name|ReceivedDeletedBlockInfo
index|[]
name|receivedBlocks
init|=
operator|new
name|ReceivedDeletedBlockInfo
index|[
literal|1
index|]
decl_stmt|;
name|receivedBlocks
index|[
literal|0
index|]
operator|=
operator|new
name|ReceivedDeletedBlockInfo
argument_list|(
name|block
argument_list|,
name|blockStatus
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|StorageReceivedDeletedBlocks
index|[]
name|reports
init|=
operator|new
name|StorageReceivedDeletedBlocks
index|[
literal|1
index|]
decl_stmt|;
name|reports
index|[
literal|0
index|]
operator|=
operator|new
name|StorageReceivedDeletedBlocks
argument_list|(
name|storage
argument_list|,
name|receivedBlocks
argument_list|)
expr_stmt|;
return|return
name|reports
return|;
block|}
comment|/**    * Creates the metadata of a file in striped layout. This method only    * manipulates the NameNode state without injecting data to DataNode.    * You should disable periodical heartbeat before use this.    * @param file Path of the file to create    * @param dir Parent path of the file    * @param numBlocks Number of striped block groups to add to the file    * @param numStripesPerBlk Number of striped cells in each block    * @param toMkdir    */
DECL|method|createStripedFile (MiniDFSCluster cluster, Path file, Path dir, int numBlocks, int numStripesPerBlk, boolean toMkdir)
specifier|public
specifier|static
name|void
name|createStripedFile
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|,
name|Path
name|file
parameter_list|,
name|Path
name|dir
parameter_list|,
name|int
name|numBlocks
parameter_list|,
name|int
name|numStripesPerBlk
parameter_list|,
name|boolean
name|toMkdir
parameter_list|)
throws|throws
name|Exception
block|{
name|createStripedFile
argument_list|(
name|cluster
argument_list|,
name|file
argument_list|,
name|dir
argument_list|,
name|numBlocks
argument_list|,
name|numStripesPerBlk
argument_list|,
name|toMkdir
argument_list|,
name|StripedFileTestUtil
operator|.
name|getDefaultECPolicy
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates the metadata of a file in striped layout. This method only    * manipulates the NameNode state without injecting data to DataNode.    * You should disable periodical heartbeat before use this.    * @param file Path of the file to create    * @param dir Parent path of the file    * @param numBlocks Number of striped block groups to add to the file    * @param numStripesPerBlk Number of striped cells in each block    * @param toMkdir    * @param ecPolicy erasure coding policy apply to created file. A null value    *                 means using default erasure coding policy.    */
DECL|method|createStripedFile (MiniDFSCluster cluster, Path file, Path dir, int numBlocks, int numStripesPerBlk, boolean toMkdir, ErasureCodingPolicy ecPolicy)
specifier|public
specifier|static
name|void
name|createStripedFile
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|,
name|Path
name|file
parameter_list|,
name|Path
name|dir
parameter_list|,
name|int
name|numBlocks
parameter_list|,
name|int
name|numStripesPerBlk
parameter_list|,
name|boolean
name|toMkdir
parameter_list|,
name|ErasureCodingPolicy
name|ecPolicy
parameter_list|)
throws|throws
name|Exception
block|{
name|DistributedFileSystem
name|dfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// If outer test already set EC policy, dir should be left as null
if|if
condition|(
name|toMkdir
condition|)
block|{
assert|assert
name|dir
operator|!=
literal|null
assert|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
expr_stmt|;
try|try
block|{
name|dfs
operator|.
name|getClient
argument_list|()
operator|.
name|setErasureCodingPolicy
argument_list|(
name|dir
operator|.
name|toString
argument_list|()
argument_list|,
name|ecPolicy
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"non-empty directory"
argument_list|)
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
operator|.
name|create
argument_list|(
name|file
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0755
argument_list|)
argument_list|,
name|dfs
operator|.
name|getClient
argument_list|()
operator|.
name|getClientName
argument_list|()
argument_list|,
operator|new
name|EnumSetWritable
argument_list|<>
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateFlag
operator|.
name|CREATE
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|128
operator|*
literal|1024
operator|*
literal|1024L
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|FSNamesystem
name|ns
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
decl_stmt|;
name|FSDirectory
name|fsdir
init|=
name|ns
operator|.
name|getFSDirectory
argument_list|()
decl_stmt|;
name|INodeFile
name|fileNode
init|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|file
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|asFile
argument_list|()
decl_stmt|;
name|ExtendedBlock
name|previous
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numBlocks
condition|;
name|i
operator|++
control|)
block|{
name|Block
name|newBlock
init|=
name|addBlockToFile
argument_list|(
literal|true
argument_list|,
name|cluster
operator|.
name|getDataNodes
argument_list|()
argument_list|,
name|dfs
argument_list|,
name|ns
argument_list|,
name|file
operator|.
name|toString
argument_list|()
argument_list|,
name|fileNode
argument_list|,
name|dfs
operator|.
name|getClient
argument_list|()
operator|.
name|getClientName
argument_list|()
argument_list|,
name|previous
argument_list|,
name|numStripesPerBlk
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|previous
operator|=
operator|new
name|ExtendedBlock
argument_list|(
name|ns
operator|.
name|getBlockPoolId
argument_list|()
argument_list|,
name|newBlock
argument_list|)
expr_stmt|;
block|}
name|dfs
operator|.
name|getClient
argument_list|()
operator|.
name|namenode
operator|.
name|complete
argument_list|(
name|file
operator|.
name|toString
argument_list|()
argument_list|,
name|dfs
operator|.
name|getClient
argument_list|()
operator|.
name|getClientName
argument_list|()
argument_list|,
name|previous
argument_list|,
name|fileNode
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Adds a block or a striped block group to a file.    * This method only manipulates NameNode    * states of the file and the block without injecting data to DataNode.    * It does mimic block reports.    * You should disable periodical heartbeat before use this.    * @param isStripedBlock a boolean tell if the block added a striped block    * @param dataNodes List DataNodes to host the striped block group    * @param previous Previous block in the file    * @param numStripes Number of stripes in each block group    * @param len block size for a non striped block added    * @return The added block or block group    */
DECL|method|addBlockToFile (boolean isStripedBlock, List<DataNode> dataNodes, DistributedFileSystem fs, FSNamesystem ns, String file, INodeFile fileNode, String clientName, ExtendedBlock previous, int numStripes, int len)
specifier|public
specifier|static
name|Block
name|addBlockToFile
parameter_list|(
name|boolean
name|isStripedBlock
parameter_list|,
name|List
argument_list|<
name|DataNode
argument_list|>
name|dataNodes
parameter_list|,
name|DistributedFileSystem
name|fs
parameter_list|,
name|FSNamesystem
name|ns
parameter_list|,
name|String
name|file
parameter_list|,
name|INodeFile
name|fileNode
parameter_list|,
name|String
name|clientName
parameter_list|,
name|ExtendedBlock
name|previous
parameter_list|,
name|int
name|numStripes
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|Exception
block|{
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|namenode
operator|.
name|addBlock
argument_list|(
name|file
argument_list|,
name|clientName
argument_list|,
name|previous
argument_list|,
literal|null
argument_list|,
name|fileNode
operator|.
name|getId
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|BlockInfo
name|lastBlock
init|=
name|fileNode
operator|.
name|getLastBlock
argument_list|()
decl_stmt|;
specifier|final
name|int
name|groupSize
init|=
name|fileNode
operator|.
name|getPreferredBlockReplication
argument_list|()
decl_stmt|;
assert|assert
name|dataNodes
operator|.
name|size
argument_list|()
operator|>=
name|groupSize
assert|;
comment|// 1. RECEIVING_BLOCK IBR
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|groupSize
condition|;
name|i
operator|++
control|)
block|{
name|DataNode
name|dn
init|=
name|dataNodes
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|Block
name|block
init|=
operator|new
name|Block
argument_list|(
name|lastBlock
operator|.
name|getBlockId
argument_list|()
operator|+
name|i
argument_list|,
literal|0
argument_list|,
name|lastBlock
operator|.
name|getGenerationStamp
argument_list|()
argument_list|)
decl_stmt|;
name|DatanodeStorage
name|storage
init|=
operator|new
name|DatanodeStorage
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|StorageReceivedDeletedBlocks
index|[]
name|reports
init|=
name|DFSTestUtil
operator|.
name|makeReportForReceivedBlock
argument_list|(
name|block
argument_list|,
name|ReceivedDeletedBlockInfo
operator|.
name|BlockStatus
operator|.
name|RECEIVING_BLOCK
argument_list|,
name|storage
argument_list|)
decl_stmt|;
for|for
control|(
name|StorageReceivedDeletedBlocks
name|report
range|:
name|reports
control|)
block|{
name|ns
operator|.
name|processIncrementalBlockReport
argument_list|(
name|dn
operator|.
name|getDatanodeId
argument_list|()
argument_list|,
name|report
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|ErasureCodingPolicy
name|ecPolicy
init|=
name|fs
operator|.
name|getErasureCodingPolicy
argument_list|(
operator|new
name|Path
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
comment|// 2. RECEIVED_BLOCK IBR
name|long
name|blockSize
init|=
name|isStripedBlock
condition|?
name|numStripes
operator|*
name|ecPolicy
operator|.
name|getCellSize
argument_list|()
else|:
name|len
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|groupSize
condition|;
name|i
operator|++
control|)
block|{
name|DataNode
name|dn
init|=
name|dataNodes
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|Block
name|block
init|=
operator|new
name|Block
argument_list|(
name|lastBlock
operator|.
name|getBlockId
argument_list|()
operator|+
name|i
argument_list|,
name|blockSize
argument_list|,
name|lastBlock
operator|.
name|getGenerationStamp
argument_list|()
argument_list|)
decl_stmt|;
name|DatanodeStorage
name|storage
init|=
operator|new
name|DatanodeStorage
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|StorageReceivedDeletedBlocks
index|[]
name|reports
init|=
name|DFSTestUtil
operator|.
name|makeReportForReceivedBlock
argument_list|(
name|block
argument_list|,
name|ReceivedDeletedBlockInfo
operator|.
name|BlockStatus
operator|.
name|RECEIVED_BLOCK
argument_list|,
name|storage
argument_list|)
decl_stmt|;
for|for
control|(
name|StorageReceivedDeletedBlocks
name|report
range|:
name|reports
control|)
block|{
name|ns
operator|.
name|processIncrementalBlockReport
argument_list|(
name|dn
operator|.
name|getDatanodeId
argument_list|()
argument_list|,
name|report
argument_list|)
expr_stmt|;
block|}
block|}
name|long
name|bytes
init|=
name|isStripedBlock
condition|?
name|numStripes
operator|*
name|ecPolicy
operator|.
name|getCellSize
argument_list|()
operator|*
name|ecPolicy
operator|.
name|getNumDataUnits
argument_list|()
else|:
name|len
decl_stmt|;
name|lastBlock
operator|.
name|setNumBytes
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
return|return
name|lastBlock
return|;
block|}
comment|/*    * Copy a block from sourceProxy to destination. If the block becomes    * over-replicated, preferably remove it from source.    * Return true if a block is successfully copied; otherwise false.    */
DECL|method|replaceBlock (ExtendedBlock block, DatanodeInfo source, DatanodeInfo sourceProxy, DatanodeInfo destination)
specifier|public
specifier|static
name|boolean
name|replaceBlock
parameter_list|(
name|ExtendedBlock
name|block
parameter_list|,
name|DatanodeInfo
name|source
parameter_list|,
name|DatanodeInfo
name|sourceProxy
parameter_list|,
name|DatanodeInfo
name|destination
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|replaceBlock
argument_list|(
name|block
argument_list|,
name|source
argument_list|,
name|sourceProxy
argument_list|,
name|destination
argument_list|,
name|StorageType
operator|.
name|DEFAULT
argument_list|,
name|Status
operator|.
name|SUCCESS
argument_list|)
return|;
block|}
comment|/*    * Replace block    */
DECL|method|replaceBlock (ExtendedBlock block, DatanodeInfo source, DatanodeInfo sourceProxy, DatanodeInfo destination, StorageType targetStorageType, Status opStatus)
specifier|public
specifier|static
name|boolean
name|replaceBlock
parameter_list|(
name|ExtendedBlock
name|block
parameter_list|,
name|DatanodeInfo
name|source
parameter_list|,
name|DatanodeInfo
name|sourceProxy
parameter_list|,
name|DatanodeInfo
name|destination
parameter_list|,
name|StorageType
name|targetStorageType
parameter_list|,
name|Status
name|opStatus
parameter_list|)
throws|throws
name|IOException
throws|,
name|SocketException
block|{
name|Socket
name|sock
init|=
operator|new
name|Socket
argument_list|()
decl_stmt|;
try|try
block|{
name|sock
operator|.
name|connect
argument_list|(
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|destination
operator|.
name|getXferAddr
argument_list|()
argument_list|)
argument_list|,
name|HdfsConstants
operator|.
name|READ_TIMEOUT
argument_list|)
expr_stmt|;
name|sock
operator|.
name|setKeepAlive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// sendRequest
name|DataOutputStream
name|out
init|=
operator|new
name|DataOutputStream
argument_list|(
name|sock
operator|.
name|getOutputStream
argument_list|()
argument_list|)
decl_stmt|;
operator|new
name|Sender
argument_list|(
name|out
argument_list|)
operator|.
name|replaceBlock
argument_list|(
name|block
argument_list|,
name|targetStorageType
argument_list|,
name|BlockTokenSecretManager
operator|.
name|DUMMY_TOKEN
argument_list|,
name|source
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
name|sourceProxy
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// receiveResponse
name|DataInputStream
name|reply
init|=
operator|new
name|DataInputStream
argument_list|(
name|sock
operator|.
name|getInputStream
argument_list|()
argument_list|)
decl_stmt|;
name|BlockOpResponseProto
name|proto
init|=
name|BlockOpResponseProto
operator|.
name|parseDelimitedFrom
argument_list|(
name|reply
argument_list|)
decl_stmt|;
while|while
condition|(
name|proto
operator|.
name|getStatus
argument_list|()
operator|==
name|Status
operator|.
name|IN_PROGRESS
condition|)
block|{
name|proto
operator|=
name|BlockOpResponseProto
operator|.
name|parseDelimitedFrom
argument_list|(
name|reply
argument_list|)
expr_stmt|;
block|}
return|return
name|proto
operator|.
name|getStatus
argument_list|()
operator|==
name|opStatus
return|;
block|}
finally|finally
block|{
name|sock
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Because currently DFSStripedOutputStream does not support hflush/hsync,    * tests can use this method to flush all the buffered data to DataNodes.    */
DECL|method|flushInternal (DFSStripedOutputStream out)
specifier|public
specifier|static
name|ExtendedBlock
name|flushInternal
parameter_list|(
name|DFSStripedOutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|flushAllInternals
argument_list|()
expr_stmt|;
return|return
name|out
operator|.
name|getBlock
argument_list|()
return|;
block|}
DECL|method|flushBuffer (DFSStripedOutputStream out)
specifier|public
specifier|static
name|ExtendedBlock
name|flushBuffer
parameter_list|(
name|DFSStripedOutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|out
operator|.
name|getBlock
argument_list|()
return|;
block|}
DECL|method|waitForMetric (final JMXGet jmx, final String metricName, final int expectedValue)
specifier|public
specifier|static
name|void
name|waitForMetric
parameter_list|(
specifier|final
name|JMXGet
name|jmx
parameter_list|,
specifier|final
name|String
name|metricName
parameter_list|,
specifier|final
name|int
name|expectedValue
parameter_list|)
throws|throws
name|TimeoutException
throws|,
name|InterruptedException
block|{
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
try|try
block|{
specifier|final
name|int
name|currentValue
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|jmx
operator|.
name|getValue
argument_list|(
name|metricName
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for "
operator|+
name|metricName
operator|+
literal|" to reach value "
operator|+
name|expectedValue
operator|+
literal|", current value = "
operator|+
name|currentValue
argument_list|)
expr_stmt|;
return|return
name|currentValue
operator|==
name|expectedValue
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Test failed due to unexpected exception"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|,
literal|1000
argument_list|,
literal|60000
argument_list|)
expr_stmt|;
block|}
comment|/**    * Close current file system and create a new instance as given    * {@link UserGroupInformation}.    */
DECL|method|login (final FileSystem fs, final Configuration conf, final UserGroupInformation ugi)
specifier|public
specifier|static
name|FileSystem
name|login
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|UserGroupInformation
name|ugi
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|fs
operator|!=
literal|null
condition|)
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|DFSTestUtil
operator|.
name|getFileSystemAs
argument_list|(
name|ugi
argument_list|,
name|conf
argument_list|)
return|;
block|}
comment|/**    * Test if the given {@link FileStatus} user, group owner and its permission    * are expected, throw {@link AssertionError} if any value is not expected.    */
DECL|method|verifyFilePermission (FileStatus stat, String owner, String group, FsAction u, FsAction g, FsAction o)
specifier|public
specifier|static
name|void
name|verifyFilePermission
parameter_list|(
name|FileStatus
name|stat
parameter_list|,
name|String
name|owner
parameter_list|,
name|String
name|group
parameter_list|,
name|FsAction
name|u
parameter_list|,
name|FsAction
name|g
parameter_list|,
name|FsAction
name|o
parameter_list|)
block|{
if|if
condition|(
name|stat
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|owner
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|owner
argument_list|,
name|stat
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|group
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|group
argument_list|,
name|stat
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|FsPermission
name|permission
init|=
name|stat
operator|.
name|getPermission
argument_list|()
decl_stmt|;
if|if
condition|(
name|u
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
name|u
argument_list|,
name|permission
operator|.
name|getUserAction
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|g
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
name|g
argument_list|,
name|permission
operator|.
name|getGroupAction
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
name|o
argument_list|,
name|permission
operator|.
name|getOtherAction
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|verifyDelete (FsShell shell, FileSystem fs, Path path, boolean shouldExistInTrash)
specifier|public
specifier|static
name|void
name|verifyDelete
parameter_list|(
name|FsShell
name|shell
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|,
name|boolean
name|shouldExistInTrash
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|trashPath
init|=
name|Path
operator|.
name|mergePaths
argument_list|(
name|shell
operator|.
name|getCurrentTrashDir
argument_list|(
name|path
argument_list|)
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|verifyDelete
argument_list|(
name|shell
argument_list|,
name|fs
argument_list|,
name|path
argument_list|,
name|trashPath
argument_list|,
name|shouldExistInTrash
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyDelete (FsShell shell, FileSystem fs, Path path, Path trashPath, boolean shouldExistInTrash)
specifier|public
specifier|static
name|void
name|verifyDelete
parameter_list|(
name|FsShell
name|shell
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|,
name|Path
name|trashPath
parameter_list|,
name|boolean
name|shouldExistInTrash
parameter_list|)
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|path
operator|+
literal|" file does not exist"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify that trashPath has a path component named ".Trash"
name|Path
name|checkTrash
init|=
name|trashPath
decl_stmt|;
while|while
condition|(
operator|!
name|checkTrash
operator|.
name|isRoot
argument_list|()
operator|&&
operator|!
name|checkTrash
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|".Trash"
argument_list|)
condition|)
block|{
name|checkTrash
operator|=
name|checkTrash
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"No .Trash component found in trash path "
operator|+
name|trashPath
argument_list|,
literal|".Trash"
argument_list|,
name|checkTrash
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|argv
init|=
operator|new
name|String
index|[]
block|{
literal|"-rm"
block|,
literal|"-r"
block|,
name|path
operator|.
name|toString
argument_list|()
block|}
decl_stmt|;
name|int
name|res
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"rm failed"
argument_list|,
literal|0
argument_list|,
name|res
argument_list|)
expr_stmt|;
if|if
condition|(
name|shouldExistInTrash
condition|)
block|{
name|assertTrue
argument_list|(
literal|"File not in trash : "
operator|+
name|trashPath
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|trashPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertFalse
argument_list|(
literal|"File in trash : "
operator|+
name|trashPath
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|trashPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createOpenFiles (FileSystem fs, String filePrefix, int numFilesToCreate)
specifier|public
specifier|static
name|Map
argument_list|<
name|Path
argument_list|,
name|FSDataOutputStream
argument_list|>
name|createOpenFiles
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|filePrefix
parameter_list|,
name|int
name|numFilesToCreate
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Map
argument_list|<
name|Path
argument_list|,
name|FSDataOutputStream
argument_list|>
name|filesCreated
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
call|(
name|int
call|)
argument_list|(
literal|1024
operator|*
literal|1.75
argument_list|)
index|]
decl_stmt|;
specifier|final
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
literal|0xFEED0BACL
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFilesToCreate
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|filePrefix
operator|+
literal|"-"
operator|+
name|i
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|stm
init|=
name|fs
operator|.
name|create
argument_list|(
name|file
argument_list|,
literal|true
argument_list|,
literal|1024
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|1024
argument_list|)
decl_stmt|;
name|rand
operator|.
name|nextBytes
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|stm
operator|.
name|write
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|filesCreated
operator|.
name|put
argument_list|(
name|file
argument_list|,
name|stm
argument_list|)
expr_stmt|;
block|}
return|return
name|filesCreated
return|;
block|}
DECL|method|closeOpenFiles ( HashMap<Path, FSDataOutputStream> openFilesMap, int numFilesToClose)
specifier|public
specifier|static
name|HashSet
argument_list|<
name|Path
argument_list|>
name|closeOpenFiles
parameter_list|(
name|HashMap
argument_list|<
name|Path
argument_list|,
name|FSDataOutputStream
argument_list|>
name|openFilesMap
parameter_list|,
name|int
name|numFilesToClose
parameter_list|)
throws|throws
name|IOException
block|{
name|HashSet
argument_list|<
name|Path
argument_list|>
name|closedFiles
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Path
argument_list|,
name|FSDataOutputStream
argument_list|>
argument_list|>
name|it
init|=
name|openFilesMap
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Entry
argument_list|<
name|Path
argument_list|,
name|FSDataOutputStream
argument_list|>
name|entry
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Closing file: "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|closedFiles
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
name|numFilesToClose
operator|--
expr_stmt|;
if|if
condition|(
name|numFilesToClose
operator|==
literal|0
condition|)
block|{
break|break;
block|}
block|}
return|return
name|closedFiles
return|;
block|}
comment|/**    * Setup cluster with desired number of DN, racks, and specified number of    * rack that only has 1 DN. Other racks will be evenly setup with the number    * of DNs.    *    * @param conf the conf object to start the cluster.    * @param numDatanodes number of total Datanodes.    * @param numRacks number of total racks    * @param numSingleDnRacks number of racks that only has 1 DN    * @throws Exception    */
DECL|method|setupCluster (final Configuration conf, final int numDatanodes, final int numRacks, final int numSingleDnRacks)
specifier|public
specifier|static
name|MiniDFSCluster
name|setupCluster
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|int
name|numDatanodes
parameter_list|,
specifier|final
name|int
name|numRacks
parameter_list|,
specifier|final
name|int
name|numSingleDnRacks
parameter_list|)
throws|throws
name|Exception
block|{
assert|assert
name|numDatanodes
operator|>
name|numRacks
assert|;
assert|assert
name|numRacks
operator|>
name|numSingleDnRacks
assert|;
assert|assert
name|numSingleDnRacks
operator|>=
literal|0
assert|;
specifier|final
name|String
index|[]
name|racks
init|=
operator|new
name|String
index|[
name|numDatanodes
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numSingleDnRacks
condition|;
name|i
operator|++
control|)
block|{
name|racks
index|[
name|i
index|]
operator|=
literal|"/rack"
operator|+
name|i
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|numSingleDnRacks
init|;
name|i
operator|<
name|numDatanodes
condition|;
name|i
operator|++
control|)
block|{
name|racks
index|[
name|i
index|]
operator|=
literal|"/rack"
operator|+
operator|(
name|numSingleDnRacks
operator|+
operator|(
name|i
operator|%
operator|(
name|numRacks
operator|-
name|numSingleDnRacks
operator|)
operator|)
operator|)
expr_stmt|;
block|}
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDatanodes
argument_list|)
operator|.
name|racks
argument_list|(
name|racks
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
return|return
name|cluster
return|;
block|}
comment|/**    * Check the correctness of the snapshotDiff report.    * Make sure all items in the passed entries are in the snapshotDiff    * report.    */
DECL|method|verifySnapshotDiffReport (DistributedFileSystem fs, Path dir, String from, String to, DiffReportEntry... entries)
specifier|public
specifier|static
name|void
name|verifySnapshotDiffReport
parameter_list|(
name|DistributedFileSystem
name|fs
parameter_list|,
name|Path
name|dir
parameter_list|,
name|String
name|from
parameter_list|,
name|String
name|to
parameter_list|,
name|DiffReportEntry
modifier|...
name|entries
parameter_list|)
throws|throws
name|IOException
block|{
name|SnapshotDiffReport
name|report
init|=
name|fs
operator|.
name|getSnapshotDiffReport
argument_list|(
name|dir
argument_list|,
name|from
argument_list|,
name|to
argument_list|)
decl_stmt|;
comment|// reverse the order of from and to
name|SnapshotDiffReport
name|inverseReport
init|=
name|fs
operator|.
name|getSnapshotDiffReport
argument_list|(
name|dir
argument_list|,
name|to
argument_list|,
name|from
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|report
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|inverseReport
operator|.
name|toString
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|entries
operator|.
name|length
argument_list|,
name|report
operator|.
name|getDiffList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|entries
operator|.
name|length
argument_list|,
name|inverseReport
operator|.
name|getDiffList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|DiffReportEntry
name|entry
range|:
name|entries
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getType
argument_list|()
operator|==
name|DiffType
operator|.
name|MODIFY
condition|)
block|{
name|assertTrue
argument_list|(
name|report
operator|.
name|getDiffList
argument_list|()
operator|.
name|contains
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|inverseReport
operator|.
name|getDiffList
argument_list|()
operator|.
name|contains
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|entry
operator|.
name|getType
argument_list|()
operator|==
name|DiffType
operator|.
name|DELETE
condition|)
block|{
name|assertTrue
argument_list|(
name|report
operator|.
name|getDiffList
argument_list|()
operator|.
name|contains
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|inverseReport
operator|.
name|getDiffList
argument_list|()
operator|.
name|contains
argument_list|(
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|CREATE
argument_list|,
name|entry
operator|.
name|getSourcePath
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|entry
operator|.
name|getType
argument_list|()
operator|==
name|DiffType
operator|.
name|CREATE
condition|)
block|{
name|assertTrue
argument_list|(
name|report
operator|.
name|getDiffList
argument_list|()
operator|.
name|contains
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|inverseReport
operator|.
name|getDiffList
argument_list|()
operator|.
name|contains
argument_list|(
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|DELETE
argument_list|,
name|entry
operator|.
name|getSourcePath
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Check whether the Block movement has been successfully    * completed to satisfy the storage policy for the given file.    * @param fileName file name.    * @param expectedStorageType storage type.    * @param expectedStorageCount expected storage type.    * @param timeout timeout.    * @param fs distributedFileSystem.    * @throws Exception    */
DECL|method|waitExpectedStorageType (String fileName, final StorageType expectedStorageType, int expectedStorageCount, int timeout, DistributedFileSystem fs)
specifier|public
specifier|static
name|void
name|waitExpectedStorageType
parameter_list|(
name|String
name|fileName
parameter_list|,
specifier|final
name|StorageType
name|expectedStorageType
parameter_list|,
name|int
name|expectedStorageCount
parameter_list|,
name|int
name|timeout
parameter_list|,
name|DistributedFileSystem
name|fs
parameter_list|)
throws|throws
name|Exception
block|{
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
specifier|final
name|LocatedBlock
name|lb
decl_stmt|;
try|try
block|{
name|lb
operator|=
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|getLocatedBlocks
argument_list|(
name|fileName
argument_list|,
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception while getting located blocks"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|int
name|actualStorageCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|StorageType
name|type
range|:
name|lb
operator|.
name|getStorageTypes
argument_list|()
control|)
block|{
if|if
condition|(
name|expectedStorageType
operator|==
name|type
condition|)
block|{
name|actualStorageCount
operator|++
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
name|expectedStorageType
operator|+
literal|" replica count, expected="
operator|+
name|expectedStorageCount
operator|+
literal|" and actual="
operator|+
name|actualStorageCount
argument_list|)
expr_stmt|;
return|return
name|expectedStorageCount
operator|==
name|actualStorageCount
return|;
block|}
block|}
argument_list|,
literal|500
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
block|}
comment|/**    * Waits for removal of a specified Xattr on a specified file.    *    * @param srcPath    *          file name.    * @param xattr    *          name of the extended attribute.    * @param ns    *          Namesystem    * @param timeout    *          max wait time    * @throws Exception    */
DECL|method|waitForXattrRemoved (String srcPath, String xattr, Namesystem ns, int timeout)
specifier|public
specifier|static
name|void
name|waitForXattrRemoved
parameter_list|(
name|String
name|srcPath
parameter_list|,
name|String
name|xattr
parameter_list|,
name|Namesystem
name|ns
parameter_list|,
name|int
name|timeout
parameter_list|)
throws|throws
name|TimeoutException
throws|,
name|InterruptedException
throws|,
name|UnresolvedLinkException
throws|,
name|AccessControlException
throws|,
name|ParentNotDirectoryException
block|{
specifier|final
name|INode
name|inode
init|=
name|ns
operator|.
name|getFSDirectory
argument_list|()
operator|.
name|getINode
argument_list|(
name|srcPath
argument_list|)
decl_stmt|;
specifier|final
name|XAttr
name|satisfyXAttr
init|=
name|XAttrHelper
operator|.
name|buildXAttr
argument_list|(
name|xattr
argument_list|)
decl_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
name|List
argument_list|<
name|XAttr
argument_list|>
name|existingXAttrs
init|=
name|XAttrStorage
operator|.
name|readINodeXAttrs
argument_list|(
name|inode
argument_list|)
decl_stmt|;
return|return
operator|!
name|existingXAttrs
operator|.
name|contains
argument_list|(
name|satisfyXAttr
argument_list|)
return|;
block|}
block|}
argument_list|,
literal|100
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get namenode connector using the given configuration and file path.    *    * @param conf    *          hdfs configuration    * @param filePath    *          file path    * @param namenodeCount    *          number of namenodes    * @param createMoverPath    *          create move path flag to skip the path creation    * @return Namenode connector.    * @throws IOException    */
DECL|method|getNameNodeConnector (Configuration conf, Path filePath, int namenodeCount, boolean createMoverPath)
specifier|public
specifier|static
name|NameNodeConnector
name|getNameNodeConnector
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Path
name|filePath
parameter_list|,
name|int
name|namenodeCount
parameter_list|,
name|boolean
name|createMoverPath
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Collection
argument_list|<
name|URI
argument_list|>
name|namenodes
init|=
name|DFSUtil
operator|.
name|getInternalNsRpcUris
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|namenodeCount
argument_list|,
name|namenodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|NameNodeConnector
operator|.
name|checkOtherInstanceRunning
argument_list|(
name|createMoverPath
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
specifier|final
name|List
argument_list|<
name|NameNodeConnector
argument_list|>
name|nncs
init|=
name|NameNodeConnector
operator|.
name|newNameNodeConnectors
argument_list|(
name|namenodes
argument_list|,
name|StoragePolicySatisfier
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|filePath
argument_list|,
name|conf
argument_list|,
name|NameNodeConnector
operator|.
name|DEFAULT_MAX_IDLE_ITERATIONS
argument_list|)
decl_stmt|;
return|return
name|nncs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to connect with namenode"
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// Ignore
block|}
block|}
block|}
comment|/**    * Run the fsck command using the specified params.    *    * @param conf HDFS configuration to use    * @param expectedErrCode The error code expected to be returned by    *                         the fsck command    * @param checkErrorCode Should the error code be checked    * @param path actual arguments to the fsck command    **/
DECL|method|runFsck (Configuration conf, int expectedErrCode, boolean checkErrorCode, String... path)
specifier|public
specifier|static
name|String
name|runFsck
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|expectedErrCode
parameter_list|,
name|boolean
name|checkErrorCode
parameter_list|,
name|String
modifier|...
name|path
parameter_list|)
throws|throws
name|Exception
block|{
name|ByteArrayOutputStream
name|bStream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintStream
name|out
init|=
operator|new
name|PrintStream
argument_list|(
name|bStream
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|int
name|errCode
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|DFSck
argument_list|(
name|conf
argument_list|,
name|out
argument_list|)
argument_list|,
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|checkErrorCode
condition|)
block|{
name|assertEquals
argument_list|(
name|expectedErrCode
argument_list|,
name|errCode
argument_list|)
expr_stmt|;
block|}
return|return
name|bStream
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

