begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|XMLUtils
operator|.
name|UnmanglingError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestXMLUtils
specifier|public
class|class
name|TestXMLUtils
block|{
DECL|method|testRoundTripImpl (String str, String expectedMangled, boolean encodeEntityRefs)
specifier|private
specifier|static
name|void
name|testRoundTripImpl
parameter_list|(
name|String
name|str
parameter_list|,
name|String
name|expectedMangled
parameter_list|,
name|boolean
name|encodeEntityRefs
parameter_list|)
block|{
name|String
name|mangled
init|=
name|XMLUtils
operator|.
name|mangleXmlString
argument_list|(
name|str
argument_list|,
name|encodeEntityRefs
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedMangled
argument_list|,
name|mangled
argument_list|)
expr_stmt|;
name|String
name|unmangled
init|=
name|XMLUtils
operator|.
name|unmangleXmlString
argument_list|(
name|mangled
argument_list|,
name|encodeEntityRefs
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|str
argument_list|,
name|unmangled
argument_list|)
expr_stmt|;
block|}
DECL|method|testRoundTrip (String str, String expectedMangled)
specifier|private
specifier|static
name|void
name|testRoundTrip
parameter_list|(
name|String
name|str
parameter_list|,
name|String
name|expectedMangled
parameter_list|)
block|{
name|testRoundTripImpl
argument_list|(
name|str
argument_list|,
name|expectedMangled
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testRoundTripWithEntityRefs (String str, String expectedMangled)
specifier|private
specifier|static
name|void
name|testRoundTripWithEntityRefs
parameter_list|(
name|String
name|str
parameter_list|,
name|String
name|expectedMangled
parameter_list|)
block|{
name|testRoundTripImpl
argument_list|(
name|str
argument_list|,
name|expectedMangled
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMangleEmptyString ()
specifier|public
name|void
name|testMangleEmptyString
parameter_list|()
throws|throws
name|Exception
block|{
name|testRoundTrip
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMangleVanillaString ()
specifier|public
name|void
name|testMangleVanillaString
parameter_list|()
throws|throws
name|Exception
block|{
name|testRoundTrip
argument_list|(
literal|"abcdef"
argument_list|,
literal|"abcdef"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMangleStringWithBackSlash ()
specifier|public
name|void
name|testMangleStringWithBackSlash
parameter_list|()
throws|throws
name|Exception
block|{
name|testRoundTrip
argument_list|(
literal|"a\\bcdef"
argument_list|,
literal|"a\\005c;bcdef"
argument_list|)
expr_stmt|;
name|testRoundTrip
argument_list|(
literal|"\\\\"
argument_list|,
literal|"\\005c;\\005c;"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMangleStringWithForbiddenCodePoint ()
specifier|public
name|void
name|testMangleStringWithForbiddenCodePoint
parameter_list|()
throws|throws
name|Exception
block|{
name|testRoundTrip
argument_list|(
literal|"a\u0001bcdef"
argument_list|,
literal|"a\\0001;bcdef"
argument_list|)
expr_stmt|;
name|testRoundTrip
argument_list|(
literal|"a\u0002\ud800bcdef"
argument_list|,
literal|"a\\0002;\\d800;bcdef"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInvalidSequence ()
specifier|public
name|void
name|testInvalidSequence
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|XMLUtils
operator|.
name|unmangleXmlString
argument_list|(
literal|"\\000g;foo"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"expected an unmangling error"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnmanglingError
name|e
parameter_list|)
block|{
comment|// pass through
block|}
try|try
block|{
name|XMLUtils
operator|.
name|unmangleXmlString
argument_list|(
literal|"\\0"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"expected an unmangling error"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnmanglingError
name|e
parameter_list|)
block|{
comment|// pass through
block|}
block|}
annotation|@
name|Test
DECL|method|testAddEntityRefs ()
specifier|public
name|void
name|testAddEntityRefs
parameter_list|()
throws|throws
name|Exception
block|{
name|testRoundTripWithEntityRefs
argument_list|(
literal|"The Itchy& Scratchy Show"
argument_list|,
literal|"The Itchy&amp; Scratchy Show"
argument_list|)
expr_stmt|;
name|testRoundTripWithEntityRefs
argument_list|(
literal|"\"He said '1< 2, but 2> 1'\""
argument_list|,
literal|"&quot;He said&apos;1&lt; 2, but 2&gt; 1&apos;&quot;"
argument_list|)
expr_stmt|;
name|testRoundTripWithEntityRefs
argument_list|(
literal|"\u0001< \u0002"
argument_list|,
literal|"\\0001;&lt; \\0002;"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

