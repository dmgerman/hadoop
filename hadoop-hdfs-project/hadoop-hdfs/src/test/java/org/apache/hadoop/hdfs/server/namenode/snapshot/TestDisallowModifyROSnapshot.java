begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.snapshot
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSNamesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * This class tests snapshot functionality. One or multiple snapshots are  * created. The snapshotted directory is changed and verification is done to  * ensure snapshots remain unchanges.  */
end_comment

begin_class
DECL|class|TestDisallowModifyROSnapshot
specifier|public
class|class
name|TestDisallowModifyROSnapshot
block|{
DECL|field|dir
specifier|private
specifier|final
specifier|static
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/TestSnapshot"
argument_list|)
decl_stmt|;
DECL|field|sub1
specifier|private
specifier|final
specifier|static
name|Path
name|sub1
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"sub1"
argument_list|)
decl_stmt|;
DECL|field|sub2
specifier|private
specifier|final
specifier|static
name|Path
name|sub2
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"sub2"
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|protected
specifier|static
name|Configuration
name|conf
decl_stmt|;
DECL|field|cluster
specifier|protected
specifier|static
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|fsn
specifier|protected
specifier|static
name|FSNamesystem
name|fsn
decl_stmt|;
DECL|field|fs
specifier|protected
specifier|static
name|DistributedFileSystem
name|fs
decl_stmt|;
comment|/**    * The list recording all previous snapshots. Each element in the array    * records a snapshot root.    */
DECL|field|snapshotList
specifier|protected
specifier|static
name|ArrayList
argument_list|<
name|Path
argument_list|>
name|snapshotList
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|objInSnapshot
specifier|static
name|Path
name|objInSnapshot
init|=
literal|null
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setUp ()
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fsn
operator|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|Path
name|path1
init|=
operator|new
name|Path
argument_list|(
name|sub1
argument_list|,
literal|"dir1"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|path1
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|path2
init|=
operator|new
name|Path
argument_list|(
name|sub2
argument_list|,
literal|"dir2"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|path2
argument_list|)
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|fs
argument_list|,
name|sub1
argument_list|,
literal|"testSnapshot"
argument_list|)
expr_stmt|;
name|objInSnapshot
operator|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|sub1
argument_list|,
literal|"testSnapshot"
argument_list|,
literal|"dir1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|tearDown ()
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|SnapshotAccessControlException
operator|.
name|class
argument_list|)
DECL|method|testSetReplication ()
specifier|public
name|void
name|testSetReplication
parameter_list|()
throws|throws
name|Exception
block|{
name|fs
operator|.
name|setReplication
argument_list|(
name|objInSnapshot
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|SnapshotAccessControlException
operator|.
name|class
argument_list|)
DECL|method|testSetPermission ()
specifier|public
name|void
name|testSetPermission
parameter_list|()
throws|throws
name|Exception
block|{
name|fs
operator|.
name|setPermission
argument_list|(
name|objInSnapshot
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"777"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|SnapshotAccessControlException
operator|.
name|class
argument_list|)
DECL|method|testSetOwner ()
specifier|public
name|void
name|testSetOwner
parameter_list|()
throws|throws
name|Exception
block|{
name|fs
operator|.
name|setOwner
argument_list|(
name|objInSnapshot
argument_list|,
literal|"username"
argument_list|,
literal|"groupname"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRename ()
specifier|public
name|void
name|testRename
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|fs
operator|.
name|rename
argument_list|(
name|objInSnapshot
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/invalid/path"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Didn't throw SnapshotAccessControlException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SnapshotAccessControlException
name|e
parameter_list|)
block|{
comment|/* Ignored */
block|}
try|try
block|{
name|fs
operator|.
name|rename
argument_list|(
name|sub2
argument_list|,
name|objInSnapshot
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Didn't throw SnapshotAccessControlException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SnapshotAccessControlException
name|e
parameter_list|)
block|{
comment|/* Ignored */
block|}
try|try
block|{
name|fs
operator|.
name|rename
argument_list|(
name|sub2
argument_list|,
name|objInSnapshot
argument_list|,
operator|(
name|Options
operator|.
name|Rename
operator|)
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Didn't throw SnapshotAccessControlException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SnapshotAccessControlException
name|e
parameter_list|)
block|{
comment|/* Ignored */
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|SnapshotAccessControlException
operator|.
name|class
argument_list|)
DECL|method|testDelete ()
specifier|public
name|void
name|testDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|fs
operator|.
name|delete
argument_list|(
name|objInSnapshot
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|SnapshotAccessControlException
operator|.
name|class
argument_list|)
DECL|method|testQuota ()
specifier|public
name|void
name|testQuota
parameter_list|()
throws|throws
name|Exception
block|{
name|fs
operator|.
name|setQuota
argument_list|(
name|objInSnapshot
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|SnapshotAccessControlException
operator|.
name|class
argument_list|)
DECL|method|testSetTime ()
specifier|public
name|void
name|testSetTime
parameter_list|()
throws|throws
name|Exception
block|{
name|fs
operator|.
name|setTimes
argument_list|(
name|objInSnapshot
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|SnapshotAccessControlException
operator|.
name|class
argument_list|)
DECL|method|testCreate ()
specifier|public
name|void
name|testCreate
parameter_list|()
throws|throws
name|Exception
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
name|DFSClient
name|dfsclient
init|=
operator|new
name|DFSClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|dfsclient
operator|.
name|create
argument_list|(
name|objInSnapshot
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|SnapshotAccessControlException
operator|.
name|class
argument_list|)
DECL|method|testAppend ()
specifier|public
name|void
name|testAppend
parameter_list|()
throws|throws
name|Exception
block|{
name|fs
operator|.
name|append
argument_list|(
name|objInSnapshot
argument_list|,
literal|65535
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|SnapshotAccessControlException
operator|.
name|class
argument_list|)
DECL|method|testMkdir ()
specifier|public
name|void
name|testMkdir
parameter_list|()
throws|throws
name|Exception
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
name|objInSnapshot
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"777"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|SnapshotAccessControlException
operator|.
name|class
argument_list|)
DECL|method|testCreateSymlink ()
specifier|public
name|void
name|testCreateSymlink
parameter_list|()
throws|throws
name|Exception
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
name|DFSClient
name|dfsclient
init|=
operator|new
name|DFSClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// TODO: if link is objInSnapshot, ParentNotDirectoryException got thrown
comment|// first by verifyParentDir()
name|dfsclient
operator|.
name|createSymlink
argument_list|(
name|sub2
operator|.
name|toString
argument_list|()
argument_list|,
literal|"/TestSnapshot/sub1/.snapshot"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

