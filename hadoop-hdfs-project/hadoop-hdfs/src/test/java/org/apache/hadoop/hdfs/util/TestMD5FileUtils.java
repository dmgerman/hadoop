begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|MD5Hash
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestMD5FileUtils
specifier|public
class|class
name|TestMD5FileUtils
block|{
DECL|field|TEST_DIR
specifier|private
specifier|static
specifier|final
name|File
name|TEST_DIR
init|=
name|PathUtils
operator|.
name|getTestDir
argument_list|(
name|TestMD5FileUtils
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|TEST_FILE
specifier|private
specifier|static
specifier|final
name|File
name|TEST_FILE
init|=
operator|new
name|File
argument_list|(
name|TEST_DIR
argument_list|,
literal|"testMd5File.dat"
argument_list|)
decl_stmt|;
DECL|field|TEST_DATA_LEN
specifier|private
specifier|static
specifier|final
name|int
name|TEST_DATA_LEN
init|=
literal|128
operator|*
literal|1024
decl_stmt|;
comment|// 128KB test data
DECL|field|TEST_DATA
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|TEST_DATA
init|=
name|DFSTestUtil
operator|.
name|generateSequentialBytes
argument_list|(
literal|0
argument_list|,
name|TEST_DATA_LEN
argument_list|)
decl_stmt|;
DECL|field|TEST_MD5
specifier|private
specifier|static
specifier|final
name|MD5Hash
name|TEST_MD5
init|=
name|MD5Hash
operator|.
name|digest
argument_list|(
name|TEST_DATA
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|TEST_DIR
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|TEST_DIR
operator|.
name|mkdirs
argument_list|()
argument_list|)
expr_stmt|;
comment|// Write a file out
name|FileOutputStream
name|fos
init|=
operator|new
name|FileOutputStream
argument_list|(
name|TEST_FILE
argument_list|)
decl_stmt|;
name|fos
operator|.
name|write
argument_list|(
name|TEST_DATA
argument_list|)
expr_stmt|;
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testComputeMd5ForFile ()
specifier|public
name|void
name|testComputeMd5ForFile
parameter_list|()
throws|throws
name|Exception
block|{
name|MD5Hash
name|computedDigest
init|=
name|MD5FileUtils
operator|.
name|computeMd5ForFile
argument_list|(
name|TEST_FILE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|TEST_MD5
argument_list|,
name|computedDigest
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testVerifyMD5FileGood ()
specifier|public
name|void
name|testVerifyMD5FileGood
parameter_list|()
throws|throws
name|Exception
block|{
name|MD5FileUtils
operator|.
name|saveMD5File
argument_list|(
name|TEST_FILE
argument_list|,
name|TEST_MD5
argument_list|)
expr_stmt|;
name|MD5FileUtils
operator|.
name|verifySavedMD5
argument_list|(
name|TEST_FILE
argument_list|,
name|TEST_MD5
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test when .md5 file does not exist at all    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IOException
operator|.
name|class
argument_list|)
DECL|method|testVerifyMD5FileMissing ()
specifier|public
name|void
name|testVerifyMD5FileMissing
parameter_list|()
throws|throws
name|Exception
block|{
name|MD5FileUtils
operator|.
name|verifySavedMD5
argument_list|(
name|TEST_FILE
argument_list|,
name|TEST_MD5
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test when .md5 file exists but incorrect checksum    */
annotation|@
name|Test
DECL|method|testVerifyMD5FileBadDigest ()
specifier|public
name|void
name|testVerifyMD5FileBadDigest
parameter_list|()
throws|throws
name|Exception
block|{
name|MD5FileUtils
operator|.
name|saveMD5File
argument_list|(
name|TEST_FILE
argument_list|,
name|MD5Hash
operator|.
name|digest
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|MD5FileUtils
operator|.
name|verifySavedMD5
argument_list|(
name|TEST_FILE
argument_list|,
name|TEST_MD5
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Did not throw"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// Expected
block|}
block|}
comment|/**    * Test when .md5 file exists but has a bad format    */
annotation|@
name|Test
DECL|method|testVerifyMD5FileBadFormat ()
specifier|public
name|void
name|testVerifyMD5FileBadFormat
parameter_list|()
throws|throws
name|Exception
block|{
name|FileWriter
name|writer
init|=
operator|new
name|FileWriter
argument_list|(
name|MD5FileUtils
operator|.
name|getDigestFileForFile
argument_list|(
name|TEST_FILE
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|writer
operator|.
name|write
argument_list|(
literal|"this is not an md5 file"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|MD5FileUtils
operator|.
name|verifySavedMD5
argument_list|(
name|TEST_FILE
argument_list|,
name|TEST_MD5
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Did not throw"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// expected
block|}
block|}
block|}
end_class

end_unit

