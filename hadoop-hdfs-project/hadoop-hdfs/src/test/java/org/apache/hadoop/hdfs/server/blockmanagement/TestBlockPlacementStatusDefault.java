begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.blockmanagement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Unit tests to validate the BlockPlacementStatusDefault policy, focusing on  * the getAdditionAlReplicasRequired method.  */
end_comment

begin_class
DECL|class|TestBlockPlacementStatusDefault
specifier|public
class|class
name|TestBlockPlacementStatusDefault
block|{
annotation|@
name|Test
DECL|method|testIsPolicySatisfiedCorrectly ()
specifier|public
name|void
name|testIsPolicySatisfiedCorrectly
parameter_list|()
block|{
comment|// 2 current racks and 2 expected
name|BlockPlacementStatusDefault
name|bps
init|=
operator|new
name|BlockPlacementStatusDefault
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|bps
operator|.
name|isPlacementPolicySatisfied
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|bps
operator|.
name|getAdditionalReplicasRequired
argument_list|()
argument_list|)
expr_stmt|;
comment|// 1 current rack and 2 expected
name|bps
operator|=
operator|new
name|BlockPlacementStatusDefault
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|bps
operator|.
name|isPlacementPolicySatisfied
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|bps
operator|.
name|getAdditionalReplicasRequired
argument_list|()
argument_list|)
expr_stmt|;
comment|// 3 current racks and 2 expected
name|bps
operator|=
operator|new
name|BlockPlacementStatusDefault
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bps
operator|.
name|isPlacementPolicySatisfied
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|bps
operator|.
name|getAdditionalReplicasRequired
argument_list|()
argument_list|)
expr_stmt|;
comment|// 1 current rack and 2 expected, but only 1 rack on the cluster
name|bps
operator|=
operator|new
name|BlockPlacementStatusDefault
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bps
operator|.
name|isPlacementPolicySatisfied
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|bps
operator|.
name|getAdditionalReplicasRequired
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

