begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode.extdataset
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|extdataset
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|RollingLogs
import|;
end_import

begin_class
DECL|class|ExternalRollingLogs
specifier|public
class|class
name|ExternalRollingLogs
implements|implements
name|RollingLogs
block|{
DECL|class|ExternalLineIterator
specifier|private
class|class
name|ExternalLineIterator
implements|implements
name|LineIterator
block|{
annotation|@
name|Override
DECL|method|isPrevious ()
specifier|public
name|boolean
name|isPrevious
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|isLastReadFromPrevious ()
specifier|public
name|boolean
name|isLastReadFromPrevious
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|next ()
specifier|public
name|String
name|next
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|remove ()
specifier|public
name|void
name|remove
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{     }
block|}
DECL|class|ExternalAppender
specifier|private
class|class
name|ExternalAppender
implements|implements
name|Appender
block|{
annotation|@
name|Override
DECL|method|append (CharSequence cs)
specifier|public
name|Appendable
name|append
parameter_list|(
name|CharSequence
name|cs
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|append (CharSequence cs, int i, int i1)
specifier|public
name|Appendable
name|append
parameter_list|(
name|CharSequence
name|cs
parameter_list|,
name|int
name|i
parameter_list|,
name|int
name|i1
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|append (char c)
specifier|public
name|Appendable
name|append
parameter_list|(
name|char
name|c
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{     }
block|}
annotation|@
name|Override
DECL|method|iterator (boolean skipPrevious)
specifier|public
name|LineIterator
name|iterator
parameter_list|(
name|boolean
name|skipPrevious
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|ExternalLineIterator
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|appender ()
specifier|public
name|Appender
name|appender
parameter_list|()
block|{
return|return
operator|new
name|ExternalAppender
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|roll ()
specifier|public
name|boolean
name|roll
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

