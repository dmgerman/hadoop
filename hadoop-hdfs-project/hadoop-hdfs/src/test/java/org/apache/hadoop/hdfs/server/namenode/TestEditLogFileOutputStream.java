begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|DU
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|Storage
operator|.
name|StorageDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSEditLogLoader
operator|.
name|EditLogValidation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_class
DECL|class|TestEditLogFileOutputStream
specifier|public
class|class
name|TestEditLogFileOutputStream
block|{
DECL|field|HEADER_LEN
specifier|private
specifier|final
specifier|static
name|int
name|HEADER_LEN
init|=
literal|17
decl_stmt|;
DECL|field|TEST_EDITS
specifier|private
specifier|static
specifier|final
name|File
name|TEST_EDITS
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|,
literal|"editLogStream.dat"
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|deleteEditsFile ()
specifier|public
name|void
name|deleteEditsFile
parameter_list|()
block|{
name|TEST_EDITS
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPreallocation ()
specifier|public
name|void
name|testPreallocation
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|long
name|START_TXID
init|=
literal|1
decl_stmt|;
name|StorageDirectory
name|sd
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getFSImage
argument_list|()
operator|.
name|getStorage
argument_list|()
operator|.
name|getStorageDir
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|File
name|editLog
init|=
name|NNStorage
operator|.
name|getInProgressEditsFile
argument_list|(
name|sd
argument_list|,
name|START_TXID
argument_list|)
decl_stmt|;
name|EditLogValidation
name|validation
init|=
name|EditLogFileInputStream
operator|.
name|validateEditLog
argument_list|(
name|editLog
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Edit log should contain a header as valid length"
argument_list|,
name|HEADER_LEN
argument_list|,
name|validation
operator|.
name|getValidLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|validation
operator|.
name|getEndTxId
argument_list|()
argument_list|,
name|START_TXID
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Edit log should have 1MB pre-allocated, plus 4 bytes "
operator|+
literal|"for the version number"
argument_list|,
name|EditLogFileOutputStream
operator|.
name|PREALLOCATION_LENGTH
operator|+
literal|4
argument_list|,
name|editLog
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/tmp"
argument_list|)
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|777
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|oldLength
init|=
name|validation
operator|.
name|getValidLength
argument_list|()
decl_stmt|;
name|validation
operator|=
name|EditLogFileInputStream
operator|.
name|validateEditLog
argument_list|(
name|editLog
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Edit log should have more valid data after writing a txn "
operator|+
literal|"(was: "
operator|+
name|oldLength
operator|+
literal|" now: "
operator|+
name|validation
operator|.
name|getValidLength
argument_list|()
operator|+
literal|")"
argument_list|,
name|validation
operator|.
name|getValidLength
argument_list|()
operator|>
name|oldLength
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|validation
operator|.
name|getEndTxId
argument_list|()
operator|-
name|START_TXID
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Edit log should be 1MB long, plus 4 bytes for the version number"
argument_list|,
name|EditLogFileOutputStream
operator|.
name|PREALLOCATION_LENGTH
operator|+
literal|4
argument_list|,
name|editLog
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
comment|// 256 blocks for the 1MB of preallocation space
name|assertTrue
argument_list|(
literal|"Edit log disk space used should be at least 257 blocks"
argument_list|,
literal|256
operator|*
literal|4096
operator|<=
operator|new
name|DU
argument_list|(
name|editLog
argument_list|,
name|conf
argument_list|)
operator|.
name|getUsed
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testClose ()
specifier|public
name|void
name|testClose
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|errorMessage
init|=
literal|"TESTING: fc.truncate() threw IOE"
decl_stmt|;
name|File
name|testDir
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"could not create test directory"
argument_list|,
name|testDir
operator|.
name|exists
argument_list|()
operator|||
name|testDir
operator|.
name|mkdirs
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|testDir
argument_list|,
literal|"edits"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"could not create test file"
argument_list|,
name|f
operator|.
name|createNewFile
argument_list|()
argument_list|)
expr_stmt|;
name|EditLogFileOutputStream
name|elos
init|=
operator|new
name|EditLogFileOutputStream
argument_list|(
name|f
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|FileChannel
name|mockFc
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|elos
operator|.
name|getFileChannelForTesting
argument_list|()
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doThrow
argument_list|(
operator|new
name|IOException
argument_list|(
name|errorMessage
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|mockFc
argument_list|)
operator|.
name|truncate
argument_list|(
name|Mockito
operator|.
name|anyLong
argument_list|()
argument_list|)
expr_stmt|;
name|elos
operator|.
name|setFileChannelForTesting
argument_list|(
name|mockFc
argument_list|)
expr_stmt|;
try|try
block|{
name|elos
operator|.
name|close
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"elos.close() succeeded, but should have thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"wrong IOE thrown from elos.close()"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|errorMessage
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"fc was not nulled when elos.close() failed"
argument_list|,
name|elos
operator|.
name|getFileChannelForTesting
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests EditLogFileOutputStream doesn't throw NullPointerException on    * close/abort sequence. See HDFS-2011.    */
annotation|@
name|Test
DECL|method|testEditLogFileOutputStreamCloseAbort ()
specifier|public
name|void
name|testEditLogFileOutputStreamCloseAbort
parameter_list|()
throws|throws
name|IOException
block|{
comment|// abort after a close should just ignore
name|EditLogFileOutputStream
name|editLogStream
init|=
operator|new
name|EditLogFileOutputStream
argument_list|(
name|TEST_EDITS
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|editLogStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|editLogStream
operator|.
name|abort
argument_list|()
expr_stmt|;
block|}
comment|/**    * Tests EditLogFileOutputStream doesn't throw NullPointerException on    * close/close sequence. See HDFS-2011.    */
annotation|@
name|Test
DECL|method|testEditLogFileOutputStreamCloseClose ()
specifier|public
name|void
name|testEditLogFileOutputStreamCloseClose
parameter_list|()
throws|throws
name|IOException
block|{
comment|// close after a close should result in an IOE
name|EditLogFileOutputStream
name|editLogStream
init|=
operator|new
name|EditLogFileOutputStream
argument_list|(
name|TEST_EDITS
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|editLogStream
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|editLogStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|String
name|msg
init|=
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|ioe
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|msg
operator|.
name|contains
argument_list|(
literal|"Trying to use aborted output stream"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Tests EditLogFileOutputStream doesn't throw NullPointerException on being    * abort/abort sequence. See HDFS-2011.    */
annotation|@
name|Test
DECL|method|testEditLogFileOutputStreamAbortAbort ()
specifier|public
name|void
name|testEditLogFileOutputStreamAbortAbort
parameter_list|()
throws|throws
name|IOException
block|{
comment|// abort after a close should just ignore
name|EditLogFileOutputStream
name|editLogStream
init|=
operator|new
name|EditLogFileOutputStream
argument_list|(
name|TEST_EDITS
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|editLogStream
operator|.
name|abort
argument_list|()
expr_stmt|;
name|editLogStream
operator|.
name|abort
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

