begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
operator|.
name|AdminStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|DatanodeReportType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|CombinedHostFileManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|HostConfigManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSNamesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNodeAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|HostsFileWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_comment
comment|/**  * This class provide utilities for testing of the admin operations of nodes.  */
end_comment

begin_class
DECL|class|AdminStatesBaseTest
specifier|public
class|class
name|AdminStatesBaseTest
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AdminStatesBaseTest
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|seed
specifier|static
specifier|final
name|long
name|seed
init|=
literal|0xDEADBEEFL
decl_stmt|;
DECL|field|blockSize
specifier|static
specifier|final
name|int
name|blockSize
init|=
literal|8192
decl_stmt|;
DECL|field|fileSize
specifier|static
specifier|final
name|int
name|fileSize
init|=
literal|16384
decl_stmt|;
DECL|field|HEARTBEAT_INTERVAL
specifier|static
specifier|final
name|int
name|HEARTBEAT_INTERVAL
init|=
literal|1
decl_stmt|;
comment|// heartbeat interval in seconds
DECL|field|BLOCKREPORT_INTERVAL_MSEC
specifier|static
specifier|final
name|int
name|BLOCKREPORT_INTERVAL_MSEC
init|=
literal|1000
decl_stmt|;
comment|//block report in msec
DECL|field|NAMENODE_REPLICATION_INTERVAL
specifier|static
specifier|final
name|int
name|NAMENODE_REPLICATION_INTERVAL
init|=
literal|1
decl_stmt|;
comment|//replication interval
DECL|field|myrand
specifier|final
specifier|private
name|Random
name|myrand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|field|hostsFileWriter
specifier|private
name|HostsFileWriter
name|hostsFileWriter
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
DECL|field|useCombinedHostFileManager
specifier|private
name|boolean
name|useCombinedHostFileManager
init|=
literal|false
decl_stmt|;
DECL|method|setUseCombinedHostFileManager ()
specifier|protected
name|void
name|setUseCombinedHostFileManager
parameter_list|()
block|{
name|useCombinedHostFileManager
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|getConf ()
specifier|protected
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
DECL|method|getCluster ()
specifier|protected
name|MiniDFSCluster
name|getCluster
parameter_list|()
block|{
return|return
name|cluster
return|;
block|}
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Set up the hosts/exclude files.
name|hostsFileWriter
operator|=
operator|new
name|HostsFileWriter
argument_list|()
expr_stmt|;
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
if|if
condition|(
name|useCombinedHostFileManager
condition|)
block|{
name|conf
operator|.
name|setClass
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HOSTS_PROVIDER_CLASSNAME_KEY
argument_list|,
name|CombinedHostFileManager
operator|.
name|class
argument_list|,
name|HostConfigManager
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|// Setup conf
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REDUNDANCY_CONSIDERLOAD_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|,
name|HEARTBEAT_INTERVAL
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCKREPORT_INTERVAL_MSEC_KEY
argument_list|,
name|BLOCKREPORT_INTERVAL_MSEC
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REDUNDANCY_INTERVAL_SECONDS_KEY
argument_list|,
name|NAMENODE_REPLICATION_INTERVAL
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DECOMMISSION_INTERVAL_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|hostsFileWriter
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
literal|"temp/admin"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
throws|throws
name|IOException
block|{
name|hostsFileWriter
operator|.
name|cleanup
argument_list|()
expr_stmt|;
name|shutdownCluster
argument_list|()
expr_stmt|;
block|}
DECL|method|writeIncompleteFile (FileSystem fileSys, Path name, short repl, short numOfBlocks)
specifier|static
specifier|public
name|FSDataOutputStream
name|writeIncompleteFile
parameter_list|(
name|FileSystem
name|fileSys
parameter_list|,
name|Path
name|name
parameter_list|,
name|short
name|repl
parameter_list|,
name|short
name|numOfBlocks
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|name
argument_list|,
name|repl
argument_list|,
name|numOfBlocks
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|writeFile (FileSystem fileSys, Path name, int repl)
specifier|static
specifier|protected
name|void
name|writeFile
parameter_list|(
name|FileSystem
name|fileSys
parameter_list|,
name|Path
name|name
parameter_list|,
name|int
name|repl
parameter_list|)
throws|throws
name|IOException
block|{
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|name
argument_list|,
name|repl
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
DECL|method|writeFile (FileSystem fileSys, Path name, int repl, int numOfBlocks)
specifier|static
specifier|protected
name|void
name|writeFile
parameter_list|(
name|FileSystem
name|fileSys
parameter_list|,
name|Path
name|name
parameter_list|,
name|int
name|repl
parameter_list|,
name|int
name|numOfBlocks
parameter_list|)
throws|throws
name|IOException
block|{
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|name
argument_list|,
name|repl
argument_list|,
name|numOfBlocks
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|writeFile (FileSystem fileSys, Path name, int repl, int numOfBlocks, boolean completeFile)
specifier|static
specifier|protected
name|FSDataOutputStream
name|writeFile
parameter_list|(
name|FileSystem
name|fileSys
parameter_list|,
name|Path
name|name
parameter_list|,
name|int
name|repl
parameter_list|,
name|int
name|numOfBlocks
parameter_list|,
name|boolean
name|completeFile
parameter_list|)
throws|throws
name|IOException
block|{
comment|// create and write a file that contains two blocks of data
name|FSDataOutputStream
name|stm
init|=
name|fileSys
operator|.
name|create
argument_list|(
name|name
argument_list|,
literal|true
argument_list|,
name|fileSys
operator|.
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IO_FILE_BUFFER_SIZE_KEY
argument_list|,
literal|4096
argument_list|)
argument_list|,
operator|(
name|short
operator|)
name|repl
argument_list|,
name|blockSize
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|blockSize
operator|*
name|numOfBlocks
index|]
decl_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
decl_stmt|;
name|rand
operator|.
name|nextBytes
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|stm
operator|.
name|write
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Created file "
operator|+
name|name
operator|+
literal|" with "
operator|+
name|repl
operator|+
literal|" replicas."
argument_list|)
expr_stmt|;
if|if
condition|(
name|completeFile
condition|)
block|{
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
else|else
block|{
name|stm
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// Do not close stream, return it
comment|// so that it is not garbage collected
return|return
name|stm
return|;
block|}
block|}
comment|/**    * Decommission or perform Maintenance for DataNodes and wait for them to    * reach the expected state.    *    * @param nnIndex NameNode index    * @param datanodeUuid DataNode to decommission/maintenance, or a random    *                     DataNode if null    * @param maintenanceExpirationInMS Maintenance expiration time    * @param decommissionedNodes List of DataNodes already decommissioned    * @param waitForState Await for this state for datanodeUuid DataNode    * @return DatanodeInfo DataNode taken out of service    * @throws IOException    */
DECL|method|takeNodeOutofService (int nnIndex, String datanodeUuid, long maintenanceExpirationInMS, ArrayList<DatanodeInfo> decommissionedNodes, AdminStates waitForState)
specifier|protected
name|DatanodeInfo
name|takeNodeOutofService
parameter_list|(
name|int
name|nnIndex
parameter_list|,
name|String
name|datanodeUuid
parameter_list|,
name|long
name|maintenanceExpirationInMS
parameter_list|,
name|ArrayList
argument_list|<
name|DatanodeInfo
argument_list|>
name|decommissionedNodes
parameter_list|,
name|AdminStates
name|waitForState
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|takeNodeOutofService
argument_list|(
name|nnIndex
argument_list|,
name|datanodeUuid
argument_list|,
name|maintenanceExpirationInMS
argument_list|,
name|decommissionedNodes
argument_list|,
literal|null
argument_list|,
name|waitForState
argument_list|)
return|;
block|}
comment|/**    * Decommission or perform Maintenance for DataNodes and wait for them to    * reach the expected state.    *    * @param nnIndex NameNode index    * @param datanodeUuid DataNode to decommission/maintenance, or a random    *                     DataNode if null    * @param maintenanceExpirationInMS Maintenance expiration time    * @param decommissionedNodes List of DataNodes already decommissioned    * @param inMaintenanceNodes Map of DataNodes already entering/in maintenance    * @param waitForState Await for this state for datanodeUuid DataNode    * @return DatanodeInfo DataNode taken out of service    * @throws IOException    */
DECL|method|takeNodeOutofService (int nnIndex, String datanodeUuid, long maintenanceExpirationInMS, List<DatanodeInfo> decommissionedNodes, Map<DatanodeInfo, Long> inMaintenanceNodes, AdminStates waitForState)
specifier|protected
name|DatanodeInfo
name|takeNodeOutofService
parameter_list|(
name|int
name|nnIndex
parameter_list|,
name|String
name|datanodeUuid
parameter_list|,
name|long
name|maintenanceExpirationInMS
parameter_list|,
name|List
argument_list|<
name|DatanodeInfo
argument_list|>
name|decommissionedNodes
parameter_list|,
name|Map
argument_list|<
name|DatanodeInfo
argument_list|,
name|Long
argument_list|>
name|inMaintenanceNodes
parameter_list|,
name|AdminStates
name|waitForState
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|takeNodeOutofService
argument_list|(
name|nnIndex
argument_list|,
operator|(
name|datanodeUuid
operator|!=
literal|null
condition|?
name|Lists
operator|.
name|newArrayList
argument_list|(
name|datanodeUuid
argument_list|)
else|:
literal|null
operator|)
argument_list|,
name|maintenanceExpirationInMS
argument_list|,
name|decommissionedNodes
argument_list|,
name|inMaintenanceNodes
argument_list|,
name|waitForState
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
comment|/**    * Decommission or perform Maintenance for DataNodes and wait for them to    * reach the expected state.    *    * @param nnIndex NameNode index    * @param dataNodeUuids DataNodes to decommission/maintenance, or a random    *                     DataNode if null    * @param maintenanceExpirationInMS Maintenance expiration time    * @param decommissionedNodes List of DataNodes already decommissioned    * @param inMaintenanceNodes Map of DataNodes already entering/in maintenance    * @param waitForState Await for this state for datanodeUuid DataNode    * @return DatanodeInfo DataNode taken out of service    * @throws IOException    */
DECL|method|takeNodeOutofService (int nnIndex, List<String> dataNodeUuids, long maintenanceExpirationInMS, List<DatanodeInfo> decommissionedNodes, Map<DatanodeInfo, Long> inMaintenanceNodes, AdminStates waitForState)
specifier|protected
name|List
argument_list|<
name|DatanodeInfo
argument_list|>
name|takeNodeOutofService
parameter_list|(
name|int
name|nnIndex
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|dataNodeUuids
parameter_list|,
name|long
name|maintenanceExpirationInMS
parameter_list|,
name|List
argument_list|<
name|DatanodeInfo
argument_list|>
name|decommissionedNodes
parameter_list|,
name|Map
argument_list|<
name|DatanodeInfo
argument_list|,
name|Long
argument_list|>
name|inMaintenanceNodes
parameter_list|,
name|AdminStates
name|waitForState
parameter_list|)
throws|throws
name|IOException
block|{
name|DFSClient
name|client
init|=
name|getDfsClient
argument_list|(
name|nnIndex
argument_list|)
decl_stmt|;
name|DatanodeInfo
index|[]
name|info
init|=
name|client
operator|.
name|datanodeReport
argument_list|(
name|DatanodeReportType
operator|.
name|ALL
argument_list|)
decl_stmt|;
name|boolean
name|isDecommissionRequest
init|=
name|waitForState
operator|==
name|AdminStates
operator|.
name|DECOMMISSION_INPROGRESS
operator|||
name|waitForState
operator|==
name|AdminStates
operator|.
name|DECOMMISSIONED
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|dataNodeNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DatanodeInfo
argument_list|>
name|datanodeInfos
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// pick one DataNode randomly unless the caller specifies one.
if|if
condition|(
name|dataNodeUuids
operator|==
literal|null
condition|)
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|found
condition|)
block|{
name|int
name|index
init|=
name|myrand
operator|.
name|nextInt
argument_list|(
name|info
operator|.
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|isDecommissionRequest
operator|&&
operator|!
name|info
index|[
name|index
index|]
operator|.
name|isDecommissioned
argument_list|()
operator|)
operator|||
operator|(
operator|!
name|isDecommissionRequest
operator|&&
operator|!
name|info
index|[
name|index
index|]
operator|.
name|isInMaintenance
argument_list|()
operator|)
condition|)
block|{
name|dataNodeNames
operator|.
name|add
argument_list|(
name|info
index|[
name|index
index|]
operator|.
name|getXferAddr
argument_list|()
argument_list|)
expr_stmt|;
name|datanodeInfos
operator|.
name|add
argument_list|(
name|NameNodeAdapter
operator|.
name|getDatanode
argument_list|(
name|cluster
operator|.
name|getNamesystem
argument_list|(
name|nnIndex
argument_list|)
argument_list|,
name|info
index|[
name|index
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// The caller specified a DataNode
for|for
control|(
name|String
name|datanodeUuid
range|:
name|dataNodeUuids
control|)
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|info
operator|.
name|length
condition|;
name|index
operator|++
control|)
block|{
if|if
condition|(
name|info
index|[
name|index
index|]
operator|.
name|getDatanodeUuid
argument_list|()
operator|.
name|equals
argument_list|(
name|datanodeUuid
argument_list|)
condition|)
block|{
name|dataNodeNames
operator|.
name|add
argument_list|(
name|info
index|[
name|index
index|]
operator|.
name|getXferAddr
argument_list|()
argument_list|)
expr_stmt|;
name|datanodeInfos
operator|.
name|add
argument_list|(
name|NameNodeAdapter
operator|.
name|getDatanode
argument_list|(
name|cluster
operator|.
name|getNamesystem
argument_list|(
name|nnIndex
argument_list|)
argument_list|,
name|info
index|[
name|index
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"invalid datanodeUuid "
operator|+
name|datanodeUuid
argument_list|)
throw|;
block|}
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Taking node: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|dataNodeNames
operator|.
name|toArray
argument_list|()
argument_list|)
operator|+
literal|" out of service"
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|decommissionNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|decommissionedNodes
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|DatanodeInfo
name|dn
range|:
name|decommissionedNodes
control|)
block|{
name|decommissionNodes
operator|.
name|add
argument_list|(
name|dn
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|maintenanceNodes
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|inMaintenanceNodes
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|DatanodeInfo
argument_list|,
name|Long
argument_list|>
name|dn
range|:
name|inMaintenanceNodes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|maintenanceNodes
operator|.
name|put
argument_list|(
name|dn
operator|.
name|getKey
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|dn
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isDecommissionRequest
condition|)
block|{
for|for
control|(
name|String
name|dataNodeName
range|:
name|dataNodeNames
control|)
block|{
name|decommissionNodes
operator|.
name|add
argument_list|(
name|dataNodeName
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|String
name|dataNodeName
range|:
name|dataNodeNames
control|)
block|{
name|maintenanceNodes
operator|.
name|put
argument_list|(
name|dataNodeName
argument_list|,
name|maintenanceExpirationInMS
argument_list|)
expr_stmt|;
block|}
block|}
comment|// write node names into the json host file.
name|hostsFileWriter
operator|.
name|initOutOfServiceHosts
argument_list|(
name|decommissionNodes
argument_list|,
name|maintenanceNodes
argument_list|)
expr_stmt|;
name|refreshNodes
argument_list|(
name|nnIndex
argument_list|)
expr_stmt|;
name|waitNodeState
argument_list|(
name|datanodeInfos
argument_list|,
name|waitForState
argument_list|)
expr_stmt|;
return|return
name|datanodeInfos
return|;
block|}
comment|/* Ask a specific NN to put the datanode in service and wait for it    * to reach the NORMAL state.    */
DECL|method|putNodeInService (int nnIndex, DatanodeInfo outOfServiceNode)
specifier|protected
name|void
name|putNodeInService
parameter_list|(
name|int
name|nnIndex
parameter_list|,
name|DatanodeInfo
name|outOfServiceNode
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Putting node: "
operator|+
name|outOfServiceNode
operator|+
literal|" in service"
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|decommissionNodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|maintenanceNodes
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|DatanodeManager
name|dm
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|(
name|nnIndex
argument_list|)
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|nodes
init|=
name|dm
operator|.
name|getDatanodeListForReport
argument_list|(
name|DatanodeReportType
operator|.
name|ALL
argument_list|)
decl_stmt|;
for|for
control|(
name|DatanodeDescriptor
name|node
range|:
name|nodes
control|)
block|{
if|if
condition|(
name|node
operator|.
name|isMaintenance
argument_list|()
condition|)
block|{
name|maintenanceNodes
operator|.
name|put
argument_list|(
name|node
operator|.
name|getName
argument_list|()
argument_list|,
name|node
operator|.
name|getMaintenanceExpireTimeInMS
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|node
operator|.
name|isDecommissionInProgress
argument_list|()
operator|||
name|node
operator|.
name|isDecommissioned
argument_list|()
condition|)
block|{
name|decommissionNodes
operator|.
name|add
argument_list|(
name|node
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|decommissionNodes
operator|.
name|remove
argument_list|(
name|outOfServiceNode
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|maintenanceNodes
operator|.
name|remove
argument_list|(
name|outOfServiceNode
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|hostsFileWriter
operator|.
name|initOutOfServiceHosts
argument_list|(
name|decommissionNodes
argument_list|,
name|maintenanceNodes
argument_list|)
expr_stmt|;
name|refreshNodes
argument_list|(
name|nnIndex
argument_list|)
expr_stmt|;
name|waitNodeState
argument_list|(
name|outOfServiceNode
argument_list|,
name|AdminStates
operator|.
name|NORMAL
argument_list|)
expr_stmt|;
block|}
DECL|method|putNodeInService (int nnIndex, String datanodeUuid)
specifier|protected
name|void
name|putNodeInService
parameter_list|(
name|int
name|nnIndex
parameter_list|,
name|String
name|datanodeUuid
parameter_list|)
throws|throws
name|IOException
block|{
name|DatanodeInfo
name|datanodeInfo
init|=
name|getDatanodeDesriptor
argument_list|(
name|cluster
operator|.
name|getNamesystem
argument_list|(
name|nnIndex
argument_list|)
argument_list|,
name|datanodeUuid
argument_list|)
decl_stmt|;
name|putNodeInService
argument_list|(
name|nnIndex
argument_list|,
name|datanodeInfo
argument_list|)
expr_stmt|;
block|}
comment|/**    * Wait till DataNode is transitioned to the expected state.    */
DECL|method|waitNodeState (DatanodeInfo node, AdminStates state)
specifier|protected
name|void
name|waitNodeState
parameter_list|(
name|DatanodeInfo
name|node
parameter_list|,
name|AdminStates
name|state
parameter_list|)
block|{
name|waitNodeState
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|node
argument_list|)
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
comment|/**    * Wait till all DataNodes are transitioned to the expected state.    */
DECL|method|waitNodeState (List<DatanodeInfo> nodes, AdminStates state)
specifier|protected
name|void
name|waitNodeState
parameter_list|(
name|List
argument_list|<
name|DatanodeInfo
argument_list|>
name|nodes
parameter_list|,
name|AdminStates
name|state
parameter_list|)
block|{
for|for
control|(
name|DatanodeInfo
name|node
range|:
name|nodes
control|)
block|{
name|boolean
name|done
init|=
operator|(
name|state
operator|==
name|node
operator|.
name|getAdminState
argument_list|()
operator|)
decl_stmt|;
while|while
condition|(
operator|!
name|done
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for node "
operator|+
name|node
operator|+
literal|" to change state to "
operator|+
name|state
operator|+
literal|" current state: "
operator|+
name|node
operator|.
name|getAdminState
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|HEARTBEAT_INTERVAL
operator|*
literal|500
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// nothing
block|}
name|done
operator|=
operator|(
name|state
operator|==
name|node
operator|.
name|getAdminState
argument_list|()
operator|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"node "
operator|+
name|node
operator|+
literal|" reached the state "
operator|+
name|state
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|initIncludeHost (String hostNameAndPort)
specifier|protected
name|void
name|initIncludeHost
parameter_list|(
name|String
name|hostNameAndPort
parameter_list|)
throws|throws
name|IOException
block|{
name|hostsFileWriter
operator|.
name|initIncludeHost
argument_list|(
name|hostNameAndPort
argument_list|)
expr_stmt|;
block|}
DECL|method|initIncludeHosts (String[] hostNameAndPorts)
specifier|protected
name|void
name|initIncludeHosts
parameter_list|(
name|String
index|[]
name|hostNameAndPorts
parameter_list|)
throws|throws
name|IOException
block|{
name|hostsFileWriter
operator|.
name|initIncludeHosts
argument_list|(
name|hostNameAndPorts
argument_list|)
expr_stmt|;
block|}
DECL|method|initExcludeHost (String hostNameAndPort)
specifier|protected
name|void
name|initExcludeHost
parameter_list|(
name|String
name|hostNameAndPort
parameter_list|)
throws|throws
name|IOException
block|{
name|hostsFileWriter
operator|.
name|initExcludeHost
argument_list|(
name|hostNameAndPort
argument_list|)
expr_stmt|;
block|}
DECL|method|initExcludeHosts (List<String> hostNameAndPorts)
specifier|protected
name|void
name|initExcludeHosts
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|hostNameAndPorts
parameter_list|)
throws|throws
name|IOException
block|{
name|hostsFileWriter
operator|.
name|initExcludeHosts
argument_list|(
name|hostNameAndPorts
argument_list|)
expr_stmt|;
block|}
comment|/* Get DFSClient to the namenode */
DECL|method|getDfsClient (final int nnIndex)
specifier|protected
name|DFSClient
name|getDfsClient
parameter_list|(
specifier|final
name|int
name|nnIndex
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|DFSClient
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|(
name|nnIndex
argument_list|)
operator|.
name|getNameNodeAddress
argument_list|()
argument_list|,
name|conf
argument_list|)
return|;
block|}
comment|/* Validate cluster has expected number of datanodes */
DECL|method|validateCluster (DFSClient client, int numDNs)
specifier|protected
specifier|static
name|void
name|validateCluster
parameter_list|(
name|DFSClient
name|client
parameter_list|,
name|int
name|numDNs
parameter_list|)
throws|throws
name|IOException
block|{
name|DatanodeInfo
index|[]
name|info
init|=
name|client
operator|.
name|datanodeReport
argument_list|(
name|DatanodeReportType
operator|.
name|LIVE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Number of Datanodes "
argument_list|,
name|numDNs
argument_list|,
name|info
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|/** Start a MiniDFSCluster.    * @throws IOException */
DECL|method|startCluster (int numNameNodes, int numDatanodes, boolean setupHostsFile, long[] nodesCapacity, boolean checkDataNodeHostConfig)
specifier|protected
name|void
name|startCluster
parameter_list|(
name|int
name|numNameNodes
parameter_list|,
name|int
name|numDatanodes
parameter_list|,
name|boolean
name|setupHostsFile
parameter_list|,
name|long
index|[]
name|nodesCapacity
parameter_list|,
name|boolean
name|checkDataNodeHostConfig
parameter_list|)
throws|throws
name|IOException
block|{
name|startCluster
argument_list|(
name|numNameNodes
argument_list|,
name|numDatanodes
argument_list|,
name|setupHostsFile
argument_list|,
name|nodesCapacity
argument_list|,
name|checkDataNodeHostConfig
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|startCluster (int numNameNodes, int numDatanodes, boolean setupHostsFile, long[] nodesCapacity, boolean checkDataNodeHostConfig, boolean federation)
specifier|protected
name|void
name|startCluster
parameter_list|(
name|int
name|numNameNodes
parameter_list|,
name|int
name|numDatanodes
parameter_list|,
name|boolean
name|setupHostsFile
parameter_list|,
name|long
index|[]
name|nodesCapacity
parameter_list|,
name|boolean
name|checkDataNodeHostConfig
parameter_list|,
name|boolean
name|federation
parameter_list|)
throws|throws
name|IOException
block|{
name|MiniDFSCluster
operator|.
name|Builder
name|builder
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDatanodes
argument_list|)
decl_stmt|;
if|if
condition|(
name|federation
condition|)
block|{
name|builder
operator|.
name|nnTopology
argument_list|(
name|MiniDFSNNTopology
operator|.
name|simpleFederatedTopology
argument_list|(
name|numNameNodes
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|setupHostsFile
condition|)
block|{
name|builder
operator|.
name|setupHostsFile
argument_list|(
name|setupHostsFile
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nodesCapacity
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|simulatedCapacities
argument_list|(
name|nodesCapacity
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|checkDataNodeHostConfig
condition|)
block|{
name|builder
operator|.
name|checkDataNodeHostConfig
argument_list|(
name|checkDataNodeHostConfig
argument_list|)
expr_stmt|;
block|}
name|cluster
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numNameNodes
condition|;
name|i
operator|++
control|)
block|{
name|DFSClient
name|client
init|=
name|getDfsClient
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|validateCluster
argument_list|(
name|client
argument_list|,
name|numDatanodes
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|startCluster (int numNameNodes, int numDatanodes)
specifier|protected
name|void
name|startCluster
parameter_list|(
name|int
name|numNameNodes
parameter_list|,
name|int
name|numDatanodes
parameter_list|)
throws|throws
name|IOException
block|{
name|startCluster
argument_list|(
name|numNameNodes
argument_list|,
name|numDatanodes
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|startSimpleCluster (int numNameNodes, int numDatanodes)
specifier|protected
name|void
name|startSimpleCluster
parameter_list|(
name|int
name|numNameNodes
parameter_list|,
name|int
name|numDatanodes
parameter_list|)
throws|throws
name|IOException
block|{
name|startCluster
argument_list|(
name|numNameNodes
argument_list|,
name|numDatanodes
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|startSimpleHACluster (int numDatanodes)
specifier|protected
name|void
name|startSimpleHACluster
parameter_list|(
name|int
name|numDatanodes
parameter_list|)
throws|throws
name|IOException
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|nnTopology
argument_list|(
name|MiniDFSNNTopology
operator|.
name|simpleHATopology
argument_list|()
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDatanodes
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
block|}
DECL|method|shutdownCluster ()
specifier|protected
name|void
name|shutdownCluster
parameter_list|()
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|refreshNodes (final int nnIndex)
specifier|protected
name|void
name|refreshNodes
parameter_list|(
specifier|final
name|int
name|nnIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|cluster
operator|.
name|getNamesystem
argument_list|(
name|nnIndex
argument_list|)
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|refreshNodes
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|getDatanodeDesriptor ( final FSNamesystem ns, final String datanodeUuid)
specifier|static
specifier|private
name|DatanodeDescriptor
name|getDatanodeDesriptor
parameter_list|(
specifier|final
name|FSNamesystem
name|ns
parameter_list|,
specifier|final
name|String
name|datanodeUuid
parameter_list|)
block|{
return|return
name|ns
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getDatanode
argument_list|(
name|datanodeUuid
argument_list|)
return|;
block|}
DECL|method|cleanupFile (FileSystem fileSys, Path name)
specifier|static
specifier|public
name|void
name|cleanupFile
parameter_list|(
name|FileSystem
name|fileSys
parameter_list|,
name|Path
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
name|fileSys
operator|.
name|exists
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|fileSys
operator|.
name|delete
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|fileSys
operator|.
name|exists
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

