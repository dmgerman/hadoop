begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_CACHEREPORT_INTERVAL_MSEC_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_MAX_LOCKED_MEMORY_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_HEARTBEAT_INTERVAL_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_PATH_BASED_CACHE_REFRESH_INTERVAL_MS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CachePoolInfo
operator|.
name|RELATIVE_EXPIRY_NEVER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
operator|.
name|assertExceptionContains
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|time
operator|.
name|DateUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BlockLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CacheFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystemTestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FsTracer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|InvalidRequestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RemoteIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|BlockReaderTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CacheDirectiveEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CacheDirectiveInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CacheDirectiveInfo
operator|.
name|Expiration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CacheDirectiveIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CacheDirectiveStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CachePoolEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CachePoolInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CachePoolStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|DatanodeReportType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|SafeModeAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|CacheReplicationMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeDescriptor
operator|.
name|CachedBlocksList
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNodeTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamenodeProtocols
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|nativeio
operator|.
name|NativeIO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|nativeio
operator|.
name|NativeIO
operator|.
name|POSIX
operator|.
name|CacheManipulator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|nativeio
operator|.
name|NativeIO
operator|.
name|POSIX
operator|.
name|NoMlockCacheManipulator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|GSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_class
DECL|class|TestCacheDirectives
specifier|public
class|class
name|TestCacheDirectives
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestCacheDirectives
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|unprivilegedUser
specifier|private
specifier|static
specifier|final
name|UserGroupInformation
name|unprivilegedUser
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"unprivilegedUser"
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|static
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|cluster
specifier|static
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|dfs
specifier|static
specifier|private
name|DistributedFileSystem
name|dfs
decl_stmt|;
DECL|field|proto
specifier|static
specifier|private
name|NamenodeProtocols
name|proto
decl_stmt|;
DECL|field|namenode
specifier|static
specifier|private
name|NameNode
name|namenode
decl_stmt|;
DECL|field|prevCacheManipulator
specifier|static
specifier|private
name|CacheManipulator
name|prevCacheManipulator
decl_stmt|;
static|static
block|{
name|NativeIO
operator|.
name|POSIX
operator|.
name|setCacheManipulator
argument_list|(
operator|new
name|NoMlockCacheManipulator
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|field|BLOCK_SIZE
specifier|private
specifier|static
specifier|final
name|long
name|BLOCK_SIZE
init|=
literal|4096
decl_stmt|;
DECL|field|NUM_DATANODES
specifier|private
specifier|static
specifier|final
name|int
name|NUM_DATANODES
init|=
literal|4
decl_stmt|;
comment|// Most Linux installs will allow non-root users to lock 64KB.
comment|// In this test though, we stub out mlock so this doesn't matter.
DECL|field|CACHE_CAPACITY
specifier|private
specifier|static
specifier|final
name|long
name|CACHE_CAPACITY
init|=
literal|64
operator|*
literal|1024
operator|/
name|NUM_DATANODES
decl_stmt|;
DECL|method|createCachingConf ()
specifier|private
specifier|static
name|HdfsConfiguration
name|createCachingConf
parameter_list|()
block|{
name|HdfsConfiguration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFS_DATANODE_MAX_LOCKED_MEMORY_KEY
argument_list|,
name|CACHE_CAPACITY
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFS_CACHEREPORT_INTERVAL_MSEC_KEY
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFS_NAMENODE_PATH_BASED_CACHE_REFRESH_INTERVAL_MS
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
comment|// set low limits here for testing purposes
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_LIST_CACHE_POOLS_NUM_RESPONSES
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_LIST_CACHE_DIRECTIVES_NUM_RESPONSES
argument_list|,
literal|2
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
name|createCachingConf
argument_list|()
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|NUM_DATANODES
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|dfs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|proto
operator|=
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
expr_stmt|;
name|namenode
operator|=
name|cluster
operator|.
name|getNameNode
argument_list|()
expr_stmt|;
name|prevCacheManipulator
operator|=
name|NativeIO
operator|.
name|POSIX
operator|.
name|getCacheManipulator
argument_list|()
expr_stmt|;
name|NativeIO
operator|.
name|POSIX
operator|.
name|setCacheManipulator
argument_list|(
operator|new
name|NoMlockCacheManipulator
argument_list|()
argument_list|)
expr_stmt|;
name|BlockReaderTestUtil
operator|.
name|enableHdfsCachingTracing
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Remove cache directives left behind by tests so that we release mmaps.
name|RemoteIterator
argument_list|<
name|CacheDirectiveEntry
argument_list|>
name|iter
init|=
name|dfs
operator|.
name|listCacheDirectives
argument_list|(
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|dfs
operator|.
name|removeCacheDirective
argument_list|(
name|iter
operator|.
name|next
argument_list|()
operator|.
name|getInfo
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|waitForCachedBlocks
argument_list|(
name|namenode
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"teardown"
argument_list|)
expr_stmt|;
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
comment|// Restore the original CacheManipulator
name|NativeIO
operator|.
name|POSIX
operator|.
name|setCacheManipulator
argument_list|(
name|prevCacheManipulator
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testBasicPoolOperations ()
specifier|public
name|void
name|testBasicPoolOperations
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|poolName
init|=
literal|"pool1"
decl_stmt|;
name|CachePoolInfo
name|info
init|=
operator|new
name|CachePoolInfo
argument_list|(
name|poolName
argument_list|)
operator|.
name|setOwnerName
argument_list|(
literal|"bob"
argument_list|)
operator|.
name|setGroupName
argument_list|(
literal|"bobgroup"
argument_list|)
operator|.
name|setMode
argument_list|(
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0755
argument_list|)
argument_list|)
operator|.
name|setLimit
argument_list|(
literal|150l
argument_list|)
decl_stmt|;
comment|// Add a pool
name|dfs
operator|.
name|addCachePool
argument_list|(
name|info
argument_list|)
expr_stmt|;
comment|// Do some bad addCachePools
try|try
block|{
name|dfs
operator|.
name|addCachePool
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"added the pool with the same name twice"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"pool1 already exists"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|dfs
operator|.
name|addCachePool
argument_list|(
operator|new
name|CachePoolInfo
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"added empty pool"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"invalid empty cache pool name"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|dfs
operator|.
name|addCachePool
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"added null pool"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"CachePoolInfo is null"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|proto
operator|.
name|addCachePool
argument_list|(
operator|new
name|CachePoolInfo
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"added empty pool"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"invalid empty cache pool name"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|proto
operator|.
name|addCachePool
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"added null pool"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"CachePoolInfo is null"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
comment|// Modify the pool
name|info
operator|.
name|setOwnerName
argument_list|(
literal|"jane"
argument_list|)
operator|.
name|setGroupName
argument_list|(
literal|"janegroup"
argument_list|)
operator|.
name|setMode
argument_list|(
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0700
argument_list|)
argument_list|)
operator|.
name|setLimit
argument_list|(
literal|314l
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|modifyCachePool
argument_list|(
name|info
argument_list|)
expr_stmt|;
comment|// Do some invalid modify pools
try|try
block|{
name|dfs
operator|.
name|modifyCachePool
argument_list|(
operator|new
name|CachePoolInfo
argument_list|(
literal|"fool"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"modified non-existent cache pool"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"fool does not exist"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|dfs
operator|.
name|modifyCachePool
argument_list|(
operator|new
name|CachePoolInfo
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"modified empty pool"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"invalid empty cache pool name"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|dfs
operator|.
name|modifyCachePool
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"modified null pool"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"CachePoolInfo is null"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|proto
operator|.
name|modifyCachePool
argument_list|(
operator|new
name|CachePoolInfo
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"modified empty pool"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"invalid empty cache pool name"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|proto
operator|.
name|modifyCachePool
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"modified null pool"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"CachePoolInfo is null"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
comment|// Remove the pool
name|dfs
operator|.
name|removeCachePool
argument_list|(
name|poolName
argument_list|)
expr_stmt|;
comment|// Do some bad removePools
try|try
block|{
name|dfs
operator|.
name|removeCachePool
argument_list|(
literal|"pool99"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected to get an exception when "
operator|+
literal|"removing a non-existent pool."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Cannot remove "
operator|+
literal|"non-existent cache pool"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|dfs
operator|.
name|removeCachePool
argument_list|(
name|poolName
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected to get an exception when "
operator|+
literal|"removing a non-existent pool."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Cannot remove "
operator|+
literal|"non-existent cache pool"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|dfs
operator|.
name|removeCachePool
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"removed empty pool"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"invalid empty cache pool name"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|dfs
operator|.
name|removeCachePool
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"removed null pool"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"invalid empty cache pool name"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|proto
operator|.
name|removeCachePool
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"removed empty pool"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"invalid empty cache pool name"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|proto
operator|.
name|removeCachePool
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"removed null pool"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"invalid empty cache pool name"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
name|info
operator|=
operator|new
name|CachePoolInfo
argument_list|(
literal|"pool2"
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|addCachePool
argument_list|(
name|info
argument_list|)
expr_stmt|;
comment|// Perform cache pool operations using a closed file system.
name|DistributedFileSystem
name|dfs1
init|=
operator|(
name|DistributedFileSystem
operator|)
name|cluster
operator|.
name|getNewFileSystemInstance
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|dfs1
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|dfs1
operator|.
name|listCachePools
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"listCachePools using a closed filesystem!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Filesystem closed"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|dfs1
operator|.
name|addCachePool
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"addCachePool using a closed filesystem!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Filesystem closed"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|dfs1
operator|.
name|modifyCachePool
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"modifyCachePool using a closed filesystem!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Filesystem closed"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|dfs1
operator|.
name|removeCachePool
argument_list|(
name|poolName
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"removeCachePool using a closed filesystem!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Filesystem closed"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testCreateAndModifyPools ()
specifier|public
name|void
name|testCreateAndModifyPools
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|poolName
init|=
literal|"pool1"
decl_stmt|;
name|String
name|ownerName
init|=
literal|"abc"
decl_stmt|;
name|String
name|groupName
init|=
literal|"123"
decl_stmt|;
name|FsPermission
name|mode
init|=
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0755
argument_list|)
decl_stmt|;
name|long
name|limit
init|=
literal|150
decl_stmt|;
name|dfs
operator|.
name|addCachePool
argument_list|(
operator|new
name|CachePoolInfo
argument_list|(
name|poolName
argument_list|)
operator|.
name|setOwnerName
argument_list|(
name|ownerName
argument_list|)
operator|.
name|setGroupName
argument_list|(
name|groupName
argument_list|)
operator|.
name|setMode
argument_list|(
name|mode
argument_list|)
operator|.
name|setLimit
argument_list|(
name|limit
argument_list|)
argument_list|)
expr_stmt|;
name|RemoteIterator
argument_list|<
name|CachePoolEntry
argument_list|>
name|iter
init|=
name|dfs
operator|.
name|listCachePools
argument_list|()
decl_stmt|;
name|CachePoolInfo
name|info
init|=
name|iter
operator|.
name|next
argument_list|()
operator|.
name|getInfo
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|poolName
argument_list|,
name|info
operator|.
name|getPoolName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ownerName
argument_list|,
name|info
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|groupName
argument_list|,
name|info
operator|.
name|getGroupName
argument_list|()
argument_list|)
expr_stmt|;
name|ownerName
operator|=
literal|"def"
expr_stmt|;
name|groupName
operator|=
literal|"456"
expr_stmt|;
name|mode
operator|=
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0700
argument_list|)
expr_stmt|;
name|limit
operator|=
literal|151
expr_stmt|;
name|dfs
operator|.
name|modifyCachePool
argument_list|(
operator|new
name|CachePoolInfo
argument_list|(
name|poolName
argument_list|)
operator|.
name|setOwnerName
argument_list|(
name|ownerName
argument_list|)
operator|.
name|setGroupName
argument_list|(
name|groupName
argument_list|)
operator|.
name|setMode
argument_list|(
name|mode
argument_list|)
operator|.
name|setLimit
argument_list|(
name|limit
argument_list|)
argument_list|)
expr_stmt|;
name|iter
operator|=
name|dfs
operator|.
name|listCachePools
argument_list|()
expr_stmt|;
name|info
operator|=
name|iter
operator|.
name|next
argument_list|()
operator|.
name|getInfo
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|poolName
argument_list|,
name|info
operator|.
name|getPoolName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ownerName
argument_list|,
name|info
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|groupName
argument_list|,
name|info
operator|.
name|getGroupName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mode
argument_list|,
name|info
operator|.
name|getMode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|limit
argument_list|,
operator|(
name|long
operator|)
name|info
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|removeCachePool
argument_list|(
name|poolName
argument_list|)
expr_stmt|;
name|iter
operator|=
name|dfs
operator|.
name|listCachePools
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"expected no cache pools after deleting pool"
argument_list|,
name|iter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|proto
operator|.
name|listCachePools
argument_list|(
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|proto
operator|.
name|removeCachePool
argument_list|(
literal|"pool99"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected to get an exception when "
operator|+
literal|"removing a non-existent pool."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Cannot remove non-existent"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|proto
operator|.
name|removeCachePool
argument_list|(
name|poolName
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected to get an exception when "
operator|+
literal|"removing a non-existent pool."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Cannot remove non-existent"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
name|iter
operator|=
name|dfs
operator|.
name|listCachePools
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"expected no cache pools after deleting pool"
argument_list|,
name|iter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|validateListAll ( RemoteIterator<CacheDirectiveEntry> iter, Long... ids)
specifier|private
specifier|static
name|void
name|validateListAll
parameter_list|(
name|RemoteIterator
argument_list|<
name|CacheDirectiveEntry
argument_list|>
name|iter
parameter_list|,
name|Long
modifier|...
name|ids
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|Long
name|id
range|:
name|ids
control|)
block|{
name|assertTrue
argument_list|(
literal|"Unexpectedly few elements"
argument_list|,
name|iter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected directive ID"
argument_list|,
name|id
argument_list|,
name|iter
operator|.
name|next
argument_list|()
operator|.
name|getInfo
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
literal|"Unexpectedly many list elements"
argument_list|,
name|iter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|addAsUnprivileged ( final CacheDirectiveInfo directive)
specifier|private
specifier|static
name|long
name|addAsUnprivileged
parameter_list|(
specifier|final
name|CacheDirectiveInfo
name|directive
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|unprivilegedUser
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Long
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Long
name|run
parameter_list|()
throws|throws
name|IOException
block|{
name|DistributedFileSystem
name|myDfs
init|=
operator|(
name|DistributedFileSystem
operator|)
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
return|return
name|myDfs
operator|.
name|addCacheDirective
argument_list|(
name|directive
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testAddRemoveDirectives ()
specifier|public
name|void
name|testAddRemoveDirectives
parameter_list|()
throws|throws
name|Exception
block|{
name|proto
operator|.
name|addCachePool
argument_list|(
operator|new
name|CachePoolInfo
argument_list|(
literal|"pool1"
argument_list|)
operator|.
name|setMode
argument_list|(
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|proto
operator|.
name|addCachePool
argument_list|(
operator|new
name|CachePoolInfo
argument_list|(
literal|"pool2"
argument_list|)
operator|.
name|setMode
argument_list|(
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|proto
operator|.
name|addCachePool
argument_list|(
operator|new
name|CachePoolInfo
argument_list|(
literal|"pool3"
argument_list|)
operator|.
name|setMode
argument_list|(
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|proto
operator|.
name|addCachePool
argument_list|(
operator|new
name|CachePoolInfo
argument_list|(
literal|"pool4"
argument_list|)
operator|.
name|setMode
argument_list|(
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|CacheDirectiveInfo
name|alpha
init|=
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setPath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/alpha"
argument_list|)
argument_list|)
operator|.
name|setPool
argument_list|(
literal|"pool1"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|CacheDirectiveInfo
name|beta
init|=
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setPath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/beta"
argument_list|)
argument_list|)
operator|.
name|setPool
argument_list|(
literal|"pool2"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|CacheDirectiveInfo
name|delta
init|=
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setPath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/delta"
argument_list|)
argument_list|)
operator|.
name|setPool
argument_list|(
literal|"pool1"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|long
name|alphaId
init|=
name|addAsUnprivileged
argument_list|(
name|alpha
argument_list|)
decl_stmt|;
name|long
name|alphaId2
init|=
name|addAsUnprivileged
argument_list|(
name|alpha
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Expected to get unique directives when re-adding an "
operator|+
literal|"existing CacheDirectiveInfo"
argument_list|,
name|alphaId
operator|==
name|alphaId2
argument_list|)
expr_stmt|;
name|long
name|betaId
init|=
name|addAsUnprivileged
argument_list|(
name|beta
argument_list|)
decl_stmt|;
try|try
block|{
name|addAsUnprivileged
argument_list|(
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setPath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/unicorn"
argument_list|)
argument_list|)
operator|.
name|setPool
argument_list|(
literal|"no_such_pool"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected an error when adding to a non-existent pool."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidRequestException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Unknown pool"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|addAsUnprivileged
argument_list|(
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setPath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/blackhole"
argument_list|)
argument_list|)
operator|.
name|setPool
argument_list|(
literal|"pool4"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected an error when adding to a pool with "
operator|+
literal|"mode 0 (no permissions for anyone)."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Permission denied while accessing pool"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|addAsUnprivileged
argument_list|(
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setPath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/illegal:path/"
argument_list|)
argument_list|)
operator|.
name|setPool
argument_list|(
literal|"pool1"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected an error when adding a malformed path "
operator|+
literal|"to the cache directives."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"is not a valid DFS filename"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|addAsUnprivileged
argument_list|(
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setPath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/emptypoolname"
argument_list|)
argument_list|)
operator|.
name|setReplication
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
operator|.
name|setPool
argument_list|(
literal|""
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected an error when adding a cache "
operator|+
literal|"directive with an empty pool name."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidRequestException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Invalid empty pool name"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|long
name|deltaId
init|=
name|addAsUnprivileged
argument_list|(
name|delta
argument_list|)
decl_stmt|;
comment|// We expect the following to succeed, because DistributedFileSystem
comment|// qualifies the path.
name|long
name|relativeId
init|=
name|addAsUnprivileged
argument_list|(
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setPath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"relative"
argument_list|)
argument_list|)
operator|.
name|setPool
argument_list|(
literal|"pool1"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|RemoteIterator
argument_list|<
name|CacheDirectiveEntry
argument_list|>
name|iter
decl_stmt|;
name|iter
operator|=
name|dfs
operator|.
name|listCacheDirectives
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|validateListAll
argument_list|(
name|iter
argument_list|,
name|alphaId
argument_list|,
name|alphaId2
argument_list|,
name|betaId
argument_list|,
name|deltaId
argument_list|,
name|relativeId
argument_list|)
expr_stmt|;
name|iter
operator|=
name|dfs
operator|.
name|listCacheDirectives
argument_list|(
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setPool
argument_list|(
literal|"pool3"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|iter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|iter
operator|=
name|dfs
operator|.
name|listCacheDirectives
argument_list|(
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setPool
argument_list|(
literal|"pool1"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|validateListAll
argument_list|(
name|iter
argument_list|,
name|alphaId
argument_list|,
name|alphaId2
argument_list|,
name|deltaId
argument_list|,
name|relativeId
argument_list|)
expr_stmt|;
name|iter
operator|=
name|dfs
operator|.
name|listCacheDirectives
argument_list|(
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setPool
argument_list|(
literal|"pool2"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|validateListAll
argument_list|(
name|iter
argument_list|,
name|betaId
argument_list|)
expr_stmt|;
name|iter
operator|=
name|dfs
operator|.
name|listCacheDirectives
argument_list|(
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setId
argument_list|(
name|alphaId2
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|validateListAll
argument_list|(
name|iter
argument_list|,
name|alphaId2
argument_list|)
expr_stmt|;
name|iter
operator|=
name|dfs
operator|.
name|listCacheDirectives
argument_list|(
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setId
argument_list|(
name|relativeId
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|validateListAll
argument_list|(
name|iter
argument_list|,
name|relativeId
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|removeCacheDirective
argument_list|(
name|betaId
argument_list|)
expr_stmt|;
name|iter
operator|=
name|dfs
operator|.
name|listCacheDirectives
argument_list|(
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setPool
argument_list|(
literal|"pool2"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|iter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|dfs
operator|.
name|removeCacheDirective
argument_list|(
name|betaId
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected an error when removing a non-existent ID"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidRequestException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"No directive with ID"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|proto
operator|.
name|removeCacheDirective
argument_list|(
operator|-
literal|42l
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected an error when removing a negative ID"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidRequestException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Invalid negative ID"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|proto
operator|.
name|removeCacheDirective
argument_list|(
literal|43l
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected an error when removing a non-existent ID"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidRequestException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"No directive with ID"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|dfs
operator|.
name|removeCacheDirective
argument_list|(
name|alphaId
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|removeCacheDirective
argument_list|(
name|alphaId2
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|removeCacheDirective
argument_list|(
name|deltaId
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|modifyCacheDirective
argument_list|(
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setId
argument_list|(
name|relativeId
argument_list|)
operator|.
name|setReplication
argument_list|(
operator|(
name|short
operator|)
literal|555
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|iter
operator|=
name|dfs
operator|.
name|listCacheDirectives
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|iter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|CacheDirectiveInfo
name|modified
init|=
name|iter
operator|.
name|next
argument_list|()
operator|.
name|getInfo
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|relativeId
argument_list|,
name|modified
operator|.
name|getId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|short
operator|)
literal|555
argument_list|,
name|modified
operator|.
name|getReplication
argument_list|()
operator|.
name|shortValue
argument_list|()
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|removeCacheDirective
argument_list|(
name|relativeId
argument_list|)
expr_stmt|;
name|iter
operator|=
name|dfs
operator|.
name|listCacheDirectives
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|iter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify that PBCDs with path "." work correctly
name|CacheDirectiveInfo
name|directive
init|=
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setPath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"."
argument_list|)
argument_list|)
operator|.
name|setPool
argument_list|(
literal|"pool1"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|long
name|id
init|=
name|dfs
operator|.
name|addCacheDirective
argument_list|(
name|directive
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|modifyCacheDirective
argument_list|(
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|(
name|directive
argument_list|)
operator|.
name|setId
argument_list|(
name|id
argument_list|)
operator|.
name|setReplication
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|removeCacheDirective
argument_list|(
name|id
argument_list|)
expr_stmt|;
comment|// Perform cache directive operations using a closed file system.
name|DistributedFileSystem
name|dfs1
init|=
operator|(
name|DistributedFileSystem
operator|)
name|cluster
operator|.
name|getNewFileSystemInstance
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|dfs1
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|dfs1
operator|.
name|listCacheDirectives
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"listCacheDirectives using a closed filesystem!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Filesystem closed"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|dfs1
operator|.
name|addCacheDirective
argument_list|(
name|alpha
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"addCacheDirective using a closed filesystem!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Filesystem closed"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|dfs1
operator|.
name|modifyCacheDirective
argument_list|(
name|alpha
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"modifyCacheDirective using a closed filesystem!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Filesystem closed"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|dfs1
operator|.
name|removeCacheDirective
argument_list|(
name|alphaId
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"removeCacheDirective using a closed filesystem!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Filesystem closed"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testCacheManagerRestart ()
specifier|public
name|void
name|testCacheManagerRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|SecondaryNameNode
name|secondary
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// Start a secondary namenode
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_KEY
argument_list|,
literal|"0.0.0.0:0"
argument_list|)
expr_stmt|;
name|secondary
operator|=
operator|new
name|SecondaryNameNode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Create and validate a pool
specifier|final
name|String
name|pool
init|=
literal|"poolparty"
decl_stmt|;
name|String
name|groupName
init|=
literal|"partygroup"
decl_stmt|;
name|FsPermission
name|mode
init|=
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
decl_stmt|;
name|long
name|limit
init|=
literal|747
decl_stmt|;
name|dfs
operator|.
name|addCachePool
argument_list|(
operator|new
name|CachePoolInfo
argument_list|(
name|pool
argument_list|)
operator|.
name|setGroupName
argument_list|(
name|groupName
argument_list|)
operator|.
name|setMode
argument_list|(
name|mode
argument_list|)
operator|.
name|setLimit
argument_list|(
name|limit
argument_list|)
argument_list|)
expr_stmt|;
name|RemoteIterator
argument_list|<
name|CachePoolEntry
argument_list|>
name|pit
init|=
name|dfs
operator|.
name|listCachePools
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"No cache pools found"
argument_list|,
name|pit
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|CachePoolInfo
name|info
init|=
name|pit
operator|.
name|next
argument_list|()
operator|.
name|getInfo
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|pool
argument_list|,
name|info
operator|.
name|getPoolName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|groupName
argument_list|,
name|info
operator|.
name|getGroupName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mode
argument_list|,
name|info
operator|.
name|getMode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|limit
argument_list|,
operator|(
name|long
operator|)
name|info
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Unexpected # of cache pools found"
argument_list|,
name|pit
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create some cache entries
name|int
name|numEntries
init|=
literal|10
decl_stmt|;
name|String
name|entryPrefix
init|=
literal|"/party-"
decl_stmt|;
name|long
name|prevId
init|=
operator|-
literal|1
decl_stmt|;
specifier|final
name|Date
name|expiry
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numEntries
condition|;
name|i
operator|++
control|)
block|{
name|prevId
operator|=
name|dfs
operator|.
name|addCacheDirective
argument_list|(
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setPath
argument_list|(
operator|new
name|Path
argument_list|(
name|entryPrefix
operator|+
name|i
argument_list|)
argument_list|)
operator|.
name|setPool
argument_list|(
name|pool
argument_list|)
operator|.
name|setExpiration
argument_list|(
name|CacheDirectiveInfo
operator|.
name|Expiration
operator|.
name|newAbsolute
argument_list|(
name|expiry
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|RemoteIterator
argument_list|<
name|CacheDirectiveEntry
argument_list|>
name|dit
init|=
name|dfs
operator|.
name|listCacheDirectives
argument_list|(
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numEntries
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
literal|"Unexpected # of cache entries: "
operator|+
name|i
argument_list|,
name|dit
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|CacheDirectiveInfo
name|cd
init|=
name|dit
operator|.
name|next
argument_list|()
operator|.
name|getInfo
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|i
operator|+
literal|1
argument_list|,
name|cd
operator|.
name|getId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|entryPrefix
operator|+
name|i
argument_list|,
name|cd
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pool
argument_list|,
name|cd
operator|.
name|getPool
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
literal|"Unexpected # of cache directives found"
argument_list|,
name|dit
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Checkpoint once to set some cache pools and directives on 2NN side
name|secondary
operator|.
name|doCheckpoint
argument_list|()
expr_stmt|;
comment|// Add some more CacheManager state
specifier|final
name|String
name|imagePool
init|=
literal|"imagePool"
decl_stmt|;
name|dfs
operator|.
name|addCachePool
argument_list|(
operator|new
name|CachePoolInfo
argument_list|(
name|imagePool
argument_list|)
argument_list|)
expr_stmt|;
name|prevId
operator|=
name|dfs
operator|.
name|addCacheDirective
argument_list|(
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setPath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/image"
argument_list|)
argument_list|)
operator|.
name|setPool
argument_list|(
name|imagePool
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|// Save a new image to force a fresh fsimage download
name|dfs
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|saveNamespace
argument_list|()
expr_stmt|;
name|dfs
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_LEAVE
argument_list|)
expr_stmt|;
comment|// Checkpoint again forcing a reload of FSN state
name|boolean
name|fetchImage
init|=
name|secondary
operator|.
name|doCheckpoint
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Secondary should have fetched a new fsimage from NameNode"
argument_list|,
name|fetchImage
argument_list|)
expr_stmt|;
comment|// Remove temp pool and directive
name|dfs
operator|.
name|removeCachePool
argument_list|(
name|imagePool
argument_list|)
expr_stmt|;
comment|// Restart namenode
name|cluster
operator|.
name|restartNameNode
argument_list|()
expr_stmt|;
comment|// Check that state came back up
name|pit
operator|=
name|dfs
operator|.
name|listCachePools
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"No cache pools found"
argument_list|,
name|pit
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|=
name|pit
operator|.
name|next
argument_list|()
operator|.
name|getInfo
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|pool
argument_list|,
name|info
operator|.
name|getPoolName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pool
argument_list|,
name|info
operator|.
name|getPoolName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|groupName
argument_list|,
name|info
operator|.
name|getGroupName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mode
argument_list|,
name|info
operator|.
name|getMode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|limit
argument_list|,
operator|(
name|long
operator|)
name|info
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Unexpected # of cache pools found"
argument_list|,
name|pit
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|dit
operator|=
name|dfs
operator|.
name|listCacheDirectives
argument_list|(
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numEntries
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
literal|"Unexpected # of cache entries: "
operator|+
name|i
argument_list|,
name|dit
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|CacheDirectiveInfo
name|cd
init|=
name|dit
operator|.
name|next
argument_list|()
operator|.
name|getInfo
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|i
operator|+
literal|1
argument_list|,
name|cd
operator|.
name|getId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|entryPrefix
operator|+
name|i
argument_list|,
name|cd
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pool
argument_list|,
name|cd
operator|.
name|getPool
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expiry
operator|.
name|getTime
argument_list|()
argument_list|,
name|cd
operator|.
name|getExpiration
argument_list|()
operator|.
name|getMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
literal|"Unexpected # of cache directives found"
argument_list|,
name|dit
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|nextId
init|=
name|dfs
operator|.
name|addCacheDirective
argument_list|(
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setPath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foobar"
argument_list|)
argument_list|)
operator|.
name|setPool
argument_list|(
name|pool
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|prevId
operator|+
literal|1
argument_list|,
name|nextId
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|secondary
operator|!=
literal|null
condition|)
block|{
name|secondary
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Wait for the NameNode to have an expected number of cached blocks    * and replicas.    * @param nn NameNode    * @param expectedCachedBlocks if -1, treat as wildcard    * @param expectedCachedReplicas if -1, treat as wildcard    * @throws Exception    */
DECL|method|waitForCachedBlocks (NameNode nn, final int expectedCachedBlocks, final int expectedCachedReplicas, final String logString)
specifier|private
specifier|static
name|void
name|waitForCachedBlocks
parameter_list|(
name|NameNode
name|nn
parameter_list|,
specifier|final
name|int
name|expectedCachedBlocks
parameter_list|,
specifier|final
name|int
name|expectedCachedReplicas
parameter_list|,
specifier|final
name|String
name|logString
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|FSNamesystem
name|namesystem
init|=
name|nn
operator|.
name|getNamesystem
argument_list|()
decl_stmt|;
specifier|final
name|CacheManager
name|cacheManager
init|=
name|namesystem
operator|.
name|getCacheManager
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for "
operator|+
name|expectedCachedBlocks
operator|+
literal|" blocks with "
operator|+
name|expectedCachedReplicas
operator|+
literal|" replicas."
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
name|int
name|numCachedBlocks
init|=
literal|0
decl_stmt|,
name|numCachedReplicas
init|=
literal|0
decl_stmt|;
name|namesystem
operator|.
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
name|GSet
argument_list|<
name|CachedBlock
argument_list|,
name|CachedBlock
argument_list|>
name|cachedBlocks
init|=
name|cacheManager
operator|.
name|getCachedBlocks
argument_list|()
decl_stmt|;
if|if
condition|(
name|cachedBlocks
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|CachedBlock
argument_list|>
name|iter
init|=
name|cachedBlocks
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CachedBlock
name|cachedBlock
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|numCachedBlocks
operator|++
expr_stmt|;
name|numCachedReplicas
operator|+=
name|cachedBlock
operator|.
name|getDatanodes
argument_list|(
name|Type
operator|.
name|CACHED
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|namesystem
operator|.
name|readUnlock
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|logString
operator|+
literal|" cached blocks: have "
operator|+
name|numCachedBlocks
operator|+
literal|" / "
operator|+
name|expectedCachedBlocks
operator|+
literal|".  "
operator|+
literal|"cached replicas: have "
operator|+
name|numCachedReplicas
operator|+
literal|" / "
operator|+
name|expectedCachedReplicas
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectedCachedBlocks
operator|==
operator|-
literal|1
operator|||
name|numCachedBlocks
operator|==
name|expectedCachedBlocks
condition|)
block|{
if|if
condition|(
name|expectedCachedReplicas
operator|==
operator|-
literal|1
operator|||
name|numCachedReplicas
operator|==
name|expectedCachedReplicas
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
argument_list|,
literal|500
argument_list|,
literal|60000
argument_list|)
expr_stmt|;
block|}
DECL|method|waitForCacheDirectiveStats (final DistributedFileSystem dfs, final long targetBytesNeeded, final long targetBytesCached, final long targetFilesNeeded, final long targetFilesCached, final CacheDirectiveInfo filter, final String infoString)
specifier|private
specifier|static
name|void
name|waitForCacheDirectiveStats
parameter_list|(
specifier|final
name|DistributedFileSystem
name|dfs
parameter_list|,
specifier|final
name|long
name|targetBytesNeeded
parameter_list|,
specifier|final
name|long
name|targetBytesCached
parameter_list|,
specifier|final
name|long
name|targetFilesNeeded
parameter_list|,
specifier|final
name|long
name|targetFilesCached
parameter_list|,
specifier|final
name|CacheDirectiveInfo
name|filter
parameter_list|,
specifier|final
name|String
name|infoString
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Polling listCacheDirectives "
operator|+
operator|(
operator|(
name|filter
operator|==
literal|null
operator|)
condition|?
literal|"ALL"
else|:
name|filter
operator|.
name|toString
argument_list|()
operator|)
operator|+
literal|" for "
operator|+
name|targetBytesNeeded
operator|+
literal|" targetBytesNeeded, "
operator|+
name|targetBytesCached
operator|+
literal|" targetBytesCached, "
operator|+
name|targetFilesNeeded
operator|+
literal|" targetFilesNeeded, "
operator|+
name|targetFilesCached
operator|+
literal|" targetFilesCached"
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
name|RemoteIterator
argument_list|<
name|CacheDirectiveEntry
argument_list|>
name|iter
init|=
literal|null
decl_stmt|;
name|CacheDirectiveEntry
name|entry
init|=
literal|null
decl_stmt|;
try|try
block|{
name|iter
operator|=
name|dfs
operator|.
name|listCacheDirectives
argument_list|(
name|filter
argument_list|)
expr_stmt|;
name|entry
operator|=
name|iter
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"got IOException while calling "
operator|+
literal|"listCacheDirectives: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|CacheDirectiveStats
name|stats
init|=
name|entry
operator|.
name|getStats
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|targetBytesNeeded
operator|==
name|stats
operator|.
name|getBytesNeeded
argument_list|()
operator|)
operator|&&
operator|(
name|targetBytesCached
operator|==
name|stats
operator|.
name|getBytesCached
argument_list|()
operator|)
operator|&&
operator|(
name|targetFilesNeeded
operator|==
name|stats
operator|.
name|getFilesNeeded
argument_list|()
operator|)
operator|&&
operator|(
name|targetFilesCached
operator|==
name|stats
operator|.
name|getFilesCached
argument_list|()
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
name|infoString
operator|+
literal|": "
operator|+
literal|"filesNeeded: "
operator|+
name|stats
operator|.
name|getFilesNeeded
argument_list|()
operator|+
literal|"/"
operator|+
name|targetFilesNeeded
operator|+
literal|", filesCached: "
operator|+
name|stats
operator|.
name|getFilesCached
argument_list|()
operator|+
literal|"/"
operator|+
name|targetFilesCached
operator|+
literal|", bytesNeeded: "
operator|+
name|stats
operator|.
name|getBytesNeeded
argument_list|()
operator|+
literal|"/"
operator|+
name|targetBytesNeeded
operator|+
literal|", bytesCached: "
operator|+
name|stats
operator|.
name|getBytesCached
argument_list|()
operator|+
literal|"/"
operator|+
name|targetBytesCached
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
argument_list|,
literal|500
argument_list|,
literal|60000
argument_list|)
expr_stmt|;
block|}
DECL|method|waitForCachePoolStats (final DistributedFileSystem dfs, final long targetBytesNeeded, final long targetBytesCached, final long targetFilesNeeded, final long targetFilesCached, final CachePoolInfo pool, final String infoString)
specifier|private
specifier|static
name|void
name|waitForCachePoolStats
parameter_list|(
specifier|final
name|DistributedFileSystem
name|dfs
parameter_list|,
specifier|final
name|long
name|targetBytesNeeded
parameter_list|,
specifier|final
name|long
name|targetBytesCached
parameter_list|,
specifier|final
name|long
name|targetFilesNeeded
parameter_list|,
specifier|final
name|long
name|targetFilesCached
parameter_list|,
specifier|final
name|CachePoolInfo
name|pool
parameter_list|,
specifier|final
name|String
name|infoString
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Polling listCachePools "
operator|+
name|pool
operator|.
name|toString
argument_list|()
operator|+
literal|" for "
operator|+
name|targetBytesNeeded
operator|+
literal|" targetBytesNeeded, "
operator|+
name|targetBytesCached
operator|+
literal|" targetBytesCached, "
operator|+
name|targetFilesNeeded
operator|+
literal|" targetFilesNeeded, "
operator|+
name|targetFilesCached
operator|+
literal|" targetFilesCached"
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
name|RemoteIterator
argument_list|<
name|CachePoolEntry
argument_list|>
name|iter
init|=
literal|null
decl_stmt|;
try|try
block|{
name|iter
operator|=
name|dfs
operator|.
name|listCachePools
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"got IOException while calling "
operator|+
literal|"listCachePools: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
literal|true
condition|)
block|{
name|CachePoolEntry
name|entry
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
break|break;
block|}
name|entry
operator|=
name|iter
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"got IOException while iterating through "
operator|+
literal|"listCachePools: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
break|break;
block|}
if|if
condition|(
operator|!
name|entry
operator|.
name|getInfo
argument_list|()
operator|.
name|getPoolName
argument_list|()
operator|.
name|equals
argument_list|(
name|pool
operator|.
name|getPoolName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|CachePoolStats
name|stats
init|=
name|entry
operator|.
name|getStats
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|targetBytesNeeded
operator|==
name|stats
operator|.
name|getBytesNeeded
argument_list|()
operator|)
operator|&&
operator|(
name|targetBytesCached
operator|==
name|stats
operator|.
name|getBytesCached
argument_list|()
operator|)
operator|&&
operator|(
name|targetFilesNeeded
operator|==
name|stats
operator|.
name|getFilesNeeded
argument_list|()
operator|)
operator|&&
operator|(
name|targetFilesCached
operator|==
name|stats
operator|.
name|getFilesCached
argument_list|()
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
name|infoString
operator|+
literal|": "
operator|+
literal|"filesNeeded: "
operator|+
name|stats
operator|.
name|getFilesNeeded
argument_list|()
operator|+
literal|"/"
operator|+
name|targetFilesNeeded
operator|+
literal|", filesCached: "
operator|+
name|stats
operator|.
name|getFilesCached
argument_list|()
operator|+
literal|"/"
operator|+
name|targetFilesCached
operator|+
literal|", bytesNeeded: "
operator|+
name|stats
operator|.
name|getBytesNeeded
argument_list|()
operator|+
literal|"/"
operator|+
name|targetBytesNeeded
operator|+
literal|", bytesCached: "
operator|+
name|stats
operator|.
name|getBytesCached
argument_list|()
operator|+
literal|"/"
operator|+
name|targetBytesCached
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
argument_list|,
literal|500
argument_list|,
literal|60000
argument_list|)
expr_stmt|;
block|}
DECL|method|checkNumCachedReplicas (final DistributedFileSystem dfs, final List<Path> paths, final int expectedBlocks, final int expectedReplicas)
specifier|private
specifier|static
name|void
name|checkNumCachedReplicas
parameter_list|(
specifier|final
name|DistributedFileSystem
name|dfs
parameter_list|,
specifier|final
name|List
argument_list|<
name|Path
argument_list|>
name|paths
parameter_list|,
specifier|final
name|int
name|expectedBlocks
parameter_list|,
specifier|final
name|int
name|expectedReplicas
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|numCachedBlocks
init|=
literal|0
decl_stmt|;
name|int
name|numCachedReplicas
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Path
name|p
range|:
name|paths
control|)
block|{
specifier|final
name|FileStatus
name|f
init|=
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
decl_stmt|;
specifier|final
name|long
name|len
init|=
name|f
operator|.
name|getLen
argument_list|()
decl_stmt|;
specifier|final
name|long
name|blockSize
init|=
name|f
operator|.
name|getBlockSize
argument_list|()
decl_stmt|;
comment|// round it up to full blocks
specifier|final
name|long
name|numBlocks
init|=
operator|(
name|len
operator|+
name|blockSize
operator|-
literal|1
operator|)
operator|/
name|blockSize
decl_stmt|;
name|BlockLocation
index|[]
name|locs
init|=
name|dfs
operator|.
name|getFileBlockLocations
argument_list|(
name|p
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of block locations for path "
operator|+
name|p
argument_list|,
name|numBlocks
argument_list|,
name|locs
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|BlockLocation
name|l
range|:
name|locs
control|)
block|{
if|if
condition|(
name|l
operator|.
name|getCachedHosts
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|numCachedBlocks
operator|++
expr_stmt|;
block|}
name|numCachedReplicas
operator|+=
name|l
operator|.
name|getCachedHosts
argument_list|()
operator|.
name|length
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Found "
operator|+
name|numCachedBlocks
operator|+
literal|" of "
operator|+
name|expectedBlocks
operator|+
literal|" blocks"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Found "
operator|+
name|numCachedReplicas
operator|+
literal|" of "
operator|+
name|expectedReplicas
operator|+
literal|" replicas"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of cached blocks"
argument_list|,
name|expectedBlocks
argument_list|,
name|numCachedBlocks
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of cached replicas"
argument_list|,
name|expectedReplicas
argument_list|,
name|numCachedReplicas
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testWaitForCachedReplicas ()
specifier|public
name|void
name|testWaitForCachedReplicas
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystemTestHelper
name|helper
init|=
operator|new
name|FileSystemTestHelper
argument_list|()
decl_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
return|return
operator|(
operator|(
name|namenode
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getCacheCapacity
argument_list|()
operator|==
operator|(
name|NUM_DATANODES
operator|*
name|CACHE_CAPACITY
operator|)
operator|)
operator|&&
operator|(
name|namenode
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getCacheUsed
argument_list|()
operator|==
literal|0
operator|)
operator|)
return|;
block|}
block|}
argument_list|,
literal|500
argument_list|,
literal|60000
argument_list|)
expr_stmt|;
comment|// Send a cache report referring to a bogus block.  It is important that
comment|// the NameNode be robust against this.
name|NamenodeProtocols
name|nnRpc
init|=
name|namenode
operator|.
name|getRpcServer
argument_list|()
decl_stmt|;
name|DataNode
name|dn0
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|bpid
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockPoolId
argument_list|()
decl_stmt|;
name|LinkedList
argument_list|<
name|Long
argument_list|>
name|bogusBlockIds
init|=
operator|new
name|LinkedList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|bogusBlockIds
operator|.
name|add
argument_list|(
literal|999999L
argument_list|)
expr_stmt|;
name|nnRpc
operator|.
name|cacheReport
argument_list|(
name|dn0
operator|.
name|getDNRegistrationForBP
argument_list|(
name|bpid
argument_list|)
argument_list|,
name|bpid
argument_list|,
name|bogusBlockIds
argument_list|)
expr_stmt|;
name|Path
name|rootDir
init|=
name|helper
operator|.
name|getDefaultWorkingDirectory
argument_list|(
name|dfs
argument_list|)
decl_stmt|;
comment|// Create the pool
specifier|final
name|String
name|pool
init|=
literal|"friendlyPool"
decl_stmt|;
name|nnRpc
operator|.
name|addCachePool
argument_list|(
operator|new
name|CachePoolInfo
argument_list|(
literal|"friendlyPool"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create some test files
specifier|final
name|int
name|numFiles
init|=
literal|2
decl_stmt|;
specifier|final
name|int
name|numBlocksPerFile
init|=
literal|2
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|numFiles
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFiles
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
literal|"testCachePaths-"
operator|+
name|i
argument_list|)
decl_stmt|;
name|FileSystemTestHelper
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|p
argument_list|,
name|numBlocksPerFile
argument_list|,
operator|(
name|int
operator|)
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|paths
operator|.
name|add
argument_list|(
name|p
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Check the initial statistics at the namenode
name|waitForCachedBlocks
argument_list|(
name|namenode
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"testWaitForCachedReplicas:0"
argument_list|)
expr_stmt|;
comment|// Cache and check each path in sequence
name|int
name|expected
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFiles
condition|;
name|i
operator|++
control|)
block|{
name|CacheDirectiveInfo
name|directive
init|=
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setPath
argument_list|(
operator|new
name|Path
argument_list|(
name|paths
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setPool
argument_list|(
name|pool
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|nnRpc
operator|.
name|addCacheDirective
argument_list|(
name|directive
argument_list|,
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|CacheFlag
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|+=
name|numBlocksPerFile
expr_stmt|;
name|waitForCachedBlocks
argument_list|(
name|namenode
argument_list|,
name|expected
argument_list|,
name|expected
argument_list|,
literal|"testWaitForCachedReplicas:1"
argument_list|)
expr_stmt|;
block|}
comment|// Check that the datanodes have the right cache values
name|DatanodeInfo
index|[]
name|live
init|=
name|dfs
operator|.
name|getDataNodeStats
argument_list|(
name|DatanodeReportType
operator|.
name|LIVE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of live nodes"
argument_list|,
name|NUM_DATANODES
argument_list|,
name|live
operator|.
name|length
argument_list|)
expr_stmt|;
name|long
name|totalUsed
init|=
literal|0
decl_stmt|;
for|for
control|(
name|DatanodeInfo
name|dn
range|:
name|live
control|)
block|{
specifier|final
name|long
name|cacheCapacity
init|=
name|dn
operator|.
name|getCacheCapacity
argument_list|()
decl_stmt|;
specifier|final
name|long
name|cacheUsed
init|=
name|dn
operator|.
name|getCacheUsed
argument_list|()
decl_stmt|;
specifier|final
name|long
name|cacheRemaining
init|=
name|dn
operator|.
name|getCacheRemaining
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected cache capacity"
argument_list|,
name|CACHE_CAPACITY
argument_list|,
name|cacheCapacity
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Capacity not equal to used + remaining"
argument_list|,
name|cacheCapacity
argument_list|,
name|cacheUsed
operator|+
name|cacheRemaining
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Remaining not equal to capacity - used"
argument_list|,
name|cacheCapacity
operator|-
name|cacheUsed
argument_list|,
name|cacheRemaining
argument_list|)
expr_stmt|;
name|totalUsed
operator|+=
name|cacheUsed
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expected
operator|*
name|BLOCK_SIZE
argument_list|,
name|totalUsed
argument_list|)
expr_stmt|;
comment|// Uncache and check each path in sequence
name|RemoteIterator
argument_list|<
name|CacheDirectiveEntry
argument_list|>
name|entries
init|=
operator|new
name|CacheDirectiveIterator
argument_list|(
name|nnRpc
argument_list|,
literal|null
argument_list|,
name|FsTracer
operator|.
name|get
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFiles
condition|;
name|i
operator|++
control|)
block|{
name|CacheDirectiveEntry
name|entry
init|=
name|entries
operator|.
name|next
argument_list|()
decl_stmt|;
name|nnRpc
operator|.
name|removeCacheDirective
argument_list|(
name|entry
operator|.
name|getInfo
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|expected
operator|-=
name|numBlocksPerFile
expr_stmt|;
name|waitForCachedBlocks
argument_list|(
name|namenode
argument_list|,
name|expected
argument_list|,
name|expected
argument_list|,
literal|"testWaitForCachedReplicas:2"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testWaitForCachedReplicasInDirectory ()
specifier|public
name|void
name|testWaitForCachedReplicasInDirectory
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create the pool
specifier|final
name|String
name|pool
init|=
literal|"friendlyPool"
decl_stmt|;
specifier|final
name|CachePoolInfo
name|poolInfo
init|=
operator|new
name|CachePoolInfo
argument_list|(
name|pool
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|addCachePool
argument_list|(
name|poolInfo
argument_list|)
expr_stmt|;
comment|// Create some test files
specifier|final
name|List
argument_list|<
name|Path
argument_list|>
name|paths
init|=
operator|new
name|LinkedList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|paths
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo/bar"
argument_list|)
argument_list|)
expr_stmt|;
name|paths
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo/baz"
argument_list|)
argument_list|)
expr_stmt|;
name|paths
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo2/bar2"
argument_list|)
argument_list|)
expr_stmt|;
name|paths
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo2/baz2"
argument_list|)
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|mkdir
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|mkdir
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo2"
argument_list|)
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numBlocksPerFile
init|=
literal|2
decl_stmt|;
for|for
control|(
name|Path
name|path
range|:
name|paths
control|)
block|{
name|FileSystemTestHelper
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|path
argument_list|,
name|numBlocksPerFile
argument_list|,
operator|(
name|int
operator|)
name|BLOCK_SIZE
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|waitForCachedBlocks
argument_list|(
name|namenode
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"testWaitForCachedReplicasInDirectory:0"
argument_list|)
expr_stmt|;
comment|// cache entire directory
name|long
name|id
init|=
name|dfs
operator|.
name|addCacheDirective
argument_list|(
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setPath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
argument_list|)
operator|.
name|setReplication
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|)
operator|.
name|setPool
argument_list|(
name|pool
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|waitForCachedBlocks
argument_list|(
name|namenode
argument_list|,
literal|4
argument_list|,
literal|8
argument_list|,
literal|"testWaitForCachedReplicasInDirectory:1:blocks"
argument_list|)
expr_stmt|;
comment|// Verify that listDirectives gives the stats we want.
name|waitForCacheDirectiveStats
argument_list|(
name|dfs
argument_list|,
literal|4
operator|*
name|numBlocksPerFile
operator|*
name|BLOCK_SIZE
argument_list|,
literal|4
operator|*
name|numBlocksPerFile
operator|*
name|BLOCK_SIZE
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setPath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
literal|"testWaitForCachedReplicasInDirectory:1:directive"
argument_list|)
expr_stmt|;
name|waitForCachePoolStats
argument_list|(
name|dfs
argument_list|,
literal|4
operator|*
name|numBlocksPerFile
operator|*
name|BLOCK_SIZE
argument_list|,
literal|4
operator|*
name|numBlocksPerFile
operator|*
name|BLOCK_SIZE
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
name|poolInfo
argument_list|,
literal|"testWaitForCachedReplicasInDirectory:1:pool"
argument_list|)
expr_stmt|;
name|long
name|id2
init|=
name|dfs
operator|.
name|addCacheDirective
argument_list|(
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setPath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo/bar"
argument_list|)
argument_list|)
operator|.
name|setReplication
argument_list|(
operator|(
name|short
operator|)
literal|4
argument_list|)
operator|.
name|setPool
argument_list|(
name|pool
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
comment|// wait for an additional 2 cached replicas to come up
name|waitForCachedBlocks
argument_list|(
name|namenode
argument_list|,
literal|4
argument_list|,
literal|10
argument_list|,
literal|"testWaitForCachedReplicasInDirectory:2:blocks"
argument_list|)
expr_stmt|;
comment|// the directory directive's stats are unchanged
name|waitForCacheDirectiveStats
argument_list|(
name|dfs
argument_list|,
literal|4
operator|*
name|numBlocksPerFile
operator|*
name|BLOCK_SIZE
argument_list|,
literal|4
operator|*
name|numBlocksPerFile
operator|*
name|BLOCK_SIZE
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setPath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
literal|"testWaitForCachedReplicasInDirectory:2:directive-1"
argument_list|)
expr_stmt|;
comment|// verify /foo/bar's stats
name|waitForCacheDirectiveStats
argument_list|(
name|dfs
argument_list|,
literal|4
operator|*
name|numBlocksPerFile
operator|*
name|BLOCK_SIZE
argument_list|,
comment|// only 3 because the file only has 3 replicas, not 4 as requested.
literal|3
operator|*
name|numBlocksPerFile
operator|*
name|BLOCK_SIZE
argument_list|,
literal|1
argument_list|,
comment|// only 0 because the file can't be fully cached
literal|0
argument_list|,
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setPath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo/bar"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
literal|"testWaitForCachedReplicasInDirectory:2:directive-2"
argument_list|)
expr_stmt|;
name|waitForCachePoolStats
argument_list|(
name|dfs
argument_list|,
operator|(
literal|4
operator|+
literal|4
operator|)
operator|*
name|numBlocksPerFile
operator|*
name|BLOCK_SIZE
argument_list|,
operator|(
literal|4
operator|+
literal|3
operator|)
operator|*
name|numBlocksPerFile
operator|*
name|BLOCK_SIZE
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
name|poolInfo
argument_list|,
literal|"testWaitForCachedReplicasInDirectory:2:pool"
argument_list|)
expr_stmt|;
comment|// remove and watch numCached go to 0
name|dfs
operator|.
name|removeCacheDirective
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|removeCacheDirective
argument_list|(
name|id2
argument_list|)
expr_stmt|;
name|waitForCachedBlocks
argument_list|(
name|namenode
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"testWaitForCachedReplicasInDirectory:3:blocks"
argument_list|)
expr_stmt|;
name|waitForCachePoolStats
argument_list|(
name|dfs
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|poolInfo
argument_list|,
literal|"testWaitForCachedReplicasInDirectory:3:pool"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests stepping the cache replication factor up and down, checking the    * number of cached replicas and blocks as well as the advertised locations.    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testReplicationFactor ()
specifier|public
name|void
name|testReplicationFactor
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create the pool
specifier|final
name|String
name|pool
init|=
literal|"friendlyPool"
decl_stmt|;
name|dfs
operator|.
name|addCachePool
argument_list|(
operator|new
name|CachePoolInfo
argument_list|(
name|pool
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create some test files
specifier|final
name|List
argument_list|<
name|Path
argument_list|>
name|paths
init|=
operator|new
name|LinkedList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|paths
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo/bar"
argument_list|)
argument_list|)
expr_stmt|;
name|paths
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo/baz"
argument_list|)
argument_list|)
expr_stmt|;
name|paths
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo2/bar2"
argument_list|)
argument_list|)
expr_stmt|;
name|paths
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo2/baz2"
argument_list|)
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|mkdir
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|mkdir
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo2"
argument_list|)
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numBlocksPerFile
init|=
literal|2
decl_stmt|;
for|for
control|(
name|Path
name|path
range|:
name|paths
control|)
block|{
name|FileSystemTestHelper
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|path
argument_list|,
name|numBlocksPerFile
argument_list|,
operator|(
name|int
operator|)
name|BLOCK_SIZE
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|waitForCachedBlocks
argument_list|(
name|namenode
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"testReplicationFactor:0"
argument_list|)
expr_stmt|;
name|checkNumCachedReplicas
argument_list|(
name|dfs
argument_list|,
name|paths
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// cache directory
name|long
name|id
init|=
name|dfs
operator|.
name|addCacheDirective
argument_list|(
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setPath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
argument_list|)
operator|.
name|setReplication
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
operator|.
name|setPool
argument_list|(
name|pool
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|waitForCachedBlocks
argument_list|(
name|namenode
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|,
literal|"testReplicationFactor:1"
argument_list|)
expr_stmt|;
name|checkNumCachedReplicas
argument_list|(
name|dfs
argument_list|,
name|paths
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|// step up the replication factor
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<=
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|dfs
operator|.
name|modifyCacheDirective
argument_list|(
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setId
argument_list|(
name|id
argument_list|)
operator|.
name|setReplication
argument_list|(
operator|(
name|short
operator|)
name|i
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|waitForCachedBlocks
argument_list|(
name|namenode
argument_list|,
literal|4
argument_list|,
literal|4
operator|*
name|i
argument_list|,
literal|"testReplicationFactor:2"
argument_list|)
expr_stmt|;
name|checkNumCachedReplicas
argument_list|(
name|dfs
argument_list|,
name|paths
argument_list|,
literal|4
argument_list|,
literal|4
operator|*
name|i
argument_list|)
expr_stmt|;
block|}
comment|// step it down
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|>=
literal|1
condition|;
name|i
operator|--
control|)
block|{
name|dfs
operator|.
name|modifyCacheDirective
argument_list|(
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setId
argument_list|(
name|id
argument_list|)
operator|.
name|setReplication
argument_list|(
operator|(
name|short
operator|)
name|i
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|waitForCachedBlocks
argument_list|(
name|namenode
argument_list|,
literal|4
argument_list|,
literal|4
operator|*
name|i
argument_list|,
literal|"testReplicationFactor:3"
argument_list|)
expr_stmt|;
name|checkNumCachedReplicas
argument_list|(
name|dfs
argument_list|,
name|paths
argument_list|,
literal|4
argument_list|,
literal|4
operator|*
name|i
argument_list|)
expr_stmt|;
block|}
comment|// remove and watch numCached go to 0
name|dfs
operator|.
name|removeCacheDirective
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|waitForCachedBlocks
argument_list|(
name|namenode
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"testReplicationFactor:4"
argument_list|)
expr_stmt|;
name|checkNumCachedReplicas
argument_list|(
name|dfs
argument_list|,
name|paths
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testListCachePoolPermissions ()
specifier|public
name|void
name|testListCachePoolPermissions
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|UserGroupInformation
name|myUser
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"myuser"
argument_list|)
decl_stmt|;
specifier|final
name|DistributedFileSystem
name|myDfs
init|=
operator|(
name|DistributedFileSystem
operator|)
name|DFSTestUtil
operator|.
name|getFileSystemAs
argument_list|(
name|myUser
argument_list|,
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|String
name|poolName
init|=
literal|"poolparty"
decl_stmt|;
name|dfs
operator|.
name|addCachePool
argument_list|(
operator|new
name|CachePoolInfo
argument_list|(
name|poolName
argument_list|)
operator|.
name|setMode
argument_list|(
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0700
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Should only see partial info
name|RemoteIterator
argument_list|<
name|CachePoolEntry
argument_list|>
name|it
init|=
name|myDfs
operator|.
name|listCachePools
argument_list|()
decl_stmt|;
name|CachePoolInfo
name|info
init|=
name|it
operator|.
name|next
argument_list|()
operator|.
name|getInfo
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected pool name"
argument_list|,
name|poolName
argument_list|,
name|info
operator|.
name|getPoolName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Unexpected owner name"
argument_list|,
name|info
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Unexpected group name"
argument_list|,
name|info
operator|.
name|getGroupName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Unexpected mode"
argument_list|,
name|info
operator|.
name|getMode
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Unexpected limit"
argument_list|,
name|info
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
comment|// Modify the pool so myuser is now the owner
specifier|final
name|long
name|limit
init|=
literal|99
decl_stmt|;
name|dfs
operator|.
name|modifyCachePool
argument_list|(
operator|new
name|CachePoolInfo
argument_list|(
name|poolName
argument_list|)
operator|.
name|setOwnerName
argument_list|(
name|myUser
operator|.
name|getShortUserName
argument_list|()
argument_list|)
operator|.
name|setLimit
argument_list|(
name|limit
argument_list|)
argument_list|)
expr_stmt|;
comment|// Should see full info
name|it
operator|=
name|myDfs
operator|.
name|listCachePools
argument_list|()
expr_stmt|;
name|info
operator|=
name|it
operator|.
name|next
argument_list|()
operator|.
name|getInfo
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected pool name"
argument_list|,
name|poolName
argument_list|,
name|info
operator|.
name|getPoolName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Mismatched owner name"
argument_list|,
name|myUser
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|info
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Expected group name"
argument_list|,
name|info
operator|.
name|getGroupName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Mismatched mode"
argument_list|,
operator|(
name|short
operator|)
literal|0700
argument_list|,
name|info
operator|.
name|getMode
argument_list|()
operator|.
name|toShort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Mismatched limit"
argument_list|,
name|limit
argument_list|,
operator|(
name|long
operator|)
name|info
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testExpiry ()
specifier|public
name|void
name|testExpiry
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|pool
init|=
literal|"pool1"
decl_stmt|;
name|dfs
operator|.
name|addCachePool
argument_list|(
operator|new
name|CachePoolInfo
argument_list|(
name|pool
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
literal|"/mypath"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|p
argument_list|,
name|BLOCK_SIZE
operator|*
literal|2
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|0x999
argument_list|)
expr_stmt|;
comment|// Expire after test timeout
name|Date
name|start
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|Date
name|expiry
init|=
name|DateUtils
operator|.
name|addSeconds
argument_list|(
name|start
argument_list|,
literal|120
argument_list|)
decl_stmt|;
specifier|final
name|long
name|id
init|=
name|dfs
operator|.
name|addCacheDirective
argument_list|(
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setPath
argument_list|(
name|p
argument_list|)
operator|.
name|setPool
argument_list|(
name|pool
argument_list|)
operator|.
name|setExpiration
argument_list|(
name|CacheDirectiveInfo
operator|.
name|Expiration
operator|.
name|newAbsolute
argument_list|(
name|expiry
argument_list|)
argument_list|)
operator|.
name|setReplication
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|waitForCachedBlocks
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|()
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|,
literal|"testExpiry:1"
argument_list|)
expr_stmt|;
comment|// Change it to expire sooner
name|dfs
operator|.
name|modifyCacheDirective
argument_list|(
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setId
argument_list|(
name|id
argument_list|)
operator|.
name|setExpiration
argument_list|(
name|Expiration
operator|.
name|newRelative
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|waitForCachedBlocks
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"testExpiry:2"
argument_list|)
expr_stmt|;
name|RemoteIterator
argument_list|<
name|CacheDirectiveEntry
argument_list|>
name|it
init|=
name|dfs
operator|.
name|listCacheDirectives
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|CacheDirectiveEntry
name|ent
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|Date
name|entryExpiry
init|=
operator|new
name|Date
argument_list|(
name|ent
operator|.
name|getInfo
argument_list|()
operator|.
name|getExpiration
argument_list|()
operator|.
name|getMillis
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Directive should have expired"
argument_list|,
name|entryExpiry
operator|.
name|before
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Change it back to expire later
name|dfs
operator|.
name|modifyCacheDirective
argument_list|(
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setId
argument_list|(
name|id
argument_list|)
operator|.
name|setExpiration
argument_list|(
name|Expiration
operator|.
name|newRelative
argument_list|(
literal|120000
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|waitForCachedBlocks
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|()
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|,
literal|"testExpiry:3"
argument_list|)
expr_stmt|;
name|it
operator|=
name|dfs
operator|.
name|listCacheDirectives
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|ent
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|entryExpiry
operator|=
operator|new
name|Date
argument_list|(
name|ent
operator|.
name|getInfo
argument_list|()
operator|.
name|getExpiration
argument_list|()
operator|.
name|getMillis
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Directive should not have expired"
argument_list|,
name|entryExpiry
operator|.
name|after
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify that setting a negative TTL throws an error
try|try
block|{
name|dfs
operator|.
name|modifyCacheDirective
argument_list|(
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setId
argument_list|(
name|id
argument_list|)
operator|.
name|setExpiration
argument_list|(
name|Expiration
operator|.
name|newRelative
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidRequestException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Cannot set a negative expiration"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testLimit ()
specifier|public
name|void
name|testLimit
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|dfs
operator|.
name|addCachePool
argument_list|(
operator|new
name|CachePoolInfo
argument_list|(
literal|"poolofnegativity"
argument_list|)
operator|.
name|setLimit
argument_list|(
operator|-
literal|99l
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should not be able to set a negative limit"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidRequestException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"negative"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|destiny
init|=
literal|"poolofdestiny"
decl_stmt|;
specifier|final
name|Path
name|path1
init|=
operator|new
name|Path
argument_list|(
literal|"/destiny"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|path1
argument_list|,
literal|2
operator|*
name|BLOCK_SIZE
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0x9494
argument_list|)
expr_stmt|;
comment|// Start off with a limit that is too small
specifier|final
name|CachePoolInfo
name|poolInfo
init|=
operator|new
name|CachePoolInfo
argument_list|(
name|destiny
argument_list|)
operator|.
name|setLimit
argument_list|(
literal|2
operator|*
name|BLOCK_SIZE
operator|-
literal|1
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|addCachePool
argument_list|(
name|poolInfo
argument_list|)
expr_stmt|;
specifier|final
name|CacheDirectiveInfo
name|info1
init|=
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setPool
argument_list|(
name|destiny
argument_list|)
operator|.
name|setPath
argument_list|(
name|path1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|dfs
operator|.
name|addCacheDirective
argument_list|(
name|info1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should not be able to cache when there is no more limit"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidRequestException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"remaining capacity"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Raise the limit up to fit and it should work this time
name|poolInfo
operator|.
name|setLimit
argument_list|(
literal|2
operator|*
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|modifyCachePool
argument_list|(
name|poolInfo
argument_list|)
expr_stmt|;
name|long
name|id1
init|=
name|dfs
operator|.
name|addCacheDirective
argument_list|(
name|info1
argument_list|)
decl_stmt|;
name|waitForCachePoolStats
argument_list|(
name|dfs
argument_list|,
literal|2
operator|*
name|BLOCK_SIZE
argument_list|,
literal|2
operator|*
name|BLOCK_SIZE
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|poolInfo
argument_list|,
literal|"testLimit:1"
argument_list|)
expr_stmt|;
comment|// Adding another file, it shouldn't be cached
specifier|final
name|Path
name|path2
init|=
operator|new
name|Path
argument_list|(
literal|"/failure"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|path2
argument_list|,
name|BLOCK_SIZE
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0x9495
argument_list|)
expr_stmt|;
try|try
block|{
name|dfs
operator|.
name|addCacheDirective
argument_list|(
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setPool
argument_list|(
name|destiny
argument_list|)
operator|.
name|setPath
argument_list|(
name|path2
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|CacheFlag
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should not be able to add another cached file"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidRequestException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"remaining capacity"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Bring the limit down, the first file should get uncached
name|poolInfo
operator|.
name|setLimit
argument_list|(
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|modifyCachePool
argument_list|(
name|poolInfo
argument_list|)
expr_stmt|;
name|waitForCachePoolStats
argument_list|(
name|dfs
argument_list|,
literal|2
operator|*
name|BLOCK_SIZE
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|poolInfo
argument_list|,
literal|"testLimit:2"
argument_list|)
expr_stmt|;
name|RemoteIterator
argument_list|<
name|CachePoolEntry
argument_list|>
name|it
init|=
name|dfs
operator|.
name|listCachePools
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expected a cache pool"
argument_list|,
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|CachePoolStats
name|stats
init|=
name|it
operator|.
name|next
argument_list|()
operator|.
name|getStats
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Overlimit bytes should be difference of needed and limit"
argument_list|,
name|BLOCK_SIZE
argument_list|,
name|stats
operator|.
name|getBytesOverlimit
argument_list|()
argument_list|)
expr_stmt|;
comment|// Moving a directive to a pool without enough limit should fail
name|CachePoolInfo
name|inadequate
init|=
operator|new
name|CachePoolInfo
argument_list|(
literal|"poolofinadequacy"
argument_list|)
operator|.
name|setLimit
argument_list|(
name|BLOCK_SIZE
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|addCachePool
argument_list|(
name|inadequate
argument_list|)
expr_stmt|;
try|try
block|{
name|dfs
operator|.
name|modifyCacheDirective
argument_list|(
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|(
name|info1
argument_list|)
operator|.
name|setId
argument_list|(
name|id1
argument_list|)
operator|.
name|setPool
argument_list|(
name|inadequate
operator|.
name|getPoolName
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|CacheFlag
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidRequestException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"remaining capacity"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Succeeds when force=true
name|dfs
operator|.
name|modifyCacheDirective
argument_list|(
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|(
name|info1
argument_list|)
operator|.
name|setId
argument_list|(
name|id1
argument_list|)
operator|.
name|setPool
argument_list|(
name|inadequate
operator|.
name|getPoolName
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CacheFlag
operator|.
name|FORCE
argument_list|)
argument_list|)
expr_stmt|;
comment|// Also can add with force=true
name|dfs
operator|.
name|addCacheDirective
argument_list|(
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setPool
argument_list|(
name|inadequate
operator|.
name|getPoolName
argument_list|()
argument_list|)
operator|.
name|setPath
argument_list|(
name|path1
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CacheFlag
operator|.
name|FORCE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testMaxRelativeExpiry ()
specifier|public
name|void
name|testMaxRelativeExpiry
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test that negative and really big max expirations can't be set during add
try|try
block|{
name|dfs
operator|.
name|addCachePool
argument_list|(
operator|new
name|CachePoolInfo
argument_list|(
literal|"failpool"
argument_list|)
operator|.
name|setMaxRelativeExpiryMs
argument_list|(
operator|-
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Added a pool with a negative max expiry."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidRequestException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"negative"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|dfs
operator|.
name|addCachePool
argument_list|(
operator|new
name|CachePoolInfo
argument_list|(
literal|"failpool"
argument_list|)
operator|.
name|setMaxRelativeExpiryMs
argument_list|(
name|Long
operator|.
name|MAX_VALUE
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Added a pool with too big of a max expiry."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidRequestException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"too big"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Test that setting a max relative expiry on a pool works
name|CachePoolInfo
name|coolPool
init|=
operator|new
name|CachePoolInfo
argument_list|(
literal|"coolPool"
argument_list|)
decl_stmt|;
specifier|final
name|long
name|poolExpiration
init|=
literal|1000
operator|*
literal|60
operator|*
literal|10l
decl_stmt|;
name|dfs
operator|.
name|addCachePool
argument_list|(
name|coolPool
operator|.
name|setMaxRelativeExpiryMs
argument_list|(
name|poolExpiration
argument_list|)
argument_list|)
expr_stmt|;
name|RemoteIterator
argument_list|<
name|CachePoolEntry
argument_list|>
name|poolIt
init|=
name|dfs
operator|.
name|listCachePools
argument_list|()
decl_stmt|;
name|CachePoolInfo
name|listPool
init|=
name|poolIt
operator|.
name|next
argument_list|()
operator|.
name|getInfo
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Should only be one pool"
argument_list|,
name|poolIt
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected max relative expiry to match set value"
argument_list|,
name|poolExpiration
argument_list|,
name|listPool
operator|.
name|getMaxRelativeExpiryMs
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test that negative and really big max expirations can't be modified
try|try
block|{
name|dfs
operator|.
name|addCachePool
argument_list|(
name|coolPool
operator|.
name|setMaxRelativeExpiryMs
argument_list|(
operator|-
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Added a pool with a negative max expiry."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidRequestException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"negative"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|dfs
operator|.
name|modifyCachePool
argument_list|(
name|coolPool
operator|.
name|setMaxRelativeExpiryMs
argument_list|(
name|CachePoolInfo
operator|.
name|RELATIVE_EXPIRY_NEVER
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Added a pool with too big of a max expiry."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidRequestException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"too big"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Test that adding a directives without an expiration uses the pool's max
name|CacheDirectiveInfo
name|defaultExpiry
init|=
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setPath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/blah"
argument_list|)
argument_list|)
operator|.
name|setPool
argument_list|(
name|coolPool
operator|.
name|getPoolName
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|dfs
operator|.
name|addCacheDirective
argument_list|(
name|defaultExpiry
argument_list|)
expr_stmt|;
name|RemoteIterator
argument_list|<
name|CacheDirectiveEntry
argument_list|>
name|dirIt
init|=
name|dfs
operator|.
name|listCacheDirectives
argument_list|(
name|defaultExpiry
argument_list|)
decl_stmt|;
name|CacheDirectiveInfo
name|listInfo
init|=
name|dirIt
operator|.
name|next
argument_list|()
operator|.
name|getInfo
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Should only have one entry in listing"
argument_list|,
name|dirIt
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|listExpiration
init|=
name|listInfo
operator|.
name|getExpiration
argument_list|()
operator|.
name|getAbsoluteMillis
argument_list|()
operator|-
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Directive expiry should be approximately the pool's max expiry"
argument_list|,
name|Math
operator|.
name|abs
argument_list|(
name|listExpiration
operator|-
name|poolExpiration
argument_list|)
operator|<
literal|10
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// Test that the max is enforced on add for relative and absolute
name|CacheDirectiveInfo
operator|.
name|Builder
name|builder
init|=
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setPath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/lolcat"
argument_list|)
argument_list|)
operator|.
name|setPool
argument_list|(
name|coolPool
operator|.
name|getPoolName
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|dfs
operator|.
name|addCacheDirective
argument_list|(
name|builder
operator|.
name|setExpiration
argument_list|(
name|Expiration
operator|.
name|newRelative
argument_list|(
name|poolExpiration
operator|+
literal|1
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Added a directive that exceeds pool's max relative expiration"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidRequestException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"exceeds the max relative expiration"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|dfs
operator|.
name|addCacheDirective
argument_list|(
name|builder
operator|.
name|setExpiration
argument_list|(
name|Expiration
operator|.
name|newAbsolute
argument_list|(
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
operator|+
name|poolExpiration
operator|+
operator|(
literal|10
operator|*
literal|1000
operator|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Added a directive that exceeds pool's max relative expiration"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidRequestException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"exceeds the max relative expiration"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Test that max is enforced on modify for relative and absolute Expirations
try|try
block|{
name|dfs
operator|.
name|modifyCacheDirective
argument_list|(
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|(
name|defaultExpiry
argument_list|)
operator|.
name|setId
argument_list|(
name|listInfo
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setExpiration
argument_list|(
name|Expiration
operator|.
name|newRelative
argument_list|(
name|poolExpiration
operator|+
literal|1
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Modified a directive to exceed pool's max relative expiration"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidRequestException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"exceeds the max relative expiration"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|dfs
operator|.
name|modifyCacheDirective
argument_list|(
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|(
name|defaultExpiry
argument_list|)
operator|.
name|setId
argument_list|(
name|listInfo
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setExpiration
argument_list|(
name|Expiration
operator|.
name|newAbsolute
argument_list|(
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
operator|+
name|poolExpiration
operator|+
operator|(
literal|10
operator|*
literal|1000
operator|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Modified a directive to exceed pool's max relative expiration"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidRequestException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"exceeds the max relative expiration"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Test some giant limit values with add
try|try
block|{
name|dfs
operator|.
name|addCacheDirective
argument_list|(
name|builder
operator|.
name|setExpiration
argument_list|(
name|Expiration
operator|.
name|newRelative
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Added a directive with a gigantic max value"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"is too far in the future"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|dfs
operator|.
name|addCacheDirective
argument_list|(
name|builder
operator|.
name|setExpiration
argument_list|(
name|Expiration
operator|.
name|newAbsolute
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Added a directive with a gigantic max value"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidRequestException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"is too far in the future"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Test some giant limit values with modify
try|try
block|{
name|dfs
operator|.
name|modifyCacheDirective
argument_list|(
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|(
name|defaultExpiry
argument_list|)
operator|.
name|setId
argument_list|(
name|listInfo
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setExpiration
argument_list|(
name|Expiration
operator|.
name|NEVER
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Modified a directive to exceed pool's max relative expiration"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidRequestException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"exceeds the max relative expiration"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|dfs
operator|.
name|modifyCacheDirective
argument_list|(
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|(
name|defaultExpiry
argument_list|)
operator|.
name|setId
argument_list|(
name|listInfo
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setExpiration
argument_list|(
name|Expiration
operator|.
name|newAbsolute
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Modified a directive to exceed pool's max relative expiration"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidRequestException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"is too far in the future"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Test that the max is enforced on modify correctly when changing pools
name|CachePoolInfo
name|destPool
init|=
operator|new
name|CachePoolInfo
argument_list|(
literal|"destPool"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|addCachePool
argument_list|(
name|destPool
operator|.
name|setMaxRelativeExpiryMs
argument_list|(
name|poolExpiration
operator|/
literal|2
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|dfs
operator|.
name|modifyCacheDirective
argument_list|(
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|(
name|defaultExpiry
argument_list|)
operator|.
name|setId
argument_list|(
name|listInfo
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setPool
argument_list|(
name|destPool
operator|.
name|getPoolName
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Modified a directive to a pool with a lower max expiration"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidRequestException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"exceeds the max relative expiration"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|dfs
operator|.
name|modifyCacheDirective
argument_list|(
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|(
name|defaultExpiry
argument_list|)
operator|.
name|setId
argument_list|(
name|listInfo
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setPool
argument_list|(
name|destPool
operator|.
name|getPoolName
argument_list|()
argument_list|)
operator|.
name|setExpiration
argument_list|(
name|Expiration
operator|.
name|newRelative
argument_list|(
name|poolExpiration
operator|/
literal|2
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|dirIt
operator|=
name|dfs
operator|.
name|listCacheDirectives
argument_list|(
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setPool
argument_list|(
name|destPool
operator|.
name|getPoolName
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|listInfo
operator|=
name|dirIt
operator|.
name|next
argument_list|()
operator|.
name|getInfo
argument_list|()
expr_stmt|;
name|listExpiration
operator|=
name|listInfo
operator|.
name|getExpiration
argument_list|()
operator|.
name|getAbsoluteMillis
argument_list|()
operator|-
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected relative expiry "
operator|+
name|listExpiration
operator|+
literal|" expected approximately "
operator|+
name|poolExpiration
operator|/
literal|2
argument_list|,
name|Math
operator|.
name|abs
argument_list|(
name|poolExpiration
operator|/
literal|2
operator|-
name|listExpiration
argument_list|)
operator|<
literal|10
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// Test that cache pool and directive expiry can be modified back to never
name|dfs
operator|.
name|modifyCachePool
argument_list|(
name|destPool
operator|.
name|setMaxRelativeExpiryMs
argument_list|(
name|CachePoolInfo
operator|.
name|RELATIVE_EXPIRY_NEVER
argument_list|)
argument_list|)
expr_stmt|;
name|poolIt
operator|=
name|dfs
operator|.
name|listCachePools
argument_list|()
expr_stmt|;
name|listPool
operator|=
name|poolIt
operator|.
name|next
argument_list|()
operator|.
name|getInfo
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|listPool
operator|.
name|getPoolName
argument_list|()
operator|.
name|equals
argument_list|(
name|destPool
operator|.
name|getPoolName
argument_list|()
argument_list|)
condition|)
block|{
name|listPool
operator|=
name|poolIt
operator|.
name|next
argument_list|()
operator|.
name|getInfo
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Expected max relative expiry to match set value"
argument_list|,
name|CachePoolInfo
operator|.
name|RELATIVE_EXPIRY_NEVER
argument_list|,
name|listPool
operator|.
name|getMaxRelativeExpiryMs
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|modifyCacheDirective
argument_list|(
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setId
argument_list|(
name|listInfo
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setExpiration
argument_list|(
name|Expiration
operator|.
name|newRelative
argument_list|(
name|RELATIVE_EXPIRY_NEVER
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test modifying close to the limit
name|dfs
operator|.
name|modifyCacheDirective
argument_list|(
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setId
argument_list|(
name|listInfo
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setExpiration
argument_list|(
name|Expiration
operator|.
name|newRelative
argument_list|(
name|RELATIVE_EXPIRY_NEVER
operator|-
literal|1
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check that the NameNode is not attempting to cache anything.    */
DECL|method|checkPendingCachedEmpty (MiniDFSCluster cluster)
specifier|private
name|void
name|checkPendingCachedEmpty
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|)
throws|throws
name|Exception
block|{
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
specifier|final
name|DatanodeManager
name|datanodeManager
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
decl_stmt|;
for|for
control|(
name|DataNode
name|dn
range|:
name|cluster
operator|.
name|getDataNodes
argument_list|()
control|)
block|{
name|DatanodeDescriptor
name|descriptor
init|=
name|datanodeManager
operator|.
name|getDatanode
argument_list|(
name|dn
operator|.
name|getDatanodeId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Pending cached list of "
operator|+
name|descriptor
operator|+
literal|" is not empty, "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|descriptor
operator|.
name|getPendingCached
argument_list|()
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|,
name|descriptor
operator|.
name|getPendingCached
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|readUnlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testExceedsCapacity ()
specifier|public
name|void
name|testExceedsCapacity
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create a giant file
specifier|final
name|Path
name|fileName
init|=
operator|new
name|Path
argument_list|(
literal|"/exceeds"
argument_list|)
decl_stmt|;
specifier|final
name|long
name|fileLen
init|=
name|CACHE_CAPACITY
operator|*
operator|(
name|NUM_DATANODES
operator|*
literal|2
operator|)
decl_stmt|;
name|int
name|numCachedReplicas
init|=
call|(
name|int
call|)
argument_list|(
operator|(
name|CACHE_CAPACITY
operator|*
name|NUM_DATANODES
operator|)
operator|/
name|BLOCK_SIZE
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|fileName
argument_list|,
name|fileLen
argument_list|,
operator|(
name|short
operator|)
name|NUM_DATANODES
argument_list|,
literal|0xFADED
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|addCachePool
argument_list|(
operator|new
name|CachePoolInfo
argument_list|(
literal|"pool"
argument_list|)
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|addCacheDirective
argument_list|(
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setPool
argument_list|(
literal|"pool"
argument_list|)
operator|.
name|setPath
argument_list|(
name|fileName
argument_list|)
operator|.
name|setReplication
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|waitForCachedBlocks
argument_list|(
name|namenode
argument_list|,
operator|-
literal|1
argument_list|,
name|numCachedReplicas
argument_list|,
literal|"testExceeds:1"
argument_list|)
expr_stmt|;
name|checkPendingCachedEmpty
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|checkPendingCachedEmpty
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
comment|// Try creating a file with giant-sized blocks that exceed cache capacity
name|dfs
operator|.
name|delete
argument_list|(
name|fileName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|fileName
argument_list|,
literal|4096
argument_list|,
name|fileLen
argument_list|,
name|CACHE_CAPACITY
operator|*
literal|2
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFADED
argument_list|)
expr_stmt|;
name|checkPendingCachedEmpty
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|checkPendingCachedEmpty
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testNoBackingReplica ()
specifier|public
name|void
name|testNoBackingReplica
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Cache all three replicas for a file.
specifier|final
name|Path
name|filename
init|=
operator|new
name|Path
argument_list|(
literal|"/noback"
argument_list|)
decl_stmt|;
specifier|final
name|short
name|replication
init|=
operator|(
name|short
operator|)
literal|3
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|filename
argument_list|,
literal|1
argument_list|,
name|replication
argument_list|,
literal|0x0BAC
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|addCachePool
argument_list|(
operator|new
name|CachePoolInfo
argument_list|(
literal|"pool"
argument_list|)
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|addCacheDirective
argument_list|(
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setPool
argument_list|(
literal|"pool"
argument_list|)
operator|.
name|setPath
argument_list|(
name|filename
argument_list|)
operator|.
name|setReplication
argument_list|(
name|replication
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|waitForCachedBlocks
argument_list|(
name|namenode
argument_list|,
literal|1
argument_list|,
name|replication
argument_list|,
literal|"testNoBackingReplica:1"
argument_list|)
expr_stmt|;
comment|// Pause cache reports while we change the replication factor.
comment|// This will orphan some cached replicas.
name|DataNodeTestUtils
operator|.
name|setCacheReportsDisabledForTests
argument_list|(
name|cluster
argument_list|,
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|dfs
operator|.
name|setReplication
argument_list|(
name|filename
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitForReplication
argument_list|(
name|dfs
argument_list|,
name|filename
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
comment|// The cache locations should drop down to 1 even without cache reports.
name|waitForCachedBlocks
argument_list|(
name|namenode
argument_list|,
literal|1
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"testNoBackingReplica:2"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|DataNodeTestUtils
operator|.
name|setCacheReportsDisabledForTests
argument_list|(
name|cluster
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

