begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|PermissionStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|net
operator|.
name|DFSNetworkTopology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamenodeProtocols
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|StaticMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestDefaultBlockPlacementPolicy
specifier|public
class|class
name|TestDefaultBlockPlacementPolicy
block|{
DECL|field|REPLICATION_FACTOR
specifier|private
specifier|static
specifier|final
name|short
name|REPLICATION_FACTOR
init|=
operator|(
name|short
operator|)
literal|3
decl_stmt|;
DECL|field|DEFAULT_BLOCK_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_BLOCK_SIZE
init|=
literal|1024
decl_stmt|;
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
DECL|field|nameNodeRpc
specifier|private
name|NamenodeProtocols
name|nameNodeRpc
init|=
literal|null
decl_stmt|;
DECL|field|namesystem
specifier|private
name|FSNamesystem
name|namesystem
init|=
literal|null
decl_stmt|;
DECL|field|perm
specifier|private
name|PermissionStatus
name|perm
init|=
literal|null
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|StaticMapping
operator|.
name|resetMap
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
specifier|final
name|String
index|[]
name|racks
init|=
block|{
literal|"/RACK0"
block|,
literal|"/RACK0"
block|,
literal|"/RACK2"
block|,
literal|"/RACK3"
block|,
literal|"/RACK2"
block|}
decl_stmt|;
specifier|final
name|String
index|[]
name|hosts
init|=
block|{
literal|"/host0"
block|,
literal|"/host1"
block|,
literal|"/host2"
block|,
literal|"/host3"
block|,
literal|"/host4"
block|}
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|DEFAULT_BLOCK_SIZE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BYTES_PER_CHECKSUM_KEY
argument_list|,
name|DEFAULT_BLOCK_SIZE
operator|/
literal|2
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|5
argument_list|)
operator|.
name|racks
argument_list|(
name|racks
argument_list|)
operator|.
name|hosts
argument_list|(
name|hosts
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|nameNodeRpc
operator|=
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
expr_stmt|;
name|namesystem
operator|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
expr_stmt|;
name|perm
operator|=
operator|new
name|PermissionStatus
argument_list|(
literal|"TestDefaultBlockPlacementPolicy"
argument_list|,
literal|null
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * Verify rack-local node selection for the rack-local client in case of no    * local node    */
annotation|@
name|Test
DECL|method|testLocalRackPlacement ()
specifier|public
name|void
name|testLocalRackPlacement
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|clientMachine
init|=
literal|"client.foo.com"
decl_stmt|;
comment|// Map client to RACK2
name|String
name|clientRack
init|=
literal|"/RACK2"
decl_stmt|;
name|StaticMapping
operator|.
name|addNodeToRack
argument_list|(
name|clientMachine
argument_list|,
name|clientRack
argument_list|)
expr_stmt|;
name|testPlacement
argument_list|(
name|clientMachine
argument_list|,
name|clientRack
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify local node selection    */
annotation|@
name|Test
DECL|method|testLocalStoragePlacement ()
specifier|public
name|void
name|testLocalStoragePlacement
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|clientMachine
init|=
literal|"/host3"
decl_stmt|;
name|testPlacement
argument_list|(
name|clientMachine
argument_list|,
literal|"/RACK3"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify local node selection with using DFSNetworkTopology.    */
annotation|@
name|Test
DECL|method|testPlacementWithDFSNetworkTopology ()
specifier|public
name|void
name|testPlacementWithDFSNetworkTopology
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
specifier|final
name|String
index|[]
name|racks
init|=
block|{
literal|"/RACK0"
block|,
literal|"/RACK0"
block|,
literal|"/RACK2"
block|,
literal|"/RACK3"
block|,
literal|"/RACK2"
block|}
decl_stmt|;
specifier|final
name|String
index|[]
name|hosts
init|=
block|{
literal|"/host0"
block|,
literal|"/host1"
block|,
literal|"/host2"
block|,
literal|"/host3"
block|,
literal|"/host4"
block|}
decl_stmt|;
comment|// enables DFSNetworkTopology
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_USE_DFS_NETWORK_TOPOLOGY_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|DEFAULT_BLOCK_SIZE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BYTES_PER_CHECKSUM_KEY
argument_list|,
name|DEFAULT_BLOCK_SIZE
operator|/
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|5
argument_list|)
operator|.
name|racks
argument_list|(
name|racks
argument_list|)
operator|.
name|hosts
argument_list|(
name|hosts
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|nameNodeRpc
operator|=
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
expr_stmt|;
name|namesystem
operator|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
expr_stmt|;
name|DatanodeManager
name|dm
init|=
name|namesystem
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|dm
operator|.
name|getNetworkTopology
argument_list|()
operator|instanceof
name|DFSNetworkTopology
argument_list|)
expr_stmt|;
name|String
name|clientMachine
init|=
literal|"/host3"
decl_stmt|;
name|String
name|clientRack
init|=
literal|"/RACK3"
decl_stmt|;
name|String
name|src
init|=
literal|"/test"
decl_stmt|;
comment|// Create the file with client machine
name|HdfsFileStatus
name|fileStatus
init|=
name|namesystem
operator|.
name|startFile
argument_list|(
name|src
argument_list|,
name|perm
argument_list|,
name|clientMachine
argument_list|,
name|clientMachine
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateFlag
operator|.
name|CREATE
argument_list|)
argument_list|,
literal|true
argument_list|,
name|REPLICATION_FACTOR
argument_list|,
name|DEFAULT_BLOCK_SIZE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|LocatedBlock
name|locatedBlock
init|=
name|nameNodeRpc
operator|.
name|addBlock
argument_list|(
name|src
argument_list|,
name|clientMachine
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|fileStatus
operator|.
name|getFileId
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Block should be allocated sufficient locations"
argument_list|,
name|REPLICATION_FACTOR
argument_list|,
name|locatedBlock
operator|.
name|getLocations
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"First datanode should be rack local"
argument_list|,
name|clientRack
argument_list|,
name|locatedBlock
operator|.
name|getLocations
argument_list|()
index|[
literal|0
index|]
operator|.
name|getNetworkLocation
argument_list|()
argument_list|)
expr_stmt|;
name|nameNodeRpc
operator|.
name|abandonBlock
argument_list|(
name|locatedBlock
operator|.
name|getBlock
argument_list|()
argument_list|,
name|fileStatus
operator|.
name|getFileId
argument_list|()
argument_list|,
name|src
argument_list|,
name|clientMachine
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify decommissioned nodes should not be selected.    */
annotation|@
name|Test
DECL|method|testPlacementWithLocalRackNodesDecommissioned ()
specifier|public
name|void
name|testPlacementWithLocalRackNodesDecommissioned
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|clientMachine
init|=
literal|"client.foo.com"
decl_stmt|;
comment|// Map client to RACK3
name|String
name|clientRack
init|=
literal|"/RACK3"
decl_stmt|;
name|StaticMapping
operator|.
name|addNodeToRack
argument_list|(
name|clientMachine
argument_list|,
name|clientRack
argument_list|)
expr_stmt|;
specifier|final
name|DatanodeManager
name|dnm
init|=
name|namesystem
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
decl_stmt|;
name|DatanodeDescriptor
name|dnd3
init|=
name|dnm
operator|.
name|getDatanode
argument_list|(
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|getDatanodeId
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|dnd3
operator|.
name|getNetworkLocation
argument_list|()
argument_list|,
name|clientRack
argument_list|)
expr_stmt|;
name|dnm
operator|.
name|getDatanodeAdminManager
argument_list|()
operator|.
name|startDecommission
argument_list|(
name|dnd3
argument_list|)
expr_stmt|;
try|try
block|{
name|testPlacement
argument_list|(
name|clientMachine
argument_list|,
name|clientRack
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|dnm
operator|.
name|getDatanodeAdminManager
argument_list|()
operator|.
name|stopDecommission
argument_list|(
name|dnd3
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Verify Random rack node selection for remote client    */
annotation|@
name|Test
DECL|method|testRandomRackSelectionForRemoteClient ()
specifier|public
name|void
name|testRandomRackSelectionForRemoteClient
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|clientMachine
init|=
literal|"client.foo.com"
decl_stmt|;
comment|// Don't map client machine to any rack,
comment|// so by default it will be treated as /default-rack
comment|// in that case a random node should be selected as first node.
name|testPlacement
argument_list|(
name|clientMachine
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testPlacement (String clientMachine, String clientRack, boolean hasBlockReplicaOnRack)
specifier|private
name|void
name|testPlacement
parameter_list|(
name|String
name|clientMachine
parameter_list|,
name|String
name|clientRack
parameter_list|,
name|boolean
name|hasBlockReplicaOnRack
parameter_list|)
throws|throws
name|IOException
block|{
comment|// write 5 files and check whether all times block placed
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|String
name|src
init|=
literal|"/test-"
operator|+
name|i
decl_stmt|;
comment|// Create the file with client machine
name|HdfsFileStatus
name|fileStatus
init|=
name|namesystem
operator|.
name|startFile
argument_list|(
name|src
argument_list|,
name|perm
argument_list|,
name|clientMachine
argument_list|,
name|clientMachine
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateFlag
operator|.
name|CREATE
argument_list|)
argument_list|,
literal|true
argument_list|,
name|REPLICATION_FACTOR
argument_list|,
name|DEFAULT_BLOCK_SIZE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|LocatedBlock
name|locatedBlock
init|=
name|nameNodeRpc
operator|.
name|addBlock
argument_list|(
name|src
argument_list|,
name|clientMachine
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|fileStatus
operator|.
name|getFileId
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Block should be allocated sufficient locations"
argument_list|,
name|REPLICATION_FACTOR
argument_list|,
name|locatedBlock
operator|.
name|getLocations
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|clientRack
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|hasBlockReplicaOnRack
condition|)
block|{
name|assertEquals
argument_list|(
literal|"First datanode should be rack local"
argument_list|,
name|clientRack
argument_list|,
name|locatedBlock
operator|.
name|getLocations
argument_list|()
index|[
literal|0
index|]
operator|.
name|getNetworkLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|DatanodeInfo
name|dni
range|:
name|locatedBlock
operator|.
name|getLocations
argument_list|()
control|)
block|{
name|assertNotEquals
argument_list|(
name|clientRack
argument_list|,
name|dni
operator|.
name|getNetworkLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|nameNodeRpc
operator|.
name|abandonBlock
argument_list|(
name|locatedBlock
operator|.
name|getBlock
argument_list|()
argument_list|,
name|fileStatus
operator|.
name|getFileId
argument_list|()
argument_list|,
name|src
argument_list|,
name|clientMachine
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

