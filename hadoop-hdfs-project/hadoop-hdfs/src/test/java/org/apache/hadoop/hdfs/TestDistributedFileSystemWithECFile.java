begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BlockLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocatedFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RemoteIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ErasureCodingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Testing correctness of FileSystem.getFileBlockLocations and  * FileSystem.listFiles for erasure coded files.  */
end_comment

begin_class
DECL|class|TestDistributedFileSystemWithECFile
specifier|public
class|class
name|TestDistributedFileSystemWithECFile
block|{
DECL|field|ecPolicy
specifier|private
name|ErasureCodingPolicy
name|ecPolicy
decl_stmt|;
DECL|field|cellSize
specifier|private
name|int
name|cellSize
decl_stmt|;
DECL|field|dataBlocks
specifier|private
name|short
name|dataBlocks
decl_stmt|;
DECL|field|parityBlocks
specifier|private
name|short
name|parityBlocks
decl_stmt|;
DECL|field|numDNs
specifier|private
name|int
name|numDNs
decl_stmt|;
DECL|field|stripesPerBlock
specifier|private
name|int
name|stripesPerBlock
decl_stmt|;
DECL|field|blockSize
specifier|private
name|int
name|blockSize
decl_stmt|;
DECL|field|blockGroupSize
specifier|private
name|int
name|blockGroupSize
decl_stmt|;
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|fileContext
specifier|private
name|FileContext
name|fileContext
decl_stmt|;
DECL|field|fs
specifier|private
name|DistributedFileSystem
name|fs
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
DECL|method|getEcPolicy ()
specifier|public
name|ErasureCodingPolicy
name|getEcPolicy
parameter_list|()
block|{
return|return
name|StripedFileTestUtil
operator|.
name|getDefaultECPolicy
argument_list|()
return|;
block|}
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|ecPolicy
operator|=
name|getEcPolicy
argument_list|()
expr_stmt|;
name|cellSize
operator|=
name|ecPolicy
operator|.
name|getCellSize
argument_list|()
expr_stmt|;
name|dataBlocks
operator|=
operator|(
name|short
operator|)
name|ecPolicy
operator|.
name|getNumDataUnits
argument_list|()
expr_stmt|;
name|parityBlocks
operator|=
operator|(
name|short
operator|)
name|ecPolicy
operator|.
name|getNumParityUnits
argument_list|()
expr_stmt|;
name|numDNs
operator|=
name|dataBlocks
operator|+
name|parityBlocks
expr_stmt|;
name|stripesPerBlock
operator|=
literal|4
expr_stmt|;
name|blockSize
operator|=
name|stripesPerBlock
operator|*
name|cellSize
expr_stmt|;
name|blockGroupSize
operator|=
name|blockSize
operator|*
name|dataBlocks
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REDUNDANCY_CONSIDERLOAD_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDNs
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|fileContext
operator|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|cluster
operator|.
name|getURI
argument_list|(
literal|0
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|fs
operator|.
name|enableErasureCodingPolicy
argument_list|(
name|ecPolicy
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/ec"
argument_list|)
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getClient
argument_list|()
operator|.
name|setErasureCodingPolicy
argument_list|(
literal|"/ec"
argument_list|,
name|ecPolicy
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|createFile (String path, int size)
specifier|private
name|void
name|createFile
parameter_list|(
name|String
name|path
parameter_list|,
name|int
name|size
parameter_list|)
throws|throws
name|Exception
block|{
name|byte
index|[]
name|expected
init|=
name|StripedFileTestUtil
operator|.
name|generateBytes
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|Path
name|src
init|=
operator|new
name|Path
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|writeFile
argument_list|(
name|fs
argument_list|,
name|src
argument_list|,
operator|new
name|String
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
name|StripedFileTestUtil
operator|.
name|waitBlockGroupsReported
argument_list|(
name|fs
argument_list|,
name|src
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|StripedFileTestUtil
operator|.
name|verifyLength
argument_list|(
name|fs
argument_list|,
name|src
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testListECFilesSmallerThanOneCell ()
specifier|public
name|void
name|testListECFilesSmallerThanOneCell
parameter_list|()
throws|throws
name|Exception
block|{
name|createFile
argument_list|(
literal|"/ec/smallcell"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|LocatedFileStatus
argument_list|>
name|retVal
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|RemoteIterator
argument_list|<
name|LocatedFileStatus
argument_list|>
name|iter
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|listFiles
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/ec"
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|retVal
operator|.
name|add
argument_list|(
name|iter
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|retVal
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|LocatedFileStatus
name|fileStatus
init|=
name|retVal
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertSmallerThanOneCell
argument_list|(
name|fileStatus
operator|.
name|getBlockLocations
argument_list|()
argument_list|)
expr_stmt|;
name|BlockLocation
index|[]
name|locations
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getFileBlockLocations
argument_list|(
name|fileStatus
argument_list|,
literal|0
argument_list|,
name|fileStatus
operator|.
name|getLen
argument_list|()
argument_list|)
decl_stmt|;
name|assertSmallerThanOneCell
argument_list|(
name|locations
argument_list|)
expr_stmt|;
comment|//Test FileContext
name|fileStatus
operator|=
name|fileContext
operator|.
name|listLocatedStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/ec"
argument_list|)
argument_list|)
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertSmallerThanOneCell
argument_list|(
name|fileStatus
operator|.
name|getBlockLocations
argument_list|()
argument_list|)
expr_stmt|;
name|locations
operator|=
name|fileContext
operator|.
name|getFileBlockLocations
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/ec/smallcell"
argument_list|)
argument_list|,
literal|0
argument_list|,
name|fileStatus
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|assertSmallerThanOneCell
argument_list|(
name|locations
argument_list|)
expr_stmt|;
block|}
DECL|method|assertSmallerThanOneCell (BlockLocation[] locations)
specifier|private
name|void
name|assertSmallerThanOneCell
parameter_list|(
name|BlockLocation
index|[]
name|locations
parameter_list|)
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
name|locations
operator|.
name|length
operator|==
literal|1
argument_list|)
expr_stmt|;
name|BlockLocation
name|blockLocation
init|=
name|locations
index|[
literal|0
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|blockLocation
operator|.
name|getOffset
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|blockLocation
operator|.
name|getLength
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|blockLocation
operator|.
name|getHosts
argument_list|()
operator|.
name|length
operator|==
literal|1
operator|+
name|parityBlocks
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testListECFilesSmallerThanOneStripe ()
specifier|public
name|void
name|testListECFilesSmallerThanOneStripe
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|dataBlocksNum
init|=
name|dataBlocks
decl_stmt|;
name|createFile
argument_list|(
literal|"/ec/smallstripe"
argument_list|,
name|cellSize
operator|*
name|dataBlocksNum
argument_list|)
expr_stmt|;
name|RemoteIterator
argument_list|<
name|LocatedFileStatus
argument_list|>
name|iter
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|listFiles
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/ec"
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|LocatedFileStatus
name|fileStatus
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertSmallerThanOneStripe
argument_list|(
name|fileStatus
operator|.
name|getBlockLocations
argument_list|()
argument_list|,
name|dataBlocksNum
argument_list|)
expr_stmt|;
name|BlockLocation
index|[]
name|locations
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getFileBlockLocations
argument_list|(
name|fileStatus
argument_list|,
literal|0
argument_list|,
name|fileStatus
operator|.
name|getLen
argument_list|()
argument_list|)
decl_stmt|;
name|assertSmallerThanOneStripe
argument_list|(
name|locations
argument_list|,
name|dataBlocksNum
argument_list|)
expr_stmt|;
comment|//Test FileContext
name|fileStatus
operator|=
name|fileContext
operator|.
name|listLocatedStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/ec"
argument_list|)
argument_list|)
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertSmallerThanOneStripe
argument_list|(
name|fileStatus
operator|.
name|getBlockLocations
argument_list|()
argument_list|,
name|dataBlocksNum
argument_list|)
expr_stmt|;
name|locations
operator|=
name|fileContext
operator|.
name|getFileBlockLocations
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/ec/smallstripe"
argument_list|)
argument_list|,
literal|0
argument_list|,
name|fileStatus
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|assertSmallerThanOneStripe
argument_list|(
name|locations
argument_list|,
name|dataBlocksNum
argument_list|)
expr_stmt|;
block|}
DECL|method|assertSmallerThanOneStripe (BlockLocation[] locations, int dataBlocksNum)
specifier|private
name|void
name|assertSmallerThanOneStripe
parameter_list|(
name|BlockLocation
index|[]
name|locations
parameter_list|,
name|int
name|dataBlocksNum
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|expectedHostNum
init|=
name|dataBlocksNum
operator|+
name|parityBlocks
decl_stmt|;
name|assertTrue
argument_list|(
name|locations
operator|.
name|length
operator|==
literal|1
argument_list|)
expr_stmt|;
name|BlockLocation
name|blockLocation
init|=
name|locations
index|[
literal|0
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|blockLocation
operator|.
name|getHosts
argument_list|()
operator|.
name|length
operator|==
name|expectedHostNum
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|blockLocation
operator|.
name|getOffset
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|blockLocation
operator|.
name|getLength
argument_list|()
operator|==
name|dataBlocksNum
operator|*
name|cellSize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testListECFilesMoreThanOneBlockGroup ()
specifier|public
name|void
name|testListECFilesMoreThanOneBlockGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|createFile
argument_list|(
literal|"/ec/group"
argument_list|,
name|blockGroupSize
operator|+
literal|123
argument_list|)
expr_stmt|;
name|RemoteIterator
argument_list|<
name|LocatedFileStatus
argument_list|>
name|iter
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|listFiles
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/ec"
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|LocatedFileStatus
name|fileStatus
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertMoreThanOneBlockGroup
argument_list|(
name|fileStatus
operator|.
name|getBlockLocations
argument_list|()
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|BlockLocation
index|[]
name|locations
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getFileBlockLocations
argument_list|(
name|fileStatus
argument_list|,
literal|0
argument_list|,
name|fileStatus
operator|.
name|getLen
argument_list|()
argument_list|)
decl_stmt|;
name|assertMoreThanOneBlockGroup
argument_list|(
name|locations
argument_list|,
literal|123
argument_list|)
expr_stmt|;
comment|//Test FileContext
name|iter
operator|=
name|fileContext
operator|.
name|listLocatedStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/ec"
argument_list|)
argument_list|)
expr_stmt|;
name|fileStatus
operator|=
name|iter
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertMoreThanOneBlockGroup
argument_list|(
name|fileStatus
operator|.
name|getBlockLocations
argument_list|()
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|locations
operator|=
name|fileContext
operator|.
name|getFileBlockLocations
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/ec/group"
argument_list|)
argument_list|,
literal|0
argument_list|,
name|fileStatus
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|assertMoreThanOneBlockGroup
argument_list|(
name|locations
argument_list|,
literal|123
argument_list|)
expr_stmt|;
block|}
DECL|method|assertMoreThanOneBlockGroup (BlockLocation[] locations, int lastBlockSize)
specifier|private
name|void
name|assertMoreThanOneBlockGroup
parameter_list|(
name|BlockLocation
index|[]
name|locations
parameter_list|,
name|int
name|lastBlockSize
parameter_list|)
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
name|locations
operator|.
name|length
operator|==
literal|2
argument_list|)
expr_stmt|;
name|BlockLocation
name|fistBlockGroup
init|=
name|locations
index|[
literal|0
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|fistBlockGroup
operator|.
name|getHosts
argument_list|()
operator|.
name|length
operator|==
name|numDNs
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fistBlockGroup
operator|.
name|getOffset
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fistBlockGroup
operator|.
name|getLength
argument_list|()
operator|==
name|blockGroupSize
argument_list|)
expr_stmt|;
name|BlockLocation
name|lastBlock
init|=
name|locations
index|[
literal|1
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|lastBlock
operator|.
name|getHosts
argument_list|()
operator|.
name|length
operator|==
literal|1
operator|+
name|parityBlocks
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|lastBlock
operator|.
name|getOffset
argument_list|()
operator|==
name|blockGroupSize
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|lastBlock
operator|.
name|getLength
argument_list|()
operator|==
name|lastBlockSize
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

