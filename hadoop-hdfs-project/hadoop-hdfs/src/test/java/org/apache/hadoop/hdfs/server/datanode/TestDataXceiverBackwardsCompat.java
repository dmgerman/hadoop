begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|net
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|sasl
operator|.
name|DataEncryptionKeyFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|sasl
operator|.
name|SaslDataTransferClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|BlockTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|FsDatasetSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|FsVolumeSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|ServerSocketUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DataChecksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentCaptor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ServerSocket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Mock-based unit test to verify that DataXceiver does not fail when no  * storageId or targetStorageTypes are passed - as is the case in Hadoop 2.x.  */
end_comment

begin_class
DECL|class|TestDataXceiverBackwardsCompat
specifier|public
class|class
name|TestDataXceiverBackwardsCompat
block|{
annotation|@
name|Rule
DECL|field|timeout
specifier|public
name|Timeout
name|timeout
init|=
operator|new
name|Timeout
argument_list|(
literal|60000
argument_list|)
decl_stmt|;
DECL|method|failWithException (String message, Exception exception)
specifier|private
name|void
name|failWithException
parameter_list|(
name|String
name|message
parameter_list|,
name|Exception
name|exception
parameter_list|)
block|{
name|ByteArrayOutputStream
name|buffer
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|exception
operator|.
name|printStackTrace
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|buffer
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|stacktrace
init|=
name|buffer
operator|.
name|toString
argument_list|()
decl_stmt|;
name|fail
argument_list|(
name|message
operator|+
literal|": "
operator|+
name|exception
operator|+
literal|"; "
operator|+
name|exception
operator|.
name|getMessage
argument_list|()
operator|+
literal|"\n"
operator|+
name|stacktrace
argument_list|)
expr_stmt|;
block|}
comment|/**    * Used for mocking DataNode. Mockito does not provide a way to mock    * properties (like data or saslClient) so we have to manually set up mocks    * of those properties inside our own class.    */
DECL|class|NullDataNode
specifier|public
class|class
name|NullDataNode
extends|extends
name|DataNode
block|{
DECL|method|NullDataNode (Configuration conf, OutputStream out, int port)
specifier|public
name|NullDataNode
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|OutputStream
name|out
parameter_list|,
name|int
name|port
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|data
operator|=
operator|(
name|FsDatasetSpi
argument_list|<
name|FsVolumeSpi
argument_list|>
operator|)
name|mock
argument_list|(
name|FsDatasetSpi
operator|.
name|class
argument_list|)
expr_stmt|;
name|saslClient
operator|=
name|mock
argument_list|(
name|SaslDataTransferClient
operator|.
name|class
argument_list|)
expr_stmt|;
name|IOStreamPair
name|pair
init|=
operator|new
name|IOStreamPair
argument_list|(
literal|null
argument_list|,
name|out
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|pair
argument_list|)
operator|.
name|when
argument_list|(
name|saslClient
argument_list|)
operator|.
name|socketSend
argument_list|(
name|any
argument_list|(
name|Socket
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|OutputStream
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|DataEncryptionKeyFactory
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Token
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|DatanodeID
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
name|mock
argument_list|(
name|ReplicaHandler
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|data
argument_list|)
operator|.
name|createTemporary
argument_list|(
name|any
argument_list|(
name|StorageType
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|ExtendedBlock
operator|.
name|class
argument_list|)
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
operator|new
name|Thread
argument_list|(
operator|new
name|NullServer
argument_list|(
name|port
argument_list|)
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getDNRegistrationForBP (String bpid)
specifier|public
name|DatanodeRegistration
name|getDNRegistrationForBP
parameter_list|(
name|String
name|bpid
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|newSocket ()
specifier|public
name|Socket
name|newSocket
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|Socket
argument_list|()
return|;
block|}
comment|/**      * Class for accepting incoming an incoming connection. Does not read      * data or repeat in any way: simply allows a single client to connect to      * a local URL.      */
DECL|class|NullServer
specifier|private
class|class
name|NullServer
implements|implements
name|Runnable
block|{
DECL|field|serverSocket
specifier|private
name|ServerSocket
name|serverSocket
decl_stmt|;
DECL|method|NullServer (int port)
name|NullServer
parameter_list|(
name|int
name|port
parameter_list|)
throws|throws
name|IOException
block|{
name|serverSocket
operator|=
operator|new
name|ServerSocket
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|serverSocket
operator|.
name|accept
argument_list|()
expr_stmt|;
name|serverSocket
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Client connection accepted by NullServer"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Exception in NullServer: "
operator|+
name|e
operator|+
literal|"; "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testBackwardsCompat ()
specifier|public
name|void
name|testBackwardsCompat
parameter_list|()
throws|throws
name|Exception
block|{
name|Peer
name|peer
init|=
name|mock
argument_list|(
name|Peer
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|""
argument_list|)
operator|.
name|when
argument_list|(
name|peer
argument_list|)
operator|.
name|getRemoteAddressString
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|int
name|port
init|=
name|ServerSocketUtil
operator|.
name|getPort
argument_list|(
literal|1234
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|DataNode
name|dataNode
init|=
operator|new
name|NullDataNode
argument_list|(
name|conf
argument_list|,
name|out
argument_list|,
name|port
argument_list|)
decl_stmt|;
name|DataXceiverServer
name|server
init|=
operator|new
name|DataXceiverServer
argument_list|(
name|mock
argument_list|(
name|PeerServer
operator|.
name|class
argument_list|)
argument_list|,
name|conf
argument_list|,
name|dataNode
argument_list|)
decl_stmt|;
name|DataXceiver
name|xceiver
init|=
name|spy
argument_list|(
name|DataXceiver
operator|.
name|create
argument_list|(
name|peer
argument_list|,
name|dataNode
argument_list|,
name|server
argument_list|)
argument_list|)
decl_stmt|;
name|BlockReceiver
name|mockBlockReceiver
init|=
name|mock
argument_list|(
name|BlockReceiver
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|mock
argument_list|(
name|Replica
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|mockBlockReceiver
argument_list|)
operator|.
name|getReplica
argument_list|()
expr_stmt|;
name|DatanodeInfo
index|[]
name|targets
init|=
block|{
name|mock
argument_list|(
name|DatanodeInfo
operator|.
name|class
argument_list|)
block|}
decl_stmt|;
name|doReturn
argument_list|(
literal|"localhost:"
operator|+
name|port
argument_list|)
operator|.
name|when
argument_list|(
name|targets
index|[
literal|0
index|]
argument_list|)
operator|.
name|getXferAddr
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
literal|"127.0.0.1:"
operator|+
name|port
argument_list|)
operator|.
name|when
argument_list|(
name|targets
index|[
literal|0
index|]
argument_list|)
operator|.
name|getXferAddr
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|StorageType
index|[]
name|storageTypes
init|=
block|{
name|StorageType
operator|.
name|RAM_DISK
block|}
decl_stmt|;
name|doReturn
argument_list|(
name|mockBlockReceiver
argument_list|)
operator|.
name|when
argument_list|(
name|xceiver
argument_list|)
operator|.
name|getBlockReceiver
argument_list|(
name|any
argument_list|(
name|ExtendedBlock
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|StorageType
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|DataInputStream
operator|.
name|class
argument_list|)
argument_list|,
name|anyString
argument_list|()
argument_list|,
name|anyString
argument_list|()
argument_list|,
name|any
argument_list|(
name|BlockConstructionStage
operator|.
name|class
argument_list|)
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|anyString
argument_list|()
argument_list|,
name|any
argument_list|(
name|DatanodeInfo
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|DataNode
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|DataChecksum
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|CachingStrategy
operator|.
name|class
argument_list|)
argument_list|,
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
operator|.
name|capture
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|,
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|token
init|=
operator|(
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
operator|)
name|mock
argument_list|(
name|Token
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|""
operator|.
name|getBytes
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|token
argument_list|)
operator|.
name|getIdentifier
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
literal|""
operator|.
name|getBytes
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|token
argument_list|)
operator|.
name|getPassword
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
operator|new
name|Text
argument_list|(
literal|""
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|token
argument_list|)
operator|.
name|getKind
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
operator|new
name|Text
argument_list|(
literal|""
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|token
argument_list|)
operator|.
name|getService
argument_list|()
expr_stmt|;
name|DataChecksum
name|checksum
init|=
name|mock
argument_list|(
name|DataChecksum
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|DataChecksum
operator|.
name|Type
operator|.
name|NULL
argument_list|)
operator|.
name|when
argument_list|(
name|checksum
argument_list|)
operator|.
name|getChecksumType
argument_list|()
expr_stmt|;
name|DatanodeInfo
name|datanodeInfo
init|=
name|mock
argument_list|(
name|DatanodeInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|"localhost"
argument_list|)
operator|.
name|when
argument_list|(
name|datanodeInfo
argument_list|)
operator|.
name|getHostName
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
literal|"127.0.0.1"
argument_list|)
operator|.
name|when
argument_list|(
name|datanodeInfo
argument_list|)
operator|.
name|getIpAddr
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|DatanodeInfo
operator|.
name|AdminStates
operator|.
name|NORMAL
argument_list|)
operator|.
name|when
argument_list|(
name|datanodeInfo
argument_list|)
operator|.
name|getAdminState
argument_list|()
expr_stmt|;
name|Exception
name|storedException
init|=
literal|null
decl_stmt|;
try|try
block|{
name|xceiver
operator|.
name|writeBlock
argument_list|(
operator|new
name|ExtendedBlock
argument_list|(
literal|"Dummy-pool"
argument_list|,
literal|0L
argument_list|)
argument_list|,
name|StorageType
operator|.
name|RAM_DISK
argument_list|,
name|token
argument_list|,
literal|"Dummy-Client"
argument_list|,
name|targets
argument_list|,
name|storageTypes
argument_list|,
name|datanodeInfo
argument_list|,
name|BlockConstructionStage
operator|.
name|PIPELINE_SETUP_CREATE
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|checksum
argument_list|,
name|CachingStrategy
operator|.
name|newDefaultStrategy
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
operator|new
name|boolean
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Not enough things have been mocked for this to complete without
comment|// exceptions, but we want to make sure we can at least get as far as
comment|// sending data to the server with null values for storageId and
comment|// targetStorageTypes.
name|storedException
operator|=
name|e
expr_stmt|;
block|}
name|byte
index|[]
name|output
init|=
name|out
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
if|if
condition|(
name|output
operator|.
name|length
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|storedException
operator|==
literal|null
condition|)
block|{
name|failWithException
argument_list|(
literal|"No output written, but no exception either (this "
operator|+
literal|"shouldn't happen"
argument_list|,
name|storedException
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|failWithException
argument_list|(
literal|"Exception occurred before anything was written"
argument_list|,
name|storedException
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

