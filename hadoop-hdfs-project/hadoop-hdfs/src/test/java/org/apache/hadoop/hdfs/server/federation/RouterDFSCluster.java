begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|FS_DEFAULT_NAME_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_HA_NAMENODES_KEY_PREFIX
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_HA_NAMENODE_ID_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HTTP_ADDRESS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_RPC_ADDRESS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_RPC_BIND_HOST_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_SERVICE_RPC_BIND_HOST_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMESERVICES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMESERVICE_ID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_ROUTER_ADMIN_ADDRESS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_ROUTER_ADMIN_BIND_HOST_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_ROUTER_CACHE_TIME_TO_LIVE_MS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_ROUTER_DEFAULT_NAMESERVICE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_ROUTER_HANDLER_COUNT_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_ROUTER_HEARTBEAT_INTERVAL_MS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_ROUTER_HTTPS_ADDRESS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_ROUTER_HTTP_ADDRESS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_ROUTER_HTTP_BIND_HOST_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_ROUTER_MONITOR_NAMENODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_ROUTER_RPC_ADDRESS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_ROUTER_RPC_BIND_HOST_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|FEDERATION_FILE_RESOLVER_CLIENT_CLASS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|FEDERATION_NAMENODE_RESOLVER_CLIENT_CLASS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|FederationTestUtils
operator|.
name|NAMENODES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|FederationTestUtils
operator|.
name|addDirectory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|FederationTestUtils
operator|.
name|waitNamenodeRegistered
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|UnsupportedFileSystemException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceProtocol
operator|.
name|HAServiceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
operator|.
name|NameNodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSNNTopology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSNNTopology
operator|.
name|NNConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSNNTopology
operator|.
name|NSConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|ActiveNamenodeResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|FederationNamenodeServiceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|FileSubclusterResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|NamenodeStatusReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
operator|.
name|Router
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
operator|.
name|RouterClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSImage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamespaceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|Service
operator|.
name|STATE
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Test utility to mimic a federated HDFS cluster with multiple routers.  */
end_comment

begin_class
DECL|class|RouterDFSCluster
specifier|public
class|class
name|RouterDFSCluster
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RouterDFSCluster
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|TEST_STRING
specifier|public
specifier|static
specifier|final
name|String
name|TEST_STRING
init|=
literal|"teststring"
decl_stmt|;
DECL|field|TEST_DIR
specifier|public
specifier|static
specifier|final
name|String
name|TEST_DIR
init|=
literal|"testdir"
decl_stmt|;
DECL|field|TEST_FILE
specifier|public
specifier|static
specifier|final
name|String
name|TEST_FILE
init|=
literal|"testfile"
decl_stmt|;
comment|/** Nameservices in the federated cluster. */
DECL|field|nameservices
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|nameservices
decl_stmt|;
comment|/** Namenodes in the federated cluster. */
DECL|field|namenodes
specifier|private
name|List
argument_list|<
name|NamenodeContext
argument_list|>
name|namenodes
decl_stmt|;
comment|/** Routers in the federated cluster. */
DECL|field|routers
specifier|private
name|List
argument_list|<
name|RouterContext
argument_list|>
name|routers
decl_stmt|;
comment|/** If the Namenodes are in high availability.*/
DECL|field|highAvailability
specifier|private
name|boolean
name|highAvailability
decl_stmt|;
comment|/** Number of datanodes per nameservice. */
DECL|field|numDatanodesPerNameservice
specifier|private
name|int
name|numDatanodesPerNameservice
init|=
literal|2
decl_stmt|;
comment|/** Mini cluster. */
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|DEFAULT_HEARTBEAT_INTERVAL_MS
specifier|protected
specifier|static
specifier|final
name|long
name|DEFAULT_HEARTBEAT_INTERVAL_MS
init|=
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|5
argument_list|)
decl_stmt|;
DECL|field|DEFAULT_CACHE_INTERVAL_MS
specifier|protected
specifier|static
specifier|final
name|long
name|DEFAULT_CACHE_INTERVAL_MS
init|=
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|5
argument_list|)
decl_stmt|;
comment|/** Heartbeat interval in milliseconds. */
DECL|field|heartbeatInterval
specifier|private
name|long
name|heartbeatInterval
decl_stmt|;
comment|/** Cache flush interval in milliseconds. */
DECL|field|cacheFlushInterval
specifier|private
name|long
name|cacheFlushInterval
decl_stmt|;
comment|/** Router configuration overrides. */
DECL|field|routerOverrides
specifier|private
name|Configuration
name|routerOverrides
decl_stmt|;
comment|/** Namenode configuration overrides. */
DECL|field|namenodeOverrides
specifier|private
name|Configuration
name|namenodeOverrides
decl_stmt|;
comment|/**    * Router context.    */
DECL|class|RouterContext
specifier|public
class|class
name|RouterContext
block|{
DECL|field|router
specifier|private
name|Router
name|router
decl_stmt|;
DECL|field|fileContext
specifier|private
name|FileContext
name|fileContext
decl_stmt|;
DECL|field|nameserviceId
specifier|private
name|String
name|nameserviceId
decl_stmt|;
DECL|field|namenodeId
specifier|private
name|String
name|namenodeId
decl_stmt|;
DECL|field|rpcPort
specifier|private
name|int
name|rpcPort
decl_stmt|;
DECL|field|httpPort
specifier|private
name|int
name|httpPort
decl_stmt|;
DECL|field|client
specifier|private
name|DFSClient
name|client
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|adminClient
specifier|private
name|RouterClient
name|adminClient
decl_stmt|;
DECL|field|fileSystemUri
specifier|private
name|URI
name|fileSystemUri
decl_stmt|;
DECL|method|RouterContext (Configuration conf, String nsId, String nnId)
specifier|public
name|RouterContext
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|nsId
parameter_list|,
name|String
name|nnId
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|nameserviceId
operator|=
name|nsId
expr_stmt|;
name|this
operator|.
name|namenodeId
operator|=
name|nnId
expr_stmt|;
name|this
operator|.
name|router
operator|=
operator|new
name|Router
argument_list|()
expr_stmt|;
name|this
operator|.
name|router
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|getRouter ()
specifier|public
name|Router
name|getRouter
parameter_list|()
block|{
return|return
name|this
operator|.
name|router
return|;
block|}
DECL|method|getNameserviceId ()
specifier|public
name|String
name|getNameserviceId
parameter_list|()
block|{
return|return
name|this
operator|.
name|nameserviceId
return|;
block|}
DECL|method|getNamenodeId ()
specifier|public
name|String
name|getNamenodeId
parameter_list|()
block|{
return|return
name|this
operator|.
name|namenodeId
return|;
block|}
DECL|method|getRpcPort ()
specifier|public
name|int
name|getRpcPort
parameter_list|()
block|{
return|return
name|this
operator|.
name|rpcPort
return|;
block|}
DECL|method|getHttpPort ()
specifier|public
name|int
name|getHttpPort
parameter_list|()
block|{
return|return
name|this
operator|.
name|httpPort
return|;
block|}
DECL|method|getFileContext ()
specifier|public
name|FileContext
name|getFileContext
parameter_list|()
block|{
return|return
name|this
operator|.
name|fileContext
return|;
block|}
DECL|method|initRouter ()
specifier|public
name|void
name|initRouter
parameter_list|()
throws|throws
name|URISyntaxException
block|{
comment|// Store the bound points for the router interfaces
name|InetSocketAddress
name|rpcAddress
init|=
name|router
operator|.
name|getRpcServerAddress
argument_list|()
decl_stmt|;
if|if
condition|(
name|rpcAddress
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|rpcPort
operator|=
name|rpcAddress
operator|.
name|getPort
argument_list|()
expr_stmt|;
name|this
operator|.
name|fileSystemUri
operator|=
name|URI
operator|.
name|create
argument_list|(
literal|"hdfs://"
operator|+
name|NetUtils
operator|.
name|getHostPortString
argument_list|(
name|rpcAddress
argument_list|)
argument_list|)
expr_stmt|;
comment|// Override the default FS to point to the router RPC
name|DistributedFileSystem
operator|.
name|setDefaultUri
argument_list|(
name|conf
argument_list|,
name|fileSystemUri
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|fileContext
operator|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedFileSystemException
name|e
parameter_list|)
block|{
name|this
operator|.
name|fileContext
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|InetSocketAddress
name|httpAddress
init|=
name|router
operator|.
name|getHttpServerAddress
argument_list|()
decl_stmt|;
if|if
condition|(
name|httpAddress
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|httpPort
operator|=
name|httpAddress
operator|.
name|getPort
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getFileSystem ()
specifier|public
name|FileSystem
name|getFileSystem
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|DistributedFileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
return|;
block|}
DECL|method|getClient (UserGroupInformation user)
specifier|public
name|DFSClient
name|getClient
parameter_list|(
name|UserGroupInformation
name|user
parameter_list|)
throws|throws
name|IOException
throws|,
name|URISyntaxException
throws|,
name|InterruptedException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Connecting to router at {}"
argument_list|,
name|fileSystemUri
argument_list|)
expr_stmt|;
return|return
name|user
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|DFSClient
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DFSClient
name|run
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|DFSClient
argument_list|(
name|fileSystemUri
argument_list|,
name|conf
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|getAdminClient ()
specifier|public
name|RouterClient
name|getAdminClient
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|adminClient
operator|==
literal|null
condition|)
block|{
name|InetSocketAddress
name|routerSocket
init|=
name|router
operator|.
name|getAdminServerAddress
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Connecting to router admin at {}"
argument_list|,
name|routerSocket
argument_list|)
expr_stmt|;
name|adminClient
operator|=
operator|new
name|RouterClient
argument_list|(
name|routerSocket
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
return|return
name|adminClient
return|;
block|}
DECL|method|getClient ()
specifier|public
name|DFSClient
name|getClient
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
if|if
condition|(
name|client
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Connecting to router at {}"
argument_list|,
name|fileSystemUri
argument_list|)
expr_stmt|;
name|client
operator|=
operator|new
name|DFSClient
argument_list|(
name|fileSystemUri
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
return|return
name|client
return|;
block|}
block|}
comment|/**    * Namenode context in the federated cluster.    */
DECL|class|NamenodeContext
specifier|public
class|class
name|NamenodeContext
block|{
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|namenode
specifier|private
name|NameNode
name|namenode
decl_stmt|;
DECL|field|nameserviceId
specifier|private
name|String
name|nameserviceId
decl_stmt|;
DECL|field|namenodeId
specifier|private
name|String
name|namenodeId
decl_stmt|;
DECL|field|fileContext
specifier|private
name|FileContext
name|fileContext
decl_stmt|;
DECL|field|rpcPort
specifier|private
name|int
name|rpcPort
decl_stmt|;
DECL|field|servicePort
specifier|private
name|int
name|servicePort
decl_stmt|;
DECL|field|lifelinePort
specifier|private
name|int
name|lifelinePort
decl_stmt|;
DECL|field|httpPort
specifier|private
name|int
name|httpPort
decl_stmt|;
DECL|field|fileSystemUri
specifier|private
name|URI
name|fileSystemUri
decl_stmt|;
DECL|field|index
specifier|private
name|int
name|index
decl_stmt|;
DECL|field|client
specifier|private
name|DFSClient
name|client
decl_stmt|;
DECL|method|NamenodeContext ( Configuration conf, String nsId, String nnId, int index)
specifier|public
name|NamenodeContext
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|nsId
parameter_list|,
name|String
name|nnId
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|nameserviceId
operator|=
name|nsId
expr_stmt|;
name|this
operator|.
name|namenodeId
operator|=
name|nnId
expr_stmt|;
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
block|}
DECL|method|getNamenode ()
specifier|public
name|NameNode
name|getNamenode
parameter_list|()
block|{
return|return
name|this
operator|.
name|namenode
return|;
block|}
DECL|method|getNameserviceId ()
specifier|public
name|String
name|getNameserviceId
parameter_list|()
block|{
return|return
name|this
operator|.
name|nameserviceId
return|;
block|}
DECL|method|getNamenodeId ()
specifier|public
name|String
name|getNamenodeId
parameter_list|()
block|{
return|return
name|this
operator|.
name|namenodeId
return|;
block|}
DECL|method|getFileContext ()
specifier|public
name|FileContext
name|getFileContext
parameter_list|()
block|{
return|return
name|this
operator|.
name|fileContext
return|;
block|}
DECL|method|setNamenode (NameNode nn)
specifier|public
name|void
name|setNamenode
parameter_list|(
name|NameNode
name|nn
parameter_list|)
throws|throws
name|URISyntaxException
block|{
name|this
operator|.
name|namenode
operator|=
name|nn
expr_stmt|;
comment|// Store the bound ports and override the default FS with the local NN RPC
name|this
operator|.
name|rpcPort
operator|=
name|nn
operator|.
name|getNameNodeAddress
argument_list|()
operator|.
name|getPort
argument_list|()
expr_stmt|;
name|this
operator|.
name|servicePort
operator|=
name|nn
operator|.
name|getServiceRpcAddress
argument_list|()
operator|.
name|getPort
argument_list|()
expr_stmt|;
name|this
operator|.
name|lifelinePort
operator|=
name|nn
operator|.
name|getServiceRpcAddress
argument_list|()
operator|.
name|getPort
argument_list|()
expr_stmt|;
name|this
operator|.
name|httpPort
operator|=
name|nn
operator|.
name|getHttpAddress
argument_list|()
operator|.
name|getPort
argument_list|()
expr_stmt|;
name|this
operator|.
name|fileSystemUri
operator|=
operator|new
name|URI
argument_list|(
literal|"hdfs://"
operator|+
name|namenode
operator|.
name|getHostAndPort
argument_list|()
argument_list|)
expr_stmt|;
name|DistributedFileSystem
operator|.
name|setDefaultUri
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|this
operator|.
name|fileSystemUri
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|fileContext
operator|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedFileSystemException
name|e
parameter_list|)
block|{
name|this
operator|.
name|fileContext
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|getRpcAddress ()
specifier|public
name|String
name|getRpcAddress
parameter_list|()
block|{
return|return
name|namenode
operator|.
name|getNameNodeAddress
argument_list|()
operator|.
name|getHostName
argument_list|()
operator|+
literal|":"
operator|+
name|rpcPort
return|;
block|}
DECL|method|getServiceAddress ()
specifier|public
name|String
name|getServiceAddress
parameter_list|()
block|{
return|return
name|namenode
operator|.
name|getServiceRpcAddress
argument_list|()
operator|.
name|getHostName
argument_list|()
operator|+
literal|":"
operator|+
name|servicePort
return|;
block|}
DECL|method|getLifelineAddress ()
specifier|public
name|String
name|getLifelineAddress
parameter_list|()
block|{
return|return
name|namenode
operator|.
name|getServiceRpcAddress
argument_list|()
operator|.
name|getHostName
argument_list|()
operator|+
literal|":"
operator|+
name|lifelinePort
return|;
block|}
DECL|method|getHttpAddress ()
specifier|public
name|String
name|getHttpAddress
parameter_list|()
block|{
return|return
name|namenode
operator|.
name|getHttpAddress
argument_list|()
operator|.
name|getHostName
argument_list|()
operator|+
literal|":"
operator|+
name|httpPort
return|;
block|}
DECL|method|getFileSystem ()
specifier|public
name|FileSystem
name|getFileSystem
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|DistributedFileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
return|;
block|}
DECL|method|resetClient ()
specifier|public
name|void
name|resetClient
parameter_list|()
block|{
name|client
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|getClient (UserGroupInformation user)
specifier|public
name|DFSClient
name|getClient
parameter_list|(
name|UserGroupInformation
name|user
parameter_list|)
throws|throws
name|IOException
throws|,
name|URISyntaxException
throws|,
name|InterruptedException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Connecting to namenode at {}"
argument_list|,
name|fileSystemUri
argument_list|)
expr_stmt|;
return|return
name|user
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|DFSClient
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DFSClient
name|run
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|DFSClient
argument_list|(
name|fileSystemUri
argument_list|,
name|conf
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|getClient ()
specifier|public
name|DFSClient
name|getClient
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
if|if
condition|(
name|client
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Connecting to namenode at {}"
argument_list|,
name|fileSystemUri
argument_list|)
expr_stmt|;
name|client
operator|=
operator|new
name|DFSClient
argument_list|(
name|fileSystemUri
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
return|return
name|client
return|;
block|}
DECL|method|getConfSuffix ()
specifier|public
name|String
name|getConfSuffix
parameter_list|()
block|{
name|String
name|suffix
init|=
name|nameserviceId
decl_stmt|;
if|if
condition|(
name|highAvailability
condition|)
block|{
name|suffix
operator|+=
literal|"."
operator|+
name|namenodeId
expr_stmt|;
block|}
return|return
name|suffix
return|;
block|}
block|}
DECL|method|RouterDFSCluster (boolean ha, int numNameservices, int numNamenodes, long heartbeatInterval, long cacheFlushInterval)
specifier|public
name|RouterDFSCluster
parameter_list|(
name|boolean
name|ha
parameter_list|,
name|int
name|numNameservices
parameter_list|,
name|int
name|numNamenodes
parameter_list|,
name|long
name|heartbeatInterval
parameter_list|,
name|long
name|cacheFlushInterval
parameter_list|)
block|{
name|this
operator|.
name|highAvailability
operator|=
name|ha
expr_stmt|;
name|this
operator|.
name|heartbeatInterval
operator|=
name|heartbeatInterval
expr_stmt|;
name|this
operator|.
name|cacheFlushInterval
operator|=
name|cacheFlushInterval
expr_stmt|;
name|configureNameservices
argument_list|(
name|numNameservices
argument_list|,
name|numNamenodes
argument_list|)
expr_stmt|;
block|}
DECL|method|RouterDFSCluster (boolean ha, int numNameservices)
specifier|public
name|RouterDFSCluster
parameter_list|(
name|boolean
name|ha
parameter_list|,
name|int
name|numNameservices
parameter_list|)
block|{
name|this
argument_list|(
name|ha
argument_list|,
name|numNameservices
argument_list|,
literal|2
argument_list|,
name|DEFAULT_HEARTBEAT_INTERVAL_MS
argument_list|,
name|DEFAULT_CACHE_INTERVAL_MS
argument_list|)
expr_stmt|;
block|}
DECL|method|RouterDFSCluster (boolean ha, int numNameservices, int numNamenodes)
specifier|public
name|RouterDFSCluster
parameter_list|(
name|boolean
name|ha
parameter_list|,
name|int
name|numNameservices
parameter_list|,
name|int
name|numNamenodes
parameter_list|)
block|{
name|this
argument_list|(
name|ha
argument_list|,
name|numNameservices
argument_list|,
name|numNamenodes
argument_list|,
name|DEFAULT_HEARTBEAT_INTERVAL_MS
argument_list|,
name|DEFAULT_CACHE_INTERVAL_MS
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add configuration settings to override default Router settings.    *    * @param conf Router configuration overrides.    */
DECL|method|addRouterOverrides (Configuration conf)
specifier|public
name|void
name|addRouterOverrides
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|routerOverrides
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|routerOverrides
operator|=
name|conf
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|routerOverrides
operator|.
name|addResource
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Add configuration settings to override default Namenode settings.    *    * @param conf Namenode configuration overrides.    */
DECL|method|addNamenodeOverrides (Configuration conf)
specifier|public
name|void
name|addNamenodeOverrides
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|namenodeOverrides
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|namenodeOverrides
operator|=
name|conf
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|namenodeOverrides
operator|.
name|addResource
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Generate the configuration for a client.    *    * @param nsId Nameservice identifier.    * @return New namenode configuration.    */
DECL|method|generateNamenodeConfiguration (String nsId)
specifier|public
name|Configuration
name|generateNamenodeConfiguration
parameter_list|(
name|String
name|nsId
parameter_list|)
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMESERVICES
argument_list|,
name|getNameservicesKey
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FS_DEFAULT_NAME_KEY
argument_list|,
literal|"hdfs://"
operator|+
name|nsId
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|ns
range|:
name|nameservices
control|)
block|{
if|if
condition|(
name|highAvailability
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|DFS_HA_NAMENODES_KEY_PREFIX
operator|+
literal|"."
operator|+
name|ns
argument_list|,
name|NAMENODES
index|[
literal|0
index|]
operator|+
literal|","
operator|+
name|NAMENODES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|NamenodeContext
name|context
range|:
name|getNamenodes
argument_list|(
name|ns
argument_list|)
control|)
block|{
name|String
name|suffix
init|=
name|context
operator|.
name|getConfSuffix
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMENODE_RPC_ADDRESS_KEY
operator|+
literal|"."
operator|+
name|suffix
argument_list|,
literal|"127.0.0.1:"
operator|+
name|context
operator|.
name|rpcPort
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMENODE_HTTP_ADDRESS_KEY
operator|+
literal|"."
operator|+
name|suffix
argument_list|,
literal|"127.0.0.1:"
operator|+
name|context
operator|.
name|httpPort
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMENODE_RPC_BIND_HOST_KEY
operator|+
literal|"."
operator|+
name|suffix
argument_list|,
literal|"0.0.0.0"
argument_list|)
expr_stmt|;
comment|// If the service port is enabled by default, we need to set them up
name|boolean
name|servicePortEnabled
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|servicePortEnabled
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY
operator|+
literal|"."
operator|+
name|suffix
argument_list|,
literal|"127.0.0.1:"
operator|+
name|context
operator|.
name|servicePort
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMENODE_SERVICE_RPC_BIND_HOST_KEY
operator|+
literal|"."
operator|+
name|suffix
argument_list|,
literal|"0.0.0.0"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|this
operator|.
name|namenodeOverrides
operator|!=
literal|null
condition|)
block|{
name|conf
operator|.
name|addResource
argument_list|(
name|this
operator|.
name|namenodeOverrides
argument_list|)
expr_stmt|;
block|}
return|return
name|conf
return|;
block|}
comment|/**    * Generate the configuration for a client.    *    * @return New configuration for a client.    */
DECL|method|generateClientConfiguration ()
specifier|public
name|Configuration
name|generateClientConfiguration
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|String
name|ns0
init|=
name|getNameservices
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
name|generateNamenodeConfiguration
argument_list|(
name|ns0
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
comment|/**    * Generate the configuration for a Router.    *    * @param nsId Nameservice identifier.    * @param nnId Namenode identifier.    * @return New configuration for a Router.    */
DECL|method|generateRouterConfiguration (String nsId, String nnId)
specifier|public
name|Configuration
name|generateRouterConfiguration
parameter_list|(
name|String
name|nsId
parameter_list|,
name|String
name|nnId
parameter_list|)
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
name|generateNamenodeConfiguration
argument_list|(
name|nsId
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFS_ROUTER_HANDLER_COUNT_KEY
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_ROUTER_RPC_ADDRESS_KEY
argument_list|,
literal|"127.0.0.1:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_ROUTER_RPC_BIND_HOST_KEY
argument_list|,
literal|"0.0.0.0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_ROUTER_ADMIN_ADDRESS_KEY
argument_list|,
literal|"127.0.0.1:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_ROUTER_ADMIN_BIND_HOST_KEY
argument_list|,
literal|"0.0.0.0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_ROUTER_HTTP_ADDRESS_KEY
argument_list|,
literal|"127.0.0.1:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_ROUTER_HTTPS_ADDRESS_KEY
argument_list|,
literal|"127.0.0.1:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_ROUTER_HTTP_BIND_HOST_KEY
argument_list|,
literal|"0.0.0.0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_ROUTER_DEFAULT_NAMESERVICE
argument_list|,
name|nameservices
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFS_ROUTER_HEARTBEAT_INTERVAL_MS
argument_list|,
name|heartbeatInterval
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFS_ROUTER_CACHE_TIME_TO_LIVE_MS
argument_list|,
name|cacheFlushInterval
argument_list|)
expr_stmt|;
comment|// Use mock resolver classes
name|conf
operator|.
name|setClass
argument_list|(
name|FEDERATION_NAMENODE_RESOLVER_CLIENT_CLASS
argument_list|,
name|MockResolver
operator|.
name|class
argument_list|,
name|ActiveNamenodeResolver
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|FEDERATION_FILE_RESOLVER_CLIENT_CLASS
argument_list|,
name|MockResolver
operator|.
name|class
argument_list|,
name|FileSubclusterResolver
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// Set the nameservice ID for the default NN monitor
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMESERVICE_ID
argument_list|,
name|nsId
argument_list|)
expr_stmt|;
if|if
condition|(
name|nnId
operator|!=
literal|null
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|DFS_HA_NAMENODE_ID_KEY
argument_list|,
name|nnId
argument_list|)
expr_stmt|;
block|}
comment|// Namenodes to monitor
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|ns
range|:
name|this
operator|.
name|nameservices
control|)
block|{
for|for
control|(
name|NamenodeContext
name|context
range|:
name|getNamenodes
argument_list|(
name|ns
argument_list|)
control|)
block|{
name|String
name|suffix
init|=
name|context
operator|.
name|getConfSuffix
argument_list|()
decl_stmt|;
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|suffix
argument_list|)
expr_stmt|;
block|}
block|}
name|conf
operator|.
name|set
argument_list|(
name|DFS_ROUTER_MONITOR_NAMENODE
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add custom overrides if available
if|if
condition|(
name|this
operator|.
name|routerOverrides
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|this
operator|.
name|routerOverrides
control|)
block|{
name|String
name|confKey
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|confValue
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|confKey
argument_list|,
name|confValue
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|conf
return|;
block|}
DECL|method|configureNameservices (int numNameservices, int numNamenodes)
specifier|public
name|void
name|configureNameservices
parameter_list|(
name|int
name|numNameservices
parameter_list|,
name|int
name|numNamenodes
parameter_list|)
block|{
name|this
operator|.
name|nameservices
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|namenodes
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|NamenodeContext
name|context
init|=
literal|null
decl_stmt|;
name|int
name|nnIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numNameservices
condition|;
name|i
operator|++
control|)
block|{
name|String
name|ns
init|=
literal|"ns"
operator|+
name|i
decl_stmt|;
name|this
operator|.
name|nameservices
operator|.
name|add
argument_list|(
literal|"ns"
operator|+
name|i
argument_list|)
expr_stmt|;
name|Configuration
name|nnConf
init|=
name|generateNamenodeConfiguration
argument_list|(
name|ns
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|highAvailability
condition|)
block|{
name|context
operator|=
operator|new
name|NamenodeContext
argument_list|(
name|nnConf
argument_list|,
name|ns
argument_list|,
literal|null
argument_list|,
name|nnIndex
operator|++
argument_list|)
expr_stmt|;
name|this
operator|.
name|namenodes
operator|.
name|add
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numNamenodes
condition|;
name|j
operator|++
control|)
block|{
name|context
operator|=
operator|new
name|NamenodeContext
argument_list|(
name|nnConf
argument_list|,
name|ns
argument_list|,
name|NAMENODES
index|[
name|j
index|]
argument_list|,
name|nnIndex
operator|++
argument_list|)
expr_stmt|;
name|this
operator|.
name|namenodes
operator|.
name|add
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|setNumDatanodesPerNameservice (int num)
specifier|public
name|void
name|setNumDatanodesPerNameservice
parameter_list|(
name|int
name|num
parameter_list|)
block|{
name|this
operator|.
name|numDatanodesPerNameservice
operator|=
name|num
expr_stmt|;
block|}
DECL|method|getNameservicesKey ()
specifier|public
name|String
name|getNameservicesKey
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|nsId
range|:
name|this
operator|.
name|nameservices
control|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|nsId
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getRandomNameservice ()
specifier|public
name|String
name|getRandomNameservice
parameter_list|()
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|int
name|randIndex
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|nameservices
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|nameservices
operator|.
name|get
argument_list|(
name|randIndex
argument_list|)
return|;
block|}
DECL|method|getNameservices ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getNameservices
parameter_list|()
block|{
return|return
name|nameservices
return|;
block|}
DECL|method|getNamenodes (String nameservice)
specifier|public
name|List
argument_list|<
name|NamenodeContext
argument_list|>
name|getNamenodes
parameter_list|(
name|String
name|nameservice
parameter_list|)
block|{
name|List
argument_list|<
name|NamenodeContext
argument_list|>
name|nns
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|NamenodeContext
name|c
range|:
name|namenodes
control|)
block|{
if|if
condition|(
name|c
operator|.
name|nameserviceId
operator|.
name|equals
argument_list|(
name|nameservice
argument_list|)
condition|)
block|{
name|nns
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|nns
return|;
block|}
DECL|method|getRandomNamenode ()
specifier|public
name|NamenodeContext
name|getRandomNamenode
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|int
name|i
init|=
name|rand
operator|.
name|nextInt
argument_list|(
name|this
operator|.
name|namenodes
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|this
operator|.
name|namenodes
operator|.
name|get
argument_list|(
name|i
argument_list|)
return|;
block|}
DECL|method|getNamenodes ()
specifier|public
name|List
argument_list|<
name|NamenodeContext
argument_list|>
name|getNamenodes
parameter_list|()
block|{
return|return
name|this
operator|.
name|namenodes
return|;
block|}
DECL|method|isHighAvailability ()
specifier|public
name|boolean
name|isHighAvailability
parameter_list|()
block|{
return|return
name|highAvailability
return|;
block|}
DECL|method|getNamenode (String nameservice, String namenode)
specifier|public
name|NamenodeContext
name|getNamenode
parameter_list|(
name|String
name|nameservice
parameter_list|,
name|String
name|namenode
parameter_list|)
block|{
for|for
control|(
name|NamenodeContext
name|c
range|:
name|this
operator|.
name|namenodes
control|)
block|{
if|if
condition|(
name|c
operator|.
name|nameserviceId
operator|.
name|equals
argument_list|(
name|nameservice
argument_list|)
condition|)
block|{
if|if
condition|(
name|namenode
operator|==
literal|null
operator|||
name|namenode
operator|.
name|isEmpty
argument_list|()
operator|||
name|c
operator|.
name|namenodeId
operator|==
literal|null
operator|||
name|c
operator|.
name|namenodeId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|c
return|;
block|}
elseif|else
if|if
condition|(
name|c
operator|.
name|namenodeId
operator|.
name|equals
argument_list|(
name|namenode
argument_list|)
condition|)
block|{
return|return
name|c
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|getRouters (String nameservice)
specifier|public
name|List
argument_list|<
name|RouterContext
argument_list|>
name|getRouters
parameter_list|(
name|String
name|nameservice
parameter_list|)
block|{
name|List
argument_list|<
name|RouterContext
argument_list|>
name|nns
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RouterContext
name|c
range|:
name|routers
control|)
block|{
if|if
condition|(
name|c
operator|.
name|nameserviceId
operator|.
name|equals
argument_list|(
name|nameservice
argument_list|)
condition|)
block|{
name|nns
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|nns
return|;
block|}
DECL|method|getRouterContext (String nsId, String nnId)
specifier|public
name|RouterContext
name|getRouterContext
parameter_list|(
name|String
name|nsId
parameter_list|,
name|String
name|nnId
parameter_list|)
block|{
for|for
control|(
name|RouterContext
name|c
range|:
name|routers
control|)
block|{
if|if
condition|(
name|nnId
operator|==
literal|null
condition|)
block|{
return|return
name|c
return|;
block|}
if|if
condition|(
name|c
operator|.
name|namenodeId
operator|.
name|equals
argument_list|(
name|nnId
argument_list|)
operator|&&
name|c
operator|.
name|nameserviceId
operator|.
name|equals
argument_list|(
name|nsId
argument_list|)
condition|)
block|{
return|return
name|c
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|getRandomRouter ()
specifier|public
name|RouterContext
name|getRandomRouter
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
return|return
name|routers
operator|.
name|get
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|(
name|routers
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getRouters ()
specifier|public
name|List
argument_list|<
name|RouterContext
argument_list|>
name|getRouters
parameter_list|()
block|{
return|return
name|routers
return|;
block|}
DECL|method|buildRouter (String nsId, String nnId)
specifier|public
name|RouterContext
name|buildRouter
parameter_list|(
name|String
name|nsId
parameter_list|,
name|String
name|nnId
parameter_list|)
throws|throws
name|URISyntaxException
throws|,
name|IOException
block|{
name|Configuration
name|config
init|=
name|generateRouterConfiguration
argument_list|(
name|nsId
argument_list|,
name|nnId
argument_list|)
decl_stmt|;
name|RouterContext
name|rc
init|=
operator|new
name|RouterContext
argument_list|(
name|config
argument_list|,
name|nsId
argument_list|,
name|nnId
argument_list|)
decl_stmt|;
return|return
name|rc
return|;
block|}
DECL|method|startCluster ()
specifier|public
name|void
name|startCluster
parameter_list|()
block|{
name|startCluster
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|startCluster (Configuration overrideConf)
specifier|public
name|void
name|startCluster
parameter_list|(
name|Configuration
name|overrideConf
parameter_list|)
block|{
try|try
block|{
name|MiniDFSNNTopology
name|topology
init|=
operator|new
name|MiniDFSNNTopology
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|ns
range|:
name|nameservices
control|)
block|{
name|NSConf
name|conf
init|=
operator|new
name|MiniDFSNNTopology
operator|.
name|NSConf
argument_list|(
name|ns
argument_list|)
decl_stmt|;
if|if
condition|(
name|highAvailability
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|namenodes
operator|.
name|size
argument_list|()
operator|/
name|nameservices
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|NNConf
name|nnConf
init|=
operator|new
name|MiniDFSNNTopology
operator|.
name|NNConf
argument_list|(
literal|"nn"
operator|+
name|i
argument_list|)
decl_stmt|;
name|conf
operator|.
name|addNN
argument_list|(
name|nnConf
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|NNConf
name|nnConf
init|=
operator|new
name|MiniDFSNNTopology
operator|.
name|NNConf
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|conf
operator|.
name|addNN
argument_list|(
name|nnConf
argument_list|)
expr_stmt|;
block|}
name|topology
operator|.
name|addNameservice
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
name|topology
operator|.
name|setFederation
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Start mini DFS cluster
name|String
name|ns0
init|=
name|nameservices
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Configuration
name|nnConf
init|=
name|generateNamenodeConfiguration
argument_list|(
name|ns0
argument_list|)
decl_stmt|;
if|if
condition|(
name|overrideConf
operator|!=
literal|null
condition|)
block|{
name|nnConf
operator|.
name|addResource
argument_list|(
name|overrideConf
argument_list|)
expr_stmt|;
block|}
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|nnConf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|nameservices
operator|.
name|size
argument_list|()
operator|*
name|numDatanodesPerNameservice
argument_list|)
operator|.
name|nnTopology
argument_list|(
name|topology
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
comment|// Store NN pointers
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|namenodes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|NameNode
name|nn
init|=
name|cluster
operator|.
name|getNameNode
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|namenodes
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|setNamenode
argument_list|(
name|nn
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot start Router DFS cluster: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|startRouters ()
specifier|public
name|void
name|startRouters
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|URISyntaxException
throws|,
name|IOException
block|{
comment|// Create one router per nameservice
name|this
operator|.
name|routers
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|ns
range|:
name|this
operator|.
name|nameservices
control|)
block|{
for|for
control|(
name|NamenodeContext
name|context
range|:
name|getNamenodes
argument_list|(
name|ns
argument_list|)
control|)
block|{
name|RouterContext
name|router
init|=
name|buildRouter
argument_list|(
name|ns
argument_list|,
name|context
operator|.
name|namenodeId
argument_list|)
decl_stmt|;
name|this
operator|.
name|routers
operator|.
name|add
argument_list|(
name|router
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Start all routers
for|for
control|(
name|RouterContext
name|router
range|:
name|this
operator|.
name|routers
control|)
block|{
name|router
operator|.
name|router
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|// Wait until all routers are active and record their ports
for|for
control|(
name|RouterContext
name|router
range|:
name|this
operator|.
name|routers
control|)
block|{
name|waitActive
argument_list|(
name|router
argument_list|)
expr_stmt|;
name|router
operator|.
name|initRouter
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|waitActive (NamenodeContext nn)
specifier|public
name|void
name|waitActive
parameter_list|(
name|NamenodeContext
name|nn
parameter_list|)
throws|throws
name|IOException
block|{
name|cluster
operator|.
name|waitActive
argument_list|(
name|nn
operator|.
name|index
argument_list|)
expr_stmt|;
block|}
DECL|method|waitActive (RouterContext router)
specifier|public
name|void
name|waitActive
parameter_list|(
name|RouterContext
name|router
parameter_list|)
throws|throws
name|InterruptedException
block|{
for|for
control|(
name|int
name|loopCount
init|=
literal|0
init|;
name|loopCount
operator|<
literal|20
condition|;
name|loopCount
operator|++
control|)
block|{
comment|// Validate connection of routers to NNs
if|if
condition|(
name|router
operator|.
name|router
operator|.
name|getServiceState
argument_list|()
operator|==
name|STATE
operator|.
name|STARTED
condition|)
block|{
return|return;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
name|fail
argument_list|(
literal|"Timeout waiting for "
operator|+
name|router
operator|.
name|router
operator|+
literal|" to activate"
argument_list|)
expr_stmt|;
block|}
DECL|method|registerNamenodes ()
specifier|public
name|void
name|registerNamenodes
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|RouterContext
name|r
range|:
name|this
operator|.
name|routers
control|)
block|{
name|ActiveNamenodeResolver
name|resolver
init|=
name|r
operator|.
name|router
operator|.
name|getNamenodeResolver
argument_list|()
decl_stmt|;
for|for
control|(
name|NamenodeContext
name|nn
range|:
name|this
operator|.
name|namenodes
control|)
block|{
comment|// Generate a report
name|NamenodeStatusReport
name|report
init|=
operator|new
name|NamenodeStatusReport
argument_list|(
name|nn
operator|.
name|nameserviceId
argument_list|,
name|nn
operator|.
name|namenodeId
argument_list|,
name|nn
operator|.
name|getRpcAddress
argument_list|()
argument_list|,
name|nn
operator|.
name|getServiceAddress
argument_list|()
argument_list|,
name|nn
operator|.
name|getLifelineAddress
argument_list|()
argument_list|,
name|nn
operator|.
name|getHttpAddress
argument_list|()
argument_list|)
decl_stmt|;
name|FSImage
name|fsImage
init|=
name|nn
operator|.
name|namenode
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getFSImage
argument_list|()
decl_stmt|;
name|NamespaceInfo
name|nsInfo
init|=
name|fsImage
operator|.
name|getStorage
argument_list|()
operator|.
name|getNamespaceInfo
argument_list|()
decl_stmt|;
name|report
operator|.
name|setNamespaceInfo
argument_list|(
name|nsInfo
argument_list|)
expr_stmt|;
comment|// Determine HA state from nn public state string
name|String
name|nnState
init|=
name|nn
operator|.
name|namenode
operator|.
name|getState
argument_list|()
decl_stmt|;
name|HAServiceState
name|haState
init|=
name|HAServiceState
operator|.
name|ACTIVE
decl_stmt|;
for|for
control|(
name|HAServiceState
name|state
range|:
name|HAServiceState
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|nnState
operator|.
name|equalsIgnoreCase
argument_list|(
name|state
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
name|haState
operator|=
name|state
expr_stmt|;
break|break;
block|}
block|}
name|report
operator|.
name|setHAServiceState
argument_list|(
name|haState
argument_list|)
expr_stmt|;
comment|// Register with the resolver
name|resolver
operator|.
name|registerNamenode
argument_list|(
name|report
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|waitNamenodeRegistration ()
specifier|public
name|void
name|waitNamenodeRegistration
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|RouterContext
name|r
range|:
name|this
operator|.
name|routers
control|)
block|{
name|Router
name|router
init|=
name|r
operator|.
name|router
decl_stmt|;
for|for
control|(
name|NamenodeContext
name|nn
range|:
name|this
operator|.
name|namenodes
control|)
block|{
name|ActiveNamenodeResolver
name|nnResolver
init|=
name|router
operator|.
name|getNamenodeResolver
argument_list|()
decl_stmt|;
name|waitNamenodeRegistered
argument_list|(
name|nnResolver
argument_list|,
name|nn
operator|.
name|nameserviceId
argument_list|,
name|nn
operator|.
name|namenodeId
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|waitRouterRegistrationQuorum (RouterContext router, FederationNamenodeServiceState state, String nsId, String nnId)
specifier|public
name|void
name|waitRouterRegistrationQuorum
parameter_list|(
name|RouterContext
name|router
parameter_list|,
name|FederationNamenodeServiceState
name|state
parameter_list|,
name|String
name|nsId
parameter_list|,
name|String
name|nnId
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for NN {} {} to transition to {}"
argument_list|,
name|nsId
argument_list|,
name|nnId
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|ActiveNamenodeResolver
name|nnResolver
init|=
name|router
operator|.
name|router
operator|.
name|getNamenodeResolver
argument_list|()
decl_stmt|;
name|waitNamenodeRegistered
argument_list|(
name|nnResolver
argument_list|,
name|nsId
argument_list|,
name|nnId
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the federated path for a nameservice.    * @param nsId Nameservice identifier.    * @return Path in the Router.    */
DECL|method|getFederatedPathForNS (String nsId)
specifier|public
name|String
name|getFederatedPathForNS
parameter_list|(
name|String
name|nsId
parameter_list|)
block|{
return|return
literal|"/"
operator|+
name|nsId
return|;
block|}
comment|/**    * Get the namenode path for a nameservice.    * @param nsId Nameservice identifier.    * @return Path in the Namenode.    */
DECL|method|getNamenodePathForNS (String nsId)
specifier|public
name|String
name|getNamenodePathForNS
parameter_list|(
name|String
name|nsId
parameter_list|)
block|{
return|return
literal|"/target-"
operator|+
name|nsId
return|;
block|}
comment|/**    * Get the federated test directory for a nameservice.    * @param nsId Nameservice identifier.    * @return Example:    *<ul>    *<li>/ns0/testdir which maps to ns0->/target-ns0/testdir    *</ul>    */
DECL|method|getFederatedTestDirectoryForNS (String nsId)
specifier|public
name|String
name|getFederatedTestDirectoryForNS
parameter_list|(
name|String
name|nsId
parameter_list|)
block|{
return|return
name|getFederatedPathForNS
argument_list|(
name|nsId
argument_list|)
operator|+
literal|"/"
operator|+
name|TEST_DIR
return|;
block|}
comment|/**    * Get the namenode test directory for a nameservice.    * @param nsId Nameservice identifier.    * @return example:    *<ul>    *<li>/target-ns0/testdir    *</ul>    */
DECL|method|getNamenodeTestDirectoryForNS (String nsId)
specifier|public
name|String
name|getNamenodeTestDirectoryForNS
parameter_list|(
name|String
name|nsId
parameter_list|)
block|{
return|return
name|getNamenodePathForNS
argument_list|(
name|nsId
argument_list|)
operator|+
literal|"/"
operator|+
name|TEST_DIR
return|;
block|}
comment|/**    * Get the federated test file for a nameservice.    * @param nsId Nameservice identifier.    * @return example:    *<ul>    *<li>/ns0/testfile which maps to ns0->/target-ns0/testfile    *</ul>    */
DECL|method|getFederatedTestFileForNS (String nsId)
specifier|public
name|String
name|getFederatedTestFileForNS
parameter_list|(
name|String
name|nsId
parameter_list|)
block|{
return|return
name|getFederatedPathForNS
argument_list|(
name|nsId
argument_list|)
operator|+
literal|"/"
operator|+
name|TEST_FILE
return|;
block|}
comment|/**    * Get the namenode test file for a nameservice.    * @param nsId Nameservice identifier.    * @return example:    *<ul>    *<li>/target-ns0/testfile    *</ul>    */
DECL|method|getNamenodeTestFileForNS (String nsId)
specifier|public
name|String
name|getNamenodeTestFileForNS
parameter_list|(
name|String
name|nsId
parameter_list|)
block|{
return|return
name|getNamenodePathForNS
argument_list|(
name|nsId
argument_list|)
operator|+
literal|"/"
operator|+
name|TEST_FILE
return|;
block|}
comment|/**    * Switch a namenode in a nameservice to be the active.    * @param nsId Nameservice identifier.    * @param nnId Namenode identifier.    */
DECL|method|switchToActive (String nsId, String nnId)
specifier|public
name|void
name|switchToActive
parameter_list|(
name|String
name|nsId
parameter_list|,
name|String
name|nnId
parameter_list|)
block|{
try|try
block|{
name|int
name|total
init|=
name|cluster
operator|.
name|getNumNameNodes
argument_list|()
decl_stmt|;
name|NameNodeInfo
index|[]
name|nns
init|=
name|cluster
operator|.
name|getNameNodeInfos
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|total
condition|;
name|i
operator|++
control|)
block|{
name|NameNodeInfo
name|nn
init|=
name|nns
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|nn
operator|.
name|getNameserviceId
argument_list|()
operator|.
name|equals
argument_list|(
name|nsId
argument_list|)
operator|&&
name|nn
operator|.
name|getNamenodeId
argument_list|()
operator|.
name|equals
argument_list|(
name|nnId
argument_list|)
condition|)
block|{
name|cluster
operator|.
name|transitionToActive
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot transition to active"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Switch a namenode in a nameservice to be in standby.    * @param nsId Nameservice identifier.    * @param nnId Namenode identifier.    */
DECL|method|switchToStandby (String nsId, String nnId)
specifier|public
name|void
name|switchToStandby
parameter_list|(
name|String
name|nsId
parameter_list|,
name|String
name|nnId
parameter_list|)
block|{
try|try
block|{
name|int
name|total
init|=
name|cluster
operator|.
name|getNumNameNodes
argument_list|()
decl_stmt|;
name|NameNodeInfo
index|[]
name|nns
init|=
name|cluster
operator|.
name|getNameNodeInfos
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|total
condition|;
name|i
operator|++
control|)
block|{
name|NameNodeInfo
name|nn
init|=
name|nns
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|nn
operator|.
name|getNameserviceId
argument_list|()
operator|.
name|equals
argument_list|(
name|nsId
argument_list|)
operator|&&
name|nn
operator|.
name|getNamenodeId
argument_list|()
operator|.
name|equals
argument_list|(
name|nnId
argument_list|)
condition|)
block|{
name|cluster
operator|.
name|transitionToStandby
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot transition to standby"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Stop the federated HDFS cluster.    */
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|routers
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|RouterContext
name|context
range|:
name|routers
control|)
block|{
name|stopRouter
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Stop a router.    * @param router Router context.    */
DECL|method|stopRouter (RouterContext router)
specifier|public
name|void
name|stopRouter
parameter_list|(
name|RouterContext
name|router
parameter_list|)
block|{
try|try
block|{
name|router
operator|.
name|router
operator|.
name|shutDown
argument_list|()
expr_stmt|;
name|int
name|loopCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|router
operator|.
name|router
operator|.
name|getServiceState
argument_list|()
operator|!=
name|STATE
operator|.
name|STOPPED
condition|)
block|{
name|loopCount
operator|++
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
if|if
condition|(
name|loopCount
operator|>
literal|20
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot shutdown router {}"
argument_list|,
name|router
operator|.
name|rpcPort
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{     }
block|}
comment|/////////////////////////////////////////////////////////////////////////////
comment|// Namespace Test Fixtures
comment|/////////////////////////////////////////////////////////////////////////////
comment|/**    * Creates test directories via the namenode.    * 1) /target-ns0/testfile    * 2) /target-ns1/testfile    * @throws IOException    */
DECL|method|createTestDirectoriesNamenode ()
specifier|public
name|void
name|createTestDirectoriesNamenode
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Add a test dir to each NS and verify
for|for
control|(
name|String
name|ns
range|:
name|getNameservices
argument_list|()
control|)
block|{
name|NamenodeContext
name|context
init|=
name|getNamenode
argument_list|(
name|ns
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|createTestDirectoriesNamenode
argument_list|(
name|context
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot create test directory for ns "
operator|+
name|ns
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|createTestDirectoriesNamenode (NamenodeContext nn)
specifier|public
name|boolean
name|createTestDirectoriesNamenode
parameter_list|(
name|NamenodeContext
name|nn
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|nn
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|String
name|testDir
init|=
name|getNamenodeTestDirectoryForNS
argument_list|(
name|nn
operator|.
name|nameserviceId
argument_list|)
decl_stmt|;
return|return
name|addDirectory
argument_list|(
name|fs
argument_list|,
name|testDir
argument_list|)
return|;
block|}
DECL|method|deleteAllFiles ()
specifier|public
name|void
name|deleteAllFiles
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Delete all files via the NNs and verify
for|for
control|(
name|NamenodeContext
name|context
range|:
name|getNamenodes
argument_list|()
control|)
block|{
name|FileSystem
name|fs
init|=
name|context
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|FileStatus
index|[]
name|status
init|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|status
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|p
init|=
name|status
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|p
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|status
operator|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|status
operator|.
name|length
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|/////////////////////////////////////////////////////////////////////////////
comment|// MockRouterResolver Test Fixtures
comment|/////////////////////////////////////////////////////////////////////////////
comment|/**    *<ul>    *<li>/ -> [ns0->/].    *<li>/nso -> ns0->/target-ns0.    *<li>/ns1 -> ns1->/target-ns1.    *</ul>    */
DECL|method|installMockLocations ()
specifier|public
name|void
name|installMockLocations
parameter_list|()
block|{
for|for
control|(
name|RouterContext
name|r
range|:
name|routers
control|)
block|{
name|MockResolver
name|resolver
init|=
operator|(
name|MockResolver
operator|)
name|r
operator|.
name|router
operator|.
name|getSubclusterResolver
argument_list|()
decl_stmt|;
comment|// create table entries
for|for
control|(
name|String
name|nsId
range|:
name|nameservices
control|)
block|{
comment|// Direct path
name|String
name|routerPath
init|=
name|getFederatedPathForNS
argument_list|(
name|nsId
argument_list|)
decl_stmt|;
name|String
name|nnPath
init|=
name|getNamenodePathForNS
argument_list|(
name|nsId
argument_list|)
decl_stmt|;
name|resolver
operator|.
name|addLocation
argument_list|(
name|routerPath
argument_list|,
name|nsId
argument_list|,
name|nnPath
argument_list|)
expr_stmt|;
block|}
comment|// Root path points to both first nameservice
name|String
name|ns0
init|=
name|nameservices
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|resolver
operator|.
name|addLocation
argument_list|(
literal|"/"
argument_list|,
name|ns0
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getCluster ()
specifier|public
name|MiniDFSCluster
name|getCluster
parameter_list|()
block|{
return|return
name|cluster
return|;
block|}
comment|/**    * Wait until the federated cluster is up and ready.    * @throws IOException If we cannot wait for the cluster to be up.    */
DECL|method|waitClusterUp ()
specifier|public
name|void
name|waitClusterUp
parameter_list|()
throws|throws
name|IOException
block|{
name|cluster
operator|.
name|waitClusterUp
argument_list|()
expr_stmt|;
name|registerNamenodes
argument_list|()
expr_stmt|;
try|try
block|{
name|waitNamenodeRegistration
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot wait for the namenodes"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

