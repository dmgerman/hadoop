begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.blockmanagement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeDescriptor
operator|.
name|BlockTargetPair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSNamesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetworkTopology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|LinkedListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_class
DECL|class|TestBlockManager
specifier|public
class|class
name|TestBlockManager
block|{
DECL|field|nodes
specifier|private
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|nodes
decl_stmt|;
DECL|field|rackA
specifier|private
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|rackA
decl_stmt|;
DECL|field|rackB
specifier|private
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|rackB
decl_stmt|;
comment|/**    * Some of these tests exercise code which has some randomness involved -    * ie even if there's a bug, they may pass because the random node selection    * chooses the correct result.    *     * Since they're true unit tests and run quickly, we loop them a number    * of times trying to trigger the incorrect behavior.    */
DECL|field|NUM_TEST_ITERS
specifier|private
specifier|static
specifier|final
name|int
name|NUM_TEST_ITERS
init|=
literal|30
decl_stmt|;
DECL|field|BLOCK_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|BLOCK_SIZE
init|=
literal|64
operator|*
literal|1024
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|fsn
specifier|private
name|FSNamesystem
name|fsn
decl_stmt|;
DECL|field|bm
specifier|private
name|BlockManager
name|bm
decl_stmt|;
annotation|@
name|Before
DECL|method|setupMockCluster ()
specifier|public
name|void
name|setupMockCluster
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|NET_TOPOLOGY_SCRIPT_FILE_NAME_KEY
argument_list|,
literal|"need to set a dummy value here so it assumes a multi-rack cluster"
argument_list|)
expr_stmt|;
name|fsn
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|FSNamesystem
operator|.
name|class
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|fsn
argument_list|)
operator|.
name|hasWriteLock
argument_list|()
expr_stmt|;
name|bm
operator|=
operator|new
name|BlockManager
argument_list|(
name|fsn
argument_list|,
name|fsn
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|nodes
operator|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|DFSTestUtil
operator|.
name|getDatanodeDescriptor
argument_list|(
literal|"1.1.1.1"
argument_list|,
literal|"/rackA"
argument_list|)
argument_list|,
name|DFSTestUtil
operator|.
name|getDatanodeDescriptor
argument_list|(
literal|"2.2.2.2"
argument_list|,
literal|"/rackA"
argument_list|)
argument_list|,
name|DFSTestUtil
operator|.
name|getDatanodeDescriptor
argument_list|(
literal|"3.3.3.3"
argument_list|,
literal|"/rackA"
argument_list|)
argument_list|,
name|DFSTestUtil
operator|.
name|getDatanodeDescriptor
argument_list|(
literal|"4.4.4.4"
argument_list|,
literal|"/rackB"
argument_list|)
argument_list|,
name|DFSTestUtil
operator|.
name|getDatanodeDescriptor
argument_list|(
literal|"5.5.5.5"
argument_list|,
literal|"/rackB"
argument_list|)
argument_list|,
name|DFSTestUtil
operator|.
name|getDatanodeDescriptor
argument_list|(
literal|"6.6.6.6"
argument_list|,
literal|"/rackB"
argument_list|)
argument_list|)
expr_stmt|;
name|rackA
operator|=
name|nodes
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|rackB
operator|=
name|nodes
operator|.
name|subList
argument_list|(
literal|3
argument_list|,
literal|6
argument_list|)
expr_stmt|;
block|}
DECL|method|addNodes (Iterable<DatanodeDescriptor> nodesToAdd)
specifier|private
name|void
name|addNodes
parameter_list|(
name|Iterable
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|nodesToAdd
parameter_list|)
block|{
name|NetworkTopology
name|cluster
init|=
name|bm
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getNetworkTopology
argument_list|()
decl_stmt|;
comment|// construct network topology
for|for
control|(
name|DatanodeDescriptor
name|dn
range|:
name|nodesToAdd
control|)
block|{
name|cluster
operator|.
name|add
argument_list|(
name|dn
argument_list|)
expr_stmt|;
name|dn
operator|.
name|updateHeartbeat
argument_list|(
literal|2
operator|*
name|HdfsConstants
operator|.
name|MIN_BLOCKS_FOR_WRITE
operator|*
name|BLOCK_SIZE
argument_list|,
literal|0L
argument_list|,
literal|2
operator|*
name|HdfsConstants
operator|.
name|MIN_BLOCKS_FOR_WRITE
operator|*
name|BLOCK_SIZE
argument_list|,
literal|0L
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|bm
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|checkIfClusterIsNowMultiRack
argument_list|(
name|dn
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|removeNode (DatanodeDescriptor deadNode)
specifier|private
name|void
name|removeNode
parameter_list|(
name|DatanodeDescriptor
name|deadNode
parameter_list|)
block|{
name|NetworkTopology
name|cluster
init|=
name|bm
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getNetworkTopology
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|remove
argument_list|(
name|deadNode
argument_list|)
expr_stmt|;
name|bm
operator|.
name|removeBlocksAssociatedTo
argument_list|(
name|deadNode
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that replication of under-replicated blocks is detected    * and basically works    */
annotation|@
name|Test
DECL|method|testBasicReplication ()
specifier|public
name|void
name|testBasicReplication
parameter_list|()
throws|throws
name|Exception
block|{
name|addNodes
argument_list|(
name|nodes
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_TEST_ITERS
condition|;
name|i
operator|++
control|)
block|{
name|doBasicTest
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doBasicTest (int testIndex)
specifier|private
name|void
name|doBasicTest
parameter_list|(
name|int
name|testIndex
parameter_list|)
block|{
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|origNodes
init|=
name|getNodes
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|BlockInfo
name|blockInfo
init|=
name|addBlockOnNodes
argument_list|(
operator|(
name|long
operator|)
name|testIndex
argument_list|,
name|origNodes
argument_list|)
decl_stmt|;
name|DatanodeDescriptor
index|[]
name|pipeline
init|=
name|scheduleSingleReplication
argument_list|(
name|blockInfo
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|pipeline
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Source of replication should be one of the nodes the block "
operator|+
literal|"was on. Was: "
operator|+
name|pipeline
index|[
literal|0
index|]
argument_list|,
name|origNodes
operator|.
name|contains
argument_list|(
name|pipeline
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Destination of replication should be on the other rack. "
operator|+
literal|"Was: "
operator|+
name|pipeline
index|[
literal|1
index|]
argument_list|,
name|rackB
operator|.
name|contains
argument_list|(
name|pipeline
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Regression test for HDFS-1480    * - Cluster has 2 racks, A and B, each with three nodes.    * - Block initially written on A1, A2, B1    * - Admin decommissions two of these nodes (let's say A1 and A2 but it doesn't matter)    * - Re-replication should respect rack policy    */
annotation|@
name|Test
DECL|method|testTwoOfThreeNodesDecommissioned ()
specifier|public
name|void
name|testTwoOfThreeNodesDecommissioned
parameter_list|()
throws|throws
name|Exception
block|{
name|addNodes
argument_list|(
name|nodes
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_TEST_ITERS
condition|;
name|i
operator|++
control|)
block|{
name|doTestTwoOfThreeNodesDecommissioned
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doTestTwoOfThreeNodesDecommissioned (int testIndex)
specifier|private
name|void
name|doTestTwoOfThreeNodesDecommissioned
parameter_list|(
name|int
name|testIndex
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Block originally on A1, A2, B1
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|origNodes
init|=
name|getNodes
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|BlockInfo
name|blockInfo
init|=
name|addBlockOnNodes
argument_list|(
name|testIndex
argument_list|,
name|origNodes
argument_list|)
decl_stmt|;
comment|// Decommission two of the nodes (A1, A2)
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|decomNodes
init|=
name|startDecommission
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|DatanodeDescriptor
index|[]
name|pipeline
init|=
name|scheduleSingleReplication
argument_list|(
name|blockInfo
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Source of replication should be one of the nodes the block "
operator|+
literal|"was on. Was: "
operator|+
name|pipeline
index|[
literal|0
index|]
argument_list|,
name|origNodes
operator|.
name|contains
argument_list|(
name|pipeline
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should have three targets"
argument_list|,
literal|3
argument_list|,
name|pipeline
operator|.
name|length
argument_list|)
expr_stmt|;
name|boolean
name|foundOneOnRackA
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|pipeline
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|DatanodeDescriptor
name|target
init|=
name|pipeline
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|rackA
operator|.
name|contains
argument_list|(
name|target
argument_list|)
condition|)
block|{
name|foundOneOnRackA
operator|=
literal|true
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|decomNodes
operator|.
name|contains
argument_list|(
name|target
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|origNodes
operator|.
name|contains
argument_list|(
name|target
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Should have at least one target on rack A. Pipeline: "
operator|+
name|Joiner
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|join
argument_list|(
name|pipeline
argument_list|)
argument_list|,
name|foundOneOnRackA
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test what happens when a block is on three nodes, and all three of those    * nodes are decommissioned. It should properly re-replicate to three new    * nodes.     */
annotation|@
name|Test
DECL|method|testAllNodesHoldingReplicasDecommissioned ()
specifier|public
name|void
name|testAllNodesHoldingReplicasDecommissioned
parameter_list|()
throws|throws
name|Exception
block|{
name|addNodes
argument_list|(
name|nodes
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_TEST_ITERS
condition|;
name|i
operator|++
control|)
block|{
name|doTestAllNodesHoldingReplicasDecommissioned
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doTestAllNodesHoldingReplicasDecommissioned (int testIndex)
specifier|private
name|void
name|doTestAllNodesHoldingReplicasDecommissioned
parameter_list|(
name|int
name|testIndex
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Block originally on A1, A2, B1
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|origNodes
init|=
name|getNodes
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|BlockInfo
name|blockInfo
init|=
name|addBlockOnNodes
argument_list|(
name|testIndex
argument_list|,
name|origNodes
argument_list|)
decl_stmt|;
comment|// Decommission all of the nodes
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|decomNodes
init|=
name|startDecommission
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|DatanodeDescriptor
index|[]
name|pipeline
init|=
name|scheduleSingleReplication
argument_list|(
name|blockInfo
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Source of replication should be one of the nodes the block "
operator|+
literal|"was on. Was: "
operator|+
name|pipeline
index|[
literal|0
index|]
argument_list|,
name|origNodes
operator|.
name|contains
argument_list|(
name|pipeline
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should have three targets"
argument_list|,
literal|4
argument_list|,
name|pipeline
operator|.
name|length
argument_list|)
expr_stmt|;
name|boolean
name|foundOneOnRackA
init|=
literal|false
decl_stmt|;
name|boolean
name|foundOneOnRackB
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|pipeline
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|DatanodeDescriptor
name|target
init|=
name|pipeline
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|rackA
operator|.
name|contains
argument_list|(
name|target
argument_list|)
condition|)
block|{
name|foundOneOnRackA
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rackB
operator|.
name|contains
argument_list|(
name|target
argument_list|)
condition|)
block|{
name|foundOneOnRackB
operator|=
literal|true
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|decomNodes
operator|.
name|contains
argument_list|(
name|target
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|origNodes
operator|.
name|contains
argument_list|(
name|target
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Should have at least one target on rack A. Pipeline: "
operator|+
name|Joiner
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|join
argument_list|(
name|pipeline
argument_list|)
argument_list|,
name|foundOneOnRackA
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should have at least one target on rack B. Pipeline: "
operator|+
name|Joiner
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|join
argument_list|(
name|pipeline
argument_list|)
argument_list|,
name|foundOneOnRackB
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test what happens when there are two racks, and an entire rack is    * decommissioned.    *     * Since the cluster is multi-rack, it will consider the block    * under-replicated rather than create a third replica on the    * same rack. Adding a new node on a third rack should cause re-replication    * to that node.    */
annotation|@
name|Test
DECL|method|testOneOfTwoRacksDecommissioned ()
specifier|public
name|void
name|testOneOfTwoRacksDecommissioned
parameter_list|()
throws|throws
name|Exception
block|{
name|addNodes
argument_list|(
name|nodes
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_TEST_ITERS
condition|;
name|i
operator|++
control|)
block|{
name|doTestOneOfTwoRacksDecommissioned
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doTestOneOfTwoRacksDecommissioned (int testIndex)
specifier|private
name|void
name|doTestOneOfTwoRacksDecommissioned
parameter_list|(
name|int
name|testIndex
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Block originally on A1, A2, B1
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|origNodes
init|=
name|getNodes
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|BlockInfo
name|blockInfo
init|=
name|addBlockOnNodes
argument_list|(
name|testIndex
argument_list|,
name|origNodes
argument_list|)
decl_stmt|;
comment|// Decommission all of the nodes in rack A
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|decomNodes
init|=
name|startDecommission
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|DatanodeDescriptor
index|[]
name|pipeline
init|=
name|scheduleSingleReplication
argument_list|(
name|blockInfo
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Source of replication should be one of the nodes the block "
operator|+
literal|"was on. Was: "
operator|+
name|pipeline
index|[
literal|0
index|]
argument_list|,
name|origNodes
operator|.
name|contains
argument_list|(
name|pipeline
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should have three targets"
argument_list|,
literal|3
argument_list|,
name|pipeline
operator|.
name|length
argument_list|)
expr_stmt|;
name|boolean
name|foundOneOnRackB
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|pipeline
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|DatanodeDescriptor
name|target
init|=
name|pipeline
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|rackB
operator|.
name|contains
argument_list|(
name|target
argument_list|)
condition|)
block|{
name|foundOneOnRackB
operator|=
literal|true
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|decomNodes
operator|.
name|contains
argument_list|(
name|target
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|origNodes
operator|.
name|contains
argument_list|(
name|target
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Should have at least one target on rack B. Pipeline: "
operator|+
name|Joiner
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|join
argument_list|(
name|pipeline
argument_list|)
argument_list|,
name|foundOneOnRackB
argument_list|)
expr_stmt|;
comment|// Mark the block as received on the target nodes in the pipeline
name|fulfillPipeline
argument_list|(
name|blockInfo
argument_list|,
name|pipeline
argument_list|)
expr_stmt|;
comment|// the block is still under-replicated. Add a new node. This should allow
comment|// the third off-rack replica.
name|DatanodeDescriptor
name|rackCNode
init|=
name|DFSTestUtil
operator|.
name|getDatanodeDescriptor
argument_list|(
literal|"7.7.7.7"
argument_list|,
literal|"/rackC"
argument_list|)
decl_stmt|;
name|addNodes
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|rackCNode
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|DatanodeDescriptor
index|[]
name|pipeline2
init|=
name|scheduleSingleReplication
argument_list|(
name|blockInfo
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|pipeline2
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rackCNode
argument_list|,
name|pipeline2
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|removeNode
argument_list|(
name|rackCNode
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Unit test version of testSufficientlyReplBlocksUsesNewRack from    * {@link TestBlocksWithNotEnoughRacks}.    **/
annotation|@
name|Test
DECL|method|testSufficientlyReplBlocksUsesNewRack ()
specifier|public
name|void
name|testSufficientlyReplBlocksUsesNewRack
parameter_list|()
throws|throws
name|Exception
block|{
name|addNodes
argument_list|(
name|nodes
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_TEST_ITERS
condition|;
name|i
operator|++
control|)
block|{
name|doTestSufficientlyReplBlocksUsesNewRack
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doTestSufficientlyReplBlocksUsesNewRack (int testIndex)
specifier|private
name|void
name|doTestSufficientlyReplBlocksUsesNewRack
parameter_list|(
name|int
name|testIndex
parameter_list|)
block|{
comment|// Originally on only nodes in rack A.
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|origNodes
init|=
name|rackA
decl_stmt|;
name|BlockInfo
name|blockInfo
init|=
name|addBlockOnNodes
argument_list|(
operator|(
name|long
operator|)
name|testIndex
argument_list|,
name|origNodes
argument_list|)
decl_stmt|;
name|DatanodeDescriptor
name|pipeline
index|[]
init|=
name|scheduleSingleReplication
argument_list|(
name|blockInfo
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|pipeline
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// single new copy
name|assertTrue
argument_list|(
literal|"Source of replication should be one of the nodes the block "
operator|+
literal|"was on. Was: "
operator|+
name|pipeline
index|[
literal|0
index|]
argument_list|,
name|origNodes
operator|.
name|contains
argument_list|(
name|pipeline
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Destination of replication should be on the other rack. "
operator|+
literal|"Was: "
operator|+
name|pipeline
index|[
literal|1
index|]
argument_list|,
name|rackB
operator|.
name|contains
argument_list|(
name|pipeline
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBlocksAreNotUnderreplicatedInSingleRack ()
specifier|public
name|void
name|testBlocksAreNotUnderreplicatedInSingleRack
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|nodes
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|DFSTestUtil
operator|.
name|getDatanodeDescriptor
argument_list|(
literal|"1.1.1.1"
argument_list|,
literal|"/rackA"
argument_list|)
argument_list|,
name|DFSTestUtil
operator|.
name|getDatanodeDescriptor
argument_list|(
literal|"2.2.2.2"
argument_list|,
literal|"/rackA"
argument_list|)
argument_list|,
name|DFSTestUtil
operator|.
name|getDatanodeDescriptor
argument_list|(
literal|"3.3.3.3"
argument_list|,
literal|"/rackA"
argument_list|)
argument_list|,
name|DFSTestUtil
operator|.
name|getDatanodeDescriptor
argument_list|(
literal|"4.4.4.4"
argument_list|,
literal|"/rackA"
argument_list|)
argument_list|,
name|DFSTestUtil
operator|.
name|getDatanodeDescriptor
argument_list|(
literal|"5.5.5.5"
argument_list|,
literal|"/rackA"
argument_list|)
argument_list|,
name|DFSTestUtil
operator|.
name|getDatanodeDescriptor
argument_list|(
literal|"6.6.6.6"
argument_list|,
literal|"/rackA"
argument_list|)
argument_list|)
decl_stmt|;
name|addNodes
argument_list|(
name|nodes
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|origNodes
init|=
name|nodes
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
decl_stmt|;
empty_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_TEST_ITERS
condition|;
name|i
operator|++
control|)
block|{
name|doTestSingleRackClusterIsSufficientlyReplicated
argument_list|(
name|i
argument_list|,
name|origNodes
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doTestSingleRackClusterIsSufficientlyReplicated (int testIndex, List<DatanodeDescriptor> origNodes)
specifier|private
name|void
name|doTestSingleRackClusterIsSufficientlyReplicated
parameter_list|(
name|int
name|testIndex
parameter_list|,
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|origNodes
parameter_list|)
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|bm
operator|.
name|numOfUnderReplicatedBlocks
argument_list|()
argument_list|)
expr_stmt|;
name|addBlockOnNodes
argument_list|(
operator|(
name|long
operator|)
name|testIndex
argument_list|,
name|origNodes
argument_list|)
expr_stmt|;
name|bm
operator|.
name|processMisReplicatedBlocks
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|bm
operator|.
name|numOfUnderReplicatedBlocks
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tell the block manager that replication is completed for the given    * pipeline.    */
DECL|method|fulfillPipeline (BlockInfo blockInfo, DatanodeDescriptor[] pipeline)
specifier|private
name|void
name|fulfillPipeline
parameter_list|(
name|BlockInfo
name|blockInfo
parameter_list|,
name|DatanodeDescriptor
index|[]
name|pipeline
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|pipeline
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|bm
operator|.
name|addBlock
argument_list|(
name|pipeline
index|[
name|i
index|]
argument_list|,
name|blockInfo
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|blockOnNodes (long blkId, List<DatanodeDescriptor> nodes)
specifier|private
name|BlockInfo
name|blockOnNodes
parameter_list|(
name|long
name|blkId
parameter_list|,
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|nodes
parameter_list|)
block|{
name|Block
name|block
init|=
operator|new
name|Block
argument_list|(
name|blkId
argument_list|)
decl_stmt|;
name|BlockInfo
name|blockInfo
init|=
operator|new
name|BlockInfo
argument_list|(
name|block
argument_list|,
literal|3
argument_list|)
decl_stmt|;
for|for
control|(
name|DatanodeDescriptor
name|dn
range|:
name|nodes
control|)
block|{
name|blockInfo
operator|.
name|addNode
argument_list|(
name|dn
argument_list|)
expr_stmt|;
block|}
return|return
name|blockInfo
return|;
block|}
DECL|method|getNodes (int ... indexes)
specifier|private
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|getNodes
parameter_list|(
name|int
modifier|...
name|indexes
parameter_list|)
block|{
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|ret
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|idx
range|:
name|indexes
control|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|nodes
operator|.
name|get
argument_list|(
name|idx
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
DECL|method|startDecommission (int ... indexes)
specifier|private
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|startDecommission
parameter_list|(
name|int
modifier|...
name|indexes
parameter_list|)
block|{
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|nodes
init|=
name|getNodes
argument_list|(
name|indexes
argument_list|)
decl_stmt|;
for|for
control|(
name|DatanodeDescriptor
name|node
range|:
name|nodes
control|)
block|{
name|node
operator|.
name|startDecommission
argument_list|()
expr_stmt|;
block|}
return|return
name|nodes
return|;
block|}
DECL|method|addBlockOnNodes (long blockId, List<DatanodeDescriptor> nodes)
specifier|private
name|BlockInfo
name|addBlockOnNodes
parameter_list|(
name|long
name|blockId
parameter_list|,
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|nodes
parameter_list|)
block|{
name|BlockCollection
name|bc
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|BlockCollection
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|)
operator|.
name|when
argument_list|(
name|bc
argument_list|)
operator|.
name|getReplication
argument_list|()
expr_stmt|;
name|BlockInfo
name|blockInfo
init|=
name|blockOnNodes
argument_list|(
name|blockId
argument_list|,
name|nodes
argument_list|)
decl_stmt|;
name|bm
operator|.
name|blocksMap
operator|.
name|addBlockCollection
argument_list|(
name|blockInfo
argument_list|,
name|bc
argument_list|)
expr_stmt|;
return|return
name|blockInfo
return|;
block|}
DECL|method|scheduleSingleReplication (Block block)
specifier|private
name|DatanodeDescriptor
index|[]
name|scheduleSingleReplication
parameter_list|(
name|Block
name|block
parameter_list|)
block|{
comment|// list for priority 1
name|List
argument_list|<
name|Block
argument_list|>
name|list_p1
init|=
operator|new
name|ArrayList
argument_list|<
name|Block
argument_list|>
argument_list|()
decl_stmt|;
name|list_p1
operator|.
name|add
argument_list|(
name|block
argument_list|)
expr_stmt|;
comment|// list of lists for each priority
name|List
argument_list|<
name|List
argument_list|<
name|Block
argument_list|>
argument_list|>
name|list_all
init|=
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|Block
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|list_all
operator|.
name|add
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Block
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
comment|// for priority 0
name|list_all
operator|.
name|add
argument_list|(
name|list_p1
argument_list|)
expr_stmt|;
comment|// for priority 1
name|assertEquals
argument_list|(
literal|"Block not initially pending replication"
argument_list|,
literal|0
argument_list|,
name|bm
operator|.
name|pendingReplications
operator|.
name|getNumReplicas
argument_list|(
name|block
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"computeReplicationWork should indicate replication is needed"
argument_list|,
literal|1
argument_list|,
name|bm
operator|.
name|computeReplicationWorkForBlocks
argument_list|(
name|list_all
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"replication is pending after work is computed"
argument_list|,
name|bm
operator|.
name|pendingReplications
operator|.
name|getNumReplicas
argument_list|(
name|block
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|LinkedListMultimap
argument_list|<
name|DatanodeDescriptor
argument_list|,
name|BlockTargetPair
argument_list|>
name|repls
init|=
name|getAllPendingReplications
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|repls
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Entry
argument_list|<
name|DatanodeDescriptor
argument_list|,
name|BlockTargetPair
argument_list|>
name|repl
init|=
name|repls
operator|.
name|entries
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|DatanodeDescriptor
index|[]
name|targets
init|=
name|repl
operator|.
name|getValue
argument_list|()
operator|.
name|targets
decl_stmt|;
name|DatanodeDescriptor
index|[]
name|pipeline
init|=
operator|new
name|DatanodeDescriptor
index|[
literal|1
operator|+
name|targets
operator|.
name|length
index|]
decl_stmt|;
name|pipeline
index|[
literal|0
index|]
operator|=
name|repl
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|targets
argument_list|,
literal|0
argument_list|,
name|pipeline
argument_list|,
literal|1
argument_list|,
name|targets
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|pipeline
return|;
block|}
DECL|method|getAllPendingReplications ()
specifier|private
name|LinkedListMultimap
argument_list|<
name|DatanodeDescriptor
argument_list|,
name|BlockTargetPair
argument_list|>
name|getAllPendingReplications
parameter_list|()
block|{
name|LinkedListMultimap
argument_list|<
name|DatanodeDescriptor
argument_list|,
name|BlockTargetPair
argument_list|>
name|repls
init|=
name|LinkedListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
for|for
control|(
name|DatanodeDescriptor
name|dn
range|:
name|nodes
control|)
block|{
name|List
argument_list|<
name|BlockTargetPair
argument_list|>
name|thisRepls
init|=
name|dn
operator|.
name|getReplicationCommand
argument_list|(
literal|10
argument_list|)
decl_stmt|;
if|if
condition|(
name|thisRepls
operator|!=
literal|null
condition|)
block|{
name|repls
operator|.
name|putAll
argument_list|(
name|dn
argument_list|,
name|thisRepls
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|repls
return|;
block|}
block|}
end_class

end_unit

