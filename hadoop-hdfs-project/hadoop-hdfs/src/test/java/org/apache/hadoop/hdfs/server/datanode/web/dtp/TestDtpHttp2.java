begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode.web.dtp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|web
operator|.
name|dtp
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|bootstrap
operator|.
name|Bootstrap
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ByteBuf
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelInitializer
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|EventLoopGroup
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|nio
operator|.
name|NioEventLoopGroup
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|nio
operator|.
name|NioSocketChannel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|DefaultFullHttpRequest
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|FullHttpRequest
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|FullHttpResponse
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpMethod
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpResponseStatus
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpVersion
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http2
operator|.
name|DefaultHttp2Connection
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http2
operator|.
name|DefaultHttp2FrameReader
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http2
operator|.
name|DefaultHttp2FrameWriter
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http2
operator|.
name|DelegatingDecompressorFrameListener
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http2
operator|.
name|Http2Connection
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http2
operator|.
name|Http2ConnectionHandler
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http2
operator|.
name|Http2FrameLogger
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http2
operator|.
name|Http2FrameReader
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http2
operator|.
name|Http2FrameWriter
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http2
operator|.
name|Http2InboundFrameLogger
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http2
operator|.
name|Http2OutboundFrameLogger
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http2
operator|.
name|HttpToHttp2ConnectionHandler
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http2
operator|.
name|HttpUtil
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http2
operator|.
name|InboundHttp2ToHttpAdapter
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|logging
operator|.
name|LogLevel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|timeout
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Promise
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|WebHdfsTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestDtpHttp2
specifier|public
class|class
name|TestDtpHttp2
block|{
DECL|field|FRAME_LOGGER
specifier|private
specifier|static
specifier|final
name|Http2FrameLogger
name|FRAME_LOGGER
init|=
operator|new
name|Http2FrameLogger
argument_list|(
name|LogLevel
operator|.
name|INFO
argument_list|,
name|TestDtpHttp2
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|CONF
specifier|private
specifier|static
specifier|final
name|Configuration
name|CONF
init|=
name|WebHdfsTestUtil
operator|.
name|createConf
argument_list|()
decl_stmt|;
DECL|field|CLUSTER
specifier|private
specifier|static
name|MiniDFSCluster
name|CLUSTER
decl_stmt|;
DECL|field|WORKER_GROUP
specifier|private
specifier|static
specifier|final
name|EventLoopGroup
name|WORKER_GROUP
init|=
operator|new
name|NioEventLoopGroup
argument_list|()
decl_stmt|;
DECL|field|CHANNEL
specifier|private
specifier|static
name|Channel
name|CHANNEL
decl_stmt|;
DECL|field|RESPONSE_HANDLER
specifier|private
specifier|static
name|Http2ResponseHandler
name|RESPONSE_HANDLER
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setUp ()
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
throws|,
name|TimeoutException
block|{
name|CLUSTER
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|CONF
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|CLUSTER
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|RESPONSE_HANDLER
operator|=
operator|new
name|Http2ResponseHandler
argument_list|()
expr_stmt|;
name|Bootstrap
name|bootstrap
init|=
operator|new
name|Bootstrap
argument_list|()
operator|.
name|group
argument_list|(
name|WORKER_GROUP
argument_list|)
operator|.
name|channel
argument_list|(
name|NioSocketChannel
operator|.
name|class
argument_list|)
operator|.
name|remoteAddress
argument_list|(
literal|"127.0.0.1"
argument_list|,
name|CLUSTER
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getInfoPort
argument_list|()
argument_list|)
operator|.
name|handler
argument_list|(
operator|new
name|ChannelInitializer
argument_list|<
name|Channel
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|initChannel
parameter_list|(
name|Channel
name|ch
parameter_list|)
throws|throws
name|Exception
block|{
name|Http2Connection
name|connection
init|=
operator|new
name|DefaultHttp2Connection
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|Http2ConnectionHandler
name|connectionHandler
init|=
operator|new
name|HttpToHttp2ConnectionHandler
argument_list|(
name|connection
argument_list|,
name|frameReader
argument_list|()
argument_list|,
name|frameWriter
argument_list|()
argument_list|,
operator|new
name|DelegatingDecompressorFrameListener
argument_list|(
name|connection
argument_list|,
operator|new
name|InboundHttp2ToHttpAdapter
operator|.
name|Builder
argument_list|(
name|connection
argument_list|)
operator|.
name|maxContentLength
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
operator|.
name|propagateSettings
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ch
operator|.
name|pipeline
argument_list|()
operator|.
name|addLast
argument_list|(
name|connectionHandler
argument_list|,
name|RESPONSE_HANDLER
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|CHANNEL
operator|=
name|bootstrap
operator|.
name|connect
argument_list|()
operator|.
name|syncUninterruptibly
argument_list|()
operator|.
name|channel
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|tearDown ()
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|CHANNEL
operator|!=
literal|null
condition|)
block|{
name|CHANNEL
operator|.
name|close
argument_list|()
operator|.
name|syncUninterruptibly
argument_list|()
expr_stmt|;
block|}
name|WORKER_GROUP
operator|.
name|shutdownGracefully
argument_list|()
expr_stmt|;
if|if
condition|(
name|CLUSTER
operator|!=
literal|null
condition|)
block|{
name|CLUSTER
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|frameReader ()
specifier|private
specifier|static
name|Http2FrameReader
name|frameReader
parameter_list|()
block|{
return|return
operator|new
name|Http2InboundFrameLogger
argument_list|(
operator|new
name|DefaultHttp2FrameReader
argument_list|()
argument_list|,
name|FRAME_LOGGER
argument_list|)
return|;
block|}
DECL|method|frameWriter ()
specifier|private
specifier|static
name|Http2FrameWriter
name|frameWriter
parameter_list|()
block|{
return|return
operator|new
name|Http2OutboundFrameLogger
argument_list|(
operator|new
name|DefaultHttp2FrameWriter
argument_list|()
argument_list|,
name|FRAME_LOGGER
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|test ()
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|int
name|streamId
init|=
literal|3
decl_stmt|;
name|FullHttpRequest
name|request
init|=
operator|new
name|DefaultFullHttpRequest
argument_list|(
name|HttpVersion
operator|.
name|HTTP_1_1
argument_list|,
name|HttpMethod
operator|.
name|GET
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
name|request
operator|.
name|headers
argument_list|()
operator|.
name|add
argument_list|(
name|HttpUtil
operator|.
name|ExtensionHeaderNames
operator|.
name|STREAM_ID
operator|.
name|text
argument_list|()
argument_list|,
name|streamId
argument_list|)
expr_stmt|;
name|Promise
argument_list|<
name|FullHttpResponse
argument_list|>
name|promise
init|=
name|CHANNEL
operator|.
name|eventLoop
argument_list|()
operator|.
name|newPromise
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|RESPONSE_HANDLER
init|)
block|{
name|CHANNEL
operator|.
name|writeAndFlush
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|RESPONSE_HANDLER
operator|.
name|put
argument_list|(
name|streamId
argument_list|,
name|promise
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|HttpResponseStatus
operator|.
name|OK
argument_list|,
name|promise
operator|.
name|get
argument_list|()
operator|.
name|status
argument_list|()
argument_list|)
expr_stmt|;
name|ByteBuf
name|content
init|=
name|promise
operator|.
name|get
argument_list|()
operator|.
name|content
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"HTTP/2 DTP"
argument_list|,
name|content
operator|.
name|toString
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

