begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletOutputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|JspHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|jetty
operator|.
name|InclusiveByteRange
import|;
end_import

begin_comment
comment|/*  * Mock input stream class that always outputs the current position of the stream.   */
end_comment

begin_class
DECL|class|MockFSInputStream
class|class
name|MockFSInputStream
extends|extends
name|FSInputStream
block|{
DECL|field|currentPos
name|long
name|currentPos
init|=
literal|0
decl_stmt|;
DECL|method|read ()
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
return|return
call|(
name|int
call|)
argument_list|(
name|currentPos
operator|++
argument_list|)
return|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{   }
DECL|method|seek (long pos)
specifier|public
name|void
name|seek
parameter_list|(
name|long
name|pos
parameter_list|)
throws|throws
name|IOException
block|{
name|currentPos
operator|=
name|pos
expr_stmt|;
block|}
DECL|method|getPos ()
specifier|public
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|currentPos
return|;
block|}
DECL|method|seekToNewSource (long targetPos)
specifier|public
name|boolean
name|seekToNewSource
parameter_list|(
name|long
name|targetPos
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
block|}
end_class

begin_class
DECL|class|TestStreamFile
specifier|public
class|class
name|TestStreamFile
block|{
DECL|field|CONF
specifier|private
name|HdfsConfiguration
name|CONF
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
DECL|field|clientMock
specifier|private
name|DFSClient
name|clientMock
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|DFSClient
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|mockHttpServletRequest
specifier|private
name|HttpServletRequest
name|mockHttpServletRequest
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|mockHttpServletResponse
specifier|private
name|HttpServletResponse
name|mockHttpServletResponse
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpServletResponse
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|mockServletContext
specifier|private
specifier|final
name|ServletContext
name|mockServletContext
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ServletContext
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|sfile
name|StreamFile
name|sfile
init|=
operator|new
name|StreamFile
argument_list|()
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|5513776238875189473L
decl_stmt|;
specifier|public
name|ServletContext
name|getServletContext
parameter_list|()
block|{
return|return
name|mockServletContext
return|;
block|}
annotation|@
name|Override
specifier|protected
name|DFSClient
name|getDFSClient
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|clientMock
return|;
block|}
block|}
decl_stmt|;
comment|// return an array matching the output of mockfsinputstream
DECL|method|getOutputArray (int start, int count)
specifier|private
specifier|static
name|byte
index|[]
name|getOutputArray
parameter_list|(
name|int
name|start
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|byte
index|[]
name|a
init|=
operator|new
name|byte
index|[
name|count
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|a
index|[
name|i
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|start
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|a
return|;
block|}
annotation|@
name|Test
DECL|method|testWriteTo ()
specifier|public
name|void
name|testWriteTo
parameter_list|()
throws|throws
name|IOException
block|{
name|FSInputStream
name|fsin
init|=
operator|new
name|MockFSInputStream
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
comment|// new int[]{s_1, c_1, s_2, c_2, ..., s_n, c_n} means to test
comment|// reading c_i bytes starting at s_i
name|int
index|[]
name|pairs
init|=
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|10000
block|,
literal|50
block|,
literal|100
block|,
literal|50
block|,
literal|6000
block|,
literal|1000
block|,
literal|2000
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|5000
block|,
literal|0
block|,                             }
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Pairs array must be even"
argument_list|,
name|pairs
operator|.
name|length
operator|%
literal|2
operator|==
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pairs
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|StreamFile
operator|.
name|copyFromOffset
argument_list|(
name|fsin
argument_list|,
name|os
argument_list|,
name|pairs
index|[
name|i
index|]
argument_list|,
name|pairs
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
literal|"Reading "
operator|+
name|pairs
index|[
name|i
operator|+
literal|1
index|]
operator|+
literal|" bytes from offset "
operator|+
name|pairs
index|[
name|i
index|]
argument_list|,
name|getOutputArray
argument_list|(
name|pairs
index|[
name|i
index|]
argument_list|,
name|pairs
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
argument_list|,
name|os
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|os
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|strToRanges (String s, int contentLength)
specifier|private
name|List
argument_list|<
name|InclusiveByteRange
argument_list|>
name|strToRanges
parameter_list|(
name|String
name|s
parameter_list|,
name|int
name|contentLength
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|l
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"bytes="
operator|+
name|s
block|}
argument_list|)
decl_stmt|;
name|Enumeration
argument_list|<
name|?
argument_list|>
name|e
init|=
operator|(
operator|new
name|Vector
argument_list|<
name|String
argument_list|>
argument_list|(
name|l
argument_list|)
operator|)
operator|.
name|elements
argument_list|()
decl_stmt|;
return|return
name|InclusiveByteRange
operator|.
name|satisfiableRanges
argument_list|(
name|e
argument_list|,
name|contentLength
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testSendPartialData ()
specifier|public
name|void
name|testSendPartialData
parameter_list|()
throws|throws
name|IOException
block|{
name|FSInputStream
name|in
init|=
operator|new
name|MockFSInputStream
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
comment|// test if multiple ranges, then 416
block|{
name|List
argument_list|<
name|InclusiveByteRange
argument_list|>
name|ranges
init|=
name|strToRanges
argument_list|(
literal|"0-,10-300"
argument_list|,
literal|500
argument_list|)
decl_stmt|;
name|HttpServletResponse
name|response
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpServletResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|StreamFile
operator|.
name|sendPartialData
argument_list|(
name|in
argument_list|,
name|os
argument_list|,
name|response
argument_list|,
literal|500
argument_list|,
name|ranges
argument_list|)
expr_stmt|;
comment|// Multiple ranges should result in a 416 error
name|Mockito
operator|.
name|verify
argument_list|(
name|response
argument_list|)
operator|.
name|setStatus
argument_list|(
literal|416
argument_list|)
expr_stmt|;
block|}
comment|// test if no ranges, then 416
block|{
name|os
operator|.
name|reset
argument_list|()
expr_stmt|;
name|HttpServletResponse
name|response
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpServletResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|StreamFile
operator|.
name|sendPartialData
argument_list|(
name|in
argument_list|,
name|os
argument_list|,
name|response
argument_list|,
literal|500
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// No ranges should result in a 416 error
name|Mockito
operator|.
name|verify
argument_list|(
name|response
argument_list|)
operator|.
name|setStatus
argument_list|(
literal|416
argument_list|)
expr_stmt|;
block|}
comment|// test if invalid single range (out of bounds), then 416
block|{
name|List
argument_list|<
name|InclusiveByteRange
argument_list|>
name|ranges
init|=
name|strToRanges
argument_list|(
literal|"600-800"
argument_list|,
literal|500
argument_list|)
decl_stmt|;
name|HttpServletResponse
name|response
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpServletResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|StreamFile
operator|.
name|sendPartialData
argument_list|(
name|in
argument_list|,
name|os
argument_list|,
name|response
argument_list|,
literal|500
argument_list|,
name|ranges
argument_list|)
expr_stmt|;
comment|// Single (but invalid) range should result in a 416
name|Mockito
operator|.
name|verify
argument_list|(
name|response
argument_list|)
operator|.
name|setStatus
argument_list|(
literal|416
argument_list|)
expr_stmt|;
block|}
comment|// test if one (valid) range, then 206
block|{
name|List
argument_list|<
name|InclusiveByteRange
argument_list|>
name|ranges
init|=
name|strToRanges
argument_list|(
literal|"100-300"
argument_list|,
literal|500
argument_list|)
decl_stmt|;
name|HttpServletResponse
name|response
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpServletResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|StreamFile
operator|.
name|sendPartialData
argument_list|(
name|in
argument_list|,
name|os
argument_list|,
name|response
argument_list|,
literal|500
argument_list|,
name|ranges
argument_list|)
expr_stmt|;
comment|// Single (valid) range should result in a 206
name|Mockito
operator|.
name|verify
argument_list|(
name|response
argument_list|)
operator|.
name|setStatus
argument_list|(
literal|206
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
literal|"Byte range from 100-300"
argument_list|,
name|getOutputArray
argument_list|(
literal|100
argument_list|,
literal|201
argument_list|)
argument_list|,
name|os
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Test for positive scenario
annotation|@
name|Test
DECL|method|testDoGetShouldWriteTheFileContentIntoServletOutputStream ()
specifier|public
name|void
name|testDoGetShouldWriteTheFileContentIntoServletOutputStream
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|CONF
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|Path
name|testFile
init|=
name|createFile
argument_list|()
decl_stmt|;
name|setUpForDoGetTest
argument_list|(
name|cluster
argument_list|,
name|testFile
argument_list|)
expr_stmt|;
name|ServletOutputStreamExtn
name|outStream
init|=
operator|new
name|ServletOutputStreamExtn
argument_list|()
decl_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
name|outStream
argument_list|)
operator|.
name|when
argument_list|(
name|mockHttpServletResponse
argument_list|)
operator|.
name|getOutputStream
argument_list|()
expr_stmt|;
name|StreamFile
name|sfile
init|=
operator|new
name|StreamFile
argument_list|()
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|7715590481809562722L
decl_stmt|;
specifier|public
name|ServletContext
name|getServletContext
parameter_list|()
block|{
return|return
name|mockServletContext
return|;
block|}
block|}
decl_stmt|;
name|sfile
operator|.
name|doGet
argument_list|(
name|mockHttpServletRequest
argument_list|,
name|mockHttpServletResponse
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Not writing the file data into ServletOutputStream"
argument_list|,
name|outStream
operator|.
name|getResult
argument_list|()
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Test for cleaning the streams in exception cases also
annotation|@
name|Test
DECL|method|testDoGetShouldCloseTheDFSInputStreamIfResponseGetOutPutStreamThrowsAnyException ()
specifier|public
name|void
name|testDoGetShouldCloseTheDFSInputStreamIfResponseGetOutPutStreamThrowsAnyException
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|CONF
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|Path
name|testFile
init|=
name|createFile
argument_list|()
decl_stmt|;
name|setUpForDoGetTest
argument_list|(
name|cluster
argument_list|,
name|testFile
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|doThrow
argument_list|(
operator|new
name|IOException
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|mockHttpServletResponse
argument_list|)
operator|.
name|getOutputStream
argument_list|()
expr_stmt|;
name|DFSInputStream
name|fsMock
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|DFSInputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
name|fsMock
argument_list|)
operator|.
name|when
argument_list|(
name|clientMock
argument_list|)
operator|.
name|open
argument_list|(
name|testFile
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|fsMock
argument_list|)
operator|.
name|getFileLength
argument_list|()
expr_stmt|;
try|try
block|{
name|sfile
operator|.
name|doGet
argument_list|(
name|mockHttpServletRequest
argument_list|,
name|mockHttpServletResponse
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Not throwing the IOException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Mockito
operator|.
name|verify
argument_list|(
name|clientMock
argument_list|,
name|Mockito
operator|.
name|atLeastOnce
argument_list|()
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|setUpForDoGetTest (MiniDFSCluster cluster, Path testFile)
specifier|private
name|void
name|setUpForDoGetTest
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|,
name|Path
name|testFile
parameter_list|)
block|{
name|Mockito
operator|.
name|doReturn
argument_list|(
name|CONF
argument_list|)
operator|.
name|when
argument_list|(
name|mockServletContext
argument_list|)
operator|.
name|getAttribute
argument_list|(
name|JspHelper
operator|.
name|CURRENT_CONF
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
name|NetUtils
operator|.
name|getHostPortString
argument_list|(
name|NameNode
operator|.
name|getAddress
argument_list|(
name|CONF
argument_list|)
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|mockHttpServletRequest
argument_list|)
operator|.
name|getParameter
argument_list|(
literal|"nnaddr"
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
name|testFile
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|mockHttpServletRequest
argument_list|)
operator|.
name|getPathInfo
argument_list|()
expr_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
literal|"/streamFile"
operator|+
name|testFile
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|mockHttpServletRequest
argument_list|)
operator|.
name|getRequestURI
argument_list|()
expr_stmt|;
block|}
DECL|method|writeFile (FileSystem fs, Path f)
specifier|static
name|Path
name|writeFile
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|DataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|f
argument_list|)
decl_stmt|;
try|try
block|{
name|out
operator|.
name|writeBytes
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|f
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|f
return|;
block|}
DECL|method|createFile ()
specifier|private
name|Path
name|createFile
parameter_list|()
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|CONF
argument_list|)
decl_stmt|;
name|Path
name|testFile
init|=
operator|new
name|Path
argument_list|(
literal|"/test/mkdirs/doGet"
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|fs
argument_list|,
name|testFile
argument_list|)
expr_stmt|;
return|return
name|testFile
return|;
block|}
DECL|class|ServletOutputStreamExtn
specifier|public
specifier|static
class|class
name|ServletOutputStreamExtn
extends|extends
name|ServletOutputStream
block|{
DECL|field|buffer
specifier|private
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|(
literal|3
argument_list|)
decl_stmt|;
DECL|method|getResult ()
specifier|public
name|String
name|getResult
parameter_list|()
block|{
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|write (int b)
specifier|public
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|buffer
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|b
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

