begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
operator|.
name|IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SASL_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|FS_TRASH_INTERVAL_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|KMS_CLIENT_ENC_KEY_CACHE_LOW_WATERMARK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|KMS_CLIENT_ENC_KEY_CACHE_SIZE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_DATA_TRANSFER_PROTECTION_KEY
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|kms
operator|.
name|KMSClientProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|kms
operator|.
name|server
operator|.
name|KMSConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|kms
operator|.
name|server
operator|.
name|MiniKMS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FsShell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|CreateEncryptionZoneFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|http
operator|.
name|HttpConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|minikdc
operator|.
name|MiniKdc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|ssl
operator|.
name|KeyStoreTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|FixMethodOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|MethodSorters
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_comment
comment|/**  * This class tests Trash functionality in Encryption Zones with Kerberos  * enabled.  */
end_comment

begin_class
annotation|@
name|FixMethodOrder
argument_list|(
name|MethodSorters
operator|.
name|NAME_ASCENDING
argument_list|)
DECL|class|TestTrashWithSecureEncryptionZones
specifier|public
class|class
name|TestTrashWithSecureEncryptionZones
block|{
DECL|field|baseConf
specifier|private
specifier|static
name|HdfsConfiguration
name|baseConf
decl_stmt|;
DECL|field|baseDir
specifier|private
specifier|static
name|File
name|baseDir
decl_stmt|;
DECL|field|PROVISION_TRASH
specifier|private
specifier|static
specifier|final
name|EnumSet
argument_list|<
name|CreateEncryptionZoneFlag
argument_list|>
name|PROVISION_TRASH
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateEncryptionZoneFlag
operator|.
name|PROVISION_TRASH
argument_list|)
decl_stmt|;
DECL|field|HDFS_USER_NAME
specifier|private
specifier|static
specifier|final
name|String
name|HDFS_USER_NAME
init|=
literal|"hdfs"
decl_stmt|;
DECL|field|SPNEGO_USER_NAME
specifier|private
specifier|static
specifier|final
name|String
name|SPNEGO_USER_NAME
init|=
literal|"HTTP"
decl_stmt|;
DECL|field|OOZIE_USER_NAME
specifier|private
specifier|static
specifier|final
name|String
name|OOZIE_USER_NAME
init|=
literal|"oozie"
decl_stmt|;
DECL|field|OOZIE_PROXIED_USER_NAME
specifier|private
specifier|static
specifier|final
name|String
name|OOZIE_PROXIED_USER_NAME
init|=
literal|"oozie_user"
decl_stmt|;
DECL|field|hdfsPrincipal
specifier|private
specifier|static
name|String
name|hdfsPrincipal
decl_stmt|;
DECL|field|spnegoPrincipal
specifier|private
specifier|static
name|String
name|spnegoPrincipal
decl_stmt|;
DECL|field|keytab
specifier|private
specifier|static
name|String
name|keytab
decl_stmt|;
comment|// MiniKDC
DECL|field|kdc
specifier|private
specifier|static
name|MiniKdc
name|kdc
decl_stmt|;
comment|// MiniKMS
DECL|field|miniKMS
specifier|private
specifier|static
name|MiniKMS
name|miniKMS
decl_stmt|;
DECL|field|TEST_KEY
specifier|private
specifier|static
specifier|final
name|String
name|TEST_KEY
init|=
literal|"test_key"
decl_stmt|;
DECL|field|CURRENT
specifier|private
specifier|static
specifier|final
name|Path
name|CURRENT
init|=
operator|new
name|Path
argument_list|(
literal|"Current"
argument_list|)
decl_stmt|;
comment|// MiniDFS
DECL|field|cluster
specifier|private
specifier|static
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|HdfsConfiguration
name|conf
decl_stmt|;
DECL|field|fs
specifier|private
specifier|static
name|FileSystem
name|fs
decl_stmt|;
DECL|field|dfsAdmin
specifier|private
specifier|static
name|HdfsAdmin
name|dfsAdmin
decl_stmt|;
DECL|field|clientConf
specifier|private
specifier|static
name|Configuration
name|clientConf
decl_stmt|;
DECL|field|shell
specifier|private
specifier|static
name|FsShell
name|shell
decl_stmt|;
DECL|field|zoneCounter
specifier|private
specifier|static
name|AtomicInteger
name|zoneCounter
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|field|fileCounter
specifier|private
specifier|static
name|AtomicInteger
name|fileCounter
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|field|LEN
specifier|private
specifier|static
specifier|final
name|int
name|LEN
init|=
literal|8192
decl_stmt|;
DECL|method|getTestDir ()
specifier|public
specifier|static
name|File
name|getTestDir
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
literal|"dummy"
argument_list|)
decl_stmt|;
name|file
operator|=
name|file
operator|.
name|getAbsoluteFile
argument_list|()
expr_stmt|;
name|file
operator|=
name|file
operator|.
name|getParentFile
argument_list|()
expr_stmt|;
name|file
operator|=
operator|new
name|File
argument_list|(
name|file
argument_list|,
literal|"target"
argument_list|)
expr_stmt|;
name|file
operator|=
operator|new
name|File
argument_list|(
name|file
argument_list|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not create test directory: "
operator|+
name|file
argument_list|)
throw|;
block|}
return|return
name|file
return|;
block|}
annotation|@
name|BeforeClass
DECL|method|init ()
specifier|public
specifier|static
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
name|baseDir
operator|=
name|getTestDir
argument_list|()
expr_stmt|;
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|baseDir
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|baseDir
operator|.
name|mkdirs
argument_list|()
argument_list|)
expr_stmt|;
name|Properties
name|kdcConf
init|=
name|MiniKdc
operator|.
name|createConf
argument_list|()
decl_stmt|;
name|kdc
operator|=
operator|new
name|MiniKdc
argument_list|(
name|kdcConf
argument_list|,
name|baseDir
argument_list|)
expr_stmt|;
name|kdc
operator|.
name|start
argument_list|()
expr_stmt|;
name|baseConf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
name|SecurityUtil
operator|.
name|setAuthenticationMethod
argument_list|(
name|UserGroupInformation
operator|.
name|AuthenticationMethod
operator|.
name|KERBEROS
argument_list|,
name|baseConf
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|baseConf
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected configuration to enable security"
argument_list|,
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|keytabFile
init|=
operator|new
name|File
argument_list|(
name|baseDir
argument_list|,
literal|"test.keytab"
argument_list|)
decl_stmt|;
name|keytab
operator|=
name|keytabFile
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
comment|// Windows will not reverse name lookup "127.0.0.1" to "localhost".
name|String
name|krbInstance
init|=
name|Path
operator|.
name|WINDOWS
condition|?
literal|"127.0.0.1"
else|:
literal|"localhost"
decl_stmt|;
name|kdc
operator|.
name|createPrincipal
argument_list|(
name|keytabFile
argument_list|,
name|HDFS_USER_NAME
operator|+
literal|"/"
operator|+
name|krbInstance
argument_list|,
name|SPNEGO_USER_NAME
operator|+
literal|"/"
operator|+
name|krbInstance
argument_list|,
name|OOZIE_USER_NAME
operator|+
literal|"/"
operator|+
name|krbInstance
argument_list|,
name|OOZIE_PROXIED_USER_NAME
operator|+
literal|"/"
operator|+
name|krbInstance
argument_list|)
expr_stmt|;
name|hdfsPrincipal
operator|=
name|HDFS_USER_NAME
operator|+
literal|"/"
operator|+
name|krbInstance
operator|+
literal|"@"
operator|+
name|kdc
operator|.
name|getRealm
argument_list|()
expr_stmt|;
name|spnegoPrincipal
operator|=
name|SPNEGO_USER_NAME
operator|+
literal|"/"
operator|+
name|krbInstance
operator|+
literal|"@"
operator|+
name|kdc
operator|.
name|getRealm
argument_list|()
expr_stmt|;
name|baseConf
operator|.
name|set
argument_list|(
name|DFS_NAMENODE_KERBEROS_PRINCIPAL_KEY
argument_list|,
name|hdfsPrincipal
argument_list|)
expr_stmt|;
name|baseConf
operator|.
name|set
argument_list|(
name|DFS_NAMENODE_KEYTAB_FILE_KEY
argument_list|,
name|keytab
argument_list|)
expr_stmt|;
name|baseConf
operator|.
name|set
argument_list|(
name|DFS_DATANODE_KERBEROS_PRINCIPAL_KEY
argument_list|,
name|hdfsPrincipal
argument_list|)
expr_stmt|;
name|baseConf
operator|.
name|set
argument_list|(
name|DFS_DATANODE_KEYTAB_FILE_KEY
argument_list|,
name|keytab
argument_list|)
expr_stmt|;
name|baseConf
operator|.
name|set
argument_list|(
name|DFS_WEB_AUTHENTICATION_KERBEROS_PRINCIPAL_KEY
argument_list|,
name|spnegoPrincipal
argument_list|)
expr_stmt|;
name|baseConf
operator|.
name|setBoolean
argument_list|(
name|DFS_BLOCK_ACCESS_TOKEN_ENABLE_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|baseConf
operator|.
name|set
argument_list|(
name|DFS_DATA_TRANSFER_PROTECTION_KEY
argument_list|,
literal|"authentication"
argument_list|)
expr_stmt|;
name|baseConf
operator|.
name|set
argument_list|(
name|DFS_HTTP_POLICY_KEY
argument_list|,
name|HttpConfig
operator|.
name|Policy
operator|.
name|HTTPS_ONLY
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|baseConf
operator|.
name|set
argument_list|(
name|DFS_NAMENODE_HTTPS_ADDRESS_KEY
argument_list|,
literal|"localhost:0"
argument_list|)
expr_stmt|;
name|baseConf
operator|.
name|set
argument_list|(
name|DFS_DATANODE_HTTPS_ADDRESS_KEY
argument_list|,
literal|"localhost:0"
argument_list|)
expr_stmt|;
name|baseConf
operator|.
name|set
argument_list|(
name|DFS_JOURNALNODE_HTTPS_ADDRESS_KEY
argument_list|,
literal|"localhost:0"
argument_list|)
expr_stmt|;
name|baseConf
operator|.
name|setInt
argument_list|(
name|IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SASL_KEY
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// Set a small (2=4*0.5) KMSClient EDEK cache size to trigger
comment|// on demand refill upon the 3rd file creation
name|baseConf
operator|.
name|set
argument_list|(
name|KMS_CLIENT_ENC_KEY_CACHE_SIZE
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|baseConf
operator|.
name|set
argument_list|(
name|KMS_CLIENT_ENC_KEY_CACHE_LOW_WATERMARK
argument_list|,
literal|"0.5"
argument_list|)
expr_stmt|;
name|String
name|keystoresDir
init|=
name|baseDir
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|String
name|sslConfDir
init|=
name|KeyStoreTestUtil
operator|.
name|getClasspathDir
argument_list|(
name|TestSecureEncryptionZoneWithKMS
operator|.
name|class
argument_list|)
decl_stmt|;
name|KeyStoreTestUtil
operator|.
name|setupSSLConfig
argument_list|(
name|keystoresDir
argument_list|,
name|sslConfDir
argument_list|,
name|baseConf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|baseConf
operator|.
name|set
argument_list|(
name|DFS_CLIENT_HTTPS_KEYSTORE_RESOURCE_KEY
argument_list|,
name|KeyStoreTestUtil
operator|.
name|getClientSSLConfigFileName
argument_list|()
argument_list|)
expr_stmt|;
name|baseConf
operator|.
name|set
argument_list|(
name|DFS_SERVER_HTTPS_KEYSTORE_RESOURCE_KEY
argument_list|,
name|KeyStoreTestUtil
operator|.
name|getServerSSLConfigFileName
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|kmsFile
init|=
operator|new
name|File
argument_list|(
name|baseDir
argument_list|,
literal|"kms-site.xml"
argument_list|)
decl_stmt|;
if|if
condition|(
name|kmsFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|kmsFile
argument_list|)
expr_stmt|;
block|}
name|Configuration
name|kmsConf
init|=
operator|new
name|Configuration
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|kmsConf
operator|.
name|set
argument_list|(
name|KMSConfiguration
operator|.
name|KEY_PROVIDER_URI
argument_list|,
literal|"jceks://file@"
operator|+
operator|new
name|Path
argument_list|(
name|baseDir
operator|.
name|toString
argument_list|()
argument_list|,
literal|"kms.keystore"
argument_list|)
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
name|kmsConf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.type"
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|kmsConf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.keytab"
argument_list|,
name|keytab
argument_list|)
expr_stmt|;
name|kmsConf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.principal"
argument_list|,
literal|"HTTP/localhost"
argument_list|)
expr_stmt|;
name|kmsConf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.name.rules"
argument_list|,
literal|"DEFAULT"
argument_list|)
expr_stmt|;
name|kmsConf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.acl.GENERATE_EEK"
argument_list|,
literal|"hdfs"
argument_list|)
expr_stmt|;
name|Writer
name|writer
init|=
operator|new
name|FileWriter
argument_list|(
name|kmsFile
argument_list|)
decl_stmt|;
name|kmsConf
operator|.
name|writeXml
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Start MiniKMS
name|MiniKMS
operator|.
name|Builder
name|miniKMSBuilder
init|=
operator|new
name|MiniKMS
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|miniKMS
operator|=
name|miniKMSBuilder
operator|.
name|setKmsConfDir
argument_list|(
name|baseDir
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|miniKMS
operator|.
name|start
argument_list|()
expr_stmt|;
name|baseConf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_KEY_PROVIDER_PATH
argument_list|,
name|getKeyProviderURI
argument_list|()
argument_list|)
expr_stmt|;
name|baseConf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DELEGATION_TOKEN_ALWAYS_USE_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|(
name|baseConf
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|dfsAdmin
operator|=
operator|new
name|HdfsAdmin
argument_list|(
name|cluster
operator|.
name|getURI
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// Wait cluster to be active
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
comment|// Create a test key
name|DFSTestUtil
operator|.
name|createKey
argument_list|(
name|TEST_KEY
argument_list|,
name|cluster
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|clientConf
operator|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|clientConf
operator|.
name|setLong
argument_list|(
name|FS_TRASH_INTERVAL_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|shell
operator|=
operator|new
name|FsShell
argument_list|(
name|clientConf
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"user.name"
argument_list|,
name|HDFS_USER_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|destroy ()
specifier|public
specifier|static
name|void
name|destroy
parameter_list|()
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
literal|null
argument_list|,
name|fs
argument_list|)
expr_stmt|;
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|kdc
operator|!=
literal|null
condition|)
block|{
name|kdc
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|miniKMS
operator|!=
literal|null
condition|)
block|{
name|miniKMS
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|baseDir
argument_list|)
expr_stmt|;
block|}
DECL|method|getKeyProviderURI ()
specifier|private
specifier|static
name|String
name|getKeyProviderURI
parameter_list|()
block|{
return|return
name|KMSClientProvider
operator|.
name|SCHEME_NAME
operator|+
literal|"://"
operator|+
name|miniKMS
operator|.
name|getKMSUrl
argument_list|()
operator|.
name|toExternalForm
argument_list|()
operator|.
name|replace
argument_list|(
literal|"://"
argument_list|,
literal|"@"
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testTrashCheckpoint ()
specifier|public
name|void
name|testTrashCheckpoint
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|zone1
init|=
operator|new
name|Path
argument_list|(
literal|"/zone"
operator|+
name|zoneCounter
operator|.
name|getAndIncrement
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|zone1
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|zone2
init|=
operator|new
name|Path
argument_list|(
name|zone1
operator|+
literal|"/zone"
operator|+
name|zoneCounter
operator|.
name|getAndIncrement
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|zone2
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone2
argument_list|,
name|TEST_KEY
argument_list|,
name|PROVISION_TRASH
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|encFile1
init|=
operator|new
name|Path
argument_list|(
name|zone2
argument_list|,
literal|"encFile"
operator|+
name|fileCounter
operator|.
name|getAndIncrement
argument_list|()
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|encFile1
argument_list|,
name|LEN
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
comment|//Verify Trash checkpoint within Encryption Zone
name|Path
name|trashDir
init|=
operator|new
name|Path
argument_list|(
name|zone2
argument_list|,
name|fs
operator|.
name|TRASH_PREFIX
operator|+
literal|"/"
operator|+
name|HDFS_USER_NAME
operator|+
literal|"/"
operator|+
name|CURRENT
argument_list|)
decl_stmt|;
name|String
name|trashPath
init|=
name|trashDir
operator|.
name|toString
argument_list|()
operator|+
name|encFile1
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Path
name|deletedFile
init|=
name|verifyTrashLocationWithShellDelete
argument_list|(
name|encFile1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Deleted file not at the expected trash location: "
operator|+
name|trashPath
argument_list|,
name|trashPath
argument_list|,
name|deletedFile
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|//Verify Trash checkpoint outside the encryption zone when the whole
comment|// encryption zone is deleted and moved
name|trashPath
operator|=
name|fs
operator|.
name|getHomeDirectory
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
operator|+
literal|"/"
operator|+
name|fs
operator|.
name|TRASH_PREFIX
operator|+
literal|"/"
operator|+
name|CURRENT
operator|+
name|zone2
expr_stmt|;
name|Path
name|deletedDir
init|=
name|verifyTrashLocationWithShellDelete
argument_list|(
name|zone2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Deleted zone not at the expected trash location: "
operator|+
name|trashPath
argument_list|,
name|trashPath
argument_list|,
name|deletedDir
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTrashExpunge ()
specifier|public
name|void
name|testTrashExpunge
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|zone1
init|=
operator|new
name|Path
argument_list|(
literal|"/zone"
operator|+
name|zoneCounter
operator|.
name|getAndIncrement
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|zone1
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|zone2
init|=
operator|new
name|Path
argument_list|(
literal|"/zone"
operator|+
name|zoneCounter
operator|.
name|getAndIncrement
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|zone2
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone1
argument_list|,
name|TEST_KEY
argument_list|,
name|PROVISION_TRASH
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
name|zone1
argument_list|,
literal|"encFile"
operator|+
name|fileCounter
operator|.
name|getAndIncrement
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|file2
init|=
operator|new
name|Path
argument_list|(
name|zone2
argument_list|,
literal|"file"
operator|+
name|fileCounter
operator|.
name|getAndIncrement
argument_list|()
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|file1
argument_list|,
name|LEN
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|file2
argument_list|,
name|LEN
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
comment|//Verify Trash expunge within the encryption zone
name|List
argument_list|<
name|Path
argument_list|>
name|trashPaths
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|trashPaths
operator|.
name|add
argument_list|(
name|verifyTrashLocationWithShellDelete
argument_list|(
name|file1
argument_list|)
argument_list|)
expr_stmt|;
name|trashPaths
operator|.
name|add
argument_list|(
name|verifyTrashLocationWithShellDelete
argument_list|(
name|file2
argument_list|)
argument_list|)
expr_stmt|;
name|verifyTrashExpunge
argument_list|(
name|trashPaths
argument_list|)
expr_stmt|;
comment|//Verify Trash expunge when the whole encryption zone has been deleted
specifier|final
name|Path
name|file3
init|=
operator|new
name|Path
argument_list|(
name|zone1
argument_list|,
literal|"encFile"
operator|+
name|fileCounter
operator|.
name|getAndIncrement
argument_list|()
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|file3
argument_list|,
name|LEN
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0XFEED
argument_list|)
expr_stmt|;
name|Path
name|trashPath
init|=
name|verifyTrashLocationWithShellDelete
argument_list|(
name|file3
argument_list|)
decl_stmt|;
comment|//Delete encryption zone
name|DFSTestUtil
operator|.
name|verifyDelete
argument_list|(
name|shell
argument_list|,
name|fs
argument_list|,
name|zone1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyTrashExpunge
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|trashPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeleteWithSkipTrash ()
specifier|public
name|void
name|testDeleteWithSkipTrash
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|zone1
init|=
operator|new
name|Path
argument_list|(
literal|"/zone"
operator|+
name|zoneCounter
operator|.
name|getAndIncrement
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|zone1
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|encFile1
init|=
operator|new
name|Path
argument_list|(
name|zone1
argument_list|,
literal|"encFile"
operator|+
name|fileCounter
operator|.
name|getAndIncrement
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|encFile2
init|=
operator|new
name|Path
argument_list|(
name|zone1
argument_list|,
literal|"encFile"
operator|+
name|fileCounter
operator|.
name|getAndIncrement
argument_list|()
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|encFile1
argument_list|,
name|LEN
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|encFile2
argument_list|,
name|LEN
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
comment|//Verify file deletion with skipTrash
name|verifyDeleteWithSkipTrash
argument_list|(
name|encFile1
argument_list|)
expr_stmt|;
comment|//Verify file deletion without skipTrash
name|DFSTestUtil
operator|.
name|verifyDelete
argument_list|(
name|shell
argument_list|,
name|fs
argument_list|,
name|encFile2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeleteEmptyDirectory ()
specifier|public
name|void
name|testDeleteEmptyDirectory
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|zone1
init|=
operator|new
name|Path
argument_list|(
literal|"/zone"
operator|+
name|zoneCounter
operator|.
name|getAndIncrement
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|zone2
init|=
operator|new
name|Path
argument_list|(
literal|"/zone"
operator|+
name|zoneCounter
operator|.
name|getAndIncrement
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|zone1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|zone2
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|trashDir1
init|=
operator|new
name|Path
argument_list|(
name|shell
operator|.
name|getCurrentTrashDir
argument_list|(
name|zone1
argument_list|)
operator|+
literal|"/"
operator|+
name|zone1
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|trashDir2
init|=
operator|new
name|Path
argument_list|(
name|shell
operator|.
name|getCurrentTrashDir
argument_list|(
name|zone1
argument_list|)
operator|+
literal|"/"
operator|+
name|zone2
argument_list|)
decl_stmt|;
comment|//Delete empty directory with -r option
name|String
index|[]
name|argv1
init|=
operator|new
name|String
index|[]
block|{
literal|"-rm"
block|,
literal|"-r"
block|,
name|zone1
operator|.
name|toString
argument_list|()
block|}
decl_stmt|;
name|int
name|res
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|argv1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"rm failed"
argument_list|,
literal|0
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Empty directory not deleted even with -r : "
operator|+
name|trashDir1
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|trashDir1
argument_list|)
argument_list|)
expr_stmt|;
comment|//Delete empty directory without -r option
name|String
index|[]
name|argv2
init|=
operator|new
name|String
index|[]
block|{
literal|"-rm"
block|,
name|zone2
operator|.
name|toString
argument_list|()
block|}
decl_stmt|;
name|res
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|argv2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"rm on empty directory did not fail"
argument_list|,
literal|1
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Empty directory deleted without -r : "
operator|+
name|trashDir2
argument_list|,
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|trashDir2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeleteFromTrashWithinEZ ()
specifier|public
name|void
name|testDeleteFromTrashWithinEZ
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|zone1
init|=
operator|new
name|Path
argument_list|(
literal|"/zone"
operator|+
name|zoneCounter
operator|.
name|getAndIncrement
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|zone1
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone1
argument_list|,
name|TEST_KEY
argument_list|,
name|PROVISION_TRASH
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|encFile1
init|=
operator|new
name|Path
argument_list|(
name|zone1
argument_list|,
literal|"encFile"
operator|+
name|fileCounter
operator|.
name|getAndIncrement
argument_list|()
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|encFile1
argument_list|,
name|LEN
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|trashFile
init|=
operator|new
name|Path
argument_list|(
name|shell
operator|.
name|getCurrentTrashDir
argument_list|(
name|encFile1
argument_list|)
operator|+
literal|"/"
operator|+
name|encFile1
argument_list|)
decl_stmt|;
name|String
index|[]
name|argv
init|=
operator|new
name|String
index|[]
block|{
literal|"-rm"
block|,
literal|"-r"
block|,
name|encFile1
operator|.
name|toString
argument_list|()
block|}
decl_stmt|;
name|int
name|res
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"rm failed"
argument_list|,
literal|0
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|String
index|[]
name|argvDeleteTrash
init|=
operator|new
name|String
index|[]
block|{
literal|"-rm"
block|,
literal|"-r"
block|,
name|trashFile
operator|.
name|toString
argument_list|()
block|}
decl_stmt|;
name|int
name|resDeleteTrash
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|argvDeleteTrash
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"rm failed"
argument_list|,
literal|0
argument_list|,
name|resDeleteTrash
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"File deleted from Trash : "
operator|+
name|trashFile
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|trashFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTrashRetentionAfterNamenodeRestart ()
specifier|public
name|void
name|testTrashRetentionAfterNamenodeRestart
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|zone1
init|=
operator|new
name|Path
argument_list|(
literal|"/zone"
operator|+
name|zoneCounter
operator|.
name|getAndIncrement
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|zone1
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone1
argument_list|,
name|TEST_KEY
argument_list|,
name|PROVISION_TRASH
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|encFile1
init|=
operator|new
name|Path
argument_list|(
name|zone1
argument_list|,
literal|"encFile"
operator|+
name|fileCounter
operator|.
name|getAndIncrement
argument_list|()
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|encFile1
argument_list|,
name|LEN
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|trashFile
init|=
operator|new
name|Path
argument_list|(
name|shell
operator|.
name|getCurrentTrashDir
argument_list|(
name|encFile1
argument_list|)
operator|+
literal|"/"
operator|+
name|encFile1
argument_list|)
decl_stmt|;
name|String
index|[]
name|argv
init|=
operator|new
name|String
index|[]
block|{
literal|"-rm"
block|,
literal|"-r"
block|,
name|encFile1
operator|.
name|toString
argument_list|()
block|}
decl_stmt|;
name|int
name|res
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"rm failed"
argument_list|,
literal|0
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"File not in trash : "
operator|+
name|trashFile
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|trashFile
argument_list|)
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|restartNameNode
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"On Namenode restart, file deleted from trash : "
operator|+
name|trashFile
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|trashFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyTrashLocationWithShellDelete (Path path)
specifier|private
name|Path
name|verifyTrashLocationWithShellDelete
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|trashFile
init|=
operator|new
name|Path
argument_list|(
name|shell
operator|.
name|getCurrentTrashDir
argument_list|(
name|path
argument_list|)
operator|+
literal|"/"
operator|+
name|path
argument_list|)
decl_stmt|;
name|File
name|deletedFile
init|=
operator|new
name|File
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|trashFile
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"File already present in Trash before delete"
argument_list|,
name|deletedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|verifyDelete
argument_list|(
name|shell
argument_list|,
name|fs
argument_list|,
name|path
argument_list|,
name|trashFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|trashFile
return|;
block|}
DECL|method|verifyTrashExpunge (List<Path> trashFiles)
specifier|private
name|void
name|verifyTrashExpunge
parameter_list|(
name|List
argument_list|<
name|Path
argument_list|>
name|trashFiles
parameter_list|)
throws|throws
name|Exception
block|{
name|String
index|[]
name|argv
init|=
operator|new
name|String
index|[]
block|{
literal|"-expunge"
block|}
decl_stmt|;
name|int
name|res
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"expunge failed"
argument_list|,
literal|0
argument_list|,
name|res
argument_list|)
expr_stmt|;
for|for
control|(
name|Path
name|trashFile
range|:
name|trashFiles
control|)
block|{
name|assertFalse
argument_list|(
literal|"File exists in trash after expunge : "
operator|+
name|trashFile
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|trashFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifyDeleteWithSkipTrash (Path path)
specifier|private
name|void
name|verifyDeleteWithSkipTrash
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|path
operator|+
literal|" file does not exist"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|trashFile
init|=
operator|new
name|Path
argument_list|(
name|shell
operator|.
name|getCurrentTrashDir
argument_list|(
name|path
argument_list|)
operator|+
literal|"/"
operator|+
name|path
argument_list|)
decl_stmt|;
name|String
index|[]
name|argv
init|=
operator|new
name|String
index|[]
block|{
literal|"-rm"
block|,
literal|"-r"
block|,
literal|"-skipTrash"
block|,
name|path
operator|.
name|toString
argument_list|()
block|}
decl_stmt|;
name|int
name|res
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"rm failed"
argument_list|,
literal|0
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"File in trash even with -skipTrash"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|trashFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

