begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|Util
operator|.
name|fileAsURI
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyObject
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doAnswer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doThrow
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|PermissionStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|SafeModeAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockIdManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|NamenodeRole
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|Storage
operator|.
name|StorageDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NNStorage
operator|.
name|NameNodeFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|Canceler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|MD5FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
operator|.
name|DelayAnswer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|Whitebox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|event
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_comment
comment|/**  * Test various failure scenarios during saveNamespace() operation.  * Cases covered:  *<ol>  *<li>Recover from failure while saving into the second storage directory</li>  *<li>Recover from failure while moving current into lastcheckpoint.tmp</li>  *<li>Recover from failure while moving lastcheckpoint.tmp into  * previous.checkpoint</li>  *<li>Recover from failure while rolling edits file</li>  *</ol>  */
end_comment

begin_class
DECL|class|TestSaveNamespace
specifier|public
class|class
name|TestSaveNamespace
block|{
static|static
block|{
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|FSImage
operator|.
name|LOG
argument_list|,
name|Level
operator|.
name|TRACE
argument_list|)
expr_stmt|;
block|}
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestSaveNamespace
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|class|FaultySaveImage
specifier|private
specifier|static
class|class
name|FaultySaveImage
implements|implements
name|Answer
argument_list|<
name|Void
argument_list|>
block|{
DECL|field|count
specifier|private
name|int
name|count
init|=
literal|0
decl_stmt|;
DECL|field|throwRTE
specifier|private
name|boolean
name|throwRTE
init|=
literal|true
decl_stmt|;
comment|// generate either a RuntimeException or IOException
DECL|method|FaultySaveImage (boolean throwRTE)
specifier|public
name|FaultySaveImage
parameter_list|(
name|boolean
name|throwRTE
parameter_list|)
block|{
name|this
operator|.
name|throwRTE
operator|=
name|throwRTE
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|answer (InvocationOnMock invocation)
specifier|public
name|Void
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|Object
index|[]
name|args
init|=
name|invocation
operator|.
name|getArguments
argument_list|()
decl_stmt|;
name|StorageDirectory
name|sd
init|=
operator|(
name|StorageDirectory
operator|)
name|args
index|[
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|count
operator|++
operator|==
literal|1
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Injecting fault for sd: "
operator|+
name|sd
argument_list|)
expr_stmt|;
if|if
condition|(
name|throwRTE
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Injected fault: saveFSImage second time"
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Injected fault: saveFSImage second time"
argument_list|)
throw|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Not injecting fault for sd: "
operator|+
name|sd
argument_list|)
expr_stmt|;
return|return
operator|(
name|Void
operator|)
name|invocation
operator|.
name|callRealMethod
argument_list|()
return|;
block|}
block|}
DECL|class|FaultyWriteProperties
specifier|private
specifier|static
class|class
name|FaultyWriteProperties
implements|implements
name|Answer
argument_list|<
name|Void
argument_list|>
block|{
DECL|field|count
specifier|private
name|int
name|count
init|=
literal|0
decl_stmt|;
DECL|field|faultType
specifier|private
name|Fault
name|faultType
decl_stmt|;
DECL|method|FaultyWriteProperties (Fault faultType)
name|FaultyWriteProperties
parameter_list|(
name|Fault
name|faultType
parameter_list|)
block|{
name|this
operator|.
name|faultType
operator|=
name|faultType
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|answer (InvocationOnMock invocation)
specifier|public
name|Void
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|Object
index|[]
name|args
init|=
name|invocation
operator|.
name|getArguments
argument_list|()
decl_stmt|;
name|StorageDirectory
name|sd
init|=
operator|(
name|StorageDirectory
operator|)
name|args
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|faultType
operator|==
name|Fault
operator|.
name|WRITE_STORAGE_ALL
operator|||
operator|(
name|faultType
operator|==
name|Fault
operator|.
name|WRITE_STORAGE_ONE
operator|&&
name|count
operator|++
operator|==
literal|1
operator|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Injecting fault for sd: "
operator|+
name|sd
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Injected fault: writeProperties second time"
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Not injecting fault for sd: "
operator|+
name|sd
argument_list|)
expr_stmt|;
return|return
operator|(
name|Void
operator|)
name|invocation
operator|.
name|callRealMethod
argument_list|()
return|;
block|}
block|}
DECL|enum|Fault
specifier|private
enum|enum
name|Fault
block|{
DECL|enumConstant|SAVE_SECOND_FSIMAGE_RTE
name|SAVE_SECOND_FSIMAGE_RTE
block|,
DECL|enumConstant|SAVE_SECOND_FSIMAGE_IOE
name|SAVE_SECOND_FSIMAGE_IOE
block|,
DECL|enumConstant|SAVE_ALL_FSIMAGES
name|SAVE_ALL_FSIMAGES
block|,
DECL|enumConstant|WRITE_STORAGE_ALL
name|WRITE_STORAGE_ALL
block|,
DECL|enumConstant|WRITE_STORAGE_ONE
name|WRITE_STORAGE_ONE
block|}
DECL|method|saveNamespaceWithInjectedFault (Fault fault)
specifier|private
name|void
name|saveNamespaceWithInjectedFault
parameter_list|(
name|Fault
name|fault
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|NameNode
operator|.
name|initMetrics
argument_list|(
name|conf
argument_list|,
name|NamenodeRole
operator|.
name|NAMENODE
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|formatNameNode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|FSNamesystem
name|fsn
init|=
name|FSNamesystem
operator|.
name|loadFromDisk
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Replace the FSImage with a spy
name|FSImage
name|originalImage
init|=
name|fsn
operator|.
name|getFSImage
argument_list|()
decl_stmt|;
name|NNStorage
name|storage
init|=
name|originalImage
operator|.
name|getStorage
argument_list|()
decl_stmt|;
name|NNStorage
name|spyStorage
init|=
name|spy
argument_list|(
name|storage
argument_list|)
decl_stmt|;
name|originalImage
operator|.
name|storage
operator|=
name|spyStorage
expr_stmt|;
name|FSImage
name|spyImage
init|=
name|spy
argument_list|(
name|originalImage
argument_list|)
decl_stmt|;
name|Whitebox
operator|.
name|setInternalState
argument_list|(
name|fsn
argument_list|,
literal|"fsImage"
argument_list|,
name|spyImage
argument_list|)
expr_stmt|;
name|boolean
name|shouldFail
init|=
literal|false
decl_stmt|;
comment|// should we expect the save operation to fail
comment|// inject fault
switch|switch
condition|(
name|fault
condition|)
block|{
case|case
name|SAVE_SECOND_FSIMAGE_RTE
case|:
comment|// The spy throws a RuntimeException when writing to the second directory
name|doAnswer
argument_list|(
operator|new
name|FaultySaveImage
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|spyImage
argument_list|)
operator|.
name|saveFSImage
argument_list|(
name|anyObject
argument_list|()
argument_list|,
name|anyObject
argument_list|()
argument_list|,
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
name|shouldFail
operator|=
literal|false
expr_stmt|;
break|break;
case|case
name|SAVE_SECOND_FSIMAGE_IOE
case|:
comment|// The spy throws an IOException when writing to the second directory
name|doAnswer
argument_list|(
operator|new
name|FaultySaveImage
argument_list|(
literal|false
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|spyImage
argument_list|)
operator|.
name|saveFSImage
argument_list|(
name|anyObject
argument_list|()
argument_list|,
name|anyObject
argument_list|()
argument_list|,
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
name|shouldFail
operator|=
literal|false
expr_stmt|;
break|break;
case|case
name|SAVE_ALL_FSIMAGES
case|:
comment|// The spy throws IOException in all directories
name|doThrow
argument_list|(
operator|new
name|RuntimeException
argument_list|(
literal|"Injected"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|spyImage
argument_list|)
operator|.
name|saveFSImage
argument_list|(
name|anyObject
argument_list|()
argument_list|,
name|anyObject
argument_list|()
argument_list|,
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
name|shouldFail
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|WRITE_STORAGE_ALL
case|:
comment|// The spy throws an exception before writing any VERSION files
name|doAnswer
argument_list|(
operator|new
name|FaultyWriteProperties
argument_list|(
name|Fault
operator|.
name|WRITE_STORAGE_ALL
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|spyStorage
argument_list|)
operator|.
name|writeProperties
argument_list|(
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
name|shouldFail
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|WRITE_STORAGE_ONE
case|:
comment|// The spy throws on exception on one particular storage directory
name|doAnswer
argument_list|(
operator|new
name|FaultyWriteProperties
argument_list|(
name|Fault
operator|.
name|WRITE_STORAGE_ONE
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|spyStorage
argument_list|)
operator|.
name|writeProperties
argument_list|(
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
name|shouldFail
operator|=
literal|false
expr_stmt|;
break|break;
default|default:
name|fail
argument_list|(
literal|"Unknown fail type"
argument_list|)
expr_stmt|;
break|break;
block|}
try|try
block|{
name|doAnEdit
argument_list|(
name|fsn
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Save namespace - this may fail, depending on fault injected
name|fsn
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
argument_list|)
expr_stmt|;
try|try
block|{
name|fsn
operator|.
name|saveNamespace
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|shouldFail
condition|)
block|{
name|fail
argument_list|(
literal|"Did not fail!"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|shouldFail
condition|)
block|{
throw|throw
name|e
throw|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Test caught expected exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|fsn
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_LEAVE
argument_list|)
expr_stmt|;
comment|// Should still be able to perform edits
name|doAnEdit
argument_list|(
name|fsn
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Now shut down and restart the namesystem
name|originalImage
operator|.
name|close
argument_list|()
expr_stmt|;
name|fsn
operator|.
name|close
argument_list|()
expr_stmt|;
name|fsn
operator|=
literal|null
expr_stmt|;
comment|// Start a new namesystem, which should be able to recover
comment|// the namespace from the previous incarnation.
name|fsn
operator|=
name|FSNamesystem
operator|.
name|loadFromDisk
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Make sure the image loaded including our edits.
name|checkEditExists
argument_list|(
name|fsn
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkEditExists
argument_list|(
name|fsn
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|fsn
operator|!=
literal|null
condition|)
block|{
name|fsn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Verify that a saveNamespace command brings faulty directories    * in fs.name.dir and fs.edit.dir back online.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testReinsertnamedirsInSavenamespace ()
specifier|public
name|void
name|testReinsertnamedirsInSavenamespace
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create a configuration with the key to restore error
comment|// directories in fs.name.dir
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_NAME_DIR_RESTORE_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|NameNode
operator|.
name|initMetrics
argument_list|(
name|conf
argument_list|,
name|NamenodeRole
operator|.
name|NAMENODE
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|formatNameNode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|FSNamesystem
name|fsn
init|=
name|FSNamesystem
operator|.
name|loadFromDisk
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Replace the FSImage with a spy
name|FSImage
name|originalImage
init|=
name|fsn
operator|.
name|getFSImage
argument_list|()
decl_stmt|;
name|NNStorage
name|storage
init|=
name|originalImage
operator|.
name|getStorage
argument_list|()
decl_stmt|;
name|FSImage
name|spyImage
init|=
name|spy
argument_list|(
name|originalImage
argument_list|)
decl_stmt|;
name|Whitebox
operator|.
name|setInternalState
argument_list|(
name|fsn
argument_list|,
literal|"fsImage"
argument_list|,
name|spyImage
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|File
name|rootDir
init|=
name|storage
operator|.
name|getStorageDir
argument_list|(
literal|0
argument_list|)
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|Path
name|rootPath
init|=
operator|new
name|Path
argument_list|(
name|rootDir
operator|.
name|getPath
argument_list|()
argument_list|,
literal|"current"
argument_list|)
decl_stmt|;
specifier|final
name|FsPermission
name|permissionNone
init|=
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|FsPermission
name|permissionAll
init|=
operator|new
name|FsPermission
argument_list|(
name|FsAction
operator|.
name|ALL
argument_list|,
name|FsAction
operator|.
name|READ_EXECUTE
argument_list|,
name|FsAction
operator|.
name|READ_EXECUTE
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|rootPath
argument_list|,
name|permissionNone
argument_list|)
expr_stmt|;
try|try
block|{
name|doAnEdit
argument_list|(
name|fsn
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|fsn
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
argument_list|)
expr_stmt|;
comment|// Save namespace - should mark the first storage dir as faulty
comment|// since it's not traversable.
name|LOG
operator|.
name|info
argument_list|(
literal|"Doing the first savenamespace."
argument_list|)
expr_stmt|;
name|fsn
operator|.
name|saveNamespace
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"First savenamespace sucessful."
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Savenamespace should have marked one directory as bad."
operator|+
literal|" But found "
operator|+
name|storage
operator|.
name|getRemovedStorageDirs
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|" bad directories."
argument_list|,
name|storage
operator|.
name|getRemovedStorageDirs
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|rootPath
argument_list|,
name|permissionAll
argument_list|)
expr_stmt|;
comment|// The next call to savenamespace should try inserting the
comment|// erroneous directory back to fs.name.dir. This command should
comment|// be successful.
name|LOG
operator|.
name|info
argument_list|(
literal|"Doing the second savenamespace."
argument_list|)
expr_stmt|;
name|fsn
operator|.
name|saveNamespace
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Second savenamespace sucessful."
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Savenamespace should have been successful in removing "
operator|+
literal|" bad directories from Image."
operator|+
literal|" But found "
operator|+
name|storage
operator|.
name|getRemovedStorageDirs
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|" bad directories."
argument_list|,
name|storage
operator|.
name|getRemovedStorageDirs
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// Now shut down and restart the namesystem
name|LOG
operator|.
name|info
argument_list|(
literal|"Shutting down fsimage."
argument_list|)
expr_stmt|;
name|originalImage
operator|.
name|close
argument_list|()
expr_stmt|;
name|fsn
operator|.
name|close
argument_list|()
expr_stmt|;
name|fsn
operator|=
literal|null
expr_stmt|;
comment|// Start a new namesystem, which should be able to recover
comment|// the namespace from the previous incarnation.
name|LOG
operator|.
name|info
argument_list|(
literal|"Loading new FSmage from disk."
argument_list|)
expr_stmt|;
name|fsn
operator|=
name|FSNamesystem
operator|.
name|loadFromDisk
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Make sure the image loaded including our edit.
name|LOG
operator|.
name|info
argument_list|(
literal|"Checking reloaded image."
argument_list|)
expr_stmt|;
name|checkEditExists
argument_list|(
name|fsn
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Reloaded image is good."
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|rootDir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|fs
operator|.
name|setPermission
argument_list|(
name|rootPath
argument_list|,
name|permissionAll
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fsn
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|fsn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to shut down"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testRTEWhileSavingSecondImage ()
specifier|public
name|void
name|testRTEWhileSavingSecondImage
parameter_list|()
throws|throws
name|Exception
block|{
name|saveNamespaceWithInjectedFault
argument_list|(
name|Fault
operator|.
name|SAVE_SECOND_FSIMAGE_RTE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testIOEWhileSavingSecondImage ()
specifier|public
name|void
name|testIOEWhileSavingSecondImage
parameter_list|()
throws|throws
name|Exception
block|{
name|saveNamespaceWithInjectedFault
argument_list|(
name|Fault
operator|.
name|SAVE_SECOND_FSIMAGE_IOE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testCrashInAllImageDirs ()
specifier|public
name|void
name|testCrashInAllImageDirs
parameter_list|()
throws|throws
name|Exception
block|{
name|saveNamespaceWithInjectedFault
argument_list|(
name|Fault
operator|.
name|SAVE_ALL_FSIMAGES
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testCrashWhenWritingVersionFiles ()
specifier|public
name|void
name|testCrashWhenWritingVersionFiles
parameter_list|()
throws|throws
name|Exception
block|{
name|saveNamespaceWithInjectedFault
argument_list|(
name|Fault
operator|.
name|WRITE_STORAGE_ALL
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testCrashWhenWritingVersionFileInOneDir ()
specifier|public
name|void
name|testCrashWhenWritingVersionFileInOneDir
parameter_list|()
throws|throws
name|Exception
block|{
name|saveNamespaceWithInjectedFault
argument_list|(
name|Fault
operator|.
name|WRITE_STORAGE_ONE
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test case where savenamespace fails in all directories    * and then the NN shuts down. Here we should recover from the    * failed checkpoint since it only affected ".ckpt" files, not    * valid image files    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testFailedSaveNamespace ()
specifier|public
name|void
name|testFailedSaveNamespace
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestFailedSaveNamespace
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test case where saveNamespace fails in all directories, but then    * the operator restores the directories and calls it again.    * This should leave the NN in a clean state for next start.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testFailedSaveNamespaceWithRecovery ()
specifier|public
name|void
name|testFailedSaveNamespaceWithRecovery
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestFailedSaveNamespace
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Injects a failure on all storage directories while saving namespace.    *    * @param restoreStorageAfterFailure if true, will try to save again after    *   clearing the failure injection    */
DECL|method|doTestFailedSaveNamespace (boolean restoreStorageAfterFailure)
specifier|public
name|void
name|doTestFailedSaveNamespace
parameter_list|(
name|boolean
name|restoreStorageAfterFailure
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|NameNode
operator|.
name|initMetrics
argument_list|(
name|conf
argument_list|,
name|NamenodeRole
operator|.
name|NAMENODE
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|formatNameNode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|FSNamesystem
name|fsn
init|=
name|FSNamesystem
operator|.
name|loadFromDisk
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Replace the FSImage with a spy
specifier|final
name|FSImage
name|originalImage
init|=
name|fsn
operator|.
name|getFSImage
argument_list|()
decl_stmt|;
name|NNStorage
name|storage
init|=
name|originalImage
operator|.
name|getStorage
argument_list|()
decl_stmt|;
comment|// unlock any directories that
comment|// FSNamesystem's initialization may have locked
name|storage
operator|.
name|close
argument_list|()
expr_stmt|;
name|NNStorage
name|spyStorage
init|=
name|spy
argument_list|(
name|storage
argument_list|)
decl_stmt|;
name|originalImage
operator|.
name|storage
operator|=
name|spyStorage
expr_stmt|;
name|FSImage
name|spyImage
init|=
name|spy
argument_list|(
name|originalImage
argument_list|)
decl_stmt|;
name|Whitebox
operator|.
name|setInternalState
argument_list|(
name|fsn
argument_list|,
literal|"fsImage"
argument_list|,
name|spyImage
argument_list|)
expr_stmt|;
name|spyImage
operator|.
name|storage
operator|.
name|setStorageDirectories
argument_list|(
name|FSNamesystem
operator|.
name|getNamespaceDirs
argument_list|(
name|conf
argument_list|)
argument_list|,
name|FSNamesystem
operator|.
name|getNamespaceEditsDirs
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|doThrow
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"Injected fault: saveFSImage"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|spyImage
argument_list|)
operator|.
name|saveFSImage
argument_list|(
name|anyObject
argument_list|()
argument_list|,
name|anyObject
argument_list|()
argument_list|,
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|doAnEdit
argument_list|(
name|fsn
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Save namespace
name|fsn
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
argument_list|)
expr_stmt|;
try|try
block|{
name|fsn
operator|.
name|saveNamespace
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"saveNamespace did not fail even when all directories failed!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got expected exception"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
comment|// Ensure that, if storage dirs come back online, things work again.
if|if
condition|(
name|restoreStorageAfterFailure
condition|)
block|{
name|Mockito
operator|.
name|reset
argument_list|(
name|spyImage
argument_list|)
expr_stmt|;
name|spyStorage
operator|.
name|setRestoreFailedStorage
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fsn
operator|.
name|saveNamespace
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkEditExists
argument_list|(
name|fsn
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Now shut down and restart the NN
name|originalImage
operator|.
name|close
argument_list|()
expr_stmt|;
name|fsn
operator|.
name|close
argument_list|()
expr_stmt|;
name|fsn
operator|=
literal|null
expr_stmt|;
comment|// Start a new namesystem, which should be able to recover
comment|// the namespace from the previous incarnation.
name|fsn
operator|=
name|FSNamesystem
operator|.
name|loadFromDisk
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Make sure the image loaded including our edits.
name|checkEditExists
argument_list|(
name|fsn
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|fsn
operator|!=
literal|null
condition|)
block|{
name|fsn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testSaveWhileEditsRolled ()
specifier|public
name|void
name|testSaveWhileEditsRolled
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|NameNode
operator|.
name|initMetrics
argument_list|(
name|conf
argument_list|,
name|NamenodeRole
operator|.
name|NAMENODE
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|formatNameNode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|FSNamesystem
name|fsn
init|=
name|FSNamesystem
operator|.
name|loadFromDisk
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|doAnEdit
argument_list|(
name|fsn
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|CheckpointSignature
name|sig
init|=
name|fsn
operator|.
name|rollEditLog
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Checkpoint signature: "
operator|+
name|sig
argument_list|)
expr_stmt|;
comment|// Do another edit
name|doAnEdit
argument_list|(
name|fsn
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Save namespace
name|fsn
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
argument_list|)
expr_stmt|;
name|fsn
operator|.
name|saveNamespace
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Now shut down and restart the NN
name|fsn
operator|.
name|close
argument_list|()
expr_stmt|;
name|fsn
operator|=
literal|null
expr_stmt|;
comment|// Start a new namesystem, which should be able to recover
comment|// the namespace from the previous incarnation.
name|fsn
operator|=
name|FSNamesystem
operator|.
name|loadFromDisk
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Make sure the image loaded including our edits.
name|checkEditExists
argument_list|(
name|fsn
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkEditExists
argument_list|(
name|fsn
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|fsn
operator|!=
literal|null
condition|)
block|{
name|fsn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testTxIdPersistence ()
specifier|public
name|void
name|testTxIdPersistence
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|NameNode
operator|.
name|initMetrics
argument_list|(
name|conf
argument_list|,
name|NamenodeRole
operator|.
name|NAMENODE
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|formatNameNode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|FSNamesystem
name|fsn
init|=
name|FSNamesystem
operator|.
name|loadFromDisk
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
comment|// We have a BEGIN_LOG_SEGMENT txn to start
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fsn
operator|.
name|getEditLog
argument_list|()
operator|.
name|getLastWrittenTxId
argument_list|()
argument_list|)
expr_stmt|;
name|doAnEdit
argument_list|(
name|fsn
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|fsn
operator|.
name|getEditLog
argument_list|()
operator|.
name|getLastWrittenTxId
argument_list|()
argument_list|)
expr_stmt|;
name|fsn
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
argument_list|)
expr_stmt|;
name|fsn
operator|.
name|saveNamespace
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// 2 more txns: END the first segment, BEGIN a new one
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|fsn
operator|.
name|getEditLog
argument_list|()
operator|.
name|getLastWrittenTxId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Shut down and restart
name|fsn
operator|.
name|getFSImage
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|fsn
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// 1 more txn to END that segment
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|fsn
operator|.
name|getEditLog
argument_list|()
operator|.
name|getLastWrittenTxId
argument_list|()
argument_list|)
expr_stmt|;
name|fsn
operator|=
literal|null
expr_stmt|;
name|fsn
operator|=
name|FSNamesystem
operator|.
name|loadFromDisk
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// 1 more txn to start new segment on restart
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|fsn
operator|.
name|getEditLog
argument_list|()
operator|.
name|getLastWrittenTxId
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|fsn
operator|!=
literal|null
condition|)
block|{
name|fsn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
DECL|method|testCancelSaveNamespace ()
specifier|public
name|void
name|testCancelSaveNamespace
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|NameNode
operator|.
name|initMetrics
argument_list|(
name|conf
argument_list|,
name|NamenodeRole
operator|.
name|NAMENODE
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|formatNameNode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|FSNamesystem
name|fsn
init|=
name|FSNamesystem
operator|.
name|loadFromDisk
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Replace the FSImage with a spy
specifier|final
name|FSImage
name|image
init|=
name|fsn
operator|.
name|getFSImage
argument_list|()
decl_stmt|;
name|NNStorage
name|storage
init|=
name|image
operator|.
name|getStorage
argument_list|()
decl_stmt|;
comment|// unlock any directories that
comment|// FSNamesystem's initialization may have locked
name|storage
operator|.
name|close
argument_list|()
expr_stmt|;
name|storage
operator|.
name|setStorageDirectories
argument_list|(
name|FSNamesystem
operator|.
name|getNamespaceDirs
argument_list|(
name|conf
argument_list|)
argument_list|,
name|FSNamesystem
operator|.
name|getNamespaceEditsDirs
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|FSNamesystem
name|spyFsn
init|=
name|spy
argument_list|(
name|fsn
argument_list|)
decl_stmt|;
specifier|final
name|FSNamesystem
name|finalFsn
init|=
name|spyFsn
decl_stmt|;
name|DelayAnswer
name|delayer
init|=
operator|new
name|GenericTestUtils
operator|.
name|DelayAnswer
argument_list|(
name|LOG
argument_list|)
decl_stmt|;
name|BlockIdManager
name|bid
init|=
name|spy
argument_list|(
name|spyFsn
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getBlockIdManager
argument_list|()
argument_list|)
decl_stmt|;
name|Whitebox
operator|.
name|setInternalState
argument_list|(
name|finalFsn
operator|.
name|getBlockManager
argument_list|()
argument_list|,
literal|"blockIdManager"
argument_list|,
name|bid
argument_list|)
expr_stmt|;
name|doAnswer
argument_list|(
name|delayer
argument_list|)
operator|.
name|when
argument_list|(
name|bid
argument_list|)
operator|.
name|getGenerationStamp
argument_list|()
expr_stmt|;
name|ExecutorService
name|pool
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|2
argument_list|)
decl_stmt|;
try|try
block|{
name|doAnEdit
argument_list|(
name|fsn
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|Canceler
name|canceler
init|=
operator|new
name|Canceler
argument_list|()
decl_stmt|;
comment|// Save namespace
name|fsn
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
argument_list|)
expr_stmt|;
try|try
block|{
name|Future
argument_list|<
name|Void
argument_list|>
name|saverFuture
init|=
name|pool
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|image
operator|.
name|saveNamespace
argument_list|(
name|finalFsn
argument_list|,
name|NameNodeFile
operator|.
name|IMAGE
argument_list|,
name|canceler
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
decl_stmt|;
comment|// Wait until saveNamespace calls getGenerationStamp
name|delayer
operator|.
name|waitForCall
argument_list|()
expr_stmt|;
comment|// then cancel the saveNamespace
name|Future
argument_list|<
name|Void
argument_list|>
name|cancelFuture
init|=
name|pool
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|canceler
operator|.
name|cancel
argument_list|(
literal|"cancelled"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
decl_stmt|;
comment|// give the cancel call time to run
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
comment|// allow saveNamespace to proceed - it should check the cancel flag
comment|// after this point and throw an exception
name|delayer
operator|.
name|proceed
argument_list|()
expr_stmt|;
name|cancelFuture
operator|.
name|get
argument_list|()
expr_stmt|;
name|saverFuture
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"saveNamespace did not fail even though cancelled!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"SaveNamespaceCancelledException"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Successfully cancelled a saveNamespace"
argument_list|)
expr_stmt|;
comment|// Check that we have only the original image and not any
comment|// cruft left over from half-finished images
name|FSImageTestUtil
operator|.
name|logStorageContents
argument_list|(
name|LOG
argument_list|,
name|storage
argument_list|)
expr_stmt|;
for|for
control|(
name|StorageDirectory
name|sd
range|:
name|storage
operator|.
name|dirIterable
argument_list|(
literal|null
argument_list|)
control|)
block|{
name|File
name|curDir
init|=
name|sd
operator|.
name|getCurrentDir
argument_list|()
decl_stmt|;
name|GenericTestUtils
operator|.
name|assertGlobEquals
argument_list|(
name|curDir
argument_list|,
literal|"fsimage_.*"
argument_list|,
name|NNStorage
operator|.
name|getImageFileName
argument_list|(
literal|0
argument_list|)
argument_list|,
name|NNStorage
operator|.
name|getImageFileName
argument_list|(
literal|0
argument_list|)
operator|+
name|MD5FileUtils
operator|.
name|MD5_SUFFIX
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|fsn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test for save namespace should succeed when parent directory renamed with    * open lease and destination directory exist.     * This test is a regression for HDFS-2827    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testSaveNamespaceWithRenamedLease ()
specifier|public
name|void
name|testSaveNamespaceWithRenamedLease
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|DistributedFileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|OutputStream
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test-target"
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|=
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test-source/foo"
argument_list|)
argument_list|)
expr_stmt|;
comment|// don't close
name|fs
operator|.
name|rename
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test-source/"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/test-target/"
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
operator|.
name|saveNamespace
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_LEAVE
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
name|LOG
argument_list|,
name|out
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testSaveNamespaceWithDanglingLease ()
specifier|public
name|void
name|testSaveNamespaceWithDanglingLease
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|DistributedFileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|leaseManager
operator|.
name|addLease
argument_list|(
literal|"me"
argument_list|,
name|INodeId
operator|.
name|ROOT_INODE_ID
operator|+
literal|1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
operator|.
name|saveNamespace
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_LEAVE
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSkipSnapshotSection ()
specifier|public
name|void
name|testSkipSnapshotSection
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|DistributedFileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|OutputStream
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
name|String
name|path
init|=
literal|"/skipSnapshot"
decl_stmt|;
name|out
operator|=
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// add a bogus filediff
name|FSDirectory
name|dir
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getFSDirectory
argument_list|()
decl_stmt|;
name|INodeFile
name|file
init|=
name|dir
operator|.
name|getINode
argument_list|(
name|path
argument_list|)
operator|.
name|asFile
argument_list|()
decl_stmt|;
name|file
operator|.
name|addSnapshotFeature
argument_list|(
literal|null
argument_list|)
operator|.
name|getDiffs
argument_list|()
operator|.
name|saveSelf2Snapshot
argument_list|(
operator|-
literal|1
argument_list|,
name|file
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// make sure it has a diff
name|assertTrue
argument_list|(
literal|"Snapshot fileDiff is missing."
argument_list|,
name|file
operator|.
name|getFileWithSnapshotFeature
argument_list|()
operator|.
name|getDiffs
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
comment|// saveNamespace
name|fs
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
operator|.
name|saveNamespace
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_LEAVE
argument_list|)
expr_stmt|;
comment|// restart namenode
name|cluster
operator|.
name|restartNameNode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dir
operator|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getFSDirectory
argument_list|()
expr_stmt|;
name|file
operator|=
name|dir
operator|.
name|getINode
argument_list|(
name|path
argument_list|)
operator|.
name|asFile
argument_list|()
expr_stmt|;
comment|// there should be no snapshot feature for the inode, when there is
comment|// no snapshot.
name|assertTrue
argument_list|(
literal|"There should be no snapshot feature for this INode."
argument_list|,
name|file
operator|.
name|getFileWithSnapshotFeature
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSaveNamespaceBeforeShutdown ()
specifier|public
name|void
name|testSaveNamespaceBeforeShutdown
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|DistributedFileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|FSImage
name|fsimage
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getFSImage
argument_list|()
decl_stmt|;
specifier|final
name|long
name|before
init|=
name|fsimage
operator|.
name|getStorage
argument_list|()
operator|.
name|getMostRecentCheckpointTxId
argument_list|()
decl_stmt|;
name|fs
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
argument_list|)
expr_stmt|;
comment|// set the timewindow to 1 hour and tx gap to 1000, which means that if
comment|// there is a checkpoint during the past 1 hour or the tx number happening
comment|// after the latest checkpoint is<= 1000, this saveNamespace request
comment|// will be ignored
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
operator|.
name|saveNamespace
argument_list|(
literal|3600
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
comment|// make sure no new checkpoint was done
name|long
name|after
init|=
name|fsimage
operator|.
name|getStorage
argument_list|()
operator|.
name|getMostRecentCheckpointTxId
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|// do another checkpoint. this time set the timewindow to 1s
comment|// we should see a new checkpoint
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
operator|.
name|saveNamespace
argument_list|(
literal|1
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_LEAVE
argument_list|)
expr_stmt|;
name|after
operator|=
name|fsimage
operator|.
name|getStorage
argument_list|()
operator|.
name|getMostRecentCheckpointTxId
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|after
operator|>
name|before
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo/bar/baz"
argument_list|)
argument_list|)
expr_stmt|;
comment|// 3 new tx
name|fs
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
operator|.
name|saveNamespace
argument_list|(
literal|3600
argument_list|,
literal|5
argument_list|)
expr_stmt|;
comment|// 3 + end/start segment
name|long
name|after2
init|=
name|fsimage
operator|.
name|getStorage
argument_list|()
operator|.
name|getMostRecentCheckpointTxId
argument_list|()
decl_stmt|;
comment|// no checkpoint should be made
name|Assert
operator|.
name|assertEquals
argument_list|(
name|after
argument_list|,
name|after2
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
operator|.
name|saveNamespace
argument_list|(
literal|3600
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|after2
operator|=
name|fsimage
operator|.
name|getStorage
argument_list|()
operator|.
name|getMostRecentCheckpointTxId
argument_list|()
expr_stmt|;
comment|// a new checkpoint should be done
name|Assert
operator|.
name|assertTrue
argument_list|(
name|after2
operator|>
name|after
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testTxFaultTolerance ()
specifier|public
name|void
name|testTxFaultTolerance
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|baseDir
init|=
name|MiniDFSCluster
operator|.
name|getBaseDirectory
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|nameDirs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|nameDirs
operator|.
name|add
argument_list|(
name|fileAsURI
argument_list|(
operator|new
name|File
argument_list|(
name|baseDir
argument_list|,
literal|"name1"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|nameDirs
operator|.
name|add
argument_list|(
name|fileAsURI
argument_list|(
operator|new
name|File
argument_list|(
name|baseDir
argument_list|,
literal|"name2"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|String
name|nameDirsStr
init|=
name|StringUtils
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|nameDirs
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_NAME_DIR_KEY
argument_list|,
name|nameDirsStr
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_EDITS_DIR_KEY
argument_list|,
name|nameDirsStr
argument_list|)
expr_stmt|;
name|NameNode
operator|.
name|initMetrics
argument_list|(
name|conf
argument_list|,
name|NamenodeRole
operator|.
name|NAMENODE
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|formatNameNode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|FSNamesystem
name|fsn
init|=
name|FSNamesystem
operator|.
name|loadFromDisk
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
comment|// We have a BEGIN_LOG_SEGMENT txn to start
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fsn
operator|.
name|getEditLog
argument_list|()
operator|.
name|getLastWrittenTxId
argument_list|()
argument_list|)
expr_stmt|;
name|doAnEdit
argument_list|(
name|fsn
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|fsn
operator|.
name|getEditLog
argument_list|()
operator|.
name|getLastWrittenTxId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Shut down
name|fsn
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Corrupt one of the seen_txid files
name|File
name|txidFile0
init|=
operator|new
name|File
argument_list|(
operator|new
name|URI
argument_list|(
name|nameDirs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|+
literal|"/current/seen_txid"
argument_list|)
argument_list|)
decl_stmt|;
name|FileWriter
name|fw
init|=
operator|new
name|FileWriter
argument_list|(
name|txidFile0
argument_list|,
literal|false
argument_list|)
decl_stmt|;
try|try
init|(
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|fw
argument_list|)
init|)
block|{
name|pw
operator|.
name|print
argument_list|(
literal|"corrupt____!"
argument_list|)
expr_stmt|;
block|}
comment|// Restart
name|fsn
operator|=
name|FSNamesystem
operator|.
name|loadFromDisk
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|fsn
operator|.
name|getEditLog
argument_list|()
operator|.
name|getLastWrittenTxId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check seen_txid is same in both dirs
name|File
name|txidFile1
init|=
operator|new
name|File
argument_list|(
operator|new
name|URI
argument_list|(
name|nameDirs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|+
literal|"/current/seen_txid"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|FileUtils
operator|.
name|contentEquals
argument_list|(
name|txidFile0
argument_list|,
name|txidFile1
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|fsn
operator|!=
literal|null
condition|)
block|{
name|fsn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|doAnEdit (FSNamesystem fsn, int id)
specifier|private
name|void
name|doAnEdit
parameter_list|(
name|FSNamesystem
name|fsn
parameter_list|,
name|int
name|id
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Make an edit
name|fsn
operator|.
name|mkdirs
argument_list|(
literal|"/test"
operator|+
name|id
argument_list|,
operator|new
name|PermissionStatus
argument_list|(
literal|"test"
argument_list|,
literal|"Test"
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|checkEditExists (FSNamesystem fsn, int id)
specifier|private
name|void
name|checkEditExists
parameter_list|(
name|FSNamesystem
name|fsn
parameter_list|,
name|int
name|id
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Make sure the image loaded including our edit.
name|assertNotNull
argument_list|(
name|fsn
operator|.
name|getFileInfo
argument_list|(
literal|"/test"
operator|+
name|id
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getConf ()
specifier|private
name|Configuration
name|getConf
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|baseDir
init|=
name|MiniDFSCluster
operator|.
name|getBaseDirectory
argument_list|()
decl_stmt|;
name|String
name|nameDirs
init|=
name|fileAsURI
argument_list|(
operator|new
name|File
argument_list|(
name|baseDir
argument_list|,
literal|"name1"
argument_list|)
argument_list|)
operator|+
literal|","
operator|+
name|fileAsURI
argument_list|(
operator|new
name|File
argument_list|(
name|baseDir
argument_list|,
literal|"name2"
argument_list|)
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|FileSystem
operator|.
name|setDefaultUri
argument_list|(
name|conf
argument_list|,
literal|"hdfs://localhost:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HTTP_ADDRESS_KEY
argument_list|,
literal|"0.0.0.0:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_NAME_DIR_KEY
argument_list|,
name|nameDirs
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_EDITS_DIR_KEY
argument_list|,
name|nameDirs
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_KEY
argument_list|,
literal|"0.0.0.0:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_PERMISSIONS_ENABLED_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
block|}
end_class

end_unit

