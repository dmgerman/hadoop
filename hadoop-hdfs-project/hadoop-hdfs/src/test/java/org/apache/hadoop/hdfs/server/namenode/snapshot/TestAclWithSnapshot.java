begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.snapshot
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|AclTestHelpers
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryScope
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryType
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|NSQuotaExceededException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshotAccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|AclFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|AclStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|AclTestHelpers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSAclBaseTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNodeAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * Tests interaction of ACLs with snapshots.  */
end_comment

begin_class
DECL|class|TestAclWithSnapshot
specifier|public
class|class
name|TestAclWithSnapshot
block|{
DECL|field|BRUCE
specifier|private
specifier|static
specifier|final
name|UserGroupInformation
name|BRUCE
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"bruce"
argument_list|,
operator|new
name|String
index|[]
block|{ }
argument_list|)
decl_stmt|;
DECL|field|DIANA
specifier|private
specifier|static
specifier|final
name|UserGroupInformation
name|DIANA
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"diana"
argument_list|,
operator|new
name|String
index|[]
block|{ }
argument_list|)
decl_stmt|;
DECL|field|cluster
specifier|private
specifier|static
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|Configuration
name|conf
decl_stmt|;
DECL|field|fsAsBruce
DECL|field|fsAsDiana
specifier|private
specifier|static
name|FileSystem
name|fsAsBruce
decl_stmt|,
name|fsAsDiana
decl_stmt|;
DECL|field|hdfs
specifier|private
specifier|static
name|DistributedFileSystem
name|hdfs
decl_stmt|;
DECL|field|pathCount
specifier|private
specifier|static
name|int
name|pathCount
init|=
literal|0
decl_stmt|;
DECL|field|path
DECL|field|snapshotPath
specifier|private
specifier|static
name|Path
name|path
decl_stmt|,
name|snapshotPath
decl_stmt|;
DECL|field|snapshotName
specifier|private
specifier|static
name|String
name|snapshotName
decl_stmt|;
annotation|@
name|Rule
DECL|field|exception
specifier|public
name|ExpectedException
name|exception
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|init ()
specifier|public
specifier|static
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_ACLS_ENABLED_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|initCluster
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|shutdown ()
specifier|public
specifier|static
name|void
name|shutdown
parameter_list|()
throws|throws
name|Exception
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
literal|null
argument_list|,
name|hdfs
argument_list|,
name|fsAsBruce
argument_list|,
name|fsAsDiana
argument_list|)
expr_stmt|;
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
operator|++
name|pathCount
expr_stmt|;
name|path
operator|=
operator|new
name|Path
argument_list|(
literal|"/p"
operator|+
name|pathCount
argument_list|)
expr_stmt|;
name|snapshotName
operator|=
literal|"snapshot"
operator|+
name|pathCount
expr_stmt|;
name|snapshotPath
operator|=
operator|new
name|Path
argument_list|(
name|path
argument_list|,
operator|new
name|Path
argument_list|(
literal|".snapshot"
argument_list|,
name|snapshotName
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOriginalAclEnforcedForSnapshotRootAfterChange ()
specifier|public
name|void
name|testOriginalAclEnforcedForSnapshotRootAfterChange
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|hdfs
argument_list|,
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0700
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"bruce"
argument_list|,
name|READ_EXECUTE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|NONE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|OTHER
argument_list|,
name|NONE
argument_list|)
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|setAcl
argument_list|(
name|path
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|assertDirPermissionGranted
argument_list|(
name|fsAsBruce
argument_list|,
name|BRUCE
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|assertDirPermissionDenied
argument_list|(
name|fsAsDiana
argument_list|,
name|DIANA
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|path
argument_list|,
name|snapshotName
argument_list|)
expr_stmt|;
comment|// Both original and snapshot still have same ACL.
name|AclStatus
name|s
init|=
name|hdfs
operator|.
name|getAclStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|AclEntry
index|[]
name|returned
init|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"bruce"
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|NONE
argument_list|)
block|}
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
operator|(
name|short
operator|)
literal|010750
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|s
operator|=
name|hdfs
operator|.
name|getAclStatus
argument_list|(
name|snapshotPath
argument_list|)
expr_stmt|;
name|returned
operator|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"bruce"
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|NONE
argument_list|)
block|}
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
operator|(
name|short
operator|)
literal|010750
argument_list|,
name|snapshotPath
argument_list|)
expr_stmt|;
name|assertDirPermissionGranted
argument_list|(
name|fsAsBruce
argument_list|,
name|BRUCE
argument_list|,
name|snapshotPath
argument_list|)
expr_stmt|;
name|assertDirPermissionDenied
argument_list|(
name|fsAsDiana
argument_list|,
name|DIANA
argument_list|,
name|snapshotPath
argument_list|)
expr_stmt|;
name|aclSpec
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
name|READ_EXECUTE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"diana"
argument_list|,
name|READ_EXECUTE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|NONE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|OTHER
argument_list|,
name|NONE
argument_list|)
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|setAcl
argument_list|(
name|path
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
comment|// Original has changed, but snapshot still has old ACL.
name|doSnapshotRootChangeAssertions
argument_list|(
name|path
argument_list|,
name|snapshotPath
argument_list|)
expr_stmt|;
name|restart
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|doSnapshotRootChangeAssertions
argument_list|(
name|path
argument_list|,
name|snapshotPath
argument_list|)
expr_stmt|;
name|restart
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|doSnapshotRootChangeAssertions
argument_list|(
name|path
argument_list|,
name|snapshotPath
argument_list|)
expr_stmt|;
block|}
DECL|method|doSnapshotRootChangeAssertions (Path path, Path snapshotPath)
specifier|private
specifier|static
name|void
name|doSnapshotRootChangeAssertions
parameter_list|(
name|Path
name|path
parameter_list|,
name|Path
name|snapshotPath
parameter_list|)
throws|throws
name|Exception
block|{
name|AclStatus
name|s
init|=
name|hdfs
operator|.
name|getAclStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|AclEntry
index|[]
name|returned
init|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"diana"
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|NONE
argument_list|)
block|}
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
operator|(
name|short
operator|)
literal|010550
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|s
operator|=
name|hdfs
operator|.
name|getAclStatus
argument_list|(
name|snapshotPath
argument_list|)
expr_stmt|;
name|returned
operator|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"bruce"
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|NONE
argument_list|)
block|}
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
operator|(
name|short
operator|)
literal|010750
argument_list|,
name|snapshotPath
argument_list|)
expr_stmt|;
name|assertDirPermissionDenied
argument_list|(
name|fsAsBruce
argument_list|,
name|BRUCE
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|assertDirPermissionGranted
argument_list|(
name|fsAsDiana
argument_list|,
name|DIANA
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|assertDirPermissionGranted
argument_list|(
name|fsAsBruce
argument_list|,
name|BRUCE
argument_list|,
name|snapshotPath
argument_list|)
expr_stmt|;
name|assertDirPermissionDenied
argument_list|(
name|fsAsDiana
argument_list|,
name|DIANA
argument_list|,
name|snapshotPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOriginalAclEnforcedForSnapshotContentsAfterChange ()
specifier|public
name|void
name|testOriginalAclEnforcedForSnapshotContentsAfterChange
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
name|Path
name|subdirPath
init|=
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"subdir1"
argument_list|)
decl_stmt|;
name|Path
name|fileSnapshotPath
init|=
operator|new
name|Path
argument_list|(
name|snapshotPath
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
name|Path
name|subdirSnapshotPath
init|=
operator|new
name|Path
argument_list|(
name|snapshotPath
argument_list|,
literal|"subdir1"
argument_list|)
decl_stmt|;
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|hdfs
argument_list|,
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
expr_stmt|;
name|FileSystem
operator|.
name|create
argument_list|(
name|hdfs
argument_list|,
name|filePath
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0600
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|hdfs
argument_list|,
name|subdirPath
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0700
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
name|READ_EXECUTE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"bruce"
argument_list|,
name|READ_EXECUTE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|NONE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|OTHER
argument_list|,
name|NONE
argument_list|)
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|setAcl
argument_list|(
name|filePath
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|setAcl
argument_list|(
name|subdirPath
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|assertFilePermissionGranted
argument_list|(
name|fsAsBruce
argument_list|,
name|BRUCE
argument_list|,
name|filePath
argument_list|)
expr_stmt|;
name|assertFilePermissionDenied
argument_list|(
name|fsAsDiana
argument_list|,
name|DIANA
argument_list|,
name|filePath
argument_list|)
expr_stmt|;
name|assertDirPermissionGranted
argument_list|(
name|fsAsBruce
argument_list|,
name|BRUCE
argument_list|,
name|subdirPath
argument_list|)
expr_stmt|;
name|assertDirPermissionDenied
argument_list|(
name|fsAsDiana
argument_list|,
name|DIANA
argument_list|,
name|subdirPath
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|path
argument_list|,
name|snapshotName
argument_list|)
expr_stmt|;
comment|// Both original and snapshot still have same ACL.
name|AclEntry
index|[]
name|expected
init|=
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"bruce"
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|NONE
argument_list|)
block|}
decl_stmt|;
name|AclStatus
name|s
init|=
name|hdfs
operator|.
name|getAclStatus
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
name|AclEntry
index|[]
name|returned
init|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
operator|(
name|short
operator|)
literal|010550
argument_list|,
name|filePath
argument_list|)
expr_stmt|;
name|s
operator|=
name|hdfs
operator|.
name|getAclStatus
argument_list|(
name|subdirPath
argument_list|)
expr_stmt|;
name|returned
operator|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
operator|(
name|short
operator|)
literal|010550
argument_list|,
name|subdirPath
argument_list|)
expr_stmt|;
name|s
operator|=
name|hdfs
operator|.
name|getAclStatus
argument_list|(
name|fileSnapshotPath
argument_list|)
expr_stmt|;
name|returned
operator|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
operator|(
name|short
operator|)
literal|010550
argument_list|,
name|fileSnapshotPath
argument_list|)
expr_stmt|;
name|assertFilePermissionGranted
argument_list|(
name|fsAsBruce
argument_list|,
name|BRUCE
argument_list|,
name|fileSnapshotPath
argument_list|)
expr_stmt|;
name|assertFilePermissionDenied
argument_list|(
name|fsAsDiana
argument_list|,
name|DIANA
argument_list|,
name|fileSnapshotPath
argument_list|)
expr_stmt|;
name|s
operator|=
name|hdfs
operator|.
name|getAclStatus
argument_list|(
name|subdirSnapshotPath
argument_list|)
expr_stmt|;
name|returned
operator|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
operator|(
name|short
operator|)
literal|010550
argument_list|,
name|subdirSnapshotPath
argument_list|)
expr_stmt|;
name|assertDirPermissionGranted
argument_list|(
name|fsAsBruce
argument_list|,
name|BRUCE
argument_list|,
name|subdirSnapshotPath
argument_list|)
expr_stmt|;
name|assertDirPermissionDenied
argument_list|(
name|fsAsDiana
argument_list|,
name|DIANA
argument_list|,
name|subdirSnapshotPath
argument_list|)
expr_stmt|;
name|aclSpec
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
name|READ_EXECUTE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"diana"
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|NONE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|OTHER
argument_list|,
name|NONE
argument_list|)
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|setAcl
argument_list|(
name|filePath
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|setAcl
argument_list|(
name|subdirPath
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
comment|// Original has changed, but snapshot still has old ACL.
name|doSnapshotContentsChangeAssertions
argument_list|(
name|filePath
argument_list|,
name|fileSnapshotPath
argument_list|,
name|subdirPath
argument_list|,
name|subdirSnapshotPath
argument_list|)
expr_stmt|;
name|restart
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|doSnapshotContentsChangeAssertions
argument_list|(
name|filePath
argument_list|,
name|fileSnapshotPath
argument_list|,
name|subdirPath
argument_list|,
name|subdirSnapshotPath
argument_list|)
expr_stmt|;
name|restart
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|doSnapshotContentsChangeAssertions
argument_list|(
name|filePath
argument_list|,
name|fileSnapshotPath
argument_list|,
name|subdirPath
argument_list|,
name|subdirSnapshotPath
argument_list|)
expr_stmt|;
block|}
DECL|method|doSnapshotContentsChangeAssertions (Path filePath, Path fileSnapshotPath, Path subdirPath, Path subdirSnapshotPath)
specifier|private
specifier|static
name|void
name|doSnapshotContentsChangeAssertions
parameter_list|(
name|Path
name|filePath
parameter_list|,
name|Path
name|fileSnapshotPath
parameter_list|,
name|Path
name|subdirPath
parameter_list|,
name|Path
name|subdirSnapshotPath
parameter_list|)
throws|throws
name|Exception
block|{
name|AclEntry
index|[]
name|expected
init|=
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"diana"
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|NONE
argument_list|)
block|}
decl_stmt|;
name|AclStatus
name|s
init|=
name|hdfs
operator|.
name|getAclStatus
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
name|AclEntry
index|[]
name|returned
init|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
operator|(
name|short
operator|)
literal|010570
argument_list|,
name|filePath
argument_list|)
expr_stmt|;
name|assertFilePermissionDenied
argument_list|(
name|fsAsBruce
argument_list|,
name|BRUCE
argument_list|,
name|filePath
argument_list|)
expr_stmt|;
name|assertFilePermissionGranted
argument_list|(
name|fsAsDiana
argument_list|,
name|DIANA
argument_list|,
name|filePath
argument_list|)
expr_stmt|;
name|s
operator|=
name|hdfs
operator|.
name|getAclStatus
argument_list|(
name|subdirPath
argument_list|)
expr_stmt|;
name|returned
operator|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
operator|(
name|short
operator|)
literal|010570
argument_list|,
name|subdirPath
argument_list|)
expr_stmt|;
name|assertDirPermissionDenied
argument_list|(
name|fsAsBruce
argument_list|,
name|BRUCE
argument_list|,
name|subdirPath
argument_list|)
expr_stmt|;
name|assertDirPermissionGranted
argument_list|(
name|fsAsDiana
argument_list|,
name|DIANA
argument_list|,
name|subdirPath
argument_list|)
expr_stmt|;
name|expected
operator|=
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"bruce"
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|NONE
argument_list|)
block|}
expr_stmt|;
name|s
operator|=
name|hdfs
operator|.
name|getAclStatus
argument_list|(
name|fileSnapshotPath
argument_list|)
expr_stmt|;
name|returned
operator|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
operator|(
name|short
operator|)
literal|010550
argument_list|,
name|fileSnapshotPath
argument_list|)
expr_stmt|;
name|assertFilePermissionGranted
argument_list|(
name|fsAsBruce
argument_list|,
name|BRUCE
argument_list|,
name|fileSnapshotPath
argument_list|)
expr_stmt|;
name|assertFilePermissionDenied
argument_list|(
name|fsAsDiana
argument_list|,
name|DIANA
argument_list|,
name|fileSnapshotPath
argument_list|)
expr_stmt|;
name|s
operator|=
name|hdfs
operator|.
name|getAclStatus
argument_list|(
name|subdirSnapshotPath
argument_list|)
expr_stmt|;
name|returned
operator|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
operator|(
name|short
operator|)
literal|010550
argument_list|,
name|subdirSnapshotPath
argument_list|)
expr_stmt|;
name|assertDirPermissionGranted
argument_list|(
name|fsAsBruce
argument_list|,
name|BRUCE
argument_list|,
name|subdirSnapshotPath
argument_list|)
expr_stmt|;
name|assertDirPermissionDenied
argument_list|(
name|fsAsDiana
argument_list|,
name|DIANA
argument_list|,
name|subdirSnapshotPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOriginalAclEnforcedForSnapshotRootAfterRemoval ()
specifier|public
name|void
name|testOriginalAclEnforcedForSnapshotRootAfterRemoval
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|hdfs
argument_list|,
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0700
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"bruce"
argument_list|,
name|READ_EXECUTE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|NONE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|OTHER
argument_list|,
name|NONE
argument_list|)
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|setAcl
argument_list|(
name|path
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|assertDirPermissionGranted
argument_list|(
name|fsAsBruce
argument_list|,
name|BRUCE
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|assertDirPermissionDenied
argument_list|(
name|fsAsDiana
argument_list|,
name|DIANA
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|path
argument_list|,
name|snapshotName
argument_list|)
expr_stmt|;
comment|// Both original and snapshot still have same ACL.
name|AclStatus
name|s
init|=
name|hdfs
operator|.
name|getAclStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|AclEntry
index|[]
name|returned
init|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"bruce"
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|NONE
argument_list|)
block|}
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
operator|(
name|short
operator|)
literal|010750
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|s
operator|=
name|hdfs
operator|.
name|getAclStatus
argument_list|(
name|snapshotPath
argument_list|)
expr_stmt|;
name|returned
operator|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"bruce"
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|NONE
argument_list|)
block|}
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
operator|(
name|short
operator|)
literal|010750
argument_list|,
name|snapshotPath
argument_list|)
expr_stmt|;
name|assertDirPermissionGranted
argument_list|(
name|fsAsBruce
argument_list|,
name|BRUCE
argument_list|,
name|snapshotPath
argument_list|)
expr_stmt|;
name|assertDirPermissionDenied
argument_list|(
name|fsAsDiana
argument_list|,
name|DIANA
argument_list|,
name|snapshotPath
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|removeAcl
argument_list|(
name|path
argument_list|)
expr_stmt|;
comment|// Original has changed, but snapshot still has old ACL.
name|doSnapshotRootRemovalAssertions
argument_list|(
name|path
argument_list|,
name|snapshotPath
argument_list|)
expr_stmt|;
name|restart
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|doSnapshotRootRemovalAssertions
argument_list|(
name|path
argument_list|,
name|snapshotPath
argument_list|)
expr_stmt|;
name|restart
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|doSnapshotRootRemovalAssertions
argument_list|(
name|path
argument_list|,
name|snapshotPath
argument_list|)
expr_stmt|;
block|}
DECL|method|doSnapshotRootRemovalAssertions (Path path, Path snapshotPath)
specifier|private
specifier|static
name|void
name|doSnapshotRootRemovalAssertions
parameter_list|(
name|Path
name|path
parameter_list|,
name|Path
name|snapshotPath
parameter_list|)
throws|throws
name|Exception
block|{
name|AclStatus
name|s
init|=
name|hdfs
operator|.
name|getAclStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|AclEntry
index|[]
name|returned
init|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|AclEntry
index|[]
block|{ }
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
operator|(
name|short
operator|)
literal|0700
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|s
operator|=
name|hdfs
operator|.
name|getAclStatus
argument_list|(
name|snapshotPath
argument_list|)
expr_stmt|;
name|returned
operator|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"bruce"
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|NONE
argument_list|)
block|}
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
operator|(
name|short
operator|)
literal|010750
argument_list|,
name|snapshotPath
argument_list|)
expr_stmt|;
name|assertDirPermissionDenied
argument_list|(
name|fsAsBruce
argument_list|,
name|BRUCE
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|assertDirPermissionDenied
argument_list|(
name|fsAsDiana
argument_list|,
name|DIANA
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|assertDirPermissionGranted
argument_list|(
name|fsAsBruce
argument_list|,
name|BRUCE
argument_list|,
name|snapshotPath
argument_list|)
expr_stmt|;
name|assertDirPermissionDenied
argument_list|(
name|fsAsDiana
argument_list|,
name|DIANA
argument_list|,
name|snapshotPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOriginalAclEnforcedForSnapshotContentsAfterRemoval ()
specifier|public
name|void
name|testOriginalAclEnforcedForSnapshotContentsAfterRemoval
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
name|Path
name|subdirPath
init|=
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"subdir1"
argument_list|)
decl_stmt|;
name|Path
name|fileSnapshotPath
init|=
operator|new
name|Path
argument_list|(
name|snapshotPath
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
name|Path
name|subdirSnapshotPath
init|=
operator|new
name|Path
argument_list|(
name|snapshotPath
argument_list|,
literal|"subdir1"
argument_list|)
decl_stmt|;
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|hdfs
argument_list|,
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
expr_stmt|;
name|FileSystem
operator|.
name|create
argument_list|(
name|hdfs
argument_list|,
name|filePath
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0600
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|hdfs
argument_list|,
name|subdirPath
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0700
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
name|READ_EXECUTE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"bruce"
argument_list|,
name|READ_EXECUTE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|NONE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|OTHER
argument_list|,
name|NONE
argument_list|)
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|setAcl
argument_list|(
name|filePath
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|setAcl
argument_list|(
name|subdirPath
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|assertFilePermissionGranted
argument_list|(
name|fsAsBruce
argument_list|,
name|BRUCE
argument_list|,
name|filePath
argument_list|)
expr_stmt|;
name|assertFilePermissionDenied
argument_list|(
name|fsAsDiana
argument_list|,
name|DIANA
argument_list|,
name|filePath
argument_list|)
expr_stmt|;
name|assertDirPermissionGranted
argument_list|(
name|fsAsBruce
argument_list|,
name|BRUCE
argument_list|,
name|subdirPath
argument_list|)
expr_stmt|;
name|assertDirPermissionDenied
argument_list|(
name|fsAsDiana
argument_list|,
name|DIANA
argument_list|,
name|subdirPath
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|path
argument_list|,
name|snapshotName
argument_list|)
expr_stmt|;
comment|// Both original and snapshot still have same ACL.
name|AclEntry
index|[]
name|expected
init|=
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"bruce"
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|NONE
argument_list|)
block|}
decl_stmt|;
name|AclStatus
name|s
init|=
name|hdfs
operator|.
name|getAclStatus
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
name|AclEntry
index|[]
name|returned
init|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
operator|(
name|short
operator|)
literal|010550
argument_list|,
name|filePath
argument_list|)
expr_stmt|;
name|s
operator|=
name|hdfs
operator|.
name|getAclStatus
argument_list|(
name|subdirPath
argument_list|)
expr_stmt|;
name|returned
operator|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
operator|(
name|short
operator|)
literal|010550
argument_list|,
name|subdirPath
argument_list|)
expr_stmt|;
name|s
operator|=
name|hdfs
operator|.
name|getAclStatus
argument_list|(
name|fileSnapshotPath
argument_list|)
expr_stmt|;
name|returned
operator|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
operator|(
name|short
operator|)
literal|010550
argument_list|,
name|fileSnapshotPath
argument_list|)
expr_stmt|;
name|assertFilePermissionGranted
argument_list|(
name|fsAsBruce
argument_list|,
name|BRUCE
argument_list|,
name|fileSnapshotPath
argument_list|)
expr_stmt|;
name|assertFilePermissionDenied
argument_list|(
name|fsAsDiana
argument_list|,
name|DIANA
argument_list|,
name|fileSnapshotPath
argument_list|)
expr_stmt|;
name|s
operator|=
name|hdfs
operator|.
name|getAclStatus
argument_list|(
name|subdirSnapshotPath
argument_list|)
expr_stmt|;
name|returned
operator|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
operator|(
name|short
operator|)
literal|010550
argument_list|,
name|subdirSnapshotPath
argument_list|)
expr_stmt|;
name|assertDirPermissionGranted
argument_list|(
name|fsAsBruce
argument_list|,
name|BRUCE
argument_list|,
name|subdirSnapshotPath
argument_list|)
expr_stmt|;
name|assertDirPermissionDenied
argument_list|(
name|fsAsDiana
argument_list|,
name|DIANA
argument_list|,
name|subdirSnapshotPath
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|removeAcl
argument_list|(
name|filePath
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|removeAcl
argument_list|(
name|subdirPath
argument_list|)
expr_stmt|;
comment|// Original has changed, but snapshot still has old ACL.
name|doSnapshotContentsRemovalAssertions
argument_list|(
name|filePath
argument_list|,
name|fileSnapshotPath
argument_list|,
name|subdirPath
argument_list|,
name|subdirSnapshotPath
argument_list|)
expr_stmt|;
name|restart
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|doSnapshotContentsRemovalAssertions
argument_list|(
name|filePath
argument_list|,
name|fileSnapshotPath
argument_list|,
name|subdirPath
argument_list|,
name|subdirSnapshotPath
argument_list|)
expr_stmt|;
name|restart
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|doSnapshotContentsRemovalAssertions
argument_list|(
name|filePath
argument_list|,
name|fileSnapshotPath
argument_list|,
name|subdirPath
argument_list|,
name|subdirSnapshotPath
argument_list|)
expr_stmt|;
block|}
DECL|method|doSnapshotContentsRemovalAssertions (Path filePath, Path fileSnapshotPath, Path subdirPath, Path subdirSnapshotPath)
specifier|private
specifier|static
name|void
name|doSnapshotContentsRemovalAssertions
parameter_list|(
name|Path
name|filePath
parameter_list|,
name|Path
name|fileSnapshotPath
parameter_list|,
name|Path
name|subdirPath
parameter_list|,
name|Path
name|subdirSnapshotPath
parameter_list|)
throws|throws
name|Exception
block|{
name|AclEntry
index|[]
name|expected
init|=
operator|new
name|AclEntry
index|[]
block|{ }
decl_stmt|;
name|AclStatus
name|s
init|=
name|hdfs
operator|.
name|getAclStatus
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
name|AclEntry
index|[]
name|returned
init|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
operator|(
name|short
operator|)
literal|0500
argument_list|,
name|filePath
argument_list|)
expr_stmt|;
name|assertFilePermissionDenied
argument_list|(
name|fsAsBruce
argument_list|,
name|BRUCE
argument_list|,
name|filePath
argument_list|)
expr_stmt|;
name|assertFilePermissionDenied
argument_list|(
name|fsAsDiana
argument_list|,
name|DIANA
argument_list|,
name|filePath
argument_list|)
expr_stmt|;
name|s
operator|=
name|hdfs
operator|.
name|getAclStatus
argument_list|(
name|subdirPath
argument_list|)
expr_stmt|;
name|returned
operator|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
operator|(
name|short
operator|)
literal|0500
argument_list|,
name|subdirPath
argument_list|)
expr_stmt|;
name|assertDirPermissionDenied
argument_list|(
name|fsAsBruce
argument_list|,
name|BRUCE
argument_list|,
name|subdirPath
argument_list|)
expr_stmt|;
name|assertDirPermissionDenied
argument_list|(
name|fsAsDiana
argument_list|,
name|DIANA
argument_list|,
name|subdirPath
argument_list|)
expr_stmt|;
name|expected
operator|=
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"bruce"
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|NONE
argument_list|)
block|}
expr_stmt|;
name|s
operator|=
name|hdfs
operator|.
name|getAclStatus
argument_list|(
name|fileSnapshotPath
argument_list|)
expr_stmt|;
name|returned
operator|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
operator|(
name|short
operator|)
literal|010550
argument_list|,
name|fileSnapshotPath
argument_list|)
expr_stmt|;
name|assertFilePermissionGranted
argument_list|(
name|fsAsBruce
argument_list|,
name|BRUCE
argument_list|,
name|fileSnapshotPath
argument_list|)
expr_stmt|;
name|assertFilePermissionDenied
argument_list|(
name|fsAsDiana
argument_list|,
name|DIANA
argument_list|,
name|fileSnapshotPath
argument_list|)
expr_stmt|;
name|s
operator|=
name|hdfs
operator|.
name|getAclStatus
argument_list|(
name|subdirSnapshotPath
argument_list|)
expr_stmt|;
name|returned
operator|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
operator|(
name|short
operator|)
literal|010550
argument_list|,
name|subdirSnapshotPath
argument_list|)
expr_stmt|;
name|assertDirPermissionGranted
argument_list|(
name|fsAsBruce
argument_list|,
name|BRUCE
argument_list|,
name|subdirSnapshotPath
argument_list|)
expr_stmt|;
name|assertDirPermissionDenied
argument_list|(
name|fsAsDiana
argument_list|,
name|DIANA
argument_list|,
name|subdirSnapshotPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testModifyReadsCurrentState ()
specifier|public
name|void
name|testModifyReadsCurrentState
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|hdfs
argument_list|,
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0700
argument_list|)
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|path
argument_list|,
name|snapshotName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"bruce"
argument_list|,
name|ALL
argument_list|)
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|modifyAclEntries
argument_list|(
name|path
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|aclSpec
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"diana"
argument_list|,
name|READ_EXECUTE
argument_list|)
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|modifyAclEntries
argument_list|(
name|path
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|AclEntry
index|[]
name|expected
init|=
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"bruce"
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"diana"
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|NONE
argument_list|)
block|}
decl_stmt|;
name|AclStatus
name|s
init|=
name|hdfs
operator|.
name|getAclStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|AclEntry
index|[]
name|returned
init|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
operator|(
name|short
operator|)
literal|010770
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|assertDirPermissionGranted
argument_list|(
name|fsAsBruce
argument_list|,
name|BRUCE
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|assertDirPermissionGranted
argument_list|(
name|fsAsDiana
argument_list|,
name|DIANA
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemoveReadsCurrentState ()
specifier|public
name|void
name|testRemoveReadsCurrentState
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|hdfs
argument_list|,
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0700
argument_list|)
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|path
argument_list|,
name|snapshotName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"bruce"
argument_list|,
name|ALL
argument_list|)
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|modifyAclEntries
argument_list|(
name|path
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|removeAcl
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|AclEntry
index|[]
name|expected
init|=
operator|new
name|AclEntry
index|[]
block|{ }
decl_stmt|;
name|AclStatus
name|s
init|=
name|hdfs
operator|.
name|getAclStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|AclEntry
index|[]
name|returned
init|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
operator|(
name|short
operator|)
literal|0700
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|assertDirPermissionDenied
argument_list|(
name|fsAsBruce
argument_list|,
name|BRUCE
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|assertDirPermissionDenied
argument_list|(
name|fsAsDiana
argument_list|,
name|DIANA
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefaultAclNotCopiedToAccessAclOfNewSnapshot ()
specifier|public
name|void
name|testDefaultAclNotCopiedToAccessAclOfNewSnapshot
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|hdfs
argument_list|,
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0700
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"bruce"
argument_list|,
name|READ_EXECUTE
argument_list|)
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|modifyAclEntries
argument_list|(
name|path
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|path
argument_list|,
name|snapshotName
argument_list|)
expr_stmt|;
name|AclStatus
name|s
init|=
name|hdfs
operator|.
name|getAclStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|AclEntry
index|[]
name|returned
init|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"bruce"
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|GROUP
argument_list|,
name|NONE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|MASK
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|OTHER
argument_list|,
name|NONE
argument_list|)
block|}
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
operator|(
name|short
operator|)
literal|010700
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|s
operator|=
name|hdfs
operator|.
name|getAclStatus
argument_list|(
name|snapshotPath
argument_list|)
expr_stmt|;
name|returned
operator|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"bruce"
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|GROUP
argument_list|,
name|NONE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|MASK
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|OTHER
argument_list|,
name|NONE
argument_list|)
block|}
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
operator|(
name|short
operator|)
literal|010700
argument_list|,
name|snapshotPath
argument_list|)
expr_stmt|;
name|assertDirPermissionDenied
argument_list|(
name|fsAsBruce
argument_list|,
name|BRUCE
argument_list|,
name|snapshotPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testModifyAclEntriesSnapshotPath ()
specifier|public
name|void
name|testModifyAclEntriesSnapshotPath
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|hdfs
argument_list|,
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0700
argument_list|)
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|path
argument_list|,
name|snapshotName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"bruce"
argument_list|,
name|READ_EXECUTE
argument_list|)
argument_list|)
decl_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|SnapshotAccessControlException
operator|.
name|class
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|modifyAclEntries
argument_list|(
name|snapshotPath
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemoveAclEntriesSnapshotPath ()
specifier|public
name|void
name|testRemoveAclEntriesSnapshotPath
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|hdfs
argument_list|,
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0700
argument_list|)
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|path
argument_list|,
name|snapshotName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"bruce"
argument_list|)
argument_list|)
decl_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|SnapshotAccessControlException
operator|.
name|class
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|removeAclEntries
argument_list|(
name|snapshotPath
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemoveDefaultAclSnapshotPath ()
specifier|public
name|void
name|testRemoveDefaultAclSnapshotPath
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|hdfs
argument_list|,
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0700
argument_list|)
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|path
argument_list|,
name|snapshotName
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|SnapshotAccessControlException
operator|.
name|class
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|removeDefaultAcl
argument_list|(
name|snapshotPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemoveAclSnapshotPath ()
specifier|public
name|void
name|testRemoveAclSnapshotPath
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|hdfs
argument_list|,
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0700
argument_list|)
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|path
argument_list|,
name|snapshotName
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|SnapshotAccessControlException
operator|.
name|class
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|removeAcl
argument_list|(
name|snapshotPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetAclSnapshotPath ()
specifier|public
name|void
name|testSetAclSnapshotPath
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|hdfs
argument_list|,
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0700
argument_list|)
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|path
argument_list|,
name|snapshotName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"bruce"
argument_list|)
argument_list|)
decl_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|SnapshotAccessControlException
operator|.
name|class
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|setAcl
argument_list|(
name|snapshotPath
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testChangeAclExceedsQuota ()
specifier|public
name|void
name|testChangeAclExceedsQuota
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
name|Path
name|fileSnapshotPath
init|=
operator|new
name|Path
argument_list|(
name|snapshotPath
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|hdfs
argument_list|,
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0755
argument_list|)
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|allowSnapshot
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|setQuota
argument_list|(
name|path
argument_list|,
literal|3
argument_list|,
name|HdfsConstants
operator|.
name|QUOTA_DONT_SET
argument_list|)
expr_stmt|;
name|FileSystem
operator|.
name|create
argument_list|(
name|hdfs
argument_list|,
name|filePath
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0600
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|hdfs
operator|.
name|setPermission
argument_list|(
name|filePath
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0600
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"bruce"
argument_list|,
name|READ_WRITE
argument_list|)
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|modifyAclEntries
argument_list|(
name|filePath
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|createSnapshot
argument_list|(
name|path
argument_list|,
name|snapshotName
argument_list|)
expr_stmt|;
name|AclStatus
name|s
init|=
name|hdfs
operator|.
name|getAclStatus
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
name|AclEntry
index|[]
name|returned
init|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"bruce"
argument_list|,
name|READ_WRITE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|NONE
argument_list|)
block|}
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
operator|(
name|short
operator|)
literal|010660
argument_list|,
name|filePath
argument_list|)
expr_stmt|;
name|s
operator|=
name|hdfs
operator|.
name|getAclStatus
argument_list|(
name|fileSnapshotPath
argument_list|)
expr_stmt|;
name|returned
operator|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"bruce"
argument_list|,
name|READ_WRITE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|NONE
argument_list|)
block|}
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
operator|(
name|short
operator|)
literal|010660
argument_list|,
name|filePath
argument_list|)
expr_stmt|;
name|aclSpec
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"bruce"
argument_list|,
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|NSQuotaExceededException
operator|.
name|class
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|modifyAclEntries
argument_list|(
name|filePath
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemoveAclExceedsQuota ()
specifier|public
name|void
name|testRemoveAclExceedsQuota
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
name|Path
name|fileSnapshotPath
init|=
operator|new
name|Path
argument_list|(
name|snapshotPath
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|hdfs
argument_list|,
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0755
argument_list|)
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|allowSnapshot
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|setQuota
argument_list|(
name|path
argument_list|,
literal|3
argument_list|,
name|HdfsConstants
operator|.
name|QUOTA_DONT_SET
argument_list|)
expr_stmt|;
name|FileSystem
operator|.
name|create
argument_list|(
name|hdfs
argument_list|,
name|filePath
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0600
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|hdfs
operator|.
name|setPermission
argument_list|(
name|filePath
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0600
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"bruce"
argument_list|,
name|READ_WRITE
argument_list|)
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|modifyAclEntries
argument_list|(
name|filePath
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|createSnapshot
argument_list|(
name|path
argument_list|,
name|snapshotName
argument_list|)
expr_stmt|;
name|AclStatus
name|s
init|=
name|hdfs
operator|.
name|getAclStatus
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
name|AclEntry
index|[]
name|returned
init|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"bruce"
argument_list|,
name|READ_WRITE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|NONE
argument_list|)
block|}
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
operator|(
name|short
operator|)
literal|010660
argument_list|,
name|filePath
argument_list|)
expr_stmt|;
name|s
operator|=
name|hdfs
operator|.
name|getAclStatus
argument_list|(
name|fileSnapshotPath
argument_list|)
expr_stmt|;
name|returned
operator|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"bruce"
argument_list|,
name|READ_WRITE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|NONE
argument_list|)
block|}
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
operator|(
name|short
operator|)
literal|010660
argument_list|,
name|filePath
argument_list|)
expr_stmt|;
name|aclSpec
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"bruce"
argument_list|,
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|NSQuotaExceededException
operator|.
name|class
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|removeAcl
argument_list|(
name|filePath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetAclStatusDotSnapshotPath ()
specifier|public
name|void
name|testGetAclStatusDotSnapshotPath
parameter_list|()
throws|throws
name|Exception
block|{
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|path
argument_list|,
name|snapshotName
argument_list|)
expr_stmt|;
name|AclStatus
name|s
init|=
name|hdfs
operator|.
name|getAclStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|".snapshot"
argument_list|)
argument_list|)
decl_stmt|;
name|AclEntry
index|[]
name|returned
init|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|AclEntry
index|[]
block|{ }
argument_list|,
name|returned
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeDuplication ()
specifier|public
name|void
name|testDeDuplication
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|startSize
init|=
name|AclStorage
operator|.
name|getUniqueAclFeatures
argument_list|()
operator|.
name|getUniqueElementsSize
argument_list|()
decl_stmt|;
comment|// unique default AclEntries for this test
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"testdeduplicateuser"
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
literal|"testdeduplicategroup"
argument_list|,
name|ALL
argument_list|)
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|modifyAclEntries
argument_list|(
name|path
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"One more ACL feature should be unique"
argument_list|,
name|startSize
operator|+
literal|1
argument_list|,
name|AclStorage
operator|.
name|getUniqueAclFeatures
argument_list|()
operator|.
name|getUniqueElementsSize
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|subdir
init|=
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"sub-dir"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|subdir
argument_list|)
expr_stmt|;
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|create
argument_list|(
name|file
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|AclFeature
name|aclFeature
decl_stmt|;
block|{
comment|// create the snapshot with root directory having ACLs should refer to
comment|// same ACLFeature without incrementing the reference count
name|aclFeature
operator|=
name|FSAclBaseTest
operator|.
name|getAclFeature
argument_list|(
name|path
argument_list|,
name|cluster
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Reference count should be one before snapshot"
argument_list|,
literal|1
argument_list|,
name|aclFeature
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|snapshotPath
init|=
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|path
argument_list|,
name|snapshotName
argument_list|)
decl_stmt|;
name|AclFeature
name|snapshotAclFeature
init|=
name|FSAclBaseTest
operator|.
name|getAclFeature
argument_list|(
name|snapshotPath
argument_list|,
name|cluster
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|aclFeature
argument_list|,
name|snapshotAclFeature
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Reference count should be increased"
argument_list|,
literal|2
argument_list|,
name|snapshotAclFeature
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
comment|// deleting the snapshot with root directory having ACLs should not alter
comment|// the reference count of the ACLFeature
name|deleteSnapshotWithAclAndVerify
argument_list|(
name|aclFeature
argument_list|,
name|path
argument_list|,
name|startSize
argument_list|)
expr_stmt|;
block|}
block|{
name|hdfs
operator|.
name|modifyAclEntries
argument_list|(
name|subdir
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|aclFeature
operator|=
name|FSAclBaseTest
operator|.
name|getAclFeature
argument_list|(
name|subdir
argument_list|,
name|cluster
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Reference count should be 1"
argument_list|,
literal|1
argument_list|,
name|aclFeature
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|snapshotPath
init|=
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|path
argument_list|,
name|snapshotName
argument_list|)
decl_stmt|;
name|Path
name|subdirInSnapshot
init|=
operator|new
name|Path
argument_list|(
name|snapshotPath
argument_list|,
literal|"sub-dir"
argument_list|)
decl_stmt|;
name|AclFeature
name|snapshotAcl
init|=
name|FSAclBaseTest
operator|.
name|getAclFeature
argument_list|(
name|subdirInSnapshot
argument_list|,
name|cluster
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|aclFeature
argument_list|,
name|snapshotAcl
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Reference count should remain same"
argument_list|,
literal|1
argument_list|,
name|aclFeature
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Delete the snapshot with sub-directory containing the ACLs should not
comment|// alter the reference count for AclFeature
name|deleteSnapshotWithAclAndVerify
argument_list|(
name|aclFeature
argument_list|,
name|subdir
argument_list|,
name|startSize
argument_list|)
expr_stmt|;
block|}
block|{
name|hdfs
operator|.
name|modifyAclEntries
argument_list|(
name|file
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|aclFeature
operator|=
name|FSAclBaseTest
operator|.
name|getAclFeature
argument_list|(
name|file
argument_list|,
name|cluster
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Reference count should be 1"
argument_list|,
literal|1
argument_list|,
name|aclFeature
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|snapshotPath
init|=
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|path
argument_list|,
name|snapshotName
argument_list|)
decl_stmt|;
name|Path
name|fileInSnapshot
init|=
operator|new
name|Path
argument_list|(
name|snapshotPath
argument_list|,
name|file
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|AclFeature
name|snapshotAcl
init|=
name|FSAclBaseTest
operator|.
name|getAclFeature
argument_list|(
name|fileInSnapshot
argument_list|,
name|cluster
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|aclFeature
argument_list|,
name|snapshotAcl
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Reference count should remain same"
argument_list|,
literal|1
argument_list|,
name|aclFeature
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Delete the snapshot with contained file having ACLs should not
comment|// alter the reference count for AclFeature
name|deleteSnapshotWithAclAndVerify
argument_list|(
name|aclFeature
argument_list|,
name|file
argument_list|,
name|startSize
argument_list|)
expr_stmt|;
block|}
block|{
comment|// Modifying the ACLs of root directory of the snapshot should refer new
comment|// AclFeature. And old AclFeature should be referenced by snapshot
name|hdfs
operator|.
name|modifyAclEntries
argument_list|(
name|path
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|Path
name|snapshotPath
init|=
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|path
argument_list|,
name|snapshotName
argument_list|)
decl_stmt|;
name|AclFeature
name|snapshotAcl
init|=
name|FSAclBaseTest
operator|.
name|getAclFeature
argument_list|(
name|snapshotPath
argument_list|,
name|cluster
argument_list|)
decl_stmt|;
name|aclFeature
operator|=
name|FSAclBaseTest
operator|.
name|getAclFeature
argument_list|(
name|path
argument_list|,
name|cluster
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Before modification same ACL should be referenced twice"
argument_list|,
literal|2
argument_list|,
name|aclFeature
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|newAcl
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"testNewUser"
argument_list|,
name|ALL
argument_list|)
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|modifyAclEntries
argument_list|(
name|path
argument_list|,
name|newAcl
argument_list|)
expr_stmt|;
name|aclFeature
operator|=
name|FSAclBaseTest
operator|.
name|getAclFeature
argument_list|(
name|path
argument_list|,
name|cluster
argument_list|)
expr_stmt|;
name|AclFeature
name|snapshotAclPostModification
init|=
name|FSAclBaseTest
operator|.
name|getAclFeature
argument_list|(
name|snapshotPath
argument_list|,
name|cluster
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|snapshotAcl
argument_list|,
name|snapshotAclPostModification
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|aclFeature
argument_list|,
name|snapshotAclPostModification
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Old ACL feature reference count should be same"
argument_list|,
literal|1
argument_list|,
name|snapshotAcl
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"New ACL feature reference should be used"
argument_list|,
literal|1
argument_list|,
name|aclFeature
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
name|deleteSnapshotWithAclAndVerify
argument_list|(
name|aclFeature
argument_list|,
name|path
argument_list|,
name|startSize
argument_list|)
expr_stmt|;
block|}
block|{
comment|// Modifying the ACLs of sub directory of the snapshot root should refer
comment|// new AclFeature. And old AclFeature should be referenced by snapshot
name|hdfs
operator|.
name|modifyAclEntries
argument_list|(
name|subdir
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|Path
name|snapshotPath
init|=
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|path
argument_list|,
name|snapshotName
argument_list|)
decl_stmt|;
name|Path
name|subdirInSnapshot
init|=
operator|new
name|Path
argument_list|(
name|snapshotPath
argument_list|,
literal|"sub-dir"
argument_list|)
decl_stmt|;
name|AclFeature
name|snapshotAclFeature
init|=
name|FSAclBaseTest
operator|.
name|getAclFeature
argument_list|(
name|subdirInSnapshot
argument_list|,
name|cluster
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|newAcl
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"testNewUser"
argument_list|,
name|ALL
argument_list|)
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|modifyAclEntries
argument_list|(
name|subdir
argument_list|,
name|newAcl
argument_list|)
expr_stmt|;
name|aclFeature
operator|=
name|FSAclBaseTest
operator|.
name|getAclFeature
argument_list|(
name|subdir
argument_list|,
name|cluster
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|aclFeature
argument_list|,
name|snapshotAclFeature
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Reference count should remain same"
argument_list|,
literal|1
argument_list|,
name|snapshotAclFeature
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"New AclFeature should be used"
argument_list|,
literal|1
argument_list|,
name|aclFeature
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
name|deleteSnapshotWithAclAndVerify
argument_list|(
name|aclFeature
argument_list|,
name|subdir
argument_list|,
name|startSize
argument_list|)
expr_stmt|;
block|}
block|{
comment|// Modifying the ACLs of file inside the snapshot root should refer new
comment|// AclFeature. And old AclFeature should be referenced by snapshot
name|hdfs
operator|.
name|modifyAclEntries
argument_list|(
name|file
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|Path
name|snapshotPath
init|=
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|path
argument_list|,
name|snapshotName
argument_list|)
decl_stmt|;
name|Path
name|fileInSnapshot
init|=
operator|new
name|Path
argument_list|(
name|snapshotPath
argument_list|,
name|file
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|AclFeature
name|snapshotAclFeature
init|=
name|FSAclBaseTest
operator|.
name|getAclFeature
argument_list|(
name|fileInSnapshot
argument_list|,
name|cluster
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|newAcl
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"testNewUser"
argument_list|,
name|ALL
argument_list|)
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|modifyAclEntries
argument_list|(
name|file
argument_list|,
name|newAcl
argument_list|)
expr_stmt|;
name|aclFeature
operator|=
name|FSAclBaseTest
operator|.
name|getAclFeature
argument_list|(
name|file
argument_list|,
name|cluster
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|aclFeature
argument_list|,
name|snapshotAclFeature
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Reference count should remain same"
argument_list|,
literal|1
argument_list|,
name|snapshotAclFeature
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
name|deleteSnapshotWithAclAndVerify
argument_list|(
name|aclFeature
argument_list|,
name|file
argument_list|,
name|startSize
argument_list|)
expr_stmt|;
block|}
block|{
comment|// deleting the original directory containing dirs and files with ACLs
comment|// with snapshot
name|hdfs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
name|subdir
argument_list|,
literal|"dir"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|modifyAclEntries
argument_list|(
name|dir
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|file
operator|=
operator|new
name|Path
argument_list|(
name|subdir
argument_list|,
literal|"file"
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|create
argument_list|(
name|file
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|aclSpec
operator|.
name|add
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"testNewUser"
argument_list|,
name|ALL
argument_list|)
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|modifyAclEntries
argument_list|(
name|file
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|AclFeature
name|fileAcl
init|=
name|FSAclBaseTest
operator|.
name|getAclFeature
argument_list|(
name|file
argument_list|,
name|cluster
argument_list|)
decl_stmt|;
name|AclFeature
name|dirAcl
init|=
name|FSAclBaseTest
operator|.
name|getAclFeature
argument_list|(
name|dir
argument_list|,
name|cluster
argument_list|)
decl_stmt|;
name|Path
name|snapshotPath
init|=
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|path
argument_list|,
name|snapshotName
argument_list|)
decl_stmt|;
name|Path
name|dirInSnapshot
init|=
operator|new
name|Path
argument_list|(
name|snapshotPath
argument_list|,
literal|"sub-dir/dir"
argument_list|)
decl_stmt|;
name|AclFeature
name|snapshotDirAclFeature
init|=
name|FSAclBaseTest
operator|.
name|getAclFeature
argument_list|(
name|dirInSnapshot
argument_list|,
name|cluster
argument_list|)
decl_stmt|;
name|Path
name|fileInSnapshot
init|=
operator|new
name|Path
argument_list|(
name|snapshotPath
argument_list|,
literal|"sub-dir/file"
argument_list|)
decl_stmt|;
name|AclFeature
name|snapshotFileAclFeature
init|=
name|FSAclBaseTest
operator|.
name|getAclFeature
argument_list|(
name|fileInSnapshot
argument_list|,
name|cluster
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|fileAcl
argument_list|,
name|snapshotFileAclFeature
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|dirAcl
argument_list|,
name|snapshotDirAclFeature
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|delete
argument_list|(
name|subdir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Original ACLs references should be maintained for snapshot"
argument_list|,
literal|1
argument_list|,
name|snapshotFileAclFeature
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Original ACLs references should be maintained for snapshot"
argument_list|,
literal|1
argument_list|,
name|snapshotDirAclFeature
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|deleteSnapshot
argument_list|(
name|path
argument_list|,
name|snapshotName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ACLs should be deleted from snapshot"
argument_list|,
name|startSize
argument_list|,
name|AclStorage
operator|.
name|getUniqueAclFeatures
argument_list|()
operator|.
name|getUniqueElementsSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|deleteSnapshotWithAclAndVerify (AclFeature aclFeature, Path pathToCheckAcl, int totalAclFeatures)
specifier|private
name|void
name|deleteSnapshotWithAclAndVerify
parameter_list|(
name|AclFeature
name|aclFeature
parameter_list|,
name|Path
name|pathToCheckAcl
parameter_list|,
name|int
name|totalAclFeatures
parameter_list|)
throws|throws
name|IOException
block|{
name|hdfs
operator|.
name|deleteSnapshot
argument_list|(
name|path
argument_list|,
name|snapshotName
argument_list|)
expr_stmt|;
name|AclFeature
name|afterDeleteAclFeature
init|=
name|FSAclBaseTest
operator|.
name|getAclFeature
argument_list|(
name|pathToCheckAcl
argument_list|,
name|cluster
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|aclFeature
argument_list|,
name|afterDeleteAclFeature
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Reference count should remain same"
operator|+
literal|" even after deletion of snapshot"
argument_list|,
literal|1
argument_list|,
name|afterDeleteAclFeature
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|removeAcl
argument_list|(
name|pathToCheckAcl
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Reference count should be 0"
argument_list|,
literal|0
argument_list|,
name|aclFeature
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unique ACL features should remain same"
argument_list|,
name|totalAclFeatures
argument_list|,
name|AclStorage
operator|.
name|getUniqueAclFeatures
argument_list|()
operator|.
name|getUniqueElementsSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Asserts that permission is denied to the given fs/user for the given    * directory.    *    * @param fs FileSystem to check    * @param user UserGroupInformation owner of fs    * @param pathToCheck Path directory to check    * @throws Exception if there is an unexpected error    */
DECL|method|assertDirPermissionDenied (FileSystem fs, UserGroupInformation user, Path pathToCheck)
specifier|private
specifier|static
name|void
name|assertDirPermissionDenied
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|UserGroupInformation
name|user
parameter_list|,
name|Path
name|pathToCheck
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|fs
operator|.
name|listStatus
argument_list|(
name|pathToCheck
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected AccessControlException for user "
operator|+
name|user
operator|+
literal|", path = "
operator|+
name|pathToCheck
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|fs
operator|.
name|access
argument_list|(
name|pathToCheck
argument_list|,
name|FsAction
operator|.
name|READ
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"The access call should have failed for "
operator|+
name|pathToCheck
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
comment|/**    * Asserts that permission is granted to the given fs/user for the given    * directory.    *    * @param fs FileSystem to check    * @param user UserGroupInformation owner of fs    * @param pathToCheck Path directory to check    * @throws Exception if there is an unexpected error    */
DECL|method|assertDirPermissionGranted (FileSystem fs, UserGroupInformation user, Path pathToCheck)
specifier|private
specifier|static
name|void
name|assertDirPermissionGranted
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|UserGroupInformation
name|user
parameter_list|,
name|Path
name|pathToCheck
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|fs
operator|.
name|listStatus
argument_list|(
name|pathToCheck
argument_list|)
expr_stmt|;
name|fs
operator|.
name|access
argument_list|(
name|pathToCheck
argument_list|,
name|FsAction
operator|.
name|READ
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"expected permission granted for user "
operator|+
name|user
operator|+
literal|", path = "
operator|+
name|pathToCheck
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Asserts the value of the FsPermission bits on the inode of the test path.    *    * @param perm short expected permission bits    * @param pathToCheck Path to check    * @throws Exception thrown if there is an unexpected error    */
DECL|method|assertPermission (short perm, Path pathToCheck)
specifier|private
specifier|static
name|void
name|assertPermission
parameter_list|(
name|short
name|perm
parameter_list|,
name|Path
name|pathToCheck
parameter_list|)
throws|throws
name|Exception
block|{
name|AclTestHelpers
operator|.
name|assertPermission
argument_list|(
name|hdfs
argument_list|,
name|pathToCheck
argument_list|,
name|perm
argument_list|)
expr_stmt|;
block|}
comment|/**    * Initialize the cluster, wait for it to become active, and get FileSystem    * instances for our test users.    *    * @param format if true, format the NameNode and DataNodes before starting up    * @throws Exception if any step fails    */
DECL|method|initCluster (boolean format)
specifier|private
specifier|static
name|void
name|initCluster
parameter_list|(
name|boolean
name|format
parameter_list|)
throws|throws
name|Exception
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|format
argument_list|(
name|format
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|hdfs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|fsAsBruce
operator|=
name|DFSTestUtil
operator|.
name|getFileSystemAs
argument_list|(
name|BRUCE
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|fsAsDiana
operator|=
name|DFSTestUtil
operator|.
name|getFileSystemAs
argument_list|(
name|DIANA
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Restart the cluster, optionally saving a new checkpoint.    *    * @param checkpoint boolean true to save a new checkpoint    * @throws Exception if restart fails    */
DECL|method|restart (boolean checkpoint)
specifier|private
specifier|static
name|void
name|restart
parameter_list|(
name|boolean
name|checkpoint
parameter_list|)
throws|throws
name|Exception
block|{
name|NameNode
name|nameNode
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|checkpoint
condition|)
block|{
name|NameNodeAdapter
operator|.
name|enterSafeMode
argument_list|(
name|nameNode
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|NameNodeAdapter
operator|.
name|saveNamespace
argument_list|(
name|nameNode
argument_list|)
expr_stmt|;
block|}
name|shutdown
argument_list|()
expr_stmt|;
name|initCluster
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

