begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.scm.node
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|scm
operator|.
name|node
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|SCMTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|commands
operator|.
name|SCMCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|ReportState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|SCMNodeReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|SCMStorageReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|scm
operator|.
name|container
operator|.
name|placement
operator|.
name|metrics
operator|.
name|SCMNodeStat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|ScmConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|SECONDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneProtos
operator|.
name|NodeState
operator|.
name|DEAD
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneProtos
operator|.
name|NodeState
operator|.
name|HEALTHY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneProtos
operator|.
name|NodeState
operator|.
name|STALE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|Type
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|OZONE_SCM_DEADNODE_INTERVAL_MS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|OZONE_SCM_HEARTBEAT_INTERVAL_SECONDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|OZONE_SCM_HEARTBEAT_PROCESS_INTERVAL_MS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|OZONE_SCM_MAX_HB_COUNT_TO_PROCESS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|OZONE_SCM_STALENODE_INTERVAL_MS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|StringStartsWith
operator|.
name|startsWith
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Test the Node Manager class.  */
end_comment

begin_class
DECL|class|TestNodeManager
specifier|public
class|class
name|TestNodeManager
block|{
DECL|field|testDir
specifier|private
name|File
name|testDir
decl_stmt|;
DECL|field|reportState
specifier|private
name|ReportState
name|reportState
init|=
name|ReportState
operator|.
name|newBuilder
argument_list|()
operator|.
name|setState
argument_list|(
name|ReportState
operator|.
name|states
operator|.
name|noContainerReports
argument_list|)
operator|.
name|setCount
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
annotation|@
name|Rule
DECL|field|thrown
specifier|public
name|ExpectedException
name|thrown
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|init ()
specifier|public
specifier|static
name|void
name|init
parameter_list|()
throws|throws
name|IOException
block|{   }
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|testDir
operator|=
name|PathUtils
operator|.
name|getTestDir
argument_list|(
name|TestNodeManager
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|cleanup ()
specifier|public
name|void
name|cleanup
parameter_list|()
block|{
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|testDir
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns a new copy of Configuration.    *    * @return Config    */
DECL|method|getConf ()
name|OzoneConfiguration
name|getConf
parameter_list|()
block|{
name|OzoneConfiguration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_METADATA_DIRS
argument_list|,
name|testDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|OZONE_SCM_HEARTBEAT_PROCESS_INTERVAL_MS
argument_list|,
literal|100
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
comment|/**    * Creates a NodeManager.    *    * @param config - Config for the node manager.    * @return SCNNodeManager    * @throws IOException    */
DECL|method|createNodeManager (OzoneConfiguration config)
name|SCMNodeManager
name|createNodeManager
parameter_list|(
name|OzoneConfiguration
name|config
parameter_list|)
throws|throws
name|IOException
block|{
name|SCMNodeManager
name|nodeManager
init|=
operator|new
name|SCMNodeManager
argument_list|(
name|config
argument_list|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Node manager should be in chill mode"
argument_list|,
name|nodeManager
operator|.
name|isOutOfChillMode
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|nodeManager
return|;
block|}
comment|/**    * Tests that Node manager handles heartbeats correctly, and comes out of    * chill Mode.    *    * @throws IOException    * @throws InterruptedException    * @throws TimeoutException    */
annotation|@
name|Test
DECL|method|testScmHeartbeat ()
specifier|public
name|void
name|testScmHeartbeat
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|TimeoutException
block|{
try|try
init|(
name|SCMNodeManager
name|nodeManager
init|=
name|createNodeManager
argument_list|(
name|getConf
argument_list|()
argument_list|)
init|)
block|{
comment|// Send some heartbeats from different nodes.
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|nodeManager
operator|.
name|getMinimumChillModeNodes
argument_list|()
condition|;
name|x
operator|++
control|)
block|{
name|DatanodeID
name|datanodeID
init|=
name|SCMTestUtils
operator|.
name|getDatanodeID
argument_list|(
name|nodeManager
argument_list|)
decl_stmt|;
name|nodeManager
operator|.
name|sendHeartbeat
argument_list|(
name|datanodeID
argument_list|,
literal|null
argument_list|,
name|reportState
argument_list|)
expr_stmt|;
block|}
comment|// Wait for 4 seconds max.
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
name|nodeManager
operator|.
name|waitForHeartbeatProcessed
argument_list|()
argument_list|,
literal|100
argument_list|,
literal|4
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Heartbeat thread should have picked up the"
operator|+
literal|"scheduled heartbeats and transitioned out of chill mode."
argument_list|,
name|nodeManager
operator|.
name|isOutOfChillMode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * asserts that if we send no heartbeats node manager stays in chillmode.    *    * @throws IOException    * @throws InterruptedException    * @throws TimeoutException    */
annotation|@
name|Test
DECL|method|testScmNoHeartbeats ()
specifier|public
name|void
name|testScmNoHeartbeats
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|TimeoutException
block|{
try|try
init|(
name|SCMNodeManager
name|nodeManager
init|=
name|createNodeManager
argument_list|(
name|getConf
argument_list|()
argument_list|)
init|)
block|{
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
name|nodeManager
operator|.
name|waitForHeartbeatProcessed
argument_list|()
argument_list|,
literal|100
argument_list|,
literal|4
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"No heartbeats, Node manager should have been in"
operator|+
literal|" chill mode."
argument_list|,
name|nodeManager
operator|.
name|isOutOfChillMode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Asserts that if we don't get enough unique nodes we stay in chillmode.    *    * @throws IOException    * @throws InterruptedException    * @throws TimeoutException    */
annotation|@
name|Test
DECL|method|testScmNotEnoughHeartbeats ()
specifier|public
name|void
name|testScmNotEnoughHeartbeats
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|TimeoutException
block|{
try|try
init|(
name|SCMNodeManager
name|nodeManager
init|=
name|createNodeManager
argument_list|(
name|getConf
argument_list|()
argument_list|)
init|)
block|{
comment|// Need 100 nodes to come out of chill mode, only one node is sending HB.
name|nodeManager
operator|.
name|setMinimumChillModeNodes
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|nodeManager
operator|.
name|sendHeartbeat
argument_list|(
name|SCMTestUtils
operator|.
name|getDatanodeID
argument_list|(
name|nodeManager
argument_list|)
argument_list|,
literal|null
argument_list|,
name|reportState
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
name|nodeManager
operator|.
name|waitForHeartbeatProcessed
argument_list|()
argument_list|,
literal|100
argument_list|,
literal|4
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Not enough heartbeat, Node manager should have"
operator|+
literal|"been in chillmode."
argument_list|,
name|nodeManager
operator|.
name|isOutOfChillMode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Asserts that many heartbeat from the same node is counted as a single    * node.    *    * @throws IOException    * @throws InterruptedException    * @throws TimeoutException    */
annotation|@
name|Test
DECL|method|testScmSameNodeHeartbeats ()
specifier|public
name|void
name|testScmSameNodeHeartbeats
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|TimeoutException
block|{
try|try
init|(
name|SCMNodeManager
name|nodeManager
init|=
name|createNodeManager
argument_list|(
name|getConf
argument_list|()
argument_list|)
init|)
block|{
name|nodeManager
operator|.
name|setMinimumChillModeNodes
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|DatanodeID
name|datanodeID
init|=
name|SCMTestUtils
operator|.
name|getDatanodeID
argument_list|(
name|nodeManager
argument_list|)
decl_stmt|;
comment|// Send 10 heartbeat from same node, and assert we never leave chill mode.
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
literal|10
condition|;
name|x
operator|++
control|)
block|{
name|nodeManager
operator|.
name|sendHeartbeat
argument_list|(
name|datanodeID
argument_list|,
literal|null
argument_list|,
name|reportState
argument_list|)
expr_stmt|;
block|}
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
name|nodeManager
operator|.
name|waitForHeartbeatProcessed
argument_list|()
argument_list|,
literal|100
argument_list|,
literal|4
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Not enough nodes have send heartbeat to node"
operator|+
literal|"manager."
argument_list|,
name|nodeManager
operator|.
name|isOutOfChillMode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Asserts that adding heartbeats after shutdown does not work. This implies    * that heartbeat thread has been shutdown safely by closing the node    * manager.    *    * @throws IOException    * @throws InterruptedException    * @throws TimeoutException    */
annotation|@
name|Test
DECL|method|testScmShutdown ()
specifier|public
name|void
name|testScmShutdown
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|TimeoutException
block|{
name|OzoneConfiguration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_HEARTBEAT_PROCESS_INTERVAL_MS
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|SCMNodeManager
name|nodeManager
init|=
name|createNodeManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|DatanodeID
name|datanodeID
init|=
name|SCMTestUtils
operator|.
name|getDatanodeID
argument_list|(
name|nodeManager
argument_list|)
decl_stmt|;
name|nodeManager
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// These should never be processed.
name|nodeManager
operator|.
name|sendHeartbeat
argument_list|(
name|datanodeID
argument_list|,
literal|null
argument_list|,
name|reportState
argument_list|)
expr_stmt|;
comment|// Let us just wait for 2 seconds to prove that HBs are not processed.
name|Thread
operator|.
name|sleep
argument_list|(
literal|2
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Assert new HBs were never processed"
argument_list|,
literal|0
argument_list|,
name|nodeManager
operator|.
name|getLastHBProcessedCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Asserts scm informs datanodes to re-register with the nodemanager    * on a restart.    *    * @throws Exception    */
annotation|@
name|Test
DECL|method|testScmHeartbeatAfterRestart ()
specifier|public
name|void
name|testScmHeartbeatAfterRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|OzoneConfiguration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_HEARTBEAT_PROCESS_INTERVAL_MS
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|DatanodeID
name|datanodeID
init|=
name|SCMTestUtils
operator|.
name|getDatanodeID
argument_list|()
decl_stmt|;
try|try
init|(
name|SCMNodeManager
name|nodemanager
init|=
name|createNodeManager
argument_list|(
name|conf
argument_list|)
init|)
block|{
name|nodemanager
operator|.
name|register
argument_list|(
name|datanodeID
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SCMCommand
argument_list|>
name|command
init|=
name|nodemanager
operator|.
name|sendHeartbeat
argument_list|(
name|datanodeID
argument_list|,
literal|null
argument_list|,
name|reportState
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|nodemanager
operator|.
name|getAllNodes
argument_list|()
operator|.
name|contains
argument_list|(
name|datanodeID
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"On regular HB calls, SCM responses a "
operator|+
literal|"datanode with an empty command list"
argument_list|,
name|command
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Sends heartbeat without registering to SCM.
comment|// This happens when SCM restarts.
try|try
init|(
name|SCMNodeManager
name|nodemanager
init|=
name|createNodeManager
argument_list|(
name|conf
argument_list|)
init|)
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
name|nodemanager
operator|.
name|getAllNodes
argument_list|()
operator|.
name|contains
argument_list|(
name|datanodeID
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
comment|// SCM handles heartbeat asynchronously.
comment|// It may need more than one heartbeat processing to
comment|// send the notification.
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
name|List
argument_list|<
name|SCMCommand
argument_list|>
name|command
init|=
name|nodemanager
operator|.
name|sendHeartbeat
argument_list|(
name|datanodeID
argument_list|,
literal|null
argument_list|,
name|reportState
argument_list|)
decl_stmt|;
return|return
name|command
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|command
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|Type
operator|.
name|reregisterCommand
argument_list|)
return|;
block|}
block|}
argument_list|,
literal|100
argument_list|,
literal|3
operator|*
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Times out to verify that scm informs "
operator|+
literal|"datanode to re-register itself."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Asserts that we detect as many healthy nodes as we have generated heartbeat    * for.    *    * @throws IOException    * @throws InterruptedException    * @throws TimeoutException    */
annotation|@
name|Test
DECL|method|testScmHealthyNodeCount ()
specifier|public
name|void
name|testScmHealthyNodeCount
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|TimeoutException
block|{
name|OzoneConfiguration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
specifier|final
name|int
name|count
init|=
literal|10
decl_stmt|;
try|try
init|(
name|SCMNodeManager
name|nodeManager
init|=
name|createNodeManager
argument_list|(
name|conf
argument_list|)
init|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|count
condition|;
name|x
operator|++
control|)
block|{
name|DatanodeID
name|datanodeID
init|=
name|SCMTestUtils
operator|.
name|getDatanodeID
argument_list|(
name|nodeManager
argument_list|)
decl_stmt|;
name|nodeManager
operator|.
name|sendHeartbeat
argument_list|(
name|datanodeID
argument_list|,
literal|null
argument_list|,
name|reportState
argument_list|)
expr_stmt|;
block|}
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
name|nodeManager
operator|.
name|waitForHeartbeatProcessed
argument_list|()
argument_list|,
literal|100
argument_list|,
literal|4
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|count
argument_list|,
name|nodeManager
operator|.
name|getNodeCount
argument_list|(
name|HEALTHY
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Asserts that if user provides a value less than 5 times the heartbeat    * interval as the StaleNode Value, we throw since that is a QoS that we    * cannot maintain.    *    * @throws IOException    * @throws InterruptedException    * @throws TimeoutException    */
annotation|@
name|Test
DECL|method|testScmSanityOfUserConfig1 ()
specifier|public
name|void
name|testScmSanityOfUserConfig1
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|TimeoutException
block|{
name|OzoneConfiguration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
specifier|final
name|int
name|interval
init|=
literal|100
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|OZONE_SCM_HEARTBEAT_PROCESS_INTERVAL_MS
argument_list|,
name|interval
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|OZONE_SCM_HEARTBEAT_INTERVAL_SECONDS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// This should be 5 times more than  OZONE_SCM_HEARTBEAT_PROCESS_INTERVAL_MS
comment|// and 3 times more than OZONE_SCM_HEARTBEAT_INTERVAL_SECONDS
name|conf
operator|.
name|setInt
argument_list|(
name|OZONE_SCM_STALENODE_INTERVAL_MS
argument_list|,
name|interval
argument_list|)
expr_stmt|;
name|thrown
operator|.
name|expect
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// This string is a multiple of the interval value
name|thrown
operator|.
name|expectMessage
argument_list|(
name|startsWith
argument_list|(
literal|"100 is not within min = 500 or max = 100000"
argument_list|)
argument_list|)
expr_stmt|;
name|createNodeManager
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Asserts that if Stale Interval value is more than 5 times the value of HB    * processing thread it is a sane value.    *    * @throws IOException    * @throws InterruptedException    * @throws TimeoutException    */
annotation|@
name|Test
DECL|method|testScmSanityOfUserConfig2 ()
specifier|public
name|void
name|testScmSanityOfUserConfig2
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|TimeoutException
block|{
name|OzoneConfiguration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
specifier|final
name|int
name|interval
init|=
literal|100
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|OZONE_SCM_HEARTBEAT_PROCESS_INTERVAL_MS
argument_list|,
name|interval
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|OZONE_SCM_HEARTBEAT_INTERVAL_SECONDS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// This should be 5 times more than  OZONE_SCM_HEARTBEAT_PROCESS_INTERVAL_MS
comment|// and 3 times more than OZONE_SCM_HEARTBEAT_INTERVAL_SECONDS
name|conf
operator|.
name|setInt
argument_list|(
name|OZONE_SCM_STALENODE_INTERVAL_MS
argument_list|,
literal|3
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|createNodeManager
argument_list|(
name|conf
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Asserts that a single node moves from Healthy to stale node, then from    * stale node to dead node if it misses enough heartbeats.    *    * @throws IOException    * @throws InterruptedException    * @throws TimeoutException    */
annotation|@
name|Test
DECL|method|testScmDetectStaleAndDeadNode ()
specifier|public
name|void
name|testScmDetectStaleAndDeadNode
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|TimeoutException
block|{
specifier|final
name|int
name|interval
init|=
literal|100
decl_stmt|;
specifier|final
name|int
name|nodeCount
init|=
literal|10
decl_stmt|;
name|OzoneConfiguration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|OZONE_SCM_HEARTBEAT_PROCESS_INTERVAL_MS
argument_list|,
name|interval
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setTimeDuration
argument_list|(
name|OZONE_SCM_HEARTBEAT_INTERVAL_SECONDS
argument_list|,
literal|1
argument_list|,
name|SECONDS
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|OZONE_SCM_STALENODE_INTERVAL_MS
argument_list|,
literal|3
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|OZONE_SCM_DEADNODE_INTERVAL_MS
argument_list|,
literal|6
operator|*
literal|1000
argument_list|)
expr_stmt|;
try|try
init|(
name|SCMNodeManager
name|nodeManager
init|=
name|createNodeManager
argument_list|(
name|conf
argument_list|)
init|)
block|{
name|List
argument_list|<
name|DatanodeID
argument_list|>
name|nodeList
init|=
name|createNodeSet
argument_list|(
name|nodeManager
argument_list|,
name|nodeCount
argument_list|,
literal|"Node"
argument_list|)
decl_stmt|;
name|DatanodeID
name|staleNode
init|=
name|SCMTestUtils
operator|.
name|getDatanodeID
argument_list|(
name|nodeManager
argument_list|)
decl_stmt|;
comment|// Heartbeat once
name|nodeManager
operator|.
name|sendHeartbeat
argument_list|(
name|staleNode
argument_list|,
literal|null
argument_list|,
name|reportState
argument_list|)
expr_stmt|;
comment|// Heartbeat all other nodes.
for|for
control|(
name|DatanodeID
name|dn
range|:
name|nodeList
control|)
block|{
name|nodeManager
operator|.
name|sendHeartbeat
argument_list|(
name|dn
argument_list|,
literal|null
argument_list|,
name|reportState
argument_list|)
expr_stmt|;
block|}
comment|// Wait for 2 seconds .. and heartbeat good nodes again.
name|Thread
operator|.
name|sleep
argument_list|(
literal|2
operator|*
literal|1000
argument_list|)
expr_stmt|;
for|for
control|(
name|DatanodeID
name|dn
range|:
name|nodeList
control|)
block|{
name|nodeManager
operator|.
name|sendHeartbeat
argument_list|(
name|dn
argument_list|,
literal|null
argument_list|,
name|reportState
argument_list|)
expr_stmt|;
block|}
comment|// Wait for 2 seconds, wait a total of 4 seconds to make sure that the
comment|// node moves into stale state.
name|Thread
operator|.
name|sleep
argument_list|(
literal|2
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|DatanodeID
argument_list|>
name|staleNodeList
init|=
name|nodeManager
operator|.
name|getNodes
argument_list|(
name|STALE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Expected to find 1 stale node"
argument_list|,
literal|1
argument_list|,
name|nodeManager
operator|.
name|getNodeCount
argument_list|(
name|STALE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected to find 1 stale node"
argument_list|,
literal|1
argument_list|,
name|staleNodeList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Stale node is not the expected ID"
argument_list|,
name|staleNode
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
name|staleNodeList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|// heartbeat good nodes again.
for|for
control|(
name|DatanodeID
name|dn
range|:
name|nodeList
control|)
block|{
name|nodeManager
operator|.
name|sendHeartbeat
argument_list|(
name|dn
argument_list|,
literal|null
argument_list|,
name|reportState
argument_list|)
expr_stmt|;
block|}
comment|//  6 seconds is the dead window for this test , so we wait a total of
comment|// 7 seconds to make sure that the node moves into dead state.
name|Thread
operator|.
name|sleep
argument_list|(
literal|2
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// the stale node has been removed
name|staleNodeList
operator|=
name|nodeManager
operator|.
name|getNodes
argument_list|(
name|STALE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected to find 1 stale node"
argument_list|,
literal|0
argument_list|,
name|nodeManager
operator|.
name|getNodeCount
argument_list|(
name|STALE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected to find 1 stale node"
argument_list|,
literal|0
argument_list|,
name|staleNodeList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check for the dead node now.
name|List
argument_list|<
name|DatanodeID
argument_list|>
name|deadNodeList
init|=
name|nodeManager
operator|.
name|getNodes
argument_list|(
name|DEAD
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Expected to find 1 dead node"
argument_list|,
literal|1
argument_list|,
name|nodeManager
operator|.
name|getNodeCount
argument_list|(
name|DEAD
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected to find 1 dead node"
argument_list|,
literal|1
argument_list|,
name|deadNodeList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Dead node is not the expected ID"
argument_list|,
name|staleNode
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
name|deadNodeList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Asserts that we log an error for null in datanode ID.    *    * @throws IOException    * @throws InterruptedException    * @throws TimeoutException    */
annotation|@
name|Test
DECL|method|testScmLogErrorOnNullDatanode ()
specifier|public
name|void
name|testScmLogErrorOnNullDatanode
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|TimeoutException
block|{
try|try
init|(
name|SCMNodeManager
name|nodeManager
init|=
name|createNodeManager
argument_list|(
name|getConf
argument_list|()
argument_list|)
init|)
block|{
name|GenericTestUtils
operator|.
name|LogCapturer
name|logCapturer
init|=
name|GenericTestUtils
operator|.
name|LogCapturer
operator|.
name|captureLogs
argument_list|(
name|SCMNodeManager
operator|.
name|LOG
argument_list|)
decl_stmt|;
name|nodeManager
operator|.
name|sendHeartbeat
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|reportState
argument_list|)
expr_stmt|;
name|logCapturer
operator|.
name|stopCapturing
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|logCapturer
operator|.
name|getOutput
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Datanode ID in heartbeat is null"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Asserts that a dead node, stale node and healthy nodes co-exist. The counts    * , lists and node ID match the expected node state.    *<p/>    * This test is pretty complicated because it explores all states of Node    * manager in a single test. Please read thru the comments to get an idea of    * the current state of the node Manager.    *<p/>    * This test is written like a state machine to avoid threads and concurrency    * issues. This test is replicated below with the use of threads. Avoiding    * threads make it easy to debug the state machine.    *    * @throws IOException    * @throws InterruptedException    * @throws TimeoutException    */
annotation|@
name|Test
DECL|method|testScmClusterIsInExpectedState1 ()
specifier|public
name|void
name|testScmClusterIsInExpectedState1
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|TimeoutException
block|{
comment|/**      * These values are very important. Here is what it means so you don't      * have to look it up while reading this code.      *      *  OZONE_SCM_HEARTBEAT_PROCESS_INTERVAL_MS - This the frequency of the      *  HB processing thread that is running in the SCM. This thread must run      *  for the SCM  to process the Heartbeats.      *      *  OZONE_SCM_HEARTBEAT_INTERVAL_SECONDS - This is the frequency at which      *  datanodes will send heartbeats to SCM. Please note: This is the only      *  config value for node manager that is specified in seconds. We don't      *  want SCM heartbeat resolution to be more than in seconds.      *  In this test it is not used, but we are forced to set it because we      *  have validation code that checks Stale Node interval and Dead Node      *  interval is larger than the value of      *  OZONE_SCM_HEARTBEAT_INTERVAL_SECONDS.      *      *  OZONE_SCM_STALENODE_INTERVAL_MS - This is the time that must elapse      *  from the last heartbeat for us to mark a node as stale. In this test      *  we set that to 3. That is if a node has not heartbeat SCM for last 3      *  seconds we will mark it as stale.      *      *  OZONE_SCM_DEADNODE_INTERVAL_MS - This is the time that must elapse      *  from the last heartbeat for a node to be marked dead. We have an      *  additional constraint that this must be at least 2 times bigger than      *  Stale node Interval.      *      *  With these we are trying to explore the state of this cluster with      *  various timeouts. Each section is commented so that you can keep      *  track of the state of the cluster nodes.      *      */
name|OzoneConfiguration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|OZONE_SCM_HEARTBEAT_PROCESS_INTERVAL_MS
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setTimeDuration
argument_list|(
name|OZONE_SCM_HEARTBEAT_INTERVAL_SECONDS
argument_list|,
literal|1
argument_list|,
name|SECONDS
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|OZONE_SCM_STALENODE_INTERVAL_MS
argument_list|,
literal|3
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|OZONE_SCM_DEADNODE_INTERVAL_MS
argument_list|,
literal|6
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|/**      * Cluster state: Healthy: All nodes are heartbeat-ing like normal.      */
try|try
init|(
name|SCMNodeManager
name|nodeManager
init|=
name|createNodeManager
argument_list|(
name|conf
argument_list|)
init|)
block|{
name|DatanodeID
name|healthyNode
init|=
name|SCMTestUtils
operator|.
name|getDatanodeID
argument_list|(
name|nodeManager
argument_list|,
literal|"HealthyNode"
argument_list|)
decl_stmt|;
name|DatanodeID
name|staleNode
init|=
name|SCMTestUtils
operator|.
name|getDatanodeID
argument_list|(
name|nodeManager
argument_list|,
literal|"StaleNode"
argument_list|)
decl_stmt|;
name|DatanodeID
name|deadNode
init|=
name|SCMTestUtils
operator|.
name|getDatanodeID
argument_list|(
name|nodeManager
argument_list|,
literal|"DeadNode"
argument_list|)
decl_stmt|;
name|nodeManager
operator|.
name|sendHeartbeat
argument_list|(
name|healthyNode
argument_list|,
literal|null
argument_list|,
name|reportState
argument_list|)
expr_stmt|;
name|nodeManager
operator|.
name|sendHeartbeat
argument_list|(
name|staleNode
argument_list|,
literal|null
argument_list|,
name|reportState
argument_list|)
expr_stmt|;
name|nodeManager
operator|.
name|sendHeartbeat
argument_list|(
name|deadNode
argument_list|,
literal|null
argument_list|,
name|reportState
argument_list|)
expr_stmt|;
comment|// Sleep so that heartbeat processing thread gets to run.
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
comment|//Assert all nodes are healthy.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|nodeManager
operator|.
name|getAllNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|nodeManager
operator|.
name|getNodeCount
argument_list|(
name|HEALTHY
argument_list|)
argument_list|)
expr_stmt|;
comment|/**        * Cluster state: Quiesced: We are going to sleep for 3 seconds. Which        * means that no node is heartbeating. All nodes should move to Stale.        */
name|Thread
operator|.
name|sleep
argument_list|(
literal|3
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|nodeManager
operator|.
name|getAllNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|nodeManager
operator|.
name|getNodeCount
argument_list|(
name|STALE
argument_list|)
argument_list|)
expr_stmt|;
comment|/**        * Cluster State : Move healthy node back to healthy state, move other 2        * nodes to Stale State.        *        * We heartbeat healthy node after 1 second and let other 2 nodes elapse        * the 3 second windows.        */
name|nodeManager
operator|.
name|sendHeartbeat
argument_list|(
name|healthyNode
argument_list|,
literal|null
argument_list|,
name|reportState
argument_list|)
expr_stmt|;
name|nodeManager
operator|.
name|sendHeartbeat
argument_list|(
name|staleNode
argument_list|,
literal|null
argument_list|,
name|reportState
argument_list|)
expr_stmt|;
name|nodeManager
operator|.
name|sendHeartbeat
argument_list|(
name|deadNode
argument_list|,
literal|null
argument_list|,
name|reportState
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1500
argument_list|)
expr_stmt|;
name|nodeManager
operator|.
name|sendHeartbeat
argument_list|(
name|healthyNode
argument_list|,
literal|null
argument_list|,
name|reportState
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|nodeManager
operator|.
name|getNodeCount
argument_list|(
name|HEALTHY
argument_list|)
argument_list|)
expr_stmt|;
comment|// 3.5 seconds from last heartbeat for the stale and deadNode. So those
comment|//  2 nodes must move to Stale state and the healthy node must
comment|// remain in the healthy State.
name|List
argument_list|<
name|DatanodeID
argument_list|>
name|healthyList
init|=
name|nodeManager
operator|.
name|getNodes
argument_list|(
name|HEALTHY
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Expected one healthy node"
argument_list|,
literal|1
argument_list|,
name|healthyList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Healthy node is not the expected ID"
argument_list|,
name|healthyNode
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
name|healthyList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|nodeManager
operator|.
name|getNodeCount
argument_list|(
name|STALE
argument_list|)
argument_list|)
expr_stmt|;
comment|/**        * Cluster State: Allow healthyNode to remain in healthy state and        * staleNode to move to stale state and deadNode to move to dead state.        */
name|nodeManager
operator|.
name|sendHeartbeat
argument_list|(
name|healthyNode
argument_list|,
literal|null
argument_list|,
name|reportState
argument_list|)
expr_stmt|;
name|nodeManager
operator|.
name|sendHeartbeat
argument_list|(
name|staleNode
argument_list|,
literal|null
argument_list|,
name|reportState
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1500
argument_list|)
expr_stmt|;
name|nodeManager
operator|.
name|sendHeartbeat
argument_list|(
name|healthyNode
argument_list|,
literal|null
argument_list|,
name|reportState
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// 3.5 seconds have elapsed for stale node, so it moves into Stale.
comment|// 7 seconds have elapsed for dead node, so it moves into dead.
comment|// 2 Seconds have elapsed for healthy node, so it stays in healhty state.
name|healthyList
operator|=
name|nodeManager
operator|.
name|getNodes
argument_list|(
name|HEALTHY
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|DatanodeID
argument_list|>
name|staleList
init|=
name|nodeManager
operator|.
name|getNodes
argument_list|(
name|STALE
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DatanodeID
argument_list|>
name|deadList
init|=
name|nodeManager
operator|.
name|getNodes
argument_list|(
name|DEAD
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|nodeManager
operator|.
name|getAllNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|nodeManager
operator|.
name|getNodeCount
argument_list|(
name|HEALTHY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|nodeManager
operator|.
name|getNodeCount
argument_list|(
name|STALE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|nodeManager
operator|.
name|getNodeCount
argument_list|(
name|DEAD
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected one healthy node"
argument_list|,
literal|1
argument_list|,
name|healthyList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Healthy node is not the expected ID"
argument_list|,
name|healthyNode
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
name|healthyList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected one stale node"
argument_list|,
literal|1
argument_list|,
name|staleList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Stale node is not the expected ID"
argument_list|,
name|staleNode
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
name|staleList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected one dead node"
argument_list|,
literal|1
argument_list|,
name|deadList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Dead node is not the expected ID"
argument_list|,
name|deadNode
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
name|deadList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
expr_stmt|;
comment|/**        * Cluster State : let us heartbeat all the nodes and verify that we get        * back all the nodes in healthy state.        */
name|nodeManager
operator|.
name|sendHeartbeat
argument_list|(
name|healthyNode
argument_list|,
literal|null
argument_list|,
name|reportState
argument_list|)
expr_stmt|;
name|nodeManager
operator|.
name|sendHeartbeat
argument_list|(
name|staleNode
argument_list|,
literal|null
argument_list|,
name|reportState
argument_list|)
expr_stmt|;
name|nodeManager
operator|.
name|sendHeartbeat
argument_list|(
name|deadNode
argument_list|,
literal|null
argument_list|,
name|reportState
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
comment|//Assert all nodes are healthy.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|nodeManager
operator|.
name|getAllNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|nodeManager
operator|.
name|getNodeCount
argument_list|(
name|HEALTHY
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Heartbeat a given set of nodes at a specified frequency.    *    * @param manager       - Node Manager    * @param list          - List of datanodeIDs    * @param sleepDuration - Duration to sleep between heartbeats.    * @throws InterruptedException    */
DECL|method|heartbeatNodeSet (SCMNodeManager manager, List<DatanodeID> list, int sleepDuration)
specifier|private
name|void
name|heartbeatNodeSet
parameter_list|(
name|SCMNodeManager
name|manager
parameter_list|,
name|List
argument_list|<
name|DatanodeID
argument_list|>
name|list
parameter_list|,
name|int
name|sleepDuration
parameter_list|)
throws|throws
name|InterruptedException
block|{
while|while
condition|(
operator|!
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|isInterrupted
argument_list|()
condition|)
block|{
for|for
control|(
name|DatanodeID
name|dn
range|:
name|list
control|)
block|{
name|manager
operator|.
name|sendHeartbeat
argument_list|(
name|dn
argument_list|,
literal|null
argument_list|,
name|reportState
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepDuration
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Create a set of Nodes with a given prefix.    *    * @param count  - number of nodes.    * @param prefix - A prefix string that can be used in verification.    * @return List of Nodes.    */
DECL|method|createNodeSet (SCMNodeManager nodeManager, int count, String prefix)
specifier|private
name|List
argument_list|<
name|DatanodeID
argument_list|>
name|createNodeSet
parameter_list|(
name|SCMNodeManager
name|nodeManager
parameter_list|,
name|int
name|count
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|List
argument_list|<
name|DatanodeID
argument_list|>
name|list
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|count
condition|;
name|x
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|SCMTestUtils
operator|.
name|getDatanodeID
argument_list|(
name|nodeManager
argument_list|,
name|prefix
operator|+
name|x
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
comment|/**    * Function that tells us if we found the right number of stale nodes.    *    * @param nodeManager - node manager    * @param count       - number of stale nodes to look for.    * @return true if we found the expected number.    */
DECL|method|findNodes (NodeManager nodeManager, int count, OzoneProtos.NodeState state)
specifier|private
name|boolean
name|findNodes
parameter_list|(
name|NodeManager
name|nodeManager
parameter_list|,
name|int
name|count
parameter_list|,
name|OzoneProtos
operator|.
name|NodeState
name|state
parameter_list|)
block|{
return|return
name|count
operator|==
name|nodeManager
operator|.
name|getNodeCount
argument_list|(
name|state
argument_list|)
return|;
block|}
comment|/**    * Asserts that we can create a set of nodes that send its heartbeats from    * different threads and NodeManager behaves as expected.    *    * @throws IOException    * @throws InterruptedException    */
annotation|@
name|Test
DECL|method|testScmClusterIsInExpectedState2 ()
specifier|public
name|void
name|testScmClusterIsInExpectedState2
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|TimeoutException
block|{
specifier|final
name|int
name|healthyCount
init|=
literal|5000
decl_stmt|;
specifier|final
name|int
name|staleCount
init|=
literal|100
decl_stmt|;
specifier|final
name|int
name|deadCount
init|=
literal|10
decl_stmt|;
name|OzoneConfiguration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|OZONE_SCM_HEARTBEAT_PROCESS_INTERVAL_MS
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setTimeDuration
argument_list|(
name|OZONE_SCM_HEARTBEAT_INTERVAL_SECONDS
argument_list|,
literal|1
argument_list|,
name|SECONDS
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|OZONE_SCM_STALENODE_INTERVAL_MS
argument_list|,
literal|3
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|OZONE_SCM_DEADNODE_INTERVAL_MS
argument_list|,
literal|6
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|OZONE_SCM_MAX_HB_COUNT_TO_PROCESS
argument_list|,
literal|7000
argument_list|)
expr_stmt|;
try|try
init|(
name|SCMNodeManager
name|nodeManager
init|=
name|createNodeManager
argument_list|(
name|conf
argument_list|)
init|)
block|{
name|List
argument_list|<
name|DatanodeID
argument_list|>
name|healthyNodeList
init|=
name|createNodeSet
argument_list|(
name|nodeManager
argument_list|,
name|healthyCount
argument_list|,
literal|"Healthy"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DatanodeID
argument_list|>
name|staleNodeList
init|=
name|createNodeSet
argument_list|(
name|nodeManager
argument_list|,
name|staleCount
argument_list|,
literal|"Stale"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DatanodeID
argument_list|>
name|deadNodeList
init|=
name|createNodeSet
argument_list|(
name|nodeManager
argument_list|,
name|deadCount
argument_list|,
literal|"Dead"
argument_list|)
decl_stmt|;
name|Runnable
name|healthyNodeTask
init|=
parameter_list|()
lambda|->
block|{
try|try
block|{
comment|// 2 second heartbeat makes these nodes stay healthy.
name|heartbeatNodeSet
argument_list|(
name|nodeManager
argument_list|,
name|healthyNodeList
argument_list|,
literal|2
operator|*
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignored
parameter_list|)
block|{         }
block|}
decl_stmt|;
name|Runnable
name|staleNodeTask
init|=
parameter_list|()
lambda|->
block|{
try|try
block|{
comment|// 4 second heartbeat makes these nodes go to stale and back to
comment|// healthy again.
name|heartbeatNodeSet
argument_list|(
name|nodeManager
argument_list|,
name|staleNodeList
argument_list|,
literal|4
operator|*
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignored
parameter_list|)
block|{         }
block|}
decl_stmt|;
comment|// No Thread just one time HBs the node manager, so that these will be
comment|// marked as dead nodes eventually.
for|for
control|(
name|DatanodeID
name|dn
range|:
name|deadNodeList
control|)
block|{
name|nodeManager
operator|.
name|sendHeartbeat
argument_list|(
name|dn
argument_list|,
literal|null
argument_list|,
name|reportState
argument_list|)
expr_stmt|;
block|}
name|Thread
name|thread1
init|=
operator|new
name|Thread
argument_list|(
name|healthyNodeTask
argument_list|)
decl_stmt|;
name|thread1
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|thread1
operator|.
name|start
argument_list|()
expr_stmt|;
name|Thread
name|thread2
init|=
operator|new
name|Thread
argument_list|(
name|staleNodeTask
argument_list|)
decl_stmt|;
name|thread2
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|thread2
operator|.
name|start
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// Assert all healthy nodes are healthy now, this has to be a greater
comment|// than check since Stale nodes can be healthy when we check the state.
name|assertTrue
argument_list|(
name|nodeManager
operator|.
name|getNodeCount
argument_list|(
name|HEALTHY
argument_list|)
operator|>=
name|healthyCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|deadCount
argument_list|,
name|nodeManager
operator|.
name|getNodeCount
argument_list|(
name|DEAD
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|DatanodeID
argument_list|>
name|deadList
init|=
name|nodeManager
operator|.
name|getNodes
argument_list|(
name|DEAD
argument_list|)
decl_stmt|;
for|for
control|(
name|DatanodeID
name|node
range|:
name|deadList
control|)
block|{
name|assertThat
argument_list|(
name|node
operator|.
name|getHostName
argument_list|()
argument_list|,
name|CoreMatchers
operator|.
name|startsWith
argument_list|(
literal|"Dead"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Checking stale nodes is tricky since they have to move between
comment|// healthy and stale to avoid becoming dead nodes. So we search for
comment|// that state for a while, if we don't find that state waitfor will
comment|// throw.
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
name|findNodes
argument_list|(
name|nodeManager
argument_list|,
name|staleCount
argument_list|,
name|STALE
argument_list|)
argument_list|,
literal|500
argument_list|,
literal|4
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|thread1
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|thread2
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Asserts that we can handle 6000+ nodes heartbeating SCM.    *    * @throws IOException    * @throws InterruptedException    * @throws TimeoutException    */
annotation|@
name|Test
DECL|method|testScmCanHandleScale ()
specifier|public
name|void
name|testScmCanHandleScale
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|TimeoutException
block|{
specifier|final
name|int
name|healthyCount
init|=
literal|3000
decl_stmt|;
specifier|final
name|int
name|staleCount
init|=
literal|3000
decl_stmt|;
name|OzoneConfiguration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|OZONE_SCM_HEARTBEAT_PROCESS_INTERVAL_MS
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setTimeDuration
argument_list|(
name|OZONE_SCM_HEARTBEAT_INTERVAL_SECONDS
argument_list|,
literal|1
argument_list|,
name|SECONDS
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|OZONE_SCM_STALENODE_INTERVAL_MS
argument_list|,
literal|3
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|OZONE_SCM_DEADNODE_INTERVAL_MS
argument_list|,
literal|6
operator|*
literal|1000
argument_list|)
expr_stmt|;
try|try
init|(
name|SCMNodeManager
name|nodeManager
init|=
name|createNodeManager
argument_list|(
name|conf
argument_list|)
init|)
block|{
name|List
argument_list|<
name|DatanodeID
argument_list|>
name|healthyList
init|=
name|createNodeSet
argument_list|(
name|nodeManager
argument_list|,
name|healthyCount
argument_list|,
literal|"h"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DatanodeID
argument_list|>
name|staleList
init|=
name|createNodeSet
argument_list|(
name|nodeManager
argument_list|,
name|staleCount
argument_list|,
literal|"s"
argument_list|)
decl_stmt|;
name|Runnable
name|healthyNodeTask
init|=
parameter_list|()
lambda|->
block|{
try|try
block|{
name|heartbeatNodeSet
argument_list|(
name|nodeManager
argument_list|,
name|healthyList
argument_list|,
literal|2
operator|*
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignored
parameter_list|)
block|{          }
block|}
decl_stmt|;
name|Runnable
name|staleNodeTask
init|=
parameter_list|()
lambda|->
block|{
try|try
block|{
name|heartbeatNodeSet
argument_list|(
name|nodeManager
argument_list|,
name|staleList
argument_list|,
literal|4
operator|*
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignored
parameter_list|)
block|{         }
block|}
decl_stmt|;
name|Thread
name|thread1
init|=
operator|new
name|Thread
argument_list|(
name|healthyNodeTask
argument_list|)
decl_stmt|;
name|thread1
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|thread1
operator|.
name|start
argument_list|()
expr_stmt|;
name|Thread
name|thread2
init|=
operator|new
name|Thread
argument_list|(
name|staleNodeTask
argument_list|)
decl_stmt|;
name|thread2
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|thread2
operator|.
name|start
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|3
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
name|findNodes
argument_list|(
name|nodeManager
argument_list|,
name|staleCount
argument_list|,
name|STALE
argument_list|)
argument_list|,
literal|500
argument_list|,
literal|20
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Node count mismatch"
argument_list|,
name|healthyCount
operator|+
name|staleCount
argument_list|,
name|nodeManager
operator|.
name|getAllNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|thread1
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|thread2
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Asserts that SCM backs off from HB processing instead of going into an    * infinite loop if SCM is flooded with too many heartbeats. This many not be    * the best thing to do, but SCM tries to protect itself and logs an error    * saying that it is getting flooded with heartbeats. In real world this can    * lead to many nodes becoming stale or dead due to the fact that SCM is not    * able to keep up with heartbeat processing. This test just verifies that SCM    * will log that information.    * @throws TimeoutException    */
annotation|@
name|Test
DECL|method|testScmLogsHeartbeatFlooding ()
specifier|public
name|void
name|testScmLogsHeartbeatFlooding
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|TimeoutException
block|{
specifier|final
name|int
name|healthyCount
init|=
literal|3000
decl_stmt|;
comment|// Make the HB process thread run slower.
name|OzoneConfiguration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|OZONE_SCM_HEARTBEAT_PROCESS_INTERVAL_MS
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setTimeDuration
argument_list|(
name|OZONE_SCM_HEARTBEAT_INTERVAL_SECONDS
argument_list|,
literal|1
argument_list|,
name|SECONDS
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|OZONE_SCM_MAX_HB_COUNT_TO_PROCESS
argument_list|,
literal|500
argument_list|)
expr_stmt|;
try|try
init|(
name|SCMNodeManager
name|nodeManager
init|=
name|createNodeManager
argument_list|(
name|conf
argument_list|)
init|)
block|{
name|List
argument_list|<
name|DatanodeID
argument_list|>
name|healthyList
init|=
name|createNodeSet
argument_list|(
name|nodeManager
argument_list|,
name|healthyCount
argument_list|,
literal|"h"
argument_list|)
decl_stmt|;
name|GenericTestUtils
operator|.
name|LogCapturer
name|logCapturer
init|=
name|GenericTestUtils
operator|.
name|LogCapturer
operator|.
name|captureLogs
argument_list|(
name|SCMNodeManager
operator|.
name|LOG
argument_list|)
decl_stmt|;
name|Runnable
name|healthyNodeTask
init|=
parameter_list|()
lambda|->
block|{
try|try
block|{
comment|// No wait in the HB sending loop.
name|heartbeatNodeSet
argument_list|(
name|nodeManager
argument_list|,
name|healthyList
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignored
parameter_list|)
block|{         }
block|}
decl_stmt|;
name|Thread
name|thread1
init|=
operator|new
name|Thread
argument_list|(
name|healthyNodeTask
argument_list|)
decl_stmt|;
name|thread1
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|thread1
operator|.
name|start
argument_list|()
expr_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
name|logCapturer
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"SCM is being "
operator|+
literal|"flooded by heartbeats. Not able to keep up"
operator|+
literal|" with the heartbeat counts."
argument_list|)
argument_list|,
literal|500
argument_list|,
literal|20
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|thread1
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|logCapturer
operator|.
name|stopCapturing
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testScmEnterAndExitChillMode ()
specifier|public
name|void
name|testScmEnterAndExitChillMode
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|OzoneConfiguration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|OZONE_SCM_HEARTBEAT_PROCESS_INTERVAL_MS
argument_list|,
literal|100
argument_list|)
expr_stmt|;
try|try
init|(
name|SCMNodeManager
name|nodeManager
init|=
name|createNodeManager
argument_list|(
name|conf
argument_list|)
init|)
block|{
name|nodeManager
operator|.
name|setMinimumChillModeNodes
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|DatanodeID
name|datanodeID
init|=
name|SCMTestUtils
operator|.
name|getDatanodeID
argument_list|(
name|nodeManager
argument_list|)
decl_stmt|;
name|nodeManager
operator|.
name|sendHeartbeat
argument_list|(
name|datanodeID
argument_list|,
literal|null
argument_list|,
name|reportState
argument_list|)
expr_stmt|;
name|String
name|status
init|=
name|nodeManager
operator|.
name|getChillModeStatus
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertThat
argument_list|(
name|status
argument_list|,
name|CoreMatchers
operator|.
name|containsString
argument_list|(
literal|"Still in chill "
operator|+
literal|"mode, waiting on nodes to report in."
argument_list|)
argument_list|)
expr_stmt|;
comment|// Should not exit chill mode since 10 nodes have not heartbeat yet.
name|assertFalse
argument_list|(
name|nodeManager
operator|.
name|isOutOfChillMode
argument_list|()
argument_list|)
expr_stmt|;
comment|// Force exit chill mode.
name|nodeManager
operator|.
name|forceExitChillMode
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|nodeManager
operator|.
name|isOutOfChillMode
argument_list|()
argument_list|)
expr_stmt|;
name|status
operator|=
name|nodeManager
operator|.
name|getChillModeStatus
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertThat
argument_list|(
name|status
argument_list|,
name|CoreMatchers
operator|.
name|containsString
argument_list|(
literal|"Out of chill mode."
argument_list|)
argument_list|)
expr_stmt|;
comment|// Enter back to into chill mode.
name|nodeManager
operator|.
name|enterChillMode
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|nodeManager
operator|.
name|isOutOfChillMode
argument_list|()
argument_list|)
expr_stmt|;
name|status
operator|=
name|nodeManager
operator|.
name|getChillModeStatus
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertThat
argument_list|(
name|status
argument_list|,
name|CoreMatchers
operator|.
name|containsString
argument_list|(
literal|"Out of startup chill mode,"
operator|+
literal|" but in manual chill mode."
argument_list|)
argument_list|)
expr_stmt|;
comment|// Assert that node manager force enter cannot be overridden by nodes HBs.
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
literal|20
condition|;
name|x
operator|++
control|)
block|{
name|DatanodeID
name|datanode
init|=
name|SCMTestUtils
operator|.
name|getDatanodeID
argument_list|(
name|nodeManager
argument_list|)
decl_stmt|;
name|nodeManager
operator|.
name|sendHeartbeat
argument_list|(
name|datanode
argument_list|,
literal|null
argument_list|,
name|reportState
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|nodeManager
operator|.
name|isOutOfChillMode
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make sure that once we exit out of manual chill mode, we fall back
comment|// to the number of nodes to get out chill mode.
name|nodeManager
operator|.
name|exitChillMode
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|nodeManager
operator|.
name|isOutOfChillMode
argument_list|()
argument_list|)
expr_stmt|;
name|status
operator|=
name|nodeManager
operator|.
name|getChillModeStatus
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertThat
argument_list|(
name|status
argument_list|,
name|CoreMatchers
operator|.
name|containsString
argument_list|(
literal|"Out of chill mode."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test multiple nodes sending initial heartbeat with their node report.    *    * @throws IOException    * @throws InterruptedException    * @throws TimeoutException    */
annotation|@
name|Test
DECL|method|testScmStatsFromNodeReport ()
specifier|public
name|void
name|testScmStatsFromNodeReport
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|TimeoutException
block|{
name|OzoneConfiguration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|OZONE_SCM_HEARTBEAT_PROCESS_INTERVAL_MS
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
specifier|final
name|int
name|nodeCount
init|=
literal|10
decl_stmt|;
specifier|final
name|long
name|capacity
init|=
literal|2000
decl_stmt|;
specifier|final
name|long
name|used
init|=
literal|100
decl_stmt|;
specifier|final
name|long
name|remaining
init|=
name|capacity
operator|-
name|used
decl_stmt|;
try|try
init|(
name|SCMNodeManager
name|nodeManager
init|=
name|createNodeManager
argument_list|(
name|conf
argument_list|)
init|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|nodeCount
condition|;
name|x
operator|++
control|)
block|{
name|DatanodeID
name|datanodeID
init|=
name|SCMTestUtils
operator|.
name|getDatanodeID
argument_list|(
name|nodeManager
argument_list|)
decl_stmt|;
name|SCMNodeReport
operator|.
name|Builder
name|nrb
init|=
name|SCMNodeReport
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|SCMStorageReport
operator|.
name|Builder
name|srb
init|=
name|SCMStorageReport
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|srb
operator|.
name|setStorageUuid
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|srb
operator|.
name|setCapacity
argument_list|(
name|capacity
argument_list|)
operator|.
name|setScmUsed
argument_list|(
name|used
argument_list|)
operator|.
name|setRemaining
argument_list|(
name|capacity
operator|-
name|used
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|nodeManager
operator|.
name|sendHeartbeat
argument_list|(
name|datanodeID
argument_list|,
name|nrb
operator|.
name|addStorageReport
argument_list|(
name|srb
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|reportState
argument_list|)
expr_stmt|;
block|}
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
name|nodeManager
operator|.
name|waitForHeartbeatProcessed
argument_list|()
argument_list|,
literal|100
argument_list|,
literal|4
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|nodeCount
argument_list|,
name|nodeManager
operator|.
name|getNodeCount
argument_list|(
name|HEALTHY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|capacity
operator|*
name|nodeCount
argument_list|,
operator|(
name|long
operator|)
name|nodeManager
operator|.
name|getStats
argument_list|()
operator|.
name|getCapacity
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|used
operator|*
name|nodeCount
argument_list|,
operator|(
name|long
operator|)
name|nodeManager
operator|.
name|getStats
argument_list|()
operator|.
name|getScmUsed
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|remaining
operator|*
name|nodeCount
argument_list|,
operator|(
name|long
operator|)
name|nodeManager
operator|.
name|getStats
argument_list|()
operator|.
name|getRemaining
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test single node stat update based on nodereport from different heartbeat    * status (healthy, stale and dead).    * @throws IOException    * @throws InterruptedException    * @throws TimeoutException    */
annotation|@
name|Test
DECL|method|testScmNodeReportUpdate ()
specifier|public
name|void
name|testScmNodeReportUpdate
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|TimeoutException
block|{
name|OzoneConfiguration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
specifier|final
name|int
name|heartbeatCount
init|=
literal|5
decl_stmt|;
specifier|final
name|int
name|nodeCount
init|=
literal|1
decl_stmt|;
specifier|final
name|int
name|interval
init|=
literal|100
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|OZONE_SCM_HEARTBEAT_PROCESS_INTERVAL_MS
argument_list|,
name|interval
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setTimeDuration
argument_list|(
name|OZONE_SCM_HEARTBEAT_INTERVAL_SECONDS
argument_list|,
literal|1
argument_list|,
name|SECONDS
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|OZONE_SCM_STALENODE_INTERVAL_MS
argument_list|,
literal|3
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|OZONE_SCM_DEADNODE_INTERVAL_MS
argument_list|,
literal|6
operator|*
literal|1000
argument_list|)
expr_stmt|;
try|try
init|(
name|SCMNodeManager
name|nodeManager
init|=
name|createNodeManager
argument_list|(
name|conf
argument_list|)
init|)
block|{
name|DatanodeID
name|datanodeID
init|=
name|SCMTestUtils
operator|.
name|getDatanodeID
argument_list|(
name|nodeManager
argument_list|)
decl_stmt|;
specifier|final
name|long
name|capacity
init|=
literal|2000
decl_stmt|;
specifier|final
name|long
name|usedPerHeartbeat
init|=
literal|100
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|heartbeatCount
condition|;
name|x
operator|++
control|)
block|{
name|SCMNodeReport
operator|.
name|Builder
name|nrb
init|=
name|SCMNodeReport
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|SCMStorageReport
operator|.
name|Builder
name|srb
init|=
name|SCMStorageReport
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|srb
operator|.
name|setStorageUuid
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|srb
operator|.
name|setCapacity
argument_list|(
name|capacity
argument_list|)
operator|.
name|setScmUsed
argument_list|(
name|x
operator|*
name|usedPerHeartbeat
argument_list|)
operator|.
name|setRemaining
argument_list|(
name|capacity
operator|-
name|x
operator|*
name|usedPerHeartbeat
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|nrb
operator|.
name|addStorageReport
argument_list|(
name|srb
argument_list|)
expr_stmt|;
name|nodeManager
operator|.
name|sendHeartbeat
argument_list|(
name|datanodeID
argument_list|,
name|nrb
operator|.
name|build
argument_list|()
argument_list|,
name|reportState
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
specifier|final
name|long
name|expectedScmUsed
init|=
name|usedPerHeartbeat
operator|*
operator|(
name|heartbeatCount
operator|-
literal|1
operator|)
decl_stmt|;
specifier|final
name|long
name|expectedRemaining
init|=
name|capacity
operator|-
name|expectedScmUsed
decl_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
name|nodeManager
operator|.
name|getStats
argument_list|()
operator|.
name|getScmUsed
argument_list|()
operator|.
name|get
argument_list|()
operator|==
name|expectedScmUsed
argument_list|,
literal|100
argument_list|,
literal|4
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|long
name|foundCapacity
init|=
name|nodeManager
operator|.
name|getStats
argument_list|()
operator|.
name|getCapacity
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|capacity
argument_list|,
name|foundCapacity
argument_list|)
expr_stmt|;
name|long
name|foundScmUsed
init|=
name|nodeManager
operator|.
name|getStats
argument_list|()
operator|.
name|getScmUsed
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedScmUsed
argument_list|,
name|foundScmUsed
argument_list|)
expr_stmt|;
name|long
name|foundRemaining
init|=
name|nodeManager
operator|.
name|getStats
argument_list|()
operator|.
name|getRemaining
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedRemaining
argument_list|,
name|foundRemaining
argument_list|)
expr_stmt|;
comment|// Test NodeManager#getNodeStats
name|assertEquals
argument_list|(
name|nodeCount
argument_list|,
name|nodeManager
operator|.
name|getNodeStats
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|nodeCapacity
init|=
name|nodeManager
operator|.
name|getNodeStat
argument_list|(
name|datanodeID
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getCapacity
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|capacity
argument_list|,
name|nodeCapacity
argument_list|)
expr_stmt|;
name|foundScmUsed
operator|=
name|nodeManager
operator|.
name|getNodeStat
argument_list|(
name|datanodeID
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getScmUsed
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedScmUsed
argument_list|,
name|foundScmUsed
argument_list|)
expr_stmt|;
name|foundRemaining
operator|=
name|nodeManager
operator|.
name|getNodeStat
argument_list|(
name|datanodeID
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getRemaining
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedRemaining
argument_list|,
name|foundRemaining
argument_list|)
expr_stmt|;
comment|// Compare the result from
comment|// NodeManager#getNodeStats and NodeManager#getNodeStat
name|SCMNodeStat
name|stat1
init|=
name|nodeManager
operator|.
name|getNodeStats
argument_list|()
operator|.
name|get
argument_list|(
name|datanodeID
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
decl_stmt|;
name|SCMNodeStat
name|stat2
init|=
name|nodeManager
operator|.
name|getNodeStat
argument_list|(
name|datanodeID
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|stat1
argument_list|,
name|stat2
argument_list|)
expr_stmt|;
comment|// Wait up to 4s so that the node becomes stale
comment|// Verify the usage info should be unchanged.
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
name|nodeManager
operator|.
name|getNodeCount
argument_list|(
name|STALE
argument_list|)
operator|==
literal|1
argument_list|,
literal|100
argument_list|,
literal|4
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|nodeCount
argument_list|,
name|nodeManager
operator|.
name|getNodeStats
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|foundCapacity
operator|=
name|nodeManager
operator|.
name|getNodeStat
argument_list|(
name|datanodeID
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getCapacity
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|capacity
argument_list|,
name|foundCapacity
argument_list|)
expr_stmt|;
name|foundScmUsed
operator|=
name|nodeManager
operator|.
name|getNodeStat
argument_list|(
name|datanodeID
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getScmUsed
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedScmUsed
argument_list|,
name|foundScmUsed
argument_list|)
expr_stmt|;
name|foundRemaining
operator|=
name|nodeManager
operator|.
name|getNodeStat
argument_list|(
name|datanodeID
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getRemaining
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedRemaining
argument_list|,
name|foundRemaining
argument_list|)
expr_stmt|;
comment|// Wait up to 4 more seconds so the node becomes dead
comment|// Verify usage info should be updated.
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
name|nodeManager
operator|.
name|getNodeCount
argument_list|(
name|DEAD
argument_list|)
operator|==
literal|1
argument_list|,
literal|100
argument_list|,
literal|4
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|nodeManager
operator|.
name|getNodeStats
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|foundCapacity
operator|=
name|nodeManager
operator|.
name|getStats
argument_list|()
operator|.
name|getCapacity
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|foundCapacity
argument_list|)
expr_stmt|;
name|foundScmUsed
operator|=
name|nodeManager
operator|.
name|getStats
argument_list|()
operator|.
name|getScmUsed
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|foundScmUsed
argument_list|)
expr_stmt|;
name|foundRemaining
operator|=
name|nodeManager
operator|.
name|getStats
argument_list|()
operator|.
name|getRemaining
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|foundRemaining
argument_list|)
expr_stmt|;
comment|// Send a new report to bring the dead node back to healthy
name|SCMNodeReport
operator|.
name|Builder
name|nrb
init|=
name|SCMNodeReport
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|SCMStorageReport
operator|.
name|Builder
name|srb
init|=
name|SCMStorageReport
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|srb
operator|.
name|setStorageUuid
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|srb
operator|.
name|setCapacity
argument_list|(
name|capacity
argument_list|)
operator|.
name|setScmUsed
argument_list|(
name|expectedScmUsed
argument_list|)
operator|.
name|setRemaining
argument_list|(
name|expectedRemaining
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|nrb
operator|.
name|addStorageReport
argument_list|(
name|srb
argument_list|)
expr_stmt|;
name|nodeManager
operator|.
name|sendHeartbeat
argument_list|(
name|datanodeID
argument_list|,
name|nrb
operator|.
name|build
argument_list|()
argument_list|,
name|reportState
argument_list|)
expr_stmt|;
comment|// Wait up to 5 seconds so that the dead node becomes healthy
comment|// Verify usage info should be updated.
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
name|nodeManager
operator|.
name|getNodeCount
argument_list|(
name|HEALTHY
argument_list|)
operator|==
literal|1
argument_list|,
literal|100
argument_list|,
literal|5
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
name|nodeManager
operator|.
name|getStats
argument_list|()
operator|.
name|getScmUsed
argument_list|()
operator|.
name|get
argument_list|()
operator|==
name|expectedScmUsed
argument_list|,
literal|100
argument_list|,
literal|4
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|nodeCount
argument_list|,
name|nodeManager
operator|.
name|getNodeStats
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|foundCapacity
operator|=
name|nodeManager
operator|.
name|getNodeStat
argument_list|(
name|datanodeID
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getCapacity
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|capacity
argument_list|,
name|foundCapacity
argument_list|)
expr_stmt|;
name|foundScmUsed
operator|=
name|nodeManager
operator|.
name|getNodeStat
argument_list|(
name|datanodeID
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getScmUsed
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedScmUsed
argument_list|,
name|foundScmUsed
argument_list|)
expr_stmt|;
name|foundRemaining
operator|=
name|nodeManager
operator|.
name|getNodeStat
argument_list|(
name|datanodeID
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getRemaining
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedRemaining
argument_list|,
name|foundRemaining
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

