begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.protocol
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doAnswer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|BlockListAsLongs
operator|.
name|BlockReportReplica
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DatanodeProtocolProtos
operator|.
name|BlockReportRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DatanodeProtocolProtos
operator|.
name|BlockReportResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|DatanodeProtocolClientSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|DatanodeProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|ReplicaState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|FinalizedReplica
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|Replica
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|ReplicaBeingWritten
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|ReplicaWaitingToBeRecovered
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|BlockReportContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamespaceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamespaceInfo
operator|.
name|Capability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|StorageBlockReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcController
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_class
DECL|class|TestBlockListAsLongs
specifier|public
class|class
name|TestBlockListAsLongs
block|{
DECL|field|b1
specifier|static
name|Block
name|b1
init|=
operator|new
name|Block
argument_list|(
literal|1
argument_list|,
literal|11
argument_list|,
literal|111
argument_list|)
decl_stmt|;
DECL|field|b2
specifier|static
name|Block
name|b2
init|=
operator|new
name|Block
argument_list|(
literal|2
argument_list|,
literal|22
argument_list|,
literal|222
argument_list|)
decl_stmt|;
DECL|field|b3
specifier|static
name|Block
name|b3
init|=
operator|new
name|Block
argument_list|(
literal|3
argument_list|,
literal|33
argument_list|,
literal|333
argument_list|)
decl_stmt|;
DECL|field|b4
specifier|static
name|Block
name|b4
init|=
operator|new
name|Block
argument_list|(
literal|4
argument_list|,
literal|44
argument_list|,
literal|444
argument_list|)
decl_stmt|;
annotation|@
name|Test
DECL|method|testEmptyReport ()
specifier|public
name|void
name|testEmptyReport
parameter_list|()
block|{
name|BlockListAsLongs
name|blocks
init|=
name|checkReport
argument_list|()
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0
block|,
literal|0
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
argument_list|,
name|blocks
operator|.
name|getBlockListAsLongs
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFinalized ()
specifier|public
name|void
name|testFinalized
parameter_list|()
block|{
name|BlockListAsLongs
name|blocks
init|=
name|checkReport
argument_list|(
operator|new
name|FinalizedReplica
argument_list|(
name|b1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|long
index|[]
block|{
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|11
block|,
literal|111
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
argument_list|,
name|blocks
operator|.
name|getBlockListAsLongs
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUc ()
specifier|public
name|void
name|testUc
parameter_list|()
block|{
name|BlockListAsLongs
name|blocks
init|=
name|checkReport
argument_list|(
operator|new
name|ReplicaBeingWritten
argument_list|(
name|b1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0
block|,
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
literal|1
block|,
literal|11
block|,
literal|111
block|,
name|ReplicaState
operator|.
name|RBW
operator|.
name|getValue
argument_list|()
block|}
argument_list|,
name|blocks
operator|.
name|getBlockListAsLongs
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMix ()
specifier|public
name|void
name|testMix
parameter_list|()
block|{
name|BlockListAsLongs
name|blocks
init|=
name|checkReport
argument_list|(
operator|new
name|FinalizedReplica
argument_list|(
name|b1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|FinalizedReplica
argument_list|(
name|b2
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|ReplicaBeingWritten
argument_list|(
name|b3
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|ReplicaWaitingToBeRecovered
argument_list|(
name|b4
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|long
index|[]
block|{
literal|2
block|,
literal|2
block|,
literal|1
block|,
literal|11
block|,
literal|111
block|,
literal|2
block|,
literal|22
block|,
literal|222
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
literal|3
block|,
literal|33
block|,
literal|333
block|,
name|ReplicaState
operator|.
name|RBW
operator|.
name|getValue
argument_list|()
block|,
literal|4
block|,
literal|44
block|,
literal|444
block|,
name|ReplicaState
operator|.
name|RWR
operator|.
name|getValue
argument_list|()
block|}
argument_list|,
name|blocks
operator|.
name|getBlockListAsLongs
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFuzz ()
specifier|public
name|void
name|testFuzz
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|Replica
index|[]
name|replicas
init|=
operator|new
name|Replica
index|[
literal|100000
index|]
decl_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|replicas
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Block
name|b
init|=
operator|new
name|Block
argument_list|(
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|,
name|i
argument_list|,
name|i
operator|<<
literal|4
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|rand
operator|.
name|nextInt
argument_list|(
literal|2
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
name|replicas
index|[
name|i
index|]
operator|=
operator|new
name|FinalizedReplica
argument_list|(
name|b
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|replicas
index|[
name|i
index|]
operator|=
operator|new
name|ReplicaBeingWritten
argument_list|(
name|b
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|replicas
index|[
name|i
index|]
operator|=
operator|new
name|ReplicaWaitingToBeRecovered
argument_list|(
name|b
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|checkReport
argument_list|(
name|replicas
argument_list|)
expr_stmt|;
block|}
DECL|method|checkReport (Replica...replicas)
specifier|private
name|BlockListAsLongs
name|checkReport
parameter_list|(
name|Replica
modifier|...
name|replicas
parameter_list|)
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|Replica
argument_list|>
name|expectedReplicas
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Replica
name|replica
range|:
name|replicas
control|)
block|{
name|expectedReplicas
operator|.
name|put
argument_list|(
name|replica
operator|.
name|getBlockId
argument_list|()
argument_list|,
name|replica
argument_list|)
expr_stmt|;
block|}
name|expectedReplicas
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|expectedReplicas
argument_list|)
expr_stmt|;
comment|// encode the blocks and extract the buffers
name|BlockListAsLongs
name|blocks
init|=
name|BlockListAsLongs
operator|.
name|encode
argument_list|(
name|expectedReplicas
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ByteString
argument_list|>
name|buffers
init|=
name|blocks
operator|.
name|getBlocksBuffers
argument_list|()
decl_stmt|;
comment|// convert to old-style list of longs
name|List
argument_list|<
name|Long
argument_list|>
name|longs
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|long
name|value
range|:
name|blocks
operator|.
name|getBlockListAsLongs
argument_list|()
control|)
block|{
name|longs
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
comment|// decode the buffers and verify its contents
name|BlockListAsLongs
name|decodedBlocks
init|=
name|BlockListAsLongs
operator|.
name|decodeBuffers
argument_list|(
name|expectedReplicas
operator|.
name|size
argument_list|()
argument_list|,
name|buffers
argument_list|)
decl_stmt|;
name|checkReplicas
argument_list|(
name|expectedReplicas
argument_list|,
name|decodedBlocks
argument_list|)
expr_stmt|;
comment|// decode the long and verify its contents
name|BlockListAsLongs
name|decodedList
init|=
name|BlockListAsLongs
operator|.
name|decodeLongs
argument_list|(
name|longs
argument_list|)
decl_stmt|;
name|checkReplicas
argument_list|(
name|expectedReplicas
argument_list|,
name|decodedList
argument_list|)
expr_stmt|;
return|return
name|blocks
return|;
block|}
DECL|method|checkReplicas (Map<Long,Replica> expectedReplicas, BlockListAsLongs decodedBlocks)
specifier|private
name|void
name|checkReplicas
parameter_list|(
name|Map
argument_list|<
name|Long
argument_list|,
name|Replica
argument_list|>
name|expectedReplicas
parameter_list|,
name|BlockListAsLongs
name|decodedBlocks
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expectedReplicas
operator|.
name|size
argument_list|()
argument_list|,
name|decodedBlocks
operator|.
name|getNumberOfBlocks
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|Replica
argument_list|>
name|reportReplicas
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|expectedReplicas
argument_list|)
decl_stmt|;
for|for
control|(
name|BlockReportReplica
name|replica
range|:
name|decodedBlocks
control|)
block|{
name|assertNotNull
argument_list|(
name|replica
argument_list|)
expr_stmt|;
name|Replica
name|expected
init|=
name|reportReplicas
operator|.
name|remove
argument_list|(
name|replica
operator|.
name|getBlockId
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|expected
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong bytes"
argument_list|,
name|expected
operator|.
name|getNumBytes
argument_list|()
argument_list|,
name|replica
operator|.
name|getNumBytes
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong genstamp"
argument_list|,
name|expected
operator|.
name|getGenerationStamp
argument_list|()
argument_list|,
name|replica
operator|.
name|getGenerationStamp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong replica state"
argument_list|,
name|expected
operator|.
name|getState
argument_list|()
argument_list|,
name|replica
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|reportReplicas
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDatanodeDetect ()
specifier|public
name|void
name|testDatanodeDetect
parameter_list|()
throws|throws
name|ServiceException
throws|,
name|IOException
block|{
specifier|final
name|AtomicReference
argument_list|<
name|BlockReportRequestProto
argument_list|>
name|request
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
comment|// just capture the outgoing PB
name|DatanodeProtocolPB
name|mockProxy
init|=
name|mock
argument_list|(
name|DatanodeProtocolPB
operator|.
name|class
argument_list|)
decl_stmt|;
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|BlockReportResponseProto
argument_list|>
argument_list|()
block|{
specifier|public
name|BlockReportResponseProto
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
block|{
name|Object
index|[]
name|args
init|=
name|invocation
operator|.
name|getArguments
argument_list|()
decl_stmt|;
name|request
operator|.
name|set
argument_list|(
operator|(
name|BlockReportRequestProto
operator|)
name|args
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
return|return
name|BlockReportResponseProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|mockProxy
argument_list|)
operator|.
name|blockReport
argument_list|(
name|any
argument_list|(
name|RpcController
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|BlockReportRequestProto
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"resource"
argument_list|)
name|DatanodeProtocolClientSideTranslatorPB
name|nn
init|=
operator|new
name|DatanodeProtocolClientSideTranslatorPB
argument_list|(
name|mockProxy
argument_list|)
decl_stmt|;
name|DatanodeRegistration
name|reg
init|=
name|DFSTestUtil
operator|.
name|getLocalDatanodeRegistration
argument_list|()
decl_stmt|;
name|NamespaceInfo
name|nsInfo
init|=
operator|new
name|NamespaceInfo
argument_list|(
literal|1
argument_list|,
literal|"cluster"
argument_list|,
literal|"bp"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|reg
operator|.
name|setNamespaceInfo
argument_list|(
name|nsInfo
argument_list|)
expr_stmt|;
name|Replica
name|r
init|=
operator|new
name|FinalizedReplica
argument_list|(
operator|new
name|Block
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|BlockListAsLongs
name|bbl
init|=
name|BlockListAsLongs
operator|.
name|encode
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|r
argument_list|)
argument_list|)
decl_stmt|;
name|DatanodeStorage
name|storage
init|=
operator|new
name|DatanodeStorage
argument_list|(
literal|"s1"
argument_list|)
decl_stmt|;
name|StorageBlockReport
index|[]
name|sbr
init|=
block|{
operator|new
name|StorageBlockReport
argument_list|(
name|storage
argument_list|,
name|bbl
argument_list|)
block|}
decl_stmt|;
comment|// check DN sends new-style BR
name|request
operator|.
name|set
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|nsInfo
operator|.
name|setCapabilities
argument_list|(
name|Capability
operator|.
name|STORAGE_BLOCK_REPORT_BUFFERS
operator|.
name|getMask
argument_list|()
argument_list|)
expr_stmt|;
name|nn
operator|.
name|blockReport
argument_list|(
name|reg
argument_list|,
literal|"pool"
argument_list|,
name|sbr
argument_list|,
operator|new
name|BlockReportContext
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|BlockReportRequestProto
name|proto
init|=
name|request
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|proto
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|proto
operator|.
name|getReports
argument_list|(
literal|0
argument_list|)
operator|.
name|getBlocksList
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|proto
operator|.
name|getReports
argument_list|(
literal|0
argument_list|)
operator|.
name|getBlocksBuffersList
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// back up to prior version and check DN sends old-style BR
name|request
operator|.
name|set
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|nsInfo
operator|.
name|setCapabilities
argument_list|(
name|Capability
operator|.
name|UNKNOWN
operator|.
name|getMask
argument_list|()
argument_list|)
expr_stmt|;
name|nn
operator|.
name|blockReport
argument_list|(
name|reg
argument_list|,
literal|"pool"
argument_list|,
name|sbr
argument_list|,
operator|new
name|BlockReportContext
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|proto
operator|=
name|request
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|proto
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|proto
operator|.
name|getReports
argument_list|(
literal|0
argument_list|)
operator|.
name|getBlocksList
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|proto
operator|.
name|getReports
argument_list|(
literal|0
argument_list|)
operator|.
name|getBlocksBuffersList
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

