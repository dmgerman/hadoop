begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.blockmanagement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
package|;
end_package

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|type
operator|.
name|TypeReference
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|SlowPeerTracker
operator|.
name|ReportForJson
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|FakeTimer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|Is
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Tests for {@link SlowPeerTracker}.  */
end_comment

begin_class
DECL|class|TestSlowPeerTracker
specifier|public
class|class
name|TestSlowPeerTracker
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestSlowPeerTracker
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Set a timeout for every test case.    */
annotation|@
name|Rule
DECL|field|testTimeout
specifier|public
name|Timeout
name|testTimeout
init|=
operator|new
name|Timeout
argument_list|(
literal|300_000
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|tracker
specifier|private
name|SlowPeerTracker
name|tracker
decl_stmt|;
DECL|field|timer
specifier|private
name|FakeTimer
name|timer
decl_stmt|;
DECL|field|reportValidityMs
specifier|private
name|long
name|reportValidityMs
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
name|timer
operator|=
operator|new
name|FakeTimer
argument_list|()
expr_stmt|;
name|tracker
operator|=
operator|new
name|SlowPeerTracker
argument_list|(
name|conf
argument_list|,
name|timer
argument_list|)
expr_stmt|;
name|reportValidityMs
operator|=
name|tracker
operator|.
name|getReportValidityMs
argument_list|()
expr_stmt|;
block|}
comment|/**    * Edge case, there are no reports to retrieve.    */
annotation|@
name|Test
DECL|method|testEmptyReports ()
specifier|public
name|void
name|testEmptyReports
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|tracker
operator|.
name|getReportsForAllDataNodes
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tracker
operator|.
name|getReportsForNode
argument_list|(
literal|"noSuchNode"
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReportsAreRetrieved ()
specifier|public
name|void
name|testReportsAreRetrieved
parameter_list|()
block|{
name|tracker
operator|.
name|addReport
argument_list|(
literal|"node2"
argument_list|,
literal|"node1"
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|addReport
argument_list|(
literal|"node3"
argument_list|,
literal|"node1"
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|addReport
argument_list|(
literal|"node3"
argument_list|,
literal|"node2"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tracker
operator|.
name|getReportsForAllDataNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tracker
operator|.
name|getReportsForNode
argument_list|(
literal|"node2"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tracker
operator|.
name|getReportsForNode
argument_list|(
literal|"node3"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tracker
operator|.
name|getReportsForNode
argument_list|(
literal|"node1"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that when all reports are expired, we get back nothing.    */
annotation|@
name|Test
DECL|method|testAllReportsAreExpired ()
specifier|public
name|void
name|testAllReportsAreExpired
parameter_list|()
block|{
name|tracker
operator|.
name|addReport
argument_list|(
literal|"node2"
argument_list|,
literal|"node1"
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|addReport
argument_list|(
literal|"node3"
argument_list|,
literal|"node2"
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|addReport
argument_list|(
literal|"node1"
argument_list|,
literal|"node3"
argument_list|)
expr_stmt|;
comment|// No reports should expire after 1ms.
name|timer
operator|.
name|advance
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tracker
operator|.
name|getReportsForAllDataNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
comment|// All reports should expire after REPORT_VALIDITY_MS.
name|timer
operator|.
name|advance
argument_list|(
name|reportValidityMs
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tracker
operator|.
name|getReportsForAllDataNodes
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tracker
operator|.
name|getReportsForNode
argument_list|(
literal|"node1"
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tracker
operator|.
name|getReportsForNode
argument_list|(
literal|"node2"
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tracker
operator|.
name|getReportsForNode
argument_list|(
literal|"node3"
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the case when a subset of reports has expired.    * Ensure that we only get back non-expired reports.    */
annotation|@
name|Test
DECL|method|testSomeReportsAreExpired ()
specifier|public
name|void
name|testSomeReportsAreExpired
parameter_list|()
block|{
name|tracker
operator|.
name|addReport
argument_list|(
literal|"node3"
argument_list|,
literal|"node1"
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|addReport
argument_list|(
literal|"node3"
argument_list|,
literal|"node2"
argument_list|)
expr_stmt|;
name|timer
operator|.
name|advance
argument_list|(
name|reportValidityMs
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|addReport
argument_list|(
literal|"node3"
argument_list|,
literal|"node4"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tracker
operator|.
name|getReportsForAllDataNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tracker
operator|.
name|getReportsForNode
argument_list|(
literal|"node3"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tracker
operator|.
name|getReportsForNode
argument_list|(
literal|"node3"
argument_list|)
operator|.
name|contains
argument_list|(
literal|"node4"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the case when an expired report is replaced by a valid one.    */
annotation|@
name|Test
DECL|method|testReplacement ()
specifier|public
name|void
name|testReplacement
parameter_list|()
block|{
name|tracker
operator|.
name|addReport
argument_list|(
literal|"node2"
argument_list|,
literal|"node1"
argument_list|)
expr_stmt|;
name|timer
operator|.
name|advance
argument_list|(
name|reportValidityMs
argument_list|)
expr_stmt|;
comment|// Expire the report.
name|assertThat
argument_list|(
name|tracker
operator|.
name|getReportsForAllDataNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// This should replace the expired report with a newer valid one.
name|tracker
operator|.
name|addReport
argument_list|(
literal|"node2"
argument_list|,
literal|"node1"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tracker
operator|.
name|getReportsForAllDataNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tracker
operator|.
name|getReportsForNode
argument_list|(
literal|"node2"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetJson ()
specifier|public
name|void
name|testGetJson
parameter_list|()
throws|throws
name|IOException
block|{
name|tracker
operator|.
name|addReport
argument_list|(
literal|"node1"
argument_list|,
literal|"node2"
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|addReport
argument_list|(
literal|"node2"
argument_list|,
literal|"node3"
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|addReport
argument_list|(
literal|"node2"
argument_list|,
literal|"node1"
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|addReport
argument_list|(
literal|"node4"
argument_list|,
literal|"node1"
argument_list|)
expr_stmt|;
specifier|final
name|Set
argument_list|<
name|ReportForJson
argument_list|>
name|reports
init|=
name|getAndDeserializeJson
argument_list|()
decl_stmt|;
comment|// And ensure its contents are what we expect.
name|assertThat
argument_list|(
name|reports
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isNodeInReports
argument_list|(
name|reports
argument_list|,
literal|"node1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isNodeInReports
argument_list|(
name|reports
argument_list|,
literal|"node2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isNodeInReports
argument_list|(
name|reports
argument_list|,
literal|"node4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isNodeInReports
argument_list|(
name|reports
argument_list|,
literal|"node3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetJsonSizeIsLimited ()
specifier|public
name|void
name|testGetJsonSizeIsLimited
parameter_list|()
throws|throws
name|IOException
block|{
name|tracker
operator|.
name|addReport
argument_list|(
literal|"node1"
argument_list|,
literal|"node2"
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|addReport
argument_list|(
literal|"node1"
argument_list|,
literal|"node3"
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|addReport
argument_list|(
literal|"node2"
argument_list|,
literal|"node3"
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|addReport
argument_list|(
literal|"node2"
argument_list|,
literal|"node4"
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|addReport
argument_list|(
literal|"node3"
argument_list|,
literal|"node4"
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|addReport
argument_list|(
literal|"node3"
argument_list|,
literal|"node5"
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|addReport
argument_list|(
literal|"node4"
argument_list|,
literal|"node6"
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|addReport
argument_list|(
literal|"node5"
argument_list|,
literal|"node6"
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|addReport
argument_list|(
literal|"node5"
argument_list|,
literal|"node7"
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|addReport
argument_list|(
literal|"node6"
argument_list|,
literal|"node7"
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|addReport
argument_list|(
literal|"node6"
argument_list|,
literal|"node8"
argument_list|)
expr_stmt|;
specifier|final
name|Set
argument_list|<
name|ReportForJson
argument_list|>
name|reports
init|=
name|getAndDeserializeJson
argument_list|()
decl_stmt|;
comment|// Ensure that node4 is not in the list since it was
comment|// tagged by just one peer and we already have 5 other nodes.
name|assertFalse
argument_list|(
name|isNodeInReports
argument_list|(
name|reports
argument_list|,
literal|"node4"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Remaining nodes should be in the list.
name|assertTrue
argument_list|(
name|isNodeInReports
argument_list|(
name|reports
argument_list|,
literal|"node1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isNodeInReports
argument_list|(
name|reports
argument_list|,
literal|"node2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isNodeInReports
argument_list|(
name|reports
argument_list|,
literal|"node3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isNodeInReports
argument_list|(
name|reports
argument_list|,
literal|"node5"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isNodeInReports
argument_list|(
name|reports
argument_list|,
literal|"node6"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLowRankedElementsIgnored ()
specifier|public
name|void
name|testLowRankedElementsIgnored
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Insert 5 nodes with 2 peer reports each.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
operator|++
name|i
control|)
block|{
name|tracker
operator|.
name|addReport
argument_list|(
literal|"node"
operator|+
name|i
argument_list|,
literal|"reporter1"
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|addReport
argument_list|(
literal|"node"
operator|+
name|i
argument_list|,
literal|"reporter2"
argument_list|)
expr_stmt|;
block|}
comment|// Insert 10 nodes with 1 peer report each.
for|for
control|(
name|int
name|i
init|=
literal|10
init|;
name|i
operator|<
literal|20
condition|;
operator|++
name|i
control|)
block|{
name|tracker
operator|.
name|addReport
argument_list|(
literal|"node"
operator|+
name|i
argument_list|,
literal|"reporter1"
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Set
argument_list|<
name|ReportForJson
argument_list|>
name|reports
init|=
name|getAndDeserializeJson
argument_list|()
decl_stmt|;
comment|// Ensure that only the first 5 nodes with two reports each were
comment|// included in the JSON.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
operator|++
name|i
control|)
block|{
name|assertTrue
argument_list|(
name|isNodeInReports
argument_list|(
name|reports
argument_list|,
literal|"node"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isNodeInReports ( Set<ReportForJson> reports, String node)
specifier|private
name|boolean
name|isNodeInReports
parameter_list|(
name|Set
argument_list|<
name|ReportForJson
argument_list|>
name|reports
parameter_list|,
name|String
name|node
parameter_list|)
block|{
for|for
control|(
name|ReportForJson
name|report
range|:
name|reports
control|)
block|{
if|if
condition|(
name|report
operator|.
name|getSlowNode
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|node
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|getAndDeserializeJson ()
specifier|private
name|Set
argument_list|<
name|ReportForJson
argument_list|>
name|getAndDeserializeJson
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|json
init|=
name|tracker
operator|.
name|getJson
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Got JSON: {}"
argument_list|,
name|json
argument_list|)
expr_stmt|;
return|return
operator|(
operator|new
name|ObjectMapper
argument_list|()
operator|)
operator|.
name|readValue
argument_list|(
name|json
argument_list|,
operator|new
name|TypeReference
argument_list|<
name|Set
argument_list|<
name|ReportForJson
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
return|;
block|}
block|}
end_class

end_unit

